{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "/home/liumengjiao/Desktop/CI/Benchmark/data/changesInfo/",
  "properties": {
    "trigger.tests": "com.google.javascript.jscomp.UnreachableCodeEliminationTest::testCascadedRemovalOfUnlessUnconditonalJumps,com.google.javascript.jscomp.UnreachableCodeEliminationTest::testIssue311",
    "test.dir": "test",
    "clz.modified": "com.google.javascript.jscomp.UnreachableCodeElimination",
    "src.dir": "src"
  },
  "timeoutSecond": 100,
  "proj": "Closure",
  "id": "85",
  "workingDir": "../bugs/Closure_85_buggy",
  "buggyCommit": "2410995673fcaaaec5d4d48eae9139127c64acac",
  "inducingCommit": "2581851be3b2202bd48d4c76889b020f4cecebf6",
  "originalCommit": "7e0d71b3d68ad4788a094d8618e2b0aa474cf3db",
  "bug_name": "Closure_85",
  "derive": "defects4j",
  "original_fixing_commit": "21a2103d7fa5664ea324ef9ee25b4a8922e50955",
  "buildFiles_changed": false,
  "regression": false,
  "inducing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/jscomp/UnreachableCodeElimination.java",
        "src/com/google/javascript/jscomp/UnreachableCodeElimination.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [
            "com.google.javascript.jscomp.UnreachableCodeElimination:UnreachableCodeElimination:[AbstractCompiler compiler, boolean removeNoOpStatements]:null",
            "com.google.javascript.jscomp.UnreachableCodeElimination:enterScope:[NodeTraversal t]:void",
            "com.google.javascript.jscomp.UnreachableCodeElimination:removeDeadExprStatementSafely:[Node n]:void",
            "com.google.javascript.jscomp.UnreachableCodeElimination:exitScope:[NodeTraversal t]:void",
            "com.google.javascript.jscomp.UnreachableCodeElimination:process:[Node externs, Node root]:void",
            "com.google.javascript.jscomp.UnreachableCodeElimination:visit:[NodeTraversal t, Node n, Node parent]:void",
            "com.google.javascript.jscomp.UnreachableCodeElimination:tryRemoveUnconditionalBranching:[Node n]:Node"
          ],
          "num": 7
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "-1"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "35",
            "36",
            "37",
            "38",
            "39",
            "40",
            "41",
            "42",
            "43",
            "44",
            "45",
            "46",
            "47",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57",
            "58",
            "59",
            "60",
            "61",
            "62",
            "63",
            "64",
            "65",
            "66",
            "67",
            "68",
            "69",
            "70",
            "71",
            "72",
            "73",
            "74",
            "75",
            "76",
            "77",
            "78",
            "79",
            "80",
            "81",
            "82",
            "83",
            "84",
            "85",
            "86",
            "87",
            "88",
            "89",
            "90",
            "91",
            "92",
            "93",
            "94",
            "95",
            "96",
            "97",
            "98",
            "99",
            "100",
            "101",
            "102",
            "103",
            "104",
            "105",
            "106",
            "107",
            "108",
            "109",
            "110",
            "111",
            "112",
            "113",
            "114",
            "115",
            "116",
            "117",
            "118",
            "119",
            "120",
            "121",
            "122",
            "123",
            "124",
            "125",
            "126",
            "127",
            "128",
            "129",
            "130",
            "131",
            "132",
            "133",
            "134",
            "135",
            "136",
            "137",
            "138",
            "139",
            "140",
            "141",
            "142",
            "143",
            "144",
            "145",
            "146",
            "147",
            "148",
            "149",
            "150",
            "151",
            "152",
            "153",
            "154",
            "155",
            "156",
            "157",
            "158",
            "159",
            "160",
            "161",
            "162",
            "163",
            "164",
            "165",
            "166",
            "167",
            "168",
            "169",
            "170",
            "171",
            "172",
            "173",
            "174",
            "175",
            "176",
            "177",
            "178",
            "179",
            "180",
            "181",
            "182",
            "183",
            "184",
            "185",
            "186",
            "187",
            "188",
            "189",
            "190",
            "191",
            "192",
            "193",
            "194",
            "195",
            "196",
            "197",
            "198",
            "199",
            "200",
            "201",
            "202",
            "203",
            "204",
            "205",
            "206",
            "207",
            "208",
            "209",
            "210",
            "211",
            "212",
            "213",
            "214",
            "215",
            "216",
            "217",
            "218",
            "219",
            "220",
            "221",
            "222",
            "223",
            "224",
            "225",
            "226",
            "227",
            "228",
            "229",
            "230",
            "231",
            "232",
            "233",
            "234",
            "235",
            "236",
            "237",
            "238",
            "239",
            "240",
            "241",
            "242",
            "243"
          ],
          "num": 243
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/jscomp/UnreachableCodeElimination.java b/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\nnew file mode 100644\nindex 0000000..0a986b3\n--- /dev/null\n+++ b/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\n@@ -0,0 +1,243 @@\n+/*\n+ * Copyright 2008 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.javascript.jscomp;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.javascript.jscomp.ControlFlowGraph.Branch;\n+import com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback;\n+import com.google.javascript.jscomp.NodeTraversal.ScopedCallback;\n+import com.google.javascript.jscomp.graph.GraphReachability;\n+import com.google.javascript.jscomp.graph.DiGraph.DiGraphEdge;\n+import com.google.javascript.jscomp.graph.DiGraph.DiGraphNode;\n+import com.google.javascript.rhino.Node;\n+import com.google.javascript.rhino.Token;\n+\n+import java.util.Deque;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+/**\n+ * Removes dead code from a parse tree. The kinds of dead code that this pass\n+ * removes are:\n+ *  - Any code following a return statement, such as the \u003ccode\u003ealert\u003c/code\u003e\n+ *    call in: \u003ccode\u003eif (x) { return; alert(\u0027unreachable\u0027); }\u003c/code\u003e.\n+ *  - Statements that have no side effects, such as:\n+ *    \u003ccode\u003ea.b.MyClass.prototype.propertyName;\u003c/code\u003e or \u003ccode\u003etrue;\u003c/code\u003e.\n+ *    That first kind of statement sometimes appears intentionally, so that\n+ *    prototype properties can be annotated using JSDoc without actually\n+ *    being initialized.\n+ *\n+*\n+ */\n+class UnreachableCodeElimination extends AbstractPostOrderCallback\n+    implements CompilerPass, ScopedCallback  {\n+  private static final Logger logger \u003d\n+    Logger.getLogger(UnreachableCodeElimination.class.getName());\n+\n+  private final AbstractCompiler compiler;\n+  private final boolean removeNoOpStatements;\n+\n+  Deque\u003cControlFlowGraph\u003cNode\u003e\u003e cfgStack \u003d\n+      new LinkedList\u003cControlFlowGraph\u003cNode\u003e\u003e();\n+\n+  ControlFlowGraph\u003cNode\u003e curCfg \u003d null;\n+\n+  UnreachableCodeElimination(AbstractCompiler compiler,\n+      boolean removeNoOpStatements) {\n+    this.compiler \u003d compiler;\n+    this.removeNoOpStatements \u003d removeNoOpStatements;\n+  }\n+\n+  @Override\n+  public void enterScope(NodeTraversal t) {\n+    Scope scope \u003d t.getScope();\n+\n+    // Computes the control flow graph.\n+    ControlFlowAnalysis cfa \u003d new ControlFlowAnalysis(compiler, false);\n+    cfa.process(null, scope.getRootNode());\n+    cfgStack.push(curCfg);\n+    curCfg \u003d cfa.getCfg();\n+\n+    new GraphReachability\u003cNode, ControlFlowGraph.Branch\u003e(curCfg)\n+        .compute(curCfg.getEntry().getValue());\n+  }\n+\n+  @Override\n+  public void exitScope(NodeTraversal t) {\n+    curCfg \u003d cfgStack.pop();\n+  }\n+\n+  @Override\n+  public void process(Node externs, Node root) {\n+    NodeTraversal.traverse(compiler, root, this);\n+  }\n+\n+  @Override\n+  public void visit(NodeTraversal t, Node n, Node parent) {\n+    if (parent \u003d\u003d null) {\n+      return;\n+    }\n+    if (n.getType() \u003d\u003d Token.FUNCTION || n.getType() \u003d\u003d Token.SCRIPT) {\n+      return;\n+    }\n+    // Removes TRYs that had its CATCH removed and/or empty FINALLY.\n+    // TODO(dcc): Move the parts of this that don\u0027t require a control flow\n+    // graph to PeepholeRemoveDeadCode\n+    if (n.getType() \u003d\u003d Token.TRY) {\n+      Node body \u003d n.getFirstChild();\n+      Node catchOrFinallyBlock \u003d body.getNext();\n+      Node finallyBlock \u003d catchOrFinallyBlock.getNext();\n+\n+      if (!catchOrFinallyBlock.hasChildren() \u0026\u0026\n+          (finallyBlock \u003d\u003d null || !finallyBlock.hasChildren())) {\n+        n.removeChild(body);\n+        parent.replaceChild(n, body);\n+        compiler.reportCodeChange();\n+        n \u003d body;\n+      }\n+    }\n+    DiGraphNode\u003cNode, Branch\u003e gNode \u003d curCfg.getDirectedGraphNode(n);\n+    if (gNode \u003d\u003d null) { // Not in CFG.\n+      return;\n+    }\n+    if (gNode.getAnnotation() !\u003d GraphReachability.REACHABLE ||\n+        (removeNoOpStatements \u0026\u0026 !NodeUtil.mayHaveSideEffects(n))) {\n+      removeDeadExprStatementSafely(n);\n+      return;\n+    }\n+\n+    tryRemoveUnconditionalBranching(n);\n+  }\n+\n+  /**\n+   * Tries to remove n if an unconditional branch node (break, continue or\n+   * return) if the target of n is the same as the the follow of n. That is, if\n+   * we remove n, the control flow remains the same. Also if n targets to\n+   * another unconditional branch, this function will recursively try to remove\n+   * the target branch as well. The reason why we want to cascade this removal\n+   * is because we only run this pass once. If we have code such as\n+   *\n+   * break -\u003e break -\u003e break\n+   *\n+   * where all 3 break\u0027s are useless. The order of removal matters. When we\n+   * first look at the first break, we see that it branches to the 2nd break.\n+   * However, if we remove the last break, the 2nd break becomes useless and\n+   * finally the first break becomes useless as well.\n+   *\n+   * @return The target of this jump. If the target is also useless jump,\n+   *     the target of that useless jump recursively.\n+   */\n+  @SuppressWarnings(\"fallthrough\")\n+  private Node tryRemoveUnconditionalBranching(Node n) {\n+    /*\n+     * For each of the unconditional branching control flow node, check to see\n+     * if the ControlFlowAnalysis.computeFollowNode of that node is same as\n+     * the branching target. If it is, the branch node is safe to be removed.\n+     *\n+     * This is not as clever as MinimizeExitPoints because it doesn\u0027t do any\n+     * if-else conversion but it handles more complicated switch statements\n+     * much nicer.\n+     */\n+\n+    // If n is null the target is the end of the function, nothing to do.\n+    if (n \u003d\u003d null) {\n+       return n;\n+    }\n+\n+    DiGraphNode\u003cNode, Branch\u003e gNode \u003d curCfg.getDirectedGraphNode(n);\n+\n+    if (gNode \u003d\u003d null) {\n+      return n;\n+    }\n+\n+    // If the parent is null, this mean whatever node it was there is now\n+    // useless and it has been removed by other logics in this pass. That node\n+    // while no longer exists in the AST, is still in the CFG because we\n+    // never update the graph as nodes are removed.\n+    if (n.getParent() \u003d\u003d null) {\n+      List\u003cDiGraphEdge\u003cNode,Branch\u003e\u003e outEdges \u003d gNode.getOutEdges();\n+      if (outEdges.size() \u003d\u003d 1) {\n+        return tryRemoveUnconditionalBranching(\n+          outEdges.get(0).getDestination().getValue());\n+      }\n+    }\n+\n+    switch (n.getType()) {\n+      case Token.BLOCK:\n+        if (n.hasChildren()) {\n+          Node first \u003d n.getFirstChild();\n+          return tryRemoveUnconditionalBranching(first);\n+        } else {\n+          return tryRemoveUnconditionalBranching(\n+            ControlFlowAnalysis.computeFollowNode(n));\n+        }\n+      case Token.RETURN:\n+        if (n.hasChildren()) {\n+          break;\n+        }\n+      case Token.BREAK:\n+      case Token.CONTINUE:\n+\n+        // We are looking for a control flow changing statement that always\n+        // branches to the same node. If removing it the control flow still\n+        // branches to that same node. It is safe to remove it.\n+        List\u003cDiGraphEdge\u003cNode,Branch\u003e\u003e outEdges \u003d gNode.getOutEdges();\n+        if (outEdges.size() \u003d\u003d 1 \u0026\u0026\n+\n+            // If there is a next node, there is no chance this jump is useless.\n+            (n.getNext() \u003d\u003d null || n.getNext().getType() \u003d\u003d Token.FUNCTION)) {\n+          Preconditions.checkState(outEdges.get(0).getValue() \u003d\u003d Branch.UNCOND);\n+          Node fallThrough \u003d tryRemoveUnconditionalBranching(\n+            ControlFlowAnalysis.computeFollowNode(n));\n+          Node nextCfgNode \u003d outEdges.get(0).getDestination().getValue();\n+          if (nextCfgNode \u003d\u003d fallThrough) {\n+            removeDeadExprStatementSafely(n);\n+            return fallThrough;\n+          }\n+\n+        }\n+    }\n+    return n;\n+  }\n+\n+  private void removeDeadExprStatementSafely(Node n) {\n+    if (n.getType() \u003d\u003d Token.EMPTY ||\n+        (n.getType() \u003d\u003d Token.BLOCK \u0026\u0026 !n.hasChildren())) {\n+      // Not always trivial to remove, let FoldContants work its magic later.\n+      return;\n+    }\n+    // Removing an unreachable DO node is messy because it means we still have\n+    // to execute one iteration. If the DO\u0027s body has breaks in the middle, it\n+    // can get even more trickier and code size might actually increase.\n+    switch (n.getType()) {\n+      case Token.DO:\n+      case Token.TRY:\n+      case Token.CATCH:\n+      case Token.FINALLY:\n+        return;\n+    }\n+\n+    NodeUtil.redeclareVarsInsideBranch(n);\n+    compiler.reportCodeChange();\n+    if (logger.isLoggable(Level.FINE)) {\n+      logger.fine(\"Removing \" + n.toString());\n+    }\n+    NodeUtil.removeChild(n.getParent(), n);\n+  }\n+}\n",
      "operations": [
        {
          "type": "insert-node",
          "from": "",
          "to": "MethodDeclaration [4299,7886]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [4299,5221]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SingleMemberAnnotation [5224,5256]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: private [5259,5266]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SimpleType [5267,5271]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: tryRemoveUnconditionalBranching [5272,5303]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SingleVariableDeclaration [5304,5310]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Block [5312,7886]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [4256,4291]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [5820,5859]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [5865,5930]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [5936,5978]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [6262,6511]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ReturnStatement [7873,7882]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SwitchCase [6546,6563]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [6572,6825]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "VariableDeclarationStatement [7654,7717]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodInvocation [8708,8721]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SimpleType [7654,7658]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "VariableDeclarationFragment [7659,7716]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "MethodInvocation [7556,7642]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: nextCfgNode [7659,7670]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: nextCfgNode [7732,7743]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ReturnStatement [7820,7839]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: tryRemoveUnconditionalBranching [7556,7587]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "METHOD_INVOCATION_ARGUMENTS [7601,7641]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SingleMemberAnnotation [3106,3138]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: parent [4265,4271]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: parent [5642,5648]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SingleVariableDeclaration [5737,5748]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: parent [6517,6523]",
          "to": ""
        }
      ]
    }
  ],
  "inducing_type": {
    "add_classes": {
      "qualified_names": [
        "gen/com/google/javascript/jscomp/FunctionInfo.java",
        "gen/com/google/javascript/jscomp/FunctionInformationMap.java",
        "gen/com/google/javascript/jscomp/FunctionInformationMapOrBuilder.java",
        "gen/com/google/javascript/jscomp/Instrumentation.java",
        "gen/com/google/javascript/jscomp/InstrumentationOrBuilder.java",
        "gen/com/google/javascript/jscomp/InstrumentationTemplate.java",
        "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "src/com/google/javascript/jscomp/AbstractCompiler.java",
        "src/com/google/javascript/jscomp/AbstractMessageFormatter.java",
        "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java",
        "src/com/google/javascript/jscomp/AliasExternals.java",
        "src/com/google/javascript/jscomp/AliasKeywords.java",
        "src/com/google/javascript/jscomp/AliasStrings.java",
        "src/com/google/javascript/jscomp/AmbiguateProperties.java",
        "src/com/google/javascript/jscomp/AnalyzeNameReferences.java",
        "src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java",
        "src/com/google/javascript/jscomp/AnonymousFunctionNamingCallback.java",
        "src/com/google/javascript/jscomp/AnonymousFunctionNamingPolicy.java",
        "src/com/google/javascript/jscomp/AstChangeProxy.java",
        "src/com/google/javascript/jscomp/AstParallelizer.java",
        "src/com/google/javascript/jscomp/BasicErrorManager.java",
        "src/com/google/javascript/jscomp/CallGraph.java",
        "src/com/google/javascript/jscomp/ChainCalls.java",
        "src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java",
        "src/com/google/javascript/jscomp/CheckAccessControls.java",
        "src/com/google/javascript/jscomp/CheckAccidentalSemicolon.java",
        "src/com/google/javascript/jscomp/CheckGlobalNames.java",
        "src/com/google/javascript/jscomp/CheckGlobalThis.java",
        "src/com/google/javascript/jscomp/CheckLevel.java",
        "src/com/google/javascript/jscomp/CheckLevelLegacy.java",
        "src/com/google/javascript/jscomp/CheckMissingGetCssName.java",
        "src/com/google/javascript/jscomp/CheckMissingReturn.java",
        "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java",
        "src/com/google/javascript/jscomp/CheckProvides.java",
        "src/com/google/javascript/jscomp/CheckRegExp.java",
        "src/com/google/javascript/jscomp/CheckRequiresForConstructors.java",
        "src/com/google/javascript/jscomp/CheckSideEffects.java",
        "src/com/google/javascript/jscomp/CheckUnreachableCode.java",
        "src/com/google/javascript/jscomp/ClosureCodeRemoval.java",
        "src/com/google/javascript/jscomp/ClosureCodingConvention.java",
        "src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java",
        "src/com/google/javascript/jscomp/CoalesceVariableNames.java",
        "src/com/google/javascript/jscomp/CodeChangeHandler.java",
        "src/com/google/javascript/jscomp/CodeConsumer.java",
        "src/com/google/javascript/jscomp/CodeGenerator.java",
        "src/com/google/javascript/jscomp/CodePrinter.java",
        "src/com/google/javascript/jscomp/CodingConvention.java",
        "src/com/google/javascript/jscomp/CollapseAnonymousFunctions.java",
        "src/com/google/javascript/jscomp/CollapseProperties.java",
        "src/com/google/javascript/jscomp/CollapseVariableDeclarations.java",
        "src/com/google/javascript/jscomp/CombinedCompilerPass.java",
        "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "src/com/google/javascript/jscomp/CompilationLevel.java",
        "src/com/google/javascript/jscomp/Compiler.java",
        "src/com/google/javascript/jscomp/CompilerInput.java",
        "src/com/google/javascript/jscomp/CompilerOptions.java",
        "src/com/google/javascript/jscomp/CompilerPass.java",
        "src/com/google/javascript/jscomp/ComposeWarningsGuard.java",
        "src/com/google/javascript/jscomp/ConcreteType.java",
        "src/com/google/javascript/jscomp/ConstCheck.java",
        "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "src/com/google/javascript/jscomp/ControlFlowGraph.java",
        "src/com/google/javascript/jscomp/ControlStructureCheck.java",
        "src/com/google/javascript/jscomp/ConvertToDottedProperties.java",
        "src/com/google/javascript/jscomp/CreateSyntheticBlocks.java",
        "src/com/google/javascript/jscomp/CrossModuleCodeMotion.java",
        "src/com/google/javascript/jscomp/CrossModuleMethodMotion.java",
        "src/com/google/javascript/jscomp/CssRenamingMap.java",
        "src/com/google/javascript/jscomp/CustomPassExecutionTime.java",
        "src/com/google/javascript/jscomp/DataFlowAnalysis.java",
        "src/com/google/javascript/jscomp/DeadAssignmentsElimination.java",
        "src/com/google/javascript/jscomp/DefaultCodingConvention.java",
        "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "src/com/google/javascript/jscomp/DefinitionProvider.java",
        "src/com/google/javascript/jscomp/DefinitionSite.java",
        "src/com/google/javascript/jscomp/DefinitionsRemover.java",
        "src/com/google/javascript/jscomp/Denormalize.java",
        "src/com/google/javascript/jscomp/DevirtualizePrototypeMethods.java",
        "src/com/google/javascript/jscomp/DiagnosticGroup.java",
        "src/com/google/javascript/jscomp/DiagnosticGroupWarningsGuard.java",
        "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "src/com/google/javascript/jscomp/DiagnosticType.java",
        "src/com/google/javascript/jscomp/DisambiguateProperties.java",
        "src/com/google/javascript/jscomp/DotFormatter.java",
        "src/com/google/javascript/jscomp/ErrorFormat.java",
        "src/com/google/javascript/jscomp/ErrorManager.java",
        "src/com/google/javascript/jscomp/ErrorPass.java",
        "src/com/google/javascript/jscomp/ExportTestFunctions.java",
        "src/com/google/javascript/jscomp/ExpressionDecomposer.java",
        "src/com/google/javascript/jscomp/ExternExportsPass.java",
        "src/com/google/javascript/jscomp/ExtractPrototypeMemberDeclarations.java",
        "src/com/google/javascript/jscomp/FindExportableNodes.java",
        "src/com/google/javascript/jscomp/FlowScope.java",
        "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "src/com/google/javascript/jscomp/FunctionArgumentInjector.java",
        "src/com/google/javascript/jscomp/FunctionInjector.java",
        "src/com/google/javascript/jscomp/FunctionNames.java",
        "src/com/google/javascript/jscomp/FunctionRewriter.java",
        "src/com/google/javascript/jscomp/FunctionToBlockMutator.java",
        "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "src/com/google/javascript/jscomp/GatherRawExports.java",
        "src/com/google/javascript/jscomp/GatherSideEffectSubexpressionsCallback.java",
        "src/com/google/javascript/jscomp/GenerateExports.java",
        "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "src/com/google/javascript/jscomp/GoogleCodingConvention.java",
        "src/com/google/javascript/jscomp/GroupVariableDeclarations.java",
        "src/com/google/javascript/jscomp/IgnoreCajaProperties.java",
        "src/com/google/javascript/jscomp/InferJSDocInfo.java",
        "src/com/google/javascript/jscomp/InlineCostEstimator.java",
        "src/com/google/javascript/jscomp/InlineFunctions.java",
        "src/com/google/javascript/jscomp/InlineGetters.java",
        "src/com/google/javascript/jscomp/InlineVariables.java",
        "src/com/google/javascript/jscomp/InstrumentFunctions.java",
        "src/com/google/javascript/jscomp/InvocationsCallback.java",
        "src/com/google/javascript/jscomp/JSError.java",
        "src/com/google/javascript/jscomp/JSModule.java",
        "src/com/google/javascript/jscomp/JSModuleGraph.java",
        "src/com/google/javascript/jscomp/JSSourceFile.java",
        "src/com/google/javascript/jscomp/JoinOp.java",
        "src/com/google/javascript/jscomp/JsAst.java",
        "src/com/google/javascript/jscomp/JsMessage.java",
        "src/com/google/javascript/jscomp/JsMessageDefinition.java",
        "src/com/google/javascript/jscomp/JsMessageExtractor.java",
        "src/com/google/javascript/jscomp/JsMessageVisitor.java",
        "src/com/google/javascript/jscomp/LatticeElement.java",
        "src/com/google/javascript/jscomp/LightweightMessageFormatter.java",
        "src/com/google/javascript/jscomp/LineNumberCheck.java",
        "src/com/google/javascript/jscomp/LinkedFlowScope.java",
        "src/com/google/javascript/jscomp/LiveVariablesAnalysis.java",
        "src/com/google/javascript/jscomp/LocaleUtil.java",
        "src/com/google/javascript/jscomp/LoggerErrorManager.java",
        "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "src/com/google/javascript/jscomp/MarkNoSideEffectCalls.java",
        "src/com/google/javascript/jscomp/MaybeReachingVariableUse.java",
        "src/com/google/javascript/jscomp/MemoizedScopeCreator.java",
        "src/com/google/javascript/jscomp/MessageBundle.java",
        "src/com/google/javascript/jscomp/MessageFormatter.java",
        "src/com/google/javascript/jscomp/MethodCompilerPass.java",
        "src/com/google/javascript/jscomp/MinimizeExitPoints.java",
        "src/com/google/javascript/jscomp/MoveFunctionDeclarations.java",
        "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java",
        "src/com/google/javascript/jscomp/NameAnalyzer.java",
        "src/com/google/javascript/jscomp/NameAnonymousFunctions.java",
        "src/com/google/javascript/jscomp/NameAnonymousFunctionsMapped.java",
        "src/com/google/javascript/jscomp/NameGenerator.java",
        "src/com/google/javascript/jscomp/NameReferenceGraph.java",
        "src/com/google/javascript/jscomp/NameReferenceGraphConstruction.java",
        "src/com/google/javascript/jscomp/NameReferenceGraphReport.java",
        "src/com/google/javascript/jscomp/NodeIterators.java",
        "src/com/google/javascript/jscomp/NodeNameExtractor.java",
        "src/com/google/javascript/jscomp/NodeTraversal.java",
        "src/com/google/javascript/jscomp/NodeUtil.java",
        "src/com/google/javascript/jscomp/Normalize.java",
        "src/com/google/javascript/jscomp/ObjectPropertyStringPostprocess.java",
        "src/com/google/javascript/jscomp/ObjectPropertyStringPreprocess.java",
        "src/com/google/javascript/jscomp/OptimizeArgumentsArray.java",
        "src/com/google/javascript/jscomp/OptimizeParameters.java",
        "src/com/google/javascript/jscomp/ParallelCompilerPass.java",
        "src/com/google/javascript/jscomp/PassConfig.java",
        "src/com/google/javascript/jscomp/PassFactory.java",
        "src/com/google/javascript/jscomp/PeepholeFoldConstants.java",
        "src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java",
        "src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java",
        "src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java",
        "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java",
        "src/com/google/javascript/jscomp/PerformanceTracker.java",
        "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "src/com/google/javascript/jscomp/Position.java",
        "src/com/google/javascript/jscomp/PrepareAst.java",
        "src/com/google/javascript/jscomp/PrintStreamErrorManager.java",
        "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "src/com/google/javascript/jscomp/ProcessDefines.java",
        "src/com/google/javascript/jscomp/PropertyRenamingPolicy.java",
        "src/com/google/javascript/jscomp/PureFunctionIdentifier.java",
        "src/com/google/javascript/jscomp/RecordFunctionInformation.java",
        "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java",
        "src/com/google/javascript/jscomp/Region.java",
        "src/com/google/javascript/jscomp/RemoveConstantExpressions.java",
        "src/com/google/javascript/jscomp/RemoveConstantExpressionsParallel.java",
        "src/com/google/javascript/jscomp/RemoveTryCatch.java",
        "src/com/google/javascript/jscomp/RemoveUnusedNames.java",
        "src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java",
        "src/com/google/javascript/jscomp/RemoveUnusedVars.java",
        "src/com/google/javascript/jscomp/RenameLabels.java",
        "src/com/google/javascript/jscomp/RenameProperties.java",
        "src/com/google/javascript/jscomp/RenamePrototypes.java",
        "src/com/google/javascript/jscomp/RenameVars.java",
        "src/com/google/javascript/jscomp/ReplaceCssNames.java",
        "src/com/google/javascript/jscomp/ReplaceIdGenerators.java",
        "src/com/google/javascript/jscomp/ReplaceMessages.java",
        "src/com/google/javascript/jscomp/ReplaceStrings.java",
        "src/com/google/javascript/jscomp/Result.java",
        "src/com/google/javascript/jscomp/ReverseAbstractInterpreter.java",
        "src/com/google/javascript/jscomp/RhinoErrorReporter.java",
        "src/com/google/javascript/jscomp/RuntimeTypeCheck.java",
        "src/com/google/javascript/jscomp/SanityCheck.java",
        "src/com/google/javascript/jscomp/Scope.java",
        "src/com/google/javascript/jscomp/ScopeCreator.java",
        "src/com/google/javascript/jscomp/ScopedAliases.java",
        "src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java",
        "src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java",
        "src/com/google/javascript/jscomp/SideEffectsAnalysis.java",
        "src/com/google/javascript/jscomp/SimpleDefinitionFinder.java",
        "src/com/google/javascript/jscomp/SimpleRegion.java",
        "src/com/google/javascript/jscomp/SourceAst.java",
        "src/com/google/javascript/jscomp/SourceExcerptProvider.java",
        "src/com/google/javascript/jscomp/SourceFile.java",
        "src/com/google/javascript/jscomp/SourceInformationAnnotator.java",
        "src/com/google/javascript/jscomp/SourceMap.java",
        "src/com/google/javascript/jscomp/StrictModeCheck.java",
        "src/com/google/javascript/jscomp/StrictWarningsGuard.java",
        "src/com/google/javascript/jscomp/Strings.java",
        "src/com/google/javascript/jscomp/StripCode.java",
        "src/com/google/javascript/jscomp/SuspiciousPropertiesCheck.java",
        "src/com/google/javascript/jscomp/SyntacticScopeCreator.java",
        "src/com/google/javascript/jscomp/SyntheticAst.java",
        "src/com/google/javascript/jscomp/TightenTypes.java",
        "src/com/google/javascript/jscomp/Tracer.java",
        "src/com/google/javascript/jscomp/TypeCheck.java",
        "src/com/google/javascript/jscomp/TypeInference.java",
        "src/com/google/javascript/jscomp/TypeInferencePass.java",
        "src/com/google/javascript/jscomp/TypeValidator.java",
        "src/com/google/javascript/jscomp/TypedCodeGenerator.java",
        "src/com/google/javascript/jscomp/TypedScopeCreator.java",
        "src/com/google/javascript/jscomp/UnreachableCodeElimination.java",
        "src/com/google/javascript/jscomp/UseSite.java",
        "src/com/google/javascript/jscomp/VarCheck.java",
        "src/com/google/javascript/jscomp/VariableMap.java",
        "src/com/google/javascript/jscomp/VariableNameGenerator.java",
        "src/com/google/javascript/jscomp/VariableReferenceCheck.java",
        "src/com/google/javascript/jscomp/VariableRenamingPolicy.java",
        "src/com/google/javascript/jscomp/VariableShadowDeclarationCheck.java",
        "src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java",
        "src/com/google/javascript/jscomp/VerboseMessageFormatter.java",
        "src/com/google/javascript/jscomp/WarningLevel.java",
        "src/com/google/javascript/jscomp/WarningsGuard.java",
        "src/com/google/javascript/jscomp/ant/AntErrorManager.java",
        "src/com/google/javascript/jscomp/ant/CompileTask.java",
        "src/com/google/javascript/jscomp/deps/DependencyInfo.java",
        "src/com/google/javascript/jscomp/deps/DepsFileParser.java",
        "src/com/google/javascript/jscomp/deps/JsFileLineParser.java",
        "src/com/google/javascript/jscomp/deps/JsFileParser.java",
        "src/com/google/javascript/jscomp/deps/SimpleDependencyInfo.java",
        "src/com/google/javascript/jscomp/deps/SortedDependencies.java",
        "src/com/google/javascript/jscomp/graph/AdjacencyGraph.java",
        "src/com/google/javascript/jscomp/graph/Annotatable.java",
        "src/com/google/javascript/jscomp/graph/Annotation.java",
        "src/com/google/javascript/jscomp/graph/DiGraph.java",
        "src/com/google/javascript/jscomp/graph/FixedPointGraphTraversal.java",
        "src/com/google/javascript/jscomp/graph/Graph.java",
        "src/com/google/javascript/jscomp/graph/GraphColoring.java",
        "src/com/google/javascript/jscomp/graph/GraphNode.java",
        "src/com/google/javascript/jscomp/graph/GraphReachability.java",
        "src/com/google/javascript/jscomp/graph/GraphvizGraph.java",
        "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java",
        "src/com/google/javascript/jscomp/graph/StandardUnionFind.java",
        "src/com/google/javascript/jscomp/graph/SubGraph.java",
        "src/com/google/javascript/jscomp/graph/UndiGraph.java",
        "src/com/google/javascript/jscomp/graph/UnionFind.java",
        "src/com/google/javascript/jscomp/parsing/Annotation.java",
        "src/com/google/javascript/jscomp/parsing/Config.java",
        "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "src/com/google/javascript/jscomp/parsing/JsDocToken.java",
        "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "src/com/google/javascript/jscomp/parsing/NullErrorReporter.java",
        "src/com/google/javascript/jscomp/parsing/ParserRunner.java",
        "src/com/google/javascript/jscomp/parsing/TypeSafeDispatcher.java",
        "src/com/google/javascript/rhino/CompilerEnvirons.java",
        "src/com/google/javascript/rhino/Context.java",
        "src/com/google/javascript/rhino/DToA.java",
        "src/com/google/javascript/rhino/Decompiler.java",
        "src/com/google/javascript/rhino/EcmaError.java",
        "src/com/google/javascript/rhino/ErrorReporter.java",
        "src/com/google/javascript/rhino/EvaluatorException.java",
        "src/com/google/javascript/rhino/FunctionNode.java",
        "src/com/google/javascript/rhino/IRFactory.java",
        "src/com/google/javascript/rhino/JSDocInfo.java",
        "src/com/google/javascript/rhino/JSDocInfoBuilder.java",
        "src/com/google/javascript/rhino/JSTypeExpression.java",
        "src/com/google/javascript/rhino/JavaScriptException.java",
        "src/com/google/javascript/rhino/Kit.java",
        "src/com/google/javascript/rhino/Node.java",
        "src/com/google/javascript/rhino/ObjArray.java",
        "src/com/google/javascript/rhino/ObjToIntMap.java",
        "src/com/google/javascript/rhino/Parser.java",
        "src/com/google/javascript/rhino/RhinoException.java",
        "src/com/google/javascript/rhino/ScriptOrFnNode.java",
        "src/com/google/javascript/rhino/ScriptRuntime.java",
        "src/com/google/javascript/rhino/SimpleErrorReporter.java",
        "src/com/google/javascript/rhino/SourcePosition.java",
        "src/com/google/javascript/rhino/Token.java",
        "src/com/google/javascript/rhino/TokenStream.java",
        "src/com/google/javascript/rhino/UintMap.java",
        "src/com/google/javascript/rhino/UniqueTag.java",
        "src/com/google/javascript/rhino/jstype/AllType.java",
        "src/com/google/javascript/rhino/jstype/ArrowType.java",
        "src/com/google/javascript/rhino/jstype/BooleanLiteralSet.java",
        "src/com/google/javascript/rhino/jstype/BooleanType.java",
        "src/com/google/javascript/rhino/jstype/EnumElementType.java",
        "src/com/google/javascript/rhino/jstype/EnumType.java",
        "src/com/google/javascript/rhino/jstype/ErrorFunctionType.java",
        "src/com/google/javascript/rhino/jstype/FunctionBuilder.java",
        "src/com/google/javascript/rhino/jstype/FunctionParamBuilder.java",
        "src/com/google/javascript/rhino/jstype/FunctionPrototypeType.java",
        "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "src/com/google/javascript/rhino/jstype/IndexedType.java",
        "src/com/google/javascript/rhino/jstype/InstanceObjectType.java",
        "src/com/google/javascript/rhino/jstype/JSType.java",
        "src/com/google/javascript/rhino/jstype/JSTypeNative.java",
        "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "src/com/google/javascript/rhino/jstype/NamedType.java",
        "src/com/google/javascript/rhino/jstype/NoObjectType.java",
        "src/com/google/javascript/rhino/jstype/NoType.java",
        "src/com/google/javascript/rhino/jstype/NullType.java",
        "src/com/google/javascript/rhino/jstype/NumberType.java",
        "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "src/com/google/javascript/rhino/jstype/ParameterizedType.java",
        "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "src/com/google/javascript/rhino/jstype/ProxyObjectType.java",
        "src/com/google/javascript/rhino/jstype/RecordType.java",
        "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java",
        "src/com/google/javascript/rhino/jstype/SimpleSlot.java",
        "src/com/google/javascript/rhino/jstype/StaticScope.java",
        "src/com/google/javascript/rhino/jstype/StaticSlot.java",
        "src/com/google/javascript/rhino/jstype/StringType.java",
        "src/com/google/javascript/rhino/jstype/TemplateType.java",
        "src/com/google/javascript/rhino/jstype/TernaryValue.java",
        "src/com/google/javascript/rhino/jstype/UnionType.java",
        "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "src/com/google/javascript/rhino/jstype/UnknownType.java",
        "src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java",
        "src/com/google/javascript/rhino/jstype/ValueType.java",
        "src/com/google/javascript/rhino/jstype/Visitor.java",
        "src/com/google/javascript/rhino/jstype/VoidType.java"
      ],
      "num": 336
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [
        "com.google.javascript.jscomp.UnreachableCodeElimination:UnreachableCodeElimination:[AbstractCompiler compiler, boolean removeNoOpStatements]:null",
        "com.google.javascript.jscomp.UnreachableCodeElimination:removeDeadExprStatementSafely:[Node n]:void",
        "com.google.javascript.jscomp.UnreachableCodeElimination:process:[Node externs, Node root]:void",
        "com.google.javascript.jscomp.UnreachableCodeElimination:exitScope:[NodeTraversal t]:void",
        "com.google.javascript.jscomp.UnreachableCodeElimination:enterScope:[NodeTraversal t]:void",
        "com.google.javascript.jscomp.UnreachableCodeElimination:visit:[NodeTraversal t, Node n, Node parent]:void",
        "com.google.javascript.jscomp.UnreachableCodeElimination:tryRemoveUnconditionalBranching:[Node n]:Node"
      ],
      "num": 7
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  },
  "trigger_tests": [
    {
      "test_class": "com.google.javascript.jscomp.UnreachableCodeEliminationTest",
      "test_function": "testCascadedRemovalOfUnlessUnconditonalJumps",
      "assertion_line": "235",
      "exception": "junit.framework.AssertionFailedError",
      "message": "Expected: switch(a){case \"a\":break;case \"b\":case \"c\":}\nResult: switch(a){case \"a\":case \"b\":case \"c\":}"
    },
    {
      "test_class": "com.google.javascript.jscomp.UnreachableCodeEliminationTest",
      "test_function": "testIssue311",
      "assertion_line": "253",
      "exception": "java.lang.RuntimeException",
      "message": "INTERNAL COMPILER ERROR."
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/jscomp/UnreachableCodeElimination.java",
        "src/com/google/javascript/jscomp/UnreachableCodeElimination.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "com.google.javascript.jscomp.UnreachableCodeElimination:tryRemoveUnconditionalBranching:[Node n]:Node"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "com.google.javascript.jscomp.UnreachableCodeElimination:computeFollowing:[Node n]:Node",
            "com.google.javascript.jscomp.UnreachableCodeElimination:tryRemoveUnconditionalBranching:[Node n]:Node"
          ],
          "num": 2
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "153",
            "154",
            "155",
            "156",
            "157",
            "158",
            "159",
            "160",
            "161",
            "162",
            "163",
            "164",
            "166",
            "167",
            "168",
            "169",
            "170",
            "171",
            "172",
            "173",
            "186",
            "190",
            "191",
            "201"
          ],
          "num": 24
        },
        {
          "qualified_names": [
            "152",
            "168",
            "170",
            "181",
            "182",
            "183",
            "184",
            "185",
            "186",
            "187",
            "188",
            "189",
            "190",
            "191",
            "192"
          ],
          "num": 15
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/jscomp/UnreachableCodeElimination.java b/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\nindex 5d705d1..e6d4320 100644\n--- a/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\n+++ b/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\n@@ -150,27 +150,7 @@\n       return n;\n     }\n \n-    // If the parent is null, this mean whatever node it was there is now\n-    // useless and it has been removed by other logics in this pass. That node\n-    // while no longer exists in the AST, is still in the CFG because we\n-    // never update the graph as nodes are removed.\n-    if (n.getParent() \u003d\u003d null) {\n-      List\u003cDiGraphEdge\u003cNode,Branch\u003e\u003e outEdges \u003d gNode.getOutEdges();\n-      if (outEdges.size() \u003d\u003d 1) {\n-        return tryRemoveUnconditionalBranching(\n-          outEdges.get(0).getDestination().getValue());\n-      }\n-    }\n-\n     switch (n.getType()) {\n-      case Token.BLOCK:\n-        if (n.hasChildren()) {\n-          Node first \u003d n.getFirstChild();\n-          return tryRemoveUnconditionalBranching(first);\n-        } else {\n-          return tryRemoveUnconditionalBranching(\n-            ControlFlowAnalysis.computeFollowNode(n));\n-        }\n       case Token.RETURN:\n         if (n.hasChildren()) {\n           break;\n@@ -183,12 +163,11 @@\n         // branches to that same node. It is safe to remove it.\n         List\u003cDiGraphEdge\u003cNode,Branch\u003e\u003e outEdges \u003d gNode.getOutEdges();\n         if (outEdges.size() \u003d\u003d 1 \u0026\u0026\n-\n             // If there is a next node, there is no chance this jump is useless.\n             (n.getNext() \u003d\u003d null || n.getNext().getType() \u003d\u003d Token.FUNCTION)) {\n+\n           Preconditions.checkState(outEdges.get(0).getValue() \u003d\u003d Branch.UNCOND);\n-          Node fallThrough \u003d tryRemoveUnconditionalBranching(\n-            ControlFlowAnalysis.computeFollowNode(n));\n+          Node fallThrough \u003d computeFollowing(n);\n           Node nextCfgNode \u003d outEdges.get(0).getDestination().getValue();\n           if (nextCfgNode \u003d\u003d fallThrough) {\n             removeDeadExprStatementSafely(n);\n@@ -199,6 +178,18 @@\n     return n;\n   }\n \n+  private Node computeFollowing(Node n) {\n+    Node next \u003d ControlFlowAnalysis.computeFollowNode(n);\n+    while (next !\u003d null \u0026\u0026 next.getType() \u003d\u003d Token.BLOCK) {\n+      if (next.hasChildren()) {\n+        next \u003d next.getFirstChild();\n+      } else {\n+        next \u003d computeFollowing(next);\n+      }\n+    }\n+    return next;\n+  }\n+\n   private void removeDeadExprStatementSafely(Node n) {\n     Node parent \u003d n.getParent();\n     if (n.getType() \u003d\u003d Token.EMPTY ||\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [6413,6728]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [5672,5921]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SwitchCase [5956,5973]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [5982,6235]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "METHOD_INVOCATION_RECEIVER [7011,7030]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: tryRemoveUnconditionalBranching [6966,6997]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "METHOD_INVOCATION_ARGUMENTS [7011,7051]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "MethodInvocation [6966,7052]",
          "to": ""
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [
        "com.google.javascript.jscomp.UnreachableCodeElimination:computeFollowing:[Node n]:Node"
      ],
      "num": 1
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  },
  "patch_changed_mths": {
    "qualified_names": [],
    "num": 0
  }
}