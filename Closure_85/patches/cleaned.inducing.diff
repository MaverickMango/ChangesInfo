Only in data/changesInfo//Closure_85/properties/modified_classes/inducing/: src
diff -u -r data/changesInfo//Closure_85/properties/modified_classes/inducing/test/com/google/javascript/jscomp/UnreachableCodeEliminationTest.java data/changesInfo//Closure_85/cleaned/inducing/test/com/google/javascript/jscomp/UnreachableCodeEliminationTest.java
--- data/changesInfo//Closure_85/properties/modified_classes/inducing/test/com/google/javascript/jscomp/UnreachableCodeEliminationTest.java	2023-12-27 22:42:21.052567246 -0800
+++ data/changesInfo//Closure_85/cleaned/inducing/test/com/google/javascript/jscomp/UnreachableCodeEliminationTest.java	2023-06-14 19:41:19.377750172 -0700
@@ -39,7 +39,7 @@
     test("function foo(){switch(foo){case 1:x=1;return;break;" +
          "case 2:{x=2;return;break}default:}}",
          "function foo(){switch(foo){case 1:x=1;return;" +
-         "case 2:{x=2}default:}}");
+         "case 2:{x=2;return}default:}}");
 
     // if/else statements with returns
     test("function bar(){if(foo)x=1;else if(bar){return;x=2}" +
@@ -190,7 +190,7 @@
 
     test("function() {switch (a) { case 'a': return}}",
          "function() {switch (a) { case 'a': }}");
-    testSame("function() {switch (a) { case 'a': case foo(): }}");
+    testSame("function() {switch (a) { case 'a': return; case foo(): }}");
     testSame("function() {switch (a) { default: return; case 'a': alert(1)}}");
     testSame("function() {switch (a) { case 'a': return; default: alert(1)}}");
   }
@@ -208,13 +208,9 @@
 
   public void testUnlessUnconditonalBreak() {
     test("switch (a) { case 'a': break }", "switch (a) { case 'a': }");
-    test("switch (a) { case 'a': break; case foo(): }",
-         "switch (a) { case 'a':        case foo(): }");
-    test("switch (a) { default: break; case 'a': }",
-         "switch (a) { default:        case 'a': }");
-
-    testSame("switch (a) { case 'a': alert(a); break; default: alert(a); }");
-    testSame("switch (a) { default: alert(a); break; case 'a': alert(a); }");
+    testSame("switch (a) { case 'a': break; case foo(): }");
+    testSame("switch (a) { default: break; case 'a': }");
+    testSame("switch (a) { case 'a': break; default: }");
 
 
     test("X: {switch (a) { case 'a': break X}}",
@@ -227,6 +223,9 @@
     test("X: {switch (a) { case 'a': if (a()) {break X}}}",
          "X: {switch (a) { case 'a': if (a()) {}}}");
 
+    // TODO(user): Optimize these better.
+    test("switch (a) { case 'a': break; case 'b': break; case 'c': break }",
+         "switch (a) { case 'a': break; case 'b': break; case 'c': }");
 
     testSame("do { break } while(1);");
     testSame("for(;1;) { break }");
@@ -234,11 +233,42 @@
 
   public void testCascadedRemovalOfUnlessUnconditonalJumps() {
     test("switch (a) { case 'a': break; case 'b': break; case 'c': break }",
-         "switch (a) { case 'a': case 'b': case 'c': }");
+            "switch (a) { case 'a': break; case 'b': case 'c': }");
+    // Only one break removed per pass.
+    test("switch (a) { case 'a': break; case 'b': case 'c': }",
+            "switch (a) { case 'a': case 'b': case 'c': }");
+
+    test("function foo() {" +
+                    "  switch (a) { case 'a':return; case 'b':return; case 'c':return }}",
+            "function foo() { switch (a) { case 'a':return; case 'b': case 'c': }}");
     test("function foo() {" +
-         "  switch (a) { case 'a':return; case 'b':return; case 'c':return }}",
-         "function foo() { switch (a) { case 'a': case 'b': case 'c': }}");
+                    "  switch (a) { case 'a':return; case 'b': case 'c': }}",
+            "function foo() { switch (a) { case 'a': case 'b': case 'c': }}");
+
     testSame("function foo() {" +
-             "switch (a) { case 'a':return 2; case 'b':return 1}}");
+            "switch (a) { case 'a':return 2; case 'b':return 1}}");
+  }
+
+  public void testIssue311() {
+    test("function a(b) {\n" +
+                    "  switch (b.v) {\n" +
+                    "    case 'SWITCH':\n" +
+                    "      if (b.i >= 0) {\n" +
+                    "        return b.o;\n" +
+                    "      } else {\n" +
+                    "        return;\n" +
+                    "      }\n" +
+                    "      break;\n" +
+                    "  }\n" +
+                    "}",
+            "function a(b) {\n" +
+                    "  switch (b.v) {\n" +
+                    "    case 'SWITCH':\n" +
+                    "      if (b.i >= 0) {\n" +
+                    "        return b.o;\n" +
+                    "      } else {\n" +
+                    "      }\n" +
+                    "  }\n" +
+                    "}");
   }
 }
