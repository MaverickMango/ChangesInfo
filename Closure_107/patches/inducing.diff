diff --git a/src/com/google/javascript/jscomp/CommandLineRunner.java b/src/com/google/javascript/jscomp/CommandLineRunner.java
index 6224434..a544ceb 100644
--- a/src/com/google/javascript/jscomp/CommandLineRunner.java
+++ b/src/com/google/javascript/jscomp/CommandLineRunner.java
@@ -34,6 +34,7 @@
 import org.kohsuke.args4j.spi.StringOptionHandler;
 
 import java.io.File;
+import java.io.FileInputStream;
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.PrintStream;
@@ -346,6 +347,16 @@
         usage = "Prints the compiler version to stderr.")
     private boolean version = false;
 
+    @Option(name = "--translations_file",
+        usage = "Source of translated messages. Currently only supports XTB.")
+    private String translationsFile = "";
+
+    @Option(name = "--translations_project",
+        usage = "Scopes all translations to the specified project." +
+        "When specified, we will use different message ids so that messages " +
+        "in different projects can have different translations.")
+    private String translationsProject = null;
+
     @Option(name = "--flagfile",
         usage = "A file containing additional command-line options.")
     private String flag_file = "";
@@ -626,7 +637,7 @@
       level.setDebugOptionsForCompilationLevel(options);
     }
 
-    if(flags.generate_exports) {
+    if (flags.generate_exports) {
       options.setGenerateExports(flags.generate_exports);
     }
 
@@ -637,6 +648,26 @@
     }
 
     options.closurePass = flags.process_closure_primitives;
+
+    if (!flags.translationsFile.isEmpty()) {
+      try {
+        options.messageBundle = new XtbMessageBundle(
+            new FileInputStream(flags.translationsFile),
+            flags.translationsProject);
+      } catch (IOException e) {
+        throw new RuntimeException("Reading XTB file", e);
+      }
+    } else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level) {
+      // In SIMPLE or WHITESPACE mode, if the user hasn't specified a
+      // translations file, they might reasonably try to write their own
+      // implementation of goog.getMsg that makes the substitution at
+      // run-time.
+      //
+      // In ADVANCED mode, goog.getMsg is going to be renamed anyway,
+      // so we might as well inline it.
+      options.messageBundle = new EmptyMessageBundle();
+    }
+
     return options;
   }
 
diff --git a/src/com/google/javascript/jscomp/EmptyMessageBundle.java b/src/com/google/javascript/jscomp/EmptyMessageBundle.java
new file mode 100644
index 0000000..3d13d5f
--- /dev/null
+++ b/src/com/google/javascript/jscomp/EmptyMessageBundle.java
@@ -0,0 +1,52 @@
+/*
+ * Copyright 2008 The Closure Compiler Authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.google.javascript.jscomp;
+
+import com.google.common.collect.ImmutableList;
+import com.google.javascript.jscomp.JsMessage.IdGenerator;
+
+/**
+ * An implementation of MessageBundle that has no translations.
+ *
+ * @author nicksantos@google.com (Nick Santos)
+ */
+public class EmptyMessageBundle implements MessageBundle {
+
+  /**
+   * Gets a dummy message ID generator.
+   */
+  @Override
+  public IdGenerator idGenerator() {
+    return null;
+  }
+
+  /**
+   * Returns null, to indicate it has no message replacements.
+   */
+  @Override
+  public JsMessage getMessage(String id) {
+    return null;
+  }
+
+  /**
+   * Returns an empty list of messages.
+   */
+  @Override
+  public Iterable<JsMessage> getAllMessages() {
+    return ImmutableList.of();
+  }
+}
diff --git a/test/com/google/javascript/jscomp/CommandLineRunnerTest.java b/test/com/google/javascript/jscomp/CommandLineRunnerTest.java
index 9a1bd86..93e48b7 100644
--- a/test/com/google/javascript/jscomp/CommandLineRunnerTest.java
+++ b/test/com/google/javascript/jscomp/CommandLineRunnerTest.java
@@ -311,6 +311,18 @@
     testSame("var goog = {}; goog.provide('goog.dom');");
   }
 
+  public void testGetMsgWiring() throws Exception {
+    test("var goog = {}; goog.getMsg = function(x) { return x; };" +
+         "/** @desc A real foo. */ var MSG_FOO = goog.getMsg('foo');",
+         "var goog={getMsg:function(a){return a}}, " +
+         "MSG_FOO=goog.getMsg('foo');");
+    args.add("--compilation_level=ADVANCED_OPTIMIZATIONS");
+    test("var goog = {}; goog.getMsg = function(x) { return x; };" +
+         "/** @desc A real foo. */ var MSG_FOO = goog.getMsg('foo');" +
+         "window['foo'] = MSG_FOO;",
+         "window.foo = 'foo';");
+  }
+
   public void testCssNameWiring() throws Exception {
     test("var goog = {}; goog.getCssName = function() {};" +
          "goog.setCssNameMapping = function() {};" +
