diff -r -u original/src/com/google/javascript/jscomp/CommandLineRunner.java buggy/src/com/google/javascript/jscomp/CommandLineRunner.java
--- original/src/com/google/javascript/jscomp/CommandLineRunner.java	2023-06-13 15:31:45.851113138 +0800
+++ buggy/src/com/google/javascript/jscomp/CommandLineRunner.java	2023-06-12 11:40:29.166590811 +0800
@@ -21,29 +21,31 @@
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
+import com.google.common.io.ByteStreams;
 import com.google.common.io.Files;
-import com.google.common.io.LimitInputStream;
-import com.google.javascript.jscomp.AbstractCommandLineRunner.WarningGuardSpec;
 
+import org.kohsuke.args4j.Argument;
 import org.kohsuke.args4j.CmdLineException;
 import org.kohsuke.args4j.CmdLineParser;
 import org.kohsuke.args4j.Option;
 import org.kohsuke.args4j.OptionDef;
+import org.kohsuke.args4j.spi.FieldSetter;
 import org.kohsuke.args4j.spi.OptionHandler;
 import org.kohsuke.args4j.spi.Parameters;
 import org.kohsuke.args4j.spi.Setter;
 import org.kohsuke.args4j.spi.StringOptionHandler;
 
+import java.io.BufferedInputStream;
 import java.io.File;
+import java.io.FileInputStream;
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.PrintStream;
+import java.lang.reflect.AnnotatedElement;
 import java.nio.charset.Charset;
 import java.util.List;
 import java.util.Map;
-import java.util.ResourceBundle;
 import java.util.Set;
-import java.util.StringTokenizer;
 import java.util.logging.Level;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
@@ -89,132 +91,143 @@
  */
 public class CommandLineRunner extends
     AbstractCommandLineRunner<Compiler, CompilerOptions> {
+  private static class GuardLevel {
+    final String name;
+    final CheckLevel level;
+    GuardLevel(String name, CheckLevel level) {
+      this.name = name;
+      this.level = level;
+    }
+  }
+
   // I don't really care about unchecked warnings in this class.
   @SuppressWarnings("unchecked")
   private static class Flags {
-    private static final WarningGuardSpec warningGuardSpec =
-        new WarningGuardSpec();
+    private static List<GuardLevel> guardLevels = Lists.newArrayList();
 
     @Option(name = "--help",
         handler = BooleanOptionHandler.class,
         usage = "Displays this message")
-    private boolean display_help = false;
+    private boolean displayHelp = false;
 
     @Option(name = "--print_tree",
         handler = BooleanOptionHandler.class,
         usage = "Prints out the parse tree and exits")
-    private boolean print_tree = false;
+    private boolean printTree = false;
 
     @Option(name = "--print_ast",
         handler = BooleanOptionHandler.class,
         usage = "Prints a dot file describing the internal abstract syntax"
         + " tree and exits")
-    private boolean print_ast = false;
+    private boolean printAst = false;
 
     @Option(name = "--print_pass_graph",
         handler = BooleanOptionHandler.class,
         usage = "Prints a dot file describing the passes that will get run"
         + " and exits")
-    private boolean print_pass_graph = false;
+    private boolean printPassGraph = false;
 
     // Turn on (very slow) extra sanity checks for use when modifying the
     // compiler.
     @Option(name = "--jscomp_dev_mode",
         // hidden, no usage
         aliases = {"--dev_mode"})
-    private CompilerOptions.DevMode jscomp_dev_mode =
+    private CompilerOptions.DevMode jscompDevMode =
         CompilerOptions.DevMode.OFF;
 
     @Option(name = "--logging_level",
         usage = "The logging level (standard java.util.logging.Level"
         + " values) for Compiler progress. Does not control errors or"
         + " warnings for the JavaScript code under compilation")
-    private String logging_level = Level.WARNING.getName();
+    private String loggingLevel = Level.WARNING.getName();
 
     @Option(name = "--externs",
-        usage = "The file containing javascript externs. You may specify"
+        usage = "The file containing JavaScript externs. You may specify"
         + " multiple")
     private List<String> externs = Lists.newArrayList();
 
     @Option(name = "--js",
-        usage = "The javascript filename. You may specify multiple")
+        usage = "The JavaScript filename. You may specify multiple")
     private List<String> js = Lists.newArrayList();
 
     @Option(name = "--js_output_file",
         usage = "Primary output filename. If not specified, output is " +
         "written to stdout")
-    private String js_output_file = "";
+    private String jsOutputFile = "";
 
     @Option(name = "--module",
-        usage = "A javascript module specification. The format is "
+        usage = "A JavaScript module specification. The format is "
         + "<name>:<num-js-files>[:[<dep>,...][:]]]. Module names must be "
         + "unique. Each dep is the name of a module that this module "
-        + "depends on. Modules must be listed in dependency order, and js "
+        + "depends on. Modules must be listed in dependency order, and JS "
         + "source files must be listed in the corresponding order. Where "
-        + "--module flags occur in relation to --js flags is unimportant")
+        + "--module flags occur in relation to --js flags is unimportant. "
+        + "Provide the value 'auto' to trigger module creation from CommonJS"
+        + "modules.")
     private List<String> module = Lists.newArrayList();
 
     @Option(name = "--variable_map_input_file",
         usage = "File containing the serialized version of the variable "
         + "renaming map produced by a previous compilation")
-    private String variable_map_input_file = "";
+    private String variableMapInputFile = "";
 
     @Option(name = "--property_map_input_file",
         usage = "File containing the serialized version of the property "
         + "renaming map produced by a previous compilation")
-    private String property_map_input_file = "";
+    private String propertyMapInputFile = "";
 
     @Option(name = "--variable_map_output_file",
         usage = "File where the serialized version of the variable "
         + "renaming map produced should be saved")
-    private String variable_map_output_file = "";
+    private String variableMapOutputFile = "";
 
     @Option(name = "--create_name_map_files",
         handler = BooleanOptionHandler.class,
         usage = "If true, variable renaming and property renaming map "
         + "files will be produced as {binary name}_vars_map.out and "
         + "{binary name}_props_map.out. Note that this flag cannot be used "
-        + "in conjunction with either variable_map_output_file or "
+        + "in conjunction with either variableMapOutputFile or "
         + "property_map_output_file")
-    private boolean create_name_map_files = false;
+    private boolean createNameMapFiles = false;
 
     @Option(name = "--property_map_output_file",
         usage = "File where the serialized version of the property "
         + "renaming map produced should be saved")
-    private String property_map_output_file = "";
+    private String propertyMapOutputFile = "";
 
     @Option(name = "--third_party",
         handler = BooleanOptionHandler.class,
         usage = "Check source validity but do not enforce Closure style "
         + "rules and conventions")
-    private boolean third_party = false;
-
+    private boolean thirdParty = false;
 
     @Option(name = "--summary_detail_level",
         usage = "Controls how detailed the compilation summary is. Values:"
         + " 0 (never print summary), 1 (print summary only if there are "
-        + "errors or warnings), 2 (print summary if type checking is on, "
-        + "see --check_types), 3 (always print summary). The default level "
-        + "is 1")
-    private int summary_detail_level = 1;
+        + "errors or warnings), 2 (print summary if the 'checkTypes' "
+        + "diagnostic  group is enabled, see --jscomp_warning), "
+        + "3 (always print summary). The default level is 1")
+    private int summaryDetailLevel = 1;
 
     @Option(name = "--output_wrapper",
         usage = "Interpolate output into this string at the place denoted"
-        + " by the marker token %output%. See --output_wrapper_marker")
-    private String output_wrapper = "";
+        + " by the marker token %output%. Use marker token %output|jsstring%"
+        + " to do js string escaping on the output.")
+    private String outputWrapper = "";
 
     @Option(name = "--module_wrapper",
-        usage = "An output wrapper for a javascript module (optional). "
+        usage = "An output wrapper for a JavaScript module (optional). "
         + "The format is <name>:<wrapper>. The module name must correspond "
         + "with a module specified using --module. The wrapper must "
-        + "contain %s as the code placeholder")
-    private List<String> module_wrapper = Lists.newArrayList();
+        + "contain %s as the code placeholder. The %basename% placeholder can "
+        + "also be used to substitute the base name of the module output file.")
+    private List<String> moduleWrapper = Lists.newArrayList();
 
     @Option(name = "--module_output_path_prefix",
-        usage = "Prefix for filenames of compiled js modules. "
+        usage = "Prefix for filenames of compiled JS modules. "
         + "<module-name>.js will be appended to this prefix. Directories "
         + "will be created as needed. Use with --module")
-    private String module_output_path_prefix = "./";
+    private String moduleOutputPathPrefix = "./";
 
     @Option(name = "--create_source_map",
         usage = "If specified, a source map file mapping the generated " +
@@ -222,25 +235,36 @@
         "output to the specified path. The %outname% placeholder will " +
         "expand to the name of the output file that the source map " +
         "corresponds to.")
-    private String create_source_map = "";
+    private String createSourceMap = "";
 
+    @Option(name = "--source_map_format",
+        usage = "The source map format to produce. " +
+        "Options: V1, V2, V3, DEFAULT. DEFAULT produces V2.")
+    private SourceMap.Format sourceMapFormat = SourceMap.Format.DEFAULT;
+
+    // Used to define the flag, values are stored by the handler.
+    @SuppressWarnings("unused")
     @Option(name = "--jscomp_error",
         handler = WarningGuardErrorOptionHandler.class,
         usage = "Make the named class of warnings an error. Options:" +
         DiagnosticGroups.DIAGNOSTIC_GROUP_NAMES)
-    private List<String> jscomp_error = Lists.newArrayList();
+    private List<String> jscompError = Lists.newArrayList();
 
+    // Used to define the flag, values are stored by the handler.
+    @SuppressWarnings("unused")
     @Option(name = "--jscomp_warning",
         handler = WarningGuardWarningOptionHandler.class,
         usage = "Make the named class of warnings a normal warning. " +
         "Options:" + DiagnosticGroups.DIAGNOSTIC_GROUP_NAMES)
-    private List<String> jscomp_warning = Lists.newArrayList();
+    private List<String> jscompWarning = Lists.newArrayList();
 
+    // Used to define the flag, values are stored by the handler.
+    @SuppressWarnings("unused")
     @Option(name = "--jscomp_off",
         handler = WarningGuardOffOptionHandler.class,
         usage = "Turn off the named class of warnings. Options:" +
         DiagnosticGroups.DIAGNOSTIC_GROUP_NAMES)
-    private List<String> jscomp_off = Lists.newArrayList();
+    private List<String> jscompOff = Lists.newArrayList();
 
     @Option(name = "--define",
         aliases = {"--D", "-D"},
@@ -259,18 +283,24 @@
     @Option(name = "--compilation_level",
         usage = "Specifies the compilation level to use. Options: " +
         "WHITESPACE_ONLY, SIMPLE_OPTIMIZATIONS, ADVANCED_OPTIMIZATIONS")
-    private CompilationLevel compilation_level =
+    private CompilationLevel compilationLevel =
         CompilationLevel.SIMPLE_OPTIMIZATIONS;
 
+    @Option(name = "--use_types_for_optimization",
+        usage = "Experimental: perform additional optimizations " +
+        "based on available information.  Inaccurate type annotations " +
+        "may result in incorrect results.")
+    private boolean useTypesForOptimization = false;
+
     @Option(name = "--warning_level",
         usage = "Specifies the warning level to use. Options: " +
         "QUIET, DEFAULT, VERBOSE")
-    private WarningLevel warning_level = WarningLevel.DEFAULT;
+    private WarningLevel warningLevel = WarningLevel.DEFAULT;
 
     @Option(name = "--use_only_custom_externs",
         handler = BooleanOptionHandler.class,
         usage = "Specifies whether the default externs should be excluded")
-    private boolean use_only_custom_externs = false;
+    private boolean useOnlyCustomExterns = false;
 
     @Option(name = "--debug",
         handler = BooleanOptionHandler.class,
@@ -280,19 +310,37 @@
     @Option(name = "--generate_exports",
         handler = BooleanOptionHandler.class,
         usage = "Generates export code for those marked with @export")
-    private boolean generate_exports = false;
+    private boolean generateExports = false;
 
     @Option(name = "--formatting",
         usage = "Specifies which formatting options, if any, should be "
         + "applied to the output JS. Options: "
-        + "PRETTY_PRINT, PRINT_INPUT_DELIMITER")
+        + "PRETTY_PRINT, PRINT_INPUT_DELIMITER, SINGLE_QUOTES")
     private List<FormattingOption> formatting = Lists.newArrayList();
 
+    @Option(name = "--process_common_js_modules",
+        usage = "Process CommonJS modules to a concatenable form.")
+    private boolean processCommonJsModules = false;
+
+    @Option(name = "--common_js_module_path_prefix",
+        usage = "Path prefix to be removed from CommonJS module names.")
+    private String commonJsPathPrefix =
+        ProcessCommonJSModules.DEFAULT_FILENAME_PREFIX;
+
+    @Option(name = "--common_js_entry_module",
+        usage = "Root of your common JS dependency hierarchy. " +
+            "Your main script.")
+    private String commonJsEntryModule;
+
+    @Option(name = "--transform_amd_modules",
+        usage = "Transform AMD to CommonJS modules.")
+    private boolean transformAmdModules = false;
+
     @Option(name = "--process_closure_primitives",
         handler = BooleanOptionHandler.class,
         usage = "Processes built-ins from the Closure library, such as "
         + "goog.require(), goog.provide(), and goog.exportSymbol()")
-    private boolean process_closure_primitives = true;
+    private boolean processClosurePrimitives = true;
 
     @Option(name = "--manage_closure_dependencies",
         handler = BooleanOptionHandler.class,
@@ -301,7 +349,15 @@
         + "goog.requires symbol X. If an input provides symbols, and "
         + "those symbols are never required, then that input will not "
         + "be included in the compilation.")
-    private boolean manage_closure_dependencies = false;
+    private boolean manageClosureDependencies = false;
+
+    @Option(name = "--only_closure_dependencies",
+        handler = BooleanOptionHandler.class,
+        usage = "Only include files in the transitive dependency of the "
+        + "entry points (specified by closure_entry_point). Files that do "
+        + "not provide dependencies will be removed. This supersedes"
+        + "manage_closure_dependencies")
+    private boolean onlyClosureDependencies = false;
 
     @Option(name = "--closure_entry_point",
         usage = "Entry points to the program. Must be goog.provide'd "
@@ -311,34 +367,106 @@
         + "If any entry points are specified, then the "
         + "manage_closure_dependencies option will be set to true and "
         + "all files will be sorted in dependency order.")
-    private List<String> closure_entry_point = Lists.newArrayList();
+    private List<String> closureEntryPoint = Lists.newArrayList();
+
+    @Option(name = "--process_jquery_primitives",
+        handler = BooleanOptionHandler.class,
+        usage = "Processes built-ins from the Jquery library, such as "
+        + "jQuery.fn and jQuery.extend()")
+    private boolean processJqueryPrimitives = false;
+
+    @Option(name = "--angular_pass",
+        handler = BooleanOptionHandler.class,
+        usage = "Generate $inject properties for AngularJS for functions "
+        + "annotated with @ngInject")
+    private boolean angularPass = false;
 
     @Option(name = "--output_manifest",
         usage = "Prints out a list of all the files in the compilation. "
         + "If --manage_closure_dependencies is on, this will not include "
         + "files that got dropped because they were not required. "
-        + "The %outname% placeholder expands to the js output file. "
+        + "The %outname% placeholder expands to the JS output file. "
         + "If you're using modularization, using %outname% will create "
         + "a manifest for each module.")
-    private String output_manifest = "";
+    private String outputManifest = "";
+
+    @Option(name = "--output_module_dependencies",
+        usage = "Prints out a JSON file of dependencies between modules.")
+    private String outputModuleDependencies = "";
 
     @Option(name = "--accept_const_keyword",
         usage = "Allows usage of const keyword.")
-    private boolean accept_const_keyword = false;
+    private boolean acceptConstKeyword = false;
 
     @Option(name = "--language_in",
         usage = "Sets what language spec that input sources conform. "
         + "Options: ECMASCRIPT3 (default), ECMASCRIPT5, ECMASCRIPT5_STRICT")
-    private String language_in = "ECMASCRIPT3";
+    private String languageIn = "ECMASCRIPT3";
 
     @Option(name = "--version",
         handler = BooleanOptionHandler.class,
         usage = "Prints the compiler version to stderr.")
     private boolean version = false;
 
+    @Option(name = "--translations_file",
+        usage = "Source of translated messages. Currently only supports XTB.")
+    private String translationsFile = "";
+
+    @Option(name = "--translations_project",
+        usage = "Scopes all translations to the specified project." +
+        "When specified, we will use different message ids so that messages " +
+        "in different projects can have different translations.")
+    private String translationsProject = null;
+
     @Option(name = "--flagfile",
         usage = "A file containing additional command-line options.")
-    private String flag_file = "";
+    private String flagFile = "";
+
+    @Option(name = "--warnings_whitelist_file",
+        usage = "A file containing warnings to suppress. Each line should be " +
+            "of the form\n" +
+            "<file-name>:<line-number>?  <warning-description>")
+    private String warningsWhitelistFile = "";
+
+    @Option(name = "--extra_annotation_name",
+        usage = "A whitelist of tag names in JSDoc. You may specify multiple")
+    private List<String> extraAnnotationName = Lists.newArrayList();
+
+    @Option(name = "--tracer_mode",
+        usage = "Shows the duration of each compiler pass and the impact to " +
+        "the compiled output size. Options: ALL, RAW_SIZE, TIMING_ONLY, OFF")
+    private CompilerOptions.TracerMode tracerMode =
+        CompilerOptions.TracerMode.OFF;
+
+    @Argument
+    private List<String> arguments = Lists.newArrayList();
+
+    /**
+     * Users may specify JS inputs via the legacy {@code --js} option, as well
+     * as via additional arguments to the Closure Compiler. For example, it is
+     * convenient to leverage the additional arguments feature when using the
+     * Closure Compiler in combination with {@code find} and {@code xargs}:
+     * <pre>
+     * find MY_JS_SRC_DIR -name '*.js' \
+     *     | xargs java -jar compiler.jar --manage_closure_dependencies
+     * </pre>
+     * The {@code find} command will produce a list of '*.js' source files in
+     * the {@code MY_JS_SRC_DIR} directory while {@code xargs} will convert them
+     * to a single, space-delimited set of arguments that are appended to the
+     * {@code java} command to run the Compiler.
+     * <p>
+     * Note that it is important to use the
+     * {@code --manage_closure_dependencies} option in this case because the
+     * order produced by {@code find} is unlikely to be sorted correctly with
+     * respect to {@code goog.provide()} and {@code goog.requires()}.
+     */
+    List<String> getJsFiles() {
+      List<String> allJsInputs = Lists.newArrayListWithCapacity(
+          js.size() + arguments.size());
+      allJsInputs.addAll(js);
+      allJsInputs.addAll(arguments);
+      return allJsInputs;
+    }
 
     // Our own option parser to be backwards-compatible.
     // It needs to be public because of the crazy reflection that args4j does.
@@ -359,7 +487,9 @@
         String param = null;
         try {
           param = params.getParameter(0);
-        } catch (CmdLineException e) {}
+        } catch (CmdLineException e) {
+          param = null; // to stop linter complaints
+        }
 
         if (param == null) {
           setter.addValue(true);
@@ -414,24 +544,45 @@
       }
     }
 
-    private static class WarningGuardSetter implements Setter {
-      private final Setter proxy;
+    private static class WarningGuardSetter implements Setter<String> {
+      private final Setter<? super String> proxy;
       private final CheckLevel level;
 
-      private WarningGuardSetter(Setter proxy, CheckLevel level) {
+      private WarningGuardSetter(
+          Setter<? super String> proxy, CheckLevel level) {
         this.proxy = proxy;
         this.level = level;
       }
 
-      @Override public boolean isMultiValued() { return proxy.isMultiValued(); }
+      @Override public boolean isMultiValued() {
+        return proxy.isMultiValued();
+      }
+
+      @Override public Class<String> getType() {
+        return (Class<String>) proxy.getType();
+      }
+
+      @Override public void addValue(String value) throws CmdLineException {
+        proxy.addValue(value);
+        guardLevels.add(new GuardLevel(value, level));
+      }
 
-      @Override public Class getType() { return proxy.getType(); }
+      @Override public FieldSetter asFieldSetter() {
+        return proxy.asFieldSetter();
+      }
 
-      @Override public void addValue(Object value) throws CmdLineException {
-        proxy.addValue((String) value);
-        warningGuardSpec.add(level, (String) value);
+      @Override public AnnotatedElement asAnnotatedElement() {
+        return proxy.asAnnotatedElement();
       }
     }
+
+    public static WarningGuardSpec getWarningGuardSpec() {
+      WarningGuardSpec spec = new WarningGuardSpec();
+      for (GuardLevel guardLevel : guardLevels) {
+        spec.add(guardLevel.level, guardLevel.name);
+      }
+      return spec;
+    }
   }
 
   /**
@@ -440,6 +591,7 @@
   private static enum FormattingOption {
     PRETTY_PRINT,
     PRINT_INPUT_DELIMITER,
+    SINGLE_QUOTES
     ;
 
     private void applyToOptions(CompilerOptions options) {
@@ -450,6 +602,9 @@
         case PRINT_INPUT_DELIMITER:
           options.printInputDelimiter = true;
           break;
+        case SINGLE_QUOTES:
+          options.setPreferSingleQuotes(true);
+          break;
         default:
           throw new RuntimeException("Unknown formatting option: " + this);
       }
@@ -458,9 +613,6 @@
 
   private final Flags flags = new Flags();
 
-  private static final String configResource =
-      "com.google.javascript.jscomp.parsing.ParserConfig";
-
   private boolean isConfigValid = false;
 
   /**
@@ -478,6 +630,30 @@
     initConfigFromFlags(args, err);
   }
 
+  /**
+   * Split strings into tokens delimited by whitespace, but treat quoted
+   * strings as single tokens. Non-whitespace characters adjacent to quoted
+   * strings will be returned as part of the token. For example, the string
+   * {@code "--js='/home/my project/app.js'"} would be returned as a single
+   * token.
+   *
+   * @param lines strings to tokenize
+   * @return a list of tokens
+   */
+  private List<String> tokenizeKeepingQuotedStrings(List<String> lines) {
+    List<String> tokens = Lists.newArrayList();
+    Pattern tokenPattern =
+        Pattern.compile("(?:[^ \t\f\\x0B'\"]|(?:'[^']*'|\"[^\"]*\"))+");
+
+    for (String line : lines) {
+      Matcher matcher = tokenPattern.matcher(line);
+      while (matcher.find()) {
+        tokens.add(matcher.group(0));
+      }
+    }
+    return tokens;
+  }
+
   private List<String> processArgs(String[] args) {
     // Args4j has a different format that the old command-line parser.
     // So we use some voodoo to get the args into the format that args4j
@@ -508,24 +684,23 @@
 
   private void processFlagFile(PrintStream err)
             throws CmdLineException, IOException {
-    List<String> argsInFile = Lists.newArrayList();
-    File flagFileInput = new File(flags.flag_file);
-    StringTokenizer tokenizer = new StringTokenizer(
-        Files.toString(flagFileInput, Charset.defaultCharset()));
-
-    while (tokenizer.hasMoreTokens()) {
-        argsInFile.add(tokenizer.nextToken());
-    }
+    File flagFileInput = new File(flags.flagFile);
+    List<String> argsInFile = tokenizeKeepingQuotedStrings(
+        Files.readLines(flagFileInput, Charset.defaultCharset()));
 
-    flags.flag_file = "";
+    flags.flagFile = "";
     List<String> processedFileArgs
         = processArgs(argsInFile.toArray(new String[] {}));
     CmdLineParser parserFileArgs = new CmdLineParser(flags);
-    Flags.warningGuardSpec.clear();
+    // Command-line warning levels should override flag file settings,
+    // which means they should go last.
+    List<GuardLevel> previous = Lists.newArrayList(Flags.guardLevels);
+    Flags.guardLevels.clear();
     parserFileArgs.parseArgument(processedFileArgs.toArray(new String[] {}));
+    Flags.guardLevels.addAll(previous);
 
     // Currently we are not supporting this (prevent direct/indirect loops)
-    if (!flags.flag_file.equals("")) {
+    if (!flags.flagFile.equals("")) {
       err.println("ERROR - Arguments in the file cannot contain "
           + "--flagfile option.");
       isConfigValid = false;
@@ -537,90 +712,154 @@
     List<String> processedArgs = processArgs(args);
 
     CmdLineParser parser = new CmdLineParser(flags);
-    Flags.warningGuardSpec.clear();
+    Flags.guardLevels.clear();
     isConfigValid = true;
     try {
       parser.parseArgument(processedArgs.toArray(new String[] {}));
       // For contains --flagfile flag
-      if (!flags.flag_file.equals("")) {
+      if (!flags.flagFile.equals("")) {
         processFlagFile(err);
       }
     } catch (CmdLineException e) {
       err.println(e.getMessage());
       isConfigValid = false;
     } catch (IOException ioErr) {
-      err.println("ERROR - " + flags.flag_file + " read error.");
+      err.println("ERROR - " + flags.flagFile + " read error.");
       isConfigValid = false;
     }
 
     if (flags.version) {
-      ResourceBundle config = ResourceBundle.getBundle(configResource);
       err.println(
           "Closure Compiler (http://code.google.com/closure/compiler)\n" +
-          "Version: " + config.getString("compiler.version") + "\n" +
-          "Built on: " + config.getString("compiler.date"));
+          "Version: " + Compiler.getReleaseVersion() + "\n" +
+          "Built on: " + Compiler.getReleaseDate());
       err.flush();
     }
 
-    if (!isConfigValid || flags.display_help) {
+    if (flags.processCommonJsModules) {
+      flags.processClosurePrimitives = true;
+      flags.manageClosureDependencies = true;
+      if (flags.commonJsEntryModule == null) {
+        err.println("Please specify --common_js_entry_module.");
+        err.flush();
+        isConfigValid = false;
+      }
+      flags.closureEntryPoint = Lists.newArrayList(
+          ProcessCommonJSModules.toModuleName(flags.commonJsEntryModule));
+    }
+
+    if (!isConfigValid || flags.displayHelp) {
       isConfigValid = false;
       parser.printUsage(err);
     } else {
+      CodingConvention conv;
+      if (flags.thirdParty) {
+        conv = CodingConventions.getDefault();
+      } else if (flags.processJqueryPrimitives) {
+        conv = new JqueryCodingConvention();
+      } else {
+        conv = new ClosureCodingConvention();
+      }
+
       getCommandLineConfig()
-          .setPrintTree(flags.print_tree)
-          .setPrintAst(flags.print_ast)
-          .setPrintPassGraph(flags.print_pass_graph)
-          .setJscompDevMode(flags.jscomp_dev_mode)
-          .setLoggingLevel(flags.logging_level)
+          .setPrintTree(flags.printTree)
+          .setPrintAst(flags.printAst)
+          .setPrintPassGraph(flags.printPassGraph)
+          .setJscompDevMode(flags.jscompDevMode)
+          .setLoggingLevel(flags.loggingLevel)
           .setExterns(flags.externs)
-          .setJs(flags.js)
-          .setJsOutputFile(flags.js_output_file)
+          .setJs(flags.getJsFiles())
+          .setJsOutputFile(flags.jsOutputFile)
           .setModule(flags.module)
-          .setVariableMapInputFile(flags.variable_map_input_file)
-          .setPropertyMapInputFile(flags.property_map_input_file)
-          .setVariableMapOutputFile(flags.variable_map_output_file)
-          .setCreateNameMapFiles(flags.create_name_map_files)
-          .setPropertyMapOutputFile(flags.property_map_output_file)
-          .setCodingConvention(flags.third_party ?
-               new DefaultCodingConvention() :
-               new ClosureCodingConvention())
-          .setSummaryDetailLevel(flags.summary_detail_level)
-          .setOutputWrapper(flags.output_wrapper)
-          .setModuleWrapper(flags.module_wrapper)
-          .setModuleOutputPathPrefix(flags.module_output_path_prefix)
-          .setCreateSourceMap(flags.create_source_map)
-          .setWarningGuardSpec(Flags.warningGuardSpec)
+          .setVariableMapInputFile(flags.variableMapInputFile)
+          .setPropertyMapInputFile(flags.propertyMapInputFile)
+          .setVariableMapOutputFile(flags.variableMapOutputFile)
+          .setCreateNameMapFiles(flags.createNameMapFiles)
+          .setPropertyMapOutputFile(flags.propertyMapOutputFile)
+          .setCodingConvention(conv)
+          .setSummaryDetailLevel(flags.summaryDetailLevel)
+          .setOutputWrapper(flags.outputWrapper)
+          .setModuleWrapper(flags.moduleWrapper)
+          .setModuleOutputPathPrefix(flags.moduleOutputPathPrefix)
+          .setCreateSourceMap(flags.createSourceMap)
+          .setSourceMapFormat(flags.sourceMapFormat)
+          .setWarningGuardSpec(Flags.getWarningGuardSpec())
           .setDefine(flags.define)
           .setCharset(flags.charset)
-          .setManageClosureDependencies(flags.manage_closure_dependencies)
-          .setClosureEntryPoints(flags.closure_entry_point)
-          .setOutputManifest(flags.output_manifest)
-          .setAcceptConstKeyword(flags.accept_const_keyword)
-          .setLanguageIn(flags.language_in);
+          .setManageClosureDependencies(flags.manageClosureDependencies)
+          .setOnlyClosureDependencies(flags.onlyClosureDependencies)
+          .setClosureEntryPoints(flags.closureEntryPoint)
+          .setOutputManifest(ImmutableList.of(flags.outputManifest))
+          .setOutputModuleDependencies(flags.outputModuleDependencies)
+          .setAcceptConstKeyword(flags.acceptConstKeyword)
+          .setLanguageIn(flags.languageIn)
+          .setProcessCommonJSModules(flags.processCommonJsModules)
+          .setCommonJSModulePathPrefix(flags.commonJsPathPrefix)
+          .setTransformAMDToCJSModules(flags.transformAmdModules)
+          .setWarningsWhitelistFile(flags.warningsWhitelistFile)
+          .setAngularPass(flags.angularPass)
+          .setTracerMode(flags.tracerMode);
     }
   }
 
   @Override
   protected CompilerOptions createOptions() {
     CompilerOptions options = new CompilerOptions();
-    options.setCodingConvention(new ClosureCodingConvention());
-    CompilationLevel level = flags.compilation_level;
+    if (flags.processJqueryPrimitives) {
+      options.setCodingConvention(new JqueryCodingConvention());
+    } else {
+      options.setCodingConvention(new ClosureCodingConvention());
+    }
+
+    options.setExtraAnnotationNames(flags.extraAnnotationName);
+
+    CompilationLevel level = flags.compilationLevel;
     level.setOptionsForCompilationLevel(options);
+
     if (flags.debug) {
       level.setDebugOptionsForCompilationLevel(options);
     }
 
-    if(flags.generate_exports) {
-      options.setGenerateExports(flags.generate_exports);
+    if (flags.useTypesForOptimization) {
+      level.setTypeBasedOptimizationOptions(options);
     }
 
-    WarningLevel wLevel = flags.warning_level;
+    if (flags.generateExports) {
+      options.setGenerateExports(flags.generateExports);
+    }
+
+    WarningLevel wLevel = flags.warningLevel;
     wLevel.setOptionsForWarningLevel(options);
     for (FormattingOption formattingOption : flags.formatting) {
       formattingOption.applyToOptions(options);
     }
 
-    options.closurePass = flags.process_closure_primitives;
+    options.closurePass = flags.processClosurePrimitives;
+
+    options.jqueryPass = CompilationLevel.ADVANCED_OPTIMIZATIONS == level &&
+        flags.processJqueryPrimitives;
+
+    options.angularPass = flags.angularPass;
+
+    if (!flags.translationsFile.isEmpty()) {
+      try {
+        options.messageBundle = new XtbMessageBundle(
+            new FileInputStream(flags.translationsFile),
+            flags.translationsProject);
+      } catch (IOException e) {
+        throw new RuntimeException("Reading XTB file", e);
+      }
+    } else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level) {
+      // In SIMPLE or WHITESPACE mode, if the user hasn't specified a
+      // translations file, they might reasonably try to write their own
+      // implementation of goog.getMsg that makes the substitution at
+      // run-time.
+      //
+      // In ADVANCED mode, goog.getMsg is going to be renamed anyway,
+      // so we might as well inline it.
+      options.messageBundle = new EmptyMessageBundle();
+    }
+
     return options;
   }
 
@@ -630,13 +869,13 @@
   }
 
   @Override
-  protected List<JSSourceFile> createExterns() throws FlagUsageException,
+  protected List<SourceFile> createExterns() throws FlagUsageException,
       IOException {
-    List<JSSourceFile> externs = super.createExterns();
-    if (flags.use_only_custom_externs || isInTestMode()) {
+    List<SourceFile> externs = super.createExterns();
+    if (flags.useOnlyCustomExterns || isInTestMode()) {
       return externs;
     } else {
-      List<JSSourceFile> defaultExterns = getDefaultExterns();
+      List<SourceFile> defaultExterns = getDefaultExterns();
       defaultExterns.addAll(externs);
       return defaultExterns;
     }
@@ -654,6 +893,7 @@
     "gecko_event.js",
     "ie_event.js",
     "webkit_event.js",
+    "w3c_device_sensor_event.js",
 
     // DOM apis
     "w3c_dom1.js",
@@ -672,6 +912,8 @@
     // Top-level namespaces
     "google.js",
 
+    "chrome.js",
+
     "deprecated.js",
     "fileapi.js",
     "flash.js",
@@ -682,10 +924,12 @@
     "ie_vml.js",
     "iphone.js",
     "webstorage.js",
+    "w3c_anim_timing.js",
     "w3c_css3d.js",
     "w3c_elementtraversal.js",
     "w3c_geolocation.js",
     "w3c_indexeddb.js",
+    "w3c_navigation_timing.js",
     "w3c_range.js",
     "w3c_selectors.js",
     "w3c_xml.js",
@@ -697,15 +941,22 @@
    * @return a mutable list
    * @throws IOException
    */
-  public static List<JSSourceFile> getDefaultExterns() throws IOException {
+  public static List<SourceFile> getDefaultExterns() throws IOException {
     InputStream input = CommandLineRunner.class.getResourceAsStream(
         "/externs.zip");
+    if (input == null) {
+      // In some environments, the externs.zip is relative to this class.
+      input = CommandLineRunner.class.getResourceAsStream("externs.zip");
+    }
+    Preconditions.checkNotNull(input);
+
     ZipInputStream zip = new ZipInputStream(input);
-    Map<String, JSSourceFile> externsMap = Maps.newHashMap();
+    Map<String, SourceFile> externsMap = Maps.newHashMap();
     for (ZipEntry entry = null; (entry = zip.getNextEntry()) != null; ) {
-      LimitInputStream entryStream = new LimitInputStream(zip, entry.getSize());
+      BufferedInputStream entryStream = new BufferedInputStream(
+          ByteStreams.limit(zip, entry.getSize()));
       externsMap.put(entry.getName(),
-          JSSourceFile.fromInputStream(
+          SourceFile.fromInputStream(
               // Give the files an odd prefix, so that they do not conflict
               // with the user's files.
               "externs.zip//" + entry.getName(),
@@ -718,7 +969,7 @@
 
     // Order matters, so the resources must be added to the result list
     // in the expected order.
-    List<JSSourceFile> externs = Lists.newArrayList();
+    List<SourceFile> externs = Lists.newArrayList();
     for (String key : DEFAULT_EXTERNS_NAMES) {
       externs.add(externsMap.get(key));
     }
diff -r -u original/test/com/google/javascript/jscomp/CommandLineRunnerTest.java buggy/test/com/google/javascript/jscomp/CommandLineRunnerTest.java
--- original/test/com/google/javascript/jscomp/CommandLineRunnerTest.java	2023-06-13 15:31:45.851113138 +0800
+++ buggy/test/com/google/javascript/jscomp/CommandLineRunnerTest.java	2023-06-12 11:40:29.182590079 +0800
@@ -18,17 +18,23 @@
 
 import com.google.common.base.Function;
 import com.google.common.base.Joiner;
+import com.google.common.base.Preconditions;
 import com.google.common.base.Supplier;
 import com.google.common.base.Suppliers;
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.Lists;
+import com.google.common.collect.Maps;
+import com.google.javascript.jscomp.AbstractCommandLineRunner.FlagUsageException;
+import com.google.javascript.jscomp.CompilerOptions.LanguageMode;
 import com.google.javascript.rhino.Node;
 
 import junit.framework.TestCase;
 
 import java.io.ByteArrayOutputStream;
+import java.io.IOException;
 import java.io.PrintStream;
 import java.util.List;
+import java.util.Map;
 
 /**
  * Tests for {@link CommandLineRunner}.
@@ -42,6 +48,7 @@
   private List<Integer> exitCodes = null;
   private ByteArrayOutputStream outReader = null;
   private ByteArrayOutputStream errReader = null;
+  private Map<Integer,String> filenames;
 
   // If set, this will be appended to the end of the args list.
   // For testing args parsing.
@@ -61,12 +68,14 @@
   private List<String> args = Lists.newArrayList();
 
   /** Externs for the test */
-  private final List<JSSourceFile> DEFAULT_EXTERNS = ImmutableList.of(
-    JSSourceFile.fromCode("externs",
+  private final List<SourceFile> DEFAULT_EXTERNS = ImmutableList.of(
+    SourceFile.fromCode("externs",
         "var arguments;"
         + "/**\n"
         + " * @constructor\n"
         + " * @param {...*} var_args\n"
+        + " * @nosideeffects\n"
+        + " * @throws {Error}\n"
         + " */\n"
         + "function Function(var_args) {}\n"
         + "/**\n"
@@ -90,15 +99,19 @@
         + "/** @constructor */ function Window() {}\n"
         + "/** @type {string} */ Window.prototype.name;\n"
         + "/** @type {Window} */ var window;"
-        + "/** @nosideeffects */ function noSideEffects() {}")
+        + "/** @constructor */ function Element() {}"
+        + "Element.prototype.offsetWidth;"
+        + "/** @nosideeffects */ function noSideEffects() {}\n"
+        + "/** @param {...*} x */ function alert(x) {}\n")
   );
 
-  private List<JSSourceFile> externs;
+  private List<SourceFile> externs;
 
   @Override
   public void setUp() throws Exception {
     super.setUp();
     externs = DEFAULT_EXTERNS;
+    filenames = Maps.newHashMap();
     lastCompiler = null;
     lastArg = null;
     outReader = new ByteArrayOutputStream();
@@ -114,6 +127,15 @@
     super.tearDown();
   }
 
+  public void testUnknownAnnotation() {
+    args.add("--warning_level=VERBOSE");
+    test("/** @unknownTag */ function f() {}",
+         RhinoErrorReporter.BAD_JSDOC_ANNOTATION);
+
+    args.add("--extra_annotation_name=unknownTag");
+    testSame("/** @unknownTag */ function f() {}");
+  }
+
   public void testWarningGuardOrdering1() {
     args.add("--jscomp_error=globalThis");
     args.add("--jscomp_off=globalThis");
@@ -138,6 +160,16 @@
     test("function f() { this.a = 3; }", CheckGlobalThis.GLOBAL_THIS);
   }
 
+  public void testSimpleModeLeavesUnusedParams() {
+    args.add("--compilation_level=SIMPLE_OPTIMIZATIONS");
+    testSame("window.f = function(a) {};");
+  }
+
+  public void testAdvancedModeRemovesUnusedParams() {
+    args.add("--compilation_level=ADVANCED_OPTIMIZATIONS");
+    test("window.f = function(a) {};", "window.a = function() {};");
+  }
+
   public void testCheckGlobalThisOffByDefault() {
     testSame("function f() { this.a = 3; }");
   }
@@ -152,11 +184,72 @@
     test("function f() { this.a = 3; }", CheckGlobalThis.GLOBAL_THIS);
   }
 
+  public void testCheckGlobalThisOff() {
+    args.add("--warning_level=VERBOSE");
+    args.add("--jscomp_off=globalThis");
+    testSame("function f() { this.a = 3; }");
+  }
+
   public void testTypeCheckingOffByDefault() {
     test("function f(x) { return x; } f();",
          "function f(a) { return a; } f();");
   }
 
+  public void testReflectedMethods() {
+    args.add("--compilation_level=ADVANCED_OPTIMIZATIONS");
+    test(
+        "/** @constructor */" +
+        "function Foo() {}" +
+        "Foo.prototype.handle = function(x, y) { alert(y); };" +
+        "var x = goog.reflect.object(Foo, {handle: 1});" +
+        "for (var i in x) { x[i].call(x); }" +
+        "window['Foo'] = Foo;",
+        "function a() {}" +
+        "a.prototype.a = function(e, d) { alert(d); };" +
+        "var b = goog.c.b(a, {a: 1}),c;" +
+        "for (c in b) { b[c].call(b); }" +
+        "window.Foo = a;");
+  }
+
+  public void testInlineVariables() {
+    args.add("--compilation_level=ADVANCED_OPTIMIZATIONS");
+    // Verify local var "val" in method "bar" is not inlined over the "inc"
+    // method call (which has side-effects) but "c" is inlined (which can't be
+    // modified by the call).
+    test(
+        "/** @constructor */ function F() { this.a = 0; }" +
+        "F.prototype.inc = function() { this.a++; return 10; };" +
+        "F.prototype.bar = function() { " +
+        "  var c = 3; var val = this.inc(); this.a += val + c;" +
+        "};" +
+        "window['f'] = new F();" +
+        "window['f']['inc'] = window['f'].inc;" +
+        "window['f']['bar'] = window['f'].bar;" +
+        "use(window['f'].a)",
+        "function a(){ this.a = 0; }" +
+        "a.prototype.b = function(){ this.a++; return 10; };" +
+        "a.prototype.c = function(){ var b=this.b(); this.a += b + 3; };" +
+        "window.f = new a;" +
+        "window.f.inc = window.f.b;" +
+        "window.f.bar = window.f.c;" +
+        "use(window.f.a);");
+  }
+
+  public void testTypedAdvanced() {
+    args.add("--compilation_level=ADVANCED_OPTIMIZATIONS");
+    args.add("--use_types_for_optimization");
+    test(
+        "/** @constructor */\n" +
+        "function Foo() {}\n" +
+        "Foo.prototype.handle1 = function(x, y) { alert(y); };\n" +
+        "/** @constructor */\n" +
+        "function Bar() {}\n" +
+        "Bar.prototype.handle1 = function(x, y) {};\n" +
+        "new Foo().handle1(1, 2);\n" +
+        "new Bar().handle1(1, 2);\n",
+        "alert(2)");
+  }
+
   public void testTypeCheckingOnWithVerbose() {
     args.add("--warning_level=VERBOSE");
     test("function f(x) { return x; } f();", TypeCheck.WRONG_ARGUMENT_COUNT);
@@ -197,7 +290,7 @@
   public void testCheckSymbolsOnForVerbose() {
     args.add("--warning_level=VERBOSE");
     test("x = 3;", VarCheck.UNDEFINED_VAR_ERROR);
-    test("var y; var y;", SyntacticScopeCreator.VAR_MULTIPLY_DECLARED_ERROR);
+    test("var y; var y;", VarCheck.VAR_MULTIPLY_DECLARED_ERROR);
   }
 
   public void testCheckSymbolsOverrideForVerbose() {
@@ -206,6 +299,12 @@
     testSame("x = 3;");
   }
 
+  public void testCheckSymbolsOverrideForQuiet() {
+    args.add("--warning_level=QUIET");
+    args.add("--jscomp_error=undefinedVars");
+    test("x = 3;", VarCheck.UNDEFINED_VAR_ERROR);
+  }
+
   public void testCheckUndefinedProperties1() {
     args.add("--warning_level=VERBOSE");
     args.add("--jscomp_error=missingProperties");
@@ -279,6 +378,18 @@
     testSame("var goog = {}; goog.provide('goog.dom');");
   }
 
+  public void testGetMsgWiring() throws Exception {
+    test("var goog = {}; goog.getMsg = function(x) { return x; };" +
+         "/** @desc A real foo. */ var MSG_FOO = goog.getMsg('foo');",
+         "var goog={getMsg:function(a){return a}}, " +
+         "MSG_FOO=goog.getMsg('foo');");
+    args.add("--compilation_level=ADVANCED_OPTIMIZATIONS");
+    test("var goog = {}; goog.getMsg = function(x) { return x; };" +
+         "/** @desc A real foo. */ var MSG_FOO = goog.getMsg('foo');" +
+         "window['foo'] = MSG_FOO;",
+         "window.foo = 'foo';");
+  }
+
   public void testCssNameWiring() throws Exception {
     test("var goog = {}; goog.getCssName = function() {};" +
          "goog.setCssNameMapping = function() {};" +
@@ -299,10 +410,14 @@
   //////////////////////////////////////////////////////////////////////////////
   // Integration tests
 
-  public void testIssue70() {
+  public void testIssue70a() {
     test("function foo({}) {}", RhinoErrorReporter.PARSE_ERROR);
   }
 
+  public void testIssue70b() {
+    test("function foo([]) {}", RhinoErrorReporter.PARSE_ERROR);
+  }
+
   public void testIssue81() {
     args.add("--compilation_level=ADVANCED_OPTIMIZATIONS");
     useStringComparison = true;
@@ -312,6 +427,7 @@
 
   public void testIssue115() {
     args.add("--compilation_level=SIMPLE_OPTIMIZATIONS");
+    args.add("--jscomp_off=es5Strict");
     args.add("--warning_level=VERBOSE");
     test("function f() { " +
          "  var arguments = Array.prototype.slice.call(arguments, 0);" +
@@ -327,19 +443,80 @@
     args.add("--compilation_level=SIMPLE_OPTIMIZATIONS");
     test("function f(p) {" +
          " var x;" +
-         " return ((x=p.id) && (x=parseInt(x.substr(1))) && x>0);" +
+         " return ((x=p.id) && (x=parseInt(x.substr(1)))) && x>0;" +
          "}",
          "function f(b) {" +
          " var a;" +
-         " return ((a=b.id) && (a=parseInt(a.substr(1))) && a>0);" +
+         " return ((a=b.id) && (a=parseInt(a.substr(1)))) && 0<a;" +
          "}");
   }
 
+  public void testHiddenSideEffect() {
+    args.add("--compilation_level=ADVANCED_OPTIMIZATIONS");
+    test("element.offsetWidth;",
+         "element.offsetWidth", CheckSideEffects.USELESS_CODE_ERROR);
+  }
+
+  public void testIssue504() {
+    args.add("--compilation_level=ADVANCED_OPTIMIZATIONS");
+    test("void function() { alert('hi'); }();",
+         "alert('hi');void 0", CheckSideEffects.USELESS_CODE_ERROR);
+  }
+
+  public void testIssue601() {
+    args.add("--compilation_level=WHITESPACE_ONLY");
+    test("function f() { return '\\v' == 'v'; } window['f'] = f;",
+         "function f(){return'\\v'=='v'}window['f']=f");
+  }
+
+  public void testIssue601b() {
+    args.add("--compilation_level=ADVANCED_OPTIMIZATIONS");
+    test("function f() { return '\\v' == 'v'; } window['f'] = f;",
+         "window.f=function(){return'\\v'=='v'}");
+  }
+
+  public void testIssue601c() {
+    args.add("--compilation_level=ADVANCED_OPTIMIZATIONS");
+    test("function f() { return '\\u000B' == 'v'; } window['f'] = f;",
+         "window.f=function(){return'\\u000B'=='v'}");
+  }
+
+  public void testIssue846() {
+    args.add("--compilation_level=ADVANCED_OPTIMIZATIONS");
+    testSame(
+        "try { new Function('this is an error'); } catch(a) { alert('x'); }");
+  }
+
+  public void testSideEffectIntegration() {
+    args.add("--compilation_level=ADVANCED_OPTIMIZATIONS");
+    test("/** @constructor */" +
+         "var Foo = function() {};" +
+
+         "Foo.prototype.blah = function() {" +
+         "  Foo.bar_(this)" +
+         "};" +
+
+         "Foo.bar_ = function(f) {" +
+         "  f.x = 5;" +
+         "};" +
+
+         "var y = new Foo();" +
+
+         "Foo.bar_({});" +
+
+         // We used to strip this too
+         // due to bad side-effect propagation.
+         "y.blah();" +
+
+         "alert(y);",
+         "var a = new function(){}; a.a = 5; alert(a);");
+  }
+
   public void testDebugFlag1() {
     args.add("--compilation_level=SIMPLE_OPTIMIZATIONS");
     args.add("--debug=false");
     test("function foo(a) {}",
-         "function foo() {}");
+         "function foo(a) {}");
   }
 
   public void testDebugFlag2() {
@@ -418,14 +595,15 @@
   }
 
   public void testSourceSortingOff() {
-    test(new String[] {
+    args.add("--compilation_level=WHITESPACE_ONLY");
+    testSame(
+        new String[] {
           "goog.require('beer');",
           "goog.provide('beer');"
-         }, ProcessClosurePrimitives.LATE_PROVIDE_ERROR);
+        });
   }
 
   public void testSourceSortingOn() {
-    args.add("--manage_closure_dependencies=true");
     test(new String[] {
           "goog.require('beer');",
           "goog.provide('beer');"
@@ -436,6 +614,30 @@
          });
   }
 
+  public void testSourceSortingOn2() {
+    test(new String[] {
+          "goog.provide('a');",
+          "goog.require('a');\n" +
+          "var COMPILED = false;",
+         },
+         new String[] {
+           "var a={};",
+           "var COMPILED=!1"
+         });
+  }
+
+  public void testSourceSortingOn3() {
+    args.add("--manage_closure_dependencies=true");
+    test(new String[] {
+          "goog.addDependency('sym', [], []);\nvar x = 3;",
+          "var COMPILED = false;",
+         },
+         new String[] {
+          "var COMPILED = !1;",
+          "var x = 3;"
+         });
+  }
+
   public void testSourceSortingCircularDeps1() {
     args.add("--manage_closure_dependencies=true");
     test(new String[] {
@@ -535,6 +737,74 @@
          });
   }
 
+  public void testSourcePruningOn7() {
+    args.add("--manage_closure_dependencies=true");
+    test(new String[] {
+          "var COMPILED = false;",
+         },
+         new String[] {
+          "var COMPILED = !1;",
+         });
+  }
+
+  public void testSourcePruningOn8() {
+    args.add("--only_closure_dependencies");
+    args.add("--closure_entry_point=scotch");
+    args.add("--warning_level=VERBOSE");
+    test(new String[] {
+          "/** @externs */\n" +
+          "var externVar;",
+          "goog.provide('scotch'); var x = externVar;"
+         },
+         new String[] {
+           "var scotch = {}, x = externVar;",
+         });
+  }
+
+  public void testModuleEntryPoint() throws Exception {
+    useModules = ModulePattern.STAR;
+    args.add("--only_closure_dependencies");
+    args.add("--closure_entry_point=m1:a");
+    test(
+        new String[] {
+          "goog.provide('a');",
+          "goog.provide('b');"
+        },
+        // Check that 'b' was stripped out, and 'a' was moved to the second
+        // module (m1).
+        new String[] {
+          "",
+          "var a = {};"
+        });
+  }
+
+  public void testNoCompile() {
+    args.add("--warning_level=VERBOSE");
+    test(new String[] {
+          "/** @nocompile */\n" +
+          "goog.provide('x');\n" +
+          "var dupeVar;",
+          "var dupeVar;"
+         },
+         new String[] {
+           "var dupeVar;"
+         });
+  }
+
+  public void testDependencySortingWhitespaceMode() {
+    args.add("--manage_closure_dependencies");
+    args.add("--compilation_level=WHITESPACE_ONLY");
+    test(new String[] {
+          "goog.require('beer');",
+          "goog.provide('beer');\ngoog.require('hops');",
+          "goog.provide('hops');",
+         },
+         new String[] {
+          "goog.provide('hops');",
+          "goog.provide('beer');\ngoog.require('hops');",
+          "goog.require('beer');"
+         });
+  }
 
   public void testForwardDeclareDroppedTypes() {
     args.add("--manage_closure_dependencies=true");
@@ -546,7 +816,7 @@
           "goog.provide('Scotch'); var x = 3;"
          },
          new String[] {
-           "var beer = {}; function f() {}",
+           "var beer = {}; function f(a) {}",
            ""
          });
 
@@ -555,12 +825,45 @@
           "goog.provide('beer'); /** @param {Scotch} x */ function f(x) {}"
          },
          new String[] {
-           "var beer = {}; function f() {}",
+           "var beer = {}; function f(a) {}",
            ""
          },
          RhinoErrorReporter.TYPE_PARSE_ERROR);
   }
 
+  public void testOnlyClosureDependenciesEmptyEntryPoints() throws Exception {
+    // Prevents this from trying to load externs.zip
+    args.add("--use_only_custom_externs=true");
+
+    args.add("--only_closure_dependencies=true");
+    try {
+      CommandLineRunner runner = createCommandLineRunner(new String[0]);
+      runner.doRun();
+      fail("Expected FlagUsageException");
+    } catch (FlagUsageException e) {
+      assertTrue(e.getMessage(),
+          e.getMessage().contains("only_closure_dependencies"));
+    }
+  }
+
+  public void testOnlyClosureDependenciesOneEntryPoint() throws Exception {
+    args.add("--only_closure_dependencies=true");
+    args.add("--closure_entry_point=beer");
+    test(new String[] {
+          "goog.require('beer'); var beerRequired = 1;",
+          "goog.provide('beer');\ngoog.require('hops');\nvar beerProvided = 1;",
+          "goog.provide('hops'); var hopsProvided = 1;",
+          "goog.provide('scotch'); var scotchProvided = 1;",
+          "goog.require('scotch');\nvar includeFileWithoutProvides = 1;",
+          "/** This is base.js */\nvar COMPILED = false;",
+         },
+         new String[] {
+           "var COMPILED = !1;",
+           "var hops = {}, hopsProvided = 1;",
+           "var beer = {}, beerProvided = 1;"
+         });
+  }
+
   public void testSourceMapExpansion1() {
     args.add("--js_output_file");
     args.add("/path/to/out.js");
@@ -600,6 +903,30 @@
         lastCompiler.getOptions().sourceMapFormat);
   }
 
+  public void testSourceMapFormat2() {
+    args.add("--js_output_file");
+    args.add("/path/to/out.js");
+    args.add("--source_map_format=V3");
+    testSame("var x = 3;");
+    assertEquals(SourceMap.Format.V3,
+        lastCompiler.getOptions().sourceMapFormat);
+  }
+
+  public void testModuleWrapperBaseNameExpansion() throws Exception {
+    useModules = ModulePattern.CHAIN;
+    args.add("--module_wrapper=m0:%s // %basename%");
+    testSame(new String[] {
+      "var x = 3;",
+      "var y = 4;"
+    });
+
+    StringBuilder builder = new StringBuilder();
+    lastCommandLineRunner.writeModuleOutput(
+        builder,
+        lastCompiler.getModuleGraph().getRootModule());
+    assertEquals("var x=3; // m0.js\n", builder.toString());
+  }
+
   public void testCharSetExpansion() {
     testSame("");
     assertEquals("US-ASCII", lastCompiler.getOptions().outputCharset);
@@ -614,8 +941,8 @@
           "var x = 3;", "var y = 5;", "var z = 7;", "var a = 9;"});
 
     StringBuilder builder = new StringBuilder();
-    lastCommandLineRunner.printModuleGraphManifestTo(
-        lastCompiler.getModuleGraph(), builder);
+    lastCommandLineRunner.printModuleGraphManifestOrBundleTo(
+        lastCompiler.getModuleGraph(), builder, true);
     assertEquals(
         "{m0}\n" +
         "i0\n" +
@@ -637,8 +964,8 @@
           "var x = 3;", "var y = 5;", "var z = 7;", "var a = 9;"});
 
     StringBuilder builder = new StringBuilder();
-    lastCommandLineRunner.printModuleGraphManifestTo(
-        lastCompiler.getModuleGraph(), builder);
+    lastCommandLineRunner.printModuleGraphManifestOrBundleTo(
+        lastCompiler.getModuleGraph(), builder, true);
     assertEquals(
         "{m0}\n" +
         "i0\n" +
@@ -654,6 +981,16 @@
         builder.toString());
   }
 
+  public void testOutputModuleGraphJson() throws Exception {
+    useModules = ModulePattern.STAR;
+    testSame(new String[] {
+        "var x = 3;", "var y = 5;", "var z = 7;", "var a = 9;"});
+
+    StringBuilder builder = new StringBuilder();
+    lastCommandLineRunner.printModuleGraphJsonTo(builder);
+    assertTrue(builder.toString().indexOf("transitive-dependencies") != -1);
+  }
+
   public void testVersionFlag() {
     args.add("--version");
     testSame("");
@@ -695,7 +1032,7 @@
 
   public void testSyntheticExterns() {
     externs = ImmutableList.of(
-        JSSourceFile.fromCode("externs", "myVar.property;"));
+        SourceFile.fromCode("externs", "myVar.property;"));
     test("var theirVar = {}; var myVar = {}; var yourVar = {};",
          VarCheck.UNDEFINED_EXTERN_VAR_ERROR);
 
@@ -707,7 +1044,7 @@
     args.add("--jscomp_off=externsValidation");
     args.add("--warning_level=VERBOSE");
     test("var theirVar = {}; var myVar = {}; var myVar = {};",
-         SyntacticScopeCreator.VAR_MULTIPLY_DECLARED_ERROR);
+         VarCheck.VAR_MULTIPLY_DECLARED_ERROR);
   }
 
   public void testGoogAssertStripping() {
@@ -737,6 +1074,147 @@
        CheckAccessControls.DEPRECATED_NAME);
   }
 
+  public void testTwoParseErrors() {
+    // If parse errors are reported in different files, make
+    // sure all of them are reported.
+    Compiler compiler = compile(new String[] {
+      "var a b;",
+      "var b c;"
+    });
+    assertEquals(2, compiler.getErrors().length);
+  }
+
+  public void testES3ByDefault() {
+    useStringComparison = true;
+    test(
+        "var x = f.function",
+        "var x=f[\"function\"];",
+        RhinoErrorReporter.INVALID_ES3_PROP_NAME);
+  }
+
+  public void testES5ChecksByDefault() {
+    testSame("var x = 3; delete x;");
+  }
+
+  public void testES5ChecksInVerbose() {
+    args.add("--warning_level=VERBOSE");
+    test("function f(x) { delete x; }", StrictModeCheck.DELETE_VARIABLE);
+  }
+
+  public void testES5() {
+    args.add("--language_in=ECMASCRIPT5");
+    test("var x = f.function", "var x = f.function");
+    test("var let", "var let");
+  }
+
+  public void testES5Strict() {
+    args.add("--language_in=ECMASCRIPT5_STRICT");
+    test("var x = f.function", "'use strict';var x = f.function");
+    test("var let", RhinoErrorReporter.PARSE_ERROR);
+    test("function f(x) { delete x; }", StrictModeCheck.DELETE_VARIABLE);
+  }
+
+  public void testES5StrictUseStrict() {
+    args.add("--language_in=ECMASCRIPT5_STRICT");
+    Compiler compiler = compile(new String[] {"var x = f.function"});
+    String outputSource = compiler.toSource();
+    assertEquals("'use strict'", outputSource.substring(0, 12));
+  }
+
+  public void testES5StrictUseStrictMultipleInputs() {
+    args.add("--language_in=ECMASCRIPT5_STRICT");
+    Compiler compiler = compile(new String[] {"var x = f.function",
+        "var y = f.function", "var z = f.function"});
+    String outputSource = compiler.toSource();
+    assertEquals("'use strict'", outputSource.substring(0, 12));
+    assertEquals(outputSource.substring(13).indexOf("'use strict'"), -1);
+  }
+
+  public void testWithKeywordDefault() {
+    test("var x = {}; with (x) {}", ControlStructureCheck.USE_OF_WITH);
+  }
+
+  public void testWithKeywordWithEs5ChecksOff() {
+    args.add("--jscomp_off=es5Strict");
+    testSame("var x = {}; with (x) {}");
+  }
+
+  public void testNoSrCFilesWithManifest() throws IOException {
+    args.add("--use_only_custom_externs=true");
+    args.add("--output_manifest=test.MF");
+    CommandLineRunner runner = createCommandLineRunner(new String[0]);
+    String expectedMessage = "";
+    try {
+      runner.doRun();
+    } catch (FlagUsageException e) {
+      expectedMessage = e.getMessage();
+    }
+    assertEquals(expectedMessage, "Bad --js flag. " +
+      "Manifest files cannot be generated when the input is from stdin.");
+  }
+
+  public void testTransformAMD() {
+    args.add("--transform_amd_modules");
+    test("define({test: 1})", "exports = {test: 1}");
+  }
+
+  public void testProcessCJS() {
+    useStringComparison = true;
+    args.add("--process_common_js_modules");
+    args.add("--common_js_entry_module=foo/bar");
+    setFilename(0, "foo/bar.js");
+    String expected = "var module$foo$bar={test:1};";
+    test("exports.test = 1", expected);
+    assertEquals(expected + "\n", outReader.toString());
+  }
+
+  public void testProcessCJSWithModuleOutput() {
+    useStringComparison = true;
+    args.add("--process_common_js_modules");
+    args.add("--common_js_entry_module=foo/bar");
+    args.add("--module=auto");
+    setFilename(0, "foo/bar.js");
+    test("exports.test = 1",
+        "var module$foo$bar={test:1};");
+    // With modules=auto no direct output is created.
+    assertEquals("", outReader.toString());
+  }
+
+  public void testFormattingSingleQuote() {
+    testSame("var x = '';");
+    assertEquals("var x=\"\";", lastCompiler.toSource());
+
+    args.add("--formatting=SINGLE_QUOTES");
+    testSame("var x = '';");
+    assertEquals("var x='';", lastCompiler.toSource());
+  }
+
+  public void testTransformAMDAndProcessCJS() {
+    useStringComparison = true;
+    args.add("--transform_amd_modules");
+    args.add("--process_common_js_modules");
+    args.add("--common_js_entry_module=foo/bar");
+    setFilename(0, "foo/bar.js");
+    test("define({foo: 1})",
+        "var module$foo$bar={},module$foo$bar={foo:1};");
+  }
+
+  public void testModuleJSON() {
+    useStringComparison = true;
+    args.add("--transform_amd_modules");
+    args.add("--process_common_js_modules");
+    args.add("--common_js_entry_module=foo/bar");
+    args.add("--output_module_dependencies=test.json");
+    setFilename(0, "foo/bar.js");
+    test("define({foo: 1})",
+        "var module$foo$bar={},module$foo$bar={foo:1};");
+  }
+
+  public void testOutputSameAsInput() {
+    args.add("--js_output_file=" + getFilename(0));
+    test("", AbstractCommandLineRunner.OUTPUT_SAME_AS_INPUT_ERROR);
+  }
+
   /* Helper functions */
 
   private void testSame(String original) {
@@ -798,6 +1276,10 @@
     test(new String[] { original }, warning);
   }
 
+  private void test(String original, String expected, DiagnosticType warning) {
+    test(new String[] { original }, new String[] { expected }, warning);
+  }
+
   /**
    * Asserts that when compiling, there is an error or warning.
    */
@@ -828,10 +1310,10 @@
       args.add("/path/to/input" + i + ".js");
       if (useModules == ModulePattern.CHAIN) {
         args.add("--module");
-        args.add("mod" + i + ":1" + (i > 0 ? (":mod" + (i - 1)) : ""));
+        args.add("m" + i + ":1" + (i > 0 ? (":m" + (i - 1)) : ""));
       } else if (useModules == ModulePattern.STAR) {
         args.add("--module");
-        args.add("mod" + i + ":1" + (i > 0 ? ":mod0" : ""));
+        args.add("m" + i + ":1" + (i > 0 ? ":m0" : ""));
       }
     }
 
@@ -848,14 +1330,14 @@
 
   private Compiler compile(String[] original) {
     CommandLineRunner runner = createCommandLineRunner(original);
-    assertTrue(runner.shouldRunCompiler());
-    Supplier<List<JSSourceFile>> inputsSupplier = null;
+    assertTrue(new String(errReader.toByteArray()), runner.shouldRunCompiler());
+    Supplier<List<SourceFile>> inputsSupplier = null;
     Supplier<List<JSModule>> modulesSupplier = null;
 
     if (useModules == ModulePattern.NONE) {
-      List<JSSourceFile> inputs = Lists.newArrayList();
+      List<SourceFile> inputs = Lists.newArrayList();
       for (int i = 0; i < original.length; i++) {
-        inputs.add(JSSourceFile.fromCode("input" + i, original[i]));
+        inputs.add(SourceFile.fromCode(getFilename(i), original[i]));
       }
       inputsSupplier = Suppliers.ofInstance(inputs);
     } else if (useModules == ModulePattern.STAR) {
@@ -871,7 +1353,7 @@
     }
 
     runner.enableTestMode(
-        Suppliers.<List<JSSourceFile>>ofInstance(externs),
+        Suppliers.<List<SourceFile>>ofInstance(externs),
         inputsSupplier,
         modulesSupplier,
         new Function<Integer, Boolean>() {
@@ -890,13 +1372,29 @@
     String[] argStrings = args.toArray(new String[] {});
     CommandLineRunner runner = new CommandLineRunner(argStrings);
     Compiler compiler = runner.createCompiler();
-    List<JSSourceFile> inputs = Lists.newArrayList();
+    List<SourceFile> inputs = Lists.newArrayList();
     for (int i = 0; i < original.length; i++) {
-      inputs.add(JSSourceFile.fromCode("input" + i, original[i]));
+      inputs.add(SourceFile.fromCode(getFilename(i), original[i]));
     }
-    compiler.init(externs, inputs, new CompilerOptions());
+    CompilerOptions options = new CompilerOptions();
+    // ECMASCRIPT5 is the most forgiving.
+    options.setLanguageIn(LanguageMode.ECMASCRIPT5);
+    compiler.init(externs, inputs, options);
     Node all = compiler.parseInputs();
+    Preconditions.checkState(compiler.getErrorCount() == 0);
+    Preconditions.checkNotNull(all);
     Node n = all.getLastChild();
     return n;
   }
+
+  private void setFilename(int i, String filename) {
+    this.filenames.put(i, filename);
+  }
+
+  private String getFilename(int i) {
+    if (filenames.isEmpty()) {
+      return "input" + i;
+    }
+    return filenames.get(i);
+  }
 }
