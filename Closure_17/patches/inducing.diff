diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java
index 73aee95..a0dd90b 100644
--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java
+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java
@@ -544,8 +544,10 @@
       info = getBestJSDocInfo(objectLit);
       Node lValue = getBestLValue(objectLit);
       String lValueName = getBestLValueName(lValue);
+      boolean createdEnumType = false;
       if (info != null && info.hasEnumParameterType()) {
         type = createEnumTypeFromNodes(objectLit, lValueName, info, lValue);
+        createdEnumType = true;
       }
 
       if (type == null) {
@@ -554,8 +556,11 @@
 
       setDeferredType(objectLit, type);
 
-      processObjectLitProperties(
-          t, objectLit, ObjectType.cast(objectLit.getJSType()));
+      // If this is an enum, the properties were already taken care of above.
+      if (!createdEnumType) {
+        processObjectLitProperties(
+            t, objectLit, ObjectType.cast(objectLit.getJSType()));
+      }
     }
 
     /**
@@ -1127,20 +1132,25 @@
           shouldUseFunctionLiteralType(
               (FunctionType) rValue.getJSType(), info, lValue)) {
         return rValue.getJSType();
-      } else if (info != null && info.hasEnumParameterType()) {
-        if (rValue != null && rValue.getType() == Token.OBJECTLIT) {
-          return rValue.getJSType();
-        } else {
-          return createEnumTypeFromNodes(
+      } else if (info != null) {
+        if (info.hasEnumParameterType()) {
+          if (rValue != null && rValue.getType() == Token.OBJECTLIT) {
+            return rValue.getJSType();
+          } else {
+            return createEnumTypeFromNodes(
+                rValue, lValue.getQualifiedName(), info, lValue);
+          }
+        } else if (info.isConstructor() || info.isInterface()) {
+          return createFunctionTypeFromNodes(
               rValue, lValue.getQualifiedName(), info, lValue);
+        } else if (info.isConstant() && rValue != null
+            && rValue.getJSType() != null
+            && !rValue.getJSType().isUnknownType()) {
+          return rValue.getJSType();
         }
-      } else if (info != null &&
-                 (info.isConstructor() || info.isInterface())) {
-        return createFunctionTypeFromNodes(
-            rValue, lValue.getQualifiedName(), info, lValue);
-      } else {
-        return getDeclaredTypeInAnnotation(sourceName, lValue, info);
       }
+
+      return getDeclaredTypeInAnnotation(sourceName, lValue, info);
     }
 
     /**
@@ -1290,18 +1300,19 @@
       // 1) @type annnotation / @enum annotation
       // 2) ASSIGN to FUNCTION literal
       // 3) @param/@return annotation (with no function literal)
-      // 4) ASSIGN to anything else
+      // 4) ASSIGN to something marked @const
+      // 5) ASSIGN to anything else
       //
-      // 1 and 3 are declarations, 4 is inferred, and 2 is a declaration iff
+      // 1, 3, and 4 are declarations, 5 is inferred, and 2 is a declaration iff
       // the function has not been declared before.
       //
       // FUNCTION literals are special because TypedScopeCreator is very smart
       // about getting as much type information as possible for them.
 
-      // Determining type for #1 + #2 + #3
+      // Determining type for #1 + #2 + #3 + #4
       JSType valueType = getDeclaredType(t.getSourceName(), info, n, rhsValue);
       if (valueType == null && rhsValue != null) {
-        // Determining type for #4
+        // Determining type for #5
         valueType = rhsValue.getJSType();
       }
 
@@ -1318,9 +1329,12 @@
 
       boolean inferred = true;
       if (info != null) {
-        // Determining declaration for #1 + #3
-        inferred = !(info.hasType() || info.hasEnumParameterType() ||
-            FunctionTypeBuilder.isFunctionTypeDeclaration(info));
+        // Determining declaration for #1 + #3 + #4
+        inferred = !(info.hasType()
+            || info.hasEnumParameterType()
+            || (info.isConstant() && valueType != null
+                && !valueType.isUnknownType())
+            || FunctionTypeBuilder.isFunctionTypeDeclaration(info));
       }
 
       if (inferred) {
diff --git a/test/com/google/javascript/jscomp/TypeCheckTest.java b/test/com/google/javascript/jscomp/TypeCheckTest.java
index 0eb9cb1..a1ba9c7 100644
--- a/test/com/google/javascript/jscomp/TypeCheckTest.java
+++ b/test/com/google/javascript/jscomp/TypeCheckTest.java
@@ -2768,6 +2768,16 @@
         "required: number");
   }
 
+  public void testEnum41() throws Exception {
+    testTypes(
+        "/** @enum {number} */ var MyEnum = {/** @const */ FOO: 1};" +
+        "/** @return {string} */" +
+        "function f() { return MyEnum.FOO; }",
+        "inconsistent return type\n" +
+        "found   : MyEnum.<number>\n" +
+        "required: string");
+  }
+
   public void testAliasedEnum1() throws Exception {
     testTypes(
         "/** @enum */ var YourEnum = {FOO: 3};" +
diff --git a/test/com/google/javascript/jscomp/TypedScopeCreatorTest.java b/test/com/google/javascript/jscomp/TypedScopeCreatorTest.java
index 8b72c21..f7dafa8 100644
--- a/test/com/google/javascript/jscomp/TypedScopeCreatorTest.java
+++ b/test/com/google/javascript/jscomp/TypedScopeCreatorTest.java
@@ -1016,6 +1016,44 @@
     assertEquals("number", yType.toString());
   }
 
+  public void testDeclaredConstType1() throws Exception {
+    testSame(
+        "/** @const */ var x = 3;" +
+        "function f() { var y = x; }");
+    JSType yType = lastLocalScope.getVar("y").getType();
+    assertEquals("number", yType.toString());
+  }
+
+  public void testDeclaredConstType2() throws Exception {
+    testSame(
+        "/** @const */ var x = {};" +
+        "function f() { var y = x; }");
+    JSType yType = lastLocalScope.getVar("y").getType();
+    assertEquals("{}", yType.toString());
+  }
+
+  public void testDeclaredConstType3() throws Exception {
+    testSame(
+        "/** @const */ var x = {};" +
+        "/** @const */ x.z = 'hi';" +
+        "function f() { var y = x.z; }");
+    JSType yType = lastLocalScope.getVar("y").getType();
+    assertEquals("string", yType.toString());
+  }
+
+  public void testDeclaredConstType4() throws Exception {
+    testSame(
+        "/** @constructor */ function Foo() {}" +
+        "/** @const */ Foo.prototype.z = 'hi';" +
+        "function f() { var y = (new Foo()).z; }");
+    JSType yType = lastLocalScope.getVar("y").getType();
+    assertEquals("string", yType.toString());
+
+    ObjectType fooType =
+        ((FunctionType) globalScope.getVar("Foo").getType()).getInstanceType();
+    assertTrue(fooType.isPropertyTypeDeclared("z"));
+  }
+
   public void testBadCtorInit1() throws Exception {
     testSame("/** @constructor */ var f;", CTOR_INITIALIZER);
   }
