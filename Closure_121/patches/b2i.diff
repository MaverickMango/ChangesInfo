diff -r -u buggy/src/com/google/javascript/jscomp/InlineVariables.java inducing/src/com/google/javascript/jscomp/InlineVariables.java
--- buggy/src/com/google/javascript/jscomp/InlineVariables.java	2023-06-12 11:34:34.162361447 +0800
+++ inducing/src/com/google/javascript/jscomp/InlineVariables.java	2023-06-12 11:34:34.546368460 +0800
@@ -1,5 +1,5 @@
 /*
- * Copyright 2008 The Closure Compiler Authors.
+ * Copyright 2008 Google Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -21,19 +21,19 @@
 import com.google.common.base.Predicates;
 import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
-import com.google.javascript.jscomp.CodingConvention.SubclassRelationship;
 import com.google.javascript.jscomp.ReferenceCollectingCallback.Behavior;
 import com.google.javascript.jscomp.ReferenceCollectingCallback.Reference;
 import com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection;
-import com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceMap;
 import com.google.javascript.jscomp.Scope.Var;
 import com.google.javascript.rhino.Node;
+import com.google.javascript.rhino.Token;
 
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
 
+
 /**
  * Using the infrastructure provided by VariableReferencePass, identify
  * variables that are used only once and in a way that is safe to move, and then
@@ -48,57 +48,38 @@
  *
  * The approach of this pass is similar to {@link CrossModuleCodeMotion}
  *
- * @author kushal@google.com (Kushal Dave)
- * @author nicksantos@google.com (Nick Santos)
+*
+*
  */
 class InlineVariables implements CompilerPass {
 
   private final AbstractCompiler compiler;
 
-  enum Mode {
-    // Only inline things explicitly marked as constant.
-    CONSTANTS_ONLY,
-    // Locals only
-    LOCALS_ONLY,
-    ALL
-  }
-
-  private final Mode mode;
+  // Only inline things explicitly marked as constant.
+  private final boolean onlyConstants;
 
   // Inlines all strings, even if they increase the size of the gzipped binary.
   private final boolean inlineAllStrings;
 
   private final IdentifyConstants identifyConstants = new IdentifyConstants();
 
-  InlineVariables(
-      AbstractCompiler compiler,
-      Mode mode,
+  InlineVariables(AbstractCompiler compiler, boolean onlyConstants,
       boolean inlineAllStrings) {
     this.compiler = compiler;
-    this.mode = mode;
+    this.onlyConstants = onlyConstants;
     this.inlineAllStrings = inlineAllStrings;
   }
 
   @Override
   public void process(Node externs, Node root) {
     ReferenceCollectingCallback callback = new ReferenceCollectingCallback(
-        compiler, new InliningBehavior(), getFilterForMode());
+        compiler, new InliningBehavior(),
+        onlyConstants ?
+            identifyConstants :
+            Predicates.<Var>alwaysTrue());
     callback.process(externs, root);
   }
 
-  private Predicate<Var> getFilterForMode() {
-    switch (mode) {
-      case ALL:
-        return Predicates.<Var>alwaysTrue();
-      case LOCALS_ONLY:
-        return new IdentifyLocals();
-      case CONSTANTS_ONLY:
-        return new IdentifyConstants();
-      default:
-        throw new IllegalStateException();
-    }
-  }
-
   /**
    * Filters variables declared as "constant", and declares them in the outer
    * declaredConstants map.
@@ -114,16 +95,6 @@
     }
   }
 
-  /**
-   * Filters non-global variables.
-   */
-  private class IdentifyLocals implements Predicate<Var> {
-    @Override
-    public boolean apply(Var var) {
-      return var.scope.isLocal();
-    }
-  }
-
   private static class AliasCandidate {
     private final Var alias;
     private final ReferenceCollection refInfo;
@@ -155,7 +126,8 @@
     final Map<Node, AliasCandidate> aliasCandidates = Maps.newHashMap();
 
     @Override
-    public void afterExitScope(NodeTraversal t, ReferenceMap referenceMap) {
+    public void afterExitScope(NodeTraversal t,
+        Map<Var, ReferenceCollection> referenceMap) {
       collectAliasCandidates(t, referenceMap);
       doInlinesForScope(t, referenceMap);
     }
@@ -165,21 +137,21 @@
      * mark them as aliasing candidates.
      */
     private void collectAliasCandidates(NodeTraversal t,
-        ReferenceMap referenceMap) {
-      if (mode != Mode.CONSTANTS_ONLY) {
+        Map<Var, ReferenceCollection> referenceMap) {
+      if (!onlyConstants) {
         for (Iterator<Var> it = t.getScope().getVars(); it.hasNext();) {
           Var v = it.next();
-          ReferenceCollection referenceInfo = referenceMap.getReferences(v);
+          ReferenceCollection referenceInfo = referenceMap.get(v);
 
           // NOTE(nicksantos): Don't handle variables that are never used.
           // The tests are much easier to write if you don't, and there's
           // another pass that handles unused variables much more elegantly.
           if (referenceInfo != null && referenceInfo.references.size() >= 2 &&
               referenceInfo.isWellDefined() &&
-              referenceInfo.isAssignedOnceInLifetime()) {
+              referenceInfo.isAssignedOnce()) {
             Reference init = referenceInfo.getInitializingReference();
             Node value = init.getAssignedValue();
-            if (value != null && value.isName()) {
+            if (value != null && value.getType() == Token.NAME) {
               aliasCandidates.put(value, new AliasCandidate(v, referenceInfo));
             }
           }
@@ -191,18 +163,18 @@
      * For all variables in this scope, see if they are only used once.
      * If it looks safe to do so, inline them.
      */
-    private void doInlinesForScope(NodeTraversal t, ReferenceMap referenceMap) {
+    private void doInlinesForScope(NodeTraversal t,
+        Map<Var, ReferenceCollection> referenceMap) {
 
-      boolean maybeModifiedArguments =
-          maybeEscapedOrModifiedArguments(t.getScope(), referenceMap);
       for (Iterator<Var> it = t.getScope().getVars(); it.hasNext();) {
         Var v = it.next();
 
-        ReferenceCollection referenceInfo = referenceMap.getReferences(v);
+        ReferenceCollection referenceInfo = referenceMap.get(v);
 
         // referenceInfo will be null if we're in constants-only mode
         // and the variable is not a constant.
-        if (referenceInfo == null || isVarInlineForbidden(v)) {
+        if (referenceInfo == null || isVarInlineForbidden(v) ||
+            staleVars.contains(v)) {
           // Never try to inline exported variables or variables that
           // were not collected or variables that have already been inlined.
           continue;
@@ -211,49 +183,18 @@
           Node value = init.getAssignedValue();
           inlineDeclaredConstant(v, value, referenceInfo.references);
           staleVars.add(v);
-        } else if (mode == Mode.CONSTANTS_ONLY) {
+        } else if (onlyConstants) {
           // If we're in constants-only mode, don't run more aggressive
           // inlining heuristics. See InlineConstantsTest.
           continue;
         } else {
-          inlineNonConstants(v, referenceInfo, maybeModifiedArguments);
+          inlineNonConstants(v, referenceInfo);
         }
       }
     }
 
-    private boolean maybeEscapedOrModifiedArguments(
-        Scope scope, ReferenceMap referenceMap) {
-      if (scope.isLocal()) {
-        Var arguments = scope.getArgumentsVar();
-        ReferenceCollection refs = referenceMap.getReferences(arguments);
-        if (refs != null && !refs.references.isEmpty()) {
-          for (Reference ref : refs.references) {
-            Node refNode = ref.getNode();
-            Node refParent = ref.getParent();
-            // Any reference that is not a read of the arguments property
-            // consider a escape of the arguments object.
-            if (!(NodeUtil.isGet(refParent)
-                && refNode == ref.getParent().getFirstChild()
-                && !isLValue(refParent))) {
-              return true;
-            }
-          }
-        }
-      }
-      return false;
-    }
-
-    private boolean isLValue(Node n) {
-      Node parent = n.getParent();
-      return (parent.isInc()
-          || parent.isDec()
-          || (NodeUtil.isAssignmentOp(parent)
-          && parent.getFirstChild() == n));
-    }
-
     private void inlineNonConstants(
-        Var v, ReferenceCollection referenceInfo,
-        boolean maybeModifiedArguments) {
+        Var v, ReferenceCollection referenceInfo) {
       int refCount = referenceInfo.references.size();
       Reference declaration = referenceInfo.references.get(0);
       Reference init = referenceInfo.getInitializingReference();
@@ -263,14 +204,7 @@
           isImmutableAndWellDefinedVariable(v, referenceInfo)) {
         // if the variable is referenced more than once, we can only
         // inline it if it's immutable and never defined before referenced.
-        Node value;
-        if (init != null) {
-          value = init.getAssignedValue();
-        } else {
-          // Create a new node for variable that is never initialized.
-          Node srcLocation = declaration.getNode();
-          value = NodeUtil.newUndefinedNode(srcLocation);
-        }
+        Node value = init.getAssignedValue();
         Preconditions.checkNotNull(value);
         inlineWellDefinedVariable(v, value, referenceInfo.references);
         staleVars.add(v);
@@ -298,16 +232,14 @@
       // inline an alias of it. (If the variable was inlined, then the
       // reference data is out of sync. We're better off just waiting for
       // the next pass.)
-      if (!maybeModifiedArguments &&
-          !staleVars.contains(v) && referenceInfo.isWellDefined() &&
-          referenceInfo.isAssignedOnceInLifetime()) {
+      if (!staleVars.contains(v) && referenceInfo.isWellDefined() &&
+          referenceInfo.isAssignedOnce()) {
         List<Reference> refs = referenceInfo.references;
         for (int i = 1 /* start from a read */; i < refs.size(); i++) {
-          Node nameNode = refs.get(i).getNode();
+          Node nameNode = refs.get(i).getNameNode();
           if (aliasCandidates.containsKey(nameNode)) {
             AliasCandidate candidate = aliasCandidates.get(nameNode);
-            if (!staleVars.contains(candidate.alias) &&
-                !isVarInlineForbidden(candidate.alias)) {
+            if (!staleVars.contains(candidate.alias)) {
               Reference aliasInit;
               aliasInit = candidate.refInfo.getInitializingReference();
               Node value = aliasInit.getAssignedValue();
@@ -331,7 +263,7 @@
         blacklistVarReferencesInTree(c, scope);
       }
 
-      if (root.isName()) {
+      if (root.getType() == Token.NAME) {
         staleVars.add(scope.getVar(root.getString()));
       }
     }
@@ -345,34 +277,26 @@
       // 2) A reference to the variable has been inlined. We're downstream
       //    of the mechanism that creates variable references, so we don't
       //    have a good way to update the reference. Just punt on it.
-      // 3) Don't inline the special RENAME_PROPERTY_FUNCTION_NAME
-      return var.isExtern()
-          || compiler.getCodingConvention().isExported(var.name)
-          || RenameProperties.RENAME_PROPERTY_FUNCTION_NAME.equals(var.name)
-          || staleVars.contains(var);
+      return compiler.getCodingConvention().isExported(var.name) ||
+          staleVars.contains(var);
     }
 
     /**
      * Do the actual work of inlining a single declaration into a single
      * reference.
      */
-    private void inline(Var v, Reference decl, Reference init, Reference ref) {
+    private void inline(Var v, Reference declaration,
+                        Reference init, Reference reference) {
       Node value = init.getAssignedValue();
       Preconditions.checkState(value != null);
-      // Check for function declarations before the value is moved in the AST.
-      boolean isFunctionDeclaration = NodeUtil.isFunctionDeclaration(value);
-      compiler.reportChangeToEnclosingScope(ref.getNode());
-      inlineValue(v, ref, value.detachFromParent());
-      if (decl != init) {
+
+      inlineValue(v, reference, value.detachFromParent());
+      if (declaration != init) {
         Node expressRoot = init.getGrandparent();
-        Preconditions.checkState(expressRoot.isExprResult());
+        Preconditions.checkState(expressRoot.getType() == Token.EXPR_RESULT);
         NodeUtil.removeChild(expressRoot.getParent(), expressRoot);
       }
-      // Function declarations have already been removed.
-      if (!isFunctionDeclaration) {
-        compiler.reportChangeToEnclosingScope(decl.getNode());
-        removeDeclaration(decl);
-      }
+      removeDeclaration(declaration);
     }
 
     /**
@@ -396,7 +320,7 @@
       Reference decl = null;
 
       for (Reference r : refSet) {
-        if (r.getNode() == v.getNameNode()) {
+        if (r.getNameNode() == v.getNameNode()) {
           decl = r;
         } else {
           inlineValue(v, r, value.cloneTree());
@@ -409,17 +333,19 @@
     /**
      * Remove the given VAR declaration.
      */
-    private void removeDeclaration(Reference decl) {
-      Node varNode = decl.getParent();
-      Node grandparent = decl.getGrandparent();
+    private void removeDeclaration(Reference declaration) {
+      Node varNode = declaration.getParent();
+      varNode.removeChild(declaration.getNameNode());
 
-      compiler.reportChangeToEnclosingScope(decl.getNode());
-      varNode.removeChild(decl.getNode());
       // Remove var node if empty
       if (!varNode.hasChildren()) {
-        Preconditions.checkState(varNode.isVar());
+        Preconditions.checkState(varNode.getType() == Token.VAR);
+
+        Node grandparent = declaration.getGrandparent();
         NodeUtil.removeChild(grandparent, varNode);
       }
+
+      compiler.reportCodeChange();
     }
 
     /**
@@ -431,14 +357,15 @@
      *     to re-parent.
      */
     private void inlineValue(Var v, Reference ref, Node value) {
-      compiler.reportChangeToEnclosingScope(ref.getNode());
+      Node parent = ref.getParent();
       if (ref.isSimpleAssignmentToName()) {
         // This is the initial assignment.
-        ref.getGrandparent().replaceChild(ref.getParent(), value);
+        ref.getGrandparent().replaceChild(parent, value);
       } else {
-        ref.getParent().replaceChild(ref.getNode(), value);
+        ref.getParent().replaceChild(ref.getNameNode(), value);
       }
       blacklistVarReferencesInTree(value, v.scope);
+      compiler.reportCodeChange();
     }
 
     /**
@@ -451,7 +378,7 @@
         return false;
       }
 
-      if (!refInfo.isAssignedOnceInLifetime()) {
+      if (!refInfo.isAssignedOnce()) {
         return false;
       }
 
@@ -463,7 +390,7 @@
       Node value = init.getAssignedValue();
       if (value == null) {
         // This constant is either externally defined or initialized indirectly
-        // (e.g. in an function expression used to hide
+        // (e.g. in an anonymous function used to hide
         // temporary variables), so the constant is ineligible for inlining.
         return false;
       }
@@ -474,7 +401,7 @@
       }
 
       // Determine if we should really inline a String or not.
-      return !value.isString() ||
+      return value.getType() != Token.STRING ||
           isStringWorthInlining(var, refInfo.references);
     }
 
@@ -524,7 +451,7 @@
       // VAR declarations and EXPR_RESULT don't need the value, but other
       // ASSIGN expressions parents do.
       if (declaration != initialization &&
-          !initialization.getGrandparent().isExprResult()) {
+          initialization.getGrandparent().getType() != Token.EXPR_RESULT) {
         return false;
       }
 
@@ -543,35 +470,15 @@
       // rather than the context of the window.
       //   var a = b.c;
       //   f(a)
-      // is OK.
+      // is ok.
       Node value = initialization.getAssignedValue();
       Preconditions.checkState(value != null);
-      if (value.isGetProp()
-          && reference.getParent().isCall()
-          && reference.getParent().getFirstChild() == reference.getNode()) {
+      if (value.getType() == Token.GETPROP
+          && reference.getParent().getType() == Token.CALL
+          && reference.getParent().getFirstChild() == reference.getNameNode()) {
         return false;
       }
 
-      if (value.isFunction()) {
-        Node callNode = reference.getParent();
-        if (reference.getParent().isCall()) {
-          CodingConvention convention = compiler.getCodingConvention();
-          // Bug 2388531: Don't inline subclass definitions into class defining
-          // calls as this confused class removing logic.
-          SubclassRelationship relationship =
-              convention.getClassesDefinedByCall(callNode);
-          if (relationship != null) {
-            return false;
-          }
-
-          // issue 668: Don't inline singleton getter methods
-          // calls as this confused class removing logic.
-          if (convention.getSingletonGetterClassName(callNode) != null) {
-            return false;
-          }
-        }
-      }
-
       return canMoveAggressively(value) ||
           canMoveModerately(initialization, reference);
     }
@@ -580,10 +487,10 @@
      * If the value is a literal, we can cross more boundaries to inline it.
      */
     private boolean canMoveAggressively(Node value) {
-      // Function expressions and other mutable objects can move within
+      // Anonymous functions and other mutable objects can move within
       // the same basic block.
-      return NodeUtil.isLiteralValue(value, true)
-          || value.isFunction();
+      return NodeUtil.isLiteralValue(value)
+          || value.getType() == Token.FUNCTION;
     }
 
     /**
@@ -597,24 +504,23 @@
       // Check if declaration can be inlined without passing
       // any side-effect causing nodes.
       Iterator<Node> it;
-      if (initialization.getParent().isVar()) {
+      if (initialization.getParent().getType() == Token.VAR) {
         it = NodeIterators.LocalVarMotion.forVar(
-            initialization.getNode(),     // NAME
+            initialization.getNameNode(),     // NAME
             initialization.getParent(),       // VAR
             initialization.getGrandparent()); // VAR container
-      } else if (initialization.getParent().isAssign()) {
+      } else if (initialization.getParent().getType() == Token.ASSIGN) {
         Preconditions.checkState(
-            initialization.getGrandparent().isExprResult());
+            initialization.getGrandparent().getType() == Token.EXPR_RESULT);
         it = NodeIterators.LocalVarMotion.forAssign(
-            initialization.getNode(),     // NAME
+            initialization.getNameNode(),     // NAME
             initialization.getParent(),       // ASSIGN
             initialization.getGrandparent(),  // EXPR_RESULT
             initialization.getGrandparent().getParent()); // EXPR container
       } else {
-        throw new IllegalStateException("Unexpected initialization parent " +
-            initialization.getParent().toStringTree());
+        throw new IllegalStateException("Unexpected initialiation parent");
       }
-      Node targetName = reference.getNode();
+      Node targetName = reference.getNameNode();
       while (it.hasNext()) {
         Node curNode = it.next();
         if (curNode == targetName) {
@@ -626,40 +532,30 @@
     }
 
     /**
-     * @return true if the reference is a normal VAR or FUNCTION declaration.
+     * @return true if the reference is a normal VAR declaration (only normal
+     * VARs can be inlined).
      */
     private boolean isValidDeclaration(Reference declaration) {
-      return (declaration.getParent().isVar()
-          && !declaration.getGrandparent().isFor())
-          || NodeUtil.isFunctionDeclaration(declaration.getParent());
+      return declaration.getParent().getType() == Token.VAR
+          && declaration.getGrandparent().getType() != Token.FOR;
     }
 
     /**
-     * @return Whether there is a initial value.
+     * @return Whether
      */
     private boolean isValidInitialization(Reference initialization) {
       if (initialization == null) {
         return false;
       } else if (initialization.isDeclaration()) {
-        // The reference is a FUNCTION declaration or normal VAR declaration
-        // with a value.
-        if (!NodeUtil.isFunctionDeclaration(initialization.getParent())
-            && initialization.getNode().getFirstChild() == null) {
-          return false;
-        }
+        // The reference is a normal VAR declaration with
+        return initialization.getNameNode().getFirstChild() != null;
       } else {
         Node parent = initialization.getParent();
         Preconditions.checkState(
-            parent.isAssign()
-            && parent.getFirstChild() == initialization.getNode());
+            parent.getType() == Token.ASSIGN
+            && parent.getFirstChild() == initialization.getNameNode());
+        return true;
       }
-
-      Node n = initialization.getAssignedValue();
-      if (n.isFunction()) {
-        return compiler.getCodingConvention().isInlinableFunction(n);
-      }
-
-      return true;
     }
 
     /**
@@ -683,37 +579,14 @@
         return false;
       }
 
-      boolean isNeverAssigned = refInfo.isNeverAssigned();
-      // For values that are never assigned, only the references need to be
-      // checked.
-      if (!isNeverAssigned) {
-        Reference refInit = refInfo.getInitializingReference();
-        if (!isValidInitialization(refInit)) {
-          return false;
-        }
-
-        if (refDecl != refInit) {
-          Preconditions.checkState(refInit == refSet.get(1));
-          startingReadRef = 2;
-        }
-
-        if (!refInfo.isWellDefined()) {
-          return false;
-        }
-
-        Node value = refInit.getAssignedValue();
-        Preconditions.checkNotNull(value);
+      Reference refInit = refInfo.getInitializingReference();
+      if (!isValidInitialization(refInit)) {
+        return false;
+      }
 
-        boolean isImmutableValueWorthInlining =
-            NodeUtil.isImmutableValue(value) &&
-            (!value.isString() ||
-                isStringWorthInlining(v, refInfo.references));
-        boolean isInlinableThisAlias =
-            value.isThis() &&
-            !refInfo.isEscaped();
-        if (!isImmutableValueWorthInlining && !isInlinableThisAlias) {
-          return false;
-        }
+      if (refDecl != refInit) {
+        Preconditions.checkState(refInit == refSet.get(1));
+        startingReadRef = 2;
       }
 
       for (int i = startingReadRef; i < refSet.size(); i++) {
@@ -723,7 +596,15 @@
         }
       }
 
-      return true;
+      if (!refInfo.isWellDefined()) {
+        return false;
+      }
+
+      Node value = refInit.getAssignedValue();
+      Preconditions.checkNotNull(value);
+      return NodeUtil.isImmutableValue(value) &&
+          (value.getType() != Token.STRING ||
+           isStringWorthInlining(v, refInfo.references));
     }
   }
 }
diff -r -u buggy/test/com/google/javascript/jscomp/InlineVariablesTest.java inducing/test/com/google/javascript/jscomp/InlineVariablesTest.java
--- buggy/test/com/google/javascript/jscomp/InlineVariablesTest.java	2023-06-12 11:34:34.162361447 +0800
+++ inducing/test/com/google/javascript/jscomp/InlineVariablesTest.java	2023-06-12 11:34:34.546368460 +0800
@@ -1,5 +1,5 @@
 /*
- * Copyright 2008 The Closure Compiler Authors.
+ * Copyright 2008 Google Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -21,36 +21,24 @@
  * Verifies that valid candidates for inlining are inlined, but
  * that no dangerous inlining occurs.
  *
- * @author kushal@google.com (Kushal Dave)
+*
  */
 public class InlineVariablesTest extends CompilerTestCase {
 
   private boolean inlineAllStrings = false;
-  private boolean inlineLocalsOnly = false;
 
   public InlineVariablesTest() {
     enableNormalize();
   }
 
   @Override
-  public void setUp() {
-    super.enableLineNumberCheck(true);
-  }
-
-  @Override
   protected CompilerPass getProcessor(final Compiler compiler) {
-    return new InlineVariables(
-        compiler,
-        (inlineLocalsOnly)
-            ? InlineVariables.Mode.LOCALS_ONLY
-            : InlineVariables.Mode.ALL,
-        inlineAllStrings);
+    return new InlineVariables(compiler, false, inlineAllStrings);
   }
 
   @Override
   public void tearDown() {
     inlineAllStrings = false;
-    inlineLocalsOnly = false;
   }
 
   // Test respect for scopes and blocks
@@ -63,11 +51,6 @@
     testSame("var _x = 1; var z = _x;");
   }
 
-  public void testNoInlineExportedName2() {
-    testSame("var f = function() {}; var _x = f;" +
-             "var y = function() { _x(); }; var _y = f;");
-  }
-
   public void testDoNotInlineIncrement() {
     testSame("var x = 1; x++;");
   }
@@ -286,14 +269,9 @@
     testSame(
         new String[] { "var x = a;", "",
             "(function() { a++; })(); var z = x;"});
-    test(
-        new String[] { "var x = a;", "",
-            "function cow() { a++; }; cow(); var z = x;"},
-        new String[] { "var x = a;", "",
-            ";(function cow(){ a++; })(); var z = x;"});
     testSame(
         new String[] { "var x = a;", "",
-            "cow(); var z = x; function cow() { a++; };"});
+            "function cow() { a++; }; cow(); var z = x;"});
   }
 
   // Test movement of constant values
@@ -425,12 +403,8 @@
     testSame("f(); var x = false; function f() { alert(x); };");
   }
 
-  public void testInlineIntoNestedNonHoistedNamedFunctions() {
-    test("f(); var x = false; if (false) function f() { alert(x); };",
-         "f(); if (false) function f() { alert(false); };");
-  }
-
   public void testNoInlineIntoNestedNamedFunctions() {
+    testSame("f(); var x = false; if (false) function f() { alert(x); };");
     testSame("f(); var x = false; function f() { if (false) { alert(x); } };");
   }
 
@@ -518,34 +492,21 @@
   }
 
   public void testInlineFunctionDeclaration() {
-    test("var f = function () {}; var a = f;",
+    test("var f = function () {}; var a = f;", 
          "var a = function () {};");
-    test("var f = function () {}; foo(); var a = f;",
+    test("var f = function () {}; foo(); var a = f;", 
          "foo(); var a = function () {};");
-    test("var f = function () {}; foo(f);",
+    test("var f = function () {}; foo(f);", 
          "foo(function () {});");
-
-    testSame("var f = function () {}; function g() {var a = f;}");
-    testSame("var f = function () {}; function g() {h(f);}");
-  }
-
-  public void test2388531() {
-    testSame("var f = function () {};" +
-             "var g = function () {};" +
-             "goog.inherits(f, g);");
-    testSame("var f = function () {};" +
-             "var g = function () {};" +
-             "goog$inherits(f, g);");
+    
+    testSame("var f = function () {}; function g() {var a = f;}"); 
+    testSame("var f = function () {}; function g() {h(f);}"); 
   }
-
+  
   public void testRecursiveFunction1() {
     testSame("var x = 0; (function x() { return x ? x() : 3; })();");
   }
 
-  public void testRecursiveFunction2() {
-    testSame("function y() { return y(); }");
-  }
-
   public void testUnreferencedBleedingFunction() {
     testSame("var x = function y() {}");
   }
@@ -598,38 +559,6 @@
          "var x; x = this.foo(); this.bar(); function f() { this.baz(x); }");
   }
 
-  public void testInlineAliasesInLoop() {
-    test(
-        "function f() { " +
-        "  var x = extern();" +
-        "  for (var i = 0; i < 5; i++) {" +
-        "    (function() {" +
-        "       var y = x; window.setTimeout(function() { extern(y); }, 0);" +
-        "     })();" +
-        "  }" +
-        "}",
-        "function f() { " +
-        "  var x = extern();" +
-        "  for (var i = 0; i < 5; i++) {" +
-        "    (function() {" +
-        "       window.setTimeout(function() { extern(x); }, 0);" +
-        "     })();" +
-        "  }" +
-        "}");
-  }
-
-  public void testNoInlineAliasesInLoop() {
-    testSame(
-        "function f() { " +
-        "  for (var i = 0; i < 5; i++) {" +
-        "    var x = extern();" +
-        "    (function() {" +
-        "       var y = x; window.setTimeout(function() { extern(y); }, 0);" +
-        "     })();" +
-        "  }" +
-        "}");
-  }
-
   public void testNoInlineAliases1() {
     testSame(
         "var x = this.foo(); this.bar(); var y = x; x = 3; this.baz(y);");
@@ -763,50 +692,26 @@
       );
   }
 
-  public void testInlineFunctionAlias1a() {
+  public void testInlineFunctionAlias1() {
     test(
-      "function f(x) {}" +
+      "function f(x) {};" +
       "var y = f;" +
       "g();" +
       "y();y();",
-      "var y = function f(x) {};" +
-      "g();" +
-      "y();y();"
-      );
-  }
-
-  public void testInlineFunctionAlias1b() {
-    test(
       "function f(x) {};" +
-      "f;var y = f;" +
       "g();" +
-      "y();y();",
-      "function f(x) {};" +
-      "f;g();" +
       "f();f();"
       );
   }
 
-  public void testInlineFunctionAlias2a() {
-    test(
-      "function f(x) {}" +
-      "var y; y = f;" +
-      "g();" +
-      "y();y();",
-      "var y; y = function f(x) {};" +
-      "g();" +
-      "y();y();"
-      );
-  }
-
-  public void testInlineFunctionAlias2b() {
+  public void testInlineFunctionAlias2() {
     test(
       "function f(x) {};" +
-      "f; var y; y = f;" +
+      "var y; y = f;" +
       "g();" +
       "y();y();",
       "function f(x) {};" +
-      "f; f;" +
+      "f;" +
       "g();" +
       "f();f();"
       );
@@ -844,224 +749,4 @@
       "}"
       );
   }
-
-  public void testLocalsOnly1() {
-    inlineLocalsOnly = true;
-    test(
-        "var x=1; x; function f() {var x = 1; x;}",
-        "var x=1; x; function f() {1;}");
-  }
-
-  public void testLocalsOnly2() {
-    inlineLocalsOnly = true;
-    test(
-        "/** @const */\n" +
-        "var X=1; X;\n" +
-        "function f() {\n" +
-        "  /** @const */\n" +
-        "  var X = 1; X;\n" +
-        "}",
-        "var X=1; X; function f() {1;}");
-  }
-
-  public void testInlineUndefined1() {
-    test("var x; x;",
-         "void 0;");
-  }
-
-  public void testInlineUndefined2() {
-    testSame("var x; x++;");
-  }
-
-  public void testInlineUndefined3() {
-    testSame("var x; var x;");
-  }
-
-  public void testInlineUndefined4() {
-    test("var x; x; x;",
-         "void 0; void 0;");
-  }
-
-  public void testInlineUndefined5() {
-    test("var x; for(x in a) {}",
-         "var x; for(x in a) {}");
-  }
-
-  public void testIssue90() {
-    test("var x; x && alert(1)",
-         "void 0 && alert(1)");
-  }
-
-  public void testRenamePropertyFunction() {
-    testSame("var JSCompiler_renameProperty; " +
-             "JSCompiler_renameProperty('foo')");
-  }
-
-  public void testThisAlias() {
-    test("function f() { var a = this; a.y(); a.z(); }",
-         "function f() { this.y(); this.z(); }");
-  }
-
-  public void testThisEscapedAlias() {
-    testSame(
-        "function f() { var a = this; var g = function() { a.y(); }; a.z(); }");
-  }
-
-  public void testInlineNamedFunction() {
-    test("function f() {} f();", "(function f(){})()");
-  }
-
-  public void testIssue378ModifiedArguments1() {
-    testSame(
-        "function g(callback) {\n" +
-        "  var f = callback;\n" +
-        "  arguments[0] = this;\n" +
-        "  f.apply(this, arguments);\n" +
-        "}");
-  }
-
-  public void testIssue378ModifiedArguments2() {
-    testSame(
-        "function g(callback) {\n" +
-        "  /** @const */\n" +
-        "  var f = callback;\n" +
-        "  arguments[0] = this;\n" +
-        "  f.apply(this, arguments);\n" +
-        "}");
-  }
-
-  public void testIssue378EscapedArguments1() {
-    testSame(
-        "function g(callback) {\n" +
-        "  var f = callback;\n" +
-        "  h(arguments,this);\n" +
-        "  f.apply(this, arguments);\n" +
-        "}\n" +
-        "function h(a,b) {\n" +
-        "  a[0] = b;" +
-        "}");
-  }
-
-  public void testIssue378EscapedArguments2() {
-    testSame(
-        "function g(callback) {\n" +
-        "  /** @const */\n" +
-        "  var f = callback;\n" +
-        "  h(arguments,this);\n" +
-        "  f.apply(this);\n" +
-        "}\n" +
-        "function h(a,b) {\n" +
-        "  a[0] = b;" +
-        "}");
-  }
-
-  public void testIssue378EscapedArguments3() {
-    test(
-        "function g(callback) {\n" +
-        "  var f = callback;\n" +
-        "  f.apply(this, arguments);\n" +
-        "}\n",
-        "function g(callback) {\n" +
-        "  callback.apply(this, arguments);\n" +
-        "}\n");
-  }
-
-  public void testIssue378EscapedArguments4() {
-    testSame(
-        "function g(callback) {\n" +
-        "  var f = callback;\n" +
-        "  h(arguments[0],this);\n" +
-        "  f.apply(this, arguments);\n" +
-        "}\n" +
-        "function h(a,b) {\n" +
-        "  a[0] = b;" +
-        "}");
-  }
-
-  public void testIssue378ArgumentsRead1() {
-    test(
-        "function g(callback) {\n" +
-        "  var f = callback;\n" +
-        "  var g = arguments[0];\n" +
-        "  f.apply(this, arguments);\n" +
-        "}",
-        "function g(callback) {\n" +
-        "  var g = arguments[0];\n" +
-        "  callback.apply(this, arguments);\n" +
-        "}");
-  }
-
-  public void testIssue378ArgumentsRead2() {
-    test(
-        "function g(callback) {\n" +
-        "  var f = callback;\n" +
-        "  h(arguments[0],this);\n" +
-        "  f.apply(this, arguments[0]);\n" +
-        "}\n" +
-        "function h(a,b) {\n" +
-        "  a[0] = b;" +
-        "}",
-        "function g(callback) {\n" +
-        "  h(arguments[0],this);\n" +
-        "  callback.apply(this, arguments[0]);\n" +
-        "}\n" +
-        "function h(a,b) {\n" +
-        "  a[0] = b;" +
-        "}");
-  }
-
-  public void testArgumentsModifiedInOuterFunction() {
-    test(
-      "function g(callback) {\n" +
-      "  var f = callback;\n" +
-      "  arguments[0] = this;\n" +
-      "  f.apply(this, arguments);\n" +
-      "  function inner(callback) {" +
-      "    var x = callback;\n" +
-      "    x.apply(this);\n" +
-      "  }" +
-      "}",
-      "function g(callback) {\n" +
-      "  var f = callback;\n" +
-      "  arguments[0] = this;\n" +
-      "  f.apply(this, arguments);\n" +
-      "  function inner(callback) {" +
-      "    callback.apply(this);\n" +
-      "  }" +
-      "}");
-  }
-
-  public void testArgumentsModifiedInInnerFunction() {
-    test(
-      "function g(callback) {\n" +
-      "  var f = callback;\n" +
-      "  f.apply(this, arguments);\n" +
-      "  function inner(callback) {" +
-      "    var x = callback;\n" +
-      "    arguments[0] = this;\n" +
-      "    x.apply(this);\n" +
-      "  }" +
-      "}",
-      "function g(callback) {\n" +
-      "  callback.apply(this, arguments);\n" +
-      "  function inner(callback) {" +
-      "    var x = callback;\n" +
-      "    arguments[0] = this;\n" +
-      "    x.apply(this);\n" +
-      "  }" +
-      "}");
-  }
-
-  public void testNoInlineRedeclaredExterns() {
-    String externs = "var test = 1;";
-    String code = "/** @suppress {duplicate} */ var test = 2;alert(test);";
-    test(externs, code, code, null, null);
-  }
-
-  public void testBug6598844() {
-    testSame(
-        "function F() { this.a = 0; }" +
-        "F.prototype.inc = function() { this.a++; return 10; };" +
-        "F.prototype.bar = function() { var x = this.inc(); this.a += x; };");
-  }
 }
