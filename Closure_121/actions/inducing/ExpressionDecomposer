===
insert-tree
---
FieldDeclaration [1890,1937]
    Modifier: private [1890,1897]
    Modifier: static [1898,1904]
    Modifier: final [1905,1910]
    PrimitiveType: int [1911,1914]
    VariableDeclarationFragment [1915,1936]
        SimpleName: MAX_INTERATIONS [1915,1930]
        NumberLiteral: 100 [1933,1936]
to
TypeDeclaration [965,26389]
at 8
===
insert-tree
---
MethodDeclaration [8907,9118]
    Javadoc [8907,8980]
        TagElement [8916,8974]
            TextElement:  Whether the node may represent an external method. [8923,8974]
    Modifier: private [8983,8990]
    PrimitiveType: boolean [8991,8998]
    SimpleName: maybeExternMethod [8999,9016]
    SingleVariableDeclaration [9017,9026]
        SimpleType [9017,9021]
            SimpleName: Node [9017,9021]
        SimpleName: node [9022,9026]
    Block [9028,9118]
        ReturnStatement [9102,9114]
            BooleanLiteral: true [9109,9113]
to
TypeDeclaration [965,26389]
at 13
===
insert-tree
---
MethodDeclaration [26523,27878]
    Javadoc [26523,27327]
        TagElement [26532,27078]
            TextElement: It is always safe to inline "foo()" for expressions such as [26532,26591]
            TextElement: "a = b = c = foo();" [26600,26620]
            TextElement: As the assignment is unaffected by side effect of "foo()" [26626,26683]
            TextElement: and the names assigned-to can not influence the state before [26689,26749]
            TextElement: the call to foo. [26755,26771]
            TextElement: It is also safe in cases like where the object is constant: [26783,26842]
            TextElement: CONST_NAME.a = foo() [26851,26871]
            TextElement: CONST_NAME[CONST_VALUE] = foo();  [26880,26913]
            TextElement: This is not true of more complex LHS values, such as [26925,26977]
            TextElement: a.x = foo(); [26987,26999]
            TextElement: next().x = foo(); [27009,27026]
            TextElement: in these cases the checks below are necessary. [27032,27078]
        TagElement [27090,27258]
            SimpleName: seenSideEffects [27097,27112]
            TextElement:  If true, check to see if node-tree maybe affected by [27112,27165]
            TextElement: side-effects, otherwise if the tree has side-effects. @see  [27171,27230]
            TextElement: isExpressionTreeUnsafe [27236,27258]
        TagElement [27264,27321]
            TextElement:  Whether the assignment is safe from side-effects. [27271,27321]
    Modifier: private [27330,27337]
    PrimitiveType: boolean [27338,27345]
    SimpleName: isSafeAssign [27346,27358]
    SingleVariableDeclaration [27359,27365]
        SimpleType [27359,27363]
            SimpleName: Node [27359,27363]
        SimpleName: n [27364,27365]
    SingleVariableDeclaration [27367,27390]
        PrimitiveType: boolean [27367,27374]
        SimpleName: seenSideEffects [27375,27390]
    Block [27392,27878]
        IfStatement [27398,27856]
            InfixExpression [27402,27429]
                MethodInvocation [27402,27413]
                    METHOD_INVOCATION_RECEIVER [27402,27403]
                        SimpleName: n [27402,27403]
                    SimpleName: getType [27404,27411]
                INFIX_EXPRESSION_OPERATOR: == [27414,27416]
                QualifiedName: Token.ASSIGN [27417,27429]
            Block [27431,27856]
                VariableDeclarationStatement [27439,27468]
                    SimpleType [27439,27443]
                        SimpleName: Node [27439,27443]
                    VariableDeclarationFragment [27444,27467]
                        SimpleName: lhs [27444,27447]
                        MethodInvocation [27450,27467]
                            METHOD_INVOCATION_RECEIVER [27450,27451]
                                SimpleName: n [27450,27451]
                            SimpleName: getFirstChild [27452,27465]
                SwitchStatement [27475,27850]
                    MethodInvocation [27483,27496]
                        METHOD_INVOCATION_RECEIVER [27483,27486]
                            SimpleName: lhs [27483,27486]
                        SimpleName: getType [27487,27494]
                    SwitchCase [27508,27524]
                        QualifiedName: Token.NAME [27513,27523]
                    ReturnStatement [27535,27547]
                        BooleanLiteral: true [27542,27546]
                    SwitchCase [27556,27575]
                        QualifiedName: Token.GETPROP [27561,27574]
                    ReturnStatement [27586,27655]
                        PrefixExpression [27593,27654]
                            PREFIX_EXPRESSION_OPERATOR: ! [27593,27594]
                            MethodInvocation [27594,27654]
                                SimpleName: isExpressionTreeUnsafe [27594,27616]
                                METHOD_INVOCATION_ARGUMENTS [27617,27653]
                                    MethodInvocation [27617,27636]
                                        METHOD_INVOCATION_RECEIVER [27617,27620]
                                            SimpleName: lhs [27617,27620]
                                        SimpleName: getFirstChild [27621,27634]
                                    SimpleName: seenSideEffects [27638,27653]
                    SwitchCase [27664,27683]
                        QualifiedName: Token.GETELEM [27669,27682]
                    ReturnStatement [27694,27842]
                        InfixExpression [27701,27841]
                            PrefixExpression [27701,27762]
                                PREFIX_EXPRESSION_OPERATOR: ! [27701,27702]
                                MethodInvocation [27702,27762]
                                    SimpleName: isExpressionTreeUnsafe [27702,27724]
                                    METHOD_INVOCATION_ARGUMENTS [27725,27761]
                                        MethodInvocation [27725,27744]
                                            METHOD_INVOCATION_RECEIVER [27725,27728]
                                                SimpleName: lhs [27725,27728]
                                            SimpleName: getFirstChild [27729,27742]
                                        SimpleName: seenSideEffects [27746,27761]
                            INFIX_EXPRESSION_OPERATOR: && [27778,27780]
                            PrefixExpression [27781,27841]
                                PREFIX_EXPRESSION_OPERATOR: ! [27781,27782]
                                MethodInvocation [27782,27841]
                                    SimpleName: isExpressionTreeUnsafe [27782,27804]
                                    METHOD_INVOCATION_ARGUMENTS [27805,27840]
                                        MethodInvocation [27805,27823]
                                            METHOD_INVOCATION_RECEIVER [27805,27808]
                                                SimpleName: lhs [27805,27808]
                                            SimpleName: getLastChild [27809,27821]
                                        SimpleName: seenSideEffects [27825,27840]
        ReturnStatement [27861,27874]
            BooleanLiteral: false [27868,27873]
to
TypeDeclaration [965,26389]
at 30
===
insert-tree
---
SimpleType [22808,22825]
    SimpleName: DecompositionType [22808,22825]
to
MethodDeclaration [21089,24388]
at 2
===
insert-tree
---
VariableDeclarationStatement [2200,2210]
    PrimitiveType: int [2200,2203]
    VariableDeclarationFragment [2204,2209]
        SimpleName: i [2204,2205]
        NumberLiteral: 0 [2208,2209]
to
Block [2183,2353]
at 0
===
insert-tree
---
VariableDeclarationStatement [22903,22941]
    PrimitiveType: boolean [22903,22910]
    VariableDeclarationFragment [22911,22940]
        SimpleName: requiresDecomposition [22911,22932]
        BooleanLiteral: false [22935,22940]
to
Block [22169,24388]
at 0
===
update-node
---
TextElement:  Whether the call can be moved before the expression. [22020,22073]
replace  Whether the call can be moved before the expression. by  UNDECOMPOSABLE if the expression can not be moved, DECOMPOSABLE if
===
insert-node
---
TextElement: decomposition is required before the expression can be moved, otherwise [22706,22777]
to
TagElement [22013,22073]
at 1
===
insert-node
---
TextElement: MOVABLE. [22783,22791]
to
TagElement [22013,22073]
at 2
===
insert-tree
---
IfStatement [2333,2507]
    InfixExpression [2337,2356]
        SimpleName: i [2337,2338]
        INFIX_EXPRESSION_OPERATOR: > [2339,2340]
        SimpleName: MAX_INTERATIONS [2341,2356]
    Block [2358,2507]
        ThrowStatement [2368,2499]
            ClassInstanceCreation [2374,2498]
                SimpleType [2378,2399]
                    SimpleName: IllegalStateException [2378,2399]
                InfixExpression [2413,2497]
                    StringLiteral: "DecomposeExpression depth exceeded on :\n" [2413,2456]
                    INFIX_EXPRESSION_OPERATOR: + [2457,2458]
                    MethodInvocation [2472,2497]
                        METHOD_INVOCATION_RECEIVER [2472,2482]
                            SimpleName: expression [2472,2482]
                        SimpleName: toStringTree [2483,2495]
to
Block [2306,2349]
at 1
===
insert-node
---
ReturnStatement [21582,21643]
to
Block [20850,21036]
at 0
===
update-node
---
SimpleName: callExpressionHasSideEffects [22184,22212]
replace callExpressionHasSideEffects by seenSideEffects
===
insert-tree
---
ReturnStatement [28319,28377]
    MethodInvocation [28326,28376]
        METHOD_INVOCATION_RECEIVER [28326,28334]
            SimpleName: NodeUtil [28326,28334]
        SimpleName: canBeSideEffected [28335,28352]
        METHOD_INVOCATION_ARGUMENTS [28353,28375]
            SimpleName: n [28353,28354]
            FieldAccess [28356,28375]
                ThisExpression [28356,28360]
                SimpleName: knownConstants [28361,28375]
to
Block [25952,26193]
at 0
===
move-tree
---
MethodInvocation [20862,20915]
    SimpleName: isSubexpressionMovable [20862,20884]
    METHOD_INVOCATION_ARGUMENTS [20885,20914]
        SimpleName: expressionRoot [20885,20899]
        SimpleName: subExpression [20901,20914]
to
ReturnStatement [21582,21643]
at 0
===
insert-tree
---
ReturnStatement [23294,23408]
    ConditionalExpression [23301,23407]
        SimpleName: requiresDecomposition [23301,23322]
        QualifiedName: DecompositionType.DECOMPOSABLE [23337,23367]
        QualifiedName: DecompositionType.MOVABLE [23382,23407]
to
Block [22384,22566]
at 0
===
insert-node
---
MethodInvocation [5808,5847]
to
IfStatement [5640,6672]
at 0
===
insert-node
---
IfStatement [7061,7879]
to
Block [6768,7378]
at 0
===
insert-node
---
MethodInvocation [24073,24110]
to
IfStatement [23203,24194]
at 0
===
insert-node
---
SimpleName: isSafeAssign [5808,5820]
to
MethodInvocation [5808,5847]
at 0
===
insert-node
---
METHOD_INVOCATION_ARGUMENTS [5821,5846]
to
MethodInvocation [5808,5847]
at 1
===
insert-tree
---
PrefixExpression [7065,7107]
    PREFIX_EXPRESSION_OPERATOR: ! [7065,7066]
    MethodInvocation [7066,7107]
        SimpleName: maybeExternMethod [7066,7083]
        METHOD_INVOCATION_ARGUMENTS [7084,7106]
            MethodInvocation [7084,7106]
                METHOD_INVOCATION_RECEIVER [7084,7090]
                    SimpleName: parent [7084,7090]
                SimpleName: getFirstChild [7091,7104]
to
IfStatement [7061,7879]
at 0
===
insert-tree
---
Block [7109,7233]
    ThrowStatement [7121,7223]
        ClassInstanceCreation [7127,7222]
            SimpleType [7131,7152]
                SimpleName: IllegalStateException [7131,7152]
            StringLiteral: "External object method calls can not be decomposed." [7168,7221]
to
IfStatement [7061,7879]
at 1
===
insert-node
---
Block [7239,7879]
to
IfStatement [7061,7879]
at 2
===
insert-tree
---
ExpressionStatement [23650,23679]
    Assignment [23650,23678]
        SimpleName: requiresDecomposition [23650,23671]
        ASSIGNMENT_OPERATOR: = [23672,23673]
        BooleanLiteral: true [23674,23678]
to
Block [22788,22823]
at 0
===
insert-node
---
SimpleName: isSafeAssign [24073,24085]
to
MethodInvocation [24073,24110]
at 0
===
insert-node
---
METHOD_INVOCATION_ARGUMENTS [24086,24109]
to
MethodInvocation [24073,24110]
at 1
===
insert-tree
---
VariableDeclarationStatement [25952,25988]
    SimpleType [25952,25956]
        SimpleName: Node [25952,25956]
    VariableDeclarationFragment [25957,25987]
        SimpleName: first [25957,25962]
        MethodInvocation [25965,25987]
            METHOD_INVOCATION_RECEIVER [25965,25971]
                SimpleName: parent [25965,25971]
            SimpleName: getFirstChild [25972,25985]
to
Block [23800,24194]
at 1
===
insert-node
---
IfStatement [25999,26315]
to
Block [23800,24194]
at 2
===
move-tree
---
SimpleName: parent [5644,5650]
to
METHOD_INVOCATION_ARGUMENTS [5821,5846]
at 0
===
insert-node
---
QualifiedName: state.sideEffects [5829,5846]
to
METHOD_INVOCATION_ARGUMENTS [5821,5846]
at 1
===
move-tree
---
VariableDeclarationStatement [6778,6827]
    SimpleType [6778,6782]
        SimpleName: Node [6778,6782]
    VariableDeclarationFragment [6783,6826]
        SimpleName: functionExpression [6783,6801]
        MethodInvocation [6804,6826]
            METHOD_INVOCATION_RECEIVER [6804,6810]
                SimpleName: parent [6804,6810]
            SimpleName: getFirstChild [6811,6824]
to
Block [7239,7879]
at 0
===
move-tree
---
ExpressionStatement [6836,6917]
    MethodInvocation [6836,6916]
        SimpleName: decomposeSubExpressions [6836,6859]
        METHOD_INVOCATION_ARGUMENTS [6873,6915]
            MethodInvocation [6873,6901]
                METHOD_INVOCATION_RECEIVER [6873,6891]
                    SimpleName: functionExpression [6873,6891]
                SimpleName: getNext [6892,6899]
            SimpleName: child [6903,6908]
            SimpleName: state [6910,6915]
to
Block [7239,7879]
at 1
===
move-tree
---
IfStatement [6968,7370]
    MethodInvocation [6972,7033]
        SimpleName: isExpressionTreeUnsafe [6972,6994]
        METHOD_INVOCATION_ARGUMENTS [6995,7032]
            SimpleName: functionExpression [6995,7013]
            QualifiedName: state.sideEffects [7015,7032]
    Block [7035,7370]
        ExpressionStatement [7148,7173]
            Assignment [7148,7172]
                QualifiedName: state.sideEffects [7148,7165]
                ASSIGNMENT_OPERATOR: = [7166,7167]
                BooleanLiteral: true [7168,7172]
        VariableDeclarationStatement [7239,7295]
            SimpleType [7239,7243]
                SimpleName: Node [7239,7243]
            VariableDeclarationFragment [7244,7294]
                SimpleName: replacement [7244,7255]
                MethodInvocation [7258,7294]
                    SimpleName: rewriteCallExpression [7258,7279]
                    METHOD_INVOCATION_ARGUMENTS [7280,7293]
                        SimpleName: parent [7280,7286]
                        SimpleName: state [7288,7293]
        ExpressionStatement [7339,7360]
            Assignment [7339,7359]
                SimpleName: parent [7339,7345]
                ASSIGNMENT_OPERATOR: = [7346,7347]
                SimpleName: replacement [7348,7359]
to
Block [7239,7879]
at 2
===
move-tree
---
SimpleName: parent [23249,23255]
to
METHOD_INVOCATION_ARGUMENTS [24086,24109]
at 0
===
insert-node
---
SimpleName: seenSideEffects [24094,24109]
to
METHOD_INVOCATION_ARGUMENTS [24086,24109]
at 1
===
insert-tree
---
InfixExpression [26003,26113]
    InfixExpression [26003,26073]
        SimpleName: requiresDecomposition [26003,26024]
        INFIX_EXPRESSION_OPERATOR: && [26040,26042]
        InfixExpression [26043,26073]
            MethodInvocation [26043,26059]
                METHOD_INVOCATION_RECEIVER [26043,26049]
                    SimpleName: parent [26043,26049]
                SimpleName: getType [26050,26057]
            INFIX_EXPRESSION_OPERATOR: == [26060,26062]
            QualifiedName: Token.CALL [26063,26073]
    INFIX_EXPRESSION_OPERATOR: && [26089,26091]
    MethodInvocation [26092,26113]
        METHOD_INVOCATION_RECEIVER [26092,26100]
            SimpleName: NodeUtil [26092,26100]
        SimpleName: isGet [26101,26106]
        METHOD_INVOCATION_ARGUMENTS [26107,26112]
            SimpleName: first [26107,26112]
to
IfStatement [25999,26315]
at 0
===
insert-node
---
Block [26115,26315]
to
IfStatement [25999,26315]
at 1
===
insert-tree
---
IfStatement [24866,25028]
    MethodInvocation [24870,24929]
        SimpleName: isExpressionTreeUnsafe [24870,24892]
        METHOD_INVOCATION_ARGUMENTS [24910,24928]
            SimpleName: n [24910,24911]
            SimpleName: seenSideEffects [24913,24928]
    Block [24931,25028]
        ExpressionStatement [24947,24970]
            Assignment [24947,24969]
                SimpleName: seenSideEffects [24947,24962]
                ASSIGNMENT_OPERATOR: = [24963,24964]
                BooleanLiteral: true [24965,24969]
        ExpressionStatement [24985,25014]
            Assignment [24985,25013]
                SimpleName: requiresDecomposition [24985,25006]
                ASSIGNMENT_OPERATOR: = [25007,25008]
                BooleanLiteral: true [25009,25013]
to
Block [23875,24184]
at 1
===
insert-node
---
IfStatement [26129,26303]
to
Block [26115,26315]
at 0
===
insert-tree
---
MethodInvocation [26133,26157]
    SimpleName: maybeExternMethod [26133,26150]
    METHOD_INVOCATION_ARGUMENTS [26151,26156]
        SimpleName: first [26151,26156]
to
IfStatement [26129,26303]
at 0
===
insert-node
---
Block [26159,26229]
to
IfStatement [26129,26303]
at 1
===
insert-node
---
Block [26235,26303]
to
IfStatement [26129,26303]
at 2
===
insert-node
---
QualifiedName: DecompositionType.UNDECOMPOSABLE [26182,26214]
to
root
at 0
===
insert-node
---
QualifiedName: DecompositionType.DECOMPOSABLE [26258,26288]
to
root
at 0
===
delete-tree
---
ImportDeclaration [735,775]
    QualifiedName: com.google.common.base.Predicate [742,774]
===
delete-tree
---
ImportDeclaration [776,817]
    QualifiedName: com.google.common.base.Predicates [783,816]
===
delete-node
---
METHOD_INVOCATION_RECEIVER [5644,5650]
===
===
delete-node
---
SimpleName: getFirstChild [5651,5664]
===
===
delete-node
---
MethodInvocation [5644,5666]
===
===
delete-node
---
METHOD_INVOCATION_RECEIVER [5644,5666]
===
===
delete-node
---
SimpleName: getType [5667,5674]
===
===
delete-node
---
MethodInvocation [5644,5676]
===
===
delete-node
---
INFIX_EXPRESSION_OPERATOR: == [5677,5679]
===
===
delete-node
---
QualifiedName: Token.NAME [5680,5690]
===
===
delete-node
---
InfixExpression [5644,5690]
===
===
delete-tree
---
Block [20917,20968]
    ReturnStatement [20927,20960]
        QualifiedName: DecompositionType.MOVABLE [20934,20959]
===
delete-tree
---
Block [20974,21030]
    ReturnStatement [20984,21022]
        QualifiedName: DecompositionType.DECOMPOSABLE [20991,21021]
===
delete-node
---
IfStatement [20858,21030]
===
===
delete-node
---
PrimitiveType: boolean [22090,22097]
===
===
delete-node
---
BooleanLiteral: true [22553,22557]
===
===
delete-tree
---
ReturnStatement [22800,22813]
    BooleanLiteral: false [22807,22812]
===
delete-tree
---
InfixExpression [23207,23233]
    SimpleName: parentType [23207,23217]
    INFIX_EXPRESSION_OPERATOR: == [23218,23220]
    QualifiedName: Token.ASSIGN [23221,23233]
===
delete-node
---
INFIX_EXPRESSION_OPERATOR: && [23246,23248]
===
===
delete-node
---
METHOD_INVOCATION_RECEIVER [23249,23255]
===
===
delete-node
---
SimpleName: getFirstChild [23256,23269]
===
===
delete-node
---
MethodInvocation [23249,23271]
===
===
delete-node
---
METHOD_INVOCATION_RECEIVER [23249,23271]
===
===
delete-node
---
SimpleName: getType [23272,23279]
===
===
delete-node
---
MethodInvocation [23249,23281]
===
===
delete-node
---
INFIX_EXPRESSION_OPERATOR: == [23282,23284]
===
===
delete-node
---
QualifiedName: Token.NAME [23285,23295]
===
===
delete-node
---
InfixExpression [23249,23295]
===
===
delete-node
---
InfixExpression [23207,23295]
===
===
delete-tree
---
IfStatement [24051,24172]
    MethodInvocation [24055,24127]
        SimpleName: isExpressionTreeUnsafe [24055,24077]
        METHOD_INVOCATION_ARGUMENTS [24095,24126]
            SimpleName: n [24095,24096]
            SimpleName: callExpressionHasSideEffects [24098,24126]
    Block [24129,24172]
        ReturnStatement [24145,24158]
            BooleanLiteral: false [24152,24157]
===
delete-tree
---
MethodDeclaration [24392,24646]
    Javadoc [24392,24481]
        TagElement [24401,24475]
            TextElement:  Whether the tree can be affect by side-effects occuring elsewhere. [24408,24475]
    Modifier: private [24484,24491]
    PrimitiveType: boolean [24492,24499]
    SimpleName: canBeSideEffected [24500,24517]
    SingleVariableDeclaration [24518,24524]
        SimpleType [24518,24522]
            SimpleName: Node [24518,24522]
        SimpleName: n [24523,24524]
    Block [24526,24646]
        ReturnStatement [24532,24642]
            MethodInvocation [24539,24641]
                METHOD_INVOCATION_RECEIVER [24539,24547]
                    SimpleName: NodeUtil [24539,24547]
                SimpleName: has [24548,24551]
                METHOD_INVOCATION_ARGUMENTS [24561,24640]
                    SimpleName: n [24561,24562]
                    ClassInstanceCreation [24564,24601]
                        SimpleType [24568,24580]
                            SimpleName: SideEffected [24568,24580]
                        FieldAccess [24581,24600]
                            ThisExpression [24581,24585]
                            SimpleName: knownConstants [24586,24600]
                    MethodInvocation [24611,24640]
                        METHOD_INVOCATION_RECEIVER [24611,24621]
                            SimpleName: Predicates [24611,24621]
                        SimpleName: alwaysTrue [24628,24638]
===
delete-tree
---
TypeDeclaration [24650,25718]
    Javadoc [24650,24730]
        TagElement [24659,24724]
            TextElement: Predicate for detecting logic that may be affect by side-effects. [24659,24724]
    Modifier: private [24733,24740]
    Modifier: static [24741,24747]
    TYPE_DECLARATION_KIND: class [24748,24753]
    SimpleName: SideEffected [24754,24766]
    ParameterizedType [24778,24793]
        SimpleType [24778,24787]
            SimpleName: Predicate [24778,24787]
        SimpleType [24788,24792]
            SimpleName: Node [24788,24792]
    FieldDeclaration [24800,24835]
        Modifier: final [24800,24805]
        ParameterizedType [24806,24817]
            SimpleType [24806,24809]
                SimpleName: Set [24806,24809]
            SimpleType [24810,24816]
                SimpleName: String [24810,24816]
        VariableDeclarationFragment [24818,24834]
            SimpleName: additionalConsts [24818,24834]
    MethodDeclaration [24841,24939]
        SimpleName: SideEffected [24841,24853]
        SingleVariableDeclaration [24854,24882]
            ParameterizedType [24854,24865]
                SimpleType [24854,24857]
                    SimpleName: Set [24854,24857]
                SimpleType [24858,24864]
                    SimpleName: String [24858,24864]
            SimpleName: additionalConsts [24866,24882]
        Block [24884,24939]
            ExpressionStatement [24892,24933]
                Assignment [24892,24932]
                    FieldAccess [24892,24913]
                        ThisExpression [24892,24896]
                        SimpleName: additionalConsts [24897,24913]
                    ASSIGNMENT_OPERATOR: = [24914,24915]
                    SimpleName: additionalConsts [24916,24932]
    MethodDeclaration [24945,25714]
        Javadoc [24945,25019]
            TagElement [24956,25011]
                TextElement:  Whether the node can be affect by side-effects. [24963,25011]
        Modifier: public [25024,25030]
        PrimitiveType: boolean [25031,25038]
        SimpleName: apply [25039,25044]
        SingleVariableDeclaration [25045,25051]
            SimpleType [25045,25049]
                SimpleName: Node [25045,25049]
            SimpleName: n [25050,25051]
        Block [25053,25714]
            SwitchStatement [25061,25708]
                MethodInvocation [25069,25080]
                    METHOD_INVOCATION_RECEIVER [25069,25070]
                        SimpleName: n [25069,25070]
                    SimpleName: getType [25071,25078]
                SwitchCase [25092,25108]
                    QualifiedName: Token.CALL [25097,25107]
                SwitchCase [25117,25132]
                    QualifiedName: Token.NEW [25122,25131]
                ReturnStatement [25340,25352]
                    BooleanLiteral: true [25347,25351]
                SwitchCase [25361,25377]
                    QualifiedName: Token.NAME [25366,25376]
                ReturnStatement [25565,25659]
                    InfixExpression [25572,25658]
                        PrefixExpression [25572,25599]
                            PREFIX_EXPRESSION_OPERATOR: ! [25572,25573]
                            MethodInvocation [25573,25599]
                                METHOD_INVOCATION_RECEIVER [25573,25581]
                                    SimpleName: NodeUtil [25573,25581]
                                SimpleName: isConstantName [25582,25596]
                                METHOD_INVOCATION_ARGUMENTS [25597,25598]
                                    SimpleName: n [25597,25598]
                        INFIX_EXPRESSION_OPERATOR: && [25614,25616]
                        PrefixExpression [25617,25658]
                            PREFIX_EXPRESSION_OPERATOR: ! [25617,25618]
                            MethodInvocation [25618,25658]
                                METHOD_INVOCATION_RECEIVER [25618,25634]
                                    SimpleName: additionalConsts [25618,25634]
                                SimpleName: contains [25635,25643]
                                METHOD_INVOCATION_ARGUMENTS [25644,25657]
                                    MethodInvocation [25644,25657]
                                        METHOD_INVOCATION_RECEIVER [25644,25645]
                                            SimpleName: n [25644,25645]
                                        SimpleName: getString [25646,25655]
                SwitchCase [25668,25676]
                ReturnStatement [25687,25700]
                    BooleanLiteral: false [25694,25699]
===
delete-tree
---
ReturnStatement [26159,26187]
    MethodInvocation [26166,26186]
        SimpleName: canBeSideEffected [26166,26183]
        METHOD_INVOCATION_ARGUMENTS [26184,26185]
            SimpleName: n [26184,26185]
===
multi-move-tree
---
ReturnStatement [22546,22558]
    BooleanLiteral: true [22553,22557]
to
ReturnStatement [26175,26215]
at -1
===
multi-move-tree
---
ReturnStatement [22546,22558]
    BooleanLiteral: true [22553,22557]
to
ReturnStatement [26251,26289]
at -1
