===
move-tree
---
TextElement: lineEnding is CRLF, but these can be overridden by using the appropriate [1103,1175]
to
TagElement [948,1905]
at 4
===
move-tree
---
TextElement: </p><p> [1414,1421]
to
TagElement [948,1905]
at 10
===
insert-node
---
Javadoc [2523,2869]
to
MethodDeclaration [2505,3006]
at 0
===
insert-node
---
Javadoc [3039,3960]
to
MethodDeclaration [3012,4211]
at 0
===
insert-node
---
Javadoc [4193,4397]
to
MethodDeclaration [4217,4420]
at 0
===
insert-node
---
Javadoc [5741,6128]
to
MethodDeclaration [5536,6291]
at 0
===
insert-tree
---
Javadoc [6779,6963]
    TagElement [6790,6877]
        TextElement: Closes this output stream and releases any system resources associated with the stream. [6790,6877]
    TagElement [6893,6955]
        SimpleName: IOException [6901,6912]
        TextElement: if an I/O error occurs. [6932,6955]
to
MethodDeclaration [6556,6940]
at 0
===
update-node
---
TextElement: Provides Base64 encoding and decoding in a streaming fashion (unlimited size). [948,1026]
replace Provides Base64 encoding and decoding in a streaming fashion (unlimited size). by Provides Base64 encoding and decoding in a streaming fashion (unlimited size). When encoding the default lineLength
===
update-node
---
TextElement: When encoding the default lineLength is 76 characters and the default [1030,1099]
replace When encoding the default lineLength is 76 characters and the default by is 76 characters and the default lineEnding is CRLF, but these can be overridden by using the appropriate
===
update-node
---
TextElement: lineEnding is CRLF, but these can be overridden by using the appropriate [1103,1175]
replace lineEnding is CRLF, but these can be overridden by using the appropriate by The default behaviour of the Base64OutputStream is to ENCODE, whereas the default behaviour of the Base64InputStream
===
update-node
---
TextElement: The default behaviour of the Base64OutputStream is to ENCODE, whereas the [1202,1275]
replace The default behaviour of the Base64OutputStream is to ENCODE, whereas the by is to DECODE. But this behaviour can be overridden by using a different constructor.
===
update-node
---
TextElement: default behaviour of the Base64InputStream is to DECODE.  But this behaviour [1279,1355]
replace default behaviour of the Base64InputStream is to DECODE.  But this behaviour by </p>
===
update-node
---
TextElement: can be overridden by using a different constructor. [1359,1410]
replace can be overridden by using a different constructor. by <p>
===
update-node
---
TextElement: </p><p> [1414,1421]
replace </p><p> by </p>
===
update-node
---
TextElement: </p><p> [1653,1660]
replace </p><p> by <p>
===
update-node
---
TextElement: </p>  [1900,1905]
replace </p>  by </p>
===
insert-tree
---
TagElement [2534,2678]
    TextElement: Creates a Base64OutputStream such that all data written is either Base64-encoded or Base64-decoded to the [2534,2639]
    TextElement: original provided OutputStream. [2647,2678]
to
Javadoc [2523,2869]
at 0
===
move-tree
---
TagElement [2675,2712]
    SimpleName: out [2682,2685]
    TextElement:       OutputStream to wrap. [2685,2712]
to
Javadoc [2523,2869]
at 1
===
insert-node
---
TagElement [2752,2861]
to
Javadoc [2523,2869]
at 2
===
insert-tree
---
TagElement [3050,3194]
    TextElement: Creates a Base64OutputStream such that all data written is either Base64-encoded or Base64-decoded to the [3050,3155]
    TextElement: original provided OutputStream. [3163,3194]
to
Javadoc [3039,3960]
at 0
===
move-tree
---
TagElement [3182,3224]
    SimpleName: out [3189,3192]
    TextElement:            OutputStream to wrap. [3192,3224]
to
Javadoc [3039,3960]
at 1
===
insert-node
---
TagElement [3268,3377]
to
Javadoc [3039,3960]
at 2
===
insert-node
---
TagElement [3385,3687]
to
Javadoc [3039,3960]
at 3
===
insert-node
---
TagElement [3695,3952]
to
Javadoc [3039,3960]
at 4
===
move-tree
---
TagElement [4228,4289]
    TextElement: Writes the specified <code>byte</code> to this output stream. [4228,4289]
to
Javadoc [4193,4397]
at 0
===
insert-tree
---
TagElement [4281,4319]
    SimpleName: i [4288,4289]
    TextElement: source byte [4308,4319]
to
Javadoc [4193,4397]
at 1
===
insert-tree
---
TagElement [4327,4389]
    SimpleName: IOException [4335,4346]
    TextElement: if an I/O error occurs. [4366,4389]
to
Javadoc [4193,4397]
at 2
===
insert-tree
---
TagElement [5752,5918]
    TextElement: Flushes this output stream and forces any buffered output bytes to be written out to the stream. If propogate is [5752,5864]
    TextElement: true, the wrapped stream will also be flushed. [5872,5918]
to
Javadoc [5741,6128]
at 0
===
insert-node
---
TagElement [5934,6050]
to
Javadoc [5741,6128]
at 1
===
move-tree
---
TagElement [5866,5909]
    SimpleName: IOException [5874,5885]
    TextElement:  if an I/O error occurs. [5885,5909]
to
Javadoc [5741,6128]
at 2
===
update-node
---
TextElement: Creates a Base64OutputStream such that all data written is Base64-encoded [2244,2317]
replace Creates a Base64OutputStream such that all data written is Base64-encoded by Creates a Base64OutputStream such that all data written is Base64-encoded to the original provided OutputStream.
===
update-node
---
TextElement:  OutputStream to wrap. [2388,2410]
replace  OutputStream to wrap. by OutputStream to wrap.
===
update-node
---
TextElement:       OutputStream to wrap. [2685,2712]
replace       OutputStream to wrap. by OutputStream to wrap.
===
move-tree
---
SimpleName: doEncode [2727,2735]
to
TagElement [2752,2861]
at 0
===
insert-node
---
TextElement: true if we should encode all data written to us, false if we should decode. [2786,2861]
to
TagElement [2752,2861]
at 1
===
update-node
---
TextElement:            OutputStream to wrap. [3192,3224]
replace            OutputStream to wrap. by OutputStream to wrap.
===
move-tree
---
SimpleName: doEncode [3239,3247]
to
TagElement [3268,3377]
at 0
===
insert-node
---
TextElement: true if we should encode all data written to us, false if we should decode. [3302,3377]
to
TagElement [3268,3377]
at 1
===
move-tree
---
SimpleName: lineLength [3371,3381]
to
TagElement [3385,3687]
at 0
===
insert-node
---
TextElement: If doEncode is true, each line of encoded data will contain lineLength characters (rounded down to [3421,3519]
to
TagElement [3385,3687]
at 1
===
insert-node
---
TextElement: nearest multiple of 4). If lineLength <=0, the encoded data is not divided into lines. If doEncode is [3538,3639]
to
TagElement [3385,3687]
at 2
===
insert-node
---
TextElement: false, lineLength is ignored. [3658,3687]
to
TagElement [3385,3687]
at 3
===
move-tree
---
SimpleName: lineSeparator [3676,3689]
to
TagElement [3695,3952]
at 0
===
insert-node
---
TextElement: If doEncode is true, each line of encoded data will be terminated with this byte sequence (e.g. \r\n). [3734,3836]
to
TagElement [3695,3952]
at 1
===
insert-node
---
TextElement: If lineLength <= 0, the lineSeparator is not used. If doEncode is false lineSeparator is ignored. [3855,3952]
to
TagElement [3695,3952]
at 2
===
update-node
---
TextElement: Writes <code>len</code> bytes from the specified [4437,4485]
replace Writes <code>len</code> bytes from the specified by Writes <code>len</code> bytes from the specified <code>b</code> array starting at <code>offset</code> to this
===
update-node
---
TextElement: <code>b</code> array starting at <code>offset</code> to [4493,4548]
replace <code>b</code> array starting at <code>offset</code> to by output stream.
===
update-node
---
TextElement:  source byte array [4598,4616]
replace  source byte array by source byte array
===
update-node
---
TextElement:  where to start reading the bytes [4637,4670]
replace  where to start reading the bytes by where to start reading the bytes
===
update-node
---
TextElement:  maximum number of bytes to write [4688,4721]
replace  maximum number of bytes to write by maximum number of bytes to write
===
update-node
---
TextElement:  if an I/O error occurs. [4756,4780]
replace  if an I/O error occurs. by if an I/O error occurs.
===
update-node
---
TextElement:  if the byte array parameter is null [4816,4852]
replace  if the byte array parameter is null by if the byte array parameter is null
===
update-node
---
TextElement:  if offset, len or buffer size are invalid [4893,4935]
replace  if offset, len or buffer size are invalid by if offset, len or buffer size are invalid
===
move-tree
---
SimpleName: propogate [5743,5752]
to
TagElement [5934,6050]
at 0
===
insert-node
---
TextElement: boolean flag to indicate whether the wrapped OutputStream should also be flushed. [5969,6050]
to
TagElement [5934,6050]
at 1
===
update-node
---
TextElement:  if an I/O error occurs. [5885,5909]
replace  if an I/O error occurs. by if an I/O error occurs.
===
update-node
---
TextElement: Flushes this output stream and forces any buffered output bytes [6308,6371]
replace Flushes this output stream and forces any buffered output bytes by Flushes this output stream and forces any buffered output bytes to be written out to the stream.
===
update-node
---
TextElement:  if an I/O error occurs. [6445,6469]
replace  if an I/O error occurs. by if an I/O error occurs.
===
delete-node
---
TextElement: to the original provided OutputStream. [2325,2363]
===
===
delete-tree
---
TagElement [2516,2660]
    TextElement: Creates a Base64OutputStream such that all data written is either [2516,2581]
    TextElement: Base64-encoded or Base64-decoded to the original provided OutputStream. [2589,2660]
===
delete-node
---
TextElement:  true if we should encode all data written to us, [2735,2784]
===
===
delete-node
---
TextElement: false if we should decode. [2808,2834]
===
===
delete-node
---
TagElement [2720,2834]
===
===
delete-node
---
Javadoc [2505,2842]
===
===
delete-tree
---
TagElement [3023,3167]
    TextElement: Creates a Base64OutputStream such that all data written is either [3023,3088]
    TextElement: Base64-encoded or Base64-decoded to the original provided OutputStream. [3096,3167]
===
delete-node
---
TextElement:       true if we should encode all data written to us, [3247,3301]
===
===
delete-node
---
TextElement: false if we should decode. [3330,3356]
===
===
delete-node
---
TagElement [3232,3356]
===
===
delete-node
---
TextElement:     If doEncode is true, each line of encoded [3381,3426]
===
===
delete-node
---
TextElement: data will contain lineLength characters.   [3455,3497]
===
===
delete-node
---
TextElement: If lineLength <=0, the encoded data is not divided into lines. [3526,3588]
===
===
delete-node
---
TextElement: If doEncode is false, lineLength is ignored. [3617,3661]
===
===
delete-node
---
TagElement [3364,3661]
===
===
delete-node
---
TextElement:  If doEncode is true, each line of encoded [3689,3731]
===
===
delete-node
---
TextElement: data will be terminated with this byte sequence (e.g. \r\n).   [3760,3822]
===
===
delete-node
---
TextElement: If lineLength <= 0, the lineSeparator is not used. [3851,3901]
===
===
delete-node
---
TextElement: If doEncode is false lineSeparator is ignored. [3930,3976]
===
===
delete-node
---
TagElement [3669,3976]
===
===
delete-node
---
Javadoc [3012,3984]
===
===
delete-node
---
Javadoc [4217,4297]
===
===
delete-node
---
TextElement: this output stream. [4556,4575]
===
===
delete-tree
---
TagElement [5547,5721]
    TextElement: Flushes this output stream and forces any buffered output bytes [5547,5610]
    TextElement: to be written out to the stream.  If propogate is true, the wrapped [5618,5685]
    TextElement: stream will also be flushed. [5693,5721]
===
delete-node
---
TextElement:  boolean flag to indicate whether the wrapped [5752,5797]
===
===
delete-node
---
TextElement: OutputStream should also be flushed. [5822,5858]
===
===
delete-node
---
TagElement [5736,5858]
===
===
delete-node
---
Javadoc [5536,5917]
===
===
delete-node
---
TextElement: to be written out to the stream. [6379,6411]
===
===
delete-tree
---
Javadoc [6556,6669]
    TagElement [6567,6661]
        TextElement: Closes this output stream and releases any system resources [6567,6626]
        TextElement: associated with the stream. [6634,6661]
