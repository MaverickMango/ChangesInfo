===
move-tree
---
TextElement: lineEnding is CRLF, but these can be overridden by using the appropriate [1101,1173]
to
TagElement [946,1902]
at 4
===
move-tree
---
TextElement: </p><p> [1411,1418]
to
TagElement [946,1902]
at 10
===
insert-node
---
Javadoc [2512,2852]
to
MethodDeclaration [2493,2985]
at 0
===
insert-node
---
Javadoc [3018,3933]
to
MethodDeclaration [2991,4179]
at 0
===
insert-node
---
Javadoc [4162,4407]
to
MethodDeclaration [4185,4656]
at 0
===
update-node
---
TextElement: Provides Base64 encoding and decoding in a streaming fashion (unlimited size). [946,1024]
replace Provides Base64 encoding and decoding in a streaming fashion (unlimited size). by Provides Base64 encoding and decoding in a streaming fashion (unlimited size). When encoding the default lineLength
===
update-node
---
TextElement: When encoding the default lineLength is 76 characters and the default [1028,1097]
replace When encoding the default lineLength is 76 characters and the default by is 76 characters and the default lineEnding is CRLF, but these can be overridden by using the appropriate
===
update-node
---
TextElement: lineEnding is CRLF, but these can be overridden by using the appropriate [1101,1173]
replace lineEnding is CRLF, but these can be overridden by using the appropriate by The default behaviour of the Base64InputStream is to DECODE, whereas the default behaviour of the Base64OutputStream
===
update-node
---
TextElement: The default behaviour of the Base64InputStream is to DECODE, whereas the [1200,1272]
replace The default behaviour of the Base64InputStream is to DECODE, whereas the by is to ENCODE, but this behaviour can be overridden by using a different constructor.
===
update-node
---
TextElement: default behaviour of the Base64OutputStream is to ENCODE, but this [1276,1342]
replace default behaviour of the Base64OutputStream is to ENCODE, but this by </p>
===
update-node
---
TextElement: behaviour can be overridden by using a different constructor. [1346,1407]
replace behaviour can be overridden by using a different constructor. by <p>
===
update-node
---
TextElement: </p><p> [1411,1418]
replace </p><p> by </p>
===
update-node
---
TextElement: </p><p> [1650,1657]
replace </p><p> by <p>
===
update-node
---
TextElement: character encodings which are compatible with the lower 127 ASCII chart (ISO-8859-1, Windows-1252, UTF-8, etc).  [1782,1894]
replace character encodings which are compatible with the lower 127 ASCII chart (ISO-8859-1, Windows-1252, UTF-8, etc).  by character encodings which are compatible with the lower 127 ASCII chart (ISO-8859-1, Windows-1252, UTF-8, etc).
===
insert-tree
---
TagElement [2523,2664]
    TextElement: Creates a Base64InputStream such that all data read is either Base64-encoded or Base64-decoded from the original [2523,2635]
    TextElement: provided InputStream. [2643,2664]
to
Javadoc [2512,2852]
at 0
===
move-tree
---
TagElement [2660,2696]
    SimpleName: in [2667,2669]
    TextElement:        InputStream to wrap. [2669,2696]
to
Javadoc [2512,2852]
at 1
===
insert-node
---
TagElement [2736,2844]
to
Javadoc [2512,2852]
at 2
===
insert-tree
---
TagElement [3029,3170]
    TextElement: Creates a Base64InputStream such that all data read is either Base64-encoded or Base64-decoded from the original [3029,3141]
    TextElement: provided InputStream. [3149,3170]
to
Javadoc [3018,3933]
at 0
===
move-tree
---
TagElement [3158,3199]
    SimpleName: in [3165,3167]
    TextElement:             InputStream to wrap. [3167,3199]
to
Javadoc [3018,3933]
at 1
===
insert-node
---
TagElement [3242,3350]
to
Javadoc [3018,3933]
at 2
===
insert-node
---
TagElement [3358,3660]
to
Javadoc [3018,3933]
at 3
===
insert-node
---
TagElement [3668,3925]
to
Javadoc [3018,3933]
at 4
===
move-tree
---
TagElement [4196,4247]
    TextElement: Reads one <code>byte</code> from this input stream. [4196,4247]
to
Javadoc [4162,4407]
at 0
===
insert-tree
---
TagElement [4240,4329]
    TextElement:  the byte as an integer in the range 0 to 255. Returns -1 if EOF has been reached. [4247,4329]
to
Javadoc [4162,4407]
at 1
===
insert-tree
---
TagElement [4337,4399]
    SimpleName: IOException [4345,4356]
    TextElement: if an I/O error occurs. [4376,4399]
to
Javadoc [4162,4407]
at 2
===
update-node
---
TextElement: Creates a Base64InputStream such that all data read is Base64-decoded [2240,2309]
replace Creates a Base64InputStream such that all data read is Base64-decoded by Creates a Base64InputStream such that all data read is Base64-decoded from the original provided InputStream.
===
update-node
---
TextElement:  InputStream to wrap. [2380,2401]
replace  InputStream to wrap. by InputStream to wrap.
===
update-node
---
TextElement:        InputStream to wrap. [2669,2696]
replace        InputStream to wrap. by InputStream to wrap.
===
move-tree
---
SimpleName: doEncode [2711,2719]
to
TagElement [2736,2844]
at 0
===
insert-node
---
TextElement: true if we should encode all data read from us, false if we should decode. [2770,2844]
to
TagElement [2736,2844]
at 1
===
update-node
---
TextElement:             InputStream to wrap. [3167,3199]
replace             InputStream to wrap. by InputStream to wrap.
===
move-tree
---
SimpleName: doEncode [3214,3222]
to
TagElement [3242,3350]
at 0
===
insert-node
---
TextElement: true if we should encode all data read from us, false if we should decode. [3276,3350]
to
TagElement [3242,3350]
at 1
===
move-tree
---
SimpleName: lineLength [3345,3355]
to
TagElement [3358,3660]
at 0
===
insert-node
---
TextElement: If doEncode is true, each line of encoded data will contain lineLength characters (rounded down to [3394,3492]
to
TagElement [3358,3660]
at 1
===
insert-node
---
TextElement: nearest multiple of 4). If lineLength <=0, the encoded data is not divided into lines. If doEncode is [3511,3612]
to
TagElement [3358,3660]
at 2
===
insert-node
---
TextElement: false, lineLength is ignored. [3631,3660]
to
TagElement [3358,3660]
at 3
===
move-tree
---
SimpleName: lineSeparator [3648,3661]
to
TagElement [3668,3925]
at 0
===
insert-node
---
TextElement: If doEncode is true, each line of encoded data will be terminated with this byte sequence (e.g. \r\n). [3707,3809]
to
TagElement [3668,3925]
at 1
===
insert-node
---
TextElement: If lineLength <= 0, the lineSeparator is not used. If doEncode is false lineSeparator is ignored. [3828,3925]
to
TagElement [3668,3925]
at 2
===
update-node
---
TextElement: Attempts to read <code>len</code> bytes into the specified [4673,4731]
replace Attempts to read <code>len</code> bytes into the specified by Attempts to read <code>len</code> bytes into the specified <code>b</code> array starting at <code>offset</code>
===
update-node
---
TextElement: <code>b</code> array starting at <code>offset</code> from [4739,4796]
replace <code>b</code> array starting at <code>offset</code> from by from this InputStream.
===
update-node
---
TextElement:  destination byte array [4845,4868]
replace  destination byte array by destination byte array
===
update-node
---
TextElement:  where to start writing the bytes [4889,4922]
replace  where to start writing the bytes by where to start writing the bytes
===
update-node
---
TextElement:  maximum number of bytes to read [4940,4972]
replace  maximum number of bytes to read by maximum number of bytes to read
===
update-node
---
TextElement:  if an I/O error occurs. [5043,5067]
replace  if an I/O error occurs. by if an I/O error occurs.
===
update-node
---
TextElement:  if the byte array parameter is null [5103,5139]
replace  if the byte array parameter is null by if the byte array parameter is null
===
update-node
---
TextElement:  if offset, len or buffer size are invalid [5180,5222]
replace  if offset, len or buffer size are invalid by if offset, len or buffer size are invalid
===
delete-node
---
TextElement: from the original provided InputStream. [2317,2356]
===
===
delete-tree
---
TagElement [2504,2645]
    TextElement: Creates a Base64InputStream such that all data read is either [2504,2565]
    TextElement: Base64-encoded or Base64-decoded from the original provided InputStream. [2573,2645]
===
delete-node
---
TextElement:  true if we should encode all data read from us, [2719,2767]
===
===
delete-node
---
TextElement: false if we should decode. [2791,2817]
===
===
delete-node
---
TagElement [2704,2817]
===
===
delete-node
---
Javadoc [2493,2825]
===
===
delete-tree
---
TagElement [3002,3143]
    TextElement: Creates a Base64InputStream such that all data read is either [3002,3063]
    TextElement: Base64-encoded or Base64-decoded from the original provided InputStream. [3071,3143]
===
delete-node
---
TextElement:       true if we should encode all data read from us, [3222,3275]
===
===
delete-node
---
TextElement: false if we should decode. [3304,3330]
===
===
delete-node
---
TagElement [3207,3330]
===
===
delete-node
---
TextElement:     If doEncode is true, each line of encoded [3355,3400]
===
===
delete-node
---
TextElement: data will contain lineLength characters. [3429,3469]
===
===
delete-node
---
TextElement: If lineLength <=0, the encoded data is not divided into lines. [3498,3560]
===
===
delete-node
---
TextElement: If doEncode is false, lineLength is ignored. [3589,3633]
===
===
delete-node
---
TagElement [3338,3633]
===
===
delete-node
---
TextElement:  If doEncode is true, each line of encoded [3661,3703]
===
===
delete-node
---
TextElement: data will be terminated with this byte sequence (e.g. \r\n). [3732,3792]
===
===
delete-node
---
TextElement: If lineLength <= 0, the lineSeparator is not used.   [3821,3873]
===
===
delete-node
---
TextElement: If doEncode is false lineSeparator is ignored. [3902,3948]
===
===
delete-node
---
TagElement [3641,3948]
===
===
delete-node
---
Javadoc [2991,3956]
===
===
delete-tree
---
TagElement [4263,4358]
    TextElement:  the byte as an integer in the range 0 to 255 [4270,4315]
    TextElement: Returns -1 if EOF has been reached. [4323,4358]
===
delete-node
---
Javadoc [4185,4366]
===
===
delete-node
---
TextElement: this InputStream. [4804,4821]
===
