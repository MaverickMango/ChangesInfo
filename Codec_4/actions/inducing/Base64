===
insert-node
---
MethodDeclaration [34430,35629]
to
TypeDeclaration [1073,36634]
at 57
===
move-tree
---
VariableDeclarationStatement [29519,29606]
    SimpleType [29519,29525]
        SimpleName: Base64 [29519,29525]
    VariableDeclarationFragment [29526,29605]
        SimpleName: b64 [29526,29529]
        ConditionalExpression [29532,29605]
            SimpleName: isChunked [29532,29541]
            ClassInstanceCreation [29544,29563]
                SimpleType [29548,29554]
                    SimpleName: Base64 [29548,29554]
                SimpleName: urlSafe [29555,29562]
            ClassInstanceCreation [29566,29605]
                SimpleType [29570,29576]
                    SimpleName: Base64 [29570,29576]
                NumberLiteral: 0 [29577,29578]
                SimpleName: CHUNK_SEPARATOR [29580,29595]
                SimpleName: urlSafe [29597,29604]
to
Block [29408,30989]
at 6
===
insert-tree
---
Javadoc [34430,34991]
    TagElement [34441,34519]
        TextElement: Pre-calculates the amount of space needed to base64-encode the supplied array. [34441,34519]
    TagElement [34534,34588]
        SimpleName: pArray [34541,34547]
        TextElement:  byte[] array which will later be encoded [34547,34588]
    TagElement [34596,34718]
        SimpleName: chunkSize [34603,34612]
        TextElement:  line-length of the output (<= 0 means no chunking) between each [34612,34676]
        TextElement: chunkSeparator (e.g. CRLF). [34691,34718]
    TagElement [34726,34816]
        SimpleName: chunkSeparator [34733,34747]
        TextElement:  the sequence of bytes used to separate chunks of output (e.g. CRLF). [34747,34816]
    TagElement [34831,34983]
        TextElement:  amount of space needed to encoded the supplied array.  Returns [34838,34901]
        TextElement: a long since a max-len array will require Integer.MAX_VALUE + 33%. [34917,34983]
to
MethodDeclaration [34430,35629]
at 0
===
insert-node
---
Modifier: private [34996,35003]
to
MethodDeclaration [34430,35629]
at 1
===
insert-node
---
Modifier: static [35004,35010]
to
MethodDeclaration [34430,35629]
at 2
===
insert-node
---
PrimitiveType: long [35011,35015]
to
MethodDeclaration [34430,35629]
at 3
===
insert-node
---
SimpleName: getEncodeLength [35016,35031]
to
MethodDeclaration [34430,35629]
at 4
===
insert-tree
---
SingleVariableDeclaration [35047,35060]
    PrimitiveType: int [35047,35050]
    SimpleName: chunkSize [35051,35060]
to
MethodDeclaration [34430,35629]
at 5
===
insert-tree
---
SingleVariableDeclaration [35062,35083]
    ArrayType [35062,35068]
        PrimitiveType: byte [35062,35066]
        Dimension [35066,35068]
    SimpleName: chunkSeparator [35069,35083]
to
MethodDeclaration [34430,35629]
at 6
===
insert-node
---
Block [35085,35629]
to
MethodDeclaration [34430,35629]
at 7
===
insert-tree
---
ExpressionStatement [12877,12937]
    Assignment [12877,12936]
        FieldAccess [12877,12892]
            ThisExpression [12877,12881]
            SimpleName: lineLength [12882,12892]
        ASSIGNMENT_OPERATOR: = [12893,12894]
        ConditionalExpression [12895,12936]
            InfixExpression [12895,12909]
                SimpleName: lineLength [12895,12905]
                INFIX_EXPRESSION_OPERATOR: > [12906,12907]
                NumberLiteral: 0 [12908,12909]
            InfixExpression [12912,12932]
                ParenthesizedExpression [12912,12928]
                    InfixExpression [12913,12927]
                        SimpleName: lineLength [12913,12923]
                        INFIX_EXPRESSION_OPERATOR: / [12924,12925]
                        NumberLiteral: 4 [12926,12927]
                INFIX_EXPRESSION_OPERATOR: * [12929,12930]
                NumberLiteral: 4 [12931,12932]
            NumberLiteral: 0 [12935,12936]
to
Block [12861,13579]
at 0
===
insert-node
---
IfStatement [27017,27097]
to
Block [26957,27001]
at 0
===
insert-tree
---
VariableDeclarationStatement [27106,27141]
    PrimitiveType: long [27106,27110]
    VariableDeclarationFragment [27111,27140]
        SimpleName: len [27111,27114]
        InfixExpression [27117,27140]
            ParenthesizedExpression [27117,27136]
                InfixExpression [27118,27135]
                    QualifiedName: pArray.length [27118,27131]
                    INFIX_EXPRESSION_OPERATOR: * [27132,27133]
                    NumberLiteral: 3 [27134,27135]
            INFIX_EXPRESSION_OPERATOR: / [27137,27138]
            NumberLiteral: 4 [27139,27140]
to
Block [26957,27001]
at 1
===
insert-tree
---
VariableDeclarationStatement [27150,27183]
    ArrayType [27150,27156]
        PrimitiveType: byte [27150,27154]
        Dimension [27154,27156]
    VariableDeclarationFragment [27157,27182]
        SimpleName: buf [27157,27160]
        ArrayCreation [27163,27182]
            ArrayType [27167,27182]
                PrimitiveType: byte [27167,27171]
                Dimension [27171,27182]
                    CastExpression [27172,27181]
                        PrimitiveType: int [27173,27176]
                        SimpleName: len [27178,27181]
to
Block [26957,27001]
at 2
===
insert-tree
---
ExpressionStatement [27192,27229]
    MethodInvocation [27192,27228]
        SimpleName: setInitialBuffer [27192,27208]
        METHOD_INVOCATION_ARGUMENTS [27209,27227]
            SimpleName: buf [27209,27212]
            NumberLiteral: 0 [27214,27215]
            QualifiedName: buf.length [27217,27227]
to
Block [26957,27001]
at 3
===
insert-tree
---
ExpressionStatement [27238,27271]
    MethodInvocation [27238,27270]
        SimpleName: decode [27238,27244]
        METHOD_INVOCATION_ARGUMENTS [27245,27269]
            SimpleName: pArray [27245,27251]
            NumberLiteral: 0 [27253,27254]
            QualifiedName: pArray.length [27256,27269]
to
Block [26957,27001]
at 4
===
insert-tree
---
ExpressionStatement [27280,27302]
    MethodInvocation [27280,27301]
        SimpleName: decode [27280,27286]
        METHOD_INVOCATION_ARGUMENTS [27287,27300]
            SimpleName: pArray [27287,27293]
            NumberLiteral: 0 [27295,27296]
            PrefixExpression [27298,27300]
                PREFIX_EXPRESSION_OPERATOR: - [27298,27299]
                NumberLiteral: 1 [27299,27300]
to
Block [26957,27001]
at 5
===
insert-tree
---
VariableDeclarationStatement [27691,27721]
    ArrayType [27691,27697]
        PrimitiveType: byte [27691,27695]
        Dimension [27695,27697]
    VariableDeclarationFragment [27698,27720]
        SimpleName: result [27698,27704]
        ArrayCreation [27707,27720]
            ArrayType [27711,27720]
                PrimitiveType: byte [27711,27715]
                Dimension [27715,27720]
                    SimpleName: pos [27716,27719]
to
Block [26957,27001]
at 6
===
insert-tree
---
ExpressionStatement [27730,27768]
    MethodInvocation [27730,27767]
        SimpleName: readResults [27730,27741]
        METHOD_INVOCATION_ARGUMENTS [27742,27766]
            SimpleName: result [27742,27748]
            NumberLiteral: 0 [27750,27751]
            QualifiedName: result.length [27753,27766]
to
Block [26957,27001]
at 7
===
insert-tree
---
ReturnStatement [27777,27791]
    SimpleName: result [27784,27790]
to
Block [26957,27001]
at 8
===
insert-node
---
VariableDeclarationStatement [30316,30384]
to
Block [29408,30989]
at 1
===
insert-node
---
ReturnStatement [30769,30799]
to
Block [29408,30989]
at 8
===
insert-node
---
ReturnStatement [31095,31125]
to
Block [31234,31870]
at 2
===
insert-tree
---
VariableDeclarationStatement [33675,33737]
    PrimitiveType: long [33675,33679]
    VariableDeclarationFragment [33680,33736]
        SimpleName: len [33680,33683]
        MethodInvocation [33686,33736]
            SimpleName: getEncodeLength [33686,33701]
            METHOD_INVOCATION_ARGUMENTS [33702,33735]
                SimpleName: pArray [33702,33708]
                SimpleName: lineLength [33710,33720]
                SimpleName: lineSeparator [33722,33735]
to
Block [34404,34468]
at 0
===
insert-tree
---
VariableDeclarationStatement [33746,33779]
    ArrayType [33746,33752]
        PrimitiveType: byte [33746,33750]
        Dimension [33750,33752]
    VariableDeclarationFragment [33753,33778]
        SimpleName: buf [33753,33756]
        ArrayCreation [33759,33778]
            ArrayType [33763,33778]
                PrimitiveType: byte [33763,33767]
                Dimension [33767,33778]
                    CastExpression [33768,33777]
                        PrimitiveType: int [33769,33772]
                        SimpleName: len [33774,33777]
to
Block [34404,34468]
at 1
===
insert-tree
---
ExpressionStatement [33788,33825]
    MethodInvocation [33788,33824]
        SimpleName: setInitialBuffer [33788,33804]
        METHOD_INVOCATION_ARGUMENTS [33805,33823]
            SimpleName: buf [33805,33808]
            NumberLiteral: 0 [33810,33811]
            QualifiedName: buf.length [33813,33823]
to
Block [34404,34468]
at 2
===
insert-node
---
ExpressionStatement [33834,33867]
to
Block [34404,34468]
at 3
===
insert-tree
---
ExpressionStatement [33876,33898]
    MethodInvocation [33876,33897]
        SimpleName: encode [33876,33882]
        METHOD_INVOCATION_ARGUMENTS [33883,33896]
            SimpleName: pArray [33883,33889]
            NumberLiteral: 0 [33891,33892]
            PrefixExpression [33894,33896]
                PREFIX_EXPRESSION_OPERATOR: - [33894,33895]
                NumberLiteral: 1 [33895,33896]
to
Block [34404,34468]
at 4
===
insert-tree
---
IfStatement [34004,34079]
    InfixExpression [34008,34021]
        SimpleName: buffer [34008,34014]
        INFIX_EXPRESSION_OPERATOR: != [34015,34017]
        SimpleName: buf [34018,34021]
    Block [34023,34079]
        ExpressionStatement [34037,34069]
            MethodInvocation [34037,34068]
                SimpleName: readResults [34037,34048]
                METHOD_INVOCATION_ARGUMENTS [34049,34067]
                    SimpleName: buf [34049,34052]
                    NumberLiteral: 0 [34054,34055]
                    QualifiedName: buf.length [34057,34067]
to
Block [34404,34468]
at 5
===
insert-tree
---
IfStatement [34207,34390]
    InfixExpression [34211,34242]
        MethodInvocation [34211,34222]
            SimpleName: isUrlSafe [34211,34220]
        INFIX_EXPRESSION_OPERATOR: && [34223,34225]
        InfixExpression [34226,34242]
            SimpleName: pos [34226,34229]
            INFIX_EXPRESSION_OPERATOR: < [34230,34231]
            QualifiedName: buf.length [34232,34242]
    Block [34244,34390]
        VariableDeclarationStatement [34258,34292]
            ArrayType [34258,34264]
                PrimitiveType: byte [34258,34262]
                Dimension [34262,34264]
            VariableDeclarationFragment [34265,34291]
                SimpleName: smallerBuf [34265,34275]
                ArrayCreation [34278,34291]
                    ArrayType [34282,34291]
                        PrimitiveType: byte [34282,34286]
                        Dimension [34286,34291]
                            SimpleName: pos [34287,34290]
        ExpressionStatement [34305,34350]
            MethodInvocation [34305,34349]
                METHOD_INVOCATION_RECEIVER [34305,34311]
                    SimpleName: System [34305,34311]
                SimpleName: arraycopy [34312,34321]
                METHOD_INVOCATION_ARGUMENTS [34322,34348]
                    SimpleName: buf [34322,34325]
                    NumberLiteral: 0 [34327,34328]
                    SimpleName: smallerBuf [34330,34340]
                    NumberLiteral: 0 [34342,34343]
                    SimpleName: pos [34345,34348]
        ExpressionStatement [34363,34380]
            Assignment [34363,34379]
                SimpleName: buf [34363,34366]
                ASSIGNMENT_OPERATOR: = [34367,34368]
                SimpleName: smallerBuf [34369,34379]
to
Block [34404,34468]
at 6
===
insert-tree
---
ReturnStatement [34399,34410]
    SimpleName: buf [34406,34409]
to
Block [34404,34468]
at 7
===
insert-tree
---
ExpressionStatement [35147,35179]
    Assignment [35147,35178]
        SimpleName: chunkSize [35147,35156]
        ASSIGNMENT_OPERATOR: = [35157,35158]
        InfixExpression [35159,35178]
            ParenthesizedExpression [35159,35174]
                InfixExpression [35160,35173]
                    SimpleName: chunkSize [35160,35169]
                    INFIX_EXPRESSION_OPERATOR: / [35170,35171]
                    NumberLiteral: 4 [35172,35173]
            INFIX_EXPRESSION_OPERATOR: * [35175,35176]
            NumberLiteral: 4 [35177,35178]
to
Block [35085,35629]
at 0
===
move-tree
---
VariableDeclarationStatement [29615,29654]
    PrimitiveType: long [29615,29619]
    VariableDeclarationFragment [29620,29653]
        SimpleName: len [29620,29623]
        InfixExpression [29626,29653]
            ParenthesizedExpression [29626,29649]
                InfixExpression [29627,29648]
                    QualifiedName: binaryData.length [29627,29644]
                    INFIX_EXPRESSION_OPERATOR: * [29645,29646]
                    NumberLiteral: 4 [29647,29648]
            INFIX_EXPRESSION_OPERATOR: / [29650,29651]
            NumberLiteral: 3 [29652,29653]
to
Block [35085,35629]
at 1
===
move-tree
---
VariableDeclarationStatement [29663,29682]
    PrimitiveType: long [29663,29667]
    VariableDeclarationFragment [29668,29681]
        SimpleName: mod [29668,29671]
        InfixExpression [29674,29681]
            SimpleName: len [29674,29677]
            INFIX_EXPRESSION_OPERATOR: % [29678,29679]
            NumberLiteral: 4 [29680,29681]
to
Block [35085,35629]
at 2
===
move-tree
---
IfStatement [29691,29744]
    InfixExpression [29695,29703]
        SimpleName: mod [29695,29698]
        INFIX_EXPRESSION_OPERATOR: != [29699,29701]
        NumberLiteral: 0 [29702,29703]
    Block [29705,29744]
        ExpressionStatement [29719,29734]
            Assignment [29719,29733]
                SimpleName: len [29719,29722]
                ASSIGNMENT_OPERATOR: += [29723,29725]
                InfixExpression [29726,29733]
                    NumberLiteral: 4 [29726,29727]
                    INFIX_EXPRESSION_OPERATOR: - [29728,29729]
                    SimpleName: mod [29730,29733]
to
Block [35085,35629]
at 3
===
move-tree
---
IfStatement [29753,30007]
    SimpleName: isChunked [29757,29766]
    Block [29768,30007]
        VariableDeclarationStatement [29782,29833]
            PrimitiveType: boolean [29782,29789]
            VariableDeclarationFragment [29790,29832]
                SimpleName: lenChunksPerfectly [29790,29808]
                InfixExpression [29811,29832]
                    InfixExpression [29811,29827]
                        SimpleName: len [29811,29814]
                        INFIX_EXPRESSION_OPERATOR: % [29815,29816]
                        SimpleName: CHUNK_SIZE [29817,29827]
                    INFIX_EXPRESSION_OPERATOR: == [29828,29830]
                    NumberLiteral: 0 [29831,29832]
        ExpressionStatement [29846,29897]
            Assignment [29846,29896]
                SimpleName: len [29846,29849]
                ASSIGNMENT_OPERATOR: += [29850,29852]
                InfixExpression [29853,29896]
                    ParenthesizedExpression [29853,29871]
                        InfixExpression [29854,29870]
                            SimpleName: len [29854,29857]
                            INFIX_EXPRESSION_OPERATOR: / [29858,29859]
                            SimpleName: CHUNK_SIZE [29860,29870]
                    INFIX_EXPRESSION_OPERATOR: * [29872,29873]
                    QualifiedName: CHUNK_SEPARATOR.length [29874,29896]
        IfStatement [29910,29997]
            PrefixExpression [29914,29933]
                PREFIX_EXPRESSION_OPERATOR: ! [29914,29915]
                SimpleName: lenChunksPerfectly [29915,29933]
            Block [29935,29997]
                ExpressionStatement [29953,29983]
                    Assignment [29953,29982]
                        SimpleName: len [29953,29956]
                        ASSIGNMENT_OPERATOR: += [29957,29959]
                        QualifiedName: CHUNK_SEPARATOR.length [29960,29982]
to
Block [35085,35629]
at 4
===
insert-tree
---
ReturnStatement [35612,35623]
    SimpleName: len [35619,35622]
to
Block [35085,35629]
at 5
===
update-node
---
TextElement: Each line of encoded data will be at most of the given length (rounded up to nearest multiple of 4). [10086,10186]
replace Each line of encoded data will be at most of the given length (rounded up to nearest multiple of 4). by Each line of encoded data will be at most of the given length (rounded down to nearest multiple of 4).
===
update-node
---
TextElement: Each line of encoded data will be at most of the given length (rounded up to nearest multiple of 4). [10948,11048]
replace Each line of encoded data will be at most of the given length (rounded up to nearest multiple of 4). by Each line of encoded data will be at most of the given length (rounded down to nearest multiple of 4).
===
update-node
---
TextElement: Each line of encoded data will be at most of the given length (rounded up to nearest multiple of 4). [12078,12178]
replace Each line of encoded data will be at most of the given length (rounded up to nearest multiple of 4). by Each line of encoded data will be at most of the given length (rounded down to nearest multiple of 4).
===
move-tree
---
InstanceofExpression [26493,26518]
    SimpleName: pObject [26493,26500]
    ArrayType [26512,26518]
        PrimitiveType: byte [26512,26516]
        Dimension [26516,26518]
to
IfStatement [26487,26627]
at 0
===
insert-node
---
Block [26550,26606]
to
IfStatement [26487,26627]
at 1
===
insert-tree
---
InfixExpression [27021,27057]
    InfixExpression [27021,27035]
        SimpleName: pArray [27021,27027]
        INFIX_EXPRESSION_OPERATOR: == [27028,27030]
        NullLiteral [27031,27035]
    INFIX_EXPRESSION_OPERATOR: || [27036,27038]
    InfixExpression [27039,27057]
        QualifiedName: pArray.length [27039,27052]
        INFIX_EXPRESSION_OPERATOR: == [27053,27055]
        NumberLiteral: 0 [27056,27057]
to
IfStatement [27017,27097]
at 0
===
insert-node
---
Block [27059,27097]
to
IfStatement [27017,27097]
at 1
===
insert-node
---
PrimitiveType: long [30316,30320]
to
VariableDeclarationStatement [30316,30384]
at 0
===
insert-node
---
VariableDeclarationFragment [30321,30383]
to
VariableDeclarationStatement [30316,30384]
at 1
===
move-tree
---
MethodInvocation [30425,30454]
    METHOD_INVOCATION_RECEIVER [30425,30428]
        SimpleName: b64 [30425,30428]
    SimpleName: encode [30429,30435]
    METHOD_INVOCATION_ARGUMENTS [30436,30453]
        SimpleName: binaryData [30436,30446]
        NumberLiteral: 0 [30448,30449]
        PrefixExpression [30451,30453]
            PREFIX_EXPRESSION_OPERATOR: - [30451,30452]
            NumberLiteral: 1 [30452,30453]
to
ReturnStatement [30769,30799]
at 0
===
move-tree
---
MethodInvocation [31574,31603]
    METHOD_INVOCATION_RECEIVER [31574,31577]
        SimpleName: b64 [31574,31577]
    SimpleName: decode [31578,31584]
    METHOD_INVOCATION_ARGUMENTS [31585,31602]
        SimpleName: base64Data [31585,31595]
        NumberLiteral: 0 [31597,31598]
        PrefixExpression [31600,31602]
            PREFIX_EXPRESSION_OPERATOR: - [31600,31601]
            NumberLiteral: 1 [31601,31602]
to
ReturnStatement [31095,31125]
at 0
===
move-tree
---
MethodInvocation [34421,34461]
    SimpleName: encodeBase64 [34421,34433]
    METHOD_INVOCATION_ARGUMENTS [34434,34460]
        SimpleName: pArray [34434,34440]
        BooleanLiteral: false [34442,34447]
        MethodInvocation [34449,34460]
            SimpleName: isUrlSafe [34449,34458]
to
ExpressionStatement [33834,33867]
at 0
===
insert-tree
---
InfixExpression [35327,35366]
    InfixExpression [35327,35340]
        SimpleName: chunkSize [35327,35336]
        INFIX_EXPRESSION_OPERATOR: > [35337,35338]
        NumberLiteral: 0 [35339,35340]
    INFIX_EXPRESSION_OPERATOR: && [35341,35343]
    InfixExpression [35344,35366]
        SimpleName: chunkSeparator [35344,35358]
        INFIX_EXPRESSION_OPERATOR: != [35359,35361]
        NullLiteral [35362,35366]
to
IfStatement [29753,30007]
at 0
===
move-tree
---
ReturnStatement [26636,26668]
    MethodInvocation [26643,26667]
        SimpleName: decode [26643,26649]
        METHOD_INVOCATION_ARGUMENTS [26650,26666]
            CastExpression [26650,26666]
                ArrayType [26651,26657]
                    PrimitiveType: byte [26651,26655]
                    Dimension [26655,26657]
                SimpleName: pObject [26659,26666]
to
Block [26550,26606]
at 0
===
move-tree
---
ReturnStatement [26967,26995]
    MethodInvocation [26974,26994]
        SimpleName: decodeBase64 [26974,26986]
        METHOD_INVOCATION_ARGUMENTS [26987,26993]
            SimpleName: pArray [26987,26993]
to
Block [27059,27097]
at 0
===
insert-node
---
SimpleName: len [30321,30324]
to
VariableDeclarationFragment [30321,30383]
at 0
===
insert-node
---
MethodInvocation [30327,30383]
to
VariableDeclarationFragment [30321,30383]
at 1
===
update-node
---
SimpleName: encodeBase64 [34421,34433]
replace encodeBase64 by encode
===
move-tree
---
SimpleName: pArray [26987,26993]
to
ReturnStatement [26967,26995]
at 0
===
insert-node
---
SimpleName: getEncodeLength [30327,30342]
to
MethodInvocation [30327,30383]
at 0
===
insert-node
---
METHOD_INVOCATION_ARGUMENTS [30343,30382]
to
MethodInvocation [30327,30383]
at 1
===
insert-node
---
NumberLiteral: 0 [33849,33850]
to
METHOD_INVOCATION_ARGUMENTS [34434,34460]
at 1
===
insert-node
---
QualifiedName: pArray.length [33852,33865]
to
METHOD_INVOCATION_ARGUMENTS [34434,34460]
at 2
===
insert-node
---
SimpleName: binaryData [30343,30353]
to
METHOD_INVOCATION_ARGUMENTS [30343,30382]
at 0
===
insert-node
---
SimpleName: CHUNK_SEPARATOR [30367,30382]
to
METHOD_INVOCATION_ARGUMENTS [30343,30382]
at 1
===
update-node
---
QualifiedName: binaryData.length [29627,29644]
replace binaryData.length by pArray.length
===
update-node
---
QualifiedName: CHUNK_SEPARATOR.length [29874,29896]
replace CHUNK_SEPARATOR.length by chunkSeparator.length
===
update-node
---
SimpleName: StringBytesUtils [13318,13334]
replace StringBytesUtils by StringUtils
===
insert-node
---
SimpleName: chunkSize [35417,35426]
to
InfixExpression [29811,29827]
at 2
===
update-node
---
QualifiedName: CHUNK_SEPARATOR.length [29960,29982]
replace CHUNK_SEPARATOR.length by chunkSeparator.length
===
insert-node
---
SimpleName: chunkSize [35459,35468]
to
InfixExpression [29854,29870]
at 2
===
delete-tree
---
ExpressionStatement [12871,12900]
    Assignment [12871,12899]
        FieldAccess [12871,12886]
            ThisExpression [12871,12875]
            SimpleName: lineLength [12876,12886]
        ASSIGNMENT_OPERATOR: = [12887,12888]
        SimpleName: lineLength [12889,12899]
===
delete-node
---
PREFIX_EXPRESSION_OPERATOR: ! [26491,26492]
===
===
delete-node
---
ParenthesizedExpression [26492,26519]
===
===
delete-node
---
PrefixExpression [26491,26519]
===
===
delete-node
---
SimpleName: decodeBase64 [26974,26986]
===
===
delete-node
---
METHOD_INVOCATION_ARGUMENTS [26987,26993]
===
===
delete-node
---
MethodInvocation [26974,26994]
===
===
delete-node
---
NumberLiteral: 0 [30448,30449]
===
===
delete-tree
---
PrefixExpression [30451,30453]
    PREFIX_EXPRESSION_OPERATOR: - [30451,30452]
    NumberLiteral: 1 [30452,30453]
===
delete-tree
---
VariableDeclarationStatement [30279,30312]
    ArrayType [30279,30285]
        PrimitiveType: byte [30279,30283]
        Dimension [30283,30285]
    VariableDeclarationFragment [30286,30311]
        SimpleName: buf [30286,30289]
        ArrayCreation [30292,30311]
            ArrayType [30296,30311]
                PrimitiveType: byte [30296,30300]
                Dimension [30300,30311]
                    CastExpression [30301,30310]
                        PrimitiveType: int [30302,30305]
                        SimpleName: len [30307,30310]
===
delete-tree
---
ExpressionStatement [30321,30362]
    MethodInvocation [30321,30361]
        METHOD_INVOCATION_RECEIVER [30321,30324]
            SimpleName: b64 [30321,30324]
        SimpleName: setInitialBuffer [30325,30341]
        METHOD_INVOCATION_ARGUMENTS [30342,30360]
            SimpleName: buf [30342,30345]
            NumberLiteral: 0 [30347,30348]
            QualifiedName: buf.length [30350,30360]
===
delete-tree
---
ExpressionStatement [30371,30416]
    MethodInvocation [30371,30415]
        METHOD_INVOCATION_RECEIVER [30371,30374]
            SimpleName: b64 [30371,30374]
        SimpleName: encode [30375,30381]
        METHOD_INVOCATION_ARGUMENTS [30382,30414]
            SimpleName: binaryData [30382,30392]
            NumberLiteral: 0 [30394,30395]
            QualifiedName: binaryData.length [30397,30414]
===
delete-node
---
ExpressionStatement [30425,30455]
===
===
delete-tree
---
IfStatement [30561,30644]
    InfixExpression [30565,30582]
        QualifiedName: b64.buffer [30565,30575]
        INFIX_EXPRESSION_OPERATOR: != [30576,30578]
        SimpleName: buf [30579,30582]
    Block [30584,30644]
        ExpressionStatement [30598,30634]
            MethodInvocation [30598,30633]
                METHOD_INVOCATION_RECEIVER [30598,30601]
                    SimpleName: b64 [30598,30601]
                SimpleName: readResults [30602,30613]
                METHOD_INVOCATION_ARGUMENTS [30614,30632]
                    SimpleName: buf [30614,30617]
                    NumberLiteral: 0 [30619,30620]
                    QualifiedName: buf.length [30622,30632]
===
delete-tree
---
IfStatement [30772,30963]
    InfixExpression [30776,30807]
        SimpleName: urlSafe [30776,30783]
        INFIX_EXPRESSION_OPERATOR: && [30784,30786]
        InfixExpression [30787,30807]
            QualifiedName: b64.pos [30787,30794]
            INFIX_EXPRESSION_OPERATOR: < [30795,30796]
            QualifiedName: buf.length [30797,30807]
    Block [30809,30963]
        VariableDeclarationStatement [30823,30861]
            ArrayType [30823,30829]
                PrimitiveType: byte [30823,30827]
                Dimension [30827,30829]
            VariableDeclarationFragment [30830,30860]
                SimpleName: smallerBuf [30830,30840]
                ArrayCreation [30843,30860]
                    ArrayType [30847,30860]
                        PrimitiveType: byte [30847,30851]
                        Dimension [30851,30860]
                            QualifiedName: b64.pos [30852,30859]
        ExpressionStatement [30874,30923]
            MethodInvocation [30874,30922]
                METHOD_INVOCATION_RECEIVER [30874,30880]
                    SimpleName: System [30874,30880]
                SimpleName: arraycopy [30881,30890]
                METHOD_INVOCATION_ARGUMENTS [30891,30921]
                    SimpleName: buf [30891,30894]
                    NumberLiteral: 0 [30896,30897]
                    SimpleName: smallerBuf [30899,30909]
                    NumberLiteral: 0 [30911,30912]
                    QualifiedName: b64.pos [30914,30921]
        ExpressionStatement [30936,30953]
            Assignment [30936,30952]
                SimpleName: buf [30936,30939]
                ASSIGNMENT_OPERATOR: = [30940,30941]
                SimpleName: smallerBuf [30942,30952]
===
delete-tree
---
ReturnStatement [30972,30983]
    SimpleName: buf [30979,30982]
===
delete-tree
---
IfStatement [31244,31336]
    InfixExpression [31248,31292]
        InfixExpression [31248,31266]
            SimpleName: base64Data [31248,31258]
            INFIX_EXPRESSION_OPERATOR: == [31259,31261]
            NullLiteral [31262,31266]
        INFIX_EXPRESSION_OPERATOR: || [31267,31269]
        InfixExpression [31270,31292]
            QualifiedName: base64Data.length [31270,31287]
            INFIX_EXPRESSION_OPERATOR: == [31288,31290]
            NumberLiteral: 0 [31291,31292]
    Block [31294,31336]
        ReturnStatement [31308,31326]
            SimpleName: base64Data [31315,31325]
===
delete-node
---
NumberLiteral: 0 [31597,31598]
===
===
delete-tree
---
PrefixExpression [31600,31602]
    PREFIX_EXPRESSION_OPERATOR: - [31600,31601]
    NumberLiteral: 1 [31601,31602]
===
delete-tree
---
VariableDeclarationStatement [31380,31419]
    PrimitiveType: long [31380,31384]
    VariableDeclarationFragment [31385,31418]
        SimpleName: len [31385,31388]
        InfixExpression [31391,31418]
            ParenthesizedExpression [31391,31414]
                InfixExpression [31392,31413]
                    QualifiedName: base64Data.length [31392,31409]
                    INFIX_EXPRESSION_OPERATOR: * [31410,31411]
                    NumberLiteral: 3 [31412,31413]
            INFIX_EXPRESSION_OPERATOR: / [31415,31416]
            NumberLiteral: 4 [31417,31418]
===
delete-tree
---
VariableDeclarationStatement [31428,31461]
    ArrayType [31428,31434]
        PrimitiveType: byte [31428,31432]
        Dimension [31432,31434]
    VariableDeclarationFragment [31435,31460]
        SimpleName: buf [31435,31438]
        ArrayCreation [31441,31460]
            ArrayType [31445,31460]
                PrimitiveType: byte [31445,31449]
                Dimension [31449,31460]
                    CastExpression [31450,31459]
                        PrimitiveType: int [31451,31454]
                        SimpleName: len [31456,31459]
===
delete-tree
---
ExpressionStatement [31470,31511]
    MethodInvocation [31470,31510]
        METHOD_INVOCATION_RECEIVER [31470,31473]
            SimpleName: b64 [31470,31473]
        SimpleName: setInitialBuffer [31474,31490]
        METHOD_INVOCATION_ARGUMENTS [31491,31509]
            SimpleName: buf [31491,31494]
            NumberLiteral: 0 [31496,31497]
            QualifiedName: buf.length [31499,31509]
===
delete-tree
---
ExpressionStatement [31520,31565]
    MethodInvocation [31520,31564]
        METHOD_INVOCATION_RECEIVER [31520,31523]
            SimpleName: b64 [31520,31523]
        SimpleName: decode [31524,31530]
        METHOD_INVOCATION_ARGUMENTS [31531,31563]
            SimpleName: base64Data [31531,31541]
            NumberLiteral: 0 [31543,31544]
            QualifiedName: base64Data.length [31546,31563]
===
delete-node
---
ExpressionStatement [31574,31604]
===
===
delete-tree
---
VariableDeclarationStatement [31756,31790]
    ArrayType [31756,31762]
        PrimitiveType: byte [31756,31760]
        Dimension [31760,31762]
    VariableDeclarationFragment [31763,31789]
        SimpleName: result [31763,31769]
        ArrayCreation [31772,31789]
            ArrayType [31776,31789]
                PrimitiveType: byte [31776,31780]
                Dimension [31780,31789]
                    QualifiedName: b64.pos [31781,31788]
===
delete-tree
---
ExpressionStatement [31799,31841]
    MethodInvocation [31799,31840]
        METHOD_INVOCATION_RECEIVER [31799,31802]
            SimpleName: b64 [31799,31802]
        SimpleName: readResults [31803,31814]
        METHOD_INVOCATION_ARGUMENTS [31815,31839]
            SimpleName: result [31815,31821]
            NumberLiteral: 0 [31823,31824]
            QualifiedName: result.length [31826,31839]
===
delete-tree
---
ReturnStatement [31850,31864]
    SimpleName: result [31857,31863]
===
delete-node
---
BooleanLiteral: false [34442,34447]
===
===
delete-tree
---
MethodInvocation [34449,34460]
    SimpleName: isUrlSafe [34449,34458]
===
delete-node
---
ReturnStatement [34414,34462]
===
===
delete-node
---
SimpleName: isChunked [29757,29766]
===
===
multi-move-tree
---
SingleVariableDeclaration [29334,29351]
    ArrayType [29334,29340]
        PrimitiveType: byte [29334,29338]
        Dimension [29338,29340]
    SimpleName: binaryData [29341,29351]
to
SingleVariableDeclaration [30130,30147]
at -1
===
multi-move-tree
---
SingleVariableDeclaration [29334,29351]
    ArrayType [29334,29340]
        PrimitiveType: byte [29334,29338]
        Dimension [29338,29340]
    SimpleName: binaryData [29341,29351]
to
SingleVariableDeclaration [35032,35045]
at -1
===
multi-move-tree
---
SimpleName: binaryData [29341,29351]
to
SimpleName: pArray [35039,35045]
at -1
===
multi-move-tree
---
SimpleName: binaryData [29341,29351]
to
SimpleName: binaryData [30137,30147]
at -1
===
multi-move-tree
---
SimpleName: CHUNK_SIZE [29817,29827]
to
SimpleName: CHUNK_SIZE [30355,30365]
at -1
===
multi-move-tree
---
SimpleName: CHUNK_SIZE [29860,29870]
to
SimpleName: CHUNK_SIZE [30355,30365]
at -1
