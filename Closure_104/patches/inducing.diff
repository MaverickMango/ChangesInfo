diff --git a/javadoc/com/google/javascript/rhino/jstype/UnionType.html b/javadoc/com/google/javascript/rhino/jstype/UnionType.html
index 77d0073..793b24d 100644
--- a/javadoc/com/google/javascript/rhino/jstype/UnionType.html
+++ b/javadoc/com/google/javascript/rhino/jstype/UnionType.html
@@ -232,14 +232,6 @@
 <TR BGCOLOR="white" CLASS="TableRowColor">
 <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
 <CODE>&nbsp;<A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html" title="class in com.google.javascript.rhino.jstype">JSType</A></CODE></FONT></TD>
-<TD><CODE><B><A HREF="../../../../../com/google/javascript/rhino/jstype/UnionType.html#getGreatestSubtype(com.google.javascript.rhino.jstype.JSType)">getGreatestSubtype</A></B>(<A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html" title="class in com.google.javascript.rhino.jstype">JSType</A>&nbsp;that)</CODE>
-
-<BR>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets the greatest subtype of <code>this</code> and <code>that</code>.</TD>
-</TR>
-<TR BGCOLOR="white" CLASS="TableRowColor">
-<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
-<CODE>&nbsp;<A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html" title="class in com.google.javascript.rhino.jstype">JSType</A></CODE></FONT></TD>
 <TD><CODE><B><A HREF="../../../../../com/google/javascript/rhino/jstype/UnionType.html#getLeastSupertype(com.google.javascript.rhino.jstype.JSType)">getLeastSupertype</A></B>(<A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html" title="class in com.google.javascript.rhino.jstype">JSType</A>&nbsp;that)</CODE>
 
 <BR>
@@ -425,7 +417,7 @@
 <TH ALIGN="left"><B>Methods inherited from class com.google.javascript.rhino.jstype.<A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html" title="class in com.google.javascript.rhino.jstype">JSType</A></B></TH>
 </TR>
 <TR BGCOLOR="white" CLASS="TableRowColor">
-<TD><CODE><A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html#autoboxesTo()">autoboxesTo</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html#canTestForEqualityWith(com.google.javascript.rhino.jstype.JSType)">canTestForEqualityWith</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html#canTestForShallowEqualityWith(com.google.javascript.rhino.jstype.JSType)">canTestForShallowEqualityWith</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html#clearResolved()">clearResolved</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html#dereference()">dereference</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html#differsFrom(com.google.javascript.rhino.jstype.JSType)">differsFrom</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html#getJSDocInfo()">getJSDocInfo</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html#getTypesUnderShallowEquality(com.google.javascript.rhino.jstype.JSType)">getTypesUnderShallowEquality</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html#isAllType()">isAllType</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html#isArrayType()">isArrayType</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html#isBooleanObjectType()">isBooleanObjectType</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html#isBooleanValueType()">isBooleanValueType</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html#isCheckedUnknownType()">isCheckedUnknownType</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html#isConstructor()">isConstructor</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html#isDateType()">isDateType</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html#isEmptyType()">isEmptyType</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html#isEnumElementType()">isEnumElementType</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html#isEnumType()">isEnumType</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html#isFunctionPrototypeType()">isFunctionPrototypeType</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html#isFunctionType()">isFunctionType</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html#isInstanceType()">isInstanceType</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html#isInterface()">isInterface</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html#isNamedType()">isNamedType</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html#isNominalType()">isNominalType</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html#isNoObjectType()">isNoObjectType</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html#isNoType()">isNoType</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html#isNullType()">isNullType</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html#isNumber()">isNumber</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html#isNumberObjectType()">isNumberObjectType</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html#isNumberValueType()">isNumberValueType</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html#isOrdinaryFunction()">isOrdinaryFunction</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html#isRecordType()">isRecordType</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html#isRegexpType()">isRegexpType</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html#isResolved()">isResolved</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html#isString()">isString</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html#isStringObjectType()">isStringObjectType</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html#isStringValueType()">isStringValueType</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html#isTemplateType()">isTemplateType</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html#isVoidType()">isVoidType</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html#matchesInt32Context()">matchesInt32Context</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html#matchesUint32Context()">matchesUint32Context</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html#resolve(com.google.javascript.rhino.ErrorReporter, com.google.javascript.rhino.jstype.StaticScope)">resolve</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html#toObjectType()">toObjectType</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html#unboxesTo()">unboxesTo</A></CODE></TD>
+<TD><CODE><A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html#autoboxesTo()">autoboxesTo</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html#canTestForEqualityWith(com.google.javascript.rhino.jstype.JSType)">canTestForEqualityWith</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html#canTestForShallowEqualityWith(com.google.javascript.rhino.jstype.JSType)">canTestForShallowEqualityWith</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html#clearResolved()">clearResolved</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html#dereference()">dereference</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html#differsFrom(com.google.javascript.rhino.jstype.JSType)">differsFrom</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html#getGreatestSubtype(com.google.javascript.rhino.jstype.JSType)">getGreatestSubtype</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html#getJSDocInfo()">getJSDocInfo</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html#getTypesUnderShallowEquality(com.google.javascript.rhino.jstype.JSType)">getTypesUnderShallowEquality</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html#isAllType()">isAllType</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html#isArrayType()">isArrayType</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html#isBooleanObjectType()">isBooleanObjectType</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html#isBooleanValueType()">isBooleanValueType</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html#isCheckedUnknownType()">isCheckedUnknownType</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html#isConstructor()">isConstructor</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html#isDateType()">isDateType</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html#isEmptyType()">isEmptyType</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html#isEnumElementType()">isEnumElementType</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html#isEnumType()">isEnumType</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html#isFunctionPrototypeType()">isFunctionPrototypeType</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html#isFunctionType()">isFunctionType</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html#isInstanceType()">isInstanceType</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html#isInterface()">isInterface</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html#isNamedType()">isNamedType</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html#isNominalType()">isNominalType</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html#isNoObjectType()">isNoObjectType</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html#isNoType()">isNoType</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html#isNullType()">isNullType</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html#isNumber()">isNumber</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html#isNumberObjectType()">isNumberObjectType</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html#isNumberValueType()">isNumberValueType</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html#isOrdinaryFunction()">isOrdinaryFunction</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html#isRecordType()">isRecordType</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html#isRegexpType()">isRegexpType</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html#isResolved()">isResolved</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html#isString()">isString</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html#isStringObjectType()">isStringObjectType</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html#isStringValueType()">isStringValueType</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html#isTemplateType()">isTemplateType</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html#isVoidType()">isVoidType</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html#matchesInt32Context()">matchesInt32Context</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html#matchesUint32Context()">matchesUint32Context</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html#resolve(com.google.javascript.rhino.ErrorReporter, com.google.javascript.rhino.jstype.StaticScope)">resolve</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html#toObjectType()">toObjectType</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html#unboxesTo()">unboxesTo</A></CODE></TD>
 </TR>
 </TABLE>
 &nbsp;<A NAME="methods_inherited_from_class_java.lang.Object"><!-- --></A>
@@ -721,32 +713,6 @@
 </DL>
 <HR>
 
-<A NAME="getGreatestSubtype(com.google.javascript.rhino.jstype.JSType)"><!-- --></A><H3>
-getGreatestSubtype</H3>
-<PRE>
-public <A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html" title="class in com.google.javascript.rhino.jstype">JSType</A> <B>getGreatestSubtype</B>(<A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html" title="class in com.google.javascript.rhino.jstype">JSType</A>&nbsp;that)</PRE>
-<DL>
-<DD><B>Description copied from class: <CODE><A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html#getGreatestSubtype(com.google.javascript.rhino.jstype.JSType)">JSType</A></CODE></B></DD>
-<DD>Gets the greatest subtype of <code>this</code> and <code>that</code>.
- The greatest subtype is the meet (&#8743;) or infimum of both types in the
- type lattice.<p>
- Examples
- <ul>
- <li><code>Number &amp;#8743; Any</code> = <code>Any</code></li>
- <li><code>number &amp;#8743; Object</code> = <code>Any</code></li>
- <li><code>Number &amp;#8743; Object</code> = <code>Number</code></li>
- </ul>
-<P>
-<DD><DL>
-<DT><B>Overrides:</B><DD><CODE><A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html#getGreatestSubtype(com.google.javascript.rhino.jstype.JSType)">getGreatestSubtype</A></CODE> in class <CODE><A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html" title="class in com.google.javascript.rhino.jstype">JSType</A></CODE></DL>
-</DD>
-<DD><DL>
-
-<DT><B>Returns:</B><DD><code>this &amp;#8744; that</code></DL>
-</DD>
-</DL>
-<HR>
-
 <A NAME="equals(java.lang.Object)"><!-- --></A><H3>
 equals</H3>
 <PRE>
diff --git a/javadoc/index-all.html b/javadoc/index-all.html
index 201fa5b..a2c958b 100644
--- a/javadoc/index-all.html
+++ b/javadoc/index-all.html
@@ -2604,9 +2604,6 @@
 <DT><A HREF="./com/google/javascript/rhino/jstype/RecordType.html#getGreatestSubtype(com.google.javascript.rhino.jstype.JSType)"><B>getGreatestSubtype(JSType)</B></A> - 
 Method in class com.google.javascript.rhino.jstype.<A HREF="./com/google/javascript/rhino/jstype/RecordType.html" title="class in com.google.javascript.rhino.jstype">RecordType</A>
 <DD>&nbsp;
-<DT><A HREF="./com/google/javascript/rhino/jstype/UnionType.html#getGreatestSubtype(com.google.javascript.rhino.jstype.JSType)"><B>getGreatestSubtype(JSType)</B></A> - 
-Method in class com.google.javascript.rhino.jstype.<A HREF="./com/google/javascript/rhino/jstype/UnionType.html" title="class in com.google.javascript.rhino.jstype">UnionType</A>
-<DD>&nbsp;
 <DT><A HREF="./com/google/javascript/rhino/jstype/UnknownType.html#getGreatestSubtype(com.google.javascript.rhino.jstype.JSType)"><B>getGreatestSubtype(JSType)</B></A> - 
 Method in class com.google.javascript.rhino.jstype.<A HREF="./com/google/javascript/rhino/jstype/UnknownType.html" title="class in com.google.javascript.rhino.jstype">UnknownType</A>
 <DD>&nbsp;
diff --git a/lib/google_common_deploy.jar b/lib/google_common_deploy.jar
index 4044f8e..e4cb250 100755
--- a/lib/google_common_deploy.jar
+++ b/lib/google_common_deploy.jar
Binary files differ
diff --git a/src/com/google/javascript/rhino/jstype/JSType.java b/src/com/google/javascript/rhino/jstype/JSType.java
index 3e7896c..d841f2c 100644
--- a/src/com/google/javascript/rhino/jstype/JSType.java
+++ b/src/com/google/javascript/rhino/jstype/JSType.java
@@ -588,6 +588,10 @@
       return thisType;
     } else if (thatType.isSubtype(thisType)) {
       return thatType;
+    } else if (thisType.isUnionType()) {
+      return ((UnionType) thisType).meet(thatType);
+    } else if (thatType.isUnionType()) {
+      return ((UnionType) thatType).meet(thisType);
     } else if (thisType.isObject() && thatType.isObject()) {
       return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
     }
diff --git a/src/com/google/javascript/rhino/jstype/UnionType.java b/src/com/google/javascript/rhino/jstype/UnionType.java
index d0bda12..c200b64 100644
--- a/src/com/google/javascript/rhino/jstype/UnionType.java
+++ b/src/com/google/javascript/rhino/jstype/UnionType.java
@@ -271,28 +271,31 @@
     return getLeastSupertype(this, that);
   }
 
-  @Override
-  public JSType getGreatestSubtype(JSType that) {
-    if (that instanceof UnionType) {
-      return meet((UnionType) that);
-    }
-    return getGreatestSubtype(this, that);
-  }
-
-  private JSType meet(UnionType that) {
+  JSType meet(JSType that) {
     UnionTypeBuilder builder = new UnionTypeBuilder(registry);
     for (JSType alternate : alternates) {
       if (alternate.isSubtype(that)) {
         builder.addAlternate(alternate);
       }
     }
-    for (JSType otherAlternate : that.alternates) {
-      if (otherAlternate.isSubtype(this)) {
-        builder.addAlternate(otherAlternate);
+
+    if (that instanceof UnionType) {
+      for (JSType otherAlternate : ((UnionType) that).alternates) {
+        if (otherAlternate.isSubtype(this)) {
+          builder.addAlternate(otherAlternate);
+        }
       }
+    } else if (that.isSubtype(this)) {
+      builder.addAlternate(that);
     }
     JSType result = builder.build();
-    return result == null ? getNativeType(JSTypeNative.NO_TYPE) : result;
+    if (result != null) {
+      return result;
+    } else if (this.isObject() && that.isObject()) {
+      return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
+    } else {
+      return getNativeType(JSTypeNative.NO_TYPE);
+    }
   }
 
   /**
diff --git a/test/com/google/javascript/rhino/jstype/JSTypeTest.java b/test/com/google/javascript/rhino/jstype/JSTypeTest.java
index 3e9a2d9..f399f97 100644
--- a/test/com/google/javascript/rhino/jstype/JSTypeTest.java
+++ b/test/com/google/javascript/rhino/jstype/JSTypeTest.java
@@ -3381,52 +3381,6 @@
     assertEquals(STRING_OBJECT_FUNCTION_TYPE, stringEnum.getConstructor());
   }
 
-  /**
-   * Tests the behavior of variants type.
-   */
-  @SuppressWarnings("checked")
-      public void testUnionType() throws Exception {
-    UnionType nullOrString =
-        (UnionType) createUnionType(NULL_TYPE, STRING_OBJECT_TYPE);
-    UnionType stringOrNull =
-        (UnionType) createUnionType(STRING_OBJECT_TYPE, NULL_TYPE);
-
-    assertEquals(nullOrString, stringOrNull);
-    assertEquals(stringOrNull, nullOrString);
-
-    assertTypeCanAssignToItself(createUnionType(VOID_TYPE, NUMBER_TYPE));
-    assertTypeCanAssignToItself(
-        createUnionType(NUMBER_TYPE, STRING_TYPE, OBJECT_TYPE));
-    assertTypeCanAssignToItself(createUnionType(NUMBER_TYPE, BOOLEAN_TYPE));
-    assertTypeCanAssignToItself(createUnionType(VOID_TYPE));
-
-    UnionType nullOrUnknown =
-        (UnionType) createUnionType(NULL_TYPE, unresolvedNamedType);
-    assertTrue(nullOrUnknown.isUnknownType());
-    assertEquals(nullOrUnknown, NULL_TYPE.getLeastSupertype(nullOrUnknown));
-    assertEquals(nullOrUnknown, nullOrUnknown.getLeastSupertype(NULL_TYPE));
-    assertEquals(UNKNOWN_TYPE,
-        NULL_TYPE.getGreatestSubtype(nullOrUnknown));
-    assertEquals(UNKNOWN_TYPE,
-        nullOrUnknown.getGreatestSubtype(NULL_TYPE));
-
-    assertTrue(NULL_TYPE.differsFrom(nullOrUnknown));
-    assertTrue(nullOrUnknown.differsFrom(NULL_TYPE));
-    assertFalse(nullOrUnknown.differsFrom(unresolvedNamedType));
-
-    assertTrue(NULL_TYPE.isSubtype(nullOrUnknown));
-    assertTrue(unresolvedNamedType.isSubtype(nullOrUnknown));
-    assertTrue(nullOrUnknown.isSubtype(NULL_TYPE));
-
-    assertEquals(unresolvedNamedType,
-        nullOrUnknown.restrictByNotNullOrUndefined());
-
-    // findPropertyType
-    assertEquals(NUMBER_TYPE, nullOrString.findPropertyType("length"));
-    assertEquals(null, nullOrString.findPropertyType("lengthx"));
-
-    Asserts.assertResolvesToSame(nullOrString);
-  }
 
   /**
    * Tests object types.
@@ -3752,7 +3706,7 @@
    * special corner cases.
    */
   @SuppressWarnings("checked")
-      public void testCanTestForEqualityWithCornerCases() {
+  public void testCanTestForEqualityWithCornerCases() {
     // null == undefined is always true
     assertFalse(NULL_TYPE.canTestForEqualityWith(VOID_TYPE));
 
@@ -4059,54 +4013,6 @@
   }
 
   /**
-   * Tests subtyping of union types.
-   */
-  public void testSubtypingUnionTypes() throws Exception {
-    // subtypes
-    assertTrue(BOOLEAN_TYPE.
-        isSubtype(createUnionType(BOOLEAN_TYPE, STRING_TYPE)));
-    assertTrue(createUnionType(BOOLEAN_TYPE, STRING_TYPE).
-        isSubtype(createUnionType(BOOLEAN_TYPE, STRING_TYPE)));
-    assertTrue(createUnionType(BOOLEAN_TYPE, STRING_TYPE).
-        isSubtype(createUnionType(BOOLEAN_TYPE, STRING_TYPE, NULL_TYPE)));
-    assertTrue(createUnionType(BOOLEAN_TYPE, STRING_TYPE).
-        isSubtype(createUnionType(BOOLEAN_TYPE, STRING_TYPE, NULL_TYPE)));
-    assertTrue(createUnionType(BOOLEAN_TYPE).
-        isSubtype(createUnionType(BOOLEAN_TYPE, STRING_TYPE, NULL_TYPE)));
-    assertTrue(createUnionType(STRING_TYPE).
-        isSubtype(createUnionType(BOOLEAN_TYPE, STRING_TYPE, NULL_TYPE)));
-    assertTrue(createUnionType(STRING_TYPE, NULL_TYPE).isSubtype(ALL_TYPE));
-    assertTrue(createUnionType(DATE_TYPE, REGEXP_TYPE).isSubtype(OBJECT_TYPE));
-    assertTrue(createUnionType(URI_ERROR_TYPE, EVAL_ERROR_TYPE).
-        isSubtype(ERROR_TYPE));
-    assertTrue(createUnionType(URI_ERROR_TYPE, EVAL_ERROR_TYPE).
-        isSubtype(OBJECT_TYPE));
-
-    // not subtypes
-    assertFalse(createUnionType(STRING_TYPE, NULL_TYPE).isSubtype(NO_TYPE));
-    assertFalse(createUnionType(STRING_TYPE, NULL_TYPE).
-        isSubtype(NO_OBJECT_TYPE));
-    assertFalse(createUnionType(NO_OBJECT_TYPE, NULL_TYPE).
-        isSubtype(OBJECT_TYPE));
-
-    // defined unions
-    assertTrue(NUMBER_TYPE.isSubtype(OBJECT_NUMBER_STRING));
-    assertTrue(OBJECT_TYPE.isSubtype(OBJECT_NUMBER_STRING));
-    assertTrue(STRING_TYPE.isSubtype(OBJECT_NUMBER_STRING));
-    assertTrue(NO_OBJECT_TYPE.isSubtype(OBJECT_NUMBER_STRING));
-
-    assertTrue(NUMBER_TYPE.isSubtype(NUMBER_STRING_BOOLEAN));
-    assertTrue(BOOLEAN_TYPE.isSubtype(NUMBER_STRING_BOOLEAN));
-    assertTrue(STRING_TYPE.isSubtype(NUMBER_STRING_BOOLEAN));
-
-    assertTrue(NUMBER_TYPE.isSubtype(OBJECT_NUMBER_STRING_BOOLEAN));
-    assertTrue(OBJECT_TYPE.isSubtype(OBJECT_NUMBER_STRING_BOOLEAN));
-    assertTrue(STRING_TYPE.isSubtype(OBJECT_NUMBER_STRING_BOOLEAN));
-    assertTrue(BOOLEAN_TYPE.isSubtype(OBJECT_NUMBER_STRING_BOOLEAN));
-    assertTrue(NO_OBJECT_TYPE.isSubtype(OBJECT_NUMBER_STRING_BOOLEAN));
-  }
-
-  /**
    * Tests that the Object type is the greatest element (top) of the object
    * hierarchy.
    */
@@ -4574,42 +4480,6 @@
   }
 
   /**
-   * Tests {@link JSType#getGreatestSubtype(JSType)} on union types.
-   */
-  public void testGreatestSubtypeUnionTypes1() {
-    assertEquals(NULL_TYPE, createNullableType(STRING_TYPE).getGreatestSubtype(
-            createNullableType(NUMBER_TYPE)));
-  }
-
-  /**
-   * Tests {@link JSType#getGreatestSubtype(JSType)} on union types.
-   */
-  @SuppressWarnings("checked")
-      public void testGreatestSubtypeUnionTypes2() {
-    UnionType evalUriError =
-        (UnionType) createUnionType(EVAL_ERROR_TYPE, URI_ERROR_TYPE);
-    assertEquals(evalUriError,
-        evalUriError.getGreatestSubtype(ERROR_TYPE));
-  }
-
-  /**
-   * Tests {@link JSType#getGreatestSubtype(JSType)} on union types.
-   */
-  @SuppressWarnings("checked")
-      public void testGreatestSubtypeUnionTypes3() {
-    // (number,undefined,null)
-    UnionType nullableOptionalNumber =
-        (UnionType) createUnionType(NULL_TYPE, VOID_TYPE, NUMBER_TYPE);
-    // (null,undefined)
-    UnionType nullUndefined =
-        (UnionType) createUnionType(VOID_TYPE, NULL_TYPE);
-    assertEquals(nullUndefined,
-        nullUndefined.getGreatestSubtype(nullableOptionalNumber));
-    assertEquals(nullUndefined,
-        nullableOptionalNumber.getGreatestSubtype(nullUndefined));
-  }
-
-  /**
    * Tests that a derived class extending a type via a named type is a subtype
    * of it.
    */
@@ -4835,44 +4705,6 @@
   }
 
   /**
-   * Tests that special union types can assign to other types.  Unions
-   * containing the unknown type should be able to assign to any other
-   * type.
-   */
-  @SuppressWarnings("checked")
-      public void testSpecialUnionCanAssignTo() throws Exception {
-    // autoboxing quirks
-    UnionType numbers =
-        (UnionType) createUnionType(NUMBER_TYPE, NUMBER_OBJECT_TYPE);
-    assertFalse(numbers.canAssignTo(NUMBER_TYPE));
-    assertFalse(numbers.canAssignTo(NUMBER_OBJECT_TYPE));
-    assertFalse(numbers.canAssignTo(EVAL_ERROR_TYPE));
-
-    UnionType strings =
-        (UnionType) createUnionType(STRING_OBJECT_TYPE, STRING_TYPE);
-    assertFalse(strings.canAssignTo(STRING_TYPE));
-    assertFalse(strings.canAssignTo(STRING_OBJECT_TYPE));
-    assertFalse(strings.canAssignTo(DATE_TYPE));
-
-    UnionType booleans =
-        (UnionType) createUnionType(BOOLEAN_OBJECT_TYPE, BOOLEAN_TYPE);
-    assertFalse(booleans.canAssignTo(BOOLEAN_TYPE));
-    assertFalse(booleans.canAssignTo(BOOLEAN_OBJECT_TYPE));
-    assertFalse(booleans.canAssignTo(REGEXP_TYPE));
-
-    // unknown quirks
-    JSType unknown = createUnionType(UNKNOWN_TYPE, DATE_TYPE);
-    assertTrue(unknown.canAssignTo(STRING_TYPE));
-
-    // all members need to be assignable to
-    UnionType stringDate =
-        (UnionType) createUnionType(STRING_OBJECT_TYPE, DATE_TYPE);
-    assertTrue(stringDate.canAssignTo(OBJECT_TYPE));
-    assertFalse(stringDate.canAssignTo(STRING_OBJECT_TYPE));
-    assertFalse(stringDate.canAssignTo(DATE_TYPE));
-  }
-
-  /**
    * Tests the behavior of
    * {@link JSType#getRestrictedTypeGivenToBooleanOutcome(boolean)}.
    */
@@ -4987,6 +4819,20 @@
         registry.getGreatestSubtypeWithProperty(derived2, "propz"));
   }
 
+  /**
+   * Tests {@link JSTypeRegistry#getGreatestSubtypeWithProperty(JSType)}.
+   */
+  public void testGreatestSubtypeWithProperty() {
+    ObjectType foo = registry.createObjectType("foo", null, OBJECT_TYPE);
+    ObjectType bar = registry.createObjectType("bar", null, namedGoogBar);
+
+    foo.defineDeclaredProperty("propz", UNKNOWN_TYPE, false);
+    bar.defineDeclaredProperty("propz", UNKNOWN_TYPE, false);
+
+    assertEquals(bar,
+        registry.getGreatestSubtypeWithProperty(namedGoogBar, "propz"));
+  }
+
   public void testGoodSetPrototypeBasedOn() {
     FunctionType fun = registry.createConstructorType("fun", null, null, null);
     fun.setPrototypeBasedOn(unresolvedNamedType);
@@ -5074,7 +4920,7 @@
   }
 
   @SuppressWarnings("checked")
-      public void testGetTypesUnderInequality1() {
+  public void testGetTypesUnderInequality1() {
     // objects can be not equal to numbers
     UnionType numberObject =
         (UnionType) createUnionType(NUMBER_TYPE, OBJECT_TYPE);
@@ -5087,7 +4933,7 @@
   }
 
   @SuppressWarnings("checked")
-      public void testGetTypesUnderInequality2() {
+  public void testGetTypesUnderInequality2() {
     // null == undefined
     UnionType nullUndefined =
         (UnionType) createUnionType(VOID_TYPE, NULL_TYPE);
@@ -5100,7 +4946,7 @@
   }
 
   @SuppressWarnings("checked")
-      public void testGetTypesUnderInequality3() {
+  public void testGetTypesUnderInequality3() {
     // (number,string)
     UnionType stringNumber =
         (UnionType) createUnionType(NUMBER_TYPE, STRING_TYPE);
@@ -5113,7 +4959,7 @@
   }
 
   @SuppressWarnings("checked")
-      public void testGetTypesUnderInequality4() throws Exception {
+  public void testGetTypesUnderInequality4() throws Exception {
     // (number,undefined,null) and null
     UnionType nullableOptionalNumber =
         (UnionType) createUnionType(NULL_TYPE, VOID_TYPE, NUMBER_TYPE);
@@ -5151,27 +4997,6 @@
   }
 
   /**
-   * Tests the factory method
-   * {@link JSTypeRegistry#createUnionType(JSType...)}.
-   */
-  @SuppressWarnings("checked")
-      public void testCreateUnionType() throws Exception {
-    // number
-    UnionType optNumber =
-        (UnionType) registry.createUnionType(NUMBER_TYPE, DATE_TYPE);
-    assertTrue(optNumber.contains(NUMBER_TYPE));
-    assertTrue(optNumber.contains(DATE_TYPE));
-
-    // union
-    UnionType optUnion =
-        (UnionType) registry.createUnionType(REGEXP_TYPE,
-            registry.createUnionType(STRING_OBJECT_TYPE, DATE_TYPE));
-    assertTrue(optUnion.contains(DATE_TYPE));
-    assertTrue(optUnion.contains(STRING_OBJECT_TYPE));
-    assertTrue(optUnion.contains(REGEXP_TYPE));
-  }
-
-  /**
    * Tests the factory method {@link JSTypeRegistry#createOptionalType(JSType)}.
    */
   public void testCreateOptionalType() throws Exception {
@@ -5229,7 +5054,7 @@
    * Tests {@code (U2U_CONSTRUCTOR,undefined) <: (U2U_CONSTRUCTOR,undefined)}.
    */
   @SuppressWarnings("checked")
-      public void testBug903110() throws Exception {
+  public void testBug903110() throws Exception {
     UnionType union =
         (UnionType) createUnionType(U2U_CONSTRUCTOR_TYPE, VOID_TYPE);
     assertTrue(VOID_TYPE.isSubtype(union));
@@ -5247,10 +5072,6 @@
         isSubtype(createOptionalType(U2U_CONSTRUCTOR_TYPE)));
   }
 
-  public void testUnionWithUnknown() throws Exception {
-    assertTrue(createUnionType(UNKNOWN_TYPE, NULL_TYPE).isUnknownType());
-  }
-
   /**
    * Assert that a type can assign to itself.
    */
diff --git a/test/com/google/javascript/rhino/jstype/UnionTypeTest.java b/test/com/google/javascript/rhino/jstype/UnionTypeTest.java
new file mode 100644
index 0000000..2dc4818
--- /dev/null
+++ b/test/com/google/javascript/rhino/jstype/UnionTypeTest.java
@@ -0,0 +1,277 @@
+/*
+ *
+ * ***** BEGIN LICENSE BLOCK *****
+ * Version: MPL 1.1/GPL 2.0
+ *
+ * The contents of this file are subject to the Mozilla Public License Version
+ * 1.1 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ * http://www.mozilla.org/MPL/
+ *
+ * Software distributed under the License is distributed on an "AS IS" basis,
+ * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
+ * for the specific language governing rights and limitations under the
+ * License.
+ *
+ * The Original Code is Rhino code, released
+ * May 6, 1999.
+ *
+ * The Initial Developer of the Original Code is
+ * Netscape Communications Corporation.
+ * Portions created by the Initial Developer are Copyright (C) 1997-1999
+ * the Initial Developer. All Rights Reserved.
+ *
+ * Contributor(s):
+ *   Nick Santos
+ *
+ * Alternatively, the contents of this file may be used under the terms of
+ * the GNU General Public License Version 2 or later (the "GPL"), in which
+ * case the provisions of the GPL are applicable instead of those above. If
+ * you wish to allow use of your version of this file only under the terms of
+ * the GPL and not to allow others to use your version of this file under the
+ * MPL, indicate your decision by deleting the provisions above and replacing
+ * them with the notice and other provisions required by the GPL. If you do
+ * not delete the provisions above, a recipient may use your version of this
+ * file under either the MPL or the GPL.
+ *
+ * ***** END LICENSE BLOCK ***** */
+
+package com.google.javascript.rhino.jstype;
+
+import com.google.javascript.rhino.testing.BaseJSTypeTestCase;
+import com.google.javascript.rhino.testing.Asserts;
+
+public class UnionTypeTest extends BaseJSTypeTestCase {
+  private NamedType unresolvedNamedType;
+
+  @Override
+  public void setUp() throws Exception {
+    super.setUp();
+    unresolvedNamedType =
+        new NamedType(registry, "not.resolved.named.type", null, -1, -1);
+  }
+
+  /**
+   * Assert that a type can assign to itself.
+   */
+  private void assertTypeCanAssignToItself(JSType type) {
+    assertTrue(type.canAssignTo(type));
+  }
+
+  /**
+   * Tests the behavior of variants type.
+   */
+  @SuppressWarnings("checked")
+      public void testUnionType() throws Exception {
+    UnionType nullOrString =
+        (UnionType) createUnionType(NULL_TYPE, STRING_OBJECT_TYPE);
+    UnionType stringOrNull =
+        (UnionType) createUnionType(STRING_OBJECT_TYPE, NULL_TYPE);
+
+    assertEquals(nullOrString, stringOrNull);
+    assertEquals(stringOrNull, nullOrString);
+
+    assertTypeCanAssignToItself(createUnionType(VOID_TYPE, NUMBER_TYPE));
+    assertTypeCanAssignToItself(
+        createUnionType(NUMBER_TYPE, STRING_TYPE, OBJECT_TYPE));
+    assertTypeCanAssignToItself(createUnionType(NUMBER_TYPE, BOOLEAN_TYPE));
+    assertTypeCanAssignToItself(createUnionType(VOID_TYPE));
+
+    UnionType nullOrUnknown =
+        (UnionType) createUnionType(NULL_TYPE, unresolvedNamedType);
+    assertTrue(nullOrUnknown.isUnknownType());
+    assertEquals(nullOrUnknown, NULL_TYPE.getLeastSupertype(nullOrUnknown));
+    assertEquals(nullOrUnknown, nullOrUnknown.getLeastSupertype(NULL_TYPE));
+    assertEquals(UNKNOWN_TYPE,
+        NULL_TYPE.getGreatestSubtype(nullOrUnknown));
+    assertEquals(UNKNOWN_TYPE,
+        nullOrUnknown.getGreatestSubtype(NULL_TYPE));
+
+    assertTrue(NULL_TYPE.differsFrom(nullOrUnknown));
+    assertTrue(nullOrUnknown.differsFrom(NULL_TYPE));
+    assertFalse(nullOrUnknown.differsFrom(unresolvedNamedType));
+
+    assertTrue(NULL_TYPE.isSubtype(nullOrUnknown));
+    assertTrue(unresolvedNamedType.isSubtype(nullOrUnknown));
+    assertTrue(nullOrUnknown.isSubtype(NULL_TYPE));
+
+    assertEquals(unresolvedNamedType,
+        nullOrUnknown.restrictByNotNullOrUndefined());
+
+    // findPropertyType
+    assertEquals(NUMBER_TYPE, nullOrString.findPropertyType("length"));
+    assertEquals(null, nullOrString.findPropertyType("lengthx"));
+
+    Asserts.assertResolvesToSame(nullOrString);
+  }
+
+  /**
+   * Tests {@link JSType#getGreatestSubtype(JSType)} on union types.
+   */
+  public void testGreatestSubtypeUnionTypes1() {
+    assertEquals(NULL_TYPE, createNullableType(STRING_TYPE).getGreatestSubtype(
+            createNullableType(NUMBER_TYPE)));
+  }
+
+  /**
+   * Tests {@link JSType#getGreatestSubtype(JSType)} on union types.
+   */
+  @SuppressWarnings("checked")
+  public void testGreatestSubtypeUnionTypes2() {
+    UnionType evalUriError =
+        (UnionType) createUnionType(EVAL_ERROR_TYPE, URI_ERROR_TYPE);
+    assertEquals(evalUriError,
+        evalUriError.getGreatestSubtype(ERROR_TYPE));
+  }
+
+  /**
+   * Tests {@link JSType#getGreatestSubtype(JSType)} on union types.
+   */
+  @SuppressWarnings("checked")
+  public void testGreatestSubtypeUnionTypes3() {
+    // (number,undefined,null)
+    UnionType nullableOptionalNumber =
+        (UnionType) createUnionType(NULL_TYPE, VOID_TYPE, NUMBER_TYPE);
+    // (null,undefined)
+    UnionType nullUndefined =
+        (UnionType) createUnionType(VOID_TYPE, NULL_TYPE);
+    assertEquals(nullUndefined,
+        nullUndefined.getGreatestSubtype(nullableOptionalNumber));
+    assertEquals(nullUndefined,
+        nullableOptionalNumber.getGreatestSubtype(nullUndefined));
+  }
+
+  /**
+   * Tests {@link JSType#getGreatestSubtype(JSType)} on union types.
+   */
+  public void testGreatestSubtypeUnionTypes4() throws Exception {
+    UnionType numStr = (UnionType) createUnionType(
+        NULL_TYPE, EVAL_ERROR_TYPE, URI_ERROR_TYPE);
+    assertEquals(createUnionType(EVAL_ERROR_TYPE, URI_ERROR_TYPE),
+        numStr.getGreatestSubtype(ERROR_TYPE));
+  }
+
+  /**
+   * Tests subtyping of union types.
+   */
+  public void testSubtypingUnionTypes() throws Exception {
+    // subtypes
+    assertTrue(BOOLEAN_TYPE.
+        isSubtype(createUnionType(BOOLEAN_TYPE, STRING_TYPE)));
+    assertTrue(createUnionType(BOOLEAN_TYPE, STRING_TYPE).
+        isSubtype(createUnionType(BOOLEAN_TYPE, STRING_TYPE)));
+    assertTrue(createUnionType(BOOLEAN_TYPE, STRING_TYPE).
+        isSubtype(createUnionType(BOOLEAN_TYPE, STRING_TYPE, NULL_TYPE)));
+    assertTrue(createUnionType(BOOLEAN_TYPE, STRING_TYPE).
+        isSubtype(createUnionType(BOOLEAN_TYPE, STRING_TYPE, NULL_TYPE)));
+    assertTrue(createUnionType(BOOLEAN_TYPE).
+        isSubtype(createUnionType(BOOLEAN_TYPE, STRING_TYPE, NULL_TYPE)));
+    assertTrue(createUnionType(STRING_TYPE).
+        isSubtype(createUnionType(BOOLEAN_TYPE, STRING_TYPE, NULL_TYPE)));
+    assertTrue(createUnionType(STRING_TYPE, NULL_TYPE).isSubtype(ALL_TYPE));
+    assertTrue(createUnionType(DATE_TYPE, REGEXP_TYPE).isSubtype(OBJECT_TYPE));
+    assertTrue(createUnionType(URI_ERROR_TYPE, EVAL_ERROR_TYPE).
+        isSubtype(ERROR_TYPE));
+    assertTrue(createUnionType(URI_ERROR_TYPE, EVAL_ERROR_TYPE).
+        isSubtype(OBJECT_TYPE));
+
+    // not subtypes
+    assertFalse(createUnionType(STRING_TYPE, NULL_TYPE).isSubtype(NO_TYPE));
+    assertFalse(createUnionType(STRING_TYPE, NULL_TYPE).
+        isSubtype(NO_OBJECT_TYPE));
+    assertFalse(createUnionType(NO_OBJECT_TYPE, NULL_TYPE).
+        isSubtype(OBJECT_TYPE));
+
+    // defined unions
+    assertTrue(NUMBER_TYPE.isSubtype(OBJECT_NUMBER_STRING));
+    assertTrue(OBJECT_TYPE.isSubtype(OBJECT_NUMBER_STRING));
+    assertTrue(STRING_TYPE.isSubtype(OBJECT_NUMBER_STRING));
+    assertTrue(NO_OBJECT_TYPE.isSubtype(OBJECT_NUMBER_STRING));
+
+    assertTrue(NUMBER_TYPE.isSubtype(NUMBER_STRING_BOOLEAN));
+    assertTrue(BOOLEAN_TYPE.isSubtype(NUMBER_STRING_BOOLEAN));
+    assertTrue(STRING_TYPE.isSubtype(NUMBER_STRING_BOOLEAN));
+
+    assertTrue(NUMBER_TYPE.isSubtype(OBJECT_NUMBER_STRING_BOOLEAN));
+    assertTrue(OBJECT_TYPE.isSubtype(OBJECT_NUMBER_STRING_BOOLEAN));
+    assertTrue(STRING_TYPE.isSubtype(OBJECT_NUMBER_STRING_BOOLEAN));
+    assertTrue(BOOLEAN_TYPE.isSubtype(OBJECT_NUMBER_STRING_BOOLEAN));
+    assertTrue(NO_OBJECT_TYPE.isSubtype(OBJECT_NUMBER_STRING_BOOLEAN));
+  }
+
+  /**
+   * Tests that special union types can assign to other types.  Unions
+   * containing the unknown type should be able to assign to any other
+   * type.
+   */
+  @SuppressWarnings("checked")
+  public void testSpecialUnionCanAssignTo() throws Exception {
+    // autoboxing quirks
+    UnionType numbers =
+        (UnionType) createUnionType(NUMBER_TYPE, NUMBER_OBJECT_TYPE);
+    assertFalse(numbers.canAssignTo(NUMBER_TYPE));
+    assertFalse(numbers.canAssignTo(NUMBER_OBJECT_TYPE));
+    assertFalse(numbers.canAssignTo(EVAL_ERROR_TYPE));
+
+    UnionType strings =
+        (UnionType) createUnionType(STRING_OBJECT_TYPE, STRING_TYPE);
+    assertFalse(strings.canAssignTo(STRING_TYPE));
+    assertFalse(strings.canAssignTo(STRING_OBJECT_TYPE));
+    assertFalse(strings.canAssignTo(DATE_TYPE));
+
+    UnionType booleans =
+        (UnionType) createUnionType(BOOLEAN_OBJECT_TYPE, BOOLEAN_TYPE);
+    assertFalse(booleans.canAssignTo(BOOLEAN_TYPE));
+    assertFalse(booleans.canAssignTo(BOOLEAN_OBJECT_TYPE));
+    assertFalse(booleans.canAssignTo(REGEXP_TYPE));
+
+    // unknown quirks
+    JSType unknown = createUnionType(UNKNOWN_TYPE, DATE_TYPE);
+    assertTrue(unknown.canAssignTo(STRING_TYPE));
+
+    // all members need to be assignable to
+    UnionType stringDate =
+        (UnionType) createUnionType(STRING_OBJECT_TYPE, DATE_TYPE);
+    assertTrue(stringDate.canAssignTo(OBJECT_TYPE));
+    assertFalse(stringDate.canAssignTo(STRING_OBJECT_TYPE));
+    assertFalse(stringDate.canAssignTo(DATE_TYPE));
+  }
+
+  /**
+   * Tests the factory method
+   * {@link JSTypeRegistry#createUnionType(JSType...)}.
+   */
+  @SuppressWarnings("checked")
+  public void testCreateUnionType() throws Exception {
+    // number
+    UnionType optNumber =
+        (UnionType) registry.createUnionType(NUMBER_TYPE, DATE_TYPE);
+    assertTrue(optNumber.contains(NUMBER_TYPE));
+    assertTrue(optNumber.contains(DATE_TYPE));
+
+    // union
+    UnionType optUnion =
+        (UnionType) registry.createUnionType(REGEXP_TYPE,
+            registry.createUnionType(STRING_OBJECT_TYPE, DATE_TYPE));
+    assertTrue(optUnion.contains(DATE_TYPE));
+    assertTrue(optUnion.contains(STRING_OBJECT_TYPE));
+    assertTrue(optUnion.contains(REGEXP_TYPE));
+  }
+
+
+  public void testUnionWithUnknown() throws Exception {
+    assertTrue(createUnionType(UNKNOWN_TYPE, NULL_TYPE).isUnknownType());
+  }
+
+  public void testGetRestrictedUnion1() throws Exception {
+    UnionType numStr = (UnionType) createUnionType(NUMBER_TYPE, STRING_TYPE);
+    assertEquals(STRING_TYPE, numStr.getRestrictedUnion(NUMBER_TYPE));
+  }
+
+  public void testGetRestrictedUnion2() throws Exception {
+    UnionType numStr = (UnionType) createUnionType(
+        NULL_TYPE, EVAL_ERROR_TYPE, URI_ERROR_TYPE);
+    assertEquals(NULL_TYPE, numStr.getRestrictedUnion(ERROR_TYPE));
+  }
+
+}
