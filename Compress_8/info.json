{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "data/changesInfo/",
  "timeoutSecond": 300,
  "proj": "Compress",
  "id": "8",
  "workingDir": "../bugs/Compress_8_buggy",
  "inducingCommit": "46ad24db76c6f65480736006c2da8b8e5bf8ee25",
  "originalCommit": "726f6f25c5474a6ca67915c9e1e5684a049b520c",
  "bug_name": "Compress_8",
  "derive": "defects4j",
  "original_fixing_commit": "35e4e4fb6848ddfa3878270523f3f9336ae7f9b8",
  "buildFiles_changed": false,
  "inducing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java",
        "src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "TarArchiveEntry",
            "setName",
            "getUserName",
            "setUserId",
            "setUserName",
            "parseTarHeader",
            "getModTime",
            "isGNULongNameEntry",
            "setModTime",
            "equals",
            "TarArchiveEntry",
            "getMode",
            "setSize",
            "setMode",
            "getUserId",
            "getGroupID",
            "TarArchiveEntry",
            "getFile",
            "getSize",
            "getCheckSum",
            "TarArchiveEntry",
            "setGroupName",
            "setModTime",
            "setGroupId",
            "isDescendent",
            "writeEntryHeader",
            "setUserID",
            "getGroupName",
            "TarArchiveEntry",
            "getDirectoryEntries",
            "setGroupID",
            "getName",
            "getUserID",
            "getGroupId",
            "isDirectory"
          ],
          "num": 35
        },
        {
          "qualified_names": [
            "setIds",
            "equals",
            "TarArchiveEntry",
            "setUserName",
            "TarArchiveEntry",
            "setName",
            "getDirectoryEntries",
            "isDescendent",
            "getGroupName",
            "isGNULongNameEntry",
            "setModTime",
            "setUserId",
            "parseTarHeader",
            "setMode",
            "setGroupId",
            "setModTime",
            "setSize",
            "TarArchiveEntry",
            "getModTime",
            "getFile",
            "getMode",
            "getUserId",
            "setNames",
            "writeEntryHeader",
            "TarArchiveEntry",
            "getSize",
            "getLinkName",
            "TarArchiveEntry",
            "equals",
            "setGroupName",
            "getName",
            "hashCode",
            "getGroupId",
            "getUserName",
            "isDirectory"
          ],
          "num": 35
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "28",
            "29",
            "30",
            "32",
            "33",
            "34",
            "35",
            "36",
            "37",
            "38",
            "39",
            "40",
            "41",
            "42",
            "43",
            "44",
            "45",
            "46",
            "47",
            "48",
            "49",
            "68",
            "69",
            "70",
            "71",
            "72",
            "74",
            "75",
            "76",
            "77",
            "79",
            "80",
            "81",
            "82",
            "84",
            "85",
            "86",
            "87",
            "89",
            "90",
            "91",
            "92",
            "94",
            "95",
            "96",
            "97",
            "99",
            "100",
            "101",
            "102",
            "104",
            "105",
            "106",
            "107",
            "109",
            "110",
            "111",
            "112",
            "114",
            "115",
            "116",
            "117",
            "119",
            "120",
            "121",
            "122",
            "124",
            "125",
            "126",
            "127",
            "129",
            "131",
            "132",
            "133",
            "134",
            "136",
            "137",
            "138",
            "139",
            "141",
            "142",
            "143",
            "144",
            "146",
            "147",
            "148",
            "149",
            "150",
            "151",
            "152",
            "153",
            "154",
            "156",
            "158",
            "159",
            "160",
            "161",
            "162",
            "163",
            "164",
            "165",
            "166",
            "167",
            "168",
            "169",
            "170",
            "171",
            "172",
            "173",
            "174",
            "175",
            "176",
            "177",
            "178",
            "179",
            "180",
            "181",
            "182",
            "183",
            "184",
            "185",
            "186",
            "187",
            "188",
            "189",
            "190",
            "191",
            "192",
            "193",
            "194",
            "195",
            "196",
            "197",
            "198",
            "199",
            "200",
            "201",
            "202",
            "203",
            "204",
            "205",
            "206",
            "207",
            "208",
            "209",
            "210",
            "211",
            "212",
            "213",
            "214",
            "215",
            "216",
            "217",
            "218",
            "219",
            "220",
            "221",
            "222",
            "223",
            "224",
            "225",
            "226",
            "227",
            "228",
            "229",
            "230",
            "231",
            "232",
            "233",
            "234",
            "235",
            "236",
            "237",
            "238",
            "239",
            "240",
            "241",
            "242",
            "243",
            "244",
            "245",
            "246",
            "247",
            "248",
            "249",
            "250",
            "251",
            "252",
            "253",
            "254",
            "255",
            "256",
            "257",
            "258",
            "259",
            "260",
            "261",
            "262",
            "263",
            "264",
            "265",
            "270",
            "271",
            "272",
            "273",
            "274",
            "276",
            "277",
            "278",
            "279",
            "282",
            "283",
            "287",
            "289",
            "291",
            "292",
            "293",
            "297",
            "299",
            "300",
            "301",
            "303",
            "304",
            "305",
            "309",
            "311",
            "313",
            "314",
            "315",
            "316",
            "318",
            "319",
            "320",
            "321",
            "322",
            "323",
            "324",
            "325",
            "326",
            "327",
            "329",
            "330",
            "331",
            "332",
            "333",
            "334",
            "335",
            "336",
            "337",
            "339",
            "340",
            "341",
            "342",
            "343",
            "344",
            "345",
            "346",
            "347",
            "349",
            "350",
            "351",
            "352",
            "353",
            "354",
            "355",
            "356",
            "357",
            "359",
            "360",
            "361",
            "362",
            "363",
            "364",
            "365",
            "366",
            "367",
            "369",
            "370",
            "371",
            "372",
            "373",
            "374",
            "375",
            "376",
            "377",
            "378",
            "379",
            "380",
            "381",
            "382",
            "383",
            "384",
            "385",
            "386",
            "387",
            "388",
            "389",
            "390",
            "391",
            "392",
            "393",
            "394",
            "395",
            "396",
            "397",
            "398",
            "399",
            "400",
            "401",
            "402",
            "403",
            "404",
            "405",
            "406",
            "407",
            "408",
            "409",
            "410",
            "411",
            "414",
            "415",
            "417",
            "418",
            "419",
            "422",
            "426",
            "428",
            "430",
            "431",
            "432",
            "436",
            "438",
            "439",
            "440",
            "442",
            "443",
            "444",
            "448",
            "450",
            "452",
            "453",
            "454",
            "458",
            "460",
            "462",
            "463",
            "464",
            "468",
            "470",
            "472",
            "473",
            "474",
            "475",
            "476",
            "477",
            "478",
            "479",
            "480",
            "481",
            "482",
            "483",
            "484",
            "492",
            "493",
            "494",
            "498",
            "500",
            "502",
            "503",
            "504",
            "508",
            "510",
            "512",
            "513",
            "514",
            "518",
            "520",
            "521",
            "522",
            "524",
            "525",
            "526",
            "534",
            "535",
            "536",
            "544",
            "545",
            "546",
            "550",
            "551",
            "552",
            "554",
            "555",
            "557",
            "558",
            "559",
            "567",
            "568",
            "569",
            "570",
            "571",
            "574",
            "575",
            "579",
            "580",
            "588",
            "590",
            "592",
            "593",
            "594",
            "595",
            "599",
            "600",
            "602",
            "603",
            "605",
            "606",
            "607",
            "615",
            "616",
            "619",
            "621",
            "622",
            "623",
            "624",
            "625",
            "626",
            "627",
            "628",
            "629",
            "630",
            "631",
            "632",
            "633",
            "634",
            "636",
            "637",
            "638",
            "639",
            "640",
            "641",
            "642",
            "643",
            "644",
            "645",
            "646",
            "647",
            "648",
            "649",
            "650",
            "651",
            "652",
            "653",
            "654",
            "655",
            "656",
            "657",
            "658",
            "659",
            "660",
            "661",
            "662",
            "663",
            "664",
            "665",
            "666",
            "667",
            "668",
            "669",
            "670",
            "671",
            "672",
            "673",
            "674",
            "675",
            "676",
            "677",
            "678",
            "679",
            "680",
            "681",
            "682",
            "683"
          ],
          "num": 483
        },
        {
          "qualified_names": [
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "35",
            "36",
            "37",
            "38",
            "39",
            "40",
            "41",
            "42",
            "43",
            "44",
            "45",
            "46",
            "47",
            "48",
            "49",
            "50",
            "51",
            "53",
            "54",
            "55",
            "73",
            "76",
            "77",
            "78",
            "80",
            "81",
            "83",
            "84",
            "86",
            "87",
            "89",
            "90",
            "92",
            "93",
            "95",
            "96",
            "98",
            "99",
            "101",
            "102",
            "104",
            "105",
            "107",
            "108",
            "110",
            "111",
            "113",
            "114",
            "116",
            "117",
            "119",
            "120",
            "122",
            "123",
            "125",
            "126",
            "128",
            "129",
            "134",
            "135",
            "136",
            "137",
            "139",
            "140",
            "141",
            "142",
            "145",
            "146",
            "147",
            "148",
            "149",
            "153",
            "154",
            "156",
            "158",
            "159",
            "160",
            "161",
            "162",
            "163",
            "164",
            "165",
            "166",
            "167",
            "168",
            "169",
            "170",
            "171",
            "172",
            "173",
            "174",
            "175",
            "176",
            "177",
            "181",
            "183",
            "184",
            "186",
            "187",
            "188",
            "192",
            "193",
            "195",
            "197",
            "198",
            "200",
            "202",
            "203",
            "205",
            "207",
            "208",
            "210",
            "211",
            "212",
            "213",
            "215",
            "216",
            "217",
            "218",
            "219",
            "220",
            "221",
            "222",
            "223",
            "224",
            "225",
            "226",
            "229",
            "231",
            "232",
            "233",
            "234",
            "235",
            "238",
            "239",
            "240",
            "241",
            "242",
            "243",
            "244",
            "245",
            "246",
            "247",
            "248",
            "249",
            "250",
            "251",
            "252",
            "253",
            "254",
            "255",
            "256",
            "260",
            "261",
            "263",
            "265",
            "266",
            "267",
            "271",
            "272",
            "274",
            "275",
            "277",
            "278",
            "282",
            "283",
            "285",
            "286",
            "288",
            "289",
            "290",
            "291",
            "292",
            "296",
            "298",
            "300",
            "301",
            "305",
            "306",
            "307",
            "309",
            "310",
            "312",
            "313",
            "321",
            "322",
            "326",
            "328",
            "330",
            "331",
            "335",
            "337",
            "339",
            "340",
            "344",
            "346",
            "348",
            "349",
            "357",
            "358",
            "359",
            "360",
            "361",
            "362",
            "363",
            "364",
            "365",
            "366",
            "367",
            "368",
            "369",
            "370",
            "371",
            "372",
            "373",
            "374",
            "375",
            "376",
            "377",
            "378",
            "379",
            "380",
            "381",
            "382",
            "383",
            "384",
            "385",
            "393",
            "394",
            "398",
            "400",
            "402",
            "403",
            "404",
            "405",
            "406",
            "407",
            "408",
            "409",
            "410",
            "411",
            "412",
            "413",
            "414",
            "415",
            "416",
            "417",
            "418",
            "419",
            "420",
            "421",
            "422",
            "423",
            "424",
            "425",
            "426",
            "427",
            "428",
            "429",
            "430",
            "431",
            "432",
            "433",
            "434",
            "435",
            "436",
            "437",
            "438",
            "439",
            "440",
            "441",
            "442",
            "443",
            "444",
            "445",
            "446",
            "447",
            "448",
            "449",
            "450",
            "451",
            "452",
            "453",
            "454",
            "455",
            "456",
            "457",
            "458",
            "459",
            "460",
            "461",
            "462",
            "463",
            "464",
            "465",
            "466",
            "467",
            "468",
            "469",
            "470",
            "471",
            "472",
            "473",
            "474",
            "475",
            "476",
            "477",
            "478",
            "479",
            "480",
            "481",
            "482",
            "483",
            "484",
            "485",
            "486",
            "487",
            "488",
            "489",
            "490",
            "491",
            "492",
            "493",
            "494",
            "495",
            "496",
            "497",
            "498",
            "499",
            "500",
            "501",
            "502",
            "503",
            "504",
            "505",
            "506",
            "507",
            "508",
            "509",
            "510",
            "511",
            "512",
            "513",
            "514",
            "515",
            "516",
            "517",
            "518",
            "526",
            "527",
            "528",
            "531",
            "535",
            "543",
            "544",
            "546",
            "548",
            "549",
            "550",
            "551",
            "552",
            "553",
            "554",
            "555",
            "556",
            "557",
            "558",
            "559",
            "560",
            "564",
            "566",
            "568",
            "569",
            "570",
            "571",
            "572",
            "573",
            "574",
            "575",
            "576",
            "577",
            "578",
            "579",
            "580",
            "581",
            "582",
            "583",
            "584",
            "585",
            "586",
            "587",
            "588",
            "589",
            "590",
            "591",
            "592",
            "593",
            "594",
            "595",
            "596",
            "597",
            "598",
            "606",
            "609",
            "611",
            "612",
            "613",
            "614",
            "615",
            "616",
            "617",
            "618",
            "619",
            "620",
            "621",
            "622",
            "623",
            "625",
            "626",
            "627",
            "628",
            "629",
            "630",
            "631",
            "632",
            "633",
            "636"
          ],
          "num": 434
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java\nindex f580067..4a6491b 100644\n--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java\n@@ -25,28 +25,34 @@\n import org.apache.commons.compress.archivers.ArchiveEntry;\n \n /**\n- * This class represents an entry in a Tar archive. It consists of the entry\u0027s\n- * header, as well as the entry\u0027s File. Entries can be instantiated in one of\n- * three ways, depending on how they are to be used. \u003cp\u003e\n+ * This class represents an entry in a Tar archive. It consists\n+ * of the entry\u0027s header, as well as the entry\u0027s File. Entries\n+ * can be instantiated in one of three ways, depending on how\n+ * they are to be used.\n+ * \u003cp\u003e\n+ * TarEntries that are created from the header bytes read from\n+ * an archive are instantiated with the TarEntry( byte[] )\n+ * constructor. These entries will be used when extracting from\n+ * or listing the contents of an archive. These entries have their\n+ * header filled in using the header bytes. They also set the File\n+ * to null, since they reference an archive entry not a file.\n+ * \u003cp\u003e\n+ * TarEntries that are created from Files that are to be written\n+ * into an archive are instantiated with the TarEntry( File )\n+ * constructor. These entries have their header filled in using\n+ * the File\u0027s information. They also keep a reference to the File\n+ * for convenience when writing entries.\n+ * \u003cp\u003e\n+ * Finally, TarEntries can be constructed from nothing but a name.\n+ * This allows the programmer to construct the entry by hand, for\n+ * instance when only an InputStream is available for writing to\n+ * the archive, and the header information is constructed from\n+ * other information. In this case the header fields are set to\n+ * defaults and the File is set to null.\n  *\n- * TarEntries that are created from the header bytes read from an archive are\n- * instantiated with the TarEntry( byte[] ) constructor. These entries will be\n- * used when extracting from or listing the contents of an archive. These\n- * entries have their header filled in using the header bytes. They also set the\n- * File to null, since they reference an archive entry not a file. \u003cp\u003e\n- *\n- * TarEntries that are created from Files that are to be written into an archive\n- * are instantiated with the TarEntry( File ) constructor. These entries have\n- * their header filled in using the File\u0027s information. They also keep a\n- * reference to the File for convenience when writing entries. \u003cp\u003e\n- *\n- * Finally, TarEntries can be constructed from nothing but a name. This allows\n- * the programmer to construct the entry by hand, for instance when only an\n- * InputStream is available for writing to the archive, and the header\n- * information is constructed from other information. In this case the header\n- * fields are set to defaults and the File is set to null. \u003cp\u003e\n- *\n- * The C structure for a Tar Entry\u0027s header is: \u003cpre\u003e\n+ * \u003cp\u003e\n+ * The C structure for a Tar Entry\u0027s header is:\n+ * \u003cpre\u003e\n  * struct header {\n  * char name[NAMSIZ];\n  * char mode[8];\n@@ -64,424 +70,247 @@\n  * char devminor[8];\n  * } header;\n  * \u003c/pre\u003e\n+ *\n  */\n-public class TarArchiveEntry implements ArchiveEntry {\n-    /**\n-     * The length of the name field in a header buffer.\n-     */\n-    public static final int NAMELEN \u003d 99;\n \n-    /**\n-     * The entry\u0027s modification time.\n-     */\n-    private int m_checkSum;\n+public class TarArchiveEntry implements TarConstants, ArchiveEntry {\n+    /** The entry\u0027s name. */\n+    private StringBuffer name;\n \n-    /**\n-     * The entry\u0027s group name.\n-     */\n-    private int m_devMajor;\n+    /** The entry\u0027s permission mode. */\n+    private int mode;\n \n-    /**\n-     * The entry\u0027s major device number.\n-     */\n-    private int m_devMinor;\n+    /** The entry\u0027s user id. */\n+    private int userId;\n \n-    /**\n-     * The entry\u0027s minor device number.\n-     */\n-    private File m_file;\n+    /** The entry\u0027s group id. */\n+    private int groupId;\n \n-    /**\n-     * The entry\u0027s user id.\n-     */\n-    private int m_groupID;\n+    /** The entry\u0027s size. */\n+    private long size;\n \n-    /**\n-     * The entry\u0027s user name.\n-     */\n-    private StringBuffer m_groupName;\n+    /** The entry\u0027s modification time. */\n+    private long modTime;\n \n-    /**\n-     * The entry\u0027s checksum.\n-     */\n-    private byte m_linkFlag;\n+    /** The entry\u0027s link flag. */\n+    private byte linkFlag;\n \n-    /**\n-     * The entry\u0027s link flag.\n-     */\n-    private StringBuffer m_linkName;\n+    /** The entry\u0027s link name. */\n+    private StringBuffer linkName;\n \n-    /**\n-     * The entry\u0027s link name.\n-     */\n-    private StringBuffer m_magic;\n+    /** The entry\u0027s magic tag. */\n+    private StringBuffer magic;\n \n-    /**\n-     * The entry\u0027s size.\n-     */\n-    private long m_modTime;\n+    /** The entry\u0027s user name. */\n+    private StringBuffer userName;\n \n-    /**\n-     * The entry\u0027s name.\n-     */\n-    private int m_mode;\n+    /** The entry\u0027s group name. */\n+    private StringBuffer groupName;\n \n-    private StringBuffer m_name;\n+    /** The entry\u0027s major device number. */\n+    private int devMajor;\n \n-    /**\n-     * The entry\u0027s group id.\n-     */\n-    private long m_size;\n+    /** The entry\u0027s minor device number. */\n+    private int devMinor;\n \n-    /**\n-     * The entry\u0027s permission mode.\n-     */\n-    private int m_userID;\n+    /** The entry\u0027s file reference */\n+    private File file;\n \n-    /**\n-     * The entry\u0027s magic tag.\n-     */\n-    private StringBuffer m_userName;\n+    /** Maximum length of a user\u0027s name in the tar file */\n+    public static final int MAX_NAMELEN \u003d 31;\n \n-    /**\n-     * Construct an entry with only a name. This allows the programmer to\n-     * construct the entry\u0027s header \"by hand\". File is set to null.\n-     *\n-     * @param name the name of the entry\n-     */\n-    public TarArchiveEntry( final String name )\n-    {\n-        this();\n+    /** Default permissions bits for directories */\n+    public static final int DEFAULT_DIR_MODE \u003d 040755;\n \n-        final boolean isDir \u003d name.endsWith( \"/\" );\n+    /** Default permissions bits for files */\n+    public static final int DEFAULT_FILE_MODE \u003d 0100644;\n \n-        m_name \u003d new StringBuffer( name );\n-        m_mode \u003d isDir ? 040755 : 0100644;\n-        m_linkFlag \u003d isDir ? TarConstants.LF_DIR : TarConstants.LF_NORMAL;\n-        m_modTime \u003d ( new Date() ).getTime() / 1000;\n-        m_linkName \u003d new StringBuffer( \"\" );\n-        m_userName \u003d new StringBuffer( \"\" );\n-        m_groupName \u003d new StringBuffer( \"\" );\n-    }\n-\n-    /**\n-     * Construct an entry with a name an a link flag.\n-     *\n-     * @param name Description of Parameter\n-     * @param linkFlag Description of Parameter\n-     */\n-    public TarArchiveEntry( final String name, final byte linkFlag )\n-    {\n-        this( name );\n-        m_linkFlag \u003d linkFlag;\n-    }\n-\n-    /**\n-     * Construct an entry for a file. File is set to file, and the header is\n-     * constructed from information from the file.\n-     *\n-     * @param file The file that the entry represents.\n-     */\n-    public TarArchiveEntry( final File file )\n-    {\n-        this();\n-\n-        m_file \u003d file;\n-\n-        String name \u003d file.getPath();\n-\n-        // Strip off drive letters!\n-        final String osName \u003d\n-            System.getProperty( \"os.name\" ).toLowerCase( Locale.US );\n-        if( -1 !\u003d osName.indexOf( \"netware\" ) )\n-        {\n-            if( name.length() \u003e 2 )\n-            {\n-                final char ch1 \u003d name.charAt( 0 );\n-                final char ch2 \u003d name.charAt( 1 );\n-\n-                if( ch2 \u003d\u003d \u0027:\u0027 \u0026\u0026\n-                    ( ( ch1 \u003e\u003d \u0027a\u0027 \u0026\u0026 ch1 \u003c\u003d \u0027z\u0027 ) ||\n-                    ( ch1 \u003e\u003d \u0027A\u0027 \u0026\u0026 ch1 \u003c\u003d \u0027Z\u0027 ) ) )\n-                {\n-                    name \u003d name.substring( 2 );\n-                }\n-            }\n-        }\n-        else if( -1 !\u003d osName.indexOf( \"netware\" ) )\n-        {\n-            final int colon \u003d name.indexOf( \u0027:\u0027 );\n-            if( colon !\u003d -1 )\n-            {\n-                name \u003d name.substring( colon + 1 );\n-            }\n-        }\n-\n-        name \u003d name.replace( File.separatorChar, \u0027/\u0027 );\n-\n-        // No absolute pathnames\n-        // Windows (and Posix?) paths can start with \"\\\\NetworkDrive\\\",\n-        // so we loop on starting /\u0027s.\n-        while( name.startsWith( \"/\" ) )\n-        {\n-            name \u003d name.substring( 1 );\n-        }\n-\n-        m_linkName \u003d new StringBuffer( \"\" );\n-        m_name \u003d new StringBuffer( name );\n-\n-        if( file.isDirectory() )\n-        {\n-            m_mode \u003d 040755;\n-            m_linkFlag \u003d TarConstants.LF_DIR;\n-\n-            if( m_name.charAt( m_name.length() - 1 ) !\u003d \u0027/\u0027 )\n-            {\n-                m_name.append( \"/\" );\n-            }\n-        }\n-        else\n-        {\n-            m_mode \u003d 0100644;\n-            m_linkFlag \u003d TarConstants.LF_NORMAL;\n-        }\n-\n-        m_size \u003d file.length();\n-        m_modTime \u003d file.lastModified() / 1000;\n-        m_checkSum \u003d 0;\n-        m_devMajor \u003d 0;\n-        m_devMinor \u003d 0;\n-    }\n-\n-    /**\n-     * Construct an entry from an archive\u0027s header bytes. File is set to null.\n-     *\n-     * @param header The header bytes from a tar archive entry.\n-     */\n-    public TarArchiveEntry( final byte[] header )\n-    {\n-        this();\n-        parseTarHeader( header );\n-    }\n+    /** Convert millis to seconds */\n+    public static final int MILLIS_PER_SECOND \u003d 1000;\n \n     /**\n      * Construct an empty entry and prepares the header values.\n      */\n-    private TarArchiveEntry()\n-    {\n-        m_magic \u003d new StringBuffer( TarConstants.TMAGIC );\n-        m_name \u003d new StringBuffer();\n-        m_linkName \u003d new StringBuffer();\n+    private TarArchiveEntry () {\n+        this.magic \u003d new StringBuffer(TMAGIC);\n+        this.name \u003d new StringBuffer();\n+        this.linkName \u003d new StringBuffer();\n \n-        String user \u003d System.getProperty( \"user.name\", \"\" );\n-        if( user.length() \u003e 31 )\n-        {\n-            user \u003d user.substring( 0, 31 );\n+        String user \u003d System.getProperty(\"user.name\", \"\");\n+\n+        if (user.length() \u003e MAX_NAMELEN) {\n+            user \u003d user.substring(0, MAX_NAMELEN);\n         }\n \n-        m_userName \u003d new StringBuffer( user );\n-        m_groupName \u003d new StringBuffer( \"\" );\n+        this.userId \u003d 0;\n+        this.groupId \u003d 0;\n+        this.userName \u003d new StringBuffer(user);\n+        this.groupName \u003d new StringBuffer(\"\");\n+        this.file \u003d null;\n     }\n \n     /**\n-     * Set this entry\u0027s group id.\n+     * Construct an entry with only a name. This allows the programmer\n+     * to construct the entry\u0027s header \"by hand\". File is set to null.\n      *\n-     * @param groupId This entry\u0027s new group id.\n+     * @param name the entry name\n      */\n-    public void setGroupID( final int groupId )\n-    {\n-        m_groupID \u003d groupId;\n+    public TarArchiveEntry(String name) {\n+        this();\n+\n+        boolean isDir \u003d name.endsWith(\"/\");\n+\n+        this.devMajor \u003d 0;\n+        this.devMinor \u003d 0;\n+        this.name \u003d new StringBuffer(name);\n+        this.mode \u003d isDir ? DEFAULT_DIR_MODE : DEFAULT_FILE_MODE;\n+        this.linkFlag \u003d isDir ? LF_DIR : LF_NORMAL;\n+        this.userId \u003d 0;\n+        this.groupId \u003d 0;\n+        this.size \u003d 0;\n+        this.modTime \u003d (new Date()).getTime() / MILLIS_PER_SECOND;\n+        this.linkName \u003d new StringBuffer(\"\");\n+        this.userName \u003d new StringBuffer(\"\");\n+        this.groupName \u003d new StringBuffer(\"\");\n+        this.devMajor \u003d 0;\n+        this.devMinor \u003d 0;\n+\n     }\n \n     /**\n-     * Set this entry\u0027s group id.\n+     * Construct an entry with a name and a link flag.\n      *\n-     * @param groupId This entry\u0027s new group id.\n-     * @deprecated Use setGroupID() instead\n-     * @see #setGroupID(int)\n+     * @param name the entry name\n+     * @param linkFlag the entry link flag.\n      */\n-    public void setGroupId( final int groupId )\n-    {\n-        m_groupID \u003d groupId;\n+    public TarArchiveEntry(String name, byte linkFlag) {\n+        this(name);\n+        this.linkFlag \u003d linkFlag;\n     }\n \n     /**\n-     * Set this entry\u0027s group name.\n+     * Construct an entry for a file. File is set to file, and the\n+     * header is constructed from information from the file.\n      *\n-     * @param groupName This entry\u0027s new group name.\n+     * @param file The file that the entry represents.\n      */\n-    public void setGroupName( final String groupName )\n-    {\n-        m_groupName \u003d new StringBuffer( groupName );\n-    }\n+    public TarArchiveEntry(File file) {\n+        this();\n \n-    /**\n-     * Set this entry\u0027s modification time. The parameter passed to this method\n-     * is in \"Java time\".\n-     *\n-     * @param time This entry\u0027s new modification time.\n-     */\n-    public void setModTime( final long time )\n-    {\n-        m_modTime \u003d time / 1000;\n-    }\n+        this.file \u003d file;\n \n-    /**\n-     * Set this entry\u0027s modification time.\n-     *\n-     * @param time This entry\u0027s new modification time.\n-     */\n-    public void setModTime( final Date time )\n-    {\n-        m_modTime \u003d time.getTime() / 1000;\n-    }\n+        String fileName \u003d file.getPath();\n+        String osname \u003d System.getProperty(\"os.name\").toLowerCase(Locale.US);\n \n-    /**\n-     * Set the mode for this entry\n-     *\n-     * @param mode The new Mode value\n-     */\n-    public void setMode( final int mode )\n-    {\n-        m_mode \u003d mode;\n-    }\n+        if (osname !\u003d null) {\n \n-    /**\n-     * Set this entry\u0027s name.\n-     *\n-     * @param name This entry\u0027s new name.\n-     */\n-    public void setName( final String name )\n-    {\n-        m_name \u003d new StringBuffer( name );\n-    }\n+            // Strip off drive letters!\n+            // REVIEW Would a better check be \"(File.separator \u003d\u003d \u0027\\\u0027)\"?\n \n-    /**\n-     * Set this entry\u0027s file size.\n-     *\n-     * @param size This entry\u0027s new file size.\n-     */\n-    public void setSize( final long size )\n-    {\n-        m_size \u003d size;\n-    }\n+            if (osname.startsWith(\"windows\")) {\n+                if (fileName.length() \u003e 2) {\n+                    char ch1 \u003d fileName.charAt(0);\n+                    char ch2 \u003d fileName.charAt(1);\n \n-    /**\n-     * Set this entry\u0027s user id.\n-     *\n-     * @param userId This entry\u0027s new user id.\n-     */\n-    public void setUserID( final int userId )\n-    {\n-        m_userID \u003d userId;\n-    }\n-\n-    /**\n-     * Set this entry\u0027s user id.\n-     *\n-     * @param userId This entry\u0027s new user id.\n-     * @deprecated Use setUserID() instead\n-     * @see #setUserID(int)\n-     */\n-    public void setUserId( final int userId )\n-    {\n-        m_userID \u003d userId;\n-    }\n-\n-    /**\n-     * Set this entry\u0027s user name.\n-     *\n-     * @param userName This entry\u0027s new user name.\n-     */\n-    public void setUserName( final String userName )\n-    {\n-        m_userName \u003d new StringBuffer( userName );\n-    }\n-\n-    /**\n-     * If this entry represents a file, and the file is a directory, return an\n-     * array of TarEntries for this entry\u0027s children.\n-     *\n-     * @return An array of TarEntry\u0027s for this entry\u0027s children.\n-     */\n-    public TarArchiveEntry[] getDirectoryEntries()\n-    {\n-        if( null \u003d\u003d m_file || !m_file.isDirectory() )\n-        {\n-            return new TarArchiveEntry[ 0 ];\n+                    if (ch2 \u003d\u003d \u0027:\u0027\n+                            \u0026\u0026 ((ch1 \u003e\u003d \u0027a\u0027 \u0026\u0026 ch1 \u003c\u003d \u0027z\u0027)\n+                                || (ch1 \u003e\u003d \u0027A\u0027 \u0026\u0026 ch1 \u003c\u003d \u0027Z\u0027))) {\n+                        fileName \u003d fileName.substring(2);\n+                    }\n+                }\n+            } else if (osname.indexOf(\"netware\") \u003e -1) {\n+                int colon \u003d fileName.indexOf(\u0027:\u0027);\n+                if (colon !\u003d -1) {\n+                    fileName \u003d fileName.substring(colon + 1);\n+                }\n+            }\n         }\n \n-        final String[] list \u003d m_file.list();\n-        final TarArchiveEntry[] result \u003d new TarArchiveEntry[ list.length ];\n+        fileName \u003d fileName.replace(File.separatorChar, \u0027/\u0027);\n \n-        for( int i \u003d 0; i \u003c list.length; ++i )\n-        {\n-            result[ i ] \u003d new TarArchiveEntry( new File( m_file, list[ i ] ) );\n+        // No absolute pathnames\n+        // Windows (and Posix?) paths can start with \"\\\\NetworkDrive\\\",\n+        // so we loop on starting /\u0027s.\n+        while (fileName.startsWith(\"/\")) {\n+            fileName \u003d fileName.substring(1);\n         }\n \n-        return result;\n+        this.linkName \u003d new StringBuffer(\"\");\n+        this.name \u003d new StringBuffer(fileName);\n+\n+        if (file.isDirectory()) {\n+            this.mode \u003d DEFAULT_DIR_MODE;\n+            this.linkFlag \u003d LF_DIR;\n+\n+            if (this.name.charAt(this.name.length() - 1) !\u003d \u0027/\u0027) {\n+                this.name.append(\"/\");\n+            }\n+        } else {\n+            this.mode \u003d DEFAULT_FILE_MODE;\n+            this.linkFlag \u003d LF_NORMAL;\n+        }\n+\n+        this.size \u003d file.length();\n+        this.modTime \u003d file.lastModified() / MILLIS_PER_SECOND;\n+        this.devMajor \u003d 0;\n+        this.devMinor \u003d 0;\n     }\n \n     /**\n-     * Get this entry\u0027s file.\n+     * Construct an entry from an archive\u0027s header bytes. File is set\n+     * to null.\n      *\n-     * @return This entry\u0027s file.\n+     * @param headerBuf The header bytes from a tar archive entry.\n      */\n-    public File getFile()\n-    {\n-        return m_file;\n+    public TarArchiveEntry(byte[] headerBuf) {\n+        this();\n+        parseTarHeader(headerBuf);\n     }\n \n     /**\n-     * Get this entry\u0027s group id.\n+     * Determine if the two entries are equal. Equality is determined\n+     * by the header names being equal.\n      *\n-     * @return This entry\u0027s group id.\n-     * @deprecated Use getGroupID() instead\n-     * @see #getGroupID()\n+     * @param it Entry to be checked for equality.\n+     * @return True if the entries are equal.\n      */\n-    public int getGroupId()\n-    {\n-        return m_groupID;\n+    public boolean equals(TarArchiveEntry it) {\n+        return getName().equals(it.getName());\n     }\n \n     /**\n-     * Get this entry\u0027s group id.\n+     * Determine if the two entries are equal. Equality is determined\n+     * by the header names being equal.\n      *\n-     * @return This entry\u0027s group id.\n+     * @param it Entry to be checked for equality.\n+     * @return True if the entries are equal.\n      */\n-    public int getGroupID()\n-    {\n-        return m_groupID;\n+    public boolean equals(Object it) {\n+        if (it \u003d\u003d null || getClass() !\u003d it.getClass()) {\n+            return false;\n+        }\n+        return equals((TarArchiveEntry) it);\n     }\n \n     /**\n-     * Get this entry\u0027s group name.\n+     * Hashcodes are based on entry names.\n      *\n-     * @return This entry\u0027s group name.\n+     * @return the entry hashcode\n      */\n-    public String getGroupName()\n-    {\n-        return m_groupName.toString();\n+    public int hashCode() {\n+        return getName().hashCode();\n     }\n \n     /**\n-     * Set this entry\u0027s modification time.\n+     * Determine if the given entry is a descendant of this entry.\n+     * Descendancy is determined by the name of the descendant\n+     * starting with this entry\u0027s name.\n      *\n-     * @return The ModTime value\n+     * @param desc Entry to be checked as a descendent of this.\n+     * @return True if entry is a descendant of this.\n      */\n-    public Date getModTime()\n-    {\n-        return new Date( m_modTime * 1000 );\n-    }\n-\n-    /**\n-     * Get this entry\u0027s mode.\n-     *\n-     * @return This entry\u0027s mode.\n-     */\n-    public int getMode()\n-    {\n-        return m_mode;\n+    public boolean isDescendent(TarArchiveEntry desc) {\n+        return desc.getName().startsWith(getName());\n     }\n \n     /**\n@@ -489,41 +318,35 @@\n      *\n      * @return This entry\u0027s name.\n      */\n-    public String getName()\n-    {\n-        return m_name.toString();\n+    public String getName() {\n+        return name.toString();\n     }\n \n     /**\n-     * Get this entry\u0027s file size.\n+     * Set this entry\u0027s name.\n      *\n-     * @return This entry\u0027s file size.\n+     * @param name This entry\u0027s new name.\n      */\n-    public long getSize()\n-    {\n-        return m_size;\n+    public void setName(String name) {\n+        this.name \u003d new StringBuffer(name);\n     }\n \n     /**\n-     * Get this entry\u0027s checksum.\n+     * Set the mode for this entry\n      *\n-     * @return This entry\u0027s checksum.\n+     * @param mode the mode for this entry\n      */\n-    public int getCheckSum()\n-    {\n-        return m_checkSum;\n+    public void setMode(int mode) {\n+        this.mode \u003d mode;\n     }\n \n     /**\n-     * Get this entry\u0027s user id.\n+     * Get this entry\u0027s link name.\n      *\n-     * @return This entry\u0027s user id.\n-     * @deprecated Use getUserID() instead\n-     * @see #getUserID()\n+     * @return This entry\u0027s link name.\n      */\n-    public int getUserId()\n-    {\n-        return m_userID;\n+    public String getLinkName() {\n+        return linkName.toString();\n     }\n \n     /**\n@@ -531,9 +354,35 @@\n      *\n      * @return This entry\u0027s user id.\n      */\n-    public int getUserID()\n-    {\n-        return m_userID;\n+    public int getUserId() {\n+        return userId;\n+    }\n+\n+    /**\n+     * Set this entry\u0027s user id.\n+     *\n+     * @param userId This entry\u0027s new user id.\n+     */\n+    public void setUserId(int userId) {\n+        this.userId \u003d userId;\n+    }\n+\n+    /**\n+     * Get this entry\u0027s group id.\n+     *\n+     * @return This entry\u0027s group id.\n+     */\n+    public int getGroupId() {\n+        return groupId;\n+    }\n+\n+    /**\n+     * Set this entry\u0027s group id.\n+     *\n+     * @param groupId This entry\u0027s new group id.\n+     */\n+    public void setGroupId(int groupId) {\n+        this.groupId \u003d groupId;\n     }\n \n     /**\n@@ -541,22 +390,132 @@\n      *\n      * @return This entry\u0027s user name.\n      */\n-    public String getUserName()\n-    {\n-        return m_userName.toString();\n+    public String getUserName() {\n+        return userName.toString();\n     }\n \n     /**\n-     * Determine if the given entry is a descendant of this entry. Descendancy\n-     * is determined by the name of the descendant starting with this entry\u0027s\n-     * name.\n+     * Set this entry\u0027s user name.\n      *\n-     * @param desc Entry to be checked as a descendent of\n-     * @return True if entry is a descendant of\n+     * @param userName This entry\u0027s new user name.\n      */\n-    public boolean isDescendent( final TarArchiveEntry desc )\n-    {\n-        return desc.getName().startsWith( getName() );\n+    public void setUserName(String userName) {\n+        this.userName \u003d new StringBuffer(userName);\n+    }\n+\n+    /**\n+     * Get this entry\u0027s group name.\n+     *\n+     * @return This entry\u0027s group name.\n+     */\n+    public String getGroupName() {\n+        return groupName.toString();\n+    }\n+\n+    /**\n+     * Set this entry\u0027s group name.\n+     *\n+     * @param groupName This entry\u0027s new group name.\n+     */\n+    public void setGroupName(String groupName) {\n+        this.groupName \u003d new StringBuffer(groupName);\n+    }\n+\n+    /**\n+     * Convenience method to set this entry\u0027s group and user ids.\n+     *\n+     * @param userId This entry\u0027s new user id.\n+     * @param groupId This entry\u0027s new group id.\n+     */\n+    public void setIds(int userId, int groupId) {\n+        setUserId(userId);\n+        setGroupId(groupId);\n+    }\n+\n+    /**\n+     * Convenience method to set this entry\u0027s group and user names.\n+     *\n+     * @param userName This entry\u0027s new user name.\n+     * @param groupName This entry\u0027s new group name.\n+     */\n+    public void setNames(String userName, String groupName) {\n+        setUserName(userName);\n+        setGroupName(groupName);\n+    }\n+\n+    /**\n+     * Set this entry\u0027s modification time. The parameter passed\n+     * to this method is in \"Java time\".\n+     *\n+     * @param time This entry\u0027s new modification time.\n+     */\n+    public void setModTime(long time) {\n+        modTime \u003d time / MILLIS_PER_SECOND;\n+    }\n+\n+    /**\n+     * Set this entry\u0027s modification time.\n+     *\n+     * @param time This entry\u0027s new modification time.\n+     */\n+    public void setModTime(Date time) {\n+        modTime \u003d time.getTime() / MILLIS_PER_SECOND;\n+    }\n+\n+    /**\n+     * Set this entry\u0027s modification time.\n+     *\n+     * @return time This entry\u0027s new modification time.\n+     */\n+    public Date getModTime() {\n+        return new Date(modTime * MILLIS_PER_SECOND);\n+    }\n+\n+    /**\n+     * Get this entry\u0027s file.\n+     *\n+     * @return This entry\u0027s file.\n+     */\n+    public File getFile() {\n+        return file;\n+    }\n+\n+    /**\n+     * Get this entry\u0027s mode.\n+     *\n+     * @return This entry\u0027s mode.\n+     */\n+    public int getMode() {\n+        return mode;\n+    }\n+\n+    /**\n+     * Get this entry\u0027s file size.\n+     *\n+     * @return This entry\u0027s file size.\n+     */\n+    public long getSize() {\n+        return size;\n+    }\n+\n+    /**\n+     * Set this entry\u0027s file size.\n+     *\n+     * @param size This entry\u0027s new file size.\n+     */\n+    public void setSize(long size) {\n+        this.size \u003d size;\n+    }\n+\n+\n+    /**\n+     * Indicate if this entry is a GNU long name block\n+     *\n+     * @return true if this is a long name extension provided by GNU tar\n+     */\n+    public boolean isGNULongNameEntry() {\n+        return linkFlag \u003d\u003d LF_GNUTYPE_LONGNAME\n+                           \u0026\u0026 name.toString().equals(GNU_LONGLINK);\n     }\n \n     /**\n@@ -564,20 +523,16 @@\n      *\n      * @return True if this entry is a directory.\n      */\n-    public boolean isDirectory()\n-    {\n-        if( m_file !\u003d null )\n-        {\n-            return m_file.isDirectory();\n+    public boolean isDirectory() {\n+        if (file !\u003d null) {\n+            return file.isDirectory();\n         }\n \n-        if( m_linkFlag \u003d\u003d TarConstants.LF_DIR )\n-        {\n+        if (linkFlag \u003d\u003d LF_DIR) {\n             return true;\n         }\n \n-        if( getName().endsWith( \"/\" ) )\n-        {\n+        if (getName().endsWith(\"/\")) {\n             return true;\n         }\n \n@@ -585,26 +540,62 @@\n     }\n \n     /**\n-     * Indicate if this entry is a GNU long name block\n+     * If this entry represents a file, and the file is a directory, return\n+     * an array of TarEntries for this entry\u0027s children.\n      *\n-     * @return true if this is a long name extension provided by GNU tar\n+     * @return An array of TarEntry\u0027s for this entry\u0027s children.\n      */\n-    public boolean isGNULongNameEntry()\n-    {\n-        return m_linkFlag \u003d\u003d TarConstants.LF_GNUTYPE_LONGNAME \u0026\u0026\n-            m_name.toString().equals( TarConstants.GNU_LONGLINK );\n+    public TarArchiveEntry[] getDirectoryEntries() {\n+        if (file \u003d\u003d null || !file.isDirectory()) {\n+            return new TarArchiveEntry[0];\n+        }\n+\n+        String[]   list \u003d file.list();\n+        TarArchiveEntry[] result \u003d new TarArchiveEntry[list.length];\n+\n+        for (int i \u003d 0; i \u003c list.length; ++i) {\n+            result[i] \u003d new TarArchiveEntry(new File(file, list[i]));\n+        }\n+\n+        return result;\n     }\n \n     /**\n-     * Determine if the two entries are equal. Equality is determined by the\n-     * header names being equal.\n+     * Write an entry\u0027s header information to a header buffer.\n      *\n-     * @param other Entry to be checked for equality.\n-     * @return True if the entries are equal.\n+     * @param outbuf The tar entry header buffer to fill in.\n      */\n-    public boolean equals( final TarArchiveEntry other )\n-    {\n-        return getName().equals( other.getName() );\n+    public void writeEntryHeader(byte[] outbuf) {\n+        int offset \u003d 0;\n+\n+        offset \u003d TarUtils.getNameBytes(name, outbuf, offset, NAMELEN);\n+        offset \u003d TarUtils.getOctalBytes(mode, outbuf, offset, MODELEN);\n+        offset \u003d TarUtils.getOctalBytes(userId, outbuf, offset, UIDLEN);\n+        offset \u003d TarUtils.getOctalBytes(groupId, outbuf, offset, GIDLEN);\n+        offset \u003d TarUtils.getLongOctalBytes(size, outbuf, offset, SIZELEN);\n+        offset \u003d TarUtils.getLongOctalBytes(modTime, outbuf, offset, MODTIMELEN);\n+\n+        int csOffset \u003d offset;\n+\n+        for (int c \u003d 0; c \u003c CHKSUMLEN; ++c) {\n+            outbuf[offset++] \u003d (byte) \u0027 \u0027;\n+        }\n+\n+        outbuf[offset++] \u003d linkFlag;\n+        offset \u003d TarUtils.getNameBytes(linkName, outbuf, offset, NAMELEN);\n+        offset \u003d TarUtils.getNameBytes(magic, outbuf, offset, MAGICLEN);\n+        offset \u003d TarUtils.getNameBytes(userName, outbuf, offset, UNAMELEN);\n+        offset \u003d TarUtils.getNameBytes(groupName, outbuf, offset, GNAMELEN);\n+        offset \u003d TarUtils.getOctalBytes(devMajor, outbuf, offset, DEVLEN);\n+        offset \u003d TarUtils.getOctalBytes(devMinor, outbuf, offset, DEVLEN);\n+\n+        while (offset \u003c outbuf.length) {\n+            outbuf[offset++] \u003d 0;\n+        }\n+\n+        long chk \u003d TarUtils.computeCheckSum(outbuf);\n+\n+        TarUtils.getCheckSumOctalBytes(chk, outbuf, csOffset, CHKSUMLEN);\n     }\n \n     /**\n@@ -612,74 +603,34 @@\n      *\n      * @param header The tar entry header buffer to get information from.\n      */\n-    private void parseTarHeader( final byte[] header )\n-    {\n+    public void parseTarHeader(byte[] header) {\n         int offset \u003d 0;\n \n-        m_name \u003d TarUtils.parseName( header, offset, NAMELEN );\n+        name \u003d TarUtils.parseName(header, offset, NAMELEN);\n         offset +\u003d NAMELEN;\n-        m_mode \u003d (int)TarUtils.parseOctal( header, offset, TarConstants.MODELEN );\n-        offset +\u003d TarConstants.MODELEN;\n-        m_userID \u003d (int)TarUtils.parseOctal( header, offset, TarConstants.UIDLEN );\n-        offset +\u003d TarConstants.UIDLEN;\n-        m_groupID \u003d (int)TarUtils.parseOctal( header, offset, TarConstants.GIDLEN );\n-        offset +\u003d TarConstants.GIDLEN;\n-        m_size \u003d TarUtils.parseOctal( header, offset, TarConstants.SIZELEN );\n-        offset +\u003d TarConstants.SIZELEN;\n-        m_modTime \u003d TarUtils.parseOctal( header, offset, TarConstants.MODTIMELEN );\n-        offset +\u003d TarConstants.MODTIMELEN;\n-        m_checkSum \u003d (int)TarUtils.parseOctal( header, offset, TarConstants.CHKSUMLEN );\n-        offset +\u003d TarConstants.CHKSUMLEN;\n-        m_linkFlag \u003d header[ offset++ ];\n-        m_linkName \u003d TarUtils.parseName( header, offset, NAMELEN );\n+        mode \u003d (int) TarUtils.parseOctal(header, offset, MODELEN);\n+        offset +\u003d MODELEN;\n+        userId \u003d (int) TarUtils.parseOctal(header, offset, UIDLEN);\n+        offset +\u003d UIDLEN;\n+        groupId \u003d (int) TarUtils.parseOctal(header, offset, GIDLEN);\n+        offset +\u003d GIDLEN;\n+        size \u003d TarUtils.parseOctal(header, offset, SIZELEN);\n+        offset +\u003d SIZELEN;\n+        modTime \u003d TarUtils.parseOctal(header, offset, MODTIMELEN);\n+        offset +\u003d MODTIMELEN;\n+        offset +\u003d CHKSUMLEN;\n+        linkFlag \u003d header[offset++];\n+        linkName \u003d TarUtils.parseName(header, offset, NAMELEN);\n         offset +\u003d NAMELEN;\n-        m_magic \u003d TarUtils.parseName( header, offset, TarConstants.MAGICLEN );\n-        offset +\u003d TarConstants.MAGICLEN;\n-        m_userName \u003d TarUtils.parseName( header, offset, TarConstants.UNAMELEN );\n-        offset +\u003d TarConstants.UNAMELEN;\n-        m_groupName \u003d TarUtils.parseName( header, offset, TarConstants.GNAMELEN );\n-        offset +\u003d TarConstants.GNAMELEN;\n-        m_devMajor \u003d (int)TarUtils.parseOctal( header, offset, TarConstants.DEVLEN );\n-        offset +\u003d TarConstants.DEVLEN;\n-        m_devMinor \u003d (int)TarUtils.parseOctal( header, offset, TarConstants.DEVLEN );\n-    }\n-\n-    /**\n-     * Write an entry\u0027s header information to a header buffer.\n-     *\n-     * @param buffer The tar entry header buffer to fill in.\n-     */\n-    public void writeEntryHeader( final byte[] buffer )\n-    {\n-        int offset \u003d 0;\n-\n-        offset \u003d TarUtils.getNameBytes( m_name, buffer, offset, NAMELEN );\n-        offset \u003d TarUtils.getOctalBytes( m_mode, buffer, offset, TarConstants.MODELEN );\n-        offset \u003d TarUtils.getOctalBytes( m_userID, buffer, offset, TarConstants.UIDLEN );\n-        offset \u003d TarUtils.getOctalBytes( m_groupID, buffer, offset, TarConstants.GIDLEN );\n-        offset \u003d TarUtils.getLongOctalBytes( m_size, buffer, offset, TarConstants.SIZELEN );\n-        offset \u003d TarUtils.getLongOctalBytes( m_modTime, buffer, offset, TarConstants.MODTIMELEN );\n-\n-        final int checkSumOffset \u003d offset;\n-        for( int i \u003d 0; i \u003c TarConstants.CHKSUMLEN; ++i )\n-        {\n-            buffer[ offset++ ] \u003d (byte)\u0027 \u0027;\n-        }\n-\n-        buffer[ offset++ ] \u003d m_linkFlag;\n-        offset \u003d TarUtils.getNameBytes( m_linkName, buffer, offset, NAMELEN );\n-        offset \u003d TarUtils.getNameBytes( m_magic, buffer, offset, TarConstants.MAGICLEN );\n-        offset \u003d TarUtils.getNameBytes( m_userName, buffer, offset, TarConstants.UNAMELEN );\n-        offset \u003d TarUtils.getNameBytes( m_groupName, buffer, offset, TarConstants.GNAMELEN );\n-        offset \u003d TarUtils.getOctalBytes( m_devMajor, buffer, offset, TarConstants.DEVLEN );\n-        offset \u003d TarUtils.getOctalBytes( m_devMinor, buffer, offset, TarConstants.DEVLEN );\n-\n-        while( offset \u003c buffer.length )\n-        {\n-            buffer[ offset++ ] \u003d 0;\n-        }\n-\n-        final long checkSum \u003d TarUtils.computeCheckSum( buffer );\n-        TarUtils.getCheckSumOctalBytes( checkSum, buffer, checkSumOffset, TarConstants.CHKSUMLEN );\n+        magic \u003d TarUtils.parseName(header, offset, MAGICLEN);\n+        offset +\u003d MAGICLEN;\n+        userName \u003d TarUtils.parseName(header, offset, UNAMELEN);\n+        offset +\u003d UNAMELEN;\n+        groupName \u003d TarUtils.parseName(header, offset, GNAMELEN);\n+        offset +\u003d GNAMELEN;\n+        devMajor \u003d (int) TarUtils.parseOctal(header, offset, DEVLEN);\n+        offset +\u003d DEVLEN;\n+        devMinor \u003d (int) TarUtils.parseOctal(header, offset, DEVLEN);\n     }\n }\n+\n",
      "operations": [
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Javadoc [988,2666]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SimpleType [2708,2720]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldDeclaration [2802,2859]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldDeclaration [3103,3159]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "FieldDeclaration [3648,3748]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "FieldDeclaration [3754,3856]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldDeclaration [3862,3960]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "FieldDeclaration [3966,4052]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [8558,8966]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [8972,9138]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [10082,10250]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [11720,12012]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [12018,12340]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TagElement [995,2659]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [2741,2765]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [2865,2892]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [2922,2950]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [2981,3005]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [3034,3071]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [3165,3194]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [3235,3264]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [3302,3331]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [3372,3402]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [3444,3483]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [3515,3554]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [3586,3619]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [3648,3702]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: public [3707,3713]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: static [3714,3720]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: final [3721,3726]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "PrimitiveType: int [3727,3730]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "VariableDeclarationFragment [3731,3747]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [3754,3801]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: public [3806,3812]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: static [3813,3819]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: final [3820,3825]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "PrimitiveType: int [3826,3829]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "VariableDeclarationFragment [3830,3855]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [3966,3998]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: public [4003,4009]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: static [4010,4016]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: final [4017,4022]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "PrimitiveType: int [4023,4026]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "VariableDeclarationFragment [4027,4051]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Javadoc [9144,9450]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Javadoc [14409,14625]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: This class represents an entry in a Tar archive. It consists [995,1055]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: of the entry\u0027s header, as well as the entry\u0027s File. Entries [1059,1118]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: can be instantiated in one of three ways, depending on how [1122,1180]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: they are to be used. [1184,1204]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003cp\u003e [1208,1211]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: TarEntries that are created from the header bytes read from [1215,1274]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: an archive are instantiated with the TarEntry( byte[] ) [1278,1333]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: constructor. These entries will be used when extracting from [1337,1397]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: or listing the contents of an archive. These entries have their [1401,1464]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: header filled in using the header bytes. They also set the File [1468,1531]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: to null, since they reference an archive entry not a file. [1535,1593]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003cp\u003e [1597,1600]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: TarEntries that are created from Files that are to be written [1604,1665]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: into an archive are instantiated with the TarEntry( File ) [1669,1727]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: constructor. These entries have their header filled in using [1731,1791]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: the File\u0027s information. They also keep a reference to the File [1795,1857]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: for convenience when writing entries. [1861,1898]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003cp\u003e [1902,1905]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: Finally, TarEntries can be constructed from nothing but a name. [1909,1972]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: This allows the programmer to construct the entry by hand, for [1976,2038]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: instance when only an InputStream is available for writing to [2042,2103]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: the archive, and the header information is constructed from [2107,2166]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: other information. In this case the header fields are set to [2170,2230]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: defaults and the File is set to null. [2234,2271]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003cp\u003e [2278,2281]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: The C structure for a Tar Entry\u0027s header is: [2285,2329]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003cpre\u003e [2333,2338]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: MAX_NAMELEN [3731,3742]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: DEFAULT_DIR_MODE [3830,3846]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: MILLIS_PER_SECOND [4027,4044]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [4472,4488]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [4497,4514]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [4618,4635]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [4954,4972]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [4981,4999]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [5170,5186]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [5195,5212]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [5221,5235]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [5450,5468]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [5477,5495]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [7824,7879]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [9155,9317]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [9396,9442]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [14420,14545]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Block [6217,7034]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: to null. [8026,8034]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldAccess [4175,4185]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldAccess [4222,4231]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldAccess [4262,4275]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: MAX_NAMELEN [4387,4398]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldAccess [4523,4536]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldAccess [4571,4585]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldAccess [5008,5017]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldAccess [5052,5061]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldAccess [5118,5131]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldAccess [5244,5256]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldAccess [5311,5324]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldAccess [5357,5370]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldAccess [5403,5417]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldAccess [5745,5758]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldAccess [6049,6058]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: osname [6201,6207]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "NullLiteral [6211,6215]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "IfStatement [6346,7024]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldAccess [7351,7364]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "FieldAccess [7397,7406]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [7743,7769]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldAccess [7789,7798]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldAccess [7888,7901]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldAccess [7915,7928]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldAccess [9865,9874]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldAccess [10053,10062]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldAccess [10555,10566]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldAccess [10896,10908]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldAccess [11265,11278]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldAccess [11663,11677]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldAccess [13640,13649]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: LF_DIR [14255,14261]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: CHKSUMLEN [15783,15792]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: MODELEN [16972,16979]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: UIDLEN [17067,17073]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: GIDLEN [17162,17168]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: SIZELEN [17249,17256]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: MODTIMELEN [17343,17353]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: CHKSUMLEN [17373,17382]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: MAGICLEN [17592,17600]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: UNAMELEN [17685,17693]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: GNAMELEN [17779,17787]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: DEVLEN [17877,17883]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: TMAGIC [4205,4211]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: DEFAULT_DIR_MODE [5072,5088]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: DEFAULT_FILE_MODE [5091,5108]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: LF_DIR [5142,5148]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: LF_NORMAL [5151,5160]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: MILLIS_PER_SECOND [5284,5301]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodInvocation [6350,6378]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "ThisExpression [7397,7401]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: fileName [7426,7434]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: MILLIS_PER_SECOND [12590,12607]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: MILLIS_PER_SECOND [12812,12829]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: MILLIS_PER_SECOND [13025,13042]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: LF_GNUTYPE_LONGNAME [13886,13905]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: CHKSUMLEN [16546,16555]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldAccess [7484,7493]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldAccess [7526,7539]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldAccess [7700,7709]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: GNU_LONGLINK [13959,13971]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: MODELEN [15407,15414]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: UIDLEN [15481,15487]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: GIDLEN [15555,15561]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: SIZELEN [15630,15637]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: MODTIMELEN [15709,15719]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: MAGICLEN [16029,16037]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: UNAMELEN [16105,16113]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: GNAMELEN [16182,16190]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: DEVLEN [16259,16265]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: DEVLEN [16334,16340]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: SIZELEN [17221,17228]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: MODTIMELEN [17312,17322]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: MAGICLEN [17563,17571]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: UNAMELEN [17656,17664]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: GNAMELEN [17750,17758]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: MODELEN [16944,16951]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: UIDLEN [17040,17046]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: GIDLEN [17135,17141]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: DEVLEN [17850,17856]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: DEVLEN [17946,17952]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: MAX_NAMELEN [4439,4450]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldAccess [7567,7576]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldAccess [7634,7643]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldAccess [7584,7593]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: This class represents an entry in a Tar archive. It consists of the entry\u0027s [995,1070]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: header, as well as the entry\u0027s File. Entries can be instantiated in one of [1074,1148]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: three ways, depending on how they are to be used. \u003cp\u003e [1152,1205]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: TarEntries that are created from the header bytes read from an archive are [1212,1286]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: instantiated with the TarEntry( byte[] ) constructor. These entries will be [1290,1365]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: used when extracting from or listing the contents of an archive. These [1369,1439]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: entries have their header filled in using the header bytes. They also set the [1443,1520]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: File to null, since they reference an archive entry not a file. \u003cp\u003e [1524,1591]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: TarEntries that are created from Files that are to be written into an archive [1598,1675]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: are instantiated with the TarEntry( File ) constructor. These entries have [1679,1753]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: their header filled in using the File\u0027s information. They also keep a [1757,1826]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: reference to the File for convenience when writing entries. \u003cp\u003e [1830,1893]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: Finally, TarEntries can be constructed from nothing but a name. This allows [1900,1975]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: the programmer to construct the entry by hand, for instance when only an [1979,2051]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: InputStream is available for writing to the archive, and the header [2055,2122]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: information is constructed from other information. In this case the header [2126,2200]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: fields are set to defaults and the File is set to null. \u003cp\u003e [2204,2263]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: The C structure for a Tar Entry\u0027s header is: \u003cpre\u003e [2270,2320]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TagElement [995,2641]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Javadoc [988,2645]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "Javadoc [3784,3831]",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: public [2777,2783]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: static [2784,2790]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: final [2791,2796]",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "FieldDeclaration [2820,2897]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "Javadoc [3146,3185]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "Javadoc [3713,3753]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "Javadoc [3543,3579]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "FieldDeclaration [3303,3372]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "Javadoc [3378,3419]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "Javadoc [3462,3503]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "FieldDeclaration [3613,3673]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "Javadoc [3863,3904]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "Javadoc [3218,3259]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "Javadoc [2903,2945]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "Javadoc [2979,3030]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "Javadoc [3064,3115]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: m_magic [7426,7433]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "QualifiedName: TarConstants.TMAGIC [7454,7473]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: m_name [7485,7491]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: m_linkName [7522,7532]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "NumberLiteral: 31 [7698,7700]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: m_userName [7723,7733]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: m_groupName [7770,7781]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: final [4177,4182]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: final [4228,4233]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: m_name [4281,4287]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: m_linkFlag [4367,4377]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "QualifiedName: TarConstants.LF_DIR [4388,4407]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "QualifiedName: TarConstants.LF_NORMAL [4410,4432]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: m_mode [4324,4330]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "NumberLiteral: 040755 [4341,4347]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "NumberLiteral: 0100644 [4350,4357]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: m_modTime [4442,4451]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "NumberLiteral: 1000 [4481,4485]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: m_linkName [4495,4505]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: m_userName [4540,4550]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: m_groupName [4585,4596]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: final [4827,4832]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: final [4846,4851]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: m_linkFlag [4904,4914]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: final [5168,5173]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [5217,5231]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: final [5316,5321]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "PrefixExpression [5420,5422]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodInvocation [5426,5453]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: final [5532,5537]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: final [5583,5588]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: final [5943,5948]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: m_linkName [6413,6423]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: m_name [6458,6464]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "NumberLiteral: 0100644 [6795,6802]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "QualifiedName: TarConstants.LF_DIR [6591,6610]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: m_name [6629,6635]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: m_name [6644,6650]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: m_name [6705,6711]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "InfixExpression [6916,6942]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "QualifiedName: TarConstants.LF_NORMAL [6829,6851]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: m_size [6872,6878]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [6952,6967]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: m_devMajor [6976,6986]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: m_devMinor [7000,7010]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: final [7217,7222]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: final [14550,14555]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [13064,13226]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [13299,13339]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Javadoc [13053,13347]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: final [13381,13386]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [7819,8009]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: final [9305,9310]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: m_name [9339,9345]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: final [9132,9137]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: m_mode [9163,9169]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [12577,12612]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [12620,12637]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [9569,9752]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [9856,9891]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [9899,9919]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: final [9955,9960]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: m_userID [9988,9996]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [11182,11218]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [11226,11244]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [8116,8152]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [8160,8181]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: final [8218,8223]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: m_groupID [8252,8261]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: final [10152,10157]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: m_userName [10190,10200]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [11324,11480]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: final [8422,8427]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: m_groupName [8461,8472]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: final [8724,8729]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "NumberLiteral: 1000 [8775,8779]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: final [8937,8942]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "NumberLiteral: 1000 [8998,9002]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: final [9511,9516]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: m_size [9543,9549]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [12325,12483]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [12715,12867]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "QualifiedName: TarConstants.LF_GNUTYPE_LONGNAME [14180,14212]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "QualifiedName: TarConstants.GNU_LONGLINK [14254,14279]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "QualifiedName: TarConstants.LF_DIR [13771,13790]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [10255,10380]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Javadoc [10244,10460]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: final [10646,10651]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: final [10691,10696]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: final [16632,16637]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "QualifiedName: TarConstants.MODELEN [16825,16845]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "QualifiedName: TarConstants.UIDLEN [16916,16935]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "QualifiedName: TarConstants.GIDLEN [17007,17026]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "QualifiedName: TarConstants.SIZELEN [17099,17119]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "QualifiedName: TarConstants.MODTIMELEN [17195,17218]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: final [17231,17236]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "QualifiedName: TarConstants.CHKSUMLEN [17294,17316]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "QualifiedName: TarConstants.MAGICLEN [17574,17595]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "QualifiedName: TarConstants.UNAMELEN [17667,17688]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "QualifiedName: TarConstants.GNAMELEN [17761,17782]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "QualifiedName: TarConstants.DEVLEN [17855,17874]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "QualifiedName: TarConstants.DEVLEN [17947,17966]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: final [18076,18081]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "QualifiedName: TarConstants.CHKSUMLEN [18208,18230]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: final [14840,14845]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "QualifiedName: TarConstants.MODELEN [15043,15063]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "QualifiedName: TarConstants.MODELEN [15085,15105]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "QualifiedName: TarConstants.UIDLEN [15168,15187]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "QualifiedName: TarConstants.UIDLEN [15209,15228]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "QualifiedName: TarConstants.GIDLEN [15292,15311]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "QualifiedName: TarConstants.GIDLEN [15333,15352]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "QualifiedName: TarConstants.SIZELEN [15408,15428]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "QualifiedName: TarConstants.SIZELEN [15450,15470]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "QualifiedName: TarConstants.MODTIMELEN [15529,15552]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "QualifiedName: TarConstants.MODTIMELEN [15574,15597]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [15607,15687]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "QualifiedName: TarConstants.CHKSUMLEN [15706,15728]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "QualifiedName: TarConstants.MAGICLEN [15920,15941]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "QualifiedName: TarConstants.MAGICLEN [15963,15984]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "QualifiedName: TarConstants.UNAMELEN [16043,16064]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "QualifiedName: TarConstants.UNAMELEN [16086,16107]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "QualifiedName: TarConstants.GNAMELEN [16167,16188]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "QualifiedName: TarConstants.GNAMELEN [16210,16231]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "QualifiedName: TarConstants.DEVLEN [16296,16315]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "QualifiedName: TarConstants.DEVLEN [16337,16356]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "QualifiedName: TarConstants.DEVLEN [16421,16440]",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java",
        "src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "isEOFRecord",
            "readRecord",
            "TarBuffer",
            "TarBuffer",
            "TarBuffer",
            "TarBuffer",
            "TarBuffer",
            "readBlock",
            "getRecordSize",
            "debug",
            "skipRecord",
            "TarBuffer",
            "setDebug",
            "getCurrentRecordNum",
            "writeRecord",
            "getCurrentBlockNum",
            "writeRecord",
            "close",
            "flushBlock",
            "writeBlock",
            "getBlockSize",
            "initialize"
          ],
          "num": 22
        },
        {
          "qualified_names": [
            "setDebug",
            "TarBuffer",
            "isEOFRecord",
            "TarBuffer",
            "flushBlock",
            "initialize",
            "getRecordSize",
            "getBlockSize",
            "getCurrentBlockNum",
            "skipRecord",
            "getCurrentRecordNum",
            "close",
            "TarBuffer",
            "TarBuffer",
            "readRecord",
            "TarBuffer",
            "readBlock",
            "writeRecord",
            "writeBlock",
            "TarBuffer",
            "writeRecord"
          ],
          "num": 21
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "27",
            "28",
            "29",
            "30",
            "31",
            "33",
            "34",
            "36",
            "37",
            "38",
            "39",
            "41",
            "42",
            "43",
            "44",
            "45",
            "47",
            "48",
            "49",
            "50",
            "52",
            "53",
            "54",
            "57",
            "58",
            "59",
            "62",
            "63",
            "64",
            "65",
            "66",
            "67",
            "70",
            "71",
            "72",
            "75",
            "76",
            "77",
            "80",
            "81",
            "82",
            "83",
            "84",
            "85",
            "93",
            "94",
            "95",
            "99",
            "100",
            "101",
            "102",
            "103",
            "104",
            "105",
            "106",
            "107",
            "108",
            "109",
            "110",
            "111",
            "112",
            "113",
            "114",
            "115",
            "116",
            "117",
            "118",
            "119",
            "120",
            "121",
            "122",
            "123",
            "124",
            "125",
            "126",
            "127",
            "128",
            "129",
            "130",
            "131",
            "132",
            "133",
            "134",
            "135",
            "136",
            "137",
            "138",
            "139",
            "140",
            "141",
            "144",
            "146",
            "147",
            "148",
            "149",
            "150",
            "151",
            "152",
            "161",
            "162",
            "164",
            "165",
            "166",
            "167",
            "168",
            "169",
            "172",
            "173",
            "174",
            "176",
            "177",
            "178",
            "179",
            "182",
            "183",
            "184",
            "185",
            "186",
            "187",
            "188",
            "189",
            "196",
            "198",
            "199",
            "200",
            "201",
            "202",
            "203",
            "204",
            "205",
            "208",
            "209",
            "210",
            "211",
            "214",
            "215",
            "216",
            "217",
            "222",
            "223",
            "224",
            "225",
            "226",
            "227",
            "229",
            "235",
            "236",
            "237",
            "238",
            "239",
            "240",
            "241",
            "242",
            "243",
            "244",
            "245",
            "246",
            "247",
            "248",
            "249",
            "250",
            "251",
            "252",
            "253",
            "254",
            "255",
            "256",
            "257",
            "258",
            "259",
            "260",
            "261",
            "262",
            "263",
            "264",
            "265",
            "266",
            "267",
            "268",
            "269",
            "270",
            "271",
            "272",
            "273",
            "274",
            "275",
            "276",
            "277",
            "278",
            "279",
            "280",
            "281",
            "282",
            "283",
            "284",
            "285",
            "286",
            "287",
            "288",
            "289",
            "290",
            "291",
            "292",
            "293",
            "294",
            "295",
            "296",
            "297",
            "298",
            "299",
            "300",
            "301",
            "302",
            "303",
            "304",
            "305",
            "306",
            "307",
            "308",
            "309",
            "310",
            "311",
            "312",
            "313",
            "314",
            "315",
            "316",
            "317",
            "318",
            "319",
            "320",
            "321",
            "322",
            "323",
            "324",
            "325",
            "326",
            "327",
            "328",
            "329",
            "330",
            "331",
            "332",
            "333",
            "334",
            "335",
            "336",
            "337",
            "338",
            "339",
            "340",
            "341",
            "342",
            "343",
            "344",
            "345",
            "346",
            "347",
            "348",
            "349",
            "350",
            "351",
            "352",
            "353",
            "354",
            "355",
            "356",
            "357",
            "358",
            "359",
            "360",
            "361",
            "362",
            "363",
            "364",
            "365",
            "366",
            "367",
            "368",
            "369",
            "370",
            "371",
            "372",
            "373",
            "374",
            "375",
            "376",
            "377",
            "378",
            "379",
            "380",
            "381",
            "382",
            "383",
            "384",
            "385",
            "386",
            "387",
            "388",
            "389",
            "390",
            "391",
            "392",
            "393",
            "394",
            "395",
            "396",
            "397",
            "398",
            "399",
            "402",
            "403",
            "404",
            "405",
            "406",
            "407",
            "408",
            "411",
            "412",
            "413",
            "414",
            "417",
            "420",
            "422",
            "423",
            "424",
            "439",
            "440",
            "447",
            "455",
            "456",
            "457",
            "458",
            "459",
            "460",
            "461",
            "466",
            "472",
            "474",
            "476",
            "477",
            "478",
            "479",
            "480",
            "481",
            "482",
            "483",
            "484",
            "485",
            "486",
            "487",
            "488",
            "489",
            "490",
            "491",
            "492",
            "493",
            "494",
            "495",
            "498",
            "499",
            "500",
            "501",
            "502"
          ],
          "num": 364
        },
        {
          "qualified_names": [
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "35",
            "39",
            "41",
            "42",
            "44",
            "45",
            "46",
            "47",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57",
            "58",
            "59",
            "60",
            "61",
            "62",
            "65",
            "66",
            "67",
            "68",
            "69",
            "70",
            "71",
            "74",
            "75",
            "76",
            "77",
            "78",
            "79",
            "80",
            "81",
            "82",
            "83",
            "84",
            "87",
            "88",
            "89",
            "90",
            "91",
            "92",
            "95",
            "96",
            "97",
            "98",
            "99",
            "100",
            "101",
            "104",
            "105",
            "106",
            "107",
            "108",
            "109",
            "110",
            "111",
            "112",
            "113",
            "114",
            "115",
            "116",
            "117",
            "118",
            "119",
            "120",
            "121",
            "122",
            "123",
            "124",
            "125",
            "126",
            "127",
            "128",
            "129",
            "130",
            "131",
            "132",
            "133",
            "134",
            "135",
            "136",
            "137",
            "138",
            "139",
            "140",
            "141",
            "142",
            "143",
            "144",
            "145",
            "146",
            "147",
            "148",
            "149",
            "157",
            "158",
            "162",
            "163",
            "166",
            "168",
            "169",
            "170",
            "179",
            "180",
            "182",
            "183",
            "184",
            "185",
            "188",
            "189",
            "190",
            "192",
            "193",
            "194",
            "197",
            "198",
            "205",
            "207",
            "208",
            "209",
            "210",
            "213",
            "214",
            "217",
            "218",
            "223",
            "225",
            "226",
            "227",
            "228",
            "229",
            "237",
            "238",
            "239",
            "242",
            "243",
            "246",
            "249",
            "251",
            "252",
            "253",
            "268",
            "269",
            "270",
            "271",
            "272",
            "273",
            "274",
            "281",
            "289",
            "290",
            "291",
            "292",
            "293",
            "298",
            "304",
            "306",
            "308",
            "309",
            "312",
            "313",
            "314",
            "315",
            "316",
            "317",
            "318",
            "319",
            "320",
            "321",
            "322",
            "323",
            "324",
            "325",
            "326",
            "327",
            "328",
            "329",
            "330",
            "331",
            "332",
            "333",
            "334",
            "335",
            "336",
            "337",
            "338",
            "339",
            "340",
            "341",
            "342",
            "343",
            "344",
            "345",
            "346",
            "347",
            "348",
            "349",
            "350",
            "351",
            "352",
            "353",
            "354",
            "355",
            "356",
            "357",
            "358",
            "359",
            "360",
            "361",
            "362",
            "363",
            "364",
            "365",
            "366",
            "367",
            "368",
            "369",
            "370",
            "371",
            "372",
            "373",
            "374",
            "375",
            "376",
            "377",
            "378",
            "379",
            "380",
            "381",
            "382",
            "383",
            "384",
            "385",
            "386",
            "387",
            "388",
            "389",
            "390",
            "391",
            "392",
            "393",
            "394",
            "395",
            "396",
            "397",
            "398",
            "399",
            "400",
            "401",
            "402",
            "403",
            "404",
            "405",
            "406",
            "407",
            "408",
            "409",
            "410",
            "411",
            "412",
            "413",
            "414",
            "415",
            "416",
            "417",
            "418",
            "419",
            "420",
            "421",
            "422",
            "423",
            "424",
            "425",
            "426",
            "427",
            "428",
            "429",
            "430",
            "431",
            "432",
            "433",
            "434",
            "435",
            "436",
            "437",
            "438",
            "439",
            "440",
            "441",
            "442",
            "443",
            "444",
            "445",
            "446",
            "447",
            "448",
            "449",
            "450",
            "451",
            "452",
            "453"
          ],
          "num": 315
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java b/src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java\nindex a72e806..fd16aed 100644\n--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java\n@@ -24,65 +24,129 @@\n import java.util.Arrays;\n \n /**\n- * The TarBuffer class implements the tar archive concept of a buffered input\n- * stream. This concept goes back to the days of blocked tape drives and special\n- * io devices. In the Java universe, the only real function that this class\n- * performs is to ensure that files have the correct \"block\" size, or other tars\n- * will complain. \u003cp\u003e\n+ * The TarBuffer class implements the tar archive concept\n+ * of a buffered input stream. This concept goes back to the\n+ * days of blocked tape drives and special io devices. In the\n+ * Java universe, the only real function that this class\n+ * performs is to ensure that files have the correct \"block\"\n+ * size, or other tars will complain.\n+ * \u003cp\u003e\n+ * You should never have a need to access this class directly.\n+ * TarBuffers are created by Tar IO Streams.\n  *\n- * You should never have a need to access this class directly. TarBuffers are\n- * created by Tar IO Streams.\n  */\n-class TarBuffer\n-{\n-    public static final int DEFAULT_RECORDSIZE \u003d ( 512 );\n-    public static final int DEFAULT_BLOCKSIZE \u003d ( DEFAULT_RECORDSIZE * 20 );\n \n-    private byte[] m_blockBuffer;\n-    private int m_blockSize;\n-    private int m_currBlkIdx;\n-    private int m_currRecIdx;\n-    private boolean m_debug;\n+public class TarBuffer {\n \n-    private InputStream m_input;\n-    private OutputStream m_output;\n-    private int m_recordSize;\n-    private int m_recsPerBlock;\n+    /** Default record size */\n+    public static final int DEFAULT_RCDSIZE \u003d (512);\n \n-    public TarBuffer( final InputStream input )\n-    {\n-        this( input, TarBuffer.DEFAULT_BLOCKSIZE );\n+    /** Default block size */\n+    public static final int DEFAULT_BLKSIZE \u003d (DEFAULT_RCDSIZE * 20);\n+\n+    private InputStream     inStream;\n+    private OutputStream    outStream;\n+    private byte[]          blockBuffer;\n+    private int             currBlkIdx;\n+    private int             currRecIdx;\n+    private int             blockSize;\n+    private int             recordSize;\n+    private int             recsPerBlock;\n+    private boolean         debug;\n+\n+    /**\n+     * Constructor for a TarBuffer on an input stream.\n+     * @param inStream the input stream to use\n+     */\n+    public TarBuffer(InputStream inStream) {\n+        this(inStream, TarBuffer.DEFAULT_BLKSIZE);\n     }\n \n-    public TarBuffer( final InputStream input, final int blockSize )\n-    {\n-        this( input, blockSize, TarBuffer.DEFAULT_RECORDSIZE );\n+    /**\n+     * Constructor for a TarBuffer on an input stream.\n+     * @param inStream the input stream to use\n+     * @param blockSize the block size to use\n+     */\n+    public TarBuffer(InputStream inStream, int blockSize) {\n+        this(inStream, blockSize, TarBuffer.DEFAULT_RCDSIZE);\n     }\n \n-    public TarBuffer( final InputStream input,\n-                      final int blockSize,\n-                      final int recordSize )\n-    {\n-        m_input \u003d input;\n-        initialize( blockSize, recordSize );\n+    /**\n+     * Constructor for a TarBuffer on an input stream.\n+     * @param inStream the input stream to use\n+     * @param blockSize the block size to use\n+     * @param recordSize the record size to use\n+     */\n+    public TarBuffer(InputStream inStream, int blockSize, int recordSize) {\n+        this.inStream \u003d inStream;\n+        this.outStream \u003d null;\n+\n+        this.initialize(blockSize, recordSize);\n     }\n \n-    public TarBuffer( final OutputStream output )\n-    {\n-        this( output, TarBuffer.DEFAULT_BLOCKSIZE );\n+    /**\n+     * Constructor for a TarBuffer on an output stream.\n+     * @param outStream the output stream to use\n+     */\n+    public TarBuffer(OutputStream outStream) {\n+        this(outStream, TarBuffer.DEFAULT_BLKSIZE);\n     }\n \n-    public TarBuffer( final OutputStream output, final int blockSize )\n-    {\n-        this( output, blockSize, TarBuffer.DEFAULT_RECORDSIZE );\n+    /**\n+     * Constructor for a TarBuffer on an output stream.\n+     * @param outStream the output stream to use\n+     * @param blockSize the block size to use\n+     */\n+    public TarBuffer(OutputStream outStream, int blockSize) {\n+        this(outStream, blockSize, TarBuffer.DEFAULT_RCDSIZE);\n     }\n \n-    public TarBuffer( final OutputStream output,\n-                      final int blockSize,\n-                      final int recordSize )\n-    {\n-        m_output \u003d output;\n-        initialize( blockSize, recordSize );\n+    /**\n+     * Constructor for a TarBuffer on an output stream.\n+     * @param outStream the output stream to use\n+     * @param blockSize the block size to use\n+     * @param recordSize the record size to use\n+     */\n+    public TarBuffer(OutputStream outStream, int blockSize, int recordSize) {\n+        this.inStream \u003d null;\n+        this.outStream \u003d outStream;\n+\n+        this.initialize(blockSize, recordSize);\n+    }\n+\n+    /**\n+     * Initialization common to all constructors.\n+     */\n+    private void initialize(int blockSize, int recordSize) {\n+        this.debug \u003d false;\n+        this.blockSize \u003d blockSize;\n+        this.recordSize \u003d recordSize;\n+        this.recsPerBlock \u003d (this.blockSize / this.recordSize);\n+        this.blockBuffer \u003d new byte[this.blockSize];\n+\n+        if (this.inStream !\u003d null) {\n+            this.currBlkIdx \u003d -1;\n+            this.currRecIdx \u003d this.recsPerBlock;\n+        } else {\n+            this.currBlkIdx \u003d 0;\n+            this.currRecIdx \u003d 0;\n+        }\n+    }\n+\n+    /**\n+     * Get the TAR Buffer\u0027s block size. Blocks consist of multiple records.\n+     * @return the block size\n+     */\n+    public int getBlockSize() {\n+        return this.blockSize;\n+    }\n+\n+    /**\n+     * Get the TAR Buffer\u0027s record size.\n+     * @return the record size\n+     */\n+    public int getRecordSize() {\n+        return this.recordSize;\n     }\n \n     /**\n@@ -90,66 +154,20 @@\n      *\n      * @param debug If true, print debugging output.\n      */\n-    public void setDebug( final boolean debug )\n-    {\n-        m_debug \u003d debug;\n+    public void setDebug(boolean debug) {\n+        this.debug \u003d debug;\n     }\n \n     /**\n-     * Get the TAR Buffer\u0027s block size. Blocks consist of multiple records.\n-     *\n-     * @return The BlockSize value\n-     */\n-    public int getBlockSize()\n-    {\n-        return m_blockSize;\n-    }\n-\n-    /**\n-     * Get the current block number, zero based.\n-     *\n-     * @return The current zero based block number.\n-     */\n-    public int getCurrentBlockNum()\n-    {\n-        return m_currBlkIdx;\n-    }\n-\n-    /**\n-     * Get the current record number, within the current block, zero based.\n-     * Thus, current offset \u003d (currentBlockNum * recsPerBlk) + currentRecNum.\n-     *\n-     * @return The current zero based record number.\n-     */\n-    public int getCurrentRecordNum()\n-    {\n-        return m_currRecIdx - 1;\n-    }\n-\n-    /**\n-     * Get the TAR Buffer\u0027s record size.\n-     *\n-     * @return The RecordSize value\n-     */\n-    public int getRecordSize()\n-    {\n-        return m_recordSize;\n-    }\n-\n-    /**\n-     * Determine if an archive record indicate End of Archive. End of archive is\n-     * indicated by a record that consists entirely of null bytes.\n+     * Determine if an archive record indicate End of Archive. End of\n+     * archive is indicated by a record that consists entirely of null bytes.\n      *\n      * @param record The record data to check.\n-     * @return The EOFRecord value\n+     * @return true if the record data is an End of Archive\n      */\n-    public boolean isEOFRecord( final byte[] record )\n-    {\n-        final int size \u003d getRecordSize();\n-        for( int i \u003d 0; i \u003c size; ++i )\n-        {\n-            if( record[ i ] !\u003d 0 )\n-            {\n+    public boolean isEOFRecord(byte[] record) {\n+        for (int i \u003d 0, sz \u003d getRecordSize(); i \u003c sz; ++i) {\n+            if (record[i] !\u003d 0) {\n                 return false;\n             }\n         }\n@@ -158,270 +176,81 @@\n     }\n \n     /**\n-     * Close the TarBuffer. If this is an output buffer, also flush the current\n-     * block before closing.\n+     * Skip over a record on the input stream.\n+     * @throws IOException on error\n      */\n-    public void close()\n-        throws IOException\n-    {\n-        if( m_debug )\n-        {\n-            debug( \"TarBuffer.closeBuffer().\" );\n+    public void skipRecord() throws IOException {\n+        if (debug) {\n+            System.err.println(\"SkipRecord: recIdx \u003d \" + currRecIdx\n+                               + \" blkIdx \u003d \" + currBlkIdx);\n         }\n \n-        if( null !\u003d m_output )\n-        {\n-            flushBlock();\n+        if (inStream \u003d\u003d null) {\n+            throw new IOException(\"reading (via skip) from an output buffer\");\n+        }\n \n-            if( m_output !\u003d System.out \u0026\u0026 m_output !\u003d System.err )\n-            {\n-                m_output.close();\n-                m_output \u003d null;\n+        if (currRecIdx \u003e\u003d recsPerBlock) {\n+            if (!readBlock()) {\n+                return;    // UNDONE\n             }\n         }\n-        else if( m_input !\u003d null )\n-        {\n-            if( m_input !\u003d System.in )\n-            {\n-                m_input.close();\n-                m_input \u003d null;\n-            }\n-        }\n+\n+        currRecIdx++;\n     }\n \n     /**\n      * Read a record from the input stream and return the data.\n      *\n      * @return The record data.\n-     * @exception IOException Description of Exception\n+     * @throws IOException on error\n      */\n-    public byte[] readRecord()\n-        throws IOException\n-    {\n-        if( m_debug )\n-        {\n-            final String message \u003d \"ReadRecord: recIdx \u003d \" + m_currRecIdx +\n-                \" blkIdx \u003d \" + m_currBlkIdx;\n-            debug( message );\n+    public byte[] readRecord() throws IOException {\n+        if (debug) {\n+            System.err.println(\"ReadRecord: recIdx \u003d \" + currRecIdx\n+                               + \" blkIdx \u003d \" + currBlkIdx);\n         }\n \n-        if( null \u003d\u003d m_input )\n-        {\n-            final String message \u003d \"reading from an output buffer\";\n-            throw new IOException( message );\n+        if (inStream \u003d\u003d null) {\n+            throw new IOException(\"reading from an output buffer\");\n         }\n \n-        if( m_currRecIdx \u003e\u003d m_recsPerBlock )\n-        {\n-            if( !readBlock() )\n-            {\n+        if (currRecIdx \u003e\u003d recsPerBlock) {\n+            if (!readBlock()) {\n                 return null;\n             }\n         }\n \n-        final byte[] result \u003d new byte[ m_recordSize ];\n-        System.arraycopy( m_blockBuffer,\n-                          ( m_currRecIdx * m_recordSize ),\n-                          result,\n-                          0,\n-                          m_recordSize );\n+        byte[] result \u003d new byte[recordSize];\n \n-        m_currRecIdx++;\n+        System.arraycopy(blockBuffer,\n+                         (currRecIdx * recordSize), result, 0,\n+                         recordSize);\n+\n+        currRecIdx++;\n \n         return result;\n     }\n \n     /**\n-     * Skip over a record on the input stream.\n-     */\n-    public void skipRecord()\n-        throws IOException\n-    {\n-        if( m_debug )\n-        {\n-            final String message \u003d \"SkipRecord: recIdx \u003d \" + m_currRecIdx +\n-                \" blkIdx \u003d \" + m_currBlkIdx;\n-            debug( message );\n-        }\n-\n-        if( null \u003d\u003d m_input )\n-        {\n-            final String message \u003d \"reading (via skip) from an output buffer\";\n-            throw new IOException( message );\n-        }\n-\n-        if( m_currRecIdx \u003e\u003d m_recsPerBlock )\n-        {\n-            if( !readBlock() )\n-            {\n-                return;// UNDONE\n-            }\n-        }\n-\n-        m_currRecIdx++;\n-    }\n-\n-    /**\n-     * Write an archive record to the archive.\n-     *\n-     * @param record The record data to write to the archive.\n-     */\n-    public void writeRecord( final byte[] record )\n-        throws IOException\n-    {\n-        if( m_debug )\n-        {\n-            final String message \u003d \"WriteRecord: recIdx \u003d \" + m_currRecIdx +\n-                \" blkIdx \u003d \" + m_currBlkIdx;\n-            debug( message );\n-        }\n-\n-        if( null \u003d\u003d m_output )\n-        {\n-            final String message \u003d \"writing to an input buffer\";\n-            throw new IOException( message );\n-        }\n-\n-        if( record.length !\u003d m_recordSize )\n-        {\n-            final String message \u003d \"record to write has length \u0027\" +\n-                record.length + \"\u0027 which is not the record size of \u0027\" +\n-                m_recordSize + \"\u0027\";\n-            throw new IOException( message );\n-        }\n-\n-        if( m_currRecIdx \u003e\u003d m_recsPerBlock )\n-        {\n-            writeBlock();\n-        }\n-\n-        System.arraycopy( record,\n-                          0,\n-                          m_blockBuffer,\n-                          ( m_currRecIdx * m_recordSize ),\n-                          m_recordSize );\n-\n-        m_currRecIdx++;\n-    }\n-\n-    /**\n-     * Write an archive record to the archive, where the record may be inside of\n-     * a larger array buffer. The buffer must be \"offset plus record size\" long.\n-     *\n-     * @param buffer The buffer containing the record data to write.\n-     * @param offset The offset of the record data within buf.\n-     */\n-    public void writeRecord( final byte[] buffer, final int offset )\n-        throws IOException\n-    {\n-        if( m_debug )\n-        {\n-            final String message \u003d \"WriteRecord: recIdx \u003d \" + m_currRecIdx +\n-                \" blkIdx \u003d \" + m_currBlkIdx;\n-            debug( message );\n-        }\n-\n-        if( null \u003d\u003d m_output )\n-        {\n-            final String message \u003d \"writing to an input buffer\";\n-            throw new IOException( message );\n-        }\n-\n-        if( ( offset + m_recordSize ) \u003e buffer.length )\n-        {\n-            final String message \u003d \"record has length \u0027\" + buffer.length +\n-                \"\u0027 with offset \u0027\" + offset + \"\u0027 which is less than the record size of \u0027\" +\n-                m_recordSize + \"\u0027\";\n-            throw new IOException( message );\n-        }\n-\n-        if( m_currRecIdx \u003e\u003d m_recsPerBlock )\n-        {\n-            writeBlock();\n-        }\n-\n-        System.arraycopy( buffer,\n-                          offset,\n-                          m_blockBuffer,\n-                          ( m_currRecIdx * m_recordSize ),\n-                          m_recordSize );\n-\n-        m_currRecIdx++;\n-    }\n-\n-    /**\n-     * Flush the current data block if it has any data in it.\n-     */\n-    private void flushBlock()\n-        throws IOException\n-    {\n-        if( m_debug )\n-        {\n-            final String message \u003d \"TarBuffer.flushBlock() called.\";\n-            debug( message );\n-        }\n-\n-        if( m_output \u003d\u003d null )\n-        {\n-            final String message \u003d \"writing to an input buffer\";\n-            throw new IOException( message );\n-        }\n-\n-        if( m_currRecIdx \u003e 0 )\n-        {\n-            writeBlock();\n-        }\n-    }\n-\n-    /**\n-     * Initialization common to all constructors.\n-     */\n-    private void initialize( final int blockSize, final int recordSize )\n-    {\n-        m_debug \u003d false;\n-        m_blockSize \u003d blockSize;\n-        m_recordSize \u003d recordSize;\n-        m_recsPerBlock \u003d ( m_blockSize / m_recordSize );\n-        m_blockBuffer \u003d new byte[ m_blockSize ];\n-\n-        if( null !\u003d m_input )\n-        {\n-            m_currBlkIdx \u003d -1;\n-            m_currRecIdx \u003d m_recsPerBlock;\n-        }\n-        else\n-        {\n-            m_currBlkIdx \u003d 0;\n-            m_currRecIdx \u003d 0;\n-        }\n-    }\n-\n-    /**\n      * @return false if End-Of-File, else true\n      */\n-    private boolean readBlock()\n-        throws IOException\n-    {\n-        if( m_debug )\n-        {\n-            final String message \u003d \"ReadBlock: blkIdx \u003d \" + m_currBlkIdx;\n-            debug( message );\n+    private boolean readBlock() throws IOException {\n+        if (debug) {\n+            System.err.println(\"ReadBlock: blkIdx \u003d \" + currBlkIdx);\n         }\n \n-        if( null \u003d\u003d m_input )\n-        {\n-            final String message \u003d \"reading from an output buffer\";\n-            throw new IOException( message );\n+        if (inStream \u003d\u003d null) {\n+            throw new IOException(\"reading from an output buffer\");\n         }\n \n-        m_currRecIdx \u003d 0;\n+        currRecIdx \u003d 0;\n \n         int offset \u003d 0;\n-        int bytesNeeded \u003d m_blockSize;\n+        int bytesNeeded \u003d blockSize;\n \n-        while( bytesNeeded \u003e 0 )\n-        {\n-            final long numBytes \u003d m_input.read( m_blockBuffer, offset, bytesNeeded );\n+        while (bytesNeeded \u003e 0) {\n+            long numBytes \u003d inStream.read(blockBuffer, offset,\n+                                               bytesNeeded);\n \n             //\n             // NOTE\n@@ -436,15 +265,20 @@\n             //\n             // Thanks to \u0027Yohann.Roussel@alcatel.fr\u0027 for this fix.\n             //\n-            if( numBytes \u003d\u003d -1 )\n-            {\n+            if (numBytes \u003d\u003d -1) {\n+                if (offset \u003d\u003d 0) {\n+                    // Ensure that we do not read gigabytes of zeros\n+                    // for a corrupt tar file.\n+                    // See http://issues.apache.org/bugzilla/show_bug.cgi?id\u003d39924\n+                    return false;\n+                }\n                 // However, just leaving the unread portion of the buffer dirty does\n                 // cause problems in some cases.  This problem is described in\n                 // http://issues.apache.org/bugzilla/show_bug.cgi?id\u003d29877\n                 //\n                 // The solution is to fill the unused portion of the buffer with zeros.\n \n-                Arrays.fill(m_blockBuffer, offset, offset + bytesNeeded, (byte) 0);\n+                Arrays.fill(blockBuffer, offset, offset + bytesNeeded, (byte) 0);\n \n                 break;\n             }\n@@ -452,54 +286,171 @@\n             offset +\u003d numBytes;\n             bytesNeeded -\u003d numBytes;\n \n-            if( numBytes !\u003d m_blockSize )\n-            {\n-                if( m_debug )\n-                {\n-                    System.err.println( \"ReadBlock: INCOMPLETE READ \"\n-                                        + numBytes + \" of \" + m_blockSize\n-                                        + \" bytes read.\" );\n+            if (numBytes !\u003d blockSize) {\n+                if (debug) {\n+                    System.err.println(\"ReadBlock: INCOMPLETE READ \"\n+                                       + numBytes + \" of \" + blockSize\n+                                       + \" bytes read.\");\n                 }\n             }\n         }\n \n-        m_currBlkIdx++;\n+        currBlkIdx++;\n \n         return true;\n     }\n \n     /**\n-     * Write a TarBuffer block to the archive.\n+     * Get the current block number, zero based.\n      *\n-     * @exception IOException Description of Exception\n+     * @return The current zero based block number.\n      */\n-    private void writeBlock()\n-        throws IOException\n-    {\n-        if( m_debug )\n-        {\n-            final String message \u003d \"WriteBlock: blkIdx \u003d \" + m_currBlkIdx;\n-            debug( message );\n-        }\n-\n-        if( null \u003d\u003d m_output )\n-        {\n-            final String message \u003d \"writing to an input buffer\";\n-            throw new IOException( message );\n-        }\n-\n-        m_output.write( m_blockBuffer, 0, m_blockSize );\n-        m_output.flush();\n-\n-        m_currRecIdx \u003d 0;\n-        m_currBlkIdx++;\n+    public int getCurrentBlockNum() {\n+        return currBlkIdx;\n     }\n \n-    protected void debug( final String message )\n-    {\n-        if( m_debug )\n-        {\n-            System.err.println( message );\n+    /**\n+     * Get the current record number, within the current block, zero based.\n+     * Thus, current offset \u003d (currentBlockNum * recsPerBlk) + currentRecNum.\n+     *\n+     * @return The current zero based record number.\n+     */\n+    public int getCurrentRecordNum() {\n+        return currRecIdx - 1;\n+    }\n+\n+    /**\n+     * Write an archive record to the archive.\n+     *\n+     * @param record The record data to write to the archive.\n+     * @throws IOException on error\n+     */\n+    public void writeRecord(byte[] record) throws IOException {\n+        if (debug) {\n+            System.err.println(\"WriteRecord: recIdx \u003d \" + currRecIdx\n+                               + \" blkIdx \u003d \" + currBlkIdx);\n+        }\n+\n+        if (outStream \u003d\u003d null) {\n+            throw new IOException(\"writing to an input buffer\");\n+        }\n+\n+        if (record.length !\u003d recordSize) {\n+            throw new IOException(\"record to write has length \u0027\"\n+                                  + record.length\n+                                  + \"\u0027 which is not the record size of \u0027\"\n+                                  + recordSize + \"\u0027\");\n+        }\n+\n+        if (currRecIdx \u003e\u003d recsPerBlock) {\n+            writeBlock();\n+        }\n+\n+        System.arraycopy(record, 0, blockBuffer,\n+                         (currRecIdx * recordSize),\n+                         recordSize);\n+\n+        currRecIdx++;\n+    }\n+\n+    /**\n+     * Write an archive record to the archive, where the record may be\n+     * inside of a larger array buffer. The buffer must be \"offset plus\n+     * record size\" long.\n+     *\n+     * @param buf The buffer containing the record data to write.\n+     * @param offset The offset of the record data within buf.\n+     * @throws IOException on error\n+     */\n+    public void writeRecord(byte[] buf, int offset) throws IOException {\n+        if (debug) {\n+            System.err.println(\"WriteRecord: recIdx \u003d \" + currRecIdx\n+                               + \" blkIdx \u003d \" + currBlkIdx);\n+        }\n+\n+        if (outStream \u003d\u003d null) {\n+            throw new IOException(\"writing to an input buffer\");\n+        }\n+\n+        if ((offset + recordSize) \u003e buf.length) {\n+            throw new IOException(\"record has length \u0027\" + buf.length\n+                                  + \"\u0027 with offset \u0027\" + offset\n+                                  + \"\u0027 which is less than the record size of \u0027\"\n+                                  + recordSize + \"\u0027\");\n+        }\n+\n+        if (currRecIdx \u003e\u003d recsPerBlock) {\n+            writeBlock();\n+        }\n+\n+        System.arraycopy(buf, offset, blockBuffer,\n+                         (currRecIdx * recordSize),\n+                         recordSize);\n+\n+        currRecIdx++;\n+    }\n+\n+    /**\n+     * Write a TarBuffer block to the archive.\n+     */\n+    private void writeBlock() throws IOException {\n+        if (debug) {\n+            System.err.println(\"WriteBlock: blkIdx \u003d \" + currBlkIdx);\n+        }\n+\n+        if (outStream \u003d\u003d null) {\n+            throw new IOException(\"writing to an input buffer\");\n+        }\n+\n+        outStream.write(blockBuffer, 0, blockSize);\n+        outStream.flush();\n+\n+        currRecIdx \u003d 0;\n+        currBlkIdx++;\n+    }\n+\n+    /**\n+     * Flush the current data block if it has any data in it.\n+     */\n+    private void flushBlock() throws IOException {\n+        if (debug) {\n+            System.err.println(\"TarBuffer.flushBlock() called.\");\n+        }\n+\n+        if (outStream \u003d\u003d null) {\n+            throw new IOException(\"writing to an input buffer\");\n+        }\n+\n+        if (currRecIdx \u003e 0) {\n+            writeBlock();\n+        }\n+    }\n+\n+    /**\n+     * Close the TarBuffer. If this is an output buffer, also flush the\n+     * current block before closing.\n+     * @throws IOException on error\n+     */\n+    public void close() throws IOException {\n+        if (debug) {\n+            System.err.println(\"TarBuffer.closeBuffer().\");\n+        }\n+\n+        if (outStream !\u003d null) {\n+            flushBlock();\n+\n+            if (outStream !\u003d System.out\n+                    \u0026\u0026 outStream !\u003d System.err) {\n+                outStream.close();\n+\n+                outStream \u003d null;\n+            }\n+        } else if (inStream !\u003d null) {\n+            if (inStream !\u003d System.in) {\n+                inStream.close();\n+\n+                inStream \u003d null;\n+            }\n         }\n     }\n }\n",
      "operations": [
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [969,1431]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: public [1433,1439]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldDeclaration [1548,1643]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [2927,3148]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [10885,12158]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [1463,1489]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [2004,2117]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [2225,2384]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [2518,2725]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [3154,3316]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SingleVariableDeclaration [3362,3375]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [3453,3663]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Javadoc [4986,5259]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [13031,13187]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [2844,2866]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [3750,3771]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [4997,5137]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [5199,5251]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [5548,5576]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [5804,5916]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [6459,6560]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [7155,7256]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [9963,9991]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [10234,10333]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [10343,10631]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [12384,12483]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [12853,12952]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "NumberLiteral: 512 [1537,1540]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: blockSize [3403,3412]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldAccess [4600,4614]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldAccess [4759,4774]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldAccess [2810,2823]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "METHOD_INVOCATION_RECEIVER [2876,2880]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldAccess [3780,3794]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "METHOD_INVOCATION_RECEIVER [3817,3821]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldAccess [3999,4009]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldAccess [4027,4041]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldAccess [4063,4078]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldAccess [4101,4118]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldAccess [4165,4181]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldAccess [4223,4236]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldAccess [4955,4965]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationFragment [5332,5352]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [8979,9266]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldAccess [4122,4136]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldAccess [4139,4154]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldAccess [4260,4275]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldAccess [4294,4309]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldAccess [4312,4329]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldAccess [4360,4375]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldAccess [4393,4408]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [8159,8428]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldAccess [4193,4207]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "InfixExpression [5687,5782]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "InfixExpression [6342,6437]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "InfixExpression [10116,10212]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "InfixExpression [12326,12362]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "StringLiteral: \"TarBuffer.flushBlock() called.\" [12799,12831]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "StringLiteral: \"TarBuffer.closeBuffer().\" [13285,13311]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "Javadoc [969,1425]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "FieldDeclaration [1448,1501]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "InfixExpression [1552,1575]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [1868,1975]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: final [1999,2004]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SingleVariableDeclaration [2024,2043]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: blockSize [2073,2082]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: final [2479,2484]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: final [2506,2511]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: final [2145,2150]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: final [2192,2197]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: final [2235,2240]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: input [2282,2287]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: final [2363,2368]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: final [2628,2633]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: final [2677,2682]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: final [2720,2725]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: output [2768,2774]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: final [10177,10182]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: final [10198,10203]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: m_debug [10235,10242]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: m_blockSize [10260,10271]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: m_recordSize [10293,10305]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: m_recsPerBlock [10328,10342]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: m_blockSize [10347,10358]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: m_recordSize [10361,10373]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: m_blockBuffer [10385,10398]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: m_blockSize [10411,10422]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: m_input [10447,10454]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: m_currBlkIdx [10479,10491]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: m_currRecIdx [10510,10522]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: m_recsPerBlock [10525,10539]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: m_currBlkIdx [10586,10598]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: m_currRecIdx [10616,10628]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: m_blockSize [3221,3232]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: m_recordSize [3908,3920]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: final [2976,2981]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: m_debug [3012,3019]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [3944,4084]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [4146,4173]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Javadoc [3933,4181]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: final [4214,4219]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [4250,4283]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [6375,6559]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [6569,6735]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [5420,5604]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [5614,5769]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: final [5933,5938]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [8120,9550]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [10787,10924]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [10934,11089]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: final [11237,11242]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "InfixExpression [12520,12543]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "StringLiteral: \" of \" [12731,12737]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: m_blockSize [12740,12751]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "StringLiteral: \" bytes read.\" [12794,12808]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Block [12558,12843]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "IfStatement [12516,12843]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: final [7087,7092]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [7150,7335]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [7345,7498]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [7508,7785]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [12977,13024]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [13104,13242]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [13252,13405]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [9701,9833]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [9843,9996]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "Javadoc [4470,4590]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [4656,4738]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: protected [13552,13561]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "PrimitiveType: void [13562,13566]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: debug [13567,13572]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SingleVariableDeclaration [13574,13594]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: message [13667,13674]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Block [13601,13693]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "MethodDeclaration [13552,13693]",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java",
        "src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [],
          "num": 0
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "24",
            "25",
            "29",
            "34",
            "39",
            "44",
            "49",
            "54",
            "59",
            "64",
            "69",
            "74",
            "80",
            "85",
            "90",
            "95",
            "100",
            "105",
            "110",
            "115",
            "120",
            "140"
          ],
          "num": 22
        },
        {
          "qualified_names": [
            "23",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "36",
            "41",
            "46",
            "51",
            "56",
            "57",
            "58",
            "59",
            "60",
            "61",
            "66",
            "71",
            "76",
            "81",
            "86",
            "92",
            "97",
            "102",
            "107",
            "112",
            "117",
            "122",
            "127",
            "132",
            "152"
          ],
          "num": 34
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java b/src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java\nindex c56be6e..420dced 100644\n--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java\n@@ -20,104 +20,116 @@\n \n /**\n  * This interface contains all the definitions used in the package.\n+ *\n  */\n-interface TarConstants\n-{\n+// CheckStyle:InterfaceIsTypeCheck OFF (bc)\n+public interface TarConstants {\n+\n+    /**\n+     * The length of the name field in a header buffer.\n+     */\n+    int    NAMELEN \u003d 100;\n+\n     /**\n      * The length of the mode field in a header buffer.\n      */\n-    int MODELEN \u003d 8;\n+    int    MODELEN \u003d 8;\n \n     /**\n      * The length of the user id field in a header buffer.\n      */\n-    int UIDLEN \u003d 8;\n+    int    UIDLEN \u003d 8;\n \n     /**\n      * The length of the group id field in a header buffer.\n      */\n-    int GIDLEN \u003d 8;\n+    int    GIDLEN \u003d 8;\n \n     /**\n      * The length of the checksum field in a header buffer.\n      */\n-    int CHKSUMLEN \u003d 8;\n+    int    CHKSUMLEN \u003d 8;\n \n     /**\n      * The length of the size field in a header buffer.\n      */\n-    int SIZELEN \u003d 12;\n+    int    SIZELEN \u003d 12;\n+\n+    /**\n+     * The maximum size of a file in a tar archive (That\u0027s 11 sevens, octal).\n+     */\n+    long   MAXSIZE \u003d 077777777777L;\n \n     /**\n      * The length of the magic field in a header buffer.\n      */\n-    int MAGICLEN \u003d 8;\n+    int    MAGICLEN \u003d 8;\n \n     /**\n      * The length of the modification time field in a header buffer.\n      */\n-    int MODTIMELEN \u003d 12;\n+    int    MODTIMELEN \u003d 12;\n \n     /**\n      * The length of the user name field in a header buffer.\n      */\n-    int UNAMELEN \u003d 32;\n+    int    UNAMELEN \u003d 32;\n \n     /**\n      * The length of the group name field in a header buffer.\n      */\n-    int GNAMELEN \u003d 32;\n+    int    GNAMELEN \u003d 32;\n \n     /**\n      * The length of the devices field in a header buffer.\n      */\n-    int DEVLEN \u003d 8;\n+    int    DEVLEN \u003d 8;\n \n     /**\n      * LF_ constants represent the \"link flag\" of an entry, or more commonly,\n      * the \"entry type\". This is the \"old way\" of indicating a normal file.\n      */\n-    byte LF_OLDNORM \u003d 0;\n+    byte   LF_OLDNORM \u003d 0;\n \n     /**\n      * Normal file type.\n      */\n-    byte LF_NORMAL \u003d (byte)\u00270\u0027;\n+    byte   LF_NORMAL \u003d (byte) \u00270\u0027;\n \n     /**\n      * Link file type.\n      */\n-    byte LF_LINK \u003d (byte)\u00271\u0027;\n+    byte   LF_LINK \u003d (byte) \u00271\u0027;\n \n     /**\n      * Symbolic link file type.\n      */\n-    byte LF_SYMLINK \u003d (byte)\u00272\u0027;\n+    byte   LF_SYMLINK \u003d (byte) \u00272\u0027;\n \n     /**\n      * Character device file type.\n      */\n-    byte LF_CHR \u003d (byte)\u00273\u0027;\n+    byte   LF_CHR \u003d (byte) \u00273\u0027;\n \n     /**\n      * Block device file type.\n      */\n-    byte LF_BLK \u003d (byte)\u00274\u0027;\n+    byte   LF_BLK \u003d (byte) \u00274\u0027;\n \n     /**\n      * Directory file type.\n      */\n-    byte LF_DIR \u003d (byte)\u00275\u0027;\n+    byte   LF_DIR \u003d (byte) \u00275\u0027;\n \n     /**\n      * FIFO (pipe) file type.\n      */\n-    byte LF_FIFO \u003d (byte)\u00276\u0027;\n+    byte   LF_FIFO \u003d (byte) \u00276\u0027;\n \n     /**\n      * Contiguous file type.\n      */\n-    byte LF_CONTIG \u003d (byte)\u00277\u0027;\n+    byte   LF_CONTIG \u003d (byte) \u00277\u0027;\n \n     /**\n      * The magic tag representing a POSIX tar archive.\n@@ -137,5 +149,5 @@\n     /**\n      * Identifies the *next* file on the tape as having a long name.\n      */\n-    byte LF_GNUTYPE_LONGNAME \u003d (byte)\u0027L\u0027;\n+    byte LF_GNUTYPE_LONGNAME \u003d (byte) \u0027L\u0027;\n }\n",
      "operations": [
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: public [981,987]"
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldDeclaration [1614,1739]"
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java",
        "src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "read",
            "debug",
            "reset",
            "mark",
            "getRecordSize",
            "skip",
            "available",
            "read",
            "setDebug",
            "TarInputStream",
            "TarInputStream",
            "read",
            "copyEntryContents",
            "TarInputStream",
            "getNextEntry",
            "markSupported",
            "close"
          ],
          "num": 17
        },
        {
          "qualified_names": [
            "mark",
            "close",
            "markSupported",
            "getNextEntry",
            "setDebug",
            "read",
            "copyEntryContents",
            "available",
            "TarInputStream",
            "read",
            "getRecordSize",
            "skip",
            "reset",
            "TarInputStream",
            "TarInputStream"
          ],
          "num": 15
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "10",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "27",
            "28",
            "29",
            "31",
            "32",
            "33",
            "34",
            "35",
            "36",
            "37",
            "38",
            "39",
            "40",
            "41",
            "44",
            "45",
            "46",
            "47",
            "48",
            "49",
            "51",
            "52",
            "53",
            "57",
            "58",
            "59",
            "60",
            "62",
            "64",
            "65",
            "66",
            "67",
            "71",
            "72",
            "73",
            "74",
            "78",
            "79",
            "80",
            "81",
            "82",
            "84",
            "85",
            "91",
            "93",
            "94",
            "95",
            "96",
            "100",
            "101",
            "102",
            "103",
            "104",
            "105",
            "106",
            "107",
            "108",
            "110",
            "111",
            "112",
            "113",
            "114",
            "115",
            "116",
            "117",
            "118",
            "119",
            "120",
            "121",
            "122",
            "123",
            "124",
            "125",
            "126",
            "127",
            "128",
            "129",
            "130",
            "131",
            "132",
            "133",
            "134",
            "135",
            "136",
            "137",
            "138",
            "139",
            "140",
            "141",
            "142",
            "143",
            "144",
            "145",
            "146",
            "147",
            "148",
            "149",
            "150",
            "151",
            "152",
            "153",
            "154",
            "155",
            "156",
            "157",
            "158",
            "159",
            "160",
            "161",
            "162",
            "163",
            "164",
            "165",
            "166",
            "167",
            "168",
            "169",
            "170",
            "171",
            "172",
            "173",
            "174",
            "175",
            "176",
            "177",
            "178",
            "179",
            "180",
            "181",
            "182",
            "183",
            "184",
            "185",
            "186",
            "187",
            "188",
            "189",
            "190",
            "191",
            "192",
            "193",
            "194",
            "195",
            "196",
            "197",
            "198",
            "199",
            "200",
            "201",
            "202",
            "203",
            "204",
            "205",
            "206",
            "214",
            "215",
            "216",
            "220",
            "221",
            "222",
            "223",
            "224",
            "227",
            "229",
            "230",
            "231",
            "232",
            "236",
            "238",
            "240",
            "241",
            "242",
            "243",
            "244",
            "245",
            "246",
            "247",
            "248",
            "249",
            "250",
            "251",
            "252",
            "253",
            "254",
            "255",
            "256",
            "257",
            "258",
            "259",
            "260",
            "261",
            "264",
            "265",
            "267",
            "268",
            "269",
            "270",
            "271",
            "272",
            "273",
            "274",
            "275",
            "283",
            "284",
            "289",
            "290",
            "292",
            "293",
            "295",
            "296",
            "297",
            "298",
            "299",
            "300",
            "301",
            "302",
            "303",
            "304",
            "305",
            "306",
            "307",
            "308",
            "309",
            "310",
            "311",
            "312",
            "313",
            "314",
            "315",
            "316",
            "317",
            "318",
            "319",
            "320",
            "321",
            "322",
            "323",
            "324",
            "325",
            "326",
            "327",
            "328",
            "329",
            "330",
            "331",
            "332",
            "333",
            "334",
            "335",
            "336",
            "337",
            "338",
            "339",
            "340",
            "341",
            "342",
            "343",
            "344",
            "345",
            "346",
            "347",
            "348",
            "349",
            "350",
            "351",
            "352",
            "353",
            "354",
            "355",
            "356",
            "357",
            "358",
            "359",
            "360",
            "361",
            "362",
            "363",
            "364",
            "365",
            "366",
            "367",
            "368",
            "369",
            "370",
            "371",
            "372",
            "373",
            "374",
            "375",
            "376",
            "377",
            "378",
            "379",
            "380",
            "381",
            "382",
            "383",
            "384",
            "385",
            "386",
            "387",
            "388",
            "389",
            "390",
            "391",
            "392",
            "393",
            "394",
            "395",
            "396",
            "397",
            "398",
            "399",
            "400",
            "401",
            "402",
            "403",
            "404",
            "405",
            "406",
            "407",
            "408",
            "409",
            "410",
            "411",
            "412",
            "413",
            "414",
            "415",
            "421",
            "422",
            "426",
            "427",
            "428",
            "430",
            "431",
            "433",
            "434",
            "435",
            "436",
            "437",
            "438",
            "439",
            "440",
            "441",
            "442",
            "443",
            "444",
            "445",
            "446",
            "447",
            "451",
            "452",
            "453",
            "454",
            "455",
            "456",
            "457",
            "458",
            "459",
            "460",
            "461",
            "462",
            "463",
            "464",
            "465"
          ],
          "num": 380
        },
        {
          "qualified_names": [
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "9",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23",
            "32",
            "33",
            "34",
            "35",
            "36",
            "38",
            "39",
            "40",
            "41",
            "42",
            "43",
            "44",
            "45",
            "46",
            "47",
            "48",
            "49",
            "50",
            "51",
            "54",
            "55",
            "56",
            "58",
            "59",
            "60",
            "61",
            "62",
            "63",
            "64",
            "65",
            "66",
            "67",
            "71",
            "72",
            "75",
            "76",
            "80",
            "81",
            "85",
            "86",
            "88",
            "89",
            "90",
            "91",
            "92",
            "98",
            "100",
            "101",
            "102",
            "106",
            "107",
            "109",
            "110",
            "118",
            "119",
            "123",
            "124",
            "125",
            "126",
            "127",
            "128",
            "129",
            "132",
            "134",
            "135",
            "136",
            "137",
            "138",
            "142",
            "143",
            "144",
            "145",
            "147",
            "148",
            "149",
            "151",
            "152",
            "153",
            "154",
            "155",
            "156",
            "157",
            "158",
            "159",
            "160",
            "161",
            "164",
            "166",
            "174",
            "179",
            "181",
            "183",
            "189",
            "193",
            "194",
            "195",
            "196",
            "197",
            "198",
            "199",
            "200",
            "202",
            "203",
            "205",
            "206",
            "207",
            "208",
            "209",
            "210",
            "211",
            "212",
            "213",
            "214",
            "215",
            "216",
            "217",
            "218",
            "219",
            "220",
            "221",
            "222",
            "223",
            "224",
            "225",
            "226",
            "227",
            "228",
            "229",
            "230",
            "231",
            "232",
            "233",
            "234",
            "235",
            "236",
            "237",
            "238",
            "239",
            "240",
            "241",
            "242",
            "243",
            "244",
            "245",
            "246",
            "247",
            "248",
            "249",
            "250",
            "251",
            "252",
            "253",
            "254",
            "255",
            "256",
            "257",
            "258",
            "259",
            "260",
            "261",
            "262",
            "263",
            "264",
            "265",
            "266",
            "267",
            "268",
            "269",
            "270",
            "271",
            "272",
            "273",
            "274",
            "275",
            "276",
            "277",
            "278",
            "279",
            "280",
            "281",
            "282",
            "283",
            "284",
            "285",
            "286",
            "287",
            "288",
            "289",
            "290",
            "291",
            "292",
            "293",
            "294",
            "295",
            "296",
            "297",
            "298",
            "299",
            "300",
            "301",
            "302",
            "303",
            "304",
            "305",
            "306",
            "307",
            "308",
            "309",
            "310",
            "311",
            "312",
            "313",
            "314",
            "315",
            "316",
            "317",
            "318",
            "319",
            "320",
            "321",
            "322",
            "323",
            "324",
            "325",
            "326",
            "327",
            "328",
            "329",
            "330",
            "331",
            "332",
            "333",
            "334",
            "335",
            "336",
            "337",
            "338",
            "339",
            "340",
            "341",
            "342",
            "343",
            "344",
            "345",
            "346",
            "347",
            "348",
            "349",
            "350",
            "351",
            "352",
            "353",
            "354",
            "355",
            "356",
            "357",
            "358",
            "359",
            "360",
            "361",
            "362",
            "363",
            "364",
            "365",
            "366",
            "367",
            "368",
            "369",
            "370",
            "371",
            "372",
            "373",
            "374",
            "375",
            "376",
            "377",
            "378",
            "379",
            "380",
            "381",
            "382",
            "383",
            "384",
            "385",
            "386",
            "387",
            "388",
            "389",
            "390",
            "394"
          ],
          "num": 309
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java b/src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java\nindex 21e2551..bf05051 100644\n--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java\n@@ -1,21 +1,26 @@\n /*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n+ *  Licensed to the Apache Software Foundation (ASF) under one or more\n+ *  contributor license agreements.  See the NOTICE file distributed with\n+ *  this work for additional information regarding copyright ownership.\n+ *  The ASF licenses this file to You under the Apache License, Version 2.0\n+ *  (the \"License\"); you may not use this file except in compliance with\n+ *  the License.  You may obtain a copy of the License at\n  *\n- * http://www.apache.org/licenses/LICENSE-2.0\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n  *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n  */\n+\n+/*\n+ * This package is based on the work done by Timothy Gerard Endres\n+ * (time@ice.com) to whom the Ant project is very grateful for his great code.\n+ */\n+\n package org.apache.commons.compress.archivers.tar;\n \n import java.io.FilterInputStream;\n@@ -24,186 +29,85 @@\n import java.io.OutputStream;\n \n /**\n- * The TarInputStream reads a UNIX tar archive as an InputStream. methods are\n- * provided to position at each successive entry in the archive, and the read\n- * each entry as a normal input stream using read().\n+ * The TarInputStream reads a UNIX tar archive as an InputStream.\n+ * methods are provided to position at each successive entry in\n+ * the archive, and the read each entry as a normal input stream\n+ * using read().\n+ *\n  */\n-public class TarInputStream\n-    extends FilterInputStream\n-{\n-    private TarBuffer m_buffer;\n-    private TarArchiveEntry m_currEntry;\n-    private boolean m_debug;\n-    private int m_entryOffset;\n-    private int m_entrySize;\n-    private boolean m_hasHitEOF;\n-    private byte[] m_oneBuf;\n-    private byte[] m_readBuf;\n+public class TarInputStream extends FilterInputStream {\n+    private static final int SMALL_BUFFER_SIZE \u003d 256;\n+    private static final int BUFFER_SIZE \u003d 8 * 1024;\n+    private static final int LARGE_BUFFER_SIZE \u003d 32 * 1024;\n+    private static final int BYTE_MASK \u003d 0xFF;\n+\n+    // CheckStyle:VisibilityModifier OFF - bc\n+    protected boolean debug;\n+    protected boolean hasHitEOF;\n+    protected long entrySize;\n+    protected long entryOffset;\n+    protected byte[] readBuf;\n+    protected TarBuffer buffer;\n+    protected TarArchiveEntry currEntry;\n \n     /**\n-     * Construct a TarInputStream using specified input\n-     * stream and default block and record sizes.\n-     *\n-     * @param input stream to create TarInputStream from\n-     * @see TarBuffer#DEFAULT_BLOCKSIZE\n-     * @see TarBuffer#DEFAULT_RECORDSIZE\n+     * This contents of this array is not used at all in this class,\n+     * it is only here to avoid repreated object creation during calls\n+     * to the no-arg read method.\n      */\n-    public TarInputStream( final InputStream input )\n-    {\n-        this( input, TarBuffer.DEFAULT_BLOCKSIZE, TarBuffer.DEFAULT_RECORDSIZE );\n+    protected byte[] oneBuf;\n+\n+    // CheckStyle:VisibilityModifier ON\n+\n+    /**\n+     * Constructor for TarInputStream.\n+     * @param is the input stream to use\n+     */\n+    public TarInputStream(InputStream is) {\n+        this(is, TarBuffer.DEFAULT_BLKSIZE, TarBuffer.DEFAULT_RCDSIZE);\n     }\n \n     /**\n-     * Construct a TarInputStream using specified input\n-     * stream, block size and default record sizes.\n-     *\n-     * @param input stream to create TarInputStream from\n+     * Constructor for TarInputStream.\n+     * @param is the input stream to use\n      * @param blockSize the block size to use\n-     * @see TarBuffer#DEFAULT_RECORDSIZE\n      */\n-    public TarInputStream( final InputStream input,\n-                           final int blockSize )\n-    {\n-        this( input, blockSize, TarBuffer.DEFAULT_RECORDSIZE );\n+    public TarInputStream(InputStream is, int blockSize) {\n+        this(is, blockSize, TarBuffer.DEFAULT_RCDSIZE);\n     }\n \n     /**\n-     * Construct a TarInputStream using specified input\n-     * stream, block size and record sizes.\n-     *\n-     * @param input stream to create TarInputStream from\n+     * Constructor for TarInputStream.\n+     * @param is the input stream to use\n      * @param blockSize the block size to use\n      * @param recordSize the record size to use\n      */\n-    public TarInputStream( final InputStream input,\n-                           final int blockSize,\n-                           final int recordSize )\n-    {\n-        super( input );\n+    public TarInputStream(InputStream is, int blockSize, int recordSize) {\n+        super(is);\n \n-        m_buffer \u003d new TarBuffer( input, blockSize, recordSize );\n-        m_oneBuf \u003d new byte[ 1 ];\n+        this.buffer \u003d new TarBuffer(is, blockSize, recordSize);\n+        this.readBuf \u003d null;\n+        this.oneBuf \u003d new byte[1];\n+        this.debug \u003d false;\n+        this.hasHitEOF \u003d false;\n     }\n \n     /**\n      * Sets the debugging flag.\n      *\n-     * @param debug The new Debug value\n+     * @param debug True to turn on debugging.\n      */\n-    public void setDebug( final boolean debug )\n-    {\n-        m_debug \u003d debug;\n-        m_buffer.setDebug( debug );\n+    public void setDebug(boolean debug) {\n+        this.debug \u003d debug;\n+        buffer.setDebug(debug);\n     }\n \n     /**\n-     * Get the next entry in this tar archive. This will skip over any remaining\n-     * data in the current entry, if there is one, and place the input stream at\n-     * the header of the next entry, and read the header and instantiate a new\n-     * TarEntry from the header bytes and return that entry. If there are no\n-     * more entries in the archive, null will be returned to indicate that the\n-     * end of the archive has been reached.\n-     *\n-     * @return The next TarEntry in the archive, or null.\n-     * @exception IOException Description of Exception\n+     * Closes this stream. Calls the TarBuffer\u0027s close() method.\n+     * @throws IOException on error\n      */\n-    public TarArchiveEntry getNextEntry()\n-        throws IOException\n-    {\n-        if( m_hasHitEOF )\n-        {\n-            return null;\n-        }\n-\n-        if( m_currEntry !\u003d null )\n-        {\n-            final int numToSkip \u003d m_entrySize - m_entryOffset;\n-\n-            if( m_debug )\n-            {\n-                final String message \u003d \"TarInputStream: SKIP currENTRY \u0027\" +\n-                    m_currEntry.getName() + \"\u0027 SZ \" + m_entrySize +\n-                    \" OFF \" + m_entryOffset + \"  skipping \" + numToSkip + \" bytes\";\n-                debug( message );\n-            }\n-\n-            if( numToSkip \u003e 0 )\n-            {\n-                skip( numToSkip );\n-            }\n-\n-            m_readBuf \u003d null;\n-        }\n-\n-        final byte[] headerBuf \u003d m_buffer.readRecord();\n-        if( headerBuf \u003d\u003d null )\n-        {\n-            if( m_debug )\n-            {\n-                debug( \"READ NULL RECORD\" );\n-            }\n-            m_hasHitEOF \u003d true;\n-        }\n-        else if( m_buffer.isEOFRecord( headerBuf ) )\n-        {\n-            if( m_debug )\n-            {\n-                debug( \"READ EOF RECORD\" );\n-            }\n-            m_hasHitEOF \u003d true;\n-        }\n-\n-        if( m_hasHitEOF )\n-        {\n-            m_currEntry \u003d null;\n-        }\n-        else\n-        {\n-            m_currEntry \u003d new TarArchiveEntry( headerBuf );\n-\n-            if( !( headerBuf[ 257 ] \u003d\u003d \u0027u\u0027 \u0026\u0026 headerBuf[ 258 ] \u003d\u003d \u0027s\u0027 \u0026\u0026\n-                headerBuf[ 259 ] \u003d\u003d \u0027t\u0027 \u0026\u0026 headerBuf[ 260 ] \u003d\u003d \u0027a\u0027 \u0026\u0026\n-                headerBuf[ 261 ] \u003d\u003d \u0027r\u0027 ) )\n-            {\n-                //Must be v7Format\n-            }\n-\n-            if( m_debug )\n-            {\n-                final String message \u003d \"TarInputStream: SET CURRENTRY \u0027\" +\n-                    m_currEntry.getName() + \"\u0027 size \u003d \" + m_currEntry.getSize();\n-                debug( message );\n-            }\n-\n-            m_entryOffset \u003d 0;\n-\n-            // REVIEW How do we resolve this discrepancy?!\n-            m_entrySize \u003d (int)m_currEntry.getSize();\n-        }\n-\n-        if( null !\u003d m_currEntry \u0026\u0026 m_currEntry.isGNULongNameEntry() )\n-        {\n-            // read in the name\n-            final StringBuffer longName \u003d new StringBuffer();\n-            final byte[] buffer \u003d new byte[ 256 ];\n-            int length \u003d 0;\n-            while( ( length \u003d read( buffer ) ) \u003e\u003d 0 )\n-            {\n-                final String str \u003d new String( buffer, 0, length );\n-                longName.append( str );\n-            }\n-            getNextEntry();\n-\n-            // remove trailing null terminator\n-            if (longName.length() \u003e 0\n-                \u0026\u0026 longName.charAt(longName.length() - 1) \u003d\u003d 0) {\n-                longName.deleteCharAt(longName.length() - 1);\n-            }\n-            \n-            m_currEntry.setName( longName.toString() );\n-        }\n-\n-        return m_currEntry;\n+    public void close() throws IOException {\n+        buffer.close();\n     }\n \n     /**\n@@ -211,68 +115,55 @@\n      *\n      * @return The TarBuffer record size.\n      */\n-    public int getRecordSize()\n-    {\n-        return m_buffer.getRecordSize();\n+    public int getRecordSize() {\n+        return buffer.getRecordSize();\n     }\n \n     /**\n-     * Get the available data that can be read from the current entry in the\n-     * archive. This does not indicate how much data is left in the entire\n-     * archive, only in the current entry. This value is determined from the\n-     * entry\u0027s size header field and the amount of data already read from the\n-     * current entry.\n+     * Get the available data that can be read from the current\n+     * entry in the archive. This does not indicate how much data\n+     * is left in the entire archive, only in the current entry.\n+     * This value is determined from the entry\u0027s size header field\n+     * and the amount of data already read from the current entry.\n+     * Integer.MAX_VALUE is returen in case more than Integer.MAX_VALUE\n+     * bytes are left in the current entry in the archive.\n      *\n      * @return The number of available bytes for the current entry.\n-     * @exception IOException when an IO error causes operation to fail\n+     * @throws IOException for signature\n      */\n-    public int available()\n-        throws IOException\n-    {\n-        return m_entrySize - m_entryOffset;\n+    public int available() throws IOException {\n+        if (entrySize - entryOffset \u003e Integer.MAX_VALUE) {\n+            return Integer.MAX_VALUE;\n+        }\n+        return (int) (entrySize - entryOffset);\n     }\n \n     /**\n-     * Closes this stream. Calls the TarBuffer\u0027s close() method.\n+     * Skip bytes in the input buffer. This skips bytes in the\n+     * current entry\u0027s data, not the entire archive, and will\n+     * stop at the end of the current entry\u0027s data if the number\n+     * to skip extends beyond that point.\n      *\n-     * @exception IOException when an IO error causes operation to fail\n+     * @param numToSkip The number of bytes to skip.\n+     * @return the number actually skipped\n+     * @throws IOException on error\n      */\n-    public void close()\n-        throws IOException\n-    {\n-        m_buffer.close();\n-    }\n-\n-    /**\n-     * Copies the contents of the current tar archive entry directly into an\n-     * output stream.\n-     *\n-     * @param output The OutputStream into which to write the entry\u0027s data.\n-     * @exception IOException when an IO error causes operation to fail\n-     */\n-    public void copyEntryContents( final OutputStream output )\n-        throws IOException\n-    {\n-        final byte[] buffer \u003d new byte[ 32 * 1024 ];\n-        while( true )\n-        {\n-            final int numRead \u003d read( buffer, 0, buffer.length );\n-            if( numRead \u003d\u003d -1 )\n-            {\n+    public long skip(long numToSkip) throws IOException {\n+        // REVIEW\n+        // This is horribly inefficient, but it ensures that we\n+        // properly skip over bytes via the TarBuffer...\n+        //\n+        byte[] skipBuf \u003d new byte[BUFFER_SIZE];\n+        long skip \u003d numToSkip;\n+        while (skip \u003e 0) {\n+            int realSkip \u003d (int) (skip \u003e skipBuf.length ? skipBuf.length : skip);\n+            int numRead \u003d read(skipBuf, 0, realSkip);\n+            if (numRead \u003d\u003d -1) {\n                 break;\n             }\n-\n-            output.write( buffer, 0, numRead );\n+            skip -\u003d numRead;\n         }\n-    }\n-\n-    /**\n-     * Since we do not support marking just yet, we do nothing.\n-     *\n-     * @param markLimit The limit to mark.\n-     */\n-    public void mark( int markLimit )\n-    {\n+        return (numToSkip - skip);\n     }\n \n     /**\n@@ -280,189 +171,227 @@\n      *\n      * @return False.\n      */\n-    public boolean markSupported()\n-    {\n+    public boolean markSupported() {\n         return false;\n     }\n \n     /**\n-     * Reads a byte from the current tar archive entry. This method simply calls\n-     * read( byte[], int, int ).\n+     * Since we do not support marking just yet, we do nothing.\n      *\n-     * @return The byte read, or -1 at EOF.\n-     * @exception IOException when an IO error causes operation to fail\n+     * @param markLimit The limit to mark.\n      */\n-    public int read()\n-        throws IOException\n-    {\n-        final int num \u003d read( m_oneBuf, 0, 1 );\n-        if( num \u003d\u003d -1 )\n-        {\n-            return num;\n-        }\n-        else\n-        {\n-            return (int)m_oneBuf[ 0 ] \u0026 0xFF;\n-        }\n-    }\n-\n-    /**\n-     * Reads bytes from the current tar archive entry. This method simply calls\n-     * read( byte[], int, int ).\n-     *\n-     * @param buffer The buffer into which to place bytes read.\n-     * @return The number of bytes read, or -1 at EOF.\n-     * @exception IOException when an IO error causes operation to fail\n-     */\n-    public int read( final byte[] buffer )\n-        throws IOException\n-    {\n-        return read( buffer, 0, buffer.length );\n-    }\n-\n-    /**\n-     * Reads bytes from the current tar archive entry. This method is aware of\n-     * the boundaries of the current entry in the archive and will deal with\n-     * them as if they were this stream\u0027s start and EOF.\n-     *\n-     * @param buffer The buffer into which to place bytes read.\n-     * @param offset The offset at which to place bytes read.\n-     * @param count The number of bytes to read.\n-     * @return The number of bytes read, or -1 at EOF.\n-     * @exception IOException when an IO error causes operation to fail\n-     */\n-    public int read( final byte[] buffer,\n-                     final int offset,\n-                     final int count )\n-        throws IOException\n-    {\n-        int position \u003d offset;\n-        int numToRead \u003d count;\n-        int totalRead \u003d 0;\n-\n-        if( m_entryOffset \u003e\u003d m_entrySize )\n-        {\n-            return -1;\n-        }\n-\n-        if( ( numToRead + m_entryOffset ) \u003e m_entrySize )\n-        {\n-            numToRead \u003d ( m_entrySize - m_entryOffset );\n-        }\n-\n-        if( null !\u003d m_readBuf )\n-        {\n-            final int size \u003d\n-                ( numToRead \u003e m_readBuf.length ) ? m_readBuf.length : numToRead;\n-\n-            System.arraycopy( m_readBuf, 0, buffer, position, size );\n-\n-            if( size \u003e\u003d m_readBuf.length )\n-            {\n-                m_readBuf \u003d null;\n-            }\n-            else\n-            {\n-                final int newLength \u003d m_readBuf.length - size;\n-                final byte[] newBuffer \u003d new byte[ newLength ];\n-\n-                System.arraycopy( m_readBuf, size, newBuffer, 0, newLength );\n-\n-                m_readBuf \u003d newBuffer;\n-            }\n-\n-            totalRead +\u003d size;\n-            numToRead -\u003d size;\n-            position +\u003d size;\n-        }\n-\n-        while( numToRead \u003e 0 )\n-        {\n-            final byte[] rec \u003d m_buffer.readRecord();\n-            if( null \u003d\u003d rec )\n-            {\n-                // Unexpected EOF!\n-                final String message \u003d\n-                    \"unexpected EOF with \" + numToRead + \" bytes unread\";\n-                throw new IOException( message );\n-            }\n-\n-            int size \u003d numToRead;\n-            final int recordLength \u003d rec.length;\n-\n-            if( recordLength \u003e size )\n-            {\n-                System.arraycopy( rec, 0, buffer, position, size );\n-\n-                m_readBuf \u003d new byte[ recordLength - size ];\n-\n-                System.arraycopy( rec, size, m_readBuf, 0, recordLength - size );\n-            }\n-            else\n-            {\n-                size \u003d recordLength;\n-\n-                System.arraycopy( rec, 0, buffer, position, recordLength );\n-            }\n-\n-            totalRead +\u003d size;\n-            numToRead -\u003d size;\n-            position +\u003d size;\n-        }\n-\n-        m_entryOffset +\u003d totalRead;\n-\n-        return totalRead;\n+    public void mark(int markLimit) {\n     }\n \n     /**\n      * Since we do not support marking just yet, we do nothing.\n      */\n-    public void reset()\n-    {\n+    public void reset() {\n     }\n \n     /**\n-     * Skip bytes in the input buffer. This skips bytes in the current entry\u0027s\n-     * data, not the entire archive, and will stop at the end of the current\n-     * entry\u0027s data if the number to skip extends beyond that point.\n+     * Get the next entry in this tar archive. This will skip\n+     * over any remaining data in the current entry, if there\n+     * is one, and place the input stream at the header of the\n+     * next entry, and read the header and instantiate a new\n+     * TarEntry from the header bytes and return that entry.\n+     * If there are no more entries in the archive, null will\n+     * be returned to indicate that the end of the archive has\n+     * been reached.\n      *\n-     * @param numToSkip The number of bytes to skip.\n-     * @exception IOException when an IO error causes operation to fail\n+     * @return The next TarEntry in the archive, or null.\n+     * @throws IOException on error\n      */\n-    public void skip( final int numToSkip )\n-        throws IOException\n-    {\n-        // REVIEW\n-        // This is horribly inefficient, but it ensures that we\n-        // properly skip over bytes via the TarBuffer...\n-        //\n-        final byte[] skipBuf \u003d new byte[ 8 * 1024 ];\n-        int num \u003d numToSkip;\n-        while( num \u003e 0 )\n-        {\n-            final int count \u003d ( num \u003e skipBuf.length ) ? skipBuf.length : num;\n-            final int numRead \u003d read( skipBuf, 0, count );\n-            if( numRead \u003d\u003d -1 )\n-            {\n+    public TarArchiveEntry getNextEntry() throws IOException {\n+        if (hasHitEOF) {\n+            return null;\n+        }\n+\n+        if (currEntry !\u003d null) {\n+            long numToSkip \u003d entrySize - entryOffset;\n+\n+            if (debug) {\n+                System.err.println(\"TarInputStream: SKIP currENTRY \u0027\"\n+                        + currEntry.getName() + \"\u0027 SZ \"\n+                        + entrySize + \" OFF \"\n+                        + entryOffset + \"  skipping \"\n+                        + numToSkip + \" bytes\");\n+            }\n+\n+            if (numToSkip \u003e 0) {\n+                skip(numToSkip);\n+            }\n+\n+            readBuf \u003d null;\n+        }\n+\n+        byte[] headerBuf \u003d buffer.readRecord();\n+\n+        if (headerBuf \u003d\u003d null) {\n+            if (debug) {\n+                System.err.println(\"READ NULL RECORD\");\n+            }\n+            hasHitEOF \u003d true;\n+        } else if (buffer.isEOFRecord(headerBuf)) {\n+            if (debug) {\n+                System.err.println(\"READ EOF RECORD\");\n+            }\n+            hasHitEOF \u003d true;\n+        }\n+\n+        if (hasHitEOF) {\n+            currEntry \u003d null;\n+        } else {\n+            currEntry \u003d new TarArchiveEntry(headerBuf);\n+\n+            if (debug) {\n+                System.err.println(\"TarInputStream: SET CURRENTRY \u0027\"\n+                        + currEntry.getName()\n+                        + \"\u0027 size \u003d \"\n+                        + currEntry.getSize());\n+            }\n+\n+            entryOffset \u003d 0;\n+\n+            entrySize \u003d currEntry.getSize();\n+        }\n+\n+        if (currEntry !\u003d null \u0026\u0026 currEntry.isGNULongNameEntry()) {\n+            // read in the name\n+            StringBuffer longName \u003d new StringBuffer();\n+            byte[] buf \u003d new byte[SMALL_BUFFER_SIZE];\n+            int length \u003d 0;\n+            while ((length \u003d read(buf)) \u003e\u003d 0) {\n+                longName.append(new String(buf, 0, length));\n+            }\n+            getNextEntry();\n+            if (currEntry \u003d\u003d null) {\n+                // Bugzilla: 40334\n+                // Malformed tar file - long entry name not followed by entry\n+                return null;\n+            }\n+            // remove trailing null terminator\n+            if (longName.length() \u003e 0\n+                \u0026\u0026 longName.charAt(longName.length() - 1) \u003d\u003d 0) {\n+                longName.deleteCharAt(longName.length() - 1);\n+            }\n+            currEntry.setName(longName.toString());\n+        }\n+\n+        return currEntry;\n+    }\n+\n+    /**\n+     * Reads a byte from the current tar archive entry.\n+     *\n+     * This method simply calls read( byte[], int, int ).\n+     *\n+     * @return The byte read, or -1 at EOF.\n+     * @throws IOException on error\n+     */\n+    public int read() throws IOException {\n+        int num \u003d read(oneBuf, 0, 1);\n+        return num \u003d\u003d -1 ? -1 : ((int) oneBuf[0]) \u0026 BYTE_MASK;\n+    }\n+\n+    /**\n+     * Reads bytes from the current tar archive entry.\n+     *\n+     * This method is aware of the boundaries of the current\n+     * entry in the archive and will deal with them as if they\n+     * were this stream\u0027s start and EOF.\n+     *\n+     * @param buf The buffer into which to place bytes read.\n+     * @param offset The offset at which to place bytes read.\n+     * @param numToRead The number of bytes to read.\n+     * @return The number of bytes read, or -1 at EOF.\n+     * @throws IOException on error\n+     */\n+    public int read(byte[] buf, int offset, int numToRead) throws IOException {\n+        int totalRead \u003d 0;\n+\n+        if (entryOffset \u003e\u003d entrySize) {\n+            return -1;\n+        }\n+\n+        if ((numToRead + entryOffset) \u003e entrySize) {\n+            numToRead \u003d (int) (entrySize - entryOffset);\n+        }\n+\n+        if (readBuf !\u003d null) {\n+            int sz \u003d (numToRead \u003e readBuf.length) ? readBuf.length\n+                    : numToRead;\n+\n+            System.arraycopy(readBuf, 0, buf, offset, sz);\n+\n+            if (sz \u003e\u003d readBuf.length) {\n+                readBuf \u003d null;\n+            } else {\n+                int newLen \u003d readBuf.length - sz;\n+                byte[] newBuf \u003d new byte[newLen];\n+\n+                System.arraycopy(readBuf, sz, newBuf, 0, newLen);\n+\n+                readBuf \u003d newBuf;\n+            }\n+\n+            totalRead +\u003d sz;\n+            numToRead -\u003d sz;\n+            offset +\u003d sz;\n+        }\n+\n+        while (numToRead \u003e 0) {\n+            byte[] rec \u003d buffer.readRecord();\n+\n+            if (rec \u003d\u003d null) {\n+                // Unexpected EOF!\n+                throw new IOException(\"unexpected EOF with \" + numToRead\n+                        + \" bytes unread\");\n+            }\n+\n+            int sz \u003d numToRead;\n+            int recLen \u003d rec.length;\n+\n+            if (recLen \u003e sz) {\n+                System.arraycopy(rec, 0, buf, offset, sz);\n+\n+                readBuf \u003d new byte[recLen - sz];\n+\n+                System.arraycopy(rec, sz, readBuf, 0, recLen - sz);\n+            } else {\n+                sz \u003d recLen;\n+\n+                System.arraycopy(rec, 0, buf, offset, recLen);\n+            }\n+\n+            totalRead +\u003d sz;\n+            numToRead -\u003d sz;\n+            offset +\u003d sz;\n+        }\n+\n+        entryOffset +\u003d totalRead;\n+\n+        return totalRead;\n+    }\n+\n+    /**\n+     * Copies the contents of the current tar archive entry directly into\n+     * an output stream.\n+     *\n+     * @param out The OutputStream into which to write the entry\u0027s data.\n+     * @throws IOException on error\n+     */\n+    public void copyEntryContents(OutputStream out) throws IOException {\n+        byte[] buf \u003d new byte[LARGE_BUFFER_SIZE];\n+\n+        while (true) {\n+            int numRead \u003d read(buf, 0, buf.length);\n+\n+            if (numRead \u003d\u003d -1) {\n                 break;\n             }\n \n-            num -\u003d numRead;\n-        }\n-    }\n-\n-    /**\n-     * Utility method to do debugging.\n-     * Capable of being overidden in sub-classes.\n-     *\n-     * @param message the message to use in debugging\n-     */\n-    protected void debug( final String message )\n-    {\n-        if( m_debug )\n-        {\n-            System.err.println( message );\n+            out.write(buf, 0, numRead);\n         }\n     }\n }\n",
      "operations": [
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [1144,1366]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "FieldDeclaration [1427,1476]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldDeclaration [1481,1529]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldDeclaration [1534,1589]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldDeclaration [1594,1636]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldDeclaration [1717,1745]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [2177,2390]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [4556,5538]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: private [1427,1434]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: static [1435,1441]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: final [1442,1447]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "PrimitiveType: int [1448,1451]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "VariableDeclarationFragment [1452,1475]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [1916,2101]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Javadoc [2396,2533]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Javadoc [3754,4341]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Javadoc [6009,6576]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: SMALL_BUFFER_SIZE [1452,1469]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [2407,2438]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [2446,2479]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [3013,3033]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [3077,3096]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [3105,3128]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [3765,4217]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [4398,4496]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ReturnStatement [4505,4544]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [6020,6467]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ReturnStatement [8953,8970]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ReturnStatement [9291,9345]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [10060,10171]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "IfStatement [10181,10768]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: were this stream\u0027s start and EOF. [9554,9587]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "InfixExpression [10185,10200]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldAccess [2949,2960]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldAccess [3042,3053]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldAccess [3288,3298]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [8030,8062]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "IfStatement [8474,8654]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "IfStatement [10377,10673]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "InfixExpression [8478,8495]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Block [8497,8654]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "InfixExpression [10381,10401]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [6830,7088]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [7788,7972]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "ConditionalExpression [10225,10302]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [10474,10507]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ThrowStatement [10931,11031]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "NullLiteral [8635,8639]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ParenthesizedExpression [10225,10253]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "QualifiedName: readBuf.length [10256,10270]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: LARGE_BUFFER_SIZE [11952,11969]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "StringLiteral: \"READ NULL RECORD\" [7366,7384]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: SMALL_BUFFER_SIZE [8263,8280]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "StringLiteral: \"READ EOF RECORD\" [7543,7560]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "Javadoc [978,1194]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "FieldDeclaration [1421,1449]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [1514,1923]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [1940,2040]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [2055,2104]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [2158,2191]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Javadoc [1929,2199]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: final [2227,2232]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: final [2279,2284]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: stream, block size and record sizes. [2449,2485]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: final [2679,2684]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: final [2731,2736]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: final [2779,2784]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: m_buffer [2841,2849]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: m_oneBuf [2907,2915]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: final [3061,3066]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: m_debug [3097,3104]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [6745,7066]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Javadoc [6734,7221]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ReturnStatement [7290,7325]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [3172,3605]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Javadoc [3161,3733]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: final [3937,3942]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: final [4451,4456]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [4553,4639]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [4757,4842]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [4045,4256]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [4273,4290]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: m_hasHitEOF [4898,4909]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "PrefixExpression [5064,5232]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "IfStatement [5060,5297]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [5311,5542]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [5647,5688]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Block [4985,5698]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "IfStatement [4894,5698]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: final [5824,5829]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: final [5886,5891]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: final [6037,6042]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [6043,6049]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: str [6050,6053]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "VariableDeclarationFragment [6050,6087]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "VariableDeclarationStatement [6037,6088]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: str [6122,6125]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: m_currEntry [6494,6505]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: final [8927,8932]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [8975,9113]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [9125,9578]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: final [10139,10144]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: final [10181,10186]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: final [10220,10225]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "PrimitiveType: int [10279,10282]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: position [10283,10291]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "VariableDeclarationFragment [10283,10300]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "VariableDeclarationStatement [10279,10301]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [10638,10735]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [10960,11006]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: final [11023,11028]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "InfixExpression [10824,10848]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "IfStatement [10820,11203]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [10456,10582]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "InfixExpression [10596,10613]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "IfStatement [10592,11306]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: final [11361,11366]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [11498,11594]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ThrowStatement [11611,11644]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: final [11706,11711]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: final [7888,7893]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: final [7957,7962]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "InfixExpression [7989,7998]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: final [8046,8051]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [12477,13455]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "Javadoc [13461,13622]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: protected [13627,13636]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "PrimitiveType: void [13637,13641]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: debug [13642,13647]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SingleVariableDeclaration [13649,13669]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: message [13742,13749]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Block [13676,13768]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "MethodDeclaration [13461,13768]",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java",
        "src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "closeEntry",
            "putNextEntry",
            "TarOutputStream",
            "TarOutputStream",
            "close",
            "getRecordSize",
            "write",
            "copyEntryContents",
            "setBufferDebug",
            "write",
            "TarOutputStream",
            "write",
            "setLongFileMode",
            "writeEOFRecord",
            "finish"
          ],
          "num": 15
        },
        {
          "qualified_names": [
            "close",
            "finish",
            "setBufferDebug",
            "getRecordSize",
            "TarOutputStream",
            "setLongFileMode",
            "writeEOFRecord",
            "setDebug",
            "write",
            "write",
            "putNextEntry",
            "TarOutputStream",
            "TarOutputStream",
            "closeEntry",
            "write"
          ],
          "num": 15
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "27",
            "28",
            "29",
            "31",
            "32",
            "33",
            "34",
            "35",
            "36",
            "37",
            "38",
            "41",
            "42",
            "43",
            "44",
            "45",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "57",
            "58",
            "59",
            "60",
            "61",
            "62",
            "64",
            "65",
            "68",
            "69",
            "70",
            "71",
            "72",
            "73",
            "75",
            "76",
            "77",
            "81",
            "82",
            "83",
            "84",
            "85",
            "86",
            "88",
            "89",
            "90",
            "91",
            "95",
            "96",
            "97",
            "98",
            "99",
            "100",
            "102",
            "103",
            "104",
            "105",
            "106",
            "108",
            "109",
            "110",
            "111",
            "112",
            "118",
            "120",
            "121",
            "122",
            "126",
            "127",
            "128",
            "129",
            "130",
            "132",
            "133",
            "134",
            "135",
            "136",
            "137",
            "138",
            "140",
            "148",
            "149",
            "150",
            "154",
            "155",
            "157",
            "159",
            "160",
            "161",
            "162",
            "163",
            "164",
            "166",
            "167",
            "168",
            "169",
            "170",
            "171",
            "172",
            "173",
            "174",
            "175",
            "176",
            "177",
            "178",
            "179",
            "180",
            "181",
            "182",
            "183",
            "184",
            "185",
            "186",
            "187",
            "188",
            "189",
            "190",
            "191",
            "192",
            "193",
            "194",
            "195",
            "196",
            "197",
            "198",
            "199",
            "200",
            "201",
            "202",
            "203",
            "204",
            "205",
            "206",
            "207",
            "208",
            "209",
            "210",
            "211",
            "212",
            "213",
            "214",
            "215",
            "216",
            "217",
            "218",
            "219",
            "220",
            "221",
            "222",
            "223",
            "224",
            "225",
            "226",
            "227",
            "228",
            "229",
            "230",
            "231",
            "232",
            "233",
            "235",
            "236",
            "237",
            "239",
            "240",
            "241",
            "242",
            "244",
            "245",
            "246",
            "247",
            "248",
            "249",
            "253",
            "254",
            "256",
            "258",
            "259",
            "260",
            "262",
            "263",
            "264",
            "265",
            "269",
            "270",
            "271",
            "272",
            "273",
            "275",
            "276",
            "277",
            "278",
            "279",
            "280",
            "281",
            "282",
            "283",
            "284",
            "287",
            "292",
            "293",
            "295",
            "296",
            "298",
            "299",
            "300",
            "301",
            "303",
            "307",
            "308",
            "310",
            "311",
            "313",
            "314",
            "315",
            "316",
            "320",
            "321",
            "322",
            "323",
            "324",
            "325",
            "327",
            "328",
            "329",
            "330",
            "332",
            "333",
            "334",
            "335",
            "336",
            "337",
            "338",
            "339",
            "340",
            "341",
            "342",
            "343",
            "353",
            "354",
            "355",
            "356",
            "357",
            "359",
            "360",
            "361",
            "362",
            "363",
            "365",
            "366",
            "367",
            "368",
            "369",
            "370",
            "371",
            "372",
            "373",
            "375",
            "376",
            "386",
            "387",
            "388",
            "389",
            "390",
            "391",
            "393",
            "398",
            "400",
            "402",
            "404",
            "409",
            "410",
            "411",
            "412",
            "414",
            "415",
            "416",
            "417",
            "418",
            "419",
            "422"
          ],
          "num": 284
        },
        {
          "qualified_names": [
            "27",
            "28",
            "29",
            "30",
            "32",
            "33",
            "36",
            "39",
            "42",
            "43",
            "44",
            "45",
            "46",
            "47",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "55",
            "58",
            "59",
            "61",
            "62",
            "66",
            "67",
            "68",
            "70",
            "71",
            "75",
            "76",
            "77",
            "78",
            "80",
            "81",
            "83",
            "84",
            "85",
            "86",
            "87",
            "88",
            "89",
            "90",
            "91",
            "92",
            "93",
            "94",
            "95",
            "96",
            "97",
            "98",
            "99",
            "100",
            "101",
            "102",
            "103",
            "104",
            "105",
            "106",
            "107",
            "108",
            "109",
            "115",
            "117",
            "118",
            "122",
            "123",
            "124",
            "126",
            "127",
            "128",
            "129",
            "130",
            "131",
            "132",
            "133",
            "134",
            "135",
            "136",
            "137",
            "138",
            "139",
            "140",
            "141",
            "142",
            "143",
            "144",
            "153",
            "154",
            "158",
            "159",
            "160",
            "161",
            "162",
            "163",
            "164",
            "166",
            "167",
            "169",
            "170",
            "172",
            "173",
            "175",
            "176",
            "178",
            "179",
            "180",
            "181",
            "183",
            "184",
            "185",
            "186",
            "190",
            "191",
            "193",
            "195",
            "196",
            "197",
            "198",
            "200",
            "204",
            "205",
            "206",
            "207",
            "208",
            "209",
            "210",
            "211",
            "213",
            "214",
            "215",
            "216",
            "219",
            "220",
            "221",
            "222",
            "223",
            "224",
            "225",
            "226",
            "227",
            "228",
            "229",
            "234",
            "236",
            "237",
            "238",
            "239",
            "241",
            "242",
            "244",
            "248",
            "250",
            "251",
            "252",
            "253",
            "255",
            "256",
            "260",
            "261",
            "262",
            "263",
            "264",
            "265",
            "266",
            "268",
            "269",
            "270",
            "271",
            "273",
            "274",
            "275",
            "276",
            "277",
            "278",
            "279",
            "289",
            "290",
            "291",
            "293",
            "294",
            "295",
            "296",
            "297",
            "299",
            "300",
            "301",
            "302",
            "303",
            "304",
            "305",
            "307",
            "308",
            "318",
            "319",
            "320",
            "321",
            "323",
            "328",
            "330",
            "332",
            "334",
            "339",
            "340",
            "342",
            "343",
            "344",
            "347"
          ],
          "num": 209
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java b/src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java\nindex bf73b9b..49f9d87 100644\n--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java\n@@ -24,120 +24,125 @@\n import java.io.OutputStream;\n \n /**\n- * The TarOutputStream writes a UNIX tar archive as an OutputStream. Methods are\n- * provided to put entries, and then write their contents by writing to this\n- * stream using write().\n+ * The TarOutputStream writes a UNIX tar archive as an OutputStream.\n+ * Methods are provided to put entries, and then write their contents\n+ * by writing to this stream using write().\n+ *\n  */\n-public class TarOutputStream\n-    extends FilterOutputStream\n-{\n-    /**\n-     * Flag to indicate that an error should be generated if\n-     * an attempt is made to write an entry that exceeds the 100 char\n-     * POSIX limit.\n-     */\n+public class TarOutputStream extends FilterOutputStream {\n+    /** Fail if a long file name is required in the archive. */\n     public static final int LONGFILE_ERROR \u003d 0;\n \n-    /**\n-     * Flag to indicate that entry name should be truncated if\n-     * an attempt is made to write an entry that exceeds the 100 char\n-     * POSIX limit.\n-     */\n+    /** Long paths will be truncated in the archive. */\n     public static final int LONGFILE_TRUNCATE \u003d 1;\n \n-    /**\n-     * Flag to indicate that entry name should be formatted\n-     * according to GNU tar extension if an attempt is made\n-     * to write an entry that exceeds the 100 char POSIX\n-     * limit. Note that this makes the jar unreadable by\n-     * non-GNU tar commands.\n-     */\n+    /** GNU tar extensions are used to store long file names in the archive. */\n     public static final int LONGFILE_GNU \u003d 2;\n \n-    private int m_longFileMode \u003d LONGFILE_ERROR;\n-    private byte[] m_assemBuf;\n-    private int m_assemLen;\n-    private TarBuffer m_buffer;\n-    private int m_currBytes;\n-    private int m_currSize;\n+    // CheckStyle:VisibilityModifier OFF - bc\n+    protected boolean   debug;\n+    protected long      currSize;\n+    protected String    currName;\n+    protected long      currBytes;\n+    protected byte[]    oneBuf;\n+    protected byte[]    recordBuf;\n+    protected int       assemLen;\n+    protected byte[]    assemBuf;\n+    protected TarBuffer buffer;\n+    protected int       longFileMode \u003d LONGFILE_ERROR;\n+    // CheckStyle:VisibilityModifier ON\n \n-    private byte[] m_oneBuf;\n-    private byte[] m_recordBuf;\n+    private boolean closed \u003d false;\n \n     /**\n-     * Construct a TarOutputStream using specified input\n-     * stream and default block and record sizes.\n-     *\n-     * @param output stream to create TarOutputStream from\n-     * @see TarBuffer#DEFAULT_BLOCKSIZE\n-     * @see TarBuffer#DEFAULT_RECORDSIZE\n+     * Constructor for TarInputStream.\n+     * @param os the output stream to use\n      */\n-    public TarOutputStream( final OutputStream output )\n-    {\n-        this( output, TarBuffer.DEFAULT_BLOCKSIZE, TarBuffer.DEFAULT_RECORDSIZE );\n+    public TarOutputStream(OutputStream os) {\n+        this(os, TarBuffer.DEFAULT_BLKSIZE, TarBuffer.DEFAULT_RCDSIZE);\n     }\n \n     /**\n-     * Construct a TarOutputStream using specified input\n-     * stream, block size and default record sizes.\n-     *\n-     * @param output stream to create TarOutputStream from\n-     * @param blockSize the block size\n-     * @see TarBuffer#DEFAULT_RECORDSIZE\n+     * Constructor for TarInputStream.\n+     * @param os the output stream to use\n+     * @param blockSize the block size to use\n      */\n-    public TarOutputStream( final OutputStream output,\n-                            final int blockSize )\n-    {\n-        this( output, blockSize, TarBuffer.DEFAULT_RECORDSIZE );\n+    public TarOutputStream(OutputStream os, int blockSize) {\n+        this(os, blockSize, TarBuffer.DEFAULT_RCDSIZE);\n     }\n \n     /**\n-     * Construct a TarOutputStream using specified input\n-     * stream, block size and record sizes.\n-     *\n-     * @param output stream to create TarOutputStream from\n-     * @param blockSize the block size\n-     * @param recordSize the record size\n+     * Constructor for TarInputStream.\n+     * @param os the output stream to use\n+     * @param blockSize the block size to use\n+     * @param recordSize the record size to use\n      */\n-    public TarOutputStream( final OutputStream output,\n-                            final int blockSize,\n-                            final int recordSize )\n-    {\n-        super( output );\n+    public TarOutputStream(OutputStream os, int blockSize, int recordSize) {\n+        super(os);\n \n-        m_buffer \u003d new TarBuffer( output, blockSize, recordSize );\n-        m_assemLen \u003d 0;\n-        m_assemBuf \u003d new byte[ recordSize ];\n-        m_recordBuf \u003d new byte[ recordSize ];\n-        m_oneBuf \u003d new byte[ 1 ];\n+        this.buffer \u003d new TarBuffer(os, blockSize, recordSize);\n+        this.debug \u003d false;\n+        this.assemLen \u003d 0;\n+        this.assemBuf \u003d new byte[recordSize];\n+        this.recordBuf \u003d new byte[recordSize];\n+        this.oneBuf \u003d new byte[1];\n+    }\n+\n+    /**\n+     * Set the long file mode.\n+     * This can be LONGFILE_ERROR(0), LONGFILE_TRUNCATE(1) or LONGFILE_GNU(2).\n+     * This specifies the treatment of long file names (names \u003e\u003d TarConstants.NAMELEN).\n+     * Default is LONGFILE_ERROR.\n+     * @param longFileMode the mode to use\n+     */\n+    public void setLongFileMode(int longFileMode) {\n+        this.longFileMode \u003d longFileMode;\n+    }\n+\n+\n+    /**\n+     * Sets the debugging flag.\n+     *\n+     * @param debugF True to turn on debugging.\n+     */\n+    public void setDebug(boolean debugF) {\n+        this.debug \u003d debugF;\n     }\n \n     /**\n      * Sets the debugging flag in this stream\u0027s TarBuffer.\n      *\n-     * @param debug The new BufferDebug value\n+     * @param debug True to turn on debugging.\n      */\n-    public void setBufferDebug( boolean debug )\n-    {\n-        m_buffer.setDebug( debug );\n+    public void setBufferDebug(boolean debug) {\n+        buffer.setDebug(debug);\n     }\n \n     /**\n-     * Set the mode used to work with entrys exceeding\n-     * 100 chars (and thus break the POSIX standard).\n-     * Must be one of the LONGFILE_* constants.\n-     *\n-     * @param longFileMode the mode\n+     * Ends the TAR archive without closing the underlying OutputStream.\n+     * The result is that the two EOF records of nulls are written.\n+     * @throws IOException on error\n      */\n-    public void setLongFileMode( final int longFileMode )\n-    {\n-        if( LONGFILE_ERROR !\u003d longFileMode \u0026\u0026\n-            LONGFILE_GNU !\u003d longFileMode \u0026\u0026\n-            LONGFILE_TRUNCATE !\u003d longFileMode )\n-        {\n-            throw new IllegalArgumentException( \"longFileMode\" );\n+    public void finish() throws IOException {\n+        // See Bugzilla 28776 for a discussion on this\n+        // http://issues.apache.org/bugzilla/show_bug.cgi?id\u003d28776\n+        writeEOFRecord();\n+        writeEOFRecord();\n+    }\n+\n+    /**\n+     * Ends the TAR archive and closes the underlying OutputStream.\n+     * This means that finish() is called followed by calling the\n+     * TarBuffer\u0027s close().\n+     * @throws IOException on error\n+     */\n+    public void close() throws IOException {\n+        if (!closed) {\n+            finish();\n+            buffer.close();\n+            out.close();\n+            closed \u003d true;\n         }\n-        m_longFileMode \u003d longFileMode;\n     }\n \n     /**\n@@ -145,202 +150,133 @@\n      *\n      * @return The TarBuffer record size.\n      */\n-    public int getRecordSize()\n-    {\n-        return m_buffer.getRecordSize();\n+    public int getRecordSize() {\n+        return buffer.getRecordSize();\n     }\n \n     /**\n-     * Ends the TAR archive and closes the underlying OutputStream. This means\n-     * that finish() is called followed by calling the TarBuffer\u0027s close().\n+     * Put an entry on the output stream. This writes the entry\u0027s\n+     * header record and positions the output stream for writing\n+     * the contents of the entry. Once this method is called, the\n+     * stream is ready for calls to write() to write the entry\u0027s\n+     * contents. Once the contents are written, closeEntry()\n+     * \u003cB\u003eMUST\u003c/B\u003e be called to ensure that all buffered data\n+     * is completely written to the output stream.\n      *\n-     * @exception IOException when an IO error causes operation to fail\n+     * @param entry The TarEntry to be written to the archive.\n+     * @throws IOException on error\n      */\n-    public void close()\n-        throws IOException\n-    {\n-        finish();\n-        m_buffer.close();\n-    }\n+    public void putNextEntry(TarArchiveEntry entry) throws IOException {\n+        if (entry.getName().length() \u003e\u003d TarConstants.NAMELEN) {\n \n-    /**\n-     * Close an entry. This method MUST be called for all file entries that\n-     * contain data. The reason is that we must buffer data written to the\n-     * stream in order to satisfy the buffer\u0027s record based writes. Thus, there\n-     * may be data fragments still being assembled that must be written to the\n-     * output stream before this entry is closed and the next entry written.\n-     *\n-     * @exception IOException when an IO error causes operation to fail\n-     */\n-    public void closeEntry()\n-        throws IOException\n-    {\n-        if( m_assemLen \u003e 0 )\n-        {\n-            for( int i \u003d m_assemLen; i \u003c m_assemBuf.length; ++i )\n-            {\n-                m_assemBuf[ i ] \u003d 0;\n-            }\n-\n-            m_buffer.writeRecord( m_assemBuf );\n-\n-            m_currBytes +\u003d m_assemLen;\n-            m_assemLen \u003d 0;\n-        }\n-\n-        if( m_currBytes \u003c m_currSize )\n-        {\n-            final String message \u003d \"entry closed at \u0027\" + m_currBytes +\n-                \"\u0027 before the \u0027\" + m_currSize +\n-                \"\u0027 bytes specified in the header were written\";\n-            throw new IOException( message );\n-        }\n-    }\n-\n-    /**\n-     * Ends the TAR archive without closing the underlying OutputStream. The\n-     * result is that the EOF record of nulls is written.\n-     *\n-     * @exception IOException when an IO error causes operation to fail\n-     */\n-    public void finish()\n-        throws IOException\n-    {\n-        writeEOFRecord();\n-    }\n-\n-    /**\n-     * Put an entry on the output stream. This writes the entry\u0027s header record\n-     * and positions the output stream for writing the contents of the entry.\n-     * Once this method is called, the stream is ready for calls to write() to\n-     * write the entry\u0027s contents. Once the contents are written, closeEntry()\n-     * \u003cB\u003eMUST\u003c/B\u003e be called to ensure that all buffered data is completely\n-     * written to the output stream.\n-     *\n-     * The entry must be 0 terminated. Maximum filename is 99 chars, \n-     * according to V7 specification.\n-     * \n-     * @param entry The TarArchiveEntry to be written to the archive.\n-     * @exception IOException when an IO error causes operation to fail\n-     */\n-    public void putNextEntry( final TarArchiveEntry entry )\n-        throws IOException\n-    {\n-        if( entry.getName().length() \u003e TarArchiveEntry.NAMELEN )\n-        {\n-            if( m_longFileMode \u003d\u003d LONGFILE_GNU )\n-            {\n-                // create a TarArchiveEntry for the LongLink, the contents\n+            if (longFileMode \u003d\u003d LONGFILE_GNU) {\n+                // create a TarEntry for the LongLink, the contents\n                 // of which are the entry\u0027s name\n-                final TarArchiveEntry longLinkEntry \u003d\n-                    new TarArchiveEntry( TarConstants.GNU_LONGLINK,\n-                                  TarConstants.LF_GNUTYPE_LONGNAME );\n+                TarArchiveEntry longLinkEntry \u003d new TarArchiveEntry(TarConstants.GNU_LONGLINK,\n+                                                      TarConstants.LF_GNUTYPE_LONGNAME);\n \n-                longLinkEntry.setSize( entry.getName().length() + 1);\n-                putNextEntry( longLinkEntry );\n-                write( entry.getName().getBytes() );\n-                write( 0 );\n+                longLinkEntry.setSize(entry.getName().length() + 1);\n+                putNextEntry(longLinkEntry);\n+                write(entry.getName().getBytes());\n+                write(0);\n                 closeEntry();\n-            }\n-            else if( m_longFileMode !\u003d LONGFILE_TRUNCATE )\n-            {\n-                final String message \u003d \"file name \u0027\" + entry.getName() +\n-                    \"\u0027 is too long ( \u003e \" + TarArchiveEntry.NAMELEN + \" bytes)\";\n-                throw new IOException( message );\n+            } else if (longFileMode !\u003d LONGFILE_TRUNCATE) {\n+                throw new RuntimeException(\"file name \u0027\" + entry.getName()\n+                                             + \"\u0027 is too long ( \u003e \"\n+                                             + TarConstants.NAMELEN + \" bytes)\");\n             }\n         }\n \n-        entry.writeEntryHeader( m_recordBuf );\n-        m_buffer.writeRecord( m_recordBuf );\n+        entry.writeEntryHeader(recordBuf);\n+        buffer.writeRecord(recordBuf);\n \n-        m_currBytes \u003d 0;\n+        currBytes \u003d 0;\n \n-        if( entry.isDirectory() )\n-        {\n-            m_currSize \u003d 0;\n+        if (entry.isDirectory()) {\n+            currSize \u003d 0;\n+        } else {\n+            currSize \u003d entry.getSize();\n         }\n-        else\n-        {\n-            m_currSize \u003d (int)entry.getSize();\n-        }\n+        currName \u003d entry.getName();\n     }\n \n     /**\n-     * Copies the contents of the specified stream into current tar\n-     * archive entry.\n-     *\n-     * @param input The InputStream from which to read entrys data\n-     * @exception IOException when an IO error causes operation to fail\n+     * Close an entry. This method MUST be called for all file\n+     * entries that contain data. The reason is that we must\n+     * buffer data written to the stream in order to satisfy\n+     * the buffer\u0027s record based writes. Thus, there may be\n+     * data fragments still being assembled that must be written\n+     * to the output stream before this entry is closed and the\n+     * next entry written.\n+     * @throws IOException on error\n      */\n-    public void copyEntryContents( final InputStream input )\n-        throws IOException\n-    {\n-        final byte[] buffer \u003d new byte[ 32 * 1024 ];\n-        while( true )\n-        {\n-            final int numRead \u003d input.read( buffer, 0, buffer.length );\n-            if( numRead \u003d\u003d -1 )\n-            {\n-                break;\n+    public void closeEntry() throws IOException {\n+        if (assemLen \u003e 0) {\n+            for (int i \u003d assemLen; i \u003c assemBuf.length; ++i) {\n+                assemBuf[i] \u003d 0;\n             }\n \n-            write( buffer, 0, numRead );\n+            buffer.writeRecord(assemBuf);\n+\n+            currBytes +\u003d assemLen;\n+            assemLen \u003d 0;\n+        }\n+\n+        if (currBytes \u003c currSize) {\n+            throw new IOException(\"entry \u0027\" + currName + \"\u0027 closed at \u0027\"\n+                                  + currBytes\n+                                  + \"\u0027 before the \u0027\" + currSize\n+                                  + \"\u0027 bytes specified in the header were written\");\n         }\n     }\n \n     /**\n-     * Writes a byte to the current tar archive entry. This method simply calls\n-     * read( byte[], int, int ).\n+     * Writes a byte to the current tar archive entry.\n      *\n-     * @param data The byte written.\n-     * @exception IOException when an IO error causes operation to fail\n+     * This method simply calls read( byte[], int, int ).\n+     *\n+     * @param b The byte written.\n+     * @throws IOException on error\n      */\n-    public void write( final int data )\n-        throws IOException\n-    {\n-        m_oneBuf[ 0 ] \u003d (byte)data;\n+    public void write(int b) throws IOException {\n+        oneBuf[0] \u003d (byte) b;\n \n-        write( m_oneBuf, 0, 1 );\n+        write(oneBuf, 0, 1);\n     }\n \n     /**\n-     * Writes bytes to the current tar archive entry. This method simply calls\n-     * write( byte[], int, int ).\n+     * Writes bytes to the current tar archive entry.\n      *\n-     * @param buffer The buffer to write to the archive.\n-     * @exception IOException when an IO error causes operation to fail\n+     * This method simply calls write( byte[], int, int ).\n+     *\n+     * @param wBuf The buffer to write to the archive.\n+     * @throws IOException on error\n      */\n-    public void write( final byte[] buffer )\n-        throws IOException\n-    {\n-        write( buffer, 0, buffer.length );\n+    public void write(byte[] wBuf) throws IOException {\n+        write(wBuf, 0, wBuf.length);\n     }\n \n     /**\n-     * Writes bytes to the current tar archive entry. This method is aware of\n-     * the current entry and will throw an exception if you attempt to write\n-     * bytes past the length specified for the current entry. The method is also\n-     * (painfully) aware of the record buffering required by TarBuffer, and\n-     * manages buffers that are not a multiple of recordsize in length,\n-     * including assembling records from small buffers.\n+     * Writes bytes to the current tar archive entry. This method\n+     * is aware of the current entry and will throw an exception if\n+     * you attempt to write bytes past the length specified for the\n+     * current entry. The method is also (painfully) aware of the\n+     * record buffering required by TarBuffer, and manages buffers\n+     * that are not a multiple of recordsize in length, including\n+     * assembling records from small buffers.\n      *\n-     * @param buffer The buffer to write to the archive.\n-     * @param offset The offset in the buffer from which to get bytes.\n-     * @param count The number of bytes to write.\n-     * @exception IOException when an IO error causes operation to fail\n+     * @param wBuf The buffer to write to the archive.\n+     * @param wOffset The offset in the buffer from which to get bytes.\n+     * @param numToWrite The number of bytes to write.\n+     * @throws IOException on error\n      */\n-    public void write( final byte[] buffer,\n-                       final int offset,\n-                       final int count )\n-        throws IOException\n-    {\n-        int position \u003d offset;\n-        int numToWrite \u003d count;\n-        if( ( m_currBytes + numToWrite ) \u003e m_currSize )\n-        {\n-            final String message \u003d \"request to write \u0027\" + numToWrite +\n-                \"\u0027 bytes exceeds size in header of \u0027\" + m_currSize + \"\u0027 bytes\";\n-            throw new IOException( message );\n+    public void write(byte[] wBuf, int wOffset, int numToWrite) throws IOException {\n+        if ((currBytes + numToWrite) \u003e currSize) {\n+            throw new IOException(\"request to write \u0027\" + numToWrite\n+                                  + \"\u0027 bytes exceeds size in header of \u0027\"\n+                                  + currSize + \"\u0027 bytes for entry \u0027\"\n+                                  + currName + \"\u0027\");\n+\n             //\n             // We have to deal with assembly!!!\n             // The programmer can be writing little 32 byte chunks for all\n@@ -350,30 +286,26 @@\n             //\n         }\n \n-        if( m_assemLen \u003e 0 )\n-        {\n-            if( ( m_assemLen + numToWrite ) \u003e\u003d m_recordBuf.length )\n-            {\n-                final int length \u003d m_recordBuf.length - m_assemLen;\n+        if (assemLen \u003e 0) {\n+            if ((assemLen + numToWrite) \u003e\u003d recordBuf.length) {\n+                int aLen \u003d recordBuf.length - assemLen;\n \n-                System.arraycopy( m_assemBuf, 0, m_recordBuf, 0,\n-                                  m_assemLen );\n-                System.arraycopy( buffer, position, m_recordBuf,\n-                                  m_assemLen, length );\n-                m_buffer.writeRecord( m_recordBuf );\n+                System.arraycopy(assemBuf, 0, recordBuf, 0,\n+                                 assemLen);\n+                System.arraycopy(wBuf, wOffset, recordBuf,\n+                                 assemLen, aLen);\n+                buffer.writeRecord(recordBuf);\n \n-                m_currBytes +\u003d m_recordBuf.length;\n-                position +\u003d length;\n-                numToWrite -\u003d length;\n-                m_assemLen \u003d 0;\n-            }\n-            else\n-            {\n-                System.arraycopy( buffer, position, m_assemBuf, m_assemLen,\n-                                  numToWrite );\n+                currBytes +\u003d recordBuf.length;\n+                wOffset +\u003d aLen;\n+                numToWrite -\u003d aLen;\n+                assemLen \u003d 0;\n+            } else {\n+                System.arraycopy(wBuf, wOffset, assemBuf, assemLen,\n+                                 numToWrite);\n \n-                position +\u003d numToWrite;\n-                m_assemLen +\u003d numToWrite;\n+                wOffset +\u003d numToWrite;\n+                assemLen +\u003d numToWrite;\n                 numToWrite -\u003d numToWrite;\n             }\n         }\n@@ -383,42 +315,35 @@\n         // o An empty \"assemble\" buffer.\n         // o No bytes to write (numToWrite \u003d\u003d 0)\n         //\n-        while( numToWrite \u003e 0 )\n-        {\n-            if( numToWrite \u003c m_recordBuf.length )\n-            {\n-                System.arraycopy( buffer, position, m_assemBuf, m_assemLen,\n-                                  numToWrite );\n+        while (numToWrite \u003e 0) {\n+            if (numToWrite \u003c recordBuf.length) {\n+                System.arraycopy(wBuf, wOffset, assemBuf, assemLen,\n+                                 numToWrite);\n \n-                m_assemLen +\u003d numToWrite;\n+                assemLen +\u003d numToWrite;\n \n                 break;\n             }\n \n-            m_buffer.writeRecord( buffer, position );\n+            buffer.writeRecord(wBuf, wOffset);\n \n-            int num \u003d m_recordBuf.length;\n+            int num \u003d recordBuf.length;\n \n-            m_currBytes +\u003d num;\n+            currBytes +\u003d num;\n             numToWrite -\u003d num;\n-            position +\u003d num;\n+            wOffset +\u003d num;\n         }\n     }\n \n     /**\n-     * Write an EOF (end of archive) record to the tar archive. An EOF record\n-     * consists of a record of all zeros.\n-     *\n-     * @exception IOException when an IO error causes operation to fail\n+     * Write an EOF (end of archive) record to the tar archive.\n+     * An EOF record consists of a record of all zeros.\n      */\n-    private void writeEOFRecord()\n-        throws IOException\n-    {\n-        for( int i \u003d 0; i \u003c m_recordBuf.length; ++i )\n-        {\n-            m_recordBuf[ i ] \u003d 0;\n+    private void writeEOFRecord() throws IOException {\n+        for (int i \u003d 0; i \u003c recordBuf.length; ++i) {\n+            recordBuf[i] \u003d 0;\n         }\n \n-        m_buffer.writeRecord( m_recordBuf );\n+        buffer.writeRecord(recordBuf);\n     }\n }\n",
      "operations": [
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [979,1172]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldDeclaration [1629,1655]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldDeclaration [1694,1723]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldDeclaration [2026,2057]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [2063,2279]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [3487,3663]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [1235,1294]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [1348,1399]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [1456,1531]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Javadoc [2285,2423]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Javadoc [3094,3380]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Javadoc [4305,4514]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Javadoc [4916,5469]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Javadoc [6771,7219]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SingleVariableDeclaration [9232,9243]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SingleVariableDeclaration [9245,9259]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [11434,11565]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [2296,2327]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [2335,2369]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [2908,2927]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [3105,3329]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [4276,4293]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [4316,4470]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "IfStatement [4568,4694]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [4927,5355]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [6732,6759]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [6782,7175]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [7532,7837]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "PrefixExpression [4572,4579]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Block [4581,4694]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: assembling records from small buffers. [8925,8963]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldAccess [2844,2855]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldAccess [2936,2949]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldAccess [2963,2976]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldAccess [3009,3023]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldAccess [3056,3067]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldAccess [3441,3458]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [4645,4657]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [4670,4684]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ThrowStatement [9345,9596]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [6198,6477]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [10073,10112]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: wOffset [11272,11279]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "Javadoc [979,1169]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "Javadoc [1236,1398]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "Javadoc [1452,1616]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "Javadoc [1673,1947]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [2259,2675]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [2692,2793]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [2808,2859]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [2906,2939]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Javadoc [2681,2947]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: final [2976,2981]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: final [3031,3036]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: stream, block size and record sizes. [3203,3239]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: final [3422,3427]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: final [3477,3482]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: final [3526,3531]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: m_buffer [3589,3597]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: m_assemLen [3656,3666]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: m_assemBuf [3680,3690]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: m_recordBuf [3725,3736]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: m_oneBuf [3771,3779]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [4044,4193]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Javadoc [4033,4244]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: final [4278,4283]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [4317,4532]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: m_longFileMode [4541,4555]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [4810,4957]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Javadoc [4799,5044]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [6626,7162]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Javadoc [6615,7320]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: final [7351,7356]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: final [7692,7697]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [8128,8400]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "PrimitiveType: int [8662,8665]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "CastExpression [8661,8681]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [5168,5547]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Javadoc [5157,5634]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [6003,6282]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [8704,9343]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: final [9613,9618]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: final [10028,10033]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: final [10869,10874]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SingleVariableDeclaration [10913,10929]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SingleVariableDeclaration [10954,10969]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [11013,11035]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [11044,11067]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [11146,11284]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ThrowStatement [11297,11330]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [11836,11887]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: m_buffer [13133,13141]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "Javadoc [13332,13542]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java",
        "src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "getOctalBytes",
            "getCheckSumOctalBytes",
            "computeCheckSum",
            "getNameBytes",
            "getLongOctalBytes",
            "parseOctal",
            "parseName"
          ],
          "num": 7
        },
        {
          "qualified_names": [
            "getLongOctalBytes",
            "parseOctal",
            "getCheckSumOctalBytes",
            "parseName",
            "getNameBytes",
            "computeCheckSum",
            "getOctalBytes"
          ],
          "num": 7
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "35",
            "36",
            "37",
            "38",
            "39",
            "40",
            "42",
            "43",
            "44",
            "45",
            "46",
            "49",
            "53",
            "54",
            "55",
            "57",
            "58",
            "59",
            "60",
            "61",
            "62",
            "64",
            "65",
            "66",
            "67",
            "68",
            "69",
            "70",
            "71",
            "72",
            "73",
            "74",
            "75",
            "76",
            "77",
            "78",
            "79",
            "80",
            "81",
            "82",
            "83",
            "84",
            "85",
            "86",
            "87",
            "88",
            "89",
            "90",
            "91",
            "92",
            "93",
            "94",
            "95",
            "96",
            "97",
            "98",
            "99",
            "100",
            "101",
            "102",
            "103",
            "104",
            "105",
            "106",
            "107",
            "108",
            "109",
            "110",
            "111",
            "112",
            "113",
            "114",
            "115",
            "116",
            "117",
            "118",
            "119",
            "120",
            "121",
            "122",
            "123",
            "124",
            "125",
            "126",
            "127",
            "128",
            "129",
            "130",
            "134",
            "135",
            "136",
            "137",
            "138",
            "139",
            "140",
            "141",
            "142",
            "143",
            "144",
            "145",
            "146",
            "147",
            "148",
            "149",
            "150",
            "151",
            "152",
            "153",
            "154",
            "155",
            "156",
            "157",
            "158",
            "169",
            "170",
            "171",
            "172",
            "173",
            "174",
            "176",
            "177",
            "178",
            "179",
            "183",
            "190",
            "191",
            "193",
            "196",
            "198",
            "199",
            "200",
            "201",
            "202",
            "203",
            "204",
            "206",
            "207",
            "208",
            "209",
            "210",
            "211",
            "212",
            "213",
            "214",
            "215",
            "216",
            "217",
            "218",
            "219",
            "220",
            "221",
            "222",
            "223",
            "224",
            "225",
            "226",
            "227",
            "230"
          ],
          "num": 169
        },
        {
          "qualified_names": [
            "23",
            "25",
            "26",
            "28",
            "31",
            "32",
            "34",
            "37",
            "39",
            "40",
            "41",
            "42",
            "44",
            "45",
            "46",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57",
            "58",
            "59",
            "60",
            "61",
            "62",
            "65",
            "76",
            "77",
            "78",
            "80",
            "81",
            "85",
            "92",
            "94",
            "95",
            "98",
            "100",
            "101",
            "103",
            "104",
            "107",
            "108",
            "109",
            "110",
            "111",
            "112",
            "113",
            "114",
            "115",
            "116",
            "117",
            "118",
            "119",
            "120",
            "121",
            "122",
            "123",
            "124",
            "125",
            "126",
            "127",
            "128",
            "129",
            "130",
            "131",
            "132",
            "133",
            "134",
            "135",
            "136",
            "137",
            "138",
            "139",
            "140",
            "141",
            "142",
            "143",
            "144",
            "145",
            "146",
            "147",
            "148",
            "149",
            "150",
            "151",
            "152",
            "153",
            "154",
            "155",
            "156",
            "157",
            "158",
            "159",
            "160",
            "161",
            "162",
            "163",
            "164",
            "165",
            "166",
            "167",
            "168",
            "169",
            "170",
            "171",
            "172",
            "173",
            "174",
            "175",
            "176",
            "177",
            "178",
            "179",
            "180",
            "181",
            "182",
            "183",
            "184",
            "185",
            "186",
            "187",
            "188",
            "189",
            "190",
            "191",
            "192",
            "193",
            "194",
            "195",
            "196",
            "197",
            "198",
            "199"
          ],
          "num": 138
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java b/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java\nindex 523f9f7..05faa64 100644\n--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java\n@@ -20,142 +20,49 @@\n \n /**\n  * This class provides static utility methods to work with byte streams.\n+ *\n  */\n-class TarUtils\n-{\n-    /**\n-     * Parse the checksum octal integer from a header buffer.\n-     *\n-     * @param offset The offset into the buffer from which to parse.\n-     * @param length The number of header bytes to parse.\n-     * @param value Description of Parameter\n-     * @param buf Description of Parameter\n-     * @return The integer value of the entry\u0027s checksum.\n-     */\n-    public static int getCheckSumOctalBytes( final long value,\n-                                             final byte[] buf,\n-                                             final int offset,\n-                                             final int length )\n-    {\n-        getOctalBytes( value, buf, offset, length );\n+// CheckStyle:HideUtilityClassConstructorCheck OFF (bc)\n+public class TarUtils {\n \n-        buf[ offset + length - 1 ] \u003d (byte)\u0027 \u0027;\n-        buf[ offset + length - 2 ] \u003d 0;\n-\n-        return offset + length;\n-    }\n+    private static final int BYTE_MASK \u003d 255;\n \n     /**\n-     * Parse an octal long integer from a header buffer.\n+     * Parse an octal string from a header buffer. This is used for the\n+     * file permission mode value.\n      *\n+     * @param header The header buffer from which to parse.\n      * @param offset The offset into the buffer from which to parse.\n      * @param length The number of header bytes to parse.\n-     * @param value Description of Parameter\n-     * @param buf Description of Parameter\n-     * @return The long value of the octal bytes.\n+     * @return The long value of the octal string.\n      */\n-    public static int getLongOctalBytes( final long value,\n-                                         final byte[] buf,\n-                                         final int offset,\n-                                         final int length )\n-    {\n-        byte[] temp \u003d new byte[ length + 1 ];\n+    public static long parseOctal(byte[] header, int offset, int length) {\n+        long    result \u003d 0;\n+        boolean stillPadding \u003d true;\n+        int     end \u003d offset + length;\n \n-        getOctalBytes( value, temp, 0, length + 1 );\n-        System.arraycopy( temp, 0, buf, offset, length );\n-\n-        return offset + length;\n-    }\n-\n-    /**\n-     * Determine the number of bytes in an entry name.\n-     *\n-     * @param offset The offset into the buffer from which to parse.\n-     * @param length The number of header bytes to parse.\n-     * @param name Description of Parameter\n-     * @param buffer Description of Parameter\n-     * @return The number of bytes in a header\u0027s entry name.\n-     */\n-    public static int getNameBytes( final StringBuffer name,\n-                                    final byte[] buffer,\n-                                    final int offset,\n-                                    final int length )\n-    {\n-        int i;\n-\n-        for( i \u003d 0; i \u003c length \u0026\u0026 i \u003c name.length(); ++i )\n-        {\n-            buffer[ offset + i ] \u003d (byte)name.charAt( i );\n-        }\n-\n-        for( ; i \u003c length; ++i )\n-        {\n-            buffer[ offset + i ] \u003d 0;\n-        }\n-\n-        return offset + length;\n-    }\n-\n-    /**\n-     * Parse an octal integer from a header buffer.\n-     *\n-     * @param offset The offset into the buffer from which to parse.\n-     * @param length The number of header bytes to parse.\n-     * @return The integer value of the octal bytes.\n-     */\n-    public static int getOctalBytes( final long value,\n-                                     final byte[] buffer,\n-                                     final int offset,\n-                                     final int length )\n-    {\n-        int idx \u003d length - 1;\n-\n-        buffer[ offset + idx ] \u003d 0;\n-        --idx;\n-        buffer[ offset + idx ] \u003d (byte)\u0027 \u0027;\n-        --idx;\n-\n-        if( value \u003d\u003d 0 )\n-        {\n-            buffer[ offset + idx ] \u003d (byte)\u00270\u0027;\n-            --idx;\n-        }\n-        else\n-        {\n-            long val \u003d value;\n-            while( idx \u003e\u003d 0 \u0026\u0026 val \u003e 0 )\n-            {\n-                buffer[ offset + idx ] \u003d (byte)( (byte)\u00270\u0027 + (byte)( val \u0026 7 ) );\n-                val \u003d val \u003e\u003e 3;\n-                idx--;\n+        for (int i \u003d offset; i \u003c end; ++i) {\n+            if (header[i] \u003d\u003d 0) {\n+                break;\n             }\n+\n+            if (header[i] \u003d\u003d (byte) \u0027 \u0027 || header[i] \u003d\u003d \u00270\u0027) {\n+                if (stillPadding) {\n+                    continue;\n+                }\n+\n+                if (header[i] \u003d\u003d (byte) \u0027 \u0027) {\n+                    break;\n+                }\n+            }\n+\n+            stillPadding \u003d false;\n+            // CheckStyle:MagicNumber OFF\n+            result \u003d (result \u003c\u003c 3) + (header[i] - \u00270\u0027);\n+            // CheckStyle:MagicNumber ON\n         }\n \n-        while( idx \u003e\u003d 0 )\n-        {\n-            buffer[ offset + idx ] \u003d (byte)\u0027 \u0027;\n-            idx--;\n-        }\n-\n-        return offset + length;\n-    }\n-\n-    /**\n-     * Compute the checksum of a tar entry header.\n-     *\n-     * @param buffer The tar entry\u0027s header buffer.\n-     * @return The computed checksum.\n-     */\n-    public static long computeCheckSum( final byte[] buffer )\n-    {\n-        long sum \u003d 0;\n-\n-        for( int i \u003d 0; i \u003c buffer.length; ++i )\n-        {\n-            sum +\u003d 255 \u0026 buffer[ i ];\n-        }\n-\n-        return sum;\n+        return result;\n     }\n \n     /**\n@@ -166,67 +73,129 @@\n      * @param length The number of header bytes to parse.\n      * @return The header\u0027s entry name.\n      */\n-    public static StringBuffer parseName( final byte[] header,\n-                                          final int offset,\n-                                          final int length )\n-    {\n-        StringBuffer result \u003d new StringBuffer( length );\n-        int end \u003d offset + length;\n+    public static StringBuffer parseName(byte[] header, int offset, int length) {\n+        StringBuffer result \u003d new StringBuffer(length);\n+        int          end \u003d offset + length;\n \n-        for( int i \u003d offset; i \u003c end; ++i )\n-        {\n-            if( header[ i ] \u003d\u003d 0 )\n-            {\n+        for (int i \u003d offset; i \u003c end; ++i) {\n+            if (header[i] \u003d\u003d 0) {\n                 break;\n             }\n \n-            result.append( (char)header[ i ] );\n+            result.append((char) header[i]);\n         }\n \n         return result;\n     }\n \n     /**\n-     * Parse an octal string from a header buffer. This is used for the file\n-     * permission mode value.\n+     * Determine the number of bytes in an entry name.\n      *\n-     * @param header The header buffer from which to parse.\n+     * @param name The header name from which to parse.\n+     * @param buf The buffer from which to parse.\n      * @param offset The offset into the buffer from which to parse.\n      * @param length The number of header bytes to parse.\n-     * @return The long value of the octal string.\n+     * @return The number of bytes in a header\u0027s entry name.\n      */\n-    public static long parseOctal( final byte[] header,\n-                                   final int offset,\n-                                   final int length )\n-    {\n-        long result \u003d 0;\n-        boolean stillPadding \u003d true;\n-        int end \u003d offset + length;\n+    public static int getNameBytes(StringBuffer name, byte[] buf, int offset, int length) {\n+        int i;\n \n-        for( int i \u003d offset; i \u003c end; ++i )\n-        {\n-            if( header[ i ] \u003d\u003d 0 )\n-            {\n-                break;\n-            }\n-\n-            if( header[ i ] \u003d\u003d (byte)\u0027 \u0027 || header[ i ] \u003d\u003d \u00270\u0027 )\n-            {\n-                if( stillPadding )\n-                {\n-                    continue;\n-                }\n-\n-                if( header[ i ] \u003d\u003d (byte)\u0027 \u0027 )\n-                {\n-                    break;\n-                }\n-            }\n-\n-            stillPadding \u003d false;\n-            result \u003d ( result \u003c\u003c 3 ) + ( header[ i ] - \u00270\u0027 );\n+        for (i \u003d 0; i \u003c length \u0026\u0026 i \u003c name.length(); ++i) {\n+            buf[offset + i] \u003d (byte) name.charAt(i);\n         }\n \n-        return result;\n+        for (; i \u003c length; ++i) {\n+            buf[offset + i] \u003d 0;\n+        }\n+\n+        return offset + length;\n+    }\n+\n+    /**\n+     * Parse an octal integer from a header buffer.\n+     *\n+     * @param value The header value\n+     * @param buf The buffer from which to parse.\n+     * @param offset The offset into the buffer from which to parse.\n+     * @param length The number of header bytes to parse.\n+     * @return The integer value of the octal bytes.\n+     */\n+    public static int getOctalBytes(long value, byte[] buf, int offset, int length) {\n+        int    idx \u003d length - 1;\n+\n+        buf[offset + idx] \u003d 0;\n+        --idx;\n+        buf[offset + idx] \u003d (byte) \u0027 \u0027;\n+        --idx;\n+\n+        if (value \u003d\u003d 0) {\n+            buf[offset + idx] \u003d (byte) \u00270\u0027;\n+            --idx;\n+        } else {\n+            for (long val \u003d value; idx \u003e\u003d 0 \u0026\u0026 val \u003e 0; --idx) {\n+                // CheckStyle:MagicNumber OFF\n+                buf[offset + idx] \u003d (byte) ((byte) \u00270\u0027 + (byte) (val \u0026 7));\n+                val \u003d val \u003e\u003e 3;\n+                // CheckStyle:MagicNumber ON\n+            }\n+        }\n+\n+        for (; idx \u003e\u003d 0; --idx) {\n+            buf[offset + idx] \u003d (byte) \u0027 \u0027;\n+        }\n+\n+        return offset + length;\n+    }\n+\n+    /**\n+     * Parse an octal long integer from a header buffer.\n+     *\n+     * @param value The header value\n+     * @param buf The buffer from which to parse.\n+     * @param offset The offset into the buffer from which to parse.\n+     * @param length The number of header bytes to parse.\n+     * @return The long value of the octal bytes.\n+     */\n+    public static int getLongOctalBytes(long value, byte[] buf, int offset, int length) {\n+        byte[] temp \u003d new byte[length + 1];\n+\n+        getOctalBytes(value, temp, 0, length + 1);\n+        System.arraycopy(temp, 0, buf, offset, length);\n+\n+        return offset + length;\n+    }\n+\n+    /**\n+     * Parse the checksum octal integer from a header buffer.\n+     *\n+     * @param value The header value\n+     * @param buf The buffer from which to parse.\n+     * @param offset The offset into the buffer from which to parse.\n+     * @param length The number of header bytes to parse.\n+     * @return The integer value of the entry\u0027s checksum.\n+     */\n+    public static int getCheckSumOctalBytes(long value, byte[] buf, int offset, int length) {\n+        getOctalBytes(value, buf, offset, length);\n+\n+        buf[offset + length - 1] \u003d (byte) \u0027 \u0027;\n+        buf[offset + length - 2] \u003d 0;\n+\n+        return offset + length;\n+    }\n+\n+    /**\n+     * Compute the checksum of a tar entry header.\n+     *\n+     * @param buf The tar entry\u0027s header buffer.\n+     * @return The computed checksum.\n+     */\n+    public static long computeCheckSum(byte[] buf) {\n+        long sum \u003d 0;\n+\n+        for (int i \u003d 0; i \u003c buf.length; ++i) {\n+            sum +\u003d BYTE_MASK \u0026 buf[i];\n+        }\n+\n+        return sum;\n     }\n }\n",
      "operations": [
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: public [998,1004]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "FieldDeclaration [1027,1068]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: private [1027,1034]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: static [1035,1041]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: final [1042,1047]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "PrimitiveType: int [1048,1051]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "VariableDeclarationFragment [1052,1067]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: BYTE_MASK [1052,1061]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [3684,3713]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [3721,3763]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "ForStatement [4577,4656]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "InfixExpression [4584,4592]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "PrefixExpression [4594,4599]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "ForStatement [4292,4557]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationExpression [4297,4313]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "InfixExpression [4315,4334]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "PrefixExpression [4336,4341]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: BYTE_MASK [6254,6263]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: final [6184,6189]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: final [6240,6245]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: final [6293,6298]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: final [5309,5314]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: final [5372,5377]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: final [5432,5437]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: final [2933,2938]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: final [2994,2999]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: final [3051,3056]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: final [3105,3110]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: final [3708,3713]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: final [3763,3768]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: final [3821,3826]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: final [3876,3881]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [4393,4399]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [4190,4207]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "InfixExpression [4227,4246]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "WhileStatement [4220,4413]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [4521,4527]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "InfixExpression [4440,4448]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "WhileStatement [4433,4537]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: final [2141,2146]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: final [2200,2205]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: final [2259,2264]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: final [2318,2323]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: final [1359,1364]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: final [1422,1427]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: final [1485,1490]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: final [1548,1553]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: final [4782,4787]",
          "to": ""
        }
      ]
    }
  ],
  "inducing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [
        "setNames",
        "setIds",
        "hashCode",
        "getLinkName"
      ],
      "num": 4
    },
    "delete_functions": {
      "qualified_names": [
        "setGroupID",
        "debug",
        "getCheckSum",
        "getUserID",
        "getGroupID",
        "setUserID"
      ],
      "num": 6
    }
  },
  "trigger_tests": [],
  "fixing_changes": [],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  }
}