===
insert-tree
---
MethodDeclaration [3717,4152]
    Modifier: private [3717,3724]
    Modifier: static [3725,3731]
    SimpleType [3732,3738]
        SimpleName: String [3732,3738]
    SimpleName: exceptionMessage [3739,3755]
    SingleVariableDeclaration [3756,3769]
        ArrayType [3756,3762]
            PrimitiveType: byte [3756,3760]
            Dimension [3760,3762]
        SimpleName: buffer [3763,3769]
    SingleVariableDeclaration [3771,3787]
        Modifier: final [3771,3776]
        PrimitiveType: int [3777,3780]
        SimpleName: offset [3781,3787]
    SingleVariableDeclaration [3801,3817]
        Modifier: final [3801,3806]
        PrimitiveType: int [3807,3810]
        SimpleName: length [3811,3817]
    SingleVariableDeclaration [3819,3830]
        PrimitiveType: int [3819,3822]
        SimpleName: current [3823,3830]
    SingleVariableDeclaration [3832,3854]
        Modifier: final [3832,3837]
        PrimitiveType: byte [3838,3842]
        SimpleName: currentByte [3843,3854]
    Block [3856,4152]
        VariableDeclarationStatement [3866,3917]
            SimpleType [3866,3872]
                SimpleName: String [3866,3872]
            VariableDeclarationFragment [3873,3916]
                SimpleName: string [3873,3879]
                ClassInstanceCreation [3882,3916]
                    SimpleType [3886,3892]
                        SimpleName: String [3886,3892]
                    SimpleName: buffer [3893,3899]
                    SimpleName: offset [3901,3907]
                    SimpleName: length [3909,3915]
        ExpressionStatement [3926,3966]
            Assignment [3926,3965]
                SimpleName: string [3926,3932]
                ASSIGNMENT_OPERATOR: = [3932,3933]
                MethodInvocation [3933,3965]
                    METHOD_INVOCATION_RECEIVER [3933,3939]
                        SimpleName: string [3933,3939]
                    SimpleName: replaceAll [3940,3950]
                    METHOD_INVOCATION_ARGUMENTS [3951,3964]
                        StringLiteral: "\0" [3951,3955]
                        StringLiteral: "{NUL}" [3957,3964]
        VariableDeclarationStatement [4021,4128]
            Modifier: final [4021,4026]
            SimpleType [4027,4033]
                SimpleName: String [4027,4033]
            VariableDeclarationFragment [4034,4127]
                SimpleName: s [4034,4035]
                InfixExpression [4038,4127]
                    StringLiteral: "Invalid byte " [4038,4053]
                    INFIX_EXPRESSION_OPERATOR: + [4053,4054]
                    SimpleName: currentByte [4054,4065]
                    StringLiteral: " at offset " [4066,4079]
                    ParenthesizedExpression [4080,4096]
                        InfixExpression [4081,4095]
                            SimpleName: current [4081,4088]
                            INFIX_EXPRESSION_OPERATOR: - [4088,4089]
                            SimpleName: offset [4089,4095]
                    StringLiteral: " in '" [4097,4104]
                    SimpleName: string [4105,4111]
                    StringLiteral: "' len=" [4112,4120]
                    SimpleName: length [4121,4127]
        ReturnStatement [4137,4146]
            SimpleName: s [4144,4145]
to
TypeDeclaration [858,9388]
at 7
===
move-tree
---
VariableDeclarationStatement [1828,1856]
    PrimitiveType: boolean [1828,1835]
    VariableDeclarationFragment [1836,1855]
        SimpleName: stillPadding [1836,1848]
        BooleanLiteral: true [1851,1855]
to
Block [1790,2921]
at 2
===
insert-node
---
TagElement [1213,1547]
to
Javadoc [1202,1704]
at 0
===
insert-tree
---
TagElement [1821,1924]
    SimpleName: IllegalArgumentException [1829,1853]
    TextElement:  if the trailing space/NUL is missing or if a invalid byte is detected. [1853,1924]
to
Javadoc [1202,1704]
at 6
===
insert-node
---
Modifier: final [1967,1972]
to
SingleVariableDeclaration [1739,1752]
at 0
===
insert-node
---
VariableDeclarationStatement [2101,2124]
to
Block [1790,2921]
at 2
===
insert-tree
---
IfStatement [2134,2248]
    InfixExpression [2138,2148]
        SimpleName: length [2138,2144]
        INFIX_EXPRESSION_OPERATOR: < [2145,2146]
        NumberLiteral: 2 [2147,2148]
    Block [2149,2248]
        ThrowStatement [2163,2238]
            ClassInstanceCreation [2169,2237]
                SimpleType [2173,2197]
                    SimpleName: IllegalArgumentException [2173,2197]
                InfixExpression [2198,2236]
                    StringLiteral: "Length " [2198,2207]
                    INFIX_EXPRESSION_OPERATOR: + [2207,2208]
                    SimpleName: length [2208,2214]
                    StringLiteral: " must be at least 2" [2215,2236]
to
Block [1790,2921]
at 3
===
insert-node
---
ForStatement [2289,2435]
to
Block [1790,2921]
at 5
===
insert-tree
---
IfStatement [2444,2490]
    SimpleName: allNUL [2448,2454]
    Block [2456,2490]
        ReturnStatement [2470,2480]
            NumberLiteral: 0L [2477,2479]
to
Block [1790,2921]
at 6
===
insert-node
---
WhileStatement [2531,2683]
to
Block [1790,2921]
at 7
===
insert-tree
---
VariableDeclarationStatement [2736,2749]
    PrimitiveType: byte [2736,2740]
    VariableDeclarationFragment [2741,2748]
        SimpleName: trailer [2741,2748]
to
Block [1790,2921]
at 8
===
insert-tree
---
ExpressionStatement [2758,2782]
    Assignment [2758,2781]
        SimpleName: trailer [2758,2765]
        ASSIGNMENT_OPERATOR: = [2766,2767]
        ArrayAccess [2768,2781]
            SimpleName: buffer [2768,2774]
            InfixExpression [2775,2780]
                SimpleName: end [2775,2778]
                INFIX_EXPRESSION_OPERATOR: - [2778,2779]
                NumberLiteral: 1 [2779,2780]
to
Block [1790,2921]
at 9
===
insert-node
---
IfStatement [2791,3000]
to
Block [1790,2921]
at 10
===
insert-tree
---
ExpressionStatement [3053,3077]
    Assignment [3053,3076]
        SimpleName: trailer [3053,3060]
        ASSIGNMENT_OPERATOR: = [3061,3062]
        ArrayAccess [3063,3076]
            SimpleName: buffer [3063,3069]
            InfixExpression [3070,3075]
                SimpleName: end [3070,3073]
                INFIX_EXPRESSION_OPERATOR: - [3073,3074]
                NumberLiteral: 1 [3074,3075]
to
Block [1790,2921]
at 11
===
insert-tree
---
IfStatement [3086,3151]
    InfixExpression [3090,3120]
        InfixExpression [3090,3102]
            SimpleName: trailer [3090,3097]
            INFIX_EXPRESSION_OPERATOR: == [3098,3100]
            NumberLiteral: 0 [3101,3102]
        INFIX_EXPRESSION_OPERATOR: || [3103,3105]
        InfixExpression [3106,3120]
            SimpleName: trailer [3106,3113]
            INFIX_EXPRESSION_OPERATOR: == [3114,3116]
            CharacterLiteral: ' ' [3117,3120]
    Block [3121,3151]
        ExpressionStatement [3135,3141]
            PostfixExpression [3135,3140]
                SimpleName: end [3135,3138]
                POSTFIX_EXPRESSION_OPERATOR: -- [3138,3140]
to
Block [1790,2921]
at 12
===
insert-node
---
ForStatement [3161,3626]
to
Block [1790,2921]
at 13
===
move-tree
---
TextElement: Parse an octal string from a buffer. [1213,1249]
to
TagElement [1213,1547]
at 0
===
move-tree
---
TextElement: Leading spaces are ignored. [1257,1284]
to
TagElement [1213,1547]
at 1
===
insert-node
---
TextElement: The buffer must contain a trailing space or NUL, [1292,1340]
to
TagElement [1213,1547]
at 2
===
insert-node
---
TextElement: and may contain an additional trailing space or NUL. [1348,1400]
to
TagElement [1213,1547]
at 3
===
insert-node
---
TextElement: The input buffer is allowed to contain all NULs, [1415,1463]
to
TagElement [1213,1547]
at 4
===
insert-node
---
TextElement: in which case the method returns 0L [1471,1506]
to
TagElement [1213,1547]
at 5
===
insert-node
---
TextElement: (this allows for missing fields). [1514,1547]
to
TagElement [1213,1547]
at 6
===
update-node
---
TextElement:  The maximum number of bytes to parse. [1607,1645]
replace  The maximum number of bytes to parse. by  The maximum number of bytes to parse - must be at least 2 bytes.
===
move-tree
---
PrimitiveType: int [1910,1913]
to
VariableDeclarationStatement [2101,2124]
at 0
===
move-tree
---
VariableDeclarationFragment [1914,1924]
    SimpleName: i [1914,1915]
    SimpleName: offset [1918,1924]
to
VariableDeclarationStatement [2101,2124]
at 1
===
insert-tree
---
VariableDeclarationExpression [2294,2307]
    PrimitiveType: int [2294,2297]
    VariableDeclarationFragment [2298,2307]
        SimpleName: i [2298,2299]
        SimpleName: start [2302,2307]
to
ForStatement [2289,2435]
at 0
===
insert-tree
---
InfixExpression [2309,2316]
    SimpleName: i [2309,2310]
    INFIX_EXPRESSION_OPERATOR: < [2311,2312]
    SimpleName: end [2313,2316]
to
ForStatement [2289,2435]
at 1
===
insert-tree
---
PostfixExpression [2318,2321]
    SimpleName: i [2318,2319]
    POSTFIX_EXPRESSION_OPERATOR: ++ [2319,2321]
to
ForStatement [2289,2435]
at 2
===
move-tree
---
Block [2217,2435]
    IfStatement [2235,2302]
        SimpleName: stillPadding [2239,2251]
        Block [2253,2302]
            ContinueStatement [2275,2284]
    IfStatement [2320,2421]
        InfixExpression [2324,2349]
            SimpleName: currentByte [2324,2335]
            INFIX_EXPRESSION_OPERATOR: == [2336,2338]
            CastExpression [2339,2349]
                PrimitiveType: byte [2340,2344]
                CharacterLiteral: ' ' [2346,2349]
        Block [2351,2421]
            BreakStatement [2397,2403]
to
ForStatement [2289,2435]
at 3
===
insert-tree
---
InfixExpression [2538,2549]
    SimpleName: start [2538,2543]
    INFIX_EXPRESSION_OPERATOR: < [2544,2545]
    SimpleName: end [2546,2549]
to
WhileStatement [2531,2683]
at 0
===
insert-node
---
Block [2550,2683]
to
WhileStatement [2531,2683]
at 1
===
insert-tree
---
InfixExpression [2795,2825]
    InfixExpression [2795,2807]
        SimpleName: trailer [2795,2802]
        INFIX_EXPRESSION_OPERATOR: == [2803,2805]
        NumberLiteral: 0 [2806,2807]
    INFIX_EXPRESSION_OPERATOR: || [2808,2810]
    InfixExpression [2811,2825]
        SimpleName: trailer [2811,2818]
        INFIX_EXPRESSION_OPERATOR: == [2819,2821]
        CharacterLiteral: ' ' [2822,2825]
to
IfStatement [2791,3000]
at 0
===
insert-tree
---
Block [2826,2856]
    ExpressionStatement [2840,2846]
        PostfixExpression [2840,2845]
            SimpleName: end [2840,2843]
            POSTFIX_EXPRESSION_OPERATOR: -- [2843,2845]
to
IfStatement [2791,3000]
at 1
===
move-tree
---
Block [2253,2302]
    ContinueStatement [2275,2284]
to
IfStatement [2791,3000]
at 2
===
insert-tree
---
InfixExpression [3168,3179]
    SimpleName: start [3168,3173]
    INFIX_EXPRESSION_OPERATOR: < [3174,3175]
    SimpleName: end [3176,3179]
to
ForStatement [3161,3626]
at 0
===
insert-tree
---
PostfixExpression [3181,3188]
    SimpleName: start [3181,3186]
    POSTFIX_EXPRESSION_OPERATOR: ++ [3186,3188]
to
ForStatement [3161,3626]
at 1
===
move-tree
---
Block [1940,2891]
    VariableDeclarationStatement [1954,1989]
        Modifier: final [1954,1959]
        PrimitiveType: byte [1960,1964]
        VariableDeclarationFragment [1965,1988]
            SimpleName: currentByte [1965,1976]
            ArrayAccess [1979,1988]
                SimpleName: buffer [1979,1985]
                SimpleName: i [1986,1987]
    IfStatement [2002,2085]
        InfixExpression [2006,2022]
            SimpleName: currentByte [2006,2017]
            INFIX_EXPRESSION_OPERATOR: == [2018,2020]
            NumberLiteral: 0 [2021,2022]
        Block [2024,2085]
            BreakStatement [2065,2071]
    IfStatement [2164,2435]
        InfixExpression [2168,2215]
            InfixExpression [2168,2193]
                SimpleName: currentByte [2168,2179]
                INFIX_EXPRESSION_OPERATOR: == [2180,2182]
                CastExpression [2183,2193]
                    PrimitiveType: byte [2184,2188]
                    CharacterLiteral: ' ' [2190,2193]
            INFIX_EXPRESSION_OPERATOR: || [2194,2196]
            InfixExpression [2197,2215]
                SimpleName: currentByte [2197,2208]
                INFIX_EXPRESSION_OPERATOR: == [2209,2211]
                CharacterLiteral: '0' [2212,2215]
        Block [2217,2435]
            IfStatement [2235,2302]
                SimpleName: stillPadding [2239,2251]
                Block [2253,2302]
                    ContinueStatement [2275,2284]
            IfStatement [2320,2421]
                InfixExpression [2324,2349]
                    SimpleName: currentByte [2324,2335]
                    INFIX_EXPRESSION_OPERATOR: == [2336,2338]
                    CastExpression [2339,2349]
                        PrimitiveType: byte [2340,2344]
                        CharacterLiteral: ' ' [2346,2349]
                Block [2351,2421]
                    BreakStatement [2397,2403]
    ExpressionStatement [2449,2470]
        Assignment [2449,2469]
            SimpleName: stillPadding [2449,2461]
            ASSIGNMENT_OPERATOR: = [2462,2463]
            BooleanLiteral: false [2464,2469]
    IfStatement [2525,2745]
        InfixExpression [2529,2567]
            InfixExpression [2529,2546]
                SimpleName: currentByte [2529,2540]
                INFIX_EXPRESSION_OPERATOR: < [2541,2542]
                CharacterLiteral: '0' [2543,2546]
            INFIX_EXPRESSION_OPERATOR: || [2547,2549]
            InfixExpression [2550,2567]
                SimpleName: currentByte [2550,2561]
                INFIX_EXPRESSION_OPERATOR: > [2562,2563]
                CharacterLiteral: '7' [2564,2567]
        Block [2568,2745]
            ThrowStatement [2586,2731]
                ClassInstanceCreation [2592,2730]
                    SimpleType [2596,2620]
                        SimpleName: IllegalArgumentException [2596,2620]
                    InfixExpression [2646,2729]
                        StringLiteral: "Invalid octal digit at position " [2646,2680]
                        INFIX_EXPRESSION_OPERATOR: + [2680,2681]
                        SimpleName: i [2681,2682]
                        StringLiteral: " in '" [2683,2690]
                        ClassInstanceCreation [2691,2725]
                            SimpleType [2695,2701]
                                SimpleName: String [2695,2701]
                            SimpleName: buffer [2702,2708]
                            SimpleName: offset [2710,2716]
                            SimpleName: length [2718,2724]
                        StringLiteral: "'" [2726,2729]
    ExpressionStatement [2758,2803]
        Assignment [2758,2802]
            SimpleName: result [2758,2764]
            ASSIGNMENT_OPERATOR: = [2765,2766]
            InfixExpression [2767,2802]
                ParenthesizedExpression [2767,2780]
                    InfixExpression [2768,2779]
                        SimpleName: result [2768,2774]
                        INFIX_EXPRESSION_OPERATOR: << [2775,2777]
                        NumberLiteral: 3 [2778,2779]
                INFIX_EXPRESSION_OPERATOR: + [2781,2782]
                ParenthesizedExpression [2783,2802]
                    InfixExpression [2784,2801]
                        SimpleName: currentByte [2784,2795]
                        INFIX_EXPRESSION_OPERATOR: - [2796,2797]
                        CharacterLiteral: '0' [2798,2801]
to
ForStatement [3161,3626]
at 2
===
update-node
---
SimpleName: i [1914,1915]
replace i by start
===
update-node
---
SimpleName: stillPadding [1836,1848]
replace stillPadding by allNUL
===
insert-node
---
IfStatement [2564,2673]
to
Block [2550,2683]
at 0
===
insert-tree
---
ThrowStatement [2876,2990]
    ClassInstanceCreation [2882,2989]
        SimpleType [2886,2910]
            SimpleName: IllegalArgumentException [2886,2910]
        MethodInvocation [2932,2988]
            SimpleName: exceptionMessage [2932,2948]
            METHOD_INVOCATION_ARGUMENTS [2949,2987]
                SimpleName: buffer [2949,2955]
                SimpleName: offset [2957,2963]
                SimpleName: length [2965,2971]
                InfixExpression [2973,2978]
                    SimpleName: end [2973,2976]
                    INFIX_EXPRESSION_OPERATOR: - [2976,2977]
                    NumberLiteral: 1 [2977,2978]
                SimpleName: trailer [2980,2987]
to
Block [2253,2302]
at 0
===
insert-tree
---
InfixExpression [2568,2588]
    ArrayAccess [2568,2581]
        SimpleName: buffer [2568,2574]
        SimpleName: start [2575,2580]
    INFIX_EXPRESSION_OPERATOR: == [2582,2584]
    CharacterLiteral: ' ' [2585,2588]
to
IfStatement [2564,2673]
at 0
===
insert-tree
---
Block [2589,2629]
    ExpressionStatement [2607,2615]
        PostfixExpression [2607,2614]
            SimpleName: start [2607,2612]
            POSTFIX_EXPRESSION_OPERATOR: ++ [2612,2614]
to
IfStatement [2564,2673]
at 1
===
move-tree
---
Block [2024,2085]
    BreakStatement [2065,2071]
to
IfStatement [2564,2673]
at 2
===
insert-tree
---
ArrayAccess [2340,2349]
    SimpleName: buffer [2340,2346]
    SimpleName: i [2347,2348]
to
InfixExpression [2324,2349]
at 0
===
update-node
---
INFIX_EXPRESSION_OPERATOR: == [2336,2338]
replace == by !=
===
insert-node
---
NumberLiteral: 0 [2353,2354]
to
InfixExpression [2324,2349]
at 3
===
move-tree
---
ExpressionStatement [2449,2470]
    Assignment [2449,2469]
        SimpleName: stillPadding [2449,2461]
        ASSIGNMENT_OPERATOR: = [2462,2463]
        BooleanLiteral: false [2464,2469]
to
Block [2351,2421]
at 0
===
update-node
---
SimpleName: i [1986,1987]
replace i by start
===
move-tree
---
ClassInstanceCreation [2691,2725]
    SimpleType [2695,2701]
        SimpleName: String [2695,2701]
    SimpleName: buffer [2702,2708]
    SimpleName: offset [2710,2716]
    SimpleName: length [2718,2724]
to
ThrowStatement [2586,2731]
at 0
===
update-node
---
SimpleName: stillPadding [2449,2461]
replace stillPadding by allNUL
===
move-tree
---
SimpleType [2596,2620]
    SimpleName: IllegalArgumentException [2596,2620]
to
ClassInstanceCreation [2691,2725]
at 0
===
insert-node
---
MethodInvocation [3419,3479]
to
ClassInstanceCreation [2691,2725]
at 1
===
insert-node
---
SimpleName: exceptionMessage [3419,3435]
to
MethodInvocation [3419,3479]
at 0
===
insert-node
---
METHOD_INVOCATION_ARGUMENTS [3436,3478]
to
MethodInvocation [3419,3479]
at 1
===
move-tree
---
SimpleName: buffer [2702,2708]
to
METHOD_INVOCATION_ARGUMENTS [3436,3478]
at 0
===
move-tree
---
SimpleName: offset [2710,2716]
to
METHOD_INVOCATION_ARGUMENTS [3436,3478]
at 1
===
move-tree
---
SimpleName: length [2718,2724]
to
METHOD_INVOCATION_ARGUMENTS [3436,3478]
at 2
===
insert-node
---
SimpleName: start [3460,3465]
to
METHOD_INVOCATION_ARGUMENTS [3436,3478]
at 3
===
insert-node
---
SimpleName: currentByte [3467,3478]
to
METHOD_INVOCATION_ARGUMENTS [3436,3478]
at 4
===
delete-node
---
TextElement: Parsing stops when a NUL is found, or a trailing space, [1292,1347]
===
===
delete-node
---
TextElement: or the buffer length is reached. [1355,1387]
===
===
delete-node
---
TextElement: Behaviour with non-octal input is currently undefined. [1402,1456]
===
===
delete-node
---
TagElement [1213,1456]
===
===
delete-node
---
SimpleName: stillPadding [2239,2251]
===
===
delete-node
---
IfStatement [2235,2302]
===
===
delete-node
---
SimpleName: currentByte [2324,2335]
===
===
delete-tree
---
CastExpression [2339,2349]
    PrimitiveType: byte [2340,2344]
    CharacterLiteral: ' ' [2346,2349]
===
delete-node
---
ContinueStatement [2275,2284]
===
===
delete-tree
---
InfixExpression [2006,2022]
    SimpleName: currentByte [2006,2017]
    INFIX_EXPRESSION_OPERATOR: == [2018,2020]
    NumberLiteral: 0 [2021,2022]
===
delete-node
---
IfStatement [2002,2085]
===
===
delete-tree
---
InfixExpression [2168,2215]
    InfixExpression [2168,2193]
        SimpleName: currentByte [2168,2179]
        INFIX_EXPRESSION_OPERATOR: == [2180,2182]
        CastExpression [2183,2193]
            PrimitiveType: byte [2184,2188]
            CharacterLiteral: ' ' [2190,2193]
    INFIX_EXPRESSION_OPERATOR: || [2194,2196]
    InfixExpression [2197,2215]
        SimpleName: currentByte [2197,2208]
        INFIX_EXPRESSION_OPERATOR: == [2209,2211]
        CharacterLiteral: '0' [2212,2215]
===
delete-node
---
IfStatement [2164,2435]
===
===
delete-tree
---
SimpleType [2695,2701]
    SimpleName: String [2695,2701]
===
delete-node
---
StringLiteral: "Invalid octal digit at position " [2646,2680]
===
===
delete-node
---
INFIX_EXPRESSION_OPERATOR: + [2680,2681]
===
===
delete-node
---
SimpleName: i [2681,2682]
===
===
delete-node
---
StringLiteral: " in '" [2683,2690]
===
===
delete-node
---
StringLiteral: "'" [2726,2729]
===
===
delete-node
---
InfixExpression [2646,2729]
===
===
delete-node
---
ClassInstanceCreation [2592,2730]
===
===
delete-node
---
VariableDeclarationExpression [1910,1924]
===
===
delete-tree
---
InfixExpression [1926,1933]
    SimpleName: i [1926,1927]
    INFIX_EXPRESSION_OPERATOR: < [1928,1929]
    SimpleName: end [1930,1933]
===
delete-tree
---
PrefixExpression [1935,1938]
    PREFIX_EXPRESSION_OPERATOR: ++ [1935,1937]
    SimpleName: i [1937,1938]
===
delete-node
---
ForStatement [1905,2891]
===
