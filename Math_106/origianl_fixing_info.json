{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "/home/liumengjiao/Desktop/CI/Benchmark/data/changesInfo/",
  "properties": {
    "trigger.tests": "org.apache.commons.math.fraction.FractionFormatTest::testParseProperInvalidMinus",
    "test.dir": "src/test",
    "clz.modified": "org.apache.commons.math.fraction.ProperFractionFormat",
    "src.dir": "src/java"
  },
  "timeoutSecond": 100,
  "proj": "Math",
  "id": "106",
  "workingDir": "../bugs/Math_106_buggy",
  "buggyCommit": "5de83dca70afabf12bd46bb9ab438753c14c7453",
  "inducingCommit": "41598b038509e9cdb7f6dbeefdb2a2876d2708a6",
  "originalCommit": "351f0eabe385899e1c15651d24fe914c603a6160",
  "bug_name": "Math_106",
  "derive": "defects4j",
  "original_fixing_commit": "41ba9e00e3bbde990f6821f67f0da2a5575b9ac3",
  "buildFiles_changed": false,
  "regression": true,
  "inducing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/math/util/MathUtils.java",
        "src/java/org/apache/commons/math/util/MathUtils.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.math.util.MathUtils:equals:[double x, double y]:boolean"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "org.apache.commons.math.util.MathUtils:lcm:[int a, int b]:int",
            "org.apache.commons.math.util.MathUtils:gcd:[int a, int b]:int"
          ],
          "num": 2
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "2",
            "22",
            "470"
          ],
          "num": 3
        },
        {
          "qualified_names": [
            "2",
            "22",
            "471",
            "472",
            "473",
            "474",
            "475",
            "476",
            "477",
            "478",
            "479",
            "480",
            "481",
            "482",
            "483",
            "484",
            "485",
            "486",
            "487",
            "488",
            "489",
            "490",
            "491",
            "492",
            "493",
            "494",
            "495",
            "496",
            "497",
            "498",
            "499",
            "500",
            "501",
            "502",
            "503",
            "504",
            "505",
            "506",
            "507",
            "508",
            "509"
          ],
          "num": 41
        }
      ],
      "diff": "diff --git a/src/java/org/apache/commons/math/util/MathUtils.java b/src/java/org/apache/commons/math/util/MathUtils.java\nindex 4c0e5b7..7d56edc 100644\n--- a/src/java/org/apache/commons/math/util/MathUtils.java\n+++ b/src/java/org/apache/commons/math/util/MathUtils.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2003-2004 The Apache Software Foundation.\n+ * Copyright 2003-2005 The Apache Software Foundation.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -19,7 +19,7 @@\n /**\n  * Some useful additions to the built-in functions in {@link Math}.\n  *\n- * @version $Revision: 1.20 $ $Date: 2004/10/14 04:01:04 $\n+ * @version $Revision: 1.20 $ $Date$\n  */\n public final class MathUtils {\n     \n@@ -468,4 +468,43 @@\n     public static boolean equals(double x, double y) {\n         return ((Double.isNaN(x) \u0026\u0026 Double.isNaN(y)) || x \u003d\u003d y);\n     }\n+\n+    /**\n+     * Returns the least common multiple between two integer values.\n+     * @param a the first integer value.\n+     * @param b the second integer value.\n+     * @return the least common multiple between a and b.\n+     */\n+    public static int lcm(int a, int b) {\n+        return Math.abs(a / gcd(a, b) * b);\n+    }\n+\n+    /**\n+     * Returns the greatest common divisor between two integer values.\n+     * @param a the first integer value.\n+     * @param b the second integer value.\n+     * @return the greatest common divisor between a and b.\n+     */\n+    public static int gcd(int a, int b) {\n+        int ret;\n+        \n+        if (a \u003d\u003d 0) {\n+            ret \u003d Math.abs(b);\n+        } else if (b \u003d\u003d 0) {\n+            ret \u003d Math.abs(a);\n+        } else if (a \u003c 0) {\n+            ret \u003d gcd(-a, b);\n+        } else if (b \u003c 0) {\n+            ret \u003d gcd(a, -b);\n+        } else {\n+            int r \u003d 0;\n+            while(b \u003e 0){\n+                r \u003d a % b;\n+                a \u003d b;\n+                b \u003d r;\n+            }\n+            ret \u003d a;\n+        }\n+        return ret;\n+    }\n }\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [15811,16124]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [16130,16862]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        }
      ]
    }
  ],
  "inducing_type": {
    "add_classes": {
      "qualified_names": [
        "src/java/org/apache/commons/math/fraction/Fraction.java",
        "src/java/org/apache/commons/math/fraction/FractionFormat.java",
        "src/java/org/apache/commons/math/fraction/ProperFractionFormat.java"
      ],
      "num": 3
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [
        "org.apache.commons.math.util.MathUtils:gcd:[int a, int b]:int",
        "org.apache.commons.math.util.MathUtils:lcm:[int a, int b]:int"
      ],
      "num": 2
    },
    "delete_functions": {
      "qualified_names": [
        "org.apache.commons.math.util.MathUtils:equals:[double x, double y]:boolean"
      ],
      "num": 1
    }
  },
  "trigger_tests": [
    {
      "test_class": "org.apache.commons.math.fraction.FractionFormatTest",
      "test_function": "testParseProperInvalidMinus",
      "assertion_line": "236",
      "exception": "junit.framework.AssertionFailedError",
      "message": "invalid minus in improper fraction."
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/math/fraction/ProperFractionFormat.java",
        "src/java/org/apache/commons/math/fraction/ProperFractionFormat.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.math.fraction.ProperFractionFormat:parse:[String source, ParsePosition pos]:Fraction"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "org.apache.commons.math.fraction.ProperFractionFormat:parse:[String source, ParsePosition pos]:Fraction"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "26",
            "116",
            "154",
            "187"
          ],
          "num": 4
        },
        {
          "qualified_names": [
            "27",
            "28",
            "29",
            "30",
            "121",
            "122",
            "123",
            "124",
            "125",
            "164",
            "165",
            "166",
            "167",
            "168",
            "169",
            "203",
            "204",
            "205",
            "206",
            "207",
            "208"
          ],
          "num": 21
        }
      ],
      "diff": "diff --git a/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java b/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java\nindex 5dfa386..a98b665 100644\n--- a/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java\n+++ b/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java\n@@ -24,6 +24,10 @@\n /**\r\n  * Formats a Fraction number in proper format.  The number format for each of\r\n  * the whole number, numerator and, denominator can be configured.\r\n+ * \u003cp\u003e\r\n+ * Minus signs are only allowed in the whole number part - i.e.,\r\n+ * \"-3 1/2\" is legitimate and denotes -7/2, but \"-3 -1/2\" is invalid and\r\n+ * will result in a \u003ccode\u003eParseException\u003c/code\u003e.\r\n  * \r\n  * @since 1.1\r\n  * @version $Revision$ $Date$\r\n@@ -114,6 +118,11 @@\n     /**\r\n      * Parses a string to produce a {@link Fraction} object.  This method\r\n      * expects the string to be formatted as a proper fraction.\r\n+     * \u003cp\u003e\r\n+     * Minus signs are only allowed in the whole number part - i.e.,\r\n+     * \"-3 1/2\" is legitimate and denotes -7/2, but \"-3 -1/2\" is invalid and\r\n+     * will result in a \u003ccode\u003eParseException\u003c/code\u003e.\r\n+     * \r\n      * @param source the string to parse\r\n      * @param pos input/ouput parsing parameter.\r\n      * @return the parsed {@link Fraction} object.\r\n@@ -152,6 +161,12 @@\n             pos.setIndex(initialIndex);\r\n             return null;\r\n         }\r\n+        \r\n+        if (num.intValue() \u003c 0) {\r\n+            // minus signs should be leading, invalid expression\r\n+            pos.setIndex(initialIndex);\r\n+            return null;\r\n+        }\r\n \r\n         // parse \u0027/\u0027\r\n         int startIndex \u003d pos.getIndex();\r\n@@ -185,6 +200,12 @@\n             pos.setIndex(initialIndex);\r\n             return null;\r\n         }\r\n+        \r\n+        if (den.intValue() \u003c 0) {\r\n+            // minus signs must be leading, invalid\r\n+            pos.setIndex(initialIndex);\r\n+            return null;\r\n+        }\r\n \r\n         int w \u003d whole.intValue();\r\n         int n \u003d num.intValue();\r\n",
      "operations": [
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003cp\u003e [981,984]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: Minus signs are only allowed in the whole number part - i.e., [989,1050]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \"-3 1/2\" is legitimate and denotes -7/2, but \"-3 -1/2\" is invalid and [1055,1124]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: will result in a \u003ccode\u003eParseException\u003c/code\u003e. [1129,1174]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [5747,5916]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [7019,7175]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003cp\u003e [4222,4225]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: Minus signs are only allowed in the whole number part - i.e., [4234,4295]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \"-3 1/2\" is legitimate and denotes -7/2, but \"-3 -1/2\" is invalid and [4304,4373]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: will result in a \u003ccode\u003eParseException\u003c/code\u003e. [4382,4427]"
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  },
  "patch_changed_mths": {
    "qualified_names": [
      "org.apache.commons.math.fraction.ProperFractionFormat:parse(Ljava/lang/String;Ljava/text/ParsePosition;)Lorg/apache/commons/math/fraction/Fraction;:regression"
    ],
    "num": 1
  }
}