{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "/home/liumengjiao/Desktop/CI/Benchmark/data/changesInfo/",
  "properties": {
    "trigger.tests": "org.apache.commons.math.special.GammaTest::testRegularizedGammaPositivePositive",
    "test.dir": "src/test",
    "clz.modified": "org.apache.commons.math.special.Gamma",
    "src.dir": "src/java"
  },
  "timeoutSecond": 100,
  "proj": "Math",
  "id": "104",
  "workingDir": "../bugs/Math_104_buggy",
  "buggyCommit": "c43fa5d5abc9a17a1bcc05831dfc42a5d0195bff",
  "inducingCommit": "d3221394b65050c57519dd09633380a43ecb48f5",
  "originalCommit": "80e42b33c52fe0ce94a9be00d31989e269ff15ea",
  "bug_name": "Math_104",
  "derive": "defects4j",
  "original_fixing_commit": "e39a7750ef362679599b623b05bfadb150832515",
  "buildFiles_changed": true,
  "regression": false,
  "inducing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java",
        "src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.math.stat.distribution.AbstractContinuousDistribution:AbstractContinuousDistribution:[]:null",
            "org.apache.commons.math.stat.distribution.AbstractContinuousDistribution:cummulativeProbability:[double x0, double x1]:double",
            "org.apache.commons.math.stat.distribution.AbstractContinuousDistribution:inverseCummulativeProbability:[final double p]:double"
          ],
          "num": 3
        },
        {
          "qualified_names": [
            "org.apache.commons.math.stat.distribution.AbstractContinuousDistribution:getDomainUpperBound:[double p]:double",
            "org.apache.commons.math.stat.distribution.AbstractContinuousDistribution:getDomainLowerBound:[double p]:double",
            "org.apache.commons.math.stat.distribution.AbstractContinuousDistribution:inverseCummulativeProbability:[final double p]:double",
            "org.apache.commons.math.stat.distribution.AbstractContinuousDistribution:AbstractContinuousDistribution:[]:null",
            "org.apache.commons.math.stat.distribution.AbstractContinuousDistribution:cummulativeProbability:[double x0, double x1]:double",
            "org.apache.commons.math.stat.distribution.AbstractContinuousDistribution:getInitialDomain:[double p]:double"
          ],
          "num": 6
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "35",
            "36",
            "37",
            "38",
            "39",
            "40",
            "41",
            "42",
            "43",
            "44",
            "45",
            "46",
            "47",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57",
            "58",
            "59",
            "60",
            "61",
            "62",
            "63",
            "64",
            "65",
            "66",
            "67",
            "68",
            "69",
            "70",
            "71",
            "72",
            "73",
            "74",
            "75",
            "76",
            "77",
            "78",
            "79",
            "80",
            "81",
            "82",
            "83",
            "84",
            "85",
            "86",
            "87",
            "88",
            "89",
            "90",
            "91",
            "92",
            "93",
            "94",
            "95",
            "96",
            "97",
            "98",
            "99",
            "100",
            "101",
            "102",
            "103",
            "104",
            "105",
            "106",
            "107",
            "108",
            "109",
            "110",
            "111",
            "112",
            "113"
          ],
          "num": 113
        },
        {
          "qualified_names": [
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "35",
            "36",
            "37",
            "38",
            "39",
            "40",
            "41",
            "42",
            "43",
            "44",
            "45",
            "46",
            "47",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57",
            "58",
            "59",
            "60",
            "61",
            "62",
            "63",
            "64",
            "65",
            "66",
            "67",
            "68",
            "69",
            "70",
            "71",
            "72",
            "73",
            "74",
            "75",
            "76",
            "77",
            "78",
            "79",
            "80",
            "81",
            "82",
            "83",
            "84",
            "85",
            "86",
            "87",
            "88",
            "89",
            "90",
            "91",
            "92",
            "93",
            "94",
            "95",
            "96",
            "97",
            "98",
            "99",
            "100",
            "101",
            "102",
            "103",
            "104",
            "105",
            "106",
            "107",
            "108",
            "109",
            "110",
            "111",
            "112",
            "113",
            "114",
            "115",
            "116",
            "117",
            "118",
            "119",
            "120",
            "121",
            "122",
            "123",
            "124",
            "125",
            "126",
            "127",
            "128",
            "129",
            "130",
            "131",
            "132",
            "133",
            "134",
            "135",
            "136",
            "137",
            "138",
            "139",
            "140",
            "141",
            "142",
            "143",
            "144",
            "145",
            "146",
            "147",
            "148",
            "149",
            "150",
            "151",
            "152",
            "153"
          ],
          "num": 153
        }
      ],
      "diff": "diff --git a/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java b/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\nindex eb8ee24..e027686 100644\n--- a/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\n+++ b/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\n@@ -1,113 +1,153 @@\n-/* \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\r\n- * The Apache Software License, Version 1.1\r\n- *\r\n- * Copyright (c) 2003 The Apache Software Foundation.  All rights\r\n- * reserved.\r\n- *\r\n- * Redistribution and use in source and binary forms, with or without\r\n- * modification, are permitted provided that the following conditions\r\n- * are met:\r\n- *\r\n- * 1. Redistributions of source code must retain the above copyright\r\n- *    notice, this list of conditions and the following disclaimer.\r\n- *\r\n- * 2. Redistributions in binary form must reproduce the above copyright\r\n- *    notice, this list of conditions and the following disclaimer in\r\n- *    the documentation and/or other materials provided with the\r\n- *    distribution.\r\n- *\r\n- * 3. The end-user documentation included with the redistribution, if\r\n- *    any, must include the following acknowlegement:\r\n- *       \"This product includes software developed by the\r\n- *        Apache Software Foundation (http://www.apache.org/).\"\r\n- *    Alternately, this acknowlegement may appear in the software itself,\r\n- *    if and wherever such third-party acknowlegements normally appear.\r\n- *\r\n- * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\r\n- *    Foundation\" must not be used to endorse or promote products derived\r\n- *    from this software without prior written permission. For written\r\n- *    permission, please contact apache@apache.org.\r\n- *\r\n- * 5. Products derived from this software may not be called \"Apache\"\r\n- *    nor may \"Apache\" appear in their names without prior written\r\n- *    permission of the Apache Software Foundation.\r\n- *\r\n- * THIS SOFTWARE IS PROVIDED ``AS IS\u0027\u0027 AND ANY EXPRESSED OR IMPLIED\r\n- * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n- * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n- * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\r\n- * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\r\n- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\r\n- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\r\n- * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\r\n- * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\r\n- * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\r\n- * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\r\n- * SUCH DAMAGE.\r\n- * \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\r\n- *\r\n- * This software consists of voluntary contributions made by many\r\n- * individuals on behalf of the Apache Software Foundation.  For more\r\n- * information on the Apache Software Foundation, please see\r\n- * \u003chttp://www.apache.org/\u003e.\r\n- */\r\n-package org.apache.commons.math.stat.distribution;\r\n-\r\n-import org.apache.commons.math.RootFinding;\r\n-import org.apache.commons.math.UnivariateFunction;\r\n-\r\n-/**\r\n- * Base class for various continuous distributions.  It provides default\r\n- * implementations for some of the methods that do not vary from distribution\r\n- * to distribution.\r\n- *  \r\n- * @author Brent Worden\r\n- */\r\n-public abstract class AbstractContinuousDistribution\r\n-    implements ContinuousDistribution {\r\n-        \r\n-    /**\r\n-     * Default constructor.\r\n-     */\r\n-    protected AbstractContinuousDistribution() {\r\n-        super();\r\n-    }\r\n-\r\n-    /**\r\n-     * For this disbution, X, this method returns P(x0 \u0026lt; X \u0026lt; x1).  This\r\n-     * is accomplished by using the equality P(x0 \u0026lt; X \u0026lt; x1) \u003d\r\n-     * P(X \u0026lt; x1) - P(X \u0026lt; x0).\r\n-     * \r\n-     * @param x0 the lower bound\r\n-     * @param x1 the upper bound\r\n-     * @return the cummulative probability. \r\n-     */\r\n-    public double cummulativeProbability(double x0, double x1) {\r\n-        return cummulativeProbability(x1) - cummulativeProbability(x0);\r\n-    }\r\n-    \r\n-    /**\r\n-     * \r\n-     */\r\n-    public double inverseCummulativeProbability(final double p){\r\n-        if(p \u003c 0.0 || p \u003e 1.0){\r\n-            throw new IllegalArgumentException(\"p must be between 0.0 and 1.0 inclusive.\");\r\n-        }\r\n-        \r\n-        // by default, do simple root finding using bracketing and bisection.\r\n-        // subclasses can overide if there is a better method.\r\n-        UnivariateFunction rootFindingFunction \u003d new UnivariateFunction() {\r\n-\t\t\tpublic double evaluate(double x) {\r\n-\t\t\t\treturn cummulativeProbability(x) - p;\r\n-\t\t\t}\r\n-\t\t};\r\n-        \r\n-        // bracket root\r\n-        double[] bracket \u003d RootFinding.bracket(rootFindingFunction, getMean(), getDomainLowerBound(), getDomainUpperBound());\r\n-        \r\n-        // find root\r\n-        double root \u003d RootFinding.bisection(rootFindingFunction, bracket[0], bracket[1]);\r\n-        \r\n-        return root;\r\n-    }\r\n-}\r\n+/* \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS\u0027\u0027 AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * \u003chttp://www.apache.org/\u003e.\n+ */\n+package org.apache.commons.math.stat.distribution;\n+\n+import org.apache.commons.math.RootFinding;\n+import org.apache.commons.math.UnivariateFunction;\n+\n+/**\n+ * Base class for various continuous distributions.  It provides default\n+ * implementations for some of the methods that do not vary from distribution\n+ * to distribution.\n+ *  \n+ * @author Brent Worden\n+ */\n+public abstract class AbstractContinuousDistribution\n+    implements ContinuousDistribution {\n+        \n+    /**\n+     * Default constructor.\n+     */\n+    protected AbstractContinuousDistribution() {\n+        super();\n+    }\n+\n+    /**\n+     * For this distribution, X, this method returns P(x0 \u0026lt; X \u0026lt; x1).  This\n+     * is accomplished by using the equality P(x0 \u0026lt; X \u0026lt; x1) \u003d\n+     * P(X \u0026lt; x1) - P(X \u0026lt; x0).\n+     * \n+     * @param x0 the lower bound\n+     * @param x1 the upper bound\n+     * @return the cummulative probability. \n+     */\n+    public double cummulativeProbability(double x0, double x1) {\n+        return cummulativeProbability(x1) - cummulativeProbability(x0);\n+    }\n+    \n+    /**\n+     * For this distribution, X, this method returns the critical point x, such\n+     * that P(X \u0026lt; x) \u003d \u003ccode\u003ep\u003c/code\u003e.\n+     *\n+     * @param p the desired probability\n+     * @return x, such that P(X \u0026lt; x) \u003d \u003ccode\u003ep\u003c/code\u003e\n+     */\n+    public double inverseCummulativeProbability(final double p){\n+        if(p \u003c 0.0 || p \u003e 1.0){\n+            throw new IllegalArgumentException(\n+                \"p must be between 0.0 and 1.0, inclusive.\");\n+        }\n+        \n+        // by default, do simple root finding using bracketing and bisection.\n+        // subclasses can overide if there is a better method.\n+        UnivariateFunction rootFindingFunction \u003d new UnivariateFunction() {\n+            public double evaluate(double x) {\n+                return cummulativeProbability(x) - p;\n+            }\n+        };\n+        \n+        // bracket root\n+        double[] bracket \u003d RootFinding.bracket(rootFindingFunction,\n+            getInitialDomain(p), getDomainLowerBound(p),\n+            getDomainUpperBound(p));\n+        \n+        // find root\n+        double root \u003d RootFinding.bisection(rootFindingFunction, bracket[0],\n+            bracket[1]);\n+        \n+        return root;\n+    }\n+    \n+    /**\n+     * Access the initial domain value, based on \u003ccode\u003ep\u003c/code\u003e, used to\n+     * bracket a CDF root.  This method is used by\n+     * {@link #inverseCummulativeProbability(double)} to find critical values.\n+     * \n+     * @param p the desired probability for the critical value\n+     * @return initial domain value\n+     */\n+    protected abstract double getInitialDomain(double p);\n+    \n+    /**\n+     * Access the domain value lower bound, based on \u003ccode\u003ep\u003c/code\u003e, used to\n+     * bracket a CDF root.  This method is used by\n+     * {@link #inverseCummulativeProbability(double)} to find critical values.\n+     * \n+     * @param p the desired probability for the critical value\n+     * @return domain value lower bound, i.e.\n+     *         P(X \u0026lt; \u003ci\u003elower bound\u003c/i\u003e) \u0026lt; \u003ccode\u003ep\u003c/code\u003e \n+     */\n+    protected abstract double getDomainLowerBound(double p);\n+    \n+    /**\n+     * Access the domain value upper bound, based on \u003ccode\u003ep\u003c/code\u003e, used to\n+     * bracket a CDF root.  This method is used by\n+     * {@link #inverseCummulativeProbability(double)} to find critical values.\n+     * \n+     * @param p the desired probability for the critical value\n+     * @return domain value upper bound, i.e.\n+     *         P(X \u0026lt; \u003ci\u003eupper bound\u003c/i\u003e) \u0026gt; \u003ccode\u003ep\u003c/code\u003e \n+     */\n+    protected abstract double getDomainUpperBound(double p);\n+}\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [4883,5262]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [5272,5733]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [5743,6204]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [3704,3941]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodInvocation [4624,4643]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "MethodInvocation [4645,4667]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "MethodInvocation [4681,4703]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "METHOD_INVOCATION_ARGUMENTS [4665,4666]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "METHOD_INVOCATION_ARGUMENTS [4701,4702]"
        },
        {
          "type": "delete-node",
          "from": "Javadoc [3789,3810]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodInvocation [4442,4451]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "MethodInvocation [4453,4474]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "MethodInvocation [4476,4497]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/math/distribution/ContinuousDistribution.java",
        "src/java/org/apache/commons/math/distribution/ContinuousDistribution.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.math.stat.distribution.ContinuousDistribution:cummulativeProbability:[double x]:double",
            "org.apache.commons.math.stat.distribution.ContinuousDistribution:cummulativeProbability:[double x0, double x1]:double",
            "org.apache.commons.math.stat.distribution.ContinuousDistribution:getDomainUpperBound:[]:double",
            "org.apache.commons.math.stat.distribution.ContinuousDistribution:getMean:[]:double",
            "org.apache.commons.math.stat.distribution.ContinuousDistribution:inverseCummulativeProbability:[double p]:double",
            "org.apache.commons.math.stat.distribution.ContinuousDistribution:getDomainLowerBound:[]:double"
          ],
          "num": 6
        },
        {
          "qualified_names": [
            "org.apache.commons.math.stat.distribution.ContinuousDistribution:inverseCummulativeProbability:[double p]:double",
            "org.apache.commons.math.stat.distribution.ContinuousDistribution:cummulativeProbability:[double x]:double",
            "org.apache.commons.math.stat.distribution.ContinuousDistribution:cummulativeProbability:[double x0, double x1]:double"
          ],
          "num": 3
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "35",
            "36",
            "37",
            "38",
            "39",
            "40",
            "41",
            "42",
            "43",
            "44",
            "45",
            "46",
            "47",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57",
            "58",
            "59",
            "60",
            "61",
            "62",
            "63",
            "64",
            "65",
            "66",
            "67",
            "68",
            "69",
            "70",
            "71",
            "72",
            "73",
            "74",
            "75",
            "76",
            "77",
            "78",
            "79",
            "80",
            "81",
            "82",
            "83",
            "84",
            "85",
            "86",
            "87",
            "88",
            "89",
            "90",
            "91",
            "92",
            "93",
            "94",
            "95",
            "96",
            "97",
            "98"
          ],
          "num": 98
        },
        {
          "qualified_names": [
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "35",
            "36",
            "37",
            "38",
            "39",
            "40",
            "41",
            "42",
            "43",
            "44",
            "45",
            "46",
            "47",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57",
            "58",
            "59",
            "60",
            "61",
            "62",
            "63",
            "64",
            "65",
            "66",
            "67",
            "68",
            "69",
            "70",
            "71",
            "72",
            "73",
            "74",
            "75",
            "76",
            "77",
            "78",
            "79",
            "80",
            "81",
            "82",
            "83"
          ],
          "num": 83
        }
      ],
      "diff": "diff --git a/src/java/org/apache/commons/math/distribution/ContinuousDistribution.java b/src/java/org/apache/commons/math/distribution/ContinuousDistribution.java\nindex 52de897..7d714f3 100644\n--- a/src/java/org/apache/commons/math/distribution/ContinuousDistribution.java\n+++ b/src/java/org/apache/commons/math/distribution/ContinuousDistribution.java\n@@ -1,98 +1,83 @@\n-/* \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\r\n- * The Apache Software License, Version 1.1\r\n- *\r\n- * Copyright (c) 2003 The Apache Software Foundation.  All rights\r\n- * reserved.\r\n- *\r\n- * Redistribution and use in source and binary forms, with or without\r\n- * modification, are permitted provided that the following conditions\r\n- * are met:\r\n- *\r\n- * 1. Redistributions of source code must retain the above copyright\r\n- *    notice, this list of conditions and the following disclaimer.\r\n- *\r\n- * 2. Redistributions in binary form must reproduce the above copyright\r\n- *    notice, this list of conditions and the following disclaimer in\r\n- *    the documentation and/or other materials provided with the\r\n- *    distribution.\r\n- *\r\n- * 3. The end-user documentation included with the redistribution, if\r\n- *    any, must include the following acknowlegement:\r\n- *       \"This product includes software developed by the\r\n- *        Apache Software Foundation (http://www.apache.org/).\"\r\n- *    Alternately, this acknowlegement may appear in the software itself,\r\n- *    if and wherever such third-party acknowlegements normally appear.\r\n- *\r\n- * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\r\n- *    Foundation\" must not be used to endorse or promote products derived\r\n- *    from this software without prior written permission. For written\r\n- *    permission, please contact apache@apache.org.\r\n- *\r\n- * 5. Products derived from this software may not be called \"Apache\"\r\n- *    nor may \"Apache\" appear in their names without prior written\r\n- *    permission of the Apache Software Foundation.\r\n- *\r\n- * THIS SOFTWARE IS PROVIDED ``AS IS\u0027\u0027 AND ANY EXPRESSED OR IMPLIED\r\n- * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n- * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n- * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\r\n- * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\r\n- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\r\n- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\r\n- * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\r\n- * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\r\n- * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\r\n- * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\r\n- * SUCH DAMAGE.\r\n- * \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\r\n- *\r\n- * This software consists of voluntary contributions made by many\r\n- * individuals on behalf of the Apache Software Foundation.  For more\r\n- * information on the Apache Software Foundation, please see\r\n- * \u003chttp://www.apache.org/\u003e.\r\n- */\r\n-package org.apache.commons.math.stat.distribution;\r\n-\r\n-/**\r\n- * Base interface for various continuous distributions.\r\n- * \r\n- * @author Brent Worden\r\n- */\r\n-public interface ContinuousDistribution {\r\n-    /**\r\n-     * For this disbution, X, this method returns P(X \u0026lt; x).\r\n-     * @param x the value at which the CDF is evaluated.\r\n-     * @return CDF for this distribution. \r\n-     */\r\n-    double cummulativeProbability(double x);\r\n-\r\n-    /**\r\n-     * For this disbution, X, this method returns P(x0 \u0026lt; X \u0026lt; x1).\r\n-     * @param x0 the lower bound\r\n-     * @param x1 the upper bound\r\n-     * @return the cummulative probability. \r\n-     */\r\n-    double cummulativeProbability(double x0, double x1);\r\n-    \r\n-    /**\r\n-     * For this disbution, X, this method returns x such that P(X \u0026lt; x) \u003d p.\r\n-     * @param p the cummulative probability.\r\n-     * @return x. \r\n-     */\r\n-    double inverseCummulativeProbability(double p);\r\n-    \r\n-    /**\r\n-     * \r\n-     */\r\n-    double getMean();\r\n-    \r\n-    /**\r\n-     * \r\n-     */\r\n-    double getDomainLowerBound();\r\n-    \r\n-    /**\r\n-     * \r\n-     */\r\n-    double getDomainUpperBound();\r\n-}\r\n+/* \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS\u0027\u0027 AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * \u003chttp://www.apache.org/\u003e.\n+ */\n+package org.apache.commons.math.stat.distribution;\n+\n+/**\n+ * Base interface for various continuous distributions.\n+ * \n+ * @author Brent Worden\n+ */\n+public interface ContinuousDistribution {\n+    /**\n+     * For this disbution, X, this method returns P(X \u0026lt; x).\n+     * @param x the value at which the CDF is evaluated.\n+     * @return CDF for this distribution. \n+     */\n+    double cummulativeProbability(double x);\n+\n+    /**\n+     * For this disbution, X, this method returns P(x0 \u0026lt; X \u0026lt; x1).\n+     * @param x0 the lower bound\n+     * @param x1 the upper bound\n+     * @return the cummulative probability. \n+     */\n+    double cummulativeProbability(double x0, double x1);\n+    \n+    /**\n+     * For this disbution, X, this method returns x such that P(X \u0026lt; x) \u003d p.\n+     * @param p the cummulative probability.\n+     * @return x. \n+     */\n+    double inverseCummulativeProbability(double p);\n+}\n",
      "operations": [
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [3632,3676]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [3688,3744]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [3756,3812]",
          "to": ""
        }
      ]
    }
  ],
  "inducing_type": {
    "add_classes": {
      "qualified_names": [
        "src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java",
        "src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java",
        "src/java/org/apache/commons/math/distribution/DistributionFactory.java",
        "src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java",
        "src/java/org/apache/commons/math/distribution/GammaDistribution.java",
        "src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java",
        "src/java/org/apache/commons/math/special/Gamma.java"
      ],
      "num": 7
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [
        "org.apache.commons.math.stat.distribution.AbstractContinuousDistribution:getDomainUpperBound:[double p]:double",
        "org.apache.commons.math.stat.distribution.AbstractContinuousDistribution:getDomainLowerBound:[double p]:double",
        "org.apache.commons.math.stat.distribution.AbstractContinuousDistribution:getInitialDomain:[double p]:double"
      ],
      "num": 3
    },
    "delete_functions": {
      "qualified_names": [
        "org.apache.commons.math.stat.distribution.ContinuousDistribution:getDomainUpperBound:[]:double",
        "org.apache.commons.math.stat.distribution.ContinuousDistribution:getDomainLowerBound:[]:double",
        "org.apache.commons.math.stat.distribution.ContinuousDistribution:getMean:[]:double"
      ],
      "num": 3
    }
  },
  "trigger_tests": [
    {
      "test_class": "org.apache.commons.math.special.GammaTest",
      "test_function": "testRegularizedGammaPositivePositive",
      "assertion_line": "77",
      "exception": "junit.framework.AssertionFailedError",
      "message": "expected:\u003c0.632120558828558\u003e but was:\u003c0.6321205587649603\u003e"
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/math/special/Beta.java",
        "src/java/org/apache/commons/math/special/Beta.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [],
          "num": 0
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "36"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "36"
          ],
          "num": 1
        }
      ],
      "diff": "diff --git a/src/java/org/apache/commons/math/special/Beta.java b/src/java/org/apache/commons/math/special/Beta.java\nindex 4239c25..904e156 100644\n--- a/src/java/org/apache/commons/math/special/Beta.java\n+++ b/src/java/org/apache/commons/math/special/Beta.java\n@@ -33,7 +33,7 @@\n     private static final long serialVersionUID \u003d -3833485397404128220L;\n \n     /** Maximum allowed numerical error. */\n-    private static final double DEFAULT_EPSILON \u003d 10e-9;\n+    private static final double DEFAULT_EPSILON \u003d 10e-15;\n \n     /**\n      * Default constructor.  Prohibit instantiation.\n",
      "operations": [
        {
          "type": "update-node",
          "from": "",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/math/special/Gamma.java",
        "src/java/org/apache/commons/math/special/Gamma.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [],
          "num": 0
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "37"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "37"
          ],
          "num": 1
        }
      ],
      "diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cb..ba2c4db 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -34,7 +34,7 @@\n     private static final long serialVersionUID \u003d -6587513359895466954L;\n \n     /** Maximum allowed numerical error. */\n-    private static final double DEFAULT_EPSILON \u003d 10e-9;\n+    private static final double DEFAULT_EPSILON \u003d 10e-15;\n \n     /** Lanczos coefficients */\n     private static double[] lanczos \u003d\n",
      "operations": [
        {
          "type": "update-node",
          "from": "",
          "to": ""
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  },
  "patch_changed_mths": {
    "qualified_names": [],
    "num": 0
  }
}