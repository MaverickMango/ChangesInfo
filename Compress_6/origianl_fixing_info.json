{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "/home/liumengjiao/Desktop/CI/Benchmark/data/changesInfo/",
  "properties": {
    "trigger.tests": "org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest::testNotEquals",
    "test.dir": "src/test/java",
    "clz.modified": "org.apache.commons.compress.archivers.zip.ZipArchiveEntry",
    "src.dir": "src/main/java"
  },
  "timeoutSecond": 100,
  "proj": "Compress",
  "id": "6",
  "workingDir": "../bugs/Compress_6_buggy",
  "buggyCommit": "41aa509d836dcdd316a40e68680cc54e0f6c1e04",
  "inducingCommit": "28c23fb69e745c7c63f694b2a8732bf3499c850f",
  "originalCommit": "1a6cf4371252aba8ec9d7aba5d339ded2cbcc1f9",
  "bug_name": "Compress_6",
  "derive": "defects4j",
  "original_fixing_commit": "5066e9aeb98f386b29a31cd4acb97aa43844cd30",
  "buildFiles_changed": true,
  "regression": true,
  "inducing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java",
        "src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.compress.archivers.ar.ArArchiveEntry:isDirectory:[]:boolean"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "org.apache.commons.compress.archivers.ar.ArArchiveEntry:equals:[Object obj]:boolean",
            "org.apache.commons.compress.archivers.ar.ArArchiveEntry:hashCode:[]:int"
          ],
          "num": 2
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "120"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "121",
            "122",
            "123",
            "124",
            "125",
            "126",
            "127",
            "128",
            "129",
            "130",
            "131",
            "132",
            "133",
            "134",
            "135",
            "136",
            "137",
            "138",
            "139",
            "140",
            "141",
            "142",
            "143",
            "144",
            "145",
            "146",
            "147",
            "148",
            "149",
            "150",
            "151"
          ],
          "num": 31
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java b/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java\nindex 4a59cf1..8ce8f26 100644\n--- a/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java\n@@ -118,4 +118,35 @@\n \tpublic boolean isDirectory() {\n \t\treturn false;\n \t}\n+\n+    /* (non-Javadoc)\n+     * @see java.lang.Object#hashCode()\n+     */\n+    public int hashCode() {\n+        final int prime \u003d 31;\n+        int result \u003d 1;\n+        result \u003d prime * result + ((name \u003d\u003d null) ? 0 : name.hashCode());\n+        return result;\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see java.lang.Object#equals(java.lang.Object)\n+     */\n+    public boolean equals(Object obj) {\n+        if (this \u003d\u003d obj) {\n+            return true;\n+        }\n+        if (obj \u003d\u003d null || getClass() !\u003d obj.getClass()) {\n+            return false;\n+        }\n+        ArArchiveEntry other \u003d (ArArchiveEntry) obj;\n+        if (name \u003d\u003d null) {\n+            if (other.name !\u003d null) {\n+                return false;\n+            }\n+        } else if (!name.equals(other.name)) {\n+            return false;\n+        }\n+        return true;\n+    }\n }\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [3814,3994]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [4083,4548]"
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.java",
        "src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry:setUID:[final long uid]:void"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry:equals:[Object obj]:boolean",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry:hashCode:[]:int"
          ],
          "num": 2
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "766"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "767",
            "768",
            "769",
            "770",
            "771",
            "772",
            "773",
            "774",
            "775",
            "776",
            "777",
            "778",
            "779",
            "780",
            "781",
            "782",
            "783",
            "784",
            "785",
            "786",
            "787",
            "788",
            "789",
            "790",
            "791",
            "792",
            "793",
            "794",
            "795",
            "796",
            "797"
          ],
          "num": 31
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.java b/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.java\nindex 49be653..cb506de 100644\n--- a/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.java\n@@ -764,4 +764,35 @@\n     public void setUID(final long uid) {\n         this.uid \u003d uid;\n     }\n+\n+    /* (non-Javadoc)\n+     * @see java.lang.Object#hashCode()\n+     */\n+    public int hashCode() {\n+        final int prime \u003d 31;\n+        int result \u003d 1;\n+        result \u003d prime * result + ((name \u003d\u003d null) ? 0 : name.hashCode());\n+        return result;\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see java.lang.Object#equals(java.lang.Object)\n+     */\n+    public boolean equals(Object obj) {\n+        if (this \u003d\u003d obj) {\n+            return true;\n+        }\n+        if (obj \u003d\u003d null || getClass() !\u003d obj.getClass()) {\n+            return false;\n+        }\n+        CpioArchiveEntry other \u003d (CpioArchiveEntry) obj;\n+        if (name \u003d\u003d null) {\n+            if (other.name !\u003d null) {\n+                return false;\n+            }\n+        } else if (!name.equals(other.name)) {\n+            return false;\n+        }\n+        return true;\n+    }\n }\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [21500,21680]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [21769,22238]"
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java",
        "src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.compress.archivers.jar.JarArchiveEntry:getCertificates:[]:Certificate[]"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "org.apache.commons.compress.archivers.jar.JarArchiveEntry:equals:[Object obj]:boolean",
            "org.apache.commons.compress.archivers.jar.JarArchiveEntry:hashCode:[]:int"
          ],
          "num": 2
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "67"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "68",
            "69",
            "70",
            "71",
            "72",
            "73",
            "74",
            "75",
            "76",
            "77",
            "78",
            "79",
            "80",
            "81"
          ],
          "num": 14
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java b/src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java\nindex 49fb97f..e66ebcb 100644\n--- a/src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java\n@@ -65,4 +65,18 @@\n             }\n             return null;\n \t}\n+\n+    /* (non-Javadoc)\n+     * @see org.apache.commons.compress.archivers.zip.ZipArchiveEntry#equals(java.lang.Object)\n+     */\n+    public boolean equals(Object obj) {\n+        return super.equals(obj);\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see org.apache.commons.compress.archivers.zip.ZipArchiveEntry#hashCode()\n+     */\n+    public int hashCode() {\n+        return super.hashCode();\n+    }\n }\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [2184,2259]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [2375,2437]"
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java",
        "src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:mergeExtraFields:[ZipExtraField[] f, boolean local]:void"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:equals:[Object obj]:boolean"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "392"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "393",
            "394",
            "395",
            "396",
            "397",
            "398",
            "399",
            "400",
            "401",
            "402",
            "403",
            "404",
            "405",
            "406",
            "407",
            "408",
            "409",
            "410",
            "411",
            "412",
            "413"
          ],
          "num": 21
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java\nindex 419b59c..772b19f 100644\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java\n@@ -390,4 +390,25 @@\n             setExtra();\n         }\n     }\n+\n+    /* (non-Javadoc)\n+     * @see java.lang.Object#equals(java.lang.Object)\n+     */\n+    public boolean equals(Object obj) {\n+        if (this \u003d\u003d obj) {\n+            return true;\n+        }\n+        if (obj \u003d\u003d null || getClass() !\u003d obj.getClass()) {\n+            return false;\n+        }\n+        ZipArchiveEntry other \u003d (ZipArchiveEntry) obj;\n+        if (name \u003d\u003d null) {\n+            if (other.name !\u003d null) {\n+                return false;\n+            }\n+        } else if (!name.equals(other.name)) {\n+            return false;\n+        }\n+        return true;\n+    }\n }\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [12511,12978]"
        }
      ]
    }
  ],
  "inducing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [
        "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry:equals:[Object obj]:boolean",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:equals:[Object obj]:boolean",
        "org.apache.commons.compress.archivers.jar.JarArchiveEntry:hashCode:[]:int",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry:hashCode:[]:int",
        "org.apache.commons.compress.archivers.jar.JarArchiveEntry:equals:[Object obj]:boolean",
        "org.apache.commons.compress.archivers.ar.ArArchiveEntry:equals:[Object obj]:boolean",
        "org.apache.commons.compress.archivers.ar.ArArchiveEntry:hashCode:[]:int"
      ],
      "num": 7
    },
    "delete_functions": {
      "qualified_names": [
        "org.apache.commons.compress.archivers.ar.ArArchiveEntry:isDirectory:[]:boolean",
        "org.apache.commons.compress.archivers.jar.JarArchiveEntry:getCertificates:[]:Certificate[]",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:mergeExtraFields:[ZipExtraField[] f, boolean local]:void",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry:setUID:[final long uid]:void"
      ],
      "num": 4
    }
  },
  "trigger_tests": [
    {
      "test_class": "org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest",
      "test_function": "testNotEquals",
      "assertion_line": "230",
      "exception": "junit.framework.AssertionFailedError",
      "message": ""
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java",
        "src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:equals:[Object obj]:boolean",
            "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:ZipArchiveEntry:[String name]:null",
            "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:ZipArchiveEntry:[]:null"
          ],
          "num": 3
        },
        {
          "qualified_names": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:ZipArchiveEntry:[String name]:null",
            "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:ZipArchiveEntry:[]:null",
            "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:equals:[Object obj]:boolean"
          ],
          "num": 3
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "63",
            "99",
            "462",
            "463",
            "466"
          ],
          "num": 5
        },
        {
          "qualified_names": [
            "64",
            "100",
            "463",
            "464",
            "465",
            "466",
            "469"
          ],
          "num": 7
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java\nindex cab4c1c..fe5270f 100644\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java\n@@ -61,6 +61,7 @@\n      */\n     public ZipArchiveEntry(String name) {\n         super(name);\n+        setName(name);\n     }\n \n     /**\n@@ -96,7 +97,7 @@\n     /**\n      */\n     protected ZipArchiveEntry() {\n-        super(\"\");\n+        this(\"\");\n     }\n \n     public ZipArchiveEntry(File inputFile, String entryName) {\n@@ -459,11 +460,13 @@\n             return false;\n         }\n         ZipArchiveEntry other \u003d (ZipArchiveEntry) obj;\n-        if (name \u003d\u003d null) {\n-            if (other.name !\u003d null) {\n+        String myName \u003d getName();\n+        String otherName \u003d other.getName();\n+        if (myName \u003d\u003d null) {\n+            if (otherName !\u003d null) {\n                 return false;\n             }\n-        } else if (!name.equals(other.name)) {\n+        } else if (!myName.equals(otherName)) {\n             return false;\n         }\n         return true;\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [2335,2349]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ConstructorInvocation [3494,3503]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [14608,14634]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [14643,14678]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: otherName [14725,14734]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: otherName [14824,14833]"
        },
        {
          "type": "delete-tree",
          "from": "SuperConstructorInvocation [3471,3481]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "QualifiedName: other.name [14622,14632]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "QualifiedName: other.name [14720,14730]",
          "to": ""
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  },
  "patch_changed_mths": {
    "qualified_names": [
      "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:ZipArchiveEntry(Ljava/lang/String;)V:regression",
      "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:ZipArchiveEntry(Ljava/util/zip/ZipEntry;)V:regression",
      "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:ZipArchiveEntry(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V:regression",
      "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:ZipArchiveEntry()V:regression",
      "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:ZipArchiveEntry()Ljava/lang/Object;:regression",
      "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:ZipArchiveEntry()Z:regression",
      "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:ZipArchiveEntry()I:regression",
      "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:ZipArchiveEntry(I)V:regression",
      "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:ZipArchiveEntry()I:regression",
      "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:ZipArchiveEntry(I)V:regression",
      "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:ZipArchiveEntry()J:regression",
      "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:ZipArchiveEntry(J)V:regression",
      "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:ZipArchiveEntry(I)V:regression",
      "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:ZipArchiveEntry()I:regression",
      "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:ZipArchiveEntry()I:regression",
      "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:ZipArchiveEntry(I)V:regression",
      "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:ZipArchiveEntry([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V:regression",
      "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:ZipArchiveEntry()[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;:regression",
      "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:ZipArchiveEntry(Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V:regression",
      "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:ZipArchiveEntry(Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V:regression",
      "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:ZipArchiveEntry(Lorg/apache/commons/compress/archivers/zip/ZipShort;)V:regression",
      "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:ZipArchiveEntry(Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;:regression",
      "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:ZipArchiveEntry([B)V:regression",
      "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:ZipArchiveEntry()V:regression",
      "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:ZipArchiveEntry([B)V:regression",
      "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:ZipArchiveEntry()[B:regression",
      "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:ZipArchiveEntry()[B:regression",
      "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:ZipArchiveEntry()Ljava/lang/String;:regression",
      "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:ZipArchiveEntry()Z:regression",
      "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:ZipArchiveEntry(Ljava/lang/String;)V:regression",
      "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:ZipArchiveEntry()I:regression",
      "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:ZipArchiveEntry()Ljava/util/Date;:regression",
      "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:ZipArchiveEntry(Ljava/lang/Object;)Z:regression"
    ],
    "num": 33
  }
}