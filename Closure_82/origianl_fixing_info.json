{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "/home/liumengjiao/Desktop/CI/Benchmark/data/changesInfo/",
  "properties": {
    "trigger.tests": "com.google.javascript.jscomp.TypeCheckTest::testIssue301,com.google.javascript.rhino.jstype.FunctionTypeTest::testEmptyFunctionTypes",
    "test.dir": "test",
    "clz.modified": "com.google.javascript.rhino.jstype.JSType",
    "src.dir": "src"
  },
  "timeoutSecond": 100,
  "proj": "Closure",
  "id": "82",
  "workingDir": "../bugs/Closure_82_buggy",
  "buggyCommit": "1a7fbd18b47c102152869c3b046b65ff0f12fc43",
  "inducingCommit": "8a76da206034045c555297e5069eb273d05fc6fb",
  "originalCommit": "026a1083635e5564b6c18264372ee884f410490f",
  "bug_name": "Closure_82",
  "derive": "defects4j",
  "original_fixing_commit": "a857aec27d79fc234fddd4a72c1215af0251b2d8",
  "buildFiles_changed": false,
  "regression": true,
  "inducing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/rhino/JSDocInfo.java",
        "src/com/google/javascript/rhino/JSDocInfo.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "com.google.javascript.rhino.JSDocInfo:setDeprecationReason:[String reason]:boolean",
            "com.google.javascript.rhino.JSDocInfo:getLendsName:[]:String",
            "com.google.javascript.rhino.JSDocInfo:getEnumParameterType:[]:JSTypeExpression",
            "com.google.javascript.rhino.JSDocInfo:addMarker:[]:Marker",
            "com.google.javascript.rhino.JSDocInfo:isNoCompile:[]:boolean",
            "com.google.javascript.rhino.JSDocInfo:getReferences:[]:Collection\u003cString\u003e"
          ],
          "num": 6
        },
        {
          "qualified_names": [
            "com.google.javascript.rhino.JSDocInfo:containsDeclaration:[]:boolean",
            "com.google.javascript.rhino.JSDocInfo:setLendsName:[String name]:void",
            "com.google.javascript.rhino.JSDocInfo:setMeaning:[String meaning]:void",
            "com.google.javascript.rhino.JSDocInfo:getModifies:[]:Set\u003cString\u003e",
            "com.google.javascript.rhino.JSDocInfo:addSuppression:[String suppression]:void",
            "com.google.javascript.rhino.JSDocInfo:getLendsName:[]:String",
            "com.google.javascript.rhino.JSDocInfo:getLicense:[]:String",
            "com.google.javascript.rhino.JSDocInfo:hasDescriptionForParameter:[String name]:boolean",
            "com.google.javascript.rhino.JSDocInfo:hasModifies:[]:boolean",
            "com.google.javascript.rhino.JSDocInfo:addModifies:[String modifies]:void",
            "com.google.javascript.rhino.JSDocInfo:documentVersion:[String version]:boolean",
            "com.google.javascript.rhino.JSDocInfo:setSuppressions:[Set\u003cString\u003e suppressions]:boolean",
            "com.google.javascript.rhino.JSDocInfo:getMeaning:[]:String",
            "com.google.javascript.rhino.JSDocInfo:setModifies:[Set\u003cString\u003e modifies]:boolean"
          ],
          "num": 14
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "44",
            "54",
            "66",
            "68",
            "98",
            "452",
            "518",
            "533",
            "957",
            "1044",
            "1187"
          ],
          "num": 11
        },
        {
          "qualified_names": [
            "45",
            "52",
            "67",
            "98",
            "102",
            "103",
            "455",
            "456",
            "457",
            "458",
            "459",
            "460",
            "461",
            "462",
            "463",
            "464",
            "465",
            "466",
            "467",
            "468",
            "469",
            "470",
            "471",
            "472",
            "473",
            "474",
            "475",
            "476",
            "543",
            "544",
            "545",
            "546",
            "547",
            "548",
            "549",
            "550",
            "551",
            "552",
            "553",
            "554",
            "570",
            "571",
            "572",
            "573",
            "574",
            "575",
            "576",
            "577",
            "578",
            "579",
            "580",
            "581",
            "582",
            "583",
            "584",
            "585",
            "586",
            "587",
            "588",
            "589",
            "590",
            "591",
            "592",
            "593",
            "594",
            "595",
            "596",
            "1021",
            "1022",
            "1023",
            "1024",
            "1025",
            "1026",
            "1027",
            "1028",
            "1029",
            "1030",
            "1031",
            "1032",
            "1033",
            "1034",
            "1035",
            "1036",
            "1037",
            "1038",
            "1039",
            "1040",
            "1041",
            "1042",
            "1043",
            "1044",
            "1045",
            "1046",
            "1047",
            "1048",
            "1049",
            "1050",
            "1051",
            "1052",
            "1053",
            "1054",
            "1055",
            "1056",
            "1057",
            "1145",
            "1146",
            "1147",
            "1148",
            "1149",
            "1150",
            "1151",
            "1152",
            "1296",
            "1297",
            "1298",
            "1299"
          ],
          "num": 116
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/rhino/JSDocInfo.java b/src/com/google/javascript/rhino/JSDocInfo.java\nindex 08a42fe..325f073 100644\n--- a/src/com/google/javascript/rhino/JSDocInfo.java\n+++ b/src/com/google/javascript/rhino/JSDocInfo.java\n@@ -42,6 +42,7 @@\n import com.google.common.collect.ImmutableList;\n import com.google.common.collect.ImmutableSet;\n import com.google.common.collect.Lists;\n+import com.google.common.collect.Sets;\n \n import java.io.Serializable;\n import java.util.Collection;\n@@ -51,7 +52,6 @@\n import java.util.Map;\n import java.util.Set;\n \n-\n /**\n  * \u003cp\u003eJSDoc information describing JavaScript code. JSDoc is represented as a\n  * unified object with fields for each JSDoc annotation, even though some\n@@ -63,9 +63,8 @@\n  * \u003cp\u003eConstructing {@link JSDocInfo} objects is simplified by\n  * {@link JSDocInfoBuilder} which provides early incompatibility detection.\u003c/p\u003e\n  *\n- *\n  */\n-public final class JSDocInfo implements Serializable {\n+public class JSDocInfo implements Serializable {\n   private static final long serialVersionUID \u003d 1L;\n \n   /**\n@@ -96,9 +95,12 @@\n \n     // Other information\n     String description \u003d null;\n+    String meaning \u003d null;\n     String deprecated \u003d null;\n     String license \u003d null;\n     Set\u003cString\u003e suppressions \u003d null;\n+    Set\u003cString\u003e modifies \u003d null;\n+    String lendsName \u003d null;\n   }\n \n   private static final class LazilyInitializedDocumentation {\n@@ -450,6 +452,28 @@\n     return getFlag(MASK_NOCOMPILE);\n   }\n \n+  /**\n+   * @return Whether there is declaration present on this {@link JSDocInfo}.\n+   */\n+  public boolean containsDeclaration() {\n+    return (hasType()\n+        || hasReturnType()\n+        || hasEnumParameterType()\n+        || hasTypedefType()\n+        || hasThisType()\n+        || getParameterCount() \u003e 0\n+        || getFlag(MASK_CONSTANT\n+            | MASK_CONSTRUCTOR\n+            | MASK_DEFINE\n+            | MASK_OVERRIDE\n+            | MASK_NOALIAS\n+            | MASK_DEPRECATED\n+            | MASK_INTERFACE\n+            | MASK_NOSHADOW\n+            | MASK_IMPLICITCAST\n+            | MASK_NOSIDEEFFECTS));\n+  }\n+\n   private boolean getFlag(int mask) {\n     return (bitset \u0026 mask) !\u003d 0x00;\n   }\n@@ -516,6 +540,18 @@\n   }\n \n   /**\n+   * Add a suppressed warning.\n+   */\n+  void addSuppression(String suppression) {\n+    lazyInitInfo();\n+\n+    if (info.suppressions \u003d\u003d null) {\n+      info.suppressions \u003d Sets.newHashSet();\n+    }\n+    info.suppressions.add(suppression);\n+  }\n+\n+  /**\n    * Sets suppressed warnings.\n    * @param suppressions A list of suppressed warning types.\n    */\n@@ -531,6 +567,33 @@\n   }\n \n   /**\n+   * Add modifies values.\n+   */\n+  void addModifies(String modifies) {\n+    lazyInitInfo();\n+\n+    if (info.modifies \u003d\u003d null) {\n+      info.modifies \u003d Sets.newHashSet();\n+    }\n+    info.modifies.add(modifies);\n+  }\n+\n+  /**\n+   * Sets modifies values.\n+   * @param modifies A list of modifies types.\n+   */\n+  boolean setModifies(Set\u003cString\u003e modifies) {\n+    lazyInitInfo();\n+\n+    if (info.modifies !\u003d null) {\n+      return false;\n+    }\n+\n+    info.modifies \u003d modifies;\n+    return true;\n+  }\n+\n+  /**\n    * Documents the version.\n    */\n   boolean documentVersion(String version) {\n@@ -955,6 +1018,43 @@\n   }\n \n   /**\n+   * Gets the meaning specified by the {@code @meaning} annotation.\n+   *\n+   * In localization systems, two messages with the same content but\n+   * different \"meanings\" may be translated differently. By default, we\n+   * use the name of the variable that the message is initialized to as\n+   * the \"meaning\" of the message.\n+   *\n+   * But some code generators (like Closure Templates) inject their own\n+   * meaning with the jsdoc {@code @meaning} annotation.\n+   */\n+  public String getMeaning() {\n+    return (info \u003d\u003d null) ? null : info.meaning;\n+  }\n+\n+  void setMeaning(String meaning) {\n+    lazyInitInfo();\n+    info.meaning \u003d meaning;\n+  }\n+\n+  /**\n+   * Gets the name we\u0027re lending to in a {@code @lends} annotation.\n+   *\n+   * In many reflection APIs, you pass an anonymous object to a function,\n+   * and that function mixes the anonymous object into another object.\n+   * The {@code @lends} annotation allows the type system to track\n+   * those property assignments.\n+   */\n+  public String getLendsName() {\n+    return (info \u003d\u003d null) ? null : info.lendsName;\n+  }\n+\n+  void setLendsName(String name) {\n+    lazyInitInfo();\n+    info.lendsName \u003d name;\n+  }\n+\n+  /**\n    * Gets the description specified by the {@code @license} annotation.\n    */\n   public String getLicense() {\n@@ -1042,6 +1142,14 @@\n   }\n \n   /**\n+   * Returns the set of sideeffect notations.\n+   */\n+  public Set\u003cString\u003e getModifies() {\n+    Set\u003cString\u003e modifies \u003d info \u003d\u003d null ? null : info.modifies;\n+    return modifies \u003d\u003d null ? Collections.\u003cString\u003eemptySet() : modifies;\n+  }\n+\n+  /**\n    * Returns whether a description exists for the parameter with the specified\n    * name.\n    */\n@@ -1185,4 +1293,8 @@\n \n     return nodes;\n   }\n+\n+  public boolean hasModifies() {\n+    return info !\u003d null \u0026\u0026 info.modifies !\u003d null;\n+  }\n }\n",
      "operations": [
        {
          "type": "delete-node",
          "from": "Modifier: final [2565,2570]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/rhino/jstype/AllType.java",
        "src/com/google/javascript/rhino/jstype/AllType.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "com.google.javascript.rhino.jstype.AllType:visit:[Visitor\u003cT\u003e visitor]:T",
            "com.google.javascript.rhino.jstype.AllType:isSubtype:[JSType that]:boolean"
          ],
          "num": 2
        },
        {
          "qualified_names": [
            "com.google.javascript.rhino.jstype.AllType:visit:[Visitor\u003cT\u003e visitor]:T",
            "com.google.javascript.rhino.jstype.AllType:hasDisplayName:[]:boolean",
            "com.google.javascript.rhino.jstype.AllType:getDisplayName:[]:String",
            "com.google.javascript.rhino.jstype.AllType:isSubtype:[JSType that]:boolean"
          ],
          "num": 4
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "48",
            "49",
            "60",
            "65",
            "113"
          ],
          "num": 5
        },
        {
          "qualified_names": [
            "47",
            "58",
            "63",
            "112",
            "113",
            "114",
            "115",
            "116",
            "117",
            "118",
            "119",
            "120",
            "121"
          ],
          "num": 13
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/rhino/jstype/AllType.java b/src/com/google/javascript/rhino/jstype/AllType.java\nindex ffa2f6a..9deb939 100644\n--- a/src/com/google/javascript/rhino/jstype/AllType.java\n+++ b/src/com/google/javascript/rhino/jstype/AllType.java\n@@ -45,8 +45,6 @@\n \n /**\n  * All type, representing all values.\n- *\n- *\n  */\n public final class AllType extends JSType {\n   private static final long serialVersionUID \u003d 1L;\n@@ -57,12 +55,12 @@\n \n   /**\n    * The All type is the greatest type (top) and is never a subtype of\n-   * another except itself or the Unknown type.\n+   * another except itself or the Unknown type or a named alias.\n    * @return {@code this.isEquivalentTo(that)}\n    */\n   @Override\n   public boolean isSubtype(JSType that) {\n-    return that.isAllType() || that.isUnknownType();\n+    return JSType.isSubtype(this, that);\n   }\n \n   @Override\n@@ -111,6 +109,16 @@\n   }\n \n   @Override\n+  public String getDisplayName() {\n+    return \"\u003cAny Type\u003e\";\n+  }\n+\n+  @Override\n+  public boolean hasDisplayName() {\n+    return true;\n+  }\n+\n+  @Override\n   public \u003cT\u003e T visit(Visitor\u003cT\u003e visitor) {\n     return visitor.caseAllType();\n   }\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [2997,3070]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [3074,3140]"
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/rhino/jstype/BooleanType.java",
        "src/com/google/javascript/rhino/jstype/BooleanType.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "com.google.javascript.rhino.jstype.BooleanType:testForEquality:[JSType that]:TernaryValue",
            "com.google.javascript.rhino.jstype.BooleanType:toString:[]:String"
          ],
          "num": 2
        },
        {
          "qualified_names": [
            "com.google.javascript.rhino.jstype.BooleanType:testForEquality:[JSType that]:TernaryValue",
            "com.google.javascript.rhino.jstype.BooleanType:getDisplayName:[]:String",
            "com.google.javascript.rhino.jstype.BooleanType:toString:[]:String"
          ],
          "num": 3
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "48",
            "64",
            "65",
            "102"
          ],
          "num": 4
        },
        {
          "qualified_names": [
            "47",
            "63",
            "64",
            "65",
            "103",
            "104",
            "105",
            "106",
            "107"
          ],
          "num": 9
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/rhino/jstype/BooleanType.java b/src/com/google/javascript/rhino/jstype/BooleanType.java\nindex f4a9244..5331fdd 100644\n--- a/src/com/google/javascript/rhino/jstype/BooleanType.java\n+++ b/src/com/google/javascript/rhino/jstype/BooleanType.java\n@@ -45,7 +45,6 @@\n \n /**\n  * Boolean type.\n- *\n  */\n public class BooleanType extends ValueType {\n   private static final long serialVersionUID \u003d 1L;\n@@ -61,8 +60,9 @@\n \n   @Override\n   public TernaryValue testForEquality(JSType that) {\n-    if (UNKNOWN.equals(super.testForEquality(that))) {\n-      return UNKNOWN;\n+    TernaryValue result \u003d super.testForEquality(that);\n+    if (result !\u003d null) {\n+      return result;\n     }\n     if (that.isUnknownType() || that.isSubtype(\n             getNativeType(JSTypeNative.NUMBER_STRING_BOOLEAN)) ||\n@@ -100,6 +100,11 @@\n \n   @Override\n   public String toString() {\n+    return getDisplayName();\n+  }\n+\n+  @Override\n+  public String getDisplayName() {\n     return \"boolean\";\n   }\n \n",
      "operations": [
        {
          "type": "insert-node",
          "from": "",
          "to": "MethodDeclaration [2939,3009]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MarkerAnnotation [2939,2948]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: public [2951,2957]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SimpleType [2958,2964]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: getDisplayName [2965,2979]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Block [2982,3009]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ReturnStatement [2907,2931]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/rhino/jstype/EnumType.java",
        "src/com/google/javascript/rhino/jstype/EnumType.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "com.google.javascript.rhino.jstype.EnumType:visit:[Visitor\u003cT\u003e visitor]:T"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "com.google.javascript.rhino.jstype.EnumType:getDisplayName:[]:String",
            "com.google.javascript.rhino.jstype.EnumType:visit:[Visitor\u003cT\u003e visitor]:T"
          ],
          "num": 2
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "54",
            "55",
            "128"
          ],
          "num": 3
        },
        {
          "qualified_names": [
            "53",
            "127",
            "128",
            "129",
            "130",
            "131"
          ],
          "num": 6
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/rhino/jstype/EnumType.java b/src/com/google/javascript/rhino/jstype/EnumType.java\nindex f3965c8..8cc77f3 100644\n--- a/src/com/google/javascript/rhino/jstype/EnumType.java\n+++ b/src/com/google/javascript/rhino/jstype/EnumType.java\n@@ -51,8 +51,6 @@\n /**\n  * An enum type representing a branded collection of elements. Each element\n  * is referenced by its name, and has an {@link EnumElementType} type.\n- *\n- *\n  */\n public class EnumType extends PrototypeObjectType {\n   private static final long serialVersionUID \u003d 1L;\n@@ -126,6 +124,11 @@\n   }\n \n   @Override\n+  public String getDisplayName() {\n+    return elementsType.getDisplayName();\n+  }\n+\n+  @Override\n   public \u003cT\u003e T visit(Visitor\u003cT\u003e visitor) {\n     return visitor.caseObjectType(this);\n   }\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [3954,4044]"
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/rhino/jstype/JSType.java",
        "src/com/google/javascript/rhino/jstype/JSType.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "com.google.javascript.rhino.jstype.JSType:safeResolve:[JSType type, ErrorReporter t, StaticScope\u003cJSType\u003e scope]:JSType",
            "com.google.javascript.rhino.jstype.JSType:isSubtype:[JSType thisType, JSType thatType]:boolean",
            "com.google.javascript.rhino.jstype.JSType:testForEqualityHelper:[JSType aType, JSType bType]:TernaryValue",
            "com.google.javascript.rhino.jstype.JSType:forgiveUnknownNames:[]:void",
            "com.google.javascript.rhino.jstype.JSType:testForEquality:[JSType that]:TernaryValue"
          ],
          "num": 5
        },
        {
          "qualified_names": [
            "com.google.javascript.rhino.jstype.JSType:getDisplayName:[]:String",
            "com.google.javascript.rhino.jstype.JSType:isSubtype:[JSType thisType, JSType thatType]:boolean",
            "com.google.javascript.rhino.jstype.JSType:setValidator:[Predicate\u003cJSType\u003e validator]:boolean",
            "com.google.javascript.rhino.jstype.JSType:forgiveUnknownNames:[]:void",
            "com.google.javascript.rhino.jstype.JSType:hasDisplayName:[]:boolean",
            "com.google.javascript.rhino.jstype.JSType:testForEquality:[JSType that]:TernaryValue",
            "com.google.javascript.rhino.jstype.JSType:testForEqualityHelper:[JSType aType, JSType bType]:TernaryValue"
          ],
          "num": 7
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "43",
            "65",
            "66",
            "123",
            "489",
            "492",
            "493",
            "494",
            "495",
            "496",
            "497",
            "498",
            "499",
            "500",
            "501",
            "502",
            "503",
            "504",
            "840",
            "923"
          ],
          "num": 20
        },
        {
          "qualified_names": [
            "44",
            "63",
            "123",
            "124",
            "125",
            "126",
            "127",
            "128",
            "129",
            "130",
            "131",
            "132",
            "133",
            "134",
            "135",
            "136",
            "137",
            "138",
            "139",
            "140",
            "141",
            "142",
            "143",
            "509",
            "510",
            "511",
            "512",
            "513",
            "516",
            "517",
            "518",
            "519",
            "520",
            "521",
            "522",
            "523",
            "524",
            "525",
            "526",
            "527",
            "530",
            "531",
            "532",
            "866",
            "950",
            "951",
            "952",
            "953",
            "954",
            "955",
            "956",
            "957",
            "958",
            "959"
          ],
          "num": 54
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/rhino/jstype/JSType.java b/src/com/google/javascript/rhino/jstype/JSType.java\nindex a705a98..920e5d3 100644\n--- a/src/com/google/javascript/rhino/jstype/JSType.java\n+++ b/src/com/google/javascript/rhino/jstype/JSType.java\n@@ -41,6 +41,7 @@\n \n import static com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;\n \n+import com.google.common.base.Predicate;\n import com.google.javascript.rhino.ErrorReporter;\n import com.google.javascript.rhino.JSDocInfo;\n import com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode;\n@@ -62,8 +63,6 @@\n  * order of types. All types are united at the top of the lattice by the\n  * {@link AllType} and at the bottom by the {@link NoType}.\u003cp\u003e\n  *\n- *\n- *\n  */\n public abstract class JSType implements Serializable {\n   private static final long serialVersionUID \u003d 1L;\n@@ -121,6 +120,27 @@\n   }\n \n   /**\n+   * Returns a user meaningful label for the JSType instance.  For example,\n+   * Functions and Enums will return their declaration name (if they have one).\n+   * Some types will not have a meaningful display name.  Calls to\n+   * hasDisplayName() will return true IFF getDisplayName() will return null\n+   * or a zero length string.\n+   *\n+   * @return the display name of the type, or null if one is not available\n+   */\n+  public String getDisplayName() {\n+    return null;\n+  }\n+\n+  /**\n+   * @return true if the JSType has a user meaningful label.\n+   */\n+  public boolean hasDisplayName() {\n+    String displayName \u003d getDisplayName();\n+    return displayName !\u003d null \u0026\u0026 !displayName.isEmpty();\n+  }\n+\n+  /**\n    * If we see a type name without braces, it might be legacy jsdoc.\n    * So we shouldn\u0027t emit warnings about it. This method is how we skip\n    * those warnings.\n@@ -486,24 +506,30 @@\n    * \u003c/ul\u003e\n    */\n   public TernaryValue testForEquality(JSType that) {\n-    if (that.isAllType() || that.isNoType() || that.isUnknownType()) {\n+    return testForEqualityHelper(this, that);\n+  }\n+\n+  TernaryValue testForEqualityHelper(JSType aType, JSType bType) {\n+    if (bType.isAllType() || bType.isEmptyType() || bType.isUnknownType()) {\n       return UNKNOWN;\n     }\n-    if (that.isEnumElementType()) {\n-      return that.testForEquality(this);\n-    }\n-    if (that instanceof UnionType) {\n-      UnionType union \u003d (UnionType) that;\n-      TernaryValue result \u003d null;\n-      for (JSType t : union.alternates) {\n-        TernaryValue test \u003d this.testForEquality(t);\n-        if (result \u003d\u003d null) {\n-          result \u003d test;\n-        } else if (!result.equals(test)) {\n-          return UNKNOWN;\n-        }\n+    if (aType.isFunctionType() || bType.isFunctionType()) {\n+      JSType otherType \u003d aType.isFunctionType() ? bType : aType;\n+      // In theory, functions are comparable to anything except\n+      // null/undefined. For example, on FF3:\n+      // function() {} \u003d\u003d \u0027function () {\\n}\u0027\n+      // In practice, how a function serializes to a string is\n+      // implementation-dependent, so it does not really make sense to test\n+      // for equality with a string.\n+      if (otherType.isSubtype(getNativeType(JSTypeNative.OBJECT_TYPE))) {\n+        return TernaryValue.UNKNOWN;\n+      } else {\n+        return TernaryValue.FALSE;\n       }\n     }\n+    if (bType.isEnumElementType() || bType.isUnionType()) {\n+      return bType.testForEquality(aType);\n+    }\n     return null;\n   }\n \n@@ -837,7 +863,7 @@\n     }\n     // named types\n     if (thatType instanceof NamedType) {\n-      return thisType.isSubtype(((NamedType)thatType).referencedType);\n+      return thisType.isSubtype(((NamedType)thatType).getReferencedType());\n     }\n     return false;\n   }\n@@ -921,6 +947,16 @@\n     return type \u003d\u003d null ? null : type.resolve(t, scope);\n   }\n \n+  /**\n+   * Certain types have constraints on them at resolution-time.\n+   * For example, a type in an {@code @extends} annotation must be an\n+   * object. Clients should inject a validator that emits a warning\n+   * if the type does not validate, and return false.\n+   */\n+  public boolean setValidator(Predicate\u003cJSType\u003e validator) {\n+    return validator.apply(this);\n+  }\n+\n   public static class TypePair {\n     public final JSType typeA;\n     public final JSType typeB;\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [4150,4625]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [4629,4840]"
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/rhino/jstype/NullType.java",
        "src/com/google/javascript/rhino/jstype/NullType.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "com.google.javascript.rhino.jstype.NullType:toString:[]:String",
            "com.google.javascript.rhino.jstype.NullType:testForEquality:[JSType that]:TernaryValue"
          ],
          "num": 2
        },
        {
          "qualified_names": [
            "com.google.javascript.rhino.jstype.NullType:getDisplayName:[]:String",
            "com.google.javascript.rhino.jstype.NullType:toString:[]:String",
            "com.google.javascript.rhino.jstype.NullType:testForEquality:[JSType that]:TernaryValue"
          ],
          "num": 3
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "49",
            "90",
            "91",
            "103"
          ],
          "num": 4
        },
        {
          "qualified_names": [
            "48",
            "89",
            "90",
            "91",
            "104",
            "105",
            "106",
            "107",
            "108"
          ],
          "num": 9
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/rhino/jstype/NullType.java b/src/com/google/javascript/rhino/jstype/NullType.java\nindex 3cc6902..8add698 100644\n--- a/src/com/google/javascript/rhino/jstype/NullType.java\n+++ b/src/com/google/javascript/rhino/jstype/NullType.java\n@@ -46,7 +46,6 @@\n \n /**\n  * Null type.\n- *\n  */\n public final class NullType extends ValueType {\n   private static final long serialVersionUID \u003d 1L;\n@@ -87,8 +86,9 @@\n \n   @Override\n   public TernaryValue testForEquality(JSType that) {\n-    if (UNKNOWN.equals(super.testForEquality(that))) {\n-      return UNKNOWN;\n+    TernaryValue result \u003d super.testForEquality(that);\n+    if (result !\u003d null) {\n+      return result;\n     }\n     if (that.isNullType() || that.isVoidType()) {\n       return TRUE;\n@@ -101,6 +101,11 @@\n \n   @Override\n   public String toString() {\n+    return getDisplayName();\n+  }\n+\n+  @Override\n+  public String getDisplayName() {\n     return \"null\";\n   }\n \n",
      "operations": [
        {
          "type": "insert-node",
          "from": "",
          "to": "MethodDeclaration [2937,3004]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MarkerAnnotation [2937,2946]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: public [2949,2955]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SimpleType [2956,2962]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: getDisplayName [2963,2977]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Block [2980,3004]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ReturnStatement [2905,2929]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/rhino/jstype/NumberType.java",
        "src/com/google/javascript/rhino/jstype/NumberType.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "com.google.javascript.rhino.jstype.NumberType:testForEquality:[JSType that]:TernaryValue",
            "com.google.javascript.rhino.jstype.NumberType:toString:[]:String"
          ],
          "num": 2
        },
        {
          "qualified_names": [
            "com.google.javascript.rhino.jstype.NumberType:testForEquality:[JSType that]:TernaryValue",
            "com.google.javascript.rhino.jstype.NumberType:toString:[]:String",
            "com.google.javascript.rhino.jstype.NumberType:getDisplayName:[]:String"
          ],
          "num": 3
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "48",
            "64",
            "65",
            "96"
          ],
          "num": 4
        },
        {
          "qualified_names": [
            "47",
            "63",
            "64",
            "65",
            "97",
            "98",
            "99",
            "100",
            "101"
          ],
          "num": 9
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/rhino/jstype/NumberType.java b/src/com/google/javascript/rhino/jstype/NumberType.java\nindex b0a0c15..3e6e5f0 100644\n--- a/src/com/google/javascript/rhino/jstype/NumberType.java\n+++ b/src/com/google/javascript/rhino/jstype/NumberType.java\n@@ -45,7 +45,6 @@\n \n /**\n  * Number type.\n- *\n  */\n public class NumberType extends ValueType {\n   private static final long serialVersionUID \u003d 1L;\n@@ -61,8 +60,9 @@\n \n   @Override\n   public TernaryValue testForEquality(JSType that) {\n-    if (UNKNOWN.equals(super.testForEquality(that))) {\n-      return UNKNOWN;\n+    TernaryValue result \u003d super.testForEquality(that);\n+    if (result !\u003d null) {\n+      return result;\n     }\n     if (that.isUnknownType() || that.isSubtype(\n             getNativeType(JSTypeNative.OBJECT_NUMBER_STRING_BOOLEAN))) {\n@@ -94,6 +94,11 @@\n \n   @Override\n   public String toString() {\n+    return getDisplayName();\n+  }\n+\n+  @Override\n+  public String getDisplayName() {\n     return \"number\";\n   }\n \n",
      "operations": [
        {
          "type": "insert-node",
          "from": "",
          "to": "MethodDeclaration [2806,2875]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MarkerAnnotation [2806,2815]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: public [2818,2824]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SimpleType [2825,2831]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: getDisplayName [2832,2846]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Block [2849,2875]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ReturnStatement [2774,2798]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "src/com/google/javascript/rhino/jstype/ObjectType.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "com.google.javascript.rhino.jstype.ObjectType:getNormalizedReferenceName:[]:String",
            "com.google.javascript.rhino.jstype.ObjectType:getPropertyType:[String propertyName]:JSType",
            "com.google.javascript.rhino.jstype.ObjectType:isPropertyTypeDeclared:[String propertyName]:boolean"
          ],
          "num": 3
        },
        {
          "qualified_names": [
            "com.google.javascript.rhino.jstype.ObjectType:getNormalizedReferenceName:[]:String",
            "com.google.javascript.rhino.jstype.ObjectType:getDisplayName:[]:String",
            "com.google.javascript.rhino.jstype.ObjectType:getOwnPropertyNames:[]:Set\u003cString\u003e",
            "com.google.javascript.rhino.jstype.ObjectType:getPropertyNames:[]:Set\u003cString\u003e",
            "com.google.javascript.rhino.jstype.ObjectType:hasReferenceName:[]:boolean",
            "com.google.javascript.rhino.jstype.ObjectType:createDelegateSuffix:[String suffix]:String"
          ],
          "num": 6
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "49",
            "79",
            "168",
            "321",
            "356"
          ],
          "num": 5
        },
        {
          "qualified_names": [
            "48",
            "79",
            "167",
            "168",
            "169",
            "170",
            "171",
            "172",
            "173",
            "174",
            "175",
            "176",
            "177",
            "178",
            "179",
            "180",
            "181",
            "182",
            "183",
            "184",
            "185",
            "186",
            "187",
            "188",
            "189",
            "190",
            "191",
            "192",
            "193",
            "194",
            "195",
            "196",
            "197",
            "198",
            "199",
            "352",
            "387"
          ],
          "num": 37
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/rhino/jstype/ObjectType.java b/src/com/google/javascript/rhino/jstype/ObjectType.java\nindex 6f8b7e3..4d52b2f 100644\n--- a/src/com/google/javascript/rhino/jstype/ObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/ObjectType.java\n@@ -46,7 +46,6 @@\n import com.google.common.collect.Sets;\n import com.google.javascript.rhino.JSDocInfo;\n \n-import java.util.HashSet;\n import java.util.Set;\n \n /**\n@@ -76,7 +75,6 @@\n  * type has all properties, but we do not know whether they are\n  * declared or inferred.\n  *\n- *\n  */\n public abstract class ObjectType extends JSType {\n   private boolean visited;\n@@ -166,6 +164,39 @@\n   public abstract String getReferenceName();\n \n   /**\n+   * Due to the complexity of some of our internal type systems, sometimes\n+   * we have different types constructed by the same constructor.\n+   * In other parts of the type system, these are called delegates.\n+   * We construct these types by appending suffixes to the constructor name.\n+   *\n+   * The normalized reference name does not have these suffixes, and as such,\n+   * recollapses these implicit types back to their real type.\n+   */\n+  public String getNormalizedReferenceName() {\n+    String name \u003d getReferenceName();\n+    if (name !\u003d null) {\n+      int pos \u003d name.indexOf(\"(\");\n+      if (pos !\u003d -1) {\n+        return name.substring(0, pos);\n+      }\n+    }\n+    return name;\n+  }\n+\n+  @Override\n+  public String getDisplayName() {\n+    return getNormalizedReferenceName();\n+  }\n+\n+  /**\n+   * Creates a suffix for a proxy delegate.\n+   * @see #getNormalizedReferenceName\n+   */\n+  public static String createDelegateSuffix(String suffix) {\n+    return \"(\" + suffix + \")\";\n+  }\n+\n+  /**\n    * Returns true if the object is named.\n    * @return true if the object is named, false if it is anonymous\n    */\n@@ -318,7 +349,7 @@\n \n   /** Returns the names of all the properties directly on this type. */\n   public Set\u003cString\u003e getOwnPropertyNames() {\n-    return new HashSet\u003cString\u003e();\n+    return ImmutableSet.of();\n   }\n \n   /**\n@@ -353,7 +384,7 @@\n    * its supertypes.\n    */\n   public Set\u003cString\u003e getPropertyNames() {\n-    Set\u003cString\u003e props \u003d Sets.newHashSet();\n+    Set\u003cString\u003e props \u003d Sets.newTreeSet();\n     collectPropertyNames(props);\n     return props;\n   }\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [5706,5795]"
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/rhino/jstype/StringType.java",
        "src/com/google/javascript/rhino/jstype/StringType.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "com.google.javascript.rhino.jstype.StringType:testForEquality:[JSType that]:TernaryValue",
            "com.google.javascript.rhino.jstype.StringType:toString:[]:String"
          ],
          "num": 2
        },
        {
          "qualified_names": [
            "com.google.javascript.rhino.jstype.StringType:testForEquality:[JSType that]:TernaryValue",
            "com.google.javascript.rhino.jstype.StringType:toString:[]:String",
            "com.google.javascript.rhino.jstype.StringType:getDisplayName:[]:String"
          ],
          "num": 3
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "48",
            "59",
            "60",
            "91"
          ],
          "num": 4
        },
        {
          "qualified_names": [
            "47",
            "58",
            "59",
            "60",
            "92",
            "93",
            "94",
            "95",
            "96"
          ],
          "num": 9
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/rhino/jstype/StringType.java b/src/com/google/javascript/rhino/jstype/StringType.java\nindex d0903e3..1f1f8d2 100644\n--- a/src/com/google/javascript/rhino/jstype/StringType.java\n+++ b/src/com/google/javascript/rhino/jstype/StringType.java\n@@ -45,7 +45,6 @@\n \n /**\n  * String type.\n- *\n  */\n public final class StringType extends ValueType {\n   private static final long serialVersionUID \u003d 1L;\n@@ -56,8 +55,9 @@\n \n   @Override\n   public TernaryValue testForEquality(JSType that) {\n-    if (UNKNOWN.equals(super.testForEquality(that))) {\n-      return UNKNOWN;\n+    TernaryValue result \u003d super.testForEquality(that);\n+    if (result !\u003d null) {\n+      return result;\n     }\n     if (that.isUnknownType() || that.isSubtype(\n             getNativeType(JSTypeNative.OBJECT_NUMBER_STRING_BOOLEAN))) {\n@@ -89,6 +89,11 @@\n \n   @Override\n   public String toString() {\n+    return getDisplayName();\n+  }\n+\n+  @Override\n+  public String getDisplayName() {\n     return \"string\";\n   }\n \n",
      "operations": [
        {
          "type": "insert-node",
          "from": "",
          "to": "MethodDeclaration [2745,2814]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MarkerAnnotation [2745,2754]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: public [2757,2763]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SimpleType [2764,2770]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: getDisplayName [2771,2785]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Block [2788,2814]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ReturnStatement [2713,2737]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/rhino/jstype/UnknownType.java",
        "src/com/google/javascript/rhino/jstype/UnknownType.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "com.google.javascript.rhino.jstype.UnknownType:isPropertyTypeDeclared:[String propertyName]:boolean"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "com.google.javascript.rhino.jstype.UnknownType:isPropertyTypeDeclared:[String propertyName]:boolean",
            "com.google.javascript.rhino.jstype.UnknownType:getDisplayName:[]:String",
            "com.google.javascript.rhino.jstype.UnknownType:hasDisplayName:[]:boolean"
          ],
          "num": 3
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "50",
            "51",
            "175"
          ],
          "num": 3
        },
        {
          "qualified_names": [
            "49",
            "174",
            "175",
            "176",
            "177",
            "178",
            "179",
            "180",
            "181",
            "182",
            "183"
          ],
          "num": 11
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/rhino/jstype/UnknownType.java b/src/com/google/javascript/rhino/jstype/UnknownType.java\nindex 3ece195..7fa8ae0 100644\n--- a/src/com/google/javascript/rhino/jstype/UnknownType.java\n+++ b/src/com/google/javascript/rhino/jstype/UnknownType.java\n@@ -47,8 +47,6 @@\n \n /**\n  * The {@code Unknown} type.\n- *\n- *\n  */\n public class UnknownType extends ObjectType {\n   private static final long serialVersionUID \u003d 1L;\n@@ -173,6 +171,16 @@\n   }\n \n   @Override\n+  public String getDisplayName() {\n+    return \"Unknown\";\n+  }\n+\n+  @Override\n+  public boolean hasDisplayName() {\n+    return true;\n+  }\n+\n+  @Override\n   public boolean isPropertyTypeDeclared(String propertyName) {\n     return false;\n   }\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [3959,4029]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [4033,4099]"
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/rhino/jstype/ValueType.java",
        "src/com/google/javascript/rhino/jstype/ValueType.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "com.google.javascript.rhino.jstype.ValueType:resolveInternal:[ErrorReporter t, StaticScope\u003cJSType\u003e scope]:JSType"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "com.google.javascript.rhino.jstype.ValueType:hasDisplayName:[]:boolean"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "1",
            "39",
            "60"
          ],
          "num": 3
        },
        {
          "qualified_names": [
            "1",
            "39",
            "61",
            "62",
            "63",
            "64",
            "65",
            "66"
          ],
          "num": 8
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/rhino/jstype/ValueType.java b/src/com/google/javascript/rhino/jstype/ValueType.java\nindex 51819ad..0360724 100644\n--- a/src/com/google/javascript/rhino/jstype/ValueType.java\n+++ b/src/com/google/javascript/rhino/jstype/ValueType.java\n@@ -1,4 +1,4 @@\n-/* \n+/*\n  *\n  * ***** BEGIN LICENSE BLOCK *****\n  * Version: MPL 1.1/GPL 2.0\n@@ -36,7 +36,7 @@\n  * file under either the MPL or the GPL.\n  *\n  * ***** END LICENSE BLOCK ***** */\n- \n+\n package com.google.javascript.rhino.jstype;\n \n import com.google.javascript.rhino.ErrorReporter;\n@@ -58,4 +58,10 @@\n   final JSType resolveInternal(ErrorReporter t, StaticScope\u003cJSType\u003e scope) {\n     return this;\n   }\n+\n+  @Override\n+  public boolean hasDisplayName() {\n+    return true;\n+  }\n+\n }\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [2061,2127]"
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/rhino/jstype/VoidType.java",
        "src/com/google/javascript/rhino/jstype/VoidType.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "com.google.javascript.rhino.jstype.VoidType:toString:[]:String"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "com.google.javascript.rhino.jstype.VoidType:getDisplayName:[]:String",
            "com.google.javascript.rhino.jstype.VoidType:toString:[]:String"
          ],
          "num": 2
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "49",
            "96"
          ],
          "num": 2
        },
        {
          "qualified_names": [
            "48",
            "96",
            "97",
            "98",
            "99",
            "100"
          ],
          "num": 6
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/rhino/jstype/VoidType.java b/src/com/google/javascript/rhino/jstype/VoidType.java\nindex d8faca0..6271e6b 100644\n--- a/src/com/google/javascript/rhino/jstype/VoidType.java\n+++ b/src/com/google/javascript/rhino/jstype/VoidType.java\n@@ -46,7 +46,6 @@\n \n /**\n  * Void type whose only element is the {@code undefined} value.\n- *\n  */\n public class VoidType extends ValueType {\n   private static final long serialVersionUID \u003d 1L;\n@@ -94,6 +93,11 @@\n \n   @Override\n   public String toString() {\n+    return getDisplayName();\n+  }\n+\n+  @Override\n+  public String getDisplayName() {\n     return \"undefined\";\n   }\n \n",
      "operations": [
        {
          "type": "insert-node",
          "from": "",
          "to": "MethodDeclaration [2857,2929]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MarkerAnnotation [2857,2866]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: public [2869,2875]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SimpleType [2876,2882]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: getDisplayName [2883,2897]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Block [2900,2929]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ReturnStatement [2825,2849]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        }
      ]
    }
  ],
  "inducing_type": {
    "add_classes": {
      "qualified_names": [
        "src/com/google/javascript/jscomp/OptimizeCalls.java",
        "src/com/google/javascript/jscomp/OptimizeReturns.java",
        "src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java",
        "src/com/google/javascript/jscomp/SourceMap2.java",
        "src/com/google/javascript/jscomp/SourceMapLegacy.java",
        "src/com/google/javascript/jscomp/SpecializationAwareCompilerPass.java",
        "src/com/google/javascript/jscomp/SpecializeModule.java",
        "src/com/google/javascript/jscomp/UnfoldCompoundAssignments.java",
        "src/com/google/javascript/jscomp/jsonml/ErrorLevel.java",
        "src/com/google/javascript/jscomp/jsonml/JsonML.java",
        "src/com/google/javascript/jscomp/jsonml/JsonMLAst.java",
        "src/com/google/javascript/jscomp/jsonml/JsonMLError.java",
        "src/com/google/javascript/jscomp/jsonml/JsonMLException.java",
        "src/com/google/javascript/jscomp/jsonml/JsonMLUtil.java",
        "src/com/google/javascript/jscomp/jsonml/NodeUtil.java",
        "src/com/google/javascript/jscomp/jsonml/Reader.java",
        "src/com/google/javascript/jscomp/jsonml/SecureCompiler.java",
        "src/com/google/javascript/jscomp/jsonml/TagAttr.java",
        "src/com/google/javascript/jscomp/jsonml/TagType.java",
        "src/com/google/javascript/jscomp/jsonml/Validator.java",
        "src/com/google/javascript/jscomp/jsonml/Writer.java"
      ],
      "num": 21
    },
    "delete_classes": {
      "qualified_names": [
        "gen/com/google/javascript/jscomp/FunctionInformationMapOrBuilder.java",
        "gen/com/google/javascript/jscomp/InstrumentationOrBuilder.java",
        "src/com/google/javascript/jscomp/RemoveConstantExpressions.java",
        "src/com/google/javascript/jscomp/RemoveConstantExpressionsParallel.java"
      ],
      "num": 4
    },
    "add_functions": {
      "qualified_names": [
        "com.google.javascript.rhino.jstype.ValueType:hasDisplayName:[]:boolean",
        "com.google.javascript.rhino.jstype.JSType:getDisplayName:[]:String",
        "com.google.javascript.rhino.jstype.JSType:hasDisplayName:[]:boolean",
        "com.google.javascript.rhino.jstype.BooleanType:getDisplayName:[]:String",
        "com.google.javascript.rhino.jstype.AllType:hasDisplayName:[]:boolean",
        "com.google.javascript.rhino.JSDocInfo:getLicense:[]:String",
        "com.google.javascript.rhino.jstype.NumberType:getDisplayName:[]:String",
        "com.google.javascript.rhino.jstype.StringType:getDisplayName:[]:String",
        "com.google.javascript.rhino.JSDocInfo:setModifies:[Set\u003cString\u003e modifies]:boolean",
        "com.google.javascript.rhino.JSDocInfo:setMeaning:[String meaning]:void",
        "com.google.javascript.rhino.jstype.EnumType:getDisplayName:[]:String",
        "com.google.javascript.rhino.jstype.ObjectType:getOwnPropertyNames:[]:Set\u003cString\u003e",
        "com.google.javascript.rhino.jstype.ObjectType:getDisplayName:[]:String",
        "com.google.javascript.rhino.JSDocInfo:addSuppression:[String suppression]:void",
        "com.google.javascript.rhino.jstype.JSType:setValidator:[Predicate\u003cJSType\u003e validator]:boolean",
        "com.google.javascript.rhino.jstype.ObjectType:hasReferenceName:[]:boolean",
        "com.google.javascript.rhino.jstype.AllType:getDisplayName:[]:String",
        "com.google.javascript.rhino.JSDocInfo:containsDeclaration:[]:boolean",
        "com.google.javascript.rhino.jstype.NullType:getDisplayName:[]:String",
        "com.google.javascript.rhino.JSDocInfo:hasDescriptionForParameter:[String name]:boolean",
        "com.google.javascript.rhino.JSDocInfo:documentVersion:[String version]:boolean",
        "com.google.javascript.rhino.JSDocInfo:addModifies:[String modifies]:void",
        "com.google.javascript.rhino.jstype.ObjectType:getPropertyNames:[]:Set\u003cString\u003e",
        "com.google.javascript.rhino.JSDocInfo:setLendsName:[String name]:void",
        "com.google.javascript.rhino.jstype.ObjectType:createDelegateSuffix:[String suffix]:String",
        "com.google.javascript.rhino.jstype.UnknownType:hasDisplayName:[]:boolean",
        "com.google.javascript.rhino.jstype.VoidType:getDisplayName:[]:String",
        "com.google.javascript.rhino.JSDocInfo:getModifies:[]:Set\u003cString\u003e",
        "com.google.javascript.rhino.JSDocInfo:getMeaning:[]:String",
        "com.google.javascript.rhino.JSDocInfo:hasModifies:[]:boolean",
        "com.google.javascript.rhino.jstype.UnknownType:getDisplayName:[]:String",
        "com.google.javascript.rhino.JSDocInfo:setSuppressions:[Set\u003cString\u003e suppressions]:boolean"
      ],
      "num": 32
    },
    "delete_functions": {
      "qualified_names": [
        "com.google.javascript.rhino.jstype.ValueType:resolveInternal:[ErrorReporter t, StaticScope\u003cJSType\u003e scope]:JSType",
        "com.google.javascript.rhino.JSDocInfo:setDeprecationReason:[String reason]:boolean",
        "com.google.javascript.rhino.jstype.ObjectType:getPropertyType:[String propertyName]:JSType",
        "com.google.javascript.rhino.jstype.ObjectType:isPropertyTypeDeclared:[String propertyName]:boolean",
        "com.google.javascript.rhino.JSDocInfo:isNoCompile:[]:boolean",
        "com.google.javascript.rhino.JSDocInfo:getEnumParameterType:[]:JSTypeExpression",
        "com.google.javascript.rhino.JSDocInfo:addMarker:[]:Marker",
        "com.google.javascript.rhino.jstype.JSType:safeResolve:[JSType type, ErrorReporter t, StaticScope\u003cJSType\u003e scope]:JSType",
        "com.google.javascript.rhino.JSDocInfo:getReferences:[]:Collection\u003cString\u003e"
      ],
      "num": 9
    }
  },
  "trigger_tests": [
    {
      "test_class": "com.google.javascript.jscomp.TypeCheckTest",
      "test_function": "testIssue301",
      "assertion_line": "4955",
      "exception": "junit.framework.AssertionFailedError",
      "message": "expected a warning"
    },
    {
      "test_class": "com.google.javascript.rhino.jstype.FunctionTypeTest",
      "test_function": "testEmptyFunctionTypes",
      "assertion_line": "173",
      "exception": "junit.framework.AssertionFailedError",
      "message": ""
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/rhino/jstype/JSType.java",
        "src/com/google/javascript/rhino/jstype/JSType.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "com.google.javascript.rhino.jstype.JSType:isEmptyType:[]:boolean"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "com.google.javascript.rhino.jstype.JSType:isEmptyType:[]:boolean"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "163"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "163",
            "164",
            "165"
          ],
          "num": 3
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/rhino/jstype/JSType.java b/src/com/google/javascript/rhino/jstype/JSType.java\nindex 32a0b25..51f2ce2 100644\n--- a/src/com/google/javascript/rhino/jstype/JSType.java\n+++ b/src/com/google/javascript/rhino/jstype/JSType.java\n@@ -160,7 +160,9 @@\n   }\n \n   public final boolean isEmptyType() {\n-    return isNoType() || isNoObjectType() || isNoResolvedType();\n+    return isNoType() || isNoObjectType() || isNoResolvedType() ||\n+        (registry.getNativeFunctionType(\n+             JSTypeNative.LEAST_FUNCTION_TYPE) \u003d\u003d this);\n   }\n \n   public boolean isNumberObjectType() {\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "ParenthesizedExpression [5336,5424]"
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  },
  "patch_changed_mths": {
    "qualified_names": [
      "com.google.javascript.rhino.jstype.JSType:isEmptyType()Z:regression"
    ],
    "num": 1
  }
}