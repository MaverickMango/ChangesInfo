diff -r -u original/src/com/google/javascript/rhino/jstype/JSType.java buggy/src/com/google/javascript/rhino/jstype/JSType.java
--- original/src/com/google/javascript/rhino/jstype/JSType.java	2023-06-13 15:31:43.487101498 +0800
+++ buggy/src/com/google/javascript/rhino/jstype/JSType.java	2023-06-12 11:40:27.186681707 +0800
@@ -120,6 +120,27 @@
   }
 
   /**
+   * Returns a user meaningful label for the JSType instance.  For example,
+   * Functions and Enums will return their declaration name (if they have one).
+   * Some types will not have a meaningful display name.  Calls to
+   * hasDisplayName() will return true IFF getDisplayName() will return null
+   * or a zero length string.
+   *
+   * @return the display name of the type, or null if one is not available
+   */
+  public String getDisplayName() {
+    return null;
+  }
+
+  /**
+   * @return true if the JSType has a user meaningful label.
+   */
+  public boolean hasDisplayName() {
+    String displayName = getDisplayName();
+    return displayName != null && !displayName.isEmpty();
+  }
+
+  /**
    * If we see a type name without braces, it might be legacy jsdoc.
    * So we shouldn't emit warnings about it. This method is how we skip
    * those warnings.
@@ -130,12 +151,16 @@
     return false;
   }
 
+  public boolean isNoResolvedType() {
+    return false;
+  }
+
   public boolean isNoObjectType() {
     return false;
   }
 
   public final boolean isEmptyType() {
-    return isNoType() || isNoObjectType();
+    return isNoType() || isNoObjectType() || isNoResolvedType();
   }
 
   public boolean isNumberObjectType() {
@@ -489,9 +514,23 @@
   }
 
   TernaryValue testForEqualityHelper(JSType aType, JSType bType) {
-    if (bType.isAllType() || bType.isEmptyType() || bType.isUnknownType()) {
+    if (bType.isAllType() || bType.isUnknownType() ||
+        bType.isNoResolvedType() ||
+        aType.isAllType() || aType.isUnknownType() ||
+        aType.isNoResolvedType()) {
       return UNKNOWN;
     }
+
+    boolean aIsEmpty = aType.isEmptyType();
+    boolean bIsEmpty = bType.isEmptyType();
+    if (aIsEmpty || bIsEmpty) {
+      if (aIsEmpty && bIsEmpty) {
+        return TernaryValue.TRUE;
+      } else {
+        return UNKNOWN;
+      }
+    }
+
     if (aType.isFunctionType() || bType.isFunctionType()) {
       JSType otherType = aType.isFunctionType() ? bType : aType;
       // In theory, functions are comparable to anything except
@@ -500,10 +539,12 @@
       // In practice, how a function serializes to a string is
       // implementation-dependent, so it does not really make sense to test
       // for equality with a string.
-      if (otherType.isSubtype(getNativeType(JSTypeNative.OBJECT_TYPE))) {
-        return TernaryValue.UNKNOWN;
-      } else {
+      JSType meet = otherType.getGreatestSubtype(
+          getNativeType(JSTypeNative.OBJECT_TYPE));
+      if (meet.isNoType() || meet.isNoObjectType()) {
         return TernaryValue.FALSE;
+      } else {
+        return TernaryValue.UNKNOWN;
       }
     }
     if (bType.isEnumElementType() || bType.isUnionType()) {
@@ -555,13 +596,10 @@
    * getLeastSupertype implementations.
    */
   static JSType getLeastSupertype(JSType thisType, JSType thatType) {
-    if (thatType.isEmptyType() || thatType.isAllType()) {
-      // Defer to the implementations of the end lattice elements when
-      // possible.
-      return thatType.getLeastSupertype(thisType);
-    }
-
-    return thisType.registry.createUnionType(thisType, thatType);
+    boolean areEquivalent = thisType.isEquivalentTo(thatType);
+    return areEquivalent ? thisType :
+        filterNoResolvedType(
+            thisType.registry.createUnionType(thisType, thatType));
   }
 
   /**
@@ -577,7 +615,7 @@
    * @return {@code this &#8744; that}
    */
   public JSType getGreatestSubtype(JSType that) {
-     if (that.isRecordType()) {
+    if (that.isRecordType()) {
       // Record types have their own implementation of getGreatestSubtype.
       return that.getGreatestSubtype(this);
     }
@@ -589,19 +627,17 @@
    * getGreatestSubtype implementations.
    */
   static JSType getGreatestSubtype(JSType thisType, JSType thatType) {
-    if (thatType.isEmptyType() || thatType.isAllType()) {
-      // Defer to the implementations of the end lattice elements when
-      // possible.
-      return thatType.getGreatestSubtype(thisType);
+    if (thisType.isEquivalentTo(thatType)) {
+      return thisType;
     } else if (thisType.isUnknownType() || thatType.isUnknownType()) {
       // The greatest subtype with any unknown type is the universal
       // unknown type, unless the two types are equal.
       return thisType.isEquivalentTo(thatType) ? thisType :
           thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
     } else if (thisType.isSubtype(thatType)) {
-      return thisType;
+      return filterNoResolvedType(thisType);
     } else if (thatType.isSubtype(thisType)) {
-      return thatType;
+      return filterNoResolvedType(thatType);
     } else if (thisType.isUnionType()) {
       return ((UnionType) thisType).meet(thatType);
     } else if (thatType.isUnionType()) {
@@ -613,6 +649,42 @@
   }
 
   /**
+   * When computing infimums, we may get a situation like
+   * inf(Type1, Type2)
+   * where both types are unresolved, so they're technically
+   * subtypes of one another.
+   *
+   * If this happens, filter them down to NoResolvedType.
+   */
+  static JSType filterNoResolvedType(JSType type) {
+    if (type.isNoResolvedType()) {
+      // inf(UnresolvedType1, UnresolvedType2) needs to resolve
+      // to the base unresolved type, so that the relation is symmetric.
+      return type.getNativeType(JSTypeNative.NO_RESOLVED_TYPE);
+    } else if (type instanceof UnionType) {
+      UnionType unionType = (UnionType) type;
+      boolean needsFiltering = false;
+      for (JSType alt : unionType.getAlternates()) {
+        if (alt.isNoResolvedType()) {
+          needsFiltering = true;
+          break;
+        }
+      }
+
+      if (needsFiltering) {
+        UnionTypeBuilder builder = new UnionTypeBuilder(type.registry);
+        for (JSType alt : unionType.getAlternates()) {
+          if (!alt.isNoResolvedType()) {
+            builder.addAlternate(alt);
+          }
+        }
+        return builder.build();
+      }
+    }
+    return type;
+  }
+
+  /**
    * Computes the restricted type of this type knowing that the
    * {@code ToBoolean} predicate has a specific value. For more information
    * about the {@code ToBoolean} predicate, see
diff -r -u original/test/com/google/javascript/jscomp/TypeCheckTest.java buggy/test/com/google/javascript/jscomp/TypeCheckTest.java
--- original/test/com/google/javascript/jscomp/TypeCheckTest.java	2023-06-13 15:31:43.487101498 +0800
+++ buggy/test/com/google/javascript/jscomp/TypeCheckTest.java	2023-06-12 11:40:27.190681523 +0800
@@ -18,7 +18,6 @@
 
 import com.google.common.base.Joiner;
 import com.google.common.collect.Lists;
-import com.google.common.collect.Sets;
 import com.google.javascript.jscomp.Scope.Var;
 import com.google.javascript.rhino.Node;
 import com.google.javascript.rhino.Token;
@@ -79,7 +78,7 @@
   }
 
   public void testTypeCheck2() throws Exception {
-    testTypes("/**@return {void}*/function foo(){ foo()--; }",
+    testTypes("/**@return {void}*/function foo(){ var x=foo(); x--; }",
         "increment/decrement\n" +
         "found   : undefined\n" +
         "required: number");
@@ -656,6 +655,166 @@
         "return goog.isString(this.a) ? this.a : 'a'; }", null);
   }
 
+  public void testQualifiedNameReduction5a() throws Exception {
+    testTypes("var x = {/** @type {string} */ a:'b' };\n" +
+        "/** @return {string} */ var f = function() {\n" +
+        "return x.a; }");
+  }
+
+  public void testQualifiedNameReduction5b() throws Exception {
+    testTypes(
+        "var x = {/** @type {number} */ a:12 };\n" +
+        "/** @return {string} */\n" +
+        "var f = function() {\n" +
+        "  return x.a;\n" +
+        "}");  // would like this to be an error.
+  }
+
+  public void testQualifiedNameReduction5c() throws Exception {
+    testTypes(
+        "/** @return {string} */ var f = function() {\n" +
+        "var x = {/** @type {number} */ a:0 };\n" +
+        "return (x.a) ? (x.a) : 'a'; }",
+        "inconsistent return type\n" +
+        "found   : (number|string)\n" +
+        "required: string");
+  }
+
+  public void testQualifiedNameReduction6() throws Exception {
+    testTypes(
+        "/** @return {string} */ var f = function() {\n" +
+        "var x = {/** @return {string?} */ get a() {return 'a'}};\n" +
+        "return x.a ? x.a : 'a'; }");
+  }
+
+  public void testQualifiedNameReduction7() throws Exception {
+    testTypes(
+        "/** @return {string} */ var f = function() {\n" +
+        "var x = {/** @return {number} */ get a() {return 12}};\n" +
+        "return x.a; }",
+        "inconsistent return type\n" +
+        "found   : number\n" +
+        "required: string");
+  }
+
+  public void testQualifiedNameReduction7a() throws Exception {
+    // It would be nice to find a way to make this an error.
+    testTypes(
+        "/** @return {string} */ var f = function() {\n" +
+        "var x = {get a() {return 12}};\n" +
+        "return x.a; }");
+  }
+
+  public void testQualifiedNameReduction8() throws Exception {
+    testTypes(
+        "/** @return {string} */ var f = function() {\n" +
+        "var x = {get a() {return 'a'}};\n" +
+        "return x.a ? x.a : 'a'; }");
+  }
+
+  public void testQualifiedNameReduction9() throws Exception {
+    testTypes(
+        "/** @return {string} */ var f = function() {\n" +
+        "var x = { /** @param {string} b */ set a(b) {}};\n" +
+        "return x.a ? x.a : 'a'; }");
+  }
+
+  public void testQualifiedNameReduction10() throws Exception {
+    // TODO(johnlenz): separate setter property types from getter property
+    // types.
+    testTypes(
+        "/** @return {string} */ var f = function() {\n" +
+        "var x = { /** @param {number} b */ set a(b) {}};\n" +
+        "return x.a ? x.a : 'a'; }",
+        "inconsistent return type\n" +
+        "found   : (number|string)\n" +
+        "required: string");
+  }
+
+  public void testObjLitDef1a() throws Exception {
+    testTypes(
+        "var x = {/** @type {number} */ a:12 };\n" +
+        "x.a = 'a';",
+        "assignment to property a of x\n" +
+        "found   : string\n" +
+        "required: number");
+  }
+
+  public void testObjLitDef1b() throws Exception {
+    testTypes(
+        "function f(){" +
+          "var x = {/** @type {number} */ a:12 };\n" +
+          "x.a = 'a';" +
+        "};\n" +
+        "f();",
+        "assignment to property a of x\n" +
+        "found   : string\n" +
+        "required: number");
+  }
+
+  public void testObjLitDef2a() throws Exception {
+    testTypes(
+        "var x = {/** @param {number} b */ set a(b){} };\n" +
+        "x.a = 'a';",
+        "assignment to property a of x\n" +
+        "found   : string\n" +
+        "required: number");
+  }
+
+  public void testObjLitDef2b() throws Exception {
+    testTypes(
+        "function f(){" +
+          "var x = {/** @param {number} b */ set a(b){} };\n" +
+          "x.a = 'a';" +
+        "};\n" +
+        "f();",
+        "assignment to property a of x\n" +
+        "found   : string\n" +
+        "required: number");
+  }
+
+  public void testObjLitDef3a() throws Exception {
+    testTypes(
+        "/** @type {string} */ var y;\n" +
+        "var x = {/** @return {number} */ get a(){} };\n" +
+        "y = x.a;",
+        "assignment\n" +
+        "found   : number\n" +
+        "required: string");
+  }
+
+  public void testObjLitDef3b() throws Exception {
+    testTypes(
+      "/** @type {string} */ var y;\n" +
+        "function f(){" +
+          "var x = {/** @return {number} */ get a(){} };\n" +
+          "y = x.a;" +
+        "};\n" +
+        "f();",
+        "assignment\n" +
+        "found   : number\n" +
+        "required: string");
+  }
+
+  public void testObjLitDef4() throws Exception {
+    testTypes(
+        "var x = {" +
+          "/** @return {number} */ a:12 };\n",
+          "assignment to property a of {a: function (): number}\n" +
+          "found   : number\n" +
+          "required: function (): number");
+  }
+
+  public void testObjLitDef5() throws Exception {
+    testTypes(
+        "var x = {};\n" +
+        "/** @return {number} */ x.a = 12;\n",
+        "assignment to property a of x\n" +
+        "found   : number\n" +
+        "required: function (): number");
+  }
+
+
   public void testInstanceOfReduction1() throws Exception {
     testTypes("/** @constructor */ var T = function() {};\n" +
         "/** @param {T|string} x\n@return {T} */\n" +
@@ -1987,7 +2146,7 @@
         "/** @constructor */ function f() {};" +
         "/** @constructor \n * @extends {f} */ f.subclass;",
         "f.subclass",
-        "function (this:f.subclass): ?");
+        "function (new:f.subclass): ?");
   }
 
   public void testStubFunctionDeclaration3() throws Exception {
@@ -2106,7 +2265,7 @@
   public void testTypeRedefinition() throws Exception {
     testTypes("a={};/**@enum {string}*/ a.A = {ZOR:'b'};"
         + "/** @constructor */ a.A = function() {}",
-        "variable a.A redefined with type function (this:a.A): undefined, " +
+        "variable a.A redefined with type function (new:a.A): undefined, " +
         "original definition at [testcode]:1 with type enum{a.A}");
   }
 
@@ -2125,7 +2284,7 @@
   public void testIn4() throws Exception {
     testTypes("Date in Object",
         "left side of 'in'\n" +
-        "found   : function (this:Date, ?, ?, ?, ?, ?, ?, ?): string\n" +
+        "found   : function (new:Date, ?, ?, ?, ?, ?, ?, ?): string\n" +
         "required: string");
   }
 
@@ -2164,6 +2323,69 @@
         "required: number");
   }
 
+  public void testForIn1() throws Exception {
+    testTypes(
+        "/** @param {boolean} x */ function f(x) {}" +
+        "for (var k in {}) {" +
+        "  f(k);" +
+        "}",
+        "actual parameter 1 of f does not match formal parameter\n" +
+        "found   : string\n" +
+        "required: boolean");
+  }
+
+  public void testForIn2() throws Exception {
+    testTypes(
+        "/** @param {boolean} x */ function f(x) {}" +
+        "/** @enum {string} */ var E = {FOO: 'bar'};" +
+        "/** @type {Object.<E, string>} */ var obj = {};" +
+        "var k = null;" +
+        "for (k in obj) {" +
+        "  f(k);" +
+        "}",
+        "actual parameter 1 of f does not match formal parameter\n" +
+        "found   : E.<string>\n" +
+        "required: boolean");
+  }
+
+  public void testForIn3() throws Exception {
+    testTypes(
+        "/** @param {boolean} x */ function f(x) {}" +
+        "/** @type {Object.<number>} */ var obj = {};" +
+        "for (var k in obj) {" +
+        "  f(obj[k]);" +
+        "}",
+        "actual parameter 1 of f does not match formal parameter\n" +
+        "found   : number\n" +
+        "required: boolean");
+  }
+
+  public void testForIn4() throws Exception {
+    testTypes(
+        "/** @param {boolean} x */ function f(x) {}" +
+        "/** @enum {string} */ var E = {FOO: 'bar'};" +
+        "/** @type {Object.<E, Array>} */ var obj = {};" +
+        "for (var k in obj) {" +
+        "  f(obj[k]);" +
+        "}",
+        "actual parameter 1 of f does not match formal parameter\n" +
+        "found   : (Array|null)\n" +
+        "required: boolean");
+  }
+
+  public void testForIn5() throws Exception {
+    testTypes(
+        "/** @param {boolean} x */ function f(x) {}" +
+        "/** @constructor */ var E = function(){};" +
+        "/** @type {Object.<E, number>} */ var obj = {};" +
+        "for (var k in obj) {" +
+        "  f(k);" +
+        "}",
+        "actual parameter 1 of f does not match formal parameter\n" +
+        "found   : string\n" +
+        "required: boolean");
+  }
+
   // TODO(nicksantos): change this to something that makes sense.
 //   public void testComparison1() throws Exception {
 //     testTypes("/**@type null */var a;" +
@@ -2788,7 +3010,7 @@
         "/** @extends {base}\n * @constructor */function derived() {}\n" +
         "derived.inherits(base);",
         "(new derived).constructor",
-        "function (this:derived): undefined");
+        "function (new:derived): undefined");
   }
 
   public void testGoodExtends8() throws Exception {
@@ -3012,6 +3234,19 @@
         "/** @implements {Disposable}\n * @interface */function f() {}");
   }
 
+  public void testGoodImplements4() throws Exception {
+    testTypes("var goog = {};" +
+        "/** @type {!Function} */" +
+        "goog.abstractMethod = function() {};" +
+        "/** @interface */\n" +
+        "goog.Disposable = goog.abstractMethod;" +
+        "goog.Disposable.prototype.dispose = goog.abstractMethod;" +
+        "/** @implements {goog.Disposable}\n * @constructor */" +
+        "goog.SubDisposable = function() {};" +
+        "/** @inheritDoc */ " +
+        "goog.SubDisposable.prototype.dispose = function() {};");
+  }
+
   public void testBadImplements1() throws Exception {
     testTypes("/** @interface */function Base1() {}\n" +
         "/** @interface */function Base2() {}\n" +
@@ -3224,6 +3459,23 @@
         "required: Object");
   }
 
+  public void testGetprop2() throws Exception {
+    testTypes("var x = null; x.alert();",
+        "null has no properties\n" +
+        "found   : null\n" +
+        "required: Object");
+  }
+
+  public void testGetprop3() throws Exception {
+    testTypes(
+        "/** @constructor */ " +
+        "function Foo() { /** @type {?Object} */ this.x = null; }" +
+        "Foo.prototype.initX = function() { this.x = {foo: 1}; };" +
+        "Foo.prototype.bar = function() {" +
+        "  if (this.x == null) { this.initX(); alert(this.x.foo); }" +
+        "};");
+  }
+
   public void testArrayAccess1() throws Exception {
     testTypes("var a = []; var b = a['hi'];");
   }
@@ -3661,6 +3913,16 @@
         "cannot instantiate non-constructor");
   }
 
+  public void testHigherOrderFunctions5() throws Exception {
+    testTypes(
+        "/** @param {number} x */ function g(x) {}" +
+        "/** @type {function(new:Error,...[number]):Date} */ var f;" +
+        "g(new f());",
+        "actual parameter 1 of g does not match formal parameter\n" +
+        "found   : Error\n" +
+        "required: number");
+  }
+
   public void testConstructorAlias1() throws Exception {
     testTypes(
         "/** @constructor */ var Foo = function() {};" +
@@ -4358,6 +4620,41 @@
         "};");
   }
 
+  public void testControlFlowRestrictsType10() throws Exception {
+    // We should correctly infer that y will be (null|{}) because
+    // the loop wraps around.
+    testTypes("/** @param {number} x */ function f(x) {}" +
+        "function g() {" +
+        "  var y = null;" +
+        "  for (var i = 0; i < 10; i++) {" +
+        "    f(y);" +
+        "    if (y != null) {" +
+        "      // y is None the first time it goes thru this branch\n" +
+        "    } else {" +
+        "      y = {};" +
+        "    }" +
+        "  }" +
+        "};",
+        "actual parameter 1 of f does not match formal parameter\n" +
+        "found   : (null|{})\n" +
+        "required: number");
+  }
+
+  public void testControlFlowRestrictsType11() throws Exception {
+    testTypes("/** @param {boolean} x */ function f(x) {}" +
+        "function g() {" +
+        "  var y = null;" +
+        "  if (y != null) {" +
+        "    for (var i = 0; i < 10; i++) {" +
+        "      f(y);" +
+        "    }" +
+        "  }" +
+        "};",
+        "condition always evaluates to false\n" +
+        "left : null\n" +
+        "right: null");
+  }
+
   public void testSwitchCase3() throws Exception {
     testTypes("/** @type String */" +
         "var a = new String('foo');" +
@@ -5526,6 +5823,18 @@
   }
 
   public void testCast16() throws Exception {
+    // A type cast should not invalidate the checks on the members
+    testTypes(
+        "for (var i = 0; i < 10; i++) {" +
+          "var x = /** @type {Object|number} */ (" +
+          "  {/** @type {string} */ foo: 3});" +
+        "}",
+        "assignment to property foo of (Object|null|number)\n" +
+        "found   : number\n" +
+        "required: string");
+  }
+
+  public void testCast17() throws Exception {
     // Mostly verifying that rhino actually understands these JsDocs.
     testTypes("/** @constructor */ function Foo() {} \n" +
         "/** @type {Foo} */ var x = /** @type {Foo} */ ({})");
@@ -5597,7 +5906,7 @@
     testTypes(
         "/** @constructor */ function Foo() {}" +
         "Foo();",
-        "Constructor function (this:Foo): undefined should be called " +
+        "Constructor function (new:Foo): undefined should be called " +
         "with the \"new\" keyword");
   }
 
@@ -5666,6 +5975,40 @@
     assertEquals("A", fType.getReferenceName());
   }
 
+  public void testConstructorType8() throws Exception {
+    testTypes(
+        "var ns = {};" +
+        "ns.create = function() { return function() {}; };" +
+        "/** @constructor */ ns.Foo = ns.create();" +
+        "ns.Foo.prototype = {x: 0, y: 0};" +
+        "/**\n" +
+        " * @param {ns.Foo} foo\n" +
+        " * @return {string}\n" +
+        " */\n" +
+        "function f(foo) {" +
+        "  return foo.x;" +
+        "}",
+        "inconsistent return type\n" +
+        "found   : number\n" +
+        "required: string");
+  }
+
+  public void testConstructorType9() throws Exception {
+    testTypes(
+        "var ns = {};" +
+        "ns.create = function() { return function() {}; };" +
+        "ns.extend = function(x) { return x; };" +
+        "/** @constructor */ ns.Foo = ns.create();" +
+        "ns.Foo.prototype = ns.extend({x: 0, y: 0});" +
+        "/**\n" +
+        " * @param {ns.Foo} foo\n" +
+        " * @return {string}\n" +
+        " */\n" +
+        "function f(foo) {" +
+        "  return foo.x;" +
+        "}");
+  }
+
   public void testAnonymousType1() throws Exception {
     testTypes("function f() {}" +
         "/** @constructor */\n" +
@@ -6412,6 +6755,23 @@
         "};");
   }
 
+  public void testObjectLiteralDeclaration2() throws Exception {
+    testTypes(
+        "var x = {" +
+        "  /** @type {boolean} */ abc: true" +
+        "};" +
+        "x.abc = 0;",
+        "assignment to property abc of x\n" +
+        "found   : number\n" +
+        "required: boolean");
+  }
+
+  public void testObjectLiteralDeclaration3() throws Exception {
+    testTypes(
+        "/** @param {{foo: !Function}} x */ function f(x) {}" +
+        "f({foo: function() {}});");
+  }
+
   public void testCallDateConstructorAsFunction() throws Exception {
     // ECMA-262 15.9.2: When Date is called as a function rather than as a
     // constructor, it returns a string.
@@ -6750,7 +7110,7 @@
     ObjectType objectType = (ObjectType) type;
     assertFalse(objectType.hasProperty("x"));
     assertEquals(
-        Sets.newHashSet(objectType),
+        Lists.newArrayList(objectType),
         registry.getTypesWithProperty("x"));
   }
 
@@ -6766,7 +7126,7 @@
     ObjectType objectType = (ObjectType) type;
     assertFalse(objectType.hasProperty("x"));
     assertEquals(
-        Sets.newHashSet(OBJECT_TYPE),
+        Lists.newArrayList(OBJECT_TYPE),
         registry.getTypesWithProperty("x"));
   }
 
@@ -6980,10 +7340,13 @@
   }
 
   public void testForwardTypeDeclaration2() throws Exception {
-    testClosureTypes(
-        "goog.addDependency('zzz.js', ['MyType'], []);" +
-        "/** @param {MyType} x */ function f(x) { }" +
-        "f(3);", null);
+    String f = "goog.addDependency('zzz.js', ['MyType'], []);" +
+        "/** @param {MyType} x */ function f(x) { }";
+    testClosureTypes(f, null);
+    testClosureTypes(f + "f(3);",
+        "actual parameter 1 of f does not match formal parameter\n" +
+        "found   : number\n" +
+        "required: (MyType|null)");
   }
 
   public void testForwardTypeDeclaration3() throws Exception {
@@ -7030,6 +7393,38 @@
             "property method not defined on any superclass of YourType"));
   }
 
+  public void testForwardTypeDeclaration7() throws Exception {
+    testClosureTypes(
+        "goog.addDependency('zzz.js', ['MyType'], []);" +
+        "/** @param {MyType=} x */" +
+        "function f(x) { return x == undefined; }", null);
+  }
+
+  public void testForwardTypeDeclaration8() throws Exception {
+    testClosureTypes(
+        "goog.addDependency('zzz.js', ['MyType'], []);" +
+        "/** @param {MyType} x */" +
+        "function f(x) { return x.name == undefined; }", null);
+  }
+
+  public void testForwardTypeDeclaration9() throws Exception {
+    testClosureTypes(
+        "goog.addDependency('zzz.js', ['MyType'], []);" +
+        "/** @param {MyType} x */" +
+        "function f(x) { x.name = 'Bob'; }", null);
+  }
+
+  public void testForwardTypeDeclaration10() throws Exception {
+    String f = "goog.addDependency('zzz.js', ['MyType'], []);" +
+        "/** @param {MyType|number} x */ function f(x) { }";
+    testClosureTypes(f, null);
+    testClosureTypes(f + "f(3);", null);
+    testClosureTypes(f + "f('3');",
+        "actual parameter 1 of f does not match formal parameter\n" +
+        "found   : string\n" +
+        "required: (MyType|null|number)");
+  }
+
   public void testMalformedOldTypeDef() throws Exception {
     testTypes(
         "var goog = {}; goog.typedef = true;" +
@@ -7051,7 +7446,7 @@
         "/** @type {number} */ goog.Bar = goog.typedef",
         "variable goog.Bar redefined with type number, " +
         "original definition at [testcode]:1 " +
-        "with type function (this:goog.Bar): undefined");
+        "with type function (new:goog.Bar): undefined");
   }
 
   public void testOldTypeDef1() throws Exception {
@@ -7099,7 +7494,7 @@
         "/** @typedef {number} */ goog.Bar;",
         "variable goog.Bar redefined with type None, " +
         "original definition at [testcode]:1 " +
-        "with type function (this:goog.Bar): undefined");
+        "with type function (new:goog.Bar): undefined");
   }
 
   public void testTypeDef1() throws Exception {
@@ -7534,6 +7929,47 @@
         "/** @param {{bar: number}} x */ function f(x) { return x.baz; }");
   }
 
+  public void testMissingProperty37() throws Exception {
+    // This used to emit a missing property warning because we couldn't
+    // determine that the inf(Foo, {isVisible:boolean}) == SubFoo.
+    testTypes(
+        "/** @param {{isVisible: boolean}} x */ function f(x){" +
+        "  x.isVisible = false;" +
+        "}" +
+        "/** @constructor */ function Foo() {}" +
+        "/**\n" +
+        " * @constructor \n" +
+        " * @extends {Foo}\n" +
+        " */ function SubFoo() {}" +
+        "/** @type {boolean} */ SubFoo.prototype.isVisible = true;" +
+        "/**\n" +
+        " * @param {Foo} x\n" +
+        " * @return {boolean}\n" +
+        " */\n" +
+        "function g(x) { return x.isVisible; }");
+  }
+
+  public void testReflectObject1() throws Exception {
+    testClosureTypes(
+        "var goog = {}; goog.reflect = {}; " +
+        "goog.reflect.object = function(x, y){};" +
+        "/** @constructor */ function A() {}" +
+        "goog.reflect.object(A, {x: 3});",
+        null);
+  }
+
+  public void testReflectObject2() throws Exception {
+    testClosureTypes(
+        "var goog = {}; goog.reflect = {}; " +
+        "goog.reflect.object = function(x, y){};" +
+        "/** @param {string} x */ function f(x) {}" +
+        "/** @constructor */ function A() {}" +
+        "goog.reflect.object(A, {x: f(1 + 1)});",
+        "actual parameter 1 of f does not match formal parameter\n" +
+        "found   : number\n" +
+        "required: string");
+  }
+
   public void testLends1() throws Exception {
     testTypes(
         "function extend(x, y) {}" +
@@ -7890,7 +8326,10 @@
           Joiner.on(", ").join(compiler.getWarnings()),
           0, compiler.getWarningCount());
     } else {
-      assertEquals(descriptions.size(), compiler.getWarningCount());
+      assertEquals(
+          "unexpected warning(s) : " +
+          Joiner.on(", ").join(compiler.getWarnings()),
+          descriptions.size(), compiler.getWarningCount());
       for (int i = 0; i < descriptions.size(); i++) {
         assertEquals(descriptions.get(i),
             compiler.getWarnings()[i].description);
diff -r -u original/test/com/google/javascript/rhino/jstype/FunctionTypeTest.java buggy/test/com/google/javascript/rhino/jstype/FunctionTypeTest.java
--- original/test/com/google/javascript/rhino/jstype/FunctionTypeTest.java	2023-06-13 15:31:43.487101498 +0800
+++ buggy/test/com/google/javascript/rhino/jstype/FunctionTypeTest.java	2023-06-12 11:40:27.190681523 +0800
@@ -161,6 +161,14 @@
     assertTrue(objReturnBoolean.canAssignTo(ifaceReturnBoolean));
   }
 
+  public void testCtorWithPrototypeSet() {
+    FunctionType ctor = registry.createConstructorType(
+        "Foo", null, null, null);
+    assertFalse(ctor.getInstanceType().isUnknownType());
+    ctor.defineDeclaredProperty("prototype", UNKNOWN_TYPE, false, null);
+    assertTrue(ctor.getInstanceType().isUnknownType());
+  }
+
   private void assertLeastSupertype(String s, JSType t1, JSType t2) {
     assertEquals(s, t1.getLeastSupertype(t2).toString());
     assertEquals(s, t2.getLeastSupertype(t1).toString());
