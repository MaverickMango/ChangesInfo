diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index c2249a4..e2905cb 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -75,6 +75,8 @@
 
 - DateTimeFormatter convenience methods taking an Appendable [2607923]
 
+- Reduce logging from ZoneInfoCompiler by adding a verbose flag
+
 
 Compatibility with 1.6
 ----------------------
diff --git a/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java b/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java
index a42772e..ead4b2b 100644
--- a/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java
+++ b/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2009 Stephen Colebourne
+ *  Copyright 2001-2010 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -1440,9 +1440,11 @@
                         curNameKey.equals(zoneNameData[2]) &&
                         curNameKey.equals(zoneNameData[4])) {
                     
-                    System.out.println("Fixing duplicate name key - " + nextNameKey);
-                    System.out.println("     - " + new DateTime(trans[i], chrono) +
-                                       " - " + new DateTime(trans[i + 1], chrono));
+                    if (ZoneInfoCompiler.verbose()) {
+                        System.out.println("Fixing duplicate name key - " + nextNameKey);
+                        System.out.println("     - " + new DateTime(trans[i], chrono) +
+                                           " - " + new DateTime(trans[i + 1], chrono));
+                    }
                     if (curOffset > nextOffset) {
                         nameKeys[i] = (curNameKey + "-Summer").intern();
                     } else if (curOffset < nextOffset) {
@@ -1455,8 +1457,10 @@
             if (tailZone != null) {
                 if (tailZone.iStartRecurrence.getNameKey()
                     .equals(tailZone.iEndRecurrence.getNameKey())) {
-                    System.out.println("Fixing duplicate recurrent name key - " +
-                                       tailZone.iStartRecurrence.getNameKey());
+                    if (ZoneInfoCompiler.verbose()) {
+                        System.out.println("Fixing duplicate recurrent name key - " +
+                                           tailZone.iStartRecurrence.getNameKey());
+                    }
                     if (tailZone.iStartRecurrence.getSaveMillis() > 0) {
                         tailZone = new DSTZone(
                             tailZone.getID(),
diff --git a/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java b/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java
index a7b5418..a057c30 100644
--- a/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java
+++ b/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2009 Stephen Colebourne
+ *  Copyright 2001-2010 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -65,6 +65,20 @@
 
     static Chronology cLenientISO;
 
+    static ThreadLocal<Boolean> cVerbose = new ThreadLocal<Boolean>();
+    static {
+        cVerbose.set(Boolean.FALSE);
+    }
+
+    /**
+     * Gets a flag indicating that verbose logging is required.
+     * @return true to log verbosely
+     */
+    public static boolean verbose() {
+        return cVerbose.get();
+    }
+
+    //-----------------------------------------------------------------------
     /**
      * Launches the ZoneInfoCompiler tool.
      *
@@ -73,6 +87,7 @@
      * where possible options include:
      *   -src &lt;directory&gt;    Specify where to read source files
      *   -dst &lt;directory&gt;    Specify where to write generated files
+     *   -verbose            Output verbosely (default false)
      * </pre>
      */
     public static void main(String[] args) throws Exception {
@@ -83,6 +98,7 @@
 
         File inputDir = null;
         File outputDir = null;
+        boolean verbose = false;
 
         int i;
         for (i=0; i<args.length; i++) {
@@ -91,6 +107,8 @@
                     inputDir = new File(args[++i]);
                 } else if ("-dst".equals(args[i])) {
                     outputDir = new File(args[++i]);
+                } else if ("-verbose".equals(args[i])) {
+                    verbose = true;
                 } else if ("-?".equals(args[i])) {
                     printUsage();
                     return;
@@ -113,6 +131,7 @@
             sources[j] = inputDir == null ? new File(args[i]) : new File(inputDir, args[i]);
         }
 
+        cVerbose.set(verbose);
         ZoneInfoCompiler zic = new ZoneInfoCompiler();
         zic.compile(outputDir, sources);
     }
@@ -122,6 +141,7 @@
         System.out.println("where possible options include:");
         System.out.println("  -src <directory>    Specify where to read source files");
         System.out.println("  -dst <directory>    Specify where to write generated files");
+        System.out.println("  -verbose            Output verbosely (default false)");
     }
 
     static DateTimeOfYear getStartOfYear() {
@@ -363,6 +383,7 @@
 
         Map<String, DateTimeZone> map = new TreeMap<String, DateTimeZone>();
 
+        System.out.println("Writing zoneinfo files");
         for (int i=0; i<iZones.size(); i++) {
             Zone zone = iZones.get(i);
             DateTimeZoneBuilder builder = new DateTimeZoneBuilder();
@@ -372,7 +393,9 @@
             if (test(tz.getID(), tz)) {
                 map.put(tz.getID(), tz);
                 if (outputDir != null) {
-                    System.out.println("Writing " + tz.getID());
+                    if (ZoneInfoCompiler.verbose()) {
+                        System.out.println("Writing " + tz.getID());
+                    }
                     File file = new File(outputDir, tz.getID());
                     if (!file.getParentFile().exists()) {
                         file.getParentFile().mkdirs();
