{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "/home/liumengjiao/Desktop/CI/Benchmark/data/changesInfo/",
  "properties": {
    "trigger.tests": "org.joda.time.tz.TestCompiler::testDateTimeZoneBuilder",
    "test.dir": "src/test/java",
    "clz.modified": "org.joda.time.tz.ZoneInfoCompiler",
    "src.dir": "src/main/java"
  },
  "timeoutSecond": 100,
  "proj": "Time",
  "id": "11",
  "workingDir": "../bugs/Time_11_buggy",
  "buggyCommit": "6d5104753470c130336e319a64009c0553b29c96",
  "inducingCommit": "01ed04f3a83f17e9947c83d04cb258430429789d",
  "originalCommit": "af371a8f99adacdcfafc608222d024ec6d83ab9f",
  "bug_name": "Time_11",
  "derive": "defects4j",
  "original_fixing_commit": "57eb4cbb9044771cd46a9eee0c62016618930226",
  "buildFiles_changed": false,
  "regression": false,
  "inducing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java",
        "JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.joda.time.tz.DateTimeZoneBuilder\\$PrecalculatedZone:create:[String id, boolean outputID, ArrayList\u003cTransition\u003e transitions, DSTZone tailZone]:PrecalculatedZone"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "org.joda.time.tz.DateTimeZoneBuilder\\$PrecalculatedZone:create:[String id, boolean outputID, ArrayList\u003cTransition\u003e transitions, DSTZone tailZone]:PrecalculatedZone"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "2",
            "1443",
            "1444",
            "1445",
            "1458",
            "1459"
          ],
          "num": 6
        },
        {
          "qualified_names": [
            "2",
            "1443",
            "1444",
            "1445",
            "1446",
            "1447",
            "1460",
            "1461",
            "1462",
            "1463"
          ],
          "num": 10
        }
      ],
      "diff": "diff --git a/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java b/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java\nindex a42772e..ead4b2b 100644\n--- a/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java\n+++ b/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java\n@@ -1,5 +1,5 @@\n /*\n- *  Copyright 2001-2009 Stephen Colebourne\n+ *  Copyright 2001-2010 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n@@ -1440,9 +1440,11 @@\n                         curNameKey.equals(zoneNameData[2]) \u0026\u0026\n                         curNameKey.equals(zoneNameData[4])) {\n                     \n-                    System.out.println(\"Fixing duplicate name key - \" + nextNameKey);\n-                    System.out.println(\"     - \" + new DateTime(trans[i], chrono) +\n-                                       \" - \" + new DateTime(trans[i + 1], chrono));\n+                    if (ZoneInfoCompiler.verbose()) {\n+                        System.out.println(\"Fixing duplicate name key - \" + nextNameKey);\n+                        System.out.println(\"     - \" + new DateTime(trans[i], chrono) +\n+                                           \" - \" + new DateTime(trans[i + 1], chrono));\n+                    }\n                     if (curOffset \u003e nextOffset) {\n                         nameKeys[i] \u003d (curNameKey + \"-Summer\").intern();\n                     } else if (curOffset \u003c nextOffset) {\n@@ -1455,8 +1457,10 @@\n             if (tailZone !\u003d null) {\n                 if (tailZone.iStartRecurrence.getNameKey()\n                     .equals(tailZone.iEndRecurrence.getNameKey())) {\n-                    System.out.println(\"Fixing duplicate recurrent name key - \" +\n-                                       tailZone.iStartRecurrence.getNameKey());\n+                    if (ZoneInfoCompiler.verbose()) {\n+                        System.out.println(\"Fixing duplicate recurrent name key - \" +\n+                                           tailZone.iStartRecurrence.getNameKey());\n+                    }\n                     if (tailZone.iStartRecurrence.getSaveMillis() \u003e 0) {\n                         tailZone \u003d new DSTZone(\n                             tailZone.getID(),\n",
      "operations": [
        {
          "type": "insert-node",
          "from": "",
          "to": "IfStatement [52835,53156]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "IfStatement [53683,53908]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodInvocation [52839,52865]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Block [52867,53156]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodInvocation [53687,53713]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Block [53715,53908]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java",
        "JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.joda.time.tz.ZoneInfoCompiler:main:[String[] args]:void",
            "org.joda.time.tz.ZoneInfoCompiler:compile:[File outputDir, File[] sources]:Map\u003cString,DateTimeZone\u003e",
            "org.joda.time.tz.ZoneInfoCompiler:printUsage:[]:void"
          ],
          "num": 3
        },
        {
          "qualified_names": [
            "org.joda.time.tz.ZoneInfoCompiler:verbose:[]:boolean",
            "org.joda.time.tz.ZoneInfoCompiler:printUsage:[]:void",
            "org.joda.time.tz.ZoneInfoCompiler:compile:[File outputDir, File[] sources]:Map\u003cString,DateTimeZone\u003e",
            "org.joda.time.tz.ZoneInfoCompiler:main:[String[] args]:void"
          ],
          "num": 4
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "2",
            "67",
            "75",
            "85",
            "93",
            "115",
            "124",
            "365",
            "375"
          ],
          "num": 9
        },
        {
          "qualified_names": [
            "2",
            "68",
            "69",
            "70",
            "71",
            "72",
            "73",
            "74",
            "75",
            "76",
            "77",
            "78",
            "79",
            "80",
            "81",
            "90",
            "101",
            "110",
            "111",
            "134",
            "144",
            "386",
            "396",
            "397",
            "398"
          ],
          "num": 25
        }
      ],
      "diff": "diff --git a/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java b/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java\nindex a7b5418..a057c30 100644\n--- a/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java\n+++ b/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java\n@@ -1,5 +1,5 @@\n /*\n- *  Copyright 2001-2009 Stephen Colebourne\n+ *  Copyright 2001-2010 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n@@ -65,6 +65,20 @@\n \n     static Chronology cLenientISO;\n \n+    static ThreadLocal\u003cBoolean\u003e cVerbose \u003d new ThreadLocal\u003cBoolean\u003e();\n+    static {\n+        cVerbose.set(Boolean.FALSE);\n+    }\n+\n+    /**\n+     * Gets a flag indicating that verbose logging is required.\n+     * @return true to log verbosely\n+     */\n+    public static boolean verbose() {\n+        return cVerbose.get();\n+    }\n+\n+    //-----------------------------------------------------------------------\n     /**\n      * Launches the ZoneInfoCompiler tool.\n      *\n@@ -73,6 +87,7 @@\n      * where possible options include:\n      *   -src \u0026lt;directory\u0026gt;    Specify where to read source files\n      *   -dst \u0026lt;directory\u0026gt;    Specify where to write generated files\n+     *   -verbose            Output verbosely (default false)\n      * \u003c/pre\u003e\n      */\n     public static void main(String[] args) throws Exception {\n@@ -83,6 +98,7 @@\n \n         File inputDir \u003d null;\n         File outputDir \u003d null;\n+        boolean verbose \u003d false;\n \n         int i;\n         for (i\u003d0; i\u003cargs.length; i++) {\n@@ -91,6 +107,8 @@\n                     inputDir \u003d new File(args[++i]);\n                 } else if (\"-dst\".equals(args[i])) {\n                     outputDir \u003d new File(args[++i]);\n+                } else if (\"-verbose\".equals(args[i])) {\n+                    verbose \u003d true;\n                 } else if (\"-?\".equals(args[i])) {\n                     printUsage();\n                     return;\n@@ -113,6 +131,7 @@\n             sources[j] \u003d inputDir \u003d\u003d null ? new File(args[i]) : new File(inputDir, args[i]);\n         }\n \n+        cVerbose.set(verbose);\n         ZoneInfoCompiler zic \u003d new ZoneInfoCompiler();\n         zic.compile(outputDir, sources);\n     }\n@@ -122,6 +141,7 @@\n         System.out.println(\"where possible options include:\");\n         System.out.println(\"  -src \u003cdirectory\u003e    Specify where to read source files\");\n         System.out.println(\"  -dst \u003cdirectory\u003e    Specify where to write generated files\");\n+        System.out.println(\"  -verbose            Output verbosely (default false)\");\n     }\n \n     static DateTimeOfYear getStartOfYear() {\n@@ -363,6 +383,7 @@\n \n         Map\u003cString, DateTimeZone\u003e map \u003d new TreeMap\u003cString, DateTimeZone\u003e();\n \n+        System.out.println(\"Writing zoneinfo files\");\n         for (int i\u003d0; i\u003ciZones.size(); i++) {\n             Zone zone \u003d iZones.get(i);\n             DateTimeZoneBuilder builder \u003d new DateTimeZoneBuilder();\n@@ -372,7 +393,9 @@\n             if (test(tz.getID(), tz)) {\n                 map.put(tz.getID(), tz);\n                 if (outputDir !\u003d null) {\n-                    System.out.println(\"Writing \" + tz.getID());\n+                    if (ZoneInfoCompiler.verbose()) {\n+                        System.out.println(\"Writing \" + tz.getID());\n+                    }\n                     File file \u003d new File(outputDir, tz.getID());\n                     if (!file.getParentFile().exists()) {\n                         file.getParentFile().mkdirs();\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldDeclaration [2296,2362]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Initializer [2367,2418]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [2424,2611]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [3339,3363]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [4350,4372]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [4868,4945]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [12970,13015]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: -verbose            Output verbosely (default false) [3044,3096]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "IfStatement [3665,3917]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "IfStatement [13487,13611]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodInvocation [3669,3695]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Block [3697,3752]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodInvocation [13491,13517]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Block [13519,13611]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        }
      ]
    }
  ],
  "inducing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [
        "org.joda.time.tz.ZoneInfoCompiler:verbose:[]:boolean"
      ],
      "num": 1
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  },
  "trigger_tests": [
    {
      "test_class": "org.joda.time.tz.TestCompiler",
      "test_function": "testDateTimeZoneBuilder",
      "assertion_line": "99",
      "exception": "junit.framework.AssertionFailedError",
      "message": ""
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/joda/time/tz/ZoneInfoCompiler.java",
        "src/main/java/org/joda/time/tz/ZoneInfoCompiler.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [],
          "num": 0
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "68",
            "69",
            "70",
            "71"
          ],
          "num": 4
        },
        {
          "qualified_names": [
            "68",
            "69",
            "70",
            "71",
            "72"
          ],
          "num": 5
        }
      ],
      "diff": "diff --git a/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java b/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java\nindex 6efe071..64da5ea 100644\n--- a/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java\n+++ b/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java\n@@ -65,10 +65,11 @@\n \n     static Chronology cLenientISO;\n \n-    static ThreadLocal\u003cBoolean\u003e cVerbose \u003d new ThreadLocal\u003cBoolean\u003e();\n-    static {\n-        cVerbose.set(Boolean.FALSE);\n-    }\n+    static ThreadLocal\u003cBoolean\u003e cVerbose \u003d new ThreadLocal\u003cBoolean\u003e() {\n+        protected Boolean initialValue() {\n+            return Boolean.FALSE;\n+        }\n+    };\n \n     /**\n      * Gets a flag indicating that verbose logging is required.\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "AnonymousClassDeclaration [2362,2456]"
        },
        {
          "type": "delete-tree",
          "from": "Initializer [2367,2418]",
          "to": ""
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  },
  "patch_changed_mths": {
    "qualified_names": [],
    "num": 0
  }
}