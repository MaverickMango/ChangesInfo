diff -r -u inducing/src/java/org/apache/commons/lang/time/DateUtils.java buggy/src/java/org/apache/commons/lang/time/DateUtils.java
--- inducing/src/java/org/apache/commons/lang/time/DateUtils.java	2023-06-12 11:40:37.782199968 +0800
+++ buggy/src/java/org/apache/commons/lang/time/DateUtils.java	2023-06-12 11:40:37.602208059 +0800
@@ -272,6 +272,139 @@
 
     //-----------------------------------------------------------------------
     /**
+     * Adds a number of years to a date returning a new object.
+     * The original date object is unchanged.
+     *
+     * @param date  the date, not null
+     * @param amount  the amount to add, may be negative
+     * @return the new date object with the amount added
+     * @throws IllegalArgumentException if the date is null
+     */
+    public static Date addYears(Date date, int amount) {
+        return add(date, Calendar.YEAR, amount);
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Adds a number of months to a date returning a new object.
+     * The original date object is unchanged.
+     *
+     * @param date  the date, not null
+     * @param amount  the amount to add, may be negative
+     * @return the new date object with the amount added
+     * @throws IllegalArgumentException if the date is null
+     */
+    public static Date addMonths(Date date, int amount) {
+        return add(date, Calendar.MONTH, amount);
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Adds a number of weeks to a date returning a new object.
+     * The original date object is unchanged.
+     *
+     * @param date  the date, not null
+     * @param amount  the amount to add, may be negative
+     * @return the new date object with the amount added
+     * @throws IllegalArgumentException if the date is null
+     */
+    public static Date addWeeks(Date date, int amount) {
+        return add(date, Calendar.WEEK_OF_YEAR, amount);
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Adds a number of days to a date returning a new object.
+     * The original date object is unchanged.
+     *
+     * @param date  the date, not null
+     * @param amount  the amount to add, may be negative
+     * @return the new date object with the amount added
+     * @throws IllegalArgumentException if the date is null
+     */
+    public static Date addDays(Date date, int amount) {
+        return add(date, Calendar.DAY_OF_MONTH, amount);
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Adds a number of hours to a date returning a new object.
+     * The original date object is unchanged.
+     *
+     * @param date  the date, not null
+     * @param amount  the amount to add, may be negative
+     * @return the new date object with the amount added
+     * @throws IllegalArgumentException if the date is null
+     */
+    public static Date addHours(Date date, int amount) {
+        return add(date, Calendar.HOUR_OF_DAY, amount);
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Adds a number of minutes to a date returning a new object.
+     * The original date object is unchanged.
+     *
+     * @param date  the date, not null
+     * @param amount  the amount to add, may be negative
+     * @return the new date object with the amount added
+     * @throws IllegalArgumentException if the date is null
+     */
+    public static Date addMinutes(Date date, int amount) {
+        return add(date, Calendar.MINUTE, amount);
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Adds a number of seconds to a date returning a new object.
+     * The original date object is unchanged.
+     *
+     * @param date  the date, not null
+     * @param amount  the amount to add, may be negative
+     * @return the new date object with the amount added
+     * @throws IllegalArgumentException if the date is null
+     */
+    public static Date addSeconds(Date date, int amount) {
+        return add(date, Calendar.SECOND, amount);
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Adds a number of milliseconds to a date returning a new object.
+     * The original date object is unchanged.
+     *
+     * @param date  the date, not null
+     * @param amount  the amount to add, may be negative
+     * @return the new date object with the amount added
+     * @throws IllegalArgumentException if the date is null
+     */
+    public static Date addMilliseconds(Date date, int amount) {
+        return add(date, Calendar.MILLISECOND, amount);
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Adds to a date returning a new object.
+     * The original date object is unchanged.
+     *
+     * @param date  the date, not null
+     * @param calendarField  the calendar field to add to
+     * @param amount  the amount to add, may be negative
+     * @return the new date object with the amount added
+     * @throws IllegalArgumentException if the date is null
+     */
+    public static Date add(Date date, int calendarField, int amount) {
+        if (date == null) {
+            throw new IllegalArgumentException("The date must not be null");
+        }
+        Calendar c = Calendar.getInstance();
+        c.setTime(date);
+        c.add(calendarField, amount);
+        return c.getTime();
+    }
+
+    //-----------------------------------------------------------------------
+    /**
      * <p>Round this date, leaving the field specified as the most
      * significant field.</p>
      *
@@ -564,22 +697,28 @@
 
     //-----------------------------------------------------------------------
     /**
-     * <p>This constructs an <code>Iterator</code> that will
-     * start and stop over a date range based on the focused
-     * date and the range style.</p>
+     * <p>This constructs an <code>Iterator</code> over each day in a date
+     * range defined by a focus date and range style.</p>
      *
      * <p>For instance, passing Thursday, July 4, 2002 and a
-     * <code>RANGE_MONTH_SUNDAY</code> will return an
-     * <code>Iterator</code> that starts with Sunday, June 30,
-     * 2002 and ends with Saturday, August 3, 2002.
-     * 
-     * @param focus  the date to work with
-     * @param rangeStyle  the style constant to use. Must be one of the range
-     * styles listed for the {@link #iterator(Calendar, int)} method.
+     * <code>RANGE_MONTH_SUNDAY</code> will return an <code>Iterator</code>
+     * that starts with Sunday, June 30, 2002 and ends with Saturday, August 3,
+     * 2002, returning a Calendar instance for each intermediate day.</p>
      *
-     * @return the date iterator
-     * @throws IllegalArgumentException if the date is <code>null</code> or if
-     * the rangeStyle is not 
+     * <p>This method provides an iterator that returns Calendar objects.
+     * The days are progressed using {@link Calendar#add(int, int)}.</p>
+     *
+     * @param focus  the date to work with, not null
+     * @param rangeStyle  the style constant to use. Must be one of
+     * {@link DateUtils#RANGE_MONTH_SUNDAY}, 
+     * {@link DateUtils#RANGE_MONTH_MONDAY},
+     * {@link DateUtils#RANGE_WEEK_SUNDAY},
+     * {@link DateUtils#RANGE_WEEK_MONDAY},
+     * {@link DateUtils#RANGE_WEEK_RELATIVE},
+     * {@link DateUtils#RANGE_WEEK_CENTER}
+     * @return the date iterator, which always returns Calendar instances
+     * @throws IllegalArgumentException if the date is <code>null</code>
+     * @throws IllegalArgumentException if the rangeStyle is invalid
      */
     public static Iterator iterator(Date focus, int rangeStyle) {
         if (focus == null) {
@@ -591,15 +730,17 @@
     }
 
     /**
-     * <p>This constructs an <code>Iterator</code> that will
-     * start and stop over a date range based on the focused
-     * date and the range style.</p>
+     * <p>This constructs an <code>Iterator</code> over each day in a date
+     * range defined by a focus date and range style.</p>
      *
      * <p>For instance, passing Thursday, July 4, 2002 and a
-     * <code>RANGE_MONTH_SUNDAY</code> will return an
-     * <code>Iterator</code> that starts with Sunday, June 30,
-     * 2002 and ends with Saturday, August 3, 2002.
-     * 
+     * <code>RANGE_MONTH_SUNDAY</code> will return an <code>Iterator</code>
+     * that starts with Sunday, June 30, 2002 and ends with Saturday, August 3,
+     * 2002, returning a Calendar instance for each intermediate day.</p>
+     *
+     * <p>This method provides an iterator that returns Calendar objects.
+     * The days are progressed using {@link Calendar#add(int, int)}.</p>
+     *
      * @param focus  the date to work with
      * @param rangeStyle  the style constant to use. Must be one of
      * {@link DateUtils#RANGE_MONTH_SUNDAY}, 
@@ -610,6 +751,7 @@
      * {@link DateUtils#RANGE_WEEK_CENTER}
      * @return the date iterator
      * @throws IllegalArgumentException if the date is <code>null</code>
+     * @throws IllegalArgumentException if the rangeStyle is invalid
      */
     public static Iterator iterator(Calendar focus, int rangeStyle) {
         if (focus == null) {
@@ -684,15 +826,14 @@
     }
 
     /**
-     * <p>This constructs an <code>Iterator</code> that will
-     * start and stop over a date range based on the focused
-     * date and the range style.</p>
+     * <p>This constructs an <code>Iterator</code> over each day in a date
+     * range defined by a focus date and range style.</p>
      *
      * <p>For instance, passing Thursday, July 4, 2002 and a
-     * <code>RANGE_MONTH_SUNDAY</code> will return an
-     * <code>Iterator</code> that starts with Sunday, June 30,
-     * 2002 and ends with Saturday, August 3, 2002.</p>
-     * 
+     * <code>RANGE_MONTH_SUNDAY</code> will return an <code>Iterator</code>
+     * that starts with Sunday, June 30, 2002 and ends with Saturday, August 3,
+     * 2002, returning a Calendar instance for each intermediate day.</p>
+     *
      * @param focus  the date to work with, either
      *  <code>Date</code> or <code>Calendar</code>
      * @param rangeStyle  the style constant to use. Must be one of the range
diff -r -u inducing/src/test/org/apache/commons/lang/time/DateUtilsTest.java buggy/src/test/org/apache/commons/lang/time/DateUtilsTest.java
--- inducing/src/test/org/apache/commons/lang/time/DateUtilsTest.java	2023-06-12 11:40:37.834197630 +0800
+++ buggy/src/test/org/apache/commons/lang/time/DateUtilsTest.java	2023-06-12 11:40:37.638206441 +0800
@@ -43,6 +43,14 @@
  * @author <a href="mailto:steve@mungoknotwise.com">Steven Caswell</a>
  */
 public class DateUtilsTest extends TestCase {
+
+    private static final long MILLIS_TEST;
+    static {
+        GregorianCalendar cal = new GregorianCalendar(2000, 6, 5, 4, 3, 2);
+        cal.set(Calendar.MILLISECOND, 1);
+        MILLIS_TEST = cal.getTime().getTime();
+    }
+
     DateFormat dateParser = null;
     DateFormat dateTimeParser = null;
     DateFormat timeZoneDateParser = null;
@@ -275,7 +283,191 @@
             fail();
         } catch (IllegalArgumentException ex) {}
     }
-    
+
+    //-----------------------------------------------------------------------
+    public void testAddYears() throws Exception {
+        Date base = new Date(MILLIS_TEST);
+        Date result = DateUtils.addYears(base, 0);
+        assertNotSame(base, result);
+        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);
+        assertDate(result, 2000, 6, 5, 4, 3, 2, 1);
+        
+        result = DateUtils.addYears(base, 1);
+        assertNotSame(base, result);
+        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);
+        assertDate(result, 2001, 6, 5, 4, 3, 2, 1);
+        
+        result = DateUtils.addYears(base, -1);
+        assertNotSame(base, result);
+        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);
+        assertDate(result, 1999, 6, 5, 4, 3, 2, 1);
+    }
+
+    //-----------------------------------------------------------------------
+    public void testAddMonths() throws Exception {
+        Date base = new Date(MILLIS_TEST);
+        Date result = DateUtils.addMonths(base, 0);
+        assertNotSame(base, result);
+        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);
+        assertDate(result, 2000, 6, 5, 4, 3, 2, 1);
+        
+        result = DateUtils.addMonths(base, 1);
+        assertNotSame(base, result);
+        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);
+        assertDate(result, 2000, 7, 5, 4, 3, 2, 1);
+        
+        result = DateUtils.addMonths(base, -1);
+        assertNotSame(base, result);
+        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);
+        assertDate(result, 2000, 5, 5, 4, 3, 2, 1);
+    }
+
+    //-----------------------------------------------------------------------
+    public void testAddWeeks() throws Exception {
+        Date base = new Date(MILLIS_TEST);
+        Date result = DateUtils.addWeeks(base, 0);
+        assertNotSame(base, result);
+        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);
+        assertDate(result, 2000, 6, 5, 4, 3, 2, 1);
+        
+        result = DateUtils.addWeeks(base, 1);
+        assertNotSame(base, result);
+        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);
+        assertDate(result, 2000, 6, 12, 4, 3, 2, 1);
+        
+        result = DateUtils.addWeeks(base, -1);
+        assertNotSame(base, result);
+        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);      // july
+        assertDate(result, 2000, 5, 28, 4, 3, 2, 1);   // june
+    }
+
+    //-----------------------------------------------------------------------
+    public void testAddDays() throws Exception {
+        Date base = new Date(MILLIS_TEST);
+        Date result = DateUtils.addDays(base, 0);
+        assertNotSame(base, result);
+        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);
+        assertDate(result, 2000, 6, 5, 4, 3, 2, 1);
+        
+        result = DateUtils.addDays(base, 1);
+        assertNotSame(base, result);
+        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);
+        assertDate(result, 2000, 6, 6, 4, 3, 2, 1);
+        
+        result = DateUtils.addDays(base, -1);
+        assertNotSame(base, result);
+        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);
+        assertDate(result, 2000, 6, 4, 4, 3, 2, 1);
+    }
+
+    //-----------------------------------------------------------------------
+    public void testAddHours() throws Exception {
+        Date base = new Date(MILLIS_TEST);
+        Date result = DateUtils.addHours(base, 0);
+        assertNotSame(base, result);
+        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);
+        assertDate(result, 2000, 6, 5, 4, 3, 2, 1);
+        
+        result = DateUtils.addHours(base, 1);
+        assertNotSame(base, result);
+        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);
+        assertDate(result, 2000, 6, 5, 5, 3, 2, 1);
+        
+        result = DateUtils.addHours(base, -1);
+        assertNotSame(base, result);
+        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);
+        assertDate(result, 2000, 6, 5, 3, 3, 2, 1);
+    }
+
+    //-----------------------------------------------------------------------
+    public void testAddMinutes() throws Exception {
+        Date base = new Date(MILLIS_TEST);
+        Date result = DateUtils.addMinutes(base, 0);
+        assertNotSame(base, result);
+        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);
+        assertDate(result, 2000, 6, 5, 4, 3, 2, 1);
+        
+        result = DateUtils.addMinutes(base, 1);
+        assertNotSame(base, result);
+        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);
+        assertDate(result, 2000, 6, 5, 4, 4, 2, 1);
+        
+        result = DateUtils.addMinutes(base, -1);
+        assertNotSame(base, result);
+        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);
+        assertDate(result, 2000, 6, 5, 4, 2, 2, 1);
+    }
+
+    //-----------------------------------------------------------------------
+    public void testAddSeconds() throws Exception {
+        Date base = new Date(MILLIS_TEST);
+        Date result = DateUtils.addSeconds(base, 0);
+        assertNotSame(base, result);
+        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);
+        assertDate(result, 2000, 6, 5, 4, 3, 2, 1);
+        
+        result = DateUtils.addSeconds(base, 1);
+        assertNotSame(base, result);
+        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);
+        assertDate(result, 2000, 6, 5, 4, 3, 3, 1);
+        
+        result = DateUtils.addSeconds(base, -1);
+        assertNotSame(base, result);
+        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);
+        assertDate(result, 2000, 6, 5, 4, 3, 1, 1);
+    }
+
+    //-----------------------------------------------------------------------
+    public void testAddMilliseconds() throws Exception {
+        Date base = new Date(MILLIS_TEST);
+        Date result = DateUtils.addMilliseconds(base, 0);
+        assertNotSame(base, result);
+        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);
+        assertDate(result, 2000, 6, 5, 4, 3, 2, 1);
+        
+        result = DateUtils.addMilliseconds(base, 1);
+        assertNotSame(base, result);
+        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);
+        assertDate(result, 2000, 6, 5, 4, 3, 2, 2);
+        
+        result = DateUtils.addMilliseconds(base, -1);
+        assertNotSame(base, result);
+        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);
+        assertDate(result, 2000, 6, 5, 4, 3, 2, 0);
+    }
+
+    //-----------------------------------------------------------------------
+    public void testAddByField() throws Exception {
+        Date base = new Date(MILLIS_TEST);
+        Date result = DateUtils.add(base, Calendar.YEAR, 0);
+        assertNotSame(base, result);
+        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);
+        assertDate(result, 2000, 6, 5, 4, 3, 2, 1);
+        
+        result = DateUtils.add(base, Calendar.YEAR, 1);
+        assertNotSame(base, result);
+        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);
+        assertDate(result, 2001, 6, 5, 4, 3, 2, 1);
+        
+        result = DateUtils.add(base, Calendar.YEAR, -1);
+        assertNotSame(base, result);
+        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);
+        assertDate(result, 1999, 6, 5, 4, 3, 2, 1);
+    }
+
+    //-----------------------------------------------------------------------
+    private void assertDate(Date date, int year, int month, int day, int hour, int min, int sec, int mil) throws Exception {
+        GregorianCalendar cal = new GregorianCalendar();
+        cal.setTime(date);
+        assertEquals(year, cal.get(Calendar.YEAR));
+        assertEquals(month, cal.get(Calendar.MONTH));
+        assertEquals(day, cal.get(Calendar.DAY_OF_MONTH));
+        assertEquals(hour, cal.get(Calendar.HOUR_OF_DAY));
+        assertEquals(min, cal.get(Calendar.MINUTE));
+        assertEquals(sec, cal.get(Calendar.SECOND));
+        assertEquals(mil, cal.get(Calendar.MILLISECOND));
+    }
+
     //-----------------------------------------------------------------------
     /**
      * Tests various values with the round method
@@ -786,6 +978,14 @@
                 dateParser.parse("December 2, 2001"));
     }
 
+    // Tests LANG-59
+    public void testLang59() throws Exception {
+        // truncate 2004-10-31 01:00:00 MDT
+        Date oct31_01MDT = new Date(1099206000000L);
+        Date result = DateUtils.truncate(oct31_01MDT, Calendar.HOUR_OF_DAY);
+        assertEquals(oct31_01MDT, result); 
+    }
+
     /**
      * This checks that this is a 7 element iterator of Calendar objects
      * that are dates (no time), and exactly 1 day spaced after each other.
