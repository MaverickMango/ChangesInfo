{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "data/changesInfo/",
  "timeoutSecond": 300,
  "proj": "Closure",
  "id": "60",
  "workingDir": "../bugs/Closure_60_buggy",
  "inducingCommit": "a095236ba70304d61b8ec02ea316d3504cc0ea1d",
  "originalCommit": "fe58a5d1750bab2c5d1d0ef16102c1000e761bd8",
  "bug_name": "Closure_60",
  "derive": "defects4j",
  "original_fixing_commit": "fbaadc736f0031dd84bebea33abae497b47158cb",
  "buildFiles_changed": false,
  "inducing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/jscomp/MarkNoSideEffectCalls.java",
        "src/com/google/javascript/jscomp/MarkNoSideEffectCalls.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "visit"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "visit"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "196"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "196"
          ],
          "num": 1
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/jscomp/MarkNoSideEffectCalls.java b/src/com/google/javascript/jscomp/MarkNoSideEffectCalls.java\nindex 60cfd8e..fdd21e6 100644\n--- a/src/com/google/javascript/jscomp/MarkNoSideEffectCalls.java\n+++ b/src/com/google/javascript/jscomp/MarkNoSideEffectCalls.java\n@@ -193,7 +193,7 @@\n         }\n       }\n \n-      node.setIsNoSideEffectsCall();\n+      node.setSideEffectFlags(Node.NO_SIDE_EFFECTS);\n     }\n   }\n }\n",
      "operations": [
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "METHOD_INVOCATION_ARGUMENTS [6245,6265]"
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/jscomp/NodeUtil.java",
        "src/com/google/javascript/jscomp/NodeUtil.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "nodeTypeMayHaveSideEffects"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "callHasLocalResult",
            "nodeTypeMayHaveSideEffects"
          ],
          "num": 2
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "634"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "635",
            "636",
            "637",
            "638",
            "639",
            "640",
            "641",
            "642"
          ],
          "num": 8
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java\nindex 64f4c90..1677ed6 100644\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n@@ -632,6 +632,14 @@\n   }\n \n   /**\n+   * @return Whether the call has a local result.\n+   */\n+  static boolean callHasLocalResult(Node n) {\n+    Preconditions.checkState(n.getType() \u003d\u003d Token.CALL);\n+    return (n.getSideEffectFlags() \u0026 Node.FLAG_LOCAL_RESULTS) \u003e 0;\n+  }\n+\n+  /**\n    * Returns true if the current node\u0027s type implies side effects.\n    *\n    * This is a non-recursive version of the may have side effects\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [19275,19508]"
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/jscomp/PureFunctionIdentifier.java",
        "src/com/google/javascript/jscomp/PureFunctionIdentifier.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "markPureFunctionCalls",
            "visit",
            "mutatesGlobalState"
          ],
          "num": 3
        },
        {
          "qualified_names": [
            "removeFlag",
            "setThrows",
            "markPureFunctionCalls",
            "mutatesGlobalState",
            "setAllFlags",
            "setTaintsReturn",
            "valueOf",
            "visit",
            "clearSideEffectFlags",
            "setMutatesArguments",
            "setReturnsTainted",
            "setMutatesGlobalState",
            "clearAllFlags",
            "setMutatesThis",
            "areAllFlagsSet"
          ],
          "num": 15
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "300",
            "301",
            "302",
            "308",
            "309",
            "310",
            "311",
            "312",
            "313",
            "323",
            "328",
            "332",
            "333",
            "334",
            "374",
            "423",
            "805",
            "897"
          ],
          "num": 18
        },
        {
          "qualified_names": [
            "300",
            "301",
            "302",
            "303",
            "304",
            "305",
            "306",
            "307",
            "312",
            "313",
            "314",
            "315",
            "316",
            "318",
            "319",
            "320",
            "321",
            "322",
            "323",
            "324",
            "325",
            "326",
            "327",
            "328",
            "329",
            "330",
            "331",
            "332",
            "342",
            "347",
            "351",
            "352",
            "353",
            "354",
            "355",
            "356",
            "357",
            "358",
            "359",
            "360",
            "361",
            "362",
            "363",
            "364",
            "365",
            "366",
            "367",
            "368",
            "369",
            "370",
            "371",
            "372",
            "373",
            "374",
            "375",
            "376",
            "377",
            "378",
            "379",
            "380",
            "381",
            "382",
            "383",
            "384",
            "385",
            "386",
            "387",
            "388",
            "389",
            "390",
            "391",
            "392",
            "393",
            "394",
            "395",
            "396",
            "397",
            "398",
            "399",
            "400",
            "401",
            "402",
            "403",
            "404",
            "405",
            "406",
            "407",
            "408",
            "448",
            "449",
            "499",
            "500",
            "501",
            "502",
            "503",
            "504",
            "887",
            "980",
            "981",
            "982",
            "983",
            "984",
            "985",
            "986",
            "987",
            "988"
          ],
          "num": 106
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/jscomp/PureFunctionIdentifier.java b/src/com/google/javascript/jscomp/PureFunctionIdentifier.java\nindex 0d0dfba..cc081b5 100644\n--- a/src/com/google/javascript/jscomp/PureFunctionIdentifier.java\n+++ b/src/com/google/javascript/jscomp/PureFunctionIdentifier.java\n@@ -297,20 +297,39 @@\n       Node name \u003d callNode.getFirstChild();\n       Collection\u003cDefinition\u003e defs \u003d\n           getCallableDefinitions(definitionProvider, name);\n-      boolean hasSideEffects \u003d true;\n-      if (defs !\u003d null) {\n-        hasSideEffects \u003d false;\n+      // Default to side effects, non-local results\n+      SideEffectFlags flags \u003d new SideEffectFlags();\n+      if (defs \u003d\u003d null) {\n+        flags.setMutatesGlobalState();\n+        flags.setThrows();\n+        flags.setReturnsTainted();\n+      } else {\n+        flags.clearAllFlags();\n         for (Definition def : defs) {\n           FunctionInformation functionInfo \u003d\n               functionSideEffectMap.get(def.getRValue());\n           Preconditions.checkNotNull(functionInfo);\n+          // TODO(johnlenz): set the arguments separately from the\n+          // global state flag.\n+          if (functionInfo.mutatesGlobalState()) {\n+            flags.setMutatesGlobalState();\n+          }\n \n-          if ((NodeUtil.isCall(callNode)\n-                  \u0026\u0026 functionInfo.mayHaveSideEffects())\n-               || (NodeUtil.isNew(callNode)\n-                      \u0026\u0026 (functionInfo.mutatesGlobalState()\n-                          || functionInfo.functionThrows()))) {\n-            hasSideEffects \u003d true;\n+          if (functionInfo.functionThrows) {\n+            flags.setThrows();\n+          }\n+\n+          if (!NodeUtil.isNew(callNode)) {\n+            if (functionInfo.taintsThis) {\n+              flags.setMutatesThis();\n+            }\n+          }\n+\n+          if (functionInfo.taintsReturn) {\n+            flags.setReturnsTainted();\n+          }\n+\n+          if (flags.areAllFlagsSet()) {\n             break;\n           }\n         }\n@@ -320,18 +339,73 @@\n       if (NodeUtil.isCall(callNode)) {\n         Preconditions.checkState(compiler !\u003d null);\n         if (!NodeUtil.functionCallHasSideEffects(callNode, compiler)) {\n-          hasSideEffects \u003d false;\n+          flags.clearSideEffectFlags();\n         }\n       } else if (NodeUtil.isNew(callNode)) {\n         // Handle known cases now (Object, Date, RegExp, etc)\n         if (!NodeUtil.constructorCallHasSideEffects(callNode)) {\n-          hasSideEffects \u003d false;\n+          flags.clearSideEffectFlags();\n         }\n       }\n \n-      if (!hasSideEffects) {\n-        callNode.setIsNoSideEffectsCall();\n-      }\n+      callNode.setSideEffectFlags(flags.valueOf());\n+    }\n+  }\n+\n+  private static class SideEffectFlags {\n+    private int value \u003d Node.SIDE_EFFECTS_ALL;\n+\n+    int valueOf() {\n+      return value;\n+    }\n+\n+    /** All side-effect occur and the returned results are non-local. */\n+    void setAllFlags() {\n+      value \u003d Node.SIDE_EFFECTS_ALL;\n+    }\n+\n+    /** No side-effects occur and the returned results are local. */\n+    void clearAllFlags() {\n+      value \u003d Node.NO_SIDE_EFFECTS | Node.FLAG_LOCAL_RESULTS;\n+    }\n+\n+    boolean areAllFlagsSet() {\n+      return value \u003d\u003d Node.SIDE_EFFECTS_ALL;\n+    }\n+\n+    /**\n+     * Preserve the return result flag, but clear the others:\n+     *   no global state change, no throws, no this change, no arguments change\n+     */\n+    void clearSideEffectFlags() {\n+      value |\u003d Node.NO_SIDE_EFFECTS;\n+    }\n+\n+    void setMutatesGlobalState() {\n+      // Modify global means everything must be assumed to be modified.\n+      removeFlag(Node.FLAG_GLOBAL_STATE_UNMODIFIED);\n+      removeFlag(Node.FLAG_ARGUMENTS_UNMODIFIED);\n+      removeFlag(Node.FLAG_THIS_UNMODIFIED);\n+    }\n+\n+    void setThrows() {\n+      removeFlag(Node.FLAG_NO_THROWS);\n+    }\n+\n+    void setMutatesThis() {\n+      removeFlag(Node.FLAG_THIS_UNMODIFIED);\n+    }\n+\n+    void setMutatesArguments() {\n+      removeFlag(Node.FLAG_ARGUMENTS_UNMODIFIED);\n+    }\n+\n+    void setReturnsTainted() {\n+      removeFlag(Node.FLAG_LOCAL_RESULTS);\n+    }\n+\n+    private void removeFlag(int flag) {\n+      value \u0026\u003d ~flag;\n     }\n   }\n \n@@ -371,7 +445,8 @@\n         return;\n       }\n \n-      if (!NodeUtil.nodeTypeMayHaveSideEffects(node)) {\n+      if (!NodeUtil.nodeTypeMayHaveSideEffects(node)\n+          \u0026\u0026 node.getType() !\u003d Token.RETURN) {\n         return;\n       }\n \n@@ -421,6 +496,12 @@\n             case Token.THROW:\n               visitThrow(sideEffectInfo);\n               break;\n+            case Token.RETURN:\n+              if (node.hasChildren()\n+                  \u0026\u0026 !isKnownLocalValue(node.getFirstChild())) {\n+                sideEffectInfo.setTaintsReturn();\n+              }\n+              break;\n             default:\n               throw new IllegalArgumentException(\n                   \"Unhandled side effect node type \" +\n@@ -803,6 +884,7 @@\n     private boolean taintsGlobalState \u003d false;\n     private boolean taintsThis \u003d false;\n     private boolean taintsUnknown \u003d false;\n+    private boolean taintsReturn \u003d false;\n \n     FunctionInformation(boolean extern) {\n       this.extern \u003d extern;\n@@ -895,6 +977,15 @@\n     }\n \n     /**\n+     * Marks the function as having non-local return result.\n+     */\n+    void setTaintsReturn() {\n+      taintsReturn \u003d true;\n+      checkInvariant();\n+    }\n+\n+\n+    /**\n      * Returns true if function mutates global state.\n      */\n     boolean mutatesGlobalState() {\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "TypeDeclaration [12536,13949]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldDeclaration [30654,30691]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [32507,32665]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [10939,10985]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "InfixExpression [15017,15103]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Block [11010,11120]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "INFIX_EXPRESSION_OPERATOR: \u0026\u0026 [15070,15072]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "InfixExpression [15073,15103]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [11136,11158]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "METHOD_INVOCATION_ARGUMENTS [12505,12520]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [11461,11556]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [11568,11645]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [11657,11796]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [11808,11891]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [12200,12229]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SwitchCase [17055,17073]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [17088,17241]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "BreakStatement [17256,17262]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodInvocation [11907,11929]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [12422,12451]"
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [10887,10917]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [10952,10975]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "InfixExpression [11184,11431]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [11447,11469]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [11737,11760]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [11953,11976]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "PrefixExpression [12006,12021]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Block [12023,12075]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "IfStatement [12002,12075]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/rhino/Node.java",
        "src/com/google/javascript/rhino/Node.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "setIsNoSideEffectsCall",
            "setQuotedString",
            "isNoSideEffectsCall",
            "isQuotedString",
            "propToString"
          ],
          "num": 5
        },
        {
          "qualified_names": [
            "isNoSideEffectsCall",
            "propToString",
            "areBitFlagsSet",
            "isQuotedString",
            "getSideEffectFlags",
            "setSideEffectFlags",
            "isLocalResultCall",
            "setQuotedString"
          ],
          "num": 8
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "135",
            "136",
            "223",
            "2066",
            "2070",
            "2076",
            "2084",
            "2088",
            "2095"
          ],
          "num": 9
        },
        {
          "qualified_names": [
            "135",
            "136",
            "223",
            "2065",
            "2066",
            "2067",
            "2068",
            "2069",
            "2070",
            "2071",
            "2072",
            "2073",
            "2074",
            "2075",
            "2076",
            "2077",
            "2078",
            "2079",
            "2080",
            "2081",
            "2082",
            "2083",
            "2084",
            "2085",
            "2086",
            "2087",
            "2088",
            "2089",
            "2091",
            "2095",
            "2101",
            "2102",
            "2103",
            "2104",
            "2105",
            "2106",
            "2107",
            "2108",
            "2116",
            "2120",
            "2121",
            "2122",
            "2123",
            "2124",
            "2125",
            "2126",
            "2127",
            "2128",
            "2129",
            "2130",
            "2131",
            "2132",
            "2133",
            "2134",
            "2135",
            "2136",
            "2143"
          ],
          "num": 57
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/rhino/Node.java b/src/com/google/javascript/rhino/Node.java\nindex 94870e8..3042113 100644\n--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -132,8 +132,8 @@\n       ORIGINALNAME_PROP  \u003d 39,    // The original name of the node, before\n                                   // renaming.\n       BRACELESS_TYPE     \u003d 40,    // The type syntax without curly braces.\n-      NO_SIDE_EFFECTS_CALL \u003d 41,  // Function or constructor call has no\n-                                  // side effects.\n+      SIDE_EFFECT_FLAGS  \u003d 41,    // Function or constructor call side effect\n+                                  // flags\n       // Coding convention props\n       IS_CONSTANT_NAME   \u003d 42,    // The variable or property is constant.\n       IS_OPTIONAL_PARAM  \u003d 43,    // The parameter is optional.\n@@ -220,7 +220,7 @@\n         case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n         case EMPTY_BLOCK: return \"empty_block\";\n         case ORIGINALNAME_PROP: return \"originalname\";\n-        case NO_SIDE_EFFECTS_CALL: return \"no_side_effects_call\";\n+        case SIDE_EFFECT_FLAGS: return \"side_effect_flags\";\n \n         case IS_CONSTANT_NAME:   return \"is_constant_name\";\n         case IS_OPTIONAL_PARAM:  return \"is_optional_param\";\n@@ -2062,18 +2062,50 @@\n     return getBooleanProp(EMPTY_BLOCK);\n   }\n \n+  // There are four values of interest:\n+  //   global state changes\n+  //   this state changes\n+  //   arguments state changes\n+  //   whether the call throws an exception\n+  //   locality of the result\n+  // We want a value of 0 to mean \"global state changes and\n+  // unknown locality of result\".\n+\n+  final public static int FLAG_GLOBAL_STATE_UNMODIFIED \u003d 1;\n+  final public static int FLAG_THIS_UNMODIFIED \u003d 2;\n+  final public static int FLAG_ARGUMENTS_UNMODIFIED \u003d 4;\n+  final public static int FLAG_NO_THROWS \u003d 8;\n+  final public static int FLAG_LOCAL_RESULTS \u003d 16;\n+\n+  final public static int SIDE_EFFECTS_FLAGS_MASK \u003d 31;\n+\n+  final public static int SIDE_EFFECTS_ALL \u003d 0;\n+  final public static int NO_SIDE_EFFECTS \u003d\n+    FLAG_GLOBAL_STATE_UNMODIFIED\n+    | FLAG_THIS_UNMODIFIED\n+    | FLAG_ARGUMENTS_UNMODIFIED\n+    | FLAG_NO_THROWS;\n+\n+\n   /**\n-   * Marks this function or constructor call node as having no side effects.\n+   * Marks this function or constructor call\u0027s side effect flags.\n    * This property is only meaningful for {@link Token#CALL} and\n    * {@link Token#NEW} nodes.\n    */\n-  public void setIsNoSideEffectsCall() {\n+  public void setSideEffectFlags(int flags) {\n     Preconditions.checkArgument(\n        getType() \u003d\u003d Token.CALL || getType() \u003d\u003d Token.NEW,\n        \"setIsNoSideEffectsCall only supports CALL and NEW nodes, got \" +\n        Token.name(getType()));\n \n-    putBooleanProp(NO_SIDE_EFFECTS_CALL, true);\n+    putIntProp(SIDE_EFFECT_FLAGS, flags);\n+  }\n+\n+  /**\n+   * Returns the side effects flags for this node.\n+   */\n+  public int getSideEffectFlags() {\n+    return getIntProp(SIDE_EFFECT_FLAGS);\n   }\n \n   /**\n@@ -2081,18 +2113,34 @@\n    * has no side effects.\n    */\n   public boolean isNoSideEffectsCall() {\n-    return getBooleanProp(NO_SIDE_EFFECTS_CALL);\n+    return areBitFlagsSet(getSideEffectFlags(), NO_SIDE_EFFECTS);\n   }\n \n   /**\n-   * This should only be called for STRING nodes created in object lits.\n+   * Returns true if this node is a function or constructor call that\n+   * returns a primitive or a local object (an object that has no other\n+   * references).\n+   */\n+  public boolean isLocalResultCall() {\n+    return areBitFlagsSet(getSideEffectFlags(), FLAG_LOCAL_RESULTS);\n+  }\n+\n+  /**\n+   * returns true if all the flags are set in value.\n+   */\n+  private boolean areBitFlagsSet(int value, int flags) {\n+    return (value \u0026 flags) \u003d\u003d flags;\n+  }\n+\n+  /**\n+   * This should only be called for STRING nodes children of OBJECTLIT.\n    */\n   public boolean isQuotedString() {\n     return false;\n   }\n \n   /**\n-   * This should only be called for STRING nodes created in object lits.\n+   * This should only be called for STRING nodes children of OBJECTLIT.\n    */\n   public void setQuotedString() {\n     Kit.codeBug();\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldDeclaration [63036,63093]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldDeclaration [63096,63145]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldDeclaration [63148,63202]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldDeclaration [63205,63248]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldDeclaration [63251,63299]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldDeclaration [63303,63356]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldDeclaration [63360,63405]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldDeclaration [63408,63563]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [63568,64026]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [64030,64172]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [64396,64677]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [64681,64841]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [64845,64926]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [64988,65069]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ReturnStatement [64327,64388]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [62751,63221]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ReturnStatement [63376,63420]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "Javadoc [63428,63510]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "Javadoc [63572,63654]",
          "to": ""
        }
      ]
    }
  ],
  "inducing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [
        "setMutatesThis",
        "setThrows",
        "callHasLocalResult",
        "removeFlag",
        "valueOf",
        "getSideEffectFlags",
        "setSideEffectFlags",
        "setTaintsReturn",
        "clearSideEffectFlags",
        "setAllFlags",
        "areAllFlagsSet",
        "isLocalResultCall",
        "setReturnsTainted",
        "setMutatesArguments",
        "clearAllFlags",
        "setMutatesGlobalState",
        "areBitFlagsSet"
      ],
      "num": 17
    },
    "delete_functions": {
      "qualified_names": [
        "setIsNoSideEffectsCall"
      ],
      "num": 1
    }
  },
  "trigger_tests": [
    {
      "test_class": "com.google.javascript.jscomp.CommandLineRunnerTest",
      "test_function": "testVersionFlag",
      "exception": "junit.framework.AssertionFailedError",
      "message": "expected:\u003c0\u003e but was:\u003c-1\u003e"
    },
    {
      "test_class": "com.google.javascript.jscomp.CommandLineRunnerTest",
      "test_function": "testIssue504",
      "exception": "junit.framework.AssertionFailedError",
      "message": ""
    },
    {
      "test_class": "com.google.javascript.jscomp.NodeUtilTest",
      "test_function": "testGetBooleanValue",
      "exception": "junit.framework.AssertionFailedError",
      "message": "expected:\u003cunknown\u003e but was:\u003ctrue\u003e"
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/jscomp/NodeUtil.java",
        "src/com/google/javascript/jscomp/NodeUtil.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "callHasLocalResult",
            "getBooleanValue",
            "getExpressionBooleanValue",
            "nodeTypeMayHaveSideEffects"
          ],
          "num": 4
        },
        {
          "qualified_names": [
            "functionCallHasSideEffects",
            "getExpressionBooleanValue",
            "getBooleanValue"
          ],
          "num": 3
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "96",
            "116",
            "635",
            "636",
            "637",
            "638",
            "639",
            "640",
            "641",
            "642"
          ],
          "num": 10
        },
        {
          "qualified_names": [
            "97",
            "98",
            "120",
            "121",
            "122",
            "123",
            "124",
            "125",
            "627"
          ],
          "num": 9
        }
      ],
      "diff": "diff -u -r data/changesInfo//Closure_60/properties/modified_classes/inducing/src/com/google/javascript/jscomp/NodeUtil.java data/changesInfo//Closure_60/cleaned/fixing/src/com/google/javascript/jscomp/NodeUtil.java\n--- data/changesInfo//Closure_60/properties/modified_classes/inducing/src/com/google/javascript/jscomp/NodeUtil.java\t2023-08-25 13:12:38.914605675 +0800\n+++ data/changesInfo//Closure_60/cleaned/fixing/src/com/google/javascript/jscomp/NodeUtil.java\t2023-06-27 15:48:02.937625245 +0800\n@@ -94,6 +94,8 @@\n           return TernaryValue.UNKNOWN;\n         }\n       }\n+      case Token.VOID:\n+        return TernaryValue.UNKNOWN;\n       default:\n         return getBooleanValue(n);\n     }\n@@ -113,9 +115,14 @@\n \n       case Token.NULL:\n       case Token.FALSE:\n-      case Token.VOID:\n         return TernaryValue.FALSE;\n \n+      case Token.VOID:\n+        if (!mayHaveSideEffects(n.getFirstChild())) {\n+          return TernaryValue.FALSE;\n+        }\n+        break;\n+\n       case Token.NAME:\n         String name \u003d n.getString();\n         if (\"undefined\".equals(name)\n@@ -632,14 +639,6 @@\n   }\n \n   /**\n-   * @return Whether the call has a local result.\n-   */\n-  static boolean callHasLocalResult(Node n) {\n-    Preconditions.checkState(n.getType() \u003d\u003d Token.CALL);\n-    return (n.getSideEffectFlags() \u0026 Node.FLAG_LOCAL_RESULTS) \u003e 0;\n-  }\n-\n-  /**\n    * Returns true if the current node\u0027s type implies side effects.\n    *\n    * This is a non-recursive version of the may have side effects\n",
      "operations": [
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SwitchCase [3345,3361]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ReturnStatement [3370,3398]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [3997,4089]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "BreakStatement [4098,4104]"
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [19275,19508]",
          "to": ""
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [
        "functionCallHasSideEffects"
      ],
      "num": 1
    },
    "delete_functions": {
      "qualified_names": [
        "callHasLocalResult",
        "nodeTypeMayHaveSideEffects"
      ],
      "num": 2
    }
  }
}