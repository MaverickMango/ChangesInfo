diff --git a/src/com/google/javascript/jscomp/MarkNoSideEffectCalls.java b/src/com/google/javascript/jscomp/MarkNoSideEffectCalls.java
index 60cfd8e..fdd21e6 100644
--- a/src/com/google/javascript/jscomp/MarkNoSideEffectCalls.java
+++ b/src/com/google/javascript/jscomp/MarkNoSideEffectCalls.java
@@ -193,7 +193,7 @@
         }
       }
 
-      node.setIsNoSideEffectsCall();
+      node.setSideEffectFlags(Node.NO_SIDE_EFFECTS);
     }
   }
 }
diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java
index 64f4c90..1677ed6 100644
--- a/src/com/google/javascript/jscomp/NodeUtil.java
+++ b/src/com/google/javascript/jscomp/NodeUtil.java
@@ -632,6 +632,14 @@
   }
 
   /**
+   * @return Whether the call has a local result.
+   */
+  static boolean callHasLocalResult(Node n) {
+    Preconditions.checkState(n.getType() == Token.CALL);
+    return (n.getSideEffectFlags() & Node.FLAG_LOCAL_RESULTS) > 0;
+  }
+
+  /**
    * Returns true if the current node's type implies side effects.
    *
    * This is a non-recursive version of the may have side effects
diff --git a/src/com/google/javascript/jscomp/PureFunctionIdentifier.java b/src/com/google/javascript/jscomp/PureFunctionIdentifier.java
index 0d0dfba..cc081b5 100644
--- a/src/com/google/javascript/jscomp/PureFunctionIdentifier.java
+++ b/src/com/google/javascript/jscomp/PureFunctionIdentifier.java
@@ -297,20 +297,39 @@
       Node name = callNode.getFirstChild();
       Collection<Definition> defs =
           getCallableDefinitions(definitionProvider, name);
-      boolean hasSideEffects = true;
-      if (defs != null) {
-        hasSideEffects = false;
+      // Default to side effects, non-local results
+      SideEffectFlags flags = new SideEffectFlags();
+      if (defs == null) {
+        flags.setMutatesGlobalState();
+        flags.setThrows();
+        flags.setReturnsTainted();
+      } else {
+        flags.clearAllFlags();
         for (Definition def : defs) {
           FunctionInformation functionInfo =
               functionSideEffectMap.get(def.getRValue());
           Preconditions.checkNotNull(functionInfo);
+          // TODO(johnlenz): set the arguments separately from the
+          // global state flag.
+          if (functionInfo.mutatesGlobalState()) {
+            flags.setMutatesGlobalState();
+          }
 
-          if ((NodeUtil.isCall(callNode)
-                  && functionInfo.mayHaveSideEffects())
-               || (NodeUtil.isNew(callNode)
-                      && (functionInfo.mutatesGlobalState()
-                          || functionInfo.functionThrows()))) {
-            hasSideEffects = true;
+          if (functionInfo.functionThrows) {
+            flags.setThrows();
+          }
+
+          if (!NodeUtil.isNew(callNode)) {
+            if (functionInfo.taintsThis) {
+              flags.setMutatesThis();
+            }
+          }
+
+          if (functionInfo.taintsReturn) {
+            flags.setReturnsTainted();
+          }
+
+          if (flags.areAllFlagsSet()) {
             break;
           }
         }
@@ -320,18 +339,73 @@
       if (NodeUtil.isCall(callNode)) {
         Preconditions.checkState(compiler != null);
         if (!NodeUtil.functionCallHasSideEffects(callNode, compiler)) {
-          hasSideEffects = false;
+          flags.clearSideEffectFlags();
         }
       } else if (NodeUtil.isNew(callNode)) {
         // Handle known cases now (Object, Date, RegExp, etc)
         if (!NodeUtil.constructorCallHasSideEffects(callNode)) {
-          hasSideEffects = false;
+          flags.clearSideEffectFlags();
         }
       }
 
-      if (!hasSideEffects) {
-        callNode.setIsNoSideEffectsCall();
-      }
+      callNode.setSideEffectFlags(flags.valueOf());
+    }
+  }
+
+  private static class SideEffectFlags {
+    private int value = Node.SIDE_EFFECTS_ALL;
+
+    int valueOf() {
+      return value;
+    }
+
+    /** All side-effect occur and the returned results are non-local. */
+    void setAllFlags() {
+      value = Node.SIDE_EFFECTS_ALL;
+    }
+
+    /** No side-effects occur and the returned results are local. */
+    void clearAllFlags() {
+      value = Node.NO_SIDE_EFFECTS | Node.FLAG_LOCAL_RESULTS;
+    }
+
+    boolean areAllFlagsSet() {
+      return value == Node.SIDE_EFFECTS_ALL;
+    }
+
+    /**
+     * Preserve the return result flag, but clear the others:
+     *   no global state change, no throws, no this change, no arguments change
+     */
+    void clearSideEffectFlags() {
+      value |= Node.NO_SIDE_EFFECTS;
+    }
+
+    void setMutatesGlobalState() {
+      // Modify global means everything must be assumed to be modified.
+      removeFlag(Node.FLAG_GLOBAL_STATE_UNMODIFIED);
+      removeFlag(Node.FLAG_ARGUMENTS_UNMODIFIED);
+      removeFlag(Node.FLAG_THIS_UNMODIFIED);
+    }
+
+    void setThrows() {
+      removeFlag(Node.FLAG_NO_THROWS);
+    }
+
+    void setMutatesThis() {
+      removeFlag(Node.FLAG_THIS_UNMODIFIED);
+    }
+
+    void setMutatesArguments() {
+      removeFlag(Node.FLAG_ARGUMENTS_UNMODIFIED);
+    }
+
+    void setReturnsTainted() {
+      removeFlag(Node.FLAG_LOCAL_RESULTS);
+    }
+
+    private void removeFlag(int flag) {
+      value &= ~flag;
     }
   }
 
@@ -371,7 +445,8 @@
         return;
       }
 
-      if (!NodeUtil.nodeTypeMayHaveSideEffects(node)) {
+      if (!NodeUtil.nodeTypeMayHaveSideEffects(node)
+          && node.getType() != Token.RETURN) {
         return;
       }
 
@@ -421,6 +496,12 @@
             case Token.THROW:
               visitThrow(sideEffectInfo);
               break;
+            case Token.RETURN:
+              if (node.hasChildren()
+                  && !isKnownLocalValue(node.getFirstChild())) {
+                sideEffectInfo.setTaintsReturn();
+              }
+              break;
             default:
               throw new IllegalArgumentException(
                   "Unhandled side effect node type " +
@@ -803,6 +884,7 @@
     private boolean taintsGlobalState = false;
     private boolean taintsThis = false;
     private boolean taintsUnknown = false;
+    private boolean taintsReturn = false;
 
     FunctionInformation(boolean extern) {
       this.extern = extern;
@@ -895,6 +977,15 @@
     }
 
     /**
+     * Marks the function as having non-local return result.
+     */
+    void setTaintsReturn() {
+      taintsReturn = true;
+      checkInvariant();
+    }
+
+
+    /**
      * Returns true if function mutates global state.
      */
     boolean mutatesGlobalState() {
diff --git a/src/com/google/javascript/rhino/Node.java b/src/com/google/javascript/rhino/Node.java
index 94870e8..3042113 100644
--- a/src/com/google/javascript/rhino/Node.java
+++ b/src/com/google/javascript/rhino/Node.java
@@ -132,8 +132,8 @@
       ORIGINALNAME_PROP  = 39,    // The original name of the node, before
                                   // renaming.
       BRACELESS_TYPE     = 40,    // The type syntax without curly braces.
-      NO_SIDE_EFFECTS_CALL = 41,  // Function or constructor call has no
-                                  // side effects.
+      SIDE_EFFECT_FLAGS  = 41,    // Function or constructor call side effect
+                                  // flags
       // Coding convention props
       IS_CONSTANT_NAME   = 42,    // The variable or property is constant.
       IS_OPTIONAL_PARAM  = 43,    // The parameter is optional.
@@ -220,7 +220,7 @@
         case SYNTHETIC_BLOCK_PROP: return "synthetic";
         case EMPTY_BLOCK: return "empty_block";
         case ORIGINALNAME_PROP: return "originalname";
-        case NO_SIDE_EFFECTS_CALL: return "no_side_effects_call";
+        case SIDE_EFFECT_FLAGS: return "side_effect_flags";
 
         case IS_CONSTANT_NAME:   return "is_constant_name";
         case IS_OPTIONAL_PARAM:  return "is_optional_param";
@@ -2062,18 +2062,50 @@
     return getBooleanProp(EMPTY_BLOCK);
   }
 
+  // There are four values of interest:
+  //   global state changes
+  //   this state changes
+  //   arguments state changes
+  //   whether the call throws an exception
+  //   locality of the result
+  // We want a value of 0 to mean "global state changes and
+  // unknown locality of result".
+
+  final public static int FLAG_GLOBAL_STATE_UNMODIFIED = 1;
+  final public static int FLAG_THIS_UNMODIFIED = 2;
+  final public static int FLAG_ARGUMENTS_UNMODIFIED = 4;
+  final public static int FLAG_NO_THROWS = 8;
+  final public static int FLAG_LOCAL_RESULTS = 16;
+
+  final public static int SIDE_EFFECTS_FLAGS_MASK = 31;
+
+  final public static int SIDE_EFFECTS_ALL = 0;
+  final public static int NO_SIDE_EFFECTS =
+    FLAG_GLOBAL_STATE_UNMODIFIED
+    | FLAG_THIS_UNMODIFIED
+    | FLAG_ARGUMENTS_UNMODIFIED
+    | FLAG_NO_THROWS;
+
+
   /**
-   * Marks this function or constructor call node as having no side effects.
+   * Marks this function or constructor call's side effect flags.
    * This property is only meaningful for {@link Token#CALL} and
    * {@link Token#NEW} nodes.
    */
-  public void setIsNoSideEffectsCall() {
+  public void setSideEffectFlags(int flags) {
     Preconditions.checkArgument(
        getType() == Token.CALL || getType() == Token.NEW,
        "setIsNoSideEffectsCall only supports CALL and NEW nodes, got " +
        Token.name(getType()));
 
-    putBooleanProp(NO_SIDE_EFFECTS_CALL, true);
+    putIntProp(SIDE_EFFECT_FLAGS, flags);
+  }
+
+  /**
+   * Returns the side effects flags for this node.
+   */
+  public int getSideEffectFlags() {
+    return getIntProp(SIDE_EFFECT_FLAGS);
   }
 
   /**
@@ -2081,18 +2113,34 @@
    * has no side effects.
    */
   public boolean isNoSideEffectsCall() {
-    return getBooleanProp(NO_SIDE_EFFECTS_CALL);
+    return areBitFlagsSet(getSideEffectFlags(), NO_SIDE_EFFECTS);
   }
 
   /**
-   * This should only be called for STRING nodes created in object lits.
+   * Returns true if this node is a function or constructor call that
+   * returns a primitive or a local object (an object that has no other
+   * references).
+   */
+  public boolean isLocalResultCall() {
+    return areBitFlagsSet(getSideEffectFlags(), FLAG_LOCAL_RESULTS);
+  }
+
+  /**
+   * returns true if all the flags are set in value.
+   */
+  private boolean areBitFlagsSet(int value, int flags) {
+    return (value & flags) == flags;
+  }
+
+  /**
+   * This should only be called for STRING nodes children of OBJECTLIT.
    */
   public boolean isQuotedString() {
     return false;
   }
 
   /**
-   * This should only be called for STRING nodes created in object lits.
+   * This should only be called for STRING nodes children of OBJECTLIT.
    */
   public void setQuotedString() {
     Kit.codeBug();
diff --git a/test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java b/test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java
index 7aa8a44..e91f522 100644
--- a/test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java
+++ b/test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java
@@ -33,6 +33,7 @@
  */
 public class PureFunctionIdentifierTest extends CompilerTestCase {
   List<String> noSideEffectCalls = Lists.newArrayList();
+  List<String> localResultCalls = Lists.newArrayList();
 
   boolean regExpHaveSideEffects = true;
 
@@ -159,6 +160,7 @@
   protected void tearDown() throws Exception {
     super.tearDown();
     noSideEffectCalls.clear();
+    localResultCalls.clear();
     boolean regExpHaveSideEffects = true;
   }
 
@@ -415,6 +417,58 @@
         prefix + "return externObj.foo" + suffix, expected);
   }
 
+  public void testResultLocalitySimple() throws Exception {
+    String prefix = "var g; function f(){";
+    String suffix = "} f()";
+    List<String> expected = ImmutableList.of("f");
+    List<String> notExpected = ImmutableList.of();
+
+    // no return
+    checkLocalityOfMarkedCalls(
+        prefix + "" + suffix, expected);
+    // simple return expressions
+    checkLocalityOfMarkedCalls(
+        prefix + "return 1" + suffix, expected);
+    checkLocalityOfMarkedCalls(
+        prefix + "return 1 + 2" + suffix, expected);
+
+    // global result
+    checkLocalityOfMarkedCalls(
+        prefix + "return g" + suffix, notExpected);
+
+    // multiple returns
+    checkLocalityOfMarkedCalls(
+        prefix + "return 1; return 2" + suffix, expected);
+    checkLocalityOfMarkedCalls(
+        prefix + "return 1; return g" + suffix, notExpected);
+
+
+    // local var, not yet.
+    checkLocalityOfMarkedCalls(
+        prefix + "var a = 1; return a" + suffix, notExpected);
+
+    // mutate local var, not yet.
+    checkLocalityOfMarkedCalls(
+        prefix + "var a = 1; a = 2; return a" + suffix, notExpected);
+    checkLocalityOfMarkedCalls(
+        prefix + "var a = 1; a = 2; return a + 1" + suffix, expected);
+
+    // read from obj literal
+    checkLocalityOfMarkedCalls(
+        prefix + "return {foo : 1}.foo" + suffix,
+        notExpected);
+    checkLocalityOfMarkedCalls(
+        prefix + "var a = {foo : 1}; return a.foo" + suffix,
+        notExpected);
+
+    // read from extern
+    checkLocalityOfMarkedCalls(
+        prefix + "return externObj" + suffix, notExpected);
+    checkLocalityOfMarkedCalls(
+        "function inner(x) { x.foo = 3; }" /* to suppress missing property */ +
+        prefix + "return externObj.foo" + suffix, notExpected);
+  }
+
   public void testExternCalls() throws Exception {
     String prefix = "function f(){";
     String suffix = "} f()";
@@ -1077,6 +1131,12 @@
     noSideEffectCalls.clear();
   }
 
+  void checkLocalityOfMarkedCalls(String source, List<String> expected) {
+    testSame(source);
+    assertEquals(expected, localResultCalls);
+    localResultCalls.clear();
+  }
+
   @Override
   protected CompilerPass getProcessor(Compiler compiler) {
     return new NoSideEffectCallEnumerator(compiler);
@@ -1119,6 +1179,9 @@
         if (!NodeUtil.functionCallHasSideEffects(n)) {
           noSideEffectCalls.add(generateNameString(n.getFirstChild()));
         }
+        if (NodeUtil.callHasLocalResult(n)) {
+          localResultCalls.add(generateNameString(n.getFirstChild()));
+        }
       }
     }
 
