Only in data/changesInfo//Math_63/properties/modified_classes/inducing/src: java
diff -u -r data/changesInfo//Math_63/properties/modified_classes/inducing/src/test/org/apache/commons/math/util/MathUtilsTest.java data/changesInfo//Math_63/cleaned/inducing/src/test/org/apache/commons/math/util/MathUtilsTest.java
--- data/changesInfo//Math_63/properties/modified_classes/inducing/src/test/org/apache/commons/math/util/MathUtilsTest.java	2023-12-27 22:57:53.661640998 -0800
+++ data/changesInfo//Math_63/cleaned/inducing/src/test/org/apache/commons/math/util/MathUtilsTest.java	2023-12-25 04:58:54.351490142 -0800
@@ -210,6 +210,7 @@
     }
 
     public void testArrayEquals() {
+        
         assertFalse(MathUtils.equals(new double[] { 1d }, null));
         assertFalse(MathUtils.equals(null, new double[] { 1d }));
         assertTrue(MathUtils.equals((double[]) null, (double[]) null));
@@ -217,17 +218,18 @@
         assertFalse(MathUtils.equals(new double[] { 1d }, new double[0]));
         assertTrue(MathUtils.equals(new double[] { 1d }, new double[] { 1d }));
         assertTrue(MathUtils.equals(new double[] {
-                                      Double.NaN, Double.POSITIVE_INFINITY,
-                                      Double.NEGATIVE_INFINITY, 1d, 0d
-                                    }, new double[] {
-                                      Double.NaN, Double.POSITIVE_INFINITY,
-                                      Double.NEGATIVE_INFINITY, 1d, 0d
-                                    }));
+                                     Double.POSITIVE_INFINITY,
+                                     Double.NEGATIVE_INFINITY, 1d, 0d
+                                   }, new double[] {
+                                     Double.POSITIVE_INFINITY,
+                                     Double.NEGATIVE_INFINITY, 1d, 0d
+                                   }));
+        assertFalse(MathUtils.equals(new double[] { Double.NaN },
+                                     new double[] { Double.NaN }));
         assertFalse(MathUtils.equals(new double[] { Double.POSITIVE_INFINITY },
-                                     new double[] { Double.NEGATIVE_INFINITY }));
-        assertFalse(MathUtils.equals(new double[] { 1d },
-                                     new double[] { MathUtils.nextAfter(1d, 2d) }));
-
+                                    new double[] { Double.NEGATIVE_INFINITY }));
+        //assertFalse(MathUtils.equals(new double[] { 1d },
+        //                             new double[] { FastMath.nextAfter(FastMath.nextAfter(1d, 2d), 2d) }));
     }
 
     public void testFactorial() {
@@ -813,4 +815,6 @@
         }
 
     }
-}
\ No newline at end of file
+
+
+}
