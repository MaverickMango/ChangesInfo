===
move-tree
---
FieldDeclaration [1004,1075]
    Javadoc [1004,1030]
        TagElement [1008,1028]
            TextElement: 1.0 cast as a byte.  [1008,1028]
    Modifier: private [1035,1042]
    Modifier: static [1043,1049]
    Modifier: final [1050,1055]
    PrimitiveType: byte [1056,1060]
    VariableDeclarationFragment [1061,1074]
        SimpleName: PB [1061,1063]
        CastExpression [1066,1074]
            PrimitiveType: byte [1067,1071]
            NumberLiteral: 1 [1073,1074]
to
TypeDeclaration [691,22224]
at 9
===
move-tree
---
FieldDeclaration [840,911]
    Javadoc [840,866]
        TagElement [844,864]
            TextElement: 0.0 cast as a byte.  [844,864]
    Modifier: private [871,878]
    Modifier: static [879,885]
    Modifier: final [886,891]
    PrimitiveType: byte [892,896]
    VariableDeclarationFragment [897,910]
        SimpleName: ZB [897,899]
        CastExpression [902,910]
            PrimitiveType: byte [903,907]
            NumberLiteral: 0 [909,910]
to
TypeDeclaration [691,22224]
at 10
===
move-tree
---
FieldDeclaration [1085,1159]
    Javadoc [1085,1112]
        TagElement [1089,1110]
            TextElement: 0.0 cast as a short.  [1089,1110]
    Modifier: private [1117,1124]
    Modifier: static [1125,1131]
    Modifier: final [1132,1137]
    PrimitiveType: short [1138,1143]
    VariableDeclarationFragment [1144,1158]
        SimpleName: ZS [1144,1146]
        CastExpression [1149,1158]
            PrimitiveType: short [1150,1155]
            NumberLiteral: 0 [1157,1158]
to
TypeDeclaration [691,22224]
at 10
===
move-tree
---
MethodDeclaration [21137,21665]
    Javadoc [21137,21404]
        TagElement [21149,21189]
            TextElement: Add two integers, checking for overflow. [21149,21189]
        TagElement [21205,21223]
            SimpleName: x [21212,21213]
            TextElement:  an addend [21213,21223]
        TagElement [21231,21249]
            SimpleName: y [21238,21239]
            TextElement:  an addend [21239,21249]
        TagElement [21257,21289]
            TextElement:  the sum <code>x+y</code> [21264,21289]
        TagElement [21297,21378]
            SimpleName: ArithmeticException [21305,21324]
            TextElement:  if the result can not be represented as [21324,21364]
            TextElement: an int [21372,21378]
        TagElement [21386,21396]
            TextElement:  1.1 [21392,21396]
    Modifier: public [21409,21415]
    Modifier: static [21416,21422]
    PrimitiveType: int [21423,21426]
    SimpleName: addAndCheck [21427,21438]
    SingleVariableDeclaration [21439,21444]
        PrimitiveType: int [21439,21442]
        SimpleName: x [21443,21444]
    SingleVariableDeclaration [21446,21451]
        PrimitiveType: int [21446,21449]
        SimpleName: y [21450,21451]
    Block [21453,21665]
        VariableDeclarationStatement [21463,21488]
            PrimitiveType: long [21463,21467]
            VariableDeclarationFragment [21468,21487]
                SimpleName: s [21468,21469]
                InfixExpression [21472,21487]
                    CastExpression [21472,21479]
                        PrimitiveType: long [21473,21477]
                        SimpleName: x [21478,21479]
                    INFIX_EXPRESSION_OPERATOR: + [21479,21480]
                    CastExpression [21480,21487]
                        PrimitiveType: long [21481,21485]
                        SimpleName: y [21486,21487]
        IfStatement [21497,21636]
            InfixExpression [21501,21563]
                InfixExpression [21501,21522]
                    SimpleName: s [21501,21502]
                    INFIX_EXPRESSION_OPERATOR: < [21503,21504]
                    QualifiedName: Integer.MIN_VALUE [21505,21522]
                INFIX_EXPRESSION_OPERATOR: || [21523,21525]
                InfixExpression [21542,21563]
                    SimpleName: s [21542,21543]
                    INFIX_EXPRESSION_OPERATOR: > [21544,21545]
                    QualifiedName: Integer.MAX_VALUE [21546,21563]
            Block [21565,21636]
                ThrowStatement [21579,21626]
                    ClassInstanceCreation [21585,21625]
                        SimpleType [21589,21608]
                            SimpleName: ArithmeticException [21589,21608]
                        StringLiteral: "overflow: add" [21609,21624]
        ReturnStatement [21645,21659]
            CastExpression [21652,21658]
                PrimitiveType: int [21653,21656]
                SimpleName: s [21657,21658]
to
TypeDeclaration [691,22224]
at 12
===
move-tree
---
MethodDeclaration [16688,17028]
    Javadoc [16688,16929]
        TagElement [16699,16807]
            TextElement: Returns the <a href="http://mathworld.wolfram.com/HyperbolicCosine.html"> [16699,16772]
            TextElement: hyperbolic cosine</a> of x. [16780,16807]
        TagElement [16822,16883]
            SimpleName: x [16829,16830]
            TextElement:  double value for which to find the hyperbolic cosine [16830,16883]
        TagElement [16891,16921]
            TextElement:  hyperbolic cosine of x [16898,16921]
    Modifier: public [16934,16940]
    Modifier: static [16941,16947]
    PrimitiveType: double [16948,16954]
    SimpleName: cosh [16955,16959]
    SingleVariableDeclaration [16960,16968]
        PrimitiveType: double [16960,16966]
        SimpleName: x [16967,16968]
    Block [16970,17028]
        ReturnStatement [16980,17022]
            InfixExpression [16987,17021]
                ParenthesizedExpression [16987,17015]
                    InfixExpression [16988,17014]
                        MethodInvocation [16988,16999]
                            METHOD_INVOCATION_RECEIVER [16988,16992]
                                SimpleName: Math [16988,16992]
                            SimpleName: exp [16993,16996]
                            METHOD_INVOCATION_ARGUMENTS [16997,16998]
                                SimpleName: x [16997,16998]
                        INFIX_EXPRESSION_OPERATOR: + [17000,17001]
                        MethodInvocation [17002,17014]
                            METHOD_INVOCATION_RECEIVER [17002,17006]
                                SimpleName: Math [17002,17006]
                            SimpleName: exp [17007,17010]
                            METHOD_INVOCATION_ARGUMENTS [17011,17013]
                                PrefixExpression [17011,17013]
                                    PREFIX_EXPRESSION_OPERATOR: - [17011,17012]
                                    SimpleName: x [17012,17013]
                INFIX_EXPRESSION_OPERATOR: / [17016,17017]
                NumberLiteral: 2.0 [17018,17021]
to
TypeDeclaration [691,22224]
at 32
===
move-tree
---
MethodDeclaration [17699,18051]
    Javadoc [17699,17925]
        TagElement [17710,17793]
            TextElement: Returns true iff both arguments are NaN or [17710,17752]
            TextElement: neither is NaN and they are equal [17760,17793]
        TagElement [17808,17828]
            SimpleName: x [17815,17816]
            TextElement:  first value [17816,17828]
        TagElement [17836,17857]
            SimpleName: y [17843,17844]
            TextElement:  second value [17844,17857]
        TagElement [17865,17917]
            TextElement:  true if the values are equal or both are NaN [17872,17917]
    Modifier: public [17930,17936]
    Modifier: static [17937,17943]
    PrimitiveType: boolean [17944,17951]
    SimpleName: equals [17952,17958]
    SingleVariableDeclaration [17959,17967]
        PrimitiveType: double [17959,17965]
        SimpleName: x [17966,17967]
    SingleVariableDeclaration [17969,17977]
        PrimitiveType: double [17969,17975]
        SimpleName: y [17976,17977]
    Block [17979,18051]
        ReturnStatement [17989,18045]
            ParenthesizedExpression [17996,18044]
                InfixExpression [17997,18043]
                    ParenthesizedExpression [17997,18033]
                        InfixExpression [17998,18032]
                            MethodInvocation [17998,18013]
                                METHOD_INVOCATION_RECEIVER [17998,18004]
                                    SimpleName: Double [17998,18004]
                                SimpleName: isNaN [18005,18010]
                                METHOD_INVOCATION_ARGUMENTS [18011,18012]
                                    SimpleName: x [18011,18012]
                            INFIX_EXPRESSION_OPERATOR: && [18014,18016]
                            MethodInvocation [18017,18032]
                                METHOD_INVOCATION_RECEIVER [18017,18023]
                                    SimpleName: Double [18017,18023]
                                SimpleName: isNaN [18024,18029]
                                METHOD_INVOCATION_ARGUMENTS [18030,18031]
                                    SimpleName: y [18030,18031]
                    INFIX_EXPRESSION_OPERATOR: || [18034,18036]
                    InfixExpression [18037,18043]
                        SimpleName: x [18037,18038]
                        INFIX_EXPRESSION_OPERATOR: == [18039,18041]
                        SimpleName: y [18042,18043]
to
TypeDeclaration [691,22224]
at 33
===
move-tree
---
MethodDeclaration [18493,20554]
    Javadoc [18493,18910]
        TagElement [18504,18752]
            TextElement: <p>Gets the greatest common divisor of the absolute value of [18504,18564]
            TextElement: two numbers, using the "binary gcd" method which avoids [18572,18627]
            TextElement: division and modulo operations.  See Knuth 4.5.2 algorithm B. [18635,18696]
            TextElement: This algorithm is due to Josef Stein (1961).</p> [18704,18752]
        TagElement [18767,18794]
            SimpleName: u [18774,18775]
            TextElement:   a non-zero number [18775,18794]
        TagElement [18802,18829]
            SimpleName: v [18809,18810]
            TextElement:   a non-zero number [18810,18829]
        TagElement [18837,18884]
            TextElement:  the greatest common divisor, never zero [18844,18884]
        TagElement [18892,18902]
            TextElement:  1.1 [18898,18902]
    Modifier: public [18915,18921]
    Modifier: static [18922,18928]
    PrimitiveType: int [18929,18932]
    SimpleName: gcd [18933,18936]
    SingleVariableDeclaration [18937,18942]
        PrimitiveType: int [18937,18940]
        SimpleName: u [18941,18942]
    SingleVariableDeclaration [18944,18949]
        PrimitiveType: int [18944,18947]
        SimpleName: v [18948,18949]
    Block [18951,20554]
        IfStatement [18961,19036]
            InfixExpression [18965,18975]
                InfixExpression [18965,18970]
                    SimpleName: u [18965,18966]
                    INFIX_EXPRESSION_OPERATOR: * [18967,18968]
                    SimpleName: v [18969,18970]
                INFIX_EXPRESSION_OPERATOR: == [18971,18973]
                NumberLiteral: 0 [18974,18975]
            Block [18977,19036]
                ReturnStatement [18991,19026]
                    ParenthesizedExpression [18998,19025]
                        InfixExpression [18999,19024]
                            MethodInvocation [18999,19010]
                                METHOD_INVOCATION_RECEIVER [18999,19003]
                                    SimpleName: Math [18999,19003]
                                SimpleName: abs [19004,19007]
                                METHOD_INVOCATION_ARGUMENTS [19008,19009]
                                    SimpleName: u [19008,19009]
                            INFIX_EXPRESSION_OPERATOR: + [19011,19012]
                            MethodInvocation [19013,19024]
                                METHOD_INVOCATION_RECEIVER [19013,19017]
                                    SimpleName: Math [19013,19017]
                                SimpleName: abs [19018,19021]
                                METHOD_INVOCATION_ARGUMENTS [19022,19023]
                                    SimpleName: v [19022,19023]
        IfStatement [19313,19331]
            InfixExpression [19317,19320]
                SimpleName: u [19317,19318]
                INFIX_EXPRESSION_OPERATOR: > [19318,19319]
                NumberLiteral: 0 [19319,19320]
            Block [19322,19331]
                ExpressionStatement [19324,19329]
                    Assignment [19324,19328]
                        SimpleName: u [19324,19325]
                        ASSIGNMENT_OPERATOR: = [19325,19326]
                        PrefixExpression [19326,19328]
                            PREFIX_EXPRESSION_OPERATOR: - [19326,19327]
                            SimpleName: u [19327,19328]
        IfStatement [19359,19377]
            InfixExpression [19363,19366]
                SimpleName: v [19363,19364]
                INFIX_EXPRESSION_OPERATOR: > [19364,19365]
                NumberLiteral: 0 [19365,19366]
            Block [19368,19377]
                ExpressionStatement [19370,19375]
                    Assignment [19370,19374]
                        SimpleName: v [19370,19371]
                        ASSIGNMENT_OPERATOR: = [19371,19372]
                        PrefixExpression [19372,19374]
                            PREFIX_EXPRESSION_OPERATOR: - [19372,19373]
                            SimpleName: v [19373,19374]
        VariableDeclarationStatement [19438,19446]
            PrimitiveType: int [19438,19441]
            VariableDeclarationFragment [19442,19445]
                SimpleName: k [19442,19443]
                NumberLiteral: 0 [19444,19445]
        WhileStatement [19455,19584]
            InfixExpression [19462,19490]
                InfixExpression [19462,19482]
                    InfixExpression [19462,19470]
                        ParenthesizedExpression [19462,19467]
                            InfixExpression [19463,19466]
                                SimpleName: u [19463,19464]
                                INFIX_EXPRESSION_OPERATOR: & [19464,19465]
                                NumberLiteral: 1 [19465,19466]
                        INFIX_EXPRESSION_OPERATOR: == [19467,19469]
                        NumberLiteral: 0 [19469,19470]
                    INFIX_EXPRESSION_OPERATOR: && [19471,19473]
                    InfixExpression [19474,19482]
                        ParenthesizedExpression [19474,19479]
                            InfixExpression [19475,19478]
                                SimpleName: v [19475,19476]
                                INFIX_EXPRESSION_OPERATOR: & [19476,19477]
                                NumberLiteral: 1 [19477,19478]
                        INFIX_EXPRESSION_OPERATOR: == [19479,19481]
                        NumberLiteral: 0 [19481,19482]
                INFIX_EXPRESSION_OPERATOR: && [19483,19485]
                InfixExpression [19486,19490]
                    SimpleName: k [19486,19487]
                    INFIX_EXPRESSION_OPERATOR: < [19487,19488]
                    NumberLiteral: 31 [19488,19490]
            Block [19492,19584]
                ExpressionStatement [19540,19545]
                    Assignment [19540,19544]
                        SimpleName: u [19540,19541]
                        ASSIGNMENT_OPERATOR: /= [19541,19543]
                        NumberLiteral: 2 [19543,19544]
                ExpressionStatement [19546,19551]
                    Assignment [19546,19550]
                        SimpleName: v [19546,19547]
                        ASSIGNMENT_OPERATOR: /= [19547,19549]
                        NumberLiteral: 2 [19549,19550]
                ExpressionStatement [19552,19556]
                    PostfixExpression [19552,19555]
                        SimpleName: k [19552,19553]
                        POSTFIX_EXPRESSION_OPERATOR: ++ [19553,19555]
        IfStatement [19593,19683]
            InfixExpression [19597,19602]
                SimpleName: k [19597,19598]
                INFIX_EXPRESSION_OPERATOR: == [19598,19600]
                NumberLiteral: 31 [19600,19602]
            Block [19604,19683]
                ThrowStatement [19618,19673]
                    ClassInstanceCreation [19624,19672]
                        SimpleType [19628,19647]
                            SimpleName: ArithmeticException [19628,19647]
                        StringLiteral: "overflow: gcd is 2^31" [19648,19671]
        VariableDeclarationStatement [19792,19830]
            PrimitiveType: int [19792,19795]
            VariableDeclarationFragment [19796,19823]
                SimpleName: t [19796,19797]
                ConditionalExpression [19800,19823]
                    ParenthesizedExpression [19800,19810]
                        InfixExpression [19801,19809]
                            ParenthesizedExpression [19801,19806]
                                InfixExpression [19802,19805]
                                    SimpleName: u [19802,19803]
                                    INFIX_EXPRESSION_OPERATOR: & [19803,19804]
                                    NumberLiteral: 1 [19804,19805]
                            INFIX_EXPRESSION_OPERATOR: == [19806,19808]
                            NumberLiteral: 1 [19808,19809]
                    SimpleName: v [19813,19814]
                    PrefixExpression [19817,19823]
                        PREFIX_EXPRESSION_OPERATOR: - [19817,19818]
                        ParenthesizedExpression [19818,19823]
                            InfixExpression [19819,19822]
                                SimpleName: u [19819,19820]
                                INFIX_EXPRESSION_OPERATOR: / [19820,19821]
                                NumberLiteral: 2 [19821,19822]
        DoStatement [19961,20506]
            Block [19964,20492]
                WhileStatement [20059,20151]
                    InfixExpression [20066,20074]
                        ParenthesizedExpression [20066,20071]
                            InfixExpression [20067,20070]
                                SimpleName: t [20067,20068]
                                INFIX_EXPRESSION_OPERATOR: & [20068,20069]
                                NumberLiteral: 1 [20069,20070]
                        INFIX_EXPRESSION_OPERATOR: == [20071,20073]
                        NumberLiteral: 0 [20073,20074]
                    Block [20076,20151]
                        ExpressionStatement [20115,20120]
                            Assignment [20115,20119]
                                SimpleName: t [20115,20116]
                                ASSIGNMENT_OPERATOR: /= [20116,20118]
                                NumberLiteral: 2 [20118,20119]
                IfStatement [20199,20291]
                    InfixExpression [20203,20206]
                        SimpleName: t [20203,20204]
                        INFIX_EXPRESSION_OPERATOR: > [20204,20205]
                        NumberLiteral: 0 [20205,20206]
                    Block [20208,20247]
                        ExpressionStatement [20226,20233]
                            Assignment [20226,20232]
                                SimpleName: u [20226,20227]
                                ASSIGNMENT_OPERATOR: = [20228,20229]
                                PrefixExpression [20230,20232]
                                    PREFIX_EXPRESSION_OPERATOR: - [20230,20231]
                                    SimpleName: t [20231,20232]
                    Block [20253,20291]
                        ExpressionStatement [20271,20277]
                            Assignment [20271,20276]
                                SimpleName: v [20271,20272]
                                ASSIGNMENT_OPERATOR: = [20273,20274]
                                SimpleName: t [20275,20276]
                ExpressionStatement [20368,20382]
                    Assignment [20368,20381]
                        SimpleName: t [20368,20369]
                        ASSIGNMENT_OPERATOR: = [20370,20371]
                        InfixExpression [20372,20381]
                            ParenthesizedExpression [20372,20379]
                                InfixExpression [20373,20378]
                                    SimpleName: v [20373,20374]
                                    INFIX_EXPRESSION_OPERATOR: - [20375,20376]
                                    SimpleName: u [20377,20378]
                            INFIX_EXPRESSION_OPERATOR: / [20379,20380]
                            NumberLiteral: 2 [20380,20381]
            InfixExpression [20500,20504]
                SimpleName: t [20500,20501]
                INFIX_EXPRESSION_OPERATOR: != [20501,20503]
                NumberLiteral: 0 [20503,20504]
        ReturnStatement [20515,20532]
            InfixExpression [20522,20531]
                PrefixExpression [20522,20524]
                    PREFIX_EXPRESSION_OPERATOR: - [20522,20523]
                    SimpleName: u [20523,20524]
                INFIX_EXPRESSION_OPERATOR: * [20524,20525]
                ParenthesizedExpression [20525,20531]
                    InfixExpression [20526,20530]
                        NumberLiteral: 1 [20526,20527]
                        INFIX_EXPRESSION_OPERATOR: << [20527,20529]
                        SimpleName: k [20529,20530]
to
TypeDeclaration [691,22224]
at 37
===
move-tree
---
MethodDeclaration [7834,8145]
    Javadoc [7834,8054]
        TagElement [7845,7937]
            TextElement: For a byte value x, this method returns (byte)(+1) if x >= 0 [7845,7905]
            TextElement: and (byte)(-1) if x < 0. [7913,7937]
        TagElement [7952,7978]
            SimpleName: x [7959,7960]
            TextElement:  the value, a byte [7960,7978]
        TagElement [7986,8046]
            TextElement:  (byte)(+1) or (byte)(-1), depending on the sign of x [7993,8046]
    Modifier: public [8059,8065]
    Modifier: static [8066,8072]
    PrimitiveType: byte [8073,8077]
    SimpleName: indicator [8078,8087]
    SingleVariableDeclaration [8088,8100]
        Modifier: final [8088,8093]
        PrimitiveType: byte [8094,8098]
        SimpleName: x [8099,8100]
    Block [8102,8145]
        ReturnStatement [8112,8139]
            ConditionalExpression [8119,8138]
                ParenthesizedExpression [8119,8128]
                    InfixExpression [8120,8127]
                        SimpleName: x [8120,8121]
                        INFIX_EXPRESSION_OPERATOR: >= [8122,8124]
                        SimpleName: ZB [8125,8127]
                SimpleName: PB [8131,8133]
                SimpleName: NB [8136,8138]
to
TypeDeclaration [691,22224]
at 39
===
move-tree
---
MethodDeclaration [6913,7368]
    Javadoc [6913,7197]
        TagElement [6924,7090]
            TextElement: For a double precision value x, this method returns +1.0 if x >= 0 [6924,6990]
            TextElement: and -1.0 if x < 0.   Returns <code>NaN</code>  [6998,7044]
            TextElement: if <code>x</code> is <code>NaN</code>. [7052,7090]
        TagElement [7105,7133]
            SimpleName: x [7112,7113]
            TextElement:  the value, a double [7113,7133]
        TagElement [7141,7189]
            TextElement:  +1.0 or -1.0, depending on the sign of x [7148,7189]
    Modifier: public [7202,7208]
    Modifier: static [7209,7215]
    PrimitiveType: double [7216,7222]
    SimpleName: indicator [7223,7232]
    SingleVariableDeclaration [7233,7247]
        Modifier: final [7233,7238]
        PrimitiveType: double [7239,7245]
        SimpleName: x [7246,7247]
    Block [7249,7368]
        IfStatement [7259,7322]
            MethodInvocation [7263,7278]
                METHOD_INVOCATION_RECEIVER [7263,7269]
                    SimpleName: Double [7263,7269]
                SimpleName: isNaN [7270,7275]
                METHOD_INVOCATION_ARGUMENTS [7276,7277]
                    SimpleName: x [7276,7277]
            Block [7280,7322]
                ReturnStatement [7294,7312]
                    QualifiedName: Double.NaN [7301,7311]
        ReturnStatement [7331,7362]
            ConditionalExpression [7338,7361]
                ParenthesizedExpression [7338,7348]
                    InfixExpression [7339,7347]
                        SimpleName: x [7339,7340]
                        INFIX_EXPRESSION_OPERATOR: >= [7341,7343]
                        NumberLiteral: 0.0 [7344,7347]
                NumberLiteral: 1.0 [7351,7354]
                PrefixExpression [7357,7361]
                    PREFIX_EXPRESSION_OPERATOR: - [7357,7358]
                    NumberLiteral: 1.0 [7358,7361]
to
TypeDeclaration [691,22224]
at 39
===
move-tree
---
MethodDeclaration [7378,7824]
    Javadoc [7378,7654]
        TagElement [7389,7546]
            TextElement: For a float value x, this method returns +1.0F if x >= 0 [7389,7445]
            TextElement: and -1.0F if x < 0.   Returns <code>NaN</code>  [7453,7500]
            TextElement: if <code>x</code> is <code>NaN</code>. [7508,7546]
        TagElement [7561,7588]
            SimpleName: x [7568,7569]
            TextElement:  the value, a float [7569,7588]
        TagElement [7596,7646]
            TextElement:  +1.0F or -1.0F, depending on the sign of x [7603,7646]
    Modifier: public [7659,7665]
    Modifier: static [7666,7672]
    PrimitiveType: float [7673,7678]
    SimpleName: indicator [7679,7688]
    SingleVariableDeclaration [7689,7702]
        Modifier: final [7689,7694]
        PrimitiveType: float [7695,7700]
        SimpleName: x [7701,7702]
    Block [7704,7824]
        IfStatement [7714,7775]
            MethodInvocation [7718,7732]
                METHOD_INVOCATION_RECEIVER [7718,7723]
                    SimpleName: Float [7718,7723]
                SimpleName: isNaN [7724,7729]
                METHOD_INVOCATION_ARGUMENTS [7730,7731]
                    SimpleName: x [7730,7731]
            Block [7734,7775]
                ReturnStatement [7748,7765]
                    QualifiedName: Float.NaN [7755,7764]
        ReturnStatement [7784,7818]
            ConditionalExpression [7791,7817]
                ParenthesizedExpression [7791,7802]
                    InfixExpression [7792,7801]
                        SimpleName: x [7792,7793]
                        INFIX_EXPRESSION_OPERATOR: >= [7794,7796]
                        NumberLiteral: 0.0F [7797,7801]
                NumberLiteral: 1.0F [7805,7809]
                PrefixExpression [7812,7817]
                    PREFIX_EXPRESSION_OPERATOR: - [7812,7813]
                    NumberLiteral: 1.0F [7813,7817]
to
TypeDeclaration [691,22224]
at 39
===
move-tree
---
MethodDeclaration [8484,8759]
    Javadoc [8484,8672]
        TagElement [8495,8571]
            TextElement: For an int value x, this method returns +1 if x >= 0 [8495,8547]
            TextElement: and -1 if x < 0. [8555,8571]
        TagElement [8586,8612]
            SimpleName: x [8593,8594]
            TextElement:  the value, an int [8594,8612]
        TagElement [8620,8664]
            TextElement:  +1 or -1, depending on the sign of x [8627,8664]
    Modifier: public [8677,8683]
    Modifier: static [8684,8690]
    PrimitiveType: int [8691,8694]
    SimpleName: indicator [8695,8704]
    SingleVariableDeclaration [8705,8716]
        Modifier: final [8705,8710]
        PrimitiveType: int [8711,8714]
        SimpleName: x [8715,8716]
    Block [8718,8759]
        ReturnStatement [8728,8753]
            ConditionalExpression [8735,8752]
                ParenthesizedExpression [8735,8743]
                    InfixExpression [8736,8742]
                        SimpleName: x [8736,8737]
                        INFIX_EXPRESSION_OPERATOR: >= [8738,8740]
                        NumberLiteral: 0 [8741,8742]
                NumberLiteral: 1 [8746,8747]
                PrefixExpression [8750,8752]
                    PREFIX_EXPRESSION_OPERATOR: - [8750,8751]
                    NumberLiteral: 1 [8751,8752]
to
TypeDeclaration [691,22224]
at 39
===
move-tree
---
MethodDeclaration [8769,9053]
    Javadoc [8769,8961]
        TagElement [8780,8858]
            TextElement: For a long value x, this method returns +1L if x >= 0 [8780,8833]
            TextElement: and -1L if x < 0. [8841,8858]
        TagElement [8873,8899]
            SimpleName: x [8880,8881]
            TextElement:  the value, a long [8881,8899]
        TagElement [8907,8953]
            TextElement:  +1L or -1L, depending on the sign of x [8914,8953]
    Modifier: public [8966,8972]
    Modifier: static [8973,8979]
    PrimitiveType: long [8980,8984]
    SimpleName: indicator [8985,8994]
    SingleVariableDeclaration [8995,9007]
        Modifier: final [8995,9000]
        PrimitiveType: long [9001,9005]
        SimpleName: x [9006,9007]
    Block [9009,9053]
        ReturnStatement [9019,9047]
            ConditionalExpression [9026,9046]
                ParenthesizedExpression [9026,9035]
                    InfixExpression [9027,9034]
                        SimpleName: x [9027,9028]
                        INFIX_EXPRESSION_OPERATOR: >= [9029,9031]
                        NumberLiteral: 0L [9032,9034]
                NumberLiteral: 1L [9038,9040]
                PrefixExpression [9043,9046]
                    PREFIX_EXPRESSION_OPERATOR: - [9043,9044]
                    NumberLiteral: 1L [9044,9046]
to
TypeDeclaration [691,22224]
at 39
===
move-tree
---
MethodDeclaration [8155,8474]
    Javadoc [8155,8381]
        TagElement [8166,8261]
            TextElement: For a short value x, this method returns (short)(+1) if x >= 0 [8166,8228]
            TextElement: and (short)(-1) if x < 0. [8236,8261]
        TagElement [8276,8303]
            SimpleName: x [8283,8284]
            TextElement:  the value, a short [8284,8303]
        TagElement [8311,8373]
            TextElement:  (short)(+1) or (short)(-1), depending on the sign of x [8318,8373]
    Modifier: public [8386,8392]
    Modifier: static [8393,8399]
    PrimitiveType: short [8400,8405]
    SimpleName: indicator [8406,8415]
    SingleVariableDeclaration [8416,8429]
        Modifier: final [8416,8421]
        PrimitiveType: short [8422,8427]
        SimpleName: x [8428,8429]
    Block [8431,8474]
        ReturnStatement [8441,8468]
            ConditionalExpression [8448,8467]
                ParenthesizedExpression [8448,8457]
                    InfixExpression [8449,8456]
                        SimpleName: x [8449,8450]
                        INFIX_EXPRESSION_OPERATOR: >= [8451,8453]
                        SimpleName: ZS [8454,8456]
                SimpleName: PS [8460,8462]
                SimpleName: NS [8465,8467]
to
TypeDeclaration [691,22224]
at 39
===
move-tree
---
MethodDeclaration [1419,1864]
    Javadoc [1419,1746]
        TagElement [1430,1574]
            TextElement: Round the given value to the specified number of decimal places.  The [1430,1499]
            TextElement: value is rounded using the  [1507,1534]
            TagElement [1534,1566]
                MemberRef [1541,1565]
                    SimpleName: BigDecimal [1541,1551]
                    SimpleName: ROUND_HALF_UP [1552,1565]
            TextElement:  method. [1566,1574]
        TagElement [1582,1610]
            SimpleName: x [1589,1590]
            TextElement:  the value to round. [1590,1610]
        TagElement [1618,1686]
            SimpleName: scale [1625,1630]
            TextElement:  the number of digits to the right of the decimal point. [1630,1686]
        TagElement [1694,1720]
            TextElement:  the rounded value. [1701,1720]
        TagElement [1728,1738]
            TextElement:  1.1 [1734,1738]
    Modifier: public [1751,1757]
    Modifier: static [1758,1764]
    PrimitiveType: double [1765,1771]
    SimpleName: round [1772,1777]
    SingleVariableDeclaration [1778,1786]
        PrimitiveType: double [1778,1784]
        SimpleName: x [1785,1786]
    SingleVariableDeclaration [1788,1797]
        PrimitiveType: int [1788,1791]
        SimpleName: scale [1792,1797]
    Block [1799,1864]
        ReturnStatement [1809,1858]
            MethodInvocation [1816,1857]
                SimpleName: round [1816,1821]
                METHOD_INVOCATION_ARGUMENTS [1822,1856]
                    SimpleName: x [1822,1823]
                    SimpleName: scale [1825,1830]
                    QualifiedName: BigDecimal.ROUND_HALF_UP [1832,1856]
to
TypeDeclaration [691,22224]
at 41
===
move-tree
---
MethodDeclaration [1870,2536]
    Javadoc [1870,2325]
        TagElement [1881,2055]
            TextElement: Round the given value to the specified number of decimal places.  The [1881,1950]
            TextElement: value is rounded using the given method which is any method defined in [1958,2028]
            TagElement [2036,2054]
                SimpleName: BigDecimal [2043,2053]
            TextElement: . [2054,2055]
        TagElement [2063,2091]
            SimpleName: x [2070,2071]
            TextElement:  the value to round. [2071,2091]
        TagElement [2099,2167]
            SimpleName: scale [2106,2111]
            TextElement:  the number of digits to the right of the decimal point. [2111,2167]
        TagElement [2175,2265]
            SimpleName: roundingMethod [2182,2196]
            TextElement:  the rounding method as defined in [2196,2230]
            TagElement [2245,2263]
                SimpleName: BigDecimal [2252,2262]
            TextElement: .  [2263,2265]
        TagElement [2273,2299]
            TextElement:  the rounded value. [2280,2299]
        TagElement [2307,2317]
            TextElement:  1.1 [2313,2317]
    Modifier: public [2330,2336]
    Modifier: static [2337,2343]
    PrimitiveType: double [2344,2350]
    SimpleName: round [2351,2356]
    SingleVariableDeclaration [2366,2374]
        PrimitiveType: double [2366,2372]
        SimpleName: x [2373,2374]
    SingleVariableDeclaration [2376,2385]
        PrimitiveType: int [2376,2379]
        SimpleName: scale [2380,2385]
    SingleVariableDeclaration [2387,2405]
        PrimitiveType: int [2387,2390]
        SimpleName: roundingMethod [2391,2405]
    Block [2411,2536]
        ReturnStatement [2421,2530]
            MethodInvocation [2428,2529]
                METHOD_INVOCATION_RECEIVER [2428,2502]
                    ParenthesizedExpression [2428,2502]
                        MethodInvocation [2429,2501]
                            METHOD_INVOCATION_RECEIVER [2429,2469]
                                ClassInstanceCreation [2429,2469]
                                    SimpleType [2433,2443]
                                        SimpleName: BigDecimal [2433,2443]
                                    MethodInvocation [2444,2468]
                                        METHOD_INVOCATION_RECEIVER [2444,2457]
                                            ClassInstanceCreation [2444,2457]
                                                SimpleType [2448,2454]
                                                    SimpleName: Double [2448,2454]
                                                SimpleName: x [2455,2456]
                                        SimpleName: toString [2458,2466]
                            SimpleName: setScale [2470,2478]
                            METHOD_INVOCATION_ARGUMENTS [2479,2500]
                                SimpleName: scale [2479,2484]
                                SimpleName: roundingMethod [2486,2500]
                SimpleName: doubleValue [2516,2527]
to
TypeDeclaration [691,22224]
at 41
===
move-tree
---
MethodDeclaration [2546,2990]
    Javadoc [2546,2874]
        TagElement [2557,2702]
            TextElement: Round the given value to the specified number of decimal places.  The [2557,2626]
            TextElement: value is rounding using the  [2634,2662]
            TagElement [2662,2694]
                MemberRef [2669,2693]
                    SimpleName: BigDecimal [2669,2679]
                    SimpleName: ROUND_HALF_UP [2680,2693]
            TextElement:  method. [2694,2702]
        TagElement [2710,2738]
            SimpleName: x [2717,2718]
            TextElement:  the value to round. [2718,2738]
        TagElement [2746,2814]
            SimpleName: scale [2753,2758]
            TextElement:  the number of digits to the right of the decimal point. [2758,2814]
        TagElement [2822,2848]
            TextElement:  the rounded value. [2829,2848]
        TagElement [2856,2866]
            TextElement:  1.1 [2862,2866]
    Modifier: public [2879,2885]
    Modifier: static [2886,2892]
    PrimitiveType: float [2893,2898]
    SimpleName: round [2899,2904]
    SingleVariableDeclaration [2905,2912]
        PrimitiveType: float [2905,2910]
        SimpleName: x [2911,2912]
    SingleVariableDeclaration [2914,2923]
        PrimitiveType: int [2914,2917]
        SimpleName: scale [2918,2923]
    Block [2925,2990]
        ReturnStatement [2935,2984]
            MethodInvocation [2942,2983]
                SimpleName: round [2942,2947]
                METHOD_INVOCATION_ARGUMENTS [2948,2982]
                    SimpleName: x [2948,2949]
                    SimpleName: scale [2951,2956]
                    QualifiedName: BigDecimal.ROUND_HALF_UP [2958,2982]
to
TypeDeclaration [691,22224]
at 41
===
move-tree
---
MethodDeclaration [2996,3632]
    Javadoc [2996,3451]
        TagElement [3007,3181]
            TextElement: Round the given value to the specified number of decimal places.  The [3007,3076]
            TextElement: value is rounded using the given method which is any method defined in [3084,3154]
            TagElement [3162,3180]
                SimpleName: BigDecimal [3169,3179]
            TextElement: . [3180,3181]
        TagElement [3189,3217]
            SimpleName: x [3196,3197]
            TextElement:  the value to round. [3197,3217]
        TagElement [3225,3293]
            SimpleName: scale [3232,3237]
            TextElement:  the number of digits to the right of the decimal point. [3237,3293]
        TagElement [3301,3391]
            SimpleName: roundingMethod [3308,3322]
            TextElement:  the rounding method as defined in [3322,3356]
            TagElement [3371,3389]
                SimpleName: BigDecimal [3378,3388]
            TextElement: .  [3389,3391]
        TagElement [3399,3425]
            TextElement:  the rounded value. [3406,3425]
        TagElement [3433,3443]
            TextElement:  1.1 [3439,3443]
    Modifier: public [3456,3462]
    Modifier: static [3463,3469]
    PrimitiveType: float [3470,3475]
    SimpleName: round [3476,3481]
    SingleVariableDeclaration [3482,3489]
        PrimitiveType: float [3482,3487]
        SimpleName: x [3488,3489]
    SingleVariableDeclaration [3491,3500]
        PrimitiveType: int [3491,3494]
        SimpleName: scale [3495,3500]
    SingleVariableDeclaration [3502,3520]
        PrimitiveType: int [3502,3505]
        SimpleName: roundingMethod [3506,3520]
    Block [3522,3632]
        ReturnStatement [3532,3626]
            MethodInvocation [3539,3625]
                METHOD_INVOCATION_RECEIVER [3539,3612]
                    ParenthesizedExpression [3539,3612]
                        MethodInvocation [3540,3611]
                            METHOD_INVOCATION_RECEIVER [3540,3579]
                                ClassInstanceCreation [3540,3579]
                                    SimpleType [3544,3554]
                                        SimpleName: BigDecimal [3544,3554]
                                    MethodInvocation [3555,3578]
                                        METHOD_INVOCATION_RECEIVER [3555,3567]
                                            ClassInstanceCreation [3555,3567]
                                                SimpleType [3559,3564]
                                                    SimpleName: Float [3559,3564]
                                                SimpleName: x [3565,3566]
                                        SimpleName: toString [3568,3576]
                            SimpleName: setScale [3580,3588]
                            METHOD_INVOCATION_ARGUMENTS [3589,3610]
                                SimpleName: scale [3589,3594]
                                SimpleName: roundingMethod [3596,3610]
                SimpleName: floatValue [3613,3623]
to
TypeDeclaration [691,22224]
at 41
===
move-tree
---
MethodDeclaration [4999,5487]
    Javadoc [4999,5385]
        TagElement [5010,5256]
            TextElement: Returns the <a href="http://mathworld.wolfram.com/Sign.html"> [5010,5071]
            TextElement: sign</a> for byte value <code>x</code>. [5079,5118]
            TextElement: <p> [5133,5136]
            TextElement: For a byte value x, this method returns (byte)(+1) if x > 0, (byte)(0) [5144,5214]
            TextElement: if x = 0, and (byte)(-1) if x < 0. [5222,5256]
        TagElement [5271,5297]
            SimpleName: x [5278,5279]
            TextElement:  the value, a byte [5279,5297]
        TagElement [5305,5377]
            TextElement:  (byte)(+1), (byte)(0), or (byte)(-1), depending on the sign of x [5312,5377]
    Modifier: public [5390,5396]
    Modifier: static [5397,5403]
    PrimitiveType: byte [5404,5408]
    SimpleName: sign [5409,5413]
    SingleVariableDeclaration [5414,5426]
        Modifier: final [5414,5419]
        PrimitiveType: byte [5420,5424]
        SimpleName: x [5425,5426]
    Block [5428,5487]
        ReturnStatement [5438,5481]
            ConditionalExpression [5445,5480]
                ParenthesizedExpression [5445,5454]
                    InfixExpression [5446,5453]
                        SimpleName: x [5446,5447]
                        INFIX_EXPRESSION_OPERATOR: == [5448,5450]
                        SimpleName: ZB [5451,5453]
                SimpleName: ZB [5457,5459]
                ConditionalExpression [5462,5480]
                    ParenthesizedExpression [5462,5470]
                        InfixExpression [5463,5469]
                            SimpleName: x [5463,5464]
                            INFIX_EXPRESSION_OPERATOR: > [5465,5466]
                            SimpleName: ZB [5467,5469]
                    SimpleName: PB [5473,5475]
                    SimpleName: NB [5478,5480]
to
TypeDeclaration [691,22224]
at 41
===
move-tree
---
MethodDeclaration [3642,4359]
    Javadoc [3642,4175]
        TagElement [3653,4062]
            TextElement: Returns the <a href="http://mathworld.wolfram.com/Sign.html"> [3653,3714]
            TextElement: sign</a> for double precision <code>x</code>. [3722,3767]
            TextElement: <p> [3782,3785]
            TextElement: For a double value <code>x</code>, this method returns <code>+1.0</code> [3793,3865]
            TextElement: if <code>x > 0</code>, <code>0.0</code> if <code>x = 0.0</code>, [3873,3937]
            TextElement: and <code>-1.0</code> if <code>x < 0</code>.  Returns <code>NaN</code>  [3945,4016]
            TextElement: if <code>x</code> is <code>NaN</code>. [4024,4062]
        TagElement [4077,4105]
            SimpleName: x [4084,4085]
            TextElement:  the value, a double [4085,4105]
        TagElement [4113,4167]
            TextElement:  +1.0, 0.0, or -1.0, depending on the sign of x [4120,4167]
    Modifier: public [4180,4186]
    Modifier: static [4187,4193]
    PrimitiveType: double [4194,4200]
    SimpleName: sign [4201,4205]
    SingleVariableDeclaration [4206,4220]
        Modifier: final [4206,4211]
        PrimitiveType: double [4212,4218]
        SimpleName: x [4219,4220]
    Block [4222,4359]
        IfStatement [4232,4295]
            MethodInvocation [4236,4251]
                METHOD_INVOCATION_RECEIVER [4236,4242]
                    SimpleName: Double [4236,4242]
                SimpleName: isNaN [4243,4248]
                METHOD_INVOCATION_ARGUMENTS [4249,4250]
                    SimpleName: x [4249,4250]
            Block [4253,4295]
                ReturnStatement [4267,4285]
                    QualifiedName: Double.NaN [4274,4284]
        ReturnStatement [4304,4353]
            ConditionalExpression [4311,4352]
                ParenthesizedExpression [4311,4321]
                    InfixExpression [4312,4320]
                        SimpleName: x [4312,4313]
                        INFIX_EXPRESSION_OPERATOR: == [4314,4316]
                        NumberLiteral: 0.0 [4317,4320]
                NumberLiteral: 0.0 [4324,4327]
                ConditionalExpression [4330,4352]
                    ParenthesizedExpression [4330,4339]
                        InfixExpression [4331,4338]
                            SimpleName: x [4331,4332]
                            INFIX_EXPRESSION_OPERATOR: > [4333,4334]
                            NumberLiteral: 0.0 [4335,4338]
                    NumberLiteral: 1.0 [4342,4345]
                    PrefixExpression [4348,4352]
                        PREFIX_EXPRESSION_OPERATOR: - [4348,4349]
                        NumberLiteral: 1.0 [4349,4352]
to
TypeDeclaration [691,22224]
at 41
===
move-tree
---
MethodDeclaration [4369,4989]
    Javadoc [4369,4804]
        TagElement [4380,4689]
            TextElement: Returns the <a href="http://mathworld.wolfram.com/Sign.html"> [4380,4441]
            TextElement: sign</a> for float value <code>x</code>. [4449,4489]
            TextElement: <p> [4504,4507]
            TextElement: For a float value x, this method returns +1.0F if x > 0, 0.0F if [4515,4579]
            TextElement: x = 0.0F, and -1.0F if x < 0.  Returns <code>NaN</code>  [4587,4643]
            TextElement: if <code>x</code> is <code>NaN</code>. [4651,4689]
        TagElement [4704,4731]
            SimpleName: x [4711,4712]
            TextElement:  the value, a float [4712,4731]
        TagElement [4739,4796]
            TextElement:  +1.0F, 0.0F, or -1.0F, depending on the sign of x [4746,4796]
    Modifier: public [4809,4815]
    Modifier: static [4816,4822]
    PrimitiveType: float [4823,4828]
    SimpleName: sign [4829,4833]
    SingleVariableDeclaration [4834,4847]
        Modifier: final [4834,4839]
        PrimitiveType: float [4840,4845]
        SimpleName: x [4846,4847]
    Block [4849,4989]
        IfStatement [4859,4920]
            MethodInvocation [4863,4877]
                METHOD_INVOCATION_RECEIVER [4863,4868]
                    SimpleName: Float [4863,4868]
                SimpleName: isNaN [4869,4874]
                METHOD_INVOCATION_ARGUMENTS [4875,4876]
                    SimpleName: x [4875,4876]
            Block [4879,4920]
                ReturnStatement [4893,4910]
                    QualifiedName: Float.NaN [4900,4909]
        ReturnStatement [4929,4983]
            ConditionalExpression [4936,4982]
                ParenthesizedExpression [4936,4947]
                    InfixExpression [4937,4946]
                        SimpleName: x [4937,4938]
                        INFIX_EXPRESSION_OPERATOR: == [4939,4941]
                        NumberLiteral: 0.0F [4942,4946]
                NumberLiteral: 0.0F [4950,4954]
                ConditionalExpression [4957,4982]
                    ParenthesizedExpression [4957,4967]
                        InfixExpression [4958,4966]
                            SimpleName: x [4958,4959]
                            INFIX_EXPRESSION_OPERATOR: > [4960,4961]
                            NumberLiteral: 0.0F [4962,4966]
                    NumberLiteral: 1.0F [4970,4974]
                    PrefixExpression [4977,4982]
                        PREFIX_EXPRESSION_OPERATOR: - [4977,4978]
                        NumberLiteral: 1.0F [4978,4982]
to
TypeDeclaration [691,22224]
at 41
===
move-tree
---
MethodDeclaration [6013,6446]
    Javadoc [6013,6350]
        TagElement [6024,6245]
            TextElement: Returns the <a href="http://mathworld.wolfram.com/Sign.html"> [6024,6085]
            TextElement: sign</a> for int value <code>x</code>. [6093,6131]
            TextElement: <p> [6146,6149]
            TextElement: For an int value x, this method returns +1 if x > 0, 0 if x = 0, [6157,6221]
            TextElement: and -1 if x < 0. [6229,6245]
        TagElement [6260,6286]
            SimpleName: x [6267,6268]
            TextElement:  the value, an int [6268,6286]
        TagElement [6294,6342]
            TextElement:  +1, 0, or -1, depending on the sign of x [6301,6342]
    Modifier: public [6355,6361]
    Modifier: static [6362,6368]
    PrimitiveType: int [6369,6372]
    SimpleName: sign [6373,6377]
    SingleVariableDeclaration [6378,6389]
        Modifier: final [6378,6383]
        PrimitiveType: int [6384,6387]
        SimpleName: x [6388,6389]
    Block [6391,6446]
        ReturnStatement [6401,6440]
            ConditionalExpression [6408,6439]
                ParenthesizedExpression [6408,6416]
                    InfixExpression [6409,6415]
                        SimpleName: x [6409,6410]
                        INFIX_EXPRESSION_OPERATOR: == [6411,6413]
                        NumberLiteral: 0 [6414,6415]
                NumberLiteral: 0 [6419,6420]
                ConditionalExpression [6423,6439]
                    ParenthesizedExpression [6423,6430]
                        InfixExpression [6424,6429]
                            SimpleName: x [6424,6425]
                            INFIX_EXPRESSION_OPERATOR: > [6426,6427]
                            NumberLiteral: 0 [6428,6429]
                    NumberLiteral: 1 [6433,6434]
                    PrefixExpression [6437,6439]
                        PREFIX_EXPRESSION_OPERATOR: - [6437,6438]
                        NumberLiteral: 1 [6438,6439]
to
TypeDeclaration [691,22224]
at 41
===
move-tree
---
MethodDeclaration [6456,6903]
    Javadoc [6456,6800]
        TagElement [6467,6692]
            TextElement: Returns the <a href="http://mathworld.wolfram.com/Sign.html"> [6467,6528]
            TextElement: sign</a> for long value <code>x</code>. [6536,6575]
            TextElement: <p> [6590,6593]
            TextElement: For a long value x, this method returns +1L if x > 0, 0L if x = 0, [6601,6667]
            TextElement: and -1L if x < 0. [6675,6692]
        TagElement [6707,6733]
            SimpleName: x [6714,6715]
            TextElement:  the value, a long [6715,6733]
        TagElement [6741,6792]
            TextElement:  +1L, 0L, or -1L, depending on the sign of x [6748,6792]
    Modifier: public [6805,6811]
    Modifier: static [6812,6818]
    PrimitiveType: long [6819,6823]
    SimpleName: sign [6824,6828]
    SingleVariableDeclaration [6829,6841]
        Modifier: final [6829,6834]
        PrimitiveType: long [6835,6839]
        SimpleName: x [6840,6841]
    Block [6843,6903]
        ReturnStatement [6853,6897]
            ConditionalExpression [6860,6896]
                ParenthesizedExpression [6860,6869]
                    InfixExpression [6861,6868]
                        SimpleName: x [6861,6862]
                        INFIX_EXPRESSION_OPERATOR: == [6863,6865]
                        NumberLiteral: 0L [6866,6868]
                NumberLiteral: 0L [6872,6874]
                ConditionalExpression [6877,6896]
                    ParenthesizedExpression [6877,6885]
                        InfixExpression [6878,6884]
                            SimpleName: x [6878,6879]
                            INFIX_EXPRESSION_OPERATOR: > [6880,6881]
                            NumberLiteral: 0L [6882,6884]
                    NumberLiteral: 1L [6888,6890]
                    PrefixExpression [6893,6896]
                        PREFIX_EXPRESSION_OPERATOR: - [6893,6894]
                        NumberLiteral: 1L [6894,6896]
to
TypeDeclaration [691,22224]
at 41
===
move-tree
---
MethodDeclaration [5497,6003]
    Javadoc [5497,5899]
        TagElement [5508,5759]
            TextElement: Returns the <a href="http://mathworld.wolfram.com/Sign.html"> [5508,5569]
            TextElement: sign</a> for short value <code>x</code>. [5577,5617]
            TextElement: <p> [5632,5635]
            TextElement: For a short value x, this method returns (short)(+1) if x > 0, (short)(0) [5643,5716]
            TextElement: if x = 0, and (short)(-1) if x < 0. [5724,5759]
        TagElement [5774,5801]
            SimpleName: x [5781,5782]
            TextElement:  the value, a short [5782,5801]
        TagElement [5809,5891]
            TextElement:  (short)(+1), (short)(0), or (short)(-1), depending on the sign [5816,5879]
            TextElement: of x [5887,5891]
    Modifier: public [5904,5910]
    Modifier: static [5911,5917]
    PrimitiveType: short [5918,5923]
    SimpleName: sign [5924,5928]
    SingleVariableDeclaration [5929,5942]
        Modifier: final [5929,5934]
        PrimitiveType: short [5935,5940]
        SimpleName: x [5941,5942]
    Block [5944,6003]
        ReturnStatement [5954,5997]
            ConditionalExpression [5961,5996]
                ParenthesizedExpression [5961,5970]
                    InfixExpression [5962,5969]
                        SimpleName: x [5962,5963]
                        INFIX_EXPRESSION_OPERATOR: == [5964,5966]
                        SimpleName: ZS [5967,5969]
                SimpleName: ZS [5973,5975]
                ConditionalExpression [5978,5996]
                    ParenthesizedExpression [5978,5986]
                        InfixExpression [5979,5985]
                            SimpleName: x [5979,5980]
                            INFIX_EXPRESSION_OPERATOR: > [5981,5982]
                            SimpleName: ZS [5983,5985]
                    SimpleName: PS [5989,5991]
                    SimpleName: NS [5994,5996]
to
TypeDeclaration [691,22224]
at 41
===
move-tree
---
MethodDeclaration [17038,17370]
    Javadoc [17038,17271]
        TagElement [17049,17153]
            TextElement: Returns the <a href="http://mathworld.wolfram.com/HyperbolicSine.html"> [17049,17120]
            TextElement: hyperbolic sine</a> of x. [17128,17153]
        TagElement [17168,17227]
            SimpleName: x [17175,17176]
            TextElement:  double value for which to find the hyperbolic sine [17176,17227]
        TagElement [17235,17263]
            TextElement:  hyperbolic sine of x [17242,17263]
    Modifier: public [17276,17282]
    Modifier: static [17283,17289]
    PrimitiveType: double [17290,17296]
    SimpleName: sinh [17297,17301]
    SingleVariableDeclaration [17302,17310]
        PrimitiveType: double [17302,17308]
        SimpleName: x [17309,17310]
    Block [17312,17370]
        ReturnStatement [17322,17364]
            InfixExpression [17329,17363]
                ParenthesizedExpression [17329,17357]
                    InfixExpression [17330,17356]
                        MethodInvocation [17330,17341]
                            METHOD_INVOCATION_RECEIVER [17330,17334]
                                SimpleName: Math [17330,17334]
                            SimpleName: exp [17335,17338]
                            METHOD_INVOCATION_ARGUMENTS [17339,17340]
                                SimpleName: x [17339,17340]
                        INFIX_EXPRESSION_OPERATOR: - [17342,17343]
                        MethodInvocation [17344,17356]
                            METHOD_INVOCATION_RECEIVER [17344,17348]
                                SimpleName: Math [17344,17348]
                            SimpleName: exp [17349,17352]
                            METHOD_INVOCATION_ARGUMENTS [17353,17355]
                                PrefixExpression [17353,17355]
                                    PREFIX_EXPRESSION_OPERATOR: - [17353,17354]
                                    SimpleName: x [17354,17355]
                INFIX_EXPRESSION_OPERATOR: / [17358,17359]
                NumberLiteral: 2.0 [17360,17363]
to
TypeDeclaration [691,22224]
at 41
===
insert-tree
---
MethodDeclaration [18172,21001]
    Javadoc [18172,18633]
        TagElement [18183,18366]
            TextElement: Round the given non-negative, value to the "nearest" integer. Nearest is [18183,18255]
            TextElement: determined by the rounding method specified. Rounding methods are defined [18263,18336]
            TextElement: in  [18344,18347]
            TagElement [18347,18365]
                SimpleName: BigDecimal [18354,18364]
            TextElement: . [18365,18366]
        TagElement [18382,18417]
            SimpleName: unscaled [18389,18397]
            TextElement:  the value to round. [18397,18417]
        TagElement [18425,18476]
            SimpleName: sign [18432,18436]
            TextElement:  the sign of the original, scaled value. [18436,18476]
        TagElement [18484,18573]
            SimpleName: roundingMethod [18491,18505]
            TextElement:  the rounding method as defined in [18505,18539]
            TagElement [18554,18572]
                SimpleName: BigDecimal [18561,18571]
            TextElement: . [18572,18573]
        TagElement [18581,18607]
            TextElement:  the rounded value. [18588,18607]
        TagElement [18615,18625]
            TextElement:  1.1 [18621,18625]
    Modifier: private [18638,18645]
    Modifier: static [18646,18652]
    PrimitiveType: double [18653,18659]
    SimpleName: roundUnscaled [18660,18673]
    SingleVariableDeclaration [18674,18689]
        PrimitiveType: double [18674,18680]
        SimpleName: unscaled [18681,18689]
    SingleVariableDeclaration [18691,18702]
        PrimitiveType: double [18691,18697]
        SimpleName: sign [18698,18702]
    SingleVariableDeclaration [18712,18730]
        PrimitiveType: int [18712,18715]
        SimpleName: roundingMethod [18716,18730]
    Block [18732,21001]
        SwitchStatement [18742,20970]
            SimpleName: roundingMethod [18750,18764]
            SwitchCase [18776,18807]
                QualifiedName: BigDecimal.ROUND_CEILING [18781,18805]
            IfStatement [18820,18969]
                InfixExpression [18824,18834]
                    SimpleName: sign [18824,18828]
                    INFIX_EXPRESSION_OPERATOR: == [18829,18831]
                    PrefixExpression [18832,18834]
                        PREFIX_EXPRESSION_OPERATOR: - [18832,18833]
                        NumberLiteral: 1 [18833,18834]
                Block [18836,18900]
                    ExpressionStatement [18854,18886]
                        Assignment [18854,18885]
                            SimpleName: unscaled [18854,18862]
                            ASSIGNMENT_OPERATOR: = [18863,18864]
                            MethodInvocation [18865,18885]
                                METHOD_INVOCATION_RECEIVER [18865,18869]
                                    SimpleName: Math [18865,18869]
                                SimpleName: floor [18870,18875]
                                METHOD_INVOCATION_ARGUMENTS [18876,18884]
                                    SimpleName: unscaled [18876,18884]
                Block [18906,18969]
                    ExpressionStatement [18924,18955]
                        Assignment [18924,18954]
                            SimpleName: unscaled [18924,18932]
                            ASSIGNMENT_OPERATOR: = [18933,18934]
                            MethodInvocation [18935,18954]
                                METHOD_INVOCATION_RECEIVER [18935,18939]
                                    SimpleName: Math [18935,18939]
                                SimpleName: ceil [18940,18944]
                                METHOD_INVOCATION_ARGUMENTS [18945,18953]
                                    SimpleName: unscaled [18945,18953]
            BreakStatement [18982,18988]
            SwitchCase [18997,19025]
                QualifiedName: BigDecimal.ROUND_DOWN [19002,19023]
            ExpressionStatement [19038,19070]
                Assignment [19038,19069]
                    SimpleName: unscaled [19038,19046]
                    ASSIGNMENT_OPERATOR: = [19047,19048]
                    MethodInvocation [19049,19069]
                        METHOD_INVOCATION_RECEIVER [19049,19053]
                            SimpleName: Math [19049,19053]
                        SimpleName: floor [19054,19059]
                        METHOD_INVOCATION_ARGUMENTS [19060,19068]
                            SimpleName: unscaled [19060,19068]
            BreakStatement [19083,19089]
            SwitchCase [19098,19127]
                QualifiedName: BigDecimal.ROUND_FLOOR [19103,19125]
            IfStatement [19140,19289]
                InfixExpression [19144,19154]
                    SimpleName: sign [19144,19148]
                    INFIX_EXPRESSION_OPERATOR: == [19149,19151]
                    PrefixExpression [19152,19154]
                        PREFIX_EXPRESSION_OPERATOR: - [19152,19153]
                        NumberLiteral: 1 [19153,19154]
                Block [19156,19219]
                    ExpressionStatement [19174,19205]
                        Assignment [19174,19204]
                            SimpleName: unscaled [19174,19182]
                            ASSIGNMENT_OPERATOR: = [19183,19184]
                            MethodInvocation [19185,19204]
                                METHOD_INVOCATION_RECEIVER [19185,19189]
                                    SimpleName: Math [19185,19189]
                                SimpleName: ceil [19190,19194]
                                METHOD_INVOCATION_ARGUMENTS [19195,19203]
                                    SimpleName: unscaled [19195,19203]
                Block [19225,19289]
                    ExpressionStatement [19243,19275]
                        Assignment [19243,19274]
                            SimpleName: unscaled [19243,19251]
                            ASSIGNMENT_OPERATOR: = [19252,19253]
                            MethodInvocation [19254,19274]
                                METHOD_INVOCATION_RECEIVER [19254,19258]
                                    SimpleName: Math [19254,19258]
                                SimpleName: floor [19259,19264]
                                METHOD_INVOCATION_ARGUMENTS [19265,19273]
                                    SimpleName: unscaled [19265,19273]
            BreakStatement [19302,19308]
            SwitchCase [19317,19350]
                QualifiedName: BigDecimal.ROUND_HALF_DOWN [19322,19348]
            Block [19351,19620]
                VariableDeclarationStatement [19365,19425]
                    PrimitiveType: double [19365,19371]
                    VariableDeclarationFragment [19372,19424]
                        SimpleName: fraction [19372,19380]
                        MethodInvocation [19383,19424]
                            METHOD_INVOCATION_RECEIVER [19383,19387]
                                SimpleName: Math [19383,19387]
                            SimpleName: abs [19388,19391]
                            METHOD_INVOCATION_ARGUMENTS [19392,19423]
                                InfixExpression [19392,19423]
                                    SimpleName: unscaled [19392,19400]
                                    INFIX_EXPRESSION_OPERATOR: - [19401,19402]
                                    MethodInvocation [19403,19423]
                                        METHOD_INVOCATION_RECEIVER [19403,19407]
                                            SimpleName: Math [19403,19407]
                                        SimpleName: floor [19408,19413]
                                        METHOD_INVOCATION_ARGUMENTS [19414,19422]
                                            SimpleName: unscaled [19414,19422]
                IfStatement [19438,19591]
                    InfixExpression [19442,19456]
                        SimpleName: fraction [19442,19450]
                        INFIX_EXPRESSION_OPERATOR: > [19451,19452]
                        NumberLiteral: 0.5 [19453,19456]
                    Block [19458,19521]
                        ExpressionStatement [19476,19507]
                            Assignment [19476,19506]
                                SimpleName: unscaled [19476,19484]
                                ASSIGNMENT_OPERATOR: = [19485,19486]
                                MethodInvocation [19487,19506]
                                    METHOD_INVOCATION_RECEIVER [19487,19491]
                                        SimpleName: Math [19487,19491]
                                    SimpleName: ceil [19492,19496]
                                    METHOD_INVOCATION_ARGUMENTS [19497,19505]
                                        SimpleName: unscaled [19497,19505]
                    Block [19527,19591]
                        ExpressionStatement [19545,19577]
                            Assignment [19545,19576]
                                SimpleName: unscaled [19545,19553]
                                ASSIGNMENT_OPERATOR: = [19554,19555]
                                MethodInvocation [19556,19576]
                                    METHOD_INVOCATION_RECEIVER [19556,19560]
                                        SimpleName: Math [19556,19560]
                                    SimpleName: floor [19561,19566]
                                    METHOD_INVOCATION_ARGUMENTS [19567,19575]
                                        SimpleName: unscaled [19567,19575]
                BreakStatement [19604,19610]
            SwitchCase [19629,19662]
                QualifiedName: BigDecimal.ROUND_HALF_EVEN [19634,19660]
            Block [19663,20249]
                VariableDeclarationStatement [19677,19737]
                    PrimitiveType: double [19677,19683]
                    VariableDeclarationFragment [19684,19736]
                        SimpleName: fraction [19684,19692]
                        MethodInvocation [19695,19736]
                            METHOD_INVOCATION_RECEIVER [19695,19699]
                                SimpleName: Math [19695,19699]
                            SimpleName: abs [19700,19703]
                            METHOD_INVOCATION_ARGUMENTS [19704,19735]
                                InfixExpression [19704,19735]
                                    SimpleName: unscaled [19704,19712]
                                    INFIX_EXPRESSION_OPERATOR: - [19713,19714]
                                    MethodInvocation [19715,19735]
                                        METHOD_INVOCATION_RECEIVER [19715,19719]
                                            SimpleName: Math [19715,19719]
                                        SimpleName: floor [19720,19725]
                                        METHOD_INVOCATION_ARGUMENTS [19726,19734]
                                            SimpleName: unscaled [19726,19734]
                IfStatement [19750,20220]
                    InfixExpression [19754,19768]
                        SimpleName: fraction [19754,19762]
                        INFIX_EXPRESSION_OPERATOR: > [19763,19764]
                        NumberLiteral: 0.5 [19765,19768]
                    Block [19770,19833]
                        ExpressionStatement [19788,19819]
                            Assignment [19788,19818]
                                SimpleName: unscaled [19788,19796]
                                ASSIGNMENT_OPERATOR: = [19797,19798]
                                MethodInvocation [19799,19818]
                                    METHOD_INVOCATION_RECEIVER [19799,19803]
                                        SimpleName: Math [19799,19803]
                                    SimpleName: ceil [19804,19808]
                                    METHOD_INVOCATION_ARGUMENTS [19809,19817]
                                        SimpleName: unscaled [19809,19817]
                    IfStatement [19839,20220]
                        InfixExpression [19843,19857]
                            SimpleName: fraction [19843,19851]
                            INFIX_EXPRESSION_OPERATOR: < [19852,19853]
                            NumberLiteral: 0.5 [19854,19857]
                        Block [19859,19923]
                            ExpressionStatement [19877,19909]
                                Assignment [19877,19908]
                                    SimpleName: unscaled [19877,19885]
                                    ASSIGNMENT_OPERATOR: = [19886,19887]
                                    MethodInvocation [19888,19908]
                                        METHOD_INVOCATION_RECEIVER [19888,19892]
                                            SimpleName: Math [19888,19892]
                                        SimpleName: floor [19893,19898]
                                        METHOD_INVOCATION_ARGUMENTS [19899,19907]
                                            SimpleName: unscaled [19899,19907]
                        Block [19929,20220]
                            IfStatement [19947,20206]
                                InfixExpression [19951,20040]
                                    InfixExpression [19951,19977]
                                        MethodInvocation [19951,19971]
                                            METHOD_INVOCATION_RECEIVER [19951,19955]
                                                SimpleName: Math [19951,19955]
                                            SimpleName: floor [19956,19961]
                                            METHOD_INVOCATION_ARGUMENTS [19962,19970]
                                                SimpleName: unscaled [19962,19970]
                                        INFIX_EXPRESSION_OPERATOR: / [19972,19973]
                                        NumberLiteral: 2.0 [19974,19977]
                                    INFIX_EXPRESSION_OPERATOR: == [19978,19980]
                                    MethodInvocation [19981,20040]
                                        METHOD_INVOCATION_RECEIVER [19981,19985]
                                            SimpleName: Math [19981,19985]
                                        SimpleName: floor [19986,19991]
                                        METHOD_INVOCATION_ARGUMENTS [19992,20039]
                                            InfixExpression [19992,20039]
                                                MethodInvocation [19992,20033]
                                                    METHOD_INVOCATION_RECEIVER [19992,19996]
                                                        SimpleName: Math [19992,19996]
                                                    SimpleName: floor [20018,20023]
                                                    METHOD_INVOCATION_ARGUMENTS [20024,20032]
                                                        SimpleName: unscaled [20024,20032]
                                                INFIX_EXPRESSION_OPERATOR: / [20034,20035]
                                                NumberLiteral: 2.0 [20036,20039]
                                Block [20042,20122]
                                    ExpressionStatement [20072,20104]
                                        Assignment [20072,20103]
                                            SimpleName: unscaled [20072,20080]
                                            ASSIGNMENT_OPERATOR: = [20081,20082]
                                            MethodInvocation [20083,20103]
                                                METHOD_INVOCATION_RECEIVER [20083,20087]
                                                    SimpleName: Math [20083,20087]
                                                SimpleName: floor [20088,20093]
                                                METHOD_INVOCATION_ARGUMENTS [20094,20102]
                                                    SimpleName: unscaled [20094,20102]
                                Block [20128,20206]
                                    ExpressionStatement [20157,20188]
                                        Assignment [20157,20187]
                                            SimpleName: unscaled [20157,20165]
                                            ASSIGNMENT_OPERATOR: = [20166,20167]
                                            MethodInvocation [20168,20187]
                                                METHOD_INVOCATION_RECEIVER [20168,20172]
                                                    SimpleName: Math [20168,20172]
                                                SimpleName: ceil [20173,20177]
                                                METHOD_INVOCATION_ARGUMENTS [20178,20186]
                                                    SimpleName: unscaled [20178,20186]
                BreakStatement [20233,20239]
            SwitchCase [20258,20289]
                QualifiedName: BigDecimal.ROUND_HALF_UP [20263,20287]
            Block [20290,20560]
                VariableDeclarationStatement [20304,20364]
                    PrimitiveType: double [20304,20310]
                    VariableDeclarationFragment [20311,20363]
                        SimpleName: fraction [20311,20319]
                        MethodInvocation [20322,20363]
                            METHOD_INVOCATION_RECEIVER [20322,20326]
                                SimpleName: Math [20322,20326]
                            SimpleName: abs [20327,20330]
                            METHOD_INVOCATION_ARGUMENTS [20331,20362]
                                InfixExpression [20331,20362]
                                    SimpleName: unscaled [20331,20339]
                                    INFIX_EXPRESSION_OPERATOR: - [20340,20341]
                                    MethodInvocation [20342,20362]
                                        METHOD_INVOCATION_RECEIVER [20342,20346]
                                            SimpleName: Math [20342,20346]
                                        SimpleName: floor [20347,20352]
                                        METHOD_INVOCATION_ARGUMENTS [20353,20361]
                                            SimpleName: unscaled [20353,20361]
                IfStatement [20377,20531]
                    InfixExpression [20381,20396]
                        SimpleName: fraction [20381,20389]
                        INFIX_EXPRESSION_OPERATOR: >= [20390,20392]
                        NumberLiteral: 0.5 [20393,20396]
                    Block [20398,20461]
                        ExpressionStatement [20416,20447]
                            Assignment [20416,20446]
                                SimpleName: unscaled [20416,20424]
                                ASSIGNMENT_OPERATOR: = [20425,20426]
                                MethodInvocation [20427,20446]
                                    METHOD_INVOCATION_RECEIVER [20427,20431]
                                        SimpleName: Math [20427,20431]
                                    SimpleName: ceil [20432,20436]
                                    METHOD_INVOCATION_ARGUMENTS [20437,20445]
                                        SimpleName: unscaled [20437,20445]
                    Block [20467,20531]
                        ExpressionStatement [20485,20517]
                            Assignment [20485,20516]
                                SimpleName: unscaled [20485,20493]
                                ASSIGNMENT_OPERATOR: = [20494,20495]
                                MethodInvocation [20496,20516]
                                    METHOD_INVOCATION_RECEIVER [20496,20500]
                                        SimpleName: Math [20496,20500]
                                    SimpleName: floor [20501,20506]
                                    METHOD_INVOCATION_ARGUMENTS [20507,20515]
                                        SimpleName: unscaled [20507,20515]
                BreakStatement [20544,20550]
            SwitchCase [20569,20604]
                QualifiedName: BigDecimal.ROUND_UNNECESSARY [20574,20602]
            IfStatement [20617,20749]
                InfixExpression [20621,20653]
                    SimpleName: unscaled [20621,20629]
                    INFIX_EXPRESSION_OPERATOR: != [20630,20632]
                    MethodInvocation [20633,20653]
                        METHOD_INVOCATION_RECEIVER [20633,20637]
                            SimpleName: Math [20633,20637]
                        SimpleName: floor [20638,20643]
                        METHOD_INVOCATION_ARGUMENTS [20644,20652]
                            SimpleName: unscaled [20644,20652]
                Block [20655,20749]
                    ThrowStatement [20673,20735]
                        ClassInstanceCreation [20679,20734]
                            SimpleType [20683,20702]
                                SimpleName: ArithmeticException [20683,20702]
                            StringLiteral: "Inexact result from rounding" [20703,20733]
            BreakStatement [20762,20768]
            SwitchCase [20777,20803]
                QualifiedName: BigDecimal.ROUND_UP [20782,20801]
            ExpressionStatement [20816,20847]
                Assignment [20816,20846]
                    SimpleName: unscaled [20816,20824]
                    ASSIGNMENT_OPERATOR: = [20825,20826]
                    MethodInvocation [20827,20846]
                        METHOD_INVOCATION_RECEIVER [20827,20831]
                            SimpleName: Math [20827,20831]
                        SimpleName: ceil [20832,20836]
                        METHOD_INVOCATION_ARGUMENTS [20837,20845]
                            SimpleName: unscaled [20837,20845]
            BreakStatement [20860,20866]
            SwitchCase [20875,20884]
            ThrowStatement [20897,20960]
                ClassInstanceCreation [20903,20959]
                    SimpleType [20907,20931]
                        SimpleName: IllegalArgumentException [20907,20931]
                    StringLiteral: "Invalid rounding method." [20932,20958]
        ReturnStatement [20979,20995]
            SimpleName: unscaled [20986,20994]
to
TypeDeclaration [691,22224]
at 35
===
insert-node
---
Javadoc [21495,22020]
to
MethodDeclaration [3642,4359]
at 0
===
update-node
---
TextElement:  $Revision$ $Date$ [777,795]
replace  $Revision$ $Date$ by  $Revision$ $Date: 2005-07-30 02:25:26 -0500 (Sat, 30 Jul
===
insert-node
---
TextElement: 2005) $ [828,835]
to
TagElement [769,795]
at 1
===
insert-node
---
SuperConstructorInvocation [1421,1429]
to
Block [1402,1409]
at 0
===
move-tree
---
TextElement: <li> The result is small enough to fit into a <code>long</code>.  The [9538,9607]
to
TagElement [9074,9881]
at 7
===
move-tree
---
TextElement: largest value of <code>n</code> for which all coefficients are [9620,9682]
to
TagElement [9074,9881]
at 11
===
move-tree
---
TextElement: <li> The result is small enough to fit into a <code>double</code>. [11466,11532]
to
TagElement [10989,11767]
at 7
===
move-tree
---
TextElement: <li> The result is small enough to fit into a <code>long</code>.  The [14064,14133]
to
TagElement [13712,14407]
at 5
===
move-tree
---
TextElement: <code>double</code>. [15136,15156]
to
TagElement [14950,15649]
at 4
===
insert-tree
---
VariableDeclarationStatement [16838,16860]
    PrimitiveType: double [16838,16844]
    VariableDeclarationFragment [16845,16859]
        SimpleName: sign [16845,16849]
        MethodInvocation [16852,16859]
            SimpleName: sign [16852,16856]
            METHOD_INVOCATION_ARGUMENTS [16857,16858]
                SimpleName: x [16857,16858]
to
Block [2411,2536]
at 0
===
insert-tree
---
VariableDeclarationStatement [16869,16914]
    PrimitiveType: double [16869,16875]
    VariableDeclarationFragment [16876,16913]
        SimpleName: factor [16876,16882]
        InfixExpression [16885,16913]
            MethodInvocation [16885,16906]
                METHOD_INVOCATION_RECEIVER [16885,16889]
                    SimpleName: Math [16885,16889]
                SimpleName: pow [16890,16893]
                METHOD_INVOCATION_ARGUMENTS [16894,16905]
                    NumberLiteral: 10.0 [16894,16898]
                    SimpleName: scale [16900,16905]
            INFIX_EXPRESSION_OPERATOR: * [16907,16908]
            SimpleName: sign [16909,16913]
to
Block [2411,2536]
at 1
===
insert-tree
---
ReturnStatement [16923,16987]
    InfixExpression [16930,16986]
        MethodInvocation [16930,16977]
            SimpleName: roundUnscaled [16930,16943]
            METHOD_INVOCATION_ARGUMENTS [16944,16976]
                InfixExpression [16944,16954]
                    SimpleName: x [16944,16945]
                    INFIX_EXPRESSION_OPERATOR: * [16946,16947]
                    SimpleName: factor [16948,16954]
                SimpleName: sign [16956,16960]
                SimpleName: roundingMethod [16962,16976]
        INFIX_EXPRESSION_OPERATOR: / [16978,16979]
        SimpleName: factor [16980,16986]
to
Block [2411,2536]
at 2
===
insert-tree
---
VariableDeclarationStatement [17998,18019]
    PrimitiveType: float [17998,18003]
    VariableDeclarationFragment [18004,18018]
        SimpleName: sign [18004,18008]
        MethodInvocation [18011,18018]
            SimpleName: sign [18011,18015]
            METHOD_INVOCATION_ARGUMENTS [18016,18017]
                SimpleName: x [18016,18017]
to
Block [3522,3632]
at 0
===
insert-tree
---
VariableDeclarationStatement [18028,18080]
    PrimitiveType: float [18028,18033]
    VariableDeclarationFragment [18034,18079]
        SimpleName: factor [18034,18040]
        InfixExpression [18043,18079]
            CastExpression [18043,18072]
                PrimitiveType: float [18044,18049]
                MethodInvocation [18050,18072]
                    METHOD_INVOCATION_RECEIVER [18050,18054]
                        SimpleName: Math [18050,18054]
                    SimpleName: pow [18055,18058]
                    METHOD_INVOCATION_ARGUMENTS [18059,18071]
                        NumberLiteral: 10.0f [18059,18064]
                        SimpleName: scale [18066,18071]
            INFIX_EXPRESSION_OPERATOR: * [18073,18074]
            SimpleName: sign [18075,18079]
to
Block [3522,3632]
at 1
===
insert-tree
---
ReturnStatement [18089,18160]
    InfixExpression [18096,18159]
        CastExpression [18096,18150]
            PrimitiveType: float [18097,18102]
            MethodInvocation [18103,18150]
                SimpleName: roundUnscaled [18103,18116]
                METHOD_INVOCATION_ARGUMENTS [18117,18149]
                    InfixExpression [18117,18127]
                        SimpleName: x [18117,18118]
                        INFIX_EXPRESSION_OPERATOR: * [18119,18120]
                        SimpleName: factor [18121,18127]
                    SimpleName: sign [18129,18133]
                    SimpleName: roundingMethod [18135,18149]
        INFIX_EXPRESSION_OPERATOR: / [18151,18152]
        SimpleName: factor [18153,18159]
to
Block [3522,3632]
at 2
===
insert-node
---
TagElement [21506,21906]
to
Javadoc [21495,22020]
at 0
===
move-tree
---
TagElement [4077,4105]
    SimpleName: x [4084,4085]
    TextElement:  the value, a double [4085,4105]
to
Javadoc [21495,22020]
at 1
===
move-tree
---
TagElement [4113,4167]
    TextElement:  +1.0, 0.0, or -1.0, depending on the sign of x [4120,4167]
to
Javadoc [21495,22020]
at 2
===
update-node
---
TextElement:  if the result can not be represented as [21324,21364]
replace  if the result can not be represented as by  if the result can not be represented as an
===
update-node
---
TextElement: an int [21372,21378]
replace an int by int
===
update-node
---
TextElement: Returns an exact representation of the [9074,9112]
replace Returns an exact representation of the by Returns an exact representation of the <a
===
update-node
---
TextElement: <a href="http://mathworld.wolfram.com/BinomialCoefficient.html"> [9120,9184]
replace <a href="http://mathworld.wolfram.com/BinomialCoefficient.html"> by href="http://mathworld.wolfram.com/BinomialCoefficient.html"> Binomial
===
update-node
---
TextElement: Binomial Coefficient</a>,  "<code>n choose k</code>", [9192,9245]
replace Binomial Coefficient</a>,  "<code>n choose k</code>", by Coefficient</a>, "<code>n choose k</code>", the number of
===
update-node
---
TextElement: the number of <code>k</code>-element subsets that can be selected from [9253,9323]
replace the number of <code>k</code>-element subsets that can be selected from by <code>k</code>-element subsets that can be selected from an
===
update-node
---
TextElement: an <code>n</code>-element set. [9331,9361]
replace an <code>n</code>-element set. by <code>n</code>-element set.
===
update-node
---
TextElement: <Strong>Preconditions</strong>:<ul> [9380,9415]
replace <Strong>Preconditions</strong>:<ul> by <Strong>Preconditions</strong>:
===
update-node
---
TextElement: <li> The result is small enough to fit into a <code>long</code>.  The [9538,9607]
replace <li> The result is small enough to fit into a <code>long</code>.  The by <ul>
===
update-node
---
TextElement: <code> < Long.MAX_VALUE</code> is 66.  If the computed value [9695,9755]
replace <code> < Long.MAX_VALUE</code> is 66.  If the computed value by <li> The result is small enough to fit into a <code>long</code>. The
===
update-node
---
TextElement: exceeds <code>Long.MAX_VALUE</code> an <code>ArithMeticException [9768,9832]
replace exceeds <code>Long.MAX_VALUE</code> an <code>ArithMeticException by <code> < Long.MAX_VALUE</code> is 66. If the computed value exceeds
===
update-node
---
TextElement: </code> is thrown.</li> [9845,9868]
replace </code> is thrown.</li> by <code>Long.MAX_VALUE</code> an <code>ArithMeticException
===
insert-node
---
TextElement: </code> is [2735,2745]
to
TagElement [9074,9881]
at 14
===
insert-node
---
TextElement: thrown.</li> [2753,2765]
to
TagElement [9074,9881]
at 15
===
update-node
---
TextElement: Returns a <code>double</code> representation of the [10989,11040]
replace Returns a <code>double</code> representation of the by Returns a <code>double</code> representation of the <a
===
update-node
---
TextElement: <a href="http://mathworld.wolfram.com/BinomialCoefficient.html"> [11048,11112]
replace <a href="http://mathworld.wolfram.com/BinomialCoefficient.html"> by href="http://mathworld.wolfram.com/BinomialCoefficient.html"> Binomial
===
update-node
---
TextElement: Binomial Coefficient</a>,  "<code>n choose k</code>", [11120,11173]
replace Binomial Coefficient</a>,  "<code>n choose k</code>", by Coefficient</a>, "<code>n choose k</code>", the number of
===
update-node
---
TextElement: the number of <code>k</code>-element subsets that can be selected from [11181,11251]
replace the number of <code>k</code>-element subsets that can be selected from by <code>k</code>-element subsets that can be selected from an
===
update-node
---
TextElement: an <code>n</code>-element set. [11259,11289]
replace an <code>n</code>-element set. by <code>n</code>-element set.
===
update-node
---
TextElement: <Strong>Preconditions</strong>:<ul> [11308,11343]
replace <Strong>Preconditions</strong>:<ul> by <Strong>Preconditions</strong>:
===
update-node
---
TextElement: <li> The result is small enough to fit into a <code>double</code>. [11466,11532]
replace <li> The result is small enough to fit into a <code>double</code>. by <ul>
===
update-node
---
TextElement: The largest value of <code>n</code> for which all coefficients are [11545,11611]
replace The largest value of <code>n</code> for which all coefficients are by <li> The result is small enough to fit into a <code>double</code>. The
===
update-node
---
TextElement: < Double.MAX_VALUE is 1029.  If the computed value exceeds [11624,11682]
replace < Double.MAX_VALUE is 1029.  If the computed value exceeds by largest value of <code>n</code> for which all coefficients are <
===
update-node
---
TextElement: Double.MAX_VALUE, Double.POSITIVE_INFINITY is returned</li> [11695,11754]
replace Double.MAX_VALUE, Double.POSITIVE_INFINITY is returned</li> by Double.MAX_VALUE is 1029. If the computed value exceeds Double.MAX_VALUE,
===
insert-node
---
TextElement: Double.POSITIVE_INFINITY is returned</li> [4597,4638]
to
TagElement [10989,11767]
at 13
===
update-node
---
TextElement: Returns the natural <code>log</code> of the [12160,12203]
replace Returns the natural <code>log</code> of the by Returns the natural <code>log</code> of the <a
===
update-node
---
TextElement: <a href="http://mathworld.wolfram.com/BinomialCoefficient.html"> [12211,12275]
replace <a href="http://mathworld.wolfram.com/BinomialCoefficient.html"> by href="http://mathworld.wolfram.com/BinomialCoefficient.html"> Binomial
===
update-node
---
TextElement: Binomial Coefficient</a>,  "<code>n choose k</code>", [12283,12336]
replace Binomial Coefficient</a>,  "<code>n choose k</code>", by Coefficient</a>, "<code>n choose k</code>", the number of
===
update-node
---
TextElement: the number of <code>k</code>-element subsets that can be selected from [12344,12414]
replace the number of <code>k</code>-element subsets that can be selected from by <code>k</code>-element subsets that can be selected from an
===
update-node
---
TextElement: an <code>n</code>-element set. [12422,12452]
replace an <code>n</code>-element set. by <code>n</code>-element set.
===
update-node
---
TextElement: <Strong>Preconditions</strong>:<ul> [12471,12506]
replace <Strong>Preconditions</strong>:<ul> by <Strong>Preconditions</strong>:
===
insert-node
---
TextElement: <ul> [5390,5394]
to
TagElement [12160,12634]
at 7
===
update-node
---
TextElement: Returns true iff both arguments are NaN or [17710,17752]
replace Returns true iff both arguments are NaN or by Returns true iff both arguments are NaN or neither is NaN and they are
===
update-node
---
TextElement: neither is NaN and they are equal [17760,17793]
replace neither is NaN and they are equal by equal
===
update-node
---
TextElement: Returns n!.  Shorthand for <code>n</code> [13712,13753]
replace Returns n!.  Shorthand for <code>n</code> by Returns n!. Shorthand for <code>n</code> <a
===
update-node
---
TextElement: <a href="http://mathworld.wolfram.com/Factorial.html"> [13761,13815]
replace <a href="http://mathworld.wolfram.com/Factorial.html"> by href="http://mathworld.wolfram.com/Factorial.html"> Factorial</a>, the
===
update-node
---
TextElement: Factorial</a>, the product of the numbers <code>1,...,n</code>. [13823,13886]
replace Factorial</a>, the product of the numbers <code>1,...,n</code>. by product of the numbers <code>1,...,n</code>.
===
update-node
---
TextElement: <Strong>Preconditions</strong>:<ul> [13912,13947]
replace <Strong>Preconditions</strong>:<ul> by <Strong>Preconditions</strong>:
===
update-node
---
TextElement: <li> The result is small enough to fit into a <code>long</code>.  The [14064,14133]
replace <li> The result is small enough to fit into a <code>long</code>.  The by <ul>
===
update-node
---
TextElement: largest value of <code>n</code> for which <code>n!</code> [14146,14203]
replace largest value of <code>n</code> for which <code>n!</code> by <li> The result is small enough to fit into a <code>long</code>. The
===
update-node
---
TextElement: < Long.MAX_VALUE</code> is 20.  If the computed value [14216,14269]
replace < Long.MAX_VALUE</code> is 20.  If the computed value by largest value of <code>n</code> for which <code>n!</code> <
===
update-node
---
TextElement: exceeds <code>Long.MAX_VALUE</code> an <code>ArithMeticException [14282,14346]
replace exceeds <code>Long.MAX_VALUE</code> an <code>ArithMeticException by Long.MAX_VALUE</code> is 20. If the computed value exceeds <code>Long.MAX_VALUE</code>
===
update-node
---
TextElement: </code> is thrown.</li> [14359,14382]
replace </code> is thrown.</li> by an <code>ArithMeticException </code> is thrown.</li>
===
update-node
---
TextElement: Returns n!.  Shorthand for <code>n</code> [14950,14991]
replace Returns n!.  Shorthand for <code>n</code> by Returns n!. Shorthand for <code>n</code> <a
===
update-node
---
TextElement: <a href="http://mathworld.wolfram.com/Factorial.html"> [14999,15053]
replace <a href="http://mathworld.wolfram.com/Factorial.html"> by href="http://mathworld.wolfram.com/Factorial.html"> Factorial</a>, the
===
update-node
---
TextElement: Factorial</a>, the product of the numbers <code>1,...,n</code> as a [15061,15128]
replace Factorial</a>, the product of the numbers <code>1,...,n</code> as a by product of the numbers <code>1,...,n</code> as a <code>double</code>.
===
update-node
---
TextElement: <code>double</code>. [15136,15156]
replace <code>double</code>. by <Strong>Preconditions</strong>:
===
update-node
---
TextElement: <Strong>Preconditions</strong>:<ul> [15182,15217]
replace <Strong>Preconditions</strong>:<ul> by <ul>
===
update-node
---
TextElement: <li> The result is small enough to fit into a <code>double</code>.  The [15334,15405]
replace <li> The result is small enough to fit into a <code>double</code>.  The by <li> The result is small enough to fit into a <code>double</code>. The
===
update-node
---
TextElement: largest value of <code>n</code> for which <code>n!</code> [15418,15475]
replace largest value of <code>n</code> for which <code>n!</code> by largest value of <code>n</code> for which <code>n!</code> <
===
update-node
---
TextElement: < Double.MAX_VALUE</code> is 170.  If the computed value exceeds [15488,15552]
replace < Double.MAX_VALUE</code> is 170.  If the computed value exceeds by Double.MAX_VALUE</code> is 170. If the computed value exceeds
===
update-node
---
TextElement: <Strong>Preconditions</strong>:<ul> [16073,16108]
replace <Strong>Preconditions</strong>:<ul> by <Strong>Preconditions</strong>:
===
insert-node
---
TextElement: <ul> [9614,9618]
to
TagElement [16018,16230]
at 3
===
update-node
---
TextElement: <p>Gets the greatest common divisor of the absolute value of [18504,18564]
replace <p>Gets the greatest common divisor of the absolute value of by <p>
===
update-node
---
TextElement: two numbers, using the "binary gcd" method which avoids [18572,18627]
replace two numbers, using the "binary gcd" method which avoids by Gets the greatest common divisor of the absolute value of two numbers,
===
update-node
---
TextElement: division and modulo operations.  See Knuth 4.5.2 algorithm B. [18635,18696]
replace division and modulo operations.  See Knuth 4.5.2 algorithm B. by using the "binary gcd" method which avoids division and modulo
===
update-node
---
TextElement: This algorithm is due to Josef Stein (1961).</p> [18704,18752]
replace This algorithm is due to Josef Stein (1961).</p> by operations. See Knuth 4.5.2 algorithm B. This algorithm is due to Josef
===
insert-node
---
TextElement: Stein (1961). [10438,10451]
to
TagElement [18504,18752]
at 4
===
insert-node
---
TextElement: </p> [10459,10463]
to
TagElement [18504,18752]
at 5
===
update-node
---
TextElement:   a non-zero number [18775,18794]
replace   a non-zero number by  a non-zero number
===
update-node
---
TextElement:   a non-zero number [18810,18829]
replace   a non-zero number by  a non-zero number
===
update-node
---
TextElement:   the value to be hashed [17483,17507]
replace   the value to be hashed by  the value to be hashed
===
update-node
---
TextElement: For a byte value x, this method returns (byte)(+1) if x >= 0 [7845,7905]
replace For a byte value x, this method returns (byte)(+1) if x >= 0 by For a byte value x, this method returns (byte)(+1) if x >= 0 and
===
update-node
---
TextElement: and (byte)(-1) if x < 0. [7913,7937]
replace and (byte)(-1) if x < 0. by (byte)(-1) if x < 0.
===
update-node
---
TextElement: For a double precision value x, this method returns +1.0 if x >= 0 [6924,6990]
replace For a double precision value x, this method returns +1.0 if x >= 0 by For a double precision value x, this method returns +1.0 if x >= 0 and
===
update-node
---
TextElement: and -1.0 if x < 0.   Returns <code>NaN</code>  [6998,7044]
replace and -1.0 if x < 0.   Returns <code>NaN</code>  by -1.0 if x < 0. Returns <code>NaN</code> if <code>x</code> is
===
update-node
---
TextElement: if <code>x</code> is <code>NaN</code>. [7052,7090]
replace if <code>x</code> is <code>NaN</code>. by <code>NaN</code>.
===
update-node
---
TextElement: For a float value x, this method returns +1.0F if x >= 0 [7389,7445]
replace For a float value x, this method returns +1.0F if x >= 0 by For a float value x, this method returns +1.0F if x >= 0 and -1.0F if x <
===
update-node
---
TextElement: and -1.0F if x < 0.   Returns <code>NaN</code>  [7453,7500]
replace and -1.0F if x < 0.   Returns <code>NaN</code>  by 0. Returns <code>NaN</code> if <code>x</code> is <code>NaN</code>.
===
update-node
---
TextElement: For an int value x, this method returns +1 if x >= 0 [8495,8547]
replace For an int value x, this method returns +1 if x >= 0 by For an int value x, this method returns +1 if x >= 0 and -1 if x < 0.
===
update-node
---
TextElement: For a long value x, this method returns +1L if x >= 0 [8780,8833]
replace For a long value x, this method returns +1L if x >= 0 by For a long value x, this method returns +1L if x >= 0 and -1L if x < 0.
===
update-node
---
TextElement: For a short value x, this method returns (short)(+1) if x >= 0 [8166,8228]
replace For a short value x, this method returns (short)(+1) if x >= 0 by For a short value x, this method returns (short)(+1) if x >= 0 and
===
update-node
---
TextElement: and (short)(-1) if x < 0. [8236,8261]
replace and (short)(-1) if x < 0. by (short)(-1) if x < 0.
===
update-node
---
TextElement:  if the result can not be represented as [20754,20794]
replace  if the result can not be represented as by  if the result can not be represented as an
===
update-node
---
TextElement: an int [20830,20836]
replace an int by int
===
update-node
---
TextElement: Round the given value to the specified number of decimal places.  The [1430,1499]
replace Round the given value to the specified number of decimal places.  The by Round the given value to the specified number of decimal places. The
===
update-node
---
TextElement: Round the given value to the specified number of decimal places.  The [1881,1950]
replace Round the given value to the specified number of decimal places.  The by Round the given value to the specified number of decimal places. The
===
update-node
---
TextElement: .  [2263,2265]
replace .  by .
===
update-node
---
TextElement: Round the given value to the specified number of decimal places.  The [2557,2626]
replace Round the given value to the specified number of decimal places.  The by Round the given value to the specified number of decimal places. The
===
update-node
---
TextElement: Round the given value to the specified number of decimal places.  The [3007,3076]
replace Round the given value to the specified number of decimal places.  The by Round the given value to the specified number of decimal places. The
===
update-node
---
TextElement: .  [3389,3391]
replace .  by .
===
update-node
---
TextElement: Returns the <a href="http://mathworld.wolfram.com/Sign.html"> [5010,5071]
replace Returns the <a href="http://mathworld.wolfram.com/Sign.html"> by Returns the <a href="http://mathworld.wolfram.com/Sign.html"> sign</a>
===
update-node
---
TextElement: sign</a> for byte value <code>x</code>. [5079,5118]
replace sign</a> for byte value <code>x</code>. by for byte value <code>x</code>.
===
update-node
---
TextElement: For a byte value x, this method returns (byte)(+1) if x > 0, (byte)(0) [5144,5214]
replace For a byte value x, this method returns (byte)(+1) if x > 0, (byte)(0) by For a byte value x, this method returns (byte)(+1) if x > 0, (byte)(0) if
===
update-node
---
TextElement: if x = 0, and (byte)(-1) if x < 0. [5222,5256]
replace if x = 0, and (byte)(-1) if x < 0. by x = 0, and (byte)(-1) if x < 0.
===
insert-node
---
TextElement: Returns the <a href="http://mathworld.wolfram.com/Sign.html"> sign</a> [21506,21576]
to
TagElement [21506,21906]
at 0
===
insert-node
---
TextElement: for double precision <code>x</code>. [21584,21620]
to
TagElement [21506,21906]
at 1
===
move-tree
---
TextElement: <p> [3782,3785]
to
TagElement [21506,21906]
at 2
===
insert-node
---
TextElement: For a double value <code>x</code>, this method returns [21639,21693]
to
TagElement [21506,21906]
at 3
===
insert-node
---
TextElement: <code>+1.0</code> if <code>x > 0</code>, <code>0.0</code> if [21701,21761]
to
TagElement [21506,21906]
at 4
===
insert-node
---
TextElement: <code>x = 0.0</code>, and <code>-1.0</code> if <code>x < 0</code>. [21769,21835]
to
TagElement [21506,21906]
at 5
===
insert-node
---
TextElement: Returns <code>NaN</code> if <code>x</code> is <code>NaN</code>. [21843,21906]
to
TagElement [21506,21906]
at 6
===
update-node
---
TextElement: Returns the <a href="http://mathworld.wolfram.com/Sign.html"> [4380,4441]
replace Returns the <a href="http://mathworld.wolfram.com/Sign.html"> by Returns the <a href="http://mathworld.wolfram.com/Sign.html"> sign</a>
===
update-node
---
TextElement: sign</a> for float value <code>x</code>. [4449,4489]
replace sign</a> for float value <code>x</code>. by for float value <code>x</code>.
===
update-node
---
TextElement: For a float value x, this method returns +1.0F if x > 0, 0.0F if [4515,4579]
replace For a float value x, this method returns +1.0F if x > 0, 0.0F if by For a float value x, this method returns +1.0F if x > 0, 0.0F if x =
===
update-node
---
TextElement: x = 0.0F, and -1.0F if x < 0.  Returns <code>NaN</code>  [4587,4643]
replace x = 0.0F, and -1.0F if x < 0.  Returns <code>NaN</code>  by 0.0F, and -1.0F if x < 0. Returns <code>NaN</code> if <code>x</code>
===
update-node
---
TextElement: if <code>x</code> is <code>NaN</code>. [4651,4689]
replace if <code>x</code> is <code>NaN</code>. by is <code>NaN</code>.
===
update-node
---
TextElement: Returns the <a href="http://mathworld.wolfram.com/Sign.html"> [6024,6085]
replace Returns the <a href="http://mathworld.wolfram.com/Sign.html"> by Returns the <a href="http://mathworld.wolfram.com/Sign.html"> sign</a>
===
update-node
---
TextElement: sign</a> for int value <code>x</code>. [6093,6131]
replace sign</a> for int value <code>x</code>. by for int value <code>x</code>.
===
update-node
---
TextElement: For an int value x, this method returns +1 if x > 0, 0 if x = 0, [6157,6221]
replace For an int value x, this method returns +1 if x > 0, 0 if x = 0, by For an int value x, this method returns +1 if x > 0, 0 if x = 0, and -1
===
update-node
---
TextElement: and -1 if x < 0. [6229,6245]
replace and -1 if x < 0. by if x < 0.
===
update-node
---
TextElement: Returns the <a href="http://mathworld.wolfram.com/Sign.html"> [6467,6528]
replace Returns the <a href="http://mathworld.wolfram.com/Sign.html"> by Returns the <a href="http://mathworld.wolfram.com/Sign.html"> sign</a>
===
update-node
---
TextElement: sign</a> for long value <code>x</code>. [6536,6575]
replace sign</a> for long value <code>x</code>. by for long value <code>x</code>.
===
update-node
---
TextElement: For a long value x, this method returns +1L if x > 0, 0L if x = 0, [6601,6667]
replace For a long value x, this method returns +1L if x > 0, 0L if x = 0, by For a long value x, this method returns +1L if x > 0, 0L if x = 0, and
===
update-node
---
TextElement: and -1L if x < 0. [6675,6692]
replace and -1L if x < 0. by -1L if x < 0.
===
update-node
---
TextElement: Returns the <a href="http://mathworld.wolfram.com/Sign.html"> [5508,5569]
replace Returns the <a href="http://mathworld.wolfram.com/Sign.html"> by Returns the <a href="http://mathworld.wolfram.com/Sign.html"> sign</a>
===
update-node
---
TextElement: sign</a> for short value <code>x</code>. [5577,5617]
replace sign</a> for short value <code>x</code>. by for short value <code>x</code>.
===
update-node
---
TextElement:  (short)(+1), (short)(0), or (short)(-1), depending on the sign [5816,5879]
replace  (short)(+1), (short)(0), or (short)(-1), depending on the sign by  (short)(+1), (short)(0), or (short)(-1), depending on the sign of
===
update-node
---
TextElement: of x [5887,5891]
replace of x by x
===
update-node
---
TextElement:  if the result can not be represented as [21881,21921]
replace  if the result can not be represented as by  if the result can not be represented as an
===
update-node
---
TextElement: an int [21929,21935]
replace an int by int
===
delete-node
---
TextElement: if <code>x</code> is <code>NaN</code>. [7508,7546]
===
===
delete-node
---
TextElement: and -1 if x < 0. [8555,8571]
===
===
delete-node
---
TextElement: and -1L if x < 0. [8841,8858]
===
===
delete-tree
---
ReturnStatement [2421,2530]
    MethodInvocation [2428,2529]
        METHOD_INVOCATION_RECEIVER [2428,2502]
            ParenthesizedExpression [2428,2502]
                MethodInvocation [2429,2501]
                    METHOD_INVOCATION_RECEIVER [2429,2469]
                        ClassInstanceCreation [2429,2469]
                            SimpleType [2433,2443]
                                SimpleName: BigDecimal [2433,2443]
                            MethodInvocation [2444,2468]
                                METHOD_INVOCATION_RECEIVER [2444,2457]
                                    ClassInstanceCreation [2444,2457]
                                        SimpleType [2448,2454]
                                            SimpleName: Double [2448,2454]
                                        SimpleName: x [2455,2456]
                                SimpleName: toString [2458,2466]
                    SimpleName: setScale [2470,2478]
                    METHOD_INVOCATION_ARGUMENTS [2479,2500]
                        SimpleName: scale [2479,2484]
                        SimpleName: roundingMethod [2486,2500]
        SimpleName: doubleValue [2516,2527]
===
delete-tree
---
ReturnStatement [3532,3626]
    MethodInvocation [3539,3625]
        METHOD_INVOCATION_RECEIVER [3539,3612]
            ParenthesizedExpression [3539,3612]
                MethodInvocation [3540,3611]
                    METHOD_INVOCATION_RECEIVER [3540,3579]
                        ClassInstanceCreation [3540,3579]
                            SimpleType [3544,3554]
                                SimpleName: BigDecimal [3544,3554]
                            MethodInvocation [3555,3578]
                                METHOD_INVOCATION_RECEIVER [3555,3567]
                                    ClassInstanceCreation [3555,3567]
                                        SimpleType [3559,3564]
                                            SimpleName: Float [3559,3564]
                                        SimpleName: x [3565,3566]
                                SimpleName: toString [3568,3576]
                    SimpleName: setScale [3580,3588]
                    METHOD_INVOCATION_ARGUMENTS [3589,3610]
                        SimpleName: scale [3589,3594]
                        SimpleName: roundingMethod [3596,3610]
        SimpleName: floatValue [3613,3623]
===
delete-node
---
TextElement: Returns the <a href="http://mathworld.wolfram.com/Sign.html"> [3653,3714]
===
===
delete-node
---
TextElement: sign</a> for double precision <code>x</code>. [3722,3767]
===
===
delete-node
---
TextElement: For a double value <code>x</code>, this method returns <code>+1.0</code> [3793,3865]
===
===
delete-node
---
TextElement: if <code>x > 0</code>, <code>0.0</code> if <code>x = 0.0</code>, [3873,3937]
===
===
delete-node
---
TextElement: and <code>-1.0</code> if <code>x < 0</code>.  Returns <code>NaN</code>  [3945,4016]
===
===
delete-node
---
TextElement: if <code>x</code> is <code>NaN</code>. [4024,4062]
===
===
delete-node
---
TagElement [3653,4062]
===
===
delete-node
---
Javadoc [3642,4175]
===
