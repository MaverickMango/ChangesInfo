{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "data/changesInfo/",
  "timeoutSecond": 300,
  "proj": "Math",
  "id": "63",
  "workingDir": "../bugs/Math_63_buggy",
  "inducingCommit": "b1ade04fc274a2030fcf1df2c760755eeb83bf1b",
  "originalCommit": "d8ae9b465e22f61a8bfe7fc91732564fe0d4ffdd",
  "bug_name": "Math_63",
  "derive": "defects4j",
  "original_fixing_commit": "d2a5bc02c002acfa220ce8bad23b9e8af137f47d",
  "buildFiles_changed": false,
  "inducing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/math/util/MathUtils.java",
        "src/java/org/apache/commons/math/util/MathUtils.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "sign",
            "gcd",
            "round",
            "sign",
            "cosh",
            "hash",
            "indicator",
            "factorial",
            "lcm",
            "indicator",
            "factorialLog",
            "MathUtils",
            "factorialDouble",
            "binomialCoefficientDouble",
            "indicator",
            "equals",
            "addAndCheck",
            "sign",
            "binomialCoefficient",
            "sign",
            "binomialCoefficientLog",
            "round",
            "sign",
            "mulAndCheck",
            "indicator",
            "indicator",
            "sign",
            "subAndCheck",
            "round",
            "indicator",
            "round",
            "sinh"
          ],
          "num": 32
        },
        {
          "qualified_names": [
            "equals",
            "indicator",
            "sinh",
            "factorialLog",
            "round",
            "sign",
            "addAndCheck",
            "hash",
            "round",
            "sign",
            "cosh",
            "indicator",
            "sign",
            "indicator",
            "round",
            "subAndCheck",
            "indicator",
            "round",
            "sign",
            "binomialCoefficient",
            "factorial",
            "binomialCoefficientDouble",
            "indicator",
            "roundUnscaled",
            "sign",
            "sign",
            "gcd",
            "mulAndCheck",
            "binomialCoefficientLog",
            "MathUtils",
            "indicator",
            "lcm",
            "factorialDouble"
          ],
          "num": 33
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "23",
            "24",
            "27",
            "28",
            "29",
            "30",
            "32",
            "33",
            "34",
            "35",
            "36",
            "37",
            "38",
            "39",
            "41",
            "42",
            "44",
            "45",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57",
            "58",
            "59",
            "60",
            "61",
            "65",
            "66",
            "67",
            "68",
            "69",
            "70",
            "71",
            "72",
            "75",
            "76",
            "77",
            "78",
            "79",
            "80",
            "81",
            "82",
            "83",
            "84",
            "85",
            "86",
            "87",
            "88",
            "89",
            "90",
            "91",
            "95",
            "96",
            "97",
            "98",
            "99",
            "100",
            "101",
            "102",
            "103",
            "104",
            "105",
            "106",
            "107",
            "108",
            "109",
            "110",
            "111",
            "112",
            "114",
            "115",
            "116",
            "117",
            "118",
            "119",
            "120",
            "121",
            "122",
            "123",
            "124",
            "125",
            "126",
            "127",
            "128",
            "129",
            "130",
            "131",
            "132",
            "133",
            "134",
            "135",
            "136",
            "137",
            "138",
            "139",
            "140",
            "141",
            "142",
            "143",
            "144",
            "145",
            "146",
            "147",
            "148",
            "149",
            "150",
            "151",
            "152",
            "153",
            "154",
            "155",
            "156",
            "157",
            "158",
            "159",
            "160",
            "161",
            "162",
            "163",
            "164",
            "165",
            "166",
            "167",
            "168",
            "169",
            "170",
            "171",
            "172",
            "173",
            "174",
            "175",
            "176",
            "177",
            "178",
            "179",
            "180",
            "181",
            "182",
            "183",
            "184",
            "185",
            "186",
            "187",
            "188",
            "189",
            "190",
            "191",
            "192",
            "193",
            "194",
            "195",
            "196",
            "197",
            "198",
            "199",
            "200",
            "201",
            "202",
            "203",
            "204",
            "205",
            "206",
            "207",
            "208",
            "209",
            "210",
            "211",
            "212",
            "213",
            "214",
            "215",
            "216",
            "217",
            "218",
            "219",
            "220",
            "221",
            "222",
            "223",
            "224",
            "225",
            "226",
            "227",
            "228",
            "229",
            "230",
            "231",
            "232",
            "233",
            "234",
            "235",
            "236",
            "237",
            "238",
            "239",
            "240",
            "241",
            "242",
            "243",
            "244",
            "245",
            "246",
            "247",
            "248",
            "249",
            "250",
            "251",
            "252",
            "253",
            "254",
            "255",
            "256",
            "257",
            "258",
            "259",
            "260",
            "261",
            "262",
            "263",
            "264",
            "265",
            "266",
            "267",
            "268",
            "269",
            "270",
            "271",
            "272",
            "273",
            "274",
            "275",
            "276",
            "277",
            "278",
            "279",
            "280",
            "281",
            "282",
            "283",
            "284",
            "285",
            "286",
            "287",
            "288",
            "289",
            "290",
            "292",
            "293",
            "294",
            "295",
            "296",
            "297",
            "299",
            "310",
            "314",
            "322",
            "326",
            "330",
            "332",
            "333",
            "334",
            "335",
            "336",
            "338",
            "340",
            "341",
            "342",
            "343",
            "344",
            "346",
            "355",
            "357",
            "358",
            "359",
            "360",
            "361",
            "363",
            "365",
            "367",
            "376",
            "380",
            "386",
            "389",
            "392",
            "394",
            "397",
            "399",
            "402",
            "404",
            "405",
            "406",
            "407",
            "409",
            "411",
            "412",
            "413",
            "414",
            "415",
            "416",
            "419",
            "430",
            "434",
            "436",
            "437",
            "438",
            "439",
            "440",
            "442",
            "444",
            "445",
            "446",
            "447",
            "448",
            "451",
            "462",
            "466",
            "468",
            "470",
            "481",
            "485",
            "486",
            "487",
            "488",
            "489",
            "490",
            "491",
            "492",
            "493",
            "494",
            "495",
            "496",
            "497",
            "498",
            "499",
            "500",
            "501",
            "502",
            "503",
            "504",
            "505",
            "506",
            "507",
            "508",
            "509",
            "510",
            "511",
            "512",
            "513",
            "514",
            "515",
            "516",
            "517",
            "518",
            "519",
            "520",
            "521",
            "522",
            "523",
            "524",
            "525",
            "526",
            "527",
            "528",
            "529",
            "532",
            "534",
            "535",
            "536",
            "537",
            "538",
            "539",
            "540",
            "541",
            "542",
            "543",
            "544",
            "545",
            "546",
            "547",
            "548",
            "549",
            "550",
            "551",
            "564",
            "565",
            "567",
            "568",
            "569",
            "571",
            "575",
            "576",
            "582",
            "583",
            "586",
            "592",
            "595",
            "596",
            "599",
            "605",
            "606",
            "610",
            "611",
            "612",
            "617",
            "618",
            "619",
            "621",
            "622",
            "623",
            "624",
            "625",
            "628",
            "629",
            "630",
            "631",
            "632",
            "633",
            "634",
            "636",
            "637",
            "643",
            "644",
            "648",
            "649",
            "650"
          ],
          "num": 442
        },
        {
          "qualified_names": [
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "18",
            "19",
            "20",
            "23",
            "25",
            "26",
            "28",
            "29",
            "30",
            "31",
            "32",
            "34",
            "35",
            "36",
            "37",
            "38",
            "39",
            "40",
            "41",
            "46",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "59",
            "60",
            "61",
            "62",
            "63",
            "64",
            "68",
            "69",
            "70",
            "71",
            "72",
            "74",
            "75",
            "77",
            "78",
            "79",
            "80",
            "81",
            "82",
            "83",
            "85",
            "96",
            "100",
            "108",
            "112",
            "116",
            "118",
            "119",
            "120",
            "121",
            "122",
            "124",
            "125",
            "127",
            "128",
            "129",
            "130",
            "131",
            "133",
            "142",
            "144",
            "145",
            "146",
            "147",
            "148",
            "150",
            "151",
            "153",
            "155",
            "164",
            "168",
            "174",
            "177",
            "180",
            "182",
            "185",
            "187",
            "190",
            "192",
            "193",
            "194",
            "195",
            "196",
            "197",
            "198",
            "199",
            "200",
            "201",
            "202",
            "203",
            "204",
            "205",
            "206",
            "207",
            "208",
            "209",
            "210",
            "211",
            "212",
            "213",
            "214",
            "215",
            "216",
            "217",
            "219",
            "220",
            "222",
            "223",
            "224",
            "225",
            "226",
            "229",
            "240",
            "244",
            "246",
            "247",
            "248",
            "250",
            "251",
            "253",
            "254",
            "255",
            "256",
            "257",
            "260",
            "271",
            "275",
            "276",
            "278",
            "280",
            "291",
            "297",
            "298",
            "299",
            "300",
            "301",
            "302",
            "304",
            "305",
            "318",
            "319",
            "320",
            "321",
            "322",
            "323",
            "325",
            "326",
            "327",
            "328",
            "329",
            "330",
            "332",
            "336",
            "337",
            "343",
            "344",
            "347",
            "353",
            "356",
            "357",
            "360",
            "361",
            "362",
            "363",
            "364",
            "365",
            "366",
            "367",
            "368",
            "369",
            "370",
            "371",
            "372",
            "373",
            "374",
            "375",
            "376",
            "377",
            "378",
            "379",
            "380",
            "381",
            "382",
            "383",
            "384",
            "385",
            "386",
            "387",
            "388",
            "389",
            "390",
            "391",
            "392",
            "393",
            "394",
            "395",
            "396",
            "397",
            "398",
            "399",
            "400",
            "401",
            "402",
            "403",
            "404",
            "405",
            "406",
            "407",
            "408",
            "409",
            "410",
            "411",
            "412",
            "413",
            "414",
            "415",
            "416",
            "417",
            "418",
            "419",
            "420",
            "421",
            "422",
            "423",
            "424",
            "425",
            "426",
            "427",
            "428",
            "429",
            "430",
            "431",
            "432",
            "433",
            "434",
            "435",
            "436",
            "437",
            "438",
            "439",
            "440",
            "441",
            "442",
            "443",
            "444",
            "445",
            "446",
            "447",
            "448",
            "449",
            "450",
            "451",
            "452",
            "453",
            "454",
            "455",
            "461",
            "462",
            "466",
            "467",
            "472",
            "473",
            "474",
            "475",
            "477",
            "478",
            "479",
            "482",
            "483",
            "485",
            "486",
            "487",
            "488",
            "489",
            "490",
            "491",
            "492",
            "493",
            "494",
            "495",
            "496",
            "497",
            "498",
            "499",
            "500",
            "501",
            "502",
            "503",
            "504",
            "505",
            "506",
            "507",
            "508",
            "509",
            "510",
            "511",
            "512",
            "513",
            "514",
            "515",
            "516",
            "517",
            "518",
            "519",
            "520",
            "521",
            "522",
            "523",
            "524",
            "525",
            "526",
            "527",
            "528",
            "529",
            "530",
            "531",
            "532",
            "533",
            "534",
            "535",
            "536",
            "537",
            "538",
            "539",
            "540",
            "541",
            "542",
            "543",
            "544",
            "545",
            "546",
            "547",
            "548",
            "549",
            "550",
            "551",
            "552",
            "553",
            "554",
            "555",
            "556",
            "557",
            "558",
            "559",
            "560",
            "561",
            "562",
            "563",
            "564",
            "565",
            "566",
            "567",
            "568",
            "569",
            "570",
            "571",
            "572",
            "573",
            "574",
            "575",
            "576",
            "577",
            "578",
            "579",
            "580",
            "581",
            "582",
            "583",
            "584",
            "585",
            "586",
            "587",
            "588",
            "589",
            "590",
            "591",
            "592",
            "593",
            "594",
            "595",
            "596",
            "597",
            "598",
            "599",
            "600",
            "601",
            "602",
            "603",
            "604",
            "605",
            "606",
            "607",
            "608",
            "609",
            "610",
            "611",
            "612",
            "613",
            "614",
            "615",
            "616",
            "617",
            "618",
            "619",
            "620",
            "621",
            "622",
            "623",
            "624",
            "625",
            "626",
            "627",
            "628",
            "629",
            "630",
            "631",
            "632",
            "633",
            "634",
            "635",
            "636",
            "637",
            "638",
            "639",
            "640",
            "641",
            "642",
            "643",
            "644",
            "645",
            "646",
            "647",
            "648",
            "649",
            "650",
            "651",
            "652",
            "653",
            "654",
            "655",
            "656",
            "657",
            "658",
            "659",
            "660",
            "661",
            "662",
            "663",
            "664",
            "665",
            "666",
            "667",
            "668",
            "669",
            "670",
            "671",
            "672",
            "673",
            "674",
            "675",
            "676",
            "677",
            "678",
            "679",
            "680",
            "681",
            "682",
            "683",
            "684",
            "685",
            "686",
            "687",
            "688",
            "689",
            "690",
            "691",
            "692",
            "693",
            "694",
            "695",
            "696",
            "697",
            "698",
            "699",
            "700",
            "701",
            "702",
            "703",
            "704",
            "705",
            "706",
            "707",
            "708",
            "709",
            "710",
            "711",
            "712",
            "713",
            "714",
            "715",
            "716",
            "717",
            "718",
            "719",
            "720",
            "726",
            "727",
            "731",
            "732"
          ],
          "num": 524
        }
      ],
      "diff": "diff --git a/src/java/org/apache/commons/math/util/MathUtils.java b/src/java/org/apache/commons/math/util/MathUtils.java\nindex 3078652..6aba556 100644\n--- a/src/java/org/apache/commons/math/util/MathUtils.java\n+++ b/src/java/org/apache/commons/math/util/MathUtils.java\n@@ -1,17 +1,12 @@\n /*\n- * Copyright 2003-2005 The Apache Software Foundation.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n+ * Copyright 2003-2005 The Apache Software Foundation. Licensed under the Apache\n+ * License, Version 2.0 (the \"License\"); you may not use this file except in\n+ * compliance with the License. You may obtain a copy of the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law\n+ * or agreed to in writing, software distributed under the License is\n+ * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the specific language\n+ * governing permissions and limitations under the License.\n  */\n \n package org.apache.commons.math.util;\n@@ -20,283 +15,74 @@\n \n /**\n  * Some useful additions to the built-in functions in {@link Math}.\n- *\n- * @version $Revision$ $Date$\n+ * \n+ * @version $Revision$ $Date: 2005-07-30 02:25:26 -0500 (Sat, 30 Jul\n+ *          2005) $\n  */\n public final class MathUtils {\n-    \n-    /** 0.0 cast as a byte. */\n-    private static final byte ZB \u003d (byte) 0;\n-    \n+\n     /** -1.0 cast as a byte. */\n-    private static final byte NB \u003d (byte) -1;\n-    \n-    /** 1.0 cast as a byte. */\n-    private static final byte PB \u003d (byte) 1;\n-    \n-    /** 0.0 cast as a short. */\n-    private static final short ZS \u003d (short) 0;\n-    \n+    private static final byte  NB \u003d (byte)-1;\n+\n     /** -1.0 cast as a short. */\n-    private static final short NS \u003d (short) -1;\n-    \n+    private static final short NS \u003d (short)-1;\n+\n+    /** 1.0 cast as a byte. */\n+    private static final byte  PB \u003d (byte)1;\n+\n     /** 1.0 cast as a short. */\n-    private static final short PS \u003d (short) 1;\n-    \n+    private static final short PS \u003d (short)1;\n+\n+    /** 0.0 cast as a byte. */\n+    private static final byte  ZB \u003d (byte)0;\n+\n+    /** 0.0 cast as a short. */\n+    private static final short ZS \u003d (short)0;\n+\n     /**\n      * Private Constructor\n      */\n     private MathUtils() {\n-    }\n-    \n-    /**\n-     * Round the given value to the specified number of decimal places.  The\n-     * value is rounded using the {@link BigDecimal#ROUND_HALF_UP} method.\n-     * @param x the value to round.\n-     * @param scale the number of digits to the right of the decimal point.\n-     * @return the rounded value.\n-     * @since 1.1\n-     */\n-    public static double round(double x, int scale) {\n-        return round(x, scale, BigDecimal.ROUND_HALF_UP);\n+        super();\n     }\n \n     /**\n-     * Round the given value to the specified number of decimal places.  The\n-     * value is rounded using the given method which is any method defined in\n-     * {@link BigDecimal}.\n-     * @param x the value to round.\n-     * @param scale the number of digits to the right of the decimal point.\n-     * @param roundingMethod the rounding method as defined in\n-     *        {@link BigDecimal}. \n-     * @return the rounded value.\n+     * Add two integers, checking for overflow.\n+     * \n+     * @param x an addend\n+     * @param y an addend\n+     * @return the sum \u003ccode\u003ex+y\u003c/code\u003e\n+     * @throws ArithmeticException if the result can not be represented as an\n+     *         int\n      * @since 1.1\n      */\n-    public static double round(\n-        double x, int scale, int roundingMethod)\n-    {\n-        return (new BigDecimal(new Double(x).toString()).setScale(scale, roundingMethod))\n-            .doubleValue();\n-    }\n-    \n-    /**\n-     * Round the given value to the specified number of decimal places.  The\n-     * value is rounding using the {@link BigDecimal#ROUND_HALF_UP} method.\n-     * @param x the value to round.\n-     * @param scale the number of digits to the right of the decimal point.\n-     * @return the rounded value.\n-     * @since 1.1\n-     */\n-    public static float round(float x, int scale) {\n-        return round(x, scale, BigDecimal.ROUND_HALF_UP);\n+    public static int addAndCheck(int x, int y) {\n+        long s \u003d (long)x + (long)y;\n+        if (s \u003c Integer.MIN_VALUE || s \u003e Integer.MAX_VALUE) {\n+            throw new ArithmeticException(\"overflow: add\");\n+        }\n+        return (int)s;\n     }\n \n     /**\n-     * Round the given value to the specified number of decimal places.  The\n-     * value is rounded using the given method which is any method defined in\n-     * {@link BigDecimal}.\n-     * @param x the value to round.\n-     * @param scale the number of digits to the right of the decimal point.\n-     * @param roundingMethod the rounding method as defined in\n-     *        {@link BigDecimal}. \n-     * @return the rounded value.\n-     * @since 1.1\n-     */\n-    public static float round(float x, int scale, int roundingMethod) {\n-        return (new BigDecimal(new Float(x).toString()).setScale(scale, roundingMethod)).floatValue();\n-    }\n-    \n-    /**\n-     * Returns the \u003ca href\u003d\"http://mathworld.wolfram.com/Sign.html\"\u003e\n-     * sign\u003c/a\u003e for double precision \u003ccode\u003ex\u003c/code\u003e.\n-     *\n+     * Returns an exact representation of the \u003ca\n+     * href\u003d\"http://mathworld.wolfram.com/BinomialCoefficient.html\"\u003e Binomial\n+     * Coefficient\u003c/a\u003e, \"\u003ccode\u003en choose k\u003c/code\u003e\", the number of\n+     * \u003ccode\u003ek\u003c/code\u003e-element subsets that can be selected from an\n+     * \u003ccode\u003en\u003c/code\u003e-element set.\n      * \u003cp\u003e\n-     * For a double value \u003ccode\u003ex\u003c/code\u003e, this method returns \u003ccode\u003e+1.0\u003c/code\u003e\n-     * if \u003ccode\u003ex \u003e 0\u003c/code\u003e, \u003ccode\u003e0.0\u003c/code\u003e if \u003ccode\u003ex \u003d 0.0\u003c/code\u003e,\n-     * and \u003ccode\u003e-1.0\u003c/code\u003e if \u003ccode\u003ex \u003c 0\u003c/code\u003e.  Returns \u003ccode\u003eNaN\u003c/code\u003e \n-     * if \u003ccode\u003ex\u003c/code\u003e is \u003ccode\u003eNaN\u003c/code\u003e.\n-     *\n-     * @param x the value, a double\n-     * @return +1.0, 0.0, or -1.0, depending on the sign of x\n-     */\n-    public static double sign(final double x) {\n-        if (Double.isNaN(x)) {\n-            return Double.NaN;\n-        }\n-        return (x \u003d\u003d 0.0) ? 0.0 : (x \u003e 0.0) ? 1.0 : -1.0;\n-    }\n-    \n-    /**\n-     * Returns the \u003ca href\u003d\"http://mathworld.wolfram.com/Sign.html\"\u003e\n-     * sign\u003c/a\u003e for float value \u003ccode\u003ex\u003c/code\u003e.\n-     *\n-     * \u003cp\u003e\n-     * For a float value x, this method returns +1.0F if x \u003e 0, 0.0F if\n-     * x \u003d 0.0F, and -1.0F if x \u003c 0.  Returns \u003ccode\u003eNaN\u003c/code\u003e \n-     * if \u003ccode\u003ex\u003c/code\u003e is \u003ccode\u003eNaN\u003c/code\u003e.\n-     *\n-     * @param x the value, a float\n-     * @return +1.0F, 0.0F, or -1.0F, depending on the sign of x\n-     */\n-    public static float sign(final float x) {\n-        if (Float.isNaN(x)) {\n-            return Float.NaN;\n-        }\n-        return (x \u003d\u003d 0.0F) ? 0.0F : (x \u003e 0.0F) ? 1.0F : -1.0F;\n-    }\n-    \n-    /**\n-     * Returns the \u003ca href\u003d\"http://mathworld.wolfram.com/Sign.html\"\u003e\n-     * sign\u003c/a\u003e for byte value \u003ccode\u003ex\u003c/code\u003e.\n-     *\n-     * \u003cp\u003e\n-     * For a byte value x, this method returns (byte)(+1) if x \u003e 0, (byte)(0)\n-     * if x \u003d 0, and (byte)(-1) if x \u003c 0.\n-     *\n-     * @param x the value, a byte\n-     * @return (byte)(+1), (byte)(0), or (byte)(-1), depending on the sign of x\n-     */\n-    public static byte sign(final byte x) {\n-        return (x \u003d\u003d ZB) ? ZB : (x \u003e ZB) ? PB : NB;\n-    }\n-    \n-    /**\n-     * Returns the \u003ca href\u003d\"http://mathworld.wolfram.com/Sign.html\"\u003e\n-     * sign\u003c/a\u003e for short value \u003ccode\u003ex\u003c/code\u003e.\n-     *\n-     * \u003cp\u003e\n-     * For a short value x, this method returns (short)(+1) if x \u003e 0, (short)(0)\n-     * if x \u003d 0, and (short)(-1) if x \u003c 0.\n-     *\n-     * @param x the value, a short\n-     * @return (short)(+1), (short)(0), or (short)(-1), depending on the sign\n-     * of x\n-     */\n-    public static short sign(final short x) {\n-        return (x \u003d\u003d ZS) ? ZS : (x \u003e ZS) ? PS : NS;\n-    }\n-    \n-    /**\n-     * Returns the \u003ca href\u003d\"http://mathworld.wolfram.com/Sign.html\"\u003e\n-     * sign\u003c/a\u003e for int value \u003ccode\u003ex\u003c/code\u003e.\n-     *\n-     * \u003cp\u003e\n-     * For an int value x, this method returns +1 if x \u003e 0, 0 if x \u003d 0,\n-     * and -1 if x \u003c 0.\n-     *\n-     * @param x the value, an int\n-     * @return +1, 0, or -1, depending on the sign of x\n-     */\n-    public static int sign(final int x) {\n-        return (x \u003d\u003d 0) ? 0 : (x \u003e 0) ? 1 : -1;\n-    }\n-    \n-    /**\n-     * Returns the \u003ca href\u003d\"http://mathworld.wolfram.com/Sign.html\"\u003e\n-     * sign\u003c/a\u003e for long value \u003ccode\u003ex\u003c/code\u003e.\n-     *\n-     * \u003cp\u003e\n-     * For a long value x, this method returns +1L if x \u003e 0, 0L if x \u003d 0,\n-     * and -1L if x \u003c 0.\n-     *\n-     * @param x the value, a long\n-     * @return +1L, 0L, or -1L, depending on the sign of x\n-     */\n-    public static long sign(final long x) {\n-        return (x \u003d\u003d 0L) ? 0L : (x \u003e 0L) ? 1L : -1L;\n-    }\n-    \n-    /**\n-     * For a double precision value x, this method returns +1.0 if x \u003e\u003d 0\n-     * and -1.0 if x \u003c 0.   Returns \u003ccode\u003eNaN\u003c/code\u003e \n-     * if \u003ccode\u003ex\u003c/code\u003e is \u003ccode\u003eNaN\u003c/code\u003e.\n-     *\n-     * @param x the value, a double\n-     * @return +1.0 or -1.0, depending on the sign of x\n-     */\n-    public static double indicator(final double x) {\n-        if (Double.isNaN(x)) {\n-            return Double.NaN;\n-        }\n-        return (x \u003e\u003d 0.0) ? 1.0 : -1.0;\n-    }\n-    \n-    /**\n-     * For a float value x, this method returns +1.0F if x \u003e\u003d 0\n-     * and -1.0F if x \u003c 0.   Returns \u003ccode\u003eNaN\u003c/code\u003e \n-     * if \u003ccode\u003ex\u003c/code\u003e is \u003ccode\u003eNaN\u003c/code\u003e.\n-     *\n-     * @param x the value, a float\n-     * @return +1.0F or -1.0F, depending on the sign of x\n-     */\n-    public static float indicator(final float x) {\n-        if (Float.isNaN(x)) {\n-            return Float.NaN;\n-        }\n-        return (x \u003e\u003d 0.0F) ? 1.0F : -1.0F;\n-    }\n-    \n-    /**\n-     * For a byte value x, this method returns (byte)(+1) if x \u003e\u003d 0\n-     * and (byte)(-1) if x \u003c 0.\n-     *\n-     * @param x the value, a byte\n-     * @return (byte)(+1) or (byte)(-1), depending on the sign of x\n-     */\n-    public static byte indicator(final byte x) {\n-        return (x \u003e\u003d ZB) ? PB : NB;\n-    }\n-    \n-    /**\n-     * For a short value x, this method returns (short)(+1) if x \u003e\u003d 0\n-     * and (short)(-1) if x \u003c 0.\n-     *\n-     * @param x the value, a short\n-     * @return (short)(+1) or (short)(-1), depending on the sign of x\n-     */\n-    public static short indicator(final short x) {\n-        return (x \u003e\u003d ZS) ? PS : NS;\n-    }\n-    \n-    /**\n-     * For an int value x, this method returns +1 if x \u003e\u003d 0\n-     * and -1 if x \u003c 0.\n-     *\n-     * @param x the value, an int\n-     * @return +1 or -1, depending on the sign of x\n-     */\n-    public static int indicator(final int x) {\n-        return (x \u003e\u003d 0) ? 1 : -1;\n-    }\n-    \n-    /**\n-     * For a long value x, this method returns +1L if x \u003e\u003d 0\n-     * and -1L if x \u003c 0.\n-     *\n-     * @param x the value, a long\n-     * @return +1L or -1L, depending on the sign of x\n-     */\n-    public static long indicator(final long x) {\n-        return (x \u003e\u003d 0L) ? 1L : -1L;\n-    }\n-    \n-    /**\n-     * Returns an exact representation of the\n-     * \u003ca href\u003d\"http://mathworld.wolfram.com/BinomialCoefficient.html\"\u003e\n-     * Binomial Coefficient\u003c/a\u003e,  \"\u003ccode\u003en choose k\u003c/code\u003e\",\n-     * the number of \u003ccode\u003ek\u003c/code\u003e-element subsets that can be selected from\n-     * an \u003ccode\u003en\u003c/code\u003e-element set.\n-     * \u003cp\u003e\n-     * \u003cStrong\u003ePreconditions\u003c/strong\u003e:\u003cul\u003e\n+     * \u003cStrong\u003ePreconditions\u003c/strong\u003e:\n+     * \u003cul\u003e\n      * \u003cli\u003e \u003ccode\u003e0 \u003c\u003d k \u003c\u003d n \u003c/code\u003e (otherwise\n-     *      \u003ccode\u003eIllegalArgumentException\u003c/code\u003e is thrown)\u003c/li\u003e\n-     * \u003cli\u003e The result is small enough to fit into a \u003ccode\u003elong\u003c/code\u003e.  The\n-     *      largest value of \u003ccode\u003en\u003c/code\u003e for which all coefficients are\n-     *      \u003ccode\u003e \u003c Long.MAX_VALUE\u003c/code\u003e is 66.  If the computed value\n-     *      exceeds \u003ccode\u003eLong.MAX_VALUE\u003c/code\u003e an \u003ccode\u003eArithMeticException\n-     *      \u003c/code\u003e is thrown.\u003c/li\u003e\n+     * \u003ccode\u003eIllegalArgumentException\u003c/code\u003e is thrown)\u003c/li\u003e\n+     * \u003cli\u003e The result is small enough to fit into a \u003ccode\u003elong\u003c/code\u003e. The\n+     * largest value of \u003ccode\u003en\u003c/code\u003e for which all coefficients are\n+     * \u003ccode\u003e \u003c Long.MAX_VALUE\u003c/code\u003e is 66. If the computed value exceeds\n+     * \u003ccode\u003eLong.MAX_VALUE\u003c/code\u003e an \u003ccode\u003eArithMeticException\n+     *      \u003c/code\u003e is\n+     * thrown.\u003c/li\u003e\n      * \u003c/ul\u003e\n-     *\n+     * \n      * @param n the size of the set\n      * @param k the size of the subsets to be counted\n      * @return \u003ccode\u003en choose k\u003c/code\u003e\n@@ -307,11 +93,11 @@\n     public static long binomialCoefficient(final int n, final int k) {\n         if (n \u003c k) {\n             throw new IllegalArgumentException(\n-            \"must have n \u003e\u003d k for binomial coefficient (n,k)\");\n+                \"must have n \u003e\u003d k for binomial coefficient (n,k)\");\n         }\n         if (n \u003c 0) {\n             throw new IllegalArgumentException(\n-            \"must have n \u003e\u003d 0 for binomial coefficient (n,k)\");\n+                \"must have n \u003e\u003d 0 for binomial coefficient (n,k)\");\n         }\n         if ((n \u003d\u003d k) || (k \u003d\u003d 0)) {\n             return 1;\n@@ -319,31 +105,32 @@\n         if ((k \u003d\u003d 1) || (k \u003d\u003d n - 1)) {\n             return n;\n         }\n-        \n+\n         long result \u003d Math.round(binomialCoefficientDouble(n, k));\n         if (result \u003d\u003d Long.MAX_VALUE) {\n             throw new ArithmeticException(\n-            \"result too large to represent in a long integer\");\n+                \"result too large to represent in a long integer\");\n         }\n         return result;\n     }\n-    \n+\n     /**\n-     * Returns a \u003ccode\u003edouble\u003c/code\u003e representation of the\n-     * \u003ca href\u003d\"http://mathworld.wolfram.com/BinomialCoefficient.html\"\u003e\n-     * Binomial Coefficient\u003c/a\u003e,  \"\u003ccode\u003en choose k\u003c/code\u003e\",\n-     * the number of \u003ccode\u003ek\u003c/code\u003e-element subsets that can be selected from\n-     * an \u003ccode\u003en\u003c/code\u003e-element set.\n+     * Returns a \u003ccode\u003edouble\u003c/code\u003e representation of the \u003ca\n+     * href\u003d\"http://mathworld.wolfram.com/BinomialCoefficient.html\"\u003e Binomial\n+     * Coefficient\u003c/a\u003e, \"\u003ccode\u003en choose k\u003c/code\u003e\", the number of\n+     * \u003ccode\u003ek\u003c/code\u003e-element subsets that can be selected from an\n+     * \u003ccode\u003en\u003c/code\u003e-element set.\n      * \u003cp\u003e\n-     * \u003cStrong\u003ePreconditions\u003c/strong\u003e:\u003cul\u003e\n+     * \u003cStrong\u003ePreconditions\u003c/strong\u003e:\n+     * \u003cul\u003e\n      * \u003cli\u003e \u003ccode\u003e0 \u003c\u003d k \u003c\u003d n \u003c/code\u003e (otherwise\n-     *      \u003ccode\u003eIllegalArgumentException\u003c/code\u003e is thrown)\u003c/li\u003e\n-     * \u003cli\u003e The result is small enough to fit into a \u003ccode\u003edouble\u003c/code\u003e.\n-     *      The largest value of \u003ccode\u003en\u003c/code\u003e for which all coefficients are\n-     *      \u003c Double.MAX_VALUE is 1029.  If the computed value exceeds\n-     *      Double.MAX_VALUE, Double.POSITIVE_INFINITY is returned\u003c/li\u003e\n+     * \u003ccode\u003eIllegalArgumentException\u003c/code\u003e is thrown)\u003c/li\u003e\n+     * \u003cli\u003e The result is small enough to fit into a \u003ccode\u003edouble\u003c/code\u003e. The\n+     * largest value of \u003ccode\u003en\u003c/code\u003e for which all coefficients are \u003c\n+     * Double.MAX_VALUE is 1029. If the computed value exceeds Double.MAX_VALUE,\n+     * Double.POSITIVE_INFINITY is returned\u003c/li\u003e\n      * \u003c/ul\u003e\n-     *\n+     * \n      * @param n the size of the set\n      * @param k the size of the subsets to be counted\n      * @return \u003ccode\u003en choose k\u003c/code\u003e\n@@ -352,19 +139,20 @@\n     public static double binomialCoefficientDouble(final int n, final int k) {\n         return Math.floor(Math.exp(binomialCoefficientLog(n, k)) + 0.5);\n     }\n-    \n+\n     /**\n-     * Returns the natural \u003ccode\u003elog\u003c/code\u003e of the\n-     * \u003ca href\u003d\"http://mathworld.wolfram.com/BinomialCoefficient.html\"\u003e\n-     * Binomial Coefficient\u003c/a\u003e,  \"\u003ccode\u003en choose k\u003c/code\u003e\",\n-     * the number of \u003ccode\u003ek\u003c/code\u003e-element subsets that can be selected from\n-     * an \u003ccode\u003en\u003c/code\u003e-element set.\n+     * Returns the natural \u003ccode\u003elog\u003c/code\u003e of the \u003ca\n+     * href\u003d\"http://mathworld.wolfram.com/BinomialCoefficient.html\"\u003e Binomial\n+     * Coefficient\u003c/a\u003e, \"\u003ccode\u003en choose k\u003c/code\u003e\", the number of\n+     * \u003ccode\u003ek\u003c/code\u003e-element subsets that can be selected from an\n+     * \u003ccode\u003en\u003c/code\u003e-element set.\n      * \u003cp\u003e\n-     * \u003cStrong\u003ePreconditions\u003c/strong\u003e:\u003cul\u003e\n+     * \u003cStrong\u003ePreconditions\u003c/strong\u003e:\n+     * \u003cul\u003e\n      * \u003cli\u003e \u003ccode\u003e0 \u003c\u003d k \u003c\u003d n \u003c/code\u003e (otherwise\n-     *      \u003ccode\u003eIllegalArgumentException\u003c/code\u003e is thrown)\u003c/li\u003e\n+     * \u003ccode\u003eIllegalArgumentException\u003c/code\u003e is thrown)\u003c/li\u003e\n      * \u003c/ul\u003e\n-     *\n+     * \n      * @param n the size of the set\n      * @param k the size of the subsets to be counted\n      * @return \u003ccode\u003en choose k\u003c/code\u003e\n@@ -373,50 +161,72 @@\n     public static double binomialCoefficientLog(final int n, final int k) {\n         if (n \u003c k) {\n             throw new IllegalArgumentException(\n-            \"must have n \u003e\u003d k for binomial coefficient (n,k)\");\n+                \"must have n \u003e\u003d k for binomial coefficient (n,k)\");\n         }\n         if (n \u003c 0) {\n             throw new IllegalArgumentException(\n-            \"must have n \u003e\u003d 0 for binomial coefficient (n,k)\");\n+                \"must have n \u003e\u003d 0 for binomial coefficient (n,k)\");\n         }\n         if ((n \u003d\u003d k) || (k \u003d\u003d 0)) {\n             return 0;\n         }\n         if ((k \u003d\u003d 1) || (k \u003d\u003d n - 1)) {\n-            return Math.log((double) n);\n+            return Math.log((double)n);\n         }\n         double logSum \u003d 0;\n-        \n+\n         // n!/k!\n         for (int i \u003d k + 1; i \u003c\u003d n; i++) {\n-            logSum +\u003d Math.log((double) i);\n+            logSum +\u003d Math.log((double)i);\n         }\n-        \n+\n         // divide by (n-k)!\n         for (int i \u003d 2; i \u003c\u003d n - k; i++) {\n-            logSum -\u003d Math.log((double) i);\n+            logSum -\u003d Math.log((double)i);\n         }\n-        \n+\n         return logSum;\n     }\n-    \n+\n     /**\n-     * Returns n!.  Shorthand for \u003ccode\u003en\u003c/code\u003e\n-     * \u003ca href\u003d\"http://mathworld.wolfram.com/Factorial.html\"\u003e\n-     * Factorial\u003c/a\u003e, the product of the numbers \u003ccode\u003e1,...,n\u003c/code\u003e.\n-     *\n+     * Returns the \u003ca href\u003d\"http://mathworld.wolfram.com/HyperbolicCosine.html\"\u003e\n+     * hyperbolic cosine\u003c/a\u003e of x.\n+     * \n+     * @param x double value for which to find the hyperbolic cosine\n+     * @return hyperbolic cosine of x\n+     */\n+    public static double cosh(double x) {\n+        return (Math.exp(x) + Math.exp(-x)) / 2.0;\n+    }\n+\n+    /**\n+     * Returns true iff both arguments are NaN or neither is NaN and they are\n+     * equal\n+     * \n+     * @param x first value\n+     * @param y second value\n+     * @return true if the values are equal or both are NaN\n+     */\n+    public static boolean equals(double x, double y) {\n+        return ((Double.isNaN(x) \u0026\u0026 Double.isNaN(y)) || x \u003d\u003d y);\n+    }\n+\n+    /**\n+     * Returns n!. Shorthand for \u003ccode\u003en\u003c/code\u003e \u003ca\n+     * href\u003d\"http://mathworld.wolfram.com/Factorial.html\"\u003e Factorial\u003c/a\u003e, the\n+     * product of the numbers \u003ccode\u003e1,...,n\u003c/code\u003e.\n      * \u003cp\u003e\n-     * \u003cStrong\u003ePreconditions\u003c/strong\u003e:\u003cul\u003e\n+     * \u003cStrong\u003ePreconditions\u003c/strong\u003e:\n+     * \u003cul\u003e\n      * \u003cli\u003e \u003ccode\u003en \u003e\u003d 0\u003c/code\u003e (otherwise\n-     *      \u003ccode\u003eIllegalArgumentException\u003c/code\u003e is thrown)\u003c/li\u003e\n-     * \u003cli\u003e The result is small enough to fit into a \u003ccode\u003elong\u003c/code\u003e.  The\n-     *      largest value of \u003ccode\u003en\u003c/code\u003e for which \u003ccode\u003en!\u003c/code\u003e\n-     *      \u003c Long.MAX_VALUE\u003c/code\u003e is 20.  If the computed value\n-     *      exceeds \u003ccode\u003eLong.MAX_VALUE\u003c/code\u003e an \u003ccode\u003eArithMeticException\n-     *      \u003c/code\u003e is thrown.\u003c/li\u003e\n+     * \u003ccode\u003eIllegalArgumentException\u003c/code\u003e is thrown)\u003c/li\u003e\n+     * \u003cli\u003e The result is small enough to fit into a \u003ccode\u003elong\u003c/code\u003e. The\n+     * largest value of \u003ccode\u003en\u003c/code\u003e for which \u003ccode\u003en!\u003c/code\u003e \u003c\n+     * Long.MAX_VALUE\u003c/code\u003e is 20. If the computed value exceeds \u003ccode\u003eLong.MAX_VALUE\u003c/code\u003e\n+     * an \u003ccode\u003eArithMeticException \u003c/code\u003e is thrown.\u003c/li\u003e\n      * \u003c/ul\u003e\n      * \u003c/p\u003e\n-     *\n+     * \n      * @param n argument\n      * @return \u003ccode\u003en!\u003c/code\u003e\n      * @throws ArithmeticException if the result is too large to be represented\n@@ -427,28 +237,27 @@\n         long result \u003d Math.round(factorialDouble(n));\n         if (result \u003d\u003d Long.MAX_VALUE) {\n             throw new ArithmeticException(\n-            \"result too large to represent in a long integer\");\n+                \"result too large to represent in a long integer\");\n         }\n         return result;\n     }\n-    \n+\n     /**\n-     * Returns n!.  Shorthand for \u003ccode\u003en\u003c/code\u003e\n-     * \u003ca href\u003d\"http://mathworld.wolfram.com/Factorial.html\"\u003e\n-     * Factorial\u003c/a\u003e, the product of the numbers \u003ccode\u003e1,...,n\u003c/code\u003e as a\n-     * \u003ccode\u003edouble\u003c/code\u003e.\n-     *\n+     * Returns n!. Shorthand for \u003ccode\u003en\u003c/code\u003e \u003ca\n+     * href\u003d\"http://mathworld.wolfram.com/Factorial.html\"\u003e Factorial\u003c/a\u003e, the\n+     * product of the numbers \u003ccode\u003e1,...,n\u003c/code\u003e as a \u003ccode\u003edouble\u003c/code\u003e.\n      * \u003cp\u003e\n-     * \u003cStrong\u003ePreconditions\u003c/strong\u003e:\u003cul\u003e\n+     * \u003cStrong\u003ePreconditions\u003c/strong\u003e:\n+     * \u003cul\u003e\n      * \u003cli\u003e \u003ccode\u003en \u003e\u003d 0\u003c/code\u003e (otherwise\n-     *      \u003ccode\u003eIllegalArgumentException\u003c/code\u003e is thrown)\u003c/li\u003e\n-     * \u003cli\u003e The result is small enough to fit into a \u003ccode\u003edouble\u003c/code\u003e.  The\n-     *      largest value of \u003ccode\u003en\u003c/code\u003e for which \u003ccode\u003en!\u003c/code\u003e\n-     *      \u003c Double.MAX_VALUE\u003c/code\u003e is 170.  If the computed value exceeds\n-     *      Double.MAX_VALUE, Double.POSITIVE_INFINITY is returned\u003c/li\u003e\n+     * \u003ccode\u003eIllegalArgumentException\u003c/code\u003e is thrown)\u003c/li\u003e\n+     * \u003cli\u003e The result is small enough to fit into a \u003ccode\u003edouble\u003c/code\u003e. The\n+     * largest value of \u003ccode\u003en\u003c/code\u003e for which \u003ccode\u003en!\u003c/code\u003e \u003c\n+     * Double.MAX_VALUE\u003c/code\u003e is 170. If the computed value exceeds\n+     * Double.MAX_VALUE, Double.POSITIVE_INFINITY is returned\u003c/li\u003e\n      * \u003c/ul\u003e\n      * \u003c/p\u003e\n-     *\n+     * \n      * @param n argument\n      * @return \u003ccode\u003en!\u003c/code\u003e\n      * @throws IllegalArgumentException if n \u003c 0\n@@ -459,15 +268,16 @@\n         }\n         return Math.floor(Math.exp(factorialLog(n)) + 0.5);\n     }\n-    \n+\n     /**\n      * Returns the natural logarithm of n!.\n      * \u003cp\u003e\n-     * \u003cStrong\u003ePreconditions\u003c/strong\u003e:\u003cul\u003e\n+     * \u003cStrong\u003ePreconditions\u003c/strong\u003e:\n+     * \u003cul\u003e\n      * \u003cli\u003e \u003ccode\u003en \u003e\u003d 0\u003c/code\u003e (otherwise\n-     *      \u003ccode\u003eIllegalArgumentException\u003c/code\u003e is thrown)\u003c/li\u003e\n+     * \u003ccode\u003eIllegalArgumentException\u003c/code\u003e is thrown)\u003c/li\u003e\n      * \u003c/ul\u003e\n-     *\n+     * \n      * @param n argument\n      * @return \u003ccode\u003en!\u003c/code\u003e\n      * @throws IllegalArgumentException if preconditions are not met.\n@@ -478,77 +288,21 @@\n         }\n         double logSum \u003d 0;\n         for (int i \u003d 2; i \u003c\u003d n; i++) {\n-            logSum +\u003d Math.log((double) i);\n+            logSum +\u003d Math.log((double)i);\n         }\n         return logSum;\n     }\n-    \n-    /**\n-     * Returns the \u003ca href\u003d\"http://mathworld.wolfram.com/HyperbolicCosine.html\"\u003e\n-     * hyperbolic cosine\u003c/a\u003e of x.\n-     *\n-     * @param x double value for which to find the hyperbolic cosine\n-     * @return hyperbolic cosine of x\n-     */\n-    public static double cosh(double x) {\n-        return (Math.exp(x) + Math.exp(-x)) / 2.0;\n-    }\n-    \n-    /**\n-     * Returns the \u003ca href\u003d\"http://mathworld.wolfram.com/HyperbolicSine.html\"\u003e\n-     * hyperbolic sine\u003c/a\u003e of x.\n-     *\n-     * @param x double value for which to find the hyperbolic sine\n-     * @return hyperbolic sine of x\n-     */\n-    public static double sinh(double x) {\n-        return (Math.exp(x) - Math.exp(-x)) / 2.0;\n-    }\n-    \n-    /**\n-     * Returns an integer hash code representing the given double value.\n-     *\n-     * @param value  the value to be hashed\n-     * @return the hash code\n-     */\n-    public static int hash(double value) {\n-        long bits \u003d Double.doubleToLongBits(value);\n-        return (int)(bits ^ (bits \u003e\u003e\u003e 32));\n-    }\n-    \n-    /**\n-     * Returns true iff both arguments are NaN or\n-     * neither is NaN and they are equal\n-     *\n-     * @param x first value\n-     * @param y second value\n-     * @return true if the values are equal or both are NaN\n-     */\n-    public static boolean equals(double x, double y) {\n-        return ((Double.isNaN(x) \u0026\u0026 Double.isNaN(y)) || x \u003d\u003d y);\n-    }\n \n     /**\n-     * Returns the least common multiple between two integer values.\n+     * \u003cp\u003e\n+     * Gets the greatest common divisor of the absolute value of two numbers,\n+     * using the \"binary gcd\" method which avoids division and modulo\n+     * operations. See Knuth 4.5.2 algorithm B. This algorithm is due to Josef\n+     * Stein (1961).\n+     * \u003c/p\u003e\n      * \n-     * @param a the first integer value.\n-     * @param b the second integer value.\n-     * @return the least common multiple between a and b.\n-     * @throws ArithmeticException if the lcm is too large to store as an int\n-     * @since 1.1\n-     */\n-    public static int lcm(int a, int b) {\n-        return Math.abs(mulAndCheck(a / gcd(a, b) , b));\n-    }\n-\n-    /**\n-     * \u003cp\u003eGets the greatest common divisor of the absolute value of\n-     * two numbers, using the \"binary gcd\" method which avoids\n-     * division and modulo operations.  See Knuth 4.5.2 algorithm B.\n-     * This algorithm is due to Josef Stein (1961).\u003c/p\u003e\n-     *\n-     * @param u  a non-zero number\n-     * @param v  a non-zero number\n+     * @param u a non-zero number\n+     * @param v a non-zero number\n      * @return the greatest common divisor, never zero\n      * @since 1.1\n      */\n@@ -561,93 +315,421 @@\n         // (i.e. we can\u0027t necessarily negate a negative number without\n         // overflow)\n         /* assert u!\u003d0 \u0026\u0026 v!\u003d0; */\n-        if (u\u003e0) { u\u003d-u; } // make u negative\n-        if (v\u003e0) { v\u003d-v; } // make v negative\n+        if (u \u003e 0) {\n+            u \u003d -u;\n+        } // make u negative\n+        if (v \u003e 0) {\n+            v \u003d -v;\n+        } // make v negative\n         // B1. [Find power of 2]\n-        int k\u003d0;\n-        while ((u\u00261)\u003d\u003d0 \u0026\u0026 (v\u00261)\u003d\u003d0 \u0026\u0026 k\u003c31) { // while u and v are both even...\n-            u/\u003d2; v/\u003d2; k++; // cast out twos.\n+        int k \u003d 0;\n+        while ((u \u0026 1) \u003d\u003d 0 \u0026\u0026 (v \u0026 1) \u003d\u003d 0 \u0026\u0026 k \u003c 31) { // while u and v are\n+                                                            // both even...\n+            u /\u003d 2;\n+            v /\u003d 2;\n+            k++; // cast out twos.\n         }\n-        if (k\u003d\u003d31) {\n+        if (k \u003d\u003d 31) {\n             throw new ArithmeticException(\"overflow: gcd is 2^31\");\n         }\n         // B2. Initialize: u and v have been divided by 2^k and at least\n-        //     one is odd.\n-        int t \u003d ((u\u00261)\u003d\u003d1) ? v : -(u/2)/*B3*/;\n+        // one is odd.\n+        int t \u003d ((u \u0026 1) \u003d\u003d 1) ? v : -(u / 2)/* B3 */;\n         // t negative: u was odd, v may be even (t replaces v)\n         // t positive: u was even, v is odd (t replaces u)\n         do {\n             /* assert u\u003c0 \u0026\u0026 v\u003c0; */\n             // B4/B3: cast out twos from t.\n-            while ((t\u00261)\u003d\u003d0) { // while t is even..\n-                t/\u003d2; // cast out twos\n+            while ((t \u0026 1) \u003d\u003d 0) { // while t is even..\n+                t /\u003d 2; // cast out twos\n             }\n             // B5 [reset max(u,v)]\n-            if (t\u003e0) {\n+            if (t \u003e 0) {\n                 u \u003d -t;\n             } else {\n                 v \u003d t;\n             }\n             // B6/B3. at this point both u and v should be odd.\n-            t \u003d (v - u)/2;\n+            t \u003d (v - u) / 2;\n             // |u| larger: t positive (replace u)\n             // |v| larger: t negative (replace v)\n-        } while (t!\u003d0);\n-        return -u*(1\u003c\u003ck); // gcd is u*2^k\n+        } while (t !\u003d 0);\n+        return -u * (1 \u003c\u003c k); // gcd is u*2^k\n     }\n \n-    /** \n+    /**\n+     * Returns an integer hash code representing the given double value.\n+     * \n+     * @param value the value to be hashed\n+     * @return the hash code\n+     */\n+    public static int hash(double value) {\n+        long bits \u003d Double.doubleToLongBits(value);\n+        return (int)(bits ^ (bits \u003e\u003e\u003e 32));\n+    }\n+\n+    /**\n+     * For a byte value x, this method returns (byte)(+1) if x \u003e\u003d 0 and\n+     * (byte)(-1) if x \u003c 0.\n+     * \n+     * @param x the value, a byte\n+     * @return (byte)(+1) or (byte)(-1), depending on the sign of x\n+     */\n+    public static byte indicator(final byte x) {\n+        return (x \u003e\u003d ZB) ? PB : NB;\n+    }\n+\n+    /**\n+     * For a double precision value x, this method returns +1.0 if x \u003e\u003d 0 and\n+     * -1.0 if x \u003c 0. Returns \u003ccode\u003eNaN\u003c/code\u003e if \u003ccode\u003ex\u003c/code\u003e is\n+     * \u003ccode\u003eNaN\u003c/code\u003e.\n+     * \n+     * @param x the value, a double\n+     * @return +1.0 or -1.0, depending on the sign of x\n+     */\n+    public static double indicator(final double x) {\n+        if (Double.isNaN(x)) {\n+            return Double.NaN;\n+        }\n+        return (x \u003e\u003d 0.0) ? 1.0 : -1.0;\n+    }\n+\n+    /**\n+     * For a float value x, this method returns +1.0F if x \u003e\u003d 0 and -1.0F if x \u003c\n+     * 0. Returns \u003ccode\u003eNaN\u003c/code\u003e if \u003ccode\u003ex\u003c/code\u003e is \u003ccode\u003eNaN\u003c/code\u003e.\n+     * \n+     * @param x the value, a float\n+     * @return +1.0F or -1.0F, depending on the sign of x\n+     */\n+    public static float indicator(final float x) {\n+        if (Float.isNaN(x)) {\n+            return Float.NaN;\n+        }\n+        return (x \u003e\u003d 0.0F) ? 1.0F : -1.0F;\n+    }\n+\n+    /**\n+     * For an int value x, this method returns +1 if x \u003e\u003d 0 and -1 if x \u003c 0.\n+     * \n+     * @param x the value, an int\n+     * @return +1 or -1, depending on the sign of x\n+     */\n+    public static int indicator(final int x) {\n+        return (x \u003e\u003d 0) ? 1 : -1;\n+    }\n+\n+    /**\n+     * For a long value x, this method returns +1L if x \u003e\u003d 0 and -1L if x \u003c 0.\n+     * \n+     * @param x the value, a long\n+     * @return +1L or -1L, depending on the sign of x\n+     */\n+    public static long indicator(final long x) {\n+        return (x \u003e\u003d 0L) ? 1L : -1L;\n+    }\n+\n+    /**\n+     * For a short value x, this method returns (short)(+1) if x \u003e\u003d 0 and\n+     * (short)(-1) if x \u003c 0.\n+     * \n+     * @param x the value, a short\n+     * @return (short)(+1) or (short)(-1), depending on the sign of x\n+     */\n+    public static short indicator(final short x) {\n+        return (x \u003e\u003d ZS) ? PS : NS;\n+    }\n+\n+    /**\n+     * Returns the least common multiple between two integer values.\n+     * \n+     * @param a the first integer value.\n+     * @param b the second integer value.\n+     * @return the least common multiple between a and b.\n+     * @throws ArithmeticException if the lcm is too large to store as an int\n+     * @since 1.1\n+     */\n+    public static int lcm(int a, int b) {\n+        return Math.abs(mulAndCheck(a / gcd(a, b), b));\n+    }\n+\n+    /**\n      * Multiply two integers, checking for overflow.\n      * \n      * @param x a factor\n      * @param y a factor\n      * @return the product \u003ccode\u003ex*y\u003c/code\u003e\n-     * @throws ArithmeticException if the result can not be represented as\n-     *                             an int\n+     * @throws ArithmeticException if the result can not be represented as an\n+     *         int\n      * @since 1.1\n      */\n     public static int mulAndCheck(int x, int y) {\n-        long m \u003d ((long)x)*((long)y);\n-        if (m \u003c Integer.MIN_VALUE ||\n-                m \u003e Integer.MAX_VALUE) {\n+        long m \u003d ((long)x) * ((long)y);\n+        if (m \u003c Integer.MIN_VALUE || m \u003e Integer.MAX_VALUE) {\n             throw new ArithmeticException(\"overflow: mul\");\n         }\n         return (int)m;\n     }\n-    \n-    /** \n-     * Add two integers, checking for overflow.\n+\n+    /**\n+     * Round the given value to the specified number of decimal places. The\n+     * value is rounded using the {@link BigDecimal#ROUND_HALF_UP} method.\n      * \n-     * @param x an addend\n-     * @param y an addend\n-     * @return the sum \u003ccode\u003ex+y\u003c/code\u003e\n-     * @throws ArithmeticException if the result can not be represented as\n-     * an int\n+     * @param x the value to round.\n+     * @param scale the number of digits to the right of the decimal point.\n+     * @return the rounded value.\n      * @since 1.1\n      */\n-    public static int addAndCheck(int x, int y) {\n-        long s \u003d (long)x+(long)y;\n-        if (s \u003c Integer.MIN_VALUE ||\n-                s \u003e Integer.MAX_VALUE) {\n-            throw new ArithmeticException(\"overflow: add\");\n-        }\n-        return (int)s;\n+    public static double round(double x, int scale) {\n+        return round(x, scale, BigDecimal.ROUND_HALF_UP);\n     }\n-    \n-    /** \n+\n+    /**\n+     * Round the given value to the specified number of decimal places. The\n+     * value is rounded using the given method which is any method defined in\n+     * {@link BigDecimal}.\n+     * \n+     * @param x the value to round.\n+     * @param scale the number of digits to the right of the decimal point.\n+     * @param roundingMethod the rounding method as defined in\n+     *        {@link BigDecimal}.\n+     * @return the rounded value.\n+     * @since 1.1\n+     */\n+    public static double round(double x, int scale, int roundingMethod) {\n+        double sign \u003d sign(x);\n+        double factor \u003d Math.pow(10.0, scale) * sign;\n+        return roundUnscaled(x * factor, sign, roundingMethod) / factor;\n+    }\n+\n+    /**\n+     * Round the given value to the specified number of decimal places. The\n+     * value is rounding using the {@link BigDecimal#ROUND_HALF_UP} method.\n+     * \n+     * @param x the value to round.\n+     * @param scale the number of digits to the right of the decimal point.\n+     * @return the rounded value.\n+     * @since 1.1\n+     */\n+    public static float round(float x, int scale) {\n+        return round(x, scale, BigDecimal.ROUND_HALF_UP);\n+    }\n+\n+    /**\n+     * Round the given value to the specified number of decimal places. The\n+     * value is rounded using the given method which is any method defined in\n+     * {@link BigDecimal}.\n+     * \n+     * @param x the value to round.\n+     * @param scale the number of digits to the right of the decimal point.\n+     * @param roundingMethod the rounding method as defined in\n+     *        {@link BigDecimal}.\n+     * @return the rounded value.\n+     * @since 1.1\n+     */\n+    public static float round(float x, int scale, int roundingMethod) {\n+        float sign \u003d sign(x);\n+        float factor \u003d (float)Math.pow(10.0f, scale) * sign;\n+        return (float)roundUnscaled(x * factor, sign, roundingMethod) / factor;\n+    }\n+\n+    /**\n+     * Round the given non-negative, value to the \"nearest\" integer. Nearest is\n+     * determined by the rounding method specified. Rounding methods are defined\n+     * in {@link BigDecimal}.\n+     * \n+     * @param unscaled the value to round.\n+     * @param sign the sign of the original, scaled value.\n+     * @param roundingMethod the rounding method as defined in\n+     *        {@link BigDecimal}.\n+     * @return the rounded value.\n+     * @since 1.1\n+     */\n+    private static double roundUnscaled(double unscaled, double sign,\n+        int roundingMethod) {\n+        switch (roundingMethod) {\n+        case BigDecimal.ROUND_CEILING :\n+            if (sign \u003d\u003d -1) {\n+                unscaled \u003d Math.floor(unscaled);\n+            } else {\n+                unscaled \u003d Math.ceil(unscaled);\n+            }\n+            break;\n+        case BigDecimal.ROUND_DOWN :\n+            unscaled \u003d Math.floor(unscaled);\n+            break;\n+        case BigDecimal.ROUND_FLOOR :\n+            if (sign \u003d\u003d -1) {\n+                unscaled \u003d Math.ceil(unscaled);\n+            } else {\n+                unscaled \u003d Math.floor(unscaled);\n+            }\n+            break;\n+        case BigDecimal.ROUND_HALF_DOWN : {\n+            double fraction \u003d Math.abs(unscaled - Math.floor(unscaled));\n+            if (fraction \u003e 0.5) {\n+                unscaled \u003d Math.ceil(unscaled);\n+            } else {\n+                unscaled \u003d Math.floor(unscaled);\n+            }\n+            break;\n+        }\n+        case BigDecimal.ROUND_HALF_EVEN : {\n+            double fraction \u003d Math.abs(unscaled - Math.floor(unscaled));\n+            if (fraction \u003e 0.5) {\n+                unscaled \u003d Math.ceil(unscaled);\n+            } else if (fraction \u003c 0.5) {\n+                unscaled \u003d Math.floor(unscaled);\n+            } else {\n+                if (Math.floor(unscaled) / 2.0 \u003d\u003d Math.floor(Math\n+                    .floor(unscaled) / 2.0)) { // even\n+                    unscaled \u003d Math.floor(unscaled);\n+                } else { // odd\n+                    unscaled \u003d Math.ceil(unscaled);\n+                }\n+            }\n+            break;\n+        }\n+        case BigDecimal.ROUND_HALF_UP : {\n+            double fraction \u003d Math.abs(unscaled - Math.floor(unscaled));\n+            if (fraction \u003e\u003d 0.5) {\n+                unscaled \u003d Math.ceil(unscaled);\n+            } else {\n+                unscaled \u003d Math.floor(unscaled);\n+            }\n+            break;\n+        }\n+        case BigDecimal.ROUND_UNNECESSARY :\n+            if (unscaled !\u003d Math.floor(unscaled)) {\n+                throw new ArithmeticException(\"Inexact result from rounding\");\n+            }\n+            break;\n+        case BigDecimal.ROUND_UP :\n+            unscaled \u003d Math.ceil(unscaled);\n+            break;\n+        default :\n+            throw new IllegalArgumentException(\"Invalid rounding method.\");\n+        }\n+        return unscaled;\n+    }\n+\n+    /**\n+     * Returns the \u003ca href\u003d\"http://mathworld.wolfram.com/Sign.html\"\u003e sign\u003c/a\u003e\n+     * for byte value \u003ccode\u003ex\u003c/code\u003e.\n+     * \u003cp\u003e\n+     * For a byte value x, this method returns (byte)(+1) if x \u003e 0, (byte)(0) if\n+     * x \u003d 0, and (byte)(-1) if x \u003c 0.\n+     * \n+     * @param x the value, a byte\n+     * @return (byte)(+1), (byte)(0), or (byte)(-1), depending on the sign of x\n+     */\n+    public static byte sign(final byte x) {\n+        return (x \u003d\u003d ZB) ? ZB : (x \u003e ZB) ? PB : NB;\n+    }\n+\n+    /**\n+     * Returns the \u003ca href\u003d\"http://mathworld.wolfram.com/Sign.html\"\u003e sign\u003c/a\u003e\n+     * for double precision \u003ccode\u003ex\u003c/code\u003e.\n+     * \u003cp\u003e\n+     * For a double value \u003ccode\u003ex\u003c/code\u003e, this method returns\n+     * \u003ccode\u003e+1.0\u003c/code\u003e if \u003ccode\u003ex \u003e 0\u003c/code\u003e, \u003ccode\u003e0.0\u003c/code\u003e if\n+     * \u003ccode\u003ex \u003d 0.0\u003c/code\u003e, and \u003ccode\u003e-1.0\u003c/code\u003e if \u003ccode\u003ex \u003c 0\u003c/code\u003e.\n+     * Returns \u003ccode\u003eNaN\u003c/code\u003e if \u003ccode\u003ex\u003c/code\u003e is \u003ccode\u003eNaN\u003c/code\u003e.\n+     * \n+     * @param x the value, a double\n+     * @return +1.0, 0.0, or -1.0, depending on the sign of x\n+     */\n+    public static double sign(final double x) {\n+        if (Double.isNaN(x)) {\n+            return Double.NaN;\n+        }\n+        return (x \u003d\u003d 0.0) ? 0.0 : (x \u003e 0.0) ? 1.0 : -1.0;\n+    }\n+\n+    /**\n+     * Returns the \u003ca href\u003d\"http://mathworld.wolfram.com/Sign.html\"\u003e sign\u003c/a\u003e\n+     * for float value \u003ccode\u003ex\u003c/code\u003e.\n+     * \u003cp\u003e\n+     * For a float value x, this method returns +1.0F if x \u003e 0, 0.0F if x \u003d\n+     * 0.0F, and -1.0F if x \u003c 0. Returns \u003ccode\u003eNaN\u003c/code\u003e if \u003ccode\u003ex\u003c/code\u003e\n+     * is \u003ccode\u003eNaN\u003c/code\u003e.\n+     * \n+     * @param x the value, a float\n+     * @return +1.0F, 0.0F, or -1.0F, depending on the sign of x\n+     */\n+    public static float sign(final float x) {\n+        if (Float.isNaN(x)) {\n+            return Float.NaN;\n+        }\n+        return (x \u003d\u003d 0.0F) ? 0.0F : (x \u003e 0.0F) ? 1.0F : -1.0F;\n+    }\n+\n+    /**\n+     * Returns the \u003ca href\u003d\"http://mathworld.wolfram.com/Sign.html\"\u003e sign\u003c/a\u003e\n+     * for int value \u003ccode\u003ex\u003c/code\u003e.\n+     * \u003cp\u003e\n+     * For an int value x, this method returns +1 if x \u003e 0, 0 if x \u003d 0, and -1\n+     * if x \u003c 0.\n+     * \n+     * @param x the value, an int\n+     * @return +1, 0, or -1, depending on the sign of x\n+     */\n+    public static int sign(final int x) {\n+        return (x \u003d\u003d 0) ? 0 : (x \u003e 0) ? 1 : -1;\n+    }\n+\n+    /**\n+     * Returns the \u003ca href\u003d\"http://mathworld.wolfram.com/Sign.html\"\u003e sign\u003c/a\u003e\n+     * for long value \u003ccode\u003ex\u003c/code\u003e.\n+     * \u003cp\u003e\n+     * For a long value x, this method returns +1L if x \u003e 0, 0L if x \u003d 0, and\n+     * -1L if x \u003c 0.\n+     * \n+     * @param x the value, a long\n+     * @return +1L, 0L, or -1L, depending on the sign of x\n+     */\n+    public static long sign(final long x) {\n+        return (x \u003d\u003d 0L) ? 0L : (x \u003e 0L) ? 1L : -1L;\n+    }\n+\n+    /**\n+     * Returns the \u003ca href\u003d\"http://mathworld.wolfram.com/Sign.html\"\u003e sign\u003c/a\u003e\n+     * for short value \u003ccode\u003ex\u003c/code\u003e.\n+     * \u003cp\u003e\n+     * For a short value x, this method returns (short)(+1) if x \u003e 0, (short)(0)\n+     * if x \u003d 0, and (short)(-1) if x \u003c 0.\n+     * \n+     * @param x the value, a short\n+     * @return (short)(+1), (short)(0), or (short)(-1), depending on the sign of\n+     *         x\n+     */\n+    public static short sign(final short x) {\n+        return (x \u003d\u003d ZS) ? ZS : (x \u003e ZS) ? PS : NS;\n+    }\n+\n+    /**\n+     * Returns the \u003ca href\u003d\"http://mathworld.wolfram.com/HyperbolicSine.html\"\u003e\n+     * hyperbolic sine\u003c/a\u003e of x.\n+     * \n+     * @param x double value for which to find the hyperbolic sine\n+     * @return hyperbolic sine of x\n+     */\n+    public static double sinh(double x) {\n+        return (Math.exp(x) - Math.exp(-x)) / 2.0;\n+    }\n+\n+    /**\n      * Subtract two integers, checking for overflow.\n      * \n      * @param x the minuend\n      * @param y the subtrahend\n      * @return the difference \u003ccode\u003ex-y\u003c/code\u003e\n-     * @throws ArithmeticException if the result can not be represented as\n-     * an int\n+     * @throws ArithmeticException if the result can not be represented as an\n+     *         int\n      * @since 1.1\n      */\n     public static int subAndCheck(int x, int y) {\n-        long s \u003d (long)x-(long)y;\n-        if (s \u003c Integer.MIN_VALUE ||\n-                s \u003e Integer.MAX_VALUE) {\n+        long s \u003d (long)x - (long)y;\n+        if (s \u003c Integer.MIN_VALUE || s \u003e Integer.MAX_VALUE) {\n             throw new ArithmeticException(\"overflow: add\");\n         }\n         return (int)s;\n",
      "operations": [
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [18172,21001]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Javadoc [21495,22020]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: 2005) $ [828,835]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SuperConstructorInvocation [1421,1429]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [16838,16860]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [16869,16914]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ReturnStatement [16923,16987]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [17998,18019]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [18028,18080]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ReturnStatement [18089,18160]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TagElement [21506,21906]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003c/code\u003e is [2735,2745]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: thrown.\u003c/li\u003e [2753,2765]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: Double.POSITIVE_INFINITY is returned\u003c/li\u003e [4597,4638]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003cul\u003e [5390,5394]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003cul\u003e [9614,9618]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: Stein (1961). [10438,10451]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003c/p\u003e [10459,10463]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: Returns the \u003ca href\u003d\"http://mathworld.wolfram.com/Sign.html\"\u003e sign\u003c/a\u003e [21506,21576]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: for double precision \u003ccode\u003ex\u003c/code\u003e. [21584,21620]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: For a double value \u003ccode\u003ex\u003c/code\u003e, this method returns [21639,21693]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003ccode\u003e+1.0\u003c/code\u003e if \u003ccode\u003ex \u003e 0\u003c/code\u003e, \u003ccode\u003e0.0\u003c/code\u003e if [21701,21761]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003ccode\u003ex \u003d 0.0\u003c/code\u003e, and \u003ccode\u003e-1.0\u003c/code\u003e if \u003ccode\u003ex \u003c 0\u003c/code\u003e. [21769,21835]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: Returns \u003ccode\u003eNaN\u003c/code\u003e if \u003ccode\u003ex\u003c/code\u003e is \u003ccode\u003eNaN\u003c/code\u003e. [21843,21906]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: if \u003ccode\u003ex\u003c/code\u003e is \u003ccode\u003eNaN\u003c/code\u003e. [7508,7546]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: and -1 if x \u003c 0. [8555,8571]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: and -1L if x \u003c 0. [8841,8858]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ReturnStatement [2421,2530]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ReturnStatement [3532,3626]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: Returns the \u003ca href\u003d\"http://mathworld.wolfram.com/Sign.html\"\u003e [3653,3714]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: sign\u003c/a\u003e for double precision \u003ccode\u003ex\u003c/code\u003e. [3722,3767]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: For a double value \u003ccode\u003ex\u003c/code\u003e, this method returns \u003ccode\u003e+1.0\u003c/code\u003e [3793,3865]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: if \u003ccode\u003ex \u003e 0\u003c/code\u003e, \u003ccode\u003e0.0\u003c/code\u003e if \u003ccode\u003ex \u003d 0.0\u003c/code\u003e, [3873,3937]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: and \u003ccode\u003e-1.0\u003c/code\u003e if \u003ccode\u003ex \u003c 0\u003c/code\u003e.  Returns \u003ccode\u003eNaN\u003c/code\u003e  [3945,4016]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: if \u003ccode\u003ex\u003c/code\u003e is \u003ccode\u003eNaN\u003c/code\u003e. [4024,4062]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TagElement [3653,4062]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Javadoc [3642,4175]",
          "to": ""
        }
      ]
    }
  ],
  "inducing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [
        "roundUnscaled"
      ],
      "num": 1
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  },
  "trigger_tests": [],
  "fixing_changes": [],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  }
}