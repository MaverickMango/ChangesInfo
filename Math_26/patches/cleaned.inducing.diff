Only in data/changesInfo//Math_26/properties/modified_classes/inducing/src: java
diff -u -r data/changesInfo//Math_26/properties/modified_classes/inducing/src/test/org/apache/commons/math/fraction/FractionTest.java data/changesInfo//Math_26/cleaned/inducing/src/test/org/apache/commons/math/fraction/FractionTest.java
--- data/changesInfo//Math_26/properties/modified_classes/inducing/src/test/org/apache/commons/math/fraction/FractionTest.java	2023-12-27 22:46:50.932553312 -0800
+++ data/changesInfo//Math_26/cleaned/inducing/src/test/org/apache/commons/math/fraction/FractionTest.java	2023-07-25 07:17:48.848000000 -0700
@@ -63,96 +63,7 @@
             fail(ex.getMessage());
         }
     }
-
-    public void testGoldenRatio() {
-        try {
-            // the golden ratio is notoriously a difficult number for continuous fraction
-            new Fraction((1 + Math.sqrt(5)) / 2, 1.0e-12, 25);
-            fail("an exception should have been thrown");
-        } catch (ConvergenceException ce) {
-            // expected behavior
-        } catch (Exception e) {
-            fail("wrong exception caught");
-        }
-    }
-
-    // MATH-179
-    public void testDoubleConstructor() throws ConvergenceException  {
-        assertFraction(1, 2, new Fraction((double)1 / (double)2));
-        assertFraction(1, 3, new Fraction((double)1 / (double)3));
-        assertFraction(2, 3, new Fraction((double)2 / (double)3));
-        assertFraction(1, 4, new Fraction((double)1 / (double)4));
-        assertFraction(3, 4, new Fraction((double)3 / (double)4));
-        assertFraction(1, 5, new Fraction((double)1 / (double)5));
-        assertFraction(2, 5, new Fraction((double)2 / (double)5));
-        assertFraction(3, 5, new Fraction((double)3 / (double)5));
-        assertFraction(4, 5, new Fraction((double)4 / (double)5));
-        assertFraction(1, 6, new Fraction((double)1 / (double)6));
-        assertFraction(5, 6, new Fraction((double)5 / (double)6));
-        assertFraction(1, 7, new Fraction((double)1 / (double)7));
-        assertFraction(2, 7, new Fraction((double)2 / (double)7));
-        assertFraction(3, 7, new Fraction((double)3 / (double)7));
-        assertFraction(4, 7, new Fraction((double)4 / (double)7));
-        assertFraction(5, 7, new Fraction((double)5 / (double)7));
-        assertFraction(6, 7, new Fraction((double)6 / (double)7));
-        assertFraction(1, 8, new Fraction((double)1 / (double)8));
-        assertFraction(3, 8, new Fraction((double)3 / (double)8));
-        assertFraction(5, 8, new Fraction((double)5 / (double)8));
-        assertFraction(7, 8, new Fraction((double)7 / (double)8));
-        assertFraction(1, 9, new Fraction((double)1 / (double)9));
-        assertFraction(2, 9, new Fraction((double)2 / (double)9));
-        assertFraction(4, 9, new Fraction((double)4 / (double)9));
-        assertFraction(5, 9, new Fraction((double)5 / (double)9));
-        assertFraction(7, 9, new Fraction((double)7 / (double)9));
-        assertFraction(8, 9, new Fraction((double)8 / (double)9));
-        assertFraction(1, 10, new Fraction((double)1 / (double)10));
-        assertFraction(3, 10, new Fraction((double)3 / (double)10));
-        assertFraction(7, 10, new Fraction((double)7 / (double)10));
-        assertFraction(9, 10, new Fraction((double)9 / (double)10));
-        assertFraction(1, 11, new Fraction((double)1 / (double)11));
-        assertFraction(2, 11, new Fraction((double)2 / (double)11));
-        assertFraction(3, 11, new Fraction((double)3 / (double)11));
-        assertFraction(4, 11, new Fraction((double)4 / (double)11));
-        assertFraction(5, 11, new Fraction((double)5 / (double)11));
-        assertFraction(6, 11, new Fraction((double)6 / (double)11));
-        assertFraction(7, 11, new Fraction((double)7 / (double)11));
-        assertFraction(8, 11, new Fraction((double)8 / (double)11));
-        assertFraction(9, 11, new Fraction((double)9 / (double)11));
-        assertFraction(10, 11, new Fraction((double)10 / (double)11));
-    }
-
-    // MATH-181
-    public void testDigitLimitConstructor() throws ConvergenceException  {
-        assertFraction(2, 5, new Fraction(0.4, 1));
-        assertFraction(2, 5, new Fraction(0.4, 2));
-        assertFraction(2, 5, new Fraction(0.4, 3));
-
-        assertFraction(3, 5,      new Fraction(0.6152, 1));
-        assertFraction(8, 13,     new Fraction(0.6152, 2));
-        assertFraction(510, 829,  new Fraction(0.6152, 3));
-        assertFraction(769, 1250, new Fraction(0.6152, 4));
-
-        try {
-            new Fraction(0.6152, 15);
-            fail("an exception should have been thrown");
-        } catch (IllegalArgumentException iae) {
-            // expected behavior
-        } catch (Exception e) {
-            fail("wrong exception caught");
-        }
-    }
-
-    public void testEpsilonLimitConstructor() throws ConvergenceException  {
-        assertFraction(2, 5, new Fraction(0.4, 1.0e-5, 100));
-
-        assertFraction(3, 5,      new Fraction(0.6152, 0.02, 100));
-        assertFraction(8, 13,     new Fraction(0.6152, 1.0e-3, 100));
-        assertFraction(251, 408,  new Fraction(0.6152, 1.0e-4, 100));
-        assertFraction(251, 408,  new Fraction(0.6152, 1.0e-5, 100));
-        assertFraction(510, 829,  new Fraction(0.6152, 1.0e-6, 100));
-        assertFraction(769, 1250, new Fraction(0.6152, 1.0e-7, 100));
-    }
-
+    
     public void testCompareTo() {
         Fraction first = new Fraction(1, 2);
         Fraction second = new Fraction(1, 3);
@@ -220,6 +131,22 @@
         assertFraction(10, 21, b.abs());
         assertFraction(10, 21, c.abs());
     }
+
+    public void testIntegerOverflow() {
+        checkIntegerOverflow(0.75000000001455192);
+        checkIntegerOverflow(1.0e10);
+        checkIntegerOverflow(-1.0e10);
+        checkIntegerOverflow(-43979.60679604749);
+    }
+
+    private void checkIntegerOverflow(double a) {
+        try {
+            new Fraction(a, 1.0e-12, 1000);
+            fail("an exception should have been thrown");
+        } catch (ConvergenceException ce) {
+            // expected behavior
+        }
+    }
     
     public void testReciprocal() {
         Fraction f = null;
@@ -369,7 +296,7 @@
         Fraction f1 = new Fraction(3, 5);
         Fraction f2 = Fraction.ZERO;
         try {
-            f1.divide(f2);
+            Fraction f = f1.divide(f2);
             fail("expecting ArithmeticException");
         } catch (ArithmeticException ex) {}
         
@@ -506,6 +433,7 @@
     public void testEqualsAndHashCode() {
         Fraction zero  = new Fraction(0,1);
         Fraction nullFraction = null;
+        int zeroHash = zero.hashCode();
         assertTrue( zero.equals(zero));
         assertFalse(zero.equals(nullFraction));
         assertFalse(zero.equals(new Double(0)));
@@ -521,7 +449,7 @@
         assertTrue(threeFourths.equals(Fraction.getReducedFraction(6, 8)));
         assertTrue(Fraction.ZERO.equals(Fraction.getReducedFraction(0, -1)));
         try {
-            Fraction.getReducedFraction(1, 0);
+            Fraction f = Fraction.getReducedFraction(1, 0);
             fail("expecting ArithmeticException");
         } catch (ArithmeticException ex) {
             // expected
