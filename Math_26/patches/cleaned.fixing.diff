diff -u -r data/changesInfo//Math_26/properties/modified_classes/inducing/src/java/org/apache/commons/math/fraction/Fraction.java data/changesInfo//Math_26/cleaned/fixing/src/java/org/apache/commons/math/fraction/Fraction.java
--- data/changesInfo//Math_26/properties/modified_classes/inducing/src/java/org/apache/commons/math/fraction/Fraction.java	2023-12-27 22:46:50.932553312 -0800
+++ data/changesInfo//Math_26/cleaned/fixing/src/java/org/apache/commons/math/fraction/Fraction.java	2023-07-25 07:39:00.281470916 -0700
@@ -163,6 +163,9 @@
     {
         double r0 = value;
         int a0 = (int)Math.floor(r0);
+        if (Math.abs(a0) > Integer.MAX_VALUE) {
+            throw new FractionConversionException(value, a0);
+        }
 
         // check for (almost) integer arguments, which should not go
         // to iterations.
@@ -188,7 +191,10 @@
             int a1 = (int)Math.floor(r1);
             p2 = (a1 * p1) + p0;
             q2 = (a1 * q1) + q0;
-            
+            if ((Math.abs(p2) > Integer.MAX_VALUE) || (Math.abs(q2) > Integer.MAX_VALUE)) {
+                throw new FractionConversionException(p2, q2);
+            }
+
             double convergent = (double)p2 / (double)q2;
             if (n < maxIterations && Math.abs(convergent - value) > epsilon && q2 < maxDenominator) {
                 p0 = p1;
Only in data/changesInfo//Math_26/properties/modified_classes/inducing/src: test
