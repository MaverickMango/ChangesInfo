diff --git a/src/com/google/javascript/jscomp/NameAnalyzer.java b/src/com/google/javascript/jscomp/NameAnalyzer.java
index 8a2c0ee..9069c01 100644
--- a/src/com/google/javascript/jscomp/NameAnalyzer.java
+++ b/src/com/google/javascript/jscomp/NameAnalyzer.java
@@ -518,7 +518,7 @@
               recordDepScope(nameNode, ns);
             }
           } else {
-            recordDepScope(parent, ns);
+            recordDepScope(n, ns);
           }
         }
       } else if (NodeUtil.isVarDeclaration(n)) {
@@ -1506,10 +1506,7 @@
       }
 
       if (parent.getType() == Token.ASSIGN) {
-        Node gramp = parent.getParent();
-        if (gramp != null && gramp.getType() == Token.EXPR_RESULT) {
-          return scopes.get(gramp);
-        }
+        return scopes.get(parent);
       }
     }
 
diff --git a/test/com/google/javascript/jscomp/NameAnalyzerTest.java b/test/com/google/javascript/jscomp/NameAnalyzerTest.java
index 2608f39..e8424dc 100644
--- a/test/com/google/javascript/jscomp/NameAnalyzerTest.java
+++ b/test/com/google/javascript/jscomp/NameAnalyzerTest.java
@@ -27,7 +27,9 @@
   private static String kExterns =
       "var window, top;" +
       "var document;" +
-      "var Function; var externfoo; methods.externfoo;";
+      "var Function;" +
+      "var Array;" +
+      "var externfoo; methods.externfoo;";
 
   public NameAnalyzerTest() {
     super(kExterns);
@@ -750,8 +752,8 @@
   }
 
   public void testNestedAssigns() {
-    // TODO(nicksantos): Make NameAnalyzer smarter, so that we can eliminate x.
-    testSame("var x = 0; var y = x = 3; window.alert(y);");
+    test("var x = 0; var y = x = 3; window.alert(y);",
+         "var y = 3; window.alert(y);");
   }
 
   public void testComplexNestedAssigns1() {
@@ -1102,15 +1104,18 @@
   }
 
   public void testNestedAssign2() {
-    testSame("var a, b = a = 1; foo(b)");
+    test("var a, b = a = 1; foo(b)",
+         "var b = 1; foo(b)");
   }
 
   public void testNestedAssign3() {
-    testSame("var a, b = a = 1; a = b = 2; foo(b)");
+    test("var a, b = a = 1; a = b = 2; foo(b)",
+         "var b = 1; b = 2; foo(b)");
   }
 
   public void testNestedAssign4() {
-    testSame("var a, b = a = 1; b = a = 2; foo(b)");
+    test("var a, b = a = 1; b = a = 2; foo(b)",
+         "var b = 1; b = 2; foo(b)");
   }
 
   public void testNestedAssign5() {
@@ -1564,6 +1569,24 @@
       "window.Bar = data.Bar;");
   }
 
+  public void testArrayExt() {
+    testSame(
+      "Array.prototype.foo = function() { return 1 };" +
+      "var y = [];" +
+      "switch (y.foo()) {" +
+      "}");
+  }
+
+  public void testArrayAliasExt() {
+    testSame(
+      "Array$X = Array;" +
+      "Array$X.prototype.foo = function() { return 1 };" +
+      "function Array$X() {}" +
+      "var y = [];" +
+      "switch (y.foo()) {" +
+      "}");
+  }
+
   @Override
   protected CompilerPass getProcessor(Compiler compiler) {
     return new MarkNoSideEffectCallsAndNameAnalyzerRunner(compiler);
