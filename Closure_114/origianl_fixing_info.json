{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "/home/liumengjiao/Desktop/CI/Benchmark/data/changesInfo/",
  "properties": {
    "trigger.tests": "com.google.javascript.jscomp.NameAnalyzerTest::testAssignWithCall",
    "test.dir": "test",
    "clz.modified": "com.google.javascript.jscomp.NameAnalyzer",
    "src.dir": "src"
  },
  "timeoutSecond": 100,
  "proj": "Closure",
  "id": "114",
  "workingDir": "../bugs/Closure_114_buggy",
  "buggyCommit": "a44af4540d0f2bf5fc5ecd0a34c9fea656ee574c",
  "inducingCommit": "686a1daa30deb8970d5f3d9aa799d84cff92eac2",
  "originalCommit": "c1c79684ee1bc10c75c3585abbf822b6ef3c7e9a",
  "bug_name": "Closure_114",
  "derive": "defects4j",
  "original_fixing_commit": "5f03c6817341d39d8dead76c7511fd6bb0b9009f",
  "buildFiles_changed": false,
  "regression": true,
  "inducing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/jscomp/NameAnalyzer.java",
        "src/com/google/javascript/jscomp/NameAnalyzer.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "com.google.javascript.jscomp.NameAnalyzer:getEnclosingFunctionDependencyScope:[NodeTraversal t]:NameInformation",
            "com.google.javascript.jscomp.NameAnalyzer\\$FindDependencyScopes:visit:[NodeTraversal t, Node n, Node parent]:void"
          ],
          "num": 2
        },
        {
          "qualified_names": [
            "com.google.javascript.jscomp.NameAnalyzer\\$FindDependencyScopes:visit:[NodeTraversal t, Node n, Node parent]:void",
            "com.google.javascript.jscomp.NameAnalyzer:getEnclosingFunctionDependencyScope:[NodeTraversal t]:NameInformation"
          ],
          "num": 2
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "521",
            "1509",
            "1510",
            "1511",
            "1512"
          ],
          "num": 5
        },
        {
          "qualified_names": [
            "521",
            "1509"
          ],
          "num": 2
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/jscomp/NameAnalyzer.java b/src/com/google/javascript/jscomp/NameAnalyzer.java\nindex 8a2c0ee..9069c01 100644\n--- a/src/com/google/javascript/jscomp/NameAnalyzer.java\n+++ b/src/com/google/javascript/jscomp/NameAnalyzer.java\n@@ -518,7 +518,7 @@\n               recordDepScope(nameNode, ns);\n             }\n           } else {\n-            recordDepScope(parent, ns);\n+            recordDepScope(n, ns);\n           }\n         }\n       } else if (NodeUtil.isVarDeclaration(n)) {\n@@ -1506,10 +1506,7 @@\n       }\n \n       if (parent.getType() \u003d\u003d Token.ASSIGN) {\n-        Node gramp \u003d parent.getParent();\n-        if (gramp !\u003d null \u0026\u0026 gramp.getType() \u003d\u003d Token.EXPR_RESULT) {\n-          return scopes.get(gramp);\n-        }\n+        return scopes.get(parent);\n       }\n     }\n \n",
      "operations": [
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [50920,50952]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "InfixExpression [50965,51018]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Block [51020,51067]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "IfStatement [50961,51067]",
          "to": ""
        }
      ]
    }
  ],
  "inducing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  },
  "trigger_tests": [
    {
      "test_class": "com.google.javascript.jscomp.NameAnalyzerTest",
      "test_function": "testAssignWithCall",
      "assertion_line": "1236",
      "exception": "junit.framework.AssertionFailedError",
      "message": "Expected: var x;(function(){x})()\nResult: (function(){x})()"
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/jscomp/NameAnalyzer.java",
        "src/com/google/javascript/jscomp/NameAnalyzer.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "com.google.javascript.jscomp.NameAnalyzer\\$FindReferences:visit:[NodeTraversal t, Node n, Node parent]:void",
            "com.google.javascript.jscomp.NameAnalyzer\\$FindReferences:maybeRecordReferenceOrAlias:[NodeTraversal t, Node n, Node parent, NameInformation nameInfo, NameInformation referring]:void",
            "com.google.javascript.jscomp.NameAnalyzer\\$FindDependencyScopes:recordAssignment:[NodeTraversal t, Node n, Node recordNode]:void"
          ],
          "num": 3
        },
        {
          "qualified_names": [
            "com.google.javascript.jscomp.NameAnalyzer\\$FindDependencyScopes:recordAssignment:[NodeTraversal t, Node n, Node recordNode]:void",
            "com.google.javascript.jscomp.NameAnalyzer\\$FindReferences:visit:[NodeTraversal t, Node n, Node parent]:void",
            "com.google.javascript.jscomp.NameAnalyzer\\$FindReferences:maybeRecordReferenceOrAlias:[NodeTraversal t, Node n, Node parent, NameInformation nameInfo, NameInformation referring]:void"
          ],
          "num": 3
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "578",
            "848",
            "849",
            "917"
          ],
          "num": 4
        },
        {
          "qualified_names": [
            "578",
            "579",
            "580",
            "581",
            "582",
            "583",
            "584",
            "854",
            "922"
          ],
          "num": 9
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/jscomp/NameAnalyzer.java b/src/com/google/javascript/jscomp/NameAnalyzer.java\nindex fe64ce5..a7b95b0 100644\n--- a/src/com/google/javascript/jscomp/NameAnalyzer.java\n+++ b/src/com/google/javascript/jscomp/NameAnalyzer.java\n@@ -575,7 +575,13 @@\n           } else {\n             recordDepScope(nameNode, ns);\n           }\n-        } else {\n+        } else if (!(parent.isCall() \u0026\u0026 parent.getFirstChild() \u003d\u003d n)) {\n+          // The rhs of the assignment is the caller, so it\u0027s used by the\n+          // context. Don\u0027t associate it w/ the lhs.\n+          // FYI: this fixes only the specific case where the assignment is the\n+          // caller expression, but it could be nested deeper in the caller and\n+          // we would still get a bug.\n+          // See testAssignWithCall2 for an example of this.\n           recordDepScope(recordNode, ns);\n         }\n       }\n@@ -845,8 +851,7 @@\n \n     @Override\n     public void visit(NodeTraversal t, Node n, Node parent) {\n-      if (!(n.isName() ||\n-            NodeUtil.isGet(n) \u0026\u0026 !parent.isGetProp())) {\n+      if (!(n.isName() || (NodeUtil.isGet(n) \u0026\u0026 !parent.isGetProp()))) {\n         // This is not a simple or qualified name.\n         return;\n       }\n@@ -914,7 +919,7 @@\n \n       // A value whose result is the return value of a function call\n       // can be an alias to global object.\n-      // Here we add a alias to the general \"global\" object\n+      // Here we add an alias to the general \"global\" object\n       // to act as a placeholder for the actual (unnamed) value.\n       if (maybeHiddenAlias(n)) {\n         recordAlias(name, WINDOW);\n",
      "operations": [
        {
          "type": "insert-node",
          "from": "",
          "to": "IfStatement [18851,19346]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "PrefixExpression [18855,18904]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "ParenthesizedExpression [28014,28056]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  },
  "patch_changed_mths": {
    "qualified_names": [
      "com.google.javascript.jscomp.NameAnalyzer\\$FindDependencyScopes:recordAssignment(Lcom/google/javascript/jscomp/NodeTraversal;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V:regression",
      "com.google.javascript.jscomp.NameAnalyzer\\$FindReferences:visit(Lcom/google/javascript/jscomp/NodeTraversal;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V:regression",
      "com.google.javascript.jscomp.NameAnalyzer\\$FindReferences:maybeRecordReferenceOrAlias(Lcom/google/javascript/jscomp/NodeTraversal;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/jscomp/NameAnalyzer$NameInformation;Lcom/google/javascript/jscomp/NameAnalyzer$NameInformation;)V:regression"
    ],
    "num": 3
  }
}