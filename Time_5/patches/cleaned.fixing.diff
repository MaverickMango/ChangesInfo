diff -u -r data/changesInfo//Time_5/properties/modified_classes/inducing/JodaTime/src/java/org/joda/time/Period.java data/changesInfo//Time_5/cleaned/fixing/JodaTime/src/java/org/joda/time/Period.java
--- data/changesInfo//Time_5/properties/modified_classes/inducing/JodaTime/src/java/org/joda/time/Period.java	2023-12-27 22:52:47.252414838 -0800
+++ data/changesInfo//Time_5/cleaned/fixing/JodaTime/src/java/org/joda/time/Period.java	2023-07-28 00:23:42.169566924 -0700
@@ -1505,23 +1505,30 @@
      * @since 1.5
      */
     public Period normalizedStandard(PeriodType type) {
+        type = DateTimeUtils.getPeriodType(type);
         long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs
         millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));
         millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));
         millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));
         millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));
         millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));
-        Period result = new Period(millis, DateTimeUtils.getPeriodType(type), ISOChronology.getInstanceUTC());
+        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());
         int years = getYears();
         int months = getMonths();
         if (years != 0 || months != 0) {
-            years = FieldUtils.safeAdd(years, months / 12);
-            months = months % 12;
-            if (years != 0) {
-                result = result.withYears(years);
+            long totalMonths = years * 12L + months;
+            if (type.isSupported(DurationFieldType.YEARS_TYPE)) {
+                int normalizedYears = FieldUtils.safeToInt(totalMonths / 12);
+                result = result.withYears(normalizedYears);
+                totalMonths = totalMonths - (normalizedYears * 12);
             }
-            if (months != 0) {
-                result = result.withMonths(months);
+            if (type.isSupported(DurationFieldType.MONTHS_TYPE)) {
+                int normalizedMonths = FieldUtils.safeToInt(totalMonths);
+                result = result.withYears(normalizedMonths);
+                totalMonths = totalMonths - normalizedMonths;
+            }
+            if (totalMonths != 0) {
+                throw new UnsupportedOperationException("Unable to normalize as PeriodType is missing either years or months but period has a month/year amount: " + toString());
             }
         }
         return result;
Only in data/changesInfo//Time_5/properties/modified_classes/inducing/JodaTime/src/java/org/joda/time: PeriodType.java
Only in data/changesInfo//Time_5/properties/modified_classes/inducing/JodaTime/src: test
