diff --git a/RELEASE-NOTES.txt b/RELEASE-NOTES.txt
index 5beb66f..84f44dd 100644
--- a/RELEASE-NOTES.txt
+++ b/RELEASE-NOTES.txt
@@ -48,6 +48,9 @@
 
 Bug fixes since 2.3
 -------------------
+- Period.normalizedStandard(PeriodType) [#79]
+  Fix handling of PeriodType when either years or months missing
+
 - Better Javadoc for parsing of numbers in format patterns [#60]
 
 - Remove uncaughtException calls [#59]
diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java
index 5b36bc5..5ea67a7 100644
--- a/src/main/java/org/joda/time/Period.java
+++ b/src/main/java/org/joda/time/Period.java
@@ -1614,23 +1614,30 @@
      * @since 1.5
      */
     public Period normalizedStandard(PeriodType type) {
+        type = DateTimeUtils.getPeriodType(type);
         long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs
         millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));
         millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));
         millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));
         millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));
         millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));
-        Period result = new Period(millis, DateTimeUtils.getPeriodType(type), ISOChronology.getInstanceUTC());
+        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());
         int years = getYears();
         int months = getMonths();
         if (years != 0 || months != 0) {
-            years = FieldUtils.safeAdd(years, months / 12);
-            months = months % 12;
-            if (years != 0) {
-                result = result.withYears(years);
+            long totalMonths = years * 12L + months;
+            if (type.isSupported(DurationFieldType.YEARS_TYPE)) {
+                int normalizedYears = FieldUtils.safeToInt(totalMonths / 12);
+                result = result.withYears(normalizedYears);
+                totalMonths = totalMonths - (normalizedYears * 12);
             }
-            if (months != 0) {
-                result = result.withMonths(months);
+            if (type.isSupported(DurationFieldType.MONTHS_TYPE)) {
+                int normalizedMonths = FieldUtils.safeToInt(totalMonths);
+                result = result.withMonths(normalizedMonths);
+                totalMonths = totalMonths - normalizedMonths;
+            }
+            if (totalMonths != 0) {
+                throw new UnsupportedOperationException("Unable to normalize as PeriodType is missing either years or months but period has a month/year amount: " + toString());
             }
         }
         return result;
diff --git a/src/test/java/org/joda/time/TestPeriod_Basics.java b/src/test/java/org/joda/time/TestPeriod_Basics.java
index f291c9b..82030f8 100644
--- a/src/test/java/org/joda/time/TestPeriod_Basics.java
+++ b/src/test/java/org/joda/time/TestPeriod_Basics.java
@@ -217,6 +217,7 @@
     }
     
     class MockPeriod extends BasePeriod {
+        private static final long serialVersionUID = 1L;
         public MockPeriod(long value) {
             super(value, null, null);
         }
@@ -1516,4 +1517,46 @@
         assertEquals(new Period(2, 3, 0, 37, 3, 0, 0, 0, PeriodType.yearMonthDayTime()), result);
     }
 
+    public void testNormalizedStandard_periodType_months1() {
+        Period test = new Period(1, 15, 0, 0, 0, 0, 0, 0);
+        Period result = test.normalizedStandard(PeriodType.months());
+        assertEquals(new Period(1, 15, 0, 0, 0, 0, 0, 0), test);
+        assertEquals(new Period(0, 27, 0, 0, 0, 0, 0, 0, PeriodType.months()), result);
+    }
+
+    public void testNormalizedStandard_periodType_months2() {
+        Period test = new Period(-2, 15, 0, 0, 0, 0, 0, 0);
+        Period result = test.normalizedStandard(PeriodType.months());
+        assertEquals(new Period(-2, 15, 0, 0, 0, 0, 0, 0), test);
+        assertEquals(new Period(0, -9, 0, 0, 0, 0, 0, 0, PeriodType.months()), result);
+    }
+
+    public void testNormalizedStandard_periodType_months3() {
+        Period test = new Period(0, 4, 0, 0, 0, 0, 0, 0);
+        Period result = test.normalizedStandard(PeriodType.months());
+        assertEquals(new Period(0, 4, 0, 0, 0, 0, 0, 0), test);
+        assertEquals(new Period(0, 4, 0, 0, 0, 0, 0, 0, PeriodType.months()), result);
+    }
+
+    public void testNormalizedStandard_periodType_years() {
+        Period test = new Period(1, 15, 0, 0, 0, 0, 0, 0);
+        try {
+            test.normalizedStandard(PeriodType.years());
+            fail();
+        } catch (UnsupportedOperationException ex) {
+            // expected
+        }
+    }
+
+    public void testNormalizedStandard_periodType_monthsWeeks() {
+        PeriodType type = PeriodType.forFields(new DurationFieldType[]{
+                        DurationFieldType.months(),
+                        DurationFieldType.weeks(),
+                        DurationFieldType.days()});
+        Period test = new Period(2, 4, 6, 0, 0, 0, 0, 0);
+        Period result = test.normalizedStandard(type);
+        assertEquals(new Period(2, 4, 6, 0, 0, 0, 0, 0), test);
+        assertEquals(new Period(0, 28, 6, 0, 0, 0, 0, 0, type), result);
+    }
+
 }
