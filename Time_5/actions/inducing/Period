===
insert-tree
---
ImportDeclaration [709,751]
    QualifiedName: org.joda.time.chrono.ISOChronology [716,750]
to
CompilationUnit [0,61344]
at 3
===
insert-tree
---
MethodDeclaration [61539,62976]
    Javadoc [61539,62871]
        TagElement [61550,62697]
            TextElement: Normalizes this period using standard rules, assuming a 12 month year, [61550,61620]
            TextElement: 7 day week, 24 hour day, 60 minute hour and 60 second minute. [61628,61689]
            TextElement: <p> [61697,61700]
            TextElement: This method allows you to normalize a period. [61708,61753]
            TextElement: However to achieve this it makes the assumption that all years are [61761,61827]
            TextElement: 12 months, all weeks are 7 days, all days are 24 hours, [61835,61890]
            TextElement: all hours are 60 minutes and all minutes are 60 seconds. This is not [61898,61966]
            TextElement: true when daylight savings time is considered, and may also not be true [61974,62045]
            TextElement: for some chronologies. However, it is included as it is a useful operation [62053,62127]
            TextElement: for many applications and business rules. [62135,62176]
            TextElement: <p> [62184,62187]
            TextElement: If the period contains years or months, then the months will be [62195,62258]
            TextElement: normalized to be between 0 and 11. The days field and below will be [62266,62333]
            TextElement: normalized as necessary, however this will not overflow into the months [62341,62412]
            TextElement: field. Thus a period of 1 year 15 months will normalize to 2 years 3 months. [62420,62496]
            TextElement: But a period of 1 month 40 days will remain as 1 month 40 days. [62504,62567]
            TextElement: <p> [62575,62578]
            TextElement: The result will always have a <code>PeriodType</code> of standard, thus [62586,62657]
            TextElement: days will be grouped into weeks. [62665,62697]
        TagElement [62713,62766]
            TextElement:  a normalized period equivalent to this period [62720,62766]
        TagElement [62774,62845]
            SimpleName: ArithmeticException [62782,62801]
            TextElement:  if any field is too large to be represented [62801,62845]
        TagElement [62853,62863]
            TextElement:  1.5 [62859,62863]
    Modifier: public [62876,62882]
    SimpleType [62883,62889]
        SimpleName: Period [62883,62889]
    SimpleName: normalizedStandard [62890,62908]
    Block [62911,62976]
        ReturnStatement [62921,62970]
            MethodInvocation [62928,62969]
                SimpleName: normalizedStandard [62928,62946]
                METHOD_INVOCATION_ARGUMENTS [62947,62968]
                    MethodInvocation [62947,62968]
                        METHOD_INVOCATION_RECEIVER [62947,62957]
                            SimpleName: PeriodType [62947,62957]
                        SimpleName: standard [62958,62966]
to
TypeDeclaration [749,61343]
at 90
===
insert-tree
---
MethodDeclaration [63060,65983]
    Javadoc [63060,64857]
        TagElement [63071,64449]
            TextElement: Normalizes this period using standard rules, assuming a 12 month year, [63071,63141]
            TextElement: 7 day week, 24 hour day, 60 minute hour and 60 second minute, [63149,63210]
            TextElement: providing control over how the result is split into fields. [63218,63277]
            TextElement: <p> [63285,63288]
            TextElement: This method allows you to normalize a period. [63296,63341]
            TextElement: However to achieve this it makes the assumption that all years are [63349,63415]
            TextElement: 12 months, all weeks are 7 days, all days are 24 hours, [63423,63478]
            TextElement: all hours are 60 minutes and all minutes are 60 seconds. This is not [63486,63554]
            TextElement: true when daylight savings time is considered, and may also not be true [63562,63633]
            TextElement: for some chronologies. However, it is included as it is a useful operation [63641,63715]
            TextElement: for many applications and business rules. [63723,63764]
            TextElement: <p> [63772,63775]
            TextElement: If the period contains years or months, then the months will be [63783,63846]
            TextElement: normalized to be between 0 and 11. The days field and below will be [63854,63921]
            TextElement: normalized as necessary, however this will not overflow into the months [63929,64000]
            TextElement: field. Thus a period of 1 year 15 months will normalize to 2 years 3 months. [64008,64084]
            TextElement: But a period of 1 month 40 days will remain as 1 month 40 days. [64092,64155]
            TextElement: <p> [64163,64166]
            TextElement: The PeriodType parameter controls how the result is created. It allows [64174,64244]
            TextElement: you to omit certain fields from the result if desired. For example, [64252,64319]
            TextElement: you may not want the result to include weeks, in which case you pass [64327,64395]
            TextElement: in <code>PeriodType.yearMonthDayTime()</code>. [64403,64449]
        TagElement [64465,64537]
            SimpleName: type [64472,64476]
            TextElement:   the period type of the new period, null means standard type [64476,64537]
        TagElement [64545,64598]
            TextElement:  a normalized period equivalent to this period [64552,64598]
        TagElement [64606,64677]
            SimpleName: ArithmeticException [64614,64633]
            TextElement:  if any field is too large to be represented [64633,64677]
        TagElement [64685,64831]
            SimpleName: UnsupportedOperationException [64693,64722]
            TextElement:  if this period contains non-zero [64722,64755]
            TextElement: years or months but the specified period type does not support them [64764,64831]
        TagElement [64839,64849]
            TextElement:  1.5 [64845,64849]
    Modifier: public [64862,64868]
    SimpleType [64869,64875]
        SimpleName: Period [64869,64875]
    SimpleName: normalizedStandard [64876,64894]
    SingleVariableDeclaration [64895,64910]
        SimpleType [64895,64905]
            SimpleName: PeriodType [64895,64905]
        SimpleName: type [64906,64910]
    Block [64912,65983]
        VariableDeclarationStatement [64922,64948]
            PrimitiveType: long [64922,64926]
            VariableDeclarationFragment [64927,64947]
                SimpleName: millis [64927,64933]
                MethodInvocation [64936,64947]
                    SimpleName: getMillis [64936,64945]
        ExpressionStatement [65014,65095]
            Assignment [65014,65094]
                SimpleName: millis [65014,65020]
                ASSIGNMENT_OPERATOR: += [65021,65023]
                ParenthesizedExpression [65024,65094]
                    InfixExpression [65025,65093]
                        ParenthesizedExpression [65025,65046]
                            CastExpression [65026,65045]
                                PrimitiveType: long [65027,65031]
                                MethodInvocation [65033,65045]
                                    SimpleName: getSeconds [65033,65043]
                        INFIX_EXPRESSION_OPERATOR: * [65047,65048]
                        ParenthesizedExpression [65049,65093]
                            CastExpression [65050,65092]
                                PrimitiveType: long [65051,65055]
                                QualifiedName: DateTimeConstants.MILLIS_PER_SECOND [65057,65092]
        ExpressionStatement [65104,65185]
            Assignment [65104,65184]
                SimpleName: millis [65104,65110]
                ASSIGNMENT_OPERATOR: += [65111,65113]
                ParenthesizedExpression [65114,65184]
                    InfixExpression [65115,65183]
                        ParenthesizedExpression [65115,65136]
                            CastExpression [65116,65135]
                                PrimitiveType: long [65117,65121]
                                MethodInvocation [65123,65135]
                                    SimpleName: getMinutes [65123,65133]
                        INFIX_EXPRESSION_OPERATOR: * [65137,65138]
                        ParenthesizedExpression [65139,65183]
                            CastExpression [65140,65182]
                                PrimitiveType: long [65141,65145]
                                QualifiedName: DateTimeConstants.MILLIS_PER_MINUTE [65147,65182]
        ExpressionStatement [65194,65271]
            Assignment [65194,65270]
                SimpleName: millis [65194,65200]
                ASSIGNMENT_OPERATOR: += [65201,65203]
                ParenthesizedExpression [65204,65270]
                    InfixExpression [65205,65269]
                        ParenthesizedExpression [65205,65224]
                            CastExpression [65206,65223]
                                PrimitiveType: long [65207,65211]
                                MethodInvocation [65213,65223]
                                    SimpleName: getHours [65213,65221]
                        INFIX_EXPRESSION_OPERATOR: * [65225,65226]
                        ParenthesizedExpression [65227,65269]
                            CastExpression [65228,65268]
                                PrimitiveType: long [65229,65233]
                                QualifiedName: DateTimeConstants.MILLIS_PER_HOUR [65235,65268]
        ExpressionStatement [65280,65355]
            Assignment [65280,65354]
                SimpleName: millis [65280,65286]
                ASSIGNMENT_OPERATOR: += [65287,65289]
                ParenthesizedExpression [65290,65354]
                    InfixExpression [65291,65353]
                        ParenthesizedExpression [65291,65309]
                            CastExpression [65292,65308]
                                PrimitiveType: long [65293,65297]
                                MethodInvocation [65299,65308]
                                    SimpleName: getDays [65299,65306]
                        INFIX_EXPRESSION_OPERATOR: * [65310,65311]
                        ParenthesizedExpression [65312,65353]
                            CastExpression [65313,65352]
                                PrimitiveType: long [65314,65318]
                                QualifiedName: DateTimeConstants.MILLIS_PER_DAY [65320,65352]
        ExpressionStatement [65364,65441]
            Assignment [65364,65440]
                SimpleName: millis [65364,65370]
                ASSIGNMENT_OPERATOR: += [65371,65373]
                ParenthesizedExpression [65374,65440]
                    InfixExpression [65375,65439]
                        ParenthesizedExpression [65375,65394]
                            CastExpression [65376,65393]
                                PrimitiveType: long [65377,65381]
                                MethodInvocation [65383,65393]
                                    SimpleName: getWeeks [65383,65391]
                        INFIX_EXPRESSION_OPERATOR: * [65395,65396]
                        ParenthesizedExpression [65397,65439]
                            CastExpression [65398,65438]
                                PrimitiveType: long [65399,65403]
                                QualifiedName: DateTimeConstants.MILLIS_PER_WEEK [65405,65438]
        VariableDeclarationStatement [65450,65552]
            SimpleType [65450,65456]
                SimpleName: Period [65450,65456]
            VariableDeclarationFragment [65457,65551]
                SimpleName: result [65457,65463]
                ClassInstanceCreation [65466,65551]
                    SimpleType [65470,65476]
                        SimpleName: Period [65470,65476]
                    SimpleName: millis [65477,65483]
                    MethodInvocation [65485,65518]
                        METHOD_INVOCATION_RECEIVER [65485,65498]
                            SimpleName: DateTimeUtils [65485,65498]
                        SimpleName: getPeriodType [65499,65512]
                        METHOD_INVOCATION_ARGUMENTS [65513,65517]
                            SimpleName: type [65513,65517]
                    MethodInvocation [65520,65550]
                        METHOD_INVOCATION_RECEIVER [65520,65533]
                            SimpleName: ISOChronology [65520,65533]
                        SimpleName: getInstanceUTC [65534,65548]
        VariableDeclarationStatement [65561,65584]
            PrimitiveType: int [65561,65564]
            VariableDeclarationFragment [65565,65583]
                SimpleName: years [65565,65570]
                MethodInvocation [65573,65583]
                    SimpleName: getYears [65573,65581]
        VariableDeclarationStatement [65593,65618]
            PrimitiveType: int [65593,65596]
            VariableDeclarationFragment [65597,65617]
                SimpleName: months [65597,65603]
                MethodInvocation [65606,65617]
                    SimpleName: getMonths [65606,65615]
        IfStatement [65627,65954]
            InfixExpression [65631,65656]
                InfixExpression [65631,65641]
                    SimpleName: years [65631,65636]
                    INFIX_EXPRESSION_OPERATOR: != [65637,65639]
                    NumberLiteral: 0 [65640,65641]
                INFIX_EXPRESSION_OPERATOR: || [65642,65644]
                InfixExpression [65645,65656]
                    SimpleName: months [65645,65651]
                    INFIX_EXPRESSION_OPERATOR: != [65652,65654]
                    NumberLiteral: 0 [65655,65656]
            Block [65658,65954]
                ExpressionStatement [65672,65719]
                    Assignment [65672,65718]
                        SimpleName: years [65672,65677]
                        ASSIGNMENT_OPERATOR: = [65678,65679]
                        MethodInvocation [65680,65718]
                            METHOD_INVOCATION_RECEIVER [65680,65690]
                                SimpleName: FieldUtils [65680,65690]
                            SimpleName: safeAdd [65691,65698]
                            METHOD_INVOCATION_ARGUMENTS [65699,65717]
                                SimpleName: years [65699,65704]
                                InfixExpression [65706,65717]
                                    SimpleName: months [65706,65712]
                                    INFIX_EXPRESSION_OPERATOR: / [65713,65714]
                                    NumberLiteral: 12 [65715,65717]
                ExpressionStatement [65732,65753]
                    Assignment [65732,65752]
                        SimpleName: months [65732,65738]
                        ASSIGNMENT_OPERATOR: = [65739,65740]
                        InfixExpression [65741,65752]
                            SimpleName: months [65741,65747]
                            INFIX_EXPRESSION_OPERATOR: % [65748,65749]
                            NumberLiteral: 12 [65750,65752]
                IfStatement [65766,65847]
                    InfixExpression [65770,65780]
                        SimpleName: years [65770,65775]
                        INFIX_EXPRESSION_OPERATOR: != [65776,65778]
                        NumberLiteral: 0 [65779,65780]
                    Block [65782,65847]
                        ExpressionStatement [65800,65833]
                            Assignment [65800,65832]
                                SimpleName: result [65800,65806]
                                ASSIGNMENT_OPERATOR: = [65807,65808]
                                MethodInvocation [65809,65832]
                                    METHOD_INVOCATION_RECEIVER [65809,65815]
                                        SimpleName: result [65809,65815]
                                    SimpleName: withYears [65816,65825]
                                    METHOD_INVOCATION_ARGUMENTS [65826,65831]
                                        SimpleName: years [65826,65831]
                IfStatement [65860,65944]
                    InfixExpression [65864,65875]
                        SimpleName: months [65864,65870]
                        INFIX_EXPRESSION_OPERATOR: != [65871,65873]
                        NumberLiteral: 0 [65874,65875]
                    Block [65877,65944]
                        ExpressionStatement [65895,65930]
                            Assignment [65895,65929]
                                SimpleName: result [65895,65901]
                                ASSIGNMENT_OPERATOR: = [65902,65903]
                                MethodInvocation [65904,65929]
                                    METHOD_INVOCATION_RECEIVER [65904,65910]
                                        SimpleName: result [65904,65910]
                                    SimpleName: withMonths [65911,65921]
                                    METHOD_INVOCATION_ARGUMENTS [65922,65928]
                                        SimpleName: months [65922,65928]
        ReturnStatement [65963,65977]
            SimpleName: result [65970,65976]
to
TypeDeclaration [749,61343]
at 91
===
update-node
---
TextElement: of 5 hours 70 minutes. [37468,37490]
replace of 5 hours 70 minutes. by of 5 hours 70 minutes - see 
===
insert-tree
---
TagElement [37539,37568]
    MethodRef [37546,37567]
        SimpleName: normalizedStandard [37547,37565]
to
TagElement [37254,37734]
at 5
===
insert-node
---
TextElement: . [37568,37569]
to
TagElement [37254,37734]
at 6
===
update-node
---
TextElement: of 1 hour and -10 minutes. [44936,44962]
replace of 1 hour and -10 minutes. by of 1 hour and -10 minutes - see 
===
insert-tree
---
TagElement [45047,45076]
    MethodRef [45054,45075]
        SimpleName: normalizedStandard [45055,45073]
to
TagElement [44711,45206]
at 5
===
insert-node
---
TextElement: . [45076,45077]
to
TagElement [44711,45206]
at 6
