diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java
index 3bf7d47..4539ef5 100644
--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java
+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java
@@ -714,30 +714,6 @@
                   token = eatTokensUntilEOL();
                   continue retry;
 
-                case PRIVATE:
-                  if (!jsdocBuilder.recordVisibility(Visibility.PRIVATE)) {
-                    parser.addParserWarning("msg.jsdoc.visibility.private",
-                        stream.getLineno(), stream.getCharno());
-                  }
-                  token = eatTokensUntilEOL();
-                  continue retry;
-
-                case PROTECTED:
-                  if (!jsdocBuilder.recordVisibility(Visibility.PROTECTED)) {
-                    parser.addParserWarning("msg.jsdoc.visibility.protected",
-                        stream.getLineno(), stream.getCharno());
-                  }
-                  token = eatTokensUntilEOL();
-                  continue retry;
-
-                case PUBLIC:
-                  if (!jsdocBuilder.recordVisibility(Visibility.PUBLIC)) {
-                    parser.addParserWarning("msg.jsdoc.visibility.public",
-                        stream.getLineno(), stream.getCharno());
-                  }
-                  token = eatTokensUntilEOL();
-                  continue retry;
-
                 case NO_SHADOW:
                   if (!jsdocBuilder.recordNoShadow()) {
                     parser.addParserWarning("msg.jsdoc.noshadow",
@@ -841,6 +817,9 @@
 
                 case DEFINE:
                 case RETURN:
+                case PRIVATE:
+                case PROTECTED:
+                case PUBLIC:
                 case THIS:
                 case TYPE:
                 case TYPEDEF:
@@ -848,26 +827,45 @@
                   charno = stream.getCharno();
 
                   Node typeNode = null;
-                  if (!lookAheadForTypeAnnotation() &&
-                      annotation == Annotation.RETURN) {
-                    // If RETURN doesn't have a type annotation, record
-                    // it as the unknown type.
-                    typeNode = newNode(Token.QMARK);
-                  } else {
+                  boolean hasType = lookAheadForTypeAnnotation();
+                  boolean isVisibilityAnnotation =
+                      (annotation == Annotation.PRIVATE ||
+                       annotation == Annotation.PROTECTED ||
+                       annotation == Annotation.PUBLIC);
+                  boolean canSkipTypeAnnotation =
+                      (isVisibilityAnnotation ||
+                       annotation == Annotation.RETURN);
+                  type = null;
+                  if (hasType || !canSkipTypeAnnotation) {
                     skipEOLs();
                     token = next();
                     typeNode = parseAndRecordTypeNode(token);
+
+                    if (annotation == Annotation.THIS) {
+                      typeNode = wrapNode(Token.BANG, typeNode);
+                    }
+                    type = createJSTypeExpression(typeNode);
                   }
 
-                  if (annotation == Annotation.THIS) {
-                    typeNode = wrapNode(Token.BANG, typeNode);
-                  }
-                  type = createJSTypeExpression(typeNode);
+                  // The error was reported during recursive descent
+                  // recovering parsing
+                  boolean hasError = type == null && !canSkipTypeAnnotation;
+                  if (!hasError) {
+                    // Record types for @type.
+                    // If the @private, @protected, or @public annotations
+                    // have a type attached, pretend that they actually wrote:
+                    // @type {type}\n@private
+                    // This will have some weird behavior in some cases
+                    // (for example, @private can now be used as a type-cast),
+                    // but should be mostly OK.
+                    if ((type != null && isVisibilityAnnotation)
+                        || annotation == Annotation.TYPE) {
+                      if (!jsdocBuilder.recordType(type)) {
+                        parser.addTypeWarning(
+                            "msg.jsdoc.incompat.type", lineno, charno);
+                      }
+                    }
 
-                  if (type == null) {
-                    // error reported during recursive descent
-                    // recovering parsing
-                  } else {
                     switch (annotation) {
                       case DEFINE:
                         if (!jsdocBuilder.recordDefineType(type)) {
@@ -876,7 +874,35 @@
                         }
                         break;
 
+                      case PRIVATE:
+                        if (!jsdocBuilder.recordVisibility(Visibility.PRIVATE)) {
+                          parser.addParserWarning(
+                              "msg.jsdoc.visibility.private",
+                              lineno, charno);
+                        }
+                        break;
+
+                      case PROTECTED:
+                        if (!jsdocBuilder.recordVisibility(Visibility.PROTECTED)) {
+                          parser.addParserWarning(
+                              "msg.jsdoc.visibility.protected",
+                              lineno, charno);
+                        }
+                        break;
+
+                      case PUBLIC:
+                        if (!jsdocBuilder.recordVisibility(Visibility.PUBLIC)) {
+                          parser.addParserWarning(
+                              "msg.jsdoc.visibility.public",
+                              lineno, charno);
+                        }
+                        break;
+
                       case RETURN:
+                        if (type == null) {
+                          type = createJSTypeExpression(newNode(Token.QMARK));
+                        }
+
                         if (!jsdocBuilder.recordReturnType(type)) {
                           parser.addTypeWarning(
                               "msg.jsdoc.incompat.type", lineno, charno);
@@ -909,13 +935,6 @@
                         }
                         break;
 
-                      case TYPE:
-                        if (!jsdocBuilder.recordType(type)) {
-                          parser.addTypeWarning(
-                              "msg.jsdoc.incompat.type", lineno, charno);
-                        }
-                        break;
-
                       case TYPEDEF:
                         if (!jsdocBuilder.recordTypedef(type)) {
                           parser.addTypeWarning(
diff --git a/src/com/google/javascript/rhino/Token.java b/src/com/google/javascript/rhino/Token.java
index 41491b7..a4e6f2c 100644
--- a/src/com/google/javascript/rhino/Token.java
+++ b/src/com/google/javascript/rhino/Token.java
@@ -242,7 +242,6 @@
           case ASSIGN_DIV:      return "ASSIGN_DIV";
           case ASSIGN_MOD:      return "ASSIGN_MOD";
           case HOOK:            return "HOOK";
-          case COLON:           return "COLON";
           case OR:              return "OR";
           case AND:             return "AND";
           case INC:             return "INC";
@@ -279,6 +278,9 @@
           case BANG:            return "BANG";
           case VOID:            return "VOID";
           case EQUALS:          return "EQUALS";
+          case LB:              return "LB";
+          case LC:              return "LC";
+          case COLON:           return "COLON";
         }
 
         // Token without name
diff --git a/test/com/google/javascript/jscomp/TypeCheckTest.java b/test/com/google/javascript/jscomp/TypeCheckTest.java
index 2d5a0c9..1446471 100644
--- a/test/com/google/javascript/jscomp/TypeCheckTest.java
+++ b/test/com/google/javascript/jscomp/TypeCheckTest.java
@@ -79,6 +79,14 @@
         s.getVar("URIError").getType());
   }
 
+  public void testPrivateType() throws Exception {
+    testTypes(
+        "/** @private {number} */ var x = false;",
+        "initializing variable\n" +
+        "found   : boolean\n" +
+        "required: number");
+  }
+
   public void testTypeCheck1() throws Exception {
     testTypes("/**@return {void}*/function foo(){ if (foo()) return; }");
   }
diff --git a/test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java b/test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java
index 1dd31c1..ca22c0b 100644
--- a/test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java
+++ b/test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java
@@ -2526,6 +2526,51 @@
           "type annotation incompatible with other annotations");
   }
 
+  public void testTypeTagConflict21() throws Exception {
+    parse("/**\n" +
+          " * @private {string}\n" +
+          " * @type {number}\n" +
+          " */\n" +
+          "function DictDict() {}",
+          "Bad type annotation. " +
+          "type annotation incompatible with other annotations");
+  }
+
+  public void testTypeTagConflict22() throws Exception {
+    parse("/**\n" +
+          " * @protected {string}\n" +
+          " * @param {string} x\n" +
+          " */\n" +
+          "function DictDict(x) {}",
+          "Bad type annotation. " +
+          "type annotation incompatible with other annotations");
+  }
+
+  public void testTypeTagConflict23() throws Exception {
+    parse("/**\n" +
+          " * @public {string}\n" +
+          " * @return {string} x\n" +
+          " */\n" +
+          "function DictDict() {}",
+          "Bad type annotation. " +
+          "type annotation incompatible with other annotations");
+  }
+
+  public void testPrivateType() throws Exception {
+    JSDocInfo jsdoc = parse("@private {string} */");
+    assertTypeEquals(STRING_TYPE, jsdoc.getType());
+  }
+
+  public void testProtectedType() throws Exception {
+    JSDocInfo jsdoc = parse("@protected {string} */");
+    assertTypeEquals(STRING_TYPE, jsdoc.getType());
+  }
+
+  public void testPublicType() throws Exception {
+    JSDocInfo jsdoc = parse("@public {string} */");
+    assertTypeEquals(STRING_TYPE, jsdoc.getType());
+  }
+
   public void testStableIdGeneratorConflict() throws Exception {
     parse("/**\n" +
           " * @stableIdGenerator\n" +
