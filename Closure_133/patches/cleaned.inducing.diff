Only in data/changesInfo//Closure_133/properties/modified_classes/inducing/: src
diff -u -r data/changesInfo//Closure_133/properties/modified_classes/inducing/test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java data/changesInfo//Closure_133/cleaned/inducing/test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java
--- data/changesInfo//Closure_133/properties/modified_classes/inducing/test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java	2023-12-27 22:45:16.995166140 -0800
+++ data/changesInfo//Closure_133/cleaned/inducing/test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java	2023-07-24 04:54:35.826000000 -0700
@@ -2526,51 +2526,6 @@
           "type annotation incompatible with other annotations");
   }
 
-  public void testTypeTagConflict21() throws Exception {
-    parse("/**\n" +
-          " * @private {string}\n" +
-          " * @type {number}\n" +
-          " */\n" +
-          "function DictDict() {}",
-          "Bad type annotation. " +
-          "type annotation incompatible with other annotations");
-  }
-
-  public void testTypeTagConflict22() throws Exception {
-    parse("/**\n" +
-          " * @protected {string}\n" +
-          " * @param {string} x\n" +
-          " */\n" +
-          "function DictDict(x) {}",
-          "Bad type annotation. " +
-          "type annotation incompatible with other annotations");
-  }
-
-  public void testTypeTagConflict23() throws Exception {
-    parse("/**\n" +
-          " * @public {string}\n" +
-          " * @return {string} x\n" +
-          " */\n" +
-          "function DictDict() {}",
-          "Bad type annotation. " +
-          "type annotation incompatible with other annotations");
-  }
-
-  public void testPrivateType() throws Exception {
-    JSDocInfo jsdoc = parse("@private {string} */");
-    assertTypeEquals(STRING_TYPE, jsdoc.getType());
-  }
-
-  public void testProtectedType() throws Exception {
-    JSDocInfo jsdoc = parse("@protected {string} */");
-    assertTypeEquals(STRING_TYPE, jsdoc.getType());
-  }
-
-  public void testPublicType() throws Exception {
-    JSDocInfo jsdoc = parse("@public {string} */");
-    assertTypeEquals(STRING_TYPE, jsdoc.getType());
-  }
-
   public void testStableIdGeneratorConflict() throws Exception {
     parse("/**\n" +
           " * @stableIdGenerator\n" +
@@ -2681,6 +2636,11 @@
     assertEquals(comment, info.getOriginalCommentString());
   }
 
+  public void testTextExtents() {
+    parse("@return {@code foo} bar \n *    baz. */",
+            true, "Bad type annotation. type not recognized due to syntax error");
+  }
+
   /**
    * Asserts that a documentation field exists on the given marker.
    *
Only in data/changesInfo//Closure_133/properties/modified_classes/inducing/test/com/google/javascript/jscomp: PeepholeSubstituteAlternateSyntaxTest.java
Only in data/changesInfo//Closure_133/properties/modified_classes/inducing/test/com/google/javascript/jscomp: TypeCheckTest.java
