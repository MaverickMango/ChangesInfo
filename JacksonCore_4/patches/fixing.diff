diff --git a/src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java b/src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java
index 187754c..a677376 100644
--- a/src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java
+++ b/src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java
@@ -580,10 +580,13 @@
     public char[] expandCurrentSegment()
     {
         final char[] curr = _currentSegment;
-        // Let's grow by 50%
+        // Let's grow by 50% by default
         final int len = curr.length;
-        // Must grow by at least 1 char, no matter what
-        int newLen = (len == MAX_SEGMENT_LEN) ? (MAX_SEGMENT_LEN+1) : Math.min(MAX_SEGMENT_LEN, len + (len >> 1));
+        int newLen = len + (len >> 1);
+        // but above intended maximum, slow to increase by 25%
+        if (newLen > MAX_SEGMENT_LEN) {
+            newLen = len + (len >> 2);
+        }
         return (_currentSegment = Arrays.copyOf(curr, newLen));
     }
 
diff --git a/src/test/java/com/fasterxml/jackson/core/util/TestTextBuffer.java b/src/test/java/com/fasterxml/jackson/core/util/TestTextBuffer.java
index 44672ec..878224e 100644
--- a/src/test/java/com/fasterxml/jackson/core/util/TestTextBuffer.java
+++ b/src/test/java/com/fasterxml/jackson/core/util/TestTextBuffer.java
@@ -62,4 +62,19 @@
          assertEquals(len+2, tb.size());
          assertEquals(EXP, tb.contentsAsString());
       }
+
+      // [Core#152]
+      public void testExpand()
+      {
+          TextBuffer tb = new TextBuffer(new BufferRecycler());
+          char[] buf = tb.getCurrentSegment();
+
+          while (buf.length < 500 * 1000) {
+              char[] old = buf;
+              buf = tb.expandCurrentSegment();
+              if (old.length >= buf.length) {
+                  fail("Expected buffer of "+old.length+" to expand, did not, length now "+buf.length);
+              }
+          }
+      }
 }
