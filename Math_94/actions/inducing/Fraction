===
insert-tree
---
ImportDeclaration [676,704]
    QualifiedName: java.math.BigInteger [683,703]
to
CompilationUnit [0,10434]
at 1
===
move-tree
---
MethodDeclaration [4312,4807]
    Javadoc [4312,4544]
        TagElement [4324,4438]
            TextElement: Return the sum of this fraction and the given fraction.  The returned [4324,4393]
            TextElement: fraction is reduced to lowest terms. [4402,4438]
        TagElement [4455,4485]
            SimpleName: rhs [4462,4465]
            TextElement:  the other fraction. [4465,4485]
        TagElement [4494,4535]
            TextElement:  the fraction sum in lowest terms. [4501,4535]
    Modifier: public [4550,4556]
    SimpleType [4557,4565]
        SimpleName: Fraction [4557,4565]
    SimpleName: add [4566,4569]
    SingleVariableDeclaration [4570,4582]
        SimpleType [4570,4578]
            SimpleName: Fraction [4570,4578]
        SimpleName: rhs [4579,4582]
    Block [4584,4807]
        VariableDeclarationStatement [4595,4649]
            PrimitiveType: int [4595,4598]
            VariableDeclarationFragment [4599,4648]
                SimpleName: den [4599,4602]
                MethodInvocation [4605,4648]
                    METHOD_INVOCATION_RECEIVER [4605,4614]
                        SimpleName: MathUtils [4605,4614]
                    SimpleName: lcm [4615,4618]
                    METHOD_INVOCATION_ARGUMENTS [4619,4647]
                        SimpleName: denominator [4619,4630]
                        QualifiedName: rhs.denominator [4632,4647]
        VariableDeclarationStatement [4659,4760]
            PrimitiveType: int [4659,4662]
            VariableDeclarationFragment [4663,4759]
                SimpleName: num [4663,4666]
                InfixExpression [4669,4759]
                    ParenthesizedExpression [4669,4702]
                        InfixExpression [4670,4701]
                            SimpleName: numerator [4670,4679]
                            INFIX_EXPRESSION_OPERATOR: * [4680,4681]
                            ParenthesizedExpression [4682,4701]
                                InfixExpression [4683,4700]
                                    SimpleName: den [4683,4686]
                                    INFIX_EXPRESSION_OPERATOR: / [4687,4688]
                                    SimpleName: denominator [4689,4700]
                    INFIX_EXPRESSION_OPERATOR: + [4703,4704]
                    ParenthesizedExpression [4718,4759]
                        InfixExpression [4719,4758]
                            QualifiedName: rhs.numerator [4719,4732]
                            INFIX_EXPRESSION_OPERATOR: * [4733,4734]
                            ParenthesizedExpression [4735,4758]
                                InfixExpression [4736,4757]
                                    SimpleName: den [4736,4739]
                                    INFIX_EXPRESSION_OPERATOR: / [4740,4741]
                                    QualifiedName: rhs.denominator [4742,4757]
        ReturnStatement [4770,4800]
            ClassInstanceCreation [4777,4799]
                SimpleType [4781,4789]
                    SimpleName: Fraction [4781,4789]
                SimpleName: num [4790,4793]
                SimpleName: den [4795,4798]
to
TypeDeclaration [780,10432]
at 28
===
move-tree
---
MethodDeclaration [8677,9068]
    Javadoc [8677,8909]
        TagElement [8689,8807]
            TextElement: Return the product of this fraction and the given fraction.  The returned [8689,8762]
            TextElement: fraction is reduced to lowest terms. [8771,8807]
        TagElement [8816,8846]
            SimpleName: rhs [8823,8826]
            TextElement:  the other fraction. [8826,8846]
        TagElement [8855,8900]
            TextElement:  the fraction product in lowest terms. [8862,8900]
    Modifier: public [8915,8921]
    SimpleType [8922,8930]
        SimpleName: Fraction [8922,8930]
    SimpleName: multiply [8931,8939]
    SingleVariableDeclaration [8940,8952]
        SimpleType [8940,8948]
            SimpleName: Fraction [8940,8948]
        SimpleName: rhs [8949,8952]
    Block [8954,9068]
        ReturnStatement [8965,9061]
            ClassInstanceCreation [8972,9060]
                SimpleType [8976,8984]
                    SimpleName: Fraction [8976,8984]
                InfixExpression [8985,9010]
                    SimpleName: numerator [8985,8994]
                    INFIX_EXPRESSION_OPERATOR: * [8995,8996]
                    QualifiedName: rhs.numerator [8997,9010]
                InfixExpression [9030,9059]
                    SimpleName: denominator [9030,9041]
                    INFIX_EXPRESSION_OPERATOR: * [9042,9043]
                    QualifiedName: rhs.denominator [9044,9059]
to
TypeDeclaration [780,10432]
at 29
===
move-tree
---
MethodDeclaration [5535,5864]
    Javadoc [5535,5769]
        TagElement [5547,5666]
            TextElement: Return the quotient of this fraction and the given fraction.  The [5547,5612]
            TextElement: returned fraction is reduced to lowest terms. [5621,5666]
        TagElement [5675,5705]
            SimpleName: rhs [5682,5685]
            TextElement:  the other fraction. [5685,5705]
        TagElement [5714,5760]
            TextElement:  the fraction quotient in lowest terms. [5721,5760]
    Modifier: public [5775,5781]
    SimpleType [5782,5790]
        SimpleName: Fraction [5782,5790]
    SimpleName: divide [5791,5797]
    SingleVariableDeclaration [5798,5810]
        SimpleType [5798,5806]
            SimpleName: Fraction [5798,5806]
        SimpleName: rhs [5807,5810]
    Block [5812,5864]
        ReturnStatement [5823,5857]
            MethodInvocation [5830,5856]
                SimpleName: multiply [5830,5838]
                METHOD_INVOCATION_ARGUMENTS [5839,5855]
                    MethodInvocation [5839,5855]
                        METHOD_INVOCATION_RECEIVER [5839,5842]
                            SimpleName: rhs [5839,5842]
                        SimpleName: reciprocal [5843,5853]
to
TypeDeclaration [780,10432]
at 29
===
insert-tree
---
MethodDeclaration [10158,12851]
    Javadoc [10158,10676]
        TagElement [10171,10239]
            TextElement: Implement add and subtract using algorithm described in Knuth 4.5.1. [10171,10239]
        TagElement [10257,10328]
            SimpleName: fraction [10264,10272]
            TextElement:  the fraction to subtract, must not be <code>null</code> [10272,10328]
        TagElement [10337,10380]
            SimpleName: isAdd [10344,10349]
            TextElement:  true to add, false to subtract [10349,10380]
        TagElement [10389,10455]
            TextElement:  a <code>Fraction</code> instance with the resulting values [10396,10455]
        TagElement [10464,10533]
            SimpleName: IllegalArgumentException [10472,10496]
            TextElement:  if the fraction is <code>null</code> [10496,10533]
        TagElement [10542,10667]
            SimpleName: ArithmeticException [10550,10569]
            TextElement:  if the resulting numerator or denominator [10569,10611]
            TextElement: cannot be represented in an <code>int</code>. [10622,10667]
    Modifier: private [10682,10689]
    SimpleType [10690,10698]
        SimpleName: Fraction [10690,10698]
    SimpleName: addSub [10699,10705]
    SingleVariableDeclaration [10706,10723]
        SimpleType [10706,10714]
            SimpleName: Fraction [10706,10714]
        SimpleName: fraction [10715,10723]
    SingleVariableDeclaration [10725,10738]
        PrimitiveType: boolean [10725,10732]
        SimpleName: isAdd [10733,10738]
    Block [10740,12851]
        IfStatement [10751,10867]
            InfixExpression [10755,10771]
                SimpleName: fraction [10755,10763]
                INFIX_EXPRESSION_OPERATOR: == [10764,10766]
                NullLiteral [10767,10771]
            Block [10773,10867]
                ThrowStatement [10788,10856]
                    ClassInstanceCreation [10794,10855]
                        SimpleType [10798,10822]
                            SimpleName: IllegalArgumentException [10798,10822]
                        StringLiteral: "The fraction must not be null" [10823,10854]
        IfStatement [10920,11010]
            InfixExpression [10924,10938]
                SimpleName: numerator [10924,10933]
                INFIX_EXPRESSION_OPERATOR: == [10934,10936]
                NumberLiteral: 0 [10937,10938]
            Block [10940,11010]
                ReturnStatement [10955,10999]
                    ConditionalExpression [10962,10998]
                        SimpleName: isAdd [10962,10967]
                        SimpleName: fraction [10970,10978]
                        MethodInvocation [10981,10998]
                            METHOD_INVOCATION_RECEIVER [10981,10989]
                                SimpleName: fraction [10981,10989]
                            SimpleName: negate [10990,10996]
        IfStatement [11020,11087]
            InfixExpression [11024,11047]
                QualifiedName: fraction.numerator [11024,11042]
                INFIX_EXPRESSION_OPERATOR: == [11043,11045]
                NumberLiteral: 0 [11046,11047]
            Block [11049,11087]
                ReturnStatement [11064,11076]
                    ThisExpression [11071,11075]
        VariableDeclarationStatement [11204,11262]
            PrimitiveType: int [11204,11207]
            VariableDeclarationFragment [11208,11261]
                SimpleName: d1 [11208,11210]
                MethodInvocation [11213,11261]
                    METHOD_INVOCATION_RECEIVER [11213,11222]
                        SimpleName: MathUtils [11213,11222]
                    SimpleName: gcd [11223,11226]
                    METHOD_INVOCATION_ARGUMENTS [11227,11260]
                        SimpleName: denominator [11227,11238]
                        QualifiedName: fraction.denominator [11240,11260]
        IfStatement [11272,11726]
            InfixExpression [11276,11281]
                SimpleName: d1 [11276,11278]
                INFIX_EXPRESSION_OPERATOR: == [11278,11280]
                NumberLiteral: 1 [11280,11281]
            Block [11283,11726]
                VariableDeclarationStatement [11349,11414]
                    PrimitiveType: int [11349,11352]
                    VariableDeclarationFragment [11353,11413]
                        SimpleName: uvp [11353,11356]
                        MethodInvocation [11359,11413]
                            METHOD_INVOCATION_RECEIVER [11359,11368]
                                SimpleName: MathUtils [11359,11368]
                            SimpleName: mulAndCheck [11369,11380]
                            METHOD_INVOCATION_ARGUMENTS [11381,11412]
                                SimpleName: numerator [11381,11390]
                                QualifiedName: fraction.denominator [11392,11412]
                VariableDeclarationStatement [11428,11493]
                    PrimitiveType: int [11428,11431]
                    VariableDeclarationFragment [11432,11492]
                        SimpleName: upv [11432,11435]
                        MethodInvocation [11438,11492]
                            METHOD_INVOCATION_RECEIVER [11438,11447]
                                SimpleName: MathUtils [11438,11447]
                            SimpleName: mulAndCheck [11448,11459]
                            METHOD_INVOCATION_ARGUMENTS [11460,11491]
                                QualifiedName: fraction.numerator [11460,11478]
                                SimpleName: denominator [11480,11491]
                ReturnStatement [11507,11715]
                    ClassInstanceCreation [11514,11714]
                        SimpleType [11518,11526]
                            SimpleName: Fraction [11518,11526]
                        ConditionalExpression [11545,11637]
                            SimpleName: isAdd [11545,11550]
                            MethodInvocation [11553,11584]
                                METHOD_INVOCATION_RECEIVER [11553,11562]
                                    SimpleName: MathUtils [11553,11562]
                                SimpleName: addAndCheck [11563,11574]
                                METHOD_INVOCATION_ARGUMENTS [11575,11583]
                                    SimpleName: uvp [11575,11578]
                                    SimpleName: upv [11580,11583]
                            MethodInvocation [11606,11637]
                                METHOD_INVOCATION_RECEIVER [11606,11615]
                                    SimpleName: MathUtils [11606,11615]
                                SimpleName: subAndCheck [11616,11627]
                                METHOD_INVOCATION_ARGUMENTS [11628,11636]
                                    SimpleName: uvp [11628,11631]
                                    SimpleName: upv [11633,11636]
                        MethodInvocation [11657,11713]
                            METHOD_INVOCATION_RECEIVER [11657,11666]
                                SimpleName: MathUtils [11657,11666]
                            SimpleName: mulAndCheck [11667,11678]
                            METHOD_INVOCATION_ARGUMENTS [11679,11712]
                                SimpleName: denominator [11679,11690]
                                QualifiedName: fraction.denominator [11692,11712]
        VariableDeclarationStatement [11908,12019]
            SimpleType [11908,11918]
                SimpleName: BigInteger [11908,11918]
            VariableDeclarationFragment [11919,12018]
                SimpleName: uvp [11919,11922]
                MethodInvocation [11925,12018]
                    METHOD_INVOCATION_RECEIVER [11925,11954]
                        MethodInvocation [11925,11954]
                            METHOD_INVOCATION_RECEIVER [11925,11935]
                                SimpleName: BigInteger [11925,11935]
                            SimpleName: valueOf [11936,11943]
                            METHOD_INVOCATION_ARGUMENTS [11944,11953]
                                SimpleName: numerator [11944,11953]
                    SimpleName: multiply [11965,11973]
                    METHOD_INVOCATION_ARGUMENTS [11974,12017]
                        MethodInvocation [11974,12017]
                            METHOD_INVOCATION_RECEIVER [11974,11984]
                                SimpleName: BigInteger [11974,11984]
                            SimpleName: valueOf [11985,11992]
                            METHOD_INVOCATION_ARGUMENTS [11993,12016]
                                InfixExpression [11993,12016]
                                    QualifiedName: fraction.denominator [11993,12013]
                                    INFIX_EXPRESSION_OPERATOR: / [12013,12014]
                                    SimpleName: d1 [12014,12016]
        VariableDeclarationStatement [12029,12140]
            SimpleType [12029,12039]
                SimpleName: BigInteger [12029,12039]
            VariableDeclarationFragment [12040,12139]
                SimpleName: upv [12040,12043]
                MethodInvocation [12046,12139]
                    METHOD_INVOCATION_RECEIVER [12046,12084]
                        MethodInvocation [12046,12084]
                            METHOD_INVOCATION_RECEIVER [12046,12056]
                                SimpleName: BigInteger [12046,12056]
                            SimpleName: valueOf [12057,12064]
                            METHOD_INVOCATION_ARGUMENTS [12065,12083]
                                QualifiedName: fraction.numerator [12065,12083]
                    SimpleName: multiply [12095,12103]
                    METHOD_INVOCATION_ARGUMENTS [12104,12138]
                        MethodInvocation [12104,12138]
                            METHOD_INVOCATION_RECEIVER [12104,12114]
                                SimpleName: BigInteger [12104,12114]
                            SimpleName: valueOf [12115,12122]
                            METHOD_INVOCATION_ARGUMENTS [12123,12137]
                                InfixExpression [12123,12137]
                                    SimpleName: denominator [12123,12134]
                                    INFIX_EXPRESSION_OPERATOR: / [12134,12135]
                                    SimpleName: d1 [12135,12137]
        VariableDeclarationStatement [12150,12206]
            SimpleType [12150,12160]
                SimpleName: BigInteger [12150,12160]
            VariableDeclarationFragment [12161,12205]
                SimpleName: t [12161,12162]
                ConditionalExpression [12165,12205]
                    SimpleName: isAdd [12165,12170]
                    MethodInvocation [12173,12185]
                        METHOD_INVOCATION_RECEIVER [12173,12176]
                            SimpleName: uvp [12173,12176]
                        SimpleName: add [12177,12180]
                        METHOD_INVOCATION_ARGUMENTS [12181,12184]
                            SimpleName: upv [12181,12184]
                    MethodInvocation [12188,12205]
                        METHOD_INVOCATION_RECEIVER [12188,12191]
                            SimpleName: uvp [12188,12191]
                        SimpleName: subtract [12192,12200]
                        METHOD_INVOCATION_ARGUMENTS [12201,12204]
                            SimpleName: upv [12201,12204]
        VariableDeclarationStatement [12319,12373]
            PrimitiveType: int [12319,12322]
            VariableDeclarationFragment [12323,12372]
                SimpleName: tmodd1 [12323,12329]
                MethodInvocation [12332,12372]
                    METHOD_INVOCATION_RECEIVER [12332,12361]
                        MethodInvocation [12332,12361]
                            METHOD_INVOCATION_RECEIVER [12332,12333]
                                SimpleName: t [12332,12333]
                            SimpleName: mod [12334,12337]
                            METHOD_INVOCATION_ARGUMENTS [12338,12360]
                                MethodInvocation [12338,12360]
                                    METHOD_INVOCATION_RECEIVER [12338,12348]
                                        SimpleName: BigInteger [12338,12348]
                                    SimpleName: valueOf [12349,12356]
                                    METHOD_INVOCATION_ARGUMENTS [12357,12359]
                                        SimpleName: d1 [12357,12359]
                    SimpleName: intValue [12362,12370]
        VariableDeclarationStatement [12383,12433]
            PrimitiveType: int [12383,12386]
            VariableDeclarationFragment [12387,12432]
                SimpleName: d2 [12387,12389]
                ConditionalExpression [12392,12432]
                    ParenthesizedExpression [12392,12403]
                        InfixExpression [12393,12402]
                            SimpleName: tmodd1 [12393,12399]
                            INFIX_EXPRESSION_OPERATOR: == [12399,12401]
                            NumberLiteral: 0 [12401,12402]
                    SimpleName: d1 [12404,12406]
                    MethodInvocation [12407,12432]
                        METHOD_INVOCATION_RECEIVER [12407,12416]
                            SimpleName: MathUtils [12407,12416]
                        SimpleName: gcd [12417,12420]
                        METHOD_INVOCATION_ARGUMENTS [12421,12431]
                            SimpleName: tmodd1 [12421,12427]
                            SimpleName: d1 [12429,12431]
        VariableDeclarationStatement [12491,12539]
            SimpleType [12491,12501]
                SimpleName: BigInteger [12491,12501]
            VariableDeclarationFragment [12502,12538]
                SimpleName: w [12502,12503]
                MethodInvocation [12506,12538]
                    METHOD_INVOCATION_RECEIVER [12506,12507]
                        SimpleName: t [12506,12507]
                    SimpleName: divide [12508,12514]
                    METHOD_INVOCATION_ARGUMENTS [12515,12537]
                        MethodInvocation [12515,12537]
                            METHOD_INVOCATION_RECEIVER [12515,12525]
                                SimpleName: BigInteger [12515,12525]
                            SimpleName: valueOf [12526,12533]
                            METHOD_INVOCATION_ARGUMENTS [12534,12536]
                                SimpleName: d2 [12534,12536]
        IfStatement [12549,12691]
            InfixExpression [12553,12571]
                MethodInvocation [12553,12566]
                    METHOD_INVOCATION_RECEIVER [12553,12554]
                        SimpleName: w [12553,12554]
                    SimpleName: bitLength [12555,12564]
                INFIX_EXPRESSION_OPERATOR: > [12567,12568]
                NumberLiteral: 31 [12569,12571]
            Block [12573,12691]
                ThrowStatement [12588,12680]
                    ClassInstanceCreation [12594,12679]
                        SimpleType [12598,12617]
                            SimpleName: ArithmeticException [12598,12617]
                        StringLiteral: "overflow: numerator too large after multiply" [12632,12678]
        ReturnStatement [12701,12844]
            ClassInstanceCreation [12708,12843]
                SimpleType [12712,12720]
                    SimpleName: Fraction [12712,12720]
                MethodInvocation [12722,12734]
                    METHOD_INVOCATION_RECEIVER [12722,12723]
                        SimpleName: w [12722,12723]
                    SimpleName: intValue [12724,12732]
                MethodInvocation [12754,12842]
                    METHOD_INVOCATION_RECEIVER [12754,12763]
                        SimpleName: MathUtils [12754,12763]
                    SimpleName: mulAndCheck [12764,12775]
                    METHOD_INVOCATION_ARGUMENTS [12776,12841]
                        InfixExpression [12776,12790]
                            SimpleName: denominator [12776,12787]
                            INFIX_EXPRESSION_OPERATOR: / [12787,12788]
                            SimpleName: d1 [12788,12790]
                        InfixExpression [12818,12841]
                            QualifiedName: fraction.denominator [12818,12838]
                            INFIX_EXPRESSION_OPERATOR: / [12838,12839]
                            SimpleName: d2 [12839,12841]
to
TypeDeclaration [780,10432]
at 28
===
insert-tree
---
MethodDeclaration [14958,16478]
    Javadoc [14958,15487]
        TagElement [14970,15140]
            TextElement: <p>Creates a <code>Fraction</code> instance with the 2 parts [14970,15030]
            TextElement: of a fraction Y/Z.</p> [15039,15061]
            TextElement: <p>Any negative signs are resolved to be on the numerator.</p> [15078,15140]
        TagElement [15157,15231]
            SimpleName: numerator [15164,15173]
            TextElement:   the numerator, for example the three in 'three sevenths' [15173,15231]
        TagElement [15240,15318]
            SimpleName: denominator [15247,15258]
            TextElement:   the denominator, for example the seven in 'three sevenths' [15258,15318]
        TagElement [15327,15402]
            TextElement:  a new fraction instance, with the numerator and denominator reduced [15334,15402]
        TagElement [15411,15478]
            SimpleName: ArithmeticException [15419,15438]
            TextElement:  if the denominator is <code>zero</code> [15438,15478]
    Modifier: public [15493,15499]
    Modifier: static [15500,15506]
    SimpleType [15507,15515]
        SimpleName: Fraction [15507,15515]
    SimpleName: getReducedFraction [15516,15534]
    SingleVariableDeclaration [15535,15548]
        PrimitiveType: int [15535,15538]
        SimpleName: numerator [15539,15548]
    SingleVariableDeclaration [15550,15565]
        PrimitiveType: int [15550,15553]
        SimpleName: denominator [15554,15565]
    Block [15567,16478]
        IfStatement [15578,15692]
            InfixExpression [15582,15598]
                SimpleName: denominator [15582,15593]
                INFIX_EXPRESSION_OPERATOR: == [15594,15596]
                NumberLiteral: 0 [15597,15598]
            Block [15600,15692]
                ThrowStatement [15615,15681]
                    ClassInstanceCreation [15621,15680]
                        SimpleType [15625,15644]
                            SimpleName: ArithmeticException [15625,15644]
                        StringLiteral: "The denominator must not be zero" [15645,15679]
        IfStatement [15702,15777]
            InfixExpression [15706,15718]
                SimpleName: numerator [15706,15715]
                INFIX_EXPRESSION_OPERATOR: == [15715,15717]
                NumberLiteral: 0 [15717,15718]
            Block [15720,15777]
                ReturnStatement [15735,15747]
                    SimpleName: ZERO [15742,15746]
        IfStatement [15847,15958]
            InfixExpression [15851,15901]
                InfixExpression [15851,15881]
                    SimpleName: denominator [15851,15862]
                    INFIX_EXPRESSION_OPERATOR: == [15862,15864]
                    QualifiedName: Integer.MIN_VALUE [15864,15881]
                INFIX_EXPRESSION_OPERATOR: && [15882,15884]
                InfixExpression [15885,15901]
                    ParenthesizedExpression [15885,15898]
                        InfixExpression [15886,15897]
                            SimpleName: numerator [15886,15895]
                            INFIX_EXPRESSION_OPERATOR: & [15895,15896]
                            NumberLiteral: 1 [15896,15897]
                    INFIX_EXPRESSION_OPERATOR: == [15898,15900]
                    NumberLiteral: 0 [15900,15901]
            Block [15903,15958]
                ExpressionStatement [15918,15931]
                    Assignment [15918,15930]
                        SimpleName: numerator [15918,15927]
                        ASSIGNMENT_OPERATOR: /= [15927,15929]
                        NumberLiteral: 2 [15929,15930]
                ExpressionStatement [15932,15947]
                    Assignment [15932,15946]
                        SimpleName: denominator [15932,15943]
                        ASSIGNMENT_OPERATOR: /= [15943,15945]
                        NumberLiteral: 2 [15945,15946]
        IfStatement [15968,16272]
            InfixExpression [15972,15987]
                SimpleName: denominator [15972,15983]
                INFIX_EXPRESSION_OPERATOR: < [15984,15985]
                NumberLiteral: 0 [15986,15987]
            Block [15989,16272]
                IfStatement [16004,16183]
                    InfixExpression [16008,16091]
                        InfixExpression [16008,16036]
                            SimpleName: numerator [16008,16017]
                            INFIX_EXPRESSION_OPERATOR: == [16017,16019]
                            QualifiedName: Integer.MIN_VALUE [16019,16036]
                        INFIX_EXPRESSION_OPERATOR: || [16037,16039]
                        InfixExpression [16061,16091]
                            SimpleName: denominator [16061,16072]
                            INFIX_EXPRESSION_OPERATOR: == [16072,16074]
                            QualifiedName: Integer.MIN_VALUE [16074,16091]
                    Block [16093,16183]
                        ThrowStatement [16112,16168]
                            ClassInstanceCreation [16118,16167]
                                SimpleType [16122,16141]
                                    SimpleName: ArithmeticException [16122,16141]
                                StringLiteral: "overflow: can't negate" [16142,16166]
                ExpressionStatement [16197,16220]
                    Assignment [16197,16219]
                        SimpleName: numerator [16197,16206]
                        ASSIGNMENT_OPERATOR: = [16207,16208]
                        PrefixExpression [16209,16219]
                            PREFIX_EXPRESSION_OPERATOR: - [16209,16210]
                            SimpleName: numerator [16210,16219]
                ExpressionStatement [16234,16261]
                    Assignment [16234,16260]
                        SimpleName: denominator [16234,16245]
                        ASSIGNMENT_OPERATOR: = [16246,16247]
                        PrefixExpression [16248,16260]
                            PREFIX_EXPRESSION_OPERATOR: - [16248,16249]
                            SimpleName: denominator [16249,16260]
        VariableDeclarationStatement [16313,16361]
            PrimitiveType: int [16313,16316]
            VariableDeclarationFragment [16317,16360]
                SimpleName: gcd [16317,16320]
                MethodInvocation [16323,16360]
                    METHOD_INVOCATION_RECEIVER [16323,16332]
                        SimpleName: MathUtils [16323,16332]
                    SimpleName: gcd [16333,16336]
                    METHOD_INVOCATION_ARGUMENTS [16337,16359]
                        SimpleName: numerator [16337,16346]
                        SimpleName: denominator [16348,16359]
        ExpressionStatement [16371,16388]
            Assignment [16371,16387]
                SimpleName: numerator [16371,16380]
                ASSIGNMENT_OPERATOR: /= [16381,16383]
                SimpleName: gcd [16384,16387]
        ExpressionStatement [16398,16417]
            Assignment [16398,16416]
                SimpleName: denominator [16398,16409]
                ASSIGNMENT_OPERATOR: /= [16410,16412]
                SimpleName: gcd [16413,16416]
        ReturnStatement [16427,16471]
            ClassInstanceCreation [16434,16470]
                SimpleType [16438,16446]
                    SimpleName: Fraction [16438,16446]
                SimpleName: numerator [16447,16456]
                SimpleName: denominator [16458,16469]
to
TypeDeclaration [780,10432]
at 31
===
insert-tree
---
Javadoc [8891,9407]
    TagElement [8903,9035]
        TextElement: <p>Adds the value of this fraction to another, returning the result in reduced form. [8903,8987]
        TextElement: The algorithm follows Knuth, 4.5.1.</p> [8996,9035]
    TagElement [9052,9119]
        SimpleName: fraction [9059,9067]
        TextElement:   the fraction to add, must not be <code>null</code> [9067,9119]
    TagElement [9128,9194]
        TextElement:  a <code>Fraction</code> instance with the resulting values [9135,9194]
    TagElement [9203,9272]
        SimpleName: IllegalArgumentException [9211,9235]
        TextElement:  if the fraction is <code>null</code> [9235,9272]
    TagElement [9281,9398]
        SimpleName: ArithmeticException [9289,9308]
        TextElement:  if the resulting numerator or denominator exceeds [9308,9358]
        TextElement: <code>Integer.MAX_VALUE</code> [9368,9398]
to
MethodDeclaration [4312,4807]
at 0
===
insert-tree
---
Javadoc [9518,10036]
    TagElement [9530,9651]
        TextElement: <p>Subtracts the value of another fraction from the value of this one,  [9530,9601]
        TextElement: returning the result in reduced form.</p> [9610,9651]
    TagElement [9668,9740]
        SimpleName: fraction [9675,9683]
        TextElement:   the fraction to subtract, must not be <code>null</code> [9683,9740]
    TagElement [9749,9815]
        TextElement:  a <code>Fraction</code> instance with the resulting values [9756,9815]
    TagElement [9824,9893]
        SimpleName: IllegalArgumentException [9832,9856]
        TextElement:  if the fraction is <code>null</code> [9856,9893]
    TagElement [9902,10027]
        SimpleName: ArithmeticException [9910,9929]
        TextElement:  if the resulting numerator or denominator [9929,9971]
        TextElement: cannot be represented in an <code>int</code>. [9982,10027]
to
MethodDeclaration [9516,9847]
at 0
===
insert-tree
---
Javadoc [12859,13354]
    TagElement [12871,12974]
        TextElement: <p>Multiplies the value of this fraction by another, returning the  [12871,12938]
        TextElement: result in reduced form.</p> [12947,12974]
    TagElement [12991,13066]
        SimpleName: fraction [12998,13006]
        TextElement:   the fraction to multiply by, must not be <code>null</code> [13006,13066]
    TagElement [13075,13141]
        TextElement:  a <code>Fraction</code> instance with the resulting values [13082,13141]
    TagElement [13150,13219]
        SimpleName: IllegalArgumentException [13158,13182]
        TextElement:  if the fraction is <code>null</code> [13182,13219]
    TagElement [13228,13345]
        SimpleName: ArithmeticException [13236,13255]
        TextElement:  if the resulting numerator or denominator exceeds [13255,13305]
        TextElement: <code>Integer.MAX_VALUE</code> [13315,13345]
to
MethodDeclaration [8677,9068]
at 0
===
insert-tree
---
Javadoc [14059,14574]
    TagElement [14071,14123]
        TextElement: <p>Divide the value of this fraction by another.</p> [14071,14123]
    TagElement [14140,14213]
        SimpleName: fraction [14147,14155]
        TextElement:   the fraction to divide by, must not be <code>null</code> [14155,14213]
    TagElement [14222,14288]
        TextElement:  a <code>Fraction</code> instance with the resulting values [14229,14288]
    TagElement [14297,14366]
        SimpleName: IllegalArgumentException [14305,14329]
        TextElement:  if the fraction is <code>null</code> [14329,14366]
    TagElement [14375,14439]
        SimpleName: ArithmeticException [14383,14402]
        TextElement:  if the fraction to divide by is zero [14402,14439]
    TagElement [14448,14565]
        SimpleName: ArithmeticException [14456,14475]
        TextElement:  if the resulting numerator or denominator exceeds [14475,14525]
        TextElement: <code>Integer.MAX_VALUE</code> [14535,14565]
to
MethodDeclaration [5535,5864]
at 0
===
insert-tree
---
TagElement [3866,3932]
    SimpleName: ArithmeticException [3874,3893]
    TextElement:  if the denomiator is <code>zero</code> [3893,3932]
to
Javadoc [3641,3836]
at 3
===
insert-tree
---
IfStatement [4010,4116]
    InfixExpression [4014,4022]
        SimpleName: den [4014,4017]
        INFIX_EXPRESSION_OPERATOR: == [4018,4020]
        NumberLiteral: 0 [4021,4022]
    Block [4024,4116]
        ThrowStatement [4039,4105]
            ClassInstanceCreation [4045,4104]
                SimpleType [4049,4068]
                    SimpleName: ArithmeticException [4049,4068]
                StringLiteral: "The denominator must not be zero" [4069,4103]
to
Block [3876,3985]
at 1
===
insert-tree
---
IfStatement [4126,4384]
    InfixExpression [4130,4137]
        SimpleName: den [4130,4133]
        INFIX_EXPRESSION_OPERATOR: < [4134,4135]
        NumberLiteral: 0 [4136,4137]
    Block [4139,4384]
        IfStatement [4154,4323]
            InfixExpression [4158,4231]
                InfixExpression [4158,4182]
                    SimpleName: num [4158,4161]
                    INFIX_EXPRESSION_OPERATOR: == [4162,4164]
                    QualifiedName: Integer.MIN_VALUE [4165,4182]
                INFIX_EXPRESSION_OPERATOR: || [4183,4185]
                InfixExpression [4207,4231]
                    SimpleName: den [4207,4210]
                    INFIX_EXPRESSION_OPERATOR: == [4211,4213]
                    QualifiedName: Integer.MIN_VALUE [4214,4231]
            Block [4233,4323]
                ThrowStatement [4252,4308]
                    ClassInstanceCreation [4258,4307]
                        SimpleType [4262,4281]
                            SimpleName: ArithmeticException [4262,4281]
                        StringLiteral: "overflow: can't negate" [4282,4306]
        ExpressionStatement [4337,4348]
            Assignment [4337,4347]
                SimpleName: num [4337,4340]
                ASSIGNMENT_OPERATOR: = [4341,4342]
                PrefixExpression [4343,4347]
                    PREFIX_EXPRESSION_OPERATOR: - [4343,4344]
                    SimpleName: num [4344,4347]
        ExpressionStatement [4362,4373]
            Assignment [4362,4372]
                SimpleName: den [4362,4365]
                ASSIGNMENT_OPERATOR: = [4366,4367]
                PrefixExpression [4368,4372]
                    PREFIX_EXPRESSION_OPERATOR: - [4368,4369]
                    SimpleName: den [4369,4372]
to
Block [3876,3985]
at 2
===
insert-tree
---
IfStatement [8477,8600]
    InfixExpression [8481,8509]
        SimpleName: numerator [8481,8490]
        INFIX_EXPRESSION_OPERATOR: == [8490,8492]
        QualifiedName: Integer.MIN_VALUE [8492,8509]
    Block [8511,8600]
        ThrowStatement [8526,8589]
            ClassInstanceCreation [8532,8588]
                SimpleType [8536,8555]
                    SimpleName: ArithmeticException [8536,8555]
                StringLiteral: "overflow: too large to negate" [8556,8587]
to
Block [9224,9287]
at 0
===
update-node
---
SimpleName: rhs [4579,4582]
replace rhs by fraction
===
insert-tree
---
ReturnStatement [9463,9503]
    MethodInvocation [9470,9502]
        SimpleName: addSub [9470,9476]
        METHOD_INVOCATION_ARGUMENTS [9477,9491]
            SimpleName: fraction [9477,9485]
            BooleanLiteral: true [9487,9491]
to
Block [4584,4807]
at 0
===
update-node
---
SimpleName: rhs [9799,9802]
replace rhs by fraction
===
insert-tree
---
ReturnStatement [10097,10143]
    MethodInvocation [10104,10142]
        SimpleName: addSub [10104,10110]
        METHOD_INVOCATION_ARGUMENTS [10111,10126]
            SimpleName: fraction [10111,10119]
            BooleanLiteral: false [10121,10126]
to
Block [9804,9847]
at 0
===
update-node
---
SimpleName: rhs [8949,8952]
replace rhs by fraction
===
insert-tree
---
IfStatement [13415,13531]
    InfixExpression [13419,13435]
        SimpleName: fraction [13419,13427]
        INFIX_EXPRESSION_OPERATOR: == [13428,13430]
        NullLiteral [13431,13435]
    Block [13437,13531]
        ThrowStatement [13452,13520]
            ClassInstanceCreation [13458,13519]
                SimpleType [13462,13486]
                    SimpleName: IllegalArgumentException [13462,13486]
                StringLiteral: "The fraction must not be null" [13487,13518]
to
Block [8954,9068]
at 0
===
insert-tree
---
IfStatement [13541,13626]
    InfixExpression [13545,13586]
        InfixExpression [13545,13559]
            SimpleName: numerator [13545,13554]
            INFIX_EXPRESSION_OPERATOR: == [13555,13557]
            NumberLiteral: 0 [13558,13559]
        INFIX_EXPRESSION_OPERATOR: || [13560,13562]
        InfixExpression [13563,13586]
            QualifiedName: fraction.numerator [13563,13581]
            INFIX_EXPRESSION_OPERATOR: == [13582,13584]
            NumberLiteral: 0 [13585,13586]
    Block [13588,13626]
        ReturnStatement [13603,13615]
            SimpleName: ZERO [13610,13614]
to
Block [8954,9068]
at 1
===
insert-tree
---
VariableDeclarationStatement [13735,13791]
    PrimitiveType: int [13735,13738]
    VariableDeclarationFragment [13739,13790]
        SimpleName: d1 [13739,13741]
        MethodInvocation [13744,13790]
            METHOD_INVOCATION_RECEIVER [13744,13753]
                SimpleName: MathUtils [13744,13753]
            SimpleName: gcd [13754,13757]
            METHOD_INVOCATION_ARGUMENTS [13758,13789]
                SimpleName: numerator [13758,13767]
                QualifiedName: fraction.denominator [13769,13789]
to
Block [8954,9068]
at 2
===
insert-tree
---
VariableDeclarationStatement [13801,13857]
    PrimitiveType: int [13801,13804]
    VariableDeclarationFragment [13805,13856]
        SimpleName: d2 [13805,13807]
        MethodInvocation [13810,13856]
            METHOD_INVOCATION_RECEIVER [13810,13819]
                SimpleName: MathUtils [13810,13819]
            SimpleName: gcd [13820,13823]
            METHOD_INVOCATION_ARGUMENTS [13824,13855]
                QualifiedName: fraction.numerator [13824,13842]
                SimpleName: denominator [13844,13855]
to
Block [8954,9068]
at 3
===
insert-tree
---
ReturnStatement [13867,14044]
    MethodInvocation [13874,14043]
        SimpleName: getReducedFraction [13874,13892]
        METHOD_INVOCATION_ARGUMENTS [13903,14042]
            MethodInvocation [13903,13961]
                METHOD_INVOCATION_RECEIVER [13903,13912]
                    SimpleName: MathUtils [13903,13912]
                SimpleName: mulAndCheck [13913,13924]
                METHOD_INVOCATION_ARGUMENTS [13925,13960]
                    InfixExpression [13925,13937]
                        SimpleName: numerator [13925,13934]
                        INFIX_EXPRESSION_OPERATOR: / [13934,13935]
                        SimpleName: d1 [13935,13937]
                    InfixExpression [13939,13960]
                        QualifiedName: fraction.numerator [13939,13957]
                        INFIX_EXPRESSION_OPERATOR: / [13957,13958]
                        SimpleName: d2 [13958,13960]
            MethodInvocation [13980,14042]
                METHOD_INVOCATION_RECEIVER [13980,13989]
                    SimpleName: MathUtils [13980,13989]
                SimpleName: mulAndCheck [13990,14001]
                METHOD_INVOCATION_ARGUMENTS [14002,14041]
                    InfixExpression [14002,14016]
                        SimpleName: denominator [14002,14013]
                        INFIX_EXPRESSION_OPERATOR: / [14013,14014]
                        SimpleName: d2 [14014,14016]
                    InfixExpression [14018,14041]
                        QualifiedName: fraction.denominator [14018,14038]
                        INFIX_EXPRESSION_OPERATOR: / [14038,14039]
                        SimpleName: d1 [14039,14041]
to
Block [8954,9068]
at 4
===
update-node
---
SimpleName: rhs [5807,5810]
replace rhs by fraction
===
insert-tree
---
IfStatement [14633,14749]
    InfixExpression [14637,14653]
        SimpleName: fraction [14637,14645]
        INFIX_EXPRESSION_OPERATOR: == [14646,14648]
        NullLiteral [14649,14653]
    Block [14655,14749]
        ThrowStatement [14670,14738]
            ClassInstanceCreation [14676,14737]
                SimpleType [14680,14704]
                    SimpleName: IllegalArgumentException [14680,14704]
                StringLiteral: "The fraction must not be null" [14705,14736]
to
Block [5812,5864]
at 0
===
insert-tree
---
IfStatement [14759,14890]
    InfixExpression [14763,14786]
        QualifiedName: fraction.numerator [14763,14781]
        INFIX_EXPRESSION_OPERATOR: == [14782,14784]
        NumberLiteral: 0 [14785,14786]
    Block [14788,14890]
        ThrowStatement [14803,14879]
            ClassInstanceCreation [14809,14878]
                SimpleType [14813,14832]
                    SimpleName: ArithmeticException [14813,14832]
                StringLiteral: "The fraction to divide by must not be zero" [14833,14877]
to
Block [5812,5864]
at 1
===
update-node
---
SimpleName: rhs [5839,5842]
replace rhs by fraction
===
delete-tree
---
Javadoc [4312,4544]
    TagElement [4324,4438]
        TextElement: Return the sum of this fraction and the given fraction.  The returned [4324,4393]
        TextElement: fraction is reduced to lowest terms. [4402,4438]
    TagElement [4455,4485]
        SimpleName: rhs [4462,4465]
        TextElement:  the other fraction. [4465,4485]
    TagElement [4494,4535]
        TextElement:  the fraction sum in lowest terms. [4501,4535]
===
delete-tree
---
VariableDeclarationStatement [4595,4649]
    PrimitiveType: int [4595,4598]
    VariableDeclarationFragment [4599,4648]
        SimpleName: den [4599,4602]
        MethodInvocation [4605,4648]
            METHOD_INVOCATION_RECEIVER [4605,4614]
                SimpleName: MathUtils [4605,4614]
            SimpleName: lcm [4615,4618]
            METHOD_INVOCATION_ARGUMENTS [4619,4647]
                SimpleName: denominator [4619,4630]
                QualifiedName: rhs.denominator [4632,4647]
===
delete-tree
---
VariableDeclarationStatement [4659,4760]
    PrimitiveType: int [4659,4662]
    VariableDeclarationFragment [4663,4759]
        SimpleName: num [4663,4666]
        InfixExpression [4669,4759]
            ParenthesizedExpression [4669,4702]
                InfixExpression [4670,4701]
                    SimpleName: numerator [4670,4679]
                    INFIX_EXPRESSION_OPERATOR: * [4680,4681]
                    ParenthesizedExpression [4682,4701]
                        InfixExpression [4683,4700]
                            SimpleName: den [4683,4686]
                            INFIX_EXPRESSION_OPERATOR: / [4687,4688]
                            SimpleName: denominator [4689,4700]
            INFIX_EXPRESSION_OPERATOR: + [4703,4704]
            ParenthesizedExpression [4718,4759]
                InfixExpression [4719,4758]
                    QualifiedName: rhs.numerator [4719,4732]
                    INFIX_EXPRESSION_OPERATOR: * [4733,4734]
                    ParenthesizedExpression [4735,4758]
                        InfixExpression [4736,4757]
                            SimpleName: den [4736,4739]
                            INFIX_EXPRESSION_OPERATOR: / [4740,4741]
                            QualifiedName: rhs.denominator [4742,4757]
===
delete-tree
---
ReturnStatement [4770,4800]
    ClassInstanceCreation [4777,4799]
        SimpleType [4781,4789]
            SimpleName: Fraction [4781,4789]
        SimpleName: num [4790,4793]
        SimpleName: den [4795,4798]
===
delete-tree
---
Javadoc [9516,9759]
    TagElement [9528,9654]
        TextElement: Return the difference between this fraction and the given fraction.  The [9528,9600]
        TextElement: returned fraction is reduced to lowest terms. [9609,9654]
    TagElement [9663,9693]
        SimpleName: rhs [9670,9673]
        TextElement:  the other fraction. [9673,9693]
    TagElement [9702,9750]
        TextElement:  the fraction difference in lowest terms. [9709,9750]
===
delete-tree
---
ReturnStatement [9815,9840]
    MethodInvocation [9822,9839]
        SimpleName: add [9822,9825]
        METHOD_INVOCATION_ARGUMENTS [9826,9838]
            MethodInvocation [9826,9838]
                METHOD_INVOCATION_RECEIVER [9826,9829]
                    SimpleName: rhs [9826,9829]
                SimpleName: negate [9830,9836]
===
delete-tree
---
Javadoc [8677,8909]
    TagElement [8689,8807]
        TextElement: Return the product of this fraction and the given fraction.  The returned [8689,8762]
        TextElement: fraction is reduced to lowest terms. [8771,8807]
    TagElement [8816,8846]
        SimpleName: rhs [8823,8826]
        TextElement:  the other fraction. [8826,8846]
    TagElement [8855,8900]
        TextElement:  the fraction product in lowest terms. [8862,8900]
===
delete-tree
---
ReturnStatement [8965,9061]
    ClassInstanceCreation [8972,9060]
        SimpleType [8976,8984]
            SimpleName: Fraction [8976,8984]
        InfixExpression [8985,9010]
            SimpleName: numerator [8985,8994]
            INFIX_EXPRESSION_OPERATOR: * [8995,8996]
            QualifiedName: rhs.numerator [8997,9010]
        InfixExpression [9030,9059]
            SimpleName: denominator [9030,9041]
            INFIX_EXPRESSION_OPERATOR: * [9042,9043]
            QualifiedName: rhs.denominator [9044,9059]
===
delete-tree
---
Javadoc [5535,5769]
    TagElement [5547,5666]
        TextElement: Return the quotient of this fraction and the given fraction.  The [5547,5612]
        TextElement: returned fraction is reduced to lowest terms. [5621,5666]
    TagElement [5675,5705]
        SimpleName: rhs [5682,5685]
        TextElement:  the other fraction. [5685,5705]
    TagElement [5714,5760]
        TextElement:  the fraction quotient in lowest terms. [5721,5760]
