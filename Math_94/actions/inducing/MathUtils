===
insert-tree
---
MethodDeclaration [20308,20857]
    Javadoc [20308,20592]
        TagElement [20320,20365]
            TextElement: Multiply two integers, checking for overflow. [20320,20365]
        TagElement [20381,20398]
            SimpleName: x [20388,20389]
            TextElement:  a factor [20389,20398]
        TagElement [20406,20423]
            SimpleName: y [20413,20414]
            TextElement:  a factor [20414,20423]
        TagElement [20431,20467]
            TextElement:  the product <code>x*y</code> [20438,20467]
        TagElement [20475,20584]
            SimpleName: ArithmeticException [20483,20502]
            TextElement:  if the result can not be represented as [20502,20542]
            TextElement: an int [20578,20584]
    Modifier: public [20597,20603]
    Modifier: static [20604,20610]
    PrimitiveType: int [20611,20614]
    SimpleName: mulAndCheck [20615,20626]
    SingleVariableDeclaration [20627,20632]
        PrimitiveType: int [20627,20630]
        SimpleName: x [20631,20632]
    SingleVariableDeclaration [20634,20639]
        PrimitiveType: int [20634,20637]
        SimpleName: y [20638,20639]
    Block [20641,20857]
        VariableDeclarationStatement [20651,20680]
            PrimitiveType: long [20651,20655]
            VariableDeclarationFragment [20656,20679]
                SimpleName: m [20656,20657]
                InfixExpression [20660,20679]
                    ParenthesizedExpression [20660,20669]
                        CastExpression [20661,20668]
                            PrimitiveType: long [20662,20666]
                            SimpleName: x [20667,20668]
                    INFIX_EXPRESSION_OPERATOR: * [20669,20670]
                    ParenthesizedExpression [20670,20679]
                        CastExpression [20671,20678]
                            PrimitiveType: long [20672,20676]
                            SimpleName: y [20677,20678]
        IfStatement [20689,20828]
            InfixExpression [20693,20755]
                InfixExpression [20693,20714]
                    SimpleName: m [20693,20694]
                    INFIX_EXPRESSION_OPERATOR: < [20695,20696]
                    QualifiedName: Integer.MIN_VALUE [20697,20714]
                INFIX_EXPRESSION_OPERATOR: || [20715,20717]
                InfixExpression [20734,20755]
                    SimpleName: m [20734,20735]
                    INFIX_EXPRESSION_OPERATOR: > [20736,20737]
                    QualifiedName: Integer.MAX_VALUE [20738,20755]
            Block [20757,20828]
                ThrowStatement [20771,20818]
                    ClassInstanceCreation [20777,20817]
                        SimpleType [20781,20800]
                            SimpleName: ArithmeticException [20781,20800]
                        StringLiteral: "overflow: mul" [20801,20816]
        ReturnStatement [20837,20851]
            CastExpression [20844,20850]
                PrimitiveType: int [20845,20848]
                SimpleName: m [20849,20850]
to
TypeDeclaration [691,18993]
at 40
===
insert-tree
---
MethodDeclaration [20867,21377]
    Javadoc [20867,21116]
        TagElement [20879,20919]
            TextElement: Add two integers, checking for overflow. [20879,20919]
        TagElement [20935,20953]
            SimpleName: x [20942,20943]
            TextElement:  an addend [20943,20953]
        TagElement [20961,20979]
            SimpleName: y [20968,20969]
            TextElement:  an addend [20969,20979]
        TagElement [20987,21019]
            TextElement:  the sum <code>x+y</code> [20994,21019]
        TagElement [21027,21108]
            SimpleName: ArithmeticException [21035,21054]
            TextElement:  if the result can not be represented as [21054,21094]
            TextElement: an int [21102,21108]
    Modifier: public [21121,21127]
    Modifier: static [21128,21134]
    PrimitiveType: int [21135,21138]
    SimpleName: addAndCheck [21139,21150]
    SingleVariableDeclaration [21151,21156]
        PrimitiveType: int [21151,21154]
        SimpleName: x [21155,21156]
    SingleVariableDeclaration [21158,21163]
        PrimitiveType: int [21158,21161]
        SimpleName: y [21162,21163]
    Block [21165,21377]
        VariableDeclarationStatement [21175,21200]
            PrimitiveType: long [21175,21179]
            VariableDeclarationFragment [21180,21199]
                SimpleName: s [21180,21181]
                InfixExpression [21184,21199]
                    CastExpression [21184,21191]
                        PrimitiveType: long [21185,21189]
                        SimpleName: x [21190,21191]
                    INFIX_EXPRESSION_OPERATOR: + [21191,21192]
                    CastExpression [21192,21199]
                        PrimitiveType: long [21193,21197]
                        SimpleName: y [21198,21199]
        IfStatement [21209,21348]
            InfixExpression [21213,21275]
                InfixExpression [21213,21234]
                    SimpleName: s [21213,21214]
                    INFIX_EXPRESSION_OPERATOR: < [21215,21216]
                    QualifiedName: Integer.MIN_VALUE [21217,21234]
                INFIX_EXPRESSION_OPERATOR: || [21235,21237]
                InfixExpression [21254,21275]
                    SimpleName: s [21254,21255]
                    INFIX_EXPRESSION_OPERATOR: > [21256,21257]
                    QualifiedName: Integer.MAX_VALUE [21258,21275]
            Block [21277,21348]
                ThrowStatement [21291,21338]
                    ClassInstanceCreation [21297,21337]
                        SimpleType [21301,21320]
                            SimpleName: ArithmeticException [21301,21320]
                        StringLiteral: "overflow: add" [21321,21336]
        ReturnStatement [21357,21371]
            CastExpression [21364,21370]
                PrimitiveType: int [21365,21368]
                SimpleName: s [21369,21370]
to
TypeDeclaration [691,18993]
at 41
===
insert-tree
---
MethodDeclaration [21387,21916]
    Javadoc [21387,21655]
        TagElement [21399,21444]
            TextElement: Subtract two integers, checking for overflow. [21399,21444]
        TagElement [21460,21480]
            SimpleName: x [21467,21468]
            TextElement:  the minuend [21468,21480]
        TagElement [21488,21511]
            SimpleName: y [21495,21496]
            TextElement:  the subtrahend [21496,21511]
        TagElement [21519,21558]
            TextElement:  the difference <code>x-y</code> [21526,21558]
        TagElement [21566,21647]
            SimpleName: ArithmeticException [21574,21593]
            TextElement:  if the result can not be represented as [21593,21633]
            TextElement: an int [21641,21647]
    Modifier: public [21660,21666]
    Modifier: static [21667,21673]
    PrimitiveType: int [21674,21677]
    SimpleName: subAndCheck [21678,21689]
    SingleVariableDeclaration [21690,21695]
        PrimitiveType: int [21690,21693]
        SimpleName: x [21694,21695]
    SingleVariableDeclaration [21697,21702]
        PrimitiveType: int [21697,21700]
        SimpleName: y [21701,21702]
    Block [21704,21916]
        VariableDeclarationStatement [21714,21739]
            PrimitiveType: long [21714,21718]
            VariableDeclarationFragment [21719,21738]
                SimpleName: s [21719,21720]
                InfixExpression [21723,21738]
                    CastExpression [21723,21730]
                        PrimitiveType: long [21724,21728]
                        SimpleName: x [21729,21730]
                    INFIX_EXPRESSION_OPERATOR: - [21730,21731]
                    CastExpression [21731,21738]
                        PrimitiveType: long [21732,21736]
                        SimpleName: y [21737,21738]
        IfStatement [21748,21887]
            InfixExpression [21752,21814]
                InfixExpression [21752,21773]
                    SimpleName: s [21752,21753]
                    INFIX_EXPRESSION_OPERATOR: < [21754,21755]
                    QualifiedName: Integer.MIN_VALUE [21756,21773]
                INFIX_EXPRESSION_OPERATOR: || [21774,21776]
                InfixExpression [21793,21814]
                    SimpleName: s [21793,21794]
                    INFIX_EXPRESSION_OPERATOR: > [21795,21796]
                    QualifiedName: Integer.MAX_VALUE [21797,21814]
            Block [21816,21887]
                ThrowStatement [21830,21877]
                    ClassInstanceCreation [21836,21876]
                        SimpleType [21840,21859]
                            SimpleName: ArithmeticException [21840,21859]
                        StringLiteral: "overflow: add" [21860,21875]
        ReturnStatement [21896,21910]
            CastExpression [21903,21909]
                PrimitiveType: int [21904,21907]
                SimpleName: s [21908,21909]
to
TypeDeclaration [691,18993]
at 42
===
insert-tree
---
Javadoc [18259,18658]
    TagElement [18270,18518]
        TextElement: <p>Gets the greatest common divisor of the absolute value of [18270,18330]
        TextElement: two numbers, using the "binary gcd" method which avoids [18338,18393]
        TextElement: division and modulo operations.  See Knuth 4.5.2 algorithm B. [18401,18462]
        TextElement: This algorithm is due to Josef Stein (1961).</p> [18470,18518]
    TagElement [18533,18560]
        SimpleName: u [18540,18541]
        TextElement:   a non-zero number [18541,18560]
    TagElement [18568,18595]
        SimpleName: v [18575,18576]
        TextElement:   a non-zero number [18576,18595]
    TagElement [18603,18650]
        TextElement:  the greatest common divisor, never zero [18610,18650]
to
MethodDeclaration [18259,18991]
at 0
===
update-node
---
SimpleName: a [18515,18516]
replace a by u
===
update-node
---
SimpleName: b [18522,18523]
replace b by v
===
insert-tree
---
IfStatement [18709,18784]
    InfixExpression [18713,18723]
        InfixExpression [18713,18718]
            SimpleName: u [18713,18714]
            INFIX_EXPRESSION_OPERATOR: * [18715,18716]
            SimpleName: v [18717,18718]
        INFIX_EXPRESSION_OPERATOR: == [18719,18721]
        NumberLiteral: 0 [18722,18723]
    Block [18725,18784]
        ReturnStatement [18739,18774]
            ParenthesizedExpression [18746,18773]
                InfixExpression [18747,18772]
                    MethodInvocation [18747,18758]
                        METHOD_INVOCATION_RECEIVER [18747,18751]
                            SimpleName: Math [18747,18751]
                        SimpleName: abs [18752,18755]
                        METHOD_INVOCATION_ARGUMENTS [18756,18757]
                            SimpleName: u [18756,18757]
                    INFIX_EXPRESSION_OPERATOR: + [18759,18760]
                    MethodInvocation [18761,18772]
                        METHOD_INVOCATION_RECEIVER [18761,18765]
                            SimpleName: Math [18761,18765]
                        SimpleName: abs [18766,18769]
                        METHOD_INVOCATION_ARGUMENTS [18770,18771]
                            SimpleName: v [18770,18771]
to
Block [18525,18991]
at 0
===
move-tree
---
IfStatement [18681,18965]
    InfixExpression [18685,18690]
        SimpleName: a [18685,18686]
        INFIX_EXPRESSION_OPERATOR: < [18687,18688]
        NumberLiteral: 0 [18689,18690]
    Block [18692,18733]
        ExpressionStatement [18706,18723]
            Assignment [18706,18722]
                SimpleName: ret [18706,18709]
                ASSIGNMENT_OPERATOR: = [18710,18711]
                MethodInvocation [18712,18722]
                    SimpleName: gcd [18712,18715]
                    METHOD_INVOCATION_ARGUMENTS [18716,18721]
                        PrefixExpression [18716,18718]
                            PREFIX_EXPRESSION_OPERATOR: - [18716,18717]
                            SimpleName: a [18717,18718]
                        SimpleName: b [18720,18721]
    IfStatement [18739,18965]
        InfixExpression [18743,18748]
            SimpleName: b [18743,18744]
            INFIX_EXPRESSION_OPERATOR: < [18745,18746]
            NumberLiteral: 0 [18747,18748]
        Block [18750,18791]
            ExpressionStatement [18764,18781]
                Assignment [18764,18780]
                    SimpleName: ret [18764,18767]
                    ASSIGNMENT_OPERATOR: = [18768,18769]
                    MethodInvocation [18770,18780]
                        SimpleName: gcd [18770,18773]
                        METHOD_INVOCATION_ARGUMENTS [18774,18779]
                            SimpleName: a [18774,18775]
                            PrefixExpression [18777,18779]
                                PREFIX_EXPRESSION_OPERATOR: - [18777,18778]
                                SimpleName: b [18778,18779]
        Block [18797,18965]
            VariableDeclarationStatement [18811,18821]
                PrimitiveType: int [18811,18814]
                VariableDeclarationFragment [18815,18820]
                    SimpleName: r [18815,18816]
                    NumberLiteral: 0 [18819,18820]
            WhileStatement [18834,18934]
                InfixExpression [18840,18845]
                    SimpleName: b [18840,18841]
                    INFIX_EXPRESSION_OPERATOR: > [18842,18843]
                    NumberLiteral: 0 [18844,18845]
                Block [18846,18934]
                    ExpressionStatement [18864,18874]
                        Assignment [18864,18873]
                            SimpleName: r [18864,18865]
                            ASSIGNMENT_OPERATOR: = [18866,18867]
                            InfixExpression [18868,18873]
                                SimpleName: a [18868,18869]
                                INFIX_EXPRESSION_OPERATOR: % [18870,18871]
                                SimpleName: b [18872,18873]
                    ExpressionStatement [18891,18897]
                        Assignment [18891,18896]
                            SimpleName: a [18891,18892]
                            ASSIGNMENT_OPERATOR: = [18893,18894]
                            SimpleName: b [18895,18896]
                    ExpressionStatement [18914,18920]
                        Assignment [18914,18919]
                            SimpleName: b [18914,18915]
                            ASSIGNMENT_OPERATOR: = [18916,18917]
                            SimpleName: r [18918,18919]
            ExpressionStatement [18947,18955]
                Assignment [18947,18954]
                    SimpleName: ret [18947,18950]
                    ASSIGNMENT_OPERATOR: = [18951,18952]
                    SimpleName: a [18953,18954]
to
Block [18525,18991]
at 1
===
move-tree
---
IfStatement [18621,18965]
    InfixExpression [18625,18631]
        SimpleName: b [18625,18626]
        INFIX_EXPRESSION_OPERATOR: == [18627,18629]
        NumberLiteral: 0 [18630,18631]
    Block [18633,18675]
        ExpressionStatement [18647,18665]
            Assignment [18647,18664]
                SimpleName: ret [18647,18650]
                ASSIGNMENT_OPERATOR: = [18651,18652]
                MethodInvocation [18653,18664]
                    METHOD_INVOCATION_RECEIVER [18653,18657]
                        SimpleName: Math [18653,18657]
                    SimpleName: abs [18658,18661]
                    METHOD_INVOCATION_ARGUMENTS [18662,18663]
                        SimpleName: a [18662,18663]
    IfStatement [18681,18965]
        InfixExpression [18685,18690]
            SimpleName: a [18685,18686]
            INFIX_EXPRESSION_OPERATOR: < [18687,18688]
            NumberLiteral: 0 [18689,18690]
        Block [18692,18733]
            ExpressionStatement [18706,18723]
                Assignment [18706,18722]
                    SimpleName: ret [18706,18709]
                    ASSIGNMENT_OPERATOR: = [18710,18711]
                    MethodInvocation [18712,18722]
                        SimpleName: gcd [18712,18715]
                        METHOD_INVOCATION_ARGUMENTS [18716,18721]
                            PrefixExpression [18716,18718]
                                PREFIX_EXPRESSION_OPERATOR: - [18716,18717]
                                SimpleName: a [18717,18718]
                            SimpleName: b [18720,18721]
        IfStatement [18739,18965]
            InfixExpression [18743,18748]
                SimpleName: b [18743,18744]
                INFIX_EXPRESSION_OPERATOR: < [18745,18746]
                NumberLiteral: 0 [18747,18748]
            Block [18750,18791]
                ExpressionStatement [18764,18781]
                    Assignment [18764,18780]
                        SimpleName: ret [18764,18767]
                        ASSIGNMENT_OPERATOR: = [18768,18769]
                        MethodInvocation [18770,18780]
                            SimpleName: gcd [18770,18773]
                            METHOD_INVOCATION_ARGUMENTS [18774,18779]
                                SimpleName: a [18774,18775]
                                PrefixExpression [18777,18779]
                                    PREFIX_EXPRESSION_OPERATOR: - [18777,18778]
                                    SimpleName: b [18778,18779]
            Block [18797,18965]
                VariableDeclarationStatement [18811,18821]
                    PrimitiveType: int [18811,18814]
                    VariableDeclarationFragment [18815,18820]
                        SimpleName: r [18815,18816]
                        NumberLiteral: 0 [18819,18820]
                WhileStatement [18834,18934]
                    InfixExpression [18840,18845]
                        SimpleName: b [18840,18841]
                        INFIX_EXPRESSION_OPERATOR: > [18842,18843]
                        NumberLiteral: 0 [18844,18845]
                    Block [18846,18934]
                        ExpressionStatement [18864,18874]
                            Assignment [18864,18873]
                                SimpleName: r [18864,18865]
                                ASSIGNMENT_OPERATOR: = [18866,18867]
                                InfixExpression [18868,18873]
                                    SimpleName: a [18868,18869]
                                    INFIX_EXPRESSION_OPERATOR: % [18870,18871]
                                    SimpleName: b [18872,18873]
                        ExpressionStatement [18891,18897]
                            Assignment [18891,18896]
                                SimpleName: a [18891,18892]
                                ASSIGNMENT_OPERATOR: = [18893,18894]
                                SimpleName: b [18895,18896]
                        ExpressionStatement [18914,18920]
                            Assignment [18914,18919]
                                SimpleName: b [18914,18915]
                                ASSIGNMENT_OPERATOR: = [18916,18917]
                                SimpleName: r [18918,18919]
                ExpressionStatement [18947,18955]
                    Assignment [18947,18954]
                        SimpleName: ret [18947,18950]
                        ASSIGNMENT_OPERATOR: = [18951,18952]
                        SimpleName: a [18953,18954]
to
Block [18525,18991]
at 2
===
move-tree
---
VariableDeclarationStatement [18811,18821]
    PrimitiveType: int [18811,18814]
    VariableDeclarationFragment [18815,18820]
        SimpleName: r [18815,18816]
        NumberLiteral: 0 [18819,18820]
to
Block [18525,18991]
at 3
===
insert-tree
---
WhileStatement [19203,19332]
    InfixExpression [19210,19238]
        InfixExpression [19210,19230]
            InfixExpression [19210,19218]
                ParenthesizedExpression [19210,19215]
                    InfixExpression [19211,19214]
                        SimpleName: u [19211,19212]
                        INFIX_EXPRESSION_OPERATOR: & [19212,19213]
                        NumberLiteral: 1 [19213,19214]
                INFIX_EXPRESSION_OPERATOR: == [19215,19217]
                NumberLiteral: 0 [19217,19218]
            INFIX_EXPRESSION_OPERATOR: && [19219,19221]
            InfixExpression [19222,19230]
                ParenthesizedExpression [19222,19227]
                    InfixExpression [19223,19226]
                        SimpleName: v [19223,19224]
                        INFIX_EXPRESSION_OPERATOR: & [19224,19225]
                        NumberLiteral: 1 [19225,19226]
                INFIX_EXPRESSION_OPERATOR: == [19227,19229]
                NumberLiteral: 0 [19229,19230]
        INFIX_EXPRESSION_OPERATOR: && [19231,19233]
        InfixExpression [19234,19238]
            SimpleName: k [19234,19235]
            INFIX_EXPRESSION_OPERATOR: < [19235,19236]
            NumberLiteral: 31 [19236,19238]
    Block [19240,19332]
        ExpressionStatement [19288,19293]
            Assignment [19288,19292]
                SimpleName: u [19288,19289]
                ASSIGNMENT_OPERATOR: /= [19289,19291]
                NumberLiteral: 2 [19291,19292]
        ExpressionStatement [19294,19299]
            Assignment [19294,19298]
                SimpleName: v [19294,19295]
                ASSIGNMENT_OPERATOR: /= [19295,19297]
                NumberLiteral: 2 [19297,19298]
        ExpressionStatement [19300,19304]
            PostfixExpression [19300,19303]
                SimpleName: k [19300,19301]
                POSTFIX_EXPRESSION_OPERATOR: ++ [19301,19303]
to
Block [18525,18991]
at 4
===
insert-tree
---
IfStatement [19341,19431]
    InfixExpression [19345,19350]
        SimpleName: k [19345,19346]
        INFIX_EXPRESSION_OPERATOR: == [19346,19348]
        NumberLiteral: 31 [19348,19350]
    Block [19352,19431]
        ThrowStatement [19366,19421]
            ClassInstanceCreation [19372,19420]
                SimpleType [19376,19395]
                    SimpleName: ArithmeticException [19376,19395]
                StringLiteral: "overflow: gcd is 2^31" [19396,19419]
to
Block [18525,18991]
at 5
===
insert-tree
---
VariableDeclarationStatement [19540,19578]
    PrimitiveType: int [19540,19543]
    VariableDeclarationFragment [19544,19571]
        SimpleName: t [19544,19545]
        ConditionalExpression [19548,19571]
            ParenthesizedExpression [19548,19558]
                InfixExpression [19549,19557]
                    ParenthesizedExpression [19549,19554]
                        InfixExpression [19550,19553]
                            SimpleName: u [19550,19551]
                            INFIX_EXPRESSION_OPERATOR: & [19551,19552]
                            NumberLiteral: 1 [19552,19553]
                    INFIX_EXPRESSION_OPERATOR: == [19554,19556]
                    NumberLiteral: 1 [19556,19557]
            SimpleName: v [19561,19562]
            PrefixExpression [19565,19571]
                PREFIX_EXPRESSION_OPERATOR: - [19565,19566]
                ParenthesizedExpression [19566,19571]
                    InfixExpression [19567,19570]
                        SimpleName: u [19567,19568]
                        INFIX_EXPRESSION_OPERATOR: / [19568,19569]
                        NumberLiteral: 2 [19569,19570]
to
Block [18525,18991]
at 6
===
insert-node
---
DoStatement [19709,20254]
to
Block [18525,18991]
at 7
===
insert-tree
---
ReturnStatement [20263,20280]
    InfixExpression [20270,20279]
        PrefixExpression [20270,20272]
            PREFIX_EXPRESSION_OPERATOR: - [20270,20271]
            SimpleName: u [20271,20272]
        INFIX_EXPRESSION_OPERATOR: * [20272,20273]
        ParenthesizedExpression [20273,20279]
            InfixExpression [20274,20278]
                NumberLiteral: 1 [20274,20275]
                INFIX_EXPRESSION_OPERATOR: << [20275,20277]
                SimpleName: k [20277,20278]
to
Block [18525,18991]
at 8
===
insert-node
---
Block [19070,19079]
to
IfStatement [18681,18965]
at 1
===
insert-node
---
Block [19116,19125]
to
IfStatement [18621,18965]
at 1
===
move-tree
---
Block [18846,18934]
    ExpressionStatement [18864,18874]
        Assignment [18864,18873]
            SimpleName: r [18864,18865]
            ASSIGNMENT_OPERATOR: = [18866,18867]
            InfixExpression [18868,18873]
                SimpleName: a [18868,18869]
                INFIX_EXPRESSION_OPERATOR: % [18870,18871]
                SimpleName: b [18872,18873]
    ExpressionStatement [18891,18897]
        Assignment [18891,18896]
            SimpleName: a [18891,18892]
            ASSIGNMENT_OPERATOR: = [18893,18894]
            SimpleName: b [18895,18896]
    ExpressionStatement [18914,18920]
        Assignment [18914,18919]
            SimpleName: b [18914,18915]
            ASSIGNMENT_OPERATOR: = [18916,18917]
            SimpleName: r [18918,18919]
to
DoStatement [19709,20254]
at 0
===
insert-tree
---
InfixExpression [20248,20252]
    SimpleName: t [20248,20249]
    INFIX_EXPRESSION_OPERATOR: != [20249,20251]
    NumberLiteral: 0 [20251,20252]
to
DoStatement [19709,20254]
at 1
===
update-node
---
SimpleName: a [18685,18686]
replace a by u
===
update-node
---
INFIX_EXPRESSION_OPERATOR: < [18687,18688]
replace < by >
===
move-tree
---
ExpressionStatement [18914,18920]
    Assignment [18914,18919]
        SimpleName: b [18914,18915]
        ASSIGNMENT_OPERATOR: = [18916,18917]
        SimpleName: r [18918,18919]
to
Block [19070,19079]
at 0
===
update-node
---
SimpleName: b [18625,18626]
replace b by v
===
update-node
---
INFIX_EXPRESSION_OPERATOR: == [18627,18629]
replace == by >
===
move-tree
---
ExpressionStatement [18947,18955]
    Assignment [18947,18954]
        SimpleName: ret [18947,18950]
        ASSIGNMENT_OPERATOR: = [18951,18952]
        SimpleName: a [18953,18954]
to
Block [19116,19125]
at 0
===
update-node
---
SimpleName: r [18815,18816]
replace r by k
===
insert-tree
---
WhileStatement [19807,19899]
    InfixExpression [19814,19822]
        ParenthesizedExpression [19814,19819]
            InfixExpression [19815,19818]
                SimpleName: t [19815,19816]
                INFIX_EXPRESSION_OPERATOR: & [19816,19817]
                NumberLiteral: 1 [19817,19818]
        INFIX_EXPRESSION_OPERATOR: == [19819,19821]
        NumberLiteral: 0 [19821,19822]
    Block [19824,19899]
        ExpressionStatement [19863,19868]
            Assignment [19863,19867]
                SimpleName: t [19863,19864]
                ASSIGNMENT_OPERATOR: /= [19864,19866]
                NumberLiteral: 2 [19866,19867]
to
Block [18846,18934]
at 0
===
move-tree
---
IfStatement [18739,18965]
    InfixExpression [18743,18748]
        SimpleName: b [18743,18744]
        INFIX_EXPRESSION_OPERATOR: < [18745,18746]
        NumberLiteral: 0 [18747,18748]
    Block [18750,18791]
        ExpressionStatement [18764,18781]
            Assignment [18764,18780]
                SimpleName: ret [18764,18767]
                ASSIGNMENT_OPERATOR: = [18768,18769]
                MethodInvocation [18770,18780]
                    SimpleName: gcd [18770,18773]
                    METHOD_INVOCATION_ARGUMENTS [18774,18779]
                        SimpleName: a [18774,18775]
                        PrefixExpression [18777,18779]
                            PREFIX_EXPRESSION_OPERATOR: - [18777,18778]
                            SimpleName: b [18778,18779]
    Block [18797,18965]
        VariableDeclarationStatement [18811,18821]
            PrimitiveType: int [18811,18814]
            VariableDeclarationFragment [18815,18820]
                SimpleName: r [18815,18816]
                NumberLiteral: 0 [18819,18820]
        WhileStatement [18834,18934]
            InfixExpression [18840,18845]
                SimpleName: b [18840,18841]
                INFIX_EXPRESSION_OPERATOR: > [18842,18843]
                NumberLiteral: 0 [18844,18845]
            Block [18846,18934]
                ExpressionStatement [18864,18874]
                    Assignment [18864,18873]
                        SimpleName: r [18864,18865]
                        ASSIGNMENT_OPERATOR: = [18866,18867]
                        InfixExpression [18868,18873]
                            SimpleName: a [18868,18869]
                            INFIX_EXPRESSION_OPERATOR: % [18870,18871]
                            SimpleName: b [18872,18873]
                ExpressionStatement [18891,18897]
                    Assignment [18891,18896]
                        SimpleName: a [18891,18892]
                        ASSIGNMENT_OPERATOR: = [18893,18894]
                        SimpleName: b [18895,18896]
                ExpressionStatement [18914,18920]
                    Assignment [18914,18919]
                        SimpleName: b [18914,18915]
                        ASSIGNMENT_OPERATOR: = [18916,18917]
                        SimpleName: r [18918,18919]
        ExpressionStatement [18947,18955]
            Assignment [18947,18954]
                SimpleName: ret [18947,18950]
                ASSIGNMENT_OPERATOR: = [18951,18952]
                SimpleName: a [18953,18954]
to
Block [18846,18934]
at 1
===
insert-tree
---
ExpressionStatement [20116,20130]
    Assignment [20116,20129]
        SimpleName: t [20116,20117]
        ASSIGNMENT_OPERATOR: = [20118,20119]
        InfixExpression [20120,20129]
            ParenthesizedExpression [20120,20127]
                InfixExpression [20121,20126]
                    SimpleName: v [20121,20122]
                    INFIX_EXPRESSION_OPERATOR: - [20123,20124]
                    SimpleName: u [20125,20126]
            INFIX_EXPRESSION_OPERATOR: / [20127,20128]
            NumberLiteral: 2 [20128,20129]
to
Block [18846,18934]
at 2
===
update-node
---
SimpleName: b [18914,18915]
replace b by u
===
insert-tree
---
PrefixExpression [19074,19076]
    PREFIX_EXPRESSION_OPERATOR: - [19074,19075]
    SimpleName: u [19075,19076]
to
Assignment [18914,18919]
at 2
===
update-node
---
SimpleName: ret [18947,18950]
replace ret by v
===
insert-tree
---
PrefixExpression [19120,19122]
    PREFIX_EXPRESSION_OPERATOR: - [19120,19121]
    SimpleName: v [19121,19122]
to
Assignment [18947,18954]
at 2
===
update-node
---
SimpleName: b [18743,18744]
replace b by t
===
update-node
---
INFIX_EXPRESSION_OPERATOR: < [18745,18746]
replace < by >
===
move-tree
---
ExpressionStatement [18891,18897]
    Assignment [18891,18896]
        SimpleName: a [18891,18892]
        ASSIGNMENT_OPERATOR: = [18893,18894]
        SimpleName: b [18895,18896]
to
Block [18750,18791]
at 0
===
move-tree
---
ExpressionStatement [18864,18874]
    Assignment [18864,18873]
        SimpleName: r [18864,18865]
        ASSIGNMENT_OPERATOR: = [18866,18867]
        InfixExpression [18868,18873]
            SimpleName: a [18868,18869]
            INFIX_EXPRESSION_OPERATOR: % [18870,18871]
            SimpleName: b [18872,18873]
to
Block [18797,18965]
at 0
===
update-node
---
SimpleName: a [18891,18892]
replace a by u
===
insert-tree
---
PrefixExpression [19978,19980]
    PREFIX_EXPRESSION_OPERATOR: - [19978,19979]
    SimpleName: t [19979,19980]
to
Assignment [18891,18896]
at 2
===
update-node
---
SimpleName: r [18864,18865]
replace r by v
===
insert-node
---
SimpleName: t [20023,20024]
to
Assignment [18864,18873]
at 2
===
delete-tree
---
Javadoc [18259,18484]
    TagElement [18270,18333]
        TextElement: Returns the greatest common divisor between two integer values. [18270,18333]
    TagElement [18341,18374]
        SimpleName: a [18348,18349]
        TextElement:  the first integer value. [18349,18374]
    TagElement [18382,18416]
        SimpleName: b [18389,18390]
        TextElement:  the second integer value. [18390,18416]
    TagElement [18424,18476]
        TextElement:  the greatest common divisor between a and b. [18431,18476]
===
delete-node
---
SimpleName: r [18918,18919]
===
===
delete-tree
---
Block [18692,18733]
    ExpressionStatement [18706,18723]
        Assignment [18706,18722]
            SimpleName: ret [18706,18709]
            ASSIGNMENT_OPERATOR: = [18710,18711]
            MethodInvocation [18712,18722]
                SimpleName: gcd [18712,18715]
                METHOD_INVOCATION_ARGUMENTS [18716,18721]
                    PrefixExpression [18716,18718]
                        PREFIX_EXPRESSION_OPERATOR: - [18716,18717]
                        SimpleName: a [18717,18718]
                    SimpleName: b [18720,18721]
===
delete-node
---
SimpleName: a [18953,18954]
===
===
delete-tree
---
Block [18633,18675]
    ExpressionStatement [18647,18665]
        Assignment [18647,18664]
            SimpleName: ret [18647,18650]
            ASSIGNMENT_OPERATOR: = [18651,18652]
            MethodInvocation [18653,18664]
                METHOD_INVOCATION_RECEIVER [18653,18657]
                    SimpleName: Math [18653,18657]
                SimpleName: abs [18658,18661]
                METHOD_INVOCATION_ARGUMENTS [18662,18663]
                    SimpleName: a [18662,18663]
===
delete-node
---
SimpleName: b [18895,18896]
===
===
delete-tree
---
ExpressionStatement [18764,18781]
    Assignment [18764,18780]
        SimpleName: ret [18764,18767]
        ASSIGNMENT_OPERATOR: = [18768,18769]
        MethodInvocation [18770,18780]
            SimpleName: gcd [18770,18773]
            METHOD_INVOCATION_ARGUMENTS [18774,18779]
                SimpleName: a [18774,18775]
                PrefixExpression [18777,18779]
                    PREFIX_EXPRESSION_OPERATOR: - [18777,18778]
                    SimpleName: b [18778,18779]
===
delete-tree
---
InfixExpression [18868,18873]
    SimpleName: a [18868,18869]
    INFIX_EXPRESSION_OPERATOR: % [18870,18871]
    SimpleName: b [18872,18873]
===
delete-tree
---
InfixExpression [18840,18845]
    SimpleName: b [18840,18841]
    INFIX_EXPRESSION_OPERATOR: > [18842,18843]
    NumberLiteral: 0 [18844,18845]
===
delete-node
---
WhileStatement [18834,18934]
===
===
delete-tree
---
VariableDeclarationStatement [18535,18543]
    PrimitiveType: int [18535,18538]
    VariableDeclarationFragment [18539,18542]
        SimpleName: ret [18539,18542]
===
delete-tree
---
InfixExpression [18565,18571]
    SimpleName: a [18565,18566]
    INFIX_EXPRESSION_OPERATOR: == [18567,18569]
    NumberLiteral: 0 [18570,18571]
===
delete-tree
---
Block [18573,18615]
    ExpressionStatement [18587,18605]
        Assignment [18587,18604]
            SimpleName: ret [18587,18590]
            ASSIGNMENT_OPERATOR: = [18591,18592]
            MethodInvocation [18593,18604]
                METHOD_INVOCATION_RECEIVER [18593,18597]
                    SimpleName: Math [18593,18597]
                SimpleName: abs [18598,18601]
                METHOD_INVOCATION_ARGUMENTS [18602,18603]
                    SimpleName: b [18602,18603]
===
delete-node
---
IfStatement [18561,18965]
===
===
delete-tree
---
ReturnStatement [18974,18985]
    SimpleName: ret [18981,18984]
