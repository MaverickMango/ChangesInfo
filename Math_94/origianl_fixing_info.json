{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "/home/liumengjiao/Desktop/CI/Benchmark/data/changesInfo/",
  "properties": {
    "trigger.tests": "org.apache.commons.math.util.MathUtilsTest::testGcd",
    "test.dir": "src/test",
    "clz.modified": "org.apache.commons.math.util.MathUtils",
    "src.dir": "src/java"
  },
  "timeoutSecond": 100,
  "proj": "Math",
  "id": "94",
  "workingDir": "../bugs/Math_94_buggy",
  "buggyCommit": "ee88057ba86b543c4f678f8e28b1620c22b19f0f",
  "inducingCommit": "20786a617657c0c20315005c621052a2735dfe67",
  "originalCommit": "12643c4a91cd155f1230591936e430064d152903",
  "bug_name": "Math_94",
  "derive": "defects4j",
  "original_fixing_commit": "a96e597894562c2cf01fc678f6c435d65ccc31c5",
  "buildFiles_changed": false,
  "regression": true,
  "inducing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/math/fraction/Fraction.java",
        "src/java/org/apache/commons/math/fraction/Fraction.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.math.fraction.Fraction:Fraction:[int num, int den]:null",
            "org.apache.commons.math.fraction.Fraction:add:[Fraction rhs]:Fraction",
            "org.apache.commons.math.fraction.Fraction:negate:[]:Fraction",
            "org.apache.commons.math.fraction.Fraction:divide:[Fraction rhs]:Fraction",
            "org.apache.commons.math.fraction.Fraction:multiply:[Fraction rhs]:Fraction",
            "org.apache.commons.math.fraction.Fraction:compareTo:[Object object]:int",
            "org.apache.commons.math.fraction.Fraction:subtract:[Fraction rhs]:Fraction"
          ],
          "num": 7
        },
        {
          "qualified_names": [
            "org.apache.commons.math.fraction.Fraction:negate:[]:Fraction",
            "org.apache.commons.math.fraction.Fraction:getReducedFraction:[int numerator, int denominator]:Fraction",
            "org.apache.commons.math.fraction.Fraction:add:[Fraction fraction]:Fraction",
            "org.apache.commons.math.fraction.Fraction:addSub:[Fraction fraction, boolean isAdd]:Fraction",
            "org.apache.commons.math.fraction.Fraction:Fraction:[int num, int den]:null",
            "org.apache.commons.math.fraction.Fraction:multiply:[Fraction fraction]:Fraction",
            "org.apache.commons.math.fraction.Fraction:doubleValue:[]:double",
            "org.apache.commons.math.fraction.Fraction:divide:[Fraction fraction]:Fraction",
            "org.apache.commons.math.fraction.Fraction:subtract:[Fraction fraction]:Fraction"
          ],
          "num": 9
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "17",
            "120",
            "144",
            "145",
            "146",
            "147",
            "148",
            "149",
            "150",
            "151",
            "152",
            "153",
            "154",
            "155",
            "156",
            "157",
            "180",
            "181",
            "182",
            "183",
            "184",
            "185",
            "186",
            "187",
            "188",
            "189",
            "284",
            "285",
            "286",
            "287",
            "288",
            "289",
            "290",
            "291",
            "292",
            "293",
            "294",
            "311",
            "312",
            "313",
            "314",
            "316",
            "317"
          ],
          "num": 43
        },
        {
          "qualified_names": [
            "18",
            "122",
            "126",
            "127",
            "128",
            "129",
            "130",
            "131",
            "132",
            "133",
            "134",
            "135",
            "136",
            "180",
            "277",
            "278",
            "279",
            "292",
            "293",
            "294",
            "295",
            "296",
            "297",
            "298",
            "299",
            "301",
            "302",
            "303",
            "304",
            "305",
            "306",
            "307",
            "308",
            "309",
            "310",
            "311",
            "312",
            "313",
            "314",
            "315",
            "316",
            "317",
            "318",
            "319",
            "320",
            "321",
            "322",
            "323",
            "324",
            "325",
            "326",
            "327",
            "328",
            "329",
            "330",
            "331",
            "332",
            "333",
            "334",
            "335",
            "336",
            "337",
            "338",
            "339",
            "340",
            "341",
            "342",
            "343",
            "344",
            "345",
            "346",
            "347",
            "348",
            "349",
            "350",
            "351",
            "352",
            "353",
            "354",
            "355",
            "356",
            "357",
            "358",
            "359",
            "360",
            "361",
            "362",
            "363",
            "364",
            "365",
            "366",
            "367",
            "368",
            "369",
            "370",
            "371",
            "372",
            "373",
            "374",
            "375",
            "376",
            "377",
            "378",
            "379",
            "380",
            "381",
            "382",
            "383",
            "384",
            "385",
            "386",
            "387",
            "388",
            "389",
            "390",
            "391",
            "392",
            "393",
            "394",
            "395",
            "396",
            "397",
            "398",
            "399",
            "400",
            "401",
            "402",
            "403",
            "404",
            "405",
            "406",
            "407",
            "408",
            "409",
            "410",
            "411",
            "412",
            "413",
            "414",
            "415",
            "416",
            "417",
            "418",
            "419",
            "420",
            "421",
            "422",
            "423",
            "424",
            "425",
            "426",
            "427",
            "428",
            "429",
            "430",
            "431",
            "432",
            "433",
            "434",
            "435",
            "436",
            "437",
            "438",
            "439",
            "440",
            "441",
            "442",
            "443",
            "444",
            "445",
            "446",
            "447",
            "448",
            "449",
            "450",
            "451",
            "452",
            "453",
            "454",
            "455",
            "456"
          ],
          "num": 181
        }
      ],
      "diff": "diff --git a/src/java/org/apache/commons/math/fraction/Fraction.java b/src/java/org/apache/commons/math/fraction/Fraction.java\nindex bec70ac..625d84c 100644\n--- a/src/java/org/apache/commons/math/fraction/Fraction.java\n+++ b/src/java/org/apache/commons/math/fraction/Fraction.java\n@@ -15,6 +15,7 @@\n  */\r\n package org.apache.commons.math.fraction;\r\n \r\n+import java.math.BigInteger;\r\n import org.apache.commons.math.ConvergenceException;\r\n import org.apache.commons.math.util.MathUtils;\r\n \r\n@@ -118,9 +119,21 @@\n      * reduced to lowest terms.\r\n      * @param num the numerator.\r\n      * @param den the denominator.\r\n+     * @throws ArithmeticException if the denomiator is \u003ccode\u003ezero\u003c/code\u003e\r\n      */\r\n     public Fraction(int num, int den) {\r\n         super();\r\n+        if (den \u003d\u003d 0) {\r\n+            throw new ArithmeticException(\"The denominator must not be zero\");\r\n+        }\r\n+        if (den \u003c 0) {\r\n+            if (num \u003d\u003d Integer.MIN_VALUE ||\r\n+                    den \u003d\u003d Integer.MIN_VALUE) {\r\n+                throw new ArithmeticException(\"overflow: can\u0027t negate\");\r\n+            }\r\n+            num \u003d -num;\r\n+            den \u003d -den;\r\n+        }\r\n         this.numerator \u003d num;\r\n         this.denominator \u003d den;\r\n         reduce();\r\n@@ -141,20 +154,6 @@\n     }\r\n     \r\n     /**\r\n-     * Return the sum of this fraction and the given fraction.  The returned\r\n-     * fraction is reduced to lowest terms.\r\n-     *\r\n-     * @param rhs the other fraction.\r\n-     * @return the fraction sum in lowest terms.\r\n-     */\r\n-    public Fraction add(Fraction rhs) {\r\n-        int den \u003d MathUtils.lcm(denominator, rhs.denominator);\r\n-        int num \u003d (numerator * (den / denominator)) +\r\n-            (rhs.numerator * (den / rhs.denominator));\r\n-        return new Fraction(num, den);\r\n-    }\r\n-    \r\n-    /**\r\n      * Compares this object to another based on size.\r\n      * @param object the object to compare to\r\n      * @return -1 if this is less than \u003ctt\u003eobject\u003c/tt\u003e, +1 if this is greater\r\n@@ -177,16 +176,6 @@\n         \r\n         return ret;\r\n     }\r\n-\r\n-    /**\r\n-     * Return the quotient of this fraction and the given fraction.  The\r\n-     * returned fraction is reduced to lowest terms.\r\n-     * @param rhs the other fraction.\r\n-     * @return the fraction quotient in lowest terms.\r\n-     */\r\n-    public Fraction divide(Fraction rhs) {\r\n-        return multiply(rhs.reciprocal());\r\n-    }\r\n     \r\n     /**\r\n      * Gets the fraction as a \u003ctt\u003edouble\u003c/tt\u003e. This calculates the fraction as\r\n@@ -281,21 +270,13 @@\n     }\r\n     \r\n     /**\r\n-     * Return the product of this fraction and the given fraction.  The returned\r\n-     * fraction is reduced to lowest terms.\r\n-     * @param rhs the other fraction.\r\n-     * @return the fraction product in lowest terms.\r\n-     */\r\n-    public Fraction multiply(Fraction rhs) {\r\n-        return new Fraction(numerator * rhs.numerator, \r\n-                denominator * rhs.denominator);\r\n-    }\r\n-    \r\n-    /**\r\n      * Return the additive inverse of this fraction.\r\n      * @return the negation of this fraction.\r\n      */\r\n     public Fraction negate() {\r\n+        if (numerator\u003d\u003dInteger.MIN_VALUE) {\r\n+            throw new ArithmeticException(\"overflow: too large to negate\");\r\n+        }\r\n         return new Fraction(-numerator, denominator);\r\n     }\r\n \r\n@@ -308,13 +289,171 @@\n     }\r\n     \r\n     /**\r\n-     * Return the difference between this fraction and the given fraction.  The\r\n-     * returned fraction is reduced to lowest terms.\r\n-     * @param rhs the other fraction.\r\n-     * @return the fraction difference in lowest terms.\r\n+     * \u003cp\u003eAdds the value of this fraction to another, returning the result in reduced form.\r\n+     * The algorithm follows Knuth, 4.5.1.\u003c/p\u003e\r\n+     *\r\n+     * @param fraction  the fraction to add, must not be \u003ccode\u003enull\u003c/code\u003e\r\n+     * @return a \u003ccode\u003eFraction\u003c/code\u003e instance with the resulting values\r\n+     * @throws IllegalArgumentException if the fraction is \u003ccode\u003enull\u003c/code\u003e\r\n+     * @throws ArithmeticException if the resulting numerator or denominator exceeds\r\n+     *  \u003ccode\u003eInteger.MAX_VALUE\u003c/code\u003e\r\n      */\r\n-    public Fraction subtract(Fraction rhs) {\r\n-        return add(rhs.negate());\r\n+    public Fraction add(Fraction fraction) {\r\n+        return addSub(fraction, true /* add */);\r\n+    }\r\n+\r\n+    /**\r\n+     * \u003cp\u003eSubtracts the value of another fraction from the value of this one, \r\n+     * returning the result in reduced form.\u003c/p\u003e\r\n+     *\r\n+     * @param fraction  the fraction to subtract, must not be \u003ccode\u003enull\u003c/code\u003e\r\n+     * @return a \u003ccode\u003eFraction\u003c/code\u003e instance with the resulting values\r\n+     * @throws IllegalArgumentException if the fraction is \u003ccode\u003enull\u003c/code\u003e\r\n+     * @throws ArithmeticException if the resulting numerator or denominator\r\n+     *   cannot be represented in an \u003ccode\u003eint\u003c/code\u003e.\r\n+     */\r\n+    public Fraction subtract(Fraction fraction) {\r\n+        return addSub(fraction, false /* subtract */);\r\n+    }\r\n+\r\n+    /** \r\n+     * Implement add and subtract using algorithm described in Knuth 4.5.1.\r\n+     * \r\n+     * @param fraction the fraction to subtract, must not be \u003ccode\u003enull\u003c/code\u003e\r\n+     * @param isAdd true to add, false to subtract\r\n+     * @return a \u003ccode\u003eFraction\u003c/code\u003e instance with the resulting values\r\n+     * @throws IllegalArgumentException if the fraction is \u003ccode\u003enull\u003c/code\u003e\r\n+     * @throws ArithmeticException if the resulting numerator or denominator\r\n+     *   cannot be represented in an \u003ccode\u003eint\u003c/code\u003e.\r\n+     */\r\n+    private Fraction addSub(Fraction fraction, boolean isAdd) {\r\n+        if (fraction \u003d\u003d null) {\r\n+            throw new IllegalArgumentException(\"The fraction must not be null\");\r\n+        }\r\n+        // zero is identity for addition.\r\n+        if (numerator \u003d\u003d 0) {\r\n+            return isAdd ? fraction : fraction.negate();\r\n+        }\r\n+        if (fraction.numerator \u003d\u003d 0) {\r\n+            return this;\r\n+        }     \r\n+        // if denominators are randomly distributed, d1 will be 1 about 61%\r\n+        // of the time.\r\n+        int d1 \u003d MathUtils.gcd(denominator, fraction.denominator);\r\n+        if (d1\u003d\u003d1) {\r\n+            // result is ( (u*v\u0027 +/- u\u0027v) / u\u0027v\u0027)\r\n+            int uvp \u003d MathUtils.mulAndCheck(numerator, fraction.denominator);\r\n+            int upv \u003d MathUtils.mulAndCheck(fraction.numerator, denominator);\r\n+            return new Fraction\r\n+                (isAdd ? MathUtils.addAndCheck(uvp, upv) : \r\n+                 MathUtils.subAndCheck(uvp, upv),\r\n+                 MathUtils.mulAndCheck(denominator, fraction.denominator));\r\n+        }\r\n+        // the quantity \u0027t\u0027 requires 65 bits of precision; see knuth 4.5.1\r\n+        // exercise 7.  we\u0027re going to use a BigInteger.\r\n+        // t \u003d u(v\u0027/d1) +/- v(u\u0027/d1)\r\n+        BigInteger uvp \u003d BigInteger.valueOf(numerator)\r\n+        .multiply(BigInteger.valueOf(fraction.denominator/d1));\r\n+        BigInteger upv \u003d BigInteger.valueOf(fraction.numerator)\r\n+        .multiply(BigInteger.valueOf(denominator/d1));\r\n+        BigInteger t \u003d isAdd ? uvp.add(upv) : uvp.subtract(upv);\r\n+        // but d2 doesn\u0027t need extra precision because\r\n+        // d2 \u003d gcd(t,d1) \u003d gcd(t mod d1, d1)\r\n+        int tmodd1 \u003d t.mod(BigInteger.valueOf(d1)).intValue();\r\n+        int d2 \u003d (tmodd1\u003d\u003d0)?d1:MathUtils.gcd(tmodd1, d1);\r\n+\r\n+        // result is (t/d2) / (u\u0027/d1)(v\u0027/d2)\r\n+        BigInteger w \u003d t.divide(BigInteger.valueOf(d2));\r\n+        if (w.bitLength() \u003e 31) {\r\n+            throw new ArithmeticException\r\n+            (\"overflow: numerator too large after multiply\");\r\n+        }\r\n+        return new Fraction (w.intValue(), \r\n+                MathUtils.mulAndCheck(denominator/d1, \r\n+                        fraction.denominator/d2));\r\n+    }\r\n+\r\n+    /**\r\n+     * \u003cp\u003eMultiplies the value of this fraction by another, returning the \r\n+     * result in reduced form.\u003c/p\u003e\r\n+     *\r\n+     * @param fraction  the fraction to multiply by, must not be \u003ccode\u003enull\u003c/code\u003e\r\n+     * @return a \u003ccode\u003eFraction\u003c/code\u003e instance with the resulting values\r\n+     * @throws IllegalArgumentException if the fraction is \u003ccode\u003enull\u003c/code\u003e\r\n+     * @throws ArithmeticException if the resulting numerator or denominator exceeds\r\n+     *  \u003ccode\u003eInteger.MAX_VALUE\u003c/code\u003e\r\n+     */\r\n+    public Fraction multiply(Fraction fraction) {\r\n+        if (fraction \u003d\u003d null) {\r\n+            throw new IllegalArgumentException(\"The fraction must not be null\");\r\n+        }\r\n+        if (numerator \u003d\u003d 0 || fraction.numerator \u003d\u003d 0) {\r\n+            return ZERO;\r\n+        }\r\n+        // knuth 4.5.1\r\n+        // make sure we don\u0027t overflow unless the result *must* overflow.\r\n+        int d1 \u003d MathUtils.gcd(numerator, fraction.denominator);\r\n+        int d2 \u003d MathUtils.gcd(fraction.numerator, denominator);\r\n+        return getReducedFraction\r\n+        (MathUtils.mulAndCheck(numerator/d1, fraction.numerator/d2),\r\n+                MathUtils.mulAndCheck(denominator/d2, fraction.denominator/d1));\r\n+    }\r\n+\r\n+    /**\r\n+     * \u003cp\u003eDivide the value of this fraction by another.\u003c/p\u003e\r\n+     *\r\n+     * @param fraction  the fraction to divide by, must not be \u003ccode\u003enull\u003c/code\u003e\r\n+     * @return a \u003ccode\u003eFraction\u003c/code\u003e instance with the resulting values\r\n+     * @throws IllegalArgumentException if the fraction is \u003ccode\u003enull\u003c/code\u003e\r\n+     * @throws ArithmeticException if the fraction to divide by is zero\r\n+     * @throws ArithmeticException if the resulting numerator or denominator exceeds\r\n+     *  \u003ccode\u003eInteger.MAX_VALUE\u003c/code\u003e\r\n+     */\r\n+    public Fraction divide(Fraction fraction) {\r\n+        if (fraction \u003d\u003d null) {\r\n+            throw new IllegalArgumentException(\"The fraction must not be null\");\r\n+        }\r\n+        if (fraction.numerator \u003d\u003d 0) {\r\n+            throw new ArithmeticException(\"The fraction to divide by must not be zero\");\r\n+        }\r\n+        return multiply(fraction.reciprocal());\r\n+    }\r\n+    \r\n+    /**\r\n+     * \u003cp\u003eCreates a \u003ccode\u003eFraction\u003c/code\u003e instance with the 2 parts\r\n+     * of a fraction Y/Z.\u003c/p\u003e\r\n+     *\r\n+     * \u003cp\u003eAny negative signs are resolved to be on the numerator.\u003c/p\u003e\r\n+     *\r\n+     * @param numerator  the numerator, for example the three in \u0027three sevenths\u0027\r\n+     * @param denominator  the denominator, for example the seven in \u0027three sevenths\u0027\r\n+     * @return a new fraction instance, with the numerator and denominator reduced\r\n+     * @throws ArithmeticException if the denominator is \u003ccode\u003ezero\u003c/code\u003e\r\n+     */\r\n+    public static Fraction getReducedFraction(int numerator, int denominator) {\r\n+        if (denominator \u003d\u003d 0) {\r\n+            throw new ArithmeticException(\"The denominator must not be zero\");\r\n+        }\r\n+        if (numerator\u003d\u003d0) {\r\n+            return ZERO; // normalize zero.\r\n+        }\r\n+        // allow 2^k/-2^31 as a valid fraction (where k\u003e0)\r\n+        if (denominator\u003d\u003dInteger.MIN_VALUE \u0026\u0026 (numerator\u00261)\u003d\u003d0) {\r\n+            numerator/\u003d2; denominator/\u003d2;\r\n+        }\r\n+        if (denominator \u003c 0) {\r\n+            if (numerator\u003d\u003dInteger.MIN_VALUE ||\r\n+                    denominator\u003d\u003dInteger.MIN_VALUE) {\r\n+                throw new ArithmeticException(\"overflow: can\u0027t negate\");\r\n+            }\r\n+            numerator \u003d -numerator;\r\n+            denominator \u003d -denominator;\r\n+        }\r\n+        // simplify fraction.\r\n+        int gcd \u003d MathUtils.gcd(numerator, denominator);\r\n+        numerator /\u003d gcd;\r\n+        denominator /\u003d gcd;\r\n+        return new Fraction(numerator, denominator);\r\n     }\r\n     \r\n     /**\r\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "ImportDeclaration [676,704]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [10158,12851]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [14958,16478]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [8891,9407]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [9518,10036]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [12859,13354]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [14059,14574]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [3866,3932]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [4010,4116]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [4126,4384]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [8477,8600]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ReturnStatement [9463,9503]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ReturnStatement [10097,10143]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [13415,13531]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [13541,13626]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [13735,13791]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [13801,13857]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ReturnStatement [13867,14044]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [14633,14749]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [14759,14890]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "Javadoc [4312,4544]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [4595,4649]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [4659,4760]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ReturnStatement [4770,4800]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "Javadoc [9516,9759]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ReturnStatement [9815,9840]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "Javadoc [8677,8909]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ReturnStatement [8965,9061]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "Javadoc [5535,5769]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/math/util/MathUtils.java",
        "src/java/org/apache/commons/math/util/MathUtils.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.math.util.MathUtils:gcd:[int a, int b]:int"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "org.apache.commons.math.util.MathUtils:mulAndCheck:[int x, int y]:int",
            "org.apache.commons.math.util.MathUtils:addAndCheck:[int x, int y]:int",
            "org.apache.commons.math.util.MathUtils:gcd:[int u, int v]:int",
            "org.apache.commons.math.util.MathUtils:subAndCheck:[int x, int y]:int"
          ],
          "num": 4
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "538",
            "539",
            "540",
            "541",
            "543",
            "544",
            "545",
            "546",
            "547",
            "548",
            "549",
            "550",
            "551",
            "552",
            "553",
            "554",
            "555",
            "556",
            "557",
            "558",
            "559",
            "560",
            "561",
            "563"
          ],
          "num": 24
        },
        {
          "qualified_names": [
            "538",
            "539",
            "540",
            "541",
            "542",
            "543",
            "544",
            "545",
            "547",
            "548",
            "549",
            "551",
            "552",
            "553",
            "554",
            "555",
            "556",
            "557",
            "558",
            "559",
            "560",
            "561",
            "562",
            "563",
            "564",
            "565",
            "566",
            "567",
            "568",
            "569",
            "570",
            "571",
            "572",
            "573",
            "574",
            "575",
            "576",
            "577",
            "578",
            "579",
            "580",
            "581",
            "582",
            "583",
            "584",
            "585",
            "586",
            "587",
            "588",
            "589",
            "590",
            "591",
            "592",
            "593",
            "594",
            "595",
            "596",
            "597",
            "598",
            "599",
            "600",
            "601",
            "602",
            "603",
            "604",
            "605",
            "606",
            "607",
            "608",
            "609",
            "610",
            "611",
            "612",
            "613",
            "614",
            "615",
            "616",
            "617",
            "618",
            "619",
            "620",
            "621",
            "622",
            "623",
            "624",
            "625",
            "626",
            "627",
            "628",
            "629",
            "630",
            "631",
            "632",
            "633",
            "634",
            "635",
            "636",
            "637",
            "638",
            "639",
            "640",
            "641",
            "642"
          ],
          "num": 103
        }
      ],
      "diff": "diff --git a/src/java/org/apache/commons/math/util/MathUtils.java b/src/java/org/apache/commons/math/util/MathUtils.java\nindex e62b7b3..20a9ddc 100644\n--- a/src/java/org/apache/commons/math/util/MathUtils.java\n+++ b/src/java/org/apache/commons/math/util/MathUtils.java\n@@ -535,31 +535,110 @@\n     }\n \n     /**\n-     * Returns the greatest common divisor between two integer values.\n-     * @param a the first integer value.\n-     * @param b the second integer value.\n-     * @return the greatest common divisor between a and b.\n+     * \u003cp\u003eGets the greatest common divisor of the absolute value of\n+     * two numbers, using the \"binary gcd\" method which avoids\n+     * division and modulo operations.  See Knuth 4.5.2 algorithm B.\n+     * This algorithm is due to Josef Stein (1961).\u003c/p\u003e\n+     *\n+     * @param u  a non-zero number\n+     * @param v  a non-zero number\n+     * @return the greatest common divisor, never zero\n      */\n-    public static int gcd(int a, int b) {\n-        int ret;\n-        \n-        if (a \u003d\u003d 0) {\n-            ret \u003d Math.abs(b);\n-        } else if (b \u003d\u003d 0) {\n-            ret \u003d Math.abs(a);\n-        } else if (a \u003c 0) {\n-            ret \u003d gcd(-a, b);\n-        } else if (b \u003c 0) {\n-            ret \u003d gcd(a, -b);\n-        } else {\n-            int r \u003d 0;\n-            while(b \u003e 0){\n-                r \u003d a % b;\n-                a \u003d b;\n-                b \u003d r;\n-            }\n-            ret \u003d a;\n+    public static int gcd(int u, int v) {\n+        if (u * v \u003d\u003d 0) {\n+            return (Math.abs(u) + Math.abs(v));\n         }\n-        return ret;\n+        // keep u and v negative, as negative integers range down to\n+        // -2^31, while positive numbers can only be as large as 2^31-1\n+        // (i.e. we can\u0027t necessarily negate a negative number without\n+        // overflow)\n+        /* assert u!\u003d0 \u0026\u0026 v!\u003d0; */\n+        if (u\u003e0) { u\u003d-u; } // make u negative\n+        if (v\u003e0) { v\u003d-v; } // make v negative\n+        // B1. [Find power of 2]\n+        int k\u003d0;\n+        while ((u\u00261)\u003d\u003d0 \u0026\u0026 (v\u00261)\u003d\u003d0 \u0026\u0026 k\u003c31) { // while u and v are both even...\n+            u/\u003d2; v/\u003d2; k++; // cast out twos.\n+        }\n+        if (k\u003d\u003d31) {\n+            throw new ArithmeticException(\"overflow: gcd is 2^31\");\n+        }\n+        // B2. Initialize: u and v have been divided by 2^k and at least\n+        //     one is odd.\n+        int t \u003d ((u\u00261)\u003d\u003d1) ? v : -(u/2)/*B3*/;\n+        // t negative: u was odd, v may be even (t replaces v)\n+        // t positive: u was even, v is odd (t replaces u)\n+        do {\n+            /* assert u\u003c0 \u0026\u0026 v\u003c0; */\n+            // B4/B3: cast out twos from t.\n+            while ((t\u00261)\u003d\u003d0) { // while t is even..\n+                t/\u003d2; // cast out twos\n+            }\n+            // B5 [reset max(u,v)]\n+            if (t\u003e0) {\n+                u \u003d -t;\n+            } else {\n+                v \u003d t;\n+            }\n+            // B6/B3. at this point both u and v should be odd.\n+            t \u003d (v - u)/2;\n+            // |u| larger: t positive (replace u)\n+            // |v| larger: t negative (replace v)\n+        } while (t!\u003d0);\n+        return -u*(1\u003c\u003ck); // gcd is u*2^k\n+    }\n+\n+    /** \n+     * Multiply two integers, checking for overflow.\n+     * \n+     * @param x a factor\n+     * @param y a factor\n+     * @return the product \u003ccode\u003ex*y\u003c/code\u003e\n+     * @throws ArithmeticException if the result can not be represented as\n+     *                             an int\n+     */\n+    public static int mulAndCheck(int x, int y) {\n+        long m \u003d ((long)x)*((long)y);\n+        if (m \u003c Integer.MIN_VALUE ||\n+                m \u003e Integer.MAX_VALUE) {\n+            throw new ArithmeticException(\"overflow: mul\");\n+        }\n+        return (int)m;\n+    }\n+    \n+    /** \n+     * Add two integers, checking for overflow.\n+     * \n+     * @param x an addend\n+     * @param y an addend\n+     * @return the sum \u003ccode\u003ex+y\u003c/code\u003e\n+     * @throws ArithmeticException if the result can not be represented as\n+     * an int\n+     */\n+    public static int addAndCheck(int x, int y) {\n+        long s \u003d (long)x+(long)y;\n+        if (s \u003c Integer.MIN_VALUE ||\n+                s \u003e Integer.MAX_VALUE) {\n+            throw new ArithmeticException(\"overflow: add\");\n+        }\n+        return (int)s;\n+    }\n+    \n+    /** \n+     * Subtract two integers, checking for overflow.\n+     * \n+     * @param x the minuend\n+     * @param y the subtrahend\n+     * @return the difference \u003ccode\u003ex-y\u003c/code\u003e\n+     * @throws ArithmeticException if the result can not be represented as\n+     * an int\n+     */\n+    public static int subAndCheck(int x, int y) {\n+        long s \u003d (long)x-(long)y;\n+        if (s \u003c Integer.MIN_VALUE ||\n+                s \u003e Integer.MAX_VALUE) {\n+            throw new ArithmeticException(\"overflow: add\");\n+        }\n+        return (int)s;\n     }\n }\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [20308,20857]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [20867,21377]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [21387,21916]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [18259,18658]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [18709,18784]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "WhileStatement [19203,19332]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [19341,19431]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [19540,19578]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "DoStatement [19709,20254]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ReturnStatement [20263,20280]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Block [19070,19079]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Block [19116,19125]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "InfixExpression [20248,20252]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "WhileStatement [19807,19899]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [20116,20130]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "PrefixExpression [19074,19076]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "PrefixExpression [19120,19122]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "PrefixExpression [19978,19980]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: t [20023,20024]"
        },
        {
          "type": "delete-tree",
          "from": "Javadoc [18259,18484]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: r [18918,18919]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "Block [18692,18733]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: a [18953,18954]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "Block [18633,18675]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: b [18895,18896]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [18764,18781]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "InfixExpression [18868,18873]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "InfixExpression [18840,18845]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "WhileStatement [18834,18934]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [18535,18543]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "InfixExpression [18565,18571]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "Block [18573,18615]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "IfStatement [18561,18965]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ReturnStatement [18974,18985]",
          "to": ""
        }
      ]
    }
  ],
  "inducing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [
        "org.apache.commons.math.fraction.Fraction:getReducedFraction:[int numerator, int denominator]:Fraction",
        "org.apache.commons.math.fraction.Fraction:doubleValue:[]:double",
        "org.apache.commons.math.fraction.Fraction:add:[Fraction fraction]:Fraction",
        "org.apache.commons.math.util.MathUtils:gcd:[int u, int v]:int",
        "org.apache.commons.math.fraction.Fraction:multiply:[Fraction fraction]:Fraction",
        "org.apache.commons.math.util.MathUtils:mulAndCheck:[int x, int y]:int",
        "org.apache.commons.math.fraction.Fraction:addSub:[Fraction fraction, boolean isAdd]:Fraction",
        "org.apache.commons.math.fraction.Fraction:subtract:[Fraction fraction]:Fraction",
        "org.apache.commons.math.util.MathUtils:subAndCheck:[int x, int y]:int",
        "org.apache.commons.math.util.MathUtils:addAndCheck:[int x, int y]:int",
        "org.apache.commons.math.fraction.Fraction:divide:[Fraction fraction]:Fraction"
      ],
      "num": 11
    },
    "delete_functions": {
      "qualified_names": [
        "org.apache.commons.math.util.MathUtils:gcd:[int a, int b]:int",
        "org.apache.commons.math.fraction.Fraction:multiply:[Fraction rhs]:Fraction",
        "org.apache.commons.math.fraction.Fraction:compareTo:[Object object]:int",
        "org.apache.commons.math.fraction.Fraction:add:[Fraction rhs]:Fraction",
        "org.apache.commons.math.fraction.Fraction:subtract:[Fraction rhs]:Fraction",
        "org.apache.commons.math.fraction.Fraction:divide:[Fraction rhs]:Fraction"
      ],
      "num": 6
    }
  },
  "trigger_tests": [
    {
      "test_class": "org.apache.commons.math.util.MathUtilsTest",
      "test_function": "testGcd",
      "assertion_line": "295",
      "exception": "junit.framework.AssertionFailedError",
      "message": "expected:\u003c98304\u003e but was:\u003c3440640\u003e"
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/math/util/MathUtils.java",
        "src/java/org/apache/commons/math/util/MathUtils.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.math.util.MathUtils:gcd:[int u, int v]:int"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "org.apache.commons.math.util.MathUtils:gcd:[int u, int v]:int"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "412"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "412"
          ],
          "num": 1
        }
      ],
      "diff": "diff --git a/src/java/org/apache/commons/math/util/MathUtils.java b/src/java/org/apache/commons/math/util/MathUtils.java\nindex c5342ae..df71405 100644\n--- a/src/java/org/apache/commons/math/util/MathUtils.java\n+++ b/src/java/org/apache/commons/math/util/MathUtils.java\n@@ -409,7 +409,7 @@\n      * @since 1.1\n      */\n     public static int gcd(int u, int v) {\n-        if (u * v \u003d\u003d 0) {\n+        if ((u \u003d\u003d 0) || (v \u003d\u003d 0)) {\n             return (Math.abs(u) + Math.abs(v));\n         }\n         // keep u and v negative, as negative integers range down to\n",
      "operations": [
        {
          "type": "insert-node",
          "from": "",
          "to": "InfixExpression [13873,13893]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "ParenthesizedExpression [13873,13881]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "INFIX_EXPRESSION_OPERATOR: || [13882,13884]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "ParenthesizedExpression [13885,13893]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "InfixExpression [13874,13880]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "INFIX_EXPRESSION_OPERATOR: \u003d\u003d [13876,13878]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "NumberLiteral: 0 [13879,13880]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "INFIX_EXPRESSION_OPERATOR: * [13875,13876]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "InfixExpression [13873,13878]",
          "to": ""
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  },
  "patch_changed_mths": {
    "qualified_names": [
      "org.apache.commons.math.util.MathUtils:gcd(II)I"
    ],
    "num": 1
  }
}