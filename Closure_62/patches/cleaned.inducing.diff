Only in data/changesInfo//Closure_62/properties/modified_classes/inducing/: src
diff -u -r data/changesInfo//Closure_62/properties/modified_classes/inducing/test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java data/changesInfo//Closure_62/cleaned/inducing/test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java
--- data/changesInfo//Closure_62/properties/modified_classes/inducing/test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java	2023-12-27 22:39:14.681812871 -0800
+++ data/changesInfo//Closure_62/cleaned/inducing/test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java	2023-06-20 05:26:27.430525505 -0700
@@ -84,6 +84,24 @@
         "\t\t    ^\n", formatter.formatError(error));
   }
 
+  public void testFormatErrorSpaceEndOfLine1() throws Exception {
+    JSError error = JSError.make("javascript/complex.js",
+            1, 10, FOO_TYPE);
+    LightweightMessageFormatter formatter = formatter("assert (1;");
+    assertEquals("javascript/complex.js:1: ERROR - error description here\n" +
+            "assert (1;\n" +
+            "          ^\n", formatter.formatError(error));
+  }
+
+  public void testFormatErrorSpaceEndOfLine2() throws Exception {
+    JSError error = JSError.make("javascript/complex.js",
+            6, 7, FOO_TYPE);
+    LightweightMessageFormatter formatter = formatter("if (foo");
+    assertEquals("javascript/complex.js:6: ERROR - error description here\n" +
+            "if (foo\n" +
+            "       ^\n", formatter.formatError(error));
+  }
+
   private LightweightMessageFormatter formatter(String string) {
     return new LightweightMessageFormatter(source(string));
   }
