diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java
index 615cec4..bfc4ba8 100644
--- a/src/com/google/javascript/jscomp/NodeUtil.java
+++ b/src/com/google/javascript/jscomp/NodeUtil.java
@@ -1075,12 +1075,47 @@
   }
 
   /**
+   * Apply the supplied predicate against the potential
+   * all possible result of the expression.
+   */
+  static boolean valueCheck(Node n, Predicate<Node> p) {
+    switch (n.getType()) {
+      case Token.ASSIGN:
+      case Token.COMMA:
+        return valueCheck(n.getLastChild(), p);
+      case Token.AND:
+      case Token.OR:
+        return valueCheck(n.getFirstChild(), p)
+            && valueCheck(n.getLastChild(), p);
+      case Token.HOOK:
+        return valueCheck(n.getFirstChild().getNext(), p)
+            && valueCheck(n.getLastChild(), p);
+      default:
+        return p.apply(n);
+    }
+  }
+
+  static class NumbericResultPredicate implements Predicate<Node> {
+    public boolean apply(Node n) {
+      return isNumericResultHelper(n);
+    }
+  }
+
+  static final NumbericResultPredicate NUMBERIC_RESULT_PREDICATE =
+      new NumbericResultPredicate();
+
+  /**
    * Returns true if the result of node evaluation is always a number
    */
   static boolean isNumericResult(Node n) {
+    return valueCheck(n, NUMBERIC_RESULT_PREDICATE);
+  }
+
+  static boolean isNumericResultHelper(Node n) {
     switch (n.getType()) {
-      // NOTE: ADD is deliberately excluded as it may produce
-      // a string.
+      case Token.ADD:
+        return !mayBeString(n.getFirstChild())
+            && !mayBeString(n.getLastChild());
       case Token.BITNOT:
       case Token.BITOR:
       case Token.BITXOR:
@@ -1112,10 +1147,23 @@
     }
   }
 
+  static class BooleanResultPredicate implements Predicate<Node> {
+    public boolean apply(Node n) {
+      return isBooleanResultHelper(n);
+    }
+  }
+
+  static final BooleanResultPredicate BOOLEAN_RESULT_PREDICATE =
+      new BooleanResultPredicate();
+
   /**
    * @return Whether the result of node evaluation is always a boolean
    */
   static boolean isBooleanResult(Node n) {
+    return valueCheck(n, BOOLEAN_RESULT_PREDICATE);
+  }
+
+  static boolean isBooleanResultHelper(Node n) {
     // TODO(johnlenz): Add a recursive option to recurse into
     // AND, OR, HOOK, COMMA and ASSIGN, like "getExpressionBooleanValue".
     switch (n.getType()) {
@@ -1156,10 +1204,31 @@
     return n.getType() == Token.NULL;
   }
 
+  static class MayBeStringResultPredicate implements Predicate<Node> {
+    public boolean apply(Node n) {
+      return mayBeStringHelper(n);
+    }
+  }
+
+  static final MayBeStringResultPredicate MAY_BE_STRING_PREDICATE =
+      new MayBeStringResultPredicate();
+
   /**
    * @returns Whether the results is possibly a string.
    */
   static boolean mayBeString(Node n) {
+    return mayBeString(n, true);
+  }
+
+  static boolean mayBeString(Node n, boolean recurse) {
+    if (recurse) {
+      return valueCheck(n, MAY_BE_STRING_PREDICATE);
+    } else {
+      return mayBeStringHelper(n);
+    }
+  }
+
+  static boolean mayBeStringHelper(Node n) {
     return !isNumericResult(n) && !isBooleanResult(n)
         && !isUndefined(n) && !isNull(n);
   }
diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
index de6b020..8a20be4 100644
--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
@@ -550,11 +550,10 @@
    *  - The right child is a constant value
    *  - The left child's right child is a STRING constant.
    */
-  private Node tryFoldLeftChildAdd(Node n, Node left, Node right) {
+  private Node tryFoldChildAddString(Node n, Node left, Node right) {
 
     if (NodeUtil.isLiteralValue(right, false) &&
-        left.getType() == Token.ADD &&
-        left.getChildCount() == 2) {
+        left.getType() == Token.ADD) {
 
       Node ll = left.getFirstChild();
       Node lr = ll.getNext();
@@ -562,18 +561,40 @@
       // Left's right child MUST be a string. We would not want to fold
       // foo() + 2 + 'a' because we don't know what foo() will return, and
       // therefore we don't know if left is a string concat, or a numeric add.
-      if (lr.getType() != Token.STRING) {
-        return n;
+      if (lr.getType() == Token.STRING) {
+        String leftString = NodeUtil.getStringValue(lr);
+        String rightString = NodeUtil.getStringValue(right);
+        if (leftString != null && rightString != null) {
+          left.removeChild(ll);
+          String result = leftString + rightString;
+          n.replaceChild(left, ll);
+          n.replaceChild(right, Node.newString(result));
+          reportCodeChange();
+          return n;
+        }
       }
+    }
 
-      String leftString = NodeUtil.getStringValue(lr);
-      String rightString = NodeUtil.getStringValue(right);
-      if (leftString != null && rightString != null) {
-        left.removeChild(ll);
-        String result = leftString + rightString;
-        n.replaceChild(left, ll);
-        n.replaceChild(right, Node.newString(result));
-        reportCodeChange();
+    if (NodeUtil.isLiteralValue(left, false) &&
+        right.getType() == Token.ADD) {
+
+      Node rl = right.getFirstChild();
+      Node rr = right.getLastChild();
+
+      // Left's right child MUST be a string. We would not want to fold
+      // foo() + 2 + 'a' because we don't know what foo() will return, and
+      // therefore we don't know if left is a string concat, or a numeric add.
+      if (rl.getType() == Token.STRING) {
+        String leftString = NodeUtil.getStringValue(left);
+        String rightString = NodeUtil.getStringValue(rl);
+        if (leftString != null && rightString != null) {
+          right.removeChild(rr);
+          String result = leftString + rightString;
+          n.replaceChild(right, rr);
+          n.replaceChild(left, Node.newString(result));
+          reportCodeChange();
+          return n;
+        }
       }
     }
 
@@ -583,10 +604,9 @@
   /**
    * Try to fold an ADD node with constant operands
    */
-  private Node tryFoldAddConstant(Node n, Node left, Node right) {
+  private Node tryFoldAddConstantString(Node n, Node left, Node right) {
     if (left.getType() == Token.STRING ||
         right.getType() == Token.STRING) {
-
       // Add strings.
       String leftString = NodeUtil.getStringValue(left);
       String rightString = NodeUtil.getStringValue(right);
@@ -596,11 +616,10 @@
         reportCodeChange();
         return newStringNode;
       }
-    } else {
-      // Try arithmetic add
-      return tryFoldArithmeticOp(n, left, right);
     }
 
+
+
     return n;
   }
 
@@ -625,8 +644,8 @@
     // Unlike other operations, ADD operands are not always converted
     // to Number.
     if (opType == Token.ADD
-        && (left.getType() != Token.NUMBER
-            || right.getType() != Token.NUMBER)) {
+        && (NodeUtil.mayBeString(left, false)
+            || NodeUtil.mayBeString(right, false))) {
       return null;
     }
 
@@ -716,9 +735,12 @@
    */
   private Node tryFoldLeftChildOp(Node n, Node left, Node right) {
     int opType = n.getType();
-    // TODO(johnlenz): Add support for ADD in numberic contexts.
     Preconditions.checkState(
-      NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType));
+        (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))
+        || n.getType() == Token.ADD);
+
+    Preconditions.checkState(
+        n.getType() != Token.ADD || !NodeUtil.mayBeString(n));
 
     // Use getNumberValue to handle constants like "NaN" and "Infinity"
     // other values are converted to numbers elsewhere.
@@ -754,13 +776,22 @@
   private Node tryFoldAdd(Node node, Node left, Node right) {
     Preconditions.checkArgument(node.getType() == Token.ADD);
 
-    if (NodeUtil.isLiteralValue(left, false) &&
-        NodeUtil.isLiteralValue(right, false)) {
-      // 6 + 7
-      return tryFoldAddConstant(node, left, right);
+    if (NodeUtil.mayBeString(node, true)) {
+      if (NodeUtil.isLiteralValue(left, false) &&
+          NodeUtil.isLiteralValue(right, false)) {
+        // '6' + 7
+        return tryFoldAddConstantString(node, left, right);
+      } else {
+        // a + 7 or 6 + a
+        return tryFoldChildAddString(node, left, right);
+      }
     } else {
-      // a + 7 or 6 + a
-      return tryFoldLeftChildAdd(node, left, right);
+      // Try arithmetic add
+      Node result = tryFoldArithmeticOp(node, left, right);
+      if (result != node) {
+        return result;
+      }
+      return tryFoldLeftChildOp(node, left, right);
     }
   }
 
diff --git a/test/com/google/javascript/jscomp/NodeUtilTest.java b/test/com/google/javascript/jscomp/NodeUtilTest.java
index fff6c38..b5b7123 100644
--- a/test/com/google/javascript/jscomp/NodeUtilTest.java
+++ b/test/com/google/javascript/jscomp/NodeUtilTest.java
@@ -1440,12 +1440,12 @@
     assertFalse(NodeUtil.isNumericResult(getNode("([1,2])")));
     assertFalse(NodeUtil.isNumericResult(getNode("({a:1})")));
 
-    // These are number but aren't handled yet, "false" here means "unknown".
-    assertFalse(NodeUtil.isNumericResult(getNode("1 && 2")));
-    assertFalse(NodeUtil.isNumericResult(getNode("1 || 2")));
-    assertFalse(NodeUtil.isNumericResult(getNode("a ? 2 : 3")));
-    assertFalse(NodeUtil.isNumericResult(getNode("a,1")));
-    assertFalse(NodeUtil.isNumericResult(getNode("a=1")));
+    // Recurse into the expression when necessary.
+    assertTrue(NodeUtil.isNumericResult(getNode("1 && 2")));
+    assertTrue(NodeUtil.isNumericResult(getNode("1 || 2")));
+    assertTrue(NodeUtil.isNumericResult(getNode("a ? 2 : 3")));
+    assertTrue(NodeUtil.isNumericResult(getNode("a,1")));
+    assertTrue(NodeUtil.isNumericResult(getNode("a=1")));
   }
 
   public void testIsBooleanResult() {
@@ -1491,10 +1491,11 @@
     assertFalse(NodeUtil.isBooleanResult(getNode("({a:true})")));
 
     // These are boolean but aren't handled yet, "false" here means "unknown".
-    assertFalse(NodeUtil.isBooleanResult(getNode("true && false")));
-    assertFalse(NodeUtil.isBooleanResult(getNode("true || false")));
-    assertFalse(NodeUtil.isBooleanResult(getNode("a ? true : false")));
-    assertFalse(NodeUtil.isBooleanResult(getNode("a,true")));
+    assertTrue(NodeUtil.isBooleanResult(getNode("true && false")));
+    assertTrue(NodeUtil.isBooleanResult(getNode("true || false")));
+    assertTrue(NodeUtil.isBooleanResult(getNode("a ? true : false")));
+    assertTrue(NodeUtil.isBooleanResult(getNode("a,true")));
+    assertTrue(NodeUtil.isBooleanResult(getNode("a=true")));
     assertFalse(NodeUtil.isBooleanResult(getNode("a=1")));
   }
 
@@ -1538,15 +1539,15 @@
     assertTrue(NodeUtil.mayBeString(getNode("new a()")));
 
     // These can't be strings but they aren't handled yet.
-    assertTrue(NodeUtil.mayBeString(getNode("1 && 2")));
-    assertTrue(NodeUtil.mayBeString(getNode("1 || 2")));
-    assertTrue(NodeUtil.mayBeString(getNode("1 ? 2 : 3")));
-    assertTrue(NodeUtil.mayBeString(getNode("1,2")));
-    assertTrue(NodeUtil.mayBeString(getNode("a=1")));
-    assertTrue(NodeUtil.mayBeString(getNode("1+1")));
-    assertTrue(NodeUtil.mayBeString(getNode("true+true")));
-    assertTrue(NodeUtil.mayBeString(getNode("null+null")));
-    assertTrue(NodeUtil.mayBeString(getNode("NaN+NaN")));
+    assertFalse(NodeUtil.mayBeString(getNode("1 && 2")));
+    assertFalse(NodeUtil.mayBeString(getNode("1 || 2")));
+    assertFalse(NodeUtil.mayBeString(getNode("1 ? 2 : 3")));
+    assertFalse(NodeUtil.mayBeString(getNode("1,2")));
+    assertFalse(NodeUtil.mayBeString(getNode("a=1")));
+    assertFalse(NodeUtil.mayBeString(getNode("1+1")));
+    assertFalse(NodeUtil.mayBeString(getNode("true+true")));
+    assertFalse(NodeUtil.mayBeString(getNode("null+null")));
+    assertFalse(NodeUtil.mayBeString(getNode("NaN+NaN")));
 
     // These are not strings but they aren't primitives either
     assertTrue(NodeUtil.mayBeString(getNode("([1,2])")));
diff --git a/test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java b/test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java
index d596d8a..8fb4739 100644
--- a/test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java
+++ b/test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java
@@ -702,7 +702,7 @@
 
   public void testFoldLeft() {
     foldSame("(+x - 1) + 2"); // not yet
-    foldSame("(+x + 1) + 2"); // not yet
+    fold("(+x + 1) + 2", "+x + 3");
   }
 
   public void testFoldArrayLength() {
@@ -849,6 +849,8 @@
   public void testFoldLeftChildConcat() {
     foldSame("x +5 + \"1\"");
     fold("x+\"5\" + \"1\"", "x + \"51\"");
+    // fold("\"a\"+(c+\"b\")","\"a\"+c+\"b\"");
+    fold("\"a\"+(\"b\"+c)","\"ab\"+c");
   }
 
   public void testFoldLeftChildOp() {
