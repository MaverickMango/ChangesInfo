{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "/home/liumengjiao/Desktop/CI/Benchmark/data/changesInfo/",
  "properties": {
    "trigger.tests": "org.apache.commons.math.geometry.Vector3DTest::testCrossProductCancellation",
    "test.dir": "src/test/java",
    "clz.modified": "org.apache.commons.math.geometry.Vector3D",
    "src.dir": "src/main/java"
  },
  "timeoutSecond": 100,
  "proj": "Math",
  "id": "55",
  "workingDir": "../bugs/Math_55_buggy",
  "buggyCommit": "3114d4ed4654f54fc1ee8e3c3da5b6cd1cd2cc87",
  "inducingCommit": "89ac173c2b467e6289df0e62f2a43ed1730fbad5",
  "originalCommit": "bcb4a56fb416021ca819c99ff550917dd26e0731",
  "bug_name": "Math_55",
  "derive": "defects4j",
  "original_fixing_commit": "0c38504ffa3ef520ce78e260538d7b8742c895e8",
  "buildFiles_changed": false,
  "regression": false,
  "inducing_changes": [],
  "inducing_type": {
    "add_classes": {
      "qualified_names": [
        "src/mantissa/src/org/spaceroots/mantissa/MantissaException.java",
        "src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java",
        "src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java",
        "src/mantissa/src/org/spaceroots/mantissa/algebra/Chebyshev.java",
        "src/mantissa/src/org/spaceroots/mantissa/algebra/Hermite.java",
        "src/mantissa/src/org/spaceroots/mantissa/algebra/Laguerre.java",
        "src/mantissa/src/org/spaceroots/mantissa/algebra/Legendre.java",
        "src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java",
        "src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java",
        "src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java",
        "src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java",
        "src/mantissa/src/org/spaceroots/mantissa/estimation/EstimatedParameter.java",
        "src/mantissa/src/org/spaceroots/mantissa/estimation/EstimationException.java",
        "src/mantissa/src/org/spaceroots/mantissa/estimation/EstimationProblem.java",
        "src/mantissa/src/org/spaceroots/mantissa/estimation/Estimator.java",
        "src/mantissa/src/org/spaceroots/mantissa/estimation/GaussNewtonEstimator.java",
        "src/mantissa/src/org/spaceroots/mantissa/estimation/LeastSquaresEstimator.java",
        "src/mantissa/src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimator.java",
        "src/mantissa/src/org/spaceroots/mantissa/estimation/WeightedMeasurement.java",
        "src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java",
        "src/mantissa/src/org/spaceroots/mantissa/fitting/F2FP2Iterator.java",
        "src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java",
        "src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java",
        "src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java",
        "src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialCoefficient.java",
        "src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java",
        "src/mantissa/src/org/spaceroots/mantissa/functions/ExhaustedSampleException.java",
        "src/mantissa/src/org/spaceroots/mantissa/functions/FunctionException.java",
        "src/mantissa/src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIterator.java",
        "src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunction.java",
        "src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java",
        "src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunction.java",
        "src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunctionIterator.java",
        "src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPair.java",
        "src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIterator.java",
        "src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunction.java",
        "src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java",
        "src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunction.java",
        "src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunctionIterator.java",
        "src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java",
        "src/mantissa/src/org/spaceroots/mantissa/geometry/CardanEulerSingularityException.java",
        "src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java",
        "src/mantissa/src/org/spaceroots/mantissa/geometry/NotARotationMatrixException.java",
        "src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java",
        "src/mantissa/src/org/spaceroots/mantissa/geometry/RotationOrder.java",
        "src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java",
        "src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java",
        "src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java",
        "src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java",
        "src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java",
        "src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java",
        "src/mantissa/src/org/spaceroots/mantissa/linalg/MatrixFactory.java",
        "src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java",
        "src/mantissa/src/org/spaceroots/mantissa/linalg/SingularMatrixException.java",
        "src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java",
        "src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java",
        "src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java",
        "src/mantissa/src/org/spaceroots/mantissa/ode/AbstractStepInterpolator.java",
        "src/mantissa/src/org/spaceroots/mantissa/ode/AdaptiveStepsizeIntegrator.java",
        "src/mantissa/src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegrator.java",
        "src/mantissa/src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaStepInterpolator.java",
        "src/mantissa/src/org/spaceroots/mantissa/ode/ContinuousOutputModel.java",
        "src/mantissa/src/org/spaceroots/mantissa/ode/DerivativeException.java",
        "src/mantissa/src/org/spaceroots/mantissa/ode/DormandPrince54Integrator.java",
        "src/mantissa/src/org/spaceroots/mantissa/ode/DormandPrince54StepInterpolator.java",
        "src/mantissa/src/org/spaceroots/mantissa/ode/DormandPrince853Integrator.java",
        "src/mantissa/src/org/spaceroots/mantissa/ode/DormandPrince853StepInterpolator.java",
        "src/mantissa/src/org/spaceroots/mantissa/ode/DummyStepHandler.java",
        "src/mantissa/src/org/spaceroots/mantissa/ode/DummyStepInterpolator.java",
        "src/mantissa/src/org/spaceroots/mantissa/ode/EulerIntegrator.java",
        "src/mantissa/src/org/spaceroots/mantissa/ode/EulerStepInterpolator.java",
        "src/mantissa/src/org/spaceroots/mantissa/ode/FirstOrderConverter.java",
        "src/mantissa/src/org/spaceroots/mantissa/ode/FirstOrderDifferentialEquations.java",
        "src/mantissa/src/org/spaceroots/mantissa/ode/FirstOrderIntegrator.java",
        "src/mantissa/src/org/spaceroots/mantissa/ode/FixedStepHandler.java",
        "src/mantissa/src/org/spaceroots/mantissa/ode/GillIntegrator.java",
        "src/mantissa/src/org/spaceroots/mantissa/ode/GillStepInterpolator.java",
        "src/mantissa/src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegrator.java",
        "src/mantissa/src/org/spaceroots/mantissa/ode/GraggBulirschStoerStepInterpolator.java",
        "src/mantissa/src/org/spaceroots/mantissa/ode/HighamHall54Integrator.java",
        "src/mantissa/src/org/spaceroots/mantissa/ode/HighamHall54StepInterpolator.java",
        "src/mantissa/src/org/spaceroots/mantissa/ode/IntegratorException.java",
        "src/mantissa/src/org/spaceroots/mantissa/ode/MidpointIntegrator.java",
        "src/mantissa/src/org/spaceroots/mantissa/ode/MidpointStepInterpolator.java",
        "src/mantissa/src/org/spaceroots/mantissa/ode/RungeKuttaFehlbergIntegrator.java",
        "src/mantissa/src/org/spaceroots/mantissa/ode/RungeKuttaIntegrator.java",
        "src/mantissa/src/org/spaceroots/mantissa/ode/RungeKuttaStepInterpolator.java",
        "src/mantissa/src/org/spaceroots/mantissa/ode/SecondOrderDifferentialEquations.java",
        "src/mantissa/src/org/spaceroots/mantissa/ode/SecondOrderIntegrator.java",
        "src/mantissa/src/org/spaceroots/mantissa/ode/StepHandler.java",
        "src/mantissa/src/org/spaceroots/mantissa/ode/StepInterpolator.java",
        "src/mantissa/src/org/spaceroots/mantissa/ode/StepNormalizer.java",
        "src/mantissa/src/org/spaceroots/mantissa/ode/SwitchState.java",
        "src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java",
        "src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunctionsHandler.java",
        "src/mantissa/src/org/spaceroots/mantissa/ode/ThreeEighthesIntegrator.java",
        "src/mantissa/src/org/spaceroots/mantissa/ode/ThreeEighthesStepInterpolator.java",
        "src/mantissa/src/org/spaceroots/mantissa/optimization/ConvergenceChecker.java",
        "src/mantissa/src/org/spaceroots/mantissa/optimization/CostException.java",
        "src/mantissa/src/org/spaceroots/mantissa/optimization/CostFunction.java",
        "src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java",
        "src/mantissa/src/org/spaceroots/mantissa/optimization/MultiDirectional.java",
        "src/mantissa/src/org/spaceroots/mantissa/optimization/NelderMead.java",
        "src/mantissa/src/org/spaceroots/mantissa/optimization/NoConvergenceException.java",
        "src/mantissa/src/org/spaceroots/mantissa/optimization/PointCostPair.java",
        "src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/ComputableFunctionIntegrator.java",
        "src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegrator.java",
        "src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java",
        "src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java",
        "src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegrator.java",
        "src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegratorSampler.java",
        "src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/SampledFunctionIntegrator.java",
        "src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegrator.java",
        "src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegratorSampler.java",
        "src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/ComputableFunctionIntegrator.java",
        "src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegrator.java",
        "src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java",
        "src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java",
        "src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegrator.java",
        "src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java",
        "src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/SampledFunctionIntegrator.java",
        "src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegrator.java",
        "src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java",
        "src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java",
        "src/mantissa/src/org/spaceroots/mantissa/random/GaussianRandomGenerator.java",
        "src/mantissa/src/org/spaceroots/mantissa/random/NormalizedRandomGenerator.java",
        "src/mantissa/src/org/spaceroots/mantissa/random/NotPositiveDefiniteMatrixException.java",
        "src/mantissa/src/org/spaceroots/mantissa/random/RandomVectorGenerator.java",
        "src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java",
        "src/mantissa/src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGenerator.java",
        "src/mantissa/src/org/spaceroots/mantissa/random/UniformRandomGenerator.java",
        "src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java",
        "src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java",
        "src/mantissa/src/org/spaceroots/mantissa/roots/ConvergenceChecker.java",
        "src/mantissa/src/org/spaceroots/mantissa/roots/RootsFinder.java",
        "src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java",
        "src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapperEntry.java",
        "src/mantissa/src/org/spaceroots/mantissa/utilities/ArraySliceMappable.java",
        "src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java",
        "src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java",
        "src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java",
        "src/mantissa/src/org/spaceroots/mantissa/utilities/MappableScalar.java"
      ],
      "num": 142
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  },
  "trigger_tests": [
    {
      "test_class": "org.apache.commons.math.geometry.Vector3DTest",
      "test_function": "testCrossProductCancellation",
      "assertion_line": "159",
      "exception": "junit.framework.AssertionFailedError",
      "message": "expected:\u003c1.0\u003e but was:\u003c0.0\u003e"
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/math/geometry/Vector3D.java",
        "src/main/java/org/apache/commons/math/geometry/Vector3D.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.math.geometry.Vector3D:crossProduct:[Vector3D v1, Vector3D v2]:Vector3D"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "org.apache.commons.math.geometry.Vector3D:crossProduct:[final Vector3D v1, final Vector3D v2]:Vector3D"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "457",
            "458",
            "459",
            "460"
          ],
          "num": 4
        },
        {
          "qualified_names": [
            "457",
            "458",
            "459",
            "460",
            "461",
            "462",
            "463",
            "464",
            "465",
            "466",
            "467",
            "468",
            "469",
            "470",
            "471",
            "472",
            "473",
            "474",
            "475",
            "476",
            "477",
            "478",
            "479",
            "480",
            "481",
            "482",
            "483",
            "484",
            "485",
            "486",
            "487",
            "488",
            "489",
            "490",
            "491"
          ],
          "num": 35
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/math/geometry/Vector3D.java b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\nindex 0a4adb8..2d915e5 100644\n--- a/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n+++ b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n@@ -454,10 +454,41 @@\n    * @param v2 second vector\n    * @return the cross product v1 ^ v2 as a new Vector\n    */\n-  public static Vector3D crossProduct(Vector3D v1, Vector3D v2) {\n-    return new Vector3D(v1.y * v2.z - v1.z * v2.y,\n-                        v1.z * v2.x - v1.x * v2.z,\n-                        v1.x * v2.y - v1.y * v2.x);\n+  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n+\n+      final double n1 \u003d v1.getNormSq();\n+      final double n2 \u003d v2.getNormSq();\n+      if ((n1 * n2) \u003c MathUtils.SAFE_MIN) {\n+          return ZERO;\n+      }\n+\n+      // rescale both vectors without losing precision,\n+      // to ensure their norm are the same order of magnitude\n+      final int deltaExp \u003d (FastMath.getExponent(n1) - FastMath.getExponent(n2)) / 4;\n+      final double x1    \u003d FastMath.scalb(v1.x, -deltaExp);\n+      final double y1    \u003d FastMath.scalb(v1.y, -deltaExp);\n+      final double z1    \u003d FastMath.scalb(v1.z, -deltaExp);\n+      final double x2    \u003d FastMath.scalb(v2.x,  deltaExp);\n+      final double y2    \u003d FastMath.scalb(v2.y,  deltaExp);\n+      final double z2    \u003d FastMath.scalb(v2.z,  deltaExp);\n+\n+      // we reduce cancellation errors by preconditioning,\n+      // we replace v1 by v3 \u003d v1 - rho v2 with rho chosen in order to compute\n+      // v3 without loss of precision. See Kahan lecture\n+      // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n+      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n+\n+      // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n+      final double ratio \u003d (x1 * x2 + y1 * y2 + z1 * z2) / FastMath.scalb(n2, 2 * deltaExp);\n+      final double rho   \u003d FastMath.rint(256 * ratio) / 256;\n+\n+      final double x3 \u003d x1 - rho * x2;\n+      final double y3 \u003d y1 - rho * y2;\n+      final double z3 \u003d z1 - rho * z2;\n+\n+      // compute cross product from v3 and v2 instead of v1 and v2\n+      return new Vector3D(y3 * z2 - z3 * y2, z3 * x2 - x3 * z2, x3 * y2 - y3 * x2);\n+\n   }\n \n   /** Compute the distance between two vectors according to the L\u003csub\u003e1\u003c/sub\u003e norm.\n",
      "operations": [
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: final [14961,14966]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: final [14980,14985]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [15008,15041]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [15048,15081]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [15088,15156]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [15282,15361]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [15368,15421]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [15428,15481]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [15488,15541]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [15548,15601]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [15608,15661]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [15668,15721]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [16157,16243]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [16250,16304]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [16312,16344]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [16351,16383]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [16390,16422]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ReturnStatement [16497,16574]"
        },
        {
          "type": "delete-tree",
          "from": "ReturnStatement [14993,15142]",
          "to": ""
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [
        "org.apache.commons.math.geometry.Vector3D:crossProduct:[final Vector3D v1, final Vector3D v2]:Vector3D"
      ],
      "num": 1
    },
    "delete_functions": {
      "qualified_names": [
        "org.apache.commons.math.geometry.Vector3D:crossProduct:[Vector3D v1, Vector3D v2]:Vector3D"
      ],
      "num": 1
    }
  },
  "patch_changed_mths": {
    "qualified_names": [],
    "num": 0
  }
}