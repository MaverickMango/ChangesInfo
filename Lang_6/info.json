{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "data/changesInfo/",
  "timeoutSecond": 300,
  "proj": "Lang",
  "id": "6",
  "workingDir": "../bugs/Lang_6_buggy",
  "inducingCommit": "b4255e6d071dc8d48bfc51037cecb29097b9a49d",
  "originalCommit": "a7e90b2ffa23ab60c7022e2f94a12651b4fb8ec0",
  "bug_name": "Lang_6",
  "derive": "defects4j",
  "original_fixing_commit": "cff0f1ae37bb2b7ab2dcdb10dec1f3cad7532e1c",
  "buildFiles_changed": false,
  "inducing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java",
        "src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "translate"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "translate"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "82",
            "83",
            "84",
            "85",
            "86",
            "87",
            "89",
            "90",
            "91",
            "92",
            "93",
            "94",
            "95",
            "96",
            "97",
            "98",
            "99",
            "100",
            "101",
            "102"
          ],
          "num": 20
        },
        {
          "qualified_names": [
            "82",
            "83",
            "84",
            "85",
            "87",
            "88",
            "89",
            "90",
            "91",
            "92",
            "93",
            "94",
            "95"
          ],
          "num": 13
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\nindex 0cb2ca8..4d010ea 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n@@ -79,27 +79,20 @@\n         if (input \u003d\u003d null) {\n             return;\n         }\n-        int sz \u003d Character.codePointCount(input, 0, input.length());\n-        for (int i \u003d 0; i \u003c sz; i++) {\n-\n-            // consumed is the number of codepoints consumed\n-            int consumed \u003d translate(input, i, out);\n-\n+        int pos \u003d 0;\n+        int len \u003d input.length();\n+        while (pos \u003c len) {\n+            int consumed \u003d translate(input, pos, out);\n             if (consumed \u003d\u003d 0) {\n-                out.write(Character.toChars(Character.codePointAt(input, i)));\n-            } else {\n-                // contract with translators is that they have to understand codepoints \n-                // and they just took care of a surrogate pair\n-                for (int j \u003d 0; j \u003c consumed; j++) {\n-                    if (i \u003c sz - 2) {\n-                        i +\u003d Character.charCount(Character.codePointAt(input, i));\n-                    } else {\n-                        // If the String ends with a high surrogate, just add the 1 and don\u0027t worry about such things\n-                        i++;\n-                    }\n-                }\n-                // for loop will increment 1 anyway, so remove 1 to account for that\n-                i--;\n+                char[] c \u003d Character.toChars(Character.codePointAt(input, pos));\n+                out.write(c);\n+                pos+\u003d c.length;\n+                continue;\n+            }\n+//          // contract with translators is that they have to understand codepoints \n+//          // and they just took care of a surrogate pair\n+            for (int pt \u003d 0; pt \u003c consumed; pt++) {\n+                pos +\u003d Character.charCount(Character.codePointAt(input, pos));\n             }\n         }\n     }\n",
      "operations": [
        {
          "type": "insert-node",
          "from": "",
          "to": "VariableDeclarationStatement [3246,3258]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "VariableDeclarationStatement [3267,3292]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "WhileStatement [3301,3890]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "PrimitiveType: int [3267,3270]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "VariableDeclarationFragment [3271,3291]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "InfixExpression [3308,3317]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: len [3271,3274]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "VariableDeclarationStatement [3425,3489]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [3536,3551]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "ContinueStatement [3568,3577]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ArrayType [3425,3431]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "VariableDeclarationFragment [3432,3488]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: c [3432,3433]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: c [3516,3517]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [4238,4242]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Block [3593,4256]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "InfixExpression [3824,3834]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Block [3836,3942]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "Block [3948,4118]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "IfStatement [3820,4118]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "PrimitiveType: int [3246,3249]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: sz [3250,3252]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "METHOD_INVOCATION_RECEIVER [3255,3264]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: codePointCount [3265,3279]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: input [3280,3285]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "NumberLiteral: 0 [3287,3288]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "METHOD_INVOCATION_ARGUMENTS [3280,3304]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "MethodInvocation [3255,3305]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "VariableDeclarationFragment [3250,3305]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "VariableDeclarationStatement [3246,3306]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "VariableDeclarationExpression [3320,3329]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "InfixExpression [3331,3337]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "PostfixExpression [3339,3342]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "ForStatement [3315,4266]",
          "to": ""
        }
      ]
    }
  ],
  "inducing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  },
  "trigger_tests": [],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java",
        "src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "translate"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "translate"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "95"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "95"
          ],
          "num": 1
        }
      ],
      "diff": "diff -u -r data/changesInfo//Lang_6/properties/modified_classes/inducing/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java data/changesInfo//Lang_6/cleaned/fixing/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n--- data/changesInfo//Lang_6/properties/modified_classes/inducing/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\t2023-08-25 13:39:04.435737872 +0800\n+++ data/changesInfo//Lang_6/cleaned/fixing/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\t2023-06-20 21:44:54.871258097 +0800\n@@ -92,7 +92,7 @@\n //          // contract with translators is that they have to understand codepoints \n //          // and they just took care of a surrogate pair\n             for (int pt \u003d 0; pt \u003c consumed; pt++) {\n-                pos +\u003d Character.charCount(Character.codePointAt(input, pos));\n+                pos +\u003d Character.charCount(Character.codePointAt(input, pt));\n             }\n         }\n     }\n",
      "operations": [
        {
          "type": "update-node",
          "from": "",
          "to": ""
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  }
}