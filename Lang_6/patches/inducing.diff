diff --git a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java
index 0cb2ca8..4d010ea 100644
--- a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java
+++ b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java
@@ -79,27 +79,20 @@
         if (input == null) {
             return;
         }
-        int sz = Character.codePointCount(input, 0, input.length());
-        for (int i = 0; i < sz; i++) {
-
-            // consumed is the number of codepoints consumed
-            int consumed = translate(input, i, out);
-
+        int pos = 0;
+        int len = input.length();
+        while (pos < len) {
+            int consumed = translate(input, pos, out);
             if (consumed == 0) {
-                out.write(Character.toChars(Character.codePointAt(input, i)));
-            } else {
-                // contract with translators is that they have to understand codepoints 
-                // and they just took care of a surrogate pair
-                for (int j = 0; j < consumed; j++) {
-                    if (i < sz - 2) {
-                        i += Character.charCount(Character.codePointAt(input, i));
-                    } else {
-                        // If the String ends with a high surrogate, just add the 1 and don't worry about such things
-                        i++;
-                    }
-                }
-                // for loop will increment 1 anyway, so remove 1 to account for that
-                i--;
+                char[] c = Character.toChars(Character.codePointAt(input, pos));
+                out.write(c);
+                pos+= c.length;
+                continue;
+            }
+//          // contract with translators is that they have to understand codepoints 
+//          // and they just took care of a surrogate pair
+            for (int pt = 0; pt < consumed; pt++) {
+                pos += Character.charCount(Character.codePointAt(input, pos));
             }
         }
     }
diff --git a/src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java b/src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java
index 5127ca3..132ea05 100644
--- a/src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java
+++ b/src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java
@@ -423,4 +423,11 @@
 
         assertEquals( "Hiragana character unicode behaviour has changed - expected no unescaping", escaped, unescaped);
     }
+
+    // https://issues.apache.org/jira/browse/LANG-720
+    public void testLang720() {
+        String input = new StringBuilder("\ud842\udfb7").append("A").toString();
+        String escaped = StringEscapeUtils.escapeXml(input);
+        assertEquals(input, escaped);
+    }
 }
