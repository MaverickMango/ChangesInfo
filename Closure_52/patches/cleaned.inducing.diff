Only in data/changesInfo//Closure_52/properties/modified_classes/inducing/: src
diff -u -r data/changesInfo//Closure_52/properties/modified_classes/inducing/test/com/google/javascript/jscomp/CodePrinterTest.java data/changesInfo//Closure_52/cleaned/inducing/test/com/google/javascript/jscomp/CodePrinterTest.java
--- data/changesInfo//Closure_52/properties/modified_classes/inducing/test/com/google/javascript/jscomp/CodePrinterTest.java	2023-12-27 22:38:19.797001359 -0800
+++ data/changesInfo//Closure_52/cleaned/inducing/test/com/google/javascript/jscomp/CodePrinterTest.java	2023-06-28 00:17:55.921000000 -0700
@@ -30,8 +30,7 @@
   static Node parse(String js, boolean checkTypes) {
     Compiler compiler = new Compiler();
     CompilerOptions options = new CompilerOptions();
-    // Allow getters and setters.
-    options.setLanguageIn(LanguageMode.ECMASCRIPT5);
+    options.languageIn = LanguageMode.ECMASCRIPT5; // Allow getters and setters.
     compiler.initOptions(options);
     Node n = compiler.parseTestCode(js);
 
@@ -80,21 +79,9 @@
       int lineThreshold, boolean outputTypes) {
     return new CodePrinter.Builder(parse(js, true)).setPrettyPrint(prettyprint)
         .setOutputTypes(outputTypes)
-        .setLineLengthThreshold(lineThreshold).setLineBreak(lineBreak)
-        .build();
-  }
-
-  String parsePrint(String js, boolean prettyprint, boolean lineBreak,
-                    int lineThreshold, boolean outputTypes,
-                    boolean tagAsStrict) {
-    return new CodePrinter.Builder(parse(js, true)).setPrettyPrint(prettyprint)
-        .setOutputTypes(outputTypes)
-        .setLineLengthThreshold(lineThreshold).setLineBreak(lineBreak)
-        .setTagAsStrict(tagAsStrict)
-        .build();
+        .setLineLengthThreshold(lineThreshold).setLineBreak(lineBreak).build();
   }
 
-
   String printNode(Node n) {
     return new CodePrinter.Builder(n).setLineLengthThreshold(
         CodePrinter.DEFAULT_LINE_LENGTH_THRESHOLD).build();
@@ -1122,27 +1109,6 @@
     assertPrint("var x={1:1}", "var x={1:1}");
   }
 
-  public void testObjectLit2() {
-    assertPrint("var x={1:1}", "var x={1:1}");
-    assertPrint("var x={'1':1}", "var x={1:1}");
-    assertPrint("var x={'1.0':1}", "var x={\"1.0\":1}");
-    assertPrint("var x={1.5:1}", "var x={\"1.5\":1}");
-
-  }
-
-  public void testObjectLit3() {
-    assertPrint("var x={3E9:1}",
-                "var x={3E9:1}");
-    assertPrint("var x={'3000000000':1}", // More than 31 bits
-                "var x={3E9:1}");
-    assertPrint("var x={'3000000001':1}",
-                "var x={3000000001:1}");
-    assertPrint("var x={'6000000001':1}",  // More than 32 bits
-                "var x={6000000001:1}");
-    assertPrint("var x={\"12345678901234567\":1}",  // More than 53 bits
-                "var x={\"12345678901234567\":1}");
-  }
-
   public void testGetter() {
     assertPrint("var x = {}", "var x={}");
     assertPrint("var x = {get a() {return 1}}", "var x={get a(){return 1}}");
@@ -1150,36 +1116,30 @@
       "var x = {get a() {}, get b(){}}",
       "var x={get a(){},get b(){}}");
 
-    assertPrint(
-      "var x = {get 'a'() {return 1}}",
-      "var x={get \"a\"(){return 1}}");
-
-    assertPrint(
-      "var x = {get 1() {return 1}}",
-      "var x={get 1(){return 1}}");
-
-    assertPrint(
-      "var x = {get \"()\"() {return 1}}",
-      "var x={get \"()\"(){return 1}}");
+    // Valid ES5 but Rhino doesn't accept this yet.
+    // assertPrint(
+    //  "var x = {get 1() {return 1}}",
+    //  "var x={get \"1\"(){return 1}}");
+
+    // Valid ES5 but Rhino doesn't accept this yet.
+    // assertPrint(
+    //  "var x = {get \"()\"() {return 1}}",
+    //   "var x={get \"()\"(){return 1}}");
   }
 
   public void testSetter() {
     assertPrint("var x = {}", "var x={}");
-    assertPrint(
-       "var x = {set a(y) {return 1}}",
-       "var x={set a(y){return 1}}");
+    assertPrint("var x = {set a(x) {return 1}}", "var x={set a(x){return 1}}");
 
-    assertPrint(
-      "var x = {get 'a'() {return 1}}",
-      "var x={get \"a\"(){return 1}}");
-
-    assertPrint(
-      "var x = {set 1(y) {return 1}}",
-      "var x={set 1(y){return 1}}");
-
-    assertPrint(
-      "var x = {set \"(x)\"(y) {return 1}}",
-      "var x={set \"(x)\"(y){return 1}}");
+    // Valid ES5 but Rhino doesn't accept this yet.
+    // assertPrint(
+    //  "var x = {set 1(x) {return 1}}",
+    //  "var x={set \"1\"(x){return 1}}");
+
+    // Valid ES5 but Rhino doesn't accept this yet.
+    // assertPrint(
+    //  "var x = {set \"(x)\"() {return 1}}",
+    //   "var x={set \"(x)\"(){return 1}}");
   }
 
   public void testNegCollapse() {
@@ -1189,22 +1149,19 @@
     assertPrint("var x = - (2);", "var x=-2");
   }
 
-  public void testStrict() {
-    String result = parsePrint("var x", false, false, 0, false, true);
-    assertEquals("'use strict';var x", result);
-  }
-
-  public void testArrayLiteral() {
-    assertPrint("var x = [,];","var x=[,]");
-    assertPrint("var x = [,,];","var x=[,,]");
-    assertPrint("var x = [,s,,];","var x=[,s,,]");
-    assertPrint("var x = [,s];","var x=[,s]");
-    assertPrint("var x = [s,];","var x=[s]");
-  }
-
-  public void testZero() {
-    assertPrint("var x ='\\0';", "var x=\"\\0\"");
-    assertPrint("var x ='\\x00';", "var x=\"\\0\"");
-    assertPrint("var x ='\\u0000';", "var x=\"\\0\"");
+  public void testNumericKeys() {
+    assertPrint("var x = {010: 1};", "var x={8:1}");
+    assertPrint("var x = {'010': 1};", "var x={\"010\":1}");
+
+    assertPrint("var x = {0x10: 1};", "var x={16:1}");
+    assertPrint("var x = {'0x10': 1};", "var x={\"0x10\":1}");
+
+    // I was surprised at this result too.
+    assertPrint("var x = {.2: 1};", "var x={\"0.2\":1}");
+    assertPrint("var x = {'.2': 1};", "var x={\".2\":1}");
+
+    assertPrint("var x = {0.2: 1};", "var x={\"0.2\":1}");
+    assertPrint("var x = {'0.2': 1};", "var x={\"0.2\":1}");
   }
+
 }
Only in data/changesInfo//Closure_52/properties/modified_classes/inducing/test/com/google/javascript/jscomp: FunctionNamesTest.java
Only in data/changesInfo//Closure_52/properties/modified_classes/inducing/test/com/google/javascript/jscomp: parsing
Only in data/changesInfo//Closure_52/properties/modified_classes/inducing/test/com/google/javascript/jscomp: RenamePropertiesTest.java
Only in data/changesInfo//Closure_52/properties/modified_classes/inducing/test/com/google/javascript/jscomp: RenamePrototypesTest.java
Only in data/changesInfo//Closure_52/properties/modified_classes/inducing/test/com/google/javascript/jscomp: SimpleDefinitionFinderTest.java
