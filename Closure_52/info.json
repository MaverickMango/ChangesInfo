{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "data/changesInfo/",
  "timeoutSecond": 300,
  "proj": "Closure",
  "id": "52",
  "workingDir": "../bugs/Closure_52_buggy",
  "inducingCommit": "41acde3e8e5e8d37ade765b41d9fd29861f03e5e",
  "originalCommit": "4434b45f18d2e74ec809a9bbeb67571b604ce6d0",
  "bug_name": "Closure_52",
  "derive": "defects4j",
  "original_fixing_commit": "5909c3db59b16886917456ab950ef9661a7fe6b1",
  "buildFiles_changed": false,
  "inducing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/jscomp/CodeGenerator.java",
        "src/com/google/javascript/jscomp/CodeGenerator.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "add"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "getSimpleNumber",
            "add",
            "isSimpleNumber"
          ],
          "num": 3
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "343",
            "349",
            "653",
            "654",
            "655",
            "656",
            "657",
            "658",
            "659",
            "660",
            "661",
            "662",
            "664",
            "721"
          ],
          "num": 14
        },
        {
          "qualified_names": [
            "343",
            "344",
            "350",
            "351",
            "352",
            "353",
            "354",
            "355",
            "356",
            "660",
            "661",
            "662",
            "663",
            "664",
            "665",
            "666",
            "667",
            "668",
            "669",
            "670",
            "672",
            "673",
            "674",
            "675",
            "676",
            "677",
            "678",
            "736",
            "737",
            "738",
            "739",
            "740",
            "741",
            "742",
            "743",
            "744",
            "745",
            "746",
            "747",
            "748",
            "749",
            "750",
            "751",
            "752",
            "753",
            "754",
            "755",
            "756"
          ],
          "num": 48
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 22df685..593ec05 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -340,13 +340,20 @@\n         Node body \u003d fn.getLastChild();\n \n         // Add the property name.\n-        if (TokenStream.isJSIdentifier(name) \u0026\u0026\n+        if (!n.isQuotedString() \u0026\u0026\n+            TokenStream.isJSIdentifier(name) \u0026\u0026\n             // do not encode literally any non-literal characters that were\n             // unicode escaped.\n             NodeUtil.isLatin(name)) {\n           add(name);\n         } else {\n-          add(jsString(n.getString(), outputCharsetEncoder));\n+          // Determine if the string is a simple number.\n+          double d \u003d getSimpleNumber(name);\n+          if (!Double.isNaN(d)) {\n+            cc.addNumber(d);\n+          } else {\n+            add(jsString(n.getString(), outputCharsetEncoder));\n+          }\n         }\n \n         add(parameters);\n@@ -650,18 +657,25 @@\n           if (c.getType() \u003d\u003d Token.GET || c.getType() \u003d\u003d Token.SET) {\n             add(c);\n           } else {\n-            // Object literal property names don\u0027t have to be quoted if they are\n-            // not JavaScript keywords\n-            if (c.getType() \u003d\u003d Token.STRING \u0026\u0026\n-                !c.isQuotedString() \u0026\u0026\n-                !TokenStream.isKeyword(c.getString()) \u0026\u0026\n-                TokenStream.isJSIdentifier(c.getString()) \u0026\u0026\n-                // do not encode literally any non-literal characters that were\n-                // unicode escaped.\n-                NodeUtil.isLatin(c.getString())) {\n-              add(c.getString());\n+            Preconditions.checkState(c.getType() \u003d\u003d Token.STRING);\n+            String key \u003d c.getString();\n+            // Object literal property names don\u0027t have to be quoted if they\n+            // are not JavaScript keywords\n+            if (!c.isQuotedString() \u0026\u0026\n+                !TokenStream.isKeyword(key) \u0026\u0026\n+                TokenStream.isJSIdentifier(key) \u0026\u0026\n+                // do not encode literally any non-literal characters that\n+                // were unicode escaped.\n+                NodeUtil.isLatin(key)) {\n+              add(key);\n             } else {\n-              addExpr(c, 1);\n+              // Determine if the string is a simple number.\n+              double d \u003d getSimpleNumber(key);\n+              if (!Double.isNaN(d)) {\n+                cc.addNumber(d);\n+              } else {\n+                addExpr(c, 1);\n+              }\n             }\n             add(\":\");\n             addExpr(c.getFirstChild(), 1);\n@@ -719,6 +733,27 @@\n     cc.endSourceMapping(n);\n   }\n \n+  static boolean isSimpleNumber(String s) {\n+    int len \u003d s.length();\n+    for (int index \u003d 0; index \u003c len; index++) {\n+      char c \u003d s.charAt(index);\n+      if (c \u003c \u00270\u0027 || c \u003e \u00279\u0027) {\n+        return false;\n+      }\n+    }\n+    return len \u003e 0;\n+  }\n+\n+  static double getSimpleNumber(String s) {\n+    if (isSimpleNumber(s)) {\n+      long l \u003d Long.parseLong(s);\n+      if (l \u003c NodeUtil.MAX_POSITIVE_INTEGER_NUMBER) {\n+        return l;\n+      }\n+    }\n+    return Double.NaN;\n+  }\n+\n   /**\n    * @return Whether the name is an indirect eval.\n    */\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [22005,22244]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [22248,22465]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "PrefixExpression [10065,10084]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [10387,10420]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "IfStatement [10431,10578]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "PrefixExpression [10435,10451]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Block [10453,10495]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Block [10501,10578]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [19827,19881]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "VariableDeclarationStatement [19894,19921]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SimpleType [19894,19900]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "VariableDeclarationFragment [19901,19920]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: key [19901,19904]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "PrefixExpression [20097,20124]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "MethodInvocation [20144,20175]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "MethodInvocation [20311,20332]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [20456,20488]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "IfStatement [20503,20629]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "MethodInvocation [20098,20124]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "METHOD_INVOCATION_ARGUMENTS [20171,20174]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "METHOD_INVOCATION_ARGUMENTS [20328,20331]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "PrefixExpression [20507,20523]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Block [20525,20575]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Block [20581,20629]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "METHOD_INVOCATION_ARGUMENTS [20120,20123]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: key [20354,20357]"
        },
        {
          "type": "delete-tree",
          "from": "InfixExpression [19719,19746]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "INFIX_EXPRESSION_OPERATOR: \u0026\u0026 [19747,19749]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "InfixExpression [19719,19785]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "INFIX_EXPRESSION_OPERATOR: \u0026\u0026 [19786,19788]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "METHOD_INVOCATION_ARGUMENTS [19828,19841]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "MethodInvocation [19806,19842]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "PrefixExpression [19805,19842]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "InfixExpression [19719,19842]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "INFIX_EXPRESSION_OPERATOR: \u0026\u0026 [19843,19845]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "METHOD_INVOCATION_ARGUMENTS [19889,19902]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "MethodInvocation [19862,19903]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "InfixExpression [19719,19903]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "METHOD_INVOCATION_ARGUMENTS [20056,20069]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "MethodInvocation [20039,20070]",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/jscomp/NodeUtil.java",
        "src/com/google/javascript/jscomp/NodeUtil.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "getStringValue"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "getStringValue",
            "getPureBooleanValue",
            "getStringValue"
          ],
          "num": 3
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "47",
            "159",
            "181",
            "182",
            "183",
            "184",
            "185",
            "186",
            "187",
            "188",
            "189",
            "214"
          ],
          "num": 12
        },
        {
          "qualified_names": [
            "48",
            "49",
            "156",
            "182",
            "208",
            "209",
            "210",
            "211",
            "212",
            "213",
            "214",
            "215",
            "216",
            "217",
            "218"
          ],
          "num": 15
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java\nindex c97e091..28222de 100644\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n@@ -45,6 +45,8 @@\n  */\n public final class NodeUtil {\n \n+  static final long MAX_POSITIVE_INTEGER_NUMBER \u003d (long)Math.pow(2, 53);\n+\n   final static String JSC_PROPERTY_NAME_FN \u003d \"JSCompiler_renameProperty\";\n \n   // TODO(user): Eliminate this class and make all of the static methods\n@@ -156,7 +158,6 @@\n     return TernaryValue.UNKNOWN;\n   }\n \n-\n   /**\n    * Gets the value of a node as a String, or null if it cannot be converted.\n    * When it returns a non-null String, this method effectively emulates the\n@@ -178,15 +179,7 @@\n         break;\n \n       case Token.NUMBER:\n-        double value \u003d n.getDouble();\n-        long longValue \u003d (long) value;\n-\n-        // Return \"1\" instead of \"1.0\"\n-        if (longValue \u003d\u003d value) {\n-          return Long.toString(longValue);\n-        } else {\n-          return Double.toString(n.getDouble());\n-        }\n+        return getStringValue(n.getDouble());\n \n       case Token.FALSE:\n       case Token.TRUE:\n@@ -212,6 +205,17 @@\n     return null;\n   }\n \n+  static String getStringValue(double value) {\n+    long longValue \u003d (long) value;\n+\n+    // Return \"1\" instead of \"1.0\"\n+    if (longValue \u003d\u003d value) {\n+      return Long.toString(longValue);\n+    } else {\n+      return Double.toString(value);\n+    }\n+  }\n+\n   /**\n    * When converting arrays to string using Array.prototype.toString or\n    * Array.prototype.join, the rules for conversion to String are different\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldDeclaration [1537,1607]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "MethodDeclaration [6449,6693]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: static [6449,6455]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SimpleType [6456,6462]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: getStringValue [6463,6477]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SingleVariableDeclaration [6478,6490]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Block [6492,6693]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "ReturnStatement [5854,5891]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "MethodInvocation [5861,5890]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: getStringValue [5861,5875]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "METHOD_INVOCATION_ARGUMENTS [5876,5889]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: value [6676,6681]"
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [5781,5810]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/jscomp/RenamePrototypes.java",
        "src/com/google/javascript/jscomp/RenamePrototypes.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "visit",
            "processPrototypeParent"
          ],
          "num": 2
        },
        {
          "qualified_names": [
            "visit",
            "processPrototypeParent"
          ],
          "num": 2
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "23",
            "335",
            "376"
          ],
          "num": 3
        },
        {
          "qualified_names": [
            "24",
            "336",
            "377",
            "378"
          ],
          "num": 4
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/jscomp/RenamePrototypes.java b/src/com/google/javascript/jscomp/RenamePrototypes.java\nindex 048fc5f..d7558d0 100644\n--- a/src/com/google/javascript/jscomp/RenamePrototypes.java\n+++ b/src/com/google/javascript/jscomp/RenamePrototypes.java\n@@ -21,6 +21,7 @@\n import com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback;\n import com.google.javascript.rhino.Node;\n import com.google.javascript.rhino.Token;\n+import com.google.javascript.rhino.TokenStream;\n \n import java.util.Arrays;\n import java.util.Comparator;\n@@ -332,7 +333,7 @@\n                  child !\u003d null;\n                  child \u003d child.getNext()) {\n \n-              if (child.getType() !\u003d Token.NUMBER) {\n+              if (TokenStream.isJSIdentifier(child.getString())) {\n                 markObjLitPropertyCandidate(child, t.getInput());\n               }\n             }\n@@ -373,7 +374,8 @@\n \n             for (Node key \u003d map.getFirstChild();\n                  key !\u003d null; key \u003d key.getNext()) {\n-              if (key.getType() !\u003d Token.NUMBER) { // May be STRING, GET, or SET\n+              if (TokenStream.isJSIdentifier(key.getString())) {\n+               // May be STRING, GET, or SET\n                 markPrototypePropertyCandidate(key, input);\n               }\n             }\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "ImportDeclaration [927,974]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "MethodInvocation [11151,11196]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "MethodInvocation [12574,12617]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "METHOD_INVOCATION_RECEIVER [11151,11162]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: isJSIdentifier [11163,11177]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "METHOD_INVOCATION_ARGUMENTS [11178,11195]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "METHOD_INVOCATION_RECEIVER [12574,12585]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: isJSIdentifier [12586,12600]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "METHOD_INVOCATION_ARGUMENTS [12601,12616]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "INFIX_EXPRESSION_OPERATOR: !\u003d [11119,11121]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "QualifiedName: Token.NUMBER [11122,11134]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "InfixExpression [11103,11134]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "INFIX_EXPRESSION_OPERATOR: !\u003d [12526,12528]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "QualifiedName: Token.NUMBER [12529,12541]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "InfixExpression [12512,12541]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "src/com/google/javascript/jscomp/parsing/IRFactory.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "transformAsString"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "transformNumberAsString",
            "transformAsString",
            "getStringValue"
          ],
          "num": 3
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "254",
            "345",
            "346",
            "347",
            "348",
            "349"
          ],
          "num": 6
        },
        {
          "qualified_names": [
            "255",
            "256",
            "257",
            "258",
            "259",
            "260",
            "261",
            "262",
            "263",
            "264",
            "265",
            "266",
            "267",
            "268",
            "269",
            "270",
            "271",
            "272",
            "273",
            "274",
            "275",
            "364",
            "365",
            "366",
            "369",
            "371"
          ],
          "num": 26
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 98a85d5..3d1db67 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -252,6 +252,27 @@\n     return irNode;\n   }\n \n+  private Node transformNumberAsString(NumberLiteral literalNode) {\n+    JSDocInfo jsDocInfo \u003d handleJsDoc(literalNode);\n+    Node irNode \u003d newStringNode(getStringValue(literalNode.getNumber()));\n+    if (jsDocInfo !\u003d null) {\n+      irNode.setJSDocInfo(jsDocInfo);\n+    }\n+    setSourceInfo(irNode, literalNode);\n+    return irNode;\n+  }\n+\n+  private static String getStringValue(double value) {\n+    long longValue \u003d (long) value;\n+\n+    // Return \"1\" instead of \"1.0\"\n+    if (longValue \u003d\u003d value) {\n+      return Long.toString(longValue);\n+    } else {\n+      return Double.toString(value);\n+    }\n+  }\n+\n   private void setSourceInfo(Node irNode, AstNode node) {\n     // If we have a named function, set the position to that of the name.\n     if (irNode.getType() \u003d\u003d Token.FUNCTION \u0026\u0026\n@@ -340,14 +361,14 @@\n       Node ret;\n       if (n instanceof Name) {\n         ret \u003d transformNameAsString((Name)n);\n+      } else if (n instanceof NumberLiteral) {\n+        ret \u003d transformNumberAsString((NumberLiteral)n);\n+        ret.putBooleanProp(Node.QUOTED_PROP, true);\n       } else {\n         ret \u003d transform(n);\n-        Preconditions.checkState(ret.getType() \u003d\u003d Token.NUMBER\n-            || ret.getType() \u003d\u003d Token.STRING);\n-        if (ret.getType() \u003d\u003d Token.STRING) {\n-          ret.putBooleanProp(Node.QUOTED_PROP, true);\n-        }\n+        ret.putBooleanProp(Node.QUOTED_PROP, true);\n       }\n+      Preconditions.checkState(ret.getType() \u003d\u003d Token.STRING);\n       return ret;\n     }\n \n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [10190,10517]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [10521,10773]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "IfStatement [14162,14407]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "InstanceofExpression [14166,14192]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [14204,14252]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [14356,14399]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "InfixExpression [13727,13756]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "IfStatement [13723,13823]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "InfixExpression [13638,13667]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "INFIX_EXPRESSION_OPERATOR: || [13680,13682]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "InfixExpression [13638,13712]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/rhino/Node.java",
        "src/com/google/javascript/rhino/Node.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "propToString"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "propToString"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "150",
            "221",
            "222",
            "223"
          ],
          "num": 4
        },
        {
          "qualified_names": [
            "149",
            "220",
            "221",
            "222"
          ],
          "num": 4
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/rhino/Node.java b/src/com/google/javascript/rhino/Node.java\nindex 0b35aa2..8d41e81 100644\n--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -147,7 +147,6 @@\n       DIRECT_EVAL        \u003d 48,    // ES5 distinguishes between direct and\n                                   // indirect calls to eval.\n       FREE_CALL          \u003d 49,    // A CALL without an explicit \"this\" value.\n-                                  //\n       LAST_PROP          \u003d 49;\n \n   // values of ISNUMBER_PROP to specify\n@@ -218,9 +217,9 @@\n         case QUOTED_PROP:        return \"quoted\";\n \n         case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n-        case EMPTY_BLOCK: return \"empty_block\";\n-        case ORIGINALNAME_PROP: return \"originalname\";\n-        case SIDE_EFFECT_FLAGS: return \"side_effect_flags\";\n+        case EMPTY_BLOCK:        return \"empty_block\";\n+        case ORIGINALNAME_PROP:  return \"originalname\";\n+        case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n \n         case IS_CONSTANT_NAME:   return \"is_constant_name\";\n         case IS_OPTIONAL_PARAM:  return \"is_optional_param\";\n",
      "operations": []
    }
  ],
  "inducing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [
        "getPureBooleanValue",
        "isSimpleNumber",
        "getSimpleNumber",
        "transformNumberAsString"
      ],
      "num": 4
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  },
  "trigger_tests": [
    {
      "test_class": "com.google.javascript.jscomp.CrossModuleMethodMotionTest",
      "test_function": "testTwoMethods",
      "exception": "junit.framework.AssertionFailedError",
      "message": ""
    },
    {
      "test_class": "com.google.javascript.jscomp.CrossModuleMethodMotionTest",
      "test_function": "testClosureVariableReads3",
      "exception": "junit.framework.AssertionFailedError",
      "message": ""
    }
  ],
  "fixing_changes": [],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  }
}