{
  "bugName": "Gson_15_buggy",
  "bugId": "26",
  "repo": {
    "name": "../bugs/Gson_15_buggy/.git"
  },
  "inducingCommit": {
    "sha": "765a9f1ecdfaf96f3587f488385111c9d6a4927e",
    "branchName": "HEAD",
    "fullMessage": "Brand new classes for streaming JSON efficiently.\n\nNotable features:\n - Efficiency. The parser is faster than the current javacc parser. It\u0027s also faster than popular libraries for JSON streaming.\n - Toggle lenient/strict\n - Toggle pretty/compact\n - Friendly error messages on bad JSON\n - GSON-quality Javadoc\n - Non-execute prefix handling\n\nThis doesn\u0027t wire JsonReader up into Gson just yet. That\u0027s coming soon...\n",
    "repoName": "../bugs/Gson_15_buggy/.git"
  },
  "originalCommit": {
    "sha": "5bffa1f6790b2a5e8bc0996240c1b12317793324",
    "branchName": "HEAD",
    "fullMessage": "Fix for Issue 178.\n",
    "repoName": "../bugs/Gson_15_buggy/.git"
  },
  "fixedCommit": {
    "sha": "ada597e69a78b8b99f79f79493cbf51e16045202",
    "branchName": "HEAD",
    "fullMessage": "value(double) can write NaN and infinite values when lenient, as value(Number) does (#1093)\n\n* Added test which shows that lenient JsonWriter fails writing infinite primitive doubles, but does not fail writing boxed doubles, as stated in #1090.\r\n\r\n* Fixed JsonWriter#value(double) to write infinite and NaN values when lenient, as JsonWriter#value(Number) does. (fixes #1090)\r\n",
    "repoName": "../bugs/Gson_15_buggy/.git"
  },
  "buggyCommit": {
    "sha": "0aaef0fd1bb1b9729543dc40168adfb829eb75a4",
    "branchName": "HEAD",
    "fullMessage": "[maven-release-plugin] prepare for next development iteration\n",
    "repoName": "../bugs/Gson_15_buggy/.git"
  }
}