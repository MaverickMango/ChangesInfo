{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "data/changesInfo/",
  "timeoutSecond": 300,
  "proj": "Compress",
  "id": "1",
  "workingDir": "../bugs/Compress_1_buggy",
  "inducingCommit": "70c8320f7f592d325e8c89a294a1b2db70595f65",
  "originalCommit": "01d395157e5ffbc15b6f7e265885d4b7635791d5",
  "bug_name": "Compress_1",
  "derive": "defects4j",
  "original_fixing_commit": "004124ac5dbf5edbf925078652526267468821e7",
  "buildFiles_changed": true,
  "inducing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java",
        "src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "createArchiveOutputStream",
            "createArchiveInputStream",
            "createArchiveInputStream"
          ],
          "num": 3
        },
        {
          "qualified_names": [
            "createArchiveInputStream",
            "createArchiveInputStream",
            "createArchiveOutputStream"
          ],
          "num": 3
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "26",
            "55",
            "68",
            "88"
          ],
          "num": 4
        },
        {
          "qualified_names": [
            "27",
            "28",
            "58",
            "59",
            "73",
            "74",
            "95",
            "96"
          ],
          "num": 8
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java b/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java\nindex f0ad1a9..47fd98b 100644\n--- a/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java\n@@ -24,6 +24,8 @@\n \n import org.apache.commons.compress.archivers.ar.ArArchiveInputStream;\n import org.apache.commons.compress.archivers.ar.ArArchiveOutputStream;\n+import org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream;\n+import org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream;\n import org.apache.commons.compress.archivers.jar.JarArchiveInputStream;\n import org.apache.commons.compress.archivers.jar.JarArchiveOutputStream;\n import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;\n@@ -53,6 +55,8 @@\n         \treturn new TarArchiveInputStream(in);\n         } else if(\"jar\".equalsIgnoreCase(archiverName)) {\n         \treturn new JarArchiveInputStream(in);\n+        } else if(\"cpio\".equalsIgnoreCase(archiverName)) {\n+        \treturn new CpioArchiveInputStream(in);\n         }\n     \treturn null;\n     }\n@@ -66,6 +70,8 @@\n         \treturn new TarArchiveOutputStream(out);\n         } else if(\"jar\".equalsIgnoreCase(archiverName)) {\n         \treturn new JarArchiveOutputStream(out);\n+        } else if(\"cpio\".equalsIgnoreCase(archiverName)) {\n+        \treturn new CpioArchiveOutputStream(out);\n         }\n     \treturn null;\n     }\n@@ -86,6 +92,8 @@\n \t\t\treturn new TarArchiveInputStream(input);\n \t\t} else if(ArArchiveInputStream.matches(signature)) {\n \t\t\treturn new ArArchiveInputStream(input);\n+\t\t} else if(CpioArchiveInputStream.matches(signature)) {\n+\t\t\treturn new CpioArchiveInputStream(input);\n \t\t} \n \t\treturn null;\n \t}\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "ImportDeclaration [1081,1154]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ImportDeclaration [1155,1229]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [2578,2679]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [3276,3379]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [4101,4197]"
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java",
        "src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "sendMTFValues"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "sendMTFValues"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "568",
            "799",
            "823",
            "834",
            "853"
          ],
          "num": 5
        },
        {
          "qualified_names": [
            "568",
            "799",
            "823",
            "834",
            "853"
          ],
          "num": 5
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java b/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java\nindex 9efdc25..5f4b96c 100644\n--- a/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java\n@@ -565,7 +565,7 @@\n \n         int v, t, i, j, gs, ge, totc, bt, bc, iter;\n         int nSelectors \u003d 0, alphaSize, minLen, maxLen, selCtr;\n-        int nGroups, nBytes;\n+        int nGroups; //, nBytes;\n \n         alphaSize \u003d nInUse + 2;\n         for (t \u003d 0; t \u003c N_GROUPS; t++) {\n@@ -796,7 +796,7 @@\n                 }\n             }\n \n-            nBytes \u003d bytesOut;\n+            //nBytes \u003d bytesOut;\n             for (i \u003d 0; i \u003c 16; i++) {\n                 if (inUse16[i]) {\n                     bsW(1, 1);\n@@ -820,7 +820,7 @@\n         }\n \n         /* Now the selectors. */\n-        nBytes \u003d bytesOut;\n+        //nBytes \u003d bytesOut;\n         bsW (3, nGroups);\n         bsW (15, nSelectors);\n         for (i \u003d 0; i \u003c nSelectors; i++) {\n@@ -831,7 +831,7 @@\n         }\n \n         /* Now the coding tables. */\n-        nBytes \u003d bytesOut;\n+        //nBytes \u003d bytesOut;\n \n         for (t \u003d 0; t \u003c nGroups; t++) {\n             int curr \u003d len[t][0];\n@@ -850,7 +850,7 @@\n         }\n \n         /* And finally, the block data proper */\n-        nBytes \u003d bytesOut;\n+        //nBytes \u003d bytesOut;\n         selCtr \u003d 0;\n         gs \u003d 0;\n         while (true) {\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [16628,16640]"
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [16628,16648]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [23515,23533]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [24140,24158]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [24429,24447]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [24963,24981]",
          "to": ""
        }
      ]
    }
  ],
  "inducing_type": {
    "add_classes": {
      "qualified_names": [
        "src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.java",
        "src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java",
        "src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java",
        "src/main/java/org/apache/commons/compress/archivers/cpio/CpioConstants.java"
      ],
      "num": 4
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  },
  "trigger_tests": [],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java",
        "src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "close"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "close"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "327"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "328"
          ],
          "num": 1
        }
      ],
      "diff": "diff -u -r data/changesInfo//Compress_1/properties/modified_classes/inducing/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java data/changesInfo//Compress_1/cleaned/fixing/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java\n--- data/changesInfo//Compress_1/properties/modified_classes/inducing/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java\t2023-07-27 14:39:30.499886502 +0800\n+++ data/changesInfo//Compress_1/cleaned/fixing/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java\t2023-07-27 14:50:54.193922203 +0800\n@@ -325,6 +325,7 @@\n      */\n     public void close() throws IOException {\n         if (!this.closed) {\n+            this.finish();\n             super.close();\n             this.closed \u003d true;\n         }\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [11970,11984]"
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  }
}