{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "/home/liumengjiao/Desktop/CI/Benchmark/data/changesInfo/",
  "properties": {
    "trigger.tests": "org.apache.commons.compress.archivers.CpioTestCase::testCpioUnarchive",
    "test.dir": "src/test/java",
    "clz.modified": "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream",
    "src.dir": "src/main/java"
  },
  "timeoutSecond": 100,
  "proj": "Compress",
  "id": "1",
  "workingDir": "../bugs/Compress_1_buggy",
  "buggyCommit": "728b4e814ec88cab556533fa114be0efdde963be",
  "inducingCommit": "70c8320f7f592d325e8c89a294a1b2db70595f65",
  "originalCommit": "01d395157e5ffbc15b6f7e265885d4b7635791d5",
  "bug_name": "Compress_1",
  "derive": "defects4j",
  "original_fixing_commit": "004124ac5dbf5edbf925078652526267468821e7",
  "buildFiles_changed": true,
  "regression": true,
  "inducing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java",
        "src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.compress.archivers.ArchiveStreamFactory:createArchiveInputStream:[final String archiverName, final InputStream in]:ArchiveInputStream",
            "org.apache.commons.compress.archivers.ArchiveStreamFactory:createArchiveOutputStream:[final String archiverName, final OutputStream out]:ArchiveOutputStream",
            "org.apache.commons.compress.archivers.ArchiveStreamFactory:createArchiveInputStream:[final InputStream input]:ArchiveInputStream"
          ],
          "num": 3
        },
        {
          "qualified_names": [
            "org.apache.commons.compress.archivers.ArchiveStreamFactory:createArchiveOutputStream:[final String archiverName, final OutputStream out]:ArchiveOutputStream",
            "org.apache.commons.compress.archivers.ArchiveStreamFactory:createArchiveInputStream:[final String archiverName, final InputStream in]:ArchiveInputStream",
            "org.apache.commons.compress.archivers.ArchiveStreamFactory:createArchiveInputStream:[final InputStream input]:ArchiveInputStream"
          ],
          "num": 3
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "26",
            "55",
            "68",
            "88"
          ],
          "num": 4
        },
        {
          "qualified_names": [
            "27",
            "28",
            "58",
            "59",
            "73",
            "74",
            "95",
            "96"
          ],
          "num": 8
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java b/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java\nindex f0ad1a9..47fd98b 100644\n--- a/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java\n@@ -24,6 +24,8 @@\n \n import org.apache.commons.compress.archivers.ar.ArArchiveInputStream;\n import org.apache.commons.compress.archivers.ar.ArArchiveOutputStream;\n+import org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream;\n+import org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream;\n import org.apache.commons.compress.archivers.jar.JarArchiveInputStream;\n import org.apache.commons.compress.archivers.jar.JarArchiveOutputStream;\n import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;\n@@ -53,6 +55,8 @@\n         \treturn new TarArchiveInputStream(in);\n         } else if(\"jar\".equalsIgnoreCase(archiverName)) {\n         \treturn new JarArchiveInputStream(in);\n+        } else if(\"cpio\".equalsIgnoreCase(archiverName)) {\n+        \treturn new CpioArchiveInputStream(in);\n         }\n     \treturn null;\n     }\n@@ -66,6 +70,8 @@\n         \treturn new TarArchiveOutputStream(out);\n         } else if(\"jar\".equalsIgnoreCase(archiverName)) {\n         \treturn new JarArchiveOutputStream(out);\n+        } else if(\"cpio\".equalsIgnoreCase(archiverName)) {\n+        \treturn new CpioArchiveOutputStream(out);\n         }\n     \treturn null;\n     }\n@@ -86,6 +92,8 @@\n \t\t\treturn new TarArchiveInputStream(input);\n \t\t} else if(ArArchiveInputStream.matches(signature)) {\n \t\t\treturn new ArArchiveInputStream(input);\n+\t\t} else if(CpioArchiveInputStream.matches(signature)) {\n+\t\t\treturn new CpioArchiveInputStream(input);\n \t\t} \n \t\treturn null;\n \t}\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "ImportDeclaration [1081,1154]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ImportDeclaration [1155,1229]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [2578,2679]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [3276,3379]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [4101,4197]"
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java",
        "src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:sendMTFValues:[]:void"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:sendMTFValues:[]:void"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "568",
            "799",
            "823",
            "834",
            "853"
          ],
          "num": 5
        },
        {
          "qualified_names": [
            "568",
            "799",
            "823",
            "834",
            "853"
          ],
          "num": 5
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java b/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java\nindex 9efdc25..5f4b96c 100644\n--- a/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java\n@@ -565,7 +565,7 @@\n \n         int v, t, i, j, gs, ge, totc, bt, bc, iter;\n         int nSelectors \u003d 0, alphaSize, minLen, maxLen, selCtr;\n-        int nGroups, nBytes;\n+        int nGroups; //, nBytes;\n \n         alphaSize \u003d nInUse + 2;\n         for (t \u003d 0; t \u003c N_GROUPS; t++) {\n@@ -796,7 +796,7 @@\n                 }\n             }\n \n-            nBytes \u003d bytesOut;\n+            //nBytes \u003d bytesOut;\n             for (i \u003d 0; i \u003c 16; i++) {\n                 if (inUse16[i]) {\n                     bsW(1, 1);\n@@ -820,7 +820,7 @@\n         }\n \n         /* Now the selectors. */\n-        nBytes \u003d bytesOut;\n+        //nBytes \u003d bytesOut;\n         bsW (3, nGroups);\n         bsW (15, nSelectors);\n         for (i \u003d 0; i \u003c nSelectors; i++) {\n@@ -831,7 +831,7 @@\n         }\n \n         /* Now the coding tables. */\n-        nBytes \u003d bytesOut;\n+        //nBytes \u003d bytesOut;\n \n         for (t \u003d 0; t \u003c nGroups; t++) {\n             int curr \u003d len[t][0];\n@@ -850,7 +850,7 @@\n         }\n \n         /* And finally, the block data proper */\n-        nBytes \u003d bytesOut;\n+        //nBytes \u003d bytesOut;\n         selCtr \u003d 0;\n         gs \u003d 0;\n         while (true) {\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [16628,16640]"
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [16628,16648]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [23515,23533]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [24140,24158]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [24429,24447]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [24963,24981]",
          "to": ""
        }
      ]
    }
  ],
  "inducing_type": {
    "add_classes": {
      "qualified_names": [
        "src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.java",
        "src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java",
        "src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java",
        "src/main/java/org/apache/commons/compress/archivers/cpio/CpioConstants.java"
      ],
      "num": 4
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  },
  "trigger_tests": [
    {
      "test_class": "org.apache.commons.compress.archivers.CpioTestCase",
      "test_function": "testCpioUnarchive",
      "assertion_line": "82",
      "exception": "java.io.EOFException",
      "message": ""
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java",
        "src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:closeArchiveEntry:[]:void",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:finish:[]:void",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:putNextEntry:[final CpioArchiveEntry e]:void",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:close:[]:void",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:closeEntry:[]:void"
          ],
          "num": 5
        },
        {
          "qualified_names": [
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:closeArchiveEntry:[]:void",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:putNextEntry:[final CpioArchiveEntry e]:void",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:finish:[]:void",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:putArchiveEntry:[ArchiveEntry entry]:void",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:close:[]:void"
          ],
          "num": 5
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "42",
            "49",
            "153",
            "245",
            "246",
            "247",
            "249",
            "250",
            "251",
            "253",
            "330",
            "337",
            "348",
            "401",
            "402",
            "403",
            "404",
            "405",
            "406",
            "407",
            "408",
            "409",
            "410",
            "411"
          ],
          "num": 24
        },
        {
          "qualified_names": [
            "42",
            "152",
            "244",
            "246",
            "247",
            "248",
            "250",
            "327",
            "334",
            "346",
            "402"
          ],
          "num": 11
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java b/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java\nindex fb3f305..e66f58a 100644\n--- a/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java\n@@ -39,14 +39,13 @@\n  * \u003cp/\u003e\n  * \u003ccode\u003e\u003cpre\u003e\n  * CpioArchiveOutputStream out \u003d new CpioArchiveOutputStream(\n- *         new FileOutputStream(new File(\u0026quot;test.cpio\u0026quot;)));\n+ *         new FileOutputStream(new File(\"test.cpio\")));\n  * CpioArchiveEntry entry \u003d new CpioArchiveEntry();\n  * entry.setName(\u0026quot;testfile\u0026quot;);\n  * String contents \u003d \u0026quot;12345\u0026quot;;\n  * entry.setFileSize(contents.length());\n  * out.putNextEntry(entry);\n  * out.write(testContents.getBytes());\n- * out.finish();\n  * out.close();\n  * \u003c/pre\u003e\u003c/code\u003e\n  * \u003cp/\u003e\n@@ -150,7 +149,7 @@\n     public void putNextEntry(final CpioArchiveEntry e) throws IOException {\n         ensureOpen();\n         if (this.cpioEntry !\u003d null) {\n-            closeEntry(); // close previous entry\n+            closeArchiveEntry(); // close previous entry\n         }\n         if (e.getTime() \u003d\u003d -1) {\n             e.setTime(System.currentTimeMillis());\n@@ -242,15 +241,13 @@\n         pad(entry.getHeaderSize() + entry.getName().length() + 1, 2);\n     }\n \n-    /**\n-     * Closes the current CPIO entry and positions the stream for writing the\n-     * next entry.\n+    /*(non-Javadoc)\n      * \n-     * @throws IOException\n-     *             if an I/O error has occurred or if a CPIO file error has\n-     *             occurred\n+     * @see\n+     * org.apache.commons.compress.archivers.ArchiveOutputStream#closeArchiveEntry\n+     * ()\n      */\n-    public void closeEntry() throws IOException {\n+    public void closeArchiveEntry() throws IOException {\n         ensureOpen();\n \n         if (this.cpioEntry.getSize() !\u003d this.written) {\n@@ -327,14 +324,14 @@\n             return;\n         }\n         if (this.cpioEntry !\u003d null) {\n-            closeEntry();\n+            closeArchiveEntry();\n         }\n         this.cpioEntry \u003d new CpioArchiveEntry(this.entryFormat);\n         this.cpioEntry.setMode(0);\n         this.cpioEntry.setName(\"TRAILER!!!\");\n         this.cpioEntry.setNumberOfLinks(1);\n         writeHeader(this.cpioEntry);\n-        closeEntry();\n+        closeArchiveEntry();\n     }\n \n     /**\n@@ -346,6 +343,7 @@\n      */\n     public void close() throws IOException {\n         if (!this.closed) {\n+            this.finish();\n             super.close();\n             this.closed \u003d true;\n         }\n@@ -398,17 +396,6 @@\n      * (non-Javadoc)\n      * \n      * @see\n-     * org.apache.commons.compress.archivers.ArchiveOutputStream#closeArchiveEntry\n-     * ()\n-     */\n-    public void closeArchiveEntry() throws IOException {\n-        this.closeEntry();\n-    }\n-\n-    /*\n-     * (non-Javadoc)\n-     * \n-     * @see\n      * org.apache.commons.compress.archivers.ArchiveOutputStream#putArchiveEntry\n      * (org.apache.commons.compress.archivers.ArchiveEntry)\n      */\n",
      "operations": [
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [12031,12045]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: out.finish(); [2008,2021]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [13830,13848]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "Javadoc [8574,8821]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: public [8826,8832]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "PrimitiveType: void [8833,8837]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: closeEntry [8838,8848]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [8858,8869]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Block [8870,9709]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "MethodDeclaration [8574,9709]",
          "to": ""
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [
        "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:putArchiveEntry:[ArchiveEntry entry]:void"
      ],
      "num": 1
    },
    "delete_functions": {
      "qualified_names": [
        "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:closeEntry:[]:void"
      ],
      "num": 1
    }
  },
  "patch_changed_mths": {
    "qualified_names": [
      "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:closeArchiveEntry()V:regression",
      "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:finish()V:regression",
      "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:close()V:regression"
    ],
    "num": 3
  }
}