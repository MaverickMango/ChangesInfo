{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "data/changesInfo/",
  "timeoutSecond": 300,
  "proj": "Lang",
  "id": "21",
  "workingDir": "../bugs/Lang_21_buggy",
  "inducingCommit": "2a41c12c95bb41f7b07a270927b27f3bc5098621",
  "originalCommit": "9b180253ff79b874edbffb1bc4bf7686d6168efd",
  "bug_name": "Lang_21",
  "derive": "defects4j",
  "original_fixing_commit": "55f642725742513824975af0e5e91cb1920b6d72",
  "buildFiles_changed": false,
  "inducing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/lang/time/DateUtils.java",
        "src/java/org/apache/commons/lang/time/DateUtils.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "isSameDay",
            "round",
            "isSameDay"
          ],
          "num": 3
        },
        {
          "qualified_names": [
            "isSameInstant",
            "isSameLocalTime",
            "isSameDay",
            "isSameDay",
            "isSameInstant",
            "round"
          ],
          "num": 6
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "34",
            "128",
            "129",
            "145",
            "153",
            "154",
            "169"
          ],
          "num": 7
        },
        {
          "qualified_names": [
            "34",
            "128",
            "129",
            "144",
            "152",
            "153",
            "169",
            "170",
            "171",
            "172",
            "173",
            "174",
            "175",
            "176",
            "177",
            "178",
            "179",
            "180",
            "181",
            "182",
            "183",
            "184",
            "185",
            "186",
            "187",
            "188",
            "189",
            "190",
            "191",
            "192",
            "193",
            "194",
            "195",
            "196",
            "197",
            "198",
            "199",
            "200",
            "201",
            "202",
            "203",
            "204",
            "205",
            "206",
            "207",
            "208",
            "209",
            "210",
            "211",
            "212",
            "213",
            "214",
            "215",
            "216",
            "217",
            "218",
            "219",
            "220",
            "221",
            "222",
            "223",
            "224",
            "225",
            "226",
            "227",
            "228",
            "229",
            "230",
            "231",
            "232"
          ],
          "num": 70
        }
      ],
      "diff": "diff --git a/src/java/org/apache/commons/lang/time/DateUtils.java b/src/java/org/apache/commons/lang/time/DateUtils.java\nindex dfbe70a..9cfd761 100644\n--- a/src/java/org/apache/commons/lang/time/DateUtils.java\n+++ b/src/java/org/apache/commons/lang/time/DateUtils.java\n@@ -31,7 +31,7 @@\n  * @author \u003ca href\u003d\"mailto:ggregory@seagullsw.com\"\u003eGary Gregory\u003c/a\u003e\n  * @author Phil Steitz\n  * @since 2.0\n- * @version $Id: DateUtils.java,v 1.32 2004/10/13 21:48:00 scolebourne Exp $\n+ * @version $Id: DateUtils.java,v 1.33 2004/10/16 17:08:42 scolebourne Exp $\n  */\n public class DateUtils {\n     \n@@ -125,8 +125,8 @@\n      * 28 Mar 2002 13:45 and 12 Mar 2002 13:45 would return false.\n      * \u003c/p\u003e\n      * \n-     * @param date1  the first date, not null\n-     * @param date2  the second date, not null\n+     * @param date1  the first date, not altered, not null\n+     * @param date2  the second date, not altered, not null\n      * @return true if they represent the same day\n      * @throws IllegalArgumentException if either date is \u003ccode\u003enull\u003c/code\u003e\n      * @since 2.1\n@@ -142,7 +142,6 @@\n         return isSameDay(cal1, cal2);\n     }\n \n-    //-----------------------------------------------------------------------\n     /**\n      * \u003cp\u003eChecks if two calendar objects are on the same day ignoring time.\u003c/p\u003e\n      *\n@@ -150,8 +149,8 @@\n      * 28 Mar 2002 13:45 and 12 Mar 2002 13:45 would return false.\n      * \u003c/p\u003e\n      * \n-     * @param cal1  the first calendar, not null\n-     * @param cal2  the second calendar, not null\n+     * @param cal1  the first calendar, not altered, not null\n+     * @param cal2  the second calendar, not altered, not null\n      * @return true if they represent the same day\n      * @throws IllegalArgumentException if either calendar is \u003ccode\u003enull\u003c/code\u003e\n      * @since 2.1\n@@ -167,6 +166,70 @@\n \n     //-----------------------------------------------------------------------\n     /**\n+     * \u003cp\u003eChecks if two date objects represent the same instant in time.\u003c/p\u003e\n+     *\n+     * \u003cp\u003eThis method compares the long millisecond time of the two objects.\u003c/p\u003e\n+     * \n+     * @param date1  the first date, not altered, not null\n+     * @param date2  the second date, not altered, not null\n+     * @return true if they represent the same millisecond instant\n+     * @throws IllegalArgumentException if either date is \u003ccode\u003enull\u003c/code\u003e\n+     * @since 2.1\n+     */\n+    public static boolean isSameInstant(Date date1, Date date2) {\n+        if (date1 \u003d\u003d null || date2 \u003d\u003d null) {\n+            throw new IllegalArgumentException(\"The date must not be null\");\n+        }\n+        return (date1.getTime() \u003d\u003d date2.getTime());\n+    }\n+\n+    /**\n+     * \u003cp\u003eChecks if two calendar objects represent the same instant in time.\u003c/p\u003e\n+     *\n+     * \u003cp\u003eThis method compares the long millisecond time of the two objects.\u003c/p\u003e\n+     * \n+     * @param cal1  the first calendar, not altered, not null\n+     * @param cal2  the second calendar, not altered, not null\n+     * @return true if they represent the same millisecond instant\n+     * @throws IllegalArgumentException if either date is \u003ccode\u003enull\u003c/code\u003e\n+     * @since 2.1\n+     */\n+    public static boolean isSameInstant(Calendar cal1, Calendar cal2) {\n+        if (cal1 \u003d\u003d null || cal2 \u003d\u003d null) {\n+            throw new IllegalArgumentException(\"The date must not be null\");\n+        }\n+        return (cal1.getTime().getTime() \u003d\u003d cal2.getTime().getTime());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * \u003cp\u003eChecks if two calendar objects represent the same local time.\u003c/p\u003e\n+     *\n+     * \u003cp\u003eThis method compares the values of the fields of the two objects.\n+     * In addition, both calendars must be the same of the same type.\u003c/p\u003e\n+     * \n+     * @param cal1  the first calendar, not altered, not null\n+     * @param cal2  the second calendar, not altered, not null\n+     * @return true if they represent the same millisecond instant\n+     * @throws IllegalArgumentException if either date is \u003ccode\u003enull\u003c/code\u003e\n+     * @since 2.1\n+     */\n+    public static boolean isSameLocalTime(Calendar cal1, Calendar cal2) {\n+        if (cal1 \u003d\u003d null || cal2 \u003d\u003d null) {\n+            throw new IllegalArgumentException(\"The date must not be null\");\n+        }\n+        return (cal1.get(Calendar.MILLISECOND) \u003d\u003d cal2.get(Calendar.MILLISECOND) \u0026\u0026\n+                cal1.get(Calendar.SECOND) \u003d\u003d cal2.get(Calendar.SECOND) \u0026\u0026\n+                cal1.get(Calendar.MINUTE) \u003d\u003d cal2.get(Calendar.MINUTE) \u0026\u0026\n+                cal1.get(Calendar.HOUR) \u003d\u003d cal2.get(Calendar.HOUR) \u0026\u0026\n+                cal1.get(Calendar.DAY_OF_YEAR) \u003d\u003d cal2.get(Calendar.DAY_OF_YEAR) \u0026\u0026\n+                cal1.get(Calendar.YEAR) \u003d\u003d cal2.get(Calendar.YEAR) \u0026\u0026\n+                cal1.get(Calendar.ERA) \u003d\u003d cal2.get(Calendar.ERA) \u0026\u0026\n+                cal1.getClass() \u003d\u003d cal2.getClass());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n      * \u003cp\u003eRound this date, leaving the field specified as the most\n      * significant field.\u003c/p\u003e\n      *\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [5745,6467]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [6473,7227]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [7311,8637]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        }
      ]
    }
  ],
  "inducing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [
        "isSameInstant",
        "isSameLocalTime"
      ],
      "num": 2
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  },
  "trigger_tests": [
    {
      "test_class": "org.apache.commons.lang.CharUtilsPerfTest",
      "exception": "java.lang.Exception",
      "message": "No runnable methods"
    },
    {
      "test_class": "org.apache.commons.lang.EntitiesPerformanceTest",
      "test_function": "testEscapePrimitive",
      "exception": "java.lang.NullPointerExceptio",
      "message": ""
    },
    {
      "test_class": "org.apache.commons.lang.EntitiesPerformanceTest",
      "test_function": "testEscapeBinary",
      "exception": "java.lang.NullPointerExceptio",
      "message": ""
    },
    {
      "test_class": "org.apache.commons.lang.EntitiesPerformanceTest",
      "test_function": "testEscapeLookup",
      "exception": "java.lang.NullPointerExceptio",
      "message": ""
    },
    {
      "test_class": "org.apache.commons.lang.EntitiesPerformanceTest",
      "test_function": "testUnescapeHash",
      "exception": "java.lang.NullPointerExceptio",
      "message": ""
    },
    {
      "test_class": "org.apache.commons.lang.EntitiesPerformanceTest",
      "test_function": "testUnescapeTree",
      "exception": "java.lang.NullPointerExceptio",
      "message": ""
    },
    {
      "test_class": "org.apache.commons.lang.EntitiesPerformanceTest",
      "test_function": "testUnescapeBinary",
      "exception": "java.lang.NullPointerExceptio",
      "message": ""
    },
    {
      "test_class": "org.apache.commons.lang.EntitiesPerformanceTest",
      "test_function": "testEscapeHash",
      "exception": "java.lang.NullPointerExceptio",
      "message": ""
    },
    {
      "test_class": "org.apache.commons.lang.EntitiesPerformanceTest",
      "test_function": "testEscapeTree",
      "exception": "java.lang.NullPointerExceptio",
      "message": ""
    },
    {
      "test_class": "org.apache.commons.lang.EntitiesPerformanceTest",
      "test_function": "testLookupBinary",
      "exception": "java.lang.NullPointerExceptio",
      "message": ""
    },
    {
      "test_class": "org.apache.commons.lang.builder.ToStringBuilderTest",
      "test_function": "testReflectionHierarchyArrayList",
      "exception": "junit.framework.ComparisonFailure",
      "message": "expected:\u003c...8d6542[elementData\u003d{[\u003cnull\u003e,\u003cnull\u003e,\u003cnull\u003e,\u003cnull\u003e,\u003cnull\u003e,\u003cnull\u003e,\u003cnull\u003e,\u003cnull\u003e,\u003cnull\u003e,\u003cnull\u003e]},size\u003d0,modCount\u003d0]\u003e but was:\u003c...8d6542[elementData\u003d{[]},size\u003d0,modCount\u003d0]\u003e"
    },
    {
      "test_class": "org.apache.commons.lang.enum.EnumTest",
      "test_function": "testColorEnumEqualsWithDifferentClassLoaders",
      "exception": "java.lang.ClassNotFoundException",
      "message": "org.apache.commons.lang.enum.ColorEnum"
    },
    {
      "test_class": "org.apache.commons.lang.enums.EnumTest",
      "test_function": "testColorEnumEqualsWithDifferentClassLoaders",
      "exception": "java.lang.ClassNotFoundException",
      "message": "org.apache.commons.lang.enums.ColorEnum"
    },
    {
      "test_class": "org.apache.commons.lang.time.FastDateFormatTest",
      "test_function": "testFormat",
      "exception": "junit.framework.ComparisonFailure",
      "message": "expected:\u003cAD AD AD AD 2003 [2003 03 20]03 January Jan 01 1 ...\u003e but was:\u003cAD AD AD AD 2003 [03 03 ]03 January Jan 01 1 ...\u003e"
    }
  ],
  "fixing_changes": [],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  }
}