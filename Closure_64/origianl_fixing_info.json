{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "/home/liumengjiao/Desktop/CI/Benchmark/data/changesInfo/",
  "properties": {
    "trigger.tests": "com.google.javascript.jscomp.CommandLineRunnerTest::testES5StrictUseStrictMultipleInputs",
    "test.dir": "test",
    "clz.modified": "com.google.javascript.jscomp.Compiler",
    "src.dir": "src"
  },
  "timeoutSecond": 100,
  "proj": "Closure",
  "id": "64",
  "workingDir": "../bugs/Closure_64_buggy",
  "buggyCommit": "620fc21fa289cf0fda52c3d310a41d9fc2103be9",
  "inducingCommit": "524c758183be741ff1519acfa8a4bf714dd2c4cd",
  "originalCommit": "4434b45f18d2e74ec809a9bbeb67571b604ce6d0",
  "bug_name": "Closure_64",
  "derive": "defects4j",
  "original_fixing_commit": "de726510af4329fb8eeb8a54b2d93d8d37c87545",
  "buildFiles_changed": false,
  "regression": false,
  "inducing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "com.google.javascript.jscomp.AbstractCommandLineRunner:setRunOptions:[CompilerOptions options]:void"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "com.google.javascript.jscomp.AbstractCommandLineRunner:setRunOptions:[CompilerOptions options]:void"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "243",
            "246",
            "249"
          ],
          "num": 3
        },
        {
          "qualified_names": [
            "243",
            "246",
            "249"
          ],
          "num": 3
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java b/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\nindex e5a3025..1e90b46 100644\n--- a/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\n+++ b/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\n@@ -240,13 +240,13 @@\n     if (config.languageIn.length() \u003e 0) {\n       if (config.languageIn.equals(\"ECMASCRIPT5_STRICT\") ||\n           config.languageIn.equals(\"ES5_STRICT\")) {\n-        options.languageIn \u003d CompilerOptions.LanguageMode.ECMASCRIPT5;\n+        options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n       } else if (config.languageIn.equals(\"ECMASCRIPT5\") ||\n           config.languageIn.equals(\"ES5\")) {\n-        options.languageIn \u003d CompilerOptions.LanguageMode.ECMASCRIPT5;\n+        options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n       } else if (config.languageIn.equals(\"ECMASCRIPT3\") ||\n                  config.languageIn.equals(\"ES3\")) {\n-        options.languageIn \u003d CompilerOptions.LanguageMode.ECMASCRIPT3;\n+        options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT3);\n       } else {\n         throw new FlagUsageException(\"Unknown language `\" + config.languageIn +\n                                      \"\u0027 specified.\");\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [8112,8176]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [8290,8354]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [8475,8539]"
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [8112,8174]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [8288,8350]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [8471,8533]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/jscomp/CodeGenerator.java",
        "src/com/google/javascript/jscomp/CodeGenerator.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [
            "com.google.javascript.jscomp.CodeGenerator:tagAsStrict:[]:void"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "62"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "63",
            "64",
            "65",
            "66",
            "67",
            "68",
            "69"
          ],
          "num": 7
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 668fe51..7fa0bf6 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -60,6 +60,13 @@\n     this(consumer, null);\n   }\n \n+  /**\n+   * Insert a ECMASCRIPT 5 strict annotation.\n+   */\n+  public void tagAsStrict() {\n+    add(\"\u0027use strict\u0027;\");\n+  }\n+\n   void add(String str) {\n     cc.add(str);\n   }\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [2035,2150]"
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/jscomp/CodePrinter.java",
        "src/com/google/javascript/jscomp/CodePrinter.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "com.google.javascript.jscomp.CodePrinter:toSource:[Node root, Format outputFormat, boolean lineBreak, int lineLengthThreshold, SourceMap sourceMap, SourceMap.DetailLevel sourceMapDetailLevel, Charset outputCharset]:String",
            "com.google.javascript.jscomp.CodePrinter\\$Builder:build:[]:String"
          ],
          "num": 2
        },
        {
          "qualified_names": [
            "com.google.javascript.jscomp.CodePrinter\\$Builder:setTagAsStrict:[boolean tagAsStrict]:Builder",
            "com.google.javascript.jscomp.CodePrinter\\$Builder:build:[]:String",
            "com.google.javascript.jscomp.CodePrinter:toSource:[Node root, Format outputFormat, boolean lineBreak, int lineLengthThreshold, SourceMap sourceMap, SourceMap.DetailLevel sourceMapDetailLevel, Charset outputCharset, boolean tagAsStrict]:String"
          ],
          "num": 3
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "493",
            "570",
            "586",
            "603",
            "617"
          ],
          "num": 5
        },
        {
          "qualified_names": [
            "494",
            "572",
            "573",
            "574",
            "575",
            "576",
            "577",
            "578",
            "579",
            "595",
            "612",
            "613",
            "628",
            "629",
            "630",
            "631",
            "632"
          ],
          "num": 17
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/jscomp/CodePrinter.java b/src/com/google/javascript/jscomp/CodePrinter.java\nindex 06b710f..e5ce384 100644\n--- a/src/com/google/javascript/jscomp/CodePrinter.java\n+++ b/src/com/google/javascript/jscomp/CodePrinter.java\n@@ -491,6 +491,7 @@\n     // Specify a charset to use when outputting source code.  If null,\n     // then just output ASCII.\n     private Charset outputCharset \u003d null;\n+    private boolean tagAsStrict;\n \n     /**\n      * Sets the root node from which to generate the source code.\n@@ -568,6 +569,14 @@\n     }\n \n     /**\n+     * Set whether the output should be tags as ECMASCRIPT 5 Strict.\n+     */\n+    Builder setTagAsStrict(boolean tagAsStrict) {\n+      this.tagAsStrict \u003d tagAsStrict;\n+      return this;\n+    }\n+\n+    /**\n      * Generates the source code and returns it.\n      */\n     String build() {\n@@ -583,7 +592,7 @@\n               : Format.COMPACT;\n \n       return toSource(root, outputFormat, lineBreak, lineLengthThreshold,\n-          sourceMap, sourceMapDetailLevel, outputCharset);\n+          sourceMap, sourceMapDetailLevel, outputCharset, tagAsStrict);\n     }\n   }\n \n@@ -600,7 +609,8 @@\n                                  boolean lineBreak,  int lineLengthThreshold,\n                                  SourceMap sourceMap,\n                                  SourceMap.DetailLevel sourceMapDetailLevel,\n-                                 Charset outputCharset) {\n+                                 Charset outputCharset,\n+                                 boolean tagAsStrict) {\n     Preconditions.checkState(sourceMapDetailLevel !\u003d null);\n \n     boolean createSourceMap \u003d (sourceMap !\u003d null);\n@@ -615,6 +625,11 @@\n         outputFormat \u003d\u003d Format.TYPED\n         ? new TypedCodeGenerator(mcp, outputCharset)\n         : new CodeGenerator(mcp, outputCharset);\n+\n+    if (tagAsStrict) {\n+      cg.tagAsStrict();\n+    }\n+\n     cg.add(root);\n     mcp.endFile();\n \n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldDeclaration [14881,14909]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [16916,17109]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SingleVariableDeclaration [18108,18127]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [18712,18760]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: tagAsStrict [17620,17631]"
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/jscomp/Compiler.java",
        "src/com/google/javascript/jscomp/Compiler.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "com.google.javascript.jscomp.Compiler:getParserConfig:[]:Config",
            "com.google.javascript.jscomp.Compiler:acceptEcmaScript5:[]:boolean",
            "com.google.javascript.jscomp.Compiler:LanguageMode:[]:LanguageMode",
            "com.google.javascript.jscomp.Compiler:toSource:[Node n, SourceMap sourceMap]:String"
          ],
          "num": 4
        },
        {
          "qualified_names": [
            "com.google.javascript.jscomp.Compiler:toSource:[Node n, SourceMap sourceMap]:String",
            "com.google.javascript.jscomp.Compiler:languageMode:[]:LanguageMode",
            "com.google.javascript.jscomp.Compiler:getParserConfig:[]:Config",
            "com.google.javascript.jscomp.Compiler:acceptEcmaScript5:[]:boolean"
          ],
          "num": 4
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "1445",
            "1646",
            "1649",
            "1650",
            "1662"
          ],
          "num": 5
        },
        {
          "qualified_names": [
            "1446",
            "1447",
            "1648",
            "1651",
            "1652",
            "1664"
          ],
          "num": 6
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/jscomp/Compiler.java b/src/com/google/javascript/jscomp/Compiler.java\nindex 21adb25..c8e1da8 100644\n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n@@ -1443,6 +1443,8 @@\n     builder.setLineBreak(options.lineBreak);\n     builder.setSourceMap(sourceMap);\n     builder.setSourceMapDetailLevel(options.sourceMapDetailLevel);\n+    builder.setTagAsStrict(\n+        options.getLanguageOut() \u003d\u003d LanguageMode.ECMASCRIPT5_STRICT);\n \n     Charset charset \u003d options.outputCharset !\u003d null ?\n         Charset.forName(options.outputCharset) : null;\n@@ -1643,11 +1645,11 @@\n \n   @Override\n   public boolean acceptEcmaScript5() {\n-    return options.languageIn \u003d\u003d LanguageMode.ECMASCRIPT5;\n+    return options.getLanguageIn() \u003d\u003d LanguageMode.ECMASCRIPT5;\n   }\n \n-  public LanguageMode LanguageMode() {\n-    return options.languageIn;\n+  public LanguageMode languageMode() {\n+    return options.getLanguageIn();\n   }\n \n   @Override\n@@ -1659,7 +1661,7 @@\n   Config getParserConfig() {\n     if (parserConfig \u003d\u003d null) {\n       Config.LanguageMode mode;\n-      switch (options.languageIn) {\n+      switch (options.getLanguageIn()) {\n         case ECMASCRIPT3:\n           mode \u003d Config.LanguageMode.ECMASCRIPT3;\n           break;\n",
      "operations": [
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [43716,43809]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ReturnStatement [49798,49829]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodInvocation [49697,49720]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodInvocation [50050,50073]"
        },
        {
          "type": "delete-node",
          "from": "QualifiedName: options.languageIn [49599,49617]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ReturnStatement [49695,49721]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "QualifiedName: options.languageIn [49942,49960]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/jscomp/CompilerOptions.java",
        "src/com/google/javascript/jscomp/CompilerOptions.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "com.google.javascript.jscomp.CompilerOptions:setLooseTypes:[boolean looseTypes]:void"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "com.google.javascript.jscomp.CompilerOptions:setLanguageIn:[LanguageMode languageIn]:void",
            "com.google.javascript.jscomp.CompilerOptions:setLooseTypes:[boolean looseTypes]:void",
            "com.google.javascript.jscomp.CompilerOptions:getLanguageOut:[]:LanguageMode",
            "com.google.javascript.jscomp.CompilerOptions:getLanguageIn:[]:LanguageMode"
          ],
          "num": 4
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "44",
            "1112"
          ],
          "num": 2
        },
        {
          "qualified_names": [
            "44",
            "46",
            "47",
            "48",
            "49",
            "1117",
            "1118",
            "1119",
            "1120",
            "1121",
            "1122",
            "1123",
            "1124",
            "1125",
            "1126",
            "1127",
            "1128",
            "1129",
            "1130",
            "1131",
            "1132"
          ],
          "num": 21
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/jscomp/CompilerOptions.java b/src/com/google/javascript/jscomp/CompilerOptions.java\nindex f3ae0a8..5b66d52 100644\n--- a/src/com/google/javascript/jscomp/CompilerOptions.java\n+++ b/src/com/google/javascript/jscomp/CompilerOptions.java\n@@ -41,8 +41,12 @@\n   /**\n    * The JavaScript language version accepted.\n    */\n-  LanguageMode languageIn;\n+  private LanguageMode languageIn;\n \n+  /**\n+   * The JavaScript language version accepted.\n+   */\n+  private LanguageMode languageOut;\n \n   /**\n    * Whether the compiler handles `const\u0027 keyword or not.\n@@ -1110,6 +1114,22 @@\n   }\n \n   /**\n+   * Sets how goog.tweak calls are processed.\n+   */\n+  public void setLanguageIn(LanguageMode languageIn) {\n+    this.languageIn \u003d languageIn;\n+    this.languageOut \u003d languageIn;\n+  }\n+\n+  public LanguageMode getLanguageIn() {\n+    return languageIn;\n+  }\n+\n+  public LanguageMode getLanguageOut() {\n+    return languageOut;\n+  }\n+\n+  /**\n    * Whether to include \"undefined\" in the default types.\n    *   For example:\n    *     \"{Object}\" is normally \"Object|null\" becomes \"Object|null|undefined\"\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldDeclaration [1408,1500]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [33210,33393]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [33397,33461]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [33465,33531]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: private [1372,1379]"
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "src/com/google/javascript/jscomp/DefaultPassConfig.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "com.google.javascript.jscomp.DefaultPassConfig:getChecks:[]:List\u003cPassFactory\u003e"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "com.google.javascript.jscomp.DefaultPassConfig:getChecks:[]:List\u003cPassFactory\u003e"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "269"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "269"
          ],
          "num": 1
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/jscomp/DefaultPassConfig.java b/src/com/google/javascript/jscomp/DefaultPassConfig.java\nindex 7e890be..2a48673 100644\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n@@ -266,7 +266,7 @@\n       checks.add(checkSuspiciousProperties);\n     }\n \n-    if (options.languageIn \u003d\u003d LanguageMode.ECMASCRIPT5_STRICT\n+    if (options.getLanguageIn() \u003d\u003d LanguageMode.ECMASCRIPT5_STRICT\n         || options.checkCaja\n         || options.checkEs5Strict) {\n       checks.add(checkStrictMode);\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodInvocation [8894,8917]"
        },
        {
          "type": "delete-node",
          "from": "QualifiedName: options.languageIn [8894,8912]",
          "to": ""
        }
      ]
    }
  ],
  "inducing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [
        "com.google.javascript.jscomp.CodeGenerator:tagAsStrict:[]:void",
        "com.google.javascript.jscomp.CompilerOptions:setLanguageIn:[LanguageMode languageIn]:void",
        "com.google.javascript.jscomp.Compiler:languageMode:[]:LanguageMode",
        "com.google.javascript.jscomp.CodePrinter\\$Builder:setTagAsStrict:[boolean tagAsStrict]:Builder",
        "com.google.javascript.jscomp.CompilerOptions:getLanguageIn:[]:LanguageMode",
        "com.google.javascript.jscomp.CodePrinter:toSource:[Node root, Format outputFormat, boolean lineBreak, int lineLengthThreshold, SourceMap sourceMap, SourceMap.DetailLevel sourceMapDetailLevel, Charset outputCharset, boolean tagAsStrict]:String",
        "com.google.javascript.jscomp.CompilerOptions:getLanguageOut:[]:LanguageMode"
      ],
      "num": 7
    },
    "delete_functions": {
      "qualified_names": [
        "com.google.javascript.jscomp.Compiler:LanguageMode:[]:LanguageMode",
        "com.google.javascript.jscomp.CodePrinter:toSource:[Node root, Format outputFormat, boolean lineBreak, int lineLengthThreshold, SourceMap sourceMap, SourceMap.DetailLevel sourceMapDetailLevel, Charset outputCharset]:String"
      ],
      "num": 2
    }
  },
  "trigger_tests": [
    {
      "test_class": "com.google.javascript.jscomp.CommandLineRunnerTest",
      "test_function": "testES5StrictUseStrictMultipleInputs",
      "assertion_line": "803",
      "exception": "junit.framework.AssertionFailedError",
      "message": "expected:\u003c17\u003e but was:\u003c-1\u003e"
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/jscomp/Compiler.java",
        "src/com/google/javascript/jscomp/Compiler.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "com.google.javascript.jscomp.Compiler:toSource:[Node n, SourceMap sourceMap]:String",
            "com.google.javascript.jscomp.Compiler:toSource:[final CodeBuilder cb, final int inputSeqNum, final Node root]:void",
            "com.google.javascript.jscomp.Compiler:toSource:[Node n]:String"
          ],
          "num": 3
        },
        {
          "qualified_names": [
            "com.google.javascript.jscomp.Compiler:toSource:[final CodeBuilder cb, final int inputSeqNum, final Node root]:void",
            "com.google.javascript.jscomp.Compiler:toSource:[Node n]:String",
            "com.google.javascript.jscomp.Compiler:toSource:[Node n, SourceMap sourceMap, boolean firstOutput]:String"
          ],
          "num": 3
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "1430",
            "1459",
            "1465",
            "1471"
          ],
          "num": 4
        },
        {
          "qualified_names": [
            "1430",
            "1431",
            "1432",
            "1461",
            "1467",
            "1473"
          ],
          "num": 6
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/jscomp/Compiler.java b/src/com/google/javascript/jscomp/Compiler.java\nindex a4a41a8..45d88ba 100644\n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n@@ -1427,7 +1427,9 @@\n               cb.getLineIndex(), cb.getColumnIndex());\n         }\n \n-        String code \u003d toSource(root, sourceMap);\n+        // if LanguageMode is ECMASCRIPT5_STRICT, only print \u0027use strict\u0027\n+        // for the first input file\n+        String code \u003d toSource(root, sourceMap, inputSeqNum \u003d\u003d 0);\n         if (!code.isEmpty()) {\n           cb.append(code);\n \n@@ -1456,19 +1458,19 @@\n   @Override\n   String toSource(Node n) {\n     initCompilerOptionsIfTesting();\n-    return toSource(n, null);\n+    return toSource(n, null, true);\n   }\n \n   /**\n    * Generates JavaScript source code for an AST.\n    */\n-  private String toSource(Node n, SourceMap sourceMap) {\n+  private String toSource(Node n, SourceMap sourceMap, boolean firstOutput) {\n     CodePrinter.Builder builder \u003d new CodePrinter.Builder(n);\n     builder.setPrettyPrint(options.prettyPrint);\n     builder.setLineBreak(options.lineBreak);\n     builder.setSourceMap(sourceMap);\n     builder.setSourceMapDetailLevel(options.sourceMapDetailLevel);\n-    builder.setTagAsStrict(\n+    builder.setTagAsStrict(firstOutput \u0026\u0026\n         options.getLanguageOut() \u003d\u003d LanguageMode.ECMASCRIPT5_STRICT);\n     builder.setLineLengthThreshold(options.lineLengthThreshold);\n \n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "SingleVariableDeclaration [44190,44209]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "BooleanLiteral: true [44061,44065]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "InfixExpression [44500,44582]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: firstOutput [44500,44511]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "INFIX_EXPRESSION_OPERATOR: \u0026\u0026 [44512,44514]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "InfixExpression [43138,43154]"
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [
        "com.google.javascript.jscomp.Compiler:toSource:[Node n, SourceMap sourceMap, boolean firstOutput]:String"
      ],
      "num": 1
    },
    "delete_functions": {
      "qualified_names": [
        "com.google.javascript.jscomp.Compiler:toSource:[Node n, SourceMap sourceMap]:String"
      ],
      "num": 1
    }
  },
  "patch_changed_mths": {
    "qualified_names": [],
    "num": 0
  }
}