{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "/home/liumengjiao/Desktop/CI/Benchmark/data/changesInfo/",
  "properties": {
    "trigger.tests": "org.apache.commons.lang.WordUtilsTest::testAbbreviate",
    "test.dir": "src/test",
    "clz.modified": "org.apache.commons.lang.WordUtils",
    "src.dir": "src/java"
  },
  "timeoutSecond": 100,
  "proj": "Lang",
  "id": "45",
  "workingDir": "../bugs/Lang_45_buggy",
  "buggyCommit": "cfff06bead88e2c1bb164285f89503a919e0e27f",
  "inducingCommit": "8688d11849b9335f63210dd9018545b3c3a907d8",
  "originalCommit": "ea2db053ec7d3616cf2db84bff60e2f8da17fe75",
  "bug_name": "Lang_45",
  "derive": "defects4j",
  "original_fixing_commit": "d95fcd8e24568b4f9d3cb9da922a4029e293c793",
  "buildFiles_changed": false,
  "regression": true,
  "inducing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/lang/WordUtils.java",
        "src/java/org/apache/commons/lang/WordUtils.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [
            "org.apache.commons.lang.WordUtils:abbreviate:[String str, int lower, int upper, String appendToEnd]:String"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "583"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "584",
            "585",
            "586",
            "587",
            "588",
            "589",
            "590",
            "591",
            "592",
            "593",
            "594",
            "595",
            "596",
            "597",
            "598",
            "599",
            "600",
            "601",
            "602",
            "603",
            "604",
            "605",
            "606",
            "607",
            "608",
            "609",
            "610",
            "611",
            "612",
            "613",
            "614",
            "615",
            "616",
            "617",
            "618",
            "619",
            "620",
            "621",
            "622",
            "623",
            "624",
            "625",
            "626",
            "627",
            "628",
            "629",
            "630",
            "631",
            "632",
            "633",
            "634",
            "635",
            "636",
            "637",
            "638"
          ],
          "num": 55
        }
      ],
      "diff": "diff --git a/src/java/org/apache/commons/lang/WordUtils.java b/src/java/org/apache/commons/lang/WordUtils.java\nindex 1f133af..865d7a3 100644\n--- a/src/java/org/apache/commons/lang/WordUtils.java\n+++ b/src/java/org/apache/commons/lang/WordUtils.java\n@@ -581,4 +581,59 @@\n         return false;\n     }\n \n+    //-----------------------------------------------------------------------\n+    /**\n+     * Abbreviates a string nicely.\n+     * \n+     * This method searches for the first space after the lower limit and abbreviates\n+     * the String there. It will also append any String passed as a parameter\n+     * to the end of the String. The upper limit can be specified to forcibly\n+     * abbreviate a String.\n+     * \n+     * @param str         the string to be abbreviated. If null is passed, null is returned.\n+     *                    If the empty String is passed, the empty string is returned.\n+     * @param lower       the lower limit.\n+     * @param upper       the upper limit; specify -1 if no limit is desired.\n+     *                    If the upper limit is lower than the lower limit, it will be\n+     *                    adjusted to be the same as the lower limit.\n+     * @param appendToEnd String to be appended to the end of the abbreviated string.\n+     *                    This is appended ONLY if the string was indeed abbreviated.\n+     *                    The append does not count towards the lower or upper limits.\n+     * @return the abbreviated String.\n+     */\n+    public static String abbreviate(String str, int lower, int upper, String appendToEnd) {\n+        // initial parameter checks\n+        if (str \u003d\u003d null) {\n+            return null;\n+        }\n+        if (str.length() \u003d\u003d 0) {\n+            return StringUtils.EMPTY;\n+        }\n+\n+        // if the upper value is -1 (i.e. no limit) or is greater\n+        // than the length of the string, set to the length of the string\n+        if (upper \u003d\u003d -1 || upper \u003e str.length()) {\n+            upper \u003d str.length();\n+        }\n+        // if upper is less than lower, raise it to lower\n+        if (upper \u003c lower) {\n+            upper \u003d lower;\n+        }\n+\n+        StringBuffer result \u003d new StringBuffer();\n+        int index \u003d StringUtils.indexOf(str, \" \", lower);\n+        if (index \u003d\u003d -1) {\n+            result.append(str.substring(0, upper));\n+            // only if abbreviation has occured do we append the appendToEnd value\n+            if (upper !\u003d str.length()) result.append(StringUtils.defaultString(appendToEnd));\n+        } else if (index \u003e upper) {\n+            result.append(str.substring(0, upper));\n+            result.append(StringUtils.defaultString(appendToEnd));\n+        } else {\n+            result.append(str.substring(0, index));\n+            result.append(StringUtils.defaultString(appendToEnd));\n+        }\n+        return result.toString();\n+    }\n+\n }\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [22845,25271]"
        }
      ]
    }
  ],
  "inducing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [
        "org.apache.commons.lang.WordUtils:abbreviate:[String str, int lower, int upper, String appendToEnd]:String"
      ],
      "num": 1
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  },
  "trigger_tests": [
    {
      "test_class": "org.apache.commons.lang.WordUtilsTest",
      "test_function": "testAbbreviate",
      "assertion_line": "390",
      "exception": "java.lang.StringIndexOutOfBoundsException",
      "message": "String index out of range: 15"
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/lang/WordUtils.java",
        "src/java/org/apache/commons/lang/WordUtils.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.lang.WordUtils:abbreviate:[String str, int lower, int upper, String appendToEnd]:String"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "org.apache.commons.lang.WordUtils:abbreviate:[String str, int lower, int upper, String appendToEnd]:String"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "613"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "614",
            "615",
            "616",
            "617",
            "618"
          ],
          "num": 5
        }
      ],
      "diff": "diff --git a/src/java/org/apache/commons/lang/WordUtils.java b/src/java/org/apache/commons/lang/WordUtils.java\nindex 748b547..91c6615 100644\n--- a/src/java/org/apache/commons/lang/WordUtils.java\n+++ b/src/java/org/apache/commons/lang/WordUtils.java\n@@ -611,6 +611,11 @@\n             return StringUtils.EMPTY;\n         }\n \n+        // if the lower value is greater than the length of the string,\n+        // set to the length of the string\n+        if (lower \u003e str.length()) {\n+            lower \u003d str.length();    \n+        }\n         // if the upper value is -1 (i.e. no limit) or is greater\n         // than the length of the string, set to the length of the string\n         if (upper \u003d\u003d -1 || upper \u003e str.length()) {\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [24348,24423]"
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  },
  "patch_changed_mths": {
    "qualified_names": [
      "org.apache.commons.lang.WordUtils:abbreviate(Ljava/lang/String;IILjava/lang/String;)Ljava/lang/String;"
    ],
    "num": 1
  }
}