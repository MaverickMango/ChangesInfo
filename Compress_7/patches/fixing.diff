diff --git a/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java b/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java
index 069b039..8aba2e2 100644
--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java
+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java
@@ -95,11 +95,11 @@
         int          end = offset + length;
 
         for (int i = offset; i < end; ++i) {
-            if (buffer[i] == 0) { // Trailing null
+            byte b = buffer[i];
+            if (b == 0) { // Trailing null
                 break;
             }
-
-            result.append((char) buffer[i]);
+            result.append((char) (b & 0xFF)); // Allow for sign-extension
         }
 
         return result.toString();
diff --git a/src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java b/src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java
index bb08897..01dfb3f 100644
--- a/src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java
+++ b/src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java
@@ -116,4 +116,19 @@
         } catch (IllegalArgumentException expected) {
         }
     }
+    
+    public void testRoundTripNames(){
+        checkName("");
+        checkName("The quick brown fox\n");
+        checkName("\177");
+        // checkName("\0"); // does not work, because NUL is ignored
+        // COMPRESS-114
+        checkName("0302-0601-3���F06�W220�ZB�LALALA����������CAN��DC���04�060302�MOE.model");
+    }
+
+    private void checkName(String string) {
+        byte buff[] = new byte[100];
+        int len = TarUtils.formatNameBytes(string, buff, 0, buff.length);
+        assertEquals(string, TarUtils.parseName(buff, 0, len));
+    }
 }
