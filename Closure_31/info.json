{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "data/changesInfo/",
  "timeoutSecond": 300,
  "proj": "Closure",
  "id": "31",
  "workingDir": "../bugs/Closure_31_buggy",
  "inducingCommit": "a4c526dae1537f027f429145656ffb849699c1fc",
  "originalCommit": "187a77990aeb8028d1f7315add4c8fe56b3d79d9",
  "bug_name": "Closure_31",
  "derive": "defects4j",
  "original_fixing_commit": "0a670cb51fd56c12c19f98884c9513792ebc3f76",
  "buildFiles_changed": false,
  "inducing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "setRunOptions"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "setRunOptions"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "228"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "229",
            "234"
          ],
          "num": 2
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java b/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\nindex 0038434..687a8f0 100644\n--- a/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\n+++ b/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\n@@ -226,10 +226,12 @@\n     options.setTweakProcessing(config.tweakProcessing);\n     createDefineOrTweakReplacements(config.tweak, options, true);\n \n+    // Dependency options\n     options.setManageClosureDependencies(config.manageClosureDependencies);\n     if (config.closureEntryPoints.size() \u003e 0) {\n       options.setManageClosureDependencies(config.closureEntryPoints);\n     }\n+\n     options.devMode \u003d config.jscompDevMode;\n     options.setCodingConvention(config.codingConvention);\n     options.setSummaryDetailLevel(config.summaryDetailLevel);\n",
      "operations": []
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/jscomp/CompilationLevel.java",
        "src/com/google/javascript/jscomp/CompilationLevel.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [],
          "num": 0
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "100",
            "135"
          ],
          "num": 2
        },
        {
          "qualified_names": [
            "101",
            "137"
          ],
          "num": 2
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/jscomp/CompilationLevel.java b/src/com/google/javascript/jscomp/CompilationLevel.java\nindex 3ca5c87..392f098 100644\n--- a/src/com/google/javascript/jscomp/CompilationLevel.java\n+++ b/src/com/google/javascript/jscomp/CompilationLevel.java\n@@ -98,6 +98,7 @@\n \n     // Does not call applyBasicCompilationOptions(options) because the call to\n     // skipAllCompilerPasses() cannot be easily undone.\n+    options.dependencyOptions.setDependencySorting(true);\n     options.closurePass \u003d true;\n     options.setRenamingPolicy(\n         VariableRenamingPolicy.LOCAL, PropertyRenamingPolicy.OFF);\n@@ -133,6 +134,7 @@\n     // create possible conflicts between multiple diagnostic groups.\n \n     // All the safe optimizations.\n+    options.dependencyOptions.setDependencySorting(true);\n     options.closurePass \u003d true;\n     options.foldConstants \u003d true;\n     options.coalesceVariableNames \u003d true;\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [3465,3518]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [4942,4995]"
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/jscomp/Compiler.java",
        "src/com/google/javascript/jscomp/Compiler.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "parseInputs",
            "addNewSourceAst",
            "newExternInput",
            "replaceIncrementalSourceAst",
            "parseSyntheticCode",
            "addIncrementalSourceAst",
            "parseTestCode",
            "initInputsByIdMap"
          ],
          "num": 8
        },
        {
          "qualified_names": [
            "newExternInput",
            "putCompilerInput",
            "initInputsByIdMap",
            "parseInputs",
            "replaceIncrementalSourceAst",
            "addNewSourceAst",
            "parseTestCode",
            "addIncrementalSourceAst",
            "parseSyntheticCode"
          ],
          "num": 9
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "482",
            "489",
            "1024",
            "1034",
            "1062",
            "1111",
            "1271",
            "1272",
            "1273",
            "1274",
            "1286",
            "1306",
            "1307",
            "1449",
            "1482"
          ],
          "num": 15
        },
        {
          "qualified_names": [
            "482",
            "489",
            "1024",
            "1030",
            "1031",
            "1032",
            "1033",
            "1034",
            "1039",
            "1067",
            "1116",
            "1276",
            "1277",
            "1279",
            "1280",
            "1281",
            "1282",
            "1283",
            "1295",
            "1296",
            "1456",
            "1489"
          ],
          "num": 22
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/jscomp/Compiler.java b/src/com/google/javascript/jscomp/Compiler.java\nindex 90a469f..4ff23f7 100644\n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n@@ -479,14 +479,14 @@\n     inputsById \u003d new HashMap\u003cInputId, CompilerInput\u003e();\n     for (CompilerInput input : externs) {\n       InputId id \u003d input.getInputId();\n-      CompilerInput previous \u003d inputsById.put(id, input);\n+      CompilerInput previous \u003d putCompilerInput(id, input);\n       if (previous !\u003d null) {\n         report(JSError.make(DUPLICATE_EXTERN_INPUT, input.getName()));\n       }\n     }\n     for (CompilerInput input : inputs) {\n       InputId id \u003d input.getInputId();\n-      CompilerInput previous \u003d inputsById.put(id, input);\n+      CompilerInput previous \u003d putCompilerInput(id, input);\n       if (previous !\u003d null) {\n         report(JSError.make(DUPLICATE_INPUT, input.getName()));\n       }\n@@ -1021,17 +1021,22 @@\n       throw new IllegalArgumentException(\"Conflicting externs name: \" + name);\n     }\n     CompilerInput input \u003d new CompilerInput(ast, true);\n-    inputsById.put(input.getInputId(), input);\n+    putCompilerInput(input.getInputId(), input);\n     externsRoot.addChildToFront(ast.getAstRoot(this));\n     externs.add(0, input);\n     return input;\n   }\n \n+  private CompilerInput putCompilerInput(InputId id, CompilerInput input) {\n+    input.setCompiler(this);\n+    return inputsById.put(id, input);\n+  }\n+\n   /** Add a source input dynamically. Intended for incremental compilation. */\n   void addIncrementalSourceAst(JsAst ast) {\n     InputId id \u003d ast.getInputId();\n     Preconditions.checkState(getInput(id) \u003d\u003d null, \"Duplicate input %s\", id.getIdName());\n-    inputsById.put(id, new CompilerInput(ast));\n+    putCompilerInput(id, new CompilerInput(ast));\n   }\n \n   /**\n@@ -1059,7 +1064,7 @@\n     }\n \n     CompilerInput newInput \u003d new CompilerInput(ast);\n-    inputsById.put(ast.getInputId(), newInput);\n+    putCompilerInput(ast.getInputId(), newInput);\n \n     JSModule module \u003d oldInput.getModule();\n     if (module !\u003d null) {\n@@ -1108,7 +1113,7 @@\n       modules.get(0).add(newInput);\n     }\n \n-    inputsById.put(ast.getInputId(), newInput);\n+    putCompilerInput(ast.getInputId(), newInput);\n \n     return true;\n   }\n@@ -1268,11 +1273,14 @@\n         processAMDAndCommonJSModules();\n       }\n \n-      // Check if the sources need to be re-ordered.\n-      if (options.dependencyOptions.needsManagement()) {\n-        for (CompilerInput input : inputs) {\n-          input.setCompiler(this);\n+      // Check if inputs need to be rebuilt from modules.\n+      boolean staleInputs \u003d false;\n \n+      // Check if the sources need to be re-ordered.\n+      if (options.dependencyOptions.needsManagement() \u0026\u0026\n+          !options.skipAllPasses \u0026\u0026\n+          options.closurePass) {\n+        for (CompilerInput input : inputs) {\n           // Forward-declare all the provided types, so that they\n           // are not flagged even if they are dropped from the process.\n           for (String provide : input.getProvides()) {\n@@ -1284,6 +1292,7 @@\n           inputs \u003d\n               (moduleGraph \u003d\u003d null ? new JSModuleGraph(modules) : moduleGraph)\n               .manageDependencies(options.dependencyOptions, inputs);\n+          staleInputs \u003d true;\n         } catch (CircularDependencyException e) {\n           report(JSError.make(\n               JSModule.CIRCULAR_DEPENDENCY_ERROR, e.getMessage()));\n@@ -1303,8 +1312,6 @@\n         }\n       }\n \n-      // Check if inputs need to be rebuilt from modules.\n-      boolean staleInputs \u003d false;\n       for (CompilerInput input : inputs) {\n         Node n \u003d input.getAstRoot(this);\n \n@@ -1446,7 +1453,7 @@\n   Node parseSyntheticCode(String js) {\n     CompilerInput input \u003d new CompilerInput(\n         SourceFile.fromCode(\" [synthetic:\" + (++syntheticCodeId) + \"] \", js));\n-    inputsById.put(input.getInputId(), input);\n+    putCompilerInput(input.getInputId(), input);\n     return input.getAstRoot(this);\n   }\n \n@@ -1479,7 +1486,7 @@\n     if (inputsById \u003d\u003d null) {\n       inputsById \u003d Maps.newHashMap();\n     }\n-    inputsById.put(input.getInputId(), input);\n+    putCompilerInput(input.getInputId(), input);\n     return input.getAstRoot(this);\n   }\n \n",
      "operations": [
        {
          "type": "insert-node",
          "from": "",
          "to": "MethodDeclaration [31144,31288]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: private [31144,31151]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SimpleType [31152,31165]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: putCompilerInput [31166,31182]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SingleVariableDeclaration [31183,31193]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SingleVariableDeclaration [31195,31214]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Block [31216,31288]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [30992,31036]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [31222,31246]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "ReturnStatement [31251,31284]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [31542,31587]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [32430,32475]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [33986,34031]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [44652,44696]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [45548,45592]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "InfixExpression [38971,39083]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "INFIX_EXPRESSION_OPERATOR: \u0026\u0026 [39015,39017]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "PrefixExpression [39028,39050]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "QualifiedName: options.closurePass [39064,39083]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [39599,39618]"
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [30988,31030]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [31388,31431]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [32274,32317]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [33828,33871]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [38819,38843]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [44428,44470]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [45322,45364]",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/jscomp/CompilerInput.java",
        "src/com/google/javascript/jscomp/CompilerInput.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "getProvides",
            "regenerateDependencyInfoIfNecessary",
            "setCompiler",
            "getRequires",
            "setErrorManager"
          ],
          "num": 5
        },
        {
          "qualified_names": [
            "getRequires",
            "getProvides",
            "regenerateDependencyInfoIfNecessary",
            "checkErrorManager",
            "setCompiler"
          ],
          "num": 5
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "56",
            "57",
            "58",
            "59",
            "61",
            "148",
            "149",
            "150",
            "151",
            "152",
            "156",
            "162",
            "163",
            "168",
            "177",
            "178",
            "183",
            "243",
            "244"
          ],
          "num": 19
        },
        {
          "qualified_names": [
            "57",
            "58",
            "148",
            "149",
            "150",
            "151",
            "152",
            "153",
            "154",
            "160",
            "165",
            "174",
            "179",
            "239",
            "240",
            "241"
          ],
          "num": 16
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/jscomp/CompilerInput.java b/src/com/google/javascript/jscomp/CompilerInput.java\nindex 0a2ce4f..0bb3d04 100644\n--- a/src/com/google/javascript/jscomp/CompilerInput.java\n+++ b/src/com/google/javascript/jscomp/CompilerInput.java\n@@ -53,12 +53,9 @@\n   private final Set\u003cString\u003e requires \u003d Sets.newHashSet();\n   private boolean generatedDependencyInfoFromSource \u003d false;\n \n-  // An error manager for handling problems when dealing with\n-  // provides/requires.\n-  private ErrorManager errorManager;\n-\n   // An AbstractCompiler for doing parsing.\n-  private AbstractCompiler compiler;\n+  // We do not want to persist this across serialized state.\n+  private transient AbstractCompiler compiler;\n \n   public CompilerInput(SourceAst ast) {\n     this(ast, ast.getSourceFile().getName(), false);\n@@ -145,27 +142,27 @@\n     return ast;\n   }\n \n-  /** Sets an error manager for routing error messages. */\n-  public void setErrorManager(ErrorManager errorManager) {\n-    this.errorManager \u003d errorManager;\n-  }\n-\n   /** Sets an abstract compiler for doing parsing. */\n   public void setCompiler(AbstractCompiler compiler) {\n     this.compiler \u003d compiler;\n-    setErrorManager(compiler.getErrorManager());\n+  }\n+\n+  private void checkErrorManager() {\n+    Preconditions.checkNotNull(compiler,\n+        \"Expected setCompiler to be called first: \" + this);\n+    Preconditions.checkNotNull(compiler.getErrorManager(),\n+        \"Expected compiler to call an error manager: \" + this);\n   }\n \n   /** Gets a list of types depended on by this input. */\n   @Override\n   public Collection\u003cString\u003e getRequires() {\n-    Preconditions.checkNotNull(errorManager,\n-        \"Expected setErrorManager to be called first\");\n+    checkErrorManager();\n     try {\n       regenerateDependencyInfoIfNecessary();\n       return Collections.\u003cString\u003eunmodifiableSet(requires);\n     } catch (IOException e) {\n-      errorManager.report(CheckLevel.ERROR,\n+      compiler.getErrorManager().report(CheckLevel.ERROR,\n           JSError.make(AbstractCompiler.READ_ERROR, getName()));\n       return ImmutableList.\u003cString\u003eof();\n     }\n@@ -174,13 +171,12 @@\n   /** Gets a list of types provided by this input. */\n   @Override\n   public Collection\u003cString\u003e getProvides() {\n-    Preconditions.checkNotNull(errorManager,\n-        \"Expected setErrorManager to be called first\");\n+    checkErrorManager();\n     try {\n       regenerateDependencyInfoIfNecessary();\n       return Collections.\u003cString\u003eunmodifiableSet(provides);\n     } catch (IOException e) {\n-      errorManager.report(CheckLevel.ERROR,\n+      compiler.getErrorManager().report(CheckLevel.ERROR,\n           JSError.make(AbstractCompiler.READ_ERROR, getName()));\n       return ImmutableList.\u003cString\u003eof();\n     }\n@@ -240,8 +236,9 @@\n         // getPathRelativeToClosureBase() here because we\u0027re not using\n         // this to generate deps files. (We\u0027re only using it for\n         // symbol dependencies.)\n-        DependencyInfo info \u003d (new JsFileParser(errorManager)).parseFile(\n-            getName(), getName(), getCode());\n+        DependencyInfo info \u003d\n+            (new JsFileParser(compiler.getErrorManager())).parseFile(\n+                getName(), getName(), getCode());\n \n         provides.addAll(info.getProvides());\n         requires.addAll(info.getRequires());\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [4271,4534]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: transient [1991,2000]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [4653,4673]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [5108,5128]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodInvocation [4825,4851]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodInvocation [5280,5306]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodInvocation [7485,7511]"
        },
        {
          "type": "delete-tree",
          "from": "FieldDeclaration [1964,1998]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [4180,4337]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [4482,4526]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [4649,4745]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: errorManager [4897,4909]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [5166,5262]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: errorManager [5414,5426]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: errorManager [7593,7605]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/jscomp/CompilerOptions.java",
        "src/com/google/javascript/jscomp/CompilerOptions.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "setManageClosureDependencies"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "setManageClosureDependencies"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "1286",
            "1287"
          ],
          "num": 2
        },
        {
          "qualified_names": [
            "1286",
            "1287",
            "1288",
            "1289"
          ],
          "num": 4
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/jscomp/CompilerOptions.java b/src/com/google/javascript/jscomp/CompilerOptions.java\nindex c3d3a75..bb39439 100644\n--- a/src/com/google/javascript/jscomp/CompilerOptions.java\n+++ b/src/com/google/javascript/jscomp/CompilerOptions.java\n@@ -1283,8 +1283,10 @@\n    * whose symbols are not required.\n    */\n   public void setManageClosureDependencies(boolean newVal) {\n-    dependencyOptions.setDependencySorting(newVal);\n-    dependencyOptions.setDependencyPruning(newVal);\n+    dependencyOptions.setDependencySorting(\n+        newVal || dependencyOptions.shouldSortDependencies());\n+    dependencyOptions.setDependencyPruning(\n+        newVal || dependencyOptions.shouldPruneDependencies());\n     dependencyOptions.setMoocherDropping(false);\n     manageClosureDependencies \u003d newVal;\n   }\n",
      "operations": [
        {
          "type": "insert-node",
          "from": "",
          "to": "InfixExpression [37185,37237]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "InfixExpression [37292,37345]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "INFIX_EXPRESSION_OPERATOR: || [37192,37194]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodInvocation [37195,37237]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "INFIX_EXPRESSION_OPERATOR: || [37299,37301]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodInvocation [37302,37345]"
        }
      ]
    }
  ],
  "inducing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [
        "checkErrorManager",
        "putCompilerInput"
      ],
      "num": 2
    },
    "delete_functions": {
      "qualified_names": [
        "setErrorManager"
      ],
      "num": 1
    }
  },
  "trigger_tests": [],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/jscomp/Compiler.java",
        "src/com/google/javascript/jscomp/Compiler.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "parseInputs"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "parseInputs"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "1281"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "1280"
          ],
          "num": 1
        }
      ],
      "diff": "diff -u -r data/changesInfo//Closure_31/properties/modified_classes/inducing/src/com/google/javascript/jscomp/Compiler.java data/changesInfo//Closure_31/cleaned/fixing/src/com/google/javascript/jscomp/Compiler.java\n--- data/changesInfo//Closure_31/properties/modified_classes/inducing/src/com/google/javascript/jscomp/Compiler.java\t2023-08-25 13:08:15.508994163 +0800\n+++ data/changesInfo//Closure_31/cleaned/fixing/src/com/google/javascript/jscomp/Compiler.java\t2023-06-20 20:06:45.887488690 +0800\n@@ -1278,7 +1278,6 @@\n \n       // Check if the sources need to be re-ordered.\n       if (options.dependencyOptions.needsManagement() \u0026\u0026\n-          !options.skipAllPasses \u0026\u0026\n           options.closurePass) {\n         for (CompilerInput input : inputs) {\n           // Forward-declare all the provided types, so that they\n",
      "operations": [
        {
          "type": "delete-tree",
          "from": "PrefixExpression [39028,39050]",
          "to": ""
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  }
}