diff --git a/javadoc/com/google/javascript/rhino/jstype/JSTypeRegistry.ResolveMode.html b/javadoc/com/google/javascript/rhino/jstype/JSTypeRegistry.ResolveMode.html
index 05b9e48..f406099 100644
--- a/javadoc/com/google/javascript/rhino/jstype/JSTypeRegistry.ResolveMode.html
+++ b/javadoc/com/google/javascript/rhino/jstype/JSTypeRegistry.ResolveMode.html
@@ -106,7 +106,7 @@
 
 <P>
 The type registry has three modes, which control how type ASTs are
- converted to types in <CODE>@createFromTypeNodes</CODE>.
+ converted to types in <A HREF="../../../../../com/google/javascript/rhino/jstype/JSTypeRegistry.html#createFromTypeNodes(com.google.javascript.rhino.Node, java.lang.String, com.google.javascript.rhino.jstype.StaticScope)"><CODE>JSTypeRegistry.createFromTypeNodes(com.google.javascript.rhino.Node, java.lang.String, com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType>)</CODE></A>.
 <P>
 
 <P>
diff --git a/javadoc/com/google/javascript/rhino/jstype/JSTypeRegistry.html b/javadoc/com/google/javascript/rhino/jstype/JSTypeRegistry.html
index 29bebdc..0a2e95d 100644
--- a/javadoc/com/google/javascript/rhino/jstype/JSTypeRegistry.html
+++ b/javadoc/com/google/javascript/rhino/jstype/JSTypeRegistry.html
@@ -127,7 +127,7 @@
 
 <BR>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The type registry has three modes, which control how type ASTs are
- converted to types in <CODE>@createFromTypeNodes</CODE>.</TD>
+ converted to types in <A HREF="../../../../../com/google/javascript/rhino/jstype/JSTypeRegistry.html#createFromTypeNodes(com.google.javascript.rhino.Node, java.lang.String, com.google.javascript.rhino.jstype.StaticScope)"><CODE>createFromTypeNodes(com.google.javascript.rhino.Node, java.lang.String, com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType>)</CODE></A>.</TD>
 </TR>
 </TABLE>
 &nbsp;
diff --git a/javadoc/com/google/javascript/rhino/jstype/package-summary.html b/javadoc/com/google/javascript/rhino/jstype/package-summary.html
index e51fd62..4a7eddd 100644
--- a/javadoc/com/google/javascript/rhino/jstype/package-summary.html
+++ b/javadoc/com/google/javascript/rhino/jstype/package-summary.html
@@ -240,7 +240,7 @@
 <TR BGCOLOR="white" CLASS="TableRowColor">
 <TD WIDTH="15%"><B><A HREF="../../../../../com/google/javascript/rhino/jstype/JSTypeRegistry.ResolveMode.html" title="enum in com.google.javascript.rhino.jstype">JSTypeRegistry.ResolveMode</A></B></TD>
 <TD>The type registry has three modes, which control how type ASTs are
- converted to types in <CODE>@createFromTypeNodes</CODE>.</TD>
+ converted to types in <A HREF="../../../../../com/google/javascript/rhino/jstype/JSTypeRegistry.html#createFromTypeNodes(com.google.javascript.rhino.Node, java.lang.String, com.google.javascript.rhino.jstype.StaticScope)"><CODE>JSTypeRegistry.createFromTypeNodes(com.google.javascript.rhino.Node, java.lang.String, com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType>)</CODE></A>.</TD>
 </TR>
 <TR BGCOLOR="white" CLASS="TableRowColor">
 <TD WIDTH="15%"><B><A HREF="../../../../../com/google/javascript/rhino/jstype/TernaryValue.html" title="enum in com.google.javascript.rhino.jstype">TernaryValue</A></B></TD>
diff --git a/javadoc/index-all.html b/javadoc/index-all.html
index b25c823..ccd69d9 100644
--- a/javadoc/index-all.html
+++ b/javadoc/index-all.html
@@ -5222,7 +5222,7 @@
 Constructor for class com.google.javascript.rhino.jstype.<A HREF="./com/google/javascript/rhino/jstype/JSTypeRegistry.html" title="class in com.google.javascript.rhino.jstype">JSTypeRegistry</A>
 <DD>Constructs a new type registry populated with the built-in types.
 <DT><A HREF="./com/google/javascript/rhino/jstype/JSTypeRegistry.ResolveMode.html" title="enum in com.google.javascript.rhino.jstype"><B>JSTypeRegistry.ResolveMode</B></A> - Enum in <A HREF="./com/google/javascript/rhino/jstype/package-summary.html">com.google.javascript.rhino.jstype</A><DD>The type registry has three modes, which control how type ASTs are
- converted to types in <CODE>@createFromTypeNodes</CODE>.</DL>
+ converted to types in <A HREF="./com/google/javascript/rhino/jstype/JSTypeRegistry.html#createFromTypeNodes(com.google.javascript.rhino.Node, java.lang.String, com.google.javascript.rhino.jstype.StaticScope)"><CODE>JSTypeRegistry.createFromTypeNodes(com.google.javascript.rhino.Node, java.lang.String, com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType>)</CODE></A>.</DL>
 <HR>
 <A NAME="_K_"><!-- --></A><H2>
 <B>K</B></H2>
diff --git a/lib/google_common_deploy.jar b/lib/google_common_deploy.jar
index 3e57539..99dd0e3 100755
--- a/lib/google_common_deploy.jar
+++ b/lib/google_common_deploy.jar
Binary files differ
diff --git a/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java b/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java
index dd9a87d..4e0d0d8 100644
--- a/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java
+++ b/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java
@@ -750,8 +750,6 @@
    * exists.
    *
    * @param options The options to the Compiler.
-   * @param path The path of the generated file for which the source map was
-   *        created.
    */
   private void outputSourceMap(B options)
       throws IOException {
diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java
index 94c9411..1b6c93f 100644
--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java
+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java
@@ -26,13 +26,15 @@
  * Checks for certain uses of the {@code this} keyword that are considered
  * unsafe because they are likely to reference the global {@code this} object
  * unintentionally.
- * 
+ *
  * <p>A use of {@code this} is considered unsafe if it's on the left side of an
- * assignment and not inside one of the following:
+ * assignment or a property access, and not inside one of the following:
  * <ol>
  * <li>a prototype method
  * <li>a function annotated with {@code @constructor}
  * <li>a function annotated with {@code @this}.
+ * <li>a function where there's no logical place to put a
+ *     {@code this} annotation.
  * </ol>
  *
  * <p>Note that this check does not track assignments of {@code this} to
@@ -62,7 +64,7 @@
 
   private final AbstractCompiler compiler;
   private final CheckLevel level;
-
+  
   /**
    * If {@code assignLhsChild != null}, then the node being traversed is
    * a descendant of the first child of an ASSIGN node. assignLhsChild's
@@ -80,7 +82,7 @@
    * is encountered, there is no reason to traverse non global contexts.
    */
   public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {
-    
+
     if (n.getType() == Token.FUNCTION) {
       // Don't traverse functions that are constructors or have the @this
       // annotation.
@@ -88,8 +90,21 @@
       if (jsDoc != null && (jsDoc.isConstructor() || jsDoc.hasThisType())) {
         return false;
       }
+
+      // Don't traverse functions unless they would normally
+      // be able to have a @this annotation associated with them. e.g.,
+      // var a = function() { }; // or
+      // function a() {} // or
+      // a.x = function() {};
+      int pType = parent.getType();
+      if (!(pType == Token.BLOCK ||
+            pType == Token.SCRIPT ||
+            pType == Token.NAME ||
+            pType == Token.ASSIGN)) {
+        return false;
+      }
     }
-    
+
     if (parent != null && parent.getType() == Token.ASSIGN) {
       Node lhs = parent.getFirstChild();
       Node rhs = lhs.getNext();
@@ -115,12 +130,12 @@
         }
       }
     }
-    
+
     return true;
   }
 
   public void visit(NodeTraversal t, Node n, Node parent) {
-    if (assignLhsChild != null && n.getType() == Token.THIS) {
+    if (n.getType() == Token.THIS && shouldReportThis(n, parent)) {
       compiler.report(t.makeError(n, level, GLOBAL_THIS));
     }
     if (n == assignLhsChild) {
@@ -128,6 +143,16 @@
     }
   }
 
+  private boolean shouldReportThis(Node n, Node parent) {
+    if (assignLhsChild != null) {
+      // Always report a THIS on the left side of an assign.
+      return true;
+    }
+
+    // Also report a THIS with a property access.
+    return parent != null && NodeUtil.isGet(parent);
+  }
+
   /**
    * Gets a function's JSDoc information, if it has any. Checks for a few
    * patterns (ellipses show where JSDoc would be):
diff --git a/src/com/google/javascript/jscomp/CodingConvention.java b/src/com/google/javascript/jscomp/CodingConvention.java
index a410ed8..02148cd 100644
--- a/src/com/google/javascript/jscomp/CodingConvention.java
+++ b/src/com/google/javascript/jscomp/CodingConvention.java
@@ -22,7 +22,6 @@
 import com.google.javascript.rhino.jstype.ObjectType;
 
 import java.util.Collection;
-import java.util.Collections;
 import java.util.List;
 
 /**
diff --git a/src/com/google/javascript/jscomp/DefaultCodingConvention.java b/src/com/google/javascript/jscomp/DefaultCodingConvention.java
index 814b01c..82a9636 100644
--- a/src/com/google/javascript/jscomp/DefaultCodingConvention.java
+++ b/src/com/google/javascript/jscomp/DefaultCodingConvention.java
@@ -15,7 +15,6 @@
  */
 package com.google.javascript.jscomp;
 
-import com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec;
 import com.google.javascript.rhino.Node;
 import com.google.javascript.rhino.jstype.FunctionType;
 import com.google.javascript.rhino.jstype.JSTypeRegistry;
diff --git a/src/com/google/javascript/jscomp/JSModuleGraph.java b/src/com/google/javascript/jscomp/JSModuleGraph.java
index ecffc6f..47e1474 100644
--- a/src/com/google/javascript/jscomp/JSModuleGraph.java
+++ b/src/com/google/javascript/jscomp/JSModuleGraph.java
@@ -290,7 +290,7 @@
    * a symbol that is not required until a later module, then that
    * file will be moved to the later module.
    *
-   * @param The original list of sources. Used to ensure that the sort
+   * @param inputs The original list of sources. Used to ensure that the sort
    *     is stable.
    * @return The sorted list of sources.
    */
diff --git a/src/com/google/javascript/jscomp/JsMessageExtractor.java b/src/com/google/javascript/jscomp/JsMessageExtractor.java
index 0315635..7412463 100644
--- a/src/com/google/javascript/jscomp/JsMessageExtractor.java
+++ b/src/com/google/javascript/jscomp/JsMessageExtractor.java
@@ -19,7 +19,6 @@
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.Iterables;
 import com.google.common.collect.Lists;
-import com.google.common.collect.Sets;
 import com.google.javascript.rhino.Node;
 
 import java.io.IOException;
diff --git a/src/com/google/javascript/jscomp/LinkedFlowScope.java b/src/com/google/javascript/jscomp/LinkedFlowScope.java
index 47b0a5e..3747e09 100644
--- a/src/com/google/javascript/jscomp/LinkedFlowScope.java
+++ b/src/com/google/javascript/jscomp/LinkedFlowScope.java
@@ -148,7 +148,6 @@
     return cache.getSlot(name);
   }
 
-  /** @inheritDoc */
   @Override
   public StaticSlot<JSType> getOwnSlot(String name) {
     throw new UnsupportedOperationException();
diff --git a/src/com/google/javascript/jscomp/SanityCheck.java b/src/com/google/javascript/jscomp/SanityCheck.java
index aa55427..a363a9b 100644
--- a/src/com/google/javascript/jscomp/SanityCheck.java
+++ b/src/com/google/javascript/jscomp/SanityCheck.java
@@ -18,7 +18,6 @@
 
 import com.google.common.base.Preconditions;
 import com.google.javascript.rhino.Node;
-import com.google.javascript.rhino.Token;
 
 /**
  * A compiler pass that verifies the structure of the AST conforms
diff --git a/src/com/google/javascript/jscomp/SourceFile.java b/src/com/google/javascript/jscomp/SourceFile.java
index f13ac25..0c40f03 100644
--- a/src/com/google/javascript/jscomp/SourceFile.java
+++ b/src/com/google/javascript/jscomp/SourceFile.java
@@ -371,6 +371,7 @@
     /**
      * Gets a reader for the code in this source file.
      */
+    @Override
     public Reader getCodeReader() throws IOException {
       if (hasSourceInMemory()) {
         return super.getCodeReader();
diff --git a/src/com/google/javascript/jscomp/Tracer.java b/src/com/google/javascript/jscomp/Tracer.java
index fe4229e..2a137ae 100644
--- a/src/com/google/javascript/jscomp/Tracer.java
+++ b/src/com/google/javascript/jscomp/Tracer.java
@@ -224,7 +224,7 @@
   static final int MAX_TRACE_SIZE = 1000;
 
   /**
-   * For unit testing. Can't use {@link com.google.common.time} because
+   * For unit testing. Can't use {@link com.google.common.time.Clock} because
    * this code is in base and has minimal dependencies.
    */
   static interface InternalClock {
diff --git a/src/com/google/javascript/jscomp/TypedCodeGenerator.java b/src/com/google/javascript/jscomp/TypedCodeGenerator.java
index 9cedd0e..de51a7a 100644
--- a/src/com/google/javascript/jscomp/TypedCodeGenerator.java
+++ b/src/com/google/javascript/jscomp/TypedCodeGenerator.java
@@ -74,7 +74,7 @@
   }
 
   /**
-   * @param node A node for a function for which to generate a type annotation
+   * @param fnNode A node for a function for which to generate a type annotation
    */
   private String getFunctionAnnotation(Node fnNode) {
     Preconditions.checkState(fnNode.getType() == Token.FUNCTION);
diff --git a/src/com/google/javascript/jscomp/deps/DependencyInfo.java b/src/com/google/javascript/jscomp/deps/DependencyInfo.java
index e65a03f..52e04cd 100644
--- a/src/com/google/javascript/jscomp/deps/DependencyInfo.java
+++ b/src/com/google/javascript/jscomp/deps/DependencyInfo.java
@@ -17,8 +17,6 @@
 package com.google.javascript.jscomp.deps;
 
 import java.util.Collection;
-import java.util.Collections;
-import java.util.List;
 
 /**
  * A data structure for JS dependency information for a single .js file.
diff --git a/src/com/google/javascript/jscomp/deps/DepsFileParser.java b/src/com/google/javascript/jscomp/deps/DepsFileParser.java
index e67a6ed..ef1a9d7 100644
--- a/src/com/google/javascript/jscomp/deps/DepsFileParser.java
+++ b/src/com/google/javascript/jscomp/deps/DepsFileParser.java
@@ -17,12 +17,9 @@
 package com.google.javascript.jscomp.deps;
 
 import com.google.common.base.CharMatcher;
-import com.google.common.base.Charsets;
 import com.google.common.collect.Lists;
-import com.google.common.io.Files;
 import com.google.javascript.jscomp.ErrorManager;
 
-import java.io.File;
 import java.io.FileReader;
 import java.io.IOException;
 import java.io.Reader;
diff --git a/src/com/google/javascript/jscomp/deps/JsFileLineParser.java b/src/com/google/javascript/jscomp/deps/JsFileLineParser.java
index 238f804..06c9c1a 100644
--- a/src/com/google/javascript/jscomp/deps/JsFileLineParser.java
+++ b/src/com/google/javascript/jscomp/deps/JsFileLineParser.java
@@ -25,7 +25,6 @@
 import java.io.BufferedReader;
 import java.io.IOException;
 import java.io.Reader;
-import java.io.StringReader;
 import java.util.List;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
diff --git a/src/com/google/javascript/jscomp/deps/JsFileParser.java b/src/com/google/javascript/jscomp/deps/JsFileParser.java
index a06bf81..0f8ab48 100644
--- a/src/com/google/javascript/jscomp/deps/JsFileParser.java
+++ b/src/com/google/javascript/jscomp/deps/JsFileParser.java
@@ -17,13 +17,9 @@
 package com.google.javascript.jscomp.deps;
 
 import com.google.common.base.CharMatcher;
-import com.google.common.base.Charsets;
 import com.google.common.collect.Lists;
-import com.google.common.io.Files;
 import com.google.javascript.jscomp.ErrorManager;
 
-import java.io.BufferedReader;
-import java.io.File;
 import java.io.FileReader;
 import java.io.IOException;
 import java.io.Reader;
diff --git a/src/com/google/javascript/jscomp/deps/SimpleDependencyInfo.java b/src/com/google/javascript/jscomp/deps/SimpleDependencyInfo.java
index 399cc7f..8dc5364 100644
--- a/src/com/google/javascript/jscomp/deps/SimpleDependencyInfo.java
+++ b/src/com/google/javascript/jscomp/deps/SimpleDependencyInfo.java
@@ -17,8 +17,6 @@
 package com.google.javascript.jscomp.deps;
 
 import com.google.common.base.Objects;
-import com.google.common.collect.ImmutableList;
-import com.google.common.collect.Lists;
 
 import java.util.Collection;
 import java.util.Collections;
diff --git a/src/com/google/javascript/jscomp/deps/SortedDependencies.java b/src/com/google/javascript/jscomp/deps/SortedDependencies.java
index 60cbec8..adb6d81 100644
--- a/src/com/google/javascript/jscomp/deps/SortedDependencies.java
+++ b/src/com/google/javascript/jscomp/deps/SortedDependencies.java
@@ -38,8 +38,6 @@
 import java.util.Map;
 import java.util.PriorityQueue;
 import java.util.Set;
-import java.util.SortedSet;
-import java.util.TreeSet;
 
 /**
  * A sorted list of inputs with dependency information. Uses a stable
diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java
index a0f264b..477b287 100644
--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java
+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java
@@ -1034,14 +1034,6 @@
       this.string = string;
       this.token = token;
     }
-
-    public String getString() {
-      return string;
-    }
-
-    public JsDocToken getToken() {
-      return token;
-    }
   }
 
   /**
diff --git a/src/com/google/javascript/jscomp/parsing/ParserRunner.java b/src/com/google/javascript/jscomp/parsing/ParserRunner.java
index 7007f03..72a6668 100644
--- a/src/com/google/javascript/jscomp/parsing/ParserRunner.java
+++ b/src/com/google/javascript/jscomp/parsing/ParserRunner.java
@@ -25,7 +25,6 @@
 import com.google.javascript.jscomp.mozilla.rhino.Parser;
 import com.google.javascript.jscomp.mozilla.rhino.ast.AstRoot;
 import com.google.javascript.rhino.Node;
-import com.google.javascript.rhino.jstype.JSTypeRegistry;
 
 import java.io.IOException;
 import java.util.ResourceBundle;
diff --git a/src/com/google/javascript/rhino/jstype/FunctionPrototypeType.java b/src/com/google/javascript/rhino/jstype/FunctionPrototypeType.java
index f1aeb7b..b4f44fe 100644
--- a/src/com/google/javascript/rhino/jstype/FunctionPrototypeType.java
+++ b/src/com/google/javascript/rhino/jstype/FunctionPrototypeType.java
@@ -39,12 +39,8 @@
 
 package com.google.javascript.rhino.jstype;
 
-import com.google.javascript.rhino.ErrorReporter;
 import com.google.javascript.rhino.jstype.ObjectType;
 
-import java.util.List;
-import java.util.Set;
-
 /**
  * Represents the prototype of a {@link FunctionType}.
  * @author nicksantos@google.com (Nick Santos)
diff --git a/src/com/google/javascript/rhino/jstype/FunctionType.java b/src/com/google/javascript/rhino/jstype/FunctionType.java
index cbd4dc2..48e0f07 100644
--- a/src/com/google/javascript/rhino/jstype/FunctionType.java
+++ b/src/com/google/javascript/rhino/jstype/FunctionType.java
@@ -41,8 +41,6 @@
 
 import static com.google.javascript.rhino.jstype.JSTypeNative.U2U_CONSTRUCTOR_TYPE;
 
-import com.google.common.annotations.VisibleForTesting;
-import com.google.common.base.Objects;
 import com.google.common.base.Preconditions;
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.Iterables;
@@ -822,11 +820,6 @@
     return super.resolveInternal(t, scope);
   }
 
-  // A helper method for creating arrow types.
-  private ArrowType createArrowType(Node parameters, JSType returnType) {
-    return registry.createArrowType(parameters, returnType);
-  }
-
   @Override
   public String toDebugHashCodeString() {
     if (this == registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)) {
diff --git a/src/com/google/javascript/rhino/jstype/InstanceObjectType.java b/src/com/google/javascript/rhino/jstype/InstanceObjectType.java
index ba1e47b..256f014 100644
--- a/src/com/google/javascript/rhino/jstype/InstanceObjectType.java
+++ b/src/com/google/javascript/rhino/jstype/InstanceObjectType.java
@@ -41,10 +41,6 @@
 
 
 import com.google.common.base.Preconditions;
-import com.google.javascript.rhino.ErrorReporter;
-
-import java.util.List;
-import java.util.Set;
 
 /**
  * An object type that is an instance of some function constructor.
diff --git a/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java b/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java
index df73e94..76dd3b6 100644
--- a/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java
+++ b/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java
@@ -147,7 +147,7 @@
 
   /**
    * The type registry has three modes, which control how type ASTs are
-   * converted to types in {@link @createFromTypeNodes}.
+   * converted to types in {@link #createFromTypeNodes}.
    */
   public static enum ResolveMode {
     /**
diff --git a/src/com/google/javascript/rhino/jstype/NamedType.java b/src/com/google/javascript/rhino/jstype/NamedType.java
index b67876c..6af723c 100644
--- a/src/com/google/javascript/rhino/jstype/NamedType.java
+++ b/src/com/google/javascript/rhino/jstype/NamedType.java
@@ -110,6 +110,7 @@
     this.charno = charno;
   }
 
+  @Override
   void forgiveUnknownNames() {
     forgiving = true;
   }
diff --git a/src/com/google/javascript/rhino/jstype/ObjectType.java b/src/com/google/javascript/rhino/jstype/ObjectType.java
index 2fcc8cf..78583fe 100644
--- a/src/com/google/javascript/rhino/jstype/ObjectType.java
+++ b/src/com/google/javascript/rhino/jstype/ObjectType.java
@@ -42,13 +42,11 @@
 import static com.google.javascript.rhino.jstype.TernaryValue.FALSE;
 import static com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
 
-import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.Sets;
 import com.google.javascript.rhino.JSDocInfo;
 
 import java.util.HashSet;
-import java.util.List;
 import java.util.Set;
 
 /**
diff --git a/src/com/google/javascript/rhino/jstype/ProxyObjectType.java b/src/com/google/javascript/rhino/jstype/ProxyObjectType.java
index 8761a53..bd23c71 100644
--- a/src/com/google/javascript/rhino/jstype/ProxyObjectType.java
+++ b/src/com/google/javascript/rhino/jstype/ProxyObjectType.java
@@ -42,7 +42,6 @@
 import com.google.javascript.rhino.ErrorReporter;
 import com.google.javascript.rhino.JSDocInfo;
 
-import java.util.List;
 import java.util.Set;
 
 /**
diff --git a/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java b/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java
index 95fc082..e9deda4 100644
--- a/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java
+++ b/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java
@@ -40,9 +40,6 @@
 package com.google.javascript.rhino.jstype;
 
 import com.google.common.collect.ImmutableMap;
-import com.google.common.collect.Maps;
-
-import java.util.Map;
 
 /**
  * A builder for record types.
diff --git a/src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java b/src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java
index 275c751..e485054 100644
--- a/src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java
+++ b/src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java
@@ -41,7 +41,6 @@
 
 import com.google.common.base.Preconditions;
 import com.google.javascript.rhino.ErrorReporter;
-import com.google.javascript.rhino.JSTypeExpression;
 import com.google.javascript.rhino.Node;
 
 /**
diff --git a/test/com/google/javascript/jscomp/CheckGlobalThisTest.java b/test/com/google/javascript/jscomp/CheckGlobalThisTest.java
index c0fa439..74b9276 100644
--- a/test/com/google/javascript/jscomp/CheckGlobalThisTest.java
+++ b/test/com/google/javascript/jscomp/CheckGlobalThisTest.java
@@ -35,7 +35,7 @@
   private void testFailure(String js) {
     test(js, null, CheckGlobalThis.GLOBAL_THIS);
   }
-  
+
   public void testGlobalThis1() throws Exception {
     testSame("var a = this;");
   }
@@ -51,15 +51,19 @@
   public void testGlobalThis4() {
     testFailure("this['foo'] = 5;");
   }
-  
+
   public void testGlobalThis5() {
     testFailure("(a = this).foo = 4;");
   }
-  
+
   public void testGlobalThis6() {
     testSame("a = this;");
   }
 
+  public void testGlobalThis7() {
+    testFailure("var a = this.foo;");
+  }
+
   public void testStaticFunction1() {
     testSame("function a() { return this; }");
   }
@@ -81,11 +85,15 @@
   }
 
   public void testStaticFunction6() {
-    testFailure("function a() { return function() { this = 8; } }");
+    testSame("function a() { return function() { this = 8; } }");
   }
 
   public void testStaticFunction7() {
-    testFailure("var a = function() { return function() { this = 8; } }");
+    testSame("var a = function() { return function() { this = 8; } }");
+  }
+
+  public void testStaticFunction8() {
+    testFailure("var a = function() { return this.foo; };");
   }
 
   public void testConstructor1() {
@@ -137,11 +145,11 @@
   }
 
   public void testStaticMethod2() {
-    testFailure("a.b = function() { return function() { this.m2 = 5; } }");
+    testSame("a.b = function() { return function() { this.m2 = 5; } }");
   }
 
   public void testStaticMethod3() {
-    testFailure("a.b.c = function() { return function() { this.m2 = 5; } }");
+    testSame("a.b.c = function() { return function() { this.m2 = 5; } }");
   }
 
   public void testMethodInStaticFunction() {
@@ -158,4 +166,22 @@
         "    function myself() {" +
         "      function andI() { this.m2 = 5; } } } }");
   }
+
+  public void testInnerFunction1() {
+    testFailure("function f() { function g() { return this.x; } }");
+  }
+
+  public void testInnerFunction2() {
+    testFailure("function f() { var g = function() { return this.x; } }");
+  }
+
+  public void testInnerFunction3() {
+    testFailure(
+        "function f() { var x = {}; x.y = function() { return this.x; } }");
+  }
+
+  public void testInnerFunction4() {
+    testSame(
+        "function f() { var x = {}; x.y(function() { return this.x; }); }");
+  }
 }
diff --git a/test/com/google/javascript/jscomp/CompilerTestCase.java b/test/com/google/javascript/jscomp/CompilerTestCase.java
index 55beb9f..477a91b 100644
--- a/test/com/google/javascript/jscomp/CompilerTestCase.java
+++ b/test/com/google/javascript/jscomp/CompilerTestCase.java
@@ -20,7 +20,6 @@
 import com.google.common.collect.Lists;
 import com.google.javascript.jscomp.CodeChangeHandler.RecentChange;
 import com.google.javascript.rhino.Node;
-import com.google.javascript.rhino.Token;
 import com.google.javascript.rhino.testing.BaseJSTypeTestCase;
 
 import junit.framework.TestCase;
diff --git a/test/com/google/javascript/jscomp/ConcreteTypeTest.java b/test/com/google/javascript/jscomp/ConcreteTypeTest.java
index d7a7e01..d368f0d 100644
--- a/test/com/google/javascript/jscomp/ConcreteTypeTest.java
+++ b/test/com/google/javascript/jscomp/ConcreteTypeTest.java
@@ -244,7 +244,7 @@
       return registry;
     }
 
-    /** @inheritDoc */
+    /** {@inheritDoc} */
     public ConcreteFunctionType createConcreteFunction(
         Node decl, StaticScope<ConcreteType> parent) {
       ConcreteFunctionType funcType = functionByDeclaration.get(decl);
@@ -258,7 +258,7 @@
       return funcType;
     }
 
-    /** @inheritDoc */
+    /** {@inheritDoc} */
     public ConcreteInstanceType createConcreteInstance(
         ObjectType instanceType) {
       ConcreteInstanceType instType = instanceByJSType.get(instanceType);
@@ -269,17 +269,17 @@
       return instType;
     }
 
-    /** @inheritDoc */
+    /** {@inheritDoc} */
     public ConcreteFunctionType getConcreteFunction(FunctionType functionType) {
       return functionByJSType.get(functionType);
     }
 
-    /** @inheritDoc */
+    /** {@inheritDoc} */
     public ConcreteInstanceType getConcreteInstance(ObjectType instanceType) {
       return instanceByJSType.get(instanceType);
     }
 
-    /** @inheritDoc */
+    /** {@inheritDoc} */
     public StaticScope<ConcreteType> createFunctionScope(
         Node decl, StaticScope<ConcreteType> parent) {
       FakeScope scope = new FakeScope((FakeScope) parent);
@@ -294,7 +294,7 @@
       return scope;
     }
 
-    /** @inheritDoc */
+    /** {@inheritDoc} */
     public StaticScope<ConcreteType> createInstanceScope(
         ObjectType instanceType) {
       FakeScope parentScope = null;
@@ -321,15 +321,15 @@
       this.parent = parent;
     }
 
-    /** @inheritDoc */
+    /** {@inheritDoc} */
     public StaticScope<ConcreteType> getParentScope() { return parent; }
 
-    /** @inheritDoc */
+    /** {@inheritDoc} */
     public StaticSlot<ConcreteType> getOwnSlot(String name) {
       return slots.get(name);
     }
 
-    /** @inheritDoc */
+    /** {@inheritDoc} */
     public StaticSlot<ConcreteType> getSlot(String name) {
       if (slots.containsKey(name)) {
         return slots.get(name);
@@ -340,7 +340,7 @@
       }
     }
 
-    /** @inheritDoc */
+    /** {@inheritDoc} */
     public ConcreteType getTypeOfThis() { return ConcreteType.ALL; }
 
     void addSlot(String name) {
@@ -356,13 +356,13 @@
       this.name = name;
     }
 
-    /* @inheritDoc */
+    /* {@inheritDoc} */
     public String getName() { return name; }
 
-    /* @inheritDoc */
+    /* {@inheritDoc} */
     public ConcreteType getType() { return ConcreteType.ALL; }
 
-    /* @inheritDoc */
+    /* {@inheritDoc} */
     public boolean isTypeInferred() { return true; }
   }
 }
diff --git a/test/com/google/javascript/jscomp/DataFlowAnalysisTest.java b/test/com/google/javascript/jscomp/DataFlowAnalysisTest.java
index a7036cc..fc4fa22 100644
--- a/test/com/google/javascript/jscomp/DataFlowAnalysisTest.java
+++ b/test/com/google/javascript/jscomp/DataFlowAnalysisTest.java
@@ -338,14 +338,7 @@
      * Constructor.
      *
      * @param isTop To define if the lattice is top.
-     * @param constMap A map from name to constant variable.
      */
-    ConstPropLatticeElement(
-        boolean isTop, Map<Variable, Integer> constMap) {
-      this.isTop = isTop;
-      this.constMap = constMap;
-    }
-
     ConstPropLatticeElement(boolean isTop) {
       this.isTop = isTop;
       this.constMap = Maps.newHashMap();
diff --git a/test/com/google/javascript/jscomp/InferJSDocInfoTest.java b/test/com/google/javascript/jscomp/InferJSDocInfoTest.java
index 6832419..ce273b7 100644
--- a/test/com/google/javascript/jscomp/InferJSDocInfoTest.java
+++ b/test/com/google/javascript/jscomp/InferJSDocInfoTest.java
@@ -24,8 +24,6 @@
 import com.google.javascript.rhino.Node;
 import com.google.javascript.rhino.jstype.FunctionType;
 import com.google.javascript.rhino.jstype.JSType;
-import com.google.javascript.rhino.jstype.JSTypeNative;
-import com.google.javascript.rhino.jstype.JSTypeRegistry;
 import com.google.javascript.rhino.jstype.ObjectType;
 
 import java.util.Deque;
@@ -40,7 +38,6 @@
 // assertions about type information.
 public class InferJSDocInfoTest extends CompilerTestCase {
 
-  private JSTypeRegistry registry;
   private Scope globalScope;
 
   @Override
@@ -66,7 +63,6 @@
 
   @Override
   public CompilerPass getProcessor(final Compiler compiler) {
-    registry = compiler.getTypeRegistry();
     return new CompilerPass() {
       public void process(Node externs, Node root) {
         ScopeCreator scopeCreator =
@@ -217,12 +213,4 @@
     }
     return null;
   }
-
-  private JSType getNativeType(JSTypeNative type) {
-    return registry.getNativeType(type);
-  }
-
-  private ObjectType getNativeObjectType(JSTypeNative type) {
-    return (ObjectType) registry.getNativeType(type);
-  }
 }
diff --git a/test/com/google/javascript/rhino/jstype/FunctionTypeTest.java b/test/com/google/javascript/rhino/jstype/FunctionTypeTest.java
index 76eb013..e58037d 100644
--- a/test/com/google/javascript/rhino/jstype/FunctionTypeTest.java
+++ b/test/com/google/javascript/rhino/jstype/FunctionTypeTest.java
@@ -38,7 +38,6 @@
 
 package com.google.javascript.rhino.jstype;
 
-import com.google.javascript.rhino.Node;
 import com.google.javascript.rhino.testing.BaseJSTypeTestCase;
 
 
diff --git a/test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java b/test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java
index 04338c2..8d3f2ce 100644
--- a/test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java
+++ b/test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java
@@ -46,7 +46,6 @@
 
 import junit.framework.TestCase;
 
-
 /**
  * Tests {@link JSTypeRegistry}.
  *
diff --git a/test/com/google/javascript/rhino/jstype/JSTypeTest.java b/test/com/google/javascript/rhino/jstype/JSTypeTest.java
index eb429f8..f26fa45 100644
--- a/test/com/google/javascript/rhino/jstype/JSTypeTest.java
+++ b/test/com/google/javascript/rhino/jstype/JSTypeTest.java
@@ -4863,7 +4863,8 @@
   }
 
   /**
-   * Tests {@link JSTypeRegistry#getGreatestSubtypeWithProperty(JSType)}.
+   * Tests
+   * {@link JSTypeRegistry#getGreatestSubtypeWithProperty(JSType, String)}.
    */
   public void testGreatestSubtypeWithProperty() {
     ObjectType foo = registry.createObjectType("foo", null, OBJECT_TYPE);
@@ -5264,10 +5265,6 @@
     return registry.createArrowType(params);
   }
 
-  private ArrowType createArrowType(Node params, JSType retType) {
-    return registry.createArrowType(params, retType);
-  }
-
   private void assertTypeEquals(JSType a, JSType b) {
     Asserts.assertTypeEquals(a, b);
   }
