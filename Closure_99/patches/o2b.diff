diff -r -u original/src/com/google/javascript/jscomp/CheckGlobalThis.java buggy/src/com/google/javascript/jscomp/CheckGlobalThis.java
--- original/src/com/google/javascript/jscomp/CheckGlobalThis.java	2023-06-13 15:31:44.899108449 +0800
+++ buggy/src/com/google/javascript/jscomp/CheckGlobalThis.java	2023-06-12 11:40:28.582617584 +0800
@@ -26,13 +26,15 @@
  * Checks for certain uses of the {@code this} keyword that are considered
  * unsafe because they are likely to reference the global {@code this} object
  * unintentionally.
- * 
+ *
  * <p>A use of {@code this} is considered unsafe if it's on the left side of an
- * assignment and not inside one of the following:
+ * assignment or a property access, and not inside one of the following:
  * <ol>
  * <li>a prototype method
  * <li>a function annotated with {@code @constructor}
  * <li>a function annotated with {@code @this}.
+ * <li>a function where there's no logical place to put a
+ *     {@code this} annotation.
  * </ol>
  *
  * <p>Note that this check does not track assignments of {@code this} to
@@ -62,7 +64,7 @@
 
   private final AbstractCompiler compiler;
   private final CheckLevel level;
-
+  
   /**
    * If {@code assignLhsChild != null}, then the node being traversed is
    * a descendant of the first child of an ASSIGN node. assignLhsChild's
@@ -80,16 +82,32 @@
    * is encountered, there is no reason to traverse non global contexts.
    */
   public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {
-    
+
     if (n.getType() == Token.FUNCTION) {
       // Don't traverse functions that are constructors or have the @this
-      // annotation.
+      // or @override annotation.
       JSDocInfo jsDoc = getFunctionJsDocInfo(n);
-      if (jsDoc != null && (jsDoc.isConstructor() || jsDoc.hasThisType())) {
+      if (jsDoc != null &&
+          (jsDoc.isConstructor() ||
+           jsDoc.hasThisType() ||
+           jsDoc.isOverride())) {
+        return false;
+      }
+
+      // Don't traverse functions unless they would normally
+      // be able to have a @this annotation associated with them. e.g.,
+      // var a = function() { }; // or
+      // function a() {} // or
+      // a.x = function() {};
+      int pType = parent.getType();
+      if (!(pType == Token.BLOCK ||
+            pType == Token.SCRIPT ||
+            pType == Token.NAME ||
+            pType == Token.ASSIGN)) {
         return false;
       }
     }
-    
+
     if (parent != null && parent.getType() == Token.ASSIGN) {
       Node lhs = parent.getFirstChild();
       Node rhs = lhs.getNext();
@@ -115,12 +133,12 @@
         }
       }
     }
-    
+
     return true;
   }
 
   public void visit(NodeTraversal t, Node n, Node parent) {
-    if (assignLhsChild != null && n.getType() == Token.THIS) {
+    if (n.getType() == Token.THIS && shouldReportThis(n, parent)) {
       compiler.report(t.makeError(n, level, GLOBAL_THIS));
     }
     if (n == assignLhsChild) {
@@ -128,6 +146,16 @@
     }
   }
 
+  private boolean shouldReportThis(Node n, Node parent) {
+    if (assignLhsChild != null) {
+      // Always report a THIS on the left side of an assign.
+      return true;
+    }
+
+    // Also report a THIS with a property access.
+    return parent != null && NodeUtil.isGet(parent);
+  }
+
   /**
    * Gets a function's JSDoc information, if it has any. Checks for a few
    * patterns (ellipses show where JSDoc would be):
diff -r -u original/test/com/google/javascript/jscomp/CheckGlobalThisTest.java buggy/test/com/google/javascript/jscomp/CheckGlobalThisTest.java
--- original/test/com/google/javascript/jscomp/CheckGlobalThisTest.java	2023-06-13 15:31:44.903108469 +0800
+++ buggy/test/com/google/javascript/jscomp/CheckGlobalThisTest.java	2023-06-12 11:40:28.586617401 +0800
@@ -35,7 +35,7 @@
   private void testFailure(String js) {
     test(js, null, CheckGlobalThis.GLOBAL_THIS);
   }
-  
+
   public void testGlobalThis1() throws Exception {
     testSame("var a = this;");
   }
@@ -51,15 +51,19 @@
   public void testGlobalThis4() {
     testFailure("this['foo'] = 5;");
   }
-  
+
   public void testGlobalThis5() {
     testFailure("(a = this).foo = 4;");
   }
-  
+
   public void testGlobalThis6() {
     testSame("a = this;");
   }
 
+  public void testGlobalThis7() {
+    testFailure("var a = this.foo;");
+  }
+
   public void testStaticFunction1() {
     testSame("function a() { return this; }");
   }
@@ -81,11 +85,15 @@
   }
 
   public void testStaticFunction6() {
-    testFailure("function a() { return function() { this = 8; } }");
+    testSame("function a() { return function() { this = 8; } }");
   }
 
   public void testStaticFunction7() {
-    testFailure("var a = function() { return function() { this = 8; } }");
+    testSame("var a = function() { return function() { this = 8; } }");
+  }
+
+  public void testStaticFunction8() {
+    testFailure("var a = function() { return this.foo; };");
   }
 
   public void testConstructor1() {
@@ -100,6 +108,11 @@
     testSame("/** @constructor */a.A = function() { this.m2 = 5; }");
   }
 
+  public void testOverride1() {
+    testSame("/** @constructor */function A() { } var a = new A();" +
+             "/** @override */ a.foo = function() { this.bar = 5; };");
+  }
+
   public void testThisJSDoc1() throws Exception {
     testSame("/** @this whatever */function h() { this.foo = 56; }");
   }
@@ -137,11 +150,11 @@
   }
 
   public void testStaticMethod2() {
-    testFailure("a.b = function() { return function() { this.m2 = 5; } }");
+    testSame("a.b = function() { return function() { this.m2 = 5; } }");
   }
 
   public void testStaticMethod3() {
-    testFailure("a.b.c = function() { return function() { this.m2 = 5; } }");
+    testSame("a.b.c = function() { return function() { this.m2 = 5; } }");
   }
 
   public void testMethodInStaticFunction() {
@@ -158,4 +171,22 @@
         "    function myself() {" +
         "      function andI() { this.m2 = 5; } } } }");
   }
+
+  public void testInnerFunction1() {
+    testFailure("function f() { function g() { return this.x; } }");
+  }
+
+  public void testInnerFunction2() {
+    testFailure("function f() { var g = function() { return this.x; } }");
+  }
+
+  public void testInnerFunction3() {
+    testFailure(
+        "function f() { var x = {}; x.y = function() { return this.x; } }");
+  }
+
+  public void testInnerFunction4() {
+    testSame(
+        "function f() { var x = {}; x.y(function() { return this.x; }); }");
+  }
 }
