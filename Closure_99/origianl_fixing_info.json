{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "/home/liumengjiao/Desktop/CI/Benchmark/data/changesInfo/",
  "properties": {
    "trigger.tests": "com.google.javascript.jscomp.CheckGlobalThisTest::testPropertyOfMethod,com.google.javascript.jscomp.CheckGlobalThisTest::testMethod4,com.google.javascript.jscomp.CheckGlobalThisTest::testInterface1",
    "test.dir": "test",
    "clz.modified": "com.google.javascript.jscomp.CheckGlobalThis",
    "src.dir": "src"
  },
  "timeoutSecond": 100,
  "proj": "Closure",
  "id": "99",
  "workingDir": "../bugs/Closure_99_buggy",
  "buggyCommit": "ccbbcbf71b1cb8771c9cdad1d28b367ce6ea0da2",
  "inducingCommit": "6d00ac1a68612aade8a19d7ecc9b180f00ae5234",
  "originalCommit": "7e0d71b3d68ad4788a094d8618e2b0aa474cf3db",
  "bug_name": "Closure_99",
  "derive": "defects4j",
  "original_fixing_commit": "8aa879a4eeb18cfc8d13e6c843a32b7f41ccd516",
  "buildFiles_changed": false,
  "regression": true,
  "inducing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [
            "com.google.javascript.jscomp.AbstractCommandLineRunner:outputNameMaps:[B options]:void",
            "com.google.javascript.jscomp.AbstractCommandLineRunner:processResults:[Result result, JSModule[] modules, B options]:int",
            "com.google.javascript.jscomp.AbstractCommandLineRunner:createExterns:[]:List\u003cJSSourceFile\u003e",
            "com.google.javascript.jscomp.AbstractCommandLineRunner\\$CommandLineConfig:setJsOutputFile:[String jsOutputFile]:CommandLineConfig",
            "com.google.javascript.jscomp.AbstractCommandLineRunner:createJsModules:[List\u003cString\u003e specs, List\u003cString\u003e jsFiles]:JSModule[]",
            "com.google.javascript.jscomp.AbstractCommandLineRunner:createDefineReplacements:[List\u003cString\u003e definitions, CompilerOptions options]:void",
            "com.google.javascript.jscomp.AbstractCommandLineRunner:printManifestTo:[Iterable\u003cCompilerInput\u003e inputs, String path]:void",
            "com.google.javascript.jscomp.AbstractCommandLineRunner:maybeCreateDirsForPath:[String pathPrefix]:void",
            "com.google.javascript.jscomp.AbstractCommandLineRunner:outputManifest:[]:void",
            "com.google.javascript.jscomp.AbstractCommandLineRunner:AbstractCommandLineRunner:[]:null",
            "com.google.javascript.jscomp.AbstractCommandLineRunner:shouldGenerateMapPerModule:[B options]:boolean",
            "com.google.javascript.jscomp.AbstractCommandLineRunner\\$CommandLineConfig:setPropertyMapInputFile:[String propertyMapInputFile]:CommandLineConfig",
            "com.google.javascript.jscomp.AbstractCommandLineRunner\\$CommandLineConfig:setJscompOff:[List\u003cString\u003e jscompOff]:CommandLineConfig",
            "com.google.javascript.jscomp.AbstractCommandLineRunner:getCommandLineConfig:[]:CommandLineConfig",
            "com.google.javascript.jscomp.AbstractCommandLineRunner:initOptionsFromFlags:[CompilerOptions options]:void",
            "com.google.javascript.jscomp.AbstractCommandLineRunner:expandCommandLinePath:[String path, JSModule forModule]:String",
            "com.google.javascript.jscomp.AbstractCommandLineRunner\\$CommandLineConfig:setCharset:[String charset]:CommandLineConfig",
            "com.google.javascript.jscomp.AbstractCommandLineRunner\\$CommandLineConfig:setManageClosureDependencies:[boolean newVal]:CommandLineConfig",
            "com.google.javascript.jscomp.AbstractCommandLineRunner:expandManifest:[JSModule forModule]:String",
            "com.google.javascript.jscomp.AbstractCommandLineRunner\\$CommandLineConfig:setCreateSourceMap:[String createSourceMap]:CommandLineConfig",
            "com.google.javascript.jscomp.AbstractCommandLineRunner\\$CommandLineConfig:setJscompDevMode:[CompilerOptions.DevMode jscompDevMode]:CommandLineConfig",
            "com.google.javascript.jscomp.AbstractCommandLineRunner\\$CommandLineConfig:setVariableMapInputFile:[String variableMapInputFile]:CommandLineConfig",
            "com.google.javascript.jscomp.AbstractCommandLineRunner\\$CommandLineConfig:setOutputManifest:[String outputManifest]:CommandLineConfig",
            "com.google.javascript.jscomp.AbstractCommandLineRunner:createOptions:[]:B",
            "com.google.javascript.jscomp.AbstractCommandLineRunner\\$CommandLineConfig:setModuleWrapper:[List\u003cString\u003e moduleWrapper]:CommandLineConfig",
            "com.google.javascript.jscomp.AbstractCommandLineRunner:getErrorPrintStream:[]:PrintStream",
            "com.google.javascript.jscomp.AbstractCommandLineRunner\\$CommandLineConfig:setCreateNameMapFiles:[boolean createNameMapFiles]:CommandLineConfig",
            "com.google.javascript.jscomp.AbstractCommandLineRunner:AbstractCommandLineRunner:[PrintStream out, PrintStream err]:null",
            "com.google.javascript.jscomp.AbstractCommandLineRunner:setRunOptions:[B options]:void",
            "com.google.javascript.jscomp.AbstractCommandLineRunner:openExternExportsStream:[B options, String path]:PrintStream",
            "com.google.javascript.jscomp.AbstractCommandLineRunner:parseModuleWrappers:[List\u003cString\u003e specs, JSModule[] modules]:Map\u003cString,String\u003e",
            "com.google.javascript.jscomp.AbstractCommandLineRunner\\$CommandLineConfig:setPrintPassGraph:[boolean printPassGraph]:CommandLineConfig",
            "com.google.javascript.jscomp.AbstractCommandLineRunner:getCompiler:[]:A",
            "com.google.javascript.jscomp.AbstractCommandLineRunner:outputSourceMap:[B options]:void",
            "com.google.javascript.jscomp.AbstractCommandLineRunner:toPrintStream:[String fileName]:PrintStream",
            "com.google.javascript.jscomp.AbstractCommandLineRunner\\$CommandLineConfig:setJscompWarning:[List\u003cString\u003e jscompWarning]:CommandLineConfig",
            "com.google.javascript.jscomp.AbstractCommandLineRunner:createExternInputs:[List\u003cString\u003e files]:List\u003cJSSourceFile\u003e",
            "com.google.javascript.jscomp.AbstractCommandLineRunner\\$CommandLineConfig:setSummaryDetailLevel:[int summaryDetailLevel]:CommandLineConfig",
            "com.google.javascript.jscomp.AbstractCommandLineRunner\\$CommandLineConfig:setModuleOutputPathPrefix:[String moduleOutputPathPrefix]:CommandLineConfig",
            "com.google.javascript.jscomp.AbstractCommandLineRunner:expandSourceMapPath:[B options, JSModule forModule]:String",
            "com.google.javascript.jscomp.AbstractCommandLineRunner\\$CommandLineConfig:setExterns:[List\u003cString\u003e externs]:CommandLineConfig",
            "com.google.javascript.jscomp.AbstractCommandLineRunner:getInputCharset:[]:Charset",
            "com.google.javascript.jscomp.AbstractCommandLineRunner\\$CommandLineConfig:setCodingConvention:[CodingConvention codingConvention]:CommandLineConfig",
            "com.google.javascript.jscomp.AbstractCommandLineRunner\\$CommandLineConfig:setOutputWrapper:[String outputWrapper]:CommandLineConfig",
            "com.google.javascript.jscomp.AbstractCommandLineRunner\\$CommandLineConfig:setModule:[List\u003cString\u003e module]:CommandLineConfig",
            "com.google.javascript.jscomp.AbstractCommandLineRunner\\$CommandLineConfig:setOutputWrapperMarker:[String outputWrapperMarker]:CommandLineConfig",
            "com.google.javascript.jscomp.AbstractCommandLineRunner\\$CommandLineConfig:setPrintAst:[boolean printAst]:CommandLineConfig",
            "com.google.javascript.jscomp.AbstractCommandLineRunner\\$RunTimeStats:outputBestPhaseOrdering:[]:void",
            "com.google.javascript.jscomp.AbstractCommandLineRunner\\$CommandLineConfig:setPrintTree:[boolean printTree]:CommandLineConfig",
            "com.google.javascript.jscomp.AbstractCommandLineRunner\\$RunTimeStats:recordStartRun:[]:void",
            "com.google.javascript.jscomp.AbstractCommandLineRunner:createInputs:[List\u003cString\u003e files, boolean allowStdIn]:List\u003cJSSourceFile\u003e",
            "com.google.javascript.jscomp.AbstractCommandLineRunner\\$RunTimeStats:recordEndRun:[]:void",
            "com.google.javascript.jscomp.AbstractCommandLineRunner:getMapPath:[String outputFile]:String",
            "com.google.javascript.jscomp.AbstractCommandLineRunner:shouldGenerateManifestPerModule:[]:boolean",
            "com.google.javascript.jscomp.AbstractCommandLineRunner:getDiagnosticGroups:[]:DiagnosticGroups",
            "com.google.javascript.jscomp.AbstractCommandLineRunner:createCompiler:[]:A",
            "com.google.javascript.jscomp.AbstractCommandLineRunner\\$CommandLineConfig:setPropertyMapOutputFile:[String propertyMapOutputFile]:CommandLineConfig",
            "com.google.javascript.jscomp.AbstractCommandLineRunner\\$CommandLineConfig:setLoggingLevel:[String loggingLevel]:CommandLineConfig",
            "com.google.javascript.jscomp.AbstractCommandLineRunner:createSourceInputs:[List\u003cString\u003e files]:List\u003cJSSourceFile\u003e",
            "com.google.javascript.jscomp.AbstractCommandLineRunner\\$CommandLineConfig:setVariableMapOutputFile:[String variableMapOutputFile]:CommandLineConfig",
            "com.google.javascript.jscomp.AbstractCommandLineRunner:writeOutput:[PrintStream out, Compiler compiler, String code, String wrapper, String codePlaceholder]:void",
            "com.google.javascript.jscomp.AbstractCommandLineRunner:doRun:[]:int",
            "com.google.javascript.jscomp.AbstractCommandLineRunner\\$FlagUsageException:FlagUsageException:[String message]:null",
            "com.google.javascript.jscomp.AbstractCommandLineRunner\\$CommandLineConfig:setComputePhaseOrdering:[boolean computePhaseOrdering]:CommandLineConfig",
            "com.google.javascript.jscomp.AbstractCommandLineRunner:run:[]:void",
            "com.google.javascript.jscomp.AbstractCommandLineRunner\\$CommandLineConfig:setJs:[List\u003cString\u003e js]:CommandLineConfig",
            "com.google.javascript.jscomp.AbstractCommandLineRunner\\$CommandLineConfig:setDefine:[List\u003cString\u003e define]:CommandLineConfig",
            "com.google.javascript.jscomp.AbstractCommandLineRunner\\$CommandLineConfig:setJscompError:[List\u003cString\u003e jscompError]:CommandLineConfig"
          ],
          "num": 68
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "-1"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "35",
            "36",
            "37",
            "38",
            "39",
            "40",
            "41",
            "42",
            "43",
            "44",
            "45",
            "46",
            "47",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57",
            "58",
            "59",
            "60",
            "61",
            "62",
            "63",
            "64",
            "65",
            "66",
            "67",
            "68",
            "69",
            "70",
            "71",
            "72",
            "73",
            "74",
            "75",
            "76",
            "77",
            "78",
            "79",
            "80",
            "81",
            "82",
            "83",
            "84",
            "85",
            "86",
            "87",
            "88",
            "89",
            "90",
            "91",
            "92",
            "93",
            "94",
            "95",
            "96",
            "97",
            "98",
            "99",
            "100",
            "101",
            "102",
            "103",
            "104",
            "105",
            "106",
            "107",
            "108",
            "109",
            "110",
            "111",
            "112",
            "113",
            "114",
            "115",
            "116",
            "117",
            "118",
            "119",
            "120",
            "121",
            "122",
            "123",
            "124",
            "125",
            "126",
            "127",
            "128",
            "129",
            "130",
            "131",
            "132",
            "133",
            "134",
            "135",
            "136",
            "137",
            "138",
            "139",
            "140",
            "141",
            "142",
            "143",
            "144",
            "145",
            "146",
            "147",
            "148",
            "149",
            "150",
            "151",
            "152",
            "153",
            "154",
            "155",
            "156",
            "157",
            "158",
            "159",
            "160",
            "161",
            "162",
            "163",
            "164",
            "165",
            "166",
            "167",
            "168",
            "169",
            "170",
            "171",
            "172",
            "173",
            "174",
            "175",
            "176",
            "177",
            "178",
            "179",
            "180",
            "181",
            "182",
            "183",
            "184",
            "185",
            "186",
            "187",
            "188",
            "189",
            "190",
            "191",
            "192",
            "193",
            "194",
            "195",
            "196",
            "197",
            "198",
            "199",
            "200",
            "201",
            "202",
            "203",
            "204",
            "205",
            "206",
            "207",
            "208",
            "209",
            "210",
            "211",
            "212",
            "213",
            "214",
            "215",
            "216",
            "217",
            "218",
            "219",
            "220",
            "221",
            "222",
            "223",
            "224",
            "225",
            "226",
            "227",
            "228",
            "229",
            "230",
            "231",
            "232",
            "233",
            "234",
            "235",
            "236",
            "237",
            "238",
            "239",
            "240",
            "241",
            "242",
            "243",
            "244",
            "245",
            "246",
            "247",
            "248",
            "249",
            "250",
            "251",
            "252",
            "253",
            "254",
            "255",
            "256",
            "257",
            "258",
            "259",
            "260",
            "261",
            "262",
            "263",
            "264",
            "265",
            "266",
            "267",
            "268",
            "269",
            "270",
            "271",
            "272",
            "273",
            "274",
            "275",
            "276",
            "277",
            "278",
            "279",
            "280",
            "281",
            "282",
            "283",
            "284",
            "285",
            "286",
            "287",
            "288",
            "289",
            "290",
            "291",
            "292",
            "293",
            "294",
            "295",
            "296",
            "297",
            "298",
            "299",
            "300",
            "301",
            "302",
            "303",
            "304",
            "305",
            "306",
            "307",
            "308",
            "309",
            "310",
            "311",
            "312",
            "313",
            "314",
            "315",
            "316",
            "317",
            "318",
            "319",
            "320",
            "321",
            "322",
            "323",
            "324",
            "325",
            "326",
            "327",
            "328",
            "329",
            "330",
            "331",
            "332",
            "333",
            "334",
            "335",
            "336",
            "337",
            "338",
            "339",
            "340",
            "341",
            "342",
            "343",
            "344",
            "345",
            "346",
            "347",
            "348",
            "349",
            "350",
            "351",
            "352",
            "353",
            "354",
            "355",
            "356",
            "357",
            "358",
            "359",
            "360",
            "361",
            "362",
            "363",
            "364",
            "365",
            "366",
            "367",
            "368",
            "369",
            "370",
            "371",
            "372",
            "373",
            "374",
            "375",
            "376",
            "377",
            "378",
            "379",
            "380",
            "381",
            "382",
            "383",
            "384",
            "385",
            "386",
            "387",
            "388",
            "389",
            "390",
            "391",
            "392",
            "393",
            "394",
            "395",
            "396",
            "397",
            "398",
            "399",
            "400",
            "401",
            "402",
            "403",
            "404",
            "405",
            "406",
            "407",
            "408",
            "409",
            "410",
            "411",
            "412",
            "413",
            "414",
            "415",
            "416",
            "417",
            "418",
            "419",
            "420",
            "421",
            "422",
            "423",
            "424",
            "425",
            "426",
            "427",
            "428",
            "429",
            "430",
            "431",
            "432",
            "433",
            "434",
            "435",
            "436",
            "437",
            "438",
            "439",
            "440",
            "441",
            "442",
            "443",
            "444",
            "445",
            "446",
            "447",
            "448",
            "449",
            "450",
            "451",
            "452",
            "453",
            "454",
            "455",
            "456",
            "457",
            "458",
            "459",
            "460",
            "461",
            "462",
            "463",
            "464",
            "465",
            "466",
            "467",
            "468",
            "469",
            "470",
            "471",
            "472",
            "473",
            "474",
            "475",
            "476",
            "477",
            "478",
            "479",
            "480",
            "481",
            "482",
            "483",
            "484",
            "485",
            "486",
            "487",
            "488",
            "489",
            "490",
            "491",
            "492",
            "493",
            "494",
            "495",
            "496",
            "497",
            "498",
            "499",
            "500",
            "501",
            "502",
            "503",
            "504",
            "505",
            "506",
            "507",
            "508",
            "509",
            "510",
            "511",
            "512",
            "513",
            "514",
            "515",
            "516",
            "517",
            "518",
            "519",
            "520",
            "521",
            "522",
            "523",
            "524",
            "525",
            "526",
            "527",
            "528",
            "529",
            "530",
            "531",
            "532",
            "533",
            "534",
            "535",
            "536",
            "537",
            "538",
            "539",
            "540",
            "541",
            "542",
            "543",
            "544",
            "545",
            "546",
            "547",
            "548",
            "549",
            "550",
            "551",
            "552",
            "553",
            "554",
            "555",
            "556",
            "557",
            "558",
            "559",
            "560",
            "561",
            "562",
            "563",
            "564",
            "565",
            "566",
            "567",
            "568",
            "569",
            "570",
            "571",
            "572",
            "573",
            "574",
            "575",
            "576",
            "577",
            "578",
            "579",
            "580",
            "581",
            "582",
            "583",
            "584",
            "585",
            "586",
            "587",
            "588",
            "589",
            "590",
            "591",
            "592",
            "593",
            "594",
            "595",
            "596",
            "597",
            "598",
            "599",
            "600",
            "601",
            "602",
            "603",
            "604",
            "605",
            "606",
            "607",
            "608",
            "609",
            "610",
            "611",
            "612",
            "613",
            "614",
            "615",
            "616",
            "617",
            "618",
            "619",
            "620",
            "621",
            "622",
            "623",
            "624",
            "625",
            "626",
            "627",
            "628",
            "629",
            "630",
            "631",
            "632",
            "633",
            "634",
            "635",
            "636",
            "637",
            "638",
            "639",
            "640",
            "641",
            "642",
            "643",
            "644",
            "645",
            "646",
            "647",
            "648",
            "649",
            "650",
            "651",
            "652",
            "653",
            "654",
            "655",
            "656",
            "657",
            "658",
            "659",
            "660",
            "661",
            "662",
            "663",
            "664",
            "665",
            "666",
            "667",
            "668",
            "669",
            "670",
            "671",
            "672",
            "673",
            "674",
            "675",
            "676",
            "677",
            "678",
            "679",
            "680",
            "681",
            "682",
            "683",
            "684",
            "685",
            "686",
            "687",
            "688",
            "689",
            "690",
            "691",
            "692",
            "693",
            "694",
            "695",
            "696",
            "697",
            "698",
            "699",
            "700",
            "701",
            "702",
            "703",
            "704",
            "705",
            "706",
            "707",
            "708",
            "709",
            "710",
            "711",
            "712",
            "713",
            "714",
            "715",
            "716",
            "717",
            "718",
            "719",
            "720",
            "721",
            "722",
            "723",
            "724",
            "725",
            "726",
            "727",
            "728",
            "729",
            "730",
            "731",
            "732",
            "733",
            "734",
            "735",
            "736",
            "737",
            "738",
            "739",
            "740",
            "741",
            "742",
            "743",
            "744",
            "745",
            "746",
            "747",
            "748",
            "749",
            "750",
            "751",
            "752",
            "753",
            "754",
            "755",
            "756",
            "757",
            "758",
            "759",
            "760",
            "761",
            "762",
            "763",
            "764",
            "765",
            "766",
            "767",
            "768",
            "769",
            "770",
            "771",
            "772",
            "773",
            "774",
            "775",
            "776",
            "777",
            "778",
            "779",
            "780",
            "781",
            "782",
            "783",
            "784",
            "785",
            "786",
            "787",
            "788",
            "789",
            "790",
            "791",
            "792",
            "793",
            "794",
            "795",
            "796",
            "797",
            "798",
            "799",
            "800",
            "801",
            "802",
            "803",
            "804",
            "805",
            "806",
            "807",
            "808",
            "809",
            "810",
            "811",
            "812",
            "813",
            "814",
            "815",
            "816",
            "817",
            "818",
            "819",
            "820",
            "821",
            "822",
            "823",
            "824",
            "825",
            "826",
            "827",
            "828",
            "829",
            "830",
            "831",
            "832",
            "833",
            "834",
            "835",
            "836",
            "837",
            "838",
            "839",
            "840",
            "841",
            "842",
            "843",
            "844",
            "845",
            "846",
            "847",
            "848",
            "849",
            "850",
            "851",
            "852",
            "853",
            "854",
            "855",
            "856",
            "857",
            "858",
            "859",
            "860",
            "861",
            "862",
            "863",
            "864",
            "865",
            "866",
            "867",
            "868",
            "869",
            "870",
            "871",
            "872",
            "873",
            "874",
            "875",
            "876",
            "877",
            "878",
            "879",
            "880",
            "881",
            "882",
            "883",
            "884",
            "885",
            "886",
            "887",
            "888",
            "889",
            "890",
            "891",
            "892",
            "893",
            "894",
            "895",
            "896",
            "897",
            "898",
            "899",
            "900",
            "901",
            "902",
            "903",
            "904",
            "905",
            "906",
            "907",
            "908",
            "909",
            "910",
            "911",
            "912",
            "913",
            "914",
            "915",
            "916",
            "917",
            "918",
            "919",
            "920",
            "921",
            "922",
            "923",
            "924",
            "925",
            "926",
            "927",
            "928",
            "929",
            "930",
            "931",
            "932",
            "933",
            "934",
            "935",
            "936",
            "937",
            "938",
            "939",
            "940",
            "941",
            "942",
            "943",
            "944",
            "945",
            "946",
            "947",
            "948",
            "949",
            "950",
            "951",
            "952",
            "953",
            "954",
            "955",
            "956",
            "957",
            "958",
            "959",
            "960",
            "961",
            "962",
            "963",
            "964",
            "965",
            "966",
            "967",
            "968",
            "969",
            "970",
            "971",
            "972",
            "973",
            "974",
            "975",
            "976",
            "977",
            "978",
            "979",
            "980",
            "981",
            "982",
            "983",
            "984",
            "985",
            "986",
            "987",
            "988",
            "989",
            "990",
            "991",
            "992",
            "993",
            "994",
            "995",
            "996",
            "997",
            "998",
            "999",
            "1000",
            "1001",
            "1002",
            "1003",
            "1004",
            "1005",
            "1006",
            "1007",
            "1008",
            "1009",
            "1010",
            "1011",
            "1012",
            "1013",
            "1014",
            "1015",
            "1016",
            "1017",
            "1018",
            "1019",
            "1020",
            "1021",
            "1022",
            "1023",
            "1024",
            "1025",
            "1026",
            "1027",
            "1028",
            "1029",
            "1030",
            "1031",
            "1032",
            "1033",
            "1034",
            "1035",
            "1036",
            "1037",
            "1038",
            "1039",
            "1040",
            "1041",
            "1042",
            "1043",
            "1044",
            "1045",
            "1046",
            "1047",
            "1048",
            "1049",
            "1050",
            "1051",
            "1052",
            "1053",
            "1054",
            "1055",
            "1056",
            "1057",
            "1058",
            "1059",
            "1060",
            "1061",
            "1062",
            "1063",
            "1064",
            "1065",
            "1066",
            "1067",
            "1068",
            "1069",
            "1070",
            "1071",
            "1072",
            "1073",
            "1074",
            "1075",
            "1076",
            "1077",
            "1078",
            "1079",
            "1080",
            "1081",
            "1082",
            "1083",
            "1084",
            "1085",
            "1086",
            "1087",
            "1088",
            "1089",
            "1090",
            "1091",
            "1092",
            "1093",
            "1094",
            "1095",
            "1096",
            "1097",
            "1098",
            "1099",
            "1100",
            "1101",
            "1102",
            "1103",
            "1104",
            "1105",
            "1106",
            "1107",
            "1108",
            "1109",
            "1110",
            "1111",
            "1112",
            "1113",
            "1114",
            "1115",
            "1116",
            "1117",
            "1118",
            "1119",
            "1120",
            "1121",
            "1122",
            "1123",
            "1124",
            "1125",
            "1126",
            "1127",
            "1128",
            "1129",
            "1130",
            "1131",
            "1132",
            "1133",
            "1134",
            "1135",
            "1136",
            "1137",
            "1138",
            "1139",
            "1140",
            "1141",
            "1142",
            "1143",
            "1144",
            "1145",
            "1146",
            "1147",
            "1148",
            "1149",
            "1150",
            "1151",
            "1152",
            "1153",
            "1154",
            "1155",
            "1156",
            "1157",
            "1158",
            "1159",
            "1160",
            "1161",
            "1162",
            "1163",
            "1164",
            "1165",
            "1166",
            "1167",
            "1168",
            "1169",
            "1170",
            "1171",
            "1172",
            "1173",
            "1174",
            "1175",
            "1176",
            "1177",
            "1178",
            "1179",
            "1180",
            "1181",
            "1182",
            "1183",
            "1184",
            "1185",
            "1186",
            "1187",
            "1188",
            "1189",
            "1190",
            "1191",
            "1192",
            "1193",
            "1194",
            "1195",
            "1196",
            "1197",
            "1198",
            "1199",
            "1200",
            "1201",
            "1202",
            "1203",
            "1204",
            "1205",
            "1206",
            "1207",
            "1208",
            "1209",
            "1210",
            "1211",
            "1212",
            "1213",
            "1214",
            "1215",
            "1216",
            "1217",
            "1218",
            "1219",
            "1220",
            "1221",
            "1222",
            "1223",
            "1224",
            "1225",
            "1226",
            "1227",
            "1228",
            "1229",
            "1230",
            "1231",
            "1232",
            "1233",
            "1234",
            "1235",
            "1236",
            "1237",
            "1238",
            "1239",
            "1240",
            "1241",
            "1242",
            "1243",
            "1244",
            "1245",
            "1246",
            "1247",
            "1248",
            "1249",
            "1250",
            "1251",
            "1252",
            "1253",
            "1254",
            "1255",
            "1256",
            "1257",
            "1258",
            "1259",
            "1260",
            "1261",
            "1262",
            "1263",
            "1264",
            "1265",
            "1266",
            "1267",
            "1268",
            "1269",
            "1270",
            "1271",
            "1272",
            "1273",
            "1274",
            "1275",
            "1276",
            "1277",
            "1278",
            "1279",
            "1280",
            "1281",
            "1282",
            "1283",
            "1284",
            "1285",
            "1286",
            "1287",
            "1288",
            "1289",
            "1290",
            "1291",
            "1292",
            "1293",
            "1294",
            "1295",
            "1296",
            "1297",
            "1298",
            "1299",
            "1300",
            "1301",
            "1302",
            "1303",
            "1304",
            "1305",
            "1306",
            "1307",
            "1308",
            "1309",
            "1310",
            "1311",
            "1312",
            "1313",
            "1314",
            "1315",
            "1316",
            "1317",
            "1318",
            "1319",
            "1320",
            "1321",
            "1322",
            "1323",
            "1324",
            "1325",
            "1326",
            "1327",
            "1328",
            "1329",
            "1330",
            "1331",
            "1332",
            "1333",
            "1334",
            "1335",
            "1336",
            "1337",
            "1338",
            "1339",
            "1340",
            "1341",
            "1342",
            "1343",
            "1344",
            "1345",
            "1346",
            "1347",
            "1348",
            "1349",
            "1350",
            "1351",
            "1352"
          ],
          "num": 1352
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java b/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\nnew file mode 100644\nindex 0000000..4e0d0d8\n--- /dev/null\n+++ b/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\n@@ -0,0 +1,1352 @@\n+/*\n+ * Copyright 2009 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.javascript.jscomp;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Charsets;\n+import com.google.common.base.Joiner;\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.Lists;\n+import com.google.common.collect.Maps;\n+import com.google.javascript.rhino.Node;\n+import com.google.javascript.rhino.TokenStream;\n+import com.google.protobuf.CodedOutputStream;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.PrintStream;\n+import java.nio.charset.Charset;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.logging.Level;\n+\n+/**\n+ * Implementations of AbstractCommandLineRunner translate flags into Java\n+ * API calls on the Compiler. AbstractCompiler contains common flags and logic\n+ * to make that happen.\n+ *\n+ * This class may be extended and used to create other Java classes\n+ * that behave the same as running the Compiler from the command line. Example:\n+ *\n+ * \u003cpre\u003e\n+ * class MyCommandLineRunner extends\n+ *     AbstractCommandLineRunner\u003cMyCompiler, MyOptions\u003e {\n+ *   MyCommandLineRunner(String[] args) {\n+ *     super(args);\n+ *   }\n+ *\n+ *   \u0026#064;Override\n+ *   protected MyOptions createOptions() {\n+ *     MyOptions options \u003d new MyOptions();\n+ *     CompilerFlagTranslator.setOptionsFromFlags(options);\n+ *     addMyCrazyCompilerPassThatOutputsAnExtraFile(options);\n+ *     return options;\n+ *   }\n+ *\n+ *   \u0026#064;Override\n+ *   protected MyCompiler createCompiler() {\n+ *     return new MyCompiler();\n+ *   }\n+ *\n+ *   public static void main(String[] args) {\n+ *     (new MyCommandLineRunner(args)).run();\n+ *   }\n+ * }\n+ * \u003c/pre\u003e\n+ *\n+ * @author bolinfest@google.com (Michael Bolin)\n+ */\n+abstract class AbstractCommandLineRunner\u003cA extends Compiler,\n+    B extends CompilerOptions\u003e {\n+\n+  private final CommandLineConfig config;\n+\n+  private PrintStream out;\n+  private final PrintStream err;\n+  private A compiler;\n+\n+  private static Charset inputCharset;\n+\n+  // Bookkeeping to measure optimal phase orderings.\n+  private static final int NUM_RUNS_TO_DETERMINE_OPTIMAL_ORDER \u003d 100;\n+\n+  private final RunTimeStats runTimeStats \u003d new RunTimeStats();\n+\n+  AbstractCommandLineRunner() {\n+    this(System.out, System.err);\n+  }\n+\n+  AbstractCommandLineRunner(PrintStream out, PrintStream err) {\n+    this.config \u003d new CommandLineConfig();\n+    this.out \u003d out;\n+    this.err \u003d err;\n+  }\n+\n+  /**\n+   * Get the command line config, so that it can be initialized.\n+   */\n+  protected CommandLineConfig getCommandLineConfig() {\n+    return config;\n+  }\n+\n+  /**\n+   * Returns the instance of the Compiler to use when {@link #run()} is\n+   * called.\n+   */\n+  protected abstract A createCompiler();\n+\n+  /**\n+   * Returns the instance of the Options to use when {@link #run()} is called.\n+   * createCompiler() is called before createOptions(), so getCompiler()\n+   * will not return null when createOptions() is called.\n+   */\n+  protected abstract B createOptions();\n+\n+  protected DiagnosticGroups getDiagnosticGroups() {\n+    return new DiagnosticGroups();\n+  }\n+\n+  protected void initOptionsFromFlags(CompilerOptions options) {\n+    DiagnosticGroups diagnosticGroups \u003d getDiagnosticGroups();\n+\n+    diagnosticGroups.setWarningLevels(\n+        options, config.jscompError, CheckLevel.ERROR);\n+    diagnosticGroups.setWarningLevels(\n+        options, config.jscompWarning, CheckLevel.WARNING);\n+    diagnosticGroups.setWarningLevels(\n+        options, config.jscompOff, CheckLevel.OFF);\n+\n+    createDefineReplacements(config.define, options);\n+\n+    options.manageClosureDependencies \u003d config.manageClosureDependencies;\n+  }\n+\n+  final protected A getCompiler() {\n+    return compiler;\n+  }\n+\n+  final protected void setRunOptions(B options)\n+      throws IOException, FlagUsageException {\n+    if (config.jsOutputFile.length() \u003e 0) {\n+      options.jsOutputFile \u003d config.jsOutputFile;\n+    }\n+\n+    if (config.createSourceMap.length() \u003e 0) {\n+      options.sourceMapOutputPath \u003d config.createSourceMap;\n+    }\n+\n+    if (!config.variableMapInputFile.equals(\"\")) {\n+      options.inputVariableMapSerialized \u003d\n+          VariableMap.load(config.variableMapInputFile).toBytes();\n+    }\n+\n+    if (!config.propertyMapInputFile.equals(\"\")) {\n+      options.inputPropertyMapSerialized \u003d\n+          VariableMap.load(config.propertyMapInputFile).toBytes();\n+    }\n+\n+    options.setCodingConvention(config.codingConvention);\n+    options.setSummaryDetailLevel(config.summaryDetailLevel);\n+\n+    inputCharset \u003d getInputCharset();\n+  }\n+\n+  /**\n+   * Runs the Compiler and calls System.exit() with the exit status of the\n+   * compiler.\n+   */\n+  final public void run() {\n+    int result \u003d 0;\n+    int runs \u003d 1;\n+    if (config.computePhaseOrdering) {\n+      runs \u003d NUM_RUNS_TO_DETERMINE_OPTIMAL_ORDER;\n+      PhaseOptimizer.randomizeLoops();\n+    }\n+    try {\n+      for (int i \u003d 0; i \u003c runs \u0026\u0026 result \u003d\u003d 0; i++) {\n+        runTimeStats.recordStartRun();\n+        result \u003d doRun();\n+        runTimeStats.recordEndRun();\n+      }\n+    } catch (AbstractCommandLineRunner.FlagUsageException e) {\n+      System.err.println(e.getMessage());\n+      result \u003d -1;\n+    } catch (Throwable t) {\n+      t.printStackTrace();\n+      result \u003d -2;\n+    }\n+    if (config.computePhaseOrdering) {\n+      runTimeStats.outputBestPhaseOrdering();\n+    }\n+    System.exit(result);\n+  }\n+\n+  /**\n+   * Returns the PrintStream for writing errors associated with this\n+   * AbstractCommandLineRunner.\n+   */\n+  protected PrintStream getErrorPrintStream() {\n+    return err;\n+  }\n+\n+  /**\n+   * An exception thrown when command-line flags are used incorrectly.\n+   */\n+  protected static class FlagUsageException extends Exception {\n+    private static final long serialVersionUID \u003d 1L;\n+\n+    FlagUsageException(String message) {\n+      super(message);\n+    }\n+  }\n+\n+  /**\n+   * Creates inputs from a list of files.\n+   *\n+   * @param files A list of filenames\n+   * @param allowStdIn Whether \u0027-\u0027 is allowed appear as a filename to represent\n+   *        stdin. If true, \u0027-\u0027 is only allowed to appear once.\n+   * @return An array of inputs\n+   */\n+  private static List\u003cJSSourceFile\u003e createInputs(List\u003cString\u003e files,\n+      boolean allowStdIn) throws FlagUsageException, IOException {\n+    List\u003cJSSourceFile\u003e inputs \u003d new ArrayList\u003cJSSourceFile\u003e(files.size());\n+    boolean usingStdin \u003d false;\n+    for (String filename : files) {\n+      if (!\"-\".equals(filename)) {\n+        JSSourceFile newFile \u003d JSSourceFile.fromFile(filename, inputCharset);\n+        inputs.add(newFile);\n+      } else {\n+        if (!allowStdIn) {\n+          throw new FlagUsageException(\"Can\u0027t specify stdin.\");\n+        }\n+        if (usingStdin) {\n+          throw new FlagUsageException(\"Can\u0027t specify stdin twice.\");\n+        }\n+\n+        inputs.add(JSSourceFile.fromInputStream(\"stdin\", System.in));\n+        usingStdin \u003d true;\n+      }\n+    }\n+    return inputs;\n+  }\n+\n+  /**\n+   * Creates js source code inputs from a list of files.\n+   */\n+  private static List\u003cJSSourceFile\u003e createSourceInputs(List\u003cString\u003e files)\n+      throws FlagUsageException, IOException {\n+    if (files.isEmpty()) {\n+      files \u003d Collections.singletonList(\"-\");\n+    }\n+    try {\n+      return createInputs(files, true);\n+    } catch (FlagUsageException e) {\n+      throw new FlagUsageException(\"Bad --js flag. \" + e.getMessage());\n+    }\n+  }\n+\n+  /**\n+   * Creates js extern inputs from a list of files.\n+   */\n+  private static List\u003cJSSourceFile\u003e createExternInputs(List\u003cString\u003e files)\n+      throws FlagUsageException, IOException {\n+    if (files.isEmpty()) {\n+      return ImmutableList.of(JSSourceFile.fromCode(\"/dev/null\", \"\"));\n+    }\n+    try {\n+      return createInputs(files, false);\n+    } catch (FlagUsageException e) {\n+      throw new FlagUsageException(\"Bad --externs flag. \" + e.getMessage());\n+    }\n+  }\n+\n+  /**\n+   * Creates module objects from a list of module specifications.\n+   *\n+   * @param specs A list of module specifications, not null or empty. The spec\n+   *        format is: \u003ccode\u003ename:num-js-files[:[dep,...][:]]\u003c/code\u003e. Module\n+   *        names must not contain the \u0027:\u0027 character.\n+   * @param jsFiles A list of js file paths, not null\n+   * @return An array of module objects\n+   */\n+  static JSModule[] createJsModules(List\u003cString\u003e specs, List\u003cString\u003e jsFiles)\n+      throws FlagUsageException, IOException {\n+    Preconditions.checkState(specs !\u003d null);\n+    Preconditions.checkState(!specs.isEmpty());\n+    Preconditions.checkState(jsFiles !\u003d null);\n+\n+    final int totalNumJsFiles \u003d jsFiles.size();\n+    int nextJsFileIndex \u003d 0;\n+\n+    Map\u003cString, JSModule\u003e modulesByName \u003d Maps.newLinkedHashMap();\n+    for (String spec : specs) {\n+\n+      // Format is \"\u003cname\u003e:\u003cnum-js-files\u003e[:[\u003cdep\u003e,...][:]]\".\n+      String[] parts \u003d spec.split(\":\");\n+      if (parts.length \u003c 2 || parts.length \u003e 4) {\n+        throw new FlagUsageException(\"Expected 2-4 colon-delimited parts in \"\n+            + \"module spec: \" + spec);\n+      }\n+\n+      // Parse module name.\n+      String name \u003d parts[0];\n+      if (!TokenStream.isJSIdentifier(name)) {\n+        throw new FlagUsageException(\"Invalid module name: \u0027\" + name + \"\u0027\");\n+      }\n+      if (modulesByName.containsKey(name)) {\n+        throw new FlagUsageException(\"Duplicate module name: \" + name);\n+      }\n+      JSModule module \u003d new JSModule(name);\n+\n+      // Parse module inputs.\n+      int numJsFiles \u003d -1;\n+      try {\n+        numJsFiles \u003d Integer.parseInt(parts[1]);\n+      } catch (NumberFormatException ignored) {\n+        numJsFiles \u003d -1;\n+      }\n+\n+      // We will allow modules of zero input.\n+      if (numJsFiles \u003c 0) {\n+        throw new FlagUsageException(\"Invalid js file count \u0027\" + parts[1]\n+            + \"\u0027 for module: \" + name);\n+      }\n+      if (nextJsFileIndex + numJsFiles \u003e totalNumJsFiles) {\n+        throw new FlagUsageException(\"Not enough js files specified. Expected \"\n+            + (nextJsFileIndex + numJsFiles - totalNumJsFiles)\n+            + \" more in module:\" + name);\n+      }\n+      List\u003cString\u003e moduleJsFiles \u003d\n+          jsFiles.subList(nextJsFileIndex, nextJsFileIndex + numJsFiles);\n+      for (JSSourceFile input : createInputs(moduleJsFiles, false)) {\n+        module.add(input);\n+      }\n+      nextJsFileIndex +\u003d numJsFiles;\n+\n+      if (parts.length \u003e 2) {\n+        // Parse module dependencies.\n+        String depList \u003d parts[2];\n+        if (depList.length() \u003e 0) {\n+          String[] deps \u003d depList.split(\",\");\n+          for (String dep : deps) {\n+            JSModule other \u003d modulesByName.get(dep);\n+            if (other \u003d\u003d null) {\n+              throw new FlagUsageException(\"Module \u0027\" + name\n+                  + \"\u0027 depends on unknown module \u0027\" + dep\n+                  + \"\u0027. Be sure to list modules in dependency order.\");\n+            }\n+            module.addDependency(other);\n+          }\n+        }\n+      }\n+\n+      modulesByName.put(name, module);\n+    }\n+\n+    if (nextJsFileIndex \u003c totalNumJsFiles) {\n+      throw new FlagUsageException(\"Too many js files specified. Expected \"\n+          + nextJsFileIndex + \" but found \" + totalNumJsFiles);\n+    }\n+\n+    return modulesByName.values().toArray(new JSModule[modulesByName.size()]);\n+  }\n+\n+  /**\n+   * Parses module wrapper specifications.\n+   *\n+   * @param specs A list of module wrapper specifications, not null. The spec\n+   *        format is: \u003ccode\u003ename:wrapper\u003c/code\u003e. Wrappers.\n+   * @param modules The JS modules whose wrappers are specified\n+   * @return A map from module name to module wrapper. Modules with no wrapper\n+   *         will have the empty string as their value in this map.\n+   */\n+  static Map\u003cString, String\u003e parseModuleWrappers(List\u003cString\u003e specs,\n+      JSModule[] modules) throws FlagUsageException {\n+    Preconditions.checkState(specs !\u003d null);\n+\n+    Map\u003cString, String\u003e wrappers \u003d\n+        Maps.newHashMapWithExpectedSize(modules.length);\n+\n+    // Prepopulate the map with module names.\n+    for (JSModule m : modules) {\n+      wrappers.put(m.getName(), \"\");\n+    }\n+\n+    for (String spec : specs) {\n+\n+      // Format is \"\u003cname\u003e:\u003cwrapper\u003e\".\n+      int pos \u003d spec.indexOf(\u0027:\u0027);\n+      if (pos \u003d\u003d -1) {\n+        throw new FlagUsageException(\"Expected module wrapper to have \"\n+            + \"\u003cname\u003e:\u003cwrapper\u003e format: \" + spec);\n+      }\n+\n+      // Parse module name.\n+      String name \u003d spec.substring(0, pos);\n+      if (!wrappers.containsKey(name)) {\n+        throw new FlagUsageException(\"Unknown module: \u0027\" + name + \"\u0027\");\n+      }\n+      String wrapper \u003d spec.substring(pos + 1);\n+      if (!wrapper.contains(\"%s\")) {\n+        throw new FlagUsageException(\"No %s placeholder in module wrapper: \u0027\"\n+            + wrapper + \"\u0027\");\n+      }\n+      wrappers.put(name, wrapper);\n+    }\n+    return wrappers;\n+  }\n+\n+  /**\n+   * Writes code to an output stream, optionally wrapping it in an arbitrary\n+   * wrapper that contains a placeholder where the code should be inserted.\n+   */\n+  static void writeOutput(PrintStream out, Compiler compiler, String code,\n+      String wrapper, String codePlaceholder) {\n+    int pos \u003d wrapper.indexOf(codePlaceholder);\n+    if (pos !\u003d -1) {\n+      String prefix \u003d \"\";\n+\n+      if (pos \u003e 0) {\n+        prefix \u003d wrapper.substring(0, pos);\n+        out.print(prefix);\n+      }\n+\n+      out.print(code);\n+\n+      int suffixStart \u003d pos + codePlaceholder.length();\n+      if (suffixStart \u003d\u003d wrapper.length()) {\n+        // Nothing after placeholder?\n+        // Make sure we always end output with a line feed.\n+        out.println();\n+      } else {\n+        out.println(wrapper.substring(suffixStart));\n+      }\n+\n+      // If we have a source map, adjust its offsets to match\n+      // the code WITHIN the wrapper.\n+      if (compiler !\u003d null \u0026\u0026 compiler.getSourceMap() !\u003d null) {\n+        compiler.getSourceMap().setWrapperPrefix(prefix);\n+      }\n+\n+    } else {\n+      out.println(code);\n+    }\n+  }\n+\n+  /**\n+   * Creates any directories necessary to write a file that will have a given\n+   * path prefix.\n+   */\n+  private static void maybeCreateDirsForPath(String pathPrefix) {\n+    if (pathPrefix.length() \u003e 0) {\n+      String dirName \u003d\n+          pathPrefix.charAt(pathPrefix.length() - 1) \u003d\u003d File.separatorChar\n+              ? pathPrefix.substring(0, pathPrefix.length() - 1) : new File(\n+                  pathPrefix).getParent();\n+      if (dirName !\u003d null) {\n+        new File(dirName).mkdirs();\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Parses command-line arguments and runs the compiler.\n+   *\n+   * @return system exit status\n+   */\n+  protected int doRun() throws FlagUsageException, IOException {\n+    Compiler.setLoggingLevel(Level.parse(config.loggingLevel));\n+\n+    List\u003cJSSourceFile\u003e externsList \u003d createExterns();\n+    JSSourceFile[] externs \u003d new JSSourceFile[externsList.size()];\n+    externsList.toArray(externs);\n+\n+    compiler \u003d createCompiler();\n+    B options \u003d createOptions();\n+\n+    JSModule[] modules \u003d null;\n+    Result result;\n+\n+    setRunOptions(options);\n+\n+    // Let the outputCharset be the same as the input charset... except if\n+    // we\u0027re reading in UTF-8 by default.  By tradition, we\u0027ve always\n+    // output ASCII to avoid various hiccups with different browsers,\n+    // proxies and firewalls.\n+    if (inputCharset \u003d\u003d Charsets.UTF_8) {\n+      options.outputCharset \u003d Charsets.US_ASCII;\n+    } else {\n+      options.outputCharset \u003d inputCharset;\n+    }\n+\n+    if (!options.jsOutputFile.isEmpty()) {\n+      out \u003d new PrintStream(options.jsOutputFile, inputCharset.name());\n+    }\n+\n+    List\u003cString\u003e jsFiles \u003d config.js;\n+    List\u003cString\u003e moduleSpecs \u003d config.module;\n+    if (!moduleSpecs.isEmpty()) {\n+      modules \u003d createJsModules(moduleSpecs, jsFiles);\n+      result \u003d compiler.compile(externs, modules, options);\n+    } else {\n+      List\u003cJSSourceFile\u003e inputList \u003d createSourceInputs(jsFiles);\n+      JSSourceFile[] inputs \u003d new JSSourceFile[inputList.size()];\n+      inputList.toArray(inputs);\n+      result \u003d compiler.compile(externs, inputs, options);\n+    }\n+\n+    return processResults(result, modules, options);\n+  }\n+\n+  /**\n+   * Processes the results of the compile job, and returns an error code.\n+   */\n+  int processResults(Result result, JSModule[] modules, B options)\n+       throws FlagUsageException, IOException {\n+    if (config.computePhaseOrdering) {\n+      return 0;\n+    }\n+\n+    if (config.printPassGraph) {\n+      if (compiler.getRoot() \u003d\u003d null) {\n+        return 1;\n+      } else {\n+        out.append(DotFormatter.toDot(compiler.getPassConfig().getPassGraph()));\n+        out.println();\n+        return 0;\n+      }\n+    }\n+\n+    if (config.printAst) {\n+      if (compiler.getRoot() \u003d\u003d null) {\n+        return 1;\n+      } else {\n+        ControlFlowGraph\u003cNode\u003e cfg \u003d compiler.computeCFG();\n+        DotFormatter.appendDot(compiler.getRoot(), cfg, out);\n+        out.println();\n+        return 0;\n+      }\n+    }\n+\n+    if (config.printTree) {\n+      if (compiler.getRoot() \u003d\u003d null) {\n+        out.println(\"Code contains errors; no tree was generated.\");\n+        return 1;\n+      } else {\n+        compiler.getRoot().appendStringTree(out);\n+        out.println(\"\");\n+        return 0;\n+      }\n+    }\n+\n+    if (result.success) {\n+      if (modules \u003d\u003d null) {\n+        writeOutput(out, compiler, compiler.toSource(), config.outputWrapper,\n+            config.outputWrapperMarker);\n+\n+        // Output the source map if requested.\n+        outputSourceMap(options);\n+      } else {\n+        String moduleFilePrefix \u003d config.moduleOutputPathPrefix;\n+        maybeCreateDirsForPath(moduleFilePrefix);\n+        Map\u003cString, String\u003e moduleWrappers \u003d\n+            parseModuleWrappers(config.moduleWrapper, modules);\n+\n+        // If the source map path is in fact a pattern for each\n+        // module, create a stream per-module. Otherwise, create\n+        // a single source map.\n+        PrintStream mapOut \u003d null;\n+\n+        if (!shouldGenerateMapPerModule(options)) {\n+          mapOut \u003d toPrintStream(expandSourceMapPath(options, null));\n+        }\n+\n+        for (JSModule m : modules) {\n+          if (shouldGenerateMapPerModule(options)) {\n+            mapOut \u003d toPrintStream(expandSourceMapPath(options, m));\n+          }\n+\n+          PrintStream ps \u003d\n+              new PrintStream(new FileOutputStream(moduleFilePrefix\n+                  + m.getName() + \".js\"));\n+\n+          if (options.sourceMapOutputPath !\u003d null) {\n+            compiler.getSourceMap().reset();\n+          }\n+\n+          writeOutput(ps, compiler, compiler.toSource(m), moduleWrappers.get(\n+              m.getName()), \"%s\");\n+\n+          if (options.sourceMapOutputPath !\u003d null) {\n+            compiler.getSourceMap().appendTo(mapOut, m.getName());\n+          }\n+\n+          ps.close();\n+\n+          if (shouldGenerateMapPerModule(options) \u0026\u0026 mapOut !\u003d null) {\n+            mapOut.close();\n+            mapOut \u003d null;\n+          }\n+        }\n+\n+        if (mapOut !\u003d null) {\n+          mapOut.close();\n+        }\n+      }\n+\n+      // Output the externs if required.\n+      if (options.externExportsPath !\u003d null) {\n+        PrintStream eeOut \u003d\n+            openExternExportsStream(options, options.jsOutputFile);\n+        eeOut.append(result.externExport);\n+        eeOut.close();\n+      }\n+\n+      // Output the variable and property name maps if requested.\n+      outputNameMaps(options);\n+\n+      // Output the manifest if requested.\n+      outputManifest();\n+    }\n+\n+    // return 0 if no errors, the error count otherwise\n+    return Math.min(result.errors.length, 0x7f);\n+  }\n+\n+  /**\n+   * Query the flag for the charset, and return a Charset object representing\n+   * the selection.\n+   *\n+   * @return Charset to use when reading inputs\n+   * @throws FlagUsageException if flag is not a valid Charset name.\n+   */\n+  private Charset getInputCharset() throws FlagUsageException {\n+    if (!config.charset.isEmpty()) {\n+      if (!Charset.isSupported(config.charset)) {\n+        throw new FlagUsageException(config.charset +\n+            \" is not a valid charset name.\");\n+      }\n+      return Charset.forName(config.charset);\n+    }\n+    return Charsets.UTF_8;\n+  }\n+\n+  protected List\u003cJSSourceFile\u003e createExterns() throws FlagUsageException,\n+      IOException {\n+    return createExternInputs(config.externs);\n+  }\n+\n+  /**\n+   * Returns true if and only if a source map file should be generated for each\n+   * module, as opposed to one unified map. This is specified by having the\n+   * source map pattern include the %outname% variable.\n+   */\n+  private boolean shouldGenerateMapPerModule(B options) {\n+    return options.sourceMapOutputPath !\u003d null\n+        \u0026\u0026 options.sourceMapOutputPath.contains(\"%outname%\");\n+  }\n+\n+  /**\n+   * Returns a stream for outputting the generated externs file.\n+   *\n+   * @param options The options to the Compiler.\n+   * @param path The path of the generated JS source file.\n+   *\n+   * @return The stream or null if no extern-ed exports are being generated.\n+   */\n+  private PrintStream openExternExportsStream(B options,\n+      String path) throws IOException {\n+    if (options.externExportsPath \u003d\u003d null) {\n+      return null;\n+    }\n+\n+    String exPath \u003d options.externExportsPath;\n+\n+    if (!exPath.contains(File.separator)) {\n+      File outputFile \u003d new File(path);\n+      exPath \u003d outputFile.getParent() + File.separatorChar + exPath;\n+    }\n+\n+    return new PrintStream(new FileOutputStream(exPath));\n+  }\n+\n+  /**\n+   * Expand a file path specified on the command-line.\n+   *\n+   * Most file paths on the command-line allow an %outname% placeholder.\n+   * The placeholder will expand to a different value depending on\n+   * the current output mode. There are three scenarios:\n+   *\n+   * 1) Single js output, single extra output: sub in jsOutputPath.\n+   * 2) Multiple js output, single extra output: sub in the base module name.\n+   * 3) Multiple js output, multiple extra output: sub in the module output file.\n+   *\n+   * Passing a JSModule to this function automatically triggers case #3.\n+   * Otherwise, we\u0027ll use strategy #1 or #2 based on the current output mode.\n+   */\n+  private String expandCommandLinePath(\n+      String path, JSModule forModule) {\n+    String sub;\n+    if (forModule !\u003d null) {\n+      sub \u003d config.moduleOutputPathPrefix + forModule.getName() + \".js\";\n+    } else if (!config.module.isEmpty()) {\n+      sub \u003d config.moduleOutputPathPrefix;\n+    } else {\n+      sub \u003d config.jsOutputFile;\n+    }\n+    return path.replace(\"%outname%\", sub);\n+  }\n+\n+  /** Expansion function for source map. */\n+  @VisibleForTesting\n+  String expandSourceMapPath(B options, JSModule forModule) {\n+    if (Strings.isEmpty(options.sourceMapOutputPath)) {\n+      return null;\n+    }\n+    return expandCommandLinePath(options.sourceMapOutputPath, forModule);\n+  }\n+\n+  /** Expansion function for the manifest. */\n+  @VisibleForTesting\n+  String expandManifest(JSModule forModule) {\n+    if (Strings.isEmpty(config.outputManifest)) {\n+      return null;\n+    }\n+    return expandCommandLinePath(config.outputManifest, forModule);\n+  }\n+\n+  /**\n+   * Coverts a file name into a print stream.\n+   * Returns null if the file name is null.\n+   */\n+  private PrintStream toPrintStream(String fileName) throws IOException {\n+    if (fileName \u003d\u003d null) {\n+      return null;\n+    }\n+    return new PrintStream(new FileOutputStream(fileName));\n+  }\n+\n+  /**\n+   * Outputs the source map found in the compiler to the proper path if one\n+   * exists.\n+   *\n+   * @param options The options to the Compiler.\n+   */\n+  private void outputSourceMap(B options)\n+      throws IOException {\n+    if (Strings.isEmpty(options.sourceMapOutputPath)) {\n+      return;\n+    }\n+\n+    String outName \u003d expandSourceMapPath(options, null);\n+    PrintStream out \u003d toPrintStream(outName);\n+    compiler.getSourceMap().appendTo(out, outName);\n+    out.close();\n+  }\n+\n+  /**\n+   * Returns the path at which to output map file(s) based on the path at which\n+   * the JS binary will be placed.\n+   *\n+   * @return The path in which to place the generated map file(s).\n+   */\n+  private String getMapPath(String outputFile) {\n+    String basePath \u003d \"\";\n+\n+    if (outputFile.equals(\"\")) {\n+      // If we have a js_module_binary rule, output the maps\n+      // at modulename_props_map.out, etc.\n+      if (!config.moduleOutputPathPrefix.equals(\"\")) {\n+        basePath \u003d config.moduleOutputPathPrefix;\n+      } else {\n+        basePath \u003d \"jscompiler\";\n+      }\n+    } else {\n+      // Get the path of the output file.\n+      File file \u003d new File(outputFile);\n+\n+      String outputFileName \u003d file.getName();\n+\n+      // Strip the .js from the name.\n+      if (outputFileName.endsWith(\".js\")) {\n+        outputFileName \u003d\n+            outputFileName.substring(0, outputFileName.length() - 3);\n+      }\n+\n+      basePath \u003d file.getParent() + File.separatorChar + outputFileName;\n+    }\n+\n+    return basePath;\n+  }\n+\n+  /**\n+   * Outputs the variable and property name maps for the specified compiler if\n+   * the proper FLAGS are set.\n+   */\n+  private void outputNameMaps(B options) throws FlagUsageException,\n+      IOException {\n+\n+    String propertyMapOutputPath \u003d null;\n+    String variableMapOutputPath \u003d null;\n+    String functionInformationMapOutputPath \u003d null;\n+\n+    // Check the create_name_map_files FLAG.\n+    if (config.createNameMapFiles) {\n+      String basePath \u003d getMapPath(options.jsOutputFile);\n+\n+      propertyMapOutputPath \u003d basePath + \"_props_map.out\";\n+      variableMapOutputPath \u003d basePath + \"_vars_map.out\";\n+      functionInformationMapOutputPath \u003d basePath + \"_functions_map.out\";\n+    }\n+\n+    // Check the individual FLAGS.\n+    if (!config.variableMapOutputFile.equals(\"\")) {\n+      if (variableMapOutputPath !\u003d null) {\n+        throw new FlagUsageException(\"The flags variable_map_output_file and \"\n+            + \"create_name_map_files cannot both be used simultaniously.\");\n+      }\n+\n+      variableMapOutputPath \u003d config.variableMapOutputFile;\n+    }\n+\n+    if (!config.propertyMapOutputFile.equals(\"\")) {\n+      if (propertyMapOutputPath !\u003d null) {\n+        throw new FlagUsageException(\"The flags property_map_output_file and \"\n+            + \"create_name_map_files cannot both be used simultaniously.\");\n+      }\n+\n+      propertyMapOutputPath \u003d config.propertyMapOutputFile;\n+    }\n+\n+    // Output the maps.\n+    if (variableMapOutputPath !\u003d null) {\n+      if (compiler.getVariableMap() !\u003d null) {\n+        compiler.getVariableMap().save(variableMapOutputPath);\n+      }\n+    }\n+\n+    if (propertyMapOutputPath !\u003d null) {\n+      if (compiler.getPropertyMap() !\u003d null) {\n+        compiler.getPropertyMap().save(propertyMapOutputPath);\n+      }\n+    }\n+\n+    if (functionInformationMapOutputPath !\u003d null) {\n+      if (compiler.getFunctionalInformationMap() !\u003d null) {\n+        FileOutputStream file \u003d\n+            new FileOutputStream(functionInformationMapOutputPath);\n+        CodedOutputStream outputStream \u003d CodedOutputStream.newInstance(file);\n+        compiler.getFunctionalInformationMap().writeTo(outputStream);\n+        outputStream.flush();\n+        file.flush();\n+        file.close();\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Create a map of constant names to constant values from a textual\n+   * description of the map.\n+   *\n+   * @param definitions A list of overriding definitions for defines in\n+   *     the form \u003cname\u003e[\u003d\u003cval\u003e], where \u003cval\u003e is a number, boolean, or\n+   *     single-quoted string without single quotes.\n+   */\n+  @VisibleForTesting\n+  static void createDefineReplacements(List\u003cString\u003e definitions,\n+      CompilerOptions options) {\n+    // Parse the definitions\n+    for (String override : definitions) {\n+      String[] assignment \u003d override.split(\"\u003d\", 2);\n+      String defName \u003d assignment[0];\n+\n+      if (defName.length() \u003e 0) {\n+        if (assignment.length \u003d\u003d 1) {\n+          options.setDefineToBooleanLiteral(defName, true);\n+          continue;\n+        } else {\n+          String defValue \u003d assignment[1];\n+\n+          if (defValue.equals(\"true\")) {\n+            options.setDefineToBooleanLiteral(defName, true);\n+            continue;\n+          } else if (defValue.equals(\"false\")) {\n+            options.setDefineToBooleanLiteral(defName, false);\n+            continue;\n+          } else if (defValue.length() \u003e 1\n+              \u0026\u0026 ((defValue.charAt(0) \u003d\u003d \u0027\\\u0027\u0027 \u0026\u0026\n+                  defValue.charAt(defValue.length() - 1) \u003d\u003d \u0027\\\u0027\u0027)\n+                  || (defValue.charAt(0) \u003d\u003d \u0027\\\"\u0027 \u0026\u0026\n+                      defValue.charAt(defValue.length() - 1) \u003d\u003d \u0027\\\"\u0027))) {\n+            // If the value starts and ends with a single quote,\n+            // we assume that it\u0027s a string.\n+            String maybeStringVal \u003d\n+                defValue.substring(1, defValue.length() - 1);\n+            if (maybeStringVal.indexOf(defValue.charAt(0)) \u003d\u003d -1) {\n+              options.setDefineToStringLiteral(defName, maybeStringVal);\n+              continue;\n+            }\n+          } else {\n+            try {\n+              options.setDefineToDoubleLiteral(defName,\n+                  Double.parseDouble(defValue));\n+              continue;\n+            } catch (NumberFormatException e) {\n+              // do nothing, it will be caught at the end\n+            }\n+          }\n+        }\n+      }\n+\n+      throw new RuntimeException(\n+          \"--define flag syntax invalid: \" + override);\n+    }\n+  }\n+\n+  /**\n+   * Returns true if and only if a manifest should be generated for each\n+   * module, as opposed to one unified manifest.\n+   */\n+  private boolean shouldGenerateManifestPerModule() {\n+    return !config.module.isEmpty()\n+        \u0026\u0026 config.outputManifest !\u003d null\n+        \u0026\u0026 config.outputManifest.contains(\"%outname%\");\n+  }\n+\n+  /**\n+   * Writes the manifest of all compiler input files that survived\n+   * manage_closure_dependencies, if requested.\n+   */\n+  private void outputManifest() throws IOException {\n+    String outputManifest \u003d config.outputManifest;\n+    if (Strings.isEmpty(outputManifest)) {\n+      return;\n+    }\n+\n+    if (shouldGenerateManifestPerModule()) {\n+      // Generate per-module manifests.\n+      Iterable\u003cJSModule\u003e modules \u003d compiler.getModuleGraph().getAllModules();\n+      for (JSModule module : modules) {\n+        printManifestTo(module.getInputs(), expandManifest(module));\n+      }\n+    } else {\n+      // Generate a single file manifest.\n+      printManifestTo(compiler.getInputsInOrder(), expandManifest(null));\n+    }\n+  }\n+\n+  /**\n+   * Prints a list of input names, delimited by newlines, to the manifest file.\n+   */\n+  private void printManifestTo(Iterable\u003cCompilerInput\u003e inputs, String path)\n+      throws IOException {\n+    List\u003cString\u003e names \u003d Lists.newArrayList();\n+    for (CompilerInput input : inputs) {\n+      names.add(input.getName());\n+    }\n+    String result \u003d Joiner.on(\"\\n\").join(names);\n+    PrintStream out \u003d toPrintStream(path);\n+    out.append(result);\n+    out.close();\n+  }\n+\n+  private class RunTimeStats {\n+    private long bestRunTime \u003d Long.MAX_VALUE;\n+    private long worstRunTime \u003d Long.MIN_VALUE;\n+    private long lastStartTime \u003d 0;\n+    private List\u003cList\u003cString\u003e\u003e loopedPassesInBestRun \u003d null;\n+\n+    /**\n+     * Record the start of a run.\n+     */\n+    private void recordStartRun() {\n+      lastStartTime \u003d System.currentTimeMillis();\n+      PhaseOptimizer.clearLoopsRun();\n+    }\n+\n+    /**\n+     * Record the end of a run.\n+     */\n+    private void recordEndRun() {\n+      long endTime \u003d System.currentTimeMillis();\n+      long length \u003d endTime - lastStartTime;\n+      worstRunTime \u003d Math.max(length, worstRunTime);\n+      if (length \u003c bestRunTime) {\n+        loopedPassesInBestRun \u003d PhaseOptimizer.getLoopsRun();\n+        bestRunTime \u003d length;\n+      }\n+    }\n+\n+    /**\n+     * Print the best phase loop to stderr.\n+     */\n+    private void outputBestPhaseOrdering() {\n+      out.println(\"Best time: \" + bestRunTime);\n+      out.println(\"Worst time: \" + worstRunTime);\n+\n+      int i \u003d 1;\n+      for (List\u003cString\u003e loop : loopedPassesInBestRun) {\n+        out.println(\"\\nLoop \" + i + \":\\n\" + Joiner.on(\"\\n\").join(loop));\n+        i++;\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Configurations for the command line configs. Designed for easy\n+   * building, so that we can decouple the flags-parsing library from\n+   * the actual configuration options.\n+   *\n+   * By design, these configurations must match one-to-one with\n+   * command-line flags.\n+   */\n+  static class CommandLineConfig {\n+    private boolean printTree \u003d false;\n+\n+    /** Prints out the parse tree and exits */\n+    CommandLineConfig setPrintTree(boolean printTree) {\n+      this.printTree \u003d printTree;\n+      return this;\n+    }\n+\n+    private boolean computePhaseOrdering \u003d false;\n+\n+    /**\n+     * Runs the compile job many times, then prints out the best phase\n+     * ordering from this run\n+     */\n+    CommandLineConfig setComputePhaseOrdering(boolean computePhaseOrdering) {\n+      this.computePhaseOrdering \u003d computePhaseOrdering;\n+      return this;\n+    }\n+\n+    private boolean printAst \u003d false;\n+\n+    /**\n+     * Prints a dot file describing the internal abstract syntax tree\n+     * and exits\n+     */\n+    CommandLineConfig setPrintAst(boolean printAst) {\n+      this.printAst \u003d printAst;\n+      return this;\n+    }\n+\n+    private boolean printPassGraph \u003d false;\n+\n+    /** Prints a dot file describing the passes that will get run and exits */\n+    CommandLineConfig setPrintPassGraph(boolean printPassGraph) {\n+      this.printPassGraph \u003d printPassGraph;\n+      return this;\n+    }\n+\n+    private CompilerOptions.DevMode jscompDevMode \u003d CompilerOptions.DevMode.OFF;\n+\n+    /** Turns on extra sanity checks */\n+    CommandLineConfig setJscompDevMode(CompilerOptions.DevMode jscompDevMode) {\n+      this.jscompDevMode \u003d jscompDevMode;\n+      return this;\n+    }\n+\n+    private String loggingLevel \u003d Level.WARNING.getName();\n+\n+    /**\n+     * The logging level (standard java.util.logging.Level\n+     * values) for Compiler progress. Does not control errors or\n+     * warnings for the JavaScript code under compilation\n+     */\n+    CommandLineConfig setLoggingLevel(String loggingLevel) {\n+      this.loggingLevel \u003d loggingLevel;\n+      return this;\n+    }\n+\n+    private final List\u003cString\u003e externs \u003d Lists.newArrayList();\n+\n+    /**\n+     * The file containing javascript externs. You may specify multiple.\n+     */\n+    CommandLineConfig setExterns(List\u003cString\u003e externs) {\n+      this.externs.clear();\n+      this.externs.addAll(externs);\n+      return this;\n+    }\n+\n+    private final List\u003cString\u003e js \u003d Lists.newArrayList();\n+\n+    /**\n+     * The javascript filename. You may specify multiple.\n+     */\n+    CommandLineConfig setJs(List\u003cString\u003e js) {\n+      this.js.clear();\n+      this.js.addAll(js);\n+      return this;\n+    }\n+\n+    private String jsOutputFile \u003d \"\";\n+\n+    /**\n+     * Primary output filename. If not specified, output is written to stdout\n+     */\n+    CommandLineConfig setJsOutputFile(String jsOutputFile) {\n+      this.jsOutputFile \u003d jsOutputFile;\n+      return this;\n+    }\n+\n+    private final List\u003cString\u003e module \u003d Lists.newArrayList();\n+\n+    /**\n+     * A javascript module specification. The format is\n+     * \u003cname\u003e:\u003cnum-js-files\u003e[:[\u003cdep\u003e,...][:]]]. Module names must be\n+     * unique. Each dep is the name of a module that this module\n+     * depends on. Modules must be listed in dependency order, and js\n+     * source files must be listed in the corresponding order. Where\n+     * --module flags occur in relation to --js flags is unimportant\n+     */\n+    CommandLineConfig setModule(List\u003cString\u003e module) {\n+      this.module.clear();\n+      this.module.addAll(module);\n+      return this;\n+    }\n+\n+    private String variableMapInputFile \u003d \"\";\n+\n+    /**\n+     * File containing the serialized version of the variable renaming\n+     * map produced by a previous compilation\n+     */\n+    CommandLineConfig setVariableMapInputFile(String variableMapInputFile) {\n+      this.variableMapInputFile \u003d variableMapInputFile;\n+      return this;\n+    }\n+\n+    private String propertyMapInputFile \u003d \"\";\n+\n+    /**\n+     * File containing the serialized version of the property renaming\n+     * map produced by a previous compilation\n+     */\n+    CommandLineConfig setPropertyMapInputFile(String propertyMapInputFile) {\n+      this.propertyMapInputFile \u003d propertyMapInputFile;\n+      return this;\n+    }\n+\n+    private String variableMapOutputFile \u003d \"\";\n+\n+    /**\n+     * File where the serialized version of the variable renaming map\n+     * produced should be saved\n+     */\n+    CommandLineConfig setVariableMapOutputFile(String variableMapOutputFile) {\n+      this.variableMapOutputFile \u003d variableMapOutputFile;\n+      return this;\n+    }\n+\n+    private boolean createNameMapFiles \u003d false;\n+\n+    /**\n+     * If true, variable renaming and property renaming map\n+     * files will be produced as {binary name}_vars_map.out and\n+     * {binary name}_props_map.out. Note that this flag cannot be used\n+     * in conjunction with either variable_map_output_file or\n+     * property_map_output_file\n+     */\n+    CommandLineConfig setCreateNameMapFiles(boolean createNameMapFiles) {\n+      this.createNameMapFiles \u003d createNameMapFiles;\n+      return this;\n+    }\n+\n+    private String propertyMapOutputFile \u003d \"\";\n+\n+    /**\n+     * File where the serialized version of the property renaming map\n+     * produced should be saved\n+     */\n+    CommandLineConfig setPropertyMapOutputFile(String propertyMapOutputFile) {\n+      this.propertyMapOutputFile \u003d propertyMapOutputFile;\n+      return this;\n+    }\n+\n+    private CodingConvention codingConvention \u003d new DefaultCodingConvention();\n+\n+    /**\n+     * Sets rules and conventions to enforce.\n+     */\n+    CommandLineConfig setCodingConvention(CodingConvention codingConvention) {\n+      this.codingConvention \u003d codingConvention;\n+      return this;\n+    }\n+\n+    private int summaryDetailLevel \u003d 1;\n+\n+    /**\n+     * Controls how detailed the compilation summary is. Values:\n+     *  0 (never print summary), 1 (print summary only if there are\n+     * errors or warnings), 2 (print summary if type checking is on,\n+     * see --check_types), 3 (always print summary). The default level\n+     * is 1\n+     */\n+    CommandLineConfig setSummaryDetailLevel(int summaryDetailLevel) {\n+      this.summaryDetailLevel \u003d summaryDetailLevel;\n+      return this;\n+    }\n+\n+    private String outputWrapper \u003d \"\";\n+\n+    /**\n+     * Interpolate output into this string at the place denoted\n+     *  by the marker token %output%. See --output_wrapper_marker\n+     */\n+    CommandLineConfig setOutputWrapper(String outputWrapper) {\n+      this.outputWrapper \u003d outputWrapper;\n+      return this;\n+    }\n+\n+    private String outputWrapperMarker \u003d \"\";\n+\n+    /**\n+     * Use this token as output marker in the value of\n+     *  --output_wrapper\n+     */\n+    CommandLineConfig setOutputWrapperMarker(String outputWrapperMarker) {\n+      this.outputWrapperMarker \u003d outputWrapperMarker;\n+      return this;\n+    }\n+\n+    private final List\u003cString\u003e moduleWrapper \u003d Lists.newArrayList();\n+\n+    /**\n+     * An output wrapper for a javascript module (optional).\n+     * The format is \u003cname\u003e:\u003cwrapper\u003e. The module name must correspond\n+     * with a module specified using --module. The wrapper must\n+     * contain %s as the code placeholder\n+     */\n+    CommandLineConfig setModuleWrapper(List\u003cString\u003e moduleWrapper) {\n+      this.moduleWrapper.clear();\n+      this.moduleWrapper.addAll(moduleWrapper);\n+      return this;\n+    }\n+\n+    private String moduleOutputPathPrefix \u003d \"\";\n+\n+    /**\n+     * Prefix for filenames of compiled js modules.\n+     * \u003cmodule-name\u003e.js will be appended to this prefix. Directories\n+     * will be created as needed. Use with --module\n+     */\n+    CommandLineConfig setModuleOutputPathPrefix(String moduleOutputPathPrefix) {\n+      this.moduleOutputPathPrefix \u003d moduleOutputPathPrefix;\n+      return this;\n+    }\n+\n+    private String createSourceMap \u003d \"\";\n+\n+    /**\n+     * If specified, a source map file mapping the generated\n+     * source files back to the original source file will be\n+     * output to the specified path. The %outname% placeholder will\n+     * expand to the name of the output file that the source map\n+     * corresponds to.\n+     */\n+    CommandLineConfig setCreateSourceMap(String createSourceMap) {\n+      this.createSourceMap \u003d createSourceMap;\n+      return this;\n+    }\n+\n+    private final List\u003cString\u003e jscompError \u003d Lists.newArrayList();\n+\n+    /**\n+     * Make the named class of warnings an error.\n+     */\n+    CommandLineConfig setJscompError(List\u003cString\u003e jscompError) {\n+      this.jscompError.clear();\n+      this.jscompError.addAll(jscompError);\n+      return this;\n+    }\n+\n+    private final List\u003cString\u003e jscompWarning \u003d Lists.newArrayList();\n+\n+    /**\n+     * Make the named class of warnings a normal warning.\n+     */\n+    CommandLineConfig setJscompWarning(List\u003cString\u003e jscompWarning) {\n+      this.jscompWarning.clear();\n+      this.jscompWarning.addAll(jscompWarning);\n+      return this;\n+    }\n+\n+    private final List\u003cString\u003e jscompOff \u003d Lists.newArrayList();\n+\n+    /**\n+     * Turn off the named class of warnings.\n+     */\n+    CommandLineConfig setJscompOff(List\u003cString\u003e jscompOff) {\n+      this.jscompOff.clear();\n+      this.jscompOff.addAll(jscompOff);\n+      return this;\n+    }\n+\n+    private final List\u003cString\u003e define \u003d Lists.newArrayList();\n+\n+    /**\n+     * Override the value of a variable annotated @define.\n+     * The format is \u003cname\u003e[\u003d\u003cval\u003e], where \u003cname\u003e is the name of a @define\n+     * variable and \u003cval\u003e is a boolean, number, or a single-quoted string\n+     * that contains no single quotes. If [\u003d\u003cval\u003e] is omitted,\n+     * the variable is marked true\n+     */\n+    CommandLineConfig setDefine(List\u003cString\u003e define) {\n+      this.define.clear();\n+      this.define.addAll(define);\n+      return this;\n+    }\n+\n+    private String charset \u003d \"\";\n+\n+    /**\n+     * Input charset for all files.\n+     */\n+    CommandLineConfig setCharset(String charset) {\n+      this.charset \u003d charset;\n+      return this;\n+    }\n+\n+    private boolean manageClosureDependencies \u003d false;\n+\n+    /**\n+     * Sets whether to sort files by their goog.provide/require deps,\n+     * and prune inputs that are not required.\n+     */\n+    CommandLineConfig setManageClosureDependencies(boolean newVal) {\n+      this.manageClosureDependencies \u003d newVal;\n+      return this;\n+    }\n+\n+    private String outputManifest \u003d \"\";\n+\n+    /**\n+     * Sets whether to print an output manifest file.\n+     */\n+    CommandLineConfig setOutputManifest(String outputManifest) {\n+      this.outputManifest \u003d outputManifest;\n+      return this;\n+    }\n+  }\n+}\n",
      "operations": [
        {
          "type": "delete-tree",
          "from": "TagElement [23567,23659]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/jscomp/CheckGlobalThis.java",
        "src/com/google/javascript/jscomp/CheckGlobalThis.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [
            "com.google.javascript.jscomp.CheckGlobalThis:shouldTraverse:[NodeTraversal t, Node n, Node parent]:boolean",
            "com.google.javascript.jscomp.CheckGlobalThis:CheckGlobalThis:[AbstractCompiler compiler, CheckLevel level]:null",
            "com.google.javascript.jscomp.CheckGlobalThis:visit:[NodeTraversal t, Node n, Node parent]:void",
            "com.google.javascript.jscomp.CheckGlobalThis:getFunctionJsDocInfo:[Node n]:JSDocInfo",
            "com.google.javascript.jscomp.CheckGlobalThis:shouldReportThis:[Node n, Node parent]:boolean"
          ],
          "num": 5
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "-1"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "35",
            "36",
            "37",
            "38",
            "39",
            "40",
            "41",
            "42",
            "43",
            "44",
            "45",
            "46",
            "47",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57",
            "58",
            "59",
            "60",
            "61",
            "62",
            "63",
            "64",
            "65",
            "66",
            "67",
            "68",
            "69",
            "70",
            "71",
            "72",
            "73",
            "74",
            "75",
            "76",
            "77",
            "78",
            "79",
            "80",
            "81",
            "82",
            "83",
            "84",
            "85",
            "86",
            "87",
            "88",
            "89",
            "90",
            "91",
            "92",
            "93",
            "94",
            "95",
            "96",
            "97",
            "98",
            "99",
            "100",
            "101",
            "102",
            "103",
            "104",
            "105",
            "106",
            "107",
            "108",
            "109",
            "110",
            "111",
            "112",
            "113",
            "114",
            "115",
            "116",
            "117",
            "118",
            "119",
            "120",
            "121",
            "122",
            "123",
            "124",
            "125",
            "126",
            "127",
            "128",
            "129",
            "130",
            "131",
            "132",
            "133",
            "134",
            "135",
            "136",
            "137",
            "138",
            "139",
            "140",
            "141",
            "142",
            "143",
            "144",
            "145",
            "146",
            "147",
            "148",
            "149",
            "150",
            "151",
            "152",
            "153",
            "154",
            "155",
            "156",
            "157",
            "158",
            "159",
            "160",
            "161",
            "162",
            "163",
            "164",
            "165",
            "166",
            "167",
            "168",
            "169",
            "170",
            "171",
            "172",
            "173",
            "174",
            "175",
            "176",
            "177",
            "178",
            "179",
            "180",
            "181",
            "182",
            "183"
          ],
          "num": 183
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nnew file mode 100644\nindex 0000000..1b6c93f\n--- /dev/null\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -0,0 +1,183 @@\n+/*\n+ * Copyright 2007 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.javascript.jscomp;\n+\n+import com.google.javascript.jscomp.CheckLevel;\n+import com.google.javascript.jscomp.NodeTraversal.Callback;\n+import com.google.javascript.rhino.JSDocInfo;\n+import com.google.javascript.rhino.Node;\n+import com.google.javascript.rhino.Token;\n+\n+/**\n+ * Checks for certain uses of the {@code this} keyword that are considered\n+ * unsafe because they are likely to reference the global {@code this} object\n+ * unintentionally.\n+ *\n+ * \u003cp\u003eA use of {@code this} is considered unsafe if it\u0027s on the left side of an\n+ * assignment or a property access, and not inside one of the following:\n+ * \u003col\u003e\n+ * \u003cli\u003ea prototype method\n+ * \u003cli\u003ea function annotated with {@code @constructor}\n+ * \u003cli\u003ea function annotated with {@code @this}.\n+ * \u003cli\u003ea function where there\u0027s no logical place to put a\n+ *     {@code this} annotation.\n+ * \u003c/ol\u003e\n+ *\n+ * \u003cp\u003eNote that this check does not track assignments of {@code this} to\n+ * variables or objects. The code\n+ * \u003cpre\u003e\n+ * function evil() {\n+ *   var a \u003d this;\n+ *   a.useful \u003d undefined;\n+ * }\n+ * \u003c/pre\u003e\n+ * will not get flagged, even though it is semantically equivalent to\n+ * \u003cpre\u003e\n+ * function evil() {\n+ *   this.useful \u003d undefined;\n+ * }\n+ * \u003c/pre\u003e\n+ * which would get flagged.\n+ *\n+*\n+*\n+ */\n+final class CheckGlobalThis implements Callback {\n+\n+  static final DiagnosticType GLOBAL_THIS \u003d DiagnosticType.warning(\n+      \"JSC_USED_GLOBAL_THIS\",\n+      \"dangerous use of the global \u0027this\u0027 object\");\n+\n+  private final AbstractCompiler compiler;\n+  private final CheckLevel level;\n+  \n+  /**\n+   * If {@code assignLhsChild !\u003d null}, then the node being traversed is\n+   * a descendant of the first child of an ASSIGN node. assignLhsChild\u0027s\n+   * parent is this ASSIGN node.\n+   */\n+  private Node assignLhsChild \u003d null;\n+\n+  CheckGlobalThis(AbstractCompiler compiler, CheckLevel level) {\n+    this.compiler \u003d compiler;\n+    this.level \u003d level;\n+  }\n+\n+  /**\n+   * Since this pass reports errors only when a global {@code this} keyword\n+   * is encountered, there is no reason to traverse non global contexts.\n+   */\n+  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n+\n+    if (n.getType() \u003d\u003d Token.FUNCTION) {\n+      // Don\u0027t traverse functions that are constructors or have the @this\n+      // annotation.\n+      JSDocInfo jsDoc \u003d getFunctionJsDocInfo(n);\n+      if (jsDoc !\u003d null \u0026\u0026 (jsDoc.isConstructor() || jsDoc.hasThisType())) {\n+        return false;\n+      }\n+\n+      // Don\u0027t traverse functions unless they would normally\n+      // be able to have a @this annotation associated with them. e.g.,\n+      // var a \u003d function() { }; // or\n+      // function a() {} // or\n+      // a.x \u003d function() {};\n+      int pType \u003d parent.getType();\n+      if (!(pType \u003d\u003d Token.BLOCK ||\n+            pType \u003d\u003d Token.SCRIPT ||\n+            pType \u003d\u003d Token.NAME ||\n+            pType \u003d\u003d Token.ASSIGN)) {\n+        return false;\n+      }\n+    }\n+\n+    if (parent !\u003d null \u0026\u0026 parent.getType() \u003d\u003d Token.ASSIGN) {\n+      Node lhs \u003d parent.getFirstChild();\n+      Node rhs \u003d lhs.getNext();\n+      \n+      if (n \u003d\u003d lhs) {\n+        // Always traverse the left side of the assignment. To handle\n+        // nested assignments properly (e.g., (a \u003d this).property \u003d c;),\n+        // assignLhsChild should not be overridden.\n+        if (assignLhsChild \u003d\u003d null) {\n+          assignLhsChild \u003d lhs;\n+        }\n+      } else {\n+        // Only traverse the right side if it\u0027s not an assignment to a prototype\n+        // property or subproperty.\n+        if (lhs.getType() \u003d\u003d Token.GETPROP) {\n+          if (lhs.getLastChild().getString().equals(\"prototype\")) {\n+            return false;\n+          }\n+          String leftName \u003d lhs.getQualifiedName();\n+          if (leftName !\u003d null \u0026\u0026 leftName.contains(\".prototype.\")) {\n+            return false;\n+          }\n+        }\n+      }\n+    }\n+\n+    return true;\n+  }\n+\n+  public void visit(NodeTraversal t, Node n, Node parent) {\n+    if (n.getType() \u003d\u003d Token.THIS \u0026\u0026 shouldReportThis(n, parent)) {\n+      compiler.report(t.makeError(n, level, GLOBAL_THIS));\n+    }\n+    if (n \u003d\u003d assignLhsChild) {\n+      assignLhsChild \u003d null;\n+    }\n+  }\n+\n+  private boolean shouldReportThis(Node n, Node parent) {\n+    if (assignLhsChild !\u003d null) {\n+      // Always report a THIS on the left side of an assign.\n+      return true;\n+    }\n+\n+    // Also report a THIS with a property access.\n+    return parent !\u003d null \u0026\u0026 NodeUtil.isGet(parent);\n+  }\n+\n+  /**\n+   * Gets a function\u0027s JSDoc information, if it has any. Checks for a few\n+   * patterns (ellipses show where JSDoc would be):\n+   * \u003cpre\u003e\n+   * ... function() {}\n+   * ... x \u003d function() {};\n+   * var ... x \u003d function() {};\n+   * ... var x \u003d function() {};\n+   * \u003c/pre\u003e\n+   */\n+  private JSDocInfo getFunctionJsDocInfo(Node n) {\n+    JSDocInfo jsDoc \u003d n.getJSDocInfo();\n+    Node parent \u003d n.getParent();\n+    if (jsDoc \u003d\u003d null) {\n+      int parentType \u003d parent.getType();\n+      if (parentType \u003d\u003d Token.NAME || parentType \u003d\u003d Token.ASSIGN) {\n+        jsDoc \u003d parent.getJSDocInfo();\n+        if (jsDoc \u003d\u003d null \u0026\u0026 parentType \u003d\u003d Token.NAME) {\n+          Node gramps \u003d parent.getParent();\n+          if (gramps.getType() \u003d\u003d Token.VAR) {\n+            jsDoc \u003d gramps.getJSDocInfo();\n+          }\n+        }\n+      }\n+    }\n+    return jsDoc;\n+  }\n+}\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [4637,4920]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003cli\u003ea function where there\u0027s no logical place to put a [1345,1399]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [1407,1419]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement:  annotation. [1419,1431]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [3228,3257]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [3264,3433]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodInvocation [4468,4495]"
        },
        {
          "type": "delete-tree",
          "from": "InfixExpression [3892,3914]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/jscomp/CodingConvention.java",
        "src/com/google/javascript/jscomp/CodingConvention.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [
            "com.google.javascript.jscomp.CodingConvention\\$AssertionFunctionSpec:getAssertedParam:[Node firstParam]:Node",
            "com.google.javascript.jscomp.CodingConvention:isVarArgsParameter:[Node parameter]:boolean",
            "com.google.javascript.jscomp.CodingConvention:getDelegateSuperclassName:[]:String",
            "com.google.javascript.jscomp.CodingConvention:getSingletonGetterClassName:[Node callNode]:String",
            "com.google.javascript.jscomp.CodingConvention:isValidEnumKey:[String key]:boolean",
            "com.google.javascript.jscomp.CodingConvention:identifyTypeDeclarationCall:[Node n]:List\u003cString\u003e",
            "com.google.javascript.jscomp.CodingConvention\\$AssertionFunctionSpec:AssertionFunctionSpec:[String functionName]:null",
            "com.google.javascript.jscomp.CodingConvention:applyDelegateRelationship:[ObjectType delegateSuperclass, ObjectType delegateBase, ObjectType delegator, FunctionType delegateProxy, FunctionType findDelegate]:void",
            "com.google.javascript.jscomp.CodingConvention\\$DelegateRelationship:DelegateRelationship:[String delegateBase, String delegator]:null",
            "com.google.javascript.jscomp.CodingConvention:isExported:[String name, boolean local]:boolean",
            "com.google.javascript.jscomp.CodingConvention\\$AssertionFunctionSpec:getAssertedType:[]:JSTypeNative",
            "com.google.javascript.jscomp.CodingConvention:getAbstractMethodName:[]:String",
            "com.google.javascript.jscomp.CodingConvention:getExportPropertyFunction:[]:String",
            "com.google.javascript.jscomp.CodingConvention:extractClassNameIfProvide:[Node node, Node parent]:String",
            "com.google.javascript.jscomp.CodingConvention:isConstant:[String variableName]:boolean",
            "com.google.javascript.jscomp.CodingConvention:getExportSymbolFunction:[]:String",
            "com.google.javascript.jscomp.CodingConvention:getDelegateRelationship:[Node callNode]:DelegateRelationship",
            "com.google.javascript.jscomp.CodingConvention:isPropertyTestFunction:[Node call]:boolean",
            "com.google.javascript.jscomp.CodingConvention\\$AssertionFunctionSpec:AssertionFunctionSpec:[String functionName, JSTypeNative assertedType]:null",
            "com.google.javascript.jscomp.CodingConvention:applySingletonGetter:[FunctionType functionType, FunctionType getterType, ObjectType objectType]:void",
            "com.google.javascript.jscomp.CodingConvention:isOptionalParameter:[Node parameter]:boolean",
            "com.google.javascript.jscomp.CodingConvention:getClassesDefinedByCall:[Node callNode]:SubclassRelationship",
            "com.google.javascript.jscomp.CodingConvention:identifyTypeDefAssign:[Node n]:String",
            "com.google.javascript.jscomp.CodingConvention\\$ObjectLiteralCast:ObjectLiteralCast:[String typeName, Node objectNode]:null",
            "com.google.javascript.jscomp.CodingConvention:getObjectLiteralCast:[NodeTraversal t, Node callNode]:ObjectLiteralCast",
            "com.google.javascript.jscomp.CodingConvention\\$AssertionFunctionSpec:getFunctionName:[]:String",
            "com.google.javascript.jscomp.CodingConvention:isPrivate:[String name]:boolean",
            "com.google.javascript.jscomp.CodingConvention:getGlobalObject:[]:String",
            "com.google.javascript.jscomp.CodingConvention:extractClassNameIfRequire:[Node node, Node parent]:String",
            "com.google.javascript.jscomp.CodingConvention:defineDelegateProxyPrototypeProperties:[JSTypeRegistry registry, Scope scope, List\u003cObjectType\u003e delegateProxyPrototypes]:void",
            "com.google.javascript.jscomp.CodingConvention:getAssertionFunctions:[]:Collection\u003cAssertionFunctionSpec\u003e",
            "com.google.javascript.jscomp.CodingConvention:applySubclassRelationship:[FunctionType parentCtor, FunctionType childCtor, SubclassType type]:void",
            "com.google.javascript.jscomp.CodingConvention:isExported:[String name]:boolean",
            "com.google.javascript.jscomp.CodingConvention\\$SubclassRelationship:SubclassRelationship:[SubclassType type, Node subclassNode, Node superclassNode]:null",
            "com.google.javascript.jscomp.CodingConvention:isSuperClassReference:[String propertyName]:boolean"
          ],
          "num": 35
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "-1"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "35",
            "36",
            "37",
            "38",
            "39",
            "40",
            "41",
            "42",
            "43",
            "44",
            "45",
            "46",
            "47",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57",
            "58",
            "59",
            "60",
            "61",
            "62",
            "63",
            "64",
            "65",
            "66",
            "67",
            "68",
            "69",
            "70",
            "71",
            "72",
            "73",
            "74",
            "75",
            "76",
            "77",
            "78",
            "79",
            "80",
            "81",
            "82",
            "83",
            "84",
            "85",
            "86",
            "87",
            "88",
            "89",
            "90",
            "91",
            "92",
            "93",
            "94",
            "95",
            "96",
            "97",
            "98",
            "99",
            "100",
            "101",
            "102",
            "103",
            "104",
            "105",
            "106",
            "107",
            "108",
            "109",
            "110",
            "111",
            "112",
            "113",
            "114",
            "115",
            "116",
            "117",
            "118",
            "119",
            "120",
            "121",
            "122",
            "123",
            "124",
            "125",
            "126",
            "127",
            "128",
            "129",
            "130",
            "131",
            "132",
            "133",
            "134",
            "135",
            "136",
            "137",
            "138",
            "139",
            "140",
            "141",
            "142",
            "143",
            "144",
            "145",
            "146",
            "147",
            "148",
            "149",
            "150",
            "151",
            "152",
            "153",
            "154",
            "155",
            "156",
            "157",
            "158",
            "159",
            "160",
            "161",
            "162",
            "163",
            "164",
            "165",
            "166",
            "167",
            "168",
            "169",
            "170",
            "171",
            "172",
            "173",
            "174",
            "175",
            "176",
            "177",
            "178",
            "179",
            "180",
            "181",
            "182",
            "183",
            "184",
            "185",
            "186",
            "187",
            "188",
            "189",
            "190",
            "191",
            "192",
            "193",
            "194",
            "195",
            "196",
            "197",
            "198",
            "199",
            "200",
            "201",
            "202",
            "203",
            "204",
            "205",
            "206",
            "207",
            "208",
            "209",
            "210",
            "211",
            "212",
            "213",
            "214",
            "215",
            "216",
            "217",
            "218",
            "219",
            "220",
            "221",
            "222",
            "223",
            "224",
            "225",
            "226",
            "227",
            "228",
            "229",
            "230",
            "231",
            "232",
            "233",
            "234",
            "235",
            "236",
            "237",
            "238",
            "239",
            "240",
            "241",
            "242",
            "243",
            "244",
            "245",
            "246",
            "247",
            "248",
            "249",
            "250",
            "251",
            "252",
            "253",
            "254",
            "255",
            "256",
            "257",
            "258",
            "259",
            "260",
            "261",
            "262",
            "263",
            "264",
            "265",
            "266",
            "267",
            "268",
            "269",
            "270",
            "271",
            "272",
            "273",
            "274",
            "275",
            "276",
            "277",
            "278",
            "279",
            "280",
            "281",
            "282",
            "283",
            "284",
            "285",
            "286",
            "287",
            "288",
            "289",
            "290",
            "291",
            "292",
            "293",
            "294",
            "295",
            "296",
            "297",
            "298",
            "299",
            "300",
            "301",
            "302",
            "303",
            "304",
            "305",
            "306",
            "307",
            "308",
            "309",
            "310",
            "311",
            "312",
            "313",
            "314",
            "315",
            "316",
            "317",
            "318",
            "319",
            "320",
            "321",
            "322",
            "323",
            "324",
            "325",
            "326",
            "327",
            "328",
            "329",
            "330",
            "331",
            "332",
            "333",
            "334",
            "335",
            "336",
            "337",
            "338",
            "339"
          ],
          "num": 339
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/jscomp/CodingConvention.java b/src/com/google/javascript/jscomp/CodingConvention.java\nnew file mode 100644\nindex 0000000..02148cd\n--- /dev/null\n+++ b/src/com/google/javascript/jscomp/CodingConvention.java\n@@ -0,0 +1,339 @@\n+/*\n+ * Copyright 2007 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.javascript.jscomp;\n+\n+import com.google.javascript.rhino.Node;\n+import com.google.javascript.rhino.jstype.FunctionType;\n+import com.google.javascript.rhino.jstype.JSTypeNative;\n+import com.google.javascript.rhino.jstype.JSTypeRegistry;\n+import com.google.javascript.rhino.jstype.ObjectType;\n+\n+import java.util.Collection;\n+import java.util.List;\n+\n+/**\n+ * CodingConvention defines a set of hooks to customize the behavior of the\n+ * Compiler for a specific team/company.\n+ *\n+ * // TODO(bolinfest): Tighten up this interface -- it is far too big.\n+ *\n+*\n+*\n+ */\n+public interface CodingConvention {\n+\n+  /**\n+   * This checks whether a given variable name, such as a name in all-caps\n+   * should be treated as if it had the @const annotation.\n+   *\n+   * @param variableName potentially constant variable name\n+   * @return {@code true} if the name should be treated as a constant.\n+   */\n+  public boolean isConstant(String variableName);\n+\n+  /**\n+   * This checks that a given {@code key} may be used as a key for an enum.\n+   *\n+   * @param key the potential key to an enum\n+   * @return {@code true} if the {@code key} may be used as an enum key,\n+   *     {@code false} otherwise\n+   */\n+  public boolean isValidEnumKey(String key);\n+\n+  /**\n+   * This checks whether a given parameter name should be treated as an\n+   * optional parameter as far as type checking or function call arg count\n+   * checking is concerned. Note that an optional function parameter may be\n+   * declared as a simple type and is automatically converted to a union of the\n+   * declared type and Undefined.\n+   *\n+   * @param parameter The parameter\u0027s node.\n+   * @return {@code true} if the parameter should be treated as an optional\n+   * parameter.\n+   */\n+  public boolean isOptionalParameter(Node parameter);\n+\n+  /**\n+   * This checks whether a given parameter should be treated as a marker\n+   * for a variable argument list function. A VarArgs parameter must be the\n+   * last parameter in a function declaration.\n+   *\n+   * @param parameter The parameter\u0027s node.\n+   * @return {@code true} if the parameter should be treated as a variable\n+   * length parameter.\n+   */\n+  public boolean isVarArgsParameter(Node parameter);\n+\n+  /**\n+   * Checks whether a global variable or function name should be treated as\n+   * exported, or externally referenceable.\n+   *\n+   * @param name A global variable or function name.\n+   * @param local {@code true} if the name is a local variable.\n+   * @return {@code true} if the name should be considered exported.\n+   */\n+  public boolean isExported(String name, boolean local);\n+\n+  /**\n+   * Should be isExported(name, true) || isExported(name, false);\n+   */\n+  public boolean isExported(String name);\n+\n+  /**\n+   * Checks whether a name should be considered private. Private global\n+   * variables and functions can only be referenced within the source file in\n+   * which they are declared. Private properties and methods should only be\n+   * accessed by the class that defines them.\n+   *\n+   * @param name The name of a global variable or function, or a method or\n+   *     property.\n+   * @return {@code true} if the name should be considered private.\n+   */\n+  public boolean isPrivate(String name);\n+\n+  /**\n+   * Checks if the given method defines a subclass relationship,\n+   * and if it does, returns information on that relationship. By default,\n+   * always returns null. Meant to be overridden by subclasses.\n+   *\n+   * @param callNode A CALL node.\n+   */\n+  public SubclassRelationship getClassesDefinedByCall(Node callNode);\n+\n+  /**\n+   * Returns true if passed a string referring to the superclass.  The string\n+   * will usually be from the string node at the right of a GETPROP, e.g.\n+   * this.superClass_.\n+   */\n+  public boolean isSuperClassReference(String propertyName);\n+\n+  /**\n+   * Convenience method for determining provided dependencies amongst different\n+   * js scripts.\n+   */\n+  public String extractClassNameIfProvide(Node node, Node parent);\n+\n+  /**\n+   * Convenience method for determining required dependencies amongst different\n+   * js scripts.\n+   */\n+  public String extractClassNameIfRequire(Node node, Node parent);\n+\n+  /**\n+   * Function name used when exporting properties.\n+   * Signature: fn(object, publicName, symbol).\n+   * @return function name.\n+   */\n+  public String getExportPropertyFunction();\n+\n+  /**\n+   * Function name used when exporting symbols.\n+   * Signature: fn(publicPath, object).\n+   * @return function name.\n+   */\n+  public String getExportSymbolFunction();\n+\n+  /**\n+   * Checks if the given CALL node is forward-declaring any types,\n+   * and returns the name of the types if it is.\n+   */\n+  public List\u003cString\u003e identifyTypeDeclarationCall(Node n);\n+\n+  /**\n+   * Checks if the given ASSIGN node is a typedef, and returns the\n+   * name of the type if it is.\n+   */\n+  public String identifyTypeDefAssign(Node n);\n+\n+  /**\n+   * In many JS libraries, the function that produces inheritance also\n+   * adds properties to the superclass and/or subclass.\n+   */\n+  public void applySubclassRelationship(FunctionType parentCtor,\n+      FunctionType childCtor, SubclassType type);\n+\n+  /**\n+   * Function name for abstract methods. An abstract method can be assigned to\n+   * an interface method instead of an function expression in order to avoid\n+   * linter warnings produced by assigning a function without a return value\n+   * where a return value is expected.\n+   * @return function name.\n+   */\n+  public String getAbstractMethodName();\n+\n+  /**\n+   * Checks if the given method defines a singleton getter, and if it does,\n+   * returns the name of the class with the singleton getter. By default, always\n+   * returns null. Meant to be overridden by subclasses.\n+   *\n+   * @param callNode A CALL node.\n+   */\n+  public String getSingletonGetterClassName(Node callNode);\n+\n+  /**\n+   * In many JS libraries, the function that adds a singleton getter to a class\n+   * adds properties to the class.\n+   */\n+  public void applySingletonGetter(FunctionType functionType,\n+      FunctionType getterType, ObjectType objectType);\n+\n+  public DelegateRelationship getDelegateRelationship(Node callNode);\n+\n+  /**\n+   * In many JS libraries, the function that creates a delegate relationship\n+   * also adds properties to the delegator and delegate base.\n+   */\n+  public void applyDelegateRelationship(\n+      ObjectType delegateSuperclass, ObjectType delegateBase,\n+      ObjectType delegator, FunctionType delegateProxy,\n+      FunctionType findDelegate);\n+\n+  /**\n+   * @return the name of the delegate superclass.\n+   */\n+  public String getDelegateSuperclassName();\n+\n+  /**\n+   * Defines the delegate proxy prototype properties. Their types depend on\n+   * properties of the delegate base methods.\n+   *\n+   * @param delegateProxyPrototypes List of delegate proxy prototypes.\n+   */\n+  public void defineDelegateProxyPrototypeProperties(\n+      JSTypeRegistry registry, Scope scope,\n+      List\u003cObjectType\u003e delegateProxyPrototypes);\n+\n+  /**\n+   * Gets the name of the global object.\n+   */\n+  public String getGlobalObject();\n+\n+  /**\n+   * Whether this CALL function is testing for the existence of a property.\n+   */\n+  public boolean isPropertyTestFunction(Node call);\n+\n+  /**\n+   * Checks if the given method performs a object literal cast, and if it does,\n+   * returns information on the cast. By default, always returns null. Meant\n+   * to be overridden by subclasses.\n+   *\n+   * @param t The node traversal.\n+   * @param callNode A CALL node.\n+   */\n+  public ObjectLiteralCast getObjectLiteralCast(NodeTraversal t,\n+      Node callNode);\n+\n+  /**\n+   * Returns the set of AssertionFunction.\n+   */\n+  public Collection\u003cAssertionFunctionSpec\u003e getAssertionFunctions();\n+\n+  static enum SubclassType {\n+    INHERITS,\n+    MIXIN\n+  }\n+\n+  static class SubclassRelationship {\n+    final SubclassType type;\n+    final String subclassName;\n+    final String superclassName;\n+\n+    SubclassRelationship(SubclassType type,\n+        Node subclassNode, Node superclassNode) {\n+      this.type \u003d type;\n+      this.subclassName \u003d subclassNode.getQualifiedName();\n+      this.superclassName \u003d superclassNode.getQualifiedName();\n+    }\n+  }\n+\n+  /**\n+   * Delegates provides a mechanism and structure for identifying where classes\n+   * can call out to optional code to augment their functionality. The optional\n+   * code is isolated from the base code through the use of a subclass in the\n+   * optional code derived from the delegate class in the base code.\n+   */\n+  static class DelegateRelationship {\n+    /** The subclass in the base code. */\n+    final String delegateBase;\n+\n+    /** The class in the base code. */\n+    final String delegator;\n+\n+    DelegateRelationship(String delegateBase, String delegator) {\n+      this.delegateBase \u003d delegateBase;\n+      this.delegator \u003d delegator;\n+    }\n+  }\n+\n+  /**\n+   * An object literal cast provides a mechanism to cast object literals to\n+   * other types without a warning.\n+   */\n+  static class ObjectLiteralCast {\n+    /** Type to cast to. */\n+    final String typeName;\n+\n+    /** Object to cast. */\n+    final Node objectNode;\n+\n+    ObjectLiteralCast(String typeName, Node objectNode) {\n+      this.typeName \u003d typeName;\n+      this.objectNode \u003d objectNode;\n+    }\n+  }\n+\n+  /**\n+   * A function that will throw an exception when either:\n+   *   -One or more of its parameters evaluate to false.\n+   *   -One or more of its parameters are not of a certain type.\n+   */\n+  public class AssertionFunctionSpec {\n+    private final String functionName;\n+    private final JSTypeNative assertedType;\n+\n+    public AssertionFunctionSpec(String functionName) {\n+      this(functionName, null);\n+    }\n+\n+    public AssertionFunctionSpec(String functionName,\n+        JSTypeNative assertedType) {\n+      this.functionName \u003d functionName;\n+      this.assertedType \u003d assertedType;\n+    }\n+\n+    /** Returns the name of the function. */\n+    public String getFunctionName() {\n+      return functionName;\n+    }\n+\n+    /**\n+     * Returns the parameter of the assertion function that is being checked.\n+     * @param firstParam The first parameter of the function call.\n+     */\n+    public Node getAssertedParam(Node firstParam) {\n+      return firstParam;\n+    }\n+\n+    /**\n+     * Returns the type for a type assertion, or null if the function asserts\n+     * that the node must not be null or undefined. \n+     */\n+    public JSTypeNative getAssertedType() {\n+      return assertedType;\n+    }\n+  }\n+}\n",
      "operations": [
        {
          "type": "delete-tree",
          "from": "ImportDeclaration [929,958]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/jscomp/DefaultCodingConvention.java",
        "src/com/google/javascript/jscomp/DefaultCodingConvention.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [
            "com.google.javascript.jscomp.DefaultCodingConvention:getExportSymbolFunction:[]:String",
            "com.google.javascript.jscomp.DefaultCodingConvention:applyDelegateRelationship:[ObjectType delegateSuperclass, ObjectType delegateBase, ObjectType delegator, FunctionType delegateProxy, FunctionType findDelegate]:void",
            "com.google.javascript.jscomp.DefaultCodingConvention:defineDelegateProxyPrototypeProperties:[JSTypeRegistry registry, Scope scope, List\u003cObjectType\u003e delegateProxyPrototypes]:void",
            "com.google.javascript.jscomp.DefaultCodingConvention:identifyTypeDefAssign:[Node n]:String",
            "com.google.javascript.jscomp.DefaultCodingConvention:extractClassNameIfProvide:[Node node, Node parent]:String",
            "com.google.javascript.jscomp.DefaultCodingConvention:isPrivate:[String name]:boolean",
            "com.google.javascript.jscomp.DefaultCodingConvention:extractClassNameIfRequire:[Node node, Node parent]:String",
            "com.google.javascript.jscomp.DefaultCodingConvention:getAbstractMethodName:[]:String",
            "com.google.javascript.jscomp.DefaultCodingConvention:isValidEnumKey:[String key]:boolean",
            "com.google.javascript.jscomp.DefaultCodingConvention:isSuperClassReference:[String propertyName]:boolean",
            "com.google.javascript.jscomp.DefaultCodingConvention:isConstant:[String variableName]:boolean",
            "com.google.javascript.jscomp.DefaultCodingConvention:isExported:[String name, boolean local]:boolean",
            "com.google.javascript.jscomp.DefaultCodingConvention:getAssertionFunctions:[]:Collection\u003cAssertionFunctionSpec\u003e",
            "com.google.javascript.jscomp.DefaultCodingConvention:getGlobalObject:[]:String",
            "com.google.javascript.jscomp.DefaultCodingConvention:applySubclassRelationship:[FunctionType parentCtor, FunctionType childCtor, SubclassType type]:void",
            "com.google.javascript.jscomp.DefaultCodingConvention:getObjectLiteralCast:[NodeTraversal t, Node callNode]:ObjectLiteralCast",
            "com.google.javascript.jscomp.DefaultCodingConvention:getClassesDefinedByCall:[Node callNode]:SubclassRelationship",
            "com.google.javascript.jscomp.DefaultCodingConvention:getSingletonGetterClassName:[Node callNode]:String",
            "com.google.javascript.jscomp.DefaultCodingConvention:isExported:[String name]:boolean",
            "com.google.javascript.jscomp.DefaultCodingConvention:getDelegateRelationship:[Node callNode]:DelegateRelationship",
            "com.google.javascript.jscomp.DefaultCodingConvention:isOptionalParameter:[Node parameter]:boolean",
            "com.google.javascript.jscomp.DefaultCodingConvention:isVarArgsParameter:[Node parameter]:boolean",
            "com.google.javascript.jscomp.DefaultCodingConvention:identifyTypeDeclarationCall:[Node n]:List\u003cString\u003e",
            "com.google.javascript.jscomp.DefaultCodingConvention:getExportPropertyFunction:[]:String",
            "com.google.javascript.jscomp.DefaultCodingConvention:applySingletonGetter:[FunctionType functionType, FunctionType getterType, ObjectType objectType]:void",
            "com.google.javascript.jscomp.DefaultCodingConvention:getDelegateSuperclassName:[]:String",
            "com.google.javascript.jscomp.DefaultCodingConvention:isPropertyTestFunction:[Node call]:boolean"
          ],
          "num": 27
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "-1"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "35",
            "36",
            "37",
            "38",
            "39",
            "40",
            "41",
            "42",
            "43",
            "44",
            "45",
            "46",
            "47",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57",
            "58",
            "59",
            "60",
            "61",
            "62",
            "63",
            "64",
            "65",
            "66",
            "67",
            "68",
            "69",
            "70",
            "71",
            "72",
            "73",
            "74",
            "75",
            "76",
            "77",
            "78",
            "79",
            "80",
            "81",
            "82",
            "83",
            "84",
            "85",
            "86",
            "87",
            "88",
            "89",
            "90",
            "91",
            "92",
            "93",
            "94",
            "95",
            "96",
            "97",
            "98",
            "99",
            "100",
            "101",
            "102",
            "103",
            "104",
            "105",
            "106",
            "107",
            "108",
            "109",
            "110",
            "111",
            "112",
            "113",
            "114",
            "115",
            "116",
            "117",
            "118",
            "119",
            "120",
            "121",
            "122",
            "123",
            "124",
            "125",
            "126",
            "127",
            "128",
            "129",
            "130",
            "131",
            "132",
            "133",
            "134",
            "135",
            "136",
            "137",
            "138",
            "139",
            "140",
            "141",
            "142",
            "143",
            "144",
            "145",
            "146",
            "147",
            "148",
            "149",
            "150",
            "151",
            "152",
            "153",
            "154",
            "155",
            "156",
            "157",
            "158",
            "159",
            "160",
            "161",
            "162",
            "163",
            "164",
            "165",
            "166",
            "167",
            "168",
            "169",
            "170",
            "171",
            "172",
            "173",
            "174",
            "175",
            "176",
            "177",
            "178",
            "179",
            "180",
            "181",
            "182",
            "183"
          ],
          "num": 183
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/jscomp/DefaultCodingConvention.java b/src/com/google/javascript/jscomp/DefaultCodingConvention.java\nnew file mode 100644\nindex 0000000..82a9636\n--- /dev/null\n+++ b/src/com/google/javascript/jscomp/DefaultCodingConvention.java\n@@ -0,0 +1,183 @@\n+/*\n+ * Copyright 2007 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.javascript.jscomp;\n+\n+import com.google.javascript.rhino.Node;\n+import com.google.javascript.rhino.jstype.FunctionType;\n+import com.google.javascript.rhino.jstype.JSTypeRegistry;\n+import com.google.javascript.rhino.jstype.ObjectType;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * CodingConvention defines a set of hooks to customize the behavior of the\n+ * Compiler for a specific team/company.\n+ *\n+*\n+*\n+ */\n+public class DefaultCodingConvention implements CodingConvention {\n+\n+  @Override\n+  public boolean isConstant(String variableName) {\n+    return false;\n+  }\n+\n+  @Override\n+  public boolean isValidEnumKey(String key) {\n+    return key !\u003d null \u0026\u0026 key.length() \u003e 0;\n+  }\n+\n+  @Override\n+  public boolean isOptionalParameter(Node parameter) {\n+    // be as lax as possible, but this must be mutually exclusive from\n+    // var_args parameters.\n+    return !isVarArgsParameter(parameter);\n+  }\n+\n+  @Override\n+  public boolean isVarArgsParameter(Node parameter) {\n+    // be as lax as possible\n+    return parameter.getParent().getLastChild() \u003d\u003d parameter;\n+  }\n+\n+  @Override\n+  public boolean isExported(String name, boolean local) {\n+    return local \u0026\u0026 name.startsWith(\"$super\");\n+  }\n+\n+  @Override\n+  public boolean isExported(String name) {\n+    return isExported(name, false) || isExported(name, true);\n+  }\n+\n+  @Override\n+  public boolean isPrivate(String name) {\n+    return false;\n+  }\n+\n+  @Override\n+  public SubclassRelationship getClassesDefinedByCall(Node callNode) {\n+    return null;\n+  }\n+\n+  @Override\n+  public boolean isSuperClassReference(String propertyName) {\n+    return false;\n+  }\n+\n+  @Override\n+  public String extractClassNameIfProvide(Node node, Node parent) {\n+    String message \u003d \"only implemented in GoogleCodingConvention\";\n+    throw new UnsupportedOperationException(message);\n+  }\n+\n+  @Override\n+  public String extractClassNameIfRequire(Node node, Node parent) {\n+    String message \u003d \"only implemented in GoogleCodingConvention\";\n+    throw new UnsupportedOperationException(message);\n+  }\n+\n+  @Override\n+  public String getExportPropertyFunction() {\n+    return null;\n+  }\n+\n+  @Override\n+  public String getExportSymbolFunction() {\n+    return null;\n+  }\n+\n+  @Override\n+  public List\u003cString\u003e identifyTypeDeclarationCall(Node n) {\n+    return null;\n+  }\n+\n+  @Override\n+  public String identifyTypeDefAssign(Node n) {\n+    return null;\n+  }\n+\n+  @Override\n+  public void applySubclassRelationship(FunctionType parentCtor,\n+      FunctionType childCtor, SubclassType type) {\n+    // do nothing\n+  }\n+\n+  @Override\n+  public String getAbstractMethodName() {\n+    return null;\n+  }\n+\n+  @Override\n+  public String getSingletonGetterClassName(Node callNode) {\n+    return null;\n+  }\n+\n+  @Override\n+  public void applySingletonGetter(FunctionType functionType,\n+      FunctionType getterType, ObjectType objectType) {\n+    // do nothing.\n+  }\n+\n+  @Override\n+  public DelegateRelationship getDelegateRelationship(Node callNode) {\n+    return null;\n+  }\n+\n+  @Override\n+  public void applyDelegateRelationship(\n+      ObjectType delegateSuperclass, ObjectType delegateBase,\n+      ObjectType delegator, FunctionType delegateProxy,\n+      FunctionType findDelegate) {\n+    // do nothing.\n+  }\n+\n+  @Override\n+  public String getDelegateSuperclassName() {\n+    return null;\n+  }\n+\n+  @Override\n+  public void defineDelegateProxyPrototypeProperties(\n+      JSTypeRegistry registry, Scope scope,\n+      List\u003cObjectType\u003e delegateProxyPrototypes) {\n+    // do nothing.\n+  }\n+\n+  @Override\n+  public String getGlobalObject() {\n+    return \"window\";\n+  }\n+\n+  @Override\n+  public boolean isPropertyTestFunction(Node call) {\n+    return false;\n+  }\n+\n+  @Override\n+  public ObjectLiteralCast getObjectLiteralCast(NodeTraversal t,\n+      Node callNode) {\n+    return null;\n+  }\n+\n+  @Override\n+  public Collection\u003cAssertionFunctionSpec\u003e getAssertionFunctions() {\n+    return Collections.emptySet();\n+  }\n+}\n",
      "operations": [
        {
          "type": "delete-tree",
          "from": "ImportDeclaration [634,709]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/jscomp/JsMessageExtractor.java",
        "src/com/google/javascript/jscomp/JsMessageExtractor.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [
            "com.google.javascript.jscomp.JsMessageExtractor\\$ExtractMessagesVisitor:getMessages:[]:Collection\u003cJsMessage\u003e",
            "com.google.javascript.jscomp.JsMessageExtractor\\$ExtractMessagesVisitor:ExtractMessagesVisitor:[AbstractCompiler compiler]:null",
            "com.google.javascript.jscomp.JsMessageExtractor:JsMessageExtractor:[JsMessage.IdGenerator idGenerator, JsMessage.Style style]:null",
            "com.google.javascript.jscomp.JsMessageExtractor\\$ExtractMessagesVisitor:processJsMessage:[JsMessage message, JsMessageDefinition definition]:void",
            "com.google.javascript.jscomp.JsMessageExtractor:extractMessages:[Iterable\u003cJSSourceFile\u003e inputs]:Collection\u003cJsMessage\u003e",
            "com.google.javascript.jscomp.JsMessageExtractor:extractMessages:[JSSourceFile... inputs]:Collection\u003cJsMessage\u003e"
          ],
          "num": 6
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "-1"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "35",
            "36",
            "37",
            "38",
            "39",
            "40",
            "41",
            "42",
            "43",
            "44",
            "45",
            "46",
            "47",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57",
            "58",
            "59",
            "60",
            "61",
            "62",
            "63",
            "64",
            "65",
            "66",
            "67",
            "68",
            "69",
            "70",
            "71",
            "72",
            "73",
            "74",
            "75",
            "76",
            "77",
            "78",
            "79",
            "80",
            "81",
            "82",
            "83",
            "84",
            "85",
            "86",
            "87",
            "88",
            "89",
            "90",
            "91",
            "92",
            "93",
            "94",
            "95",
            "96",
            "97",
            "98",
            "99",
            "100",
            "101",
            "102",
            "103",
            "104",
            "105",
            "106",
            "107",
            "108",
            "109",
            "110",
            "111",
            "112",
            "113",
            "114",
            "115",
            "116",
            "117",
            "118",
            "119",
            "120",
            "121",
            "122",
            "123",
            "124",
            "125",
            "126",
            "127",
            "128",
            "129",
            "130",
            "131",
            "132",
            "133",
            "134",
            "135",
            "136",
            "137",
            "138",
            "139",
            "140",
            "141",
            "142",
            "143",
            "144",
            "145",
            "146",
            "147",
            "148"
          ],
          "num": 148
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/jscomp/JsMessageExtractor.java b/src/com/google/javascript/jscomp/JsMessageExtractor.java\nnew file mode 100644\nindex 0000000..7412463\n--- /dev/null\n+++ b/src/com/google/javascript/jscomp/JsMessageExtractor.java\n@@ -0,0 +1,148 @@\n+/*\n+ * Copyright 2004 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.javascript.jscomp;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.Iterables;\n+import com.google.common.collect.Lists;\n+import com.google.javascript.rhino.Node;\n+\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.List;\n+\n+\n+/**\n+ * Extracts messages and message comments from JS code.\n+ *\n+ * \u003cp\u003e Uses a special prefix (e.g. {@code MSG_}) to determine which variables\n+ * are messages. Here are the recognized formats:\n+ *\n+ *   \u003ccode\u003e\n+ *   var MSG_FOO \u003d \"foo\";\n+ *   var MSG_FOO_HELP \u003d \"this message is used for foo\";\n+ *   \u003c/code\u003e\n+ *\n+ *   \u003ccode\u003e\n+ *   var MSG_BAR \u003d function(a, b) {\n+ *     return a + \" bar \" + b;\n+ *   }\n+ *   var MSG_BAR_HELP \u003d \"the bar message\";\n+ *   \u003c/code\u003e\n+ *\n+ * \u003cp\u003eThis class enforces the policy that message variable names must be unique\n+ * across all JS files.\n+ *\n+*\n+*\n+ */\n+public class JsMessageExtractor {\n+\n+  private final JsMessage.Style style;\n+  private final JsMessage.IdGenerator idGenerator;\n+\n+  public JsMessageExtractor(JsMessage.IdGenerator idGenerator,\n+      JsMessage.Style style) {\n+    this.idGenerator \u003d idGenerator;\n+    this.style \u003d style;\n+  }\n+\n+  /**\n+   * Visitor that collects messages.\n+   */\n+  private class ExtractMessagesVisitor extends JsMessageVisitor {\n+    // We use List here as we want to preserve insertion-order for found\n+    // messages.\n+    // Take into account that messages with the same id could be present in the\n+    // result list. Message could have the same id only in case if they are\n+    // unnamed and have the same text but located in different source files.\n+    private final List\u003cJsMessage\u003e messages \u003d Lists.newLinkedList();\n+\n+    private ExtractMessagesVisitor(AbstractCompiler compiler) {\n+      super(compiler, true, style, idGenerator);\n+    }\n+\n+    @Override\n+    protected void processJsMessage(JsMessage message,\n+        JsMessageDefinition definition) {\n+      if (!message.isExternal()) {\n+        messages.add(message);\n+      }\n+    }\n+\n+    /**\n+     * Returns extracted messages.\n+     *\n+     * @return collection of JsMessage objects that was found in js sources.\n+     */\n+    public Collection\u003cJsMessage\u003e getMessages() {\n+      return messages;\n+    }\n+  }\n+\n+  /**\n+   * Extracts js messages from javascript code.\n+   */\n+  public Collection\u003cJsMessage\u003e extractMessages(JSSourceFile... inputs)\n+      throws IOException {\n+    return extractMessages(ImmutableList.copyOf(inputs));\n+  }\n+\n+\n+  /**\n+   * Extracts js messages from javascript code.\n+   *\n+   * @param inputs  the javascript source code inputs\n+   * @return the extracted messages collection\n+   * @throws IOException if there is a problem reading the js code\n+   * @throws RuntimeException if there are problems parsing the js code or the\n+   *     js messages, or if two messages have the same key\n+   */\n+  public Collection\u003cJsMessage\u003e extractMessages(\n+      Iterable\u003cJSSourceFile\u003e inputs) throws IOException {\n+\n+    Compiler compiler \u003d new Compiler();\n+    compiler.init(\n+        new JSSourceFile[] {},\n+        Iterables.toArray(inputs, JSSourceFile.class),\n+        new CompilerOptions());\n+\n+    ExtractMessagesVisitor extractCompilerPass \u003d\n+        new ExtractMessagesVisitor(compiler);\n+    for (JSSourceFile input : inputs) {\n+      // Parse the js files individually, to prevent out-of-memory\n+      // problems.\n+      Node root \u003d new JsAst(input).getAstRoot(compiler);\n+\n+      // Traverse the returned nodes and extract messages.\n+      extractCompilerPass.process(null, root);\n+    }\n+\n+    JSError[] errors \u003d compiler.getErrors();\n+    // Check for errors.\n+    if (errors.length \u003e 0) {\n+      StringBuilder msg \u003d new StringBuilder(\"JSCompiler errors\\n\");\n+      MessageFormatter formatter \u003d new LightweightMessageFormatter(compiler);\n+      for (JSError e : errors) {\n+        msg.append(formatter.formatError(e));\n+      }\n+      throw new RuntimeException(msg.toString());\n+    }\n+\n+    return extractCompilerPass.getMessages();\n+  }\n+}\n",
      "operations": [
        {
          "type": "delete-tree",
          "from": "ImportDeclaration [767,805]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/jscomp/LinkedFlowScope.java",
        "src/com/google/javascript/jscomp/LinkedFlowScope.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [
            "com.google.javascript.jscomp.LinkedFlowScope:createEntryLattice:[Scope scope]:LinkedFlowScope",
            "com.google.javascript.jscomp.LinkedFlowScope:inferQualifiedSlot:[String symbol, JSType bottomType, JSType inferredType]:void",
            "com.google.javascript.jscomp.LinkedFlowScope:getSlot:[String name]:StaticSlot\u003cJSType\u003e",
            "com.google.javascript.jscomp.LinkedFlowScope:completeScope:[Scope scope]:void",
            "com.google.javascript.jscomp.LinkedFlowScope:inferSlotType:[String symbol, JSType type]:void",
            "com.google.javascript.jscomp.LinkedFlowScope\\$FlatFlowScopeCache:FlatFlowScopeCache:[LinkedFlowScope directParent]:null",
            "com.google.javascript.jscomp.LinkedFlowScope:LinkedFlowScope:[FlatFlowScopeCache cache, LinkedFlowScope directParent]:null",
            "com.google.javascript.jscomp.LinkedFlowScope:LinkedFlowScope:[FlatFlowScopeCache cache]:null",
            "com.google.javascript.jscomp.LinkedFlowScope:diffSlots:[StaticSlot\u003cJSType\u003e slotA, StaticSlot\u003cJSType\u003e slotB]:boolean",
            "com.google.javascript.jscomp.LinkedFlowScope:findUniqueRefinedSlot:[FlowScope blindScope]:StaticSlot\u003cJSType\u003e",
            "com.google.javascript.jscomp.LinkedFlowScope\\$LinkedFlowSlot:LinkedFlowSlot:[String name, JSType type, LinkedFlowSlot parent]:null",
            "com.google.javascript.jscomp.LinkedFlowScope:getFunctionScope:[]:Scope",
            "com.google.javascript.jscomp.LinkedFlowScope:getOwnSlot:[String name]:StaticSlot\u003cJSType\u003e",
            "com.google.javascript.jscomp.LinkedFlowScope\\$FlatFlowScopeCache:FlatFlowScopeCache:[Scope functionScope]:null",
            "com.google.javascript.jscomp.LinkedFlowScope\\$FlowScopeJoinOp:apply:[FlowScope a, FlowScope b]:FlowScope",
            "com.google.javascript.jscomp.LinkedFlowScope\\$FlatFlowScopeCache:getSlot:[String name]:StaticSlot\u003cJSType\u003e",
            "com.google.javascript.jscomp.LinkedFlowScope:getParentScope:[]:StaticScope\u003cJSType\u003e",
            "com.google.javascript.jscomp.LinkedFlowScope:optimize:[]:LinkedFlowScope",
            "com.google.javascript.jscomp.LinkedFlowScope\\$FlatFlowScopeCache:FlatFlowScopeCache:[LinkedFlowScope joinedScopeA, LinkedFlowScope joinedScopeB]:null",
            "com.google.javascript.jscomp.LinkedFlowScope:equals:[Object other]:boolean",
            "com.google.javascript.jscomp.LinkedFlowScope:getTypeOfThis:[]:JSType",
            "com.google.javascript.jscomp.LinkedFlowScope:LinkedFlowScope:[LinkedFlowScope directParent]:null",
            "com.google.javascript.jscomp.LinkedFlowScope:flowsFromBottom:[]:boolean",
            "com.google.javascript.jscomp.LinkedFlowScope:allFlowSlots:[]:Map\u003cString,StaticSlot\u003cJSType\u003e\u003e",
            "com.google.javascript.jscomp.LinkedFlowScope:createChildFlowScope:[]:FlowScope"
          ],
          "num": 25
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "-1"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "35",
            "36",
            "37",
            "38",
            "39",
            "40",
            "41",
            "42",
            "43",
            "44",
            "45",
            "46",
            "47",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57",
            "58",
            "59",
            "60",
            "61",
            "62",
            "63",
            "64",
            "65",
            "66",
            "67",
            "68",
            "69",
            "70",
            "71",
            "72",
            "73",
            "74",
            "75",
            "76",
            "77",
            "78",
            "79",
            "80",
            "81",
            "82",
            "83",
            "84",
            "85",
            "86",
            "87",
            "88",
            "89",
            "90",
            "91",
            "92",
            "93",
            "94",
            "95",
            "96",
            "97",
            "98",
            "99",
            "100",
            "101",
            "102",
            "103",
            "104",
            "105",
            "106",
            "107",
            "108",
            "109",
            "110",
            "111",
            "112",
            "113",
            "114",
            "115",
            "116",
            "117",
            "118",
            "119",
            "120",
            "121",
            "122",
            "123",
            "124",
            "125",
            "126",
            "127",
            "128",
            "129",
            "130",
            "131",
            "132",
            "133",
            "134",
            "135",
            "136",
            "137",
            "138",
            "139",
            "140",
            "141",
            "142",
            "143",
            "144",
            "145",
            "146",
            "147",
            "148",
            "149",
            "150",
            "151",
            "152",
            "153",
            "154",
            "155",
            "156",
            "157",
            "158",
            "159",
            "160",
            "161",
            "162",
            "163",
            "164",
            "165",
            "166",
            "167",
            "168",
            "169",
            "170",
            "171",
            "172",
            "173",
            "174",
            "175",
            "176",
            "177",
            "178",
            "179",
            "180",
            "181",
            "182",
            "183",
            "184",
            "185",
            "186",
            "187",
            "188",
            "189",
            "190",
            "191",
            "192",
            "193",
            "194",
            "195",
            "196",
            "197",
            "198",
            "199",
            "200",
            "201",
            "202",
            "203",
            "204",
            "205",
            "206",
            "207",
            "208",
            "209",
            "210",
            "211",
            "212",
            "213",
            "214",
            "215",
            "216",
            "217",
            "218",
            "219",
            "220",
            "221",
            "222",
            "223",
            "224",
            "225",
            "226",
            "227",
            "228",
            "229",
            "230",
            "231",
            "232",
            "233",
            "234",
            "235",
            "236",
            "237",
            "238",
            "239",
            "240",
            "241",
            "242",
            "243",
            "244",
            "245",
            "246",
            "247",
            "248",
            "249",
            "250",
            "251",
            "252",
            "253",
            "254",
            "255",
            "256",
            "257",
            "258",
            "259",
            "260",
            "261",
            "262",
            "263",
            "264",
            "265",
            "266",
            "267",
            "268",
            "269",
            "270",
            "271",
            "272",
            "273",
            "274",
            "275",
            "276",
            "277",
            "278",
            "279",
            "280",
            "281",
            "282",
            "283",
            "284",
            "285",
            "286",
            "287",
            "288",
            "289",
            "290",
            "291",
            "292",
            "293",
            "294",
            "295",
            "296",
            "297",
            "298",
            "299",
            "300",
            "301",
            "302",
            "303",
            "304",
            "305",
            "306",
            "307",
            "308",
            "309",
            "310",
            "311",
            "312",
            "313",
            "314",
            "315",
            "316",
            "317",
            "318",
            "319",
            "320",
            "321",
            "322",
            "323",
            "324",
            "325",
            "326",
            "327",
            "328",
            "329",
            "330",
            "331",
            "332",
            "333",
            "334",
            "335",
            "336",
            "337",
            "338",
            "339",
            "340",
            "341",
            "342",
            "343",
            "344",
            "345",
            "346",
            "347",
            "348",
            "349",
            "350",
            "351",
            "352",
            "353",
            "354",
            "355",
            "356",
            "357",
            "358",
            "359",
            "360",
            "361",
            "362",
            "363",
            "364",
            "365",
            "366",
            "367",
            "368",
            "369",
            "370",
            "371",
            "372",
            "373",
            "374",
            "375",
            "376",
            "377",
            "378",
            "379",
            "380",
            "381",
            "382",
            "383",
            "384",
            "385",
            "386",
            "387",
            "388",
            "389",
            "390",
            "391",
            "392",
            "393",
            "394",
            "395",
            "396",
            "397",
            "398",
            "399",
            "400",
            "401",
            "402",
            "403",
            "404",
            "405",
            "406",
            "407",
            "408",
            "409",
            "410",
            "411",
            "412",
            "413",
            "414",
            "415",
            "416",
            "417",
            "418",
            "419",
            "420",
            "421",
            "422",
            "423",
            "424",
            "425",
            "426",
            "427",
            "428",
            "429",
            "430",
            "431",
            "432",
            "433",
            "434",
            "435",
            "436",
            "437",
            "438",
            "439",
            "440",
            "441",
            "442",
            "443",
            "444",
            "445",
            "446",
            "447",
            "448",
            "449",
            "450",
            "451",
            "452",
            "453",
            "454",
            "455",
            "456",
            "457",
            "458",
            "459",
            "460",
            "461",
            "462",
            "463",
            "464",
            "465",
            "466",
            "467",
            "468",
            "469",
            "470",
            "471",
            "472",
            "473",
            "474",
            "475",
            "476",
            "477",
            "478",
            "479",
            "480",
            "481",
            "482",
            "483",
            "484",
            "485",
            "486",
            "487",
            "488",
            "489",
            "490",
            "491",
            "492",
            "493",
            "494",
            "495",
            "496"
          ],
          "num": 496
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/jscomp/LinkedFlowScope.java b/src/com/google/javascript/jscomp/LinkedFlowScope.java\nnew file mode 100644\nindex 0000000..3747e09\n--- /dev/null\n+++ b/src/com/google/javascript/jscomp/LinkedFlowScope.java\n@@ -0,0 +1,496 @@\n+/*\n+ * Copyright 2008 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.javascript.jscomp;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.Maps;\n+import com.google.common.collect.Sets;\n+import com.google.javascript.jscomp.Scope.Var;\n+import com.google.javascript.rhino.jstype.JSType;\n+import com.google.javascript.rhino.jstype.SimpleSlot;\n+import com.google.javascript.rhino.jstype.StaticScope;\n+import com.google.javascript.rhino.jstype.StaticSlot;\n+\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * A flow scope that tries to store as little symbol information as possible,\n+ * instead delegating to its parents. Optimized for low memory use.\n+ *\n+ * @author nicksantos@google.com (Nick Santos)\n+ */\n+class LinkedFlowScope implements FlowScope {\n+  // The closest flow scope cache.\n+  private final FlatFlowScopeCache cache;\n+\n+  // The parent flow scope.\n+  private final LinkedFlowScope parent;\n+\n+  // The distance between this flow scope and the closest flat flow scope.\n+  private int depth;\n+\n+  static final int MAX_DEPTH \u003d 250;\n+\n+  // A FlatFlowScopeCache equivalent to this scope.\n+  private FlatFlowScopeCache flattened;\n+\n+  // Flow scopes assume that all their ancestors are immutable.\n+  // So once a child scope is created, this flow scope may not be modified.\n+  private boolean frozen \u003d false;\n+\n+  // The last slot defined in this flow instruction, and the head of the\n+  // linked list of slots.\n+  private LinkedFlowSlot lastSlot;\n+\n+  private LinkedFlowScope(FlatFlowScopeCache cache,\n+      LinkedFlowScope directParent) {\n+    this.cache \u003d cache;\n+    if (directParent \u003d\u003d null) {\n+      this.lastSlot \u003d null;\n+      this.depth \u003d 0;\n+      this.parent \u003d cache.linkedEquivalent;\n+    } else {\n+      this.lastSlot \u003d directParent.lastSlot;\n+      this.depth \u003d directParent.depth + 1;\n+      this.parent \u003d directParent;\n+    }\n+  }\n+\n+  LinkedFlowScope(FlatFlowScopeCache cache) {\n+    this(cache, null);\n+  }\n+\n+  LinkedFlowScope(LinkedFlowScope directParent) {\n+    this(directParent.cache, directParent);\n+  }\n+\n+  /** Gets the function scope for this flow scope. */\n+  private Scope getFunctionScope() {\n+    return cache.functionScope;\n+  }\n+\n+  /** Whether this flows from a bottom scope. */\n+  private boolean flowsFromBottom() {\n+    return getFunctionScope().isBottom();\n+  }\n+\n+  /**\n+   * Creates an entry lattice for the flow.\n+   */\n+  public static LinkedFlowScope createEntryLattice(Scope scope) {\n+    return new LinkedFlowScope(new FlatFlowScopeCache(scope));\n+  }\n+\n+  @Override\n+  public void inferSlotType(String symbol, JSType type) {\n+    Preconditions.checkState(!frozen);\n+    lastSlot \u003d new LinkedFlowSlot(symbol, type, lastSlot);\n+    depth++;\n+    cache.dirtySymbols.add(symbol);\n+  }\n+\n+  @Override\n+  public void inferQualifiedSlot(String symbol, JSType bottomType,\n+      JSType inferredType) {\n+    Scope functionScope \u003d getFunctionScope();\n+    if (functionScope.isLocal()) {\n+      if (functionScope.getVar(symbol) \u003d\u003d null \u0026\u0026 !functionScope.isBottom()) {\n+        // When we enter a local scope, many qualified names are\n+        // already defined even if they haven\u0027t been declared in the Scope\n+        // object. If the name has not yet been defined in this scope, we\n+        // need to define it now before we refine it.\n+        functionScope.declare(symbol, null, bottomType, null);\n+      }\n+\n+      inferSlotType(symbol, inferredType);\n+    }\n+  }\n+\n+  @Override\n+  public JSType getTypeOfThis() {\n+    return cache.functionScope.getTypeOfThis();\n+  }\n+\n+  @Override\n+  public StaticScope\u003cJSType\u003e getParentScope() {\n+    return getFunctionScope().getParentScope();\n+  }\n+\n+  /**\n+   * Get the slot for the given symbol.\n+   */\n+  public StaticSlot\u003cJSType\u003e getSlot(String name) {\n+    if (cache.dirtySymbols.contains(name)) {\n+      for (LinkedFlowSlot slot \u003d lastSlot;\n+           slot !\u003d null; slot \u003d slot.parent) {\n+        if (slot.getName().equals(name)) {\n+          return slot;\n+        }\n+      }\n+    }\n+    return cache.getSlot(name);\n+  }\n+\n+  @Override\n+  public StaticSlot\u003cJSType\u003e getOwnSlot(String name) {\n+    throw new UnsupportedOperationException();\n+  }\n+\n+  @Override\n+  public FlowScope createChildFlowScope() {\n+    frozen \u003d true;\n+\n+    if (depth \u003e MAX_DEPTH) {\n+      if (flattened \u003d\u003d null) {\n+        flattened \u003d new FlatFlowScopeCache(this);\n+      }\n+      return new LinkedFlowScope(flattened);\n+    }\n+\n+    return new LinkedFlowScope(this);\n+  }\n+\n+  /**\n+   * Iterate through all the linked flow scopes before this one.\n+   * If there\u0027s one and only one slot defined between this scope\n+   * and the blind scope, return it.\n+   */\n+  @Override\n+  public StaticSlot\u003cJSType\u003e findUniqueRefinedSlot(FlowScope blindScope) {\n+    StaticSlot\u003cJSType\u003e result \u003d null;\n+\n+    for (LinkedFlowScope currentScope \u003d this;\n+         currentScope !\u003d blindScope;\n+         currentScope \u003d currentScope.parent) {\n+      for (LinkedFlowSlot currentSlot \u003d currentScope.lastSlot;\n+           currentSlot !\u003d null \u0026\u0026\n+           (currentScope.parent \u003d\u003d null ||\n+            currentScope.parent.lastSlot !\u003d currentSlot);\n+           currentSlot \u003d currentSlot.parent) {\n+        if (result \u003d\u003d null) {\n+          result \u003d currentSlot;\n+        } else if (!currentSlot.getName().equals(result.getName())) {\n+          return null;\n+        }\n+      }\n+    }\n+\n+    return result;\n+  }\n+\n+  /**\n+   * Look through the given scope, and try to find slots where it doesn\u0027t\n+   * have enough type information. Then fill in that type information\n+   * with stuff that we\u0027ve inferred in the local flow.\n+   */\n+  public void completeScope(Scope scope) {\n+    for (Iterator\u003cVar\u003e it \u003d scope.getVars(); it.hasNext();) {\n+      Var var \u003d it.next();\n+      if (var.isTypeInferred()) {\n+        JSType type \u003d var.getType();\n+        if (type \u003d\u003d null || type.isUnknownType()) {\n+          JSType flowType \u003d getSlot(var.getName()).getType();\n+          var.setType(flowType);\n+        }\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Remove flow scopes that add nothing to the flow.\n+   */\n+  // NOTE(nicksantos): This function breaks findUniqueRefinedSlot, because\n+  // findUniqueRefinedSlot assumes that this scope is a direct descendant\n+  // of blindScope. This is not necessarily true if this scope has been\n+  // optimize()d and blindScope has not. This should be fixed. For now,\n+  // we only use optimize() where we know that we won\u0027t have to do\n+  // a findUniqueRefinedSlot on it.\n+  @Override\n+  public LinkedFlowScope optimize() {\n+    LinkedFlowScope current;\n+    for (current \u003d this;\n+         current.parent !\u003d null \u0026\u0026\n+             current.lastSlot \u003d\u003d current.parent.lastSlot;\n+         current \u003d current.parent) {}\n+    return current;\n+  }\n+\n+  /** Join the two FlowScopes. */\n+  static class FlowScopeJoinOp extends JoinOp.BinaryJoinOp\u003cFlowScope\u003e {\n+    @SuppressWarnings(\"unchecked\")\n+    @Override\n+    public FlowScope apply(FlowScope a, FlowScope b) {\n+      // To join the two scopes, we have to\n+      LinkedFlowScope linkedA \u003d (LinkedFlowScope) a;\n+      LinkedFlowScope linkedB \u003d (LinkedFlowScope) b;\n+      linkedA.frozen \u003d true;\n+      linkedB.frozen \u003d true;\n+      if (linkedA.optimize() \u003d\u003d linkedB.optimize()) {\n+        return linkedA.createChildFlowScope();\n+      }\n+      return new LinkedFlowScope(new FlatFlowScopeCache(linkedA, linkedB));\n+    }\n+  }\n+\n+  @Override\n+  public boolean equals(Object other) {\n+    if (other instanceof LinkedFlowScope) {\n+      LinkedFlowScope that \u003d (LinkedFlowScope) other;\n+      if (this.optimize() \u003d\u003d that.optimize()) {\n+        return true;\n+      }\n+\n+      // If two flow scopes are in the same function, then they could have\n+      // two possible function scopes: the real one and the BOTTOM scope.\n+      // If they have different function scopes, we *should* iterate thru all\n+      // the variables in each scope and compare. However, 99.9% of the time,\n+      // they\u0027re not equal. And the other .1% of the time, we can pretend\n+      // they\u0027re equal--this just means that data flow analysis will have\n+      // to propagate the entry lattice a little bit further than it\n+      // really needs to. Everything will still come out ok.\n+      if (this.getFunctionScope() !\u003d that.getFunctionScope()) {\n+        return false;\n+      }\n+\n+      if (cache \u003d\u003d that.cache) {\n+        // If the two flow scopes have the same cache, then we can check\n+        // equality a lot faster: by just looking at the \"dirty\" elements\n+        // in the cache, and comparing them in both scopes.\n+        for (String name : cache.dirtySymbols) {\n+          if (diffSlots(getSlot(name), that.getSlot(name))) {\n+            return false;\n+          }\n+        }\n+\n+        return true;\n+      }\n+\n+      Map\u003cString, StaticSlot\u003cJSType\u003e\u003e myFlowSlots \u003d allFlowSlots();\n+      Map\u003cString, StaticSlot\u003cJSType\u003e\u003e otherFlowSlots \u003d that.allFlowSlots();\n+\n+      for (StaticSlot\u003cJSType\u003e slot : myFlowSlots.values()) {\n+        if (diffSlots(slot, otherFlowSlots.get(slot.getName()))) {\n+          return false;\n+        }\n+        otherFlowSlots.remove(slot.getName());\n+      }\n+      for (StaticSlot\u003cJSType\u003e slot : otherFlowSlots.values()) {\n+        if (diffSlots(slot, myFlowSlots.get(slot.getName()))) {\n+          return false;\n+        }\n+      }\n+      return true;\n+    }\n+    return false;\n+  }\n+\n+  /**\n+   * Determines whether two slots are meaningfully different for the\n+   * purposes of data flow analysis.\n+   */\n+  private boolean diffSlots(StaticSlot\u003cJSType\u003e slotA,\n+                            StaticSlot\u003cJSType\u003e slotB) {\n+    boolean aIsNull \u003d slotA \u003d\u003d null || slotA.getType() \u003d\u003d null;\n+    boolean bIsNull \u003d slotB \u003d\u003d null || slotB.getType() \u003d\u003d null;\n+    if (aIsNull \u0026\u0026 bIsNull) {\n+      return false;\n+    } else if (aIsNull ^ bIsNull) {\n+      return true;\n+    }\n+\n+    // Both slots must be non-null.\n+    JSType aType \u003d slotA.getType();\n+    JSType bType \u003d slotB.getType();\n+    if (aType.isNoType() || bType.isNoType()) {\n+      return false;\n+    }\n+\n+    // Both types must be non-null.\n+    return aType.differsFrom(bType);\n+  }\n+\n+  /**\n+   * Gets all the symbols that have been defined before this point\n+   * in the current flow. Does not return slots that have not changed during\n+   * the flow.\n+   *\n+   * For example, consider the code:\n+   * \u003ccode\u003e\n+   * var x \u003d 3;\n+   * function f() {\n+   *   var y \u003d 5;\n+   *   y \u003d 6; // FLOW POINT\n+   *   var z \u003d y;\n+   *   return z;\n+   * }\n+   * \u003c/code\u003e\n+   * A FlowScope at FLOW POINT will return a slot for y, but not\n+   * a slot for x or z.\n+   */\n+  private Map\u003cString, StaticSlot\u003cJSType\u003e\u003e allFlowSlots() {\n+    Map\u003cString, StaticSlot\u003cJSType\u003e\u003e slots \u003d Maps.newHashMap();\n+    for (LinkedFlowSlot slot \u003d lastSlot;\n+         slot !\u003d null; slot \u003d slot.parent) {\n+      if (!slots.containsKey(slot.getName())) {\n+        slots.put(slot.getName(), slot);\n+      }\n+    }\n+\n+    for (String key : cache.symbols.keySet()) {\n+      if (!slots.containsKey(key)) {\n+        slots.put(key, cache.symbols.get(key));\n+      }\n+    }\n+\n+    return slots;\n+  }\n+\n+  /**\n+   * A static slot that can be used in a linked list.\n+   */\n+  private static class LinkedFlowSlot extends SimpleSlot {\n+    final LinkedFlowSlot parent;\n+\n+    LinkedFlowSlot(String name, JSType type, LinkedFlowSlot parent) {\n+      super(name, type, true);\n+      this.parent \u003d parent;\n+    }\n+  }\n+\n+  /**\n+   * A map that tries to cache as much symbol table information\n+   * as possible in a map. Optimized for fast lookup.\n+   */\n+  private static class FlatFlowScopeCache {\n+    // The Scope for the entire function or for the gloal scope.\n+    private final Scope functionScope;\n+\n+    // The linked flow scope that this cache represents.\n+    private final LinkedFlowScope linkedEquivalent;\n+\n+    // All the symbols defined before this point in the local flow.\n+    // May not include lazily declared qualified names.\n+    private Map\u003cString, StaticSlot\u003cJSType\u003e\u003e symbols \u003d Maps.newHashMap();\n+\n+    // Used to help make lookup faster for LinkedFlowScopes by recording\n+    // symbols that may be redefined \"soon\", for an arbitrary definition\n+    // of \"soon\". ;)\n+    //\n+    // More rigorously, if a symbol is redefined in a LinkedFlowScope,\n+    // and this is the closest FlatFlowScopeCache, then that symbol is marked\n+    // \"dirty\". In this way, we don\u0027t waste time looking in the LinkedFlowScope\n+    // list for symbols that aren\u0027t defined anywhere nearby.\n+    final Set\u003cString\u003e dirtySymbols \u003d Sets.newHashSet();\n+\n+    // The cache at the bottom of the lattice.\n+    FlatFlowScopeCache(Scope functionScope) {\n+      this.functionScope \u003d functionScope;\n+      symbols \u003d ImmutableMap.of();\n+      linkedEquivalent \u003d null;\n+    }\n+\n+    // A cache in the middle of a long scope chain.\n+    FlatFlowScopeCache(LinkedFlowScope directParent) {\n+      FlatFlowScopeCache cache \u003d directParent.cache;\n+\n+      functionScope \u003d cache.functionScope;\n+      symbols \u003d directParent.allFlowSlots();\n+      linkedEquivalent \u003d directParent;\n+    }\n+\n+    // A cache at the join of two scope chains.\n+    FlatFlowScopeCache(LinkedFlowScope joinedScopeA,\n+        LinkedFlowScope joinedScopeB) {\n+      linkedEquivalent \u003d null;\n+\n+      // Always prefer the \"real\" function scope to the faked-out\n+      // bottom scope.\n+      functionScope \u003d joinedScopeA.flowsFromBottom() ?\n+          joinedScopeB.getFunctionScope() : joinedScopeA.getFunctionScope();\n+\n+      Map\u003cString, StaticSlot\u003cJSType\u003e\u003e slotsA \u003d joinedScopeA.allFlowSlots();\n+      Map\u003cString, StaticSlot\u003cJSType\u003e\u003e slotsB \u003d joinedScopeB.allFlowSlots();\n+\n+      symbols \u003d slotsA;\n+\n+      // There are 5 different join cases:\n+      // 1) The type is declared in joinedScopeA, not in joinedScopeB,\n+      //    and not in functionScope. Just use the one in A.\n+      // 2) The type is declared in joinedScopeB, not in joinedScopeA,\n+      //    and not in functionScope. Just use the one in B.\n+      // 3) The type is declared in functionScope and joinedScopeA, but\n+      //    not in joinedScopeB. Join the two types.\n+      // 4) The type is declared in functionScope and joinedScopeB, but\n+      //    not in joinedScopeA. Join the two types.\n+      // 5) The type is declared in joinedScopeA and joinedScopeB. Join\n+      //    the two types.\n+      Set\u003cString\u003e symbolNames \u003d Sets.newHashSet(symbols.keySet());\n+      symbolNames.addAll(slotsB.keySet());\n+\n+      for (String name : symbolNames) {\n+        StaticSlot\u003cJSType\u003e slotA \u003d slotsA.get(name);\n+        StaticSlot\u003cJSType\u003e slotB \u003d slotsB.get(name);\n+\n+        JSType joinedType \u003d null;\n+        if (slotB \u003d\u003d null || slotB.getType() \u003d\u003d null) {\n+          StaticSlot\u003cJSType\u003e fnSlot\n+              \u003d joinedScopeB.getFunctionScope().getSlot(name);\n+          JSType fnSlotType \u003d fnSlot \u003d\u003d null ? null : fnSlot.getType();\n+          if (fnSlotType \u003d\u003d null) {\n+            // Case #1 -- already inserted.\n+          } else {\n+            // Case #3\n+            joinedType \u003d slotA.getType().getLeastSupertype(fnSlotType);\n+          }\n+        } else if (slotA \u003d\u003d null || slotA.getType() \u003d\u003d null) {\n+          StaticSlot\u003cJSType\u003e fnSlot\n+              \u003d joinedScopeA.getFunctionScope().getSlot(name);\n+          JSType fnSlotType \u003d fnSlot \u003d\u003d null ? null : fnSlot.getType();\n+          if (fnSlotType \u003d\u003d null) {\n+            // Case #2\n+            symbols.put(name, slotB);\n+          } else {\n+            // Case #4\n+            joinedType \u003d slotB.getType().getLeastSupertype(fnSlotType);\n+          }\n+        } else {\n+          // Case #5\n+          joinedType \u003d\n+              slotA.getType().getLeastSupertype(slotB.getType());\n+        }\n+\n+        if (joinedType !\u003d null) {\n+          symbols.put(name, new SimpleSlot(name, joinedType, true));\n+        }\n+      }\n+    }\n+\n+    /**\n+     * Get the slot for the given symbol.\n+     */\n+    public StaticSlot\u003cJSType\u003e getSlot(String name) {\n+      if (symbols.containsKey(name)) {\n+        return symbols.get(name);\n+      } else {\n+        return functionScope.getSlot(name);\n+      }\n+    }\n+  }\n+}\n",
      "operations": [
        {
          "type": "delete-tree",
          "from": "Javadoc [4546,4564]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/jscomp/SanityCheck.java",
        "src/com/google/javascript/jscomp/SanityCheck.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [
            "com.google.javascript.jscomp.SanityCheck:sanityCheckCodeGeneration:[Node root]:Node",
            "com.google.javascript.jscomp.SanityCheck:SanityCheck:[AbstractCompiler compiler]:null",
            "com.google.javascript.jscomp.SanityCheck:process:[Node externs, Node root]:void",
            "com.google.javascript.jscomp.SanityCheck:sanityCheckNormalization:[Node externs, Node root]:void"
          ],
          "num": 4
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "-1"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "35",
            "36",
            "37",
            "38",
            "39",
            "40",
            "41",
            "42",
            "43",
            "44",
            "45",
            "46",
            "47",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57",
            "58",
            "59",
            "60",
            "61",
            "62",
            "63",
            "64",
            "65",
            "66",
            "67",
            "68",
            "69",
            "70",
            "71",
            "72",
            "73",
            "74",
            "75",
            "76",
            "77",
            "78",
            "79",
            "80",
            "81",
            "82",
            "83",
            "84",
            "85",
            "86",
            "87",
            "88",
            "89",
            "90",
            "91",
            "92",
            "93",
            "94",
            "95",
            "96",
            "97",
            "98",
            "99",
            "100",
            "101",
            "102",
            "103",
            "104",
            "105",
            "106",
            "107",
            "108",
            "109",
            "110",
            "111",
            "112",
            "113",
            "114",
            "115",
            "116",
            "117"
          ],
          "num": 117
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/jscomp/SanityCheck.java b/src/com/google/javascript/jscomp/SanityCheck.java\nnew file mode 100644\nindex 0000000..a363a9b\n--- /dev/null\n+++ b/src/com/google/javascript/jscomp/SanityCheck.java\n@@ -0,0 +1,117 @@\n+/*\n+ * Copyright 2009 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.javascript.jscomp;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.javascript.rhino.Node;\n+\n+/**\n+ * A compiler pass that verifies the structure of the AST conforms\n+ * to a number of invariants. Because this can add a lot of overhead,\n+ * we only run this in development mode.\n+ *\n+*\n+ * @author nicksantos@google.com (Nick Santos)\n+ */\n+class SanityCheck implements CompilerPass {\n+\n+  static final DiagnosticType CANNOT_PARSE_GENERATED_CODE \u003d\n+      DiagnosticType.error(\"JSC_CANNOT_PARSE_GENERATED_CODE\",\n+          \"Internal compiler error. Cannot parse generated code: {0}\");\n+\n+  static final DiagnosticType GENERATED_BAD_CODE \u003d DiagnosticType.error(\n+      \"JSC_GENERATED_BAD_CODE\",\n+      \"Internal compiler error. Generated bad code.\" +\n+      \"----------------------------------------\\n\" +\n+      \"Expected:\\n{0}\\n\" +\n+      \"----------------------------------------\\n\" +\n+      \"Actual\\n{1}\");\n+\n+  private final AbstractCompiler compiler;\n+\n+  SanityCheck(AbstractCompiler compiler) {\n+    this.compiler \u003d compiler;\n+  }\n+\n+  public void process(Node externs, Node root) {\n+    sanityCheckNormalization(externs, root);\n+    sanityCheckCodeGeneration(root);\n+  }\n+\n+  /**\n+   * Sanity checks code generation by performing it once, parsing the result,\n+   * then generating code from the second parse tree to verify that it matches\n+   * the code generated from the first parse tree.\n+   *\n+   * @return The regenerated parse tree. Null on error.\n+   */\n+  private Node sanityCheckCodeGeneration(Node root) {\n+    if (compiler.hasHaltingErrors()) {\n+      // Don\u0027t even bother checking code generation if we already know the\n+      // the code is bad.\n+      return null;\n+    }\n+\n+    String source \u003d compiler.toSource(root);\n+    Node root2 \u003d compiler.parseSyntheticCode(source);\n+    if (compiler.hasHaltingErrors()) {\n+      compiler.report(JSError.make(CANNOT_PARSE_GENERATED_CODE,\n+              Strings.truncateAtMaxLength(source, 100, true)));\n+      return null;\n+    }\n+\n+    String source2 \u003d compiler.toSource(root2);\n+    if (!source.equals(source2)) {\n+      compiler.report(JSError.make(GENERATED_BAD_CODE,\n+              Strings.truncateAtMaxLength(source, 100, true),\n+              Strings.truncateAtMaxLength(source2, 100, true)));\n+    }\n+\n+    return root2;\n+  }\n+\n+  /**\n+   * Sanity checks the AST. This is by verifing the normalization passes do\n+   * nothing.\n+   */\n+  private void sanityCheckNormalization(Node externs, Node root) {\n+    // Verify nothing has inappropriately denormalize the AST.\n+    CodeChangeHandler.RecentChange handler \u003d\n+        new CodeChangeHandler.RecentChange();\n+    compiler.addChangeHandler(handler);\n+\n+    // TODO(johnlenz): Change these normalization checks Preconditions and\n+    // Exceptions into Errors so that it is easier to find the root cause\n+    // when there are cascading issues.\n+    new PrepareAst(compiler, true).process(null, root);\n+    Preconditions.checkState(!handler.hasCodeChanged(),\n+        \"This should never fire, NodeTypeNormalizer should assert first.\");\n+\n+    if (compiler.isNormalized()) {\n+      (new Normalize(compiler, true)).process(externs, root);\n+      Preconditions.checkState(!handler.hasCodeChanged(),\n+          \"This should never fire, Normalize should assert first.\");\n+\n+      boolean checkUserDeclarations \u003d true;\n+      CompilerPass pass \u003d new Normalize.VerifyConstants(\n+          compiler, checkUserDeclarations);\n+      pass.process(externs, root);\n+    }\n+\n+    compiler.removeChangeHandler(handler);\n+  }\n+}\n",
      "operations": [
        {
          "type": "delete-tree",
          "from": "ImportDeclaration [721,762]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/jscomp/SourceFile.java",
        "src/com/google/javascript/jscomp/SourceFile.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [
            "com.google.javascript.jscomp.SourceFile\\$Generated:clearCachedSource:[]:void",
            "com.google.javascript.jscomp.SourceFile:fromFile:[File file, Charset c]:SourceFile",
            "com.google.javascript.jscomp.SourceFile\\$Preloaded:Preloaded:[String fileName, String originalPath, String code]:null",
            "com.google.javascript.jscomp.SourceFile\\$Preloaded:Preloaded:[String fileName, String code]:null",
            "com.google.javascript.jscomp.SourceFile:fromInputStream:[String fileName, InputStream s]:SourceFile",
            "com.google.javascript.jscomp.SourceFile\\$OnDisk:OnDisk:[File file, Charset c]:null",
            "com.google.javascript.jscomp.SourceFile\\$OnDisk:getCode:[]:String",
            "com.google.javascript.jscomp.SourceFile:getName:[]:String",
            "com.google.javascript.jscomp.SourceFile:fromFile:[String fileName, Charset c]:SourceFile",
            "com.google.javascript.jscomp.SourceFile\\$OnDisk:OnDisk:[File file]:null",
            "com.google.javascript.jscomp.SourceFile:getOriginalPath:[]:String",
            "com.google.javascript.jscomp.SourceFile:fromFile:[String fileName]:SourceFile",
            "com.google.javascript.jscomp.SourceFile:fromInputStream:[String fileName, String originalPath, InputStream s]:SourceFile",
            "com.google.javascript.jscomp.SourceFile\\$OnDisk:setCharset:[Charset c]:void",
            "com.google.javascript.jscomp.SourceFile:getLine:[int lineNumber]:String",
            "com.google.javascript.jscomp.SourceFile:getRegion:[int lineNumber]:Region",
            "com.google.javascript.jscomp.SourceFile:fromReader:[String fileName, Reader r]:SourceFile",
            "com.google.javascript.jscomp.SourceFile\\$OnDisk:clearCachedSource:[]:void",
            "com.google.javascript.jscomp.SourceFile\\$Generator:getCode:[]:String",
            "com.google.javascript.jscomp.SourceFile:setOriginalPath:[String originalPath]:void",
            "com.google.javascript.jscomp.SourceFile:fromGenerator:[String fileName, Generator generator]:SourceFile",
            "com.google.javascript.jscomp.SourceFile:setCode:[String sourceCode]:void",
            "com.google.javascript.jscomp.SourceFile\\$Generated:Generated:[String fileName, Generator generator]:null",
            "com.google.javascript.jscomp.SourceFile:fromCode:[String fileName, String code]:SourceFile",
            "com.google.javascript.jscomp.SourceFile:clearCachedSource:[]:void",
            "com.google.javascript.jscomp.SourceFile:SourceFile:[String fileName]:null",
            "com.google.javascript.jscomp.SourceFile\\$Generated:getCode:[]:String",
            "com.google.javascript.jscomp.SourceFile\\$OnDisk:getCodeReader:[]:Reader",
            "com.google.javascript.jscomp.SourceFile:getCodeReader:[]:Reader",
            "com.google.javascript.jscomp.SourceFile\\$OnDisk:getCharset:[]:Charset",
            "com.google.javascript.jscomp.SourceFile:fromCode:[String fileName, String originalPath, String code]:SourceFile",
            "com.google.javascript.jscomp.SourceFile:fromFile:[File file]:SourceFile",
            "com.google.javascript.jscomp.SourceFile:getCodeNoCache:[]:String",
            "com.google.javascript.jscomp.SourceFile:hasSourceInMemory:[]:boolean",
            "com.google.javascript.jscomp.SourceFile:getCode:[]:String"
          ],
          "num": 35
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "-1"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "35",
            "36",
            "37",
            "38",
            "39",
            "40",
            "41",
            "42",
            "43",
            "44",
            "45",
            "46",
            "47",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57",
            "58",
            "59",
            "60",
            "61",
            "62",
            "63",
            "64",
            "65",
            "66",
            "67",
            "68",
            "69",
            "70",
            "71",
            "72",
            "73",
            "74",
            "75",
            "76",
            "77",
            "78",
            "79",
            "80",
            "81",
            "82",
            "83",
            "84",
            "85",
            "86",
            "87",
            "88",
            "89",
            "90",
            "91",
            "92",
            "93",
            "94",
            "95",
            "96",
            "97",
            "98",
            "99",
            "100",
            "101",
            "102",
            "103",
            "104",
            "105",
            "106",
            "107",
            "108",
            "109",
            "110",
            "111",
            "112",
            "113",
            "114",
            "115",
            "116",
            "117",
            "118",
            "119",
            "120",
            "121",
            "122",
            "123",
            "124",
            "125",
            "126",
            "127",
            "128",
            "129",
            "130",
            "131",
            "132",
            "133",
            "134",
            "135",
            "136",
            "137",
            "138",
            "139",
            "140",
            "141",
            "142",
            "143",
            "144",
            "145",
            "146",
            "147",
            "148",
            "149",
            "150",
            "151",
            "152",
            "153",
            "154",
            "155",
            "156",
            "157",
            "158",
            "159",
            "160",
            "161",
            "162",
            "163",
            "164",
            "165",
            "166",
            "167",
            "168",
            "169",
            "170",
            "171",
            "172",
            "173",
            "174",
            "175",
            "176",
            "177",
            "178",
            "179",
            "180",
            "181",
            "182",
            "183",
            "184",
            "185",
            "186",
            "187",
            "188",
            "189",
            "190",
            "191",
            "192",
            "193",
            "194",
            "195",
            "196",
            "197",
            "198",
            "199",
            "200",
            "201",
            "202",
            "203",
            "204",
            "205",
            "206",
            "207",
            "208",
            "209",
            "210",
            "211",
            "212",
            "213",
            "214",
            "215",
            "216",
            "217",
            "218",
            "219",
            "220",
            "221",
            "222",
            "223",
            "224",
            "225",
            "226",
            "227",
            "228",
            "229",
            "230",
            "231",
            "232",
            "233",
            "234",
            "235",
            "236",
            "237",
            "238",
            "239",
            "240",
            "241",
            "242",
            "243",
            "244",
            "245",
            "246",
            "247",
            "248",
            "249",
            "250",
            "251",
            "252",
            "253",
            "254",
            "255",
            "256",
            "257",
            "258",
            "259",
            "260",
            "261",
            "262",
            "263",
            "264",
            "265",
            "266",
            "267",
            "268",
            "269",
            "270",
            "271",
            "272",
            "273",
            "274",
            "275",
            "276",
            "277",
            "278",
            "279",
            "280",
            "281",
            "282",
            "283",
            "284",
            "285",
            "286",
            "287",
            "288",
            "289",
            "290",
            "291",
            "292",
            "293",
            "294",
            "295",
            "296",
            "297",
            "298",
            "299",
            "300",
            "301",
            "302",
            "303",
            "304",
            "305",
            "306",
            "307",
            "308",
            "309",
            "310",
            "311",
            "312",
            "313",
            "314",
            "315",
            "316",
            "317",
            "318",
            "319",
            "320",
            "321",
            "322",
            "323",
            "324",
            "325",
            "326",
            "327",
            "328",
            "329",
            "330",
            "331",
            "332",
            "333",
            "334",
            "335",
            "336",
            "337",
            "338",
            "339",
            "340",
            "341",
            "342",
            "343",
            "344",
            "345",
            "346",
            "347",
            "348",
            "349",
            "350",
            "351",
            "352",
            "353",
            "354",
            "355",
            "356",
            "357",
            "358",
            "359",
            "360",
            "361",
            "362",
            "363",
            "364",
            "365",
            "366",
            "367",
            "368",
            "369",
            "370",
            "371",
            "372",
            "373",
            "374",
            "375",
            "376",
            "377",
            "378",
            "379",
            "380",
            "381",
            "382",
            "383",
            "384",
            "385",
            "386",
            "387",
            "388",
            "389",
            "390",
            "391",
            "392",
            "393",
            "394",
            "395",
            "396",
            "397",
            "398",
            "399",
            "400",
            "401",
            "402",
            "403",
            "404",
            "405",
            "406",
            "407",
            "408",
            "409",
            "410",
            "411"
          ],
          "num": 411
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/jscomp/SourceFile.java b/src/com/google/javascript/jscomp/SourceFile.java\nnew file mode 100644\nindex 0000000..0c40f03\n--- /dev/null\n+++ b/src/com/google/javascript/jscomp/SourceFile.java\n@@ -0,0 +1,411 @@\n+/*\n+ * Copyright 2009 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.javascript.jscomp;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Charsets;\n+import com.google.common.io.CharStreams;\n+import com.google.common.io.Files;\n+\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.Reader;\n+import java.io.StringReader;\n+import java.nio.charset.Charset;\n+\n+/**\n+ * An abstract representation of a source file that provides access to\n+ * language-neutral features. The source file can be loaded from various\n+ * locations, such as from disk or from a preloaded string.\n+ *\n+ * @author nicksantos@google.com (Nick Santos)\n+ */\n+public abstract class SourceFile {\n+\n+  /** A JavaScript source code provider.  The value should\n+   * be cached so that the source text stays consistent throughout a single\n+   * compile. */\n+  public interface Generator {\n+    public String getCode();\n+  }\n+\n+  /**\n+   * Number of lines in the region returned by {@link #getRegion(int)}.\n+   * This length must be odd.\n+   */\n+  private static final int SOURCE_EXCERPT_REGION_LENGTH \u003d 5;\n+\n+  private final String fileName;\n+\n+  // The fileName may not always identify the original file - for example,\n+  // supersourced Java inputs, or Java inputs that come from Jar files. This\n+  // is an optional field that the creator of an AST or SourceFile can set.\n+  // It could be a path to the original file, or in case this SourceFile came\n+  // from a Jar, it could be the path to the Jar.\n+  private String originalPath \u003d null;\n+\n+  // Remember the offset for the previous line query.  If the next line\n+  // is after this point, we can start scanning at the previous offset rather\n+  // than starting at the beginning of the file.\n+  private int lastOffset;\n+  private int lastLine;\n+\n+  private String code \u003d null;\n+\n+  /**\n+   * Construct a new abstract source file.\n+   *\n+   * @param fileName The file name of the source file. It does not necessarily\n+   *     need to correspond to a real path. But it should be unique. Will\n+   *     appear in warning messages emitted by the compiler.\n+   */\n+  SourceFile(String fileName) {\n+    this.fileName \u003d fileName;\n+    // Starting point: offset 0 is at line 1.\n+    this.lastOffset \u003d 0;\n+    this.lastLine \u003d 1;\n+  }\n+\n+  //////////////////////////////////////////////////////////////////////////////\n+  // Implementation\n+\n+  /**\n+   * Gets all the code in this source file.\n+   * @throws IOException\n+   */\n+  public String getCode() throws IOException {\n+    return code;\n+  }\n+\n+  /**\n+   * Gets a reader for the code in this source file.\n+   */\n+  public Reader getCodeReader() throws IOException {\n+    return new StringReader(getCode());\n+  }\n+\n+  @VisibleForTesting\n+  String getCodeNoCache() {\n+    return code;\n+  }\n+\n+  private void setCode(String sourceCode) {\n+    code \u003d sourceCode;\n+  }\n+\n+  public String getOriginalPath() {\n+    return originalPath !\u003d null ? originalPath : fileName;\n+  }\n+\n+  public void setOriginalPath(String originalPath) {\n+    this.originalPath \u003d originalPath;\n+  }\n+\n+  // For SourceFile types which cache source code that can be regenerated\n+  // easily, flush the cache.  We maintain the cache mostly to speed up\n+  // generating source when displaying error messages, so dumping the file\n+  // contents after the compile is a fine thing to do.\n+  public void clearCachedSource() {\n+    // By default, do nothing.  Not all kinds of SourceFiles can regenerate\n+    // code.\n+  }\n+\n+  boolean hasSourceInMemory() {\n+    return code !\u003d null;\n+  }\n+\n+  /** Returns a unique name for the source file. */\n+  public String getName() {\n+    return fileName;\n+  }\n+\n+  /**\n+   * Gets the source line for the indicated line number.\n+   *\n+   * @param lineNumber the line number, 1 being the first line of the file.\n+   * @return The line indicated. Does not include the newline at the end\n+   *     of the file. Returns {@code null} if it does not exist,\n+   *     or if there was an IO exception.\n+   */\n+  public String getLine(int lineNumber) {\n+    String js \u003d \"\";\n+    try {\n+      // NOTE(nicksantos): Right now, this is optimized for few warnings.\n+      // This is probably the right trade-off, but will be slow if there\n+      // are lots of warnings in one file.\n+      js \u003d getCode();\n+    } catch (IOException e) {\n+      return null;\n+    }\n+\n+    int pos \u003d 0;\n+    int startLine \u003d 1;\n+\n+    // If we\u0027ve saved a previous offset and it\u0027s for a line less than the\n+    // one we\u0027re searching for, then start at that point.\n+    if (lineNumber \u003e\u003d lastLine) {\n+      pos \u003d lastOffset;\n+      startLine \u003d lastLine;\n+    }\n+\n+    for (int n \u003d startLine; n \u003c lineNumber; n++) {\n+      int nextpos \u003d js.indexOf(\u0027\\n\u0027, pos);\n+      if (nextpos \u003d\u003d -1) {\n+        return null;\n+      }\n+      pos \u003d nextpos + 1;\n+    }\n+\n+    // Remember this offset for the next search we do.\n+    lastOffset \u003d pos;\n+    lastLine \u003d lineNumber;\n+\n+    return (js.indexOf(\u0027\\n\u0027, pos) \u003d\u003d -1) ? null :\n+        js.substring(pos, js.indexOf(\u0027\\n\u0027, pos));\n+  }\n+\n+  /**\n+   * Get a region around the indicated line number. The exact definition of a\n+   * region is implementation specific, but it must contain the line indicated\n+   * by the line number. A region must not start or end by a carriage return.\n+   *\n+   * @param lineNumber the line number, 1 being the first line of the file.\n+   * @return The line indicated. Returns {@code null} if it does not exist,\n+   *     or if there was an IO exception.\n+   */\n+  public Region getRegion(int lineNumber) {\n+    String js \u003d \"\";\n+    try {\n+      js \u003d getCode();\n+    } catch (IOException e) {\n+      return null;\n+    }\n+    int pos \u003d 0;\n+    int startLine \u003d Math.max(1,\n+        lineNumber - (SOURCE_EXCERPT_REGION_LENGTH + 1) / 2 + 1);\n+    for (int n \u003d 1; n \u003c startLine; n++) {\n+      int nextpos \u003d js.indexOf(\u0027\\n\u0027, pos);\n+      if (nextpos \u003d\u003d -1) {\n+        break;\n+      }\n+      pos \u003d nextpos + 1;\n+    }\n+    int end \u003d pos;\n+    int endLine \u003d startLine;\n+    for (int n \u003d 0; n \u003c SOURCE_EXCERPT_REGION_LENGTH; n++, endLine++) {\n+      end \u003d js.indexOf(\u0027\\n\u0027, end);\n+      if (end \u003d\u003d -1) {\n+        break;\n+      }\n+      end++;\n+    }\n+    if (lineNumber \u003e\u003d endLine) {\n+      return null;\n+    }\n+    if (end \u003d\u003d -1) {\n+      int last \u003d js.length() - 1;\n+      if (js.charAt(last) \u003d\u003d \u0027\\n\u0027) {\n+        return\n+            new SimpleRegion(startLine, endLine, js.substring(pos, last));\n+      } else {\n+        return new SimpleRegion(startLine, endLine, js.substring(pos));\n+      }\n+    } else {\n+      return new SimpleRegion(startLine, endLine, js.substring(pos, end));\n+    }\n+  }\n+\n+  public static SourceFile fromFile(String fileName, Charset c) {\n+    return fromFile(new File(fileName), c);\n+  }\n+\n+  public static SourceFile fromFile(String fileName) {\n+    return fromFile(new File(fileName));\n+  }\n+\n+  public static SourceFile fromFile(File file, Charset c) {\n+    return new OnDisk(file, c);\n+  }\n+\n+  public static SourceFile fromFile(File file) {\n+    return new OnDisk(file);\n+  }\n+\n+  public static SourceFile fromCode(String fileName, String code) {\n+    return new Preloaded(fileName, code);\n+  }\n+\n+  public static SourceFile fromCode(String fileName,\n+      String originalPath, String code) {\n+    return new Preloaded(fileName, originalPath, code);\n+  }\n+\n+  public static SourceFile fromInputStream(String fileName, InputStream s)\n+      throws IOException {\n+    return fromCode(fileName,\n+        CharStreams.toString(new InputStreamReader(s, Charsets.UTF_8)));\n+  }\n+\n+  public static SourceFile fromInputStream(String fileName,\n+      String originalPath, InputStream s) throws IOException {\n+    return fromCode(fileName, originalPath,\n+        CharStreams.toString(new InputStreamReader(s, Charsets.UTF_8)));\n+  }\n+\n+  public static SourceFile fromReader(String fileName, Reader r)\n+      throws IOException {\n+    return fromCode(fileName, CharStreams.toString(r));\n+  }\n+\n+  public static SourceFile fromGenerator(String fileName,\n+      Generator generator) {\n+    return new Generated(fileName, generator);\n+  }\n+\n+\n+  //////////////////////////////////////////////////////////////////////////////\n+  // Implementations\n+\n+  /**\n+   * A source file where the code has been preloaded.\n+   */\n+  static class Preloaded extends SourceFile {\n+\n+    Preloaded(String fileName, String code) {\n+      this(fileName, fileName, code);\n+    }\n+\n+    Preloaded(String fileName, String originalPath, String code) {\n+      super(fileName);\n+      super.setOriginalPath(originalPath);\n+      super.setCode(code);\n+    }\n+  }\n+\n+  /**\n+   * A source file where the code will be dynamically generated\n+   * from the injected interface.\n+   */\n+  static class Generated extends SourceFile {\n+    private final Generator generator;\n+\n+    // Not private, so that LazyInput can extend it.\n+    Generated(String fileName, Generator generator) {\n+      super(fileName);\n+      this.generator \u003d generator;\n+    }\n+\n+    @Override\n+    public synchronized String getCode() throws IOException {\n+      String cachedCode \u003d super.getCode();\n+\n+      if (cachedCode \u003d\u003d null) {\n+        cachedCode \u003d generator.getCode();\n+        super.setCode(cachedCode);\n+      }\n+      return cachedCode;\n+    }\n+\n+    // Clear out the generated code when finished with a compile; we can\n+    // regenerate it if we ever need it again.\n+    @Override\n+    public void clearCachedSource() {\n+      super.setCode(null);\n+    }\n+  }\n+\n+  /**\n+   * A source file where the code is only read into memory if absolutely\n+   * necessary. We will try to delay loading the code into memory as long as\n+   * possible.\n+   */\n+  static class OnDisk extends SourceFile {\n+    private final File file;\n+\n+    // This is stored as a String, but passed in and out as a Charset so that\n+    // we can serialize the class.\n+    // Default input file format for JSCompiler has always been UTF_8.\n+    protected String inputCharset \u003d Charsets.UTF_8.name();\n+\n+    OnDisk(File file, Charset c) {\n+      this(file);\n+      if (c !\u003d null) {\n+        this.setCharset(c);\n+      }\n+    }\n+\n+    // No Charset provided?\n+    OnDisk(File file) {\n+      super(file.getPath());\n+      this.file \u003d file;\n+    }\n+\n+    @Override\n+    public synchronized String getCode() throws IOException {\n+      String cachedCode \u003d super.getCode();\n+\n+      if (cachedCode \u003d\u003d null) {\n+        cachedCode \u003d Files.toString(file, this.getCharset());\n+        super.setCode(cachedCode);\n+      }\n+      return cachedCode;\n+    }\n+\n+    /**\n+     * Gets a reader for the code in this source file.\n+     */\n+    @Override\n+    public Reader getCodeReader() throws IOException {\n+      if (hasSourceInMemory()) {\n+        return super.getCodeReader();\n+      } else {\n+        // If we haven\u0027t pulled the code into memory yet, don\u0027t.\n+        return new FileReader(file);\n+      }\n+    }\n+\n+    // Flush the cached code after the compile; we can read it off disk\n+    // if we need it again.\n+    @Override\n+    public void clearCachedSource() {\n+      super.setCode(null);\n+    }\n+\n+    /**\n+     * Store the Charset specification as the string version of the name,\n+     * rather than the Charset itself.  This allows us to serialize the\n+     * SourceFile class.\n+     * @param c charset to use when reading the input.\n+     */\n+    public void setCharset(Charset c) {\n+      inputCharset \u003d c.name();\n+    }\n+\n+    /**\n+     * Get the Charset specifying how we\u0027re supposed to read the file\n+     * in off disk and into UTF-16.  This is stored as a strong to allow\n+     * SourceFile to be serialized.\n+     * @return Charset object representing charset to use.\n+     */\n+    public Charset getCharset() {\n+      return Charset.forName(inputCharset);\n+    }\n+  }\n+}\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "MarkerAnnotation [10884,10893]"
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/jscomp/deps/DependencyInfo.java",
        "src/com/google/javascript/jscomp/deps/DependencyInfo.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [
            "com.google.javascript.jscomp.deps.DependencyInfo:getProvides:[]:Collection\u003cString\u003e",
            "com.google.javascript.jscomp.deps.DependencyInfo:getPathRelativeToClosureBase:[]:String",
            "com.google.javascript.jscomp.deps.DependencyInfo:getRequires:[]:Collection\u003cString\u003e",
            "com.google.javascript.jscomp.deps.DependencyInfo:getName:[]:String"
          ],
          "num": 4
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "-1"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "35",
            "36",
            "37",
            "38",
            "39"
          ],
          "num": 39
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/jscomp/deps/DependencyInfo.java b/src/com/google/javascript/jscomp/deps/DependencyInfo.java\nnew file mode 100644\nindex 0000000..52e04cd\n--- /dev/null\n+++ b/src/com/google/javascript/jscomp/deps/DependencyInfo.java\n@@ -0,0 +1,39 @@\n+/*\n+ * Copyright 2009 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.javascript.jscomp.deps;\n+\n+import java.util.Collection;\n+\n+/**\n+ * A data structure for JS dependency information for a single .js file.\n+ *\n+ * @author agrieve@google.com (Andrew Grieve)\n+ */\n+public interface DependencyInfo {\n+\n+  /** Gets the unique name / path of this file. */\n+  public String getName();\n+\n+  /** Gets the path of this file relative to Closure\u0027s base.js file. */\n+  public String getPathRelativeToClosureBase();\n+\n+  /** Gets the symbols provided by this file. */\n+  public Collection\u003cString\u003e getProvides();\n+\n+  /** Gets the symbols required by this file. */\n+  public Collection\u003cString\u003e getRequires();\n+}\n",
      "operations": [
        {
          "type": "delete-tree",
          "from": "ImportDeclaration [669,698]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ImportDeclaration [699,721]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/jscomp/deps/DepsFileParser.java",
        "src/com/google/javascript/jscomp/deps/DepsFileParser.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [
            "com.google.javascript.jscomp.deps.DepsFileParser:parseFileReader:[String filePath, Reader reader]:List\u003cDependencyInfo\u003e",
            "com.google.javascript.jscomp.deps.DepsFileParser:parseLine:[String line]:boolean",
            "com.google.javascript.jscomp.deps.DepsFileParser:parseFile:[String filePath]:List\u003cDependencyInfo\u003e",
            "com.google.javascript.jscomp.deps.DepsFileParser:parseFile:[String filePath, String fileContents]:List\u003cDependencyInfo\u003e",
            "com.google.javascript.jscomp.deps.DepsFileParser:DepsFileParser:[ErrorManager errorManager]:null"
          ],
          "num": 5
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "-1"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "35",
            "36",
            "37",
            "38",
            "39",
            "40",
            "41",
            "42",
            "43",
            "44",
            "45",
            "46",
            "47",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57",
            "58",
            "59",
            "60",
            "61",
            "62",
            "63",
            "64",
            "65",
            "66",
            "67",
            "68",
            "69",
            "70",
            "71",
            "72",
            "73",
            "74",
            "75",
            "76",
            "77",
            "78",
            "79",
            "80",
            "81",
            "82",
            "83",
            "84",
            "85",
            "86",
            "87",
            "88",
            "89",
            "90",
            "91",
            "92",
            "93",
            "94",
            "95",
            "96",
            "97",
            "98",
            "99",
            "100",
            "101",
            "102",
            "103",
            "104",
            "105",
            "106",
            "107",
            "108",
            "109",
            "110",
            "111",
            "112",
            "113",
            "114",
            "115",
            "116",
            "117",
            "118",
            "119",
            "120",
            "121",
            "122",
            "123",
            "124",
            "125",
            "126",
            "127",
            "128",
            "129",
            "130",
            "131",
            "132",
            "133",
            "134",
            "135",
            "136",
            "137",
            "138",
            "139",
            "140",
            "141",
            "142",
            "143",
            "144",
            "145",
            "146",
            "147",
            "148",
            "149",
            "150",
            "151",
            "152",
            "153",
            "154",
            "155",
            "156",
            "157",
            "158",
            "159"
          ],
          "num": 159
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/jscomp/deps/DepsFileParser.java b/src/com/google/javascript/jscomp/deps/DepsFileParser.java\nnew file mode 100644\nindex 0000000..ef1a9d7\n--- /dev/null\n+++ b/src/com/google/javascript/jscomp/deps/DepsFileParser.java\n@@ -0,0 +1,159 @@\n+/*\n+ * Copyright 2008 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.javascript.jscomp.deps;\n+\n+import com.google.common.base.CharMatcher;\n+import com.google.common.collect.Lists;\n+import com.google.javascript.jscomp.ErrorManager;\n+\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.io.Reader;\n+import java.io.StringReader;\n+import java.util.List;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * A parser that can extract dependency information from existing deps.js files.\n+ *\n+ * \u003cp\u003eSee //javascript/closure/deps.js for an example file.\u003c/p\u003e\n+ *\n+ * @author agrieve@google.com (Andrew Grieve)\n+ */\n+public class DepsFileParser extends JsFileLineParser {\n+\n+  private static Logger logger \u003d Logger.getLogger(DepsFileParser.class.getName());\n+\n+  /**\n+   * Pattern for matching JavaScript string literals. The group is:\n+   * goog.addDependency({1});\n+   */\n+  private final Matcher depMatcher \u003d\n+      Pattern.compile(\"\\\\s*goog.addDependency\\\\((.*)\\\\);?\\\\s*\").matcher(\"\");\n+\n+  /**\n+   * Pattern for matching the args of a goog.addDependency(). The group is:\n+   * goog.addDependency({1}, {2}, {3});\n+   */\n+  private final Matcher depArgsMatch \u003d\n+      Pattern.compile(\"\\\\s*([^,]*), (\\\\[[^\\\\]]*\\\\]), (\\\\[[^\\\\]]*\\\\])\\\\s*\").matcher(\"\");\n+\n+  /**\n+   * The dependency information extracted from the current file.\n+   */\n+  private List\u003cDependencyInfo\u003e depInfos;\n+\n+  /**\n+   * Constructor\n+   *\n+   * @param errorManager Handles parse errors.\n+   */\n+  public DepsFileParser(ErrorManager errorManager) {\n+    super(errorManager);\n+  }\n+\n+  /**\n+   * Parses the given file and returns a list of dependency information that it\n+   * contained.\n+   *\n+   * @param filePath Path to the file to parse.\n+   * @return A list of DependencyInfo objects.\n+   * @throws IOException Thrown if the file could not be read.\n+   */\n+  public List\u003cDependencyInfo\u003e parseFile(String filePath) throws IOException {\n+    return parseFileReader(filePath, new FileReader(filePath));\n+  }\n+\n+  /**\n+   * Parses the given file and returns a list of dependency information that it\n+   * contained.\n+   * It uses the passed in fileContents instead of reading the file.\n+   *\n+   * @param filePath Path to the file to parse.\n+   * @param fileContents The contents to parse.\n+   * @return A list of DependencyInfo objects.\n+   */\n+  public List\u003cDependencyInfo\u003e parseFile(String filePath, String fileContents) {\n+    return parseFileReader(filePath, new StringReader(fileContents));\n+  }\n+\n+\n+  /**\n+   * Parses the file from the given reader and returns a list of\n+   * dependency information that it contained.\n+   *\n+   * @param filePath Path to the file to parse.\n+   * @param reader A reader for the file.\n+   * @return A list of DependencyInfo objects.\n+   */\n+  public List\u003cDependencyInfo\u003e parseFileReader(String filePath, Reader reader) {\n+    depInfos \u003d Lists.newArrayList();\n+    logger.info(\"Parsing Dep: \" + filePath);\n+    doParse(filePath, reader);\n+    return depInfos;\n+  }\n+\n+  /**\n+   * Extracts dependency information from lines that look like\n+   *   goog.addDependency(\u0027pathRelativeToClosure\u0027, [\u0027provides\u0027], [\u0027requires\u0027]);\n+   * Adds the dependencies to depInfos.\n+   *\n+   * @throws ParseException Thrown if the given line has a malformed\n+   *     goog.addDependency().\n+   */\n+  @Override\n+  protected boolean parseLine(String line) throws ParseException {\n+    boolean hasDependencies \u003d false;\n+\n+    // Quick sanity check that will catch most cases. This is a performance\n+    // win for people with a lot of JS.\n+    if (line.indexOf(\"addDependency\") !\u003d -1) {\n+      depMatcher.reset(line);\n+      // See if the line looks like: goog.addDependency(...)\n+      if (depMatcher.matches()) {\n+        hasDependencies \u003d true;\n+        String addDependencyParams \u003d depMatcher.group(1);\n+        depArgsMatch.reset(addDependencyParams);\n+        // Extract the three parameters.\n+        if (!depArgsMatch.matches()) {\n+          // Although we could recover, we mark this as fatal since there should\n+          // not be problems with generated deps.js files.\n+          throw new ParseException(\"Invalid arguments to goog.addDependency(). Found: \"\n+              + addDependencyParams, true);\n+        }\n+        // Parse the file path.\n+        String path \u003d parseJsString(depArgsMatch.group(1));\n+        DependencyInfo depInfo \u003d new SimpleDependencyInfo(path, filePath,\n+            // Parse the provides.\n+            parseJsStringArray(depArgsMatch.group(2)),\n+            // Parse the requires.\n+            parseJsStringArray(depArgsMatch.group(3)));\n+\n+        if (logger.isLoggable(Level.FINE)) {\n+          logger.fine(\"Found dep: \" + depInfo);\n+        }\n+        depInfos.add(depInfo);\n+      }\n+    }\n+\n+    return !shortcutMode || hasDependencies ||\n+        CharMatcher.WHITESPACE.matchesAllOf(line);\n+  }\n+}\n",
      "operations": [
        {
          "type": "delete-tree",
          "from": "ImportDeclaration [683,722]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ImportDeclaration [763,797]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ImportDeclaration [849,869]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/jscomp/deps/JsFileLineParser.java",
        "src/com/google/javascript/jscomp/deps/JsFileLineParser.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [
            "com.google.javascript.jscomp.deps.JsFileLineParser\\$ParseException:isFatal:[]:boolean",
            "com.google.javascript.jscomp.deps.JsFileLineParser\\$ParseException:ParseException:[String message, boolean fatal]:null",
            "com.google.javascript.jscomp.deps.JsFileLineParser:didParseSucceed:[]:boolean",
            "com.google.javascript.jscomp.deps.JsFileLineParser:parseLine:[String line]:boolean",
            "com.google.javascript.jscomp.deps.JsFileLineParser:setShortcutMode:[boolean mode]:void",
            "com.google.javascript.jscomp.deps.JsFileLineParser:parseJsStringArray:[String input]:List\u003cString\u003e",
            "com.google.javascript.jscomp.deps.JsFileLineParser:doParse:[String filePath, Reader fileContents]:void",
            "com.google.javascript.jscomp.deps.JsFileLineParser:parseJsString:[String jsStringLiteral]:String",
            "com.google.javascript.jscomp.deps.JsFileLineParser:JsFileLineParser:[ErrorManager errorManager]:null"
          ],
          "num": 9
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "-1"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "35",
            "36",
            "37",
            "38",
            "39",
            "40",
            "41",
            "42",
            "43",
            "44",
            "45",
            "46",
            "47",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57",
            "58",
            "59",
            "60",
            "61",
            "62",
            "63",
            "64",
            "65",
            "66",
            "67",
            "68",
            "69",
            "70",
            "71",
            "72",
            "73",
            "74",
            "75",
            "76",
            "77",
            "78",
            "79",
            "80",
            "81",
            "82",
            "83",
            "84",
            "85",
            "86",
            "87",
            "88",
            "89",
            "90",
            "91",
            "92",
            "93",
            "94",
            "95",
            "96",
            "97",
            "98",
            "99",
            "100",
            "101",
            "102",
            "103",
            "104",
            "105",
            "106",
            "107",
            "108",
            "109",
            "110",
            "111",
            "112",
            "113",
            "114",
            "115",
            "116",
            "117",
            "118",
            "119",
            "120",
            "121",
            "122",
            "123",
            "124",
            "125",
            "126",
            "127",
            "128",
            "129",
            "130",
            "131",
            "132",
            "133",
            "134",
            "135",
            "136",
            "137",
            "138",
            "139",
            "140",
            "141",
            "142",
            "143",
            "144",
            "145",
            "146",
            "147",
            "148",
            "149",
            "150",
            "151",
            "152",
            "153",
            "154",
            "155",
            "156",
            "157",
            "158",
            "159",
            "160",
            "161",
            "162",
            "163",
            "164",
            "165",
            "166",
            "167",
            "168",
            "169",
            "170",
            "171",
            "172",
            "173",
            "174",
            "175",
            "176",
            "177",
            "178",
            "179",
            "180",
            "181",
            "182",
            "183",
            "184",
            "185",
            "186",
            "187",
            "188",
            "189",
            "190",
            "191",
            "192",
            "193",
            "194",
            "195",
            "196",
            "197",
            "198",
            "199",
            "200",
            "201",
            "202",
            "203",
            "204",
            "205",
            "206",
            "207",
            "208",
            "209",
            "210",
            "211",
            "212",
            "213",
            "214",
            "215",
            "216",
            "217",
            "218",
            "219",
            "220",
            "221",
            "222",
            "223",
            "224",
            "225",
            "226",
            "227",
            "228",
            "229",
            "230",
            "231",
            "232",
            "233",
            "234",
            "235",
            "236",
            "237",
            "238",
            "239",
            "240",
            "241",
            "242",
            "243",
            "244",
            "245",
            "246",
            "247",
            "248",
            "249",
            "250",
            "251",
            "252",
            "253",
            "254",
            "255",
            "256",
            "257",
            "258",
            "259",
            "260",
            "261"
          ],
          "num": 261
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/jscomp/deps/JsFileLineParser.java b/src/com/google/javascript/jscomp/deps/JsFileLineParser.java\nnew file mode 100644\nindex 0000000..06c9c1a\n--- /dev/null\n+++ b/src/com/google/javascript/jscomp/deps/JsFileLineParser.java\n@@ -0,0 +1,261 @@\n+/*\n+ * Copyright 2008 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.javascript.jscomp.deps;\n+\n+import com.google.common.collect.Lists;\n+import com.google.javascript.jscomp.CheckLevel;\n+import com.google.javascript.jscomp.DiagnosticType;\n+import com.google.javascript.jscomp.ErrorManager;\n+import com.google.javascript.jscomp.JSError;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.Reader;\n+import java.util.List;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Base class for classes that parse Javascript sources on a line-by-line basis. Strips comments\n+ * from files and records all parsing errors.\n+ *\n+ * @author agrieve@google.com (Andrew Grieve)\n+ */\n+public abstract class JsFileLineParser {\n+\n+  static final DiagnosticType PARSE_WARNING \u003d DiagnosticType.warning(\n+      \"DEPS_PARSE_WARNING\", \"{0}\\n{1}\");\n+  static final DiagnosticType PARSE_ERROR \u003d DiagnosticType.error(\n+      \"DEPS_PARSE_ERROR\", \"{0}\\n{1}\");\n+\n+  boolean shortcutMode \u003d false;\n+\n+  /**\n+   * Thrown by base classes to signify a problem parsing a line.\n+   */\n+  static class ParseException extends Exception {\n+    public static final long serialVersionUID \u003d 1L;\n+    private boolean fatal;\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param message A description of what caused the exception.\n+     * @param fatal Whether the exception is recoverable.\n+     */\n+    public ParseException(String message, boolean fatal) {\n+      super(message);\n+      this.fatal \u003d fatal;\n+    }\n+\n+    public boolean isFatal() {\n+      return fatal;\n+    }\n+  }\n+\n+  /** Pattern for matching JavaScript string literals. */\n+  private static final Pattern STRING_LITERAL_PATTERN \u003d Pattern.compile(\n+      \"\\\\s*(?:\u0027((?:\\\\\\\\\u0027|[^\u0027])*?)\u0027|\\\"((?:\\\\\\\\\\\"|[^\\\"])*?)\\\")\\\\s*\");\n+\n+  /** Matcher used in the parsing string literals. */\n+  private Matcher valueMatcher \u003d STRING_LITERAL_PATTERN.matcher(\"\");\n+\n+  /** Path of the file currently being parsed. */\n+  String filePath;\n+  /** The line number of the line currently being parsed. */\n+  int lineNum;\n+  /** Handles error messages. */\n+  ErrorManager errorManager;\n+  /** Did our parse succeed. */\n+  boolean parseSucceeded;\n+\n+  /**\n+   * Constructor.\n+   *\n+   * @param errorManager Parse error handler.\n+   */\n+  public JsFileLineParser(ErrorManager errorManager) {\n+    this.errorManager \u003d errorManager;\n+  }\n+\n+  /**\n+   * In shortcut mode, the file line parser can stop reading early if\n+   * it thinks it found enough information.\n+   *\n+   * For example, many parsers assume that dependency information never\n+   * shows up after \"real\" code.\n+   */\n+  public void setShortcutMode(boolean mode) {\n+    this.shortcutMode \u003d mode;\n+  }\n+\n+  public boolean didParseSucceed() {\n+    return parseSucceeded;\n+  }\n+\n+  /**\n+   * Performs the line-by-line parsing of the given fileContents. This method\n+   * strips out Javascript comments and then uses the abstract parseLine()\n+   * method to do the line parsing.\n+   *\n+   * @param filePath The path to the file being parsed. Used for reporting parse\n+   *     exceptions.\n+   * @param fileContents A reader for the contents of the file.\n+   */\n+  void doParse(String filePath, Reader fileContents) {\n+    this.filePath \u003d filePath;\n+    parseSucceeded \u003d true;\n+\n+    BufferedReader lineBuffer \u003d new BufferedReader(fileContents);\n+\n+    // Parse all lines.\n+    String line \u003d null;\n+    lineNum \u003d 0;\n+    boolean inMultilineComment \u003d false;\n+\n+    try {\n+      while (null !\u003d (line \u003d lineBuffer.readLine())) {\n+        ++lineNum;\n+        try {\n+          String revisedLine \u003d line;\n+          if (inMultilineComment) {\n+            int endOfComment \u003d revisedLine.indexOf(\"*/\");\n+            if (endOfComment !\u003d -1) {\n+              revisedLine \u003d revisedLine.substring(endOfComment + 2);\n+              inMultilineComment \u003d false;\n+            } else {\n+              revisedLine \u003d \"\";\n+            }\n+          }\n+\n+          if (!inMultilineComment) {\n+            while (true) {\n+              int startOfLineComment \u003d revisedLine.indexOf(\"//\");\n+              int startOfMultilineComment \u003d revisedLine.indexOf(\"/*\");\n+              if (startOfLineComment !\u003d -1 \u0026\u0026\n+                  (startOfMultilineComment \u003d\u003d -1 ||\n+                   startOfLineComment \u003c startOfMultilineComment)) {\n+                revisedLine \u003d revisedLine.substring(0, startOfLineComment);\n+                break;\n+              } else if (startOfMultilineComment !\u003d -1) {\n+                int endOfMultilineComment \u003d revisedLine.indexOf(\"*/\",\n+                    startOfMultilineComment + 2);\n+                if (endOfMultilineComment \u003d\u003d -1) {\n+                  revisedLine \u003d revisedLine.substring(\n+                      0, startOfMultilineComment);\n+                  inMultilineComment \u003d true;\n+                  break;\n+                } else {\n+                  revisedLine \u003d\n+                      revisedLine.substring(0, startOfMultilineComment) +\n+                      revisedLine.substring(endOfMultilineComment + 2);\n+                }\n+              } else {\n+                break;\n+              }\n+            }\n+          }\n+\n+          if (!revisedLine.isEmpty()) {\n+            // This check for shortcut mode should be redundant, but\n+            // it\u0027s done for safety reasons.\n+            if (!parseLine(revisedLine) \u0026\u0026 shortcutMode) {\n+              break;\n+            }\n+          }\n+        } catch (ParseException e) {\n+          // Inform the error handler of the exception.\n+          errorManager.report(\n+              e.isFatal() ? CheckLevel.ERROR : CheckLevel.WARNING,\n+              JSError.make(filePath, lineNum, 0 /* char offset */,\n+                  e.isFatal() ? PARSE_ERROR : PARSE_WARNING,\n+                  e.getMessage(), line));\n+          parseSucceeded \u003d parseSucceeded \u0026\u0026 !e.isFatal();\n+        }\n+      }\n+    } catch (IOException e) {\n+      errorManager.report(CheckLevel.ERROR,\n+          JSError.make(filePath, 0, 0 /* char offset */,\n+              PARSE_ERROR, \"Error reading file: \" + filePath));\n+      parseSucceeded \u003d false;\n+    }\n+  }\n+\n+  /**\n+   * Called for each line of the file being parsed.\n+   *\n+   * @param line The line to parse.\n+   * @return true to keep going, false otherwise.\n+   * @throws ParseException Should be thrown to signify a problem with the line.\n+   */\n+  abstract boolean parseLine(String line) throws ParseException;\n+\n+  /**\n+   * Parses a JS string literal.\n+   *\n+   * @param jsStringLiteral The literal. Must look like \"asdf\" or \u0027asdf\u0027\n+   * @throws ParseException Thrown if there is a string literal that cannot be\n+   *     parsed.\n+   */\n+  String parseJsString(String jsStringLiteral) throws ParseException {\n+    valueMatcher.reset(jsStringLiteral);\n+    if (!valueMatcher.matches()) {\n+      throw new ParseException(\"Syntax error in JS String literal\", true /* fatal */);\n+    }\n+    return valueMatcher.group(1) !\u003d null ? valueMatcher.group(1) : valueMatcher.group(2);\n+  }\n+\n+  /**\n+   * Parses a Javascript array of string literals. (eg: [\u0027a\u0027, \u0027b\u0027, \"c\"]).\n+   * @param input A string containing an Javascript array of string literals.\n+   * @return A list of parsed string literals.\n+   * @throws ParseException Thrown if there is a syntax error with the input.\n+   */\n+  List\u003cString\u003e parseJsStringArray(String input)\n+      throws ParseException {\n+    List\u003cString\u003e results \u003d Lists.newArrayList();\n+    int indexStart \u003d input.indexOf(\u0027[\u0027);\n+    int indexEnd \u003d input.lastIndexOf(\u0027]\u0027);\n+    if ((indexStart \u003d\u003d -1) || (indexEnd \u003d\u003d -1)) {\n+      throw new ParseException(\"Syntax error when parsing JS array\", true /* fatal */);\n+    }\n+    String innerValues \u003d input.substring(indexStart + 1, indexEnd);\n+\n+    if (!innerValues.trim().isEmpty()) {\n+      valueMatcher.reset(innerValues);\n+      for (;;) {\n+        // Parse the current string literal.\n+        if (!valueMatcher.lookingAt()) {\n+          throw new ParseException(\"Syntax error in JS String literal\", true /* fatal */);\n+        }\n+        // Add it to the results.\n+        results.add(valueMatcher.group(1) !\u003d null ?\n+            valueMatcher.group(1) : valueMatcher.group(2));\n+        if (valueMatcher.hitEnd()) {\n+          break;\n+        }\n+        // Ensure there is a comma after the value.\n+        if (innerValues.charAt(valueMatcher.end()) !\u003d \u0027,\u0027) {\n+          throw new ParseException(\"Missing comma in string array\", true /* fatal */);\n+        }\n+        // Move to the next value.\n+        valueMatcher.region(valueMatcher.end() + 1, valueMatcher.regionEnd());\n+      }\n+    }\n+    return results;\n+  }\n+}\n",
      "operations": [
        {
          "type": "delete-tree",
          "from": "ImportDeclaration [958,986]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/jscomp/deps/JsFileParser.java",
        "src/com/google/javascript/jscomp/deps/JsFileParser.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [
            "com.google.javascript.jscomp.deps.JsFileParser:JsFileParser:[ErrorManager errorManager]:null",
            "com.google.javascript.jscomp.deps.JsFileParser:parseLine:[String line]:boolean",
            "com.google.javascript.jscomp.deps.JsFileParser:parseFile:[String filePath, String closureRelativePath, String fileContents]:DependencyInfo",
            "com.google.javascript.jscomp.deps.JsFileParser:parseFile:[String filePath, String closureRelativePath]:DependencyInfo",
            "com.google.javascript.jscomp.deps.JsFileParser:parseReader:[String filePath, String closureRelativePath, Reader fileContents]:DependencyInfo"
          ],
          "num": 5
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "-1"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "35",
            "36",
            "37",
            "38",
            "39",
            "40",
            "41",
            "42",
            "43",
            "44",
            "45",
            "46",
            "47",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57",
            "58",
            "59",
            "60",
            "61",
            "62",
            "63",
            "64",
            "65",
            "66",
            "67",
            "68",
            "69",
            "70",
            "71",
            "72",
            "73",
            "74",
            "75",
            "76",
            "77",
            "78",
            "79",
            "80",
            "81",
            "82",
            "83",
            "84",
            "85",
            "86",
            "87",
            "88",
            "89",
            "90",
            "91",
            "92",
            "93",
            "94",
            "95",
            "96",
            "97",
            "98",
            "99",
            "100",
            "101",
            "102",
            "103",
            "104",
            "105",
            "106",
            "107",
            "108",
            "109",
            "110",
            "111",
            "112",
            "113",
            "114",
            "115",
            "116",
            "117",
            "118",
            "119",
            "120",
            "121",
            "122",
            "123",
            "124",
            "125",
            "126",
            "127",
            "128",
            "129",
            "130",
            "131",
            "132",
            "133",
            "134",
            "135",
            "136",
            "137",
            "138",
            "139",
            "140",
            "141",
            "142",
            "143",
            "144",
            "145",
            "146"
          ],
          "num": 146
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/jscomp/deps/JsFileParser.java b/src/com/google/javascript/jscomp/deps/JsFileParser.java\nnew file mode 100644\nindex 0000000..0f8ab48\n--- /dev/null\n+++ b/src/com/google/javascript/jscomp/deps/JsFileParser.java\n@@ -0,0 +1,146 @@\n+/*\n+ * Copyright 2008 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.javascript.jscomp.deps;\n+\n+import com.google.common.base.CharMatcher;\n+import com.google.common.collect.Lists;\n+import com.google.javascript.jscomp.ErrorManager;\n+\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.io.Reader;\n+import java.io.StringReader;\n+import java.util.List;\n+import java.util.logging.Logger;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * A parser that can extract goog.require() and goog.provide() dependency\n+ * information from a .js file.\n+ *\n+ * @author agrieve@google.com (Andrew Grieve)\n+ */\n+public class JsFileParser extends JsFileLineParser {\n+\n+  private static Logger logger \u003d Logger.getLogger(JsFileParser.class.getName());\n+\n+  /** Pattern for matching goog.provide(*) and goog.require(*). */\n+  private static final Pattern GOOG_PROVIDE_REQUIRE_PATTERN \u003d Pattern.compile(\n+      \"(?:^|;)\\\\s*goog\\\\.(provide|require)\\\\s*\\\\((.*?)\\\\)\");\n+\n+  /** Matchers used in the parsing. */\n+  private Matcher googMatcher \u003d GOOG_PROVIDE_REQUIRE_PATTERN.matcher(\"\");\n+\n+  /** The info for the file we are currently parsing. */\n+  private List\u003cString\u003e provides;\n+  private List\u003cString\u003e requires;\n+\n+  /**\n+   * Constructor\n+   *\n+   * @param errorManager Handles parse errors.\n+   */\n+  public JsFileParser(ErrorManager errorManager) {\n+    super(errorManager);\n+  }\n+\n+  /**\n+   * Parses the given file and returns the dependency information that it\n+   * contained.\n+   *\n+   * @param filePath Path to the file to parse.\n+   * @param closureRelativePath Path of the file relative to closure.\n+   * @return A DependencyInfo containing all provides/requires found in the\n+   *     file.\n+   * @throws IOException Thrown if there was an problem reading the given file.\n+   */\n+  public DependencyInfo parseFile(String filePath, String closureRelativePath)\n+      throws IOException {\n+    return parseReader(filePath, closureRelativePath, new FileReader(filePath));\n+  }\n+\n+  /**\n+   * Parses the given file and returns the dependency information that it\n+   * contained.\n+   *\n+   * @param filePath Path to the file to parse.\n+   * @param closureRelativePath Path of the file relative to closure.\n+   * @param fileContents The contents to parse.\n+   * @return A DependencyInfo containing all provides/requires found in the\n+   *     file.\n+   */\n+  public DependencyInfo parseFile(String filePath, String closureRelativePath,\n+      String fileContents) {\n+    return parseReader(filePath, closureRelativePath,\n+        new StringReader(fileContents));\n+  }\n+\n+  private DependencyInfo parseReader(String filePath,\n+      String closureRelativePath, Reader fileContents) {\n+    provides \u003d Lists.newArrayList();\n+    requires \u003d Lists.newArrayList();\n+\n+    logger.fine(\"Parsing Source: \" + filePath);\n+    doParse(filePath, fileContents);\n+\n+    DependencyInfo dependencyInfo \u003d new SimpleDependencyInfo(\n+        closureRelativePath, filePath, provides, requires);\n+    logger.fine(\"DepInfo: \" + dependencyInfo);\n+    return dependencyInfo;\n+  }\n+\n+  /**\n+   * Parses a line of javascript, extracting goog.provide and goog.require\n+   * information.\n+   */\n+  @Override\n+  protected boolean parseLine(String line) throws ParseException {\n+    boolean hasProvidesOrRequires \u003d false;\n+\n+    // Quick sanity check that will catch most cases. This is a performance\n+    // win for people with a lot of JS.\n+    if (line.indexOf(\"provide\") !\u003d -1 ||\n+        line.indexOf(\"require\") !\u003d -1) {\n+      // Iterate over the provides/requires.\n+      googMatcher.reset(line);\n+      while (googMatcher.find()) {\n+        hasProvidesOrRequires \u003d true;\n+\n+        // See if it\u0027s a require or provide.\n+        boolean isRequire \u003d googMatcher.group(1).charAt(0) \u003d\u003d \u0027r\u0027;\n+        // Parse the param.\n+        String arg \u003d parseJsString(googMatcher.group(2));\n+\n+        // Add the dependency.\n+        if (isRequire) {\n+          // goog is always implicit.\n+          // TODO(nicksantos): I\u0027m pretty sure we don\u0027t need this anymore.\n+          // Remove this later.\n+          if (!\"goog\".equals(arg)) {\n+            requires.add(arg);\n+          }\n+        } else {\n+          provides.add(arg);\n+        }\n+      }\n+    }\n+\n+    return !shortcutMode || hasProvidesOrRequires ||\n+        CharMatcher.WHITESPACE.matchesAllOf(line);\n+  }\n+}\n",
      "operations": [
        {
          "type": "delete-tree",
          "from": "ImportDeclaration [683,722]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ImportDeclaration [763,797]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ImportDeclaration [849,879]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ImportDeclaration [880,900]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/jscomp/deps/SimpleDependencyInfo.java",
        "src/com/google/javascript/jscomp/deps/SimpleDependencyInfo.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [
            "com.google.javascript.jscomp.deps.SimpleDependencyInfo:SimpleDependencyInfo:[String srcPathRelativeToClosure, String pathOfDefiningFile, List\u003cString\u003e provides, List\u003cString\u003e requires]:null",
            "com.google.javascript.jscomp.deps.SimpleDependencyInfo:getName:[]:String",
            "com.google.javascript.jscomp.deps.SimpleDependencyInfo:getProvides:[]:Collection\u003cString\u003e",
            "com.google.javascript.jscomp.deps.SimpleDependencyInfo:getRequires:[]:Collection\u003cString\u003e",
            "com.google.javascript.jscomp.deps.SimpleDependencyInfo:equals:[Object obj]:boolean",
            "com.google.javascript.jscomp.deps.SimpleDependencyInfo:getPathRelativeToClosureBase:[]:String",
            "com.google.javascript.jscomp.deps.SimpleDependencyInfo:toString:[]:String"
          ],
          "num": 7
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "-1"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "35",
            "36",
            "37",
            "38",
            "39",
            "40",
            "41",
            "42",
            "43",
            "44",
            "45",
            "46",
            "47",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57",
            "58",
            "59",
            "60",
            "61",
            "62",
            "63",
            "64",
            "65",
            "66",
            "67",
            "68",
            "69",
            "70",
            "71",
            "72",
            "73",
            "74",
            "75",
            "76",
            "77",
            "78",
            "79",
            "80",
            "81",
            "82",
            "83",
            "84",
            "85",
            "86",
            "87",
            "88",
            "89",
            "90",
            "91",
            "92",
            "93",
            "94",
            "95",
            "96",
            "97",
            "98",
            "99",
            "100",
            "101",
            "102",
            "103"
          ],
          "num": 103
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/jscomp/deps/SimpleDependencyInfo.java b/src/com/google/javascript/jscomp/deps/SimpleDependencyInfo.java\nnew file mode 100644\nindex 0000000..8dc5364\n--- /dev/null\n+++ b/src/com/google/javascript/jscomp/deps/SimpleDependencyInfo.java\n@@ -0,0 +1,103 @@\n+/*\n+ * Copyright 2009 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.javascript.jscomp.deps;\n+\n+import com.google.common.base.Objects;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * A class to hold JS dependency information for a single .js file.\n+ *\n+ * @author agrieve@google.com (Andrew Grieve)\n+ */\n+public class SimpleDependencyInfo implements DependencyInfo {\n+\n+  /** A list of provided symbols. */\n+  private final List\u003cString\u003e provides;\n+\n+  /** A list of required symbols. */\n+  private final List\u003cString\u003e requires;\n+\n+  /** The path of the file relative to closure. */\n+  private final String srcPathRelativeToClosure;\n+\n+  /** The path to the file from which we extracted the dependency information.*/\n+  private final String pathOfDefiningFile;\n+\n+  /**\n+   * Constructs a DependencyInfo object with the given list of provides \u0026\n+   * requires. This does *not* copy the given lists, but uses them directly.\n+   *\n+   * @param srcPathRelativeToClosure The closure-relative path of the file\n+   *     associated with this DependencyInfo.\n+   * @param pathOfDefiningFile The path to the file from which this dependency\n+   *     information was extracted.\n+   * @param provides List of provided symbols.\n+   * @param requires List of required symbols.\n+   */\n+  public SimpleDependencyInfo(\n+      String srcPathRelativeToClosure, String pathOfDefiningFile,\n+      List\u003cString\u003e provides, List\u003cString\u003e requires) {\n+    this.srcPathRelativeToClosure \u003d srcPathRelativeToClosure;\n+    this.pathOfDefiningFile \u003d pathOfDefiningFile;\n+    this.provides \u003d provides;\n+    this.requires \u003d requires;\n+  }\n+\n+  @Override\n+  public String getName() {\n+    return pathOfDefiningFile;\n+  }\n+\n+  @Override\n+  public String getPathRelativeToClosureBase() {\n+    return srcPathRelativeToClosure;\n+  }\n+\n+  @Override\n+  public Collection\u003cString\u003e getProvides() {\n+    return Collections.\u003cString\u003eunmodifiableList(provides);\n+  }\n+\n+  @Override\n+  public Collection\u003cString\u003e getRequires() {\n+    return Collections.\u003cString\u003eunmodifiableList(requires);\n+  }\n+\n+  @Override\n+  public boolean equals(Object obj) {\n+    if (!(obj instanceof SimpleDependencyInfo)) {\n+      return false;\n+    }\n+    SimpleDependencyInfo other \u003d (SimpleDependencyInfo)obj;\n+    return Objects.equal(other.srcPathRelativeToClosure,\n+            srcPathRelativeToClosure) \u0026\u0026\n+        Objects.equal(other.pathOfDefiningFile, pathOfDefiningFile) \u0026\u0026\n+        Objects.equal(other.requires, this.requires) \u0026\u0026\n+        Objects.equal(other.provides, this.provides);\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return String.format(\"DependencyInfo(relativePath\u003d\u0027%1$s\u0027, path\u003d\u0027%2$s\u0027, \"\n+        + \"provides\u003d%3$s, requires\u003d%4$s)\", srcPathRelativeToClosure,\n+        pathOfDefiningFile, provides, requires);\n+  }\n+}\n",
      "operations": [
        {
          "type": "delete-tree",
          "from": "ImportDeclaration [679,726]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ImportDeclaration [727,766]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/jscomp/deps/SortedDependencies.java",
        "src/com/google/javascript/jscomp/deps/SortedDependencies.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [
            "com.google.javascript.jscomp.deps.SortedDependencies:findRequireInSubGraphOrFail:[INPUT input, Set\u003cINPUT\u003e subGraph]:INPUT",
            "com.google.javascript.jscomp.deps.SortedDependencies:getSortedDependenciesOf:[List\u003cINPUT\u003e roots]:List\u003cINPUT\u003e",
            "com.google.javascript.jscomp.deps.SortedDependencies:findCycle:[INPUT current, Set\u003cINPUT\u003e subGraph, Multimap\u003cINPUT,INPUT\u003e deps, Set\u003cINPUT\u003e covered]:List\u003cINPUT\u003e",
            "com.google.javascript.jscomp.deps.SortedDependencies:cycleToString:[List\u003cINPUT\u003e cycle]:String",
            "com.google.javascript.jscomp.deps.SortedDependencies\\$CircularDependencyException:CircularDependencyException:[String message]:null",
            "com.google.javascript.jscomp.deps.SortedDependencies:getInputsWithoutProvides:[]:List\u003cINPUT\u003e",
            "com.google.javascript.jscomp.deps.SortedDependencies:topologicalStableSort:[List\u003cT\u003e items, Multimap\u003cT,T\u003e deps]:List\u003cT\u003e",
            "com.google.javascript.jscomp.deps.SortedDependencies:getSortedList:[]:List\u003cINPUT\u003e",
            "com.google.javascript.jscomp.deps.SortedDependencies:SortedDependencies:[List\u003cINPUT\u003e inputs]:null",
            "com.google.javascript.jscomp.deps.SortedDependencies:findCycle:[List\u003cINPUT\u003e subGraph, Multimap\u003cINPUT,INPUT\u003e deps]:List\u003cINPUT\u003e"
          ],
          "num": 10
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "-1"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "35",
            "36",
            "37",
            "38",
            "39",
            "40",
            "41",
            "42",
            "43",
            "44",
            "45",
            "46",
            "47",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57",
            "58",
            "59",
            "60",
            "61",
            "62",
            "63",
            "64",
            "65",
            "66",
            "67",
            "68",
            "69",
            "70",
            "71",
            "72",
            "73",
            "74",
            "75",
            "76",
            "77",
            "78",
            "79",
            "80",
            "81",
            "82",
            "83",
            "84",
            "85",
            "86",
            "87",
            "88",
            "89",
            "90",
            "91",
            "92",
            "93",
            "94",
            "95",
            "96",
            "97",
            "98",
            "99",
            "100",
            "101",
            "102",
            "103",
            "104",
            "105",
            "106",
            "107",
            "108",
            "109",
            "110",
            "111",
            "112",
            "113",
            "114",
            "115",
            "116",
            "117",
            "118",
            "119",
            "120",
            "121",
            "122",
            "123",
            "124",
            "125",
            "126",
            "127",
            "128",
            "129",
            "130",
            "131",
            "132",
            "133",
            "134",
            "135",
            "136",
            "137",
            "138",
            "139",
            "140",
            "141",
            "142",
            "143",
            "144",
            "145",
            "146",
            "147",
            "148",
            "149",
            "150",
            "151",
            "152",
            "153",
            "154",
            "155",
            "156",
            "157",
            "158",
            "159",
            "160",
            "161",
            "162",
            "163",
            "164",
            "165",
            "166",
            "167",
            "168",
            "169",
            "170",
            "171",
            "172",
            "173",
            "174",
            "175",
            "176",
            "177",
            "178",
            "179",
            "180",
            "181",
            "182",
            "183",
            "184",
            "185",
            "186",
            "187",
            "188",
            "189",
            "190",
            "191",
            "192",
            "193",
            "194",
            "195",
            "196",
            "197",
            "198",
            "199",
            "200",
            "201",
            "202",
            "203",
            "204",
            "205",
            "206",
            "207",
            "208",
            "209",
            "210",
            "211",
            "212",
            "213",
            "214",
            "215",
            "216",
            "217",
            "218",
            "219",
            "220",
            "221",
            "222",
            "223",
            "224",
            "225",
            "226",
            "227",
            "228",
            "229",
            "230",
            "231",
            "232",
            "233",
            "234",
            "235",
            "236",
            "237",
            "238",
            "239",
            "240",
            "241",
            "242",
            "243",
            "244",
            "245",
            "246",
            "247",
            "248",
            "249",
            "250",
            "251",
            "252",
            "253",
            "254",
            "255",
            "256"
          ],
          "num": 256
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/jscomp/deps/SortedDependencies.java b/src/com/google/javascript/jscomp/deps/SortedDependencies.java\nnew file mode 100644\nindex 0000000..adb6d81\n--- /dev/null\n+++ b/src/com/google/javascript/jscomp/deps/SortedDependencies.java\n@@ -0,0 +1,256 @@\n+/*\n+ * Copyright 2010 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.javascript.jscomp.deps;\n+\n+import com.google.common.base.Joiner;\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.ArrayListMultimap;\n+import com.google.common.collect.HashMultimap;\n+import com.google.common.collect.HashMultiset;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.Lists;\n+import com.google.common.collect.Maps;\n+import com.google.common.collect.Multimap;\n+import com.google.common.collect.Multimaps;\n+import com.google.common.collect.Multiset;\n+import com.google.common.collect.Sets;\n+\n+import java.util.ArrayDeque;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.Deque;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.PriorityQueue;\n+import java.util.Set;\n+\n+/**\n+ * A sorted list of inputs with dependency information. Uses a stable\n+ * topological sort to make sure that an input always comes after its\n+ * dependencies.\n+ *\n+ * Also exposes other information about the inputs, like which inputs\n+ * do not provide symbols.\n+ *\n+ * @author nicksantos@google.com (Nick Santos)\n+ */\n+public class SortedDependencies\u003cINPUT extends DependencyInfo\u003e {\n+\n+  private final List\u003cINPUT\u003e inputs;\n+\n+  // A topologically sorted list of the inputs.\n+  private final List\u003cINPUT\u003e sortedList;\n+\n+  // A list of all the inputs that do not have provides.\n+  private final List\u003cINPUT\u003e noProvides;\n+\n+  private final Map\u003cString, INPUT\u003e provideMap \u003d Maps.newHashMap();\n+\n+  public SortedDependencies(List\u003cINPUT\u003e inputs)\n+      throws CircularDependencyException {\n+    this.inputs \u003d Lists.newArrayList(inputs);\n+    noProvides \u003d Lists.newArrayList();\n+\n+    // Collect all symbols provided in these files.\n+    for (INPUT input : inputs) {\n+      Collection\u003cString\u003e currentProvides \u003d input.getProvides();\n+      if (currentProvides.isEmpty()) {\n+        noProvides.add(input);\n+      }\n+\n+      for (String provide : currentProvides) {\n+        provideMap.put(provide, input);\n+      }\n+    }\n+\n+    // Get the direct dependencies.\n+    final Multimap\u003cINPUT, INPUT\u003e deps \u003d HashMultimap.create();\n+    for (INPUT input : inputs) {\n+      for (String req : input.getRequires()) {\n+        INPUT dep \u003d provideMap.get(req);\n+        if (dep !\u003d null) {\n+          deps.put(input, dep);\n+        }\n+      }\n+    }\n+\n+    // Sort the inputs by sucking in 0-in-degree nodes until we\u0027re done.\n+    sortedList \u003d topologicalStableSort(inputs, deps);\n+\n+    // The dependency graph of inputs has a cycle iff sortedList is a proper\n+    // subset of inputs. Also, it has a cycle iff the subgraph\n+    // (inputs - sortedList) has a cycle. It\u0027s fairly easy to prove this\n+    // by the lemma that a graph has a cycle iff it has a subgraph where\n+    // no nodes have out-degree 0. I\u0027ll leave the proof of this as an exercise\n+    // to the reader.\n+    if (sortedList.size() \u003c inputs.size()) {\n+      List\u003cINPUT\u003e subGraph \u003d Lists.newArrayList(inputs);\n+      subGraph.removeAll(sortedList);\n+\n+      throw new CircularDependencyException(\n+          cycleToString(findCycle(subGraph, deps)));\n+    }\n+  }\n+\n+  /**\n+   * Returns the first circular dependency found. Expressed as a list of\n+   * items in reverse dependency order (the second element depends on the\n+   * first, etc.).\n+   */\n+  private List\u003cINPUT\u003e findCycle(\n+      List\u003cINPUT\u003e subGraph, Multimap\u003cINPUT, INPUT\u003e deps) {\n+    return findCycle(subGraph.get(0), Sets.\u003cINPUT\u003enewHashSet(subGraph),\n+        deps, Sets.\u003cINPUT\u003enewHashSet());\n+  }\n+\n+  private List\u003cINPUT\u003e findCycle(\n+      INPUT current, Set\u003cINPUT\u003e subGraph, Multimap\u003cINPUT, INPUT\u003e deps,\n+      Set\u003cINPUT\u003e covered) {\n+    if (covered.add(current)) {\n+      List\u003cINPUT\u003e cycle \u003d findCycle(\n+          findRequireInSubGraphOrFail(current, subGraph),\n+          subGraph, deps, covered);\n+\n+      // Don\u0027t add the input to the list if the cycle has closed already.\n+      if (cycle.get(0) !\u003d cycle.get(cycle.size() - 1)) {\n+        cycle.add(current);\n+      }\n+\n+      return cycle;\n+    } else {\n+      // Explicitly use the add() method, to prevent a generics constructor\n+      // warning that is dumb. The condition it\u0027s protecting is\n+      // obscure, and I think people have proposed that it be removed.\n+      List\u003cINPUT\u003e cycle \u003d Lists.\u003cINPUT\u003enewArrayList();\n+      cycle.add(current);\n+      return cycle;\n+    }\n+  }\n+\n+  private INPUT findRequireInSubGraphOrFail(INPUT input, Set\u003cINPUT\u003e subGraph) {\n+    for (String symbol : input.getRequires()) {\n+      INPUT candidate \u003d provideMap.get(symbol);\n+      if (subGraph.contains(candidate)) {\n+        return candidate;\n+      }\n+    }\n+    throw new IllegalStateException(\"no require found in subgraph\");\n+  }\n+\n+  /**\n+   * @param cycle A cycle in reverse-dependency order.\n+   */\n+  private String cycleToString(List\u003cINPUT\u003e cycle) {\n+    List\u003cString\u003e symbols \u003d Lists.newArrayList();\n+    for (int i \u003d cycle.size() - 1; i \u003e\u003d 0; i--) {\n+      symbols.add(cycle.get(i).getProvides().iterator().next());\n+    }\n+    symbols.add(symbols.get(0));\n+    return Joiner.on(\" -\u003e \").join(symbols);\n+  }\n+\n+  public List\u003cINPUT\u003e getSortedList() {\n+    return Collections.\u003cINPUT\u003eunmodifiableList(sortedList);\n+  }\n+\n+  /**\n+   * Gets all the dependencies of the given roots. The inputs must be returned\n+   * in a stable order. In other words, if A comes before B, and A does not\n+   * transitively depend on B, then A must also come before B in the returned\n+   * list.\n+   */\n+  public List\u003cINPUT\u003e getSortedDependenciesOf(List\u003cINPUT\u003e roots) {\n+    Preconditions.checkArgument(inputs.containsAll(roots));\n+    Set\u003cINPUT\u003e included \u003d Sets.newHashSet();\n+    Deque\u003cINPUT\u003e worklist \u003d new ArrayDeque\u003cINPUT\u003e(roots);\n+    while (!worklist.isEmpty()) {\n+      INPUT current \u003d worklist.pop();\n+      if (included.add(current)) {\n+        for (String req : current.getRequires()) {\n+          INPUT dep \u003d provideMap.get(req);\n+          if (dep !\u003d null) {\n+            worklist.add(dep);\n+          }\n+        }\n+      }\n+    }\n+\n+    ImmutableList.Builder\u003cINPUT\u003e builder \u003d ImmutableList.builder();\n+    for (INPUT current : sortedList) {\n+      if (included.contains(current)) {\n+        builder.add(current);\n+      }\n+    }\n+    return builder.build();\n+  }\n+\n+  public List\u003cINPUT\u003e getInputsWithoutProvides() {\n+    return Collections.\u003cINPUT\u003eunmodifiableList(noProvides);\n+  }\n+\n+  private static \u003cT\u003e List\u003cT\u003e topologicalStableSort(\n+      List\u003cT\u003e items, Multimap\u003cT, T\u003e deps) {\n+    final Map\u003cT, Integer\u003e originalIndex \u003d Maps.newHashMap();\n+    for (int i \u003d 0; i \u003c items.size(); i++) {\n+      originalIndex.put(items.get(i), i);\n+    }\n+\n+    PriorityQueue\u003cT\u003e inDegreeZero \u003d new PriorityQueue\u003cT\u003e(items.size(),\n+        new Comparator\u003cT\u003e() {\n+      @Override\n+      public int compare(T a, T b) {\n+        return originalIndex.get(a).intValue() -\n+            originalIndex.get(b).intValue();\n+      }\n+    });\n+    List\u003cT\u003e result \u003d Lists.newArrayList();\n+\n+    Multiset\u003cT\u003e inDegree \u003d HashMultiset.create();\n+    Multimap\u003cT, T\u003e reverseDeps \u003d ArrayListMultimap.create();\n+    Multimaps.invertFrom(deps, reverseDeps);\n+\n+    // First, add all the inputs with in-degree 0.\n+    for (T item : items) {\n+      Collection\u003cT\u003e itemDeps \u003d deps.get(item);\n+      inDegree.add(item, itemDeps.size());\n+      if (itemDeps.isEmpty()) {\n+        inDegreeZero.add(item);\n+      }\n+    }\n+\n+    // Then, iterate to a fixed point over the reverse dependency graph.\n+    while (!inDegreeZero.isEmpty()) {\n+      T item \u003d inDegreeZero.remove();\n+      result.add(item);\n+      for (T inWaiting : reverseDeps.get(item)) {\n+        inDegree.remove(inWaiting, 1);\n+        if (inDegree.count(inWaiting) \u003d\u003d 0) {\n+          inDegreeZero.add(inWaiting);\n+        }\n+      }\n+    }\n+\n+    return result;\n+  }\n+\n+  public static class CircularDependencyException extends Exception {\n+    CircularDependencyException(String message) {\n+      super(message);\n+    }\n+  }\n+}\n",
      "operations": [
        {
          "type": "delete-tree",
          "from": "ImportDeclaration [1406,1433]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ImportDeclaration [1434,1459]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [
            "com.google.javascript.jscomp.parsing.JsDocInfoParser:parseBasicTypeExpression:[JsDocToken token]:Node",
            "com.google.javascript.jscomp.parsing.JsDocInfoParser:retrieveAndResetParsedJSDocInfo:[]:JSDocInfo",
            "com.google.javascript.jscomp.parsing.JsDocInfoParser:parseTypeString:[String typeString]:Node",
            "com.google.javascript.jscomp.parsing.JsDocInfoParser:parseAndRecordTypeNode:[JsDocToken token, boolean matchingLC]:Node",
            "com.google.javascript.jscomp.parsing.JsDocInfoParser:setFileLevelJsDocBuilder:[Node.FileLevelJsDocBuilder fileLevelJsDocBuilder]:void",
            "com.google.javascript.jscomp.parsing.JsDocInfoParser:eatTokensUntilEOL:[]:JsDocToken",
            "com.google.javascript.jscomp.parsing.JsDocInfoParser:next:[]:JsDocToken",
            "com.google.javascript.jscomp.parsing.JsDocInfoParser:parseTypeExpressionAnnotation:[JsDocToken token]:Node",
            "com.google.javascript.jscomp.parsing.JsDocInfoParser:parse:[]:boolean",
            "com.google.javascript.jscomp.parsing.JsDocInfoParser:parseTypeExpressionList:[JsDocToken token]:Node",
            "com.google.javascript.jscomp.parsing.JsDocInfoParser:extractMultilineTextualBlock:[JsDocToken token, WhitespaceOption option]:ExtractionInfo",
            "com.google.javascript.jscomp.parsing.JsDocInfoParser:skipEOLs:[]:void",
            "com.google.javascript.jscomp.parsing.JsDocInfoParser:parseAndRecordTypeNameNode:[JsDocToken token, int lineno, int startCharno, boolean matchingLC]:Node",
            "com.google.javascript.jscomp.parsing.JsDocInfoParser:parseUnionTypeWithAlternate:[JsDocToken token, Node alternate]:Node",
            "com.google.javascript.jscomp.parsing.JsDocInfoParser:parseAndRecordParamTypeNode:[JsDocToken token]:Node",
            "com.google.javascript.jscomp.parsing.JsDocInfoParser:setFileOverviewJSDocInfo:[JSDocInfo fileOverviewJSDocInfo]:void",
            "com.google.javascript.jscomp.parsing.JsDocInfoParser:createJSTypeExpression:[Node n]:JSTypeExpression",
            "com.google.javascript.jscomp.parsing.JsDocInfoParser:parseFunctionType:[JsDocToken token]:Node",
            "com.google.javascript.jscomp.parsing.JsDocInfoParser:extractMultilineTextualBlock:[JsDocToken token]:ExtractionInfo",
            "com.google.javascript.jscomp.parsing.JsDocInfoParser\\$ExtractionInfo:ExtractionInfo:[String string, JsDocToken token]:null",
            "com.google.javascript.jscomp.parsing.JsDocInfoParser:extractSingleLineBlock:[]:ExtractionInfo",
            "com.google.javascript.jscomp.parsing.JsDocInfoParser:match:[JsDocToken token1, JsDocToken token2]:boolean",
            "com.google.javascript.jscomp.parsing.JsDocInfoParser:parseTypeExpression:[JsDocToken token]:Node",
            "com.google.javascript.jscomp.parsing.JsDocInfoParser:reportGenericTypeSyntaxWarning:[]:Node",
            "com.google.javascript.jscomp.parsing.JsDocInfoParser:eatTokensUntilEOL:[JsDocToken token]:JsDocToken",
            "com.google.javascript.jscomp.parsing.JsDocInfoParser\\$ErrorReporterParser:addWarning:[String messageId, String messageArg, int lineno, int charno]:void",
            "com.google.javascript.jscomp.parsing.JsDocInfoParser:parseAndRecordTypeNode:[JsDocToken token]:Node",
            "com.google.javascript.jscomp.parsing.JsDocInfoParser:restoreLookAhead:[JsDocToken token]:void",
            "com.google.javascript.jscomp.parsing.JsDocInfoParser:parseParamTypeExpressionAnnotation:[JsDocToken token]:Node",
            "com.google.javascript.jscomp.parsing.JsDocInfoParser:parseAndRecordTypeNode:[JsDocToken token, int lineno, int startCharno]:Node",
            "com.google.javascript.jscomp.parsing.JsDocInfoParser:hasParsedFileOverviewDocInfo:[]:boolean",
            "com.google.javascript.jscomp.parsing.JsDocInfoParser:hasParsedJSDocInfo:[]:boolean",
            "com.google.javascript.jscomp.parsing.JsDocInfoParser:current:[]:JsDocToken",
            "com.google.javascript.jscomp.parsing.JsDocInfoParser:toString:[JsDocToken token]:String",
            "com.google.javascript.jscomp.parsing.JsDocInfoParser:parseFieldType:[JsDocToken token]:Node",
            "com.google.javascript.jscomp.parsing.JsDocInfoParser:parseTypeName:[JsDocToken token]:Node",
            "com.google.javascript.jscomp.parsing.JsDocInfoParser:newNode:[int type]:Node",
            "com.google.javascript.jscomp.parsing.JsDocInfoParser:parseFieldTypeList:[JsDocToken token]:Node",
            "com.google.javascript.jscomp.parsing.JsDocInfoParser:parseArrayType:[JsDocToken token]:Node",
            "com.google.javascript.jscomp.parsing.JsDocInfoParser:parseParametersType:[JsDocToken token]:Node",
            "com.google.javascript.jscomp.parsing.JsDocInfoParser:parseUnionType:[JsDocToken token]:Node",
            "com.google.javascript.jscomp.parsing.JsDocInfoParser:reportTypeSyntaxWarning:[String warning]:Node",
            "com.google.javascript.jscomp.parsing.JsDocInfoParser:parseRecordType:[JsDocToken token]:Node",
            "com.google.javascript.jscomp.parsing.JsDocInfoParser:parseAndRecordTypeNode:[JsDocToken token, int lineno, int startCharno, boolean matchingLC, boolean onlyParseSimpleNames]:Node",
            "com.google.javascript.jscomp.parsing.JsDocInfoParser:match:[JsDocToken token]:boolean",
            "com.google.javascript.jscomp.parsing.JsDocInfoParser:newStringNode:[String s]:Node",
            "com.google.javascript.jscomp.parsing.JsDocInfoParser:parseSuppressTag:[JsDocToken token]:JsDocToken",
            "com.google.javascript.jscomp.parsing.JsDocInfoParser:wrapNode:[int type, Node n]:Node",
            "com.google.javascript.jscomp.parsing.JsDocInfoParser:parseFieldName:[JsDocToken token]:Node",
            "com.google.javascript.jscomp.parsing.JsDocInfoParser:parseTypeNameAnnotation:[JsDocToken token]:Node",
            "com.google.javascript.jscomp.parsing.JsDocInfoParser:getFileOverviewJSDocInfo:[]:JSDocInfo",
            "com.google.javascript.jscomp.parsing.JsDocInfoParser:parseResultType:[JsDocToken token]:Node",
            "com.google.javascript.jscomp.parsing.JsDocInfoParser\\$ErrorReporterParser:addWarning:[String messageId, int lineno, int charno]:void",
            "com.google.javascript.jscomp.parsing.JsDocInfoParser:JsDocInfoParser:[JsDocTokenStream stream, String sourceName, Config config, ErrorReporter errorReporter]:null",
            "com.google.javascript.jscomp.parsing.JsDocInfoParser:extractBlockComment:[JsDocToken token]:ExtractionInfo",
            "com.google.javascript.jscomp.parsing.JsDocInfoParser:parseTopLevelTypeExpression:[JsDocToken token]:Node",
            "com.google.javascript.jscomp.parsing.JsDocInfoParser:trimEnd:[String s]:String"
          ],
          "num": 57
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "-1"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "35",
            "36",
            "37",
            "38",
            "39",
            "40",
            "41",
            "42",
            "43",
            "44",
            "45",
            "46",
            "47",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57",
            "58",
            "59",
            "60",
            "61",
            "62",
            "63",
            "64",
            "65",
            "66",
            "67",
            "68",
            "69",
            "70",
            "71",
            "72",
            "73",
            "74",
            "75",
            "76",
            "77",
            "78",
            "79",
            "80",
            "81",
            "82",
            "83",
            "84",
            "85",
            "86",
            "87",
            "88",
            "89",
            "90",
            "91",
            "92",
            "93",
            "94",
            "95",
            "96",
            "97",
            "98",
            "99",
            "100",
            "101",
            "102",
            "103",
            "104",
            "105",
            "106",
            "107",
            "108",
            "109",
            "110",
            "111",
            "112",
            "113",
            "114",
            "115",
            "116",
            "117",
            "118",
            "119",
            "120",
            "121",
            "122",
            "123",
            "124",
            "125",
            "126",
            "127",
            "128",
            "129",
            "130",
            "131",
            "132",
            "133",
            "134",
            "135",
            "136",
            "137",
            "138",
            "139",
            "140",
            "141",
            "142",
            "143",
            "144",
            "145",
            "146",
            "147",
            "148",
            "149",
            "150",
            "151",
            "152",
            "153",
            "154",
            "155",
            "156",
            "157",
            "158",
            "159",
            "160",
            "161",
            "162",
            "163",
            "164",
            "165",
            "166",
            "167",
            "168",
            "169",
            "170",
            "171",
            "172",
            "173",
            "174",
            "175",
            "176",
            "177",
            "178",
            "179",
            "180",
            "181",
            "182",
            "183",
            "184",
            "185",
            "186",
            "187",
            "188",
            "189",
            "190",
            "191",
            "192",
            "193",
            "194",
            "195",
            "196",
            "197",
            "198",
            "199",
            "200",
            "201",
            "202",
            "203",
            "204",
            "205",
            "206",
            "207",
            "208",
            "209",
            "210",
            "211",
            "212",
            "213",
            "214",
            "215",
            "216",
            "217",
            "218",
            "219",
            "220",
            "221",
            "222",
            "223",
            "224",
            "225",
            "226",
            "227",
            "228",
            "229",
            "230",
            "231",
            "232",
            "233",
            "234",
            "235",
            "236",
            "237",
            "238",
            "239",
            "240",
            "241",
            "242",
            "243",
            "244",
            "245",
            "246",
            "247",
            "248",
            "249",
            "250",
            "251",
            "252",
            "253",
            "254",
            "255",
            "256",
            "257",
            "258",
            "259",
            "260",
            "261",
            "262",
            "263",
            "264",
            "265",
            "266",
            "267",
            "268",
            "269",
            "270",
            "271",
            "272",
            "273",
            "274",
            "275",
            "276",
            "277",
            "278",
            "279",
            "280",
            "281",
            "282",
            "283",
            "284",
            "285",
            "286",
            "287",
            "288",
            "289",
            "290",
            "291",
            "292",
            "293",
            "294",
            "295",
            "296",
            "297",
            "298",
            "299",
            "300",
            "301",
            "302",
            "303",
            "304",
            "305",
            "306",
            "307",
            "308",
            "309",
            "310",
            "311",
            "312",
            "313",
            "314",
            "315",
            "316",
            "317",
            "318",
            "319",
            "320",
            "321",
            "322",
            "323",
            "324",
            "325",
            "326",
            "327",
            "328",
            "329",
            "330",
            "331",
            "332",
            "333",
            "334",
            "335",
            "336",
            "337",
            "338",
            "339",
            "340",
            "341",
            "342",
            "343",
            "344",
            "345",
            "346",
            "347",
            "348",
            "349",
            "350",
            "351",
            "352",
            "353",
            "354",
            "355",
            "356",
            "357",
            "358",
            "359",
            "360",
            "361",
            "362",
            "363",
            "364",
            "365",
            "366",
            "367",
            "368",
            "369",
            "370",
            "371",
            "372",
            "373",
            "374",
            "375",
            "376",
            "377",
            "378",
            "379",
            "380",
            "381",
            "382",
            "383",
            "384",
            "385",
            "386",
            "387",
            "388",
            "389",
            "390",
            "391",
            "392",
            "393",
            "394",
            "395",
            "396",
            "397",
            "398",
            "399",
            "400",
            "401",
            "402",
            "403",
            "404",
            "405",
            "406",
            "407",
            "408",
            "409",
            "410",
            "411",
            "412",
            "413",
            "414",
            "415",
            "416",
            "417",
            "418",
            "419",
            "420",
            "421",
            "422",
            "423",
            "424",
            "425",
            "426",
            "427",
            "428",
            "429",
            "430",
            "431",
            "432",
            "433",
            "434",
            "435",
            "436",
            "437",
            "438",
            "439",
            "440",
            "441",
            "442",
            "443",
            "444",
            "445",
            "446",
            "447",
            "448",
            "449",
            "450",
            "451",
            "452",
            "453",
            "454",
            "455",
            "456",
            "457",
            "458",
            "459",
            "460",
            "461",
            "462",
            "463",
            "464",
            "465",
            "466",
            "467",
            "468",
            "469",
            "470",
            "471",
            "472",
            "473",
            "474",
            "475",
            "476",
            "477",
            "478",
            "479",
            "480",
            "481",
            "482",
            "483",
            "484",
            "485",
            "486",
            "487",
            "488",
            "489",
            "490",
            "491",
            "492",
            "493",
            "494",
            "495",
            "496",
            "497",
            "498",
            "499",
            "500",
            "501",
            "502",
            "503",
            "504",
            "505",
            "506",
            "507",
            "508",
            "509",
            "510",
            "511",
            "512",
            "513",
            "514",
            "515",
            "516",
            "517",
            "518",
            "519",
            "520",
            "521",
            "522",
            "523",
            "524",
            "525",
            "526",
            "527",
            "528",
            "529",
            "530",
            "531",
            "532",
            "533",
            "534",
            "535",
            "536",
            "537",
            "538",
            "539",
            "540",
            "541",
            "542",
            "543",
            "544",
            "545",
            "546",
            "547",
            "548",
            "549",
            "550",
            "551",
            "552",
            "553",
            "554",
            "555",
            "556",
            "557",
            "558",
            "559",
            "560",
            "561",
            "562",
            "563",
            "564",
            "565",
            "566",
            "567",
            "568",
            "569",
            "570",
            "571",
            "572",
            "573",
            "574",
            "575",
            "576",
            "577",
            "578",
            "579",
            "580",
            "581",
            "582",
            "583",
            "584",
            "585",
            "586",
            "587",
            "588",
            "589",
            "590",
            "591",
            "592",
            "593",
            "594",
            "595",
            "596",
            "597",
            "598",
            "599",
            "600",
            "601",
            "602",
            "603",
            "604",
            "605",
            "606",
            "607",
            "608",
            "609",
            "610",
            "611",
            "612",
            "613",
            "614",
            "615",
            "616",
            "617",
            "618",
            "619",
            "620",
            "621",
            "622",
            "623",
            "624",
            "625",
            "626",
            "627",
            "628",
            "629",
            "630",
            "631",
            "632",
            "633",
            "634",
            "635",
            "636",
            "637",
            "638",
            "639",
            "640",
            "641",
            "642",
            "643",
            "644",
            "645",
            "646",
            "647",
            "648",
            "649",
            "650",
            "651",
            "652",
            "653",
            "654",
            "655",
            "656",
            "657",
            "658",
            "659",
            "660",
            "661",
            "662",
            "663",
            "664",
            "665",
            "666",
            "667",
            "668",
            "669",
            "670",
            "671",
            "672",
            "673",
            "674",
            "675",
            "676",
            "677",
            "678",
            "679",
            "680",
            "681",
            "682",
            "683",
            "684",
            "685",
            "686",
            "687",
            "688",
            "689",
            "690",
            "691",
            "692",
            "693",
            "694",
            "695",
            "696",
            "697",
            "698",
            "699",
            "700",
            "701",
            "702",
            "703",
            "704",
            "705",
            "706",
            "707",
            "708",
            "709",
            "710",
            "711",
            "712",
            "713",
            "714",
            "715",
            "716",
            "717",
            "718",
            "719",
            "720",
            "721",
            "722",
            "723",
            "724",
            "725",
            "726",
            "727",
            "728",
            "729",
            "730",
            "731",
            "732",
            "733",
            "734",
            "735",
            "736",
            "737",
            "738",
            "739",
            "740",
            "741",
            "742",
            "743",
            "744",
            "745",
            "746",
            "747",
            "748",
            "749",
            "750",
            "751",
            "752",
            "753",
            "754",
            "755",
            "756",
            "757",
            "758",
            "759",
            "760",
            "761",
            "762",
            "763",
            "764",
            "765",
            "766",
            "767",
            "768",
            "769",
            "770",
            "771",
            "772",
            "773",
            "774",
            "775",
            "776",
            "777",
            "778",
            "779",
            "780",
            "781",
            "782",
            "783",
            "784",
            "785",
            "786",
            "787",
            "788",
            "789",
            "790",
            "791",
            "792",
            "793",
            "794",
            "795",
            "796",
            "797",
            "798",
            "799",
            "800",
            "801",
            "802",
            "803",
            "804",
            "805",
            "806",
            "807",
            "808",
            "809",
            "810",
            "811",
            "812",
            "813",
            "814",
            "815",
            "816",
            "817",
            "818",
            "819",
            "820",
            "821",
            "822",
            "823",
            "824",
            "825",
            "826",
            "827",
            "828",
            "829",
            "830",
            "831",
            "832",
            "833",
            "834",
            "835",
            "836",
            "837",
            "838",
            "839",
            "840",
            "841",
            "842",
            "843",
            "844",
            "845",
            "846",
            "847",
            "848",
            "849",
            "850",
            "851",
            "852",
            "853",
            "854",
            "855",
            "856",
            "857",
            "858",
            "859",
            "860",
            "861",
            "862",
            "863",
            "864",
            "865",
            "866",
            "867",
            "868",
            "869",
            "870",
            "871",
            "872",
            "873",
            "874",
            "875",
            "876",
            "877",
            "878",
            "879",
            "880",
            "881",
            "882",
            "883",
            "884",
            "885",
            "886",
            "887",
            "888",
            "889",
            "890",
            "891",
            "892",
            "893",
            "894",
            "895",
            "896",
            "897",
            "898",
            "899",
            "900",
            "901",
            "902",
            "903",
            "904",
            "905",
            "906",
            "907",
            "908",
            "909",
            "910",
            "911",
            "912",
            "913",
            "914",
            "915",
            "916",
            "917",
            "918",
            "919",
            "920",
            "921",
            "922",
            "923",
            "924",
            "925",
            "926",
            "927",
            "928",
            "929",
            "930",
            "931",
            "932",
            "933",
            "934",
            "935",
            "936",
            "937",
            "938",
            "939",
            "940",
            "941",
            "942",
            "943",
            "944",
            "945",
            "946",
            "947",
            "948",
            "949",
            "950",
            "951",
            "952",
            "953",
            "954",
            "955",
            "956",
            "957",
            "958",
            "959",
            "960",
            "961",
            "962",
            "963",
            "964",
            "965",
            "966",
            "967",
            "968",
            "969",
            "970",
            "971",
            "972",
            "973",
            "974",
            "975",
            "976",
            "977",
            "978",
            "979",
            "980",
            "981",
            "982",
            "983",
            "984",
            "985",
            "986",
            "987",
            "988",
            "989",
            "990",
            "991",
            "992",
            "993",
            "994",
            "995",
            "996",
            "997",
            "998",
            "999",
            "1000",
            "1001",
            "1002",
            "1003",
            "1004",
            "1005",
            "1006",
            "1007",
            "1008",
            "1009",
            "1010",
            "1011",
            "1012",
            "1013",
            "1014",
            "1015",
            "1016",
            "1017",
            "1018",
            "1019",
            "1020",
            "1021",
            "1022",
            "1023",
            "1024",
            "1025",
            "1026",
            "1027",
            "1028",
            "1029",
            "1030",
            "1031",
            "1032",
            "1033",
            "1034",
            "1035",
            "1036",
            "1037",
            "1038",
            "1039",
            "1040",
            "1041",
            "1042",
            "1043",
            "1044",
            "1045",
            "1046",
            "1047",
            "1048",
            "1049",
            "1050",
            "1051",
            "1052",
            "1053",
            "1054",
            "1055",
            "1056",
            "1057",
            "1058",
            "1059",
            "1060",
            "1061",
            "1062",
            "1063",
            "1064",
            "1065",
            "1066",
            "1067",
            "1068",
            "1069",
            "1070",
            "1071",
            "1072",
            "1073",
            "1074",
            "1075",
            "1076",
            "1077",
            "1078",
            "1079",
            "1080",
            "1081",
            "1082",
            "1083",
            "1084",
            "1085",
            "1086",
            "1087",
            "1088",
            "1089",
            "1090",
            "1091",
            "1092",
            "1093",
            "1094",
            "1095",
            "1096",
            "1097",
            "1098",
            "1099",
            "1100",
            "1101",
            "1102",
            "1103",
            "1104",
            "1105",
            "1106",
            "1107",
            "1108",
            "1109",
            "1110",
            "1111",
            "1112",
            "1113",
            "1114",
            "1115",
            "1116",
            "1117",
            "1118",
            "1119",
            "1120",
            "1121",
            "1122",
            "1123",
            "1124",
            "1125",
            "1126",
            "1127",
            "1128",
            "1129",
            "1130",
            "1131",
            "1132",
            "1133",
            "1134",
            "1135",
            "1136",
            "1137",
            "1138",
            "1139",
            "1140",
            "1141",
            "1142",
            "1143",
            "1144",
            "1145",
            "1146",
            "1147",
            "1148",
            "1149",
            "1150",
            "1151",
            "1152",
            "1153",
            "1154",
            "1155",
            "1156",
            "1157",
            "1158",
            "1159",
            "1160",
            "1161",
            "1162",
            "1163",
            "1164",
            "1165",
            "1166",
            "1167",
            "1168",
            "1169",
            "1170",
            "1171",
            "1172",
            "1173",
            "1174",
            "1175",
            "1176",
            "1177",
            "1178",
            "1179",
            "1180",
            "1181",
            "1182",
            "1183",
            "1184",
            "1185",
            "1186",
            "1187",
            "1188",
            "1189",
            "1190",
            "1191",
            "1192",
            "1193",
            "1194",
            "1195",
            "1196",
            "1197",
            "1198",
            "1199",
            "1200",
            "1201",
            "1202",
            "1203",
            "1204",
            "1205",
            "1206",
            "1207",
            "1208",
            "1209",
            "1210",
            "1211",
            "1212",
            "1213",
            "1214",
            "1215",
            "1216",
            "1217",
            "1218",
            "1219",
            "1220",
            "1221",
            "1222",
            "1223",
            "1224",
            "1225",
            "1226",
            "1227",
            "1228",
            "1229",
            "1230",
            "1231",
            "1232",
            "1233",
            "1234",
            "1235",
            "1236",
            "1237",
            "1238",
            "1239",
            "1240",
            "1241",
            "1242",
            "1243",
            "1244",
            "1245",
            "1246",
            "1247",
            "1248",
            "1249",
            "1250",
            "1251",
            "1252",
            "1253",
            "1254",
            "1255",
            "1256",
            "1257",
            "1258",
            "1259",
            "1260",
            "1261",
            "1262",
            "1263",
            "1264",
            "1265",
            "1266",
            "1267",
            "1268",
            "1269",
            "1270",
            "1271",
            "1272",
            "1273",
            "1274",
            "1275",
            "1276",
            "1277",
            "1278",
            "1279",
            "1280",
            "1281",
            "1282",
            "1283",
            "1284",
            "1285",
            "1286",
            "1287",
            "1288",
            "1289",
            "1290",
            "1291",
            "1292",
            "1293",
            "1294",
            "1295",
            "1296",
            "1297",
            "1298",
            "1299",
            "1300",
            "1301",
            "1302",
            "1303",
            "1304",
            "1305",
            "1306",
            "1307",
            "1308",
            "1309",
            "1310",
            "1311",
            "1312",
            "1313",
            "1314",
            "1315",
            "1316",
            "1317",
            "1318",
            "1319",
            "1320",
            "1321",
            "1322",
            "1323",
            "1324",
            "1325",
            "1326",
            "1327",
            "1328",
            "1329",
            "1330",
            "1331",
            "1332",
            "1333",
            "1334",
            "1335",
            "1336",
            "1337",
            "1338",
            "1339",
            "1340",
            "1341",
            "1342",
            "1343",
            "1344",
            "1345",
            "1346",
            "1347",
            "1348",
            "1349",
            "1350",
            "1351",
            "1352",
            "1353",
            "1354",
            "1355",
            "1356",
            "1357",
            "1358",
            "1359",
            "1360",
            "1361",
            "1362",
            "1363",
            "1364",
            "1365",
            "1366",
            "1367",
            "1368",
            "1369",
            "1370",
            "1371",
            "1372",
            "1373",
            "1374",
            "1375",
            "1376",
            "1377",
            "1378",
            "1379",
            "1380",
            "1381",
            "1382",
            "1383",
            "1384",
            "1385",
            "1386",
            "1387",
            "1388",
            "1389",
            "1390",
            "1391",
            "1392",
            "1393",
            "1394",
            "1395",
            "1396",
            "1397",
            "1398",
            "1399",
            "1400",
            "1401",
            "1402",
            "1403",
            "1404",
            "1405",
            "1406",
            "1407",
            "1408",
            "1409",
            "1410",
            "1411",
            "1412",
            "1413",
            "1414",
            "1415",
            "1416",
            "1417",
            "1418",
            "1419",
            "1420",
            "1421",
            "1422",
            "1423",
            "1424",
            "1425",
            "1426",
            "1427",
            "1428",
            "1429",
            "1430",
            "1431",
            "1432",
            "1433",
            "1434",
            "1435",
            "1436",
            "1437",
            "1438",
            "1439",
            "1440",
            "1441",
            "1442",
            "1443",
            "1444",
            "1445",
            "1446",
            "1447",
            "1448",
            "1449",
            "1450",
            "1451",
            "1452",
            "1453",
            "1454",
            "1455",
            "1456",
            "1457",
            "1458",
            "1459",
            "1460",
            "1461",
            "1462",
            "1463",
            "1464",
            "1465",
            "1466",
            "1467",
            "1468",
            "1469",
            "1470",
            "1471",
            "1472",
            "1473",
            "1474",
            "1475",
            "1476",
            "1477",
            "1478",
            "1479",
            "1480",
            "1481",
            "1482",
            "1483",
            "1484",
            "1485",
            "1486",
            "1487",
            "1488",
            "1489",
            "1490",
            "1491",
            "1492",
            "1493",
            "1494",
            "1495",
            "1496",
            "1497",
            "1498",
            "1499",
            "1500",
            "1501",
            "1502",
            "1503",
            "1504",
            "1505",
            "1506",
            "1507",
            "1508",
            "1509",
            "1510",
            "1511",
            "1512",
            "1513",
            "1514",
            "1515",
            "1516",
            "1517",
            "1518",
            "1519",
            "1520",
            "1521",
            "1522",
            "1523",
            "1524",
            "1525",
            "1526",
            "1527",
            "1528",
            "1529",
            "1530",
            "1531",
            "1532",
            "1533",
            "1534",
            "1535",
            "1536",
            "1537",
            "1538",
            "1539",
            "1540",
            "1541",
            "1542",
            "1543",
            "1544",
            "1545",
            "1546",
            "1547",
            "1548",
            "1549",
            "1550",
            "1551",
            "1552",
            "1553",
            "1554",
            "1555",
            "1556",
            "1557",
            "1558",
            "1559",
            "1560",
            "1561",
            "1562",
            "1563",
            "1564",
            "1565",
            "1566",
            "1567",
            "1568",
            "1569",
            "1570",
            "1571",
            "1572",
            "1573",
            "1574",
            "1575",
            "1576",
            "1577",
            "1578",
            "1579",
            "1580",
            "1581",
            "1582",
            "1583",
            "1584",
            "1585",
            "1586",
            "1587",
            "1588",
            "1589",
            "1590",
            "1591",
            "1592",
            "1593",
            "1594",
            "1595",
            "1596",
            "1597",
            "1598",
            "1599",
            "1600",
            "1601",
            "1602",
            "1603",
            "1604",
            "1605",
            "1606",
            "1607",
            "1608",
            "1609",
            "1610",
            "1611",
            "1612",
            "1613",
            "1614",
            "1615",
            "1616",
            "1617",
            "1618",
            "1619",
            "1620",
            "1621",
            "1622",
            "1623",
            "1624",
            "1625",
            "1626",
            "1627",
            "1628",
            "1629",
            "1630",
            "1631",
            "1632",
            "1633",
            "1634",
            "1635",
            "1636",
            "1637",
            "1638",
            "1639",
            "1640",
            "1641",
            "1642",
            "1643",
            "1644",
            "1645",
            "1646",
            "1647",
            "1648",
            "1649",
            "1650",
            "1651",
            "1652",
            "1653",
            "1654",
            "1655",
            "1656",
            "1657",
            "1658",
            "1659",
            "1660",
            "1661",
            "1662",
            "1663",
            "1664",
            "1665",
            "1666",
            "1667",
            "1668",
            "1669",
            "1670",
            "1671",
            "1672",
            "1673",
            "1674",
            "1675",
            "1676",
            "1677",
            "1678",
            "1679",
            "1680",
            "1681",
            "1682",
            "1683",
            "1684",
            "1685",
            "1686",
            "1687",
            "1688",
            "1689",
            "1690",
            "1691",
            "1692",
            "1693",
            "1694",
            "1695",
            "1696",
            "1697",
            "1698",
            "1699",
            "1700",
            "1701",
            "1702",
            "1703",
            "1704",
            "1705",
            "1706",
            "1707",
            "1708",
            "1709",
            "1710",
            "1711",
            "1712",
            "1713",
            "1714",
            "1715",
            "1716",
            "1717",
            "1718",
            "1719",
            "1720",
            "1721",
            "1722",
            "1723",
            "1724",
            "1725",
            "1726",
            "1727",
            "1728",
            "1729",
            "1730",
            "1731",
            "1732",
            "1733",
            "1734",
            "1735",
            "1736",
            "1737",
            "1738",
            "1739",
            "1740",
            "1741",
            "1742",
            "1743",
            "1744",
            "1745",
            "1746",
            "1747",
            "1748",
            "1749",
            "1750",
            "1751",
            "1752",
            "1753",
            "1754",
            "1755",
            "1756",
            "1757",
            "1758",
            "1759",
            "1760",
            "1761",
            "1762",
            "1763",
            "1764",
            "1765",
            "1766",
            "1767",
            "1768",
            "1769",
            "1770",
            "1771",
            "1772",
            "1773",
            "1774",
            "1775",
            "1776",
            "1777",
            "1778",
            "1779",
            "1780",
            "1781",
            "1782",
            "1783",
            "1784",
            "1785",
            "1786",
            "1787",
            "1788",
            "1789",
            "1790",
            "1791",
            "1792",
            "1793",
            "1794",
            "1795",
            "1796",
            "1797",
            "1798",
            "1799",
            "1800",
            "1801",
            "1802",
            "1803",
            "1804",
            "1805",
            "1806",
            "1807",
            "1808",
            "1809",
            "1810",
            "1811",
            "1812",
            "1813",
            "1814",
            "1815",
            "1816",
            "1817",
            "1818",
            "1819",
            "1820",
            "1821",
            "1822",
            "1823",
            "1824",
            "1825",
            "1826",
            "1827",
            "1828",
            "1829",
            "1830",
            "1831",
            "1832",
            "1833",
            "1834",
            "1835",
            "1836",
            "1837",
            "1838",
            "1839",
            "1840",
            "1841",
            "1842",
            "1843",
            "1844",
            "1845",
            "1846",
            "1847",
            "1848",
            "1849",
            "1850",
            "1851",
            "1852",
            "1853",
            "1854",
            "1855",
            "1856",
            "1857",
            "1858",
            "1859",
            "1860",
            "1861",
            "1862",
            "1863",
            "1864",
            "1865",
            "1866",
            "1867",
            "1868",
            "1869",
            "1870",
            "1871",
            "1872",
            "1873",
            "1874",
            "1875",
            "1876",
            "1877",
            "1878",
            "1879",
            "1880",
            "1881",
            "1882",
            "1883",
            "1884",
            "1885",
            "1886",
            "1887",
            "1888",
            "1889",
            "1890",
            "1891",
            "1892",
            "1893",
            "1894",
            "1895",
            "1896",
            "1897",
            "1898",
            "1899",
            "1900",
            "1901",
            "1902",
            "1903",
            "1904",
            "1905",
            "1906",
            "1907",
            "1908",
            "1909",
            "1910",
            "1911",
            "1912",
            "1913",
            "1914",
            "1915",
            "1916",
            "1917",
            "1918",
            "1919",
            "1920",
            "1921",
            "1922",
            "1923",
            "1924",
            "1925",
            "1926",
            "1927",
            "1928",
            "1929",
            "1930",
            "1931",
            "1932",
            "1933",
            "1934",
            "1935",
            "1936",
            "1937",
            "1938",
            "1939",
            "1940",
            "1941",
            "1942",
            "1943",
            "1944",
            "1945",
            "1946",
            "1947",
            "1948",
            "1949",
            "1950",
            "1951",
            "1952",
            "1953",
            "1954",
            "1955",
            "1956",
            "1957",
            "1958",
            "1959",
            "1960",
            "1961",
            "1962",
            "1963",
            "1964",
            "1965",
            "1966",
            "1967",
            "1968",
            "1969",
            "1970",
            "1971",
            "1972",
            "1973",
            "1974",
            "1975",
            "1976",
            "1977",
            "1978",
            "1979",
            "1980",
            "1981",
            "1982",
            "1983",
            "1984",
            "1985",
            "1986",
            "1987",
            "1988",
            "1989",
            "1990",
            "1991",
            "1992",
            "1993",
            "1994",
            "1995",
            "1996",
            "1997",
            "1998",
            "1999",
            "2000",
            "2001",
            "2002",
            "2003",
            "2004",
            "2005",
            "2006",
            "2007",
            "2008",
            "2009",
            "2010",
            "2011",
            "2012",
            "2013",
            "2014",
            "2015",
            "2016",
            "2017",
            "2018",
            "2019",
            "2020",
            "2021",
            "2022",
            "2023",
            "2024",
            "2025",
            "2026",
            "2027",
            "2028",
            "2029",
            "2030",
            "2031",
            "2032",
            "2033",
            "2034",
            "2035",
            "2036",
            "2037",
            "2038",
            "2039",
            "2040",
            "2041",
            "2042",
            "2043"
          ],
          "num": 2043
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nnew file mode 100644\nindex 0000000..477b287\n--- /dev/null\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -0,0 +1,2043 @@\n+/*\n+ * Copyright 2007 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.javascript.jscomp.parsing;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.Sets;\n+import com.google.javascript.jscomp.mozilla.rhino.ErrorReporter;\n+import com.google.javascript.rhino.JSDocInfo;\n+import com.google.javascript.rhino.JSDocInfoBuilder;\n+import com.google.javascript.rhino.JSTypeExpression;\n+import com.google.javascript.rhino.Node;\n+import com.google.javascript.rhino.ScriptRuntime;\n+import com.google.javascript.rhino.Token;\n+import com.google.javascript.rhino.JSDocInfo.Visibility;\n+\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * A parser for JSDoc comments.\n+ *\n+*\n+ * @author nicksantos@google.com (Nick Santos)\n+ */\n+// TODO(nicksantos): Unify all the JSDocInfo stuff into one package, instead of\n+// spreading it across mutliple packages.\n+public final class JsDocInfoParser {\n+\n+  private final JsDocTokenStream stream;\n+  private final JSDocInfoBuilder jsdocBuilder;\n+  private final String sourceName;\n+  private final ErrorReporter errorReporter;\n+  private final ErrorReporterParser parser \u003d new ErrorReporterParser();\n+\n+  private class ErrorReporterParser {\n+    void addWarning(String messageId, String messageArg, int lineno,\n+                    int charno) {\n+      errorReporter.warning(ScriptRuntime.getMessage1(messageId, messageArg),\n+          sourceName, lineno, null, charno);\n+    }\n+    void addWarning(String messageId, int lineno, int charno) {\n+      errorReporter.warning(ScriptRuntime.getMessage0(messageId),\n+          sourceName, lineno, null, charno);\n+    }\n+  }\n+\n+  // The DocInfo with the fileoverview tag for the whole file.\n+  private JSDocInfo fileOverviewJSDocInfo \u003d null;\n+  private State state;\n+\n+  private final Map\u003cString, Annotation\u003e annotationNames;\n+  private final Set\u003cString\u003e suppressionNames;\n+\n+  private Node.FileLevelJsDocBuilder fileLevelJsDocBuilder;\n+\n+  /**\n+   * Sets the JsDocBuilder for the file-level (root) node of this parse. The\n+   * parser uses the builder to append any preserve annotations it encounters\n+   * in jsdoc comments.\n+   *\n+   * @param fileLevelJsDocBuilder\n+   */\n+  void setFileLevelJsDocBuilder(\n+      Node.FileLevelJsDocBuilder fileLevelJsDocBuilder) {\n+    this.fileLevelJsDocBuilder \u003d fileLevelJsDocBuilder;\n+  }\n+\n+  /**\n+   * Sets the file overview JSDocInfo, in order to warn about multiple uses of\n+   * the @fileoverview tag in a file.\n+   */\n+  void setFileOverviewJSDocInfo(JSDocInfo fileOverviewJSDocInfo) {\n+    this.fileOverviewJSDocInfo \u003d fileOverviewJSDocInfo;\n+  }\n+\n+  private enum State {\n+    SEARCHING_ANNOTATION,\n+    SEARCHING_NEWLINE,\n+    NEXT_IS_ANNOTATION\n+  }\n+\n+  JsDocInfoParser(JsDocTokenStream stream,\n+                  String sourceName,\n+                  Config config,\n+                  ErrorReporter errorReporter) {\n+    this.stream \u003d stream;\n+    this.sourceName \u003d sourceName;\n+    this.jsdocBuilder \u003d new JSDocInfoBuilder(config.parseJsDocDocumentation);\n+    this.annotationNames \u003d config.annotationNames;\n+    this.suppressionNames \u003d config.suppressionNames;\n+\n+    this.errorReporter \u003d errorReporter;\n+  }\n+\n+  /**\n+   * Parses a string containing a JsDoc type declaration, returning the\n+   * type if the parsing succeeded or {@code null} if it failed.\n+   */\n+  public static Node parseTypeString(String typeString) {\n+    Config config \u003d new Config(\n+        Sets.\u003cString\u003enewHashSet(),\n+        Sets.\u003cString\u003enewHashSet(),\n+        false);\n+    JsDocInfoParser parser \u003d new JsDocInfoParser(\n+        new JsDocTokenStream(typeString),\n+        \"typeparsing\",\n+        config,\n+        NullErrorReporter.forNewRhino());\n+\n+    return parser.parseTopLevelTypeExpression(parser.next());\n+  }\n+\n+  /**\n+   * Parses a {@link JSDocInfo} object. This parsing method reads all tokens\n+   * returned by the {@link JsDocTokenStream#getJsDocToken()} method until the\n+   * {@link JsDocToken#EOC} is returned.\n+   *\n+   * @return {@code true} if JSDoc information was correctly parsed,\n+   *     {@code false} otherwise\n+   */\n+  boolean parse() {\n+    int lineno;\n+    int charno;\n+\n+    // JSTypes are represented as Rhino AST nodes, and then resolved later.\n+    JSTypeExpression type;\n+\n+    state \u003d State.SEARCHING_ANNOTATION;\n+    JsDocToken token \u003d next();\n+\n+    ExtractionInfo blockInfo \u003d extractBlockComment(token);\n+    token \u003d blockInfo.token;\n+\n+    // If we have a block level comment, record it.\n+    if (blockInfo.string.length() \u003e 0) {\n+      jsdocBuilder.recordBlockDescription(blockInfo.string);\n+    }\n+\n+    // Parse the actual JsDoc.\n+    retry: for (;;) {\n+      switch (token) {\n+        case ANNOTATION:\n+          if (state \u003d\u003d State.SEARCHING_ANNOTATION) {\n+            state \u003d State.SEARCHING_NEWLINE;\n+            lineno \u003d stream.getLineno();\n+            charno \u003d stream.getCharno();\n+\n+            String annotationName \u003d stream.getString();\n+            Annotation annotation \u003d annotationNames.get(annotationName);\n+            if (annotation \u003d\u003d null) {\n+              parser.addWarning(\"msg.bad.jsdoc.tag\", annotationName,\n+                  stream.getLineno(), stream.getCharno());\n+            } else {\n+              // Mark the beginning of the annotation.\n+              jsdocBuilder.markAnnotation(annotationName, lineno, charno);\n+\n+              switch (annotation) {\n+                case AUTHOR:\n+                  ExtractionInfo authorInfo \u003d extractSingleLineBlock();\n+                  String author \u003d authorInfo.string;\n+\n+                  if (author.length() \u003d\u003d 0) {\n+                    parser.addWarning(\"msg.jsdoc.authormissing\",\n+                          stream.getLineno(), stream.getCharno());\n+                  } else {\n+                    jsdocBuilder.addAuthor(author);\n+                  }\n+\n+                  token \u003d authorInfo.token;\n+                  continue retry;\n+\n+                case CONSTANT:\n+                  if (!jsdocBuilder.recordConstancy()) {\n+                    parser.addWarning(\"msg.jsdoc.const\",\n+                        stream.getLineno(), stream.getCharno());\n+                  }\n+                  token \u003d eatTokensUntilEOL();\n+                  continue retry;\n+\n+                case CONSTRUCTOR:\n+                  if (!jsdocBuilder.recordConstructor()) {\n+                    if (jsdocBuilder.isInterfaceRecorded()) {\n+                      parser.addWarning(\"msg.jsdoc.interface.constructor\",\n+                          stream.getLineno(), stream.getCharno());\n+                    } else {\n+                      parser.addWarning(\"msg.jsdoc.incompat.type\",\n+                          stream.getLineno(), stream.getCharno());\n+                    }\n+                  }\n+                  token \u003d eatTokensUntilEOL();\n+                  continue retry;\n+\n+                case DEPRECATED:\n+                  if (!jsdocBuilder.recordDeprecated()) {\n+                    parser.addWarning(\"msg.jsdoc.deprecated\",\n+                        stream.getLineno(), stream.getCharno());\n+                  }\n+\n+                  // Find the reason/description, if any.\n+                  ExtractionInfo reasonInfo \u003d\n+                      extractMultilineTextualBlock(token);\n+\n+                  String reason \u003d reasonInfo.string;\n+\n+                  if (reason.length() \u003e 0) {\n+                    jsdocBuilder.recordDeprecationReason(reason);\n+                  }\n+\n+                  token \u003d reasonInfo.token;\n+                  continue retry;\n+\n+                case INTERFACE:\n+                  if (!jsdocBuilder.recordInterface()) {\n+                    if (jsdocBuilder.isConstructorRecorded()) {\n+                      parser.addWarning(\"msg.jsdoc.interface.constructor\",\n+                          stream.getLineno(), stream.getCharno());\n+                    } else {\n+                      parser.addWarning(\"msg.jsdoc.incompat.type\",\n+                          stream.getLineno(), stream.getCharno());\n+                    }\n+                  }\n+                  token \u003d eatTokensUntilEOL();\n+                  continue retry;\n+\n+                case DESC:\n+                  if (jsdocBuilder.isDescriptionRecorded()) {\n+                    parser.addWarning(\"msg.jsdoc.desc.extra\",\n+                        stream.getLineno(), stream.getCharno());\n+                    token \u003d eatTokensUntilEOL();\n+                    continue retry;\n+                  } else {\n+                    ExtractionInfo descriptionInfo \u003d\n+                        extractMultilineTextualBlock(token);\n+\n+                    String description \u003d descriptionInfo.string;\n+\n+                    jsdocBuilder.recordDescription(description);\n+                    token \u003d descriptionInfo.token;\n+                    continue retry;\n+                  }\n+\n+                case FILE_OVERVIEW:\n+                  ExtractionInfo fileOverviewInfo \u003d\n+                      extractMultilineTextualBlock(token,\n+                                                   WhitespaceOption.TRIM);\n+\n+                  String fileOverview \u003d fileOverviewInfo.string;\n+\n+                  if (!jsdocBuilder.recordFileOverview(fileOverview) ||\n+                      fileOverviewJSDocInfo !\u003d null) {\n+                    parser.addWarning(\"msg.jsdoc.fileoverview.extra\",\n+                        stream.getLineno(), stream.getCharno());\n+                  }\n+                  token \u003d fileOverviewInfo.token;\n+                  continue retry;\n+\n+                case LICENSE:\n+                case PRESERVE:\n+                  ExtractionInfo preserveInfo \u003d\n+                      extractMultilineTextualBlock(token,\n+                                                   WhitespaceOption.PRESERVE);\n+\n+                  String preserve \u003d preserveInfo.string;\n+\n+                  if (preserve.length() \u003e 0) {\n+                    if (fileLevelJsDocBuilder !\u003d null) {\n+                      fileLevelJsDocBuilder.append(preserve);\n+                    }\n+                  }\n+\n+                  token \u003d preserveInfo.token;\n+                  continue retry;\n+\n+                case ENUM:\n+                  token \u003d next();\n+                  lineno \u003d stream.getLineno();\n+                  charno \u003d stream.getCharno();\n+\n+                  type \u003d null;\n+                  if (token !\u003d JsDocToken.EOL \u0026\u0026 token !\u003d JsDocToken.EOC) {\n+                    type \u003d createJSTypeExpression(\n+                        parseAndRecordTypeNode(token));\n+                  }\n+\n+                  if (type \u003d\u003d null) {\n+                    type \u003d createJSTypeExpression(newStringNode(\"number\"));\n+                  }\n+                  if (!jsdocBuilder.recordEnumParameterType(type)) {\n+                    parser.addWarning(\"msg.jsdoc.incompat.type\", lineno, charno);\n+                  }\n+                  token \u003d eatTokensUntilEOL(token);\n+                  continue retry;\n+\n+                case EXPORT:\n+                  if (!jsdocBuilder.recordExport()) {\n+                    parser.addWarning(\"msg.jsdoc.export\",\n+                        stream.getLineno(), stream.getCharno());\n+                  }\n+                  token \u003d eatTokensUntilEOL();\n+                  continue retry;\n+\n+                case EXTERNS:\n+                  if (!jsdocBuilder.recordExterns()) {\n+                    parser.addWarning(\"msg.jsdoc.externs\",\n+                        stream.getLineno(), stream.getCharno());\n+                  }\n+                  token \u003d eatTokensUntilEOL();\n+                  continue retry;\n+\n+                case JAVA_DISPATCH:\n+                  if (!jsdocBuilder.recordJavaDispatch()) {\n+                    parser.addWarning(\"msg.jsdoc.javadispatch\",\n+                        stream.getLineno(), stream.getCharno());\n+                  }\n+                  token \u003d eatTokensUntilEOL();\n+                  continue retry;\n+\n+                case EXTENDS:\n+                case IMPLEMENTS:\n+                  skipEOLs();\n+                  token \u003d next();\n+                  lineno \u003d stream.getLineno();\n+                  charno \u003d stream.getCharno();\n+                  boolean matchingRc \u003d false;\n+\n+                  if (token \u003d\u003d JsDocToken.LC) {\n+                    token \u003d next();\n+                    matchingRc \u003d true;\n+                  }\n+\n+                  if (token \u003d\u003d JsDocToken.STRING) {\n+                    Node typeNode \u003d parseAndRecordTypeNameNode(\n+                        token, lineno, charno, matchingRc);\n+\n+                    lineno \u003d stream.getLineno();\n+                    charno \u003d stream.getCharno();\n+\n+                    typeNode \u003d wrapNode(Token.BANG, typeNode);\n+                    if (typeNode !\u003d null \u0026\u0026 !matchingRc) {\n+                      typeNode.putBooleanProp(Node.BRACELESS_TYPE, true);\n+                    }\n+                    type \u003d createJSTypeExpression(typeNode);\n+\n+                    if (annotation \u003d\u003d Annotation.EXTENDS) {\n+                      if (!jsdocBuilder.recordBaseType(type)) {\n+                        parser.addWarning(\n+                            \"msg.jsdoc.incompat.type\", lineno, charno);\n+                      }\n+                    } else {\n+                      Preconditions.checkState(\n+                          annotation \u003d\u003d Annotation.IMPLEMENTS);\n+                      if (!jsdocBuilder.recordImplementedInterface(type)) {\n+                        parser.addWarning(\"msg.jsdoc.implements.duplicate\",\n+                            lineno, charno);\n+                      }\n+                    }\n+                    token \u003d next();\n+                    if (matchingRc) {\n+                      if (token !\u003d JsDocToken.RC) {\n+                        parser.addWarning(\"msg.jsdoc.missing.rc\",\n+                            stream.getLineno(), stream.getCharno());\n+                      }\n+                    } else if (token !\u003d JsDocToken.EOL \u0026\u0026\n+                        token !\u003d JsDocToken.EOF \u0026\u0026 token !\u003d JsDocToken.EOC) {\n+                      parser.addWarning(\"msg.end.annotation.expected\",\n+                          stream.getLineno(), stream.getCharno());\n+                    }\n+                  } else {\n+                    parser.addWarning(\"msg.no.type.name\", lineno, charno);\n+                  }\n+                  token \u003d eatTokensUntilEOL(token);\n+                  continue retry;\n+\n+                case HIDDEN:\n+                  if (!jsdocBuilder.recordHiddenness()) {\n+                    parser.addWarning(\"msg.jsdoc.hidden\",\n+                        stream.getLineno(), stream.getCharno());\n+                  }\n+                  token \u003d eatTokensUntilEOL();\n+                  continue retry;\n+\n+                case NO_ALIAS:\n+                  if (!jsdocBuilder.recordNoAlias()) {\n+                    parser.addWarning(\"msg.jsdoc.noalias\",\n+                        stream.getLineno(), stream.getCharno());\n+                  }\n+                  token \u003d eatTokensUntilEOL();\n+                  continue retry;\n+\n+                case NO_TYPE_CHECK:\n+                  if (!jsdocBuilder.recordNoTypeCheck()) {\n+                    parser.addWarning(\"msg.jsdoc.nocheck\",\n+                        stream.getLineno(), stream.getCharno());\n+                  }\n+                  token \u003d eatTokensUntilEOL();\n+                  continue retry;\n+\n+                case NOT_IMPLEMENTED:\n+                  token \u003d eatTokensUntilEOL();\n+                  continue retry;\n+\n+                case INHERIT_DOC:\n+                case OVERRIDE:\n+                  if (!jsdocBuilder.recordOverride()) {\n+                    parser.addWarning(\"msg.jsdoc.override\",\n+                        stream.getLineno(), stream.getCharno());\n+                  }\n+                  token \u003d eatTokensUntilEOL();\n+                  continue retry;\n+\n+                case THROWS:\n+                  skipEOLs();\n+                  token \u003d next();\n+                  lineno \u003d stream.getLineno();\n+                  charno \u003d stream.getCharno();\n+                  type \u003d null;\n+\n+                  if (token \u003d\u003d JsDocToken.LC) {\n+                    type \u003d createJSTypeExpression(\n+                        parseAndRecordTypeNode(token));\n+\n+                    if (type \u003d\u003d null) {\n+                      // parsing error reported during recursive descent\n+                      // recovering parsing\n+                      token \u003d eatTokensUntilEOL();\n+                      continue retry;\n+                    }\n+                  }\n+\n+                  // *Update* the token to that after the type annotation.\n+                  token \u003d current();\n+\n+                  // Save the throw type.\n+                  jsdocBuilder.recordThrowType(type);\n+\n+                  // Find the throw\u0027s description (if applicable).\n+                  ExtractionInfo descriptionInfo \u003d\n+                      extractMultilineTextualBlock(token);\n+\n+                  String description \u003d descriptionInfo.string;\n+\n+                  if (description.length() \u003e 0) {\n+                    jsdocBuilder.recordThrowDescription(type, description);\n+                  }\n+\n+                  token \u003d descriptionInfo.token;\n+                  continue retry;\n+\n+                case PARAM:\n+                  skipEOLs();\n+                  token \u003d next();\n+                  lineno \u003d stream.getLineno();\n+                  charno \u003d stream.getCharno();\n+                  type \u003d null;\n+\n+                  if (token \u003d\u003d JsDocToken.LC) {\n+                    type \u003d createJSTypeExpression(\n+                        parseAndRecordParamTypeNode(token));\n+\n+                    if (type \u003d\u003d null) {\n+                      // parsing error reported during recursive descent\n+                      // recovering parsing\n+                      token \u003d eatTokensUntilEOL();\n+                      continue retry;\n+                    }\n+                    skipEOLs();\n+                    token \u003d next();\n+                    lineno \u003d stream.getLineno();\n+                    charno \u003d stream.getCharno();\n+                  }\n+\n+                  String name \u003d null;\n+                  boolean isBracketedParam \u003d JsDocToken.LB \u003d\u003d token;\n+                  if (isBracketedParam) {\n+                    token \u003d next();\n+                  }\n+\n+                  if (JsDocToken.STRING !\u003d token) {\n+                    parser.addWarning(\"msg.missing.variable.name\",\n+                        lineno, charno);\n+                  } else {\n+                    name \u003d stream.getString();\n+\n+                    if (isBracketedParam) {\n+                      token \u003d next();\n+\n+                      // Throw out JsDocToolkit\u0027s \"default\" parameter annotation.\n+                      // It makes no sense under our type system.\n+                      if (JsDocToken.EQUALS \u003d\u003d token) {\n+                        token \u003d next();\n+                        if (JsDocToken.STRING \u003d\u003d token) {\n+                          token \u003d next();\n+                        }\n+                      }\n+\n+                      if (JsDocToken.RB !\u003d token) {\n+                        reportTypeSyntaxWarning(\"msg.jsdoc.missing.rb\");\n+                      } else if (type !\u003d null) {\n+                        // Make the type expression optional, if it isn\u0027t\n+                        // already.\n+                        type \u003d JSTypeExpression.makeOptionalArg(type);\n+                      }\n+                    }\n+\n+                    // If the param name has a DOT in it, just throw it out\n+                    // quietly. We do not handle the JsDocToolkit method\n+                    // for handling properties of params.\n+                    if (name.indexOf(\u0027.\u0027) \u003e -1) {\n+                      name \u003d null;\n+                    } else if (!jsdocBuilder.recordParameter(name, type)) {\n+                      if (jsdocBuilder.hasParameter(name)) {\n+                        parser.addWarning(\"msg.dup.variable.name\", name,\n+                            lineno, charno);\n+                      } else {\n+                        parser.addWarning(\"msg.jsdoc.incompat.type\", name,\n+                            lineno, charno);\n+                      }\n+                    }\n+                  }\n+\n+                  if (name \u003d\u003d null) {\n+                    token \u003d eatTokensUntilEOL(token);\n+                    continue retry;\n+                  }\n+\n+                  jsdocBuilder.markName(name, lineno, charno);\n+\n+                  // Find the parameter\u0027s description (if applicable).\n+                  ExtractionInfo paramDescriptionInfo \u003d\n+                      extractMultilineTextualBlock(token);\n+\n+                  String paramDescription \u003d paramDescriptionInfo.string;\n+\n+                  if (paramDescription.length() \u003e 0) {\n+                    jsdocBuilder.recordParameterDescription(name,\n+                                                            paramDescription);\n+                  }\n+\n+                  token \u003d paramDescriptionInfo.token;\n+                  continue retry;\n+\n+                case PRESERVE_TRY:\n+                  if (!jsdocBuilder.recordPreserveTry()) {\n+                    parser.addWarning(\"msg.jsdoc.preservertry\",\n+                        stream.getLineno(), stream.getCharno());\n+                  }\n+                  token \u003d eatTokensUntilEOL();\n+                  continue retry;\n+\n+                case PRIVATE:\n+                  if (!jsdocBuilder.recordVisibility(Visibility.PRIVATE)) {\n+                    parser.addWarning(\"msg.jsdoc.visibility.private\",\n+                        stream.getLineno(), stream.getCharno());\n+                  }\n+                  token \u003d eatTokensUntilEOL();\n+                  continue retry;\n+\n+                case PROTECTED:\n+                  if (!jsdocBuilder.recordVisibility(Visibility.PROTECTED)) {\n+                    parser.addWarning(\"msg.jsdoc.visibility.protected\",\n+                        stream.getLineno(), stream.getCharno());\n+                  }\n+                  token \u003d eatTokensUntilEOL();\n+                  continue retry;\n+\n+                case PUBLIC:\n+                  if (!jsdocBuilder.recordVisibility(Visibility.PUBLIC)) {\n+                    parser.addWarning(\"msg.jsdoc.visibility.public\",\n+                        stream.getLineno(), stream.getCharno());\n+                  }\n+                  token \u003d eatTokensUntilEOL();\n+                  continue retry;\n+\n+                case NO_SHADOW:\n+                  if (!jsdocBuilder.recordNoShadow()) {\n+                    parser.addWarning(\"msg.jsdoc.noshadow\",\n+                        stream.getLineno(), stream.getCharno());\n+                  }\n+                  token \u003d eatTokensUntilEOL();\n+                  continue retry;\n+\n+                case NO_SIDE_EFFECTS:\n+                  if (!jsdocBuilder.recordNoSideEffects()) {\n+                    parser.addWarning(\"msg.jsdoc.nosideeffects\",\n+                        stream.getLineno(), stream.getCharno());\n+                  }\n+                  token \u003d eatTokensUntilEOL();\n+                  continue retry;\n+\n+                case IMPLICIT_CAST:\n+                  if (!jsdocBuilder.recordImplicitCast()) {\n+                    parser.addWarning(\"msg.jsdoc.implicitcast\",\n+                        stream.getLineno(), stream.getCharno());\n+                  }\n+                  token \u003d eatTokensUntilEOL();\n+                  continue retry;\n+\n+                case SEE:\n+                  ExtractionInfo referenceInfo \u003d extractSingleLineBlock();\n+                  String reference \u003d referenceInfo.string;\n+\n+                  if (reference.length() \u003d\u003d 0) {\n+                    parser.addWarning(\"msg.jsdoc.seemissing\",\n+                          stream.getLineno(), stream.getCharno());\n+                  } else {\n+                    jsdocBuilder.addReference(reference);\n+                  }\n+\n+                  token \u003d referenceInfo.token;\n+                  continue retry;\n+\n+                case SUPPRESS:\n+                  token \u003d parseSuppressTag(next());\n+                  continue retry;\n+\n+                case TEMPLATE:\n+                  ExtractionInfo templateInfo \u003d extractSingleLineBlock();\n+                  String templateTypeName \u003d templateInfo.string;\n+\n+                  if (templateTypeName.length() \u003d\u003d 0) {\n+                    parser.addWarning(\"msg.jsdoc.templatemissing\",\n+                          stream.getLineno(), stream.getCharno());\n+                  } else if (!jsdocBuilder.recordTemplateTypeName(\n+                      templateTypeName)) {\n+                    parser.addWarning(\"msg.jsdoc.template.at.most.once\",\n+                        stream.getLineno(), stream.getCharno());\n+                  }\n+\n+                  token \u003d templateInfo.token;\n+                  continue retry;\n+\n+                case VERSION:\n+                  ExtractionInfo versionInfo \u003d extractSingleLineBlock();\n+                  String version \u003d versionInfo.string;\n+\n+                  if (version.length() \u003d\u003d 0) {\n+                    parser.addWarning(\"msg.jsdoc.versionmissing\",\n+                          stream.getLineno(), stream.getCharno());\n+                  } else {\n+                    if (!jsdocBuilder.recordVersion(version)) {\n+                       parser.addWarning(\"msg.jsdoc.extraversion\",\n+                          stream.getLineno(), stream.getCharno());\n+                    }\n+                  }\n+\n+                  token \u003d versionInfo.token;\n+                  continue retry;\n+\n+                case DEFINE:\n+                case RETURN:\n+                case THIS:\n+                case TYPE:\n+                case TYPEDEF:\n+                  skipEOLs();\n+                  lineno \u003d stream.getLineno();\n+                  charno \u003d stream.getCharno();\n+\n+                  token \u003d next();\n+\n+                  Node typeNode \u003d parseAndRecordTypeNode(token, lineno, charno);\n+\n+                  if (annotation \u003d\u003d Annotation.THIS) {\n+                    typeNode \u003d wrapNode(Token.BANG, typeNode);\n+                    if (typeNode !\u003d null \u0026\u0026 token !\u003d JsDocToken.LC) {\n+                      typeNode.putBooleanProp(Node.BRACELESS_TYPE, true);\n+                    }\n+                  }\n+                  type \u003d createJSTypeExpression(typeNode);\n+\n+                  if (type \u003d\u003d null) {\n+                    // error reported during recursive descent\n+                    // recovering parsing\n+                  } else {\n+                    switch (annotation) {\n+                      case DEFINE:\n+                        if (!jsdocBuilder.recordDefineType(type)) {\n+                          parser.addWarning(\"msg.jsdoc.define\",\n+                              lineno, charno);\n+                        }\n+                        break;\n+\n+                      case RETURN:\n+                        if (!jsdocBuilder.recordReturnType(type)) {\n+                          parser.addWarning(\n+                              \"msg.jsdoc.incompat.type\", lineno, charno);\n+                          break;\n+                        }\n+\n+                        // *Update* the token to that after the type annotation.\n+                        token \u003d current();\n+\n+                        // Find the return\u0027s description (if applicable).\n+                        ExtractionInfo returnDescriptionInfo \u003d\n+                            extractMultilineTextualBlock(token);\n+\n+                        String returnDescription \u003d returnDescriptionInfo.string;\n+\n+                        if (returnDescription.length() \u003e 0) {\n+                          jsdocBuilder.recordReturnDescription(\n+                              returnDescription);\n+                        }\n+\n+                        token \u003d returnDescriptionInfo.token;\n+                        continue retry;\n+\n+                      case THIS:\n+                        if (!jsdocBuilder.recordThisType(type)) {\n+                          parser.addWarning(\n+                              \"msg.jsdoc.incompat.type\", lineno, charno);\n+                        }\n+                        break;\n+\n+                      case TYPE:\n+                        if (!jsdocBuilder.recordType(type)) {\n+                          parser.addWarning(\n+                              \"msg.jsdoc.incompat.type\", lineno, charno);\n+                        }\n+                        break;\n+\n+                      case TYPEDEF:\n+                        if (!jsdocBuilder.recordTypedef(type)) {\n+                          parser.addWarning(\n+                              \"msg.jsdoc.incompat.type\", lineno, charno);\n+                        }\n+                        break;\n+                    }\n+\n+                    token \u003d eatTokensUntilEOL();\n+                  }\n+                  continue retry;\n+              }\n+            }\n+          }\n+          break;\n+\n+        case EOC:\n+          if (hasParsedFileOverviewDocInfo()) {\n+            fileOverviewJSDocInfo \u003d retrieveAndResetParsedJSDocInfo();\n+          }\n+\n+          return true;\n+\n+        case EOF:\n+          // discard any accumulated information\n+          jsdocBuilder.build(null);\n+          parser.addWarning(\"msg.unexpected.eof\",\n+              stream.getLineno(), stream.getCharno());\n+          return false;\n+\n+        case EOL:\n+          if (state \u003d\u003d State.SEARCHING_NEWLINE) {\n+            state \u003d State.SEARCHING_ANNOTATION;\n+          }\n+          token \u003d next();\n+          continue retry;\n+\n+        default:\n+          if (token \u003d\u003d JsDocToken.STAR \u0026\u0026 state \u003d\u003d State.SEARCHING_ANNOTATION) {\n+            token \u003d next();\n+            continue retry;\n+          } else {\n+            state \u003d State.SEARCHING_NEWLINE;\n+            token \u003d eatTokensUntilEOL();\n+            continue retry;\n+          }\n+      }\n+\n+      // next token\n+      token \u003d next();\n+    }\n+  }\n+\n+  /**\n+   * Parse a {@code @suppress} tag of the form\n+   * {@code @suppress\u0026#123;warning1|warning2\u0026#125;}.\n+   *\n+   * @param token The current token.\n+   */\n+  private JsDocToken parseSuppressTag(JsDocToken token) {\n+    if (token \u003d\u003d JsDocToken.LC) {\n+      Set\u003cString\u003e suppressions \u003d new HashSet\u003cString\u003e();\n+      while (true) {\n+        if (match(JsDocToken.STRING)) {\n+          String name \u003d stream.getString();\n+          if (!suppressionNames.contains(name)) {\n+            parser.addWarning(\"msg.jsdoc.suppress.unknown\", name,\n+                stream.getLineno(), stream.getCharno());\n+          }\n+\n+          suppressions.add(stream.getString());\n+          token \u003d next();\n+        } else {\n+          parser.addWarning(\"msg.jsdoc.suppress\",\n+              stream.getLineno(), stream.getCharno());\n+          return token;\n+        }\n+\n+        if (match(JsDocToken.PIPE)) {\n+          token \u003d next();\n+        } else {\n+          break;\n+        }\n+      }\n+\n+      if (!match(JsDocToken.RC)) {\n+        parser.addWarning(\"msg.jsdoc.suppress\",\n+            stream.getLineno(), stream.getCharno());\n+      } else {\n+        token \u003d next();\n+        if (!jsdocBuilder.recordSuppressions(suppressions)) {\n+          parser.addWarning(\"msg.jsdoc.suppress.duplicate\",\n+              stream.getLineno(), stream.getCharno());\n+        }\n+      }\n+    }\n+    return token;\n+  }\n+\n+  /**\n+   * Looks for a type expression at the current token and if found,\n+   * returns it. Note that this method consumes input.\n+   *\n+   * @param token The current token.\n+   * @return The type expression found or null if none.\n+   */\n+  private Node parseAndRecordTypeNode(JsDocToken token) {\n+    return parseAndRecordTypeNode(token, token \u003d\u003d JsDocToken.LC);\n+  }\n+\n+  /**\n+   * Looks for a type expression at the current token and if found,\n+   * returns it. Note that this method consumes input.\n+   *\n+   * @param token The current token.\n+   * @param matchingLC Whether the type expression starts with a \"{\".\n+   * @return The type expression found or null if none.\n+   */\n+  private Node parseAndRecordTypeNode(JsDocToken token, boolean matchingLC) {\n+    return parseAndRecordTypeNode(token, stream.getLineno(), stream.getCharno(),\n+        matchingLC, false);\n+  }\n+\n+  /**\n+   * Looks for a type expression at the current token and if found,\n+   * returns it. Note that this method consumes input.\n+   *\n+   * @param token The current token.\n+   * @param lineno The line of the type expression.\n+   * @param startCharno The starting character position of the type expression.\n+   * @return The type expression found or null if none.\n+   */\n+  private Node parseAndRecordTypeNode(JsDocToken token, int lineno,\n+      int startCharno) {\n+    return parseAndRecordTypeNode(token, lineno, startCharno,\n+        token \u003d\u003d JsDocToken.LC, false);\n+  }\n+\n+  /**\n+   * Looks for a type expression at the current token and if found,\n+   * returns it. Note that this method consumes input.\n+   *\n+   * @param token The current token.\n+   * @param lineno The line of the type expression.\n+   * @param startCharno The starting character position of the type expression.\n+   * @param matchingLC Whether the type expression starts with a \"{\".\n+   * @return The type expression found or null if none.\n+   */\n+  private Node parseAndRecordTypeNameNode(JsDocToken token, int lineno,\n+                                          int startCharno, boolean matchingLC) {\n+    return parseAndRecordTypeNode(token, lineno, startCharno, matchingLC, true);\n+  }\n+\n+  /**\n+   * Looks for a type expression at the current token and if found,\n+   * returns it. Note that this method consumes input.\n+   *\n+   * Parameter type expressions are special for two reasons:\n+   * \u003col\u003e\n+   *   \u003cli\u003eThey must begin with \u0027{\u0027, to distinguish type names from param names.\n+   *   \u003cli\u003eThey may end in \u0027\u003d\u0027, to denote optionality.\n+   * \u003c/ol\u003e\n+   *\n+   * @param token The current token.\n+   * @return The type expression found or null if none.\n+   */\n+  private Node parseAndRecordParamTypeNode(JsDocToken token) {\n+    Preconditions.checkArgument(token \u003d\u003d JsDocToken.LC);\n+    int lineno \u003d stream.getLineno();\n+    int startCharno \u003d stream.getCharno();\n+\n+    Node typeNode \u003d parseParamTypeExpressionAnnotation(token);\n+    int endCharno \u003d stream.getCharno();\n+\n+    jsdocBuilder.markTypeNode(typeNode, lineno, startCharno, endCharno,\n+        true);\n+    return typeNode;\n+  }\n+\n+  /**\n+   * Looks for a parameter type expression at the current token and if found,\n+   * returns it. Note that this method consumes input.\n+   *\n+   * @param token The current token.\n+   * @param lineno The line of the type expression.\n+   * @param startCharno The starting character position of the type expression.\n+   * @param matchingLC Whether the type expression starts with a \"{\".\n+   * @param onlyParseSimpleNames If true, only simple type names are parsed\n+   *     (via a call to parseTypeNameAnnotation instead of\n+   *     parseTypeExpressionAnnotation).\n+   * @return The type expression found or null if none.\n+   */\n+  private Node parseAndRecordTypeNode(JsDocToken token, int lineno,\n+                                      int startCharno,\n+                                      boolean matchingLC,\n+                                      boolean onlyParseSimpleNames) {\n+    Node typeNode \u003d null;\n+\n+    if (onlyParseSimpleNames) {\n+      typeNode \u003d parseTypeNameAnnotation(token);\n+    } else {\n+      typeNode \u003d parseTypeExpressionAnnotation(token);\n+    }\n+\n+    if (typeNode !\u003d null \u0026\u0026 !matchingLC) {\n+      typeNode.putBooleanProp(Node.BRACELESS_TYPE, true);\n+    }\n+\n+    int endCharno \u003d stream.getCharno();\n+\n+    jsdocBuilder.markTypeNode(typeNode, lineno, startCharno, endCharno,\n+        matchingLC);\n+\n+    return typeNode;\n+  }\n+\n+  /**\n+   * Converts a JSDoc token to its string representation.\n+   */\n+  private String toString(JsDocToken token) {\n+    switch (token) {\n+      case ANNOTATION:\n+        return \"@\" + stream.getString();\n+\n+      case BANG:\n+        return \"!\";\n+\n+      case COMMA:\n+        return \",\";\n+\n+      case COLON:\n+        return \":\";\n+\n+      case GT:\n+        return \"\u003e\";\n+\n+      case LB:\n+        return \"[\";\n+\n+      case LC:\n+        return \"{\";\n+\n+      case LP:\n+        return \"(\";\n+\n+      case LT:\n+        return \".\u003c\";\n+\n+      case QMARK:\n+        return \"?\";\n+\n+      case PIPE:\n+        return \"|\";\n+\n+      case RB:\n+        return \"]\";\n+\n+      case RC:\n+        return \"}\";\n+\n+      case RP:\n+        return \")\";\n+\n+      case STAR:\n+        return \"*\";\n+\n+      case ELLIPSIS:\n+        return \"...\";\n+\n+      case EQUALS:\n+        return \"\u003d\";\n+\n+      case STRING:\n+        return stream.getString();\n+\n+      default:\n+        throw new IllegalStateException(token.toString());\n+    }\n+  }\n+\n+  /**\n+   * Constructs a new {@code JSTypeExpression}.\n+   * @param n A node. May be null.\n+   */\n+  private JSTypeExpression createJSTypeExpression(Node n) {\n+    return n \u003d\u003d null ? null :\n+        new JSTypeExpression(n, sourceName);\n+  }\n+\n+  /**\n+   * Tuple for returning both the string extracted and the\n+   * new token following a call to any of the extract*Block\n+   * methods.\n+   */\n+  private static class ExtractionInfo {\n+    private final String string;\n+    private final JsDocToken token;\n+\n+    public ExtractionInfo(String string, JsDocToken token) {\n+      this.string \u003d string;\n+      this.token \u003d token;\n+    }\n+  }\n+\n+  /**\n+   * Extracts the text found on the current line starting at token. Note that\n+   * token \u003d token.info; should be called after this method is used to update\n+   * the token properly in the parser.\n+   *\n+   * @return The extraction information.\n+   */\n+  private ExtractionInfo extractSingleLineBlock() {\n+\n+    // Get the current starting point.\n+    stream.update();\n+    int lineno \u003d stream.getLineno();\n+    int charno \u003d stream.getCharno() + 1;\n+\n+    String line \u003d stream.getRemainingJSDocLine().trim();\n+\n+    // Record the textual description.\n+    if (line.length() \u003e 0) {\n+      jsdocBuilder.markText(line, lineno, charno, lineno,\n+                            charno + line.length());\n+    }\n+\n+    return new ExtractionInfo(line, next());\n+  }\n+\n+  private ExtractionInfo extractMultilineTextualBlock(JsDocToken token) {\n+    return extractMultilineTextualBlock(token, WhitespaceOption.SINGLE_LINE);\n+  }\n+\n+  private enum WhitespaceOption {\n+    /**\n+     * Preserves all whitespace and formatting. Needed for licenses and\n+     * purposely formatted text.\n+     */\n+    PRESERVE,\n+\n+    /** Preserves newlines but trims the output. */\n+    TRIM,\n+\n+    /** Removes newlines and turns the output into a single line string. */\n+    SINGLE_LINE\n+  }\n+\n+  /**\n+   * Extracts the text found on the current line and all subsequent\n+   * until either an annotation, end of comment or end of file is reached.\n+   * Note that if this method detects an end of line as the first token, it\n+   * will quit immediately (indicating that there is no text where it was\n+   * expected).  Note that token \u003d info.token; should be called after this\n+   * method is used to update the token properly in the parser.\n+   *\n+   * @param token The start token.\n+   * @param option How to handle whitespace.\n+   *\n+   * @return The extraction information.\n+   */\n+  @SuppressWarnings(\"fallthrough\")\n+  private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,\n+                                                      WhitespaceOption option) {\n+\n+    if (token \u003d\u003d JsDocToken.EOC || token \u003d\u003d JsDocToken.EOL ||\n+        token \u003d\u003d JsDocToken.EOF) {\n+      return new ExtractionInfo(\"\", token);\n+    }\n+\n+    stream.update();\n+    int startLineno \u003d stream.getLineno();\n+    int startCharno \u003d stream.getCharno() + 1;\n+\n+    // Read the content from the first line.\n+    String line \u003d stream.getRemainingJSDocLine();\n+\n+    if (option !\u003d WhitespaceOption.PRESERVE) {\n+      line \u003d line.trim();\n+    }\n+\n+    StringBuilder builder \u003d new StringBuilder();\n+    builder.append(line);\n+\n+    state \u003d State.SEARCHING_ANNOTATION;\n+    token \u003d next();\n+\n+    boolean ignoreStar \u003d false;\n+\n+    do {\n+      switch (token) {\n+        case STAR:\n+          if (!ignoreStar) {\n+            if (builder.length() \u003e 0) {\n+              builder.append(\u0027 \u0027);\n+            }\n+\n+            builder.append(\u0027*\u0027);\n+          }\n+\n+          token \u003d next();\n+          continue;\n+\n+        case EOL:\n+          if (option !\u003d WhitespaceOption.SINGLE_LINE) {\n+            builder.append(\"\\n\");\n+          }\n+\n+          ignoreStar \u003d true;\n+          token \u003d next();\n+          continue;\n+\n+        case ANNOTATION:\n+        case EOC:\n+        case EOF:\n+          // When we\u0027re capturing a license block, annotations\n+          // in the block are ok.\n+          if (!(option \u003d\u003d WhitespaceOption.PRESERVE \u0026\u0026\n+                token \u003d\u003d JsDocToken.ANNOTATION)) {\n+            String multilineText \u003d builder.toString();\n+\n+            if (option !\u003d WhitespaceOption.PRESERVE) {\n+              multilineText \u003d multilineText.trim();\n+            }\n+\n+            int endLineno \u003d stream.getLineno();\n+            int endCharno \u003d stream.getCharno();\n+\n+            if (multilineText.length() \u003e 0) {\n+              jsdocBuilder.markText(multilineText, startLineno, startCharno,\n+                  endLineno, endCharno);\n+            }\n+\n+            return new ExtractionInfo(multilineText, token);\n+          }\n+\n+          // FALL THROUGH\n+\n+        default:\n+          ignoreStar \u003d false;\n+          state \u003d State.SEARCHING_ANNOTATION;\n+\n+          if (builder.length() \u003e 0) {\n+            builder.append(\u0027 \u0027);\n+          }\n+\n+          builder.append(toString(token));\n+\n+          line \u003d stream.getRemainingJSDocLine();\n+\n+          if (option !\u003d WhitespaceOption.PRESERVE) {\n+            line \u003d trimEnd(line);\n+          }\n+\n+          builder.append(line);\n+          token \u003d next();\n+      }\n+    } while (true);\n+  }\n+\n+\n+  /**\n+   * Extracts the top-level block comment from the JsDoc comment, if any.\n+   * This method differs from the extractMultilineTextualBlock in that it\n+   * terminates under different conditions (it doesn\u0027t have the same\n+   * prechecks), it does not first read in the remaining of the current\n+   * line and its conditions for ignoring the \"*\" (STAR) are different.\n+   *\n+   * @param token The starting token.\n+   *\n+   * @return The extraction information.\n+   */\n+  private ExtractionInfo extractBlockComment(JsDocToken token) {\n+    StringBuilder builder \u003d new StringBuilder();\n+\n+    boolean ignoreStar \u003d true;\n+\n+    do {\n+      switch (token) {\n+        case ANNOTATION:\n+        case EOC:\n+        case EOF:\n+          return new ExtractionInfo(builder.toString().trim(), token);\n+\n+        case STAR:\n+          if (!ignoreStar) {\n+            if (builder.length() \u003e 0) {\n+              builder.append(\u0027 \u0027);\n+            }\n+\n+            builder.append(\u0027*\u0027);\n+          }\n+\n+          token \u003d next();\n+          continue;\n+\n+        case EOL:\n+          ignoreStar \u003d true;\n+          builder.append(\u0027\\n\u0027);\n+          token \u003d next();\n+          continue;\n+\n+        default:\n+          if (!ignoreStar \u0026\u0026 builder.length() \u003e 0) {\n+            builder.append(\u0027 \u0027);\n+          }\n+\n+          ignoreStar \u003d false;\n+\n+          builder.append(toString(token));\n+\n+          String line \u003d stream.getRemainingJSDocLine();\n+          line \u003d trimEnd(line);\n+          builder.append(line);\n+          token \u003d next();\n+      }\n+    } while (true);\n+  }\n+\n+  /**\n+   * Trim characters from only the end of a string.\n+   * This method will remove all whitespace characters\n+   * (defined by Character.isWhitespace(char), in addition to the characters\n+   * provided, from the end of the provided string.\n+   *\n+   * @param s String to be trimmed\n+   * @return String with whitespace and characters in extraChars removed\n+   *                   from the end.\n+   */\n+  private static String trimEnd(String s) {\n+    int trimCount \u003d 0;\n+    while (trimCount \u003c s.length()) {\n+      char ch \u003d s.charAt(s.length() - trimCount - 1);\n+      if (Character.isWhitespace(ch)) {\n+        trimCount++;\n+      } else {\n+        break;\n+      }\n+    }\n+\n+    if (trimCount \u003d\u003d 0) {\n+      return s;\n+    }\n+    return s.substring(0, s.length() - trimCount);\n+  }\n+\n+  // Based on ES4 grammar proposed on July 10, 2008.\n+  // http://wiki.ecmascript.org/doku.php?id\u003dspec:spec\n+  // Deliberately written to line up with the actual grammar rules,\n+  // for maximum flexibility.\n+\n+  // TODO(nicksantos): The current implementation tries to maintain backwards\n+  // compatibility with previous versions of the spec whenever we can.\n+  // We should try to gradually withdraw support for these.\n+\n+  /**\n+   * TypeExpressionAnnotation :\u003d TypeExpression |\n+   *     \u0027{\u0027 TopLevelTypeExpression \u0027}\u0027\n+   */\n+  private Node parseTypeExpressionAnnotation(JsDocToken token) {\n+    if (token \u003d\u003d JsDocToken.LC) {\n+      skipEOLs();\n+      Node typeNode \u003d parseTopLevelTypeExpression(next());\n+      if (typeNode !\u003d null) {\n+        skipEOLs();\n+        if (!match(JsDocToken.RC)) {\n+          reportTypeSyntaxWarning(\"msg.jsdoc.missing.rc\");\n+        } else {\n+          next();\n+        }\n+      }\n+\n+      return typeNode;\n+    } else {\n+      return parseTypeExpression(token);\n+    }\n+  }\n+\n+  /**\n+   * ParamTypeExpressionAnnotation :\u003d\n+   *     \u0027{\u0027 OptionalParameterType \u0027}\u0027 |\n+   *     \u0027{\u0027 TopLevelTypeExpression \u0027}\u0027 |\n+   *     \u0027{\u0027 \u0027...\u0027 TopLevelTypeExpression \u0027}\u0027\n+   *\n+   * OptionalParameterType :\u003d\n+   *     TopLevelTypeExpression \u0027\u003d\u0027\n+   */\n+  private Node parseParamTypeExpressionAnnotation(JsDocToken token) {\n+    Preconditions.checkArgument(token \u003d\u003d JsDocToken.LC);\n+\n+    skipEOLs();\n+\n+    boolean restArg \u003d false;\n+    token \u003d next();\n+    if (token \u003d\u003d JsDocToken.ELLIPSIS) {\n+      token \u003d next();\n+      if (token \u003d\u003d JsDocToken.RC) {\n+        // EMPTY represents the UNKNOWN type in the Type AST.\n+        return wrapNode(Token.ELLIPSIS, new Node(Token.EMPTY));\n+      }\n+      restArg \u003d true;\n+    }\n+\n+    Node typeNode \u003d parseTopLevelTypeExpression(token);\n+    if (typeNode !\u003d null) {\n+      skipEOLs();\n+      if (restArg) {\n+        typeNode \u003d wrapNode(Token.ELLIPSIS, typeNode);\n+      } else if (match(JsDocToken.EQUALS)) {\n+        next();\n+        skipEOLs();\n+        typeNode \u003d wrapNode(Token.EQUALS, typeNode);\n+      }\n+\n+      if (!match(JsDocToken.RC)) {\n+        reportTypeSyntaxWarning(\"msg.jsdoc.missing.rc\");\n+      } else {\n+        next();\n+      }\n+    }\n+\n+    return typeNode;\n+  }\n+\n+  /**\n+   * TypeNameAnnotation :\u003d TypeName | \u0027{\u0027 TypeName \u0027}\u0027\n+   */\n+  private Node parseTypeNameAnnotation(JsDocToken token) {\n+    if (token \u003d\u003d JsDocToken.LC) {\n+      skipEOLs();\n+      Node typeNode \u003d parseTypeName(next());\n+      if (typeNode !\u003d null) {\n+        skipEOLs();\n+        if (!match(JsDocToken.RC)) {\n+          reportTypeSyntaxWarning(\"msg.jsdoc.missing.rc\");\n+        } else {\n+          next();\n+        }\n+      }\n+\n+      return typeNode;\n+    } else {\n+      return parseTypeName(token);\n+    }\n+  }\n+\n+  /**\n+   * TopLevelTypeExpression :\u003d TypeExpression\n+   *     | TypeUnionList\n+   *\n+   * We made this rule up, for the sake of backwards compatibility.\n+   */\n+  private Node parseTopLevelTypeExpression(JsDocToken token) {\n+    Node typeExpr \u003d parseTypeExpression(token);\n+    if (typeExpr !\u003d null) {\n+      // top-level unions are allowed\n+      if (match(JsDocToken.PIPE)) {\n+        next();\n+        if (match(JsDocToken.PIPE)) {\n+          // We support double pipes for backwards-compatibility.\n+          next();\n+        }\n+        skipEOLs();\n+        token \u003d next();\n+        return parseUnionTypeWithAlternate(token, typeExpr);\n+      }\n+    }\n+    return typeExpr;\n+  }\n+\n+  /**\n+   * TypeExpressionList :\u003d TopLevelTypeExpression\n+   *     | TopLevelTypeExpression \u0027,\u0027 TypeExpressionList\n+   */\n+  private Node parseTypeExpressionList(JsDocToken token) {\n+    Node typeExpr \u003d parseTopLevelTypeExpression(token);\n+    if (typeExpr \u003d\u003d null) {\n+      return null;\n+    }\n+    Node typeList \u003d new Node(Token.BLOCK);\n+    typeList.addChildToBack(typeExpr);\n+    while (match(JsDocToken.COMMA)) {\n+      next();\n+      skipEOLs();\n+      typeExpr \u003d parseTopLevelTypeExpression(next());\n+      if (typeExpr \u003d\u003d null) {\n+        return null;\n+      }\n+      typeList.addChildToBack(typeExpr);\n+    }\n+    return typeList;\n+  }\n+\n+  /**\n+   * TypeExpression :\u003d BasicTypeExpression\n+   *     | \u0027?\u0027 BasicTypeExpression\n+   *     | \u0027!\u0027 BasicTypeExpression\n+   *     | BasicTypeExpression \u0027?\u0027\n+   *     | BasicTypeExpression \u0027!\u0027\n+   *     | \u0027?\u0027\n+   */\n+  private Node parseTypeExpression(JsDocToken token) {\n+    if (token \u003d\u003d JsDocToken.QMARK) {\n+      // A QMARK could mean that a type is nullable, or that it\u0027s unknown.\n+      // We use look-ahead 1 to determine whether it\u0027s unknown. Otherwise,\n+      // we assume it means nullable. There are 5 cases:\n+      // {?} - right curly\n+      // {?\u003d} - equals\n+      // {function(?, number)} - comma\n+      // {function(number, ?)} - right paren\n+      // {function(): ?|number} - pipe\n+      // I\u0027m not a big fan of using look-ahead for this, but it makes\n+      // the type language a lot nicer.\n+      token \u003d next();\n+      if (token \u003d\u003d JsDocToken.COMMA ||\n+          token \u003d\u003d JsDocToken.EQUALS ||\n+          token \u003d\u003d JsDocToken.RC ||\n+          token \u003d\u003d JsDocToken.RP ||\n+          token \u003d\u003d JsDocToken.PIPE) {\n+        restoreLookAhead(token);\n+        return newNode(Token.QMARK);\n+      }\n+\n+      return wrapNode(Token.QMARK, parseBasicTypeExpression(token));\n+    } else if (token \u003d\u003d JsDocToken.BANG) {\n+      return wrapNode(Token.BANG, parseBasicTypeExpression(next()));\n+    } else {\n+      Node basicTypeExpr \u003d parseBasicTypeExpression(token);\n+      if (basicTypeExpr !\u003d null) {\n+        if (match(JsDocToken.QMARK)) {\n+          next();\n+          return wrapNode(Token.QMARK, basicTypeExpr);\n+        } else if (match(JsDocToken.BANG)) {\n+          next();\n+          return wrapNode(Token.BANG, basicTypeExpr);\n+        }\n+      }\n+\n+      return basicTypeExpr;\n+    }\n+  }\n+\n+  /**\n+   * BasicTypeExpression :\u003d \u0027*\u0027 | \u0027null\u0027 | \u0027undefined\u0027 | TypeName\n+   *     | FunctionType | UnionType | RecordType | ArrayType\n+   */\n+  private Node parseBasicTypeExpression(JsDocToken token) {\n+    if (token \u003d\u003d JsDocToken.STAR) {\n+      return newNode(Token.STAR);\n+    } else if (token \u003d\u003d JsDocToken.LB) {\n+      skipEOLs();\n+      return parseArrayType(next());\n+    } else if (token \u003d\u003d JsDocToken.LC) {\n+      skipEOLs();\n+      return parseRecordType(next());\n+    } else if (token \u003d\u003d JsDocToken.LP) {\n+      skipEOLs();\n+      return parseUnionType(next());\n+    } else if (token \u003d\u003d JsDocToken.STRING) {\n+      String string \u003d stream.getString();\n+      if (\"function\".equals(string)) {\n+        skipEOLs();\n+        return parseFunctionType(next());\n+      } else if (\"null\".equals(string) || \"undefined\".equals(string)) {\n+        return newStringNode(string);\n+      } else {\n+        return parseTypeName(token);\n+      }\n+    }\n+\n+    return reportGenericTypeSyntaxWarning();\n+  }\n+\n+  /**\n+   * TypeName :\u003d NameExpression | NameExpression TypeApplication\n+   * TypeApplication :\u003d \u0027.\u003c\u0027 TypeExpressionList \u0027\u003e\u0027\n+   * TypeExpressionList :\u003d TypeExpression // a white lie\n+   */\n+  private Node parseTypeName(JsDocToken token) {\n+    if (token !\u003d JsDocToken.STRING) {\n+      return reportGenericTypeSyntaxWarning();\n+    }\n+\n+    Node typeName \u003d newStringNode(stream.getString());\n+    if (match(JsDocToken.LT)) {\n+      next();\n+      skipEOLs();\n+      Node memberType \u003d parseTypeExpressionList(next());\n+      if (memberType !\u003d null) {\n+        typeName.addChildToFront(memberType);\n+\n+        skipEOLs();\n+        if (!match(JsDocToken.GT)) {\n+          return reportTypeSyntaxWarning(\"msg.jsdoc.missing.gt\");\n+        }\n+\n+        next();\n+      }\n+    }\n+    return typeName;\n+  }\n+\n+  /**\n+   * FunctionType :\u003d \u0027function\u0027 FunctionSignatureType\n+   * FunctionSignatureType :\u003d\n+   *    TypeParameters \u0027(\u0027 \u0027this\u0027 \u0027:\u0027 TypeName, ParametersType \u0027)\u0027 ResultType\n+   */\n+  private Node parseFunctionType(JsDocToken token) {\n+    // NOTE(nicksantos): We\u0027re not implementing generics at the moment, so\n+    // just throw out TypeParameters.\n+    if (token !\u003d JsDocToken.LP) {\n+      return reportTypeSyntaxWarning(\"msg.jsdoc.missing.lp\");\n+    }\n+\n+    Node functionType \u003d newNode(Token.FUNCTION);\n+    Node parameters \u003d null;\n+    skipEOLs();\n+    if (!match(JsDocToken.RP)) {\n+      token \u003d next();\n+\n+      boolean hasParams \u003d true;\n+      if (token \u003d\u003d JsDocToken.STRING \u0026\u0026 \"this\".equals(stream.getString())) {\n+        if (match(JsDocToken.COLON)) {\n+          next();\n+          skipEOLs();\n+          Node thisType \u003d wrapNode(Token.THIS, parseTypeName(next()));\n+          if (thisType \u003d\u003d null) {\n+            return null;\n+          }\n+\n+          functionType.addChildToFront(thisType);\n+        } else {\n+          return reportTypeSyntaxWarning(\"msg.jsdoc.missing.colon\");\n+        }\n+\n+        if (match(JsDocToken.COMMA)) {\n+          next();\n+          skipEOLs();\n+          token \u003d next();\n+        } else {\n+          hasParams \u003d false;\n+        }\n+      }\n+\n+      if (hasParams) {\n+        parameters \u003d parseParametersType(token);\n+        if (parameters \u003d\u003d null) {\n+          return null;\n+        }\n+      }\n+    }\n+\n+    if (parameters !\u003d null) {\n+      functionType.addChildToBack(parameters);\n+    }\n+\n+    skipEOLs();\n+    if (!match(JsDocToken.RP)) {\n+      return reportTypeSyntaxWarning(\"msg.jsdoc.missing.rp\");\n+    }\n+\n+    skipEOLs();\n+    Node resultType \u003d parseResultType(next());\n+    if (resultType \u003d\u003d null) {\n+      return null;\n+    } else {\n+      functionType.addChildToBack(resultType);\n+    }\n+    return functionType;\n+  }\n+\n+  /**\n+   * ParametersType :\u003d RestParameterType | NonRestParametersType\n+   *     | NonRestParametersType \u0027,\u0027 RestParameterType\n+   * RestParameterType :\u003d \u0027...\u0027 Identifier\n+   * NonRestParametersType :\u003d ParameterType \u0027,\u0027 NonRestParametersType\n+   *     | ParameterType\n+   *     | OptionalParametersType\n+   * OptionalParametersType :\u003d OptionalParameterType\n+   *     | OptionalParameterType, OptionalParametersType\n+   * OptionalParameterType :\u003d ParameterType\u003d\n+   * ParameterType :\u003d TypeExpression | Identifier \u0027:\u0027 TypeExpression\n+   */\n+  // NOTE(nicksantos): The official ES4 grammar forces optional and rest\n+  // arguments to come after the required arguments. Our parser does not\n+  // enforce this. Instead we allow them anywhere in the function at parse-time,\n+  // and then warn about them during type resolution.\n+  //\n+  // In theory, it might be mathematically nicer to do the order-checking here.\n+  // But in practice, the order-checking for structural functions is exactly\n+  // the same as the order-checking for @param annotations. And the latter\n+  // has to happen during type resolution. Rather than duplicate the\n+  // order-checking in two places, we just do all of it in type resolution.\n+  private Node parseParametersType(JsDocToken token) {\n+    Node paramsType \u003d newNode(Token.LP);\n+    boolean isVarArgs \u003d false;\n+    Node paramType \u003d null;\n+    if (token !\u003d JsDocToken.RP) {\n+      do {\n+        if (paramType !\u003d null) {\n+          // skip past the comma\n+          next();\n+          skipEOLs();\n+          token \u003d next();\n+        }\n+\n+        if (token \u003d\u003d JsDocToken.ELLIPSIS) {\n+          // In the latest ES4 proposal, there are no type constraints allowed\n+          // on variable arguments. We support the old syntax for backwards\n+          // compatibility, but we should gradually tear it out.\n+          skipEOLs();\n+          if (match(JsDocToken.RP)) {\n+            paramType \u003d newNode(Token.ELLIPSIS);\n+          } else {\n+            skipEOLs();\n+            if (!match(JsDocToken.LB)) {\n+              return reportTypeSyntaxWarning(\"msg.jsdoc.missing.lb\");\n+            }\n+\n+            next();\n+            skipEOLs();\n+            paramType \u003d wrapNode(Token.ELLIPSIS, parseTypeExpression(next()));\n+            skipEOLs();\n+            if (!match(JsDocToken.RB)) {\n+              return reportTypeSyntaxWarning(\"msg.jsdoc.missing.rb\");\n+            }\n+            skipEOLs();\n+            next();\n+          }\n+\n+          isVarArgs \u003d true;\n+        } else {\n+          paramType \u003d parseTypeExpression(token);\n+          if (match(JsDocToken.EQUALS)) {\n+            skipEOLs();\n+            next();\n+            paramType \u003d wrapNode(Token.EQUALS, paramType);\n+          }\n+        }\n+\n+        if (paramType \u003d\u003d null) {\n+          return null;\n+        }\n+        paramsType.addChildToBack(paramType);\n+        if (isVarArgs) {\n+          break;\n+        }\n+      } while (match(JsDocToken.COMMA));\n+    }\n+\n+    if (isVarArgs \u0026\u0026 match(JsDocToken.COMMA)) {\n+      return reportTypeSyntaxWarning(\"msg.jsdoc.function.varargs\");\n+    }\n+\n+    // The right paren will be checked by parseFunctionType\n+\n+    return paramsType;\n+  }\n+\n+  /**\n+   * ResultType :\u003d \u003cempty\u003e | \u0027:\u0027 void | \u0027:\u0027 TypeExpression\n+   */\n+  private Node parseResultType(JsDocToken token) {\n+    skipEOLs();\n+    if (!match(JsDocToken.COLON)) {\n+      return newNode(Token.EMPTY);\n+    }\n+\n+    token \u003d next();\n+    skipEOLs();\n+    if (match(JsDocToken.STRING) \u0026\u0026 \"void\".equals(stream.getString())) {\n+      next();\n+      return newNode(Token.VOID);\n+    } else {\n+      return parseTypeExpression(next());\n+    }\n+  }\n+\n+  /**\n+   * UnionType :\u003d \u0027(\u0027 TypeUnionList \u0027)\u0027\n+   * TypeUnionList :\u003d TypeExpression | TypeExpression \u0027|\u0027 TypeUnionList\n+   *\n+   * We\u0027ve removed the empty union type.\n+   */\n+  private Node parseUnionType(JsDocToken token) {\n+    return parseUnionTypeWithAlternate(token, null);\n+  }\n+\n+  /**\n+   * Create a new union type, with an alternate that has already been\n+   * parsed. The alternate may be null.\n+   */\n+  private Node parseUnionTypeWithAlternate(JsDocToken token, Node alternate) {\n+    Node union \u003d newNode(Token.PIPE);\n+    if (alternate !\u003d null) {\n+      union.addChildToBack(alternate);\n+    }\n+\n+    Node expr \u003d null;\n+    do {\n+      if (expr !\u003d null) {\n+        skipEOLs();\n+        token \u003d next();\n+        Preconditions.checkState(\n+            token \u003d\u003d JsDocToken.PIPE || token \u003d\u003d JsDocToken.COMMA);\n+\n+        boolean isPipe \u003d token \u003d\u003d JsDocToken.PIPE;\n+        if (isPipe \u0026\u0026 match(JsDocToken.PIPE)) {\n+          // We support double pipes for backwards compatiblity.\n+          next();\n+        }\n+        skipEOLs();\n+        token \u003d next();\n+      }\n+      expr \u003d parseTypeExpression(token);\n+      if (expr \u003d\u003d null) {\n+        return null;\n+      }\n+\n+      union.addChildToBack(expr);\n+      // We support commas for backwards compatiblity.\n+    } while (match(JsDocToken.PIPE, JsDocToken.COMMA));\n+\n+    if (alternate \u003d\u003d null) {\n+      skipEOLs();\n+      if (!match(JsDocToken.RP)) {\n+        return reportTypeSyntaxWarning(\"msg.jsdoc.missing.rp\");\n+      }\n+      next();\n+    }\n+    return union;\n+  }\n+\n+  /**\n+   * ArrayType :\u003d \u0027[\u0027 ElementTypeList \u0027]\u0027\n+   * ElementTypeList :\u003d \u003cempty\u003e | TypeExpression | \u0027...\u0027 TypeExpression\n+   *     | TypeExpression \u0027,\u0027 ElementTypeList\n+   */\n+  private Node parseArrayType(JsDocToken token) {\n+    Node array \u003d newNode(Token.LB);\n+    Node arg \u003d null;\n+    boolean hasVarArgs \u003d false;\n+\n+    do {\n+      if (arg !\u003d null) {\n+        next();\n+        skipEOLs();\n+        token \u003d next();\n+      }\n+      if (token \u003d\u003d JsDocToken.ELLIPSIS) {\n+        arg \u003d wrapNode(Token.ELLIPSIS, parseTypeExpression(next()));\n+        hasVarArgs \u003d true;\n+      } else {\n+        arg \u003d parseTypeExpression(token);\n+      }\n+\n+      if (arg \u003d\u003d null) {\n+        return null;\n+      }\n+\n+      array.addChildToBack(arg);\n+      if (hasVarArgs) {\n+        break;\n+      }\n+      skipEOLs();\n+    } while (match(JsDocToken.COMMA));\n+\n+    if (!match(JsDocToken.RB)) {\n+      return reportTypeSyntaxWarning(\"msg.jsdoc.missing.rb\");\n+    }\n+    next();\n+    return array;\n+  }\n+\n+  /**\n+   * RecordType :\u003d \u0027{\u0027 FieldTypeList \u0027}\u0027\n+   */\n+  private Node parseRecordType(JsDocToken token) {\n+    Node recordType \u003d newNode(Token.LC);\n+    Node fieldTypeList \u003d parseFieldTypeList(token);\n+\n+    if (fieldTypeList \u003d\u003d null) {\n+      return reportGenericTypeSyntaxWarning();\n+    }\n+\n+    skipEOLs();\n+    if (!match(JsDocToken.RC)) {\n+      return reportTypeSyntaxWarning(\"msg.jsdoc.missing.rc\");\n+    }\n+\n+    next();\n+\n+    recordType.addChildToBack(fieldTypeList);\n+    return recordType;\n+  }\n+\n+  /**\n+   * FieldTypeList :\u003d FieldType | FieldType \u0027,\u0027 FieldTypeList\n+   */\n+  private Node parseFieldTypeList(JsDocToken token) {\n+    Node fieldTypeList \u003d newNode(Token.LB);\n+\n+    do {\n+      Node fieldType \u003d parseFieldType(token);\n+\n+      if (fieldType \u003d\u003d null) {\n+        return null;\n+      }\n+\n+      fieldTypeList.addChildToBack(fieldType);\n+\n+      skipEOLs();\n+      if (!match(JsDocToken.COMMA)) {\n+        break;\n+      }\n+\n+      // Move to the comma token.\n+      next();\n+\n+      // Move to the token passed the comma.\n+      skipEOLs();\n+      token \u003d next();\n+    } while (true);\n+\n+    return fieldTypeList;\n+  }\n+\n+  /**\n+   * FieldType :\u003d FieldName | FieldName \u0027:\u0027 TypeExpression\n+   */\n+  private Node parseFieldType(JsDocToken token) {\n+    Node fieldName \u003d parseFieldName(token);\n+\n+    if (fieldName \u003d\u003d null) {\n+      return null;\n+    }\n+\n+    skipEOLs();\n+    if (!match(JsDocToken.COLON)) {\n+      return fieldName;\n+    }\n+\n+    // Move to the colon.\n+    next();\n+\n+    // Move to the token after the colon and parse\n+    // the type expression.\n+    skipEOLs();\n+    Node typeExpression \u003d parseTypeExpression(next());\n+\n+    if (typeExpression \u003d\u003d null) {\n+      return null;\n+    }\n+\n+    Node fieldType \u003d newNode(Token.COLON);\n+    fieldType.addChildToBack(fieldName);\n+    fieldType.addChildToBack(typeExpression);\n+    return fieldType;\n+  }\n+\n+  /**\n+   * FieldName :\u003d NameExpression | StringLiteral | NumberLiteral |\n+   * ReservedIdentifier\n+   */\n+  private Node parseFieldName(JsDocToken token) {\n+    switch (token) {\n+      case STRING:\n+        String string \u003d stream.getString();\n+        return newStringNode(string);\n+\n+      default:\n+        return null;\n+    }\n+  }\n+\n+  private Node wrapNode(int type, Node n) {\n+    return n \u003d\u003d null ? null :\n+        new Node(type, n, stream.getLineno(), stream.getCharno());\n+  }\n+\n+  private Node newNode(int type) {\n+    return new Node(type, stream.getLineno(), stream.getCharno());\n+  }\n+\n+  private Node newStringNode(String s) {\n+    return Node.newString(s, stream.getLineno(), stream.getCharno());\n+  }\n+\n+  private Node reportTypeSyntaxWarning(String warning) {\n+    parser.addWarning(warning, stream.getLineno(), stream.getCharno());\n+    return null;\n+  }\n+\n+  private Node reportGenericTypeSyntaxWarning() {\n+    return reportTypeSyntaxWarning(\"msg.jsdoc.type.syntax\");\n+  }\n+\n+  /**\n+   * Eats tokens until {@link JsDocToken#EOL} included, and switches back the\n+   * state to {@link State#SEARCHING_ANNOTATION}.\n+   */\n+  private JsDocToken eatTokensUntilEOL() {\n+    return eatTokensUntilEOL(next());\n+  }\n+\n+  /**\n+   * Eats tokens until {@link JsDocToken#EOL} included, and switches back the\n+   * state to {@link State#SEARCHING_ANNOTATION}.\n+   */\n+  private JsDocToken eatTokensUntilEOL(JsDocToken token) {\n+    do {\n+      if (token \u003d\u003d JsDocToken.EOL || token \u003d\u003d JsDocToken.EOC ||\n+          token \u003d\u003d JsDocToken.EOF) {\n+        state \u003d State.SEARCHING_ANNOTATION;\n+        return token;\n+      }\n+      token \u003d next();\n+    } while (true);\n+  }\n+\n+  /**\n+   * Specific value indicating that the {@link #unreadToken} contains no token.\n+   */\n+  private static final JsDocToken NO_UNREAD_TOKEN \u003d null;\n+\n+  /**\n+   * One token buffer.\n+   */\n+  private JsDocToken unreadToken \u003d NO_UNREAD_TOKEN;\n+\n+  /** Restores the lookahead token to the token stream */\n+  private void restoreLookAhead(JsDocToken token) {\n+    unreadToken \u003d token;\n+  }\n+\n+  /**\n+   * Tests whether the next symbol of the token stream matches the specific\n+   * token.\n+   */\n+  private boolean match(JsDocToken token) {\n+    unreadToken \u003d next();\n+    return unreadToken \u003d\u003d token;\n+  }\n+\n+  /**\n+   * Tests that the next symbol of the token stream matches one of the specified\n+   * tokens.\n+   */\n+  private boolean match(JsDocToken token1, JsDocToken token2) {\n+    unreadToken \u003d next();\n+    return unreadToken \u003d\u003d token1 || unreadToken \u003d\u003d token2;\n+  }\n+\n+  /**\n+   * Gets the next token of the token stream or the buffered token if a matching\n+   * was previously made.\n+   */\n+  private JsDocToken next() {\n+    if (unreadToken \u003d\u003d NO_UNREAD_TOKEN) {\n+      return stream.getJsDocToken();\n+    } else {\n+      return current();\n+    }\n+  }\n+\n+  /**\n+   * Gets the current token, invalidating it in the process.\n+   */\n+  private JsDocToken current() {\n+    JsDocToken t \u003d unreadToken;\n+    unreadToken \u003d NO_UNREAD_TOKEN;\n+    return t;\n+  }\n+\n+  /**\n+   * Skips all EOLs and all empty lines in the JSDoc. Call this method if you\n+   * want the JSDoc entry to span multiple lines.\n+   */\n+  private void skipEOLs() {\n+    while (match(JsDocToken.EOL)) {\n+      next();\n+      if (match(JsDocToken.STAR)) {\n+        next();\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Determines whether the parser has been populated with docinfo with a\n+   * fileoverview tag.\n+   */\n+  private boolean hasParsedFileOverviewDocInfo() {\n+    return jsdocBuilder.isPopulatedWithFileOverview();\n+  }\n+\n+  boolean hasParsedJSDocInfo() {\n+    return jsdocBuilder.isPopulated();\n+  }\n+\n+  JSDocInfo retrieveAndResetParsedJSDocInfo() {\n+    return jsdocBuilder.build(sourceName);\n+  }\n+\n+  /**\n+   * Gets the fileoverview JSDocInfo, if any.\n+   */\n+  JSDocInfo getFileOverviewJSDocInfo() {\n+    return fileOverviewJSDocInfo;\n+  }\n+}\n",
      "operations": [
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [36717,36771]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [36777,36833]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/jscomp/parsing/ParserRunner.java",
        "src/com/google/javascript/jscomp/parsing/ParserRunner.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [
            "com.google.javascript.jscomp.parsing.ParserRunner:createConfig:[boolean isIdeMode]:Config",
            "com.google.javascript.jscomp.parsing.ParserRunner:initResourceConfig:[]:void",
            "com.google.javascript.jscomp.parsing.ParserRunner:ParserRunner:[]:null",
            "com.google.javascript.jscomp.parsing.ParserRunner:extractList:[String configProp]:Set\u003cString\u003e",
            "com.google.javascript.jscomp.parsing.ParserRunner:parse:[String sourceName, String sourceString, Config config, ErrorReporter errorReporter, Logger logger]:Node"
          ],
          "num": 5
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "-1"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "35",
            "36",
            "37",
            "38",
            "39",
            "40",
            "41",
            "42",
            "43",
            "44",
            "45",
            "46",
            "47",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57",
            "58",
            "59",
            "60",
            "61",
            "62",
            "63",
            "64",
            "65",
            "66",
            "67",
            "68",
            "69",
            "70",
            "71",
            "72",
            "73",
            "74",
            "75",
            "76",
            "77",
            "78",
            "79",
            "80",
            "81",
            "82",
            "83",
            "84",
            "85",
            "86",
            "87",
            "88",
            "89",
            "90",
            "91",
            "92",
            "93",
            "94",
            "95",
            "96",
            "97",
            "98",
            "99",
            "100",
            "101",
            "102",
            "103",
            "104",
            "105",
            "106",
            "107",
            "108",
            "109",
            "110",
            "111",
            "112",
            "113",
            "114",
            "115"
          ],
          "num": 115
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/jscomp/parsing/ParserRunner.java b/src/com/google/javascript/jscomp/parsing/ParserRunner.java\nnew file mode 100644\nindex 0000000..72a6668\n--- /dev/null\n+++ b/src/com/google/javascript/jscomp/parsing/ParserRunner.java\n@@ -0,0 +1,115 @@\n+/*\n+ * Copyright 2009 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.javascript.jscomp.parsing;\n+\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Sets;\n+import com.google.javascript.jscomp.mozilla.rhino.CompilerEnvirons;\n+import com.google.javascript.jscomp.mozilla.rhino.Context;\n+import com.google.javascript.jscomp.mozilla.rhino.ErrorReporter;\n+import com.google.javascript.jscomp.mozilla.rhino.EvaluatorException;\n+import com.google.javascript.jscomp.mozilla.rhino.Parser;\n+import com.google.javascript.jscomp.mozilla.rhino.ast.AstRoot;\n+import com.google.javascript.rhino.Node;\n+\n+import java.io.IOException;\n+import java.util.ResourceBundle;\n+import java.util.Set;\n+import java.util.logging.Logger;\n+\n+public class ParserRunner {\n+\n+  private static final String configResource \u003d\n+      \"com.google.javascript.jscomp.parsing.ParserConfig\";\n+\n+  private static Set\u003cString\u003e annotationNames \u003d null;\n+\n+  private static Set\u003cString\u003e suppressionNames \u003d null;\n+\n+  // Should never need to instantiate class of static methods.\n+  private ParserRunner() {}\n+\n+  public static Config createConfig(boolean isIdeMode) {\n+    initResourceConfig();\n+    return new Config(annotationNames, suppressionNames, isIdeMode);\n+  }\n+\n+  private static synchronized void initResourceConfig() {\n+    if (annotationNames !\u003d null) {\n+      return;\n+    }\n+\n+    ResourceBundle config \u003d ResourceBundle.getBundle(configResource);\n+    annotationNames \u003d extractList(config.getString(\"jsdoc.annotations\"));\n+    suppressionNames \u003d extractList(config.getString(\"jsdoc.suppressions\"));\n+  }\n+\n+  private static Set\u003cString\u003e extractList(String configProp) {\n+    String[] names \u003d configProp.split(\",\");\n+    Set\u003cString\u003e trimmedNames \u003d Sets.newHashSet();\n+    for (String name : names) {\n+      trimmedNames.add(name.trim());\n+    }\n+    return ImmutableSet.copyOf(trimmedNames);\n+  }\n+\n+  /**\n+   * Parses the JavaScript text given by a reader.\n+   *\n+   * @param sourceName The filename.\n+   * @param sourceString Source code from the file.\n+   * @param errorReporter An error.\n+   * @param logger A logger.\n+   * @return The AST of the given text.\n+   * @throws IOException\n+   */\n+  public static Node parse(String sourceName,\n+                           String sourceString,\n+                           Config config,\n+                           ErrorReporter errorReporter,\n+                           Logger logger) throws IOException {\n+    Context cx \u003d Context.enter();\n+    cx.setErrorReporter(errorReporter);\n+    cx.setLanguageVersion(Context.VERSION_1_5);\n+    CompilerEnvirons compilerEnv \u003d new CompilerEnvirons();\n+    compilerEnv.initFromContext(cx);\n+    compilerEnv.setRecordingComments(true);\n+    compilerEnv.setRecordingLocalJsDocComments(true);\n+    compilerEnv.setWarnTrailingComma(true);\n+    if (config.isIdeMode) {\n+      compilerEnv.setReservedKeywordAsIdentifier(true);\n+      compilerEnv.setAllowMemberExprAsFunctionName(true);\n+    }\n+\n+    Parser p \u003d new Parser(compilerEnv, errorReporter);\n+    AstRoot astRoot \u003d null;\n+    try {\n+      astRoot \u003d p.parse(sourceString, sourceName, 1);\n+    } catch (EvaluatorException e) {\n+      logger.info(\"Error parsing \" + sourceName + \": \" + e.getMessage());\n+    } finally {\n+      Context.exit();\n+    }\n+    Node root \u003d null;\n+    if (astRoot !\u003d null) {\n+      root \u003d IRFactory.transformTree(\n+          astRoot, sourceString, config, errorReporter);\n+      root.setIsSyntheticBlock(true);\n+    }\n+    return root;\n+  }\n+}\n",
      "operations": [
        {
          "type": "delete-tree",
          "from": "ImportDeclaration [1153,1210]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/rhino/jstype/FunctionPrototypeType.java",
        "src/com/google/javascript/rhino/jstype/FunctionPrototypeType.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [
            "com.google.javascript.rhino.jstype.FunctionPrototypeType:getReferenceName:[]:String",
            "com.google.javascript.rhino.jstype.FunctionPrototypeType:FunctionPrototypeType:[JSTypeRegistry registry, FunctionType ownerFunction, ObjectType implicitPrototype]:null",
            "com.google.javascript.rhino.jstype.FunctionPrototypeType:isFunctionPrototypeType:[]:boolean",
            "com.google.javascript.rhino.jstype.FunctionPrototypeType:getCtorImplementedInterfaces:[]:Iterable\u003cObjectType\u003e",
            "com.google.javascript.rhino.jstype.FunctionPrototypeType:FunctionPrototypeType:[JSTypeRegistry registry, FunctionType ownerFunction, ObjectType implicitPrototype, boolean isNative]:null",
            "com.google.javascript.rhino.jstype.FunctionPrototypeType:hasReferenceName:[]:boolean",
            "com.google.javascript.rhino.jstype.FunctionPrototypeType:getOwnerFunction:[]:FunctionType"
          ],
          "num": 7
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "-1"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "35",
            "36",
            "37",
            "38",
            "39",
            "40",
            "41",
            "42",
            "43",
            "44",
            "45",
            "46",
            "47",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57",
            "58",
            "59",
            "60",
            "61",
            "62",
            "63",
            "64",
            "65",
            "66",
            "67",
            "68",
            "69",
            "70",
            "71",
            "72",
            "73",
            "74",
            "75",
            "76",
            "77",
            "78",
            "79",
            "80",
            "81",
            "82",
            "83",
            "84",
            "85",
            "86",
            "87",
            "88",
            "89",
            "90",
            "91",
            "92",
            "93",
            "94",
            "95",
            "96",
            "97"
          ],
          "num": 97
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/rhino/jstype/FunctionPrototypeType.java b/src/com/google/javascript/rhino/jstype/FunctionPrototypeType.java\nnew file mode 100644\nindex 0000000..b4f44fe\n--- /dev/null\n+++ b/src/com/google/javascript/rhino/jstype/FunctionPrototypeType.java\n@@ -0,0 +1,97 @@\n+/*\n+ *\n+ * ***** BEGIN LICENSE BLOCK *****\n+ * Version: MPL 1.1/GPL 2.0\n+ *\n+ * The contents of this file are subject to the Mozilla Public License Version\n+ * 1.1 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ * http://www.mozilla.org/MPL/\n+ *\n+ * Software distributed under the License is distributed on an \"AS IS\" basis,\n+ * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n+ * for the specific language governing rights and limitations under the\n+ * License.\n+ *\n+ * The Original Code is Rhino code, released\n+ * May 6, 1999.\n+ *\n+ * The Initial Developer of the Original Code is\n+ * Netscape Communications Corporation.\n+ * Portions created by the Initial Developer are Copyright (C) 1997-1999\n+ * the Initial Developer. All Rights Reserved.\n+ *\n+ * Contributor(s):\n+ *   Bob Jervis\n+ *   Google Inc.\n+ *\n+ * Alternatively, the contents of this file may be used under the terms of\n+ * the GNU General Public License Version 2 or later (the \"GPL\"), in which\n+ * case the provisions of the GPL are applicable instead of those above. If\n+ * you wish to allow use of your version of this file only under the terms of\n+ * the GPL and not to allow others to use your version of this file under the\n+ * MPL, indicate your decision by deleting the provisions above and replacing\n+ * them with the notice and other provisions required by the GPL. If you do\n+ * not delete the provisions above, a recipient may use your version of this\n+ * file under either the MPL or the GPL.\n+ *\n+ * ***** END LICENSE BLOCK ***** */\n+\n+package com.google.javascript.rhino.jstype;\n+\n+import com.google.javascript.rhino.jstype.ObjectType;\n+\n+/**\n+ * Represents the prototype of a {@link FunctionType}.\n+ * @author nicksantos@google.com (Nick Santos)\n+ */\n+public class FunctionPrototypeType extends PrototypeObjectType {\n+  private static final long serialVersionUID \u003d 1L;\n+\n+  private final FunctionType ownerFunction;\n+\n+  FunctionPrototypeType(JSTypeRegistry registry, FunctionType ownerFunction,\n+      ObjectType implicitPrototype, boolean isNative) {\n+    super(registry, null /* has no class name */, implicitPrototype,\n+        isNative);\n+    this.ownerFunction \u003d ownerFunction;\n+  }\n+\n+  FunctionPrototypeType(JSTypeRegistry registry, FunctionType ownerFunction,\n+      ObjectType implicitPrototype) {\n+    this(registry, ownerFunction, implicitPrototype, false);\n+  }\n+\n+  @Override\n+  public String getReferenceName() {\n+    if (ownerFunction \u003d\u003d null) {\n+      return \"{...}.prototype\";\n+    } else {\n+      return ownerFunction.getReferenceName() + \".prototype\";\n+    }\n+  }\n+\n+  @Override\n+  public boolean hasReferenceName() {\n+    return ownerFunction !\u003d null \u0026\u0026 ownerFunction.hasReferenceName();\n+  }\n+\n+  @Override\n+  public boolean isFunctionPrototypeType() {\n+    return true;\n+  }\n+\n+  public FunctionType getOwnerFunction() {\n+    return ownerFunction;\n+  }\n+\n+  @Override\n+  public Iterable\u003cObjectType\u003e getCtorImplementedInterfaces() {\n+    return getOwnerFunction().getImplementedInterfaces();\n+  }\n+\n+  // The owner will always be a resolved type, so there\u0027s no need to set\n+  // the ownerFunction in resolveInternal.\n+  // (it would lead to infinite loops if we did).\n+  // JSType resolveInternal(ErrorReporter t, StaticScope\u003cJSType\u003e scope);\n+}\n",
      "operations": [
        {
          "type": "delete-tree",
          "from": "ImportDeclaration [1628,1677]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ImportDeclaration [1733,1755]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ImportDeclaration [1756,1777]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "src/com/google/javascript/rhino/jstype/FunctionType.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [
            "com.google.javascript.rhino.jstype.FunctionType:isPropertyTypeInferred:[String property]:boolean",
            "com.google.javascript.rhino.jstype.FunctionType:FunctionType:[JSTypeRegistry registry, String name, Node source, ArrowType arrowType, ObjectType typeOfThis, String templateTypeName, boolean isConstructor, boolean nativeType]:null",
            "com.google.javascript.rhino.jstype.FunctionType:hasUnknownSupertype:[]:boolean",
            "com.google.javascript.rhino.jstype.FunctionType:setInstanceType:[ObjectType instanceType]:void",
            "com.google.javascript.rhino.jstype.FunctionType:getReturnType:[]:JSType",
            "com.google.javascript.rhino.jstype.FunctionType:setImplementedInterfaces:[List\u003cObjectType\u003e implementedInterfaces]:void",
            "com.google.javascript.rhino.jstype.FunctionType:hasOwnProperty:[String name]:boolean",
            "com.google.javascript.rhino.jstype.FunctionType:forInterface:[JSTypeRegistry registry, String name, Node source]:FunctionType",
            "com.google.javascript.rhino.jstype.FunctionType:isInstanceType:[]:boolean",
            "com.google.javascript.rhino.jstype.FunctionType:setSource:[Node source]:void",
            "com.google.javascript.rhino.jstype.FunctionType:isReturnTypeInferred:[]:boolean",
            "com.google.javascript.rhino.jstype.FunctionType:hasProperty:[String name]:boolean",
            "com.google.javascript.rhino.jstype.FunctionType:canBeCalled:[]:boolean",
            "com.google.javascript.rhino.jstype.FunctionType:hasCachedValues:[]:boolean",
            "com.google.javascript.rhino.jstype.FunctionType:isSubtype:[JSType that]:boolean",
            "com.google.javascript.rhino.jstype.FunctionType:hasEqualCallType:[FunctionType otherType]:boolean",
            "com.google.javascript.rhino.jstype.FunctionType:getMaxArguments:[]:int",
            "com.google.javascript.rhino.jstype.FunctionType:appendVarArgsString:[StringBuilder builder, JSType paramType]:void",
            "com.google.javascript.rhino.jstype.FunctionType:getGreatestSubtype:[JSType that]:JSType",
            "com.google.javascript.rhino.jstype.FunctionType:isFunctionType:[]:boolean",
            "com.google.javascript.rhino.jstype.FunctionType:getParameters:[]:Iterable\u003cNode\u003e",
            "com.google.javascript.rhino.jstype.FunctionType:getPrototype:[]:FunctionPrototypeType",
            "com.google.javascript.rhino.jstype.FunctionType:isOrdinaryFunction:[]:boolean",
            "com.google.javascript.rhino.jstype.FunctionType:setPrototypeBasedOn:[ObjectType baseType]:void",
            "com.google.javascript.rhino.jstype.FunctionType:toString:[]:String",
            "com.google.javascript.rhino.jstype.FunctionType:addRelatedInterfaces:[ObjectType instance, Set\u003cObjectType\u003e set]:void",
            "com.google.javascript.rhino.jstype.FunctionType:getTypeOfThis:[]:ObjectType",
            "com.google.javascript.rhino.jstype.FunctionType:defineProperty:[String name, JSType type, boolean inferred, boolean inExterns]:boolean",
            "com.google.javascript.rhino.jstype.FunctionType:supAndInfHelper:[JSType that, boolean leastSuper]:JSType",
            "com.google.javascript.rhino.jstype.FunctionType:setPrototype:[FunctionPrototypeType prototype]:boolean",
            "com.google.javascript.rhino.jstype.FunctionType:getSubTypes:[]:List\u003cFunctionType\u003e",
            "com.google.javascript.rhino.jstype.FunctionType:getInternalArrowType:[]:ArrowType",
            "com.google.javascript.rhino.jstype.FunctionType:getDebugHashCodeStringOf:[JSType type]:String",
            "com.google.javascript.rhino.jstype.FunctionType:resolveInternal:[ErrorReporter t, StaticScope\u003cJSType\u003e scope]:JSType",
            "com.google.javascript.rhino.jstype.FunctionType:getImplementedInterfaces:[]:Iterable\u003cObjectType\u003e",
            "com.google.javascript.rhino.jstype.FunctionType:getTopMostDefiningType:[String propertyName]:JSType",
            "com.google.javascript.rhino.jstype.FunctionType:getSource:[]:Node",
            "com.google.javascript.rhino.jstype.FunctionType:getTemplateTypeName:[]:String",
            "com.google.javascript.rhino.jstype.FunctionType:getLeastSupertype:[JSType that]:JSType",
            "com.google.javascript.rhino.jstype.FunctionType:getParametersNode:[]:Node",
            "com.google.javascript.rhino.jstype.FunctionType:getAllImplementedInterfaces:[]:Iterable\u003cObjectType\u003e",
            "com.google.javascript.rhino.jstype.FunctionType:isEquivalentTo:[JSType otherType]:boolean",
            "com.google.javascript.rhino.jstype.FunctionType:FunctionType:[JSTypeRegistry registry, String name, Node source]:null",
            "com.google.javascript.rhino.jstype.FunctionType:isConstructor:[]:boolean",
            "com.google.javascript.rhino.jstype.FunctionType:toDebugHashCodeString:[]:String",
            "com.google.javascript.rhino.jstype.FunctionType:getSuperClassConstructor:[]:FunctionType",
            "com.google.javascript.rhino.jstype.FunctionType:addSubType:[FunctionType subType]:void",
            "com.google.javascript.rhino.jstype.FunctionType:getInstanceType:[]:ObjectType",
            "com.google.javascript.rhino.jstype.FunctionType:isInterface:[]:boolean",
            "com.google.javascript.rhino.jstype.FunctionType:getPropertyType:[String name]:JSType",
            "com.google.javascript.rhino.jstype.FunctionType:getMinArguments:[]:int",
            "com.google.javascript.rhino.jstype.FunctionType:visit:[Visitor\u003cT\u003e visitor]:T",
            "com.google.javascript.rhino.jstype.FunctionType:hashCode:[]:int",
            "com.google.javascript.rhino.jstype.FunctionType:hasInstanceType:[]:boolean"
          ],
          "num": 54
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "-1"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "35",
            "36",
            "37",
            "38",
            "39",
            "40",
            "41",
            "42",
            "43",
            "44",
            "45",
            "46",
            "47",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57",
            "58",
            "59",
            "60",
            "61",
            "62",
            "63",
            "64",
            "65",
            "66",
            "67",
            "68",
            "69",
            "70",
            "71",
            "72",
            "73",
            "74",
            "75",
            "76",
            "77",
            "78",
            "79",
            "80",
            "81",
            "82",
            "83",
            "84",
            "85",
            "86",
            "87",
            "88",
            "89",
            "90",
            "91",
            "92",
            "93",
            "94",
            "95",
            "96",
            "97",
            "98",
            "99",
            "100",
            "101",
            "102",
            "103",
            "104",
            "105",
            "106",
            "107",
            "108",
            "109",
            "110",
            "111",
            "112",
            "113",
            "114",
            "115",
            "116",
            "117",
            "118",
            "119",
            "120",
            "121",
            "122",
            "123",
            "124",
            "125",
            "126",
            "127",
            "128",
            "129",
            "130",
            "131",
            "132",
            "133",
            "134",
            "135",
            "136",
            "137",
            "138",
            "139",
            "140",
            "141",
            "142",
            "143",
            "144",
            "145",
            "146",
            "147",
            "148",
            "149",
            "150",
            "151",
            "152",
            "153",
            "154",
            "155",
            "156",
            "157",
            "158",
            "159",
            "160",
            "161",
            "162",
            "163",
            "164",
            "165",
            "166",
            "167",
            "168",
            "169",
            "170",
            "171",
            "172",
            "173",
            "174",
            "175",
            "176",
            "177",
            "178",
            "179",
            "180",
            "181",
            "182",
            "183",
            "184",
            "185",
            "186",
            "187",
            "188",
            "189",
            "190",
            "191",
            "192",
            "193",
            "194",
            "195",
            "196",
            "197",
            "198",
            "199",
            "200",
            "201",
            "202",
            "203",
            "204",
            "205",
            "206",
            "207",
            "208",
            "209",
            "210",
            "211",
            "212",
            "213",
            "214",
            "215",
            "216",
            "217",
            "218",
            "219",
            "220",
            "221",
            "222",
            "223",
            "224",
            "225",
            "226",
            "227",
            "228",
            "229",
            "230",
            "231",
            "232",
            "233",
            "234",
            "235",
            "236",
            "237",
            "238",
            "239",
            "240",
            "241",
            "242",
            "243",
            "244",
            "245",
            "246",
            "247",
            "248",
            "249",
            "250",
            "251",
            "252",
            "253",
            "254",
            "255",
            "256",
            "257",
            "258",
            "259",
            "260",
            "261",
            "262",
            "263",
            "264",
            "265",
            "266",
            "267",
            "268",
            "269",
            "270",
            "271",
            "272",
            "273",
            "274",
            "275",
            "276",
            "277",
            "278",
            "279",
            "280",
            "281",
            "282",
            "283",
            "284",
            "285",
            "286",
            "287",
            "288",
            "289",
            "290",
            "291",
            "292",
            "293",
            "294",
            "295",
            "296",
            "297",
            "298",
            "299",
            "300",
            "301",
            "302",
            "303",
            "304",
            "305",
            "306",
            "307",
            "308",
            "309",
            "310",
            "311",
            "312",
            "313",
            "314",
            "315",
            "316",
            "317",
            "318",
            "319",
            "320",
            "321",
            "322",
            "323",
            "324",
            "325",
            "326",
            "327",
            "328",
            "329",
            "330",
            "331",
            "332",
            "333",
            "334",
            "335",
            "336",
            "337",
            "338",
            "339",
            "340",
            "341",
            "342",
            "343",
            "344",
            "345",
            "346",
            "347",
            "348",
            "349",
            "350",
            "351",
            "352",
            "353",
            "354",
            "355",
            "356",
            "357",
            "358",
            "359",
            "360",
            "361",
            "362",
            "363",
            "364",
            "365",
            "366",
            "367",
            "368",
            "369",
            "370",
            "371",
            "372",
            "373",
            "374",
            "375",
            "376",
            "377",
            "378",
            "379",
            "380",
            "381",
            "382",
            "383",
            "384",
            "385",
            "386",
            "387",
            "388",
            "389",
            "390",
            "391",
            "392",
            "393",
            "394",
            "395",
            "396",
            "397",
            "398",
            "399",
            "400",
            "401",
            "402",
            "403",
            "404",
            "405",
            "406",
            "407",
            "408",
            "409",
            "410",
            "411",
            "412",
            "413",
            "414",
            "415",
            "416",
            "417",
            "418",
            "419",
            "420",
            "421",
            "422",
            "423",
            "424",
            "425",
            "426",
            "427",
            "428",
            "429",
            "430",
            "431",
            "432",
            "433",
            "434",
            "435",
            "436",
            "437",
            "438",
            "439",
            "440",
            "441",
            "442",
            "443",
            "444",
            "445",
            "446",
            "447",
            "448",
            "449",
            "450",
            "451",
            "452",
            "453",
            "454",
            "455",
            "456",
            "457",
            "458",
            "459",
            "460",
            "461",
            "462",
            "463",
            "464",
            "465",
            "466",
            "467",
            "468",
            "469",
            "470",
            "471",
            "472",
            "473",
            "474",
            "475",
            "476",
            "477",
            "478",
            "479",
            "480",
            "481",
            "482",
            "483",
            "484",
            "485",
            "486",
            "487",
            "488",
            "489",
            "490",
            "491",
            "492",
            "493",
            "494",
            "495",
            "496",
            "497",
            "498",
            "499",
            "500",
            "501",
            "502",
            "503",
            "504",
            "505",
            "506",
            "507",
            "508",
            "509",
            "510",
            "511",
            "512",
            "513",
            "514",
            "515",
            "516",
            "517",
            "518",
            "519",
            "520",
            "521",
            "522",
            "523",
            "524",
            "525",
            "526",
            "527",
            "528",
            "529",
            "530",
            "531",
            "532",
            "533",
            "534",
            "535",
            "536",
            "537",
            "538",
            "539",
            "540",
            "541",
            "542",
            "543",
            "544",
            "545",
            "546",
            "547",
            "548",
            "549",
            "550",
            "551",
            "552",
            "553",
            "554",
            "555",
            "556",
            "557",
            "558",
            "559",
            "560",
            "561",
            "562",
            "563",
            "564",
            "565",
            "566",
            "567",
            "568",
            "569",
            "570",
            "571",
            "572",
            "573",
            "574",
            "575",
            "576",
            "577",
            "578",
            "579",
            "580",
            "581",
            "582",
            "583",
            "584",
            "585",
            "586",
            "587",
            "588",
            "589",
            "590",
            "591",
            "592",
            "593",
            "594",
            "595",
            "596",
            "597",
            "598",
            "599",
            "600",
            "601",
            "602",
            "603",
            "604",
            "605",
            "606",
            "607",
            "608",
            "609",
            "610",
            "611",
            "612",
            "613",
            "614",
            "615",
            "616",
            "617",
            "618",
            "619",
            "620",
            "621",
            "622",
            "623",
            "624",
            "625",
            "626",
            "627",
            "628",
            "629",
            "630",
            "631",
            "632",
            "633",
            "634",
            "635",
            "636",
            "637",
            "638",
            "639",
            "640",
            "641",
            "642",
            "643",
            "644",
            "645",
            "646",
            "647",
            "648",
            "649",
            "650",
            "651",
            "652",
            "653",
            "654",
            "655",
            "656",
            "657",
            "658",
            "659",
            "660",
            "661",
            "662",
            "663",
            "664",
            "665",
            "666",
            "667",
            "668",
            "669",
            "670",
            "671",
            "672",
            "673",
            "674",
            "675",
            "676",
            "677",
            "678",
            "679",
            "680",
            "681",
            "682",
            "683",
            "684",
            "685",
            "686",
            "687",
            "688",
            "689",
            "690",
            "691",
            "692",
            "693",
            "694",
            "695",
            "696",
            "697",
            "698",
            "699",
            "700",
            "701",
            "702",
            "703",
            "704",
            "705",
            "706",
            "707",
            "708",
            "709",
            "710",
            "711",
            "712",
            "713",
            "714",
            "715",
            "716",
            "717",
            "718",
            "719",
            "720",
            "721",
            "722",
            "723",
            "724",
            "725",
            "726",
            "727",
            "728",
            "729",
            "730",
            "731",
            "732",
            "733",
            "734",
            "735",
            "736",
            "737",
            "738",
            "739",
            "740",
            "741",
            "742",
            "743",
            "744",
            "745",
            "746",
            "747",
            "748",
            "749",
            "750",
            "751",
            "752",
            "753",
            "754",
            "755",
            "756",
            "757",
            "758",
            "759",
            "760",
            "761",
            "762",
            "763",
            "764",
            "765",
            "766",
            "767",
            "768",
            "769",
            "770",
            "771",
            "772",
            "773",
            "774",
            "775",
            "776",
            "777",
            "778",
            "779",
            "780",
            "781",
            "782",
            "783",
            "784",
            "785",
            "786",
            "787",
            "788",
            "789",
            "790",
            "791",
            "792",
            "793",
            "794",
            "795",
            "796",
            "797",
            "798",
            "799",
            "800",
            "801",
            "802",
            "803",
            "804",
            "805",
            "806",
            "807",
            "808",
            "809",
            "810",
            "811",
            "812",
            "813",
            "814",
            "815",
            "816",
            "817",
            "818",
            "819",
            "820",
            "821",
            "822",
            "823",
            "824",
            "825",
            "826",
            "827",
            "828",
            "829",
            "830",
            "831",
            "832",
            "833",
            "834",
            "835",
            "836",
            "837",
            "838",
            "839",
            "840",
            "841",
            "842",
            "843",
            "844",
            "845",
            "846",
            "847",
            "848",
            "849",
            "850",
            "851",
            "852",
            "853",
            "854",
            "855",
            "856",
            "857",
            "858",
            "859",
            "860",
            "861",
            "862",
            "863"
          ],
          "num": 863
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/rhino/jstype/FunctionType.java b/src/com/google/javascript/rhino/jstype/FunctionType.java\nnew file mode 100644\nindex 0000000..48e0f07\n--- /dev/null\n+++ b/src/com/google/javascript/rhino/jstype/FunctionType.java\n@@ -0,0 +1,863 @@\n+/*\n+ *\n+ * ***** BEGIN LICENSE BLOCK *****\n+ * Version: MPL 1.1/GPL 2.0\n+ *\n+ * The contents of this file are subject to the Mozilla Public License Version\n+ * 1.1 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ * http://www.mozilla.org/MPL/\n+ *\n+ * Software distributed under the License is distributed on an \"AS IS\" basis,\n+ * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n+ * for the specific language governing rights and limitations under the\n+ * License.\n+ *\n+ * The Original Code is Rhino code, released\n+ * May 6, 1999.\n+ *\n+ * The Initial Developer of the Original Code is\n+ * Netscape Communications Corporation.\n+ * Portions created by the Initial Developer are Copyright (C) 1997-1999\n+ * the Initial Developer. All Rights Reserved.\n+ *\n+ * Contributor(s):\n+ *   Bob Jervis\n+ *   Google Inc.\n+ *\n+ * Alternatively, the contents of this file may be used under the terms of\n+ * the GNU General Public License Version 2 or later (the \"GPL\"), in which\n+ * case the provisions of the GPL are applicable instead of those above. If\n+ * you wish to allow use of your version of this file only under the terms of\n+ * the GPL and not to allow others to use your version of this file under the\n+ * MPL, indicate your decision by deleting the provisions above and replacing\n+ * them with the notice and other provisions required by the GPL. If you do\n+ * not delete the provisions above, a recipient may use your version of this\n+ * file under either the MPL or the GPL.\n+ *\n+ * ***** END LICENSE BLOCK ***** */\n+\n+package com.google.javascript.rhino.jstype;\n+\n+import static com.google.javascript.rhino.jstype.JSTypeNative.U2U_CONSTRUCTOR_TYPE;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.Iterables;\n+import com.google.common.collect.Lists;\n+import com.google.common.collect.Sets;\n+import com.google.javascript.rhino.ErrorReporter;\n+import com.google.javascript.rhino.Node;\n+import com.google.javascript.rhino.Token;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Set;\n+\n+/**\n+ * This derived type provides extended information about a function, including\n+ * its return type and argument types.\u003cp\u003e\n+ *\n+ * Note: the parameters list is the LP node that is the parent of the\n+ * actual NAME node containing the parsed argument list (annotated with\n+ * JSDOC_TYPE_PROP\u0027s for the compile-time type of each argument.\n+*\n+*\n+ */\n+public class FunctionType extends PrototypeObjectType {\n+  private static final long serialVersionUID \u003d 1L;\n+\n+  private enum Kind {\n+    ORDINARY,\n+    CONSTRUCTOR,\n+    INTERFACE\n+  }\n+\n+  /**\n+   * {@code [[Call]]} property.\n+   */\n+  private ArrowType call;\n+\n+  /**\n+   * The {@code prototype} property. This field is lazily initialized by\n+   * {@code #getPrototype()}. The most important reason for lazily\n+   * initializing this field is that there are cycles in the native types\n+   * graph, so some prototypes must temporarily be {@code null} during\n+   * the construction of the graph.\n+   */\n+  private FunctionPrototypeType prototype;\n+\n+  /**\n+   * Whether a function is a constructor, an interface, or just an ordinary\n+   * function.\n+   */\n+  private final Kind kind;\n+\n+  /**\n+   * The type of {@code this} in the scope of this function.\n+   */\n+  private ObjectType typeOfThis;\n+\n+  /**\n+   * The function node which this type represents. It may be {@code null}.\n+   */\n+  private Node source;\n+\n+  /**\n+   * The interfaces directly implemented by this function.\n+   * It is only relevant for constructors. May not be {@code null}.\n+   */\n+  private List\u003cObjectType\u003e implementedInterfaces \u003d ImmutableList.of();\n+\n+  /**\n+   * The types which are subtypes of this function. It is only relevant for\n+   * constructors and may be {@code null}.\n+   */\n+  private List\u003cFunctionType\u003e subTypes;\n+\n+  /**\n+   * The template type name. May be {@code null}.\n+   */\n+  private String templateTypeName;\n+\n+  /** Creates an instance for a function that might be a constructor. */\n+  FunctionType(JSTypeRegistry registry, String name, Node source,\n+      ArrowType arrowType, ObjectType typeOfThis,\n+      String templateTypeName,  boolean isConstructor, boolean nativeType) {\n+    super(registry, name,\n+        registry.getNativeObjectType(JSTypeNative.FUNCTION_INSTANCE_TYPE),\n+        nativeType);\n+    Preconditions.checkArgument(source \u003d\u003d null ||\n+        Token.FUNCTION \u003d\u003d source.getType());\n+    Preconditions.checkNotNull(arrowType);\n+    this.source \u003d source;\n+    this.kind \u003d isConstructor ? Kind.CONSTRUCTOR : Kind.ORDINARY;\n+    if (isConstructor) {\n+      this.typeOfThis \u003d typeOfThis !\u003d null \u0026\u0026 typeOfThis.isNoObjectType() ?\n+          typeOfThis : new InstanceObjectType(registry, this, nativeType);\n+    } else {\n+      this.typeOfThis \u003d typeOfThis !\u003d null ?\n+          typeOfThis :\n+          registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);\n+    }\n+    this.call \u003d arrowType;\n+    this.templateTypeName \u003d templateTypeName;\n+  }\n+\n+  /** Creates an instance for a function that is an interface. */\n+  private FunctionType(JSTypeRegistry registry, String name, Node source) {\n+    super(registry, name,\n+        registry.getNativeObjectType(JSTypeNative.FUNCTION_INSTANCE_TYPE));\n+    Preconditions.checkArgument(source \u003d\u003d null ||\n+        Token.FUNCTION \u003d\u003d source.getType());\n+    Preconditions.checkArgument(name !\u003d null);\n+    this.source \u003d source;\n+    this.call \u003d new ArrowType(registry, new Node(Token.LP), null);\n+    this.kind \u003d Kind.INTERFACE;\n+    this.typeOfThis \u003d new InstanceObjectType(registry, this);\n+  }\n+\n+  /** Creates an instance for a function that is an interface. */\n+  static FunctionType forInterface(\n+      JSTypeRegistry registry, String name, Node source) {\n+    return new FunctionType(registry, name, source);\n+  }\n+\n+  @Override\n+  public boolean isInstanceType() {\n+    // The universal constructor is its own instance, bizarrely.\n+    return isEquivalentTo(registry.getNativeType(U2U_CONSTRUCTOR_TYPE));\n+  }\n+\n+  @Override\n+  public boolean isConstructor() {\n+    return kind \u003d\u003d Kind.CONSTRUCTOR;\n+  }\n+\n+  @Override\n+  public boolean isInterface() {\n+    return kind \u003d\u003d Kind.INTERFACE;\n+  }\n+\n+  @Override\n+  public boolean isOrdinaryFunction() {\n+    return kind \u003d\u003d Kind.ORDINARY;\n+  }\n+\n+  @Override\n+  public boolean isFunctionType() {\n+    return true;\n+  }\n+\n+  @Override\n+  public boolean canBeCalled() {\n+    return true;\n+  }\n+\n+  public Iterable\u003cNode\u003e getParameters() {\n+    Node n \u003d getParametersNode();\n+    if (n !\u003d null) {\n+      return n.children();\n+    } else {\n+      return Collections.emptySet();\n+    }\n+  }\n+\n+  /** Gets an LP node that contains all params. May be null. */\n+  public Node getParametersNode() {\n+    return call.parameters;\n+  }\n+\n+  /** Gets the minimum number of arguments that this function requires. */\n+  public int getMinArguments() {\n+    // NOTE(nicksantos): There are some native functions that have optional\n+    // parameters before required parameters. This algorithm finds the position\n+    // of the last required parameter.\n+    int i \u003d 0;\n+    int min \u003d 0;\n+    for (Node n : getParameters()) {\n+      i++;\n+      if (!n.isOptionalArg() \u0026\u0026 !n.isVarArgs()) {\n+        min \u003d i;\n+      }\n+    }\n+    return min;\n+  }\n+\n+  /**\n+   * Gets the maximum number of arguments that this function requires,\n+   * or Integer.MAX_VALUE if this is a variable argument function.\n+   */\n+  public int getMaxArguments() {\n+    Node params \u003d getParametersNode();\n+    if (params !\u003d null) {\n+      Node lastParam \u003d params.getLastChild();\n+      if (lastParam \u003d\u003d null || !lastParam.isVarArgs()) {\n+        return params.getChildCount();\n+      }\n+    }\n+\n+    return Integer.MAX_VALUE;\n+  }\n+\n+  public JSType getReturnType() {\n+    return call.returnType;\n+  }\n+\n+  public boolean isReturnTypeInferred() {\n+    return call.returnTypeInferred;\n+  }\n+\n+  /** Gets the internal arrow type. For use by subclasses only. */\n+  ArrowType getInternalArrowType() {\n+    return call;\n+  }\n+\n+  /**\n+   * Gets the {@code prototype} property of this function type. This is\n+   * equivalent to {@code (ObjectType) getPropertyType(\"prototype\")}.\n+   */\n+  public FunctionPrototypeType getPrototype() {\n+    // lazy initialization of the prototype field\n+    if (prototype \u003d\u003d null) {\n+      setPrototype(new FunctionPrototypeType(registry, this, null));\n+    }\n+    return prototype;\n+  }\n+\n+  /**\n+   * Sets the prototype, creating the prototype object from the given\n+   * base type.\n+   * @param baseType The base type.\n+   */\n+  public void setPrototypeBasedOn(ObjectType baseType) {\n+    if (prototype \u003d\u003d null) {\n+      setPrototype(\n+          new FunctionPrototypeType(\n+              registry, this, baseType, isNativeObjectType()));\n+    } else {\n+      prototype.setImplicitPrototype(baseType);\n+    }\n+  }\n+\n+  /**\n+   * Sets the prototype.\n+   * @param prototype the prototype. If this value is {@code null} it will\n+   *        silently be discarded.\n+   */\n+  public boolean setPrototype(FunctionPrototypeType prototype) {\n+    if (prototype \u003d\u003d null) {\n+      return false;\n+    }\n+    // getInstanceType fails if the function is not a constructor\n+    if (isConstructor() \u0026\u0026 prototype \u003d\u003d getInstanceType()) {\n+      return false;\n+    }\n+\n+    this.prototype \u003d prototype;\n+\n+    if (isConstructor() || isInterface()) {\n+      FunctionType superClass \u003d getSuperClassConstructor();\n+      if (superClass !\u003d null) {\n+        superClass.addSubType(this);\n+      }\n+    }\n+    return true;\n+  }\n+\n+  /**\n+   * Returns all interfaces implemented by a class or its superclass and any\n+   * superclasses for any of those interfaces. If this is called before all\n+   * types are resolved, it may return an incomplete set.\n+   */\n+  public Iterable\u003cObjectType\u003e getAllImplementedInterfaces() {\n+    Set\u003cObjectType\u003e interfaces \u003d Sets.newHashSet();\n+\n+    for (ObjectType type : getImplementedInterfaces()) {\n+      addRelatedInterfaces(type, interfaces);\n+    }\n+    return interfaces;\n+  }\n+\n+  private void addRelatedInterfaces(ObjectType instance, Set\u003cObjectType\u003e set) {\n+    FunctionType constructor \u003d instance.getConstructor();\n+    if (constructor !\u003d null) {\n+      if (!constructor.isInterface()) {\n+        return;\n+      }\n+\n+      set.add(instance);\n+\n+      if (constructor.getSuperClassConstructor() !\u003d null) {\n+        addRelatedInterfaces(\n+            constructor.getSuperClassConstructor().getInstanceType(), set);\n+      }\n+    }\n+  }\n+\n+  /** Returns interfaces implemented directly by a class or its superclass. */\n+  public Iterable\u003cObjectType\u003e getImplementedInterfaces() {\n+    FunctionType superCtor \u003d isConstructor() ?\n+        getSuperClassConstructor() : null;\n+    if (superCtor \u003d\u003d null) {\n+      return implementedInterfaces;\n+    } else {\n+      return Iterables.concat(\n+          implementedInterfaces, superCtor.getImplementedInterfaces());\n+    }\n+  }\n+\n+  public void setImplementedInterfaces(List\u003cObjectType\u003e implementedInterfaces) {\n+    // Records this type for each implemented interface.\n+    for (ObjectType type : implementedInterfaces) {\n+      registry.registerTypeImplementingInterface(this, type);\n+    }\n+    this.implementedInterfaces \u003d ImmutableList.copyOf(implementedInterfaces);\n+  }\n+\n+  @Override\n+  public boolean hasProperty(String name) {\n+    return super.hasProperty(name) || \"prototype\".equals(name);\n+  }\n+\n+  @Override\n+  public boolean hasOwnProperty(String name) {\n+    return super.hasOwnProperty(name) || \"prototype\".equals(name);\n+  }\n+\n+  @Override\n+  public JSType getPropertyType(String name) {\n+    if (\"prototype\".equals(name)) {\n+      return getPrototype();\n+    } else {\n+      if (!hasOwnProperty(name)) {\n+        if (\"call\".equals(name)) {\n+          // Define the \"call\" function lazily.\n+          Node params \u003d getParametersNode();\n+          if (params \u003d\u003d null) {\n+            // If there\u0027s no params array, don\u0027t do any type-checking\n+            // in this CALL function.\n+            defineDeclaredProperty(name,\n+                new FunctionBuilder(registry)\n+                    .withReturnType(getReturnType())\n+                    .build(),\n+                false);\n+          } else {\n+            params \u003d params.cloneTree();\n+            Node thisTypeNode \u003d Node.newString(Token.NAME, \"thisType\");\n+            thisTypeNode.setJSType(\n+                registry.createOptionalNullableType(getTypeOfThis()));\n+            params.addChildToFront(thisTypeNode);\n+            thisTypeNode.setOptionalArg(true);\n+\n+            defineDeclaredProperty(name,\n+                new FunctionBuilder(registry)\n+                    .withParamsNode(params)\n+                    .withReturnType(getReturnType())\n+                    .build(),\n+                false);\n+          }\n+        } else if (\"apply\".equals(name)) {\n+          // Define the \"apply\" function lazily.\n+          FunctionParamBuilder builder \u003d new FunctionParamBuilder(registry);\n+\n+          // Ecma-262 says that apply\u0027s second argument must be an Array\n+          // or an arguments object. We don\u0027t model the arguments object,\n+          // so let\u0027s just be forgiving for now.\n+          // TODO(nicksantos): Model the Arguments object.\n+          builder.addOptionalParams(\n+              registry.createNullableType(getTypeOfThis()),\n+              registry.createNullableType(\n+                  registry.getNativeType(JSTypeNative.OBJECT_TYPE)));\n+\n+          defineDeclaredProperty(name,\n+              new FunctionBuilder(registry)\n+                  .withParams(builder)\n+                  .withReturnType(getReturnType())\n+                  .build(),\n+              false);\n+        }\n+      }\n+\n+      return super.getPropertyType(name);\n+    }\n+  }\n+\n+  @Override\n+  boolean defineProperty(String name, JSType type,\n+      boolean inferred, boolean inExterns) {\n+    if (\"prototype\".equals(name)) {\n+      ObjectType objType \u003d type.toObjectType();\n+      if (objType !\u003d null) {\n+        if (objType.isEquivalentTo(prototype)) {\n+          return true;\n+        }\n+        return setPrototype(\n+            new FunctionPrototypeType(\n+                registry, this, objType, isNativeObjectType()));\n+      } else {\n+        return false;\n+      }\n+    }\n+    return super.defineProperty(name, type, inferred, inExterns);\n+  }\n+\n+  @Override\n+  public boolean isPropertyTypeInferred(String property) {\n+    return \"prototype\".equals(property) ||\n+        super.isPropertyTypeInferred(property);\n+  }\n+\n+  @Override\n+  public JSType getLeastSupertype(JSType that) {\n+    return supAndInfHelper(that, true);\n+  }\n+\n+  @Override\n+  public JSType getGreatestSubtype(JSType that) {\n+    return supAndInfHelper(that, false);\n+  }\n+\n+  private JSType supAndInfHelper(JSType that, boolean leastSuper) {\n+    // NOTE(nicksantos): When we remove the unknown type, the function types\n+    // form a lattice with the universal constructor at the top of the lattice,\n+    // and the NoObject type at the bottom of the lattice.\n+    //\n+    // When we introduce the unknown type, it\u0027s much more difficult to make\n+    // heads or tails of the partial ordering of types, because there\u0027s no\n+    // clear hierarchy between the different components (parameter types and\n+    // return types) in the ArrowType.\n+    //\n+    // Rather than make the situation more complicated by introducing new\n+    // types (like unions of functions), we just fallback on the simpler\n+    // approach of using the universal constructor and the AnyObject as\n+    // the supremum and infinum of all function types.\n+    if (isFunctionType() \u0026\u0026 that.isFunctionType()) {\n+      if (isEquivalentTo(that)) {\n+        return this;\n+      }\n+\n+      // If this is a normal function, look to see if the arguments are equal.\n+      // If they are, we can just take the least supertype (or greatest\n+      // subtype) of the return types.\n+      if (isOrdinaryFunction() \u0026\u0026 that.isOrdinaryFunction() \u0026\u0026\n+          that instanceof FunctionType) {\n+        FunctionType other \u003d (FunctionType) that;\n+        if (call.hasEqualParameters(other.call) \u0026\u0026\n+            isEquivalent(typeOfThis, other.typeOfThis)) {\n+          JSType newReturnType \u003d leastSuper ?\n+              call.returnType.getLeastSupertype(other.call.returnType) :\n+              call.returnType.getGreatestSubtype(other.call.returnType);\n+          return new FunctionType(\n+              registry, null, null,\n+              new ArrowType(\n+                  registry, call.parameters, newReturnType,\n+                  call.returnTypeInferred ||\n+                  other.call.returnTypeInferred),\n+              typeOfThis, null, false, false);\n+        }\n+      }\n+\n+      JSType functionInstance \u003d registry.getNativeType(\n+          JSTypeNative.FUNCTION_INSTANCE_TYPE);\n+      if (functionInstance.isEquivalentTo(that)) {\n+        return leastSuper ? that : this;\n+      } else if (functionInstance.isEquivalentTo(this)) {\n+        return leastSuper ? this : that;\n+      }\n+\n+      return leastSuper ?\n+          registry.getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE) :\n+          registry.getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n+    }\n+\n+    return leastSuper ?\n+        super.getLeastSupertype(that) :\n+        super.getGreatestSubtype(that);\n+  }\n+\n+  /**\n+   * Given a constructor or an interface type, get its superclass constructor\n+   * or {@code null} if none exists.\n+   */\n+  public FunctionType getSuperClassConstructor() {\n+    Preconditions.checkArgument(isConstructor() || isInterface());\n+    ObjectType maybeSuperInstanceType \u003d getPrototype().getImplicitPrototype();\n+    if (maybeSuperInstanceType \u003d\u003d null) {\n+      return null;\n+    }\n+    return maybeSuperInstanceType.getConstructor();\n+  }\n+\n+  /**\n+   * Given a constructor or an interface type, find out whether the unknown\n+   * type is a supertype of the current type.\n+   */\n+  public boolean hasUnknownSupertype() {\n+    Preconditions.checkArgument(isConstructor() || isInterface());\n+    Preconditions.checkArgument(!this.isUnknownType());\n+    // Potential infinite loop if our type system messes up or someone defines\n+    // a bad type. Otherwise the loop should always end.\n+    FunctionType ctor \u003d this;\n+    while (true) {\n+      ObjectType maybeSuperInstanceType \u003d\n+          ctor.getPrototype().getImplicitPrototype();\n+      if (maybeSuperInstanceType \u003d\u003d null) {\n+        return false;\n+      }\n+      if (maybeSuperInstanceType.isUnknownType()) {\n+        return true;\n+      }\n+      ctor \u003d maybeSuperInstanceType.getConstructor();\n+      if (ctor \u003d\u003d null) {\n+        return false;\n+      }\n+      Preconditions.checkState(ctor.isConstructor() || ctor.isInterface());\n+    }\n+  }\n+\n+  /**\n+   * Given a constructor or an interface type and a property, finds the\n+   * top-most superclass that has the property defined (including this\n+   * constructor).\n+   */\n+  public JSType getTopMostDefiningType(String propertyName) {\n+    Preconditions.checkState(isConstructor() || isInterface());\n+    Preconditions.checkArgument(getPrototype().hasProperty(propertyName));\n+    FunctionType ctor \u003d this;\n+    JSType topInstanceType;\n+    do {\n+      topInstanceType \u003d ctor.getInstanceType();\n+      ctor \u003d ctor.getSuperClassConstructor();\n+    } while (ctor !\u003d null \u0026\u0026 ctor.getPrototype().hasProperty(propertyName));\n+    return topInstanceType;\n+  }\n+\n+  /**\n+   * Two function types are equal if their signatures match. Since they don\u0027t\n+   * have signatures, two interfaces are equal if their names match.\n+   */\n+  @Override\n+  public boolean isEquivalentTo(JSType otherType) {\n+    if (!(otherType instanceof FunctionType)) {\n+      return false;\n+    }\n+    FunctionType that \u003d (FunctionType) otherType;\n+    if (!that.isFunctionType()) {\n+      return false;\n+    }\n+    if (this.isConstructor()) {\n+      if (that.isConstructor()) {\n+        return this \u003d\u003d that;\n+      }\n+      return false;\n+    }\n+    if (this.isInterface()) {\n+      if (that.isInterface()) {\n+        return this.getReferenceName().equals(that.getReferenceName());\n+      }\n+      return false;\n+    }\n+    if (that.isInterface()) {\n+      return false;\n+    }\n+    return this.typeOfThis.isEquivalentTo(that.typeOfThis) \u0026\u0026\n+        this.call.isEquivalentTo(that.call);\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return isInterface() ? getReferenceName().hashCode() : call.hashCode();\n+  }\n+\n+  public boolean hasEqualCallType(FunctionType otherType) {\n+    return this.call.isEquivalentTo(otherType.call);\n+  }\n+\n+  /**\n+   * Informally, a function is represented by\n+   * {@code function (params): returnType} where the {@code params} is a comma\n+   * separated list of types, the first one being a special\n+   * {@code this:T} if the function expects a known type for {@code this}.\n+   */\n+  @Override\n+  public String toString() {\n+    if (this \u003d\u003d registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)) {\n+      return \"Function\";\n+    }\n+\n+    StringBuilder b \u003d new StringBuilder(32);\n+    b.append(\"function (\");\n+    int paramNum \u003d call.parameters.getChildCount();\n+    boolean hasKnownTypeOfThis \u003d !typeOfThis.isUnknownType();\n+    if (hasKnownTypeOfThis) {\n+      b.append(\"this:\");\n+      b.append(typeOfThis.toString());\n+    }\n+    if (paramNum \u003e 0) {\n+      if (hasKnownTypeOfThis) {\n+        b.append(\", \");\n+      }\n+      Node p \u003d call.parameters.getFirstChild();\n+      if (p.isVarArgs()) {\n+        appendVarArgsString(b, p.getJSType());\n+      } else {\n+        b.append(p.getJSType().toString());\n+      }\n+      p \u003d p.getNext();\n+      while (p !\u003d null) {\n+        b.append(\", \");\n+        if (p.isVarArgs()) {\n+          appendVarArgsString(b, p.getJSType());\n+        } else {\n+          b.append(p.getJSType().toString());\n+        }\n+        p \u003d p.getNext();\n+      }\n+    }\n+    b.append(\"): \");\n+    b.append(call.returnType);\n+    return b.toString();\n+  }\n+\n+  /** Gets the string representation of a var args param. */\n+  private void appendVarArgsString(StringBuilder builder, JSType paramType) {\n+    if (paramType.isUnionType()) {\n+      // Remove the optionalness from the var arg.\n+      paramType \u003d ((UnionType) paramType).getRestrictedUnion(\n+          registry.getNativeType(JSTypeNative.VOID_TYPE));\n+    }\n+    builder.append(\"...[\").append(paramType.toString()).append(\"]\");\n+  }\n+\n+  /**\n+   * A function is a subtype of another if their call methods are related via\n+   * subtyping and {@code this} is a subtype of {@code that} with regard to\n+   * the prototype chain.\n+   */\n+  @Override\n+  public boolean isSubtype(JSType that) {\n+    if (this.isEquivalentTo(that)) {\n+      return true;\n+    }\n+    if (that.isFunctionType()) {\n+      if (((FunctionType) that).isInterface()) {\n+        // Any function can be assigned to an interface function.\n+        return true;\n+      }\n+      if (this.isInterface()) {\n+        // An interface function cannot be assigned to anything.\n+        return false;\n+      }\n+      // If functionA is a subtype of functionB, then their \"this\" types\n+      // should be contravariant. However, this causes problems because\n+      // of the way we enforce overrides. Because function(this:SubFoo)\n+      // is not a subtype of function(this:Foo), our override check treats\n+      // this as an error. It also screws up out standard method\n+      // for aliasing constructors. Let\u0027s punt on all this for now.\n+      // TODO(nicksantos): fix this.\n+      FunctionType other \u003d (FunctionType) that;\n+      return (this.isConstructor() || other.isConstructor() ||\n+              other.typeOfThis.isSubtype(this.typeOfThis) ||\n+              this.typeOfThis.isSubtype(other.typeOfThis)) \u0026\u0026\n+          this.call.isSubtype(other.call);\n+    }\n+    if (that instanceof UnionType) {\n+      UnionType union \u003d (UnionType) that;\n+      for (JSType element : union.alternates) {\n+        if (this.isSubtype(element)) {\n+          return true;\n+        }\n+      }\n+    }\n+    return getNativeType(JSTypeNative.FUNCTION_PROTOTYPE).isSubtype(that);\n+  }\n+\n+  @Override\n+  public \u003cT\u003e T visit(Visitor\u003cT\u003e visitor) {\n+    return visitor.caseFunctionType(this);\n+  }\n+\n+  /**\n+   * Gets the type of instance of this function.\n+   * @throws IllegalStateException if this function is not a constructor\n+   *         (see {@link #isConstructor()}).\n+   */\n+  public ObjectType getInstanceType() {\n+    Preconditions.checkState(hasInstanceType());\n+    return typeOfThis;\n+  }\n+\n+  /** Sets the instance type. This should only be used for special native types. */\n+  void setInstanceType(ObjectType instanceType) {\n+    typeOfThis \u003d instanceType;\n+  }\n+\n+  /**\n+   * Returns whether this function type has an instance type.\n+   */\n+  public boolean hasInstanceType() {\n+    return isConstructor() || isInterface();\n+  }\n+\n+  /**\n+   * Gets the type of {@code this} in this function.\n+   */\n+  public ObjectType getTypeOfThis() {\n+    return typeOfThis.isNoObjectType() ?\n+        registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE) : typeOfThis;\n+  }\n+\n+  /**\n+   * Gets the source node or null if this is an unknown function.\n+   */\n+  public Node getSource() {\n+    return source;\n+  }\n+\n+  /**\n+   * Sets the source node.\n+   */\n+  public void setSource(Node source) {\n+    this.source \u003d source;\n+  }\n+\n+  /** Adds a type to the list of subtypes for this type. */\n+  private void addSubType(FunctionType subType) {\n+    if (subTypes \u003d\u003d null) {\n+      subTypes \u003d Lists.newArrayList();\n+    }\n+    subTypes.add(subType);\n+  }\n+\n+  /**\n+   * Returns a list of types that are subtypes of this type. This is only valid\n+   * for constructor functions, and may be null. This allows a downward\n+   * traversal of the subtype graph.\n+   */\n+  public List\u003cFunctionType\u003e getSubTypes() {\n+    return subTypes;\n+  }\n+\n+  @Override\n+  public boolean hasCachedValues() {\n+    return prototype !\u003d null || super.hasCachedValues();\n+  }\n+\n+  /**\n+   * Gets the template type name.\n+   */\n+  public String getTemplateTypeName() {\n+    return templateTypeName;\n+  }\n+\n+  @Override\n+  JSType resolveInternal(ErrorReporter t, StaticScope\u003cJSType\u003e scope) {\n+    setResolvedTypeInternal(this);\n+\n+    call \u003d (ArrowType) safeResolve(call, t, scope);\n+    prototype \u003d (FunctionPrototypeType) safeResolve(prototype, t, scope);\n+    typeOfThis \u003d (ObjectType) safeResolve(typeOfThis, t, scope);\n+\n+    boolean changed \u003d false;\n+    ImmutableList.Builder\u003cObjectType\u003e resolvedInterfaces \u003d\n+        ImmutableList.builder();\n+    for (ObjectType iface : implementedInterfaces) {\n+      ObjectType resolvedIface \u003d (ObjectType) iface.resolve(t, scope);\n+      resolvedInterfaces.add(resolvedIface);\n+      changed |\u003d (resolvedIface !\u003d iface);\n+    }\n+    if (changed) {\n+      implementedInterfaces \u003d resolvedInterfaces.build();\n+    }\n+\n+    if (subTypes !\u003d null) {\n+      for (int i \u003d 0; i \u003c subTypes.size(); i++) {\n+        subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));\n+      }\n+    }\n+\n+    return super.resolveInternal(t, scope);\n+  }\n+\n+  @Override\n+  public String toDebugHashCodeString() {\n+    if (this \u003d\u003d registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)) {\n+      return super.toDebugHashCodeString();\n+    }\n+\n+    StringBuilder b \u003d new StringBuilder(32);\n+    b.append(\"function (\");\n+    int paramNum \u003d call.parameters.getChildCount();\n+    boolean hasKnownTypeOfThis \u003d !typeOfThis.isUnknownType();\n+    if (hasKnownTypeOfThis) {\n+      b.append(\"this:\");\n+      b.append(getDebugHashCodeStringOf(typeOfThis));\n+    }\n+    if (paramNum \u003e 0) {\n+      if (hasKnownTypeOfThis) {\n+        b.append(\", \");\n+      }\n+      Node p \u003d call.parameters.getFirstChild();\n+      b.append(getDebugHashCodeStringOf(p.getJSType()));\n+      p \u003d p.getNext();\n+      while (p !\u003d null) {\n+        b.append(\", \");\n+        b.append(getDebugHashCodeStringOf(p.getJSType()));\n+        p \u003d p.getNext();\n+      }\n+    }\n+    b.append(\")\");\n+    b.append(\": \");\n+    b.append(getDebugHashCodeStringOf(call.returnType));\n+    return b.toString();\n+  }\n+\n+  private String getDebugHashCodeStringOf(JSType type) {\n+    if (type \u003d\u003d this) {\n+      return \"me\";\n+    } else {\n+      return type.toDebugHashCodeString();\n+    }\n+  }\n+}\n",
      "operations": [
        {
          "type": "delete-tree",
          "from": "ImportDeclaration [1713,1768]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ImportDeclaration [1769,1807]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [26413,26549]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/rhino/jstype/InstanceObjectType.java",
        "src/com/google/javascript/rhino/jstype/InstanceObjectType.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [
            "com.google.javascript.rhino.jstype.InstanceObjectType:isNominalType:[]:boolean",
            "com.google.javascript.rhino.jstype.InstanceObjectType:isStringObjectType:[]:boolean",
            "com.google.javascript.rhino.jstype.InstanceObjectType:InstanceObjectType:[JSTypeRegistry registry, FunctionType constructor]:null",
            "com.google.javascript.rhino.jstype.InstanceObjectType:isInstanceType:[]:boolean",
            "com.google.javascript.rhino.jstype.InstanceObjectType:getImplicitPrototype:[]:ObjectType",
            "com.google.javascript.rhino.jstype.InstanceObjectType:getConstructor:[]:FunctionType",
            "com.google.javascript.rhino.jstype.InstanceObjectType:hashCode:[]:int",
            "com.google.javascript.rhino.jstype.InstanceObjectType:isRegexpType:[]:boolean",
            "com.google.javascript.rhino.jstype.InstanceObjectType:isArrayType:[]:boolean",
            "com.google.javascript.rhino.jstype.InstanceObjectType:isEquivalentTo:[JSType that]:boolean",
            "com.google.javascript.rhino.jstype.InstanceObjectType:isTheObjectType:[]:boolean",
            "com.google.javascript.rhino.jstype.InstanceObjectType:isDateType:[]:boolean",
            "com.google.javascript.rhino.jstype.InstanceObjectType:hasReferenceName:[]:boolean",
            "com.google.javascript.rhino.jstype.InstanceObjectType:getReferenceName:[]:String",
            "com.google.javascript.rhino.jstype.InstanceObjectType:isBooleanObjectType:[]:boolean",
            "com.google.javascript.rhino.jstype.InstanceObjectType:getCtorImplementedInterfaces:[]:Iterable\u003cObjectType\u003e",
            "com.google.javascript.rhino.jstype.InstanceObjectType:toString:[]:String",
            "com.google.javascript.rhino.jstype.InstanceObjectType:isNumberObjectType:[]:boolean",
            "com.google.javascript.rhino.jstype.InstanceObjectType:InstanceObjectType:[JSTypeRegistry registry, FunctionType constructor, boolean isNativeType]:null",
            "com.google.javascript.rhino.jstype.InstanceObjectType:defineProperty:[String name, JSType type, boolean inferred, boolean inExterns]:boolean"
          ],
          "num": 20
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "-1"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "35",
            "36",
            "37",
            "38",
            "39",
            "40",
            "41",
            "42",
            "43",
            "44",
            "45",
            "46",
            "47",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57",
            "58",
            "59",
            "60",
            "61",
            "62",
            "63",
            "64",
            "65",
            "66",
            "67",
            "68",
            "69",
            "70",
            "71",
            "72",
            "73",
            "74",
            "75",
            "76",
            "77",
            "78",
            "79",
            "80",
            "81",
            "82",
            "83",
            "84",
            "85",
            "86",
            "87",
            "88",
            "89",
            "90",
            "91",
            "92",
            "93",
            "94",
            "95",
            "96",
            "97",
            "98",
            "99",
            "100",
            "101",
            "102",
            "103",
            "104",
            "105",
            "106",
            "107",
            "108",
            "109",
            "110",
            "111",
            "112",
            "113",
            "114",
            "115",
            "116",
            "117",
            "118",
            "119",
            "120",
            "121",
            "122",
            "123",
            "124",
            "125",
            "126",
            "127",
            "128",
            "129",
            "130",
            "131",
            "132",
            "133",
            "134",
            "135",
            "136",
            "137",
            "138",
            "139",
            "140",
            "141",
            "142",
            "143",
            "144",
            "145",
            "146",
            "147",
            "148",
            "149",
            "150",
            "151",
            "152",
            "153",
            "154",
            "155",
            "156",
            "157",
            "158",
            "159",
            "160",
            "161",
            "162",
            "163",
            "164",
            "165",
            "166",
            "167",
            "168",
            "169",
            "170",
            "171",
            "172",
            "173",
            "174",
            "175",
            "176",
            "177",
            "178",
            "179",
            "180",
            "181",
            "182",
            "183",
            "184",
            "185"
          ],
          "num": 185
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/rhino/jstype/InstanceObjectType.java b/src/com/google/javascript/rhino/jstype/InstanceObjectType.java\nnew file mode 100644\nindex 0000000..256f014\n--- /dev/null\n+++ b/src/com/google/javascript/rhino/jstype/InstanceObjectType.java\n@@ -0,0 +1,185 @@\n+/* \n+ *\n+ * ***** BEGIN LICENSE BLOCK *****\n+ * Version: MPL 1.1/GPL 2.0\n+ *\n+ * The contents of this file are subject to the Mozilla Public License Version\n+ * 1.1 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ * http://www.mozilla.org/MPL/\n+ *\n+ * Software distributed under the License is distributed on an \"AS IS\" basis,\n+ * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n+ * for the specific language governing rights and limitations under the\n+ * License.\n+ *\n+ * The Original Code is Rhino code, released\n+ * May 6, 1999.\n+ *\n+ * The Initial Developer of the Original Code is\n+ * Netscape Communications Corporation.\n+ * Portions created by the Initial Developer are Copyright (C) 1997-1999\n+ * the Initial Developer. All Rights Reserved.\n+ *\n+ * Contributor(s):\n+ *   Bob Jervis\n+ *   Google Inc.\n+ *\n+ * Alternatively, the contents of this file may be used under the terms of\n+ * the GNU General Public License Version 2 or later (the \"GPL\"), in which\n+ * case the provisions of the GPL are applicable instead of those above. If\n+ * you wish to allow use of your version of this file only under the terms of\n+ * the GPL and not to allow others to use your version of this file under the\n+ * MPL, indicate your decision by deleting the provisions above and replacing\n+ * them with the notice and other provisions required by the GPL. If you do\n+ * not delete the provisions above, a recipient may use your version of this\n+ * file under either the MPL or the GPL.\n+ *\n+ * ***** END LICENSE BLOCK ***** */\n+ \n+package com.google.javascript.rhino.jstype;\n+\n+\n+import com.google.common.base.Preconditions;\n+\n+/**\n+ * An object type that is an instance of some function constructor.\n+*\n+*\n+ */\n+public final class InstanceObjectType extends PrototypeObjectType {\n+  private static final long serialVersionUID \u003d 1L;\n+\n+  private final FunctionType constructor;\n+\n+  InstanceObjectType(JSTypeRegistry registry, FunctionType constructor) {\n+    this(registry, constructor, false);\n+  }\n+\n+  InstanceObjectType(JSTypeRegistry registry, FunctionType constructor,\n+                     boolean isNativeType) {\n+    super(registry, null, null, isNativeType);\n+    Preconditions.checkNotNull(constructor);\n+    this.constructor \u003d constructor;\n+  }\n+\n+  @Override\n+  public String getReferenceName() {\n+    return getConstructor().getReferenceName();\n+  }\n+\n+  @Override\n+  public boolean hasReferenceName() {\n+    return getConstructor().hasReferenceName();\n+  }\n+\n+  @Override\n+  public ObjectType getImplicitPrototype() {\n+    return getConstructor().getPrototype();\n+  }\n+\n+  @Override\n+  public FunctionType getConstructor() {\n+    return constructor;\n+  }\n+\n+  @Override\n+  boolean defineProperty(String name, JSType type, boolean inferred,\n+      boolean inExterns) {\n+    ObjectType proto \u003d getImplicitPrototype();\n+    if (proto !\u003d null \u0026\u0026 proto.hasOwnDeclaredProperty(name)) {\n+      return false;\n+    }\n+    return super.defineProperty(name, type, inferred, inExterns);\n+  }\n+\n+  @Override\n+  public String toString() {\n+    if (constructor.hasReferenceName()) {\n+      return constructor.getReferenceName();\n+    } else {\n+      return super.toString();\n+    }\n+  }\n+\n+  @Override\n+  boolean isTheObjectType() {\n+    return getConstructor().isNative() \u0026\u0026 \"Object\".equals(getReferenceName());\n+  }\n+\n+  @Override\n+  public boolean isInstanceType() {\n+    return true;\n+  }\n+\n+  @Override\n+  public boolean isArrayType() {\n+    return getConstructor().isNative() \u0026\u0026 \"Array\".equals(getReferenceName());\n+  }\n+\n+  @Override\n+  public boolean isStringObjectType() {\n+    return getConstructor().isNative() \u0026\u0026 \"String\".equals(getReferenceName());\n+  }\n+\n+  @Override\n+  public boolean isBooleanObjectType() {\n+    return getConstructor().isNative() \u0026\u0026 \"Boolean\".equals(getReferenceName());\n+  }\n+\n+  @Override\n+  public boolean isNumberObjectType() {\n+    return getConstructor().isNative() \u0026\u0026 \"Number\".equals(getReferenceName());\n+  }\n+\n+  @Override\n+  public boolean isDateType() {\n+    return getConstructor().isNative() \u0026\u0026 \"Date\".equals(getReferenceName());\n+  }\n+\n+  @Override\n+  public boolean isRegexpType() {\n+    return getConstructor().isNative() \u0026\u0026 \"RegExp\".equals(getReferenceName());\n+  }\n+\n+  @Override\n+  public boolean isNominalType() {\n+    return hasReferenceName();\n+  }\n+\n+  @Override\n+  public boolean isEquivalentTo(JSType that) {\n+    if (this \u003d\u003d that) {\n+      return true;\n+    } else if (this.isNominalType()) {\n+      ObjectType thatObj \u003d ObjectType.cast(that);\n+      if (thatObj !\u003d null \u0026\u0026 thatObj.isNominalType()) {\n+        return getReferenceName().equals(thatObj.getReferenceName());\n+      }\n+    }\n+    return false;\n+  }\n+\n+  /**\n+   * If this is equal to a NamedType object, its hashCode must be equal\n+   * to the hashCode of the NamedType object.\n+   */\n+  @Override\n+  public int hashCode() {\n+    if (hasReferenceName()) {\n+      return getReferenceName().hashCode();\n+    } else {\n+      return super.hashCode();\n+    }\n+  }\n+\n+  @Override\n+  public Iterable\u003cObjectType\u003e getCtorImplementedInterfaces() {\n+    return getConstructor().getImplementedInterfaces();\n+  }\n+  \n+  // The owner will always be a resolved type, so there\u0027s no need to set\n+  // the constructor in resolveInternal.\n+  // (it would lead to infinite loops if we did).\n+  // JSType resolveInternal(ErrorReporter t, StaticScope\u003cJSType\u003e scope);\n+}\n",
      "operations": [
        {
          "type": "delete-tree",
          "from": "ImportDeclaration [1676,1725]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ImportDeclaration [1727,1749]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ImportDeclaration [1750,1771]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/rhino/jstype/NamedType.java",
        "src/com/google/javascript/rhino/jstype/NamedType.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [
            "com.google.javascript.rhino.jstype.NamedType:getReferenceName:[]:String",
            "com.google.javascript.rhino.jstype.NamedType:isEquivalentTo:[JSType that]:boolean",
            "com.google.javascript.rhino.jstype.NamedType:getReferencedType:[]:JSType",
            "com.google.javascript.rhino.jstype.NamedType:toString:[]:String",
            "com.google.javascript.rhino.jstype.NamedType:isNominalType:[]:boolean",
            "com.google.javascript.rhino.jstype.NamedType:resolveViaRegistry:[ErrorReporter t, StaticScope\u003cJSType\u003e enclosing]:boolean",
            "com.google.javascript.rhino.jstype.NamedType:checkEnumElementCycle:[ErrorReporter t]:void",
            "com.google.javascript.rhino.jstype.NamedType:isNamedType:[]:boolean",
            "com.google.javascript.rhino.jstype.NamedType:resolveViaProperties:[ErrorReporter t, StaticScope\u003cJSType\u003e enclosing]:void",
            "com.google.javascript.rhino.jstype.NamedType:handleUnresolvedType:[ErrorReporter t]:void",
            "com.google.javascript.rhino.jstype.NamedType:NamedType:[JSTypeRegistry registry, String reference, String sourceName, int lineno, int charno]:null",
            "com.google.javascript.rhino.jstype.NamedType:setReferencedType:[ObjectType type, ErrorReporter t, StaticScope\u003cJSType\u003e enclosing]:void",
            "com.google.javascript.rhino.jstype.NamedType:hasReferenceName:[]:boolean",
            "com.google.javascript.rhino.jstype.NamedType:handleTypeCycle:[ErrorReporter t]:void",
            "com.google.javascript.rhino.jstype.NamedType:resolveInternal:[ErrorReporter t, StaticScope\u003cJSType\u003e enclosing]:JSType",
            "com.google.javascript.rhino.jstype.NamedType:forgiveUnknownNames:[]:void",
            "com.google.javascript.rhino.jstype.NamedType:hashCode:[]:int",
            "com.google.javascript.rhino.jstype.NamedType:getTypedefType:[ErrorReporter t, StaticSlot\u003cJSType\u003e slot, String name]:JSType"
          ],
          "num": 18
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "-1"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "35",
            "36",
            "37",
            "38",
            "39",
            "40",
            "41",
            "42",
            "43",
            "44",
            "45",
            "46",
            "47",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57",
            "58",
            "59",
            "60",
            "61",
            "62",
            "63",
            "64",
            "65",
            "66",
            "67",
            "68",
            "69",
            "70",
            "71",
            "72",
            "73",
            "74",
            "75",
            "76",
            "77",
            "78",
            "79",
            "80",
            "81",
            "82",
            "83",
            "84",
            "85",
            "86",
            "87",
            "88",
            "89",
            "90",
            "91",
            "92",
            "93",
            "94",
            "95",
            "96",
            "97",
            "98",
            "99",
            "100",
            "101",
            "102",
            "103",
            "104",
            "105",
            "106",
            "107",
            "108",
            "109",
            "110",
            "111",
            "112",
            "113",
            "114",
            "115",
            "116",
            "117",
            "118",
            "119",
            "120",
            "121",
            "122",
            "123",
            "124",
            "125",
            "126",
            "127",
            "128",
            "129",
            "130",
            "131",
            "132",
            "133",
            "134",
            "135",
            "136",
            "137",
            "138",
            "139",
            "140",
            "141",
            "142",
            "143",
            "144",
            "145",
            "146",
            "147",
            "148",
            "149",
            "150",
            "151",
            "152",
            "153",
            "154",
            "155",
            "156",
            "157",
            "158",
            "159",
            "160",
            "161",
            "162",
            "163",
            "164",
            "165",
            "166",
            "167",
            "168",
            "169",
            "170",
            "171",
            "172",
            "173",
            "174",
            "175",
            "176",
            "177",
            "178",
            "179",
            "180",
            "181",
            "182",
            "183",
            "184",
            "185",
            "186",
            "187",
            "188",
            "189",
            "190",
            "191",
            "192",
            "193",
            "194",
            "195",
            "196",
            "197",
            "198",
            "199",
            "200",
            "201",
            "202",
            "203",
            "204",
            "205",
            "206",
            "207",
            "208",
            "209",
            "210",
            "211",
            "212",
            "213",
            "214",
            "215",
            "216",
            "217",
            "218",
            "219",
            "220",
            "221",
            "222",
            "223",
            "224",
            "225",
            "226",
            "227",
            "228",
            "229",
            "230",
            "231",
            "232",
            "233",
            "234",
            "235",
            "236",
            "237",
            "238",
            "239",
            "240",
            "241",
            "242",
            "243",
            "244",
            "245",
            "246",
            "247",
            "248",
            "249",
            "250",
            "251",
            "252",
            "253",
            "254",
            "255",
            "256",
            "257",
            "258",
            "259",
            "260",
            "261",
            "262",
            "263",
            "264",
            "265",
            "266",
            "267",
            "268",
            "269",
            "270",
            "271",
            "272",
            "273",
            "274",
            "275",
            "276",
            "277",
            "278",
            "279",
            "280",
            "281",
            "282",
            "283",
            "284",
            "285",
            "286",
            "287",
            "288",
            "289",
            "290",
            "291",
            "292",
            "293",
            "294",
            "295",
            "296",
            "297",
            "298",
            "299",
            "300",
            "301",
            "302",
            "303",
            "304",
            "305",
            "306",
            "307",
            "308",
            "309",
            "310",
            "311",
            "312",
            "313",
            "314",
            "315",
            "316",
            "317",
            "318",
            "319",
            "320",
            "321",
            "322",
            "323"
          ],
          "num": 323
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/rhino/jstype/NamedType.java b/src/com/google/javascript/rhino/jstype/NamedType.java\nnew file mode 100644\nindex 0000000..6af723c\n--- /dev/null\n+++ b/src/com/google/javascript/rhino/jstype/NamedType.java\n@@ -0,0 +1,323 @@\n+/*\n+ *\n+ * ***** BEGIN LICENSE BLOCK *****\n+ * Version: MPL 1.1/GPL 2.0\n+ *\n+ * The contents of this file are subject to the Mozilla Public License Version\n+ * 1.1 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ * http://www.mozilla.org/MPL/\n+ *\n+ * Software distributed under the License is distributed on an \"AS IS\" basis,\n+ * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n+ * for the specific language governing rights and limitations under the\n+ * License.\n+ *\n+ * The Original Code is Rhino code, released\n+ * May 6, 1999.\n+ *\n+ * The Initial Developer of the Original Code is\n+ * Netscape Communications Corporation.\n+ * Portions created by the Initial Developer are Copyright (C) 1997-1999\n+ * the Initial Developer. All Rights Reserved.\n+ *\n+ * Contributor(s):\n+ *   Bob Jervis\n+ *   Google Inc.\n+ *\n+ * Alternatively, the contents of this file may be used under the terms of\n+ * the GNU General Public License Version 2 or later (the \"GPL\"), in which\n+ * case the provisions of the GPL are applicable instead of those above. If\n+ * you wish to allow use of your version of this file only under the terms of\n+ * the GPL and not to allow others to use your version of this file under the\n+ * MPL, indicate your decision by deleting the provisions above and replacing\n+ * them with the notice and other provisions required by the GPL. If you do\n+ * not delete the provisions above, a recipient may use your version of this\n+ * file under either the MPL or the GPL.\n+ *\n+ * ***** END LICENSE BLOCK ***** */\n+\n+package com.google.javascript.rhino.jstype;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.javascript.rhino.ErrorReporter;\n+\n+/**\n+ * A {@code NamedType} is a named reference to some other type.  This provides\n+ * a convenient mechanism for implementing forward references to types; a\n+ * {@code NamedType} can be used as a placeholder until its reference is\n+ * resolved.  It is also useful for representing type names in jsdoc type\n+ * annotations, some of which may never be resolved (as they may refer to\n+ * types in host systems not yet supported by JSCompiler, such as the JVM.)\u003cp\u003e\n+ *\n+ * An important distinction: {@code NamedType} is a type name reference,\n+ * whereas {@link ObjectType} is a named type object, such as an Enum name.\n+ * The Enum itself is typically used only in a dot operator to name one of its\n+ * constants, or in a declaration, where its name will appear in a\n+ * NamedType.\u003cp\u003e\n+ *\n+ * A {@code NamedType} is not currently a full-fledged typedef, because it\n+ * cannot resolve to any JavaScript type.  It can only resolve to a named\n+ * {@link JSTypeRegistry} type, or to {@link FunctionType} or\n+ * {@link EnumType}.\u003cp\u003e\n+ *\n+ * If full typedefs are to be supported, then each method on each type class\n+ * needs to be reviewed to make sure that everything works correctly through\n+ * typedefs.  Alternatively, we would need to walk through the parse tree and\n+ * unroll each reference to a {@code NamedType} to its resolved type before\n+ * applying the rest of the analysis.\u003cp\u003e\n+ *\n+ * TODO(user): Revisit all of this logic.\u003cp\u003e\n+ *\n+ * The existing typing logic is hacky.  Unresolved types should get processed\n+ * in a more consistent way, but with the Rhino merge coming, there will be\n+ * much that has to be changed.\u003cp\u003e\n+ *\n+*\n+*\n+ */\n+class NamedType extends ProxyObjectType {\n+  private static final long serialVersionUID \u003d 1L;\n+\n+  private final String reference;\n+  private final String sourceName;\n+  private final int lineno;\n+  private final int charno;\n+\n+  /**\n+   * If true, don\u0027t warn about unresolveable type names.\n+   *\n+   * NOTE(nicksantos): A lot of third-party code doesn\u0027t use our type syntax.\n+   * They have code like\n+   * {@code @return} the bus.\n+   * and they clearly don\u0027t mean that \"the\" is a type. In these cases, we\u0027re\n+   * forgiving and try to guess whether or not \"the\" is a type when it\u0027s not\n+   * clear.\n+   */\n+  private boolean forgiving \u003d false;\n+\n+  /**\n+   * Create a named type based on the reference.\n+   */\n+  NamedType(JSTypeRegistry registry, String reference,\n+      String sourceName, int lineno, int charno) {\n+    super(registry, registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE));\n+\n+    Preconditions.checkNotNull(reference);\n+    this.reference \u003d reference;\n+    this.sourceName \u003d sourceName;\n+    this.lineno \u003d lineno;\n+    this.charno \u003d charno;\n+  }\n+\n+  @Override\n+  void forgiveUnknownNames() {\n+    forgiving \u003d true;\n+  }\n+\n+  /** Returns the type to which this refers (which is unknown if unresolved). */\n+  public JSType getReferencedType() {\n+    return referencedType;\n+  }\n+\n+  @Override\n+  public String getReferenceName() {\n+    return reference;\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return reference;\n+  }\n+\n+  @Override\n+  public boolean hasReferenceName() {\n+    return true;\n+  }\n+\n+  @Override\n+  boolean isNamedType() {\n+    return true;\n+  }\n+\n+  @Override\n+  public boolean isNominalType() {\n+    return true;\n+  }\n+\n+  /**\n+   * Two named types are equivalent if they are the same {@code\n+   * ObjectType} object.  This is complicated by the fact that isEquivalent\n+   * is sometimes called before we have a chance to resolve the type\n+   * names.\n+   *\n+   * @return {@code true} iff {@code that} \u003d\u003d {@code this} or {@code that}\n+   *         is a {@link NamedType} whose reference is the same as ours,\n+   *         or {@code that} is the type we reference.\n+   */\n+  @Override\n+  public boolean isEquivalentTo(JSType that) {\n+    if (this \u003d\u003d that) {\n+      return true;\n+    }\n+\n+    ObjectType objType \u003d ObjectType.cast(that);\n+    if (objType !\u003d null) {\n+      return objType.isNominalType() \u0026\u0026\n+          reference.equals(objType.getReferenceName());\n+    }\n+    return false;\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return reference.hashCode();\n+  }\n+\n+  /**\n+   * Resolve the referenced type within the enclosing scope.\n+   */\n+  @Override\n+  JSType resolveInternal(ErrorReporter t, StaticScope\u003cJSType\u003e enclosing) {\n+    // TODO(user): Investigate whether it is really necessary to keep two\n+    // different mechanisms for resolving named types, and if so, which order\n+    // makes more sense. Now, resolution via registry is first in order to\n+    // avoid triggering the warnings built into the resolution via properties.\n+    boolean resolved \u003d resolveViaRegistry(t, enclosing);\n+    if (detectImplicitPrototypeCycle()) {\n+      handleTypeCycle(t);\n+    }\n+\n+    if (resolved) {\n+      super.resolveInternal(t, enclosing);\n+      return referencedType;\n+    }\n+\n+    resolveViaProperties(t, enclosing);\n+    if (detectImplicitPrototypeCycle()) {\n+      handleTypeCycle(t);\n+    }\n+\n+    super.resolveInternal(t, enclosing);\n+    return referencedType;\n+  }\n+\n+  /**\n+   * Resolves a named type by looking it up in the registry.\n+   * @return True if we resolved successfully.\n+   */\n+  private boolean resolveViaRegistry(\n+      ErrorReporter t, StaticScope\u003cJSType\u003e enclosing) {\n+    ObjectType type \u003d ObjectType.cast(registry.getType(reference));\n+    if (type !\u003d null) {\n+      setReferencedType(type, t, enclosing);\n+      return true;\n+    }\n+    return false;\n+  }\n+\n+  /**\n+   * Resolves a named type by looking up its first component in the scope, and\n+   * subsequent components as properties. The scope must have been fully\n+   * parsed and a symbol table constructed.\n+   */\n+  private void resolveViaProperties(ErrorReporter t,\n+                                    StaticScope\u003cJSType\u003e enclosing) {\n+    String[] componentNames \u003d reference.split(\"\\\\.\", -1);\n+    if (componentNames[0].length() \u003d\u003d 0) {\n+      handleUnresolvedType(t);\n+      return;\n+    }\n+    StaticSlot\u003cJSType\u003e slot \u003d enclosing.getSlot(componentNames[0]);\n+    if (slot \u003d\u003d null) {\n+      handleUnresolvedType(t);\n+      return;\n+    }\n+    // If the first component has a type of \u0027Unknown\u0027, then any type\n+    // names using it should be regarded as silently \u0027Unknown\u0027 rather than be\n+    // noisy about it.\n+    JSType slotType \u003d slot.getType();\n+    if (slotType \u003d\u003d null || slotType.isAllType() || slotType.isNoType()) {\n+      handleUnresolvedType(t);\n+      return;\n+    }\n+    JSType value \u003d getTypedefType(t, slot, componentNames[0]);\n+    if (value \u003d\u003d null) {\n+      handleUnresolvedType(t);\n+      return;\n+    }\n+\n+    // resolving component by component\n+    for (int i \u003d 1; i \u003c componentNames.length; i++) {\n+      ObjectType parentClass \u003d ObjectType.cast(value);\n+      if (parentClass \u003d\u003d null) {\n+        handleUnresolvedType(t);\n+        return;\n+      }\n+      if (componentNames[i].length() \u003d\u003d 0) {\n+        handleUnresolvedType(t);\n+        return;\n+      }\n+      value \u003d parentClass.getPropertyType(componentNames[i]);\n+    }\n+\n+    // last component of the chain\n+    if (value instanceof FunctionType) {\n+      FunctionType functionType \u003d (FunctionType)value;\n+      if (functionType.isConstructor() || functionType.isInterface()) {\n+        setReferencedType(functionType.getInstanceType(), t, enclosing);\n+      } else {\n+        handleUnresolvedType(t);\n+      }\n+    } else if (value instanceof EnumType) {\n+      setReferencedType(((EnumType) value).getElementsType(), t, enclosing);\n+    } else {\n+      handleUnresolvedType(t);\n+    }\n+  }\n+\n+  private void setReferencedType(ObjectType type, ErrorReporter t,\n+      StaticScope\u003cJSType\u003e enclosing) {\n+    referencedType \u003d type;\n+    checkEnumElementCycle(t);\n+    setResolvedTypeInternal(referencedType);\n+  }\n+\n+  private void handleTypeCycle(ErrorReporter t) {\n+    referencedType \u003d registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);\n+    t.warning(\"Cycle detected in inheritance chain of type \" + reference,\n+        sourceName, lineno, null, charno);\n+    setResolvedTypeInternal(referencedType);\n+  }\n+\n+  private void checkEnumElementCycle(ErrorReporter t) {\n+    if (referencedType instanceof EnumElementType \u0026\u0026\n+        ((EnumElementType) referencedType).getPrimitiveType() \u003d\u003d this) {\n+      handleTypeCycle(t);\n+    }\n+  }\n+\n+  // Warns about this type being unresolved iff it\u0027s not a forward-declared\n+  // type name.\n+  private void handleUnresolvedType(ErrorReporter t) {\n+    if (!registry.isForwardDeclaredType(reference) \u0026\u0026 !forgiving \u0026\u0026\n+        registry.isLastGeneration()) {\n+      t.warning(\"Unknown type \" + reference, sourceName, lineno, null,\n+          charno);\n+    } else {\n+      referencedType \u003d registry.getNativeObjectType(\n+          JSTypeNative.CHECKED_UNKNOWN_TYPE);\n+    }\n+\n+    setResolvedTypeInternal(referencedType);\n+  }\n+\n+  JSType getTypedefType(ErrorReporter t, StaticSlot\u003cJSType\u003e slot, String name) {\n+    JSType type \u003d slot.getType();\n+    if (type !\u003d null) {\n+      return type;\n+    }\n+    handleUnresolvedType(t);\n+    return null;\n+  }\n+}\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "MarkerAnnotation [4382,4391]"
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "src/com/google/javascript/rhino/jstype/ObjectType.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [
            "com.google.javascript.rhino.jstype.ObjectType:isPropertyTypeDeclared:[String propertyName]:boolean",
            "com.google.javascript.rhino.jstype.ObjectType:getImplicitPrototype:[]:ObjectType",
            "com.google.javascript.rhino.jstype.ObjectType:isObject:[]:boolean",
            "com.google.javascript.rhino.jstype.ObjectType:detectImplicitPrototypeCycle:[]:boolean",
            "com.google.javascript.rhino.jstype.ObjectType:hasReferenceName:[]:boolean",
            "com.google.javascript.rhino.jstype.ObjectType:getConstructor:[]:FunctionType",
            "com.google.javascript.rhino.jstype.ObjectType:getPropertiesCount:[]:int",
            "com.google.javascript.rhino.jstype.ObjectType:defineDeclaredProperty:[String propertyName, JSType type, boolean inExterns]:boolean",
            "com.google.javascript.rhino.jstype.ObjectType:ObjectType:[JSTypeRegistry registry]:null",
            "com.google.javascript.rhino.jstype.ObjectType:getOwnPropertyNames:[]:Set\u003cString\u003e",
            "com.google.javascript.rhino.jstype.ObjectType:isNativeObjectType:[]:boolean",
            "com.google.javascript.rhino.jstype.ObjectType:getOwnPropertyJSDocInfo:[String propertyName]:JSDocInfo",
            "com.google.javascript.rhino.jstype.ObjectType:testForEquality:[JSType that]:TernaryValue",
            "com.google.javascript.rhino.jstype.ObjectType:defineProperty:[String propertyName, JSType type, boolean inferred, boolean inExterns]:boolean",
            "com.google.javascript.rhino.jstype.ObjectType:hasOwnDeclaredProperty:[String name]:boolean",
            "com.google.javascript.rhino.jstype.ObjectType:isImplicitPrototype:[ObjectType prototype]:boolean",
            "com.google.javascript.rhino.jstype.ObjectType:getParameterType:[]:JSType",
            "com.google.javascript.rhino.jstype.ObjectType:isPropertyTypeInferred:[String propertyName]:boolean",
            "com.google.javascript.rhino.jstype.ObjectType:getCtorImplementedInterfaces:[]:Iterable\u003cObjectType\u003e",
            "com.google.javascript.rhino.jstype.ObjectType:setPropertyJSDocInfo:[String propertyName, JSDocInfo info, boolean inExterns]:void",
            "com.google.javascript.rhino.jstype.ObjectType:getIndexType:[]:JSType",
            "com.google.javascript.rhino.jstype.ObjectType:getJSDocInfo:[]:JSDocInfo",
            "com.google.javascript.rhino.jstype.ObjectType:getPropertyNames:[]:Set\u003cString\u003e",
            "com.google.javascript.rhino.jstype.ObjectType:hasCachedValues:[]:boolean",
            "com.google.javascript.rhino.jstype.ObjectType:visit:[Visitor\u003cT\u003e visitor]:T",
            "com.google.javascript.rhino.jstype.ObjectType:findPropertyType:[String propertyName]:JSType",
            "com.google.javascript.rhino.jstype.ObjectType:collectPropertyNames:[Set\u003cString\u003e props]:void",
            "com.google.javascript.rhino.jstype.ObjectType:setJSDocInfo:[JSDocInfo info]:void",
            "com.google.javascript.rhino.jstype.ObjectType:isPropertyInExterns:[String propertyName]:boolean",
            "com.google.javascript.rhino.jstype.ObjectType:isUnknownType:[]:boolean",
            "com.google.javascript.rhino.jstype.ObjectType:hasOwnProperty:[String propertyName]:boolean",
            "com.google.javascript.rhino.jstype.ObjectType:hasProperty:[String propertyName]:boolean",
            "com.google.javascript.rhino.jstype.ObjectType:cast:[JSType type]:ObjectType",
            "com.google.javascript.rhino.jstype.ObjectType:getReferenceName:[]:String",
            "com.google.javascript.rhino.jstype.ObjectType:getPropertyType:[String propertyName]:JSType",
            "com.google.javascript.rhino.jstype.ObjectType:getPossibleToBooleanOutcomes:[]:BooleanLiteralSet",
            "com.google.javascript.rhino.jstype.ObjectType:defineInferredProperty:[String propertyName, JSType type, boolean inExterns]:boolean"
          ],
          "num": 37
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "-1"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "35",
            "36",
            "37",
            "38",
            "39",
            "40",
            "41",
            "42",
            "43",
            "44",
            "45",
            "46",
            "47",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57",
            "58",
            "59",
            "60",
            "61",
            "62",
            "63",
            "64",
            "65",
            "66",
            "67",
            "68",
            "69",
            "70",
            "71",
            "72",
            "73",
            "74",
            "75",
            "76",
            "77",
            "78",
            "79",
            "80",
            "81",
            "82",
            "83",
            "84",
            "85",
            "86",
            "87",
            "88",
            "89",
            "90",
            "91",
            "92",
            "93",
            "94",
            "95",
            "96",
            "97",
            "98",
            "99",
            "100",
            "101",
            "102",
            "103",
            "104",
            "105",
            "106",
            "107",
            "108",
            "109",
            "110",
            "111",
            "112",
            "113",
            "114",
            "115",
            "116",
            "117",
            "118",
            "119",
            "120",
            "121",
            "122",
            "123",
            "124",
            "125",
            "126",
            "127",
            "128",
            "129",
            "130",
            "131",
            "132",
            "133",
            "134",
            "135",
            "136",
            "137",
            "138",
            "139",
            "140",
            "141",
            "142",
            "143",
            "144",
            "145",
            "146",
            "147",
            "148",
            "149",
            "150",
            "151",
            "152",
            "153",
            "154",
            "155",
            "156",
            "157",
            "158",
            "159",
            "160",
            "161",
            "162",
            "163",
            "164",
            "165",
            "166",
            "167",
            "168",
            "169",
            "170",
            "171",
            "172",
            "173",
            "174",
            "175",
            "176",
            "177",
            "178",
            "179",
            "180",
            "181",
            "182",
            "183",
            "184",
            "185",
            "186",
            "187",
            "188",
            "189",
            "190",
            "191",
            "192",
            "193",
            "194",
            "195",
            "196",
            "197",
            "198",
            "199",
            "200",
            "201",
            "202",
            "203",
            "204",
            "205",
            "206",
            "207",
            "208",
            "209",
            "210",
            "211",
            "212",
            "213",
            "214",
            "215",
            "216",
            "217",
            "218",
            "219",
            "220",
            "221",
            "222",
            "223",
            "224",
            "225",
            "226",
            "227",
            "228",
            "229",
            "230",
            "231",
            "232",
            "233",
            "234",
            "235",
            "236",
            "237",
            "238",
            "239",
            "240",
            "241",
            "242",
            "243",
            "244",
            "245",
            "246",
            "247",
            "248",
            "249",
            "250",
            "251",
            "252",
            "253",
            "254",
            "255",
            "256",
            "257",
            "258",
            "259",
            "260",
            "261",
            "262",
            "263",
            "264",
            "265",
            "266",
            "267",
            "268",
            "269",
            "270",
            "271",
            "272",
            "273",
            "274",
            "275",
            "276",
            "277",
            "278",
            "279",
            "280",
            "281",
            "282",
            "283",
            "284",
            "285",
            "286",
            "287",
            "288",
            "289",
            "290",
            "291",
            "292",
            "293",
            "294",
            "295",
            "296",
            "297",
            "298",
            "299",
            "300",
            "301",
            "302",
            "303",
            "304",
            "305",
            "306",
            "307",
            "308",
            "309",
            "310",
            "311",
            "312",
            "313",
            "314",
            "315",
            "316",
            "317",
            "318",
            "319",
            "320",
            "321",
            "322",
            "323",
            "324",
            "325",
            "326",
            "327",
            "328",
            "329",
            "330",
            "331",
            "332",
            "333",
            "334",
            "335",
            "336",
            "337",
            "338",
            "339",
            "340",
            "341",
            "342",
            "343",
            "344",
            "345",
            "346",
            "347",
            "348",
            "349",
            "350",
            "351",
            "352",
            "353",
            "354",
            "355",
            "356",
            "357",
            "358",
            "359",
            "360",
            "361",
            "362",
            "363",
            "364",
            "365",
            "366",
            "367",
            "368",
            "369",
            "370",
            "371",
            "372",
            "373",
            "374",
            "375",
            "376",
            "377",
            "378",
            "379",
            "380",
            "381",
            "382",
            "383",
            "384",
            "385",
            "386",
            "387",
            "388",
            "389",
            "390",
            "391",
            "392",
            "393",
            "394",
            "395",
            "396",
            "397",
            "398",
            "399",
            "400",
            "401",
            "402",
            "403",
            "404",
            "405",
            "406",
            "407",
            "408",
            "409",
            "410",
            "411",
            "412",
            "413",
            "414",
            "415",
            "416",
            "417",
            "418",
            "419",
            "420",
            "421",
            "422",
            "423",
            "424",
            "425",
            "426",
            "427",
            "428",
            "429",
            "430",
            "431",
            "432",
            "433",
            "434",
            "435",
            "436",
            "437",
            "438",
            "439",
            "440",
            "441",
            "442",
            "443",
            "444",
            "445",
            "446",
            "447",
            "448",
            "449",
            "450"
          ],
          "num": 450
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/rhino/jstype/ObjectType.java b/src/com/google/javascript/rhino/jstype/ObjectType.java\nnew file mode 100644\nindex 0000000..78583fe\n--- /dev/null\n+++ b/src/com/google/javascript/rhino/jstype/ObjectType.java\n@@ -0,0 +1,450 @@\n+/*\n+ *\n+ * ***** BEGIN LICENSE BLOCK *****\n+ * Version: MPL 1.1/GPL 2.0\n+ *\n+ * The contents of this file are subject to the Mozilla Public License Version\n+ * 1.1 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ * http://www.mozilla.org/MPL/\n+ *\n+ * Software distributed under the License is distributed on an \"AS IS\" basis,\n+ * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n+ * for the specific language governing rights and limitations under the\n+ * License.\n+ *\n+ * The Original Code is Rhino code, released\n+ * May 6, 1999.\n+ *\n+ * The Initial Developer of the Original Code is\n+ * Netscape Communications Corporation.\n+ * Portions created by the Initial Developer are Copyright (C) 1997-1999\n+ * the Initial Developer. All Rights Reserved.\n+ *\n+ * Contributor(s):\n+ *   Bob Jervis\n+ *   Google Inc.\n+ *\n+ * Alternatively, the contents of this file may be used under the terms of\n+ * the GNU General Public License Version 2 or later (the \"GPL\"), in which\n+ * case the provisions of the GPL are applicable instead of those above. If\n+ * you wish to allow use of your version of this file only under the terms of\n+ * the GPL and not to allow others to use your version of this file under the\n+ * MPL, indicate your decision by deleting the provisions above and replacing\n+ * them with the notice and other provisions required by the GPL. If you do\n+ * not delete the provisions above, a recipient may use your version of this\n+ * file under either the MPL or the GPL.\n+ *\n+ * ***** END LICENSE BLOCK ***** */\n+\n+package com.google.javascript.rhino.jstype;\n+\n+import static com.google.javascript.rhino.jstype.TernaryValue.FALSE;\n+import static com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;\n+\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Sets;\n+import com.google.javascript.rhino.JSDocInfo;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+/**\n+ * Object type.\n+ *\n+ * In JavaScript, all object types have properties, and each of those\n+ * properties has a type. Property types may be DECLARED, INFERRED, or\n+ * UNKNOWN.\n+ *\n+ * DECLARED properties have an explicit type annotation, as in:\n+ * \u003ccode\u003e\n+ * /xx @type {number} x/\n+ * Foo.prototype.bar \u003d 1;\n+ * \u003c/code\u003e\n+ * This property may only hold number values, and an assignment to any\n+ * other type of value is an error.\n+ *\n+ * INFERRED properties do not have an explicit type annotation. Rather,\n+ * we try to find all the possible types that this property can hold.\n+ * \u003ccode\u003e\n+ * Foo.prototype.bar \u003d 1;\n+ * \u003c/code\u003e\n+ * If the programmer assigns other types of values to this property,\n+ * the property will take on the union of all these types.\n+ *\n+ * UNKNOWN properties are properties on the UNKNOWN type. The UNKNOWN\n+ * type has all properties, but we do not know whether they are\n+ * declared or inferred.\n+ *\n+*\n+ */\n+public abstract class ObjectType extends JSType {\n+  private boolean visited;\n+  private JSDocInfo docInfo \u003d null;\n+  private boolean unknown \u003d true;\n+\n+  ObjectType(JSTypeRegistry registry) {\n+    super(registry);\n+  }\n+\n+  /**\n+   * Gets the declared default element type.\n+   * @see ParameterizedType\n+   */\n+  public JSType getParameterType() {\n+    return null;\n+  }\n+\n+  /**\n+   * Gets the declared default index type.\n+   * @see IndexedType\n+   */\n+  public JSType getIndexType() {\n+    return null;\n+  }\n+\n+  /**\n+   * Gets the docInfo for this type.\n+   */\n+  @Override public JSDocInfo getJSDocInfo() {\n+    if (docInfo !\u003d null) {\n+      return docInfo;\n+    } else if (getImplicitPrototype() !\u003d null) {\n+      return getImplicitPrototype().getJSDocInfo();\n+    } else {\n+      return super.getJSDocInfo();\n+    }\n+  }\n+\n+  /**\n+   * Sets the docInfo for this type from the given\n+   * {@link JSDocInfo}. The {@code JSDocInfo} may be {@code null}.\n+   */\n+  public void setJSDocInfo(JSDocInfo info) {\n+    docInfo \u003d info;\n+  }\n+\n+  /**\n+   * Detects a cycle in the implicit prototype chain. This method accesses\n+   * the {@link #getImplicitPrototype()} method and must therefore be\n+   * invoked only after the object is sufficiently initialized to respond to\n+   * calls to this method.\u003cp\u003e\n+   *\n+   * The method is not thread safe.\u003cp\u003e\n+   *\n+   * @return True iff an implicit prototype cycle was detected.\n+   */\n+  final boolean detectImplicitPrototypeCycle() {\n+    // detecting cycle\n+    this.visited \u003d true;\n+    ObjectType p \u003d getImplicitPrototype();\n+    while (p !\u003d null) {\n+      if (p.visited) {\n+        return true;\n+      } else {\n+        p.visited \u003d true;\n+      }\n+      p \u003d p.getImplicitPrototype();\n+    }\n+\n+    // clean up\n+    p \u003d this;\n+    do {\n+      p.visited \u003d false;\n+      p \u003d p.getImplicitPrototype();\n+    } while (p !\u003d null);\n+    return false;\n+  }\n+\n+  /**\n+   * Gets the reference name for this object. This includes named types\n+   * like constructors, prototypes, and enums. It notably does not include\n+   * literal types like strings and booleans and structural types.\n+   * @return the object\u0027s name or {@code null} if this is an anonymous\n+   *         object\n+   */\n+  public abstract String getReferenceName();\n+\n+  /**\n+   * Returns true if the object is named.\n+   * @return true if the object is named, false if it is anonymous\n+   */\n+  public boolean hasReferenceName() {\n+    return false;\n+  }\n+\n+  @Override\n+  public TernaryValue testForEquality(JSType that) {\n+    // super\n+    TernaryValue result \u003d super.testForEquality(that);\n+    if (result !\u003d null) {\n+      return result;\n+    }\n+    // objects are comparable to everything but null/undefined\n+    if (that.isSubtype(\n+            getNativeType(JSTypeNative.OBJECT_NUMBER_STRING_BOOLEAN))) {\n+      return UNKNOWN;\n+    } else {\n+      return FALSE;\n+    }\n+  }\n+\n+  /**\n+   * Gets this object\u0027s constructor.\n+   * @return this object\u0027s constructor or {@code null} if it is a native\n+   * object (constructed natively v.s. by instantiation of a function)\n+   */\n+  public abstract FunctionType getConstructor();\n+\n+  /**\n+   * Gets the implicit prototype (a.k.a. the {@code [[Prototype]]} property).\n+   */\n+  public abstract ObjectType getImplicitPrototype();\n+\n+  /**\n+   * Defines a property whose type is synthesized (i.e. not inferred).\n+   * @param propertyName the property\u0027s name\n+   * @param type the type\n+   * @param inExterns {@code true} if this property was defined in an externs\n+   *        file. TightenTypes assumes that any function passed to an externs\n+   *        property could be called, so setting this incorrectly could result\n+   *        in live code being removed.\n+   */\n+  public final boolean defineDeclaredProperty(String propertyName,\n+      JSType type, boolean inExterns) {\n+    // All property definitions go through this method\n+    // or defineInferredProperty.\n+    registry.registerPropertyOnType(propertyName, this);\n+\n+    return defineProperty(propertyName, type, false, inExterns);\n+  }\n+\n+  /**\n+   * Defines a property whose type is inferred.\n+   * @param propertyName the property\u0027s name\n+   * @param type the type\n+   * @param inExterns {@code true} if this property was defined in an externs\n+   *        file. TightenTypes assumes that any function passed to an externs\n+   *        property could be called, so setting this incorrectly could result\n+   *        in live code being removed.\n+   */\n+  public final boolean defineInferredProperty(String propertyName,\n+      JSType type, boolean inExterns) {\n+    // All property definitions go through this method\n+    // or defineDeclaredProperty.\n+    registry.registerPropertyOnType(propertyName, this);\n+\n+    if (hasProperty(propertyName)) {\n+      JSType originalType \u003d getPropertyType(propertyName);\n+      type \u003d originalType \u003d\u003d null ? type :\n+          originalType.getLeastSupertype(type);\n+    }\n+\n+    return defineProperty(propertyName, type, true, inExterns);\n+  }\n+\n+  /**\n+   * Defines a property.\u003cp\u003e\n+   *\n+   * For clarity, callers should prefer {@link #defineDeclaredProperty} and\n+   * {@link #defineInferredProperty}.\n+   *\n+   * @param propertyName the property\u0027s name\n+   * @param type the type\n+   * @param inferred {@code true} if this property\u0027s type is inferred\n+   * @param inExterns {@code true} if this property was defined in an externs\n+   *        file. TightenTypes assumes that any function passed to an externs\n+   *        property could be called, so setting this incorrectly could result\n+   *        in live code being removed.\n+   * @return True if the property was registered successfully, false if this\n+   *        conflicts with a previous property type declaration.\n+   */\n+  abstract boolean defineProperty(String propertyName, JSType type,\n+      boolean inferred, boolean inExterns);\n+\n+  /**\n+   * Gets the docInfo on the specified property on this type.  This should not\n+   * be done implemented recursively, as you generally need to know exactly on\n+   * which type in the prototype chain the JSDocInfo exists.\n+   */\n+  public JSDocInfo getOwnPropertyJSDocInfo(String propertyName) {\n+    return null;\n+  }\n+\n+  /**\n+   * Sets the docInfo for the specified property from the\n+   * {@link JSDocInfo} on its definition.\n+   * @param info {@code JSDocInfo} for the property definition. May be\n+   *        {@code null}.\n+   * @param inExterns {@code true} if this property was defined in an externs\n+   *        file. TightenTypes assumes that any function passed to an externs\n+   *        property could be called, so setting this incorrectly could result\n+   *        in live code being removed.\n+   */\n+  public void setPropertyJSDocInfo(String propertyName, JSDocInfo info,\n+                                   boolean inExterns) {\n+    // by default, do nothing\n+  }\n+\n+  @Override\n+  public JSType findPropertyType(String propertyName) {\n+    return hasProperty(propertyName) ?\n+        getPropertyType(propertyName) : null;\n+  }\n+\n+  /**\n+   * Gets the property type of the property whose name is given. If the\n+   * underlying object does not have this property, the Unknown type is\n+   * returned to indicate that no information is available on this property.\n+   *\n+   * @return the property\u0027s type or {@link UnknownType}. This method never\n+   *         returns {@code null}.\n+   */\n+  public abstract JSType getPropertyType(String propertyName);\n+\n+  /**\n+   * Checks whether the property whose name is given is present on the\n+   * object.\n+   */\n+  public abstract boolean hasProperty(String propertyName);\n+\n+  /**\n+   * Checks whether the property whose name is given is present directly on\n+   * the object.  Returns false even if it is declared on a supertype.\n+   */\n+  public boolean hasOwnProperty(String propertyName) {\n+    return hasProperty(propertyName);\n+  }\n+\n+  /** Returns the names of all the properties directly on this type. */\n+  public Set\u003cString\u003e getOwnPropertyNames() {\n+    return new HashSet\u003cString\u003e();\n+  }\n+\n+  /**\n+   * Checks whether the property\u0027s type is inferred.\n+   */\n+  public abstract boolean isPropertyTypeInferred(String propertyName);\n+\n+  /**\n+   * Checks whether the property\u0027s type is declared.\n+   */\n+  public abstract boolean isPropertyTypeDeclared(String propertyName);\n+\n+  /**\n+   * Whether the given property is declared on this object.\n+   */\n+  boolean hasOwnDeclaredProperty(String name) {\n+    return hasOwnProperty(name) \u0026\u0026 isPropertyTypeDeclared(name);\n+  }\n+\n+  /** Checks whether the property was defined in the externs. */\n+  public boolean isPropertyInExterns(String propertyName) {\n+    return false;\n+  }\n+\n+  /**\n+   * Gets the number of properties of this object.\n+   */\n+  public abstract int getPropertiesCount();\n+\n+  /**\n+   * Returns a list of properties defined or inferred on this type and any of\n+   * its supertypes.\n+   */\n+  public Set\u003cString\u003e getPropertyNames() {\n+    Set\u003cString\u003e props \u003d Sets.newHashSet();\n+    collectPropertyNames(props);\n+    return props;\n+  }\n+\n+  /**\n+   * Adds any properties defined on this type or its supertypes to the set.\n+   */\n+  abstract void collectPropertyNames(Set\u003cString\u003e props);\n+\n+  @Override\n+  public \u003cT\u003e T visit(Visitor\u003cT\u003e visitor) {\n+    return visitor.caseObjectType(this);\n+  }\n+\n+  /**\n+   * Checks that the prototype is an implicit prototype of this object. Since\n+   * each object has an implicit prototype, an implicit prototype\u0027s\n+   * implicit prototype is also this implicit prototype\u0027s.\n+   *\n+   * @param prototype any prototype based object\n+   *\n+   * @return {@code true} if {@code prototype} is {@code equal} to any\n+   *         object in this object\u0027s implicit prototype chain.\n+   */\n+  final boolean isImplicitPrototype(ObjectType prototype) {\n+    for (ObjectType current \u003d this;\n+         current !\u003d null;\n+         current \u003d current.getImplicitPrototype()) {\n+      if (current.isEquivalentTo(prototype)) {\n+        return true;\n+      }\n+    }\n+    return false;\n+  }\n+\n+  @Override\n+  public BooleanLiteralSet getPossibleToBooleanOutcomes() {\n+    return BooleanLiteralSet.TRUE;\n+  }\n+\n+  /**\n+   * We treat this as the unknown type if any of its implicit prototype\n+   * properties is unknown.\n+   */\n+  @Override\n+  public boolean isUnknownType() {\n+    // If the object is unknown now, check the supertype again,\n+    // because it might have been resolved since the last check.\n+    if (unknown) {\n+      ObjectType implicitProto \u003d getImplicitPrototype();\n+      if (implicitProto \u003d\u003d null ||\n+          implicitProto.isNativeObjectType()) {\n+        unknown \u003d false;\n+      } else {\n+        unknown \u003d implicitProto.isUnknownType();\n+      }\n+    }\n+    return unknown;\n+  }\n+\n+  @Override\n+  public boolean isObject() {\n+    return true;\n+  }\n+\n+  /**\n+   * Returns true if any cached valeus have been set for this type.  If true,\n+   * then the prototype chain should not be changed, as it might invalidate the\n+   * cached values.\n+   */\n+  public boolean hasCachedValues() {\n+    return !unknown;\n+  }\n+\n+  /** Whether this is a built-in object. */\n+  public boolean isNativeObjectType() {\n+    return false;\n+  }\n+\n+  /**\n+   * A null-safe version of JSType#toObjectType.\n+   */\n+  public static ObjectType cast(JSType type) {\n+    return type \u003d\u003d null ? null : type.toObjectType();\n+  }\n+\n+  /**\n+   * Gets the interfaces implemented by the ctor associated with this type.\n+   * Intended to be overridden by subclasses.\n+   */\n+  public Iterable\u003cObjectType\u003e getCtorImplementedInterfaces() {\n+    return ImmutableSet.of();\n+  }\n+}\n",
      "operations": [
        {
          "type": "delete-tree",
          "from": "ImportDeclaration [1769,1816]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ImportDeclaration [1976,1998]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/rhino/jstype/ProxyObjectType.java",
        "src/com/google/javascript/rhino/jstype/ProxyObjectType.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [
            "com.google.javascript.rhino.jstype.ProxyObjectType:getOwnPropertyNames:[]:Set\u003cString\u003e",
            "com.google.javascript.rhino.jstype.ProxyObjectType:getImplicitPrototype:[]:ObjectType",
            "com.google.javascript.rhino.jstype.ProxyObjectType:findPropertyType:[String propertyName]:JSType",
            "com.google.javascript.rhino.jstype.ProxyObjectType:toString:[]:String",
            "com.google.javascript.rhino.jstype.ProxyObjectType:getReferenceName:[]:String",
            "com.google.javascript.rhino.jstype.ProxyObjectType:isNominalType:[]:boolean",
            "com.google.javascript.rhino.jstype.ProxyObjectType:setJSDocInfo:[JSDocInfo info]:void",
            "com.google.javascript.rhino.jstype.ProxyObjectType:hasOwnProperty:[String propertyName]:boolean",
            "com.google.javascript.rhino.jstype.ProxyObjectType:getPropertiesCount:[]:int",
            "com.google.javascript.rhino.jstype.ProxyObjectType:canAssignTo:[JSType that]:boolean",
            "com.google.javascript.rhino.jstype.ProxyObjectType:setPropertyJSDocInfo:[String propertyName, JSDocInfo info, boolean inExterns]:void",
            "com.google.javascript.rhino.jstype.ProxyObjectType:hasReferenceName:[]:boolean",
            "com.google.javascript.rhino.jstype.ProxyObjectType:defineProperty:[String propertyName, JSType type, boolean inferred, boolean inExterns]:boolean",
            "com.google.javascript.rhino.jstype.ProxyObjectType:isUnknownType:[]:boolean",
            "com.google.javascript.rhino.jstype.ProxyObjectType:isOrdinaryFunction:[]:boolean",
            "com.google.javascript.rhino.jstype.ProxyObjectType:hasProperty:[String propertyName]:boolean",
            "com.google.javascript.rhino.jstype.ProxyObjectType:isEquivalentTo:[JSType that]:boolean",
            "com.google.javascript.rhino.jstype.ProxyObjectType:getJSDocInfo:[]:JSDocInfo",
            "com.google.javascript.rhino.jstype.ProxyObjectType:getParameterType:[]:JSType",
            "com.google.javascript.rhino.jstype.ProxyObjectType:isEnumType:[]:boolean",
            "com.google.javascript.rhino.jstype.ProxyObjectType:getPropertyType:[String propertyName]:JSType",
            "com.google.javascript.rhino.jstype.ProxyObjectType:isEnumElementType:[]:boolean",
            "com.google.javascript.rhino.jstype.ProxyObjectType:canBeCalled:[]:boolean",
            "com.google.javascript.rhino.jstype.ProxyObjectType:isFunctionPrototypeType:[]:boolean",
            "com.google.javascript.rhino.jstype.ProxyObjectType:isConstructor:[]:boolean",
            "com.google.javascript.rhino.jstype.ProxyObjectType:ProxyObjectType:[JSTypeRegistry registry, ObjectType referencedType]:null",
            "com.google.javascript.rhino.jstype.ProxyObjectType:isInterface:[]:boolean",
            "com.google.javascript.rhino.jstype.ProxyObjectType:toDebugHashCodeString:[]:String",
            "com.google.javascript.rhino.jstype.ProxyObjectType:matchesNumberContext:[]:boolean",
            "com.google.javascript.rhino.jstype.ProxyObjectType:matchesObjectContext:[]:boolean",
            "com.google.javascript.rhino.jstype.ProxyObjectType:isPropertyTypeInferred:[String propertyName]:boolean",
            "com.google.javascript.rhino.jstype.ProxyObjectType:hashCode:[]:int",
            "com.google.javascript.rhino.jstype.ProxyObjectType:isSubtype:[JSType that]:boolean",
            "com.google.javascript.rhino.jstype.ProxyObjectType:isNullable:[]:boolean",
            "com.google.javascript.rhino.jstype.ProxyObjectType:testForEquality:[JSType that]:TernaryValue",
            "com.google.javascript.rhino.jstype.ProxyObjectType:isInstanceType:[]:boolean",
            "com.google.javascript.rhino.jstype.ProxyObjectType:isPropertyInExterns:[String propertyName]:boolean",
            "com.google.javascript.rhino.jstype.ProxyObjectType:getCtorImplementedInterfaces:[]:Iterable\u003cObjectType\u003e",
            "com.google.javascript.rhino.jstype.ProxyObjectType:getOwnPropertyJSDocInfo:[String propertyName]:JSDocInfo",
            "com.google.javascript.rhino.jstype.ProxyObjectType:collectPropertyNames:[Set\u003cString\u003e props]:void",
            "com.google.javascript.rhino.jstype.ProxyObjectType:isPropertyTypeDeclared:[String propertyName]:boolean",
            "com.google.javascript.rhino.jstype.ProxyObjectType:getConstructor:[]:FunctionType",
            "com.google.javascript.rhino.jstype.ProxyObjectType:visit:[Visitor\u003cT\u003e visitor]:T",
            "com.google.javascript.rhino.jstype.ProxyObjectType:getIndexType:[]:JSType",
            "com.google.javascript.rhino.jstype.ProxyObjectType:resolveInternal:[ErrorReporter t, StaticScope\u003cJSType\u003e scope]:JSType",
            "com.google.javascript.rhino.jstype.ProxyObjectType:isCheckedUnknownType:[]:boolean",
            "com.google.javascript.rhino.jstype.ProxyObjectType:matchesStringContext:[]:boolean"
          ],
          "num": 47
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "-1"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "35",
            "36",
            "37",
            "38",
            "39",
            "40",
            "41",
            "42",
            "43",
            "44",
            "45",
            "46",
            "47",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57",
            "58",
            "59",
            "60",
            "61",
            "62",
            "63",
            "64",
            "65",
            "66",
            "67",
            "68",
            "69",
            "70",
            "71",
            "72",
            "73",
            "74",
            "75",
            "76",
            "77",
            "78",
            "79",
            "80",
            "81",
            "82",
            "83",
            "84",
            "85",
            "86",
            "87",
            "88",
            "89",
            "90",
            "91",
            "92",
            "93",
            "94",
            "95",
            "96",
            "97",
            "98",
            "99",
            "100",
            "101",
            "102",
            "103",
            "104",
            "105",
            "106",
            "107",
            "108",
            "109",
            "110",
            "111",
            "112",
            "113",
            "114",
            "115",
            "116",
            "117",
            "118",
            "119",
            "120",
            "121",
            "122",
            "123",
            "124",
            "125",
            "126",
            "127",
            "128",
            "129",
            "130",
            "131",
            "132",
            "133",
            "134",
            "135",
            "136",
            "137",
            "138",
            "139",
            "140",
            "141",
            "142",
            "143",
            "144",
            "145",
            "146",
            "147",
            "148",
            "149",
            "150",
            "151",
            "152",
            "153",
            "154",
            "155",
            "156",
            "157",
            "158",
            "159",
            "160",
            "161",
            "162",
            "163",
            "164",
            "165",
            "166",
            "167",
            "168",
            "169",
            "170",
            "171",
            "172",
            "173",
            "174",
            "175",
            "176",
            "177",
            "178",
            "179",
            "180",
            "181",
            "182",
            "183",
            "184",
            "185",
            "186",
            "187",
            "188",
            "189",
            "190",
            "191",
            "192",
            "193",
            "194",
            "195",
            "196",
            "197",
            "198",
            "199",
            "200",
            "201",
            "202",
            "203",
            "204",
            "205",
            "206",
            "207",
            "208",
            "209",
            "210",
            "211",
            "212",
            "213",
            "214",
            "215",
            "216",
            "217",
            "218",
            "219",
            "220",
            "221",
            "222",
            "223",
            "224",
            "225",
            "226",
            "227",
            "228",
            "229",
            "230",
            "231",
            "232",
            "233",
            "234",
            "235",
            "236",
            "237",
            "238",
            "239",
            "240",
            "241",
            "242",
            "243",
            "244",
            "245",
            "246",
            "247",
            "248",
            "249",
            "250",
            "251",
            "252",
            "253",
            "254",
            "255",
            "256",
            "257",
            "258",
            "259",
            "260",
            "261",
            "262",
            "263",
            "264",
            "265",
            "266",
            "267",
            "268",
            "269",
            "270",
            "271",
            "272",
            "273",
            "274",
            "275",
            "276",
            "277",
            "278",
            "279",
            "280",
            "281",
            "282",
            "283",
            "284",
            "285",
            "286",
            "287",
            "288",
            "289",
            "290",
            "291",
            "292",
            "293",
            "294",
            "295",
            "296",
            "297",
            "298",
            "299"
          ],
          "num": 299
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/rhino/jstype/ProxyObjectType.java b/src/com/google/javascript/rhino/jstype/ProxyObjectType.java\nnew file mode 100644\nindex 0000000..bd23c71\n--- /dev/null\n+++ b/src/com/google/javascript/rhino/jstype/ProxyObjectType.java\n@@ -0,0 +1,299 @@\n+/* \n+ *\n+ * ***** BEGIN LICENSE BLOCK *****\n+ * Version: MPL 1.1/GPL 2.0\n+ *\n+ * The contents of this file are subject to the Mozilla Public License Version\n+ * 1.1 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ * http://www.mozilla.org/MPL/\n+ *\n+ * Software distributed under the License is distributed on an \"AS IS\" basis,\n+ * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n+ * for the specific language governing rights and limitations under the\n+ * License.\n+ *\n+ * The Original Code is Rhino code, released\n+ * May 6, 1999.\n+ *\n+ * The Initial Developer of the Original Code is\n+ * Netscape Communications Corporation.\n+ * Portions created by the Initial Developer are Copyright (C) 1997-1999\n+ * the Initial Developer. All Rights Reserved.\n+ *\n+ * Contributor(s):\n+ *   Bob Jervis\n+ *   Google Inc.\n+ *\n+ * Alternatively, the contents of this file may be used under the terms of\n+ * the GNU General Public License Version 2 or later (the \"GPL\"), in which\n+ * case the provisions of the GPL are applicable instead of those above. If\n+ * you wish to allow use of your version of this file only under the terms of\n+ * the GPL and not to allow others to use your version of this file under the\n+ * MPL, indicate your decision by deleting the provisions above and replacing\n+ * them with the notice and other provisions required by the GPL. If you do\n+ * not delete the provisions above, a recipient may use your version of this\n+ * file under either the MPL or the GPL.\n+ *\n+ * ***** END LICENSE BLOCK ***** */\n+ \n+package com.google.javascript.rhino.jstype;\n+\n+import com.google.javascript.rhino.ErrorReporter;\n+import com.google.javascript.rhino.JSDocInfo;\n+\n+import java.util.Set;\n+\n+/**\n+ * An object type which uses composition to delegate all calls.\n+ *\n+ * @see NamedType\n+ * @see ParameterizedType\n+ *\n+*\n+ */\n+class ProxyObjectType extends ObjectType {\n+  private static final long serialVersionUID \u003d 1L;\n+\n+  ObjectType referencedType;\n+\n+  ProxyObjectType(JSTypeRegistry registry, ObjectType referencedType) {\n+    super(registry);\n+    this.referencedType \u003d referencedType;\n+  }\n+\n+  @Override\n+  public String getReferenceName() {\n+    return referencedType.getReferenceName();\n+  }\n+\n+  @Override\n+  public boolean hasReferenceName() {\n+    return referencedType.hasReferenceName();\n+  }\n+\n+  @Override public boolean matchesNumberContext() {\n+    return referencedType.matchesNumberContext();\n+  }\n+\n+  @Override\n+  public boolean matchesStringContext() {\n+    return referencedType.matchesStringContext();\n+  }\n+\n+  @Override public boolean matchesObjectContext() {\n+    return referencedType.matchesObjectContext();\n+  }\n+\n+  @Override\n+  public boolean canBeCalled() {\n+    return referencedType.canBeCalled();\n+  }\n+\n+  @Override\n+  public boolean isUnknownType() {\n+    return referencedType.isUnknownType();\n+  }\n+\n+  @Override\n+  public boolean isCheckedUnknownType() {\n+    return referencedType.isCheckedUnknownType();\n+  }\n+\n+  @Override\n+  public boolean isNullable() {\n+    return referencedType.isNullable();\n+  }\n+\n+  @Override\n+  public boolean isFunctionPrototypeType() {\n+    return referencedType.isFunctionPrototypeType();\n+  }\n+\n+  @Override\n+  public boolean isEnumType() {\n+    return referencedType.isEnumType();\n+  }\n+\n+  @Override\n+  public boolean isEnumElementType() {\n+    return referencedType.isEnumElementType();\n+  }\n+\n+  @Override\n+  public boolean isConstructor() {\n+    return referencedType.isConstructor();\n+  }\n+\n+  @Override\n+  public boolean isNominalType() {\n+    return referencedType.isNominalType();\n+  }\n+\n+  @Override\n+  public boolean isInstanceType() {\n+    return referencedType.isInstanceType();\n+  }\n+\n+  @Override\n+  public boolean isInterface() {\n+    return referencedType.isInterface();\n+  }\n+\n+  @Override\n+  public boolean isOrdinaryFunction() {\n+    return referencedType.isOrdinaryFunction();\n+  }\n+\n+  @Override\n+  public TernaryValue testForEquality(JSType that) {\n+    return referencedType.testForEquality(that);\n+  }\n+\n+  @Override\n+  public boolean isSubtype(JSType that) {\n+    return referencedType.isSubtype(that);\n+  }\n+\n+  @Override\n+  public Iterable\u003cObjectType\u003e getCtorImplementedInterfaces() {\n+    return referencedType.getCtorImplementedInterfaces();\n+  }\n+\n+  @Override\n+  public boolean canAssignTo(JSType that) {\n+    return referencedType.canAssignTo(that);\n+  }\n+\n+  @Override\n+  public boolean isEquivalentTo(JSType that) {\n+    if (this \u003d\u003d that) {\n+      return true;\n+    }\n+    return referencedType.isEquivalentTo(that);\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return referencedType.hashCode();\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return referencedType.toString();\n+  }\n+\n+  @Override\n+  public ObjectType getImplicitPrototype() {\n+    return referencedType.getImplicitPrototype();\n+  }\n+\n+  @Override\n+  boolean defineProperty(String propertyName, JSType type,\n+      boolean inferred, boolean inExterns) {\n+    return referencedType.defineProperty(propertyName, type, inferred,\n+                                         inExterns);\n+  }\n+\n+  @Override\n+  public boolean isPropertyTypeDeclared(String propertyName) {\n+    return referencedType.isPropertyTypeDeclared(propertyName);\n+  }\n+\n+  @Override\n+  public boolean isPropertyTypeInferred(String propertyName) {\n+    return referencedType.isPropertyTypeInferred(propertyName);\n+  }\n+\n+  @Override\n+  public boolean isPropertyInExterns(String propertyName) {\n+    return referencedType.isPropertyInExterns(propertyName);\n+  }\n+\n+  @Override\n+  public int getPropertiesCount() {\n+    return referencedType.getPropertiesCount();\n+  }\n+\n+  @Override\n+  protected void collectPropertyNames(Set\u003cString\u003e props) {\n+    referencedType.collectPropertyNames(props);\n+  }\n+\n+  @Override\n+  public JSType findPropertyType(String propertyName) {\n+    return referencedType.findPropertyType(propertyName);\n+  }\n+\n+  @Override\n+  public JSType getPropertyType(String propertyName) {\n+    return referencedType.getPropertyType(propertyName);\n+  }\n+\n+  @Override\n+  public JSDocInfo getJSDocInfo() {\n+    return referencedType.getJSDocInfo();\n+  }\n+\n+  @Override\n+  public void setJSDocInfo(JSDocInfo info) {\n+    referencedType.setJSDocInfo(info);\n+  }\n+\n+  @Override\n+  public JSDocInfo getOwnPropertyJSDocInfo(String propertyName) {\n+    return referencedType.getOwnPropertyJSDocInfo(propertyName);\n+  }\n+\n+  @Override\n+  public void setPropertyJSDocInfo(String propertyName, JSDocInfo info,\n+      boolean inExterns) {\n+    referencedType.setPropertyJSDocInfo(propertyName, info, inExterns);\n+  }\n+\n+  @Override\n+  public boolean hasProperty(String propertyName) {\n+    return referencedType.hasProperty(propertyName);\n+  }\n+\n+  @Override\n+  public boolean hasOwnProperty(String propertyName) {\n+    return referencedType.hasOwnProperty(propertyName);\n+  }\n+\n+  @Override\n+  public Set\u003cString\u003e getOwnPropertyNames() {\n+    return referencedType.getOwnPropertyNames();\n+  }\n+\n+  @Override\n+  public FunctionType getConstructor() {\n+    return referencedType.getConstructor();\n+  }\n+\n+  @Override\n+  public JSType getParameterType() {\n+    return referencedType.getParameterType();\n+  }\n+\n+  @Override\n+  public JSType getIndexType() {\n+    return referencedType.getIndexType();\n+  }\n+\n+  @Override\n+  public \u003cT\u003e T visit(Visitor\u003cT\u003e visitor) {\n+    return referencedType.visit(visitor);\n+  }\n+\n+  @Override\n+  JSType resolveInternal(ErrorReporter t, StaticScope\u003cJSType\u003e scope) {\n+    referencedType \u003d (ObjectType) referencedType.resolve(t, scope);\n+    return this;\n+  }\n+\n+  @Override\n+  public String toDebugHashCodeString() {\n+    return \"{proxy:\" + referencedType.toDebugHashCodeString() + \"}\";\n+  }\n+}\n",
      "operations": [
        {
          "type": "delete-tree",
          "from": "ImportDeclaration [1727,1749]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java",
        "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [
            "com.google.javascript.rhino.jstype.RecordTypeBuilder:addProperty:[String name, JSType type]:RecordTypeBuilder",
            "com.google.javascript.rhino.jstype.RecordTypeBuilder:build:[]:JSType",
            "com.google.javascript.rhino.jstype.RecordTypeBuilder:RecordTypeBuilder:[JSTypeRegistry registry]:null"
          ],
          "num": 3
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "-1"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "35",
            "36",
            "37",
            "38",
            "39",
            "40",
            "41",
            "42",
            "43",
            "44",
            "45",
            "46",
            "47",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57",
            "58",
            "59",
            "60",
            "61",
            "62",
            "63",
            "64",
            "65",
            "66",
            "67",
            "68",
            "69",
            "70",
            "71",
            "72",
            "73",
            "74",
            "75",
            "76",
            "77",
            "78",
            "79",
            "80",
            "81",
            "82"
          ],
          "num": 82
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java b/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\nnew file mode 100644\nindex 0000000..e9deda4\n--- /dev/null\n+++ b/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\n@@ -0,0 +1,82 @@\n+/* \n+ *\n+ * ***** BEGIN LICENSE BLOCK *****\n+ * Version: MPL 1.1/GPL 2.0\n+ *\n+ * The contents of this file are subject to the Mozilla Public License Version\n+ * 1.1 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ * http://www.mozilla.org/MPL/\n+ *\n+ * Software distributed under the License is distributed on an \"AS IS\" basis,\n+ * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n+ * for the specific language governing rights and limitations under the\n+ * License.\n+ *\n+ * The Original Code is Rhino code, released\n+ * May 6, 1999.\n+ *\n+ * The Initial Developer of the Original Code is\n+ * Netscape Communications Corporation.\n+ * Portions created by the Initial Developer are Copyright (C) 1997-1999\n+ * the Initial Developer. All Rights Reserved.\n+ *\n+ * Contributor(s):\n+ *   Bob Jervis\n+ *   Google Inc.\n+ *\n+ * Alternatively, the contents of this file may be used under the terms of\n+ * the GNU General Public License Version 2 or later (the \"GPL\"), in which\n+ * case the provisions of the GPL are applicable instead of those above. If\n+ * you wish to allow use of your version of this file only under the terms of\n+ * the GPL and not to allow others to use your version of this file under the\n+ * MPL, indicate your decision by deleting the provisions above and replacing\n+ * them with the notice and other provisions required by the GPL. If you do\n+ * not delete the provisions above, a recipient may use your version of this\n+ * file under either the MPL or the GPL.\n+ *\n+ * ***** END LICENSE BLOCK ***** */\n+ \n+package com.google.javascript.rhino.jstype;\n+\n+import com.google.common.collect.ImmutableMap;\n+\n+/**\n+ * A builder for record types.\n+ *\n+*\n+ */\n+public class RecordTypeBuilder {\n+  private boolean isEmpty \u003d true;\n+  private JSTypeRegistry registry;\n+  private final ImmutableMap.Builder\u003cString, JSType\u003e properties \u003d\n+      ImmutableMap.builder();\n+\n+  public RecordTypeBuilder(JSTypeRegistry registry) {\n+    this.registry \u003d registry;\n+  }\n+\n+  /**\n+   * Adds a property with the given name and type to the record type.\n+   *\n+   * @return The builder itself for chaining purposes.\n+   */\n+  public RecordTypeBuilder addProperty(String name, JSType type) {\n+    isEmpty \u003d false;\n+    properties.put(name, type);\n+    return this;\n+  }\n+\n+  /**\n+   * Creates a record.\n+   * @return The record type.\n+   */\n+  public JSType build() {\n+     // If we have an empty record, simply return the object type.\n+    if (isEmpty) {\n+       return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n+    }\n+\n+    return registry.createRecordType(properties.build());\n+  }\n+}\n",
      "operations": [
        {
          "type": "delete-tree",
          "from": "ImportDeclaration [1677,1715]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ImportDeclaration [1717,1738]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java",
        "src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [
            "com.google.javascript.rhino.jstype.UnresolvedTypeExpression:resolveInternal:[ErrorReporter t, StaticScope\u003cJSType\u003e enclosing]:JSType",
            "com.google.javascript.rhino.jstype.UnresolvedTypeExpression:UnresolvedTypeExpression:[JSTypeRegistry registry, Node typeExpr, String sourceName, boolean forgiving]:null"
          ],
          "num": 2
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "-1"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "35",
            "36",
            "37",
            "38",
            "39",
            "40",
            "41",
            "42",
            "43",
            "44",
            "45",
            "46",
            "47",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57",
            "58",
            "59",
            "60",
            "61",
            "62",
            "63",
            "64",
            "65",
            "66",
            "67",
            "68",
            "69",
            "70",
            "71",
            "72",
            "73",
            "74",
            "75",
            "76",
            "77",
            "78",
            "79",
            "80",
            "81",
            "82",
            "83",
            "84",
            "85",
            "86",
            "87",
            "88",
            "89",
            "90",
            "91",
            "92",
            "93",
            "94",
            "95",
            "96",
            "97"
          ],
          "num": 97
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java b/src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java\nnew file mode 100644\nindex 0000000..e485054\n--- /dev/null\n+++ b/src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java\n@@ -0,0 +1,97 @@\n+/*\n+ *\n+ * ***** BEGIN LICENSE BLOCK *****\n+ * Version: MPL 1.1/GPL 2.0\n+ *\n+ * The contents of this file are subject to the Mozilla Public License Version\n+ * 1.1 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ * http://www.mozilla.org/MPL/\n+ *\n+ * Software distributed under the License is distributed on an \"AS IS\" basis,\n+ * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n+ * for the specific language governing rights and limitations under the\n+ * License.\n+ *\n+ * The Original Code is Rhino code, released\n+ * May 6, 1999.\n+ *\n+ * The Initial Developer of the Original Code is\n+ * Netscape Communications Corporation.\n+ * Portions created by the Initial Developer are Copyright (C) 1997-1999\n+ * the Initial Developer. All Rights Reserved.\n+ *\n+ * Contributor(s):\n+ *   Nick Santos\n+ *   Google Inc.\n+ *\n+ * Alternatively, the contents of this file may be used under the terms of\n+ * the GNU General Public License Version 2 or later (the \"GPL\"), in which\n+ * case the provisions of the GPL are applicable instead of those above. If\n+ * you wish to allow use of your version of this file only under the terms of\n+ * the GPL and not to allow others to use your version of this file under the\n+ * MPL, indicate your decision by deleting the provisions above and replacing\n+ * them with the notice and other provisions required by the GPL. If you do\n+ * not delete the provisions above, a recipient may use your version of this\n+ * file under either the MPL or the GPL.\n+ *\n+ * ***** END LICENSE BLOCK ***** */\n+ \n+package com.google.javascript.rhino.jstype;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.javascript.rhino.ErrorReporter;\n+import com.google.javascript.rhino.Node;\n+\n+/**\n+ * An {@code UnresolvedType} is a reference to some type expression.\n+ * This provides a convenient mechanism for implementing forward\n+ * references to types; a {@code UnresolvedType} can be used as a\n+ * placeholder until its reference is resolved.\n+ *\n+ * The {@code UnresolvedType} will behave like an opaque unknown type.\n+ * When its {@code #resolve} method is called, it will return the underlying\n+ * type. The underlying type can resolve to any JS type.\u003cp\u003e\n+ *\n+ * @author nicksantos@google.com (Nick Santos)\n+ */\n+class UnresolvedTypeExpression extends UnknownType {\n+  private static final long serialVersionUID \u003d 1L;\n+\n+  private final Node typeExpr;\n+  private final String sourceName;\n+\n+  /**\n+   * If true, don\u0027t warn about unresolveable type names.\n+   *\n+   * NOTE(nicksantos): A lot of third-party code doesn\u0027t use our type syntax.\n+   * They have code like\n+   * {@code @return} the bus.\n+   * and they clearly don\u0027t mean that \"the\" is a type. In these cases, we\u0027re\n+   * forgiving and try to guess whether or not \"the\" is a type when it\u0027s not\n+   * clear.\n+   */\n+  private boolean forgiving \u003d false;\n+\n+  /**\n+   * Create a named type based on the reference.\n+   */\n+  UnresolvedTypeExpression(JSTypeRegistry registry, Node typeExpr,\n+      String sourceName, boolean forgiving) {\n+    super(registry, false);\n+\n+    Preconditions.checkNotNull(typeExpr);\n+    this.typeExpr \u003d typeExpr;\n+    this.sourceName \u003d sourceName;\n+    this.forgiving \u003d forgiving;\n+  }\n+\n+  /**\n+   * Resolve the referenced type within the enclosing scope.\n+   */\n+  @Override\n+  JSType resolveInternal(ErrorReporter t, StaticScope\u003cJSType\u003e enclosing) {\n+    return registry.createFromTypeNodes(typeExpr, sourceName, enclosing,\n+        forgiving);\n+  }\n+}\n",
      "operations": [
        {
          "type": "delete-tree",
          "from": "ImportDeclaration [1725,1777]",
          "to": ""
        }
      ]
    }
  ],
  "inducing_type": {
    "add_classes": {
      "qualified_names": [
        "gen/com/google/javascript/jscomp/FunctionInfo.java",
        "gen/com/google/javascript/jscomp/FunctionInformationMap.java",
        "gen/com/google/javascript/jscomp/Instrumentation.java",
        "gen/com/google/javascript/jscomp/InstrumentationTemplate.java",
        "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "src/com/google/javascript/jscomp/AbstractCompiler.java",
        "src/com/google/javascript/jscomp/AbstractMessageFormatter.java",
        "src/com/google/javascript/jscomp/AliasExternals.java",
        "src/com/google/javascript/jscomp/AliasKeywords.java",
        "src/com/google/javascript/jscomp/AliasStrings.java",
        "src/com/google/javascript/jscomp/AmbiguateProperties.java",
        "src/com/google/javascript/jscomp/AnalyzeNameReferences.java",
        "src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java",
        "src/com/google/javascript/jscomp/AnonymousFunctionNamingCallback.java",
        "src/com/google/javascript/jscomp/AnonymousFunctionNamingPolicy.java",
        "src/com/google/javascript/jscomp/AstChangeProxy.java",
        "src/com/google/javascript/jscomp/AstParallelizer.java",
        "src/com/google/javascript/jscomp/BasicErrorManager.java",
        "src/com/google/javascript/jscomp/ChainCalls.java",
        "src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java",
        "src/com/google/javascript/jscomp/CheckAccessControls.java",
        "src/com/google/javascript/jscomp/CheckAccidentalSemicolon.java",
        "src/com/google/javascript/jscomp/CheckGlobalNames.java",
        "src/com/google/javascript/jscomp/CheckGlobalThis.java",
        "src/com/google/javascript/jscomp/CheckLevel.java",
        "src/com/google/javascript/jscomp/CheckLevelLegacy.java",
        "src/com/google/javascript/jscomp/CheckMissingGetCssName.java",
        "src/com/google/javascript/jscomp/CheckMissingReturn.java",
        "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java",
        "src/com/google/javascript/jscomp/CheckProvides.java",
        "src/com/google/javascript/jscomp/CheckRegExp.java",
        "src/com/google/javascript/jscomp/CheckRequiresForConstructors.java",
        "src/com/google/javascript/jscomp/CheckSideEffects.java",
        "src/com/google/javascript/jscomp/CheckUnreachableCode.java",
        "src/com/google/javascript/jscomp/ClosureCodingConvention.java",
        "src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java",
        "src/com/google/javascript/jscomp/CoalesceVariableNames.java",
        "src/com/google/javascript/jscomp/CodeChangeHandler.java",
        "src/com/google/javascript/jscomp/CodeConsumer.java",
        "src/com/google/javascript/jscomp/CodeGenerator.java",
        "src/com/google/javascript/jscomp/CodePrinter.java",
        "src/com/google/javascript/jscomp/CodingConvention.java",
        "src/com/google/javascript/jscomp/CollapseAnonymousFunctions.java",
        "src/com/google/javascript/jscomp/CollapseProperties.java",
        "src/com/google/javascript/jscomp/CollapseVariableDeclarations.java",
        "src/com/google/javascript/jscomp/CombinedCompilerPass.java",
        "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "src/com/google/javascript/jscomp/CompilationLevel.java",
        "src/com/google/javascript/jscomp/Compiler.java",
        "src/com/google/javascript/jscomp/CompilerInput.java",
        "src/com/google/javascript/jscomp/CompilerOptions.java",
        "src/com/google/javascript/jscomp/CompilerPass.java",
        "src/com/google/javascript/jscomp/ComposeWarningsGuard.java",
        "src/com/google/javascript/jscomp/ConcreteType.java",
        "src/com/google/javascript/jscomp/ConstCheck.java",
        "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "src/com/google/javascript/jscomp/ControlFlowGraph.java",
        "src/com/google/javascript/jscomp/ControlStructureCheck.java",
        "src/com/google/javascript/jscomp/ConvertToDottedProperties.java",
        "src/com/google/javascript/jscomp/CreateSyntheticBlocks.java",
        "src/com/google/javascript/jscomp/CrossModuleCodeMotion.java",
        "src/com/google/javascript/jscomp/CrossModuleMethodMotion.java",
        "src/com/google/javascript/jscomp/CssRenamingMap.java",
        "src/com/google/javascript/jscomp/CustomPassExecutionTime.java",
        "src/com/google/javascript/jscomp/DataFlowAnalysis.java",
        "src/com/google/javascript/jscomp/DeadAssignmentsElimination.java",
        "src/com/google/javascript/jscomp/DefaultCodingConvention.java",
        "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "src/com/google/javascript/jscomp/DefinitionProvider.java",
        "src/com/google/javascript/jscomp/DefinitionSite.java",
        "src/com/google/javascript/jscomp/DefinitionsRemover.java",
        "src/com/google/javascript/jscomp/Denormalize.java",
        "src/com/google/javascript/jscomp/DevirtualizePrototypeMethods.java",
        "src/com/google/javascript/jscomp/DiagnosticGroup.java",
        "src/com/google/javascript/jscomp/DiagnosticGroupWarningsGuard.java",
        "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "src/com/google/javascript/jscomp/DiagnosticType.java",
        "src/com/google/javascript/jscomp/DisambiguateProperties.java",
        "src/com/google/javascript/jscomp/DotFormatter.java",
        "src/com/google/javascript/jscomp/ErrorFormat.java",
        "src/com/google/javascript/jscomp/ErrorManager.java",
        "src/com/google/javascript/jscomp/ErrorPass.java",
        "src/com/google/javascript/jscomp/ExportTestFunctions.java",
        "src/com/google/javascript/jscomp/ExpressionDecomposer.java",
        "src/com/google/javascript/jscomp/ExternExportsPass.java",
        "src/com/google/javascript/jscomp/ExtractPrototypeMemberDeclarations.java",
        "src/com/google/javascript/jscomp/FindExportableNodes.java",
        "src/com/google/javascript/jscomp/FlowScope.java",
        "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "src/com/google/javascript/jscomp/FoldConstants.java",
        "src/com/google/javascript/jscomp/FunctionArgumentInjector.java",
        "src/com/google/javascript/jscomp/FunctionInjector.java",
        "src/com/google/javascript/jscomp/FunctionNames.java",
        "src/com/google/javascript/jscomp/FunctionRewriter.java",
        "src/com/google/javascript/jscomp/FunctionToBlockMutator.java",
        "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "src/com/google/javascript/jscomp/GatherRawExports.java",
        "src/com/google/javascript/jscomp/GatherSideEffectSubexpressionsCallback.java",
        "src/com/google/javascript/jscomp/GenerateExports.java",
        "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "src/com/google/javascript/jscomp/GoogleCodeRemoval.java",
        "src/com/google/javascript/jscomp/GoogleCodingConvention.java",
        "src/com/google/javascript/jscomp/GroupVariableDeclarations.java",
        "src/com/google/javascript/jscomp/IgnoreCajaProperties.java",
        "src/com/google/javascript/jscomp/InferJSDocInfo.java",
        "src/com/google/javascript/jscomp/InlineCostEstimator.java",
        "src/com/google/javascript/jscomp/InlineFunctions.java",
        "src/com/google/javascript/jscomp/InlineGetters.java",
        "src/com/google/javascript/jscomp/InlineVariables.java",
        "src/com/google/javascript/jscomp/InstrumentFunctions.java",
        "src/com/google/javascript/jscomp/InvocationsCallback.java",
        "src/com/google/javascript/jscomp/JSError.java",
        "src/com/google/javascript/jscomp/JSModule.java",
        "src/com/google/javascript/jscomp/JSModuleGraph.java",
        "src/com/google/javascript/jscomp/JSSourceFile.java",
        "src/com/google/javascript/jscomp/JoinOp.java",
        "src/com/google/javascript/jscomp/JsAst.java",
        "src/com/google/javascript/jscomp/JsMessage.java",
        "src/com/google/javascript/jscomp/JsMessageDefinition.java",
        "src/com/google/javascript/jscomp/JsMessageExtractor.java",
        "src/com/google/javascript/jscomp/JsMessageVisitor.java",
        "src/com/google/javascript/jscomp/LatticeElement.java",
        "src/com/google/javascript/jscomp/LightweightMessageFormatter.java",
        "src/com/google/javascript/jscomp/LineNumberCheck.java",
        "src/com/google/javascript/jscomp/LinkedFlowScope.java",
        "src/com/google/javascript/jscomp/LiveVariablesAnalysis.java",
        "src/com/google/javascript/jscomp/LocaleUtil.java",
        "src/com/google/javascript/jscomp/LoggerErrorManager.java",
        "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "src/com/google/javascript/jscomp/MarkNoSideEffectCalls.java",
        "src/com/google/javascript/jscomp/MaybeReachingVariableUse.java",
        "src/com/google/javascript/jscomp/MemoizedScopeCreator.java",
        "src/com/google/javascript/jscomp/MessageBundle.java",
        "src/com/google/javascript/jscomp/MessageFormatter.java",
        "src/com/google/javascript/jscomp/MethodCompilerPass.java",
        "src/com/google/javascript/jscomp/MinimizeExitPoints.java",
        "src/com/google/javascript/jscomp/MoveFunctionDeclarations.java",
        "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java",
        "src/com/google/javascript/jscomp/NameAnalyzer.java",
        "src/com/google/javascript/jscomp/NameAnonymousFunctions.java",
        "src/com/google/javascript/jscomp/NameAnonymousFunctionsMapped.java",
        "src/com/google/javascript/jscomp/NameGenerator.java",
        "src/com/google/javascript/jscomp/NameReferenceGraph.java",
        "src/com/google/javascript/jscomp/NameReferenceGraphConstruction.java",
        "src/com/google/javascript/jscomp/NodeIterators.java",
        "src/com/google/javascript/jscomp/NodeNameExtractor.java",
        "src/com/google/javascript/jscomp/NodeTraversal.java",
        "src/com/google/javascript/jscomp/NodeUtil.java",
        "src/com/google/javascript/jscomp/Normalize.java",
        "src/com/google/javascript/jscomp/ObjectPropertyStringPostprocess.java",
        "src/com/google/javascript/jscomp/ObjectPropertyStringPreprocess.java",
        "src/com/google/javascript/jscomp/OptimizeArgumentsArray.java",
        "src/com/google/javascript/jscomp/OptimizeParameters.java",
        "src/com/google/javascript/jscomp/ParallelCompilerPass.java",
        "src/com/google/javascript/jscomp/PassConfig.java",
        "src/com/google/javascript/jscomp/PassFactory.java",
        "src/com/google/javascript/jscomp/PerformanceTracker.java",
        "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "src/com/google/javascript/jscomp/Position.java",
        "src/com/google/javascript/jscomp/PrepareAst.java",
        "src/com/google/javascript/jscomp/PrintStreamErrorManager.java",
        "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "src/com/google/javascript/jscomp/ProcessDefines.java",
        "src/com/google/javascript/jscomp/PropertyRenamingPolicy.java",
        "src/com/google/javascript/jscomp/PureFunctionIdentifier.java",
        "src/com/google/javascript/jscomp/RecordFunctionInformation.java",
        "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java",
        "src/com/google/javascript/jscomp/Region.java",
        "src/com/google/javascript/jscomp/RemoveConstantExpressions.java",
        "src/com/google/javascript/jscomp/RemoveConstantExpressionsParallel.java",
        "src/com/google/javascript/jscomp/RemoveTryCatch.java",
        "src/com/google/javascript/jscomp/RemoveUnusedNames.java",
        "src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java",
        "src/com/google/javascript/jscomp/RemoveUnusedVars.java",
        "src/com/google/javascript/jscomp/RenameLabels.java",
        "src/com/google/javascript/jscomp/RenameProperties.java",
        "src/com/google/javascript/jscomp/RenamePrototypes.java",
        "src/com/google/javascript/jscomp/RenameVars.java",
        "src/com/google/javascript/jscomp/ReplaceCssNames.java",
        "src/com/google/javascript/jscomp/ReplaceIdGenerators.java",
        "src/com/google/javascript/jscomp/ReplaceMessages.java",
        "src/com/google/javascript/jscomp/ReplaceStrings.java",
        "src/com/google/javascript/jscomp/Result.java",
        "src/com/google/javascript/jscomp/ReverseAbstractInterpreter.java",
        "src/com/google/javascript/jscomp/RhinoErrorReporter.java",
        "src/com/google/javascript/jscomp/RuntimeTypeCheck.java",
        "src/com/google/javascript/jscomp/SanityCheck.java",
        "src/com/google/javascript/jscomp/Scope.java",
        "src/com/google/javascript/jscomp/ScopeCreator.java",
        "src/com/google/javascript/jscomp/ScopedAliases.java",
        "src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java",
        "src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java",
        "src/com/google/javascript/jscomp/SimpleDefinitionFinder.java",
        "src/com/google/javascript/jscomp/SimpleRegion.java",
        "src/com/google/javascript/jscomp/SourceAst.java",
        "src/com/google/javascript/jscomp/SourceExcerptProvider.java",
        "src/com/google/javascript/jscomp/SourceFile.java",
        "src/com/google/javascript/jscomp/SourceInformationAnnotator.java",
        "src/com/google/javascript/jscomp/SourceMap.java",
        "src/com/google/javascript/jscomp/StrictModeCheck.java",
        "src/com/google/javascript/jscomp/StrictWarningsGuard.java",
        "src/com/google/javascript/jscomp/Strings.java",
        "src/com/google/javascript/jscomp/StripCode.java",
        "src/com/google/javascript/jscomp/SuspiciousPropertiesCheck.java",
        "src/com/google/javascript/jscomp/SyntacticScopeCreator.java",
        "src/com/google/javascript/jscomp/SyntheticAst.java",
        "src/com/google/javascript/jscomp/TightenTypes.java",
        "src/com/google/javascript/jscomp/Tracer.java",
        "src/com/google/javascript/jscomp/TypeCheck.java",
        "src/com/google/javascript/jscomp/TypeInference.java",
        "src/com/google/javascript/jscomp/TypeInferencePass.java",
        "src/com/google/javascript/jscomp/TypeValidator.java",
        "src/com/google/javascript/jscomp/TypedCodeGenerator.java",
        "src/com/google/javascript/jscomp/TypedScopeCreator.java",
        "src/com/google/javascript/jscomp/UnreachableCodeElimination.java",
        "src/com/google/javascript/jscomp/UseSite.java",
        "src/com/google/javascript/jscomp/VarCheck.java",
        "src/com/google/javascript/jscomp/VariableMap.java",
        "src/com/google/javascript/jscomp/VariableNameGenerator.java",
        "src/com/google/javascript/jscomp/VariableReferenceCheck.java",
        "src/com/google/javascript/jscomp/VariableRenamingPolicy.java",
        "src/com/google/javascript/jscomp/VariableShadowDeclarationCheck.java",
        "src/com/google/javascript/jscomp/VerboseMessageFormatter.java",
        "src/com/google/javascript/jscomp/WarningLevel.java",
        "src/com/google/javascript/jscomp/WarningsGuard.java",
        "src/com/google/javascript/jscomp/ant/AntErrorManager.java",
        "src/com/google/javascript/jscomp/ant/CompileTask.java",
        "src/com/google/javascript/jscomp/deps/DependencyInfo.java",
        "src/com/google/javascript/jscomp/deps/DepsFileParser.java",
        "src/com/google/javascript/jscomp/deps/JsFileLineParser.java",
        "src/com/google/javascript/jscomp/deps/JsFileParser.java",
        "src/com/google/javascript/jscomp/deps/SimpleDependencyInfo.java",
        "src/com/google/javascript/jscomp/deps/SortedDependencies.java",
        "src/com/google/javascript/jscomp/graph/AdjacencyGraph.java",
        "src/com/google/javascript/jscomp/graph/Annotatable.java",
        "src/com/google/javascript/jscomp/graph/Annotation.java",
        "src/com/google/javascript/jscomp/graph/DiGraph.java",
        "src/com/google/javascript/jscomp/graph/FixedPointGraphTraversal.java",
        "src/com/google/javascript/jscomp/graph/Graph.java",
        "src/com/google/javascript/jscomp/graph/GraphColoring.java",
        "src/com/google/javascript/jscomp/graph/GraphNode.java",
        "src/com/google/javascript/jscomp/graph/GraphReachability.java",
        "src/com/google/javascript/jscomp/graph/GraphvizGraph.java",
        "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java",
        "src/com/google/javascript/jscomp/graph/StandardUnionFind.java",
        "src/com/google/javascript/jscomp/graph/SubGraph.java",
        "src/com/google/javascript/jscomp/graph/UndiGraph.java",
        "src/com/google/javascript/jscomp/graph/UnionFind.java",
        "src/com/google/javascript/jscomp/parsing/Annotation.java",
        "src/com/google/javascript/jscomp/parsing/Config.java",
        "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "src/com/google/javascript/jscomp/parsing/JsDocToken.java",
        "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "src/com/google/javascript/jscomp/parsing/NullErrorReporter.java",
        "src/com/google/javascript/jscomp/parsing/ParserRunner.java",
        "src/com/google/javascript/jscomp/parsing/TypeSafeDispatcher.java",
        "src/com/google/javascript/rhino/CompilerEnvirons.java",
        "src/com/google/javascript/rhino/Context.java",
        "src/com/google/javascript/rhino/DToA.java",
        "src/com/google/javascript/rhino/Decompiler.java",
        "src/com/google/javascript/rhino/EcmaError.java",
        "src/com/google/javascript/rhino/ErrorReporter.java",
        "src/com/google/javascript/rhino/EvaluatorException.java",
        "src/com/google/javascript/rhino/FunctionNode.java",
        "src/com/google/javascript/rhino/IRFactory.java",
        "src/com/google/javascript/rhino/JSDocInfo.java",
        "src/com/google/javascript/rhino/JSDocInfoBuilder.java",
        "src/com/google/javascript/rhino/JSTypeExpression.java",
        "src/com/google/javascript/rhino/JavaScriptException.java",
        "src/com/google/javascript/rhino/Kit.java",
        "src/com/google/javascript/rhino/Node.java",
        "src/com/google/javascript/rhino/ObjArray.java",
        "src/com/google/javascript/rhino/ObjToIntMap.java",
        "src/com/google/javascript/rhino/Parser.java",
        "src/com/google/javascript/rhino/RhinoException.java",
        "src/com/google/javascript/rhino/ScriptOrFnNode.java",
        "src/com/google/javascript/rhino/ScriptRuntime.java",
        "src/com/google/javascript/rhino/SimpleErrorReporter.java",
        "src/com/google/javascript/rhino/SourcePosition.java",
        "src/com/google/javascript/rhino/Token.java",
        "src/com/google/javascript/rhino/TokenStream.java",
        "src/com/google/javascript/rhino/UintMap.java",
        "src/com/google/javascript/rhino/UniqueTag.java",
        "src/com/google/javascript/rhino/jstype/AllType.java",
        "src/com/google/javascript/rhino/jstype/ArrowType.java",
        "src/com/google/javascript/rhino/jstype/BooleanLiteralSet.java",
        "src/com/google/javascript/rhino/jstype/BooleanType.java",
        "src/com/google/javascript/rhino/jstype/EnumElementType.java",
        "src/com/google/javascript/rhino/jstype/EnumType.java",
        "src/com/google/javascript/rhino/jstype/ErrorFunctionType.java",
        "src/com/google/javascript/rhino/jstype/FunctionBuilder.java",
        "src/com/google/javascript/rhino/jstype/FunctionParamBuilder.java",
        "src/com/google/javascript/rhino/jstype/FunctionPrototypeType.java",
        "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "src/com/google/javascript/rhino/jstype/IndexedType.java",
        "src/com/google/javascript/rhino/jstype/InstanceObjectType.java",
        "src/com/google/javascript/rhino/jstype/JSType.java",
        "src/com/google/javascript/rhino/jstype/JSTypeNative.java",
        "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "src/com/google/javascript/rhino/jstype/NamedType.java",
        "src/com/google/javascript/rhino/jstype/NoObjectType.java",
        "src/com/google/javascript/rhino/jstype/NoType.java",
        "src/com/google/javascript/rhino/jstype/NullType.java",
        "src/com/google/javascript/rhino/jstype/NumberType.java",
        "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "src/com/google/javascript/rhino/jstype/ParameterizedType.java",
        "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "src/com/google/javascript/rhino/jstype/ProxyObjectType.java",
        "src/com/google/javascript/rhino/jstype/RecordType.java",
        "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java",
        "src/com/google/javascript/rhino/jstype/SimpleSlot.java",
        "src/com/google/javascript/rhino/jstype/StaticScope.java",
        "src/com/google/javascript/rhino/jstype/StaticSlot.java",
        "src/com/google/javascript/rhino/jstype/StringType.java",
        "src/com/google/javascript/rhino/jstype/TemplateType.java",
        "src/com/google/javascript/rhino/jstype/TernaryValue.java",
        "src/com/google/javascript/rhino/jstype/UnionType.java",
        "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "src/com/google/javascript/rhino/jstype/UnknownType.java",
        "src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java",
        "src/com/google/javascript/rhino/jstype/ValueType.java",
        "src/com/google/javascript/rhino/jstype/Visitor.java",
        "src/com/google/javascript/rhino/jstype/VoidType.java"
      ],
      "num": 325
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [
        "com.google.javascript.rhino.jstype.ProxyObjectType:isEnumType:[]:boolean",
        "com.google.javascript.rhino.jstype.FunctionType:addSubType:[FunctionType subType]:void",
        "com.google.javascript.jscomp.DefaultCodingConvention:defineDelegateProxyPrototypeProperties:[JSTypeRegistry registry, Scope scope, List\u003cObjectType\u003e delegateProxyPrototypes]:void",
        "com.google.javascript.rhino.jstype.ProxyObjectType:getPropertiesCount:[]:int",
        "com.google.javascript.jscomp.DefaultCodingConvention:extractClassNameIfProvide:[Node node, Node parent]:String",
        "com.google.javascript.jscomp.DefaultCodingConvention:isExported:[String name]:boolean",
        "com.google.javascript.rhino.jstype.InstanceObjectType:isBooleanObjectType:[]:boolean",
        "com.google.javascript.jscomp.CodingConvention:isVarArgsParameter:[Node parameter]:boolean",
        "com.google.javascript.jscomp.AbstractCommandLineRunner:createInputs:[List\u003cString\u003e files, boolean allowStdIn]:List\u003cJSSourceFile\u003e",
        "com.google.javascript.rhino.jstype.FunctionType:getLeastSupertype:[JSType that]:JSType",
        "com.google.javascript.rhino.jstype.ProxyObjectType:getReferenceName:[]:String",
        "com.google.javascript.rhino.jstype.ObjectType:hasProperty:[String propertyName]:boolean",
        "com.google.javascript.rhino.jstype.ProxyObjectType:matchesNumberContext:[]:boolean",
        "com.google.javascript.jscomp.LinkedFlowScope:getParentScope:[]:StaticScope\u003cJSType\u003e",
        "com.google.javascript.rhino.jstype.InstanceObjectType:InstanceObjectType:[JSTypeRegistry registry, FunctionType constructor]:null",
        "com.google.javascript.jscomp.deps.DepsFileParser:parseFileReader:[String filePath, Reader reader]:List\u003cDependencyInfo\u003e",
        "com.google.javascript.jscomp.SanityCheck:sanityCheckCodeGeneration:[Node root]:Node",
        "com.google.javascript.rhino.jstype.FunctionType:isReturnTypeInferred:[]:boolean",
        "com.google.javascript.rhino.jstype.ProxyObjectType:getIndexType:[]:JSType",
        "com.google.javascript.jscomp.deps.SortedDependencies:SortedDependencies:[List\u003cINPUT\u003e inputs]:null",
        "com.google.javascript.jscomp.deps.SimpleDependencyInfo:SimpleDependencyInfo:[String srcPathRelativeToClosure, String pathOfDefiningFile, List\u003cString\u003e provides, List\u003cString\u003e requires]:null",
        "com.google.javascript.jscomp.parsing.JsDocInfoParser\\$ExtractionInfo:ExtractionInfo:[String string, JsDocToken token]:null",
        "com.google.javascript.jscomp.parsing.ParserRunner:extractList:[String configProp]:Set\u003cString\u003e",
        "com.google.javascript.rhino.jstype.NamedType:resolveInternal:[ErrorReporter t, StaticScope\u003cJSType\u003e enclosing]:JSType",
        "com.google.javascript.rhino.jstype.ObjectType:isUnknownType:[]:boolean",
        "com.google.javascript.jscomp.CodingConvention\\$AssertionFunctionSpec:getAssertedType:[]:JSTypeNative",
        "com.google.javascript.jscomp.deps.DepsFileParser:parseLine:[String line]:boolean",
        "com.google.javascript.jscomp.AbstractCommandLineRunner:maybeCreateDirsForPath:[String pathPrefix]:void",
        "com.google.javascript.jscomp.AbstractCommandLineRunner:expandSourceMapPath:[B options, JSModule forModule]:String",
        "com.google.javascript.jscomp.parsing.JsDocInfoParser:reportTypeSyntaxWarning:[String warning]:Node",
        "com.google.javascript.jscomp.deps.JsFileLineParser\\$ParseException:isFatal:[]:boolean",
        "com.google.javascript.jscomp.parsing.JsDocInfoParser:extractSingleLineBlock:[]:ExtractionInfo",
        "com.google.javascript.jscomp.SourceFile:SourceFile:[String fileName]:null",
        "com.google.javascript.jscomp.SourceFile:hasSourceInMemory:[]:boolean",
        "com.google.javascript.rhino.jstype.RecordTypeBuilder:addProperty:[String name, JSType type]:RecordTypeBuilder",
        "com.google.javascript.jscomp.AbstractCommandLineRunner:createExterns:[]:List\u003cJSSourceFile\u003e",
        "com.google.javascript.jscomp.SourceFile:clearCachedSource:[]:void",
        "com.google.javascript.jscomp.AbstractCommandLineRunner\\$CommandLineConfig:setJscompOff:[List\u003cString\u003e jscompOff]:CommandLineConfig",
        "com.google.javascript.jscomp.CodingConvention:isExported:[String name, boolean local]:boolean",
        "com.google.javascript.rhino.jstype.ProxyObjectType:findPropertyType:[String propertyName]:JSType",
        "com.google.javascript.jscomp.CodingConvention:getDelegateRelationship:[Node callNode]:DelegateRelationship",
        "com.google.javascript.jscomp.deps.SortedDependencies:topologicalStableSort:[List\u003cT\u003e items, Multimap\u003cT,T\u003e deps]:List\u003cT\u003e",
        "com.google.javascript.jscomp.AbstractCommandLineRunner:writeOutput:[PrintStream out, Compiler compiler, String code, String wrapper, String codePlaceholder]:void",
        "com.google.javascript.jscomp.AbstractCommandLineRunner:shouldGenerateManifestPerModule:[]:boolean",
        "com.google.javascript.jscomp.AbstractCommandLineRunner\\$RunTimeStats:outputBestPhaseOrdering:[]:void",
        "com.google.javascript.jscomp.CodingConvention:isExported:[String name]:boolean",
        "com.google.javascript.jscomp.deps.SimpleDependencyInfo:getPathRelativeToClosureBase:[]:String",
        "com.google.javascript.rhino.jstype.ProxyObjectType:collectPropertyNames:[Set\u003cString\u003e props]:void",
        "com.google.javascript.jscomp.AbstractCommandLineRunner\\$CommandLineConfig:setVariableMapOutputFile:[String variableMapOutputFile]:CommandLineConfig",
        "com.google.javascript.rhino.jstype.FunctionType:FunctionType:[JSTypeRegistry registry, String name, Node source, ArrowType arrowType, ObjectType typeOfThis, String templateTypeName, boolean isConstructor, boolean nativeType]:null",
        "com.google.javascript.jscomp.parsing.JsDocInfoParser:parseUnionTypeWithAlternate:[JsDocToken token, Node alternate]:Node",
        "com.google.javascript.rhino.jstype.FunctionType:toDebugHashCodeString:[]:String",
        "com.google.javascript.jscomp.parsing.JsDocInfoParser:parse:[]:boolean",
        "com.google.javascript.jscomp.SourceFile\\$Generated:clearCachedSource:[]:void",
        "com.google.javascript.jscomp.parsing.JsDocInfoParser:parseBasicTypeExpression:[JsDocToken token]:Node",
        "com.google.javascript.rhino.jstype.ProxyObjectType:hasProperty:[String propertyName]:boolean",
        "com.google.javascript.rhino.jstype.FunctionType:hasInstanceType:[]:boolean",
        "com.google.javascript.jscomp.AbstractCommandLineRunner:outputManifest:[]:void",
        "com.google.javascript.jscomp.LinkedFlowScope\\$FlatFlowScopeCache:getSlot:[String name]:StaticSlot\u003cJSType\u003e",
        "com.google.javascript.rhino.jstype.FunctionType:setInstanceType:[ObjectType instanceType]:void",
        "com.google.javascript.jscomp.DefaultCodingConvention:isSuperClassReference:[String propertyName]:boolean",
        "com.google.javascript.jscomp.DefaultCodingConvention:getGlobalObject:[]:String",
        "com.google.javascript.rhino.jstype.ObjectType:visit:[Visitor\u003cT\u003e visitor]:T",
        "com.google.javascript.rhino.jstype.InstanceObjectType:isTheObjectType:[]:boolean",
        "com.google.javascript.rhino.jstype.ProxyObjectType:isPropertyTypeDeclared:[String propertyName]:boolean",
        "com.google.javascript.jscomp.parsing.JsDocInfoParser:parseFieldName:[JsDocToken token]:Node",
        "com.google.javascript.rhino.jstype.NamedType:getReferencedType:[]:JSType",
        "com.google.javascript.jscomp.DefaultCodingConvention:getDelegateRelationship:[Node callNode]:DelegateRelationship",
        "com.google.javascript.rhino.jstype.ProxyObjectType:getConstructor:[]:FunctionType",
        "com.google.javascript.rhino.jstype.ProxyObjectType:getCtorImplementedInterfaces:[]:Iterable\u003cObjectType\u003e",
        "com.google.javascript.rhino.jstype.FunctionType:defineProperty:[String name, JSType type, boolean inferred, boolean inExterns]:boolean",
        "com.google.javascript.rhino.jstype.ObjectType:hasOwnProperty:[String propertyName]:boolean",
        "com.google.javascript.rhino.jstype.ProxyObjectType:isSubtype:[JSType that]:boolean",
        "com.google.javascript.jscomp.parsing.JsDocInfoParser:eatTokensUntilEOL:[]:JsDocToken",
        "com.google.javascript.jscomp.SourceFile:fromCode:[String fileName, String code]:SourceFile",
        "com.google.javascript.rhino.jstype.InstanceObjectType:isEquivalentTo:[JSType that]:boolean",
        "com.google.javascript.jscomp.SourceFile\\$OnDisk:setCharset:[Charset c]:void",
        "com.google.javascript.jscomp.JsMessageExtractor\\$ExtractMessagesVisitor:ExtractMessagesVisitor:[AbstractCompiler compiler]:null",
        "com.google.javascript.rhino.jstype.ProxyObjectType:isCheckedUnknownType:[]:boolean",
        "com.google.javascript.jscomp.deps.SortedDependencies\\$CircularDependencyException:CircularDependencyException:[String message]:null",
        "com.google.javascript.jscomp.AbstractCommandLineRunner:expandManifest:[JSModule forModule]:String",
        "com.google.javascript.jscomp.AbstractCommandLineRunner\\$CommandLineConfig:setCreateNameMapFiles:[boolean createNameMapFiles]:CommandLineConfig",
        "com.google.javascript.rhino.jstype.FunctionType:supAndInfHelper:[JSType that, boolean leastSuper]:JSType",
        "com.google.javascript.rhino.jstype.ProxyObjectType:canAssignTo:[JSType that]:boolean",
        "com.google.javascript.jscomp.AbstractCommandLineRunner:createJsModules:[List\u003cString\u003e specs, List\u003cString\u003e jsFiles]:JSModule[]",
        "com.google.javascript.jscomp.AbstractCommandLineRunner\\$CommandLineConfig:setComputePhaseOrdering:[boolean computePhaseOrdering]:CommandLineConfig",
        "com.google.javascript.jscomp.parsing.JsDocInfoParser:parseTypeExpressionList:[JsDocToken token]:Node",
        "com.google.javascript.jscomp.LinkedFlowScope:flowsFromBottom:[]:boolean",
        "com.google.javascript.jscomp.deps.JsFileParser:parseFile:[String filePath, String closureRelativePath]:DependencyInfo",
        "com.google.javascript.jscomp.AbstractCommandLineRunner\\$FlagUsageException:FlagUsageException:[String message]:null",
        "com.google.javascript.rhino.jstype.NamedType:forgiveUnknownNames:[]:void",
        "com.google.javascript.jscomp.CodingConvention:getAssertionFunctions:[]:Collection\u003cAssertionFunctionSpec\u003e",
        "com.google.javascript.jscomp.parsing.JsDocInfoParser:match:[JsDocToken token1, JsDocToken token2]:boolean",
        "com.google.javascript.jscomp.deps.SortedDependencies:findRequireInSubGraphOrFail:[INPUT input, Set\u003cINPUT\u003e subGraph]:INPUT",
        "com.google.javascript.jscomp.parsing.JsDocInfoParser:toString:[JsDocToken token]:String",
        "com.google.javascript.jscomp.CodingConvention:applySingletonGetter:[FunctionType functionType, FunctionType getterType, ObjectType objectType]:void",
        "com.google.javascript.jscomp.SourceFile:fromGenerator:[String fileName, Generator generator]:SourceFile",
        "com.google.javascript.jscomp.CodingConvention:isValidEnumKey:[String key]:boolean",
        "com.google.javascript.rhino.jstype.ProxyObjectType:isInstanceType:[]:boolean",
        "com.google.javascript.rhino.jstype.NamedType:hasReferenceName:[]:boolean",
        "com.google.javascript.rhino.jstype.NamedType:resolveViaProperties:[ErrorReporter t, StaticScope\u003cJSType\u003e enclosing]:void",
        "com.google.javascript.jscomp.AbstractCommandLineRunner\\$CommandLineConfig:setPrintTree:[boolean printTree]:CommandLineConfig",
        "com.google.javascript.jscomp.DefaultCodingConvention:identifyTypeDefAssign:[Node n]:String",
        "com.google.javascript.jscomp.AbstractCommandLineRunner\\$CommandLineConfig:setOutputManifest:[String outputManifest]:CommandLineConfig",
        "com.google.javascript.jscomp.parsing.JsDocInfoParser:retrieveAndResetParsedJSDocInfo:[]:JSDocInfo",
        "com.google.javascript.jscomp.parsing.JsDocInfoParser:trimEnd:[String s]:String",
        "com.google.javascript.rhino.jstype.FunctionType:getParametersNode:[]:Node",
        "com.google.javascript.rhino.jstype.ProxyObjectType:isNominalType:[]:boolean",
        "com.google.javascript.jscomp.AbstractCommandLineRunner\\$CommandLineConfig:setManageClosureDependencies:[boolean newVal]:CommandLineConfig",
        "com.google.javascript.jscomp.CodingConvention:isPrivate:[String name]:boolean",
        "com.google.javascript.jscomp.LinkedFlowScope:equals:[Object other]:boolean",
        "com.google.javascript.jscomp.CheckGlobalThis:getFunctionJsDocInfo:[Node n]:JSDocInfo",
        "com.google.javascript.jscomp.AbstractCommandLineRunner:setRunOptions:[B options]:void",
        "com.google.javascript.jscomp.AbstractCommandLineRunner:parseModuleWrappers:[List\u003cString\u003e specs, JSModule[] modules]:Map\u003cString,String\u003e",
        "com.google.javascript.jscomp.AbstractCommandLineRunner:toPrintStream:[String fileName]:PrintStream",
        "com.google.javascript.jscomp.deps.JsFileLineParser:parseJsString:[String jsStringLiteral]:String",
        "com.google.javascript.jscomp.LinkedFlowScope:inferQualifiedSlot:[String symbol, JSType bottomType, JSType inferredType]:void",
        "com.google.javascript.jscomp.AbstractCommandLineRunner:openExternExportsStream:[B options, String path]:PrintStream",
        "com.google.javascript.jscomp.SourceFile:getCode:[]:String",
        "com.google.javascript.rhino.jstype.ObjectType:getPropertiesCount:[]:int",
        "com.google.javascript.jscomp.JsMessageExtractor\\$ExtractMessagesVisitor:getMessages:[]:Collection\u003cJsMessage\u003e",
        "com.google.javascript.rhino.jstype.FunctionType:getSubTypes:[]:List\u003cFunctionType\u003e",
        "com.google.javascript.jscomp.parsing.JsDocInfoParser:parseParamTypeExpressionAnnotation:[JsDocToken token]:Node",
        "com.google.javascript.jscomp.AbstractCommandLineRunner\\$CommandLineConfig:setLoggingLevel:[String loggingLevel]:CommandLineConfig",
        "com.google.javascript.rhino.jstype.NamedType:isNamedType:[]:boolean",
        "com.google.javascript.rhino.jstype.NamedType:hashCode:[]:int",
        "com.google.javascript.jscomp.LinkedFlowScope:diffSlots:[StaticSlot\u003cJSType\u003e slotA, StaticSlot\u003cJSType\u003e slotB]:boolean",
        "com.google.javascript.jscomp.CheckGlobalThis:CheckGlobalThis:[AbstractCompiler compiler, CheckLevel level]:null",
        "com.google.javascript.jscomp.SourceFile:fromFile:[File file]:SourceFile",
        "com.google.javascript.jscomp.deps.JsFileLineParser\\$ParseException:ParseException:[String message, boolean fatal]:null",
        "com.google.javascript.rhino.jstype.ProxyObjectType:hasReferenceName:[]:boolean",
        "com.google.javascript.jscomp.DefaultCodingConvention:extractClassNameIfRequire:[Node node, Node parent]:String",
        "com.google.javascript.rhino.jstype.ProxyObjectType:getOwnPropertyJSDocInfo:[String propertyName]:JSDocInfo",
        "com.google.javascript.jscomp.LinkedFlowScope:completeScope:[Scope scope]:void",
        "com.google.javascript.jscomp.deps.DependencyInfo:getName:[]:String",
        "com.google.javascript.jscomp.CodingConvention:getSingletonGetterClassName:[Node callNode]:String",
        "com.google.javascript.jscomp.DefaultCodingConvention:applyDelegateRelationship:[ObjectType delegateSuperclass, ObjectType delegateBase, ObjectType delegator, FunctionType delegateProxy, FunctionType findDelegate]:void",
        "com.google.javascript.jscomp.LinkedFlowScope:optimize:[]:LinkedFlowScope",
        "com.google.javascript.jscomp.SourceFile\\$Generator:getCode:[]:String",
        "com.google.javascript.rhino.jstype.ObjectType:hasOwnDeclaredProperty:[String name]:boolean",
        "com.google.javascript.rhino.jstype.ObjectType:testForEquality:[JSType that]:TernaryValue",
        "com.google.javascript.jscomp.parsing.JsDocInfoParser:parseTypeName:[JsDocToken token]:Node",
        "com.google.javascript.jscomp.parsing.JsDocInfoParser:extractMultilineTextualBlock:[JsDocToken token, WhitespaceOption option]:ExtractionInfo",
        "com.google.javascript.rhino.jstype.InstanceObjectType:InstanceObjectType:[JSTypeRegistry registry, FunctionType constructor, boolean isNativeType]:null",
        "com.google.javascript.rhino.jstype.FunctionType:getSource:[]:Node",
        "com.google.javascript.jscomp.AbstractCommandLineRunner:getMapPath:[String outputFile]:String",
        "com.google.javascript.jscomp.CodingConvention:isSuperClassReference:[String propertyName]:boolean",
        "com.google.javascript.rhino.jstype.FunctionType:hasUnknownSupertype:[]:boolean",
        "com.google.javascript.jscomp.AbstractCommandLineRunner:createSourceInputs:[List\u003cString\u003e files]:List\u003cJSSourceFile\u003e",
        "com.google.javascript.rhino.jstype.NamedType:setReferencedType:[ObjectType type, ErrorReporter t, StaticScope\u003cJSType\u003e enclosing]:void",
        "com.google.javascript.jscomp.deps.DependencyInfo:getRequires:[]:Collection\u003cString\u003e",
        "com.google.javascript.jscomp.AbstractCommandLineRunner:outputNameMaps:[B options]:void",
        "com.google.javascript.rhino.jstype.ProxyObjectType:resolveInternal:[ErrorReporter t, StaticScope\u003cJSType\u003e scope]:JSType",
        "com.google.javascript.rhino.jstype.ProxyObjectType:ProxyObjectType:[JSTypeRegistry registry, ObjectType referencedType]:null",
        "com.google.javascript.rhino.jstype.FunctionType:getTypeOfThis:[]:ObjectType",
        "com.google.javascript.rhino.jstype.FunctionType:getGreatestSubtype:[JSType that]:JSType",
        "com.google.javascript.rhino.jstype.ProxyObjectType:setPropertyJSDocInfo:[String propertyName, JSDocInfo info, boolean inExterns]:void",
        "com.google.javascript.rhino.jstype.ProxyObjectType:toDebugHashCodeString:[]:String",
        "com.google.javascript.jscomp.parsing.JsDocInfoParser:parseAndRecordTypeNode:[JsDocToken token, boolean matchingLC]:Node",
        "com.google.javascript.jscomp.parsing.JsDocInfoParser:wrapNode:[int type, Node n]:Node",
        "com.google.javascript.jscomp.AbstractCommandLineRunner\\$CommandLineConfig:setJscompError:[List\u003cString\u003e jscompError]:CommandLineConfig",
        "com.google.javascript.jscomp.CodingConvention:getExportPropertyFunction:[]:String",
        "com.google.javascript.jscomp.DefaultCodingConvention:applySingletonGetter:[FunctionType functionType, FunctionType getterType, ObjectType objectType]:void",
        "com.google.javascript.jscomp.CodingConvention:identifyTypeDeclarationCall:[Node n]:List\u003cString\u003e",
        "com.google.javascript.jscomp.SourceFile\\$OnDisk:clearCachedSource:[]:void",
        "com.google.javascript.jscomp.parsing.JsDocInfoParser:parseParametersType:[JsDocToken token]:Node",
        "com.google.javascript.jscomp.parsing.JsDocInfoParser:extractBlockComment:[JsDocToken token]:ExtractionInfo",
        "com.google.javascript.jscomp.CheckGlobalThis:shouldTraverse:[NodeTraversal t, Node n, Node parent]:boolean",
        "com.google.javascript.jscomp.CodingConvention\\$ObjectLiteralCast:ObjectLiteralCast:[String typeName, Node objectNode]:null",
        "com.google.javascript.jscomp.DefaultCodingConvention:isPropertyTestFunction:[Node call]:boolean",
        "com.google.javascript.rhino.jstype.ProxyObjectType:getImplicitPrototype:[]:ObjectType",
        "com.google.javascript.jscomp.deps.JsFileLineParser:doParse:[String filePath, Reader fileContents]:void",
        "com.google.javascript.rhino.jstype.ProxyObjectType:isPropertyTypeInferred:[String propertyName]:boolean",
        "com.google.javascript.rhino.jstype.InstanceObjectType:isRegexpType:[]:boolean",
        "com.google.javascript.jscomp.LinkedFlowScope:getSlot:[String name]:StaticSlot\u003cJSType\u003e",
        "com.google.javascript.jscomp.parsing.ParserRunner:ParserRunner:[]:null",
        "com.google.javascript.jscomp.deps.DependencyInfo:getPathRelativeToClosureBase:[]:String",
        "com.google.javascript.jscomp.JsMessageExtractor:extractMessages:[JSSourceFile... inputs]:Collection\u003cJsMessage\u003e",
        "com.google.javascript.jscomp.AbstractCommandLineRunner\\$CommandLineConfig:setCreateSourceMap:[String createSourceMap]:CommandLineConfig",
        "com.google.javascript.jscomp.deps.JsFileLineParser:parseJsStringArray:[String input]:List\u003cString\u003e",
        "com.google.javascript.rhino.jstype.ObjectType:detectImplicitPrototypeCycle:[]:boolean",
        "com.google.javascript.rhino.jstype.ObjectType:hasReferenceName:[]:boolean",
        "com.google.javascript.rhino.jstype.RecordTypeBuilder:build:[]:JSType",
        "com.google.javascript.jscomp.CheckGlobalThis:shouldReportThis:[Node n, Node parent]:boolean",
        "com.google.javascript.jscomp.deps.SortedDependencies:findCycle:[List\u003cINPUT\u003e subGraph, Multimap\u003cINPUT,INPUT\u003e deps]:List\u003cINPUT\u003e",
        "com.google.javascript.jscomp.LinkedFlowScope:LinkedFlowScope:[FlatFlowScopeCache cache]:null",
        "com.google.javascript.rhino.jstype.ObjectType:getOwnPropertyJSDocInfo:[String propertyName]:JSDocInfo",
        "com.google.javascript.rhino.jstype.FunctionType:getTopMostDefiningType:[String propertyName]:JSType",
        "com.google.javascript.rhino.jstype.ObjectType:getPropertyNames:[]:Set\u003cString\u003e",
        "com.google.javascript.rhino.jstype.FunctionPrototypeType:isFunctionPrototypeType:[]:boolean",
        "com.google.javascript.jscomp.AbstractCommandLineRunner\\$CommandLineConfig:setOutputWrapperMarker:[String outputWrapperMarker]:CommandLineConfig",
        "com.google.javascript.jscomp.AbstractCommandLineRunner\\$CommandLineConfig:setDefine:[List\u003cString\u003e define]:CommandLineConfig",
        "com.google.javascript.jscomp.parsing.JsDocInfoParser:parseTopLevelTypeExpression:[JsDocToken token]:Node",
        "com.google.javascript.jscomp.AbstractCommandLineRunner:expandCommandLinePath:[String path, JSModule forModule]:String",
        "com.google.javascript.rhino.jstype.FunctionType:canBeCalled:[]:boolean",
        "com.google.javascript.jscomp.parsing.JsDocInfoParser:parseArrayType:[JsDocToken token]:Node",
        "com.google.javascript.jscomp.parsing.JsDocInfoParser:newStringNode:[String s]:Node",
        "com.google.javascript.rhino.jstype.ProxyObjectType:isUnknownType:[]:boolean",
        "com.google.javascript.jscomp.deps.SimpleDependencyInfo:getRequires:[]:Collection\u003cString\u003e",
        "com.google.javascript.rhino.jstype.FunctionType:getImplementedInterfaces:[]:Iterable\u003cObjectType\u003e",
        "com.google.javascript.jscomp.parsing.JsDocInfoParser:parseTypeExpressionAnnotation:[JsDocToken token]:Node",
        "com.google.javascript.jscomp.CodingConvention:extractClassNameIfProvide:[Node node, Node parent]:String",
        "com.google.javascript.jscomp.parsing.JsDocInfoParser:setFileOverviewJSDocInfo:[JSDocInfo fileOverviewJSDocInfo]:void",
        "com.google.javascript.jscomp.DefaultCodingConvention:getObjectLiteralCast:[NodeTraversal t, Node callNode]:ObjectLiteralCast",
        "com.google.javascript.rhino.jstype.InstanceObjectType:isStringObjectType:[]:boolean",
        "com.google.javascript.rhino.jstype.FunctionType:appendVarArgsString:[StringBuilder builder, JSType paramType]:void",
        "com.google.javascript.rhino.jstype.ObjectType:getPossibleToBooleanOutcomes:[]:BooleanLiteralSet",
        "com.google.javascript.jscomp.parsing.JsDocInfoParser:getFileOverviewJSDocInfo:[]:JSDocInfo",
        "com.google.javascript.jscomp.DefaultCodingConvention:getAssertionFunctions:[]:Collection\u003cAssertionFunctionSpec\u003e",
        "com.google.javascript.rhino.jstype.NamedType:resolveViaRegistry:[ErrorReporter t, StaticScope\u003cJSType\u003e enclosing]:boolean",
        "com.google.javascript.jscomp.SourceFile:fromFile:[String fileName]:SourceFile",
        "com.google.javascript.jscomp.deps.SimpleDependencyInfo:getProvides:[]:Collection\u003cString\u003e",
        "com.google.javascript.jscomp.AbstractCommandLineRunner:AbstractCommandLineRunner:[PrintStream out, PrintStream err]:null",
        "com.google.javascript.jscomp.DefaultCodingConvention:getClassesDefinedByCall:[Node callNode]:SubclassRelationship",
        "com.google.javascript.jscomp.LinkedFlowScope\\$FlatFlowScopeCache:FlatFlowScopeCache:[LinkedFlowScope joinedScopeA, LinkedFlowScope joinedScopeB]:null",
        "com.google.javascript.rhino.jstype.ProxyObjectType:setJSDocInfo:[JSDocInfo info]:void",
        "com.google.javascript.jscomp.AbstractCommandLineRunner\\$CommandLineConfig:setPrintAst:[boolean printAst]:CommandLineConfig",
        "com.google.javascript.rhino.jstype.ProxyObjectType:getOwnPropertyNames:[]:Set\u003cString\u003e",
        "com.google.javascript.jscomp.deps.SortedDependencies:getInputsWithoutProvides:[]:List\u003cINPUT\u003e",
        "com.google.javascript.rhino.jstype.NamedType:NamedType:[JSTypeRegistry registry, String reference, String sourceName, int lineno, int charno]:null",
        "com.google.javascript.jscomp.DefaultCodingConvention:isExported:[String name, boolean local]:boolean",
        "com.google.javascript.jscomp.parsing.JsDocInfoParser:parseFunctionType:[JsDocToken token]:Node",
        "com.google.javascript.jscomp.LinkedFlowScope:findUniqueRefinedSlot:[FlowScope blindScope]:StaticSlot\u003cJSType\u003e",
        "com.google.javascript.jscomp.deps.SimpleDependencyInfo:getName:[]:String",
        "com.google.javascript.rhino.jstype.FunctionType:resolveInternal:[ErrorReporter t, StaticScope\u003cJSType\u003e scope]:JSType",
        "com.google.javascript.jscomp.DefaultCodingConvention:isVarArgsParameter:[Node parameter]:boolean",
        "com.google.javascript.rhino.jstype.ProxyObjectType:isInterface:[]:boolean",
        "com.google.javascript.rhino.jstype.FunctionType:getPropertyType:[String name]:JSType",
        "com.google.javascript.jscomp.deps.JsFileLineParser:didParseSucceed:[]:boolean",
        "com.google.javascript.jscomp.parsing.JsDocInfoParser:next:[]:JsDocToken",
        "com.google.javascript.jscomp.SourceFile\\$Preloaded:Preloaded:[String fileName, String originalPath, String code]:null",
        "com.google.javascript.jscomp.parsing.JsDocInfoParser:parseAndRecordTypeNode:[JsDocToken token, int lineno, int startCharno, boolean matchingLC, boolean onlyParseSimpleNames]:Node",
        "com.google.javascript.jscomp.deps.DepsFileParser:DepsFileParser:[ErrorManager errorManager]:null",
        "com.google.javascript.rhino.jstype.ObjectType:ObjectType:[JSTypeRegistry registry]:null",
        "com.google.javascript.jscomp.CodingConvention:getDelegateSuperclassName:[]:String",
        "com.google.javascript.rhino.jstype.ObjectType:isPropertyInExterns:[String propertyName]:boolean",
        "com.google.javascript.jscomp.deps.DepsFileParser:parseFile:[String filePath, String fileContents]:List\u003cDependencyInfo\u003e",
        "com.google.javascript.jscomp.SourceFile:fromReader:[String fileName, Reader r]:SourceFile",
        "com.google.javascript.rhino.jstype.ProxyObjectType:isOrdinaryFunction:[]:boolean",
        "com.google.javascript.jscomp.SourceFile:getCodeNoCache:[]:String",
        "com.google.javascript.rhino.jstype.FunctionType:hasEqualCallType:[FunctionType otherType]:boolean",
        "com.google.javascript.rhino.jstype.ObjectType:defineInferredProperty:[String propertyName, JSType type, boolean inExterns]:boolean",
        "com.google.javascript.jscomp.parsing.ParserRunner:initResourceConfig:[]:void",
        "com.google.javascript.jscomp.parsing.JsDocInfoParser:parseAndRecordTypeNameNode:[JsDocToken token, int lineno, int startCharno, boolean matchingLC]:Node",
        "com.google.javascript.jscomp.deps.SortedDependencies:getSortedList:[]:List\u003cINPUT\u003e",
        "com.google.javascript.jscomp.parsing.JsDocInfoParser:parseUnionType:[JsDocToken token]:Node",
        "com.google.javascript.jscomp.CodingConvention\\$AssertionFunctionSpec:getFunctionName:[]:String",
        "com.google.javascript.rhino.jstype.FunctionPrototypeType:getOwnerFunction:[]:FunctionType",
        "com.google.javascript.jscomp.AbstractCommandLineRunner:createOptions:[]:B",
        "com.google.javascript.jscomp.deps.DependencyInfo:getProvides:[]:Collection\u003cString\u003e",
        "com.google.javascript.rhino.jstype.FunctionType:hasProperty:[String name]:boolean",
        "com.google.javascript.jscomp.SanityCheck:SanityCheck:[AbstractCompiler compiler]:null",
        "com.google.javascript.jscomp.CodingConvention:isConstant:[String variableName]:boolean",
        "com.google.javascript.jscomp.deps.SimpleDependencyInfo:equals:[Object obj]:boolean",
        "com.google.javascript.jscomp.JsMessageExtractor:JsMessageExtractor:[JsMessage.IdGenerator idGenerator, JsMessage.Style style]:null",
        "com.google.javascript.rhino.jstype.ObjectType:isNativeObjectType:[]:boolean",
        "com.google.javascript.rhino.jstype.ObjectType:defineDeclaredProperty:[String propertyName, JSType type, boolean inExterns]:boolean",
        "com.google.javascript.jscomp.parsing.JsDocInfoParser:JsDocInfoParser:[JsDocTokenStream stream, String sourceName, Config config, ErrorReporter errorReporter]:null",
        "com.google.javascript.jscomp.CodingConvention\\$AssertionFunctionSpec:getAssertedParam:[Node firstParam]:Node",
        "com.google.javascript.jscomp.CodingConvention:getGlobalObject:[]:String",
        "com.google.javascript.jscomp.DefaultCodingConvention:getExportSymbolFunction:[]:String",
        "com.google.javascript.rhino.jstype.FunctionType:hasCachedValues:[]:boolean",
        "com.google.javascript.jscomp.DefaultCodingConvention:isPrivate:[String name]:boolean",
        "com.google.javascript.rhino.jstype.UnresolvedTypeExpression:UnresolvedTypeExpression:[JSTypeRegistry registry, Node typeExpr, String sourceName, boolean forgiving]:null",
        "com.google.javascript.jscomp.parsing.JsDocInfoParser:parseResultType:[JsDocToken token]:Node",
        "com.google.javascript.jscomp.deps.JsFileLineParser:setShortcutMode:[boolean mode]:void",
        "com.google.javascript.jscomp.AbstractCommandLineRunner:printManifestTo:[Iterable\u003cCompilerInput\u003e inputs, String path]:void",
        "com.google.javascript.jscomp.DefaultCodingConvention:identifyTypeDeclarationCall:[Node n]:List\u003cString\u003e",
        "com.google.javascript.jscomp.deps.JsFileParser:parseFile:[String filePath, String closureRelativePath, String fileContents]:DependencyInfo",
        "com.google.javascript.rhino.jstype.ObjectType:getConstructor:[]:FunctionType",
        "com.google.javascript.rhino.jstype.NamedType:getTypedefType:[ErrorReporter t, StaticSlot\u003cJSType\u003e slot, String name]:JSType",
        "com.google.javascript.jscomp.CodingConvention:isOptionalParameter:[Node parameter]:boolean",
        "com.google.javascript.rhino.jstype.InstanceObjectType:getReferenceName:[]:String",
        "com.google.javascript.jscomp.AbstractCommandLineRunner\\$CommandLineConfig:setJscompDevMode:[CompilerOptions.DevMode jscompDevMode]:CommandLineConfig",
        "com.google.javascript.jscomp.CodingConvention:isPropertyTestFunction:[Node call]:boolean",
        "com.google.javascript.jscomp.parsing.JsDocInfoParser:createJSTypeExpression:[Node n]:JSTypeExpression",
        "com.google.javascript.jscomp.SourceFile:fromCode:[String fileName, String originalPath, String code]:SourceFile",
        "com.google.javascript.rhino.jstype.ProxyObjectType:isEquivalentTo:[JSType that]:boolean",
        "com.google.javascript.rhino.jstype.ObjectType:getReferenceName:[]:String",
        "com.google.javascript.rhino.jstype.ProxyObjectType:canBeCalled:[]:boolean",
        "com.google.javascript.jscomp.deps.JsFileParser:JsFileParser:[ErrorManager errorManager]:null",
        "com.google.javascript.jscomp.AbstractCommandLineRunner\\$CommandLineConfig:setSummaryDetailLevel:[int summaryDetailLevel]:CommandLineConfig",
        "com.google.javascript.jscomp.SanityCheck:process:[Node externs, Node root]:void",
        "com.google.javascript.jscomp.parsing.JsDocInfoParser:skipEOLs:[]:void",
        "com.google.javascript.jscomp.deps.SortedDependencies:findCycle:[INPUT current, Set\u003cINPUT\u003e subGraph, Multimap\u003cINPUT,INPUT\u003e deps, Set\u003cINPUT\u003e covered]:List\u003cINPUT\u003e",
        "com.google.javascript.rhino.jstype.ProxyObjectType:isPropertyInExterns:[String propertyName]:boolean",
        "com.google.javascript.rhino.jstype.ObjectType:getJSDocInfo:[]:JSDocInfo",
        "com.google.javascript.rhino.jstype.ProxyObjectType:testForEquality:[JSType that]:TernaryValue",
        "com.google.javascript.jscomp.CodingConvention:getAbstractMethodName:[]:String",
        "com.google.javascript.jscomp.SourceFile\\$Generated:getCode:[]:String",
        "com.google.javascript.jscomp.AbstractCommandLineRunner\\$CommandLineConfig:setModule:[List\u003cString\u003e module]:CommandLineConfig",
        "com.google.javascript.jscomp.deps.JsFileParser:parseReader:[String filePath, String closureRelativePath, Reader fileContents]:DependencyInfo",
        "com.google.javascript.jscomp.parsing.JsDocInfoParser:setFileLevelJsDocBuilder:[Node.FileLevelJsDocBuilder fileLevelJsDocBuilder]:void",
        "com.google.javascript.jscomp.AbstractCommandLineRunner:getCommandLineConfig:[]:CommandLineConfig",
        "com.google.javascript.jscomp.AbstractCommandLineRunner:getDiagnosticGroups:[]:DiagnosticGroups",
        "com.google.javascript.rhino.jstype.ProxyObjectType:matchesStringContext:[]:boolean",
        "com.google.javascript.jscomp.deps.JsFileLineParser:parseLine:[String line]:boolean",
        "com.google.javascript.rhino.jstype.InstanceObjectType:hashCode:[]:int",
        "com.google.javascript.rhino.jstype.ProxyObjectType:getJSDocInfo:[]:JSDocInfo",
        "com.google.javascript.jscomp.AbstractCommandLineRunner\\$CommandLineConfig:setCharset:[String charset]:CommandLineConfig",
        "com.google.javascript.jscomp.AbstractCommandLineRunner\\$CommandLineConfig:setModuleOutputPathPrefix:[String moduleOutputPathPrefix]:CommandLineConfig",
        "com.google.javascript.jscomp.SourceFile\\$OnDisk:getCharset:[]:Charset",
        "com.google.javascript.jscomp.parsing.JsDocInfoParser:newNode:[int type]:Node",
        "com.google.javascript.jscomp.AbstractCommandLineRunner\\$CommandLineConfig:setExterns:[List\u003cString\u003e externs]:CommandLineConfig",
        "com.google.javascript.rhino.jstype.ObjectType:collectPropertyNames:[Set\u003cString\u003e props]:void",
        "com.google.javascript.rhino.jstype.FunctionType:getPrototype:[]:FunctionPrototypeType",
        "com.google.javascript.rhino.jstype.ObjectType:hasCachedValues:[]:boolean",
        "com.google.javascript.jscomp.SourceFile:getOriginalPath:[]:String",
        "com.google.javascript.jscomp.SourceFile:fromInputStream:[String fileName, InputStream s]:SourceFile",
        "com.google.javascript.rhino.jstype.FunctionPrototypeType:hasReferenceName:[]:boolean",
        "com.google.javascript.rhino.jstype.FunctionType:forInterface:[JSTypeRegistry registry, String name, Node source]:FunctionType",
        "com.google.javascript.jscomp.parsing.ParserRunner:parse:[String sourceName, String sourceString, Config config, ErrorReporter errorReporter, Logger logger]:Node",
        "com.google.javascript.rhino.jstype.ObjectType:findPropertyType:[String propertyName]:JSType",
        "com.google.javascript.jscomp.SourceFile:getRegion:[int lineNumber]:Region",
        "com.google.javascript.rhino.jstype.ProxyObjectType:visit:[Visitor\u003cT\u003e visitor]:T",
        "com.google.javascript.jscomp.parsing.JsDocInfoParser:parseRecordType:[JsDocToken token]:Node",
        "com.google.javascript.rhino.jstype.ProxyObjectType:toString:[]:String",
        "com.google.javascript.jscomp.CodingConvention:getExportSymbolFunction:[]:String",
        "com.google.javascript.rhino.jstype.FunctionType:setSource:[Node source]:void",
        "com.google.javascript.jscomp.deps.SimpleDependencyInfo:toString:[]:String",
        "com.google.javascript.rhino.jstype.FunctionType:getMaxArguments:[]:int",
        "com.google.javascript.jscomp.AbstractCommandLineRunner:createExternInputs:[List\u003cString\u003e files]:List\u003cJSSourceFile\u003e",
        "com.google.javascript.rhino.jstype.InstanceObjectType:defineProperty:[String name, JSType type, boolean inferred, boolean inExterns]:boolean",
        "com.google.javascript.jscomp.CodingConvention\\$AssertionFunctionSpec:AssertionFunctionSpec:[String functionName]:null",
        "com.google.javascript.rhino.jstype.FunctionType:getReturnType:[]:JSType",
        "com.google.javascript.jscomp.AbstractCommandLineRunner:processResults:[Result result, JSModule[] modules, B options]:int",
        "com.google.javascript.rhino.jstype.RecordTypeBuilder:RecordTypeBuilder:[JSTypeRegistry registry]:null",
        "com.google.javascript.jscomp.AbstractCommandLineRunner:shouldGenerateMapPerModule:[B options]:boolean",
        "com.google.javascript.rhino.jstype.ObjectType:getParameterType:[]:JSType",
        "com.google.javascript.jscomp.CodingConvention\\$DelegateRelationship:DelegateRelationship:[String delegateBase, String delegator]:null",
        "com.google.javascript.jscomp.parsing.JsDocInfoParser:parseAndRecordTypeNode:[JsDocToken token]:Node",
        "com.google.javascript.jscomp.LinkedFlowScope:createEntryLattice:[Scope scope]:LinkedFlowScope",
        "com.google.javascript.jscomp.LinkedFlowScope\\$FlowScopeJoinOp:apply:[FlowScope a, FlowScope b]:FlowScope",
        "com.google.javascript.rhino.jstype.FunctionType:isSubtype:[JSType that]:boolean",
        "com.google.javascript.jscomp.LinkedFlowScope:inferSlotType:[String symbol, JSType type]:void",
        "com.google.javascript.jscomp.deps.JsFileLineParser:JsFileLineParser:[ErrorManager errorManager]:null",
        "com.google.javascript.jscomp.AbstractCommandLineRunner:createDefineReplacements:[List\u003cString\u003e definitions, CompilerOptions options]:void",
        "com.google.javascript.rhino.jstype.FunctionPrototypeType:FunctionPrototypeType:[JSTypeRegistry registry, FunctionType ownerFunction, ObjectType implicitPrototype]:null",
        "com.google.javascript.rhino.jstype.InstanceObjectType:isArrayType:[]:boolean",
        "com.google.javascript.jscomp.AbstractCommandLineRunner\\$RunTimeStats:recordEndRun:[]:void",
        "com.google.javascript.jscomp.CodingConvention:getClassesDefinedByCall:[Node callNode]:SubclassRelationship",
        "com.google.javascript.jscomp.LinkedFlowScope:LinkedFlowScope:[LinkedFlowScope directParent]:null",
        "com.google.javascript.jscomp.SourceFile:fromFile:[File file, Charset c]:SourceFile",
        "com.google.javascript.jscomp.AbstractCommandLineRunner:getCompiler:[]:A",
        "com.google.javascript.jscomp.SourceFile:setCode:[String sourceCode]:void",
        "com.google.javascript.jscomp.AbstractCommandLineRunner\\$CommandLineConfig:setVariableMapInputFile:[String variableMapInputFile]:CommandLineConfig",
        "com.google.javascript.jscomp.parsing.JsDocInfoParser:parseTypeNameAnnotation:[JsDocToken token]:Node",
        "com.google.javascript.rhino.jstype.ObjectType:getPropertyType:[String propertyName]:JSType",
        "com.google.javascript.rhino.jstype.ProxyObjectType:isNullable:[]:boolean",
        "com.google.javascript.jscomp.AbstractCommandLineRunner:getInputCharset:[]:Charset",
        "com.google.javascript.rhino.jstype.InstanceObjectType:hasReferenceName:[]:boolean",
        "com.google.javascript.jscomp.parsing.JsDocInfoParser:eatTokensUntilEOL:[JsDocToken token]:JsDocToken",
        "com.google.javascript.rhino.jstype.FunctionPrototypeType:getCtorImplementedInterfaces:[]:Iterable\u003cObjectType\u003e",
        "com.google.javascript.rhino.jstype.ObjectType:getIndexType:[]:JSType",
        "com.google.javascript.jscomp.LinkedFlowScope\\$FlatFlowScopeCache:FlatFlowScopeCache:[LinkedFlowScope directParent]:null",
        "com.google.javascript.jscomp.SourceFile\\$OnDisk:getCode:[]:String",
        "com.google.javascript.jscomp.CodingConvention:getObjectLiteralCast:[NodeTraversal t, Node callNode]:ObjectLiteralCast",
        "com.google.javascript.jscomp.AbstractCommandLineRunner:AbstractCommandLineRunner:[]:null",
        "com.google.javascript.jscomp.AbstractCommandLineRunner\\$CommandLineConfig:setOutputWrapper:[String outputWrapper]:CommandLineConfig",
        "com.google.javascript.jscomp.parsing.JsDocInfoParser:parseTypeExpression:[JsDocToken token]:Node",
        "com.google.javascript.jscomp.SourceFile\\$OnDisk:getCodeReader:[]:Reader",
        "com.google.javascript.jscomp.AbstractCommandLineRunner:initOptionsFromFlags:[CompilerOptions options]:void",
        "com.google.javascript.jscomp.deps.JsFileParser:parseLine:[String line]:boolean",
        "com.google.javascript.rhino.jstype.FunctionPrototypeType:FunctionPrototypeType:[JSTypeRegistry registry, FunctionType ownerFunction, ObjectType implicitPrototype, boolean isNative]:null",
        "com.google.javascript.rhino.jstype.NamedType:isEquivalentTo:[JSType that]:boolean",
        "com.google.javascript.jscomp.CodingConvention\\$AssertionFunctionSpec:AssertionFunctionSpec:[String functionName, JSTypeNative assertedType]:null",
        "com.google.javascript.rhino.jstype.InstanceObjectType:getConstructor:[]:FunctionType",
        "com.google.javascript.jscomp.AbstractCommandLineRunner\\$CommandLineConfig:setCodingConvention:[CodingConvention codingConvention]:CommandLineConfig",
        "com.google.javascript.rhino.jstype.FunctionType:isInterface:[]:boolean",
        "com.google.javascript.rhino.jstype.NamedType:toString:[]:String",
        "com.google.javascript.jscomp.AbstractCommandLineRunner\\$CommandLineConfig:setPropertyMapOutputFile:[String propertyMapOutputFile]:CommandLineConfig",
        "com.google.javascript.jscomp.SourceFile\\$Generated:Generated:[String fileName, Generator generator]:null",
        "com.google.javascript.jscomp.parsing.JsDocInfoParser:parseFieldType:[JsDocToken token]:Node",
        "com.google.javascript.rhino.jstype.FunctionType:getInstanceType:[]:ObjectType",
        "com.google.javascript.rhino.jstype.FunctionType:FunctionType:[JSTypeRegistry registry, String name, Node source]:null",
        "com.google.javascript.rhino.jstype.FunctionType:getDebugHashCodeStringOf:[JSType type]:String",
        "com.google.javascript.jscomp.AbstractCommandLineRunner:createCompiler:[]:A",
        "com.google.javascript.rhino.jstype.InstanceObjectType:toString:[]:String",
        "com.google.javascript.jscomp.CodingConvention\\$SubclassRelationship:SubclassRelationship:[SubclassType type, Node subclassNode, Node superclassNode]:null",
        "com.google.javascript.rhino.jstype.FunctionType:isEquivalentTo:[JSType otherType]:boolean",
        "com.google.javascript.rhino.jstype.ObjectType:cast:[JSType type]:ObjectType",
        "com.google.javascript.rhino.jstype.FunctionType:isConstructor:[]:boolean",
        "com.google.javascript.jscomp.parsing.ParserRunner:createConfig:[boolean isIdeMode]:Config",
        "com.google.javascript.rhino.jstype.ProxyObjectType:getPropertyType:[String propertyName]:JSType",
        "com.google.javascript.jscomp.DefaultCodingConvention:getAbstractMethodName:[]:String",
        "com.google.javascript.jscomp.parsing.JsDocInfoParser:current:[]:JsDocToken",
        "com.google.javascript.jscomp.DefaultCodingConvention:isValidEnumKey:[String key]:boolean",
        "com.google.javascript.jscomp.SourceFile\\$OnDisk:OnDisk:[File file]:null",
        "com.google.javascript.rhino.jstype.FunctionType:toString:[]:String",
        "com.google.javascript.rhino.jstype.ProxyObjectType:isEnumElementType:[]:boolean",
        "com.google.javascript.rhino.jstype.InstanceObjectType:isDateType:[]:boolean",
        "com.google.javascript.rhino.jstype.ObjectType:isPropertyTypeInferred:[String propertyName]:boolean",
        "com.google.javascript.jscomp.CodingConvention:identifyTypeDefAssign:[Node n]:String",
        "com.google.javascript.rhino.jstype.ObjectType:getCtorImplementedInterfaces:[]:Iterable\u003cObjectType\u003e",
        "com.google.javascript.jscomp.SourceFile:getLine:[int lineNumber]:String",
        "com.google.javascript.jscomp.AbstractCommandLineRunner:run:[]:void",
        "com.google.javascript.rhino.jstype.FunctionType:getTemplateTypeName:[]:String",
        "com.google.javascript.jscomp.SourceFile\\$Preloaded:Preloaded:[String fileName, String code]:null",
        "com.google.javascript.jscomp.SanityCheck:sanityCheckNormalization:[Node externs, Node root]:void",
        "com.google.javascript.rhino.jstype.FunctionType:getAllImplementedInterfaces:[]:Iterable\u003cObjectType\u003e",
        "com.google.javascript.jscomp.LinkedFlowScope:createChildFlowScope:[]:FlowScope",
        "com.google.javascript.jscomp.parsing.JsDocInfoParser:hasParsedFileOverviewDocInfo:[]:boolean",
        "com.google.javascript.rhino.jstype.FunctionType:isPropertyTypeInferred:[String property]:boolean",
        "com.google.javascript.jscomp.LinkedFlowScope:getTypeOfThis:[]:JSType",
        "com.google.javascript.rhino.jstype.NamedType:handleUnresolvedType:[ErrorReporter t]:void",
        "com.google.javascript.rhino.jstype.FunctionType:addRelatedInterfaces:[ObjectType instance, Set\u003cObjectType\u003e set]:void",
        "com.google.javascript.rhino.jstype.FunctionType:setPrototypeBasedOn:[ObjectType baseType]:void",
        "com.google.javascript.jscomp.CheckGlobalThis:visit:[NodeTraversal t, Node n, Node parent]:void",
        "com.google.javascript.rhino.jstype.FunctionPrototypeType:getReferenceName:[]:String",
        "com.google.javascript.jscomp.AbstractCommandLineRunner\\$CommandLineConfig:setJscompWarning:[List\u003cString\u003e jscompWarning]:CommandLineConfig",
        "com.google.javascript.jscomp.AbstractCommandLineRunner\\$CommandLineConfig:setJs:[List\u003cString\u003e js]:CommandLineConfig",
        "com.google.javascript.jscomp.parsing.JsDocInfoParser:hasParsedJSDocInfo:[]:boolean",
        "com.google.javascript.jscomp.parsing.JsDocInfoParser:parseTypeString:[String typeString]:Node",
        "com.google.javascript.jscomp.parsing.JsDocInfoParser:parseAndRecordTypeNode:[JsDocToken token, int lineno, int startCharno]:Node",
        "com.google.javascript.rhino.jstype.FunctionType:hasOwnProperty:[String name]:boolean",
        "com.google.javascript.rhino.jstype.FunctionType:isFunctionType:[]:boolean",
        "com.google.javascript.jscomp.CodingConvention:extractClassNameIfRequire:[Node node, Node parent]:String",
        "com.google.javascript.jscomp.parsing.JsDocInfoParser:reportGenericTypeSyntaxWarning:[]:Node",
        "com.google.javascript.rhino.jstype.ObjectType:getImplicitPrototype:[]:ObjectType",
        "com.google.javascript.jscomp.AbstractCommandLineRunner\\$CommandLineConfig:setPrintPassGraph:[boolean printPassGraph]:CommandLineConfig",
        "com.google.javascript.rhino.jstype.InstanceObjectType:getImplicitPrototype:[]:ObjectType",
        "com.google.javascript.rhino.jstype.FunctionType:getInternalArrowType:[]:ArrowType",
        "com.google.javascript.jscomp.AbstractCommandLineRunner:doRun:[]:int",
        "com.google.javascript.rhino.jstype.FunctionType:visit:[Visitor\u003cT\u003e visitor]:T",
        "com.google.javascript.jscomp.SourceFile:fromInputStream:[String fileName, String originalPath, InputStream s]:SourceFile",
        "com.google.javascript.rhino.jstype.ProxyObjectType:hasOwnProperty:[String propertyName]:boolean",
        "com.google.javascript.jscomp.DefaultCodingConvention:getSingletonGetterClassName:[Node callNode]:String",
        "com.google.javascript.jscomp.SourceFile:fromFile:[String fileName, Charset c]:SourceFile",
        "com.google.javascript.rhino.jstype.ObjectType:defineProperty:[String propertyName, JSType type, boolean inferred, boolean inExterns]:boolean",
        "com.google.javascript.jscomp.JsMessageExtractor:extractMessages:[Iterable\u003cJSSourceFile\u003e inputs]:Collection\u003cJsMessage\u003e",
        "com.google.javascript.jscomp.CodingConvention:applySubclassRelationship:[FunctionType parentCtor, FunctionType childCtor, SubclassType type]:void",
        "com.google.javascript.jscomp.parsing.JsDocInfoParser:extractMultilineTextualBlock:[JsDocToken token]:ExtractionInfo",
        "com.google.javascript.rhino.jstype.FunctionType:isInstanceType:[]:boolean",
        "com.google.javascript.rhino.jstype.ObjectType:setPropertyJSDocInfo:[String propertyName, JSDocInfo info, boolean inExterns]:void",
        "com.google.javascript.jscomp.deps.DepsFileParser:parseFile:[String filePath]:List\u003cDependencyInfo\u003e",
        "com.google.javascript.rhino.jstype.FunctionType:setPrototype:[FunctionPrototypeType prototype]:boolean",
        "com.google.javascript.jscomp.deps.SortedDependencies:getSortedDependenciesOf:[List\u003cINPUT\u003e roots]:List\u003cINPUT\u003e",
        "com.google.javascript.jscomp.AbstractCommandLineRunner:outputSourceMap:[B options]:void",
        "com.google.javascript.rhino.jstype.ObjectType:isObject:[]:boolean",
        "com.google.javascript.jscomp.DefaultCodingConvention:getDelegateSuperclassName:[]:String",
        "com.google.javascript.jscomp.parsing.JsDocInfoParser:parseSuppressTag:[JsDocToken token]:JsDocToken",
        "com.google.javascript.jscomp.AbstractCommandLineRunner\\$CommandLineConfig:setModuleWrapper:[List\u003cString\u003e moduleWrapper]:CommandLineConfig",
        "com.google.javascript.jscomp.AbstractCommandLineRunner\\$RunTimeStats:recordStartRun:[]:void",
        "com.google.javascript.rhino.jstype.ObjectType:getOwnPropertyNames:[]:Set\u003cString\u003e",
        "com.google.javascript.jscomp.LinkedFlowScope\\$FlatFlowScopeCache:FlatFlowScopeCache:[Scope functionScope]:null",
        "com.google.javascript.jscomp.CodingConvention:applyDelegateRelationship:[ObjectType delegateSuperclass, ObjectType delegateBase, ObjectType delegator, FunctionType delegateProxy, FunctionType findDelegate]:void",
        "com.google.javascript.jscomp.SourceFile\\$OnDisk:OnDisk:[File file, Charset c]:null",
        "com.google.javascript.jscomp.LinkedFlowScope:LinkedFlowScope:[FlatFlowScopeCache cache, LinkedFlowScope directParent]:null",
        "com.google.javascript.rhino.jstype.UnresolvedTypeExpression:resolveInternal:[ErrorReporter t, StaticScope\u003cJSType\u003e enclosing]:JSType",
        "com.google.javascript.jscomp.parsing.JsDocInfoParser:match:[JsDocToken token]:boolean",
        "com.google.javascript.jscomp.DefaultCodingConvention:getExportPropertyFunction:[]:String",
        "com.google.javascript.rhino.jstype.FunctionType:hashCode:[]:int",
        "com.google.javascript.jscomp.parsing.JsDocInfoParser\\$ErrorReporterParser:addWarning:[String messageId, String messageArg, int lineno, int charno]:void",
        "com.google.javascript.jscomp.JsMessageExtractor\\$ExtractMessagesVisitor:processJsMessage:[JsMessage message, JsMessageDefinition definition]:void",
        "com.google.javascript.jscomp.LinkedFlowScope:getFunctionScope:[]:Scope",
        "com.google.javascript.rhino.jstype.ProxyObjectType:isFunctionPrototypeType:[]:boolean",
        "com.google.javascript.jscomp.parsing.JsDocInfoParser:restoreLookAhead:[JsDocToken token]:void",
        "com.google.javascript.jscomp.parsing.JsDocInfoParser:parseFieldTypeList:[JsDocToken token]:Node",
        "com.google.javascript.rhino.jstype.ObjectType:isPropertyTypeDeclared:[String propertyName]:boolean",
        "com.google.javascript.jscomp.AbstractCommandLineRunner\\$CommandLineConfig:setJsOutputFile:[String jsOutputFile]:CommandLineConfig",
        "com.google.javascript.jscomp.SourceFile:setOriginalPath:[String originalPath]:void",
        "com.google.javascript.rhino.jstype.InstanceObjectType:isInstanceType:[]:boolean",
        "com.google.javascript.jscomp.DefaultCodingConvention:isOptionalParameter:[Node parameter]:boolean",
        "com.google.javascript.rhino.jstype.InstanceObjectType:isNominalType:[]:boolean",
        "com.google.javascript.rhino.jstype.FunctionType:isOrdinaryFunction:[]:boolean",
        "com.google.javascript.jscomp.AbstractCommandLineRunner:getErrorPrintStream:[]:PrintStream",
        "com.google.javascript.jscomp.DefaultCodingConvention:isConstant:[String variableName]:boolean",
        "com.google.javascript.rhino.jstype.NamedType:isNominalType:[]:boolean",
        "com.google.javascript.jscomp.SourceFile:getCodeReader:[]:Reader",
        "com.google.javascript.rhino.jstype.NamedType:checkEnumElementCycle:[ErrorReporter t]:void",
        "com.google.javascript.jscomp.DefaultCodingConvention:applySubclassRelationship:[FunctionType parentCtor, FunctionType childCtor, SubclassType type]:void",
        "com.google.javascript.rhino.jstype.ProxyObjectType:matchesObjectContext:[]:boolean",
        "com.google.javascript.jscomp.deps.SortedDependencies:cycleToString:[List\u003cINPUT\u003e cycle]:String",
        "com.google.javascript.rhino.jstype.NamedType:handleTypeCycle:[ErrorReporter t]:void",
        "com.google.javascript.rhino.jstype.InstanceObjectType:getCtorImplementedInterfaces:[]:Iterable\u003cObjectType\u003e",
        "com.google.javascript.jscomp.CodingConvention:defineDelegateProxyPrototypeProperties:[JSTypeRegistry registry, Scope scope, List\u003cObjectType\u003e delegateProxyPrototypes]:void",
        "com.google.javascript.jscomp.parsing.JsDocInfoParser\\$ErrorReporterParser:addWarning:[String messageId, int lineno, int charno]:void",
        "com.google.javascript.rhino.jstype.FunctionType:getMinArguments:[]:int",
        "com.google.javascript.rhino.jstype.ObjectType:isImplicitPrototype:[ObjectType prototype]:boolean",
        "com.google.javascript.rhino.jstype.ProxyObjectType:isConstructor:[]:boolean",
        "com.google.javascript.jscomp.LinkedFlowScope\\$LinkedFlowSlot:LinkedFlowSlot:[String name, JSType type, LinkedFlowSlot parent]:null",
        "com.google.javascript.rhino.jstype.InstanceObjectType:isNumberObjectType:[]:boolean",
        "com.google.javascript.rhino.jstype.FunctionType:getSuperClassConstructor:[]:FunctionType",
        "com.google.javascript.jscomp.SourceFile:getName:[]:String",
        "com.google.javascript.jscomp.LinkedFlowScope:getOwnSlot:[String name]:StaticSlot\u003cJSType\u003e",
        "com.google.javascript.rhino.jstype.ProxyObjectType:hashCode:[]:int",
        "com.google.javascript.rhino.jstype.ObjectType:setJSDocInfo:[JSDocInfo info]:void",
        "com.google.javascript.rhino.jstype.FunctionType:setImplementedInterfaces:[List\u003cObjectType\u003e implementedInterfaces]:void",
        "com.google.javascript.jscomp.AbstractCommandLineRunner\\$CommandLineConfig:setPropertyMapInputFile:[String propertyMapInputFile]:CommandLineConfig",
        "com.google.javascript.rhino.jstype.FunctionType:getParameters:[]:Iterable\u003cNode\u003e",
        "com.google.javascript.rhino.jstype.ProxyObjectType:getParameterType:[]:JSType",
        "com.google.javascript.rhino.jstype.NamedType:getReferenceName:[]:String",
        "com.google.javascript.jscomp.LinkedFlowScope:allFlowSlots:[]:Map\u003cString,StaticSlot\u003cJSType\u003e\u003e",
        "com.google.javascript.jscomp.parsing.JsDocInfoParser:parseAndRecordParamTypeNode:[JsDocToken token]:Node",
        "com.google.javascript.rhino.jstype.ProxyObjectType:defineProperty:[String propertyName, JSType type, boolean inferred, boolean inExterns]:boolean"
      ],
      "num": 495
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  },
  "trigger_tests": [
    {
      "test_class": "com.google.javascript.jscomp.CheckGlobalThisTest",
      "test_function": "testPropertyOfMethod",
      "assertion_line": "158",
      "exception": "junit.framework.AssertionFailedError",
      "message": "There should be one error.  expected:\u003c1\u003e but was:\u003c0\u003e"
    },
    {
      "test_class": "com.google.javascript.jscomp.CheckGlobalThisTest",
      "test_function": "testMethod4",
      "assertion_line": "154",
      "exception": "junit.framework.AssertionFailedError",
      "message": "Unexpected error(s): JSC_USED_GLOBAL_THIS. dangerous use of the global this object at testcode line 1 : 39 expected:\u003c0\u003e but was:\u003c1\u003e"
    },
    {
      "test_class": "com.google.javascript.jscomp.CheckGlobalThisTest",
      "test_function": "testInterface1",
      "assertion_line": "112",
      "exception": "junit.framework.AssertionFailedError",
      "message": "Unexpected error(s): JSC_USED_GLOBAL_THIS. dangerous use of the global this object at testcode line 1 : 54 expected:\u003c0\u003e but was:\u003c1\u003e"
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "gen/com/google/javascript/jscomp/FunctionInformationMap.java",
        "gen/com/google/javascript/jscomp/FunctionInformationMap.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "com.google.javascript.jscomp.FunctionInformationMap\\$Entry:writeReplace:[]:Object",
            "com.google.javascript.jscomp.FunctionInformationMap:writeReplace:[]:Object",
            "com.google.javascript.jscomp.FunctionInformationMap\\$Module:writeReplace:[]:Object"
          ],
          "num": 3
        },
        {
          "qualified_names": [
            "com.google.javascript.jscomp.FunctionInformationMap:writeReplace:[]:Object",
            "com.google.javascript.jscomp.FunctionInformationMap\\$Module:writeReplace:[]:Object",
            "com.google.javascript.jscomp.FunctionInformationMap\\$Entry:writeReplace:[]:Object"
          ],
          "num": 3
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "215",
            "690",
            "1017"
          ],
          "num": 3
        },
        {
          "qualified_names": [
            "215",
            "690",
            "1017"
          ],
          "num": 3
        }
      ],
      "diff": "diff --git a/gen/com/google/javascript/jscomp/FunctionInformationMap.java b/gen/com/google/javascript/jscomp/FunctionInformationMap.java\nindex 7ecd5bd..7d09eb4 100644\n--- a/gen/com/google/javascript/jscomp/FunctionInformationMap.java\n+++ b/gen/com/google/javascript/jscomp/FunctionInformationMap.java\n@@ -212,7 +212,7 @@\n       return size;\n     }\n     \n-    @Override\n+    @java.lang.Override\n     protected Object writeReplace() throws java.io.ObjectStreamException {\n       return super.writeReplace();\n     }\n@@ -687,7 +687,7 @@\n       return size;\n     }\n     \n-    @Override\n+    @java.lang.Override\n     protected Object writeReplace() throws java.io.ObjectStreamException {\n       return super.writeReplace();\n     }\n@@ -1014,7 +1014,7 @@\n     return size;\n   }\n   \n-  @Override\n+  @java.lang.Override\n   protected Object writeReplace() throws java.io.ObjectStreamException {\n     return super.writeReplace();\n   }\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "MarkerAnnotation [34735,34754]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MarkerAnnotation [6497,6516]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MarkerAnnotation [22451,22470]"
        },
        {
          "type": "delete-tree",
          "from": "MarkerAnnotation [6497,6506]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MarkerAnnotation [22441,22450]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MarkerAnnotation [34715,34724]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "gen/com/google/javascript/jscomp/Instrumentation.java",
        "gen/com/google/javascript/jscomp/Instrumentation.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "com.google.javascript.jscomp.Instrumentation:writeReplace:[]:Object"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "com.google.javascript.jscomp.Instrumentation:writeReplace:[]:Object"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "181"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "181"
          ],
          "num": 1
        }
      ],
      "diff": "diff --git a/gen/com/google/javascript/jscomp/Instrumentation.java b/gen/com/google/javascript/jscomp/Instrumentation.java\nindex 32f3a25..4031c59 100644\n--- a/gen/com/google/javascript/jscomp/Instrumentation.java\n+++ b/gen/com/google/javascript/jscomp/Instrumentation.java\n@@ -178,7 +178,7 @@\n     return size;\n   }\n   \n-  @Override\n+  @java.lang.Override\n   protected Object writeReplace() throws java.io.ObjectStreamException {\n     return super.writeReplace();\n   }\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "MarkerAnnotation [5468,5487]"
        },
        {
          "type": "delete-tree",
          "from": "MarkerAnnotation [5468,5477]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/jscomp/CheckGlobalThis.java",
        "src/com/google/javascript/jscomp/CheckGlobalThis.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "com.google.javascript.jscomp.CheckGlobalThis:shouldTraverse:[NodeTraversal t, Node n, Node parent]:boolean"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "com.google.javascript.jscomp.CheckGlobalThis:shouldTraverse:[NodeTraversal t, Node n, Node parent]:boolean"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "91",
            "125",
            "126",
            "129",
            "130"
          ],
          "num": 5
        },
        {
          "qualified_names": [
            "92",
            "126",
            "127",
            "128",
            "131",
            "132",
            "133"
          ],
          "num": 7
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex f11616d..5108686 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -89,6 +89,7 @@\n       JSDocInfo jsDoc \u003d getFunctionJsDocInfo(n);\n       if (jsDoc !\u003d null \u0026\u0026\n           (jsDoc.isConstructor() ||\n+           jsDoc.isInterface() ||\n            jsDoc.hasThisType() ||\n            jsDoc.isOverride())) {\n         return false;\n@@ -122,12 +123,14 @@\n       } else {\n         // Only traverse the right side if it\u0027s not an assignment to a prototype\n         // property or subproperty.\n-        if (lhs.getType() \u003d\u003d Token.GETPROP) {\n-          if (lhs.getLastChild().getString().equals(\"prototype\")) {\n+        if (NodeUtil.isGet(lhs)) {\n+          if (lhs.getType() \u003d\u003d Token.GETPROP \u0026\u0026\n+              lhs.getLastChild().getString().equals(\"prototype\")) {\n             return false;\n           }\n-          String leftName \u003d lhs.getQualifiedName();\n-          if (leftName !\u003d null \u0026\u0026 leftName.contains(\".prototype.\")) {\n+          Node llhs \u003d lhs.getFirstChild();\n+          if (llhs.getType() \u003d\u003d Token.GETPROP \u0026\u0026\n+              llhs.getLastChild().getString().equals(\"prototype\")) {\n             return false;\n           }\n         }\n",
      "operations": [
        {
          "type": "insert-node",
          "from": "",
          "to": "MethodInvocation [4125,4144]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodInvocation [2968,2987]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "METHOD_INVOCATION_RECEIVER [4125,4133]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: isGet [4134,4139]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "METHOD_INVOCATION_ARGUMENTS [4140,4143]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "InfixExpression [4162,4260]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "InfixExpression [4162,4192]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "INFIX_EXPRESSION_OPERATOR: \u0026\u0026 [4193,4195]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodInvocation [4359,4373]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "QualifiedName: Token.GETPROP [4377,4390]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodInvocation [4408,4439]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "METHOD_INVOCATION_RECEIVER [4091,4094]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: getType [4095,4102]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "MethodInvocation [4091,4104]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "INFIX_EXPRESSION_OPERATOR: \u003d\u003d [4105,4107]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "QualifiedName: Token.GETPROP [4108,4121]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "InfixExpression [4091,4121]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: leftName [4297,4305]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "NullLiteral [4309,4313]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: leftName [4317,4325]",
          "to": ""
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  },
  "patch_changed_mths": {
    "qualified_names": [
      "com.google.javascript.jscomp.FunctionInformationMap\\$Module:writeReplace()Ljava/lang/Object;:regression",
      "com.google.javascript.jscomp.FunctionInformationMap:writeReplace()Ljava/lang/Object;:regression",
      "com.google.javascript.jscomp.FunctionInformationMap\\$Entry:writeReplace()Ljava/lang/Object;:regression",
      "com.google.javascript.jscomp.Instrumentation:writeReplace()Ljava/lang/Object;:regression",
      "com.google.javascript.jscomp.CheckGlobalThis:shouldTraverse(Lcom/google/javascript/jscomp/NodeTraversal;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)Z"
    ],
    "num": 5
  }
}