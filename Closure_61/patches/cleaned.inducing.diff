Only in data/changesInfo//Closure_61/properties/modified_classes/inducing/: src
diff -u -r data/changesInfo//Closure_61/properties/modified_classes/inducing/test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java data/changesInfo//Closure_61/cleaned/inducing/test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java
--- data/changesInfo//Closure_61/properties/modified_classes/inducing/test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java	2023-12-27 22:39:02.765636698 -0800
+++ data/changesInfo//Closure_61/cleaned/inducing/test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java	2023-06-20 05:27:38.003360255 -0700
@@ -16,21 +16,14 @@
 
 package com.google.javascript.jscomp;
 
-import com.google.javascript.rhino.Node;
-
 /**
  * Tests for PeepholeRemoveDeadCodeTest in isolation. Tests for the interaction
  * of multiple peephole passes are in PeepholeIntegrationTest.
  */
 public class PeepholeRemoveDeadCodeTest extends CompilerTestCase {
 
-  private static final String MATH =
-      "/** @const */ var Math = {};" +
-      "/** @nosideeffects */ Math.random = function(){};" +
-      "/** @nosideeffects */ Math.sin = function(){};";
-
   public PeepholeRemoveDeadCodeTest() {
-    super(MATH);
+    super("");
   }
 
   @Override
@@ -41,20 +34,10 @@
 
   @Override
   public CompilerPass getProcessor(final Compiler compiler) {
-    return new CompilerPass() {
-      @Override
-      public void process(Node externs, Node root) {
-        SimpleDefinitionFinder definitionFinder =
-            new SimpleDefinitionFinder(compiler);
-        definitionFinder.process(externs, root);
-        new PureFunctionIdentifier(compiler, definitionFinder)
-            .process(externs, root);
-        PeepholeOptimizationsPass peepholePass =
-            new PeepholeOptimizationsPass(
-                compiler, new PeepholeRemoveDeadCode());
-        peepholePass.process(externs, root);
-      }
-    };
+    PeepholeOptimizationsPass peepholePass =
+      new PeepholeOptimizationsPass(compiler, new PeepholeRemoveDeadCode());
+
+    return peepholePass;
   }
 
   @Override
@@ -243,6 +226,7 @@
     //  - the FOR init expression
     //  - the FOR increment expression
 
+
     // Known side-effect free functions calls are removed.
     fold("Math.random()", "");
     fold("Math.random(f() + g())", "f(),g();");
@@ -250,11 +234,7 @@
 
     // Calls to functions with unknown side-effects are are left.
     foldSame("f();");
-    foldSame("(function () { f(); })();");
-
-    // We know that this function has no side effects because of the
-    // PureFunctionIdentifier.
-    fold("(function () {})();", "");
+    foldSame("(function () {})();");
 
     // Uncalled function expressions are removed
     fold("(function () {});", "");
