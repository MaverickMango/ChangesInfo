diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java
index 477d444..dfcd3eb 100644
--- a/src/com/google/javascript/jscomp/NodeUtil.java
+++ b/src/com/google/javascript/jscomp/NodeUtil.java
@@ -1258,6 +1258,8 @@
       case Token.INSTANCEOF:
       // Inversion
       case Token.NOT:
+      // delete operator returns a boolean.
+      case Token.DELPROP:
         return true;
       default:
         return false;
@@ -2906,6 +2908,7 @@
       case Token.OBJECTLIT:
         // Literals objects with non-literal children are allowed.
         return true;
+      case Token.DELPROP:
       case Token.IN:
         // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
         return true;
diff --git a/test/com/google/javascript/jscomp/NodeUtilTest.java b/test/com/google/javascript/jscomp/NodeUtilTest.java
index 98e8e92..13e495f 100644
--- a/test/com/google/javascript/jscomp/NodeUtilTest.java
+++ b/test/com/google/javascript/jscomp/NodeUtilTest.java
@@ -1165,6 +1165,8 @@
     assertTrue(testLocalValue("o.toString()"));
 
     assertFalse(testLocalValue("o.valueOf()"));
+
+    assertTrue(testLocalValue("delete a.b"));
   }
 
   public void testLocalValue2() {
@@ -1499,6 +1501,7 @@
     assertFalse(NodeUtil.isBooleanResult(getNode("a.b()")));
     assertFalse(NodeUtil.isBooleanResult(getNode("a().b()")));
     assertFalse(NodeUtil.isBooleanResult(getNode("new a()")));
+    assertTrue(NodeUtil.isBooleanResult(getNode("delete a")));
 
     // Definitely not boolean
     assertFalse(NodeUtil.isBooleanResult(getNode("([true,false])")));
