Only in data/changesInfo//Closure_80/properties/modified_classes/inducing/: src
diff -u -r data/changesInfo//Closure_80/properties/modified_classes/inducing/test/com/google/javascript/jscomp/NodeUtilTest.java data/changesInfo//Closure_80/cleaned/inducing/test/com/google/javascript/jscomp/NodeUtilTest.java
--- data/changesInfo//Closure_80/properties/modified_classes/inducing/test/com/google/javascript/jscomp/NodeUtilTest.java	2023-12-27 22:41:56.056197921 -0800
+++ data/changesInfo//Closure_80/cleaned/inducing/test/com/google/javascript/jscomp/NodeUtilTest.java	2023-12-20 06:03:46.067779184 -0800
@@ -1,5 +1,5 @@
 /*
- * Copyright 2004 Google Inc.
+ * Copyright 2004 The Closure Compiler Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -18,8 +18,10 @@
 
 import com.google.common.base.Preconditions;
 import com.google.common.base.Predicates;
+import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Sets;
+import com.google.javascript.jscomp.CompilerOptions.LanguageMode;
 import com.google.javascript.rhino.Node;
 import com.google.javascript.rhino.Token;
 import com.google.javascript.rhino.jstype.TernaryValue;
@@ -203,6 +205,42 @@
     assertEquals("undefined", NodeUtil.getStringValue(getNode("undefined")));
     assertEquals("undefined", NodeUtil.getStringValue(getNode("void 0")));
     assertEquals("undefined", NodeUtil.getStringValue(getNode("void foo()")));
+
+    assertEquals("NaN", NodeUtil.getStringValue(getNode("NaN")));
+    assertEquals("Infinity", NodeUtil.getStringValue(getNode("Infinity")));
+    assertEquals(null, NodeUtil.getStringValue(getNode("x")));
+  }
+
+  public void testIsObjectLiteralKey1() throws Exception {
+    testIsObjectLiteralKey(
+      parseExpr("({})"), false);
+    testIsObjectLiteralKey(
+      parseExpr("a"), false);
+    testIsObjectLiteralKey(
+      parseExpr("'a'"), false);
+    testIsObjectLiteralKey(
+      parseExpr("1"), false);
+    testIsObjectLiteralKey(
+      parseExpr("({a: 1})").getFirstChild(), true);
+    testIsObjectLiteralKey(
+      parseExpr("({1: 1})").getFirstChild(), true);
+    testIsObjectLiteralKey(
+      parseExpr("({get a(){}})").getFirstChild(), true);
+    testIsObjectLiteralKey(
+      parseExpr("({set a(b){}})").getFirstChild(), true);
+  }
+
+  private Node parseExpr(String js) {
+    Compiler compiler = new Compiler();
+    CompilerOptions options = new CompilerOptions();
+    options.languageIn = LanguageMode.ECMASCRIPT5;
+    compiler.initOptions(options);
+    Node root = compiler.parseTestCode(js);
+    return root.getFirstChild().getFirstChild();
+  }
+
+  private void testIsObjectLiteralKey(Node node, boolean expected) {
+    assertEquals(expected, NodeUtil.isObjectLitKey(node, node.getParent()));
   }
 
   public void testGetFunctionName1() throws Exception {
@@ -347,6 +385,15 @@
     assertSideEffect(false, "({},[]).foo = 2;");
   }
 
+  public void testObjectMethodSideEffects() {
+    // "toString" and "valueOf" are assumed to be side-effect free
+    assertSideEffect(false, "o.toString()");
+    assertSideEffect(false, "o.valueOf()");
+
+    // other methods depend on the extern definitions
+    assertSideEffect(true, "o.watch()");
+  }
+
   public void testRegExpSideEffect() {
     // A RegExp Object by itself doesn't have any side-effects
     assertSideEffect(false, "/abc/gi", true);
@@ -637,8 +684,6 @@
   }
 
   public void testIsControlStructureCodeBlock() {
-    Compiler compiler = new Compiler();
-
     Node root = parse("if (x) foo(); else boo();");
     Node ifNode = root.getFirstChild();
 
@@ -652,8 +697,6 @@
   }
 
   public void testIsFunctionExpression1() {
-    Compiler compiler = new Compiler();
-
     Node root = parse("(function foo() {})");
     Node StatementNode = root.getFirstChild();
     assertTrue(NodeUtil.isExpressionNode(StatementNode));
@@ -663,21 +706,31 @@
   }
 
   public void testIsFunctionExpression2() {
-    Compiler compiler = new Compiler();
-
     Node root = parse("function foo() {}");
     Node functionNode = root.getFirstChild();
     assertTrue(NodeUtil.isFunction(functionNode));
     assertFalse(NodeUtil.isFunctionExpression(functionNode));
   }
 
-  public void testRemoveTryChild() {
-    Compiler compiler = new Compiler();
+  public void testRemoveChildBlock() {
+    // Test removing the inner block.
+    Node actual = parse("{{x()}}");
+
+    Node outerBlockNode = actual.getFirstChild();
+    Node innerBlockNode = outerBlockNode.getFirstChild();
+    innerBlockNode.setIsSyntheticBlock(true);
 
-    Node root = parse("try {foo()} catch(e) {} finally {}");
+    NodeUtil.removeChild(outerBlockNode, innerBlockNode);
+    String expected = "{{}}";
+    String difference = parse(expected).checkTreeEquals(actual);
+    if (difference != null) {
+      assertTrue("Nodes do not match:\n" + difference, false);
+    }
+  }
 
+  public void testRemoveTryChild1() {
     // Test removing the finally clause.
-    Node actual = root.cloneTree();
+    Node actual = parse("try {foo()} catch(e) {} finally {}");
 
     Node tryNode = actual.getFirstChild();
     Node tryBlock = tryNode.getFirstChild();
@@ -690,38 +743,75 @@
     if (difference != null) {
       assertTrue("Nodes do not match:\n" + difference, false);
     }
+  }
 
+  public void testRemoveTryChild2() {
     // Test removing the try clause.
-    actual = root.cloneTree();
+    Node actual = parse("try {foo()} catch(e) {} finally {}");
 
-    tryNode = actual.getFirstChild();
-    tryBlock = tryNode.getFirstChild();
-    catchBlocks = tryNode.getFirstChild().getNext();
-    finallyBlock = tryNode.getLastChild();
+    Node tryNode = actual.getFirstChild();
+    Node tryBlock = tryNode.getFirstChild();
+    Node catchBlocks = tryNode.getFirstChild().getNext();
 
     NodeUtil.removeChild(tryNode, tryBlock);
-    expected = "try {} catch(e) {} finally {}";
-    difference = parse(expected).checkTreeEquals(actual);
+    String expected = "try {} catch(e) {} finally {}";
+    String difference = parse(expected).checkTreeEquals(actual);
     if (difference != null) {
       assertTrue("Nodes do not match:\n" + difference, false);
     }
+  }
 
+  public void testRemoveTryChild3() {
     // Test removing the catch clause.
-    actual = root.cloneTree();
+    Node actual = parse("try {foo()} catch(e) {} finally {}");
 
-    tryNode = actual.getFirstChild();
-    tryBlock = tryNode.getFirstChild();
-    catchBlocks = tryNode.getFirstChild().getNext();
+    Node tryNode = actual.getFirstChild();
+    Node tryBlock = tryNode.getFirstChild();
+    Node catchBlocks = tryNode.getFirstChild().getNext();
     Node catchBlock = catchBlocks.getFirstChild();
-    finallyBlock = tryNode.getLastChild();
+    Node finallyBlock = tryNode.getLastChild();
 
     NodeUtil.removeChild(catchBlocks, catchBlock);
-    expected = "try {foo()} finally {}";
-    difference = parse(expected).checkTreeEquals(actual);
+    String expected = "try {foo()} finally {}";
+    String difference = parse(expected).checkTreeEquals(actual);
     if (difference != null) {
       assertTrue("Nodes do not match:\n" + difference, false);
     }
+  }
+
+  public void testRemoveTryChild4() {
+    // Test removing the catch clause without a finally.
+    Node actual = parse("try {foo()} catch(e) {} finally {}");
+
+    Node tryNode = actual.getFirstChild();
+    Node tryBlock = tryNode.getFirstChild();
+    Node catchBlocks = tryNode.getFirstChild().getNext();
+    Node catchBlock = catchBlocks.getFirstChild();
+    Node finallyBlock = tryNode.getLastChild();
+
+    NodeUtil.removeChild(tryNode, catchBlocks);
+    String expected = "try {foo()} finally {}";
+    String difference = parse(expected).checkTreeEquals(actual);
+    if (difference != null) {
+      assertTrue("Nodes do not match:\n" + difference, false);
+    }
+  }
+
+  public void testRemoveTryChild5() {
+    Node actual = parse("try {foo()} catch(e) {} finally {}");
+
+    Node tryNode = actual.getFirstChild();
+    Node tryBlock = tryNode.getFirstChild();
+    Node catchBlocks = tryNode.getFirstChild().getNext();
+    Node catchBlock = catchBlocks.getFirstChild();
+    Node finallyBlock = tryNode.getLastChild();
 
+    NodeUtil.removeChild(catchBlocks, catchBlock);
+    String expected = "try {foo()} finally {}";
+    String difference = parse(expected).checkTreeEquals(actual);
+    if (difference != null) {
+      assertTrue("Nodes do not match:\n" + difference, false);
+    }
   }
 
   public void testRemoveVarChild() {
@@ -971,8 +1061,9 @@
     assertFalse(testLocalValue("this"));
     assertFalse(testLocalValue("arguments"));
 
-    // new objects are local
-    assertTrue(testLocalValue("new x()"));
+    // We can't know if new objects are local unless we know
+    // that they don't alias themselves.
+    assertFalse(testLocalValue("new x()"));
 
     // property references are assume to be non-local
     assertFalse(testLocalValue("(new x()).y"));
@@ -1051,19 +1142,210 @@
 
     assertTrue(testLocalValue("void x"));
     assertTrue(testLocalValue("void 0"));
-    
+
     assertFalse(testLocalValue("{}.x"));
+
+    assertTrue(testLocalValue("{}.toString()"));
+    assertTrue(testLocalValue("o.toString()"));
+
+    assertFalse(testLocalValue("o.valueOf()"));
+
+    assertTrue(testLocalValue("delete a.b"));
+  }
+
+  public void testLocalValue2() {
+    Node newExpr = getNode("new x()");
+    assertFalse(NodeUtil.evaluatesToLocalValue(newExpr));
+
+    Preconditions.checkState(newExpr.getType() == Token.NEW);
+    Node.SideEffectFlags flags = new Node.SideEffectFlags();
+
+    flags.clearAllFlags();
+    newExpr.setSideEffectFlags(flags.valueOf());
+
+    assertTrue(NodeUtil.evaluatesToLocalValue(newExpr));
+
+    flags.clearAllFlags();
+    flags.setMutatesThis();
+    newExpr.setSideEffectFlags(flags.valueOf());
+
+    assertTrue(NodeUtil.evaluatesToLocalValue(newExpr));
+
+    flags.clearAllFlags();
+    flags.setReturnsTainted();
+    newExpr.setSideEffectFlags(flags.valueOf());
+
+    assertTrue(NodeUtil.evaluatesToLocalValue(newExpr));
+
+    flags.clearAllFlags();
+    flags.setThrows();
+    newExpr.setSideEffectFlags(flags.valueOf());
+
+    assertFalse(NodeUtil.evaluatesToLocalValue(newExpr));
+
+    flags.clearAllFlags();
+    flags.setMutatesArguments();
+    newExpr.setSideEffectFlags(flags.valueOf());
+
+    assertFalse(NodeUtil.evaluatesToLocalValue(newExpr));
+
+    flags.clearAllFlags();
+    flags.setMutatesGlobalState();
+    newExpr.setSideEffectFlags(flags.valueOf());
+
+    assertFalse(NodeUtil.evaluatesToLocalValue(newExpr));
+  }
+
+  public void testCallSideEffects() {
+    Node callExpr = getNode("new x().method()");
+    assertTrue(NodeUtil.functionCallHasSideEffects(callExpr));
+
+    Node newExpr = callExpr.getFirstChild().getFirstChild();
+    Preconditions.checkState(newExpr.getType() == Token.NEW);
+    Node.SideEffectFlags flags = new Node.SideEffectFlags();
+
+    // No side effects, local result
+    flags.clearAllFlags();
+    newExpr.setSideEffectFlags(flags.valueOf());
+    flags.clearAllFlags();
+    callExpr.setSideEffectFlags(flags.valueOf());
+
+    assertTrue(NodeUtil.evaluatesToLocalValue(callExpr));
+    assertFalse(NodeUtil.functionCallHasSideEffects(callExpr));
+    assertFalse(NodeUtil.mayHaveSideEffects(callExpr));
+
+    // Modifies this, local result
+    flags.clearAllFlags();
+    newExpr.setSideEffectFlags(flags.valueOf());
+    flags.clearAllFlags();
+    flags.setMutatesThis();
+    callExpr.setSideEffectFlags(flags.valueOf());
+
+    assertTrue(NodeUtil.evaluatesToLocalValue(callExpr));
+    assertFalse(NodeUtil.functionCallHasSideEffects(callExpr));
+    assertFalse(NodeUtil.mayHaveSideEffects(callExpr));
+
+    // Modifies this, non-local result
+    flags.clearAllFlags();
+    newExpr.setSideEffectFlags(flags.valueOf());
+    flags.clearAllFlags();
+    flags.setMutatesThis();
+    flags.setReturnsTainted();
+    callExpr.setSideEffectFlags(flags.valueOf());
+
+    assertFalse(NodeUtil.evaluatesToLocalValue(callExpr));
+    assertFalse(NodeUtil.functionCallHasSideEffects(callExpr));
+    assertFalse(NodeUtil.mayHaveSideEffects(callExpr));
+
+    // No modifications, non-local result
+    flags.clearAllFlags();
+    newExpr.setSideEffectFlags(flags.valueOf());
+    flags.clearAllFlags();
+    flags.setReturnsTainted();
+    callExpr.setSideEffectFlags(flags.valueOf());
+
+    assertFalse(NodeUtil.evaluatesToLocalValue(callExpr));
+    assertFalse(NodeUtil.functionCallHasSideEffects(callExpr));
+    assertFalse(NodeUtil.mayHaveSideEffects(callExpr));
+
+    // The new modifies global state, no side-effect call, non-local result
+    // This call could be removed, but not the new.
+    flags.clearAllFlags();
+    flags.setMutatesGlobalState();
+    newExpr.setSideEffectFlags(flags.valueOf());
+    flags.clearAllFlags();
+    callExpr.setSideEffectFlags(flags.valueOf());
+
+    assertTrue(NodeUtil.evaluatesToLocalValue(callExpr));
+    assertFalse(NodeUtil.functionCallHasSideEffects(callExpr));
+    assertTrue(NodeUtil.mayHaveSideEffects(callExpr));
   }
 
   private boolean testLocalValue(String js) {
+    return NodeUtil.evaluatesToLocalValue(getNode(js));
+  }
+
+  public void testValidDefine() {
+    assertTrue(testValidDefineValue("1"));
+    assertTrue(testValidDefineValue("-3"));
+    assertTrue(testValidDefineValue("true"));
+    assertTrue(testValidDefineValue("false"));
+    assertTrue(testValidDefineValue("'foo'"));
+
+    assertFalse(testValidDefineValue("x"));
+    assertFalse(testValidDefineValue("null"));
+    assertFalse(testValidDefineValue("undefined"));
+    assertFalse(testValidDefineValue("NaN"));
+
+    assertTrue(testValidDefineValue("!true"));
+    assertTrue(testValidDefineValue("-true"));
+    assertTrue(testValidDefineValue("1 & 8"));
+    assertTrue(testValidDefineValue("1 + 8"));
+    assertTrue(testValidDefineValue("'a' + 'b'"));
+
+    assertFalse(testValidDefineValue("1 & foo"));
+  }
+
+  private boolean testValidDefineValue(String js) {
     Node script = parse("var test = " + js +";");
-    Preconditions.checkState(script.getType() == Token.SCRIPT);
     Node var = script.getFirstChild();
-    Preconditions.checkState(var.getType() == Token.VAR);
     Node name = var.getFirstChild();
-    Preconditions.checkState(name.getType() == Token.NAME);
     Node value = name.getFirstChild();
 
-    return NodeUtil.evaluatesToLocalValue(value);
+    ImmutableSet<String> defines = ImmutableSet.of();
+    return NodeUtil.isValidDefineValue(value, defines);
   }
+
+  public void testIsBooleanResult() {
+    assertFalse(NodeUtil.isBooleanResult(getNode("1")));
+    assertTrue(NodeUtil.isBooleanResult(getNode("true")));
+    assertFalse(NodeUtil.isBooleanResult(getNode("+true")));
+    assertFalse(NodeUtil.isBooleanResult(getNode("+1")));
+    assertFalse(NodeUtil.isBooleanResult(getNode("-1")));
+    assertFalse(NodeUtil.isBooleanResult(getNode("-Infinity")));
+    assertFalse(NodeUtil.isBooleanResult(getNode("Infinity")));
+    assertFalse(NodeUtil.isBooleanResult(getNode("NaN")));
+    assertFalse(NodeUtil.isBooleanResult(getNode("undefined")));
+    assertFalse(NodeUtil.isBooleanResult(getNode("void 0")));
+
+    assertFalse(NodeUtil.isBooleanResult(getNode("a << b")));
+    assertFalse(NodeUtil.isBooleanResult(getNode("a >> b")));
+    assertFalse(NodeUtil.isBooleanResult(getNode("a >>> b")));
+
+    assertTrue(NodeUtil.isBooleanResult(getNode("a == b")));
+    assertTrue(NodeUtil.isBooleanResult(getNode("a != b")));
+    assertTrue(NodeUtil.isBooleanResult(getNode("a === b")));
+    assertTrue(NodeUtil.isBooleanResult(getNode("a !== b")));
+    assertTrue(NodeUtil.isBooleanResult(getNode("a < b")));
+    assertTrue(NodeUtil.isBooleanResult(getNode("a > b")));
+    assertTrue(NodeUtil.isBooleanResult(getNode("a <= b")));
+    assertTrue(NodeUtil.isBooleanResult(getNode("a >= b")));
+    assertTrue(NodeUtil.isBooleanResult(getNode("a in b")));
+    assertTrue(NodeUtil.isBooleanResult(getNode("a instanceof b")));
+
+    assertFalse(NodeUtil.isBooleanResult(getNode("'a'")));
+    assertFalse(NodeUtil.isBooleanResult(getNode("'a'+b")));
+    assertFalse(NodeUtil.isBooleanResult(getNode("a+'b'")));
+    assertFalse(NodeUtil.isBooleanResult(getNode("a+b")));
+    assertFalse(NodeUtil.isBooleanResult(getNode("a()")));
+    assertFalse(NodeUtil.isBooleanResult(getNode("''.a")));
+    assertFalse(NodeUtil.isBooleanResult(getNode("a.b")));
+    assertFalse(NodeUtil.isBooleanResult(getNode("a.b()")));
+    assertFalse(NodeUtil.isBooleanResult(getNode("a().b()")));
+    assertFalse(NodeUtil.isBooleanResult(getNode("new a()")));
+    assertTrue(NodeUtil.isBooleanResult(getNode("delete a")));
+
+    // Definitely not boolean
+    assertFalse(NodeUtil.isBooleanResult(getNode("([true,false])")));
+    assertFalse(NodeUtil.isBooleanResult(getNode("({a:true})")));
+
+    // These are boolean but aren't handled yet, "false" here means "unknown".
+    assertTrue(NodeUtil.isBooleanResult(getNode("true && false")));
+    assertTrue(NodeUtil.isBooleanResult(getNode("true || false")));
+    assertTrue(NodeUtil.isBooleanResult(getNode("a ? true : false")));
+    assertTrue(NodeUtil.isBooleanResult(getNode("a,true")));
+    assertTrue(NodeUtil.isBooleanResult(getNode("a=true")));
+    assertFalse(NodeUtil.isBooleanResult(getNode("a=1")));
+  }
+
 }
Only in data/changesInfo//Closure_80/properties/modified_classes/inducing/test/com/google/javascript/jscomp: PureFunctionIdentifierTest.java
