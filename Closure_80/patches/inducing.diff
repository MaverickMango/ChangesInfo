diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java
index 470635f..cec8b2d 100644
--- a/src/com/google/javascript/jscomp/NodeUtil.java
+++ b/src/com/google/javascript/jscomp/NodeUtil.java
@@ -530,6 +530,11 @@
         }
 
         if (isAssignmentOp(n)) {
+          Node assignTarget = n.getFirstChild();
+          if (isName(assignTarget)) {
+            return true;
+          }
+
           // Assignments will have side effects if
           // a) The RHS has side effects, or
           // b) The LHS has side effects, or
@@ -541,13 +546,32 @@
             return true;
           }
 
-          Node current = n.getFirstChild();
-          for (;
-               current.getType() == Token.GETPROP ||
-               current.getType() == Token.GETELEM;
-               current = current.getFirstChild()) { }
+          if (isGet(assignTarget)) {
+            // If the object being assigned to is a local object, don't
+            // consider this a side-effect as it can't be referenced
+            // elsewhere.  Don't do this recursively as the property might
+            // be an alias of another object, unlike a literal below.
+            Node current = assignTarget.getFirstChild();
+            if (evaluatesToLocalValue(current)) {
+              return false;
+            }
 
-          return !isLiteralValue(current, true);
+            // A literal value as defined by "isLiteralValue" is guaranteed
+            // not to be an alias, or any components which are aliases of
+            // other objects.
+            // If the root object is a literal don't consider this a
+            // side-effect.
+            while (isGet(current)) {
+              current = current.getFirstChild();
+            }
+
+            return !isLiteralValue(current, true);
+          } else {
+            // TODO(johnlenz): remove this code and make this an exception. This
+            // is here only for legacy reasons, the AST is not valid but
+            // preserve existing behavior.
+            return !isLiteralValue(assignTarget, true);
+          }
         }
 
         return true;
@@ -637,6 +661,11 @@
         return false;
       }
     } else if (nameNode.getType() == Token.GETPROP) {
+      if (callNode.isOnlyModifiesThisCall()
+          && evaluatesToLocalValue(nameNode.getFirstChild())) {
+        return false;
+      }
+
       // Functions in the "Math" namespace have no side effects.
       if (nameNode.getFirstChild().getType() == Token.NAME) {
         String namespaceName = nameNode.getFirstChild().getString();
@@ -2213,4 +2242,79 @@
     }
     return call;
   }
+
+  /**
+   * @return Whether the node is known to be a value that is not referenced
+   * elsewhere.
+   */
+  static boolean evaluatesToLocalValue(Node value) {
+    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
+  }
+
+  /**
+   * @param locals A predicate to apply to unknown local values.
+   * @return Whether the node is known to be a value that is not a reference
+   *     outside the expression scope.
+   */
+  static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
+    switch (value.getType()) {
+      case Token.ASSIGN:
+        // A result that is aliased by a non-local name, is the effectively the
+        // same as returning a non-local name, but this doesn't matter if the
+        // value is immutable.
+        return NodeUtil.isImmutableValue(value.getLastChild())
+            || (locals.apply(value)
+                && evaluatesToLocalValue(value.getLastChild(), locals));
+      case Token.COMMA:
+        return evaluatesToLocalValue(value.getLastChild(), locals);
+      case Token.AND:
+      case Token.OR:
+        return evaluatesToLocalValue(value.getFirstChild(), locals)
+           && evaluatesToLocalValue(value.getLastChild(), locals);
+      case Token.HOOK:
+        return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)
+           && evaluatesToLocalValue(value.getLastChild(), locals);
+      case Token.INC:
+      case Token.DEC:
+        if (value.getBooleanProp(Node.INCRDECR_PROP)) {
+          return evaluatesToLocalValue(value.getFirstChild(), locals);
+        } else {
+          return true;
+        }
+      case Token.THIS:
+        return locals.apply(value);
+      case Token.NAME:
+        return isImmutableValue(value) || locals.apply(value);
+      case Token.GETELEM:
+      case Token.GETPROP:
+        // There is no information about the locality of object properties.
+        return locals.apply(value);
+      case Token.CALL:
+        return callHasLocalResult(value) || locals.apply(value);
+      case Token.NEW:
+        return true;
+      case Token.FUNCTION:
+      case Token.REGEXP:
+      case Token.ARRAYLIT:
+      case Token.OBJECTLIT:
+        // Literals objects with non-literal children are allowed.
+        return true;
+      case Token.IN:
+        // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
+        return true;
+      default:
+        // Other op force a local value:
+        //  x = '' + g (x is now an local string)
+        //  x -= g (x is now an local number)
+        if (isAssignmentOp(value)
+            || isSimpleOperator(value)
+            || isImmutableValue(value)) {
+          return true;
+        }
+
+        throw new IllegalStateException(
+            "Unexpected expression node" + value +
+            "\n parent:" + value.getParent());
+    }
+  }
 }
diff --git a/src/com/google/javascript/jscomp/PureFunctionIdentifier.java b/src/com/google/javascript/jscomp/PureFunctionIdentifier.java
index f5e2d40..3facebe 100644
--- a/src/com/google/javascript/jscomp/PureFunctionIdentifier.java
+++ b/src/com/google/javascript/jscomp/PureFunctionIdentifier.java
@@ -16,9 +16,9 @@
 
 package com.google.javascript.jscomp;
 
-import com.google.common.annotations.VisibleForTesting;
 import com.google.common.base.Charsets;
 import com.google.common.base.Preconditions;
+import com.google.common.base.Predicate;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
@@ -307,7 +307,7 @@
       Collection<Definition> defs =
           getCallableDefinitions(definitionProvider, name);
       // Default to side effects, non-local results
-      SideEffectFlags flags = new SideEffectFlags();
+      Node.SideEffectFlags flags = new Node.SideEffectFlags();
       if (defs == null) {
         flags.setMutatesGlobalState();
         flags.setThrows();
@@ -361,63 +361,6 @@
     }
   }
 
-  private static class SideEffectFlags {
-    private int value = Node.SIDE_EFFECTS_ALL;
-
-    int valueOf() {
-      return value;
-    }
-
-    /** All side-effect occur and the returned results are non-local. */
-    void setAllFlags() {
-      value = Node.SIDE_EFFECTS_ALL;
-    }
-
-    /** No side-effects occur and the returned results are local. */
-    void clearAllFlags() {
-      value = Node.NO_SIDE_EFFECTS | Node.FLAG_LOCAL_RESULTS;
-    }
-
-    boolean areAllFlagsSet() {
-      return value == Node.SIDE_EFFECTS_ALL;
-    }
-
-    /**
-     * Preserve the return result flag, but clear the others:
-     *   no global state change, no throws, no this change, no arguments change
-     */
-    void clearSideEffectFlags() {
-      value |= Node.NO_SIDE_EFFECTS;
-    }
-
-    void setMutatesGlobalState() {
-      // Modify global means everything must be assumed to be modified.
-      removeFlag(Node.FLAG_GLOBAL_STATE_UNMODIFIED);
-      removeFlag(Node.FLAG_ARGUMENTS_UNMODIFIED);
-      removeFlag(Node.FLAG_THIS_UNMODIFIED);
-    }
-
-    void setThrows() {
-      removeFlag(Node.FLAG_NO_THROWS);
-    }
-
-    void setMutatesThis() {
-      removeFlag(Node.FLAG_THIS_UNMODIFIED);
-    }
-
-    void setMutatesArguments() {
-      removeFlag(Node.FLAG_ARGUMENTS_UNMODIFIED);
-    }
-
-    void setReturnsTainted() {
-      removeFlag(Node.FLAG_LOCAL_RESULTS);
-    }
-
-    private void removeFlag(int flag) {
-      value &= ~flag;
-    }
-  }
-
   /**
    * Gather list of functions, functions with @nosideeffect
    * annotations, call sites, and functions that may mutate variables
@@ -496,7 +439,7 @@
               // Assignment to local, if the value isn't a safe local value,
               // new object creation or literal or known primitive result
               // value, add it to the local blacklist.
-              if (value != null && !isKnownLocalValue(value)) {
+              if (value != null && !NodeUtil.evaluatesToLocalValue(value)) {
                 Scope scope = traversal.getScope();
                 Var var = scope.getVar(node.getString());
                 sideEffectInfo.blacklistLocal(var);
@@ -507,7 +450,7 @@
               break;
             case Token.RETURN:
               if (node.hasChildren()
-                  && !isKnownLocalValue(node.getFirstChild())) {
+                  && !NodeUtil.evaluatesToLocalValue(node.getFirstChild())) {
                 sideEffectInfo.setTaintsReturn();
               }
               break;
@@ -594,7 +537,9 @@
           Preconditions.checkState(
               NodeUtil.isAssignmentOp(op)
               || isIncDec(op) || op.getType() == Token.DELPROP);
-          if (rhs != null && NodeUtil.isAssign(op) && !isKnownLocalValue(rhs)) {
+          if (rhs != null
+              && NodeUtil.isAssign(op)
+              && !NodeUtil.evaluatesToLocalValue(rhs)) {
             sideEffectInfo.blacklistLocal(var);
           }
         }
@@ -659,6 +604,12 @@
       FunctionInformation sideEffectInfo = new FunctionInformation(inExterns);
       functionSideEffectMap.put(node, sideEffectInfo);
 
+      if (inExterns) {
+        // TODO(johnlenz): determine the locality of the results of extern
+        // functions.
+        sideEffectInfo.setTaintsReturn();
+      }
+
       JSDocInfo info = getJSDocInfoForFunction(node, parent, gramp);
       if (info != null) {
         boolean hasSpecificSideEffects = false;
@@ -763,70 +714,33 @@
    * @return Whether the node is known to be a value that is not a reference
    *     outside the local scope.
    */
-  @VisibleForTesting
-  static boolean isKnownLocalValue(Node value) {
-    // TODO(johnlenz): traverse into expression.
-    // return NodeUtil.isNew(value) || NodeUtil.isLiteralValue(value, true);
-    switch (value.getType()) {
-      case Token.ASSIGN:
-      case Token.COMMA:
-        return isKnownLocalValue(value.getLastChild());
-      case Token.AND:
-      case Token.OR:
-        return isKnownLocalValue(value.getFirstChild()) &&
-           isKnownLocalValue(value.getLastChild());
-      case Token.HOOK:
-        return isKnownLocalValue(value.getFirstChild().getNext()) &&
-           isKnownLocalValue(value.getLastChild());
-      case Token.INC:
-      case Token.DEC:
-        if (value.getBooleanProp(Node.INCRDECR_PROP)) {
-          return isKnownLocalValue(value.getFirstChild());
-        } else {
-          return true;
-        }
-      case Token.THIS:
-        // TODO(johnlenz): maybe redirect this to be a tainting list for 'this'.
-        return false;
-      case Token.NAME:
-        // TODO(johnlenz): add to local tainting list, if the NAME
-        // is known to be a local.
+  private static boolean isKnownLocalValue(Node value) {
+    Predicate<Node> taintingPredicate = new Predicate<Node>() {
+      @Override
+      public boolean apply(Node value) {
+        switch (value.getType()) {
+          case Token.THIS:
+            // TODO(johnlenz): maybe redirect this to be a tainting list for 'this'.
+            return false;
+          case Token.NAME:
+            // TODO(johnlenz): add to local tainting list, if the NAME
+            // is known to be a local.
 
-        // "undefined", "NaN" and "Infinity" are allowed.
-        return NodeUtil.isImmutableValue(value);
-      case Token.GETELEM:
-      case Token.GETPROP:
-        // There is no information about the locality of object properties.
-        return false;
-      case Token.CALL:
-        // TODO(johnlenz): add to local tainting list, if the call result
-        // is not known to be a local result.
-        return false;
-      case Token.NEW:
-        return true;
-      case Token.FUNCTION:
-      case Token.REGEXP:
-      case Token.ARRAYLIT:
-      case Token.OBJECTLIT:
-        // Literals objects with non-literal children are allowed.
-        return true;
-      case Token.IN:
-        // The IN operator is not include in NodeUtil#isSimpleOperator.
-        return true;
-      default:
-        // Other op force a local value:
-        //  x = '' + g (x is now an local string)
-        //  x -= g (x is now an local number)
-        if (NodeUtil.isAssignmentOp(value)
-            || NodeUtil.isSimpleOperator(value)
-            || NodeUtil.isImmutableValue(value)) {
-          return true;
+            return false;
+          case Token.GETELEM:
+          case Token.GETPROP:
+            // There is no information about the locality of object properties.
+            return false;
+          case Token.CALL:
+            // TODO(johnlenz): add to local tainting list, if the call result
+            // is not known to be a local result.
+            return false;
         }
+        return false;
+      }
+    };
 
-        throw new IllegalStateException(
-            "Unexpected expression node" + value +
-            "\n parent:" + value.getParent());
-    }
+    return NodeUtil.evaluatesToLocalValue(value, taintingPredicate);
   }
 
   /**
@@ -874,7 +788,8 @@
               caller.setTaintsThis();
               changed = true;
             }
-          } else if (objectNode != null && isKnownLocalValue(objectNode)
+          } else if (objectNode != null
+              && NodeUtil.evaluatesToLocalValue(objectNode)
               && !isCallOrApply(callSite)) {
             // Modifying 'this' on a known local object doesn't change any
             // significant state.
diff --git a/src/com/google/javascript/rhino/Node.java b/src/com/google/javascript/rhino/Node.java
index 3042113..2c01b76 100644
--- a/src/com/google/javascript/rhino/Node.java
+++ b/src/com/google/javascript/rhino/Node.java
@@ -2086,7 +2086,6 @@
     | FLAG_ARGUMENTS_UNMODIFIED
     | FLAG_NO_THROWS;
 
-
   /**
    * Marks this function or constructor call's side effect flags.
    * This property is only meaningful for {@link Token#CALL} and
@@ -2101,6 +2100,10 @@
     putIntProp(SIDE_EFFECT_FLAGS, flags);
   }
 
+  public void setSideEffectFlags(SideEffectFlags flags) {
+    setSideEffectFlags(flags.valueOf());
+  }
+
   /**
    * Returns the side effects flags for this node.
    */
@@ -2109,6 +2112,85 @@
   }
 
   /**
+   * A helper class for getting and setting the side-effect flags.
+   * @author johnlenz@google.com (John Lenz)
+   */
+  public static class SideEffectFlags {
+    private int value = Node.SIDE_EFFECTS_ALL;
+
+    public SideEffectFlags() {
+    }
+
+    public SideEffectFlags(int value) {
+      this.value = value;
+    }
+
+    public int valueOf() {
+      return value;
+    }
+
+    /** All side-effect occur and the returned results are non-local. */
+    public void setAllFlags() {
+      value = Node.SIDE_EFFECTS_ALL;
+    }
+
+    /** No side-effects occur and the returned results are local. */
+    public void clearAllFlags() {
+      value = Node.NO_SIDE_EFFECTS | Node.FLAG_LOCAL_RESULTS;
+    }
+
+    public boolean areAllFlagsSet() {
+      return value == Node.SIDE_EFFECTS_ALL;
+    }
+
+    /**
+     * Preserve the return result flag, but clear the others:
+     *   no global state change, no throws, no this change, no arguments change
+     */
+    public void clearSideEffectFlags() {
+      value |= Node.NO_SIDE_EFFECTS;
+    }
+
+    public void setMutatesGlobalState() {
+      // Modify global means everything must be assumed to be modified.
+      removeFlag(Node.FLAG_GLOBAL_STATE_UNMODIFIED);
+      removeFlag(Node.FLAG_ARGUMENTS_UNMODIFIED);
+      removeFlag(Node.FLAG_THIS_UNMODIFIED);
+    }
+
+    public void setThrows() {
+      removeFlag(Node.FLAG_NO_THROWS);
+    }
+
+    public void setMutatesThis() {
+      removeFlag(Node.FLAG_THIS_UNMODIFIED);
+    }
+
+    public void setMutatesArguments() {
+      removeFlag(Node.FLAG_ARGUMENTS_UNMODIFIED);
+    }
+
+    public void setReturnsTainted() {
+      removeFlag(Node.FLAG_LOCAL_RESULTS);
+    }
+
+    private void removeFlag(int flag) {
+      value &= ~flag;
+    }
+  }
+
+  /**
+   * @return Whether the only side-effect is "modifies this"
+   */
+  public boolean isOnlyModifiesThisCall() {
+    return areBitFlagsSet(
+        getSideEffectFlags() & Node.NO_SIDE_EFFECTS,
+        Node.FLAG_GLOBAL_STATE_UNMODIFIED
+            | Node.FLAG_ARGUMENTS_UNMODIFIED
+            | Node.FLAG_NO_THROWS);
+  }
+
+  /**
    * Returns true if this node is a function or constructor call that
    * has no side effects.
    */
diff --git a/test/com/google/javascript/jscomp/NodeUtilTest.java b/test/com/google/javascript/jscomp/NodeUtilTest.java
index 345bf64..aa052ec 100644
--- a/test/com/google/javascript/jscomp/NodeUtilTest.java
+++ b/test/com/google/javascript/jscomp/NodeUtilTest.java
@@ -16,6 +16,7 @@
 
 package com.google.javascript.jscomp;
 
+import com.google.common.base.Preconditions;
 import com.google.common.base.Predicates;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Sets;
@@ -167,7 +168,7 @@
     assertExpressionBooleanFalse("a?false:false");
     assertExpressionBooleanUnknown("a?true:false");
     assertExpressionBooleanUnknown("a?true:foo()");
-    
+
     assertExpressionBooleanUnknown("b");
     assertExpressionBooleanUnknown("-'0.0'");
   }
@@ -340,6 +341,10 @@
     assertSideEffect(false, "-Infinity");
     assertSideEffect(false, "Infinity");
     assertSideEffect(false, "NaN");
+
+    assertSideEffect(false, "({}||[]).foo = 2;");
+    assertSideEffect(false, "(true ? {} : []).foo = 2;");
+    assertSideEffect(false, "({},[]).foo = 2;");
   }
 
   public void testRegExpSideEffect() {
@@ -958,4 +963,107 @@
     assertFalse(secondBreak.hasChildren());
     assertFalse(NodeUtil.isLabelName(secondBreak.getFirstChild()));
   }
+
+  public void testLocalValue1() throws Exception {
+    // Names are not known to be local.
+    assertFalse(testLocalValue("x"));
+    assertFalse(testLocalValue("x()"));
+    assertFalse(testLocalValue("this"));
+    assertFalse(testLocalValue("arguments"));
+
+    // new objects are local
+    assertTrue(testLocalValue("new x()"));
+
+    // property references are assume to be non-local
+    assertFalse(testLocalValue("(new x()).y"));
+    assertFalse(testLocalValue("(new x())['y']"));
+
+    // Primitive values are local
+    assertTrue(testLocalValue("null"));
+    assertTrue(testLocalValue("undefined"));
+    assertTrue(testLocalValue("Infinity"));
+    assertTrue(testLocalValue("NaN"));
+    assertTrue(testLocalValue("1"));
+    assertTrue(testLocalValue("'a'"));
+    assertTrue(testLocalValue("true"));
+    assertTrue(testLocalValue("false"));
+    assertTrue(testLocalValue("[]"));
+    assertTrue(testLocalValue("{}"));
+
+    // The contents of arrays and objects don't matter
+    assertTrue(testLocalValue("[x]"));
+    assertTrue(testLocalValue("{'a':x}"));
+
+    // Pre-increment results in primitive number
+    assertTrue(testLocalValue("++x"));
+    assertTrue(testLocalValue("--x"));
+
+    // Post-increment, the previous value matters.
+    assertFalse(testLocalValue("x++"));
+    assertFalse(testLocalValue("x--"));
+
+    // The left side of an only assign matters if it is an alias or mutable.
+    assertTrue(testLocalValue("x=1"));
+    assertFalse(testLocalValue("x=[]"));
+    assertFalse(testLocalValue("x=y"));
+    // The right hand side of assignment opts don't matter, as they force
+    // a local result.
+    assertTrue(testLocalValue("x+=y"));
+    assertTrue(testLocalValue("x*=y"));
+    // Comparisons always result in locals, as they force a local boolean
+    // result.
+    assertTrue(testLocalValue("x==y"));
+    assertTrue(testLocalValue("x!=y"));
+    assertTrue(testLocalValue("x>y"));
+    // Only the right side of a comma matters
+    assertTrue(testLocalValue("(1,2)"));
+    assertTrue(testLocalValue("(x,1)"));
+    assertFalse(testLocalValue("(x,y)"));
+
+    // Both the operands of OR matter
+    assertTrue(testLocalValue("1||2"));
+    assertFalse(testLocalValue("x||1"));
+    assertFalse(testLocalValue("x||y"));
+    assertFalse(testLocalValue("1||y"));
+
+    // Both the operands of AND matter
+    assertTrue(testLocalValue("1&&2"));
+    assertFalse(testLocalValue("x&&1"));
+    assertFalse(testLocalValue("x&&y"));
+    assertFalse(testLocalValue("1&&y"));
+
+    // Only the results of HOOK matter
+    assertTrue(testLocalValue("x?1:2"));
+    assertFalse(testLocalValue("x?x:2"));
+    assertFalse(testLocalValue("x?1:x"));
+    assertFalse(testLocalValue("x?x:y"));
+
+    // Results of ops are local values
+    assertTrue(testLocalValue("!y"));
+    assertTrue(testLocalValue("~y"));
+    assertTrue(testLocalValue("y + 1"));
+    assertTrue(testLocalValue("y + z"));
+    assertTrue(testLocalValue("y * z"));
+
+    assertTrue(testLocalValue("'a' in x"));
+    assertTrue(testLocalValue("typeof x"));
+    assertTrue(testLocalValue("x instanceof y"));
+
+    assertTrue(testLocalValue("void x"));
+    assertTrue(testLocalValue("void 0"));
+    
+    assertFalse(testLocalValue("{}.x"));
+  }
+
+  private boolean testLocalValue(String js) {
+    Node script = parse("var test = " + js +";");
+    Preconditions.checkState(script.getType() == Token.SCRIPT);
+    Node var = script.getFirstChild();
+    Preconditions.checkState(var.getType() == Token.VAR);
+    Node name = var.getFirstChild();
+    Preconditions.checkState(name.getType() == Token.NAME);
+    Node value = name.getFirstChild();
+
+    return NodeUtil.evaluatesToLocalValue(value);
+  }
 }
diff --git a/test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java b/test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java
index e2d1af8..6e83d68 100644
--- a/test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java
+++ b/test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java
@@ -16,7 +16,6 @@
 
 package com.google.javascript.jscomp;
 
-import com.google.common.base.Preconditions;
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.Lists;
 import com.google.javascript.jscomp.CheckLevel;
@@ -201,11 +200,11 @@
   }
 
   public void testAnnotationInExterns_new4() throws Exception {
-    // TODO(johnlenz): We would like the entire expression containing
-    // "externObjSEThisMethod" to be considered side-effect free
-    // in this context, but not yet, and maybe not here.
+    // The entire expression containing "externObjSEThisMethod" is considered
+    // side-effect free in this context.
     checkMarkedCalls("new externObjSEThis().externObjSEThisMethod('')",
-        ImmutableList.<String>of("externObjSEThis"));
+        ImmutableList.<String>of(
+            "externObjSEThis", "NEW STRING externObjSEThisMethod"));
   }
 
   public void testAnnotationInExterns_new5() throws Exception {
@@ -224,7 +223,8 @@
         "  new externObjSEThis().externObjSEThisMethod('') " +
         "};" +
         "f();",
-        ImmutableList.<String>of("externObjSEThis", "f"));
+        ImmutableList.<String>of(
+            "externObjSEThis", "NEW STRING externObjSEThisMethod", "f"));
   }
 
   public void testAnnotationInExterns_new7() throws Exception {
@@ -1138,109 +1138,6 @@
          null, INVALID_NO_SIDE_EFFECT_ANNOTATION);
   }
 
-  public void testLocalValue1() throws Exception {
-    // Names are not known to be local.
-    assertFalse(testLocalValue("x"));
-    assertFalse(testLocalValue("x()"));
-    assertFalse(testLocalValue("this"));
-    assertFalse(testLocalValue("arguments"));
-
-    // new objects are local
-    assertTrue(testLocalValue("new x()"));
-
-    // property references are assume to be non-local
-    assertFalse(testLocalValue("(new x()).y"));
-    assertFalse(testLocalValue("(new x())['y']"));
-
-    // Primitive values are local
-    assertTrue(testLocalValue("null"));
-    assertTrue(testLocalValue("undefined"));
-    assertTrue(testLocalValue("Infinity"));
-    assertTrue(testLocalValue("NaN"));
-    assertTrue(testLocalValue("1"));
-    assertTrue(testLocalValue("'a'"));
-    assertTrue(testLocalValue("true"));
-    assertTrue(testLocalValue("false"));
-    assertTrue(testLocalValue("[]"));
-    assertTrue(testLocalValue("{}"));
-
-    // The contents of arrays and objects don't matter
-    assertTrue(testLocalValue("[x]"));
-    assertTrue(testLocalValue("{'a':x}"));
-
-    // Pre-increment results in primitive number
-    assertTrue(testLocalValue("++x"));
-    assertTrue(testLocalValue("--x"));
-
-    // Post-increment, the previous value matters.
-    assertFalse(testLocalValue("x++"));
-    assertFalse(testLocalValue("x--"));
-
-    // Only the right side of an assign matters
-    assertTrue(testLocalValue("x=1"));
-    assertFalse(testLocalValue("x=y"));
-    // The right hand side of assignment opts don't matter, as they force
-    // a local result.
-    assertTrue(testLocalValue("x+=y"));
-    assertTrue(testLocalValue("x*=y"));
-    // Comparisons always result in locals, as they force a local boolean
-    // result.
-    assertTrue(testLocalValue("x==y"));
-    assertTrue(testLocalValue("x!=y"));
-    assertTrue(testLocalValue("x>y"));
-    // Only the right side of a comma matters
-    assertTrue(testLocalValue("(1,2)"));
-    assertTrue(testLocalValue("(x,1)"));
-    assertFalse(testLocalValue("(x,y)"));
-
-    // Both the operands of OR matter
-    assertTrue(testLocalValue("1||2"));
-    assertFalse(testLocalValue("x||1"));
-    assertFalse(testLocalValue("x||y"));
-    assertFalse(testLocalValue("1||y"));
-
-    // Both the operands of AND matter
-    assertTrue(testLocalValue("1&&2"));
-    assertFalse(testLocalValue("x&&1"));
-    assertFalse(testLocalValue("x&&y"));
-    assertFalse(testLocalValue("1&&y"));
-
-    // Only the results of HOOK matter
-    assertTrue(testLocalValue("x?1:2"));
-    assertFalse(testLocalValue("x?x:2"));
-    assertFalse(testLocalValue("x?1:x"));
-    assertFalse(testLocalValue("x?x:y"));
-
-    // Results of ops are local values
-    assertTrue(testLocalValue("!y"));
-    assertTrue(testLocalValue("~y"));
-    assertTrue(testLocalValue("y + 1"));
-    assertTrue(testLocalValue("y + z"));
-    assertTrue(testLocalValue("y * z"));
-
-    assertTrue(testLocalValue("'a' in x"));
-    assertTrue(testLocalValue("typeof x"));
-    assertTrue(testLocalValue("x instanceof y"));
-
-    assertTrue(testLocalValue("void x"));
-    assertTrue(testLocalValue("void 0"));
-  }
-
-  boolean testLocalValue(String js) {
-     Node root = this.parseExpectedJs("var test = " + js +";");
-     Preconditions.checkState(root.getType() == Token.BLOCK);
-     Node script = root.getFirstChild();
-     Preconditions.checkState(script.getType() == Token.SCRIPT);
-     Node var = script.getFirstChild();
-     Preconditions.checkState(var.getType() == Token.VAR);
-     Node name = var.getFirstChild();
-     Preconditions.checkState(name.getType() == Token.NAME);
-     Node value = name.getFirstChild();
-
-     return PureFunctionIdentifier.isKnownLocalValue(value);
-
-  }
-
   void checkMarkedCalls(String source, List<String> expected) {
     testSame(source);
     assertEquals(expected, noSideEffectCalls);
