===
insert-tree
---
MethodDeclaration [30550,31436]
    Javadoc [30550,30629]
        TagElement [30559,30623]
            TextElement: Returns true if the result of node evaluation is always a number [30559,30623]
    Modifier: static [30632,30638]
    PrimitiveType: boolean [30639,30646]
    SimpleName: isNumericResult [30647,30662]
    SingleVariableDeclaration [30663,30669]
        SimpleType [30663,30667]
            SimpleName: Node [30663,30667]
        SimpleName: n [30668,30669]
    Block [30671,31436]
        SwitchStatement [30677,31432]
            MethodInvocation [30685,30696]
                METHOD_INVOCATION_RECEIVER [30685,30686]
                    SimpleName: n [30685,30686]
                SimpleName: getType [30687,30694]
            SwitchCase [30787,30805]
                QualifiedName: Token.BITNOT [30792,30804]
            SwitchCase [30812,30829]
                QualifiedName: Token.BITOR [30817,30828]
            SwitchCase [30836,30854]
                QualifiedName: Token.BITXOR [30841,30853]
            SwitchCase [30861,30879]
                QualifiedName: Token.BITAND [30866,30878]
            SwitchCase [30886,30901]
                QualifiedName: Token.LSH [30891,30900]
            SwitchCase [30908,30923]
                QualifiedName: Token.RSH [30913,30922]
            SwitchCase [30930,30946]
                QualifiedName: Token.URSH [30935,30945]
            SwitchCase [30953,30968]
                QualifiedName: Token.SUB [30958,30967]
            SwitchCase [30975,30990]
                QualifiedName: Token.MUL [30980,30989]
            SwitchCase [30997,31012]
                QualifiedName: Token.MOD [31002,31011]
            SwitchCase [31019,31034]
                QualifiedName: Token.DIV [31024,31033]
            SwitchCase [31041,31056]
                QualifiedName: Token.INC [31046,31055]
            SwitchCase [31063,31078]
                QualifiedName: Token.DEC [31068,31077]
            SwitchCase [31085,31100]
                QualifiedName: Token.POS [31090,31099]
            SwitchCase [31107,31122]
                QualifiedName: Token.NEG [31112,31121]
            SwitchCase [31129,31147]
                QualifiedName: Token.NUMBER [31134,31146]
            ReturnStatement [31156,31168]
                BooleanLiteral: true [31163,31167]
            SwitchCase [31175,31191]
                QualifiedName: Token.NAME [31180,31190]
            VariableDeclarationStatement [31200,31228]
                SimpleType [31200,31206]
                    SimpleName: String [31200,31206]
                VariableDeclarationFragment [31207,31227]
                    SimpleName: name [31207,31211]
                    MethodInvocation [31214,31227]
                        METHOD_INVOCATION_RECEIVER [31214,31215]
                            SimpleName: n [31214,31215]
                        SimpleName: getString [31216,31225]
            IfStatement [31237,31295]
                MethodInvocation [31241,31259]
                    METHOD_INVOCATION_RECEIVER [31241,31245]
                        SimpleName: name [31241,31245]
                    SimpleName: equals [31246,31252]
                    METHOD_INVOCATION_ARGUMENTS [31253,31258]
                        StringLiteral: "NaN" [31253,31258]
                Block [31261,31295]
                    ReturnStatement [31273,31285]
                        BooleanLiteral: true [31280,31284]
            IfStatement [31304,31367]
                MethodInvocation [31308,31331]
                    METHOD_INVOCATION_RECEIVER [31308,31312]
                        SimpleName: name [31308,31312]
                    SimpleName: equals [31313,31319]
                    METHOD_INVOCATION_ARGUMENTS [31320,31330]
                        StringLiteral: "Infinity" [31320,31330]
                Block [31333,31367]
                    ReturnStatement [31345,31357]
                        BooleanLiteral: true [31352,31356]
            ReturnStatement [31376,31389]
                BooleanLiteral: false [31383,31388]
            SwitchCase [31396,31404]
            ReturnStatement [31413,31426]
                BooleanLiteral: false [31420,31425]
to
TypeDeclaration [1314,77262]
at 41
===
insert-tree
---
MethodDeclaration [31440,32163]
    Javadoc [31440,31520]
        TagElement [31449,31514]
            TextElement:  Whether the result of node evaluation is always a boolean [31456,31514]
    Modifier: static [31523,31529]
    PrimitiveType: boolean [31530,31537]
    SimpleName: isBooleanResult [31538,31553]
    SingleVariableDeclaration [31554,31560]
        SimpleType [31554,31558]
            SimpleName: Node [31554,31558]
        SimpleName: n [31559,31560]
    Block [31562,32163]
        SwitchStatement [31704,32159]
            MethodInvocation [31712,31723]
                METHOD_INVOCATION_RECEIVER [31712,31713]
                    SimpleName: n [31712,31713]
                SimpleName: getType [31714,31721]
            SwitchCase [31753,31769]
                QualifiedName: Token.TRUE [31758,31768]
            SwitchCase [31776,31793]
                QualifiedName: Token.FALSE [31781,31792]
            SwitchCase [31821,31835]
                QualifiedName: Token.EQ [31826,31834]
            SwitchCase [31842,31856]
                QualifiedName: Token.NE [31847,31855]
            SwitchCase [31863,31879]
                QualifiedName: Token.SHEQ [31868,31878]
            SwitchCase [31886,31902]
                QualifiedName: Token.SHNE [31891,31901]
            SwitchCase [31909,31923]
                QualifiedName: Token.LT [31914,31922]
            SwitchCase [31930,31944]
                QualifiedName: Token.GT [31935,31943]
            SwitchCase [31951,31965]
                QualifiedName: Token.LE [31956,31964]
            SwitchCase [31972,31986]
                QualifiedName: Token.GE [31977,31985]
            SwitchCase [32011,32025]
                QualifiedName: Token.IN [32016,32024]
            SwitchCase [32032,32054]
                QualifiedName: Token.INSTANCEOF [32037,32053]
            SwitchCase [32080,32095]
                QualifiedName: Token.NOT [32085,32094]
            ReturnStatement [32104,32116]
                BooleanLiteral: true [32111,32115]
            SwitchCase [32123,32131]
            ReturnStatement [32140,32153]
                BooleanLiteral: false [32147,32152]
to
TypeDeclaration [1314,77262]
at 42
===
insert-tree
---
MethodDeclaration [32167,32375]
    Modifier: static [32167,32173]
    PrimitiveType: boolean [32174,32181]
    SimpleName: isUndefined [32182,32193]
    SingleVariableDeclaration [32194,32200]
        SimpleType [32194,32198]
            SimpleName: Node [32194,32198]
        SimpleName: n [32199,32200]
    Block [32202,32375]
        SwitchStatement [32208,32353]
            MethodInvocation [32216,32227]
                METHOD_INVOCATION_RECEIVER [32216,32217]
                    SimpleName: n [32216,32217]
                SimpleName: getType [32218,32225]
            SwitchCase [32237,32253]
                QualifiedName: Token.VOID [32242,32252]
            ReturnStatement [32262,32274]
                BooleanLiteral: true [32269,32273]
            SwitchCase [32281,32297]
                QualifiedName: Token.NAME [32286,32296]
            ReturnStatement [32306,32347]
                MethodInvocation [32313,32346]
                    METHOD_INVOCATION_RECEIVER [32313,32326]
                        MethodInvocation [32313,32326]
                            METHOD_INVOCATION_RECEIVER [32313,32314]
                                SimpleName: n [32313,32314]
                            SimpleName: getString [32315,32324]
                    SimpleName: equals [32327,32333]
                    METHOD_INVOCATION_ARGUMENTS [32334,32345]
                        StringLiteral: "undefined" [32334,32345]
        ReturnStatement [32358,32371]
            BooleanLiteral: false [32365,32370]
to
TypeDeclaration [1314,77262]
at 43
===
insert-tree
---
MethodDeclaration [32379,32452]
    Modifier: static [32379,32385]
    PrimitiveType: boolean [32386,32393]
    SimpleName: isNull [32394,32400]
    SingleVariableDeclaration [32401,32407]
        SimpleType [32401,32405]
            SimpleName: Node [32401,32405]
        SimpleName: n [32406,32407]
    Block [32409,32452]
        ReturnStatement [32415,32448]
            InfixExpression [32422,32447]
                MethodInvocation [32422,32433]
                    METHOD_INVOCATION_RECEIVER [32422,32423]
                        SimpleName: n [32422,32423]
                    SimpleName: getType [32424,32431]
                INFIX_EXPRESSION_OPERATOR: == [32434,32436]
                QualifiedName: Token.NULL [32437,32447]
to
TypeDeclaration [1314,77262]
at 44
===
insert-tree
---
MethodDeclaration [32456,32660]
    Javadoc [32456,32521]
        TagElement [32465,32515]
            TextElement:  Whether the results is possibly a string. [32473,32515]
    Modifier: static [32524,32530]
    PrimitiveType: boolean [32531,32538]
    SimpleName: mayBeString [32539,32550]
    SingleVariableDeclaration [32551,32557]
        SimpleType [32551,32555]
            SimpleName: Node [32551,32555]
        SimpleName: n [32556,32557]
    Block [32559,32660]
        ReturnStatement [32565,32656]
            InfixExpression [32572,32655]
                PrefixExpression [32572,32591]
                    PREFIX_EXPRESSION_OPERATOR: ! [32572,32573]
                    MethodInvocation [32573,32591]
                        SimpleName: isNumericResult [32573,32588]
                        METHOD_INVOCATION_ARGUMENTS [32589,32590]
                            SimpleName: n [32589,32590]
                INFIX_EXPRESSION_OPERATOR: && [32592,32594]
                PrefixExpression [32595,32614]
                    PREFIX_EXPRESSION_OPERATOR: ! [32595,32596]
                    MethodInvocation [32596,32614]
                        SimpleName: isBooleanResult [32596,32611]
                        METHOD_INVOCATION_ARGUMENTS [32612,32613]
                            SimpleName: n [32612,32613]
                PrefixExpression [32626,32641]
                    PREFIX_EXPRESSION_OPERATOR: ! [32626,32627]
                    MethodInvocation [32627,32641]
                        SimpleName: isUndefined [32627,32638]
                        METHOD_INVOCATION_ARGUMENTS [32639,32640]
                            SimpleName: n [32639,32640]
                PrefixExpression [32645,32655]
                    PREFIX_EXPRESSION_OPERATOR: ! [32645,32646]
                    MethodInvocation [32646,32655]
                        SimpleName: isNull [32646,32652]
                        METHOD_INVOCATION_ARGUMENTS [32653,32654]
                            SimpleName: n [32653,32654]
to
TypeDeclaration [1314,77262]
at 45
===
insert-tree
---
SwitchCase [6608,6623]
    QualifiedName: Token.NEG [6613,6622]
to
SwitchStatement [6034,6605]
at 16
===
insert-tree
---
IfStatement [6632,6823]
    InfixExpression [6636,6767]
        InfixExpression [6636,6703]
            InfixExpression [6636,6658]
                MethodInvocation [6636,6653]
                    METHOD_INVOCATION_RECEIVER [6636,6637]
                        SimpleName: n [6636,6637]
                    SimpleName: getChildCount [6638,6651]
                INFIX_EXPRESSION_OPERATOR: == [6654,6656]
                NumberLiteral: 1 [6657,6658]
            INFIX_EXPRESSION_OPERATOR: && [6659,6661]
            InfixExpression [6662,6703]
                MethodInvocation [6662,6689]
                    METHOD_INVOCATION_RECEIVER [6662,6679]
                        MethodInvocation [6662,6679]
                            METHOD_INVOCATION_RECEIVER [6662,6663]
                                SimpleName: n [6662,6663]
                            SimpleName: getFirstChild [6664,6677]
                    SimpleName: getType [6680,6687]
                INFIX_EXPRESSION_OPERATOR: == [6690,6692]
                QualifiedName: Token.NAME [6693,6703]
        INFIX_EXPRESSION_OPERATOR: && [6716,6718]
        MethodInvocation [6719,6767]
            METHOD_INVOCATION_RECEIVER [6719,6748]
                MethodInvocation [6719,6748]
                    METHOD_INVOCATION_RECEIVER [6719,6736]
                        MethodInvocation [6719,6736]
                            METHOD_INVOCATION_RECEIVER [6719,6720]
                                SimpleName: n [6719,6720]
                            SimpleName: getFirstChild [6721,6734]
                    SimpleName: getString [6737,6746]
            SimpleName: equals [6749,6755]
            METHOD_INVOCATION_ARGUMENTS [6756,6766]
                StringLiteral: "Infinity" [6756,6766]
    Block [6769,6823]
        ReturnStatement [6781,6813]
            QualifiedName: Double.NEGATIVE_INFINITY [6788,6812]
to
SwitchStatement [6034,6605]
at 17
===
insert-tree
---
ReturnStatement [6832,6844]
    NullLiteral [6839,6843]
to
SwitchStatement [6034,6605]
at 18
===
insert-tree
---
SwitchCase [6852,6870]
    QualifiedName: Token.STRING [6857,6869]
to
SwitchStatement [6034,6605]
at 19
===
insert-tree
---
VariableDeclarationStatement [6979,7004]
    SimpleType [6979,6985]
        SimpleName: String [6979,6985]
    VariableDeclarationFragment [6986,7003]
        SimpleName: s [6986,6987]
        MethodInvocation [6990,7003]
            METHOD_INVOCATION_RECEIVER [6990,6991]
                SimpleName: n [6990,6991]
            SimpleName: getString [6992,7001]
to
SwitchStatement [6034,6605]
at 20
===
insert-tree
---
IfStatement [7014,7068]
    InfixExpression [7018,7033]
        MethodInvocation [7018,7028]
            METHOD_INVOCATION_RECEIVER [7018,7019]
                SimpleName: s [7018,7019]
            SimpleName: length [7020,7026]
        INFIX_EXPRESSION_OPERATOR: == [7029,7031]
        NumberLiteral: 0 [7032,7033]
    Block [7035,7068]
        ReturnStatement [7047,7058]
            NumberLiteral: 0.0 [7054,7057]
to
SwitchStatement [6034,6605]
at 21
===
insert-tree
---
IfStatement [7078,7420]
    InfixExpression [7082,7188]
        InfixExpression [7082,7130]
            InfixExpression [7082,7096]
                MethodInvocation [7082,7092]
                    METHOD_INVOCATION_RECEIVER [7082,7083]
                        SimpleName: s [7082,7083]
                    SimpleName: length [7084,7090]
                INFIX_EXPRESSION_OPERATOR: > [7093,7094]
                NumberLiteral: 2 [7095,7096]
            INFIX_EXPRESSION_OPERATOR: && [7109,7111]
            InfixExpression [7112,7130]
                MethodInvocation [7112,7123]
                    METHOD_INVOCATION_RECEIVER [7112,7113]
                        SimpleName: s [7112,7113]
                    SimpleName: charAt [7114,7120]
                    METHOD_INVOCATION_ARGUMENTS [7121,7122]
                        NumberLiteral: 0 [7121,7122]
                INFIX_EXPRESSION_OPERATOR: == [7124,7126]
                CharacterLiteral: '0' [7127,7130]
        INFIX_EXPRESSION_OPERATOR: && [7143,7145]
        ParenthesizedExpression [7146,7188]
            InfixExpression [7147,7187]
                InfixExpression [7147,7165]
                    MethodInvocation [7147,7158]
                        METHOD_INVOCATION_RECEIVER [7147,7148]
                            SimpleName: s [7147,7148]
                        SimpleName: charAt [7149,7155]
                        METHOD_INVOCATION_ARGUMENTS [7156,7157]
                            NumberLiteral: 1 [7156,7157]
                    INFIX_EXPRESSION_OPERATOR: == [7159,7161]
                    CharacterLiteral: 'x' [7162,7165]
                INFIX_EXPRESSION_OPERATOR: || [7166,7168]
                InfixExpression [7169,7187]
                    MethodInvocation [7169,7180]
                        METHOD_INVOCATION_RECEIVER [7169,7170]
                            SimpleName: s [7169,7170]
                        SimpleName: charAt [7171,7177]
                        METHOD_INVOCATION_ARGUMENTS [7178,7179]
                            NumberLiteral: 1 [7178,7179]
                    INFIX_EXPRESSION_OPERATOR: == [7181,7183]
                    CharacterLiteral: 'X' [7184,7187]
    Block [7190,7420]
        TryStatement [7249,7410]
            Block [7253,7339]
                ReturnStatement [7267,7327]
                    MethodInvocation [7274,7326]
                        METHOD_INVOCATION_RECEIVER [7274,7280]
                            SimpleName: Double [7274,7280]
                        SimpleName: valueOf [7281,7288]
                        METHOD_INVOCATION_ARGUMENTS [7289,7325]
                            MethodInvocation [7289,7325]
                                METHOD_INVOCATION_RECEIVER [7289,7296]
                                    SimpleName: Integer [7289,7296]
                                SimpleName: parseInt [7297,7305]
                                METHOD_INVOCATION_ARGUMENTS [7306,7324]
                                    MethodInvocation [7306,7320]
                                        METHOD_INVOCATION_RECEIVER [7306,7307]
                                            SimpleName: s [7306,7307]
                                        SimpleName: substring [7308,7317]
                                        METHOD_INVOCATION_ARGUMENTS [7318,7319]
                                            NumberLiteral: 2 [7318,7319]
                                    NumberLiteral: 16 [7322,7324]
            CatchClause [7340,7410]
                SingleVariableDeclaration [7347,7370]
                    SimpleType [7347,7368]
                        SimpleName: NumberFormatException [7347,7368]
                    SimpleName: e [7369,7370]
                Block [7372,7410]
                    ReturnStatement [7386,7398]
                        NullLiteral [7393,7397]
to
SwitchStatement [6034,6605]
at 22
===
insert-tree
---
TryStatement [7430,7552]
    Block [7434,7485]
        ReturnStatement [7446,7475]
            MethodInvocation [7453,7474]
                METHOD_INVOCATION_RECEIVER [7453,7459]
                    SimpleName: Double [7453,7459]
                SimpleName: parseDouble [7460,7471]
                METHOD_INVOCATION_ARGUMENTS [7472,7473]
                    SimpleName: s [7472,7473]
    CatchClause [7486,7552]
        SingleVariableDeclaration [7493,7516]
            SimpleType [7493,7514]
                SimpleName: NumberFormatException [7493,7514]
            SimpleName: e [7515,7516]
        Block [7518,7552]
            ReturnStatement [7530,7542]
                NullLiteral [7537,7541]
to
SwitchStatement [6034,6605]
at 23
