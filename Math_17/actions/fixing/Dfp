===
insert-node
---
MethodDeclaration [49501,51394]
to
TypeDeclaration [916,76422]
at 86
===
insert-tree
---
Javadoc [49501,49684]
    TagElement [49505,49610]
        TextElement: Multiply this by a single digit 0&lt;=x&lt;radix. [49505,49554]
        TextElement: There are speed advantages in this special case. [49562,49610]
    TagElement [49618,49639]
        SimpleName: x [49625,49626]
        TextElement:  multiplicand [49626,49639]
    TagElement [49647,49676]
        TextElement:  product of this and x [49654,49676]
to
MethodDeclaration [49501,51394]
at 0
===
insert-node
---
Modifier: private [49689,49696]
to
MethodDeclaration [49501,51394]
at 1
===
insert-tree
---
SimpleType [49697,49700]
    SimpleName: Dfp [49697,49700]
to
MethodDeclaration [49501,51394]
at 2
===
insert-node
---
SimpleName: multiplyFast [49701,49713]
to
MethodDeclaration [49501,51394]
at 3
===
insert-tree
---
SingleVariableDeclaration [49714,49725]
    Modifier: final [49714,49719]
    PrimitiveType: int [49720,49723]
    SimpleName: x [49724,49725]
to
MethodDeclaration [49501,51394]
at 4
===
insert-node
---
Block [49727,51394]
to
MethodDeclaration [49501,51394]
at 5
===
insert-node
---
IfStatement [49355,49489]
to
Block [49415,51082]
at 0
===
move-tree
---
VariableDeclarationStatement [49425,49456]
    SimpleType [49425,49428]
        SimpleName: Dfp [49425,49428]
    VariableDeclarationFragment [49429,49455]
        SimpleName: result [49429,49435]
        MethodInvocation [49438,49455]
            SimpleName: newInstance [49438,49449]
            METHOD_INVOCATION_ARGUMENTS [49450,49454]
                ThisExpression [49450,49454]
to
Block [49727,51394]
at 0
===
move-tree
---
IfStatement [49501,50081]
    InfixExpression [49505,49519]
        SimpleName: nans [49505,49509]
        INFIX_EXPRESSION_OPERATOR: != [49510,49512]
        SimpleName: FINITE [49513,49519]
    Block [49521,50081]
        IfStatement [49535,49592]
            MethodInvocation [49539,49546]
                SimpleName: isNaN [49539,49544]
            Block [49548,49592]
                ReturnStatement [49566,49578]
                    ThisExpression [49573,49577]
        IfStatement [49606,49728]
            InfixExpression [49610,49636]
                InfixExpression [49610,49626]
                    SimpleName: nans [49610,49614]
                    INFIX_EXPRESSION_OPERATOR: == [49615,49617]
                    SimpleName: INFINITE [49618,49626]
                INFIX_EXPRESSION_OPERATOR: && [49627,49629]
                InfixExpression [49630,49636]
                    SimpleName: x [49630,49631]
                    INFIX_EXPRESSION_OPERATOR: != [49632,49634]
                    NumberLiteral: 0 [49635,49636]
            Block [49638,49728]
                ExpressionStatement [49656,49683]
                    Assignment [49656,49682]
                        SimpleName: result [49656,49662]
                        ASSIGNMENT_OPERATOR: = [49663,49664]
                        MethodInvocation [49665,49682]
                            SimpleName: newInstance [49665,49676]
                            METHOD_INVOCATION_ARGUMENTS [49677,49681]
                                ThisExpression [49677,49681]
                ReturnStatement [49700,49714]
                    SimpleName: result [49707,49713]
        IfStatement [49742,50071]
            InfixExpression [49746,49772]
                InfixExpression [49746,49762]
                    SimpleName: nans [49746,49750]
                    INFIX_EXPRESSION_OPERATOR: == [49751,49753]
                    SimpleName: INFINITE [49754,49762]
                INFIX_EXPRESSION_OPERATOR: && [49763,49765]
                InfixExpression [49766,49772]
                    SimpleName: x [49766,49767]
                    INFIX_EXPRESSION_OPERATOR: == [49768,49770]
                    NumberLiteral: 0 [49771,49772]
            Block [49774,50071]
                ExpressionStatement [49792,49838]
                    MethodInvocation [49792,49837]
                        METHOD_INVOCATION_RECEIVER [49792,49797]
                            SimpleName: field [49792,49797]
                        SimpleName: setIEEEFlagsBits [49798,49814]
                        METHOD_INVOCATION_ARGUMENTS [49815,49836]
                            QualifiedName: DfpField.FLAG_INVALID [49815,49836]
                ExpressionStatement [49855,49887]
                    Assignment [49855,49886]
                        SimpleName: result [49855,49861]
                        ASSIGNMENT_OPERATOR: = [49862,49863]
                        MethodInvocation [49864,49886]
                            SimpleName: newInstance [49864,49875]
                            METHOD_INVOCATION_ARGUMENTS [49876,49885]
                                MethodInvocation [49876,49885]
                                    SimpleName: getZero [49876,49883]
                ExpressionStatement [49904,49923]
                    Assignment [49904,49922]
                        QualifiedName: result.nans [49904,49915]
                        ASSIGNMENT_OPERATOR: = [49916,49917]
                        SimpleName: QNAN [49918,49922]
                ExpressionStatement [49940,50026]
                    Assignment [49940,50025]
                        SimpleName: result [49940,49946]
                        ASSIGNMENT_OPERATOR: = [49947,49948]
                        MethodInvocation [49949,50025]
                            SimpleName: dotrap [49949,49955]
                            METHOD_INVOCATION_ARGUMENTS [49956,50024]
                                QualifiedName: DfpField.FLAG_INVALID [49956,49977]
                                SimpleName: MULTIPLY_TRAP [49979,49992]
                                MethodInvocation [49994,50016]
                                    SimpleName: newInstance [49994,50005]
                                    METHOD_INVOCATION_ARGUMENTS [50006,50015]
                                        MethodInvocation [50006,50015]
                                            SimpleName: getZero [50006,50013]
                                SimpleName: result [50018,50024]
                ReturnStatement [50043,50057]
                    SimpleName: result [50050,50056]
to
Block [49727,51394]
at 1
===
move-tree
---
IfStatement [50119,50401]
    InfixExpression [50123,50142]
        InfixExpression [50123,50128]
            SimpleName: x [50123,50124]
            INFIX_EXPRESSION_OPERATOR: < [50125,50126]
            NumberLiteral: 0 [50127,50128]
        INFIX_EXPRESSION_OPERATOR: || [50129,50131]
        InfixExpression [50132,50142]
            SimpleName: x [50132,50133]
            INFIX_EXPRESSION_OPERATOR: >= [50134,50136]
            SimpleName: RADIX [50137,50142]
    Block [50144,50401]
        ExpressionStatement [50158,50204]
            MethodInvocation [50158,50203]
                METHOD_INVOCATION_RECEIVER [50158,50163]
                    SimpleName: field [50158,50163]
                SimpleName: setIEEEFlagsBits [50164,50180]
                METHOD_INVOCATION_ARGUMENTS [50181,50202]
                    QualifiedName: DfpField.FLAG_INVALID [50181,50202]
        ExpressionStatement [50217,50249]
            Assignment [50217,50248]
                SimpleName: result [50217,50223]
                ASSIGNMENT_OPERATOR: = [50224,50225]
                MethodInvocation [50226,50248]
                    SimpleName: newInstance [50226,50237]
                    METHOD_INVOCATION_ARGUMENTS [50238,50247]
                        MethodInvocation [50238,50247]
                            SimpleName: getZero [50238,50245]
        ExpressionStatement [50262,50281]
            Assignment [50262,50280]
                QualifiedName: result.nans [50262,50273]
                ASSIGNMENT_OPERATOR: = [50274,50275]
                SimpleName: QNAN [50276,50280]
        ExpressionStatement [50294,50364]
            Assignment [50294,50363]
                SimpleName: result [50294,50300]
                ASSIGNMENT_OPERATOR: = [50301,50302]
                MethodInvocation [50303,50363]
                    SimpleName: dotrap [50303,50309]
                    METHOD_INVOCATION_ARGUMENTS [50310,50362]
                        QualifiedName: DfpField.FLAG_INVALID [50310,50331]
                        SimpleName: MULTIPLY_TRAP [50333,50346]
                        SimpleName: result [50348,50354]
                        SimpleName: result [50356,50362]
        ReturnStatement [50377,50391]
            SimpleName: result [50384,50390]
to
Block [49727,51394]
at 2
===
move-tree
---
VariableDeclarationStatement [50411,50422]
    PrimitiveType: int [50411,50414]
    VariableDeclarationFragment [50415,50421]
        SimpleName: rh [50415,50417]
        NumberLiteral: 0 [50420,50421]
to
Block [49727,51394]
at 3
===
move-tree
---
ForStatement [50431,50597]
    VariableDeclarationExpression [50436,50445]
        PrimitiveType: int [50436,50439]
        VariableDeclarationFragment [50440,50445]
            SimpleName: i [50440,50441]
            NumberLiteral: 0 [50444,50445]
    InfixExpression [50447,50462]
        SimpleName: i [50447,50448]
        INFIX_EXPRESSION_OPERATOR: < [50449,50450]
        QualifiedName: mant.length [50451,50462]
    PostfixExpression [50464,50467]
        SimpleName: i [50464,50465]
        POSTFIX_EXPRESSION_OPERATOR: ++ [50465,50467]
    Block [50469,50597]
        VariableDeclarationStatement [50483,50514]
            Modifier: final [50483,50488]
            PrimitiveType: int [50489,50492]
            VariableDeclarationFragment [50493,50513]
                SimpleName: r [50493,50494]
                InfixExpression [50497,50513]
                    InfixExpression [50497,50508]
                        ArrayAccess [50497,50504]
                            SimpleName: mant [50497,50501]
                            SimpleName: i [50502,50503]
                        INFIX_EXPRESSION_OPERATOR: * [50505,50506]
                        SimpleName: x [50507,50508]
                    INFIX_EXPRESSION_OPERATOR: + [50509,50510]
                    SimpleName: rh [50511,50513]
        ExpressionStatement [50527,50542]
            Assignment [50527,50541]
                SimpleName: rh [50527,50529]
                ASSIGNMENT_OPERATOR: = [50530,50531]
                InfixExpression [50532,50541]
                    SimpleName: r [50532,50533]
                    INFIX_EXPRESSION_OPERATOR: / [50534,50535]
                    SimpleName: RADIX [50536,50541]
        ExpressionStatement [50555,50587]
            Assignment [50555,50586]
                ArrayAccess [50555,50569]
                    QualifiedName: result.mant [50555,50566]
                    SimpleName: i [50567,50568]
                ASSIGNMENT_OPERATOR: = [50570,50571]
                InfixExpression [50572,50586]
                    SimpleName: r [50572,50573]
                    INFIX_EXPRESSION_OPERATOR: - [50574,50575]
                    InfixExpression [50576,50586]
                        SimpleName: rh [50576,50578]
                        INFIX_EXPRESSION_OPERATOR: * [50579,50580]
                        SimpleName: RADIX [50581,50586]
to
Block [49727,51394]
at 4
===
move-tree
---
VariableDeclarationStatement [50607,50625]
    PrimitiveType: int [50607,50610]
    VariableDeclarationFragment [50611,50624]
        SimpleName: lostdigit [50611,50620]
        NumberLiteral: 0 [50623,50624]
to
Block [49727,51394]
at 5
===
move-tree
---
IfStatement [50634,50776]
    InfixExpression [50638,50645]
        SimpleName: rh [50638,50640]
        INFIX_EXPRESSION_OPERATOR: != [50641,50643]
        NumberLiteral: 0 [50644,50645]
    Block [50647,50776]
        ExpressionStatement [50661,50688]
            Assignment [50661,50687]
                SimpleName: lostdigit [50661,50670]
                ASSIGNMENT_OPERATOR: = [50671,50672]
                ArrayAccess [50673,50687]
                    QualifiedName: result.mant [50673,50684]
                    NumberLiteral: 0 [50685,50686]
        ExpressionStatement [50701,50721]
            MethodInvocation [50701,50720]
                METHOD_INVOCATION_RECEIVER [50701,50707]
                    SimpleName: result [50701,50707]
                SimpleName: shiftRight [50708,50718]
        ExpressionStatement [50734,50766]
            Assignment [50734,50765]
                ArrayAccess [50734,50760]
                    QualifiedName: result.mant [50734,50745]
                    InfixExpression [50746,50759]
                        QualifiedName: mant.length [50746,50757]
                        INFIX_EXPRESSION_OPERATOR: - [50757,50758]
                        NumberLiteral: 1 [50758,50759]
                ASSIGNMENT_OPERATOR: = [50761,50762]
                SimpleName: rh [50763,50765]
to
Block [49727,51394]
at 6
===
move-tree
---
IfStatement [50786,50900]
    InfixExpression [50790,50821]
        ArrayAccess [50790,50816]
            QualifiedName: result.mant [50790,50801]
            InfixExpression [50802,50815]
                QualifiedName: mant.length [50802,50813]
                INFIX_EXPRESSION_OPERATOR: - [50813,50814]
                NumberLiteral: 1 [50814,50815]
        INFIX_EXPRESSION_OPERATOR: == [50817,50819]
        NumberLiteral: 0 [50820,50821]
    Block [50823,50900]
        ExpressionStatement [50875,50890]
            Assignment [50875,50889]
                QualifiedName: result.exp [50875,50885]
                ASSIGNMENT_OPERATOR: = [50886,50887]
                NumberLiteral: 0 [50888,50889]
to
Block [49727,51394]
at 7
===
move-tree
---
VariableDeclarationStatement [50910,50951]
    Modifier: final [50910,50915]
    PrimitiveType: int [50916,50919]
    VariableDeclarationFragment [50920,50950]
        SimpleName: excp [50920,50924]
        MethodInvocation [50927,50950]
            METHOD_INVOCATION_RECEIVER [50927,50933]
                SimpleName: result [50927,50933]
            SimpleName: round [50934,50939]
            METHOD_INVOCATION_ARGUMENTS [50940,50949]
                SimpleName: lostdigit [50940,50949]
to
Block [49727,51394]
at 8
===
move-tree
---
IfStatement [50960,51052]
    InfixExpression [50964,50973]
        SimpleName: excp [50964,50968]
        INFIX_EXPRESSION_OPERATOR: != [50969,50971]
        NumberLiteral: 0 [50972,50973]
    Block [50975,51052]
        ExpressionStatement [50989,51042]
            Assignment [50989,51041]
                SimpleName: result [50989,50995]
                ASSIGNMENT_OPERATOR: = [50996,50997]
                MethodInvocation [50998,51041]
                    SimpleName: dotrap [50998,51004]
                    METHOD_INVOCATION_ARGUMENTS [51005,51040]
                        SimpleName: excp [51005,51009]
                        SimpleName: MULTIPLY_TRAP [51011,51024]
                        SimpleName: result [51026,51032]
                        SimpleName: result [51034,51040]
to
Block [49727,51394]
at 9
===
move-tree
---
ReturnStatement [51062,51076]
    SimpleName: result [51069,51075]
to
Block [49727,51394]
at 10
===
update-node
---
TextElement: Multiply this by a single digit 0&lt;=x&lt;radix. [49199,49248]
replace Multiply this by a single digit 0&lt;=x&lt;radix. by Multiply this by a single digit x.
===
insert-tree
---
InfixExpression [49359,49378]
    InfixExpression [49359,49365]
        SimpleName: x [49359,49360]
        INFIX_EXPRESSION_OPERATOR: >= [49361,49363]
        NumberLiteral: 0 [49364,49365]
    INFIX_EXPRESSION_OPERATOR: && [49366,49368]
    InfixExpression [49369,49378]
        SimpleName: x [49369,49370]
        INFIX_EXPRESSION_OPERATOR: < [49371,49372]
        SimpleName: RADIX [49373,49378]
to
IfStatement [49355,49489]
at 0
===
move-tree
---
Block [49521,50081]
    IfStatement [49535,49592]
        MethodInvocation [49539,49546]
            SimpleName: isNaN [49539,49544]
        Block [49548,49592]
            ReturnStatement [49566,49578]
                ThisExpression [49573,49577]
    IfStatement [49606,49728]
        InfixExpression [49610,49636]
            InfixExpression [49610,49626]
                SimpleName: nans [49610,49614]
                INFIX_EXPRESSION_OPERATOR: == [49615,49617]
                SimpleName: INFINITE [49618,49626]
            INFIX_EXPRESSION_OPERATOR: && [49627,49629]
            InfixExpression [49630,49636]
                SimpleName: x [49630,49631]
                INFIX_EXPRESSION_OPERATOR: != [49632,49634]
                NumberLiteral: 0 [49635,49636]
        Block [49638,49728]
            ExpressionStatement [49656,49683]
                Assignment [49656,49682]
                    SimpleName: result [49656,49662]
                    ASSIGNMENT_OPERATOR: = [49663,49664]
                    MethodInvocation [49665,49682]
                        SimpleName: newInstance [49665,49676]
                        METHOD_INVOCATION_ARGUMENTS [49677,49681]
                            ThisExpression [49677,49681]
            ReturnStatement [49700,49714]
                SimpleName: result [49707,49713]
    IfStatement [49742,50071]
        InfixExpression [49746,49772]
            InfixExpression [49746,49762]
                SimpleName: nans [49746,49750]
                INFIX_EXPRESSION_OPERATOR: == [49751,49753]
                SimpleName: INFINITE [49754,49762]
            INFIX_EXPRESSION_OPERATOR: && [49763,49765]
            InfixExpression [49766,49772]
                SimpleName: x [49766,49767]
                INFIX_EXPRESSION_OPERATOR: == [49768,49770]
                NumberLiteral: 0 [49771,49772]
        Block [49774,50071]
            ExpressionStatement [49792,49838]
                MethodInvocation [49792,49837]
                    METHOD_INVOCATION_RECEIVER [49792,49797]
                        SimpleName: field [49792,49797]
                    SimpleName: setIEEEFlagsBits [49798,49814]
                    METHOD_INVOCATION_ARGUMENTS [49815,49836]
                        QualifiedName: DfpField.FLAG_INVALID [49815,49836]
            ExpressionStatement [49855,49887]
                Assignment [49855,49886]
                    SimpleName: result [49855,49861]
                    ASSIGNMENT_OPERATOR: = [49862,49863]
                    MethodInvocation [49864,49886]
                        SimpleName: newInstance [49864,49875]
                        METHOD_INVOCATION_ARGUMENTS [49876,49885]
                            MethodInvocation [49876,49885]
                                SimpleName: getZero [49876,49883]
            ExpressionStatement [49904,49923]
                Assignment [49904,49922]
                    QualifiedName: result.nans [49904,49915]
                    ASSIGNMENT_OPERATOR: = [49916,49917]
                    SimpleName: QNAN [49918,49922]
            ExpressionStatement [49940,50026]
                Assignment [49940,50025]
                    SimpleName: result [49940,49946]
                    ASSIGNMENT_OPERATOR: = [49947,49948]
                    MethodInvocation [49949,50025]
                        SimpleName: dotrap [49949,49955]
                        METHOD_INVOCATION_ARGUMENTS [49956,50024]
                            QualifiedName: DfpField.FLAG_INVALID [49956,49977]
                            SimpleName: MULTIPLY_TRAP [49979,49992]
                            MethodInvocation [49994,50016]
                                SimpleName: newInstance [49994,50005]
                                METHOD_INVOCATION_ARGUMENTS [50006,50015]
                                    MethodInvocation [50006,50015]
                                        SimpleName: getZero [50006,50013]
                            SimpleName: result [50018,50024]
            ReturnStatement [50043,50057]
                SimpleName: result [50050,50056]
to
IfStatement [49355,49489]
at 1
===
insert-tree
---
Block [49433,49489]
    ReturnStatement [49447,49479]
        MethodInvocation [49454,49478]
            SimpleName: multiply [49454,49462]
            METHOD_INVOCATION_ARGUMENTS [49463,49477]
                MethodInvocation [49463,49477]
                    SimpleName: newInstance [49463,49474]
                    METHOD_INVOCATION_ARGUMENTS [49475,49476]
                        SimpleName: x [49475,49476]
to
IfStatement [49355,49489]
at 2
===
insert-node
---
Block [49833,50393]
to
IfStatement [49501,50081]
at 1
===
insert-tree
---
ReturnStatement [49394,49417]
    MethodInvocation [49401,49416]
        SimpleName: multiplyFast [49401,49413]
        METHOD_INVOCATION_ARGUMENTS [49414,49415]
            SimpleName: x [49414,49415]
to
Block [49521,50081]
at 0
===
move-tree
---
IfStatement [49535,49592]
    MethodInvocation [49539,49546]
        SimpleName: isNaN [49539,49544]
    Block [49548,49592]
        ReturnStatement [49566,49578]
            ThisExpression [49573,49577]
to
Block [49833,50393]
at 0
===
move-tree
---
IfStatement [49606,49728]
    InfixExpression [49610,49636]
        InfixExpression [49610,49626]
            SimpleName: nans [49610,49614]
            INFIX_EXPRESSION_OPERATOR: == [49615,49617]
            SimpleName: INFINITE [49618,49626]
        INFIX_EXPRESSION_OPERATOR: && [49627,49629]
        InfixExpression [49630,49636]
            SimpleName: x [49630,49631]
            INFIX_EXPRESSION_OPERATOR: != [49632,49634]
            NumberLiteral: 0 [49635,49636]
    Block [49638,49728]
        ExpressionStatement [49656,49683]
            Assignment [49656,49682]
                SimpleName: result [49656,49662]
                ASSIGNMENT_OPERATOR: = [49663,49664]
                MethodInvocation [49665,49682]
                    SimpleName: newInstance [49665,49676]
                    METHOD_INVOCATION_ARGUMENTS [49677,49681]
                        ThisExpression [49677,49681]
        ReturnStatement [49700,49714]
            SimpleName: result [49707,49713]
to
Block [49833,50393]
at 1
===
move-tree
---
IfStatement [49742,50071]
    InfixExpression [49746,49772]
        InfixExpression [49746,49762]
            SimpleName: nans [49746,49750]
            INFIX_EXPRESSION_OPERATOR: == [49751,49753]
            SimpleName: INFINITE [49754,49762]
        INFIX_EXPRESSION_OPERATOR: && [49763,49765]
        InfixExpression [49766,49772]
            SimpleName: x [49766,49767]
            INFIX_EXPRESSION_OPERATOR: == [49768,49770]
            NumberLiteral: 0 [49771,49772]
    Block [49774,50071]
        ExpressionStatement [49792,49838]
            MethodInvocation [49792,49837]
                METHOD_INVOCATION_RECEIVER [49792,49797]
                    SimpleName: field [49792,49797]
                SimpleName: setIEEEFlagsBits [49798,49814]
                METHOD_INVOCATION_ARGUMENTS [49815,49836]
                    QualifiedName: DfpField.FLAG_INVALID [49815,49836]
        ExpressionStatement [49855,49887]
            Assignment [49855,49886]
                SimpleName: result [49855,49861]
                ASSIGNMENT_OPERATOR: = [49862,49863]
                MethodInvocation [49864,49886]
                    SimpleName: newInstance [49864,49875]
                    METHOD_INVOCATION_ARGUMENTS [49876,49885]
                        MethodInvocation [49876,49885]
                            SimpleName: getZero [49876,49883]
        ExpressionStatement [49904,49923]
            Assignment [49904,49922]
                QualifiedName: result.nans [49904,49915]
                ASSIGNMENT_OPERATOR: = [49916,49917]
                SimpleName: QNAN [49918,49922]
        ExpressionStatement [49940,50026]
            Assignment [49940,50025]
                SimpleName: result [49940,49946]
                ASSIGNMENT_OPERATOR: = [49947,49948]
                MethodInvocation [49949,50025]
                    SimpleName: dotrap [49949,49955]
                    METHOD_INVOCATION_ARGUMENTS [49956,50024]
                        QualifiedName: DfpField.FLAG_INVALID [49956,49977]
                        SimpleName: MULTIPLY_TRAP [49979,49992]
                        MethodInvocation [49994,50016]
                            SimpleName: newInstance [49994,50005]
                            METHOD_INVOCATION_ARGUMENTS [50006,50015]
                                MethodInvocation [50006,50015]
                                    SimpleName: getZero [50006,50013]
                        SimpleName: result [50018,50024]
        ReturnStatement [50043,50057]
            SimpleName: result [50050,50056]
to
Block [49833,50393]
at 2
===
delete-node
---
TextElement: There are speed advantages in this special case [49256,49303]
===
