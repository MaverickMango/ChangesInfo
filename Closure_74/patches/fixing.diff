diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
index 4295d9c..9d2f97a 100644
--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
@@ -904,8 +904,9 @@
           && right.getString().equals("undefined"))
           || (Token.VOID == right.getType()
               && NodeUtil.isLiteralValue(right.getFirstChild(), false)));
-
-    switch (left.getType()) {
+    int lhType = getNormalizedNodeType(left);
+    int rhType = getNormalizedNodeType(right);
+    switch (lhType) {
       case Token.VOID:
         if (!NodeUtil.isLiteralValue(left.getFirstChild(), false)) {
           return n;
@@ -923,7 +924,6 @@
           result = compareToUndefined(left, op);
           break;
         }
-        int rhType = right.getType();
         if (rhType != Token.TRUE &&
             rhType != Token.FALSE &&
             rhType != Token.NULL) {
@@ -932,12 +932,12 @@
         switch (op) {
           case Token.SHEQ:
           case Token.EQ:
-            result = left.getType() == right.getType();
+            result = lhType == rhType;
             break;
 
           case Token.SHNE:
           case Token.NE:
-            result = left.getType() != right.getType();
+            result = lhType != rhType;
             break;
 
           case Token.GE:
@@ -1069,6 +1069,23 @@
   }
 
   /**
+   * @return Translate NOT expressions into TRUE or FALSE when possible.
+   */
+  private int getNormalizedNodeType(Node n) {
+    int type = n.getType();
+    if (type == Token.NOT) {
+      TernaryValue value = NodeUtil.getPureBooleanValue(n);
+      switch (value) {
+        case TRUE:
+          return Token.TRUE;
+        case FALSE:
+          return Token.FALSE;
+      }
+    }
+    return type;
+  }
+
+  /**
    * The result of the comparison as a Boolean or null if the
    * result could not be determined.
    */
diff --git a/test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java b/test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java
index 78bd30a..ad698eb 100644
--- a/test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java
+++ b/test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java
@@ -616,7 +616,7 @@
     fold("x = -1 >= 9", "x = false");
 
     fold("x = true == true", "x = true");
-    fold("x = true == true", "x = true");
+    fold("x = false == false", "x = true");
     fold("x = false == null", "x = false");
     fold("x = false == true", "x = false");
     fold("x = true == null", "x = false");
@@ -666,7 +666,7 @@
     fold("x = y === y", "x = y===y");
 
     fold("x = true === true", "x = true");
-    fold("x = true === true", "x = true");
+    fold("x = false === false", "x = true");
     fold("x = false === null", "x = false");
     fold("x = false === true", "x = false");
     fold("x = true === null", "x = false");
@@ -696,6 +696,32 @@
     fold("true === null", "false");
   }
 
+  public void testFoldComparison3() {
+    fold("x = !1 == !0", "x = false");
+
+    fold("x = !0 == !0", "x = true");
+    fold("x = !1 == !1", "x = true");
+    fold("x = !1 == null", "x = false");
+    fold("x = !1 == !0", "x = false");
+    fold("x = !0 == null", "x = false");
+
+    fold("!0 == !0", "true");
+    fold("!1 == null", "false");
+    fold("!1 == !0", "false");
+    fold("!0 == null", "false");
+
+    fold("x = !0 === !0", "x = true");
+    fold("x = !1 === !1", "x = true");
+    fold("x = !1 === null", "x = false");
+    fold("x = !1 === !0", "x = false");
+    fold("x = !0 === null", "x = false");
+
+    fold("!0 === !0", "true");
+    fold("!1 === null", "false");
+    fold("!1 === !0", "false");
+    fold("!0 === null", "false");
+  }
+
   public void testFoldGetElem() {
     fold("x = [,10][0]", "x = void 0");
     fold("x = [10, 20][0]", "x = 10");
@@ -1046,6 +1072,8 @@
           "void 0",
           "true",
           "false",
+          "!0",
+          "!1",
           "0",
           "1",
           "''",
@@ -1055,9 +1083,9 @@
           "NaN",
           "Infinity"
           // TODO(nicksantos): Add more literals
-          //-Infinity
+          // "-Infinity",
           //"({})",
-          //"[]",
+          // "[]"
           //"[0]",
           //"Object",
           //"(function() {})"
