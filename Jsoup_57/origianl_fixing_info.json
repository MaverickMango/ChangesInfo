{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "/home/liumengjiao/Desktop/CI/Benchmark/data/changesInfo/",
  "properties": {
    "trigger.tests": "org.jsoup.nodes.ElementTest::testChainedRemoveAttributes",
    "test.dir": "src/test/java",
    "clz.modified": "org.jsoup.nodes.Attributes",
    "src.dir": "src/main/java"
  },
  "timeoutSecond": 100,
  "proj": "Jsoup",
  "id": "57",
  "workingDir": "../bugs/Jsoup_57_buggy",
  "buggyCommit": "c28e5bf53a9ce9e32ab84ce2e6eba87ec747d1a0",
  "inducingCommit": "6569bb7a3671cb7241c6fcb6e0f1eef7a39f7a1d",
  "originalCommit": "f6a1ef346c74ca3305ef5f198ac953a4fc208813",
  "bug_name": "Jsoup_57",
  "derive": "defects4j",
  "original_fixing_commit": "2c58e975ab00eb369ee3dfbba07a4a78a1ef9e19",
  "buildFiles_changed": true,
  "regression": false,
  "inducing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/jsoup/nodes/Attribute.java",
        "src/main/java/org/jsoup/nodes/Attribute.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.jsoup.nodes.Attribute:setKey:[String key]:void",
            "org.jsoup.nodes.Attribute:Attribute:[String key, String value]:null"
          ],
          "num": 2
        },
        {
          "qualified_names": [
            "org.jsoup.nodes.Attribute:Attribute:[String key, String value]:null",
            "org.jsoup.nodes.Attribute:setKey:[String key]:void"
          ],
          "num": 2
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "27",
            "34",
            "47",
            "52"
          ],
          "num": 4
        },
        {
          "qualified_names": [
            "27",
            "34",
            "47",
            "52"
          ],
          "num": 4
        }
      ],
      "diff": "diff --git a/src/main/java/org/jsoup/nodes/Attribute.java b/src/main/java/org/jsoup/nodes/Attribute.java\nindex 7f6096c..25ca4ce 100644\n--- a/src/main/java/org/jsoup/nodes/Attribute.java\n+++ b/src/main/java/org/jsoup/nodes/Attribute.java\n@@ -24,14 +24,14 @@\n \n     /**\n      * Create a new attribute from unencoded (raw) key and value.\n-     * @param key attribute key\n+     * @param key attribute key; case is preserved.\n      * @param value attribute value\n      * @see #createFromEncoded\n      */\n     public Attribute(String key, String value) {\n         Validate.notEmpty(key);\n         Validate.notNull(value);\n-        this.key \u003d key.trim().toLowerCase();\n+        this.key \u003d key.trim();\n         this.value \u003d value;\n     }\n \n@@ -44,12 +44,12 @@\n     }\n \n     /**\n-     Set the attribute key. Gets normalised as per the constructor method.\n+     Set the attribute key; case is preserved.\n      @param key the new key; must not be null\n      */\n     public void setKey(String key) {\n         Validate.notEmpty(key);\n-        this.key \u003d key.trim().toLowerCase();\n+        this.key \u003d key.trim();\n     }\n \n     /**\n",
      "operations": [
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "METHOD_INVOCATION_RECEIVER [1215,1225]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: toLowerCase [1226,1237]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "MethodInvocation [1215,1239]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "METHOD_INVOCATION_RECEIVER [1632,1642]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: toLowerCase [1643,1654]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "MethodInvocation [1632,1656]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/jsoup/nodes/Attributes.java",
        "src/main/java/org/jsoup/nodes/Attributes.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.jsoup.nodes.Attributes:get:[String key]:String",
            "org.jsoup.nodes.Attributes:hasKey:[String key]:boolean",
            "org.jsoup.nodes.Attributes:equals:[Object o]:boolean",
            "org.jsoup.nodes.Attributes:remove:[String key]:void",
            "org.jsoup.nodes.Attributes:html:[Appendable accum, Document.OutputSettings out]:void"
          ],
          "num": 5
        },
        {
          "qualified_names": [
            "org.jsoup.nodes.Attributes:hasKeyIgnoreCase:[String key]:boolean",
            "org.jsoup.nodes.Attributes:removeIgnoreCase:[String key]:void",
            "org.jsoup.nodes.Attributes:html:[Appendable accum, Document.OutputSettings out]:void",
            "org.jsoup.nodes.Attributes:remove:[String key]:void",
            "org.jsoup.nodes.Attributes:hasKey:[String key]:boolean",
            "org.jsoup.nodes.Attributes:getIgnoreCase:[String key]:String",
            "org.jsoup.nodes.Attributes:equals:[Object o]:boolean",
            "org.jsoup.nodes.Attributes:get:[String key]:String",
            "org.jsoup.nodes.Attributes:put:[String key, String value]:void"
          ],
          "num": 9
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "7",
            "12",
            "15",
            "16",
            "18",
            "23",
            "30",
            "40",
            "53",
            "78",
            "85",
            "93",
            "94",
            "118",
            "162",
            "166",
            "173",
            "188",
            "190"
          ],
          "num": 19
        },
        {
          "qualified_names": [
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "20",
            "23",
            "24",
            "25",
            "27",
            "32",
            "39",
            "49",
            "54",
            "55",
            "56",
            "57",
            "58",
            "59",
            "60",
            "61",
            "62",
            "63",
            "64",
            "65",
            "66",
            "67",
            "68",
            "69",
            "70",
            "79",
            "104",
            "111",
            "112",
            "113",
            "114",
            "115",
            "116",
            "117",
            "118",
            "119",
            "120",
            "121",
            "122",
            "123",
            "124",
            "125",
            "126",
            "127",
            "128",
            "129",
            "130",
            "131",
            "132",
            "133",
            "134",
            "142",
            "143",
            "144",
            "145",
            "146",
            "147",
            "148",
            "149",
            "173",
            "217",
            "221",
            "228",
            "243",
            "245"
          ],
          "num": 74
        }
      ],
      "diff": "diff --git a/src/main/java/org/jsoup/nodes/Attributes.java b/src/main/java/org/jsoup/nodes/Attributes.java\nindex 28b013e..cc21fb6 100644\n--- a/src/main/java/org/jsoup/nodes/Attributes.java\n+++ b/src/main/java/org/jsoup/nodes/Attributes.java\n@@ -4,30 +4,39 @@\n import org.jsoup.helper.Validate;\n \n import java.io.IOException;\n-import java.util.*;\n+import java.util.AbstractMap;\n+import java.util.AbstractSet;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n \n /**\n  * The attributes of an Element.\n  * \u003cp\u003e\n- * Attributes are treated as a map: there can be only one value associated with an attribute key.\n+ * Attributes are treated as a map: there can be only one value associated with an attribute key/name.\n  * \u003c/p\u003e\n  * \u003cp\u003e\n- * Attribute key and value comparisons are done case insensitively, and keys are normalised to\n- * lower-case.\n+ * Attribute name and value comparisons are  \u003cb\u003ecase sensitive\u003c/b\u003e. By default for HTML, attribute names are\n+ * normalized to lower-case on parsing. That means you should use lower-case strings when referring to attributes by\n+ * name.\n  * \u003c/p\u003e\n- * \n+ *\n  * @author Jonathan Hedley, jonathan@hedley.net\n  */\n public class Attributes implements Iterable\u003cAttribute\u003e, Cloneable {\n     protected static final String dataPrefix \u003d \"data-\";\n-    \n+\n     private LinkedHashMap\u003cString, Attribute\u003e attributes \u003d null;\n     // linked hash map to preserve insertion order.\n     // null be default as so many elements have no attributes -- saves a good chunk of memory\n \n     /**\n      Get an attribute value by key.\n-     @param key the attribute key\n+     @param key the (case-sensitive) attribute key\n      @return the attribute value if set; or empty string if not set.\n      @see #hasKey(String)\n      */\n@@ -37,11 +46,28 @@\n         if (attributes \u003d\u003d null)\n             return \"\";\n \n-        Attribute attr \u003d attributes.get(key.toLowerCase());\n+        Attribute attr \u003d attributes.get(key);\n         return attr !\u003d null ? attr.getValue() : \"\";\n     }\n \n     /**\n+     * Get an attribute\u0027s value by case-insensitive key\n+     * @param key the attribute name\n+     * @return the first matching attribute value if set; or empty string if not set.\n+     */\n+    public String getIgnoreCase(String key) {\n+        Validate.notEmpty(key);\n+        if (attributes \u003d\u003d null)\n+            return \"\";\n+\n+        for (String attrKey : attributes.keySet()) {\n+            if (attrKey.equalsIgnoreCase(key))\n+                return attributes.get(attrKey).getValue();\n+        }\n+        return \"\";\n+    }\n+\n+    /**\n      Set a new attribute, or replace an existing one by key.\n      @param key attribute key\n      @param value attribute value\n@@ -50,7 +76,7 @@\n         Attribute attr \u003d new Attribute(key, value);\n         put(attr);\n     }\n-    \n+\n     /**\n     Set a new boolean attribute, remove attribute if value is false.\n     @param key attribute key\n@@ -75,14 +101,37 @@\n     }\n \n     /**\n-     Remove an attribute by key.\n+     Remove an attribute by key. \u003cb\u003eCase sensitive.\u003c/b\u003e\n      @param key attribute key to remove\n      */\n     public void remove(String key) {\n         Validate.notEmpty(key);\n         if (attributes \u003d\u003d null)\n             return;\n-        attributes.remove(key.toLowerCase());\n+        attributes.remove(key);\n+    }\n+\n+    /**\n+     Remove an attribute by key. \u003cb\u003eCase insensitive.\u003c/b\u003e\n+     @param key attribute key to remove\n+     */\n+    public void removeIgnoreCase(String key) {\n+        Validate.notEmpty(key);\n+        if (attributes \u003d\u003d null)\n+            return;\n+        for (String attrKey : attributes.keySet()) {\n+            if (attrKey.equalsIgnoreCase(key))\n+                attributes.remove(attrKey);\n+        }\n+    }\n+\n+    /**\n+     Tests if these attributes contain an attribute with this key.\n+     @param key case-sensitive key to check for\n+     @return true if key exists, false otherwise\n+     */\n+    public boolean hasKey(String key) {\n+        return attributes !\u003d null \u0026\u0026 attributes.containsKey(key);\n     }\n \n     /**\n@@ -90,8 +139,14 @@\n      @param key key to check for\n      @return true if key exists, false otherwise\n      */\n-    public boolean hasKey(String key) {\n-        return attributes !\u003d null \u0026\u0026 attributes.containsKey(key.toLowerCase());\n+    public boolean hasKeyIgnoreCase(String key) {\n+        if (attributes \u003d\u003d null)\n+            return false;\n+        for (String attrKey : attributes.keySet()) {\n+            if (attrKey.equalsIgnoreCase(key))\n+                return true;\n+        }\n+        return false;\n     }\n \n     /**\n@@ -115,7 +170,7 @@\n             attributes \u003d new LinkedHashMap\u003cString, Attribute\u003e(incoming.size());\n         attributes.putAll(incoming.attributes);\n     }\n-    \n+\n     public Iterator\u003cAttribute\u003e iterator() {\n         return asList().iterator();\n     }\n@@ -159,18 +214,18 @@\n         }\n         return accum.toString();\n     }\n-    \n+\n     void html(Appendable accum, Document.OutputSettings out) throws IOException {\n         if (attributes \u003d\u003d null)\n             return;\n-        \n+\n         for (Map.Entry\u003cString, Attribute\u003e entry : attributes.entrySet()) {\n             Attribute attribute \u003d entry.getValue();\n             accum.append(\" \");\n             attribute.html(accum, out);\n         }\n     }\n-    \n+\n     @Override\n     public String toString() {\n         return html();\n@@ -185,9 +240,9 @@\n     public boolean equals(Object o) {\n         if (this \u003d\u003d o) return true;\n         if (!(o instanceof Attributes)) return false;\n-        \n+\n         Attributes that \u003d (Attributes) o;\n-        \n+\n         return !(attributes !\u003d null ? !attributes.equals(that.attributes) : that.attributes !\u003d null);\n     }\n \n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [1603,2121]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [3319,3719]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [4018,4453]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: name. [766,771]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "METHOD_INVOCATION_RECEIVER [1168,1171]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: toLowerCase [1172,1183]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "MethodInvocation [1168,1185]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "METHOD_INVOCATION_RECEIVER [2407,2410]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: toLowerCase [2411,2422]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "MethodInvocation [2407,2424]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "METHOD_INVOCATION_RECEIVER [2699,2702]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: toLowerCase [2703,2714]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "MethodInvocation [2699,2716]",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/jsoup/nodes/Document.java",
        "src/main/java/org/jsoup/nodes/Document.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.jsoup.nodes.Document:createElement:[String tagName]:Element",
            "org.jsoup.nodes.Document:Document:[String baseUri]:null"
          ],
          "num": 2
        },
        {
          "qualified_names": [
            "org.jsoup.nodes.Document:Document:[String baseUri]:null",
            "org.jsoup.nodes.Document:createElement:[String tagName]:Element"
          ],
          "num": 2
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "4",
            "30",
            "106"
          ],
          "num": 3
        },
        {
          "qualified_names": [
            "5",
            "31",
            "107"
          ],
          "num": 3
        }
      ],
      "diff": "diff --git a/src/main/java/org/jsoup/nodes/Document.java b/src/main/java/org/jsoup/nodes/Document.java\nindex 5751622..c558c4c 100644\n--- a/src/main/java/org/jsoup/nodes/Document.java\n+++ b/src/main/java/org/jsoup/nodes/Document.java\n@@ -2,6 +2,7 @@\n \n import org.jsoup.helper.StringUtil;\n import org.jsoup.helper.Validate;\n+import org.jsoup.parser.ParseSettings;\n import org.jsoup.parser.Tag;\n import org.jsoup.select.Elements;\n \n@@ -27,7 +28,7 @@\n      @see #createShell\n      */\n     public Document(String baseUri) {\n-        super(Tag.valueOf(\"#root\"), baseUri);\n+        super(Tag.valueOf(\"#root\", ParseSettings.htmlDefault), baseUri);\n         this.location \u003d baseUri;\n     }\n \n@@ -103,7 +104,7 @@\n      @return new element\n      */\n     public Element createElement(String tagName) {\n-        return new Element(Tag.valueOf(tagName), this.baseUri());\n+        return new Element(Tag.valueOf(tagName, ParseSettings.preserveCase), this.baseUri());\n     }\n \n     /**\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "ImportDeclaration [96,134]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "QualifiedName: ParseSettings.htmlDefault [856,881]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "QualifiedName: ParseSettings.preserveCase [3286,3312]"
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/jsoup/nodes/Element.java",
        "src/main/java/org/jsoup/nodes/Element.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.jsoup.nodes.Element:tagName:[String tagName]:Element",
            "org.jsoup.nodes.Element:Element:[Tag tag, String baseUri]:null",
            "org.jsoup.nodes.Element:id:[]:String",
            "org.jsoup.nodes.Element:getElementsByAttribute:[String key]:Elements",
            "org.jsoup.nodes.Element:getElementsByAttributeStarting:[String keyPrefix]:Elements"
          ],
          "num": 5
        },
        {
          "qualified_names": [
            "org.jsoup.nodes.Element:id:[]:String",
            "org.jsoup.nodes.Element:tagName:[String tagName]:Element",
            "org.jsoup.nodes.Element:getElementsByAttributeStarting:[String keyPrefix]:Elements",
            "org.jsoup.nodes.Element:getElementsByAttribute:[String key]:Elements",
            "org.jsoup.nodes.Element:Element:[Tag tag, String baseUri]:null"
          ],
          "num": 5
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "4",
            "61",
            "90",
            "119",
            "671",
            "684"
          ],
          "num": 6
        },
        {
          "qualified_names": [
            "5",
            "62",
            "91",
            "120",
            "672",
            "685"
          ],
          "num": 6
        }
      ],
      "diff": "diff --git a/src/main/java/org/jsoup/nodes/Element.java b/src/main/java/org/jsoup/nodes/Element.java\nindex c6ea7fa..205e410 100644\n--- a/src/main/java/org/jsoup/nodes/Element.java\n+++ b/src/main/java/org/jsoup/nodes/Element.java\n@@ -2,6 +2,7 @@\n \n import org.jsoup.helper.StringUtil;\n import org.jsoup.helper.Validate;\n+import org.jsoup.parser.ParseSettings;\n import org.jsoup.parser.Parser;\n import org.jsoup.parser.Tag;\n import org.jsoup.select.Collector;\n@@ -58,7 +59,7 @@\n      * @param tag element tag\n      * @param baseUri the base URI of this element. It is acceptable for the base URI to be an empty\n      *            string, but not null.\n-     * @see Tag#valueOf(String)\n+     * @see Tag#valueOf(String, ParseSettings)\n      */\n     public Element(Tag tag, String baseUri) {\n         this(tag, baseUri, new Attributes());\n@@ -87,7 +88,7 @@\n      */\n     public Element tagName(String tagName) {\n         Validate.notEmpty(tagName, \"Tag name must not be empty.\");\n-        tag \u003d Tag.valueOf(tagName);\n+        tag \u003d Tag.valueOf(tagName, ParseSettings.preserveCase); // preserve the requested tag case\n         return this;\n     }\n \n@@ -116,7 +117,7 @@\n      * @return The id attribute, if present, or an empty string if not.\n      */\n     public String id() {\n-        return attributes.get(\"id\");\n+        return attributes.getIgnoreCase(\"id\");\n     }\n \n     /**\n@@ -668,7 +669,7 @@\n      */\n     public Elements getElementsByAttribute(String key) {\n         Validate.notEmpty(key);\n-        key \u003d key.trim().toLowerCase();\n+        key \u003d key.trim();\n \n         return Collector.collect(new Evaluator.Attribute(key), this);\n     }\n@@ -681,7 +682,7 @@\n      */\n     public Elements getElementsByAttributeStarting(String keyPrefix) {\n         Validate.notEmpty(keyPrefix);\n-        keyPrefix \u003d keyPrefix.trim().toLowerCase();\n+        keyPrefix \u003d keyPrefix.trim();\n \n         return Collector.collect(new Evaluator.AttributeStarting(keyPrefix), this);\n     }\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "ImportDeclaration [96,134]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodRefParameter [1877,1890]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "QualifiedName: ParseSettings.preserveCase [2666,2692]"
        },
        {
          "type": "delete-node",
          "from": "METHOD_INVOCATION_RECEIVER [23332,23342]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: toLowerCase [23343,23354]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "MethodInvocation [23332,23356]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "METHOD_INVOCATION_RECEIVER [23903,23919]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: toLowerCase [23920,23931]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "MethodInvocation [23903,23933]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/jsoup/nodes/Node.java",
        "src/main/java/org/jsoup/nodes/Node.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.jsoup.nodes.Node:removeAttr:[String attributeKey]:Node",
            "org.jsoup.nodes.Node:attr:[String attributeKey]:String",
            "org.jsoup.nodes.Node:hasAttr:[String attributeKey]:boolean"
          ],
          "num": 3
        },
        {
          "qualified_names": [
            "org.jsoup.nodes.Node:attr:[String attributeKey]:String",
            "org.jsoup.nodes.Node:removeAttr:[String attributeKey]:Node",
            "org.jsoup.nodes.Node:hasAttr:[String attributeKey]:boolean"
          ],
          "num": 3
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "61",
            "78",
            "79",
            "105",
            "114",
            "117",
            "127"
          ],
          "num": 7
        },
        {
          "qualified_names": [
            "61",
            "78",
            "79",
            "80",
            "106",
            "115",
            "118",
            "128"
          ],
          "num": 8
        }
      ],
      "diff": "diff --git a/src/main/java/org/jsoup/nodes/Node.java b/src/main/java/org/jsoup/nodes/Node.java\nindex fb718f2..124f739 100644\n--- a/src/main/java/org/jsoup/nodes/Node.java\n+++ b/src/main/java/org/jsoup/nodes/Node.java\n@@ -58,7 +58,7 @@\n     public abstract String nodeName();\n \n     /**\n-     * Get an attribute\u0027s value by its key.\n+     * Get an attribute\u0027s value by its key. \u003cb\u003eCase insensitive\u003c/b\u003e\n      * \u003cp\u003e\n      * To get an absolute URL from an attribute that may be a relative URL, prefix the key with \u003ccode\u003e\u003cb\u003eabs\u003c/b\u003e\u003c/code\u003e,\n      * which is a shortcut to the {@link #absUrl} method.\n@@ -75,8 +75,9 @@\n     public String attr(String attributeKey) {\n         Validate.notNull(attributeKey);\n \n-        if (attributes.hasKey(attributeKey))\n-            return attributes.get(attributeKey);\n+        String val \u003d attributes.getIgnoreCase(attributeKey);\n+        if (val.length() \u003e 0)\n+            return val;\n         else if (attributeKey.toLowerCase().startsWith(\"abs:\"))\n             return absUrl(attributeKey.substring(\"abs:\".length()));\n         else return \"\";\n@@ -102,7 +103,7 @@\n     }\n \n     /**\n-     * Test if this element has an attribute.\n+     * Test if this element has an attribute. \u003cb\u003eCase insensitive\u003c/b\u003e\n      * @param attributeKey The attribute key to check.\n      * @return true if the attribute exists, false if not.\n      */\n@@ -111,10 +112,10 @@\n \n         if (attributeKey.startsWith(\"abs:\")) {\n             String key \u003d attributeKey.substring(\"abs:\".length());\n-            if (attributes.hasKey(key) \u0026\u0026 !absUrl(key).equals(\"\"))\n+            if (attributes.hasKeyIgnoreCase(key) \u0026\u0026 !absUrl(key).equals(\"\"))\n                 return true;\n         }\n-        return attributes.hasKey(attributeKey);\n+        return attributes.hasKeyIgnoreCase(attributeKey);\n     }\n \n     /**\n@@ -124,7 +125,7 @@\n      */\n     public Node removeAttr(String attributeKey) {\n         Validate.notNull(attributeKey);\n-        attributes.remove(attributeKey);\n+        attributes.removeIgnoreCase(attributeKey);\n         return this;\n     }\n \n",
      "operations": [
        {
          "type": "insert-node",
          "from": "",
          "to": "VariableDeclarationStatement [2334,2386]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SimpleType [2334,2340]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "VariableDeclarationFragment [2341,2385]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "InfixExpression [2399,2415]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ReturnStatement [2429,2440]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: val [2341,2344]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodInvocation [2314,2345]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "ReturnStatement [2359,2395]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/jsoup/parser/HtmlTreeBuilder.java",
        "src/main/java/org/jsoup/parser/HtmlTreeBuilder.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.jsoup.parser.HtmlTreeBuilder:insertForm:[Token.StartTag startTag, boolean onStack]:FormElement",
            "org.jsoup.parser.HtmlTreeBuilder:insertStartTag:[String startTagName]:Element",
            "org.jsoup.parser.HtmlTreeBuilder:parseFragment:[String inputFragment, Element context, String baseUri, ParseErrorList errors]:List\u003cNode\u003e",
            "org.jsoup.parser.HtmlTreeBuilder:parse:[String input, String baseUri, ParseErrorList errors]:Document",
            "org.jsoup.parser.HtmlTreeBuilder:insert:[Token.StartTag startTag]:Element",
            "org.jsoup.parser.HtmlTreeBuilder:insertEmpty:[Token.StartTag startTag]:Element"
          ],
          "num": 6
        },
        {
          "qualified_names": [
            "org.jsoup.parser.HtmlTreeBuilder:defaultSettings:[]:ParseSettings",
            "org.jsoup.parser.HtmlTreeBuilder:insertForm:[Token.StartTag startTag, boolean onStack]:FormElement",
            "org.jsoup.parser.HtmlTreeBuilder:insert:[Token.StartTag startTag]:Element",
            "org.jsoup.parser.HtmlTreeBuilder:insertStartTag:[String startTagName]:Element",
            "org.jsoup.parser.HtmlTreeBuilder:parse:[String input, String baseUri, ParseErrorList errors, ParseSettings settings]:Document",
            "org.jsoup.parser.HtmlTreeBuilder:insertEmpty:[Token.StartTag startTag]:Element",
            "org.jsoup.parser.HtmlTreeBuilder:parseFragment:[String inputFragment, Element context, String baseUri, ParseErrorList errors, ParseSettings settings]:List\u003cNode\u003e"
          ],
          "num": 7
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "48",
            "49",
            "50",
            "51",
            "52",
            "55",
            "58",
            "82",
            "181",
            "187",
            "198",
            "214"
          ],
          "num": 12
        },
        {
          "qualified_names": [
            "48",
            "49",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57",
            "58",
            "59",
            "62",
            "86",
            "185",
            "191",
            "202",
            "218"
          ],
          "num": 16
        }
      ],
      "diff": "diff --git a/src/main/java/org/jsoup/parser/HtmlTreeBuilder.java b/src/main/java/org/jsoup/parser/HtmlTreeBuilder.java\nindex b3fd8f5..2078a9b 100644\n--- a/src/main/java/org/jsoup/parser/HtmlTreeBuilder.java\n+++ b/src/main/java/org/jsoup/parser/HtmlTreeBuilder.java\n@@ -45,17 +45,21 @@\n \n     HtmlTreeBuilder() {}\n \n-    @Override\n-    Document parse(String input, String baseUri, ParseErrorList errors) {\n-        state \u003d HtmlTreeBuilderState.Initial;\n-        baseUriSetFromDoc \u003d false;\n-        return super.parse(input, baseUri, errors);\n+    ParseSettings defaultSettings() {\n+        return ParseSettings.htmlDefault;\n     }\n \n-    List\u003cNode\u003e parseFragment(String inputFragment, Element context, String baseUri, ParseErrorList errors) {\n+    @Override\n+    Document parse(String input, String baseUri, ParseErrorList errors, ParseSettings settings) {\n+        state \u003d HtmlTreeBuilderState.Initial;\n+        baseUriSetFromDoc \u003d false;\n+        return super.parse(input, baseUri, errors, settings);\n+    }\n+\n+    List\u003cNode\u003e parseFragment(String inputFragment, Element context, String baseUri, ParseErrorList errors, ParseSettings settings) {\n         // context may be null\n         state \u003d HtmlTreeBuilderState.Initial;\n-        initialiseParse(inputFragment, baseUri, errors);\n+        initialiseParse(inputFragment, baseUri, errors, settings);\n         contextElement \u003d context;\n         fragmentParsing \u003d true;\n         Element root \u003d null;\n@@ -79,7 +83,7 @@\n             else\n                 tokeniser.transition(TokeniserState.Data); // default\n \n-            root \u003d new Element(Tag.valueOf(\"html\"), baseUri);\n+            root \u003d new Element(Tag.valueOf(\"html\", settings), baseUri);\n             doc.appendChild(root);\n             stack.add(root);\n             resetInsertionMode();\n@@ -178,13 +182,13 @@\n             return el;\n         }\n         \n-        Element el \u003d new Element(Tag.valueOf(startTag.name()), baseUri, startTag.attributes);\n+        Element el \u003d new Element(Tag.valueOf(startTag.name(), settings), baseUri, settings.normalizeAttributes(startTag.attributes));\n         insert(el);\n         return el;\n     }\n \n     Element insertStartTag(String startTagName) {\n-        Element el \u003d new Element(Tag.valueOf(startTagName), baseUri);\n+        Element el \u003d new Element(Tag.valueOf(startTagName, settings), baseUri);\n         insert(el);\n         return el;\n     }\n@@ -195,7 +199,7 @@\n     }\n \n     Element insertEmpty(Token.StartTag startTag) {\n-        Tag tag \u003d Tag.valueOf(startTag.name());\n+        Tag tag \u003d Tag.valueOf(startTag.name(), settings);\n         Element el \u003d new Element(tag, baseUri, startTag.attributes);\n         insertNode(el);\n         if (startTag.isSelfClosing()) {\n@@ -211,7 +215,7 @@\n     }\n \n     FormElement insertForm(Token.StartTag startTag, boolean onStack) {\n-        Tag tag \u003d Tag.valueOf(startTag.name());\n+        Tag tag \u003d Tag.valueOf(startTag.name(), settings);\n         FormElement el \u003d new FormElement(tag, baseUri, startTag.attributes);\n         setFormElement(el);\n         insertNode(el);\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [2764,2845]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SingleVariableDeclaration [2933,2955]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SingleVariableDeclaration [3216,3238]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [7537,7662]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: settings [3091,3099]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: settings [3375,3383]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: settings [8067,8075]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: settings [8745,8753]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: settings [7818,7826]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: settings [4544,4552]"
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [7372,7457]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java",
        "src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [],
          "num": 0
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "22",
            "44",
            "47",
            "73",
            "75",
            "79",
            "107",
            "142",
            "168",
            "170",
            "173",
            "176",
            "178",
            "203",
            "226",
            "273",
            "558",
            "611",
            "762",
            "816",
            "862",
            "940",
            "942",
            "955",
            "957",
            "963",
            "988",
            "998",
            "1033",
            "1049",
            "1092",
            "1106",
            "1153",
            "1181",
            "1226",
            "1255",
            "1296",
            "1300",
            "1302",
            "1321",
            "1323",
            "1351",
            "1364",
            "1395",
            "1397",
            "1399",
            "1414",
            "1430",
            "1434"
          ],
          "num": 49
        },
        {
          "qualified_names": [
            "22",
            "23",
            "45",
            "48",
            "74",
            "76",
            "80",
            "108",
            "143",
            "169",
            "171",
            "174",
            "177",
            "179",
            "204",
            "227",
            "274",
            "559",
            "612",
            "613",
            "764",
            "818",
            "864",
            "942",
            "944",
            "957",
            "959",
            "965",
            "990",
            "1000",
            "1035",
            "1051",
            "1094",
            "1108",
            "1155",
            "1183",
            "1228",
            "1257",
            "1298",
            "1302",
            "1304",
            "1323",
            "1325",
            "1353",
            "1366",
            "1397",
            "1399",
            "1401",
            "1416",
            "1432",
            "1436"
          ],
          "num": 51
        }
      ],
      "diff": "diff --git a/src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java b/src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java\nindex 1d6d4e3..9a40814 100644\n--- a/src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java\n+++ b/src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java\n@@ -19,7 +19,8 @@\n                 // todo: parse error check on expected doctypes\n                 // todo: quirk state check on doctype ids\n                 Token.Doctype d \u003d t.asDoctype();\n-                DocumentType doctype \u003d new DocumentType(d.getName(), d.getPublicIdentifier(), d.getSystemIdentifier(), tb.getBaseUri());\n+                DocumentType doctype \u003d new DocumentType(\n+                    tb.settings.normalizeTag(d.getName()), d.getPublicIdentifier(), d.getSystemIdentifier(), tb.getBaseUri());\n                 tb.getDocument().appendChild(doctype);\n                 if (d.isForceQuirks())\n                     tb.getDocument().quirksMode(Document.QuirksMode.quirks);\n@@ -41,10 +42,10 @@\n                 tb.insert(t.asComment());\n             } else if (isWhitespace(t)) {\n                 return true; // ignore whitespace\n-            } else if (t.isStartTag() \u0026\u0026 t.asStartTag().name().equals(\"html\")) {\n+            } else if (t.isStartTag() \u0026\u0026 t.asStartTag().normalName().equals(\"html\")) {\n                 tb.insert(t.asStartTag());\n                 tb.transition(BeforeHead);\n-            } else if (t.isEndTag() \u0026\u0026 (StringUtil.in(t.asEndTag().name(), \"head\", \"body\", \"html\", \"br\"))) {\n+            } else if (t.isEndTag() \u0026\u0026 (StringUtil.in(t.asEndTag().normalName(), \"head\", \"body\", \"html\", \"br\"))) {\n                 return anythingElse(t, tb);\n             } else if (t.isEndTag()) {\n                 tb.error(this);\n@@ -70,13 +71,13 @@\n             } else if (t.isDoctype()) {\n                 tb.error(this);\n                 return false;\n-            } else if (t.isStartTag() \u0026\u0026 t.asStartTag().name().equals(\"html\")) {\n+            } else if (t.isStartTag() \u0026\u0026 t.asStartTag().normalName().equals(\"html\")) {\n                 return InBody.process(t, tb); // does not transition\n-            } else if (t.isStartTag() \u0026\u0026 t.asStartTag().name().equals(\"head\")) {\n+            } else if (t.isStartTag() \u0026\u0026 t.asStartTag().normalName().equals(\"head\")) {\n                 Element head \u003d tb.insert(t.asStartTag());\n                 tb.setHeadElement(head);\n                 tb.transition(InHead);\n-            } else if (t.isEndTag() \u0026\u0026 (StringUtil.in(t.asEndTag().name(), \"head\", \"body\", \"html\", \"br\"))) {\n+            } else if (t.isEndTag() \u0026\u0026 (StringUtil.in(t.asEndTag().normalName(), \"head\", \"body\", \"html\", \"br\"))) {\n                 tb.processStartTag(\"head\");\n                 return tb.process(t);\n             } else if (t.isEndTag()) {\n@@ -104,7 +105,7 @@\n                     return false;\n                 case StartTag:\n                     Token.StartTag start \u003d t.asStartTag();\n-                    String name \u003d start.name();\n+                    String name \u003d start.normalName();\n                     if (name.equals(\"html\")) {\n                         return InBody.process(t, tb);\n                     } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\")) {\n@@ -139,7 +140,7 @@\n                     break;\n                 case EndTag:\n                     Token.EndTag end \u003d t.asEndTag();\n-                    name \u003d end.name();\n+                    name \u003d end.normalName();\n                     if (name.equals(\"head\")) {\n                         tb.pop();\n                         tb.transition(AfterHead);\n@@ -165,17 +166,17 @@\n         boolean process(Token t, HtmlTreeBuilder tb) {\n             if (t.isDoctype()) {\n                 tb.error(this);\n-            } else if (t.isStartTag() \u0026\u0026 t.asStartTag().name().equals(\"html\")) {\n+            } else if (t.isStartTag() \u0026\u0026 t.asStartTag().normalName().equals(\"html\")) {\n                 return tb.process(t, InBody);\n-            } else if (t.isEndTag() \u0026\u0026 t.asEndTag().name().equals(\"noscript\")) {\n+            } else if (t.isEndTag() \u0026\u0026 t.asEndTag().normalName().equals(\"noscript\")) {\n                 tb.pop();\n                 tb.transition(InHead);\n-            } else if (isWhitespace(t) || t.isComment() || (t.isStartTag() \u0026\u0026 StringUtil.in(t.asStartTag().name(),\n+            } else if (isWhitespace(t) || t.isComment() || (t.isStartTag() \u0026\u0026 StringUtil.in(t.asStartTag().normalName(),\n                     \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"style\"))) {\n                 return tb.process(t, InHead);\n-            } else if (t.isEndTag() \u0026\u0026 t.asEndTag().name().equals(\"br\")) {\n+            } else if (t.isEndTag() \u0026\u0026 t.asEndTag().normalName().equals(\"br\")) {\n                 return anythingElse(t, tb);\n-            } else if ((t.isStartTag() \u0026\u0026 StringUtil.in(t.asStartTag().name(), \"head\", \"noscript\")) || t.isEndTag()) {\n+            } else if ((t.isStartTag() \u0026\u0026 StringUtil.in(t.asStartTag().normalName(), \"head\", \"noscript\")) || t.isEndTag()) {\n                 tb.error(this);\n                 return false;\n             } else {\n@@ -200,7 +201,7 @@\n                 tb.error(this);\n             } else if (t.isStartTag()) {\n                 Token.StartTag startTag \u003d t.asStartTag();\n-                String name \u003d startTag.name();\n+                String name \u003d startTag.normalName();\n                 if (name.equals(\"html\")) {\n                     return tb.process(t, InBody);\n                 } else if (name.equals(\"body\")) {\n@@ -223,7 +224,7 @@\n                     anythingElse(t, tb);\n                 }\n             } else if (t.isEndTag()) {\n-                if (StringUtil.in(t.asEndTag().name(), \"body\", \"html\")) {\n+                if (StringUtil.in(t.asEndTag().normalName(), \"body\", \"html\")) {\n                     anythingElse(t, tb);\n                 } else {\n                     tb.error(this);\n@@ -270,7 +271,7 @@\n                 }\n                 case StartTag:\n                     Token.StartTag startTag \u003d t.asStartTag();\n-                    String name \u003d startTag.name();\n+                    String name \u003d startTag.normalName();\n                     if (name.equals(\"a\")) {\n                         if (tb.getActiveFormattingElement(\"a\") !\u003d null) {\n                             tb.error(this);\n@@ -555,7 +556,7 @@\n \n                 case EndTag:\n                     Token.EndTag endTag \u003d t.asEndTag();\n-                    name \u003d endTag.name();\n+                    name \u003d endTag.normalName();\n                     if (StringUtil.inSorted(name, Constants.InBodyEndAdoptionFormatters)) {\n                         // Adoption Agency Algorithm.\n                         for (int i \u003d 0; i \u003c 8; i++) {\n@@ -608,7 +609,8 @@\n                                 } else if (node \u003d\u003d formatEl)\n                                     break;\n \n-                                Element replacement \u003d new Element(Tag.valueOf(node.nodeName()), tb.getBaseUri());\n+                                Element replacement \u003d new Element(Tag.valueOf(node.nodeName(), ParseSettings.preserveCase), tb.getBaseUri());\n+                                // case will follow the original node (so honours ParseSettings)\n                                 tb.replaceActiveFormattingElement(node, replacement);\n                                 tb.replaceOnStack(node, replacement);\n                                 node \u003d replacement;\n@@ -759,7 +761,7 @@\n         }\n \n         boolean anyOtherEndTag(Token t, HtmlTreeBuilder tb) {\n-            String name \u003d t.asEndTag().name();\n+            String name \u003d t.asEndTag().normalName();\n             ArrayList\u003cElement\u003e stack \u003d tb.getStack();\n             for (int pos \u003d stack.size() -1; pos \u003e\u003d 0; pos--) {\n                 Element node \u003d stack.get(pos);\n@@ -813,7 +815,7 @@\n                 return false;\n             } else if (t.isStartTag()) {\n                 Token.StartTag startTag \u003d t.asStartTag();\n-                String name \u003d startTag.name();\n+                String name \u003d startTag.normalName();\n                 if (name.equals(\"caption\")) {\n                     tb.clearStackToTableContext();\n                     tb.insertMarkerToFormattingElements();\n@@ -859,7 +861,7 @@\n                 return true; // todo: check if should return processed http://www.whatwg.org/specs/web-apps/current-work/multipage/tree-construction.html#parsing-main-intable\n             } else if (t.isEndTag()) {\n                 Token.EndTag endTag \u003d t.asEndTag();\n-                String name \u003d endTag.name();\n+                String name \u003d endTag.normalName();\n \n                 if (name.equals(\"table\")) {\n                     if (!tb.inTableScope(name)) {\n@@ -937,9 +939,9 @@\n     },\n     InCaption {\n         boolean process(Token t, HtmlTreeBuilder tb) {\n-            if (t.isEndTag() \u0026\u0026 t.asEndTag().name().equals(\"caption\")) {\n+            if (t.isEndTag() \u0026\u0026 t.asEndTag().normalName().equals(\"caption\")) {\n                 Token.EndTag endTag \u003d t.asEndTag();\n-                String name \u003d endTag.name();\n+                String name \u003d endTag.normalName();\n                 if (!tb.inTableScope(name)) {\n                     tb.error(this);\n                     return false;\n@@ -952,15 +954,15 @@\n                     tb.transition(InTable);\n                 }\n             } else if ((\n-                    t.isStartTag() \u0026\u0026 StringUtil.in(t.asStartTag().name(),\n+                    t.isStartTag() \u0026\u0026 StringUtil.in(t.asStartTag().normalName(),\n                             \"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\") ||\n-                            t.isEndTag() \u0026\u0026 t.asEndTag().name().equals(\"table\"))\n+                            t.isEndTag() \u0026\u0026 t.asEndTag().normalName().equals(\"table\"))\n                     ) {\n                 tb.error(this);\n                 boolean processed \u003d tb.processEndTag(\"caption\");\n                 if (processed)\n                     return tb.process(t);\n-            } else if (t.isEndTag() \u0026\u0026 StringUtil.in(t.asEndTag().name(),\n+            } else if (t.isEndTag() \u0026\u0026 StringUtil.in(t.asEndTag().normalName(),\n                     \"body\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\")) {\n                 tb.error(this);\n                 return false;\n@@ -985,7 +987,7 @@\n                     break;\n                 case StartTag:\n                     Token.StartTag startTag \u003d t.asStartTag();\n-                    String name \u003d startTag.name();\n+                    String name \u003d startTag.normalName();\n                     if (name.equals(\"html\"))\n                         return tb.process(t, InBody);\n                     else if (name.equals(\"col\"))\n@@ -995,7 +997,7 @@\n                     break;\n                 case EndTag:\n                     Token.EndTag endTag \u003d t.asEndTag();\n-                    name \u003d endTag.name();\n+                    name \u003d endTag.normalName();\n                     if (name.equals(\"colgroup\")) {\n                         if (tb.currentElement().nodeName().equals(\"html\")) { // frag case\n                             tb.error(this);\n@@ -1030,7 +1032,7 @@\n             switch (t.type) {\n                 case StartTag:\n                     Token.StartTag startTag \u003d t.asStartTag();\n-                    String name \u003d startTag.name();\n+                    String name \u003d startTag.normalName();\n                     if (name.equals(\"tr\")) {\n                         tb.clearStackToTableBodyContext();\n                         tb.insert(startTag);\n@@ -1046,7 +1048,7 @@\n                     break;\n                 case EndTag:\n                     Token.EndTag endTag \u003d t.asEndTag();\n-                    name \u003d endTag.name();\n+                    name \u003d endTag.normalName();\n                     if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n                         if (!tb.inTableScope(name)) {\n                             tb.error(this);\n@@ -1089,7 +1091,7 @@\n         boolean process(Token t, HtmlTreeBuilder tb) {\n             if (t.isStartTag()) {\n                 Token.StartTag startTag \u003d t.asStartTag();\n-                String name \u003d startTag.name();\n+                String name \u003d startTag.normalName();\n \n                 if (StringUtil.in(name, \"th\", \"td\")) {\n                     tb.clearStackToTableRowContext();\n@@ -1103,7 +1105,7 @@\n                 }\n             } else if (t.isEndTag()) {\n                 Token.EndTag endTag \u003d t.asEndTag();\n-                String name \u003d endTag.name();\n+                String name \u003d endTag.normalName();\n \n                 if (name.equals(\"tr\")) {\n                     if (!tb.inTableScope(name)) {\n@@ -1150,7 +1152,7 @@\n         boolean process(Token t, HtmlTreeBuilder tb) {\n             if (t.isEndTag()) {\n                 Token.EndTag endTag \u003d t.asEndTag();\n-                String name \u003d endTag.name();\n+                String name \u003d endTag.normalName();\n \n                 if (StringUtil.in(name, \"td\", \"th\")) {\n                     if (!tb.inTableScope(name)) {\n@@ -1178,7 +1180,7 @@\n                     return anythingElse(t, tb);\n                 }\n             } else if (t.isStartTag() \u0026\u0026\n-                    StringUtil.in(t.asStartTag().name(),\n+                    StringUtil.in(t.asStartTag().normalName(),\n                             \"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\")) {\n                 if (!(tb.inTableScope(\"td\") || tb.inTableScope(\"th\"))) {\n                     tb.error(this);\n@@ -1223,7 +1225,7 @@\n                     return false;\n                 case StartTag:\n                     Token.StartTag start \u003d t.asStartTag();\n-                    String name \u003d start.name();\n+                    String name \u003d start.normalName();\n                     if (name.equals(\"html\"))\n                         return tb.process(start, InBody);\n                     else if (name.equals(\"option\")) {\n@@ -1252,7 +1254,7 @@\n                     break;\n                 case EndTag:\n                     Token.EndTag end \u003d t.asEndTag();\n-                    name \u003d end.name();\n+                    name \u003d end.normalName();\n                     if (name.equals(\"optgroup\")) {\n                         if (tb.currentElement().nodeName().equals(\"option\") \u0026\u0026 tb.aboveOnStack(tb.currentElement()) !\u003d null \u0026\u0026 tb.aboveOnStack(tb.currentElement()).nodeName().equals(\"optgroup\"))\n                             tb.processEndTag(\"option\");\n@@ -1293,13 +1295,13 @@\n     },\n     InSelectInTable {\n         boolean process(Token t, HtmlTreeBuilder tb) {\n-            if (t.isStartTag() \u0026\u0026 StringUtil.in(t.asStartTag().name(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\")) {\n+            if (t.isStartTag() \u0026\u0026 StringUtil.in(t.asStartTag().normalName(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\")) {\n                 tb.error(this);\n                 tb.processEndTag(\"select\");\n                 return tb.process(t);\n-            } else if (t.isEndTag() \u0026\u0026 StringUtil.in(t.asEndTag().name(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\")) {\n+            } else if (t.isEndTag() \u0026\u0026 StringUtil.in(t.asEndTag().normalName(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\")) {\n                 tb.error(this);\n-                if (tb.inTableScope(t.asEndTag().name())) {\n+                if (tb.inTableScope(t.asEndTag().normalName())) {\n                     tb.processEndTag(\"select\");\n                     return (tb.process(t));\n                 } else\n@@ -1318,9 +1320,9 @@\n             } else if (t.isDoctype()) {\n                 tb.error(this);\n                 return false;\n-            } else if (t.isStartTag() \u0026\u0026 t.asStartTag().name().equals(\"html\")) {\n+            } else if (t.isStartTag() \u0026\u0026 t.asStartTag().normalName().equals(\"html\")) {\n                 return tb.process(t, InBody);\n-            } else if (t.isEndTag() \u0026\u0026 t.asEndTag().name().equals(\"html\")) {\n+            } else if (t.isEndTag() \u0026\u0026 t.asEndTag().normalName().equals(\"html\")) {\n                 if (tb.isFragmentParsing()) {\n                     tb.error(this);\n                     return false;\n@@ -1348,7 +1350,7 @@\n                 return false;\n             } else if (t.isStartTag()) {\n                 Token.StartTag start \u003d t.asStartTag();\n-                String name \u003d start.name();\n+                String name \u003d start.normalName();\n                 if (name.equals(\"html\")) {\n                     return tb.process(start, InBody);\n                 } else if (name.equals(\"frameset\")) {\n@@ -1361,7 +1363,7 @@\n                     tb.error(this);\n                     return false;\n                 }\n-            } else if (t.isEndTag() \u0026\u0026 t.asEndTag().name().equals(\"frameset\")) {\n+            } else if (t.isEndTag() \u0026\u0026 t.asEndTag().normalName().equals(\"frameset\")) {\n                 if (tb.currentElement().nodeName().equals(\"html\")) { // frag\n                     tb.error(this);\n                     return false;\n@@ -1392,11 +1394,11 @@\n             } else if (t.isDoctype()) {\n                 tb.error(this);\n                 return false;\n-            } else if (t.isStartTag() \u0026\u0026 t.asStartTag().name().equals(\"html\")) {\n+            } else if (t.isStartTag() \u0026\u0026 t.asStartTag().normalName().equals(\"html\")) {\n                 return tb.process(t, InBody);\n-            } else if (t.isEndTag() \u0026\u0026 t.asEndTag().name().equals(\"html\")) {\n+            } else if (t.isEndTag() \u0026\u0026 t.asEndTag().normalName().equals(\"html\")) {\n                 tb.transition(AfterAfterFrameset);\n-            } else if (t.isStartTag() \u0026\u0026 t.asStartTag().name().equals(\"noframes\")) {\n+            } else if (t.isStartTag() \u0026\u0026 t.asStartTag().normalName().equals(\"noframes\")) {\n                 return tb.process(t, InHead);\n             } else if (t.isEOF()) {\n                 // cool your heels, we\u0027re complete\n@@ -1411,7 +1413,7 @@\n         boolean process(Token t, HtmlTreeBuilder tb) {\n             if (t.isComment()) {\n                 tb.insert(t.asComment());\n-            } else if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() \u0026\u0026 t.asStartTag().name().equals(\"html\"))) {\n+            } else if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() \u0026\u0026 t.asStartTag().normalName().equals(\"html\"))) {\n                 return tb.process(t, InBody);\n             } else if (t.isEOF()) {\n                 // nice work chuck\n@@ -1427,11 +1429,11 @@\n         boolean process(Token t, HtmlTreeBuilder tb) {\n             if (t.isComment()) {\n                 tb.insert(t.asComment());\n-            } else if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() \u0026\u0026 t.asStartTag().name().equals(\"html\"))) {\n+            } else if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() \u0026\u0026 t.asStartTag().normalName().equals(\"html\"))) {\n                 return tb.process(t, InBody);\n             } else if (t.isEOF()) {\n                 // nice work chuck\n-            } else if (t.isStartTag() \u0026\u0026 t.asStartTag().name().equals(\"noframes\")) {\n+            } else if (t.isStartTag() \u0026\u0026 t.asStartTag().normalName().equals(\"noframes\")) {\n                 return tb.process(t, InHead);\n             } else {\n                 tb.error(this);\n",
      "operations": [
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: normalName [38533,38543]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [738,905]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: normalName [4144,4154]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: normalName [11245,11255]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: normalName [48364,48374]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: normalName [50157,50167]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: normalName [57987,57997]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: normalName [46450,46460]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: normalName [52712,52722]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: normalName [55076,55086]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: normalName [53362,53372]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: normalName [8474,8484]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: normalName [40605,40615]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: normalName [63454,63464]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: normalName [42929,42939]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "QualifiedName: ParseSettings.preserveCase [30218,30244]"
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [738,858]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: name [4054,4058]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: name [8339,8343]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: name [11098,11102]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: name [38245,38249]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: name [40315,40319]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: name [42635,42639]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: name [46144,46148]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: name [48032,48036]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: name [49813,49817]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: name [52356,52360]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: name [53002,53006]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: name [54710,54714]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: name [57610,57614]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: name [63035,63039]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/jsoup/parser/Parser.java",
        "src/main/java/org/jsoup/parser/Parser.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.jsoup.parser.Parser:parse:[String html, String baseUri]:Document",
            "org.jsoup.parser.Parser:parseXmlFragment:[String fragmentXml, String baseUri]:List\u003cNode\u003e",
            "org.jsoup.parser.Parser:parseFragment:[String fragmentHtml, Element context, String baseUri]:List\u003cNode\u003e",
            "org.jsoup.parser.Parser:parseInput:[String html, String baseUri]:Document"
          ],
          "num": 4
        },
        {
          "qualified_names": [
            "org.jsoup.parser.Parser:parseXmlFragment:[String fragmentXml, String baseUri]:List\u003cNode\u003e",
            "org.jsoup.parser.Parser:parse:[String html, String baseUri]:Document",
            "org.jsoup.parser.Parser:settings:[ParseSettings settings]:Parser",
            "org.jsoup.parser.Parser:parseFragment:[String fragmentHtml, Element context, String baseUri]:List\u003cNode\u003e",
            "org.jsoup.parser.Parser:parseInput:[String html, String baseUri]:Document",
            "org.jsoup.parser.Parser:settings:[]:ParseSettings",
            "org.jsoup.parser.Parser:Parser:[TreeBuilder treeBuilder]:null"
          ],
          "num": 7
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "18",
            "30",
            "77",
            "89",
            "104",
            "116"
          ],
          "num": 6
        },
        {
          "qualified_names": [
            "19",
            "27",
            "32",
            "80",
            "81",
            "82",
            "83",
            "84",
            "85",
            "86",
            "87",
            "88",
            "100",
            "115",
            "127"
          ],
          "num": 15
        }
      ],
      "diff": "diff --git a/src/main/java/org/jsoup/parser/Parser.java b/src/main/java/org/jsoup/parser/Parser.java\nindex 90e5c74..868ef41 100644\n--- a/src/main/java/org/jsoup/parser/Parser.java\n+++ b/src/main/java/org/jsoup/parser/Parser.java\n@@ -16,6 +16,7 @@\n     private TreeBuilder treeBuilder;\n     private int maxErrors \u003d DEFAULT_MAX_ERRORS;\n     private ParseErrorList errors;\n+    private ParseSettings settings;\n \n     /**\n      * Create a new Parser, using the specified TreeBuilder\n@@ -23,11 +24,12 @@\n      */\n     public Parser(TreeBuilder treeBuilder) {\n         this.treeBuilder \u003d treeBuilder;\n+        settings \u003d treeBuilder.defaultSettings();\n     }\n     \n     public Document parseInput(String html, String baseUri) {\n         errors \u003d isTrackErrors() ? ParseErrorList.tracking(maxErrors) : ParseErrorList.noTracking();\n-        return treeBuilder.parse(html, baseUri, errors);\n+        return treeBuilder.parse(html, baseUri, errors, settings);\n     }\n \n     // gets \u0026 sets\n@@ -75,6 +77,15 @@\n         return errors;\n     }\n \n+    public Parser settings(ParseSettings settings) {\n+        this.settings \u003d settings;\n+        return this;\n+    }\n+\n+    public ParseSettings settings() {\n+        return settings;\n+    }\n+\n     // static parse functions below\n     /**\n      * Parse HTML into a Document.\n@@ -86,7 +97,7 @@\n      */\n     public static Document parse(String html, String baseUri) {\n         TreeBuilder treeBuilder \u003d new HtmlTreeBuilder();\n-        return treeBuilder.parse(html, baseUri, ParseErrorList.noTracking());\n+        return treeBuilder.parse(html, baseUri, ParseErrorList.noTracking(), treeBuilder.defaultSettings());\n     }\n \n     /**\n@@ -101,7 +112,7 @@\n      */\n     public static List\u003cNode\u003e parseFragment(String fragmentHtml, Element context, String baseUri) {\n         HtmlTreeBuilder treeBuilder \u003d new HtmlTreeBuilder();\n-        return treeBuilder.parseFragment(fragmentHtml, context, baseUri, ParseErrorList.noTracking());\n+        return treeBuilder.parseFragment(fragmentHtml, context, baseUri, ParseErrorList.noTracking(), treeBuilder.defaultSettings());\n     }\n \n     /**\n@@ -113,7 +124,7 @@\n      */\n     public static List\u003cNode\u003e parseXmlFragment(String fragmentXml, String baseUri) {\n         XmlTreeBuilder treeBuilder \u003d new XmlTreeBuilder();\n-        return treeBuilder.parseFragment(fragmentXml, baseUri, ParseErrorList.noTracking());\n+        return treeBuilder.parseFragment(fragmentXml, baseUri, ParseErrorList.noTracking(), treeBuilder.defaultSettings());\n     }\n \n     /**\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldDeclaration [552,583]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [2327,2436]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [2442,2506]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [830,871]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: settings [1102,1110]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodInvocation [2975,3004]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodInvocation [3879,3908]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodInvocation [4444,4473]"
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/jsoup/parser/Tag.java",
        "src/main/java/org/jsoup/parser/Tag.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.jsoup.parser.Tag:isBlock:[]:boolean",
            "org.jsoup.parser.Tag:valueOf:[String tagName]:Tag",
            "org.jsoup.parser.Tag:Tag:[String tagName]:null"
          ],
          "num": 3
        },
        {
          "qualified_names": [
            "org.jsoup.parser.Tag:valueOf:[String tagName]:Tag",
            "org.jsoup.parser.Tag:valueOf:[String tagName, ParseSettings settings]:Tag",
            "org.jsoup.parser.Tag:Tag:[String tagName]:null",
            "org.jsoup.parser.Tag:isBlock:[]:boolean"
          ],
          "num": 4
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "28",
            "49",
            "54",
            "68"
          ],
          "num": 4
        },
        {
          "qualified_names": [
            "28",
            "47",
            "50",
            "55",
            "70",
            "71",
            "72",
            "73",
            "74",
            "75",
            "76",
            "77",
            "78",
            "79",
            "80",
            "81",
            "82"
          ],
          "num": 17
        }
      ],
      "diff": "diff --git a/src/main/java/org/jsoup/parser/Tag.java b/src/main/java/org/jsoup/parser/Tag.java\nindex 30a0440..646ba9b 100644\n--- a/src/main/java/org/jsoup/parser/Tag.java\n+++ b/src/main/java/org/jsoup/parser/Tag.java\n@@ -25,7 +25,7 @@\n     private boolean formSubmit \u003d false; // a control that can be submitted in a form: input etc\n \n     private Tag(String tagName) {\n-        this.tagName \u003d tagName.toLowerCase();\n+        this.tagName \u003d tagName;\n     }\n \n     /**\n@@ -44,14 +44,15 @@\n      * \u003c/p\u003e\n      * \n      * @param tagName Name of tag, e.g. \"p\". Case insensitive.\n+     * @param settings used to control tag name sensitivity\n      * @return The tag, either defined or new generic.\n      */\n-    public static Tag valueOf(String tagName) {\n+    public static Tag valueOf(String tagName, ParseSettings settings) {\n         Validate.notNull(tagName);\n         Tag tag \u003d tags.get(tagName);\n \n         if (tag \u003d\u003d null) {\n-            tagName \u003d tagName.trim().toLowerCase();\n+            tagName \u003d settings.normalizeTag(tagName);\n             Validate.notEmpty(tagName);\n             tag \u003d tags.get(tagName);\n \n@@ -66,6 +67,19 @@\n     }\n \n     /**\n+     * Get a Tag by name. If not previously defined (unknown), returns a new generic tag, that can do anything.\n+     * \u003cp\u003e\n+     * Pre-defined tags (P, DIV etc) will be \u003d\u003d, but unknown tags are not registered and will only .equals().\n+     * \u003c/p\u003e\n+     *\n+     * @param tagName Name of tag, e.g. \"p\". \u003cb\u003eCase sensitive\u003c/b\u003e.\n+     * @return The tag, either defined or new generic.\n+     */\n+    public static Tag valueOf(String tagName) {\n+        return valueOf(tagName, ParseSettings.preserveCase);\n+    }\n+\n+    /**\n      * Gets if this is a block tag.\n      *\n      * @return if block tag\n",
      "operations": [
        {
          "type": "insert-node",
          "from": "",
          "to": "MethodDeclaration [1327,2372]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [1327,1769]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: public [1774,1780]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: static [1781,1787]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SimpleType [1788,1791]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: valueOf [1792,1799]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SingleVariableDeclaration [1800,1814]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SingleVariableDeclaration [1816,1838]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Block [1840,2372]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [1150,1173]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ReturnStatement [2821,2873]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "METHOD_INVOCATION_ARGUMENTS [1986,1993]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: settings [1964,1972]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [1150,1187]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "METHOD_INVOCATION_RECEIVER [1894,1901]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: trim [1902,1906]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "MethodInvocation [1894,1908]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/jsoup/parser/Token.java",
        "src/main/java/org/jsoup/parser/Token.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.jsoup.parser.Token\\$Tag:reset:[]:Tag",
            "org.jsoup.parser.Token\\$Tag:name:[]:String",
            "org.jsoup.parser.Token\\$Tag:appendTagName:[String append]:void",
            "org.jsoup.parser.Token\\$StartTag:nameAttr:[String name, Attributes attributes]:StartTag"
          ],
          "num": 4
        },
        {
          "qualified_names": [
            "org.jsoup.parser.Token\\$Tag:appendTagName:[String append]:void",
            "org.jsoup.parser.Token\\$Tag:reset:[]:Tag",
            "org.jsoup.parser.Token\\$Tag:normalName:[]:String",
            "org.jsoup.parser.Token\\$Tag:name:[String name]:Tag",
            "org.jsoup.parser.Token\\$Tag:name:[]:String",
            "org.jsoup.parser.Token\\$StartTag:nameAttr:[String name, Attributes attributes]:StartTag"
          ],
          "num": 6
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "70",
            "81",
            "122",
            "143",
            "208"
          ],
          "num": 5
        },
        {
          "qualified_names": [
            "71",
            "83",
            "124",
            "129",
            "130",
            "131",
            "132",
            "135",
            "151",
            "217"
          ],
          "num": 10
        }
      ],
      "diff": "diff --git a/src/main/java/org/jsoup/parser/Token.java b/src/main/java/org/jsoup/parser/Token.java\nindex daff2a0..3ea0d2d 100644\n--- a/src/main/java/org/jsoup/parser/Token.java\n+++ b/src/main/java/org/jsoup/parser/Token.java\n@@ -68,6 +68,7 @@\n \n     static abstract class Tag extends Token {\n         protected String tagName;\n+        protected String normalName; // lc version of tag name, for case insensitive tree build\n         private String pendingAttributeName; // attribute names are generally caught in one hop, not accumulated\n         private StringBuilder pendingAttributeValue \u003d new StringBuilder(); // but values are accumulated, from e.g. \u0026 in hrefs\n         private String pendingAttributeValueS; // try to get attr vals in one shot, vs Builder\n@@ -79,6 +80,7 @@\n         @Override\n         Tag reset() {\n             tagName \u003d null;\n+            normalName \u003d null;\n             pendingAttributeName \u003d null;\n             reset(pendingAttributeValue);\n             pendingAttributeValueS \u003d null;\n@@ -119,13 +121,18 @@\n             }\n         }\n \n-        final String name() {\n+        final String name() { // preserves case, for input into Tag.valueOf (which may drop case)\n             Validate.isFalse(tagName \u003d\u003d null || tagName.length() \u003d\u003d 0);\n             return tagName;\n         }\n \n+        final String normalName() { // loses case, used in tree building for working out where in tree it should go\n+            return normalName;\n+        }\n+\n         final Tag name(String name) {\n             tagName \u003d name;\n+            normalName \u003d name.toLowerCase();\n             return this;\n         }\n \n@@ -141,6 +148,7 @@\n         // these appenders are rarely hit in not null state-- caused by null chars.\n         final void appendTagName(String append) {\n             tagName \u003d tagName \u003d\u003d null ? append : tagName.concat(append);\n+            normalName \u003d tagName.toLowerCase();\n         }\n \n         final void appendTagName(char append) {\n@@ -206,6 +214,7 @@\n         StartTag nameAttr(String name, Attributes attributes) {\n             this.tagName \u003d name;\n             this.attributes \u003d attributes;\n+            normalName \u003d tagName.toLowerCase();\n             return this;\n         }\n \n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldDeclaration [1715,1743]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [4344,4492]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [2596,2614]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [4572,4604]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [5077,5112]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [7170,7205]"
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/jsoup/parser/Tokeniser.java",
        "src/main/java/org/jsoup/parser/Tokeniser.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.jsoup.parser.Tokeniser:isAppropriateEndTagToken:[]:boolean"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "org.jsoup.parser.Tokeniser:isAppropriateEndTagToken:[]:boolean"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "19",
            "20",
            "221"
          ],
          "num": 3
        },
        {
          "qualified_names": [
            "19",
            "20",
            "221"
          ],
          "num": 3
        }
      ],
      "diff": "diff --git a/src/main/java/org/jsoup/parser/Tokeniser.java b/src/main/java/org/jsoup/parser/Tokeniser.java\nindex 1797dae..b62e293 100644\n--- a/src/main/java/org/jsoup/parser/Tokeniser.java\n+++ b/src/main/java/org/jsoup/parser/Tokeniser.java\n@@ -16,8 +16,8 @@\n         Arrays.sort(notCharRefCharsSorted);\n     }\n \n-    private CharacterReader reader; // html input\n-    private ParseErrorList errors; // errors found while tokenising\n+    private final CharacterReader reader; // html input\n+    private final ParseErrorList errors; // errors found while tokenising\n \n     private TokeniserState state \u003d TokeniserState.Data; // current tokenisation state\n     private Token emitPending; // the token we are about to emit on next read\n@@ -218,7 +218,7 @@\n     }\n \n     boolean isAppropriateEndTagToken() {\n-        return lastStartTag !\u003d null \u0026\u0026 tagPending.tagName.equals(lastStartTag);\n+        return lastStartTag !\u003d null \u0026\u0026 tagPending.name().equalsIgnoreCase(lastStartTag);\n     }\n \n     String appropriateEndTagName() {\n",
      "operations": [
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: final [455,460]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: final [511,516]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodInvocation [8155,8172]"
        },
        {
          "type": "delete-node",
          "from": "QualifiedName: tagPending.tagName [8143,8161]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/jsoup/parser/TokeniserState.java",
        "src/main/java/org/jsoup/parser/TokeniserState.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [],
          "num": 0
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "146",
            "197",
            "198",
            "210",
            "411",
            "427",
            "594",
            "1146",
            "1625",
            "1704"
          ],
          "num": 10
        },
        {
          "qualified_names": [
            "146",
            "197",
            "198",
            "210",
            "411",
            "427",
            "594",
            "1146",
            "1625",
            "1704"
          ],
          "num": 10
        }
      ],
      "diff": "diff --git a/src/main/java/org/jsoup/parser/TokeniserState.java b/src/main/java/org/jsoup/parser/TokeniserState.java\nindex a4b7ada..c10dd2c 100644\n--- a/src/main/java/org/jsoup/parser/TokeniserState.java\n+++ b/src/main/java/org/jsoup/parser/TokeniserState.java\n@@ -143,7 +143,7 @@\n         void read(Tokeniser t, CharacterReader r) {\n             // previous TagOpen state did NOT consume, will have a letter char in current\n             //String tagName \u003d r.consumeToAnySorted(tagCharsSorted).toLowerCase();\n-            String tagName \u003d r.consumeTagName().toLowerCase();\n+            String tagName \u003d r.consumeTagName();\n             t.tagPending.appendTagName(tagName);\n \n             switch (r.consume()) {\n@@ -194,8 +194,8 @@\n         void read(Tokeniser t, CharacterReader r) {\n             if (r.matchesLetter()) {\n                 t.createTagPending(false);\n-                t.tagPending.appendTagName(Character.toLowerCase(r.current()));\n-                t.dataBuffer.append(Character.toLowerCase(r.current()));\n+                t.tagPending.appendTagName(r.current());\n+                t.dataBuffer.append(r.current());\n                 t.advanceTransition(RCDATAEndTagName);\n             } else {\n                 t.emit(\"\u003c/\");\n@@ -207,7 +207,7 @@\n         void read(Tokeniser t, CharacterReader r) {\n             if (r.matchesLetter()) {\n                 String name \u003d r.consumeLetterSequence();\n-                t.tagPending.appendTagName(name.toLowerCase());\n+                t.tagPending.appendTagName(name);\n                 t.dataBuffer.append(name);\n                 return;\n             }\n@@ -408,7 +408,7 @@\n         void read(Tokeniser t, CharacterReader r) {\n             if (r.matchesLetter()) {\n                 t.createTempBuffer();\n-                t.dataBuffer.append(Character.toLowerCase(r.current()));\n+                t.dataBuffer.append(r.current());\n                 t.emit(\"\u003c\" + r.current());\n                 t.advanceTransition(ScriptDataDoubleEscapeStart);\n             } else if (r.matches(\u0027/\u0027)) {\n@@ -424,7 +424,7 @@\n         void read(Tokeniser t, CharacterReader r) {\n             if (r.matchesLetter()) {\n                 t.createTagPending(false);\n-                t.tagPending.appendTagName(Character.toLowerCase(r.current()));\n+                t.tagPending.appendTagName(r.current());\n                 t.dataBuffer.append(r.current());\n                 t.advanceTransition(ScriptDataEscapedEndTagName);\n             } else {\n@@ -591,7 +591,7 @@\n         // from before attribute name\n         void read(Tokeniser t, CharacterReader r) {\n             String name \u003d r.consumeToAnySorted(attributeNameCharsSorted);\n-            t.tagPending.appendAttributeName(name.toLowerCase());\n+            t.tagPending.appendAttributeName(name);\n \n             char c \u003d r.consume();\n             switch (c) {\n@@ -1143,7 +1143,7 @@\n         void read(Tokeniser t, CharacterReader r) {\n             if (r.matchesLetter()) {\n                 String name \u003d r.consumeLetterSequence();\n-                t.doctypePending.name.append(name.toLowerCase());\n+                t.doctypePending.name.append(name);\n                 return;\n             }\n             char c \u003d r.consume();\n@@ -1622,7 +1622,7 @@\n     private static void handleDataEndTag(Tokeniser t, CharacterReader r, TokeniserState elseTransition) {\n         if (r.matchesLetter()) {\n             String name \u003d r.consumeLetterSequence();\n-            t.tagPending.appendTagName(name.toLowerCase());\n+            t.tagPending.appendTagName(name);\n             t.dataBuffer.append(name);\n             return;\n         }\n@@ -1701,7 +1701,7 @@\n     private static void handleDataDoubleEscapeTag(Tokeniser t, CharacterReader r, TokeniserState primary, TokeniserState fallback) {\n         if (r.matchesLetter()) {\n             String name \u003d r.consumeLetterSequence();\n-            t.dataBuffer.append(name.toLowerCase());\n+            t.dataBuffer.append(name);\n             t.emit(name);\n             return;\n         }\n",
      "operations": [
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "METHOD_INVOCATION_RECEIVER [4742,4760]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: toLowerCase [4761,4772]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "MethodInvocation [4742,4774]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "METHOD_INVOCATION_RECEIVER [6747,6756]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: toLowerCase [6757,6768]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "METHOD_INVOCATION_ARGUMENTS [6747,6781]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "MethodInvocation [6720,6782]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "METHOD_INVOCATION_RECEIVER [6820,6829]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: toLowerCase [6830,6841]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "METHOD_INVOCATION_ARGUMENTS [6820,6854]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "MethodInvocation [6800,6855]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "METHOD_INVOCATION_RECEIVER [7244,7248]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: toLowerCase [7249,7260]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "MethodInvocation [7244,7262]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "METHOD_INVOCATION_RECEIVER [13541,13550]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: toLowerCase [13551,13562]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "METHOD_INVOCATION_ARGUMENTS [13541,13575]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "MethodInvocation [13521,13576]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "METHOD_INVOCATION_RECEIVER [14171,14180]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: toLowerCase [14181,14192]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "METHOD_INVOCATION_ARGUMENTS [14171,14205]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "MethodInvocation [14144,14206]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "METHOD_INVOCATION_RECEIVER [19904,19908]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: toLowerCase [19909,19920]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "MethodInvocation [19904,19922]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "METHOD_INVOCATION_RECEIVER [39169,39173]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: toLowerCase [39174,39185]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "MethodInvocation [39169,39187]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "METHOD_INVOCATION_RECEIVER [56381,56385]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: toLowerCase [56386,56397]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "MethodInvocation [56381,56399]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "METHOD_INVOCATION_RECEIVER [58871,58875]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: toLowerCase [58876,58887]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "MethodInvocation [58871,58889]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/jsoup/parser/TreeBuilder.java",
        "src/main/java/org/jsoup/parser/TreeBuilder.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.jsoup.parser.TreeBuilder:parse:[String input, String baseUri, ParseErrorList errors]:Document",
            "org.jsoup.parser.TreeBuilder:initialiseParse:[String input, String baseUri, ParseErrorList errors]:void",
            "org.jsoup.parser.TreeBuilder:parse:[String input, String baseUri]:Document"
          ],
          "num": 3
        },
        {
          "qualified_names": [
            "org.jsoup.parser.TreeBuilder:defaultSettings:[]:ParseSettings",
            "org.jsoup.parser.TreeBuilder:initialiseParse:[String input, String baseUri, ParseErrorList errors, ParseSettings settings]:void",
            "org.jsoup.parser.TreeBuilder:parse:[String input, String baseUri, ParseErrorList errors, ParseSettings settings]:Document"
          ],
          "num": 3
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "25",
            "37",
            "38",
            "39",
            "40",
            "41",
            "42"
          ],
          "num": 7
        },
        {
          "qualified_names": [
            "21",
            "26",
            "27",
            "28",
            "33",
            "41",
            "42"
          ],
          "num": 7
        }
      ],
      "diff": "diff --git a/src/main/java/org/jsoup/parser/TreeBuilder.java b/src/main/java/org/jsoup/parser/TreeBuilder.java\nindex c6f5f20..445c57e 100644\n--- a/src/main/java/org/jsoup/parser/TreeBuilder.java\n+++ b/src/main/java/org/jsoup/parser/TreeBuilder.java\n@@ -18,15 +18,19 @@\n     protected String baseUri; // current base uri, for creating new elements\n     protected Token currentToken; // currentToken is used only for error tracking.\n     protected ParseErrorList errors; // null when not tracking errors\n+    protected ParseSettings settings;\n \n     private Token.StartTag start \u003d new Token.StartTag(); // start tag to process\n     private Token.EndTag end  \u003d new Token.EndTag();\n \n-    protected void initialiseParse(String input, String baseUri, ParseErrorList errors) {\n+    abstract ParseSettings defaultSettings();\n+\n+    protected void initialiseParse(String input, String baseUri, ParseErrorList errors, ParseSettings settings) {\n         Validate.notNull(input, \"String input must not be null\");\n         Validate.notNull(baseUri, \"BaseURI must not be null\");\n \n         doc \u003d new Document(baseUri);\n+        this.settings \u003d settings;\n         reader \u003d new CharacterReader(input);\n         this.errors \u003d errors;\n         tokeniser \u003d new Tokeniser(reader, errors);\n@@ -34,12 +38,8 @@\n         this.baseUri \u003d baseUri;\n     }\n \n-    Document parse(String input, String baseUri) {\n-        return parse(input, baseUri, ParseErrorList.noTracking());\n-    }\n-\n-    Document parse(String input, String baseUri, ParseErrorList errors) {\n-        initialiseParse(input, baseUri, errors);\n+    Document parse(String input, String baseUri, ParseErrorList errors, ParseSettings settings) {\n+        initialiseParse(input, baseUri, errors, settings);\n         runParser();\n         return doc;\n     }\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldDeclaration [676,709]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [849,890]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SingleVariableDeclaration [980,1002]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SingleVariableDeclaration [1488,1510]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [1181,1206]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: settings [1562,1570]"
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/jsoup/parser/XmlTreeBuilder.java",
        "src/main/java/org/jsoup/parser/XmlTreeBuilder.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.jsoup.parser.XmlTreeBuilder:insert:[Token.Comment commentToken]:void",
            "org.jsoup.parser.XmlTreeBuilder:insert:[Token.StartTag startTag]:Element",
            "org.jsoup.parser.XmlTreeBuilder:parseFragment:[String inputFragment, String baseUri, ParseErrorList errors]:List\u003cNode\u003e",
            "org.jsoup.parser.XmlTreeBuilder:initialiseParse:[String input, String baseUri, ParseErrorList errors]:void",
            "org.jsoup.parser.XmlTreeBuilder:insert:[Token.Doctype d]:void"
          ],
          "num": 5
        },
        {
          "qualified_names": [
            "org.jsoup.parser.XmlTreeBuilder:insert:[Token.StartTag startTag]:Element",
            "org.jsoup.parser.XmlTreeBuilder:parse:[String input, String baseUri]:Document",
            "org.jsoup.parser.XmlTreeBuilder:defaultSettings:[]:ParseSettings",
            "org.jsoup.parser.XmlTreeBuilder:insert:[Token.Doctype d]:void",
            "org.jsoup.parser.XmlTreeBuilder:parseFragment:[String inputFragment, String baseUri, ParseErrorList errors, ParseSettings settings]:List\u003cNode\u003e",
            "org.jsoup.parser.XmlTreeBuilder:initialiseParse:[String input, String baseUri, ParseErrorList errors, ParseSettings settings]:void",
            "org.jsoup.parser.XmlTreeBuilder:insert:[Token.Comment commentToken]:void"
          ],
          "num": 7
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "18",
            "19",
            "56",
            "58",
            "79",
            "92",
            "124",
            "125"
          ],
          "num": 8
        },
        {
          "qualified_names": [
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23",
            "24",
            "26",
            "27",
            "64",
            "66",
            "87",
            "100",
            "132",
            "133"
          ],
          "num": 16
        }
      ],
      "diff": "diff --git a/src/main/java/org/jsoup/parser/XmlTreeBuilder.java b/src/main/java/org/jsoup/parser/XmlTreeBuilder.java\nindex 3ccd7df..2ac525f 100644\n--- a/src/main/java/org/jsoup/parser/XmlTreeBuilder.java\n+++ b/src/main/java/org/jsoup/parser/XmlTreeBuilder.java\n@@ -14,9 +14,17 @@\n  * @author Jonathan Hedley\n  */\n public class XmlTreeBuilder extends TreeBuilder {\n+    ParseSettings defaultSettings() {\n+        return ParseSettings.preserveCase;\n+    }\n+\n+    Document parse(String input, String baseUri) {\n+        return parse(input, baseUri, ParseErrorList.noTracking(), ParseSettings.preserveCase);\n+    }\n+\n     @Override\n-    protected void initialiseParse(String input, String baseUri, ParseErrorList errors) {\n-        super.initialiseParse(input, baseUri, errors);\n+    protected void initialiseParse(String input, String baseUri, ParseErrorList errors, ParseSettings settings) {\n+        super.initialiseParse(input, baseUri, errors, settings);\n         stack.add(doc); // place the document onto the stack. differs from HtmlTreeBuilder (not on stack)\n         doc.outputSettings().syntax(Document.OutputSettings.Syntax.xml);\n     }\n@@ -53,9 +61,9 @@\n     }\n \n     Element insert(Token.StartTag startTag) {\n-        Tag tag \u003d Tag.valueOf(startTag.name());\n+        Tag tag \u003d Tag.valueOf(startTag.name(), settings);\n         // todo: wonder if for xml parsing, should treat all tags as unknown? because it\u0027s not html.\n-        Element el \u003d new Element(tag, baseUri, startTag.attributes);\n+        Element el \u003d new Element(tag, baseUri, settings.normalizeAttributes(startTag.attributes));\n         insertNode(el);\n         if (startTag.isSelfClosing()) {\n             tokeniser.acknowledgeSelfClosingFlag();\n@@ -76,7 +84,7 @@\n             if (data.length() \u003e 1 \u0026\u0026 (data.startsWith(\"!\") || data.startsWith(\"?\"))) {\n                 Document doc \u003d Jsoup.parse(\"\u003c\" + data.substring(1, data.length() -1) + \"\u003e\", baseUri, Parser.xmlParser());\n                 Element el \u003d doc.child(0);\n-                insert \u003d new XmlDeclaration(el.tagName(), comment.baseUri(), data.startsWith(\"!\"));\n+                insert \u003d new XmlDeclaration(settings.normalizeTag(el.tagName()), comment.baseUri(), data.startsWith(\"!\"));\n                 insert.attributes().addAll(el.attributes());\n             }\n         }\n@@ -89,7 +97,7 @@\n     }\n \n     void insert(Token.Doctype d) {\n-        DocumentType doctypeNode \u003d new DocumentType(d.getName(), d.getPublicIdentifier(), d.getSystemIdentifier(), baseUri);\n+        DocumentType doctypeNode \u003d new DocumentType(settings.normalizeTag(d.getName()), d.getPublicIdentifier(), d.getSystemIdentifier(), baseUri);\n         insertNode(doctypeNode);\n     }\n \n@@ -121,8 +129,8 @@\n         }\n     }\n \n-    List\u003cNode\u003e parseFragment(String inputFragment, String baseUri, ParseErrorList errors) {\n-        initialiseParse(inputFragment, baseUri, errors);\n+    List\u003cNode\u003e parseFragment(String inputFragment, String baseUri, ParseErrorList errors, ParseSettings settings) {\n+        initialiseParse(inputFragment, baseUri, errors, settings);\n         runParser();\n         return doc.childNodes();\n     }\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [456,538]"
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SingleVariableDeclaration [795,817]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SingleVariableDeclaration [4861,4883]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [2226,2316]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [3762,3901]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: settings [875,883]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "QualifiedName: ParseSettings.preserveCase [657,683]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: settings [4943,4951]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: settings [2106,2114]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "MethodInvocation [3368,3403]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "METHOD_INVOCATION_RECEIVER [3368,3376]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: normalizeTag [3377,3389]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "METHOD_INVOCATION_ARGUMENTS [3390,3402]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [1941,2001]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [3424,3540]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/jsoup/select/Evaluator.java",
        "src/main/java/org/jsoup/select/Evaluator.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.jsoup.select.Evaluator\\$AttributeStarting:AttributeStarting:[String keyPrefix]:null",
            "org.jsoup.select.Evaluator\\$Tag:matches:[Element root, Element element]:boolean",
            "org.jsoup.select.Evaluator\\$AttributeStarting:matches:[Element root, Element element]:boolean"
          ],
          "num": 3
        },
        {
          "qualified_names": [
            "org.jsoup.select.Evaluator\\$AttributeStarting:matches:[Element root, Element element]:boolean",
            "org.jsoup.select.Evaluator\\$Tag:matches:[Element root, Element element]:boolean",
            "org.jsoup.select.Evaluator\\$AttributeStarting:AttributeStarting:[String keyPrefix]:null"
          ],
          "num": 3
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "45",
            "127",
            "134"
          ],
          "num": 3
        },
        {
          "qualified_names": [
            "45",
            "127",
            "128",
            "135"
          ],
          "num": 4
        }
      ],
      "diff": "diff --git a/src/main/java/org/jsoup/select/Evaluator.java b/src/main/java/org/jsoup/select/Evaluator.java\nindex 4283a67..dba2e5d 100644\n--- a/src/main/java/org/jsoup/select/Evaluator.java\n+++ b/src/main/java/org/jsoup/select/Evaluator.java\n@@ -42,7 +42,7 @@\n \n         @Override\n         public boolean matches(Element root, Element element) {\n-            return (element.tagName().equals(tagName));\n+            return (element.tagName().equalsIgnoreCase(tagName));\n         }\n \n         @Override\n@@ -124,14 +124,15 @@\n         private String keyPrefix;\n \n         public AttributeStarting(String keyPrefix) {\n-            this.keyPrefix \u003d keyPrefix;\n+            Validate.notEmpty(keyPrefix);\n+            this.keyPrefix \u003d keyPrefix.toLowerCase();\n         }\n \n         @Override\n         public boolean matches(Element root, Element element) {\n             List\u003corg.jsoup.nodes.Attribute\u003e values \u003d element.attributes().asList();\n             for (org.jsoup.nodes.Attribute attribute : values) {\n-                if (attribute.getKey().startsWith(keyPrefix))\n+                if (attribute.getKey().toLowerCase().startsWith(keyPrefix))\n                     return true;\n             }\n             return false;\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [2987,3016]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [3029,3070]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "METHOD_INVOCATION_RECEIVER [3333,3365]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "MethodInvocation [3333,3365]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: toLowerCase [3352,3363]"
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [2977,3004]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/jsoup/select/QueryParser.java",
        "src/main/java/org/jsoup/select/QueryParser.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.jsoup.select.QueryParser:byClass:[]:void",
            "org.jsoup.select.QueryParser:byTag:[]:void"
          ],
          "num": 2
        },
        {
          "qualified_names": [
            "org.jsoup.select.QueryParser:byTag:[]:void",
            "org.jsoup.select.QueryParser:byClass:[]:void"
          ],
          "num": 2
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "209",
            "220"
          ],
          "num": 2
        },
        {
          "qualified_names": [
            "209",
            "220"
          ],
          "num": 2
        }
      ],
      "diff": "diff --git a/src/main/java/org/jsoup/select/QueryParser.java b/src/main/java/org/jsoup/select/QueryParser.java\nindex 66a899c..f25387b 100644\n--- a/src/main/java/org/jsoup/select/QueryParser.java\n+++ b/src/main/java/org/jsoup/select/QueryParser.java\n@@ -206,7 +206,7 @@\n     private void byClass() {\n         String className \u003d tq.consumeCssIdentifier();\n         Validate.notEmpty(className);\n-        evals.add(new Evaluator.Class(className.trim().toLowerCase()));\n+        evals.add(new Evaluator.Class(className.trim()));\n     }\n \n     private void byTag() {\n@@ -217,7 +217,7 @@\n         if (tagName.contains(\"|\"))\n             tagName \u003d tagName.replace(\"|\", \":\");\n \n-        evals.add(new Evaluator.Tag(tagName.trim().toLowerCase()));\n+        evals.add(new Evaluator.Tag(tagName.trim()));\n     }\n \n     private void byAttribute() {\n",
      "operations": [
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "METHOD_INVOCATION_RECEIVER [7404,7420]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: toLowerCase [7421,7432]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "MethodInvocation [7374,7436]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "METHOD_INVOCATION_RECEIVER [7774,7788]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: toLowerCase [7789,7800]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "MethodInvocation [7746,7804]",
          "to": ""
        }
      ]
    }
  ],
  "inducing_type": {
    "add_classes": {
      "qualified_names": [
        "src/main/java/org/jsoup/parser/ParseSettings.java"
      ],
      "num": 1
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [
        "org.jsoup.parser.HtmlTreeBuilder:parse:[String input, String baseUri, ParseErrorList errors, ParseSettings settings]:Document",
        "org.jsoup.nodes.Attributes:hasKeyIgnoreCase:[String key]:boolean",
        "org.jsoup.parser.Token\\$Tag:normalName:[]:String",
        "org.jsoup.nodes.Attributes:put:[String key, String value]:void",
        "org.jsoup.parser.TreeBuilder:parse:[String input, String baseUri, ParseErrorList errors, ParseSettings settings]:Document",
        "org.jsoup.parser.XmlTreeBuilder:defaultSettings:[]:ParseSettings",
        "org.jsoup.parser.Token\\$Tag:name:[String name]:Tag",
        "org.jsoup.parser.XmlTreeBuilder:parse:[String input, String baseUri]:Document",
        "org.jsoup.parser.HtmlTreeBuilder:defaultSettings:[]:ParseSettings",
        "org.jsoup.parser.Tag:valueOf:[String tagName, ParseSettings settings]:Tag",
        "org.jsoup.parser.XmlTreeBuilder:parseFragment:[String inputFragment, String baseUri, ParseErrorList errors, ParseSettings settings]:List\u003cNode\u003e",
        "org.jsoup.parser.XmlTreeBuilder:initialiseParse:[String input, String baseUri, ParseErrorList errors, ParseSettings settings]:void",
        "org.jsoup.parser.HtmlTreeBuilder:parseFragment:[String inputFragment, Element context, String baseUri, ParseErrorList errors, ParseSettings settings]:List\u003cNode\u003e",
        "org.jsoup.parser.Parser:Parser:[TreeBuilder treeBuilder]:null",
        "org.jsoup.parser.Parser:settings:[]:ParseSettings",
        "org.jsoup.nodes.Attributes:removeIgnoreCase:[String key]:void",
        "org.jsoup.nodes.Attributes:getIgnoreCase:[String key]:String",
        "org.jsoup.parser.TreeBuilder:initialiseParse:[String input, String baseUri, ParseErrorList errors, ParseSettings settings]:void",
        "org.jsoup.parser.Parser:settings:[ParseSettings settings]:Parser",
        "org.jsoup.parser.TreeBuilder:defaultSettings:[]:ParseSettings"
      ],
      "num": 20
    },
    "delete_functions": {
      "qualified_names": [
        "org.jsoup.parser.TreeBuilder:parse:[String input, String baseUri, ParseErrorList errors]:Document",
        "org.jsoup.parser.TreeBuilder:initialiseParse:[String input, String baseUri, ParseErrorList errors]:void",
        "org.jsoup.parser.XmlTreeBuilder:parseFragment:[String inputFragment, String baseUri, ParseErrorList errors]:List\u003cNode\u003e",
        "org.jsoup.parser.HtmlTreeBuilder:parse:[String input, String baseUri, ParseErrorList errors]:Document",
        "org.jsoup.parser.TreeBuilder:parse:[String input, String baseUri]:Document",
        "org.jsoup.parser.XmlTreeBuilder:initialiseParse:[String input, String baseUri, ParseErrorList errors]:void",
        "org.jsoup.parser.HtmlTreeBuilder:parseFragment:[String inputFragment, Element context, String baseUri, ParseErrorList errors]:List\u003cNode\u003e"
      ],
      "num": 7
    }
  },
  "trigger_tests": [
    {
      "test_class": "org.jsoup.nodes.ElementTest",
      "test_function": "testChainedRemoveAttributes",
      "assertion_line": "966",
      "exception": "java.util.ConcurrentModificationException",
      "message": ""
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/jsoup/nodes/Attributes.java",
        "src/main/java/org/jsoup/nodes/Attributes.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.jsoup.nodes.Attributes:removeIgnoreCase:[String key]:void"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "org.jsoup.nodes.Attributes:removeIgnoreCase:[String key]:void"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "122",
            "124"
          ],
          "num": 2
        },
        {
          "qualified_names": [
            "122",
            "123",
            "125"
          ],
          "num": 3
        }
      ],
      "diff": "diff --git a/src/main/java/org/jsoup/nodes/Attributes.java b/src/main/java/org/jsoup/nodes/Attributes.java\nindex 30dffaf..8fdb654 100644\n--- a/src/main/java/org/jsoup/nodes/Attributes.java\n+++ b/src/main/java/org/jsoup/nodes/Attributes.java\n@@ -119,9 +119,10 @@\n         Validate.notEmpty(key);\n         if (attributes \u003d\u003d null)\n             return;\n-        for (String attrKey : attributes.keySet()) {\n+        for (Iterator\u003cString\u003e it \u003d attributes.keySet().iterator(); it.hasNext(); ) {\n+            String attrKey \u003d it.next();\n             if (attrKey.equalsIgnoreCase(key))\n-                attributes.remove(attrKey);\n+                it.remove();\n         }\n     }\n \n",
      "operations": [
        {
          "type": "insert-node",
          "from": "",
          "to": "VariableDeclarationExpression [3573,3625]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodInvocation [3627,3639]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "ParameterizedType [3573,3589]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "VariableDeclarationFragment [3590,3625]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [3657,3684]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SimpleType [3573,3581]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: it [3590,3592]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "MethodInvocation [3595,3625]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [3748,3760]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "METHOD_INVOCATION_RECEIVER [3595,3614]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: iterator [3615,3623]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: attrKey [3580,3587]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SingleVariableDeclaration [3573,3587]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [3676,3703]",
          "to": ""
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  },
  "patch_changed_mths": {
    "qualified_names": [],
    "num": 0
  }
}