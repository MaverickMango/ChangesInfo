{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "data/changesInfo/",
  "timeoutSecond": 300,
  "proj": "Closure",
  "id": "76",
  "workingDir": "../bugs/Closure_76_buggy",
  "inducingCommit": "fe64e87cccd2c38524c0b36c49beb4c988d1453a",
  "originalCommit": "7e0d71b3d68ad4788a094d8618e2b0aa474cf3db",
  "bug_name": "Closure_76",
  "derive": "defects4j",
  "original_fixing_commit": "78b01c3a435cd175ce3ee70f97b2f8faac342cdc",
  "buildFiles_changed": false,
  "inducing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/jscomp/CodingConvention.java",
        "src/com/google/javascript/jscomp/CodingConvention.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "isExported"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "isExported",
            "isExported"
          ],
          "num": 2
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "83"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "84",
            "87",
            "88",
            "89",
            "90",
            "91"
          ],
          "num": 6
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/jscomp/CodingConvention.java b/src/com/google/javascript/jscomp/CodingConvention.java\nindex a701819..ef37732 100644\n--- a/src/com/google/javascript/jscomp/CodingConvention.java\n+++ b/src/com/google/javascript/jscomp/CodingConvention.java\n@@ -81,8 +81,14 @@\n    * exported, or externally referenceable.\n    *\n    * @param name A global variable or function name.\n+   * @param local {@code true} if the name is a local variable.\n    * @return {@code true} if the name should be considered exported.\n    */\n+  public boolean isExported(String name, boolean local);\n+  \n+  /**\n+   * Should be isExported(name, true) || isExported(name, false);\n+   */\n   public boolean isExported(String name);\n \n   /**\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [2712,3089]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [3095,3170]"
        },
        {
          "type": "delete-tree",
          "from": "Javadoc [2712,2968]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/jscomp/CompilationLevel.java",
        "src/com/google/javascript/jscomp/CompilationLevel.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [],
          "num": 0
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "98",
            "129",
            "140"
          ],
          "num": 3
        },
        {
          "qualified_names": [
            "97",
            "129",
            "139"
          ],
          "num": 3
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/jscomp/CompilationLevel.java b/src/com/google/javascript/jscomp/CompilationLevel.java\nindex e0eee18..cb9b4da 100644\n--- a/src/com/google/javascript/jscomp/CompilationLevel.java\n+++ b/src/com/google/javascript/jscomp/CompilationLevel.java\n@@ -95,7 +95,6 @@\n     options.deadAssignmentElimination \u003d true;\n     options.extractPrototypeMemberDeclarations \u003d true;\n     options.collapseVariableDeclarations \u003d true;\n-    options.collapseAnonymousFunctions \u003d true;\n     options.convertToDottedProperties \u003d true;\n     options.labelRenaming \u003d true;\n     options.removeDeadCode \u003d true;\n@@ -126,7 +125,6 @@\n     options.deadAssignmentElimination \u003d true;\n     options.extractPrototypeMemberDeclarations \u003d true;\n     options.collapseVariableDeclarations \u003d true;\n-    options.collapseAnonymousFunctions \u003d true;\n     options.convertToDottedProperties \u003d true;\n     options.rewriteFunctionExpressions \u003d true;\n     options.labelRenaming \u003d true;\n@@ -138,6 +136,7 @@\n     options.propertyRenaming \u003d PropertyRenamingPolicy.ALL_UNQUOTED;\n     options.removeUnusedPrototypeProperties \u003d true;\n     options.removeUnusedPrototypePropertiesInExterns \u003d true;\n+    options.collapseAnonymousFunctions \u003d true;\n     options.collapseProperties \u003d true;\n     options.rewriteFunctionExpressions \u003d true;\n     options.devirtualizePrototypeMethods \u003d true;\n",
      "operations": [
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [3358,3400]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/jscomp/Compiler.java",
        "src/com/google/javascript/jscomp/Compiler.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "optimize"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "optimize"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "25",
            "26",
            "66",
            "67",
            "68",
            "69",
            "70",
            "71",
            "1408"
          ],
          "num": 9
        },
        {
          "qualified_names": [
            "24",
            "67",
            "1400"
          ],
          "num": 3
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/jscomp/Compiler.java b/src/com/google/javascript/jscomp/Compiler.java\nindex a2c1bbd..e913372 100644\n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n@@ -22,8 +22,6 @@\n import com.google.common.base.Tracer;\n import com.google.common.collect.Lists;\n import com.google.common.collect.Maps;\n-import com.google.common.flags.Flag;\n-import com.google.common.flags.FlagSpec;\n import com.google.javascript.jscomp.CompilerOptions.DevMode;\n import com.google.javascript.jscomp.CompilerOptions.TracerMode;\n import com.google.javascript.jscomp.mozilla.rhino.ErrorReporter;\n@@ -63,12 +61,6 @@\n *\n  */\n public class Compiler extends AbstractCompiler {\n-  @FlagSpec(help \u003d \"As part of the aliasing pass, outputs all strings and \" +\n-                   \"the number of times they were used in the application to \" +\n-                   \"the server log.\")\n-  public static final Flag\u003cBoolean\u003e FLAG_output_js_string_usage \u003d\n-      Flag.value(false);\n-\n   CompilerOptions options_ \u003d createDefaultOptions();\n \n   private PassConfig passes \u003d null;\n@@ -1405,7 +1397,7 @@\n       aliasStrings(options_.aliasableStrings,\n                    options_.aliasAllStrings,\n                    options_.aliasStringsBlacklist,\n-                   FLAG_output_js_string_usage.get());\n+                   options_.outputJsStringUsage);\n     }\n \n     if (options_.aliasExternals) {\n",
      "operations": [
        {
          "type": "insert-node",
          "from": "",
          "to": "QualifiedName: options_.outputJsStringUsage [41573,41601]"
        },
        {
          "type": "delete-tree",
          "from": "ImportDeclaration [893,929]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ImportDeclaration [930,970]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "FieldDeclaration [2222,2507]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodInvocation [41940,41973]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/jscomp/CompilerOptions.java",
        "src/com/google/javascript/jscomp/CompilerOptions.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "CompilerOptions"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "CompilerOptions"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "301",
            "583"
          ],
          "num": 2
        },
        {
          "qualified_names": [
            "302",
            "303",
            "304",
            "587"
          ],
          "num": 4
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/jscomp/CompilerOptions.java b/src/com/google/javascript/jscomp/CompilerOptions.java\nindex 2ff9887..a272a80 100644\n--- a/src/com/google/javascript/jscomp/CompilerOptions.java\n+++ b/src/com/google/javascript/jscomp/CompilerOptions.java\n@@ -299,6 +299,9 @@\n    */\n   public boolean aliasAllStrings;\n \n+  /** Print string usage as part of the compilation log. */\n+  boolean outputJsStringUsage;\n+\n   /** Converts quoted property accesses to dot syntax (a[\u0027b\u0027] -\u003e a.b) */\n   public boolean convertToDottedProperties;\n \n@@ -581,6 +584,7 @@\n     aliasableStrings \u003d Collections.emptySet();\n     aliasStringsBlacklist \u003d \"\";\n     aliasAllStrings \u003d false;\n+    outputJsStringUsage \u003d false;\n     convertToDottedProperties \u003d false;\n     rewriteFunctionExpressions \u003d false;\n     optimizeParameters \u003d false;\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldDeclaration [9075,9163]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [17660,17688]"
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/jscomp/ControlFlowGraph.java",
        "src/com/google/javascript/jscomp/ControlFlowGraph.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "shouldTraverse"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "shouldTraverse",
            "isEnteringNewCfgNode"
          ],
          "num": 2
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "141",
            "142",
            "143",
            "144",
            "145",
            "146",
            "147",
            "148",
            "149",
            "150",
            "151",
            "152",
            "153",
            "154",
            "155",
            "156",
            "157",
            "158",
            "159",
            "160",
            "161",
            "162",
            "163",
            "164",
            "165",
            "166",
            "167"
          ],
          "num": 27
        },
        {
          "qualified_names": [
            "141",
            "142",
            "143",
            "144",
            "145",
            "146",
            "147",
            "148",
            "149",
            "150",
            "151",
            "152",
            "153",
            "154",
            "155",
            "156",
            "157",
            "158",
            "159",
            "160",
            "161",
            "162",
            "163",
            "164",
            "165",
            "166",
            "167",
            "168",
            "169",
            "170",
            "171",
            "172",
            "173",
            "174",
            "175",
            "176",
            "177",
            "178",
            "179",
            "180",
            "181",
            "182",
            "183",
            "184",
            "185",
            "186",
            "187",
            "188",
            "189",
            "190",
            "191",
            "192"
          ],
          "num": 52
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/jscomp/ControlFlowGraph.java b/src/com/google/javascript/jscomp/ControlFlowGraph.java\nindex 8b1e11e..dd4afa2 100644\n--- a/src/com/google/javascript/jscomp/ControlFlowGraph.java\n+++ b/src/com/google/javascript/jscomp/ControlFlowGraph.java\n@@ -138,33 +138,58 @@\n       if (parent \u003d\u003d null) {\n         return true;\n       }\n-      switch (parent.getType()) {\n-        case Token.BLOCK:\n-        case Token.SCRIPT:\n-        case Token.TRY:\n-        case Token.FINALLY:\n-          return false;\n-        case Token.FUNCTION:\n-          return n \u003d\u003d parent.getFirstChild().getNext();\n-        case Token.WHILE:\n-        case Token.DO:\n-        case Token.IF:\n-          return NodeUtil.getConditionExpression(parent) \u003d\u003d n;\n-        case Token.FOR:\n-          if (parent.getChildCount() \u003d\u003d 4) {\n-            return NodeUtil.getConditionExpression(parent) \u003d\u003d n;\n-          } else {\n-            return n !\u003d parent.getLastChild();\n-          }\n-        case Token.SWITCH:\n-        case Token.CASE:\n-        case Token.CATCH:\n-        case Token.WITH:\n-          return n \u003d\u003d parent.getFirstChild();\n-\n-        default:\n-          return true;\n-      }\n+      return !isEnteringNewCfgNode(n);\n+    }\n+  }\n+  \n+  /**\n+   * @return True if n should be represented by a new CFG node in the control\n+   * flow graph.\n+   */\n+  public static boolean isEnteringNewCfgNode(Node n) {\n+    Node parent \u003d n.getParent();\n+    switch (parent.getType()) {\n+      case Token.BLOCK:\n+      case Token.SCRIPT:\n+      case Token.TRY:\n+      case Token.FINALLY:\n+        return true;\n+      case Token.FUNCTION:\n+        // A function node represents the start of a function where the name\n+        // is bleed into the local scope and parameters has been assigned\n+        // to the formal argument names. The node includes the name of the\n+        // function and the LP list since we assume the whole set up process\n+        // is atomic without change in control flow. The next change of\n+        // control is going into the function\u0027s body represent by the second\n+        // child.\n+        return n !\u003d parent.getFirstChild().getNext();\n+      case Token.WHILE:\n+      case Token.DO:\n+      case Token.IF:\n+        // Theses control structure is represented by its node that holds the\n+        // condition. Each of them is a branch node based on its condition.\n+        return NodeUtil.getConditionExpression(parent) !\u003d n;\n+        \n+      case Token.FOR:\n+        // The FOR(;;) node differs from other control structure in that\n+        // it has a initialization and a increment statement. Those\n+        // two statements have its corresponding CFG nodes to represent them.\n+        // The FOR node represents the condition check for each iteration.\n+        // That way the following:\n+        // for(var x \u003d 0; x \u003c 10; x++) { } has a graph that is isomorphic to\n+        // var x \u003d 0; while(x\u003c10) {  x++; }\n+        if (parent.getChildCount() \u003d\u003d 4) {\n+          return NodeUtil.getConditionExpression(parent) !\u003d n;\n+        } else {\n+          return n \u003d\u003d parent.getLastChild();\n+        }\n+      case Token.SWITCH:\n+      case Token.CASE:\n+      case Token.CATCH:\n+      case Token.WITH:\n+        return n !\u003d parent.getFirstChild();\n+      default:\n+        return false;\n     }\n   }\n }\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [4108,6127]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ReturnStatement [4060,4092]"
        },
        {
          "type": "delete-tree",
          "from": "SwitchStatement [4060,4846]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/jscomp/DeadAssignmentsElimination.java",
        "src/com/google/javascript/jscomp/DeadAssignmentsElimination.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "tryRemoveAssignment",
            "tryRemoveDeadAssignments"
          ],
          "num": 2
        },
        {
          "qualified_names": [
            "readVariableBeforeKilling",
            "tryRemoveAssignment",
            "isVariableStillLiveWithinExpression",
            "DeadAssignmentsElimination",
            "tryRemoveDeadAssignments",
            "tryRemoveAssignment"
          ],
          "num": 6
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "31",
            "46",
            "47",
            "114",
            "119",
            "120",
            "121",
            "128",
            "134",
            "135",
            "136",
            "146",
            "149",
            "151",
            "168",
            "169",
            "181",
            "182",
            "183",
            "184",
            "185",
            "186",
            "193"
          ],
          "num": 23
        },
        {
          "qualified_names": [
            "30",
            "46",
            "111",
            "116",
            "123",
            "129",
            "133",
            "134",
            "135",
            "136",
            "137",
            "144",
            "145",
            "148",
            "150",
            "151",
            "152",
            "153",
            "154",
            "156",
            "157",
            "158",
            "159",
            "160",
            "161",
            "162",
            "163",
            "164",
            "180",
            "181",
            "182",
            "194",
            "195",
            "196",
            "197",
            "198",
            "199",
            "200",
            "201",
            "202",
            "203",
            "204",
            "205",
            "206",
            "207",
            "208",
            "209",
            "210",
            "217",
            "218",
            "219",
            "225",
            "226",
            "227",
            "228",
            "229",
            "230",
            "231",
            "232",
            "233",
            "234",
            "235",
            "236",
            "237",
            "238",
            "239",
            "240",
            "241",
            "242",
            "243",
            "244",
            "245",
            "246",
            "247",
            "248",
            "249",
            "250",
            "251",
            "252",
            "253",
            "254",
            "255",
            "256",
            "257",
            "258",
            "259",
            "260",
            "261",
            "262",
            "263",
            "264",
            "265",
            "266",
            "267",
            "268",
            "269",
            "270",
            "271",
            "272",
            "273",
            "274",
            "275",
            "276",
            "277",
            "278",
            "279",
            "280",
            "281",
            "282",
            "283",
            "284",
            "285",
            "286",
            "287",
            "288",
            "289",
            "290",
            "291",
            "292",
            "293",
            "294",
            "295"
          ],
          "num": 122
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java b/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\nindex 1b55469..d554f78 100644\n--- a/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\n+++ b/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\n@@ -28,7 +28,6 @@\n import com.google.javascript.rhino.Token;\n \n import java.util.List;\n-import java.util.logging.Logger;\n \n /**\n  * Removes local variable assignments that are useless based on information from\n@@ -43,8 +42,6 @@\n \n   private final AbstractCompiler compiler;\n   private LiveVariablesAnalysis liveness;\n-  private static final Logger logger \u003d\n-    Logger.getLogger(DeadAssignmentsElimination.class.getName());\n \n   public DeadAssignmentsElimination(AbstractCompiler compiler) {\n     this.compiler \u003d compiler;\n@@ -111,45 +108,60 @@\n         case Token.IF:\n         case Token.WHILE:\n         case Token.DO:\n-          tryRemoveAssignment(t, NodeUtil.getConditionExpression(n), n, state);\n+          tryRemoveAssignment(t, NodeUtil.getConditionExpression(n), state);\n           continue;\n         case Token.FOR:\n           if (n.getChildCount() \u003d\u003d 4) {\n             tryRemoveAssignment(\n-                t, NodeUtil.getConditionExpression(n), n, state);\n-            tryRemoveAssignment(\n-                t, n.getFirstChild().getNext().getNext(), n, state);\n+                t, NodeUtil.getConditionExpression(n), state);\n           }\n           continue;\n         case Token.SWITCH:\n         case Token.CASE:\n         case Token.RETURN:\n           if (n.hasChildren()) {\n-            tryRemoveAssignment(t, n.getFirstChild(), n, state);\n+            tryRemoveAssignment(t, n.getFirstChild(), state);\n           }\n           continue;\n         // TODO(user): case Token.VAR: Remove var a\u003d1;a\u003d2;.....\n       }\n       \n-      if (NodeUtil.isExpressionNode(n)) {\n-        tryRemoveAssignment(t, n.getFirstChild(), n, state);\n-      }\n+      tryRemoveAssignment(t, n, state);\n     }\n   }\n \n+  private void tryRemoveAssignment(NodeTraversal t, Node n,\n+      FlowState\u003cLiveVariableLattice\u003e state) {\n+    tryRemoveAssignment(t, n, n, state);\n+  }\n+  \n   /**\n    * Determines if any local variables are dead after the instruction {@code n}\n    * and are assigned within the subtree of {@code n}. Removes those assignments\n    * if there are any.\n    *\n    * @param n Target instruction.\n-   * @param parent Parent of {@code n}.\n+   * @param exprRoot The CFG node where the liveness information in state is\n+   *     still correct.\n    * @param state The liveness information at {@code n}.\n    */\n-  private void tryRemoveAssignment(NodeTraversal t, Node n, Node parent,\n+  private void tryRemoveAssignment(NodeTraversal t, Node n, Node exprRoot,\n       FlowState\u003cLiveVariableLattice\u003e state) {\n-    if (NodeUtil.isAssign(n)) {\n+\n+    // TODO(user): Add implemenation to handle x++ and ++x by replacing\n+    // them with x or x+1 respectively.\n+    if (NodeUtil.isAssignmentOp(n)) {\n+\n       Node lhs \u003d n.getFirstChild();\n+      Node rhs \u003d lhs.getNext();\n+      \n+      // Recurse first. Example: dead_x \u003d dead_y \u003d 1; We try to clean up dead_y\n+      // first.\n+      if (rhs !\u003d null) {\n+        tryRemoveAssignment(t, rhs, exprRoot, state);\n+        rhs \u003d lhs.getNext();\n+      }\n+\n       Scope scope \u003d t.getScope();\n       if (!NodeUtil.isName(lhs)) {\n         return; // Not a local variable assignment.\n@@ -165,8 +177,9 @@\n       if (state.getOut().isLive(var)) {\n         return; // Variable not dead.\n       }\n-      if (state.getIn().isLive(var)) {\n-        // Oddly, the variable is killed here but it is also live before it.\n+      if (state.getIn().isLive(var) \u0026\u0026\n+          isVariableStillLiveWithinExpression(n, exprRoot, var.name)) {\n+        // The variable is killed here but it is also live before it.\n         // This is possible if we have say:\n         //    if (X \u003d a \u0026\u0026 a \u003d C) {..} ; .......; a \u003d S;\n         // In this case we are safe to remove \"a \u003d C\" because it is dead.\n@@ -178,22 +191,106 @@\n         // of GEN sets when we recurse here.\n         return;\n       }\n-      Node rhs \u003d n.getLastChild();\n-      // Now we are at a dead local variable assignment.\n-      logger.info(\"Removing dead assignemnt to \" + name + \" in \"\n-          + t.getSourceName() + \" line \" + n.getLineno());\n-      n.removeChild(rhs);\n-      parent.replaceChild(n, rhs);\n+      \n+      if (NodeUtil.isAssign(n)) {\n+        n.removeChild(rhs);\n+        n.getParent().replaceChild(n, rhs);\n+      } else if (NodeUtil.isAssignmentOp(n)) {\n+        n.removeChild(rhs);\n+        n.removeChild(lhs);\n+        Node op \u003d new Node(NodeUtil.getOpFromAssignmentOp(n), lhs, rhs);\n+        n.getParent().replaceChild(n, op);\n+      } else {\n+        // TODO(user): this is where the code that handles dead x++ and x--\n+        // should go.\n+        \n+        // Not reachable.\n+        Preconditions.checkState(false, \"Unknow statement\");\n+      }\n+      \n       compiler.reportCodeChange();\n       return;\n \n     } else {\n       for (Node c \u003d n.getFirstChild(); c !\u003d null;) {\n         Node next \u003d c.getNext();\n-        tryRemoveAssignment(t, c, n, state);\n+        if (!ControlFlowGraph.isEnteringNewCfgNode(c)) {\n+          tryRemoveAssignment(t, c, exprRoot, state);\n+        }\n         c \u003d next;\n       }\n       return;\n     }\n   }\n+  \n+  /**\n+   * Given a variable, node n in the tree and a sub-tree denoted by exprRoot as\n+   * the root, this function returns true if there exists a read of that\n+   * variable before a write to that variable that is on the right side of n.\n+   * \n+   * For example, suppose the node is x \u003d 1:\n+   * \n+   * y \u003d 1, x \u003d 1; // false, there is no reads at all.\n+   * y \u003d 1, x \u003d 1, print(x) // true, there is a read right of n.\n+   * y \u003d 1, x \u003d 1, x \u003d 2, print(x) // false, there is a read right of n but \n+   *                               // it is after a write.\n+   * \n+   * @param n The current node we should look at.\n+   * @param exprRoot The node\n+   */\n+  private boolean isVariableStillLiveWithinExpression(\n+      Node n, Node exprRoot, String variable) {\n+    while (n !\u003d exprRoot) {\n+      for(Node sibling \u003d n.getNext(); sibling !\u003d null;\n+          sibling \u003d sibling.getNext()) {\n+        if (!ControlFlowGraph.isEnteringNewCfgNode(sibling)) {\n+          VariableLiveness state \u003d readVariableBeforeKilling(sibling, variable);\n+          \n+          // If we see a READ or KILL there is no need to continue.\n+          if (state \u003d\u003d VariableLiveness.READ) {\n+            return true;\n+          } else if (state \u003d\u003d VariableLiveness.KILL) {\n+            return false;\n+          }\n+        }\n+      }\n+      n \u003d n.getParent();\n+    }\n+    return false;\n+  }\n+  \n+  // The current liveness of the variable\n+  private enum VariableLiveness {\n+    MAYBE_LIVE, // May be still live in the current expression tree.\n+    READ, // Known there is a read left of it.\n+    KILL, // Known there is a write before any read.\n+  }\n+\n+  /**\n+   * Give an expression and a variable. It returns READ, if the right-most\n+   * reference of that variable is a read. It returns KILL, if the right-most\n+   * reference of that variable is an assignment. It returns MAY_LIVE otherwise.\n+   * \n+   * This need to be a pre-order traversal so we cannot use the normal node\n+   * traversals.\n+   */\n+  private VariableLiveness readVariableBeforeKilling(Node n, String variable) {\n+    if (NodeUtil.isName(n) \u0026\u0026 variable.equals(n.getString())) {\n+      if (NodeUtil.isLhs(n, n.getParent())) {\n+        return VariableLiveness.KILL;\n+      } else {\n+        return VariableLiveness.READ;\n+      }\n+    }\n+    for (Node child \u003d n.getFirstChild();\n+        child !\u003d null; child \u003d child.getNext()) {\n+      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) {\n+        VariableLiveness state \u003d readVariableBeforeKilling(child, variable);\n+        if (state !\u003d VariableLiveness.MAYBE_LIVE) {\n+          return state;\n+        }\n+      }\n+    }\n+    return VariableLiveness.MAYBE_LIVE;\n+  }\n }\n",
      "operations": [
        {
          "type": "insert-node",
          "from": "",
          "to": "MethodDeclaration [4464,4612]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [7642,8968]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "EnumDeclaration [9016,9220]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [9224,10232]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: private [4464,4471]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "PrimitiveType: void [4472,4476]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: tryRemoveAssignment [4477,4496]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SingleVariableDeclaration [4497,4512]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SingleVariableDeclaration [4514,4520]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SingleVariableDeclaration [4528,4564]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Block [4566,4612]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "IfStatement [5247,7632]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodInvocation [5251,5277]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Block [5279,7372]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "ExpressionStatement [4417,4450]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [5459,5568]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "MethodInvocation [4417,4449]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: n [4595,4596]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "InfixExpression [6072,6169]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [6887,7309]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: tryRemoveAssignment [4417,4436]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "METHOD_INVOCATION_ARGUMENTS [4437,4448]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "INFIX_EXPRESSION_OPERATOR: \u0026\u0026 [6098,6100]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodInvocation [6111,6169]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "IfStatement [7474,7586]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "ExpressionStatement [4010,4093]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: t [4437,4438]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: state [4443,4448]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "PrefixExpression [7478,7519]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Block [7521,7586]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "MethodInvocation [4010,4092]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: tryRemoveAssignment [4010,4029]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "METHOD_INVOCATION_ARGUMENTS [4047,4091]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodInvocation [6838,6851]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: t [4047,4048]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: state [4086,4091]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ImportDeclaration [1244,1276]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "FieldDeclaration [1801,1903]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodInvocation [4008,4042]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: n [4044,4045]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [4250,4339]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "METHOD_INVOCATION_RECEIVER [4519,4520]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: n [4538,4539]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodInvocation [4670,4698]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: getFirstChild [4735,4748]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "MethodInvocation [4733,4750]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Block [4700,4770]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "IfStatement [4666,4770]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [5040,5049]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [6525,6642]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: parent [6675,6681]",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/jscomp/DefaultCodingConvention.java",
        "src/com/google/javascript/jscomp/DefaultCodingConvention.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "isExported"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "isExported",
            "isExported"
          ],
          "num": 2
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "60"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "59",
            "60",
            "61",
            "62",
            "63",
            "65"
          ],
          "num": 6
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/jscomp/DefaultCodingConvention.java b/src/com/google/javascript/jscomp/DefaultCodingConvention.java\nindex 11103c0..3446893 100644\n--- a/src/com/google/javascript/jscomp/DefaultCodingConvention.java\n+++ b/src/com/google/javascript/jscomp/DefaultCodingConvention.java\n@@ -56,8 +56,13 @@\n   }\n \n   @Override\n+  public boolean isExported(String name, boolean local) {\n+    return local \u0026\u0026 name.startsWith(\"$super\");\n+  }\n+  \n+  @Override\n   public boolean isExported(String name) {\n-    return false;\n+    return isExported(name, false) || isExported(name, true);\n   }\n \n   @Override\n",
      "operations": [
        {
          "type": "insert-node",
          "from": "",
          "to": "MethodDeclaration [1661,1779]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MarkerAnnotation [1661,1670]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: public [1673,1679]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "PrimitiveType: boolean [1680,1687]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: isExported [1688,1698]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SingleVariableDeclaration [1699,1710]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SingleVariableDeclaration [1712,1725]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Block [1727,1779]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "ReturnStatement [1842,1899]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "InfixExpression [1740,1774]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "InfixExpression [1849,1898]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "MethodInvocation [1849,1872]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "INFIX_EXPRESSION_OPERATOR: || [1873,1875]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodInvocation [1876,1898]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: isExported [1849,1859]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "METHOD_INVOCATION_ARGUMENTS [1860,1871]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: name [1860,1864]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/jscomp/GoogleCodingConvention.java",
        "src/com/google/javascript/jscomp/GoogleCodingConvention.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "isExported"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "isExported"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "124",
            "125"
          ],
          "num": 2
        },
        {
          "qualified_names": [
            "124",
            "125"
          ],
          "num": 2
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/jscomp/GoogleCodingConvention.java b/src/com/google/javascript/jscomp/GoogleCodingConvention.java\nindex 5510276..9546260 100644\n--- a/src/com/google/javascript/jscomp/GoogleCodingConvention.java\n+++ b/src/com/google/javascript/jscomp/GoogleCodingConvention.java\n@@ -121,8 +121,8 @@\n    * considered exported.\n    */\n   @Override\n-  public boolean isExported(String name) {\n-    return name.startsWith(\"_\");\n+  public boolean isExported(String name, boolean local) {\n+    return !local \u0026\u0026 name.startsWith(\"_\");\n   }\n \n   /**\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "SingleVariableDeclaration [3503,3516]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "InfixExpression [3531,3561]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "PrefixExpression [3531,3537]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "INFIX_EXPRESSION_OPERATOR: \u0026\u0026 [3538,3540]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/jscomp/MaybeReachingVariableUse.java",
        "src/com/google/javascript/jscomp/MaybeReachingVariableUse.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "ReachingUses",
            "ReachingUses"
          ],
          "num": 2
        },
        {
          "qualified_names": [
            "ReachingUses",
            "ReachingUses"
          ],
          "num": 2
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "21",
            "88",
            "97"
          ],
          "num": 3
        },
        {
          "qualified_names": [
            "20",
            "88",
            "97"
          ],
          "num": 3
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java b/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\nindex f623da3..aed3242 100644\n--- a/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\n+++ b/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\n@@ -17,8 +17,8 @@\n package com.google.javascript.jscomp;\n \n import com.google.common.base.Preconditions;\n+import com.google.common.collect.HashMultimap;\n import com.google.common.collect.Multimap;\n-import com.google.common.collect.Multimaps;\n import com.google.common.collect.Sets;\n import com.google.javascript.jscomp.ControlFlowGraph.Branch;\n import com.google.javascript.jscomp.Scope.Var;\n@@ -85,7 +85,7 @@\n     final Multimap\u003cVar, Node\u003e mayUseMap;\n \n     public ReachingUses() {\n-      mayUseMap \u003d Multimaps.newHashMultimap();\n+      mayUseMap \u003d HashMultimap.create();\n     }\n \n     /**\n@@ -94,7 +94,7 @@\n      * @param other The constructed object is a replicated copy of this element.\n      */\n     public ReachingUses(ReachingUses other) {\n-      mayUseMap \u003d Multimaps.newHashMultimap(other.mayUseMap);\n+      mayUseMap \u003d HashMultimap.create(other.mayUseMap);\n     }\n \n     @Override\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "ImportDeclaration [680,726]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ImportDeclaration [723,766]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/jscomp/NodeUtil.java",
        "src/com/google/javascript/jscomp/NodeUtil.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "isAssignmentOp"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "getOpFromAssignmentOp"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "718"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "719",
            "720",
            "721",
            "722",
            "723",
            "724",
            "725",
            "726",
            "727",
            "728",
            "729",
            "730",
            "731",
            "732",
            "733",
            "734",
            "735",
            "736",
            "737",
            "738",
            "739",
            "740",
            "741",
            "742",
            "743",
            "744",
            "745",
            "746"
          ],
          "num": 28
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java\nindex 0ec71df..70a8490 100644\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n@@ -716,6 +716,34 @@\n     }\n     return false;\n   }\n+  \n+  static int getOpFromAssignmentOp(Node n) {\n+    switch (n.getType()){\n+      case Token.ASSIGN_BITOR:\n+        return Token.BITOR;\n+      case Token.ASSIGN_BITXOR:\n+        return Token.BITXOR;\n+      case Token.ASSIGN_BITAND:\n+        return Token.BITAND;\n+      case Token.ASSIGN_LSH:\n+        return Token.LSH;\n+      case Token.ASSIGN_RSH:\n+        return Token.RSH;\n+      case Token.ASSIGN_URSH:\n+        return Token.URSH;\n+      case Token.ASSIGN_ADD:\n+        return Token.ADD;\n+      case Token.ASSIGN_SUB:\n+        return Token.SUB;\n+      case Token.ASSIGN_MUL:\n+        return Token.MUL;\n+      case Token.ASSIGN_DIV:\n+        return Token.DIV;\n+      case Token.ASSIGN_MOD:\n+        return Token.MOD;\n+    }\n+    throw new IllegalArgumentException(\"Not an assiment op\");\n+  }\n \n   static boolean isExpressionNode(Node n) {\n     return n.getType() \u003d\u003d Token.EXPR_RESULT;\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [20101,20864]"
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/jscomp/OptimizeArgumentsArray.java",
        "src/com/google/javascript/jscomp/OptimizeArgumentsArray.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "tryReplaceArguments"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "tryReplaceArguments"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "213"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "213",
            "214",
            "215",
            "216",
            "217"
          ],
          "num": 5
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/jscomp/OptimizeArgumentsArray.java b/src/com/google/javascript/jscomp/OptimizeArgumentsArray.java\nindex 3235601..aba0ae7 100644\n--- a/src/com/google/javascript/jscomp/OptimizeArgumentsArray.java\n+++ b/src/com/google/javascript/jscomp/OptimizeArgumentsArray.java\n@@ -210,7 +210,11 @@\n       // We have something like arguments[x] where x is not a constant. That\n       // means at least one of the access is not known.\n       if (index.getType() !\u003d Token.NUMBER) {\n-        continue;\n+        // TODO(user): Its possible not to give up just yet. The type\n+        // inference did a \u0027semi value propagation\u0027. If we know that string\n+        // is never a subclass of the type of the index. We\u0027d know that\n+        // it is never \u0027callee\u0027.\n+        return false; // Give up.\n       }\n \n       // Replace the highest index if we see an access that has a higher index\n",
      "operations": [
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ReturnStatement [7666,7679]"
        },
        {
          "type": "delete-node",
          "from": "ContinueStatement [8627,8636]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/jscomp/RenameVars.java",
        "src/com/google/javascript/jscomp/RenameVars.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "okToRenameVar"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "okToRenameVar"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "444"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "444"
          ],
          "num": 1
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/jscomp/RenameVars.java b/src/com/google/javascript/jscomp/RenameVars.java\nindex 836fabb..18e2680 100644\n--- a/src/com/google/javascript/jscomp/RenameVars.java\n+++ b/src/com/google/javascript/jscomp/RenameVars.java\n@@ -441,6 +441,6 @@\n    * Determines whether a variable name is okay to rename.\n    */\n   private boolean okToRenameVar(String name, boolean isLocal) {\n-    return isLocal || !compiler.getCodingConvention().isExported(name);\n+    return !compiler.getCodingConvention().isExported(name, isLocal);\n   }\n }\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "ReturnStatement [14038,14103]"
        },
        {
          "type": "delete-tree",
          "from": "ReturnStatement [14038,14105]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/jscomp/RhinoErrorReporter.java",
        "src/com/google/javascript/jscomp/RhinoErrorReporter.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "RhinoErrorReporter"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "RhinoErrorReporter"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "46",
            "48",
            "67",
            "72",
            "78"
          ],
          "num": 5
        },
        {
          "qualified_names": [
            "46",
            "47",
            "48",
            "49",
            "51",
            "70",
            "75",
            "81",
            "82",
            "83",
            "84",
            "85",
            "86",
            "87"
          ],
          "num": 14
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/jscomp/RhinoErrorReporter.java b/src/com/google/javascript/jscomp/RhinoErrorReporter.java\nindex 5d7b2fc..0c90c7c 100644\n--- a/src/com/google/javascript/jscomp/RhinoErrorReporter.java\n+++ b/src/com/google/javascript/jscomp/RhinoErrorReporter.java\n@@ -43,9 +43,12 @@\n   static final DiagnosticType TRAILING_COMMA \u003d\n       DiagnosticType.error(\"JSC_TRAILING_COMMA\", \"Parse error. {0}\");\n \n-  static final DiagnosticType BAD_JSDOC_ANNOTATION \u003d \n+  static final DiagnosticType DUPLICATE_PARAM \u003d\n+      DiagnosticType.error(\"JSC_DUPLICATE_PARAM\", \"Parse error. {0}\");\n+\n+  static final DiagnosticType BAD_JSDOC_ANNOTATION \u003d\n     DiagnosticType.warning(\"JSC_BAD_JSDOC_ANNOTATION\", \"Parse error. {0}\");\n-  \n+\n   // A map of Rhino messages to their DiagnosticType.\n   private final Map\u003cString, DiagnosticType\u003e typeMap;\n \n@@ -64,18 +67,24 @@\n   private RhinoErrorReporter(AbstractCompiler compiler) {\n     this.compiler \u003d compiler;\n     typeMap \u003d ImmutableMap.of(\n-        \n+\n         // Extra @fileoverview\n         replacePlaceHolders(\n             ScriptRuntime.getMessage0(\"msg.jsdoc.fileoverview.extra\")),\n         EXTRA_FILEOVERVIEW,\n-        \n+\n         // Trailing comma\n         replacePlaceHolders(\n             com.google.javascript.jscomp.mozilla.rhino.ScriptRuntime\n               .getMessage0(\"msg.extra.trailing.comma\")),\n         TRAILING_COMMA,\n-    \n+\n+        // Duplicate parameter\n+        replacePlaceHolders(\n+            com.google.javascript.jscomp.mozilla.rhino.ScriptRuntime\n+              .getMessage0(\"msg.dup.parms\")),\n+        DUPLICATE_PARAM,\n+\n         // Unknown @annotations.\n         replacePlaceHolders(ScriptRuntime.getMessage0(\"msg.bad.jsdoc.tag\")),\n         BAD_JSDOC_ANNOTATION);\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldDeclaration [1525,1641]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodInvocation [2814,2948]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: DUPLICATE_PARAM [2958,2973]"
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/jscomp/WarningLevel.java",
        "src/com/google/javascript/jscomp/WarningLevel.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [],
          "num": 0
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "59"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "60"
          ],
          "num": 1
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/jscomp/WarningLevel.java b/src/com/google/javascript/jscomp/WarningLevel.java\nindex b1eb15f..d7b3800 100644\n--- a/src/com/google/javascript/jscomp/WarningLevel.java\n+++ b/src/com/google/javascript/jscomp/WarningLevel.java\n@@ -57,6 +57,7 @@\n     // new one once it is default in command line JSCompiler.\n     options.checkUndefinedProperties \u003d CheckLevel.OFF;\n     options.checkUnusedPropertiesEarly \u003d false;\n+    options.checkUnreachableCode \u003d CheckLevel.WARNING;\n   }\n \n   /**\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [1723,1773]"
        }
      ]
    }
  ],
  "inducing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [
        "isEnteringNewCfgNode",
        "readVariableBeforeKilling",
        "getOpFromAssignmentOp",
        "DeadAssignmentsElimination",
        "isVariableStillLiveWithinExpression"
      ],
      "num": 5
    },
    "delete_functions": {
      "qualified_names": [
        "isAssignmentOp"
      ],
      "num": 1
    }
  },
  "trigger_tests": [
    {
      "test_class": "com.google.javascript.jscomp.DeadAssignmentsEliminationTest",
      "test_function": "testInExpression2",
      "exception": "junit.framework.AssertionFailedError",
      "message": ""
    }
  ],
  "fixing_changes": [],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  }
}