===
insert-tree
---
MethodDeclaration [14509,15234]
    Modifier: private [14509,14516]
    SimpleType [14517,14533]
        SimpleName: VariableLiveness [14517,14533]
    SimpleName: checkHookBranchReadBeforeKill [14534,14563]
    SingleVariableDeclaration [14571,14584]
        SimpleType [14571,14575]
            SimpleName: Node [14571,14575]
        SimpleName: trueCase [14576,14584]
    SingleVariableDeclaration [14586,14600]
        SimpleType [14586,14590]
            SimpleName: Node [14586,14590]
        SimpleName: falseCase [14591,14600]
    SingleVariableDeclaration [14602,14617]
        SimpleType [14602,14608]
            SimpleName: String [14602,14608]
        SimpleName: variable [14609,14617]
    Block [14619,15234]
        VariableDeclarationStatement [14625,14699]
            SimpleType [14625,14641]
                SimpleName: VariableLiveness [14625,14641]
            VariableDeclarationFragment [14642,14698]
                SimpleName: v1 [14642,14644]
                MethodInvocation [14647,14698]
                    SimpleName: isVariableReadBeforeKill [14647,14671]
                    METHOD_INVOCATION_ARGUMENTS [14679,14697]
                        SimpleName: trueCase [14679,14687]
                        SimpleName: variable [14689,14697]
        VariableDeclarationStatement [14704,14779]
            SimpleType [14704,14720]
                SimpleName: VariableLiveness [14704,14720]
            VariableDeclarationFragment [14721,14778]
                SimpleName: v2 [14721,14723]
                MethodInvocation [14726,14778]
                    SimpleName: isVariableReadBeforeKill [14726,14750]
                    METHOD_INVOCATION_ARGUMENTS [14758,14777]
                        SimpleName: falseCase [14758,14767]
                        SimpleName: variable [14769,14777]
        IfStatement [14955,15230]
            InfixExpression [14959,15017]
                InfixExpression [14959,14986]
                    SimpleName: v1 [14959,14961]
                    INFIX_EXPRESSION_OPERATOR: == [14962,14964]
                    QualifiedName: VariableLiveness.READ [14965,14986]
                INFIX_EXPRESSION_OPERATOR: || [14987,14989]
                InfixExpression [14990,15017]
                    SimpleName: v2 [14990,14992]
                    INFIX_EXPRESSION_OPERATOR: == [14993,14995]
                    QualifiedName: VariableLiveness.READ [14996,15017]
            Block [15019,15062]
                ReturnStatement [15027,15056]
                    QualifiedName: VariableLiveness.READ [15034,15055]
            IfStatement [15068,15230]
                InfixExpression [15072,15130]
                    InfixExpression [15072,15099]
                        SimpleName: v1 [15072,15074]
                        INFIX_EXPRESSION_OPERATOR: == [15075,15077]
                        QualifiedName: VariableLiveness.KILL [15078,15099]
                    INFIX_EXPRESSION_OPERATOR: && [15100,15102]
                    InfixExpression [15103,15130]
                        SimpleName: v2 [15103,15105]
                        INFIX_EXPRESSION_OPERATOR: == [15106,15108]
                        QualifiedName: VariableLiveness.KILL [15109,15130]
                Block [15132,15175]
                    ReturnStatement [15140,15169]
                        QualifiedName: VariableLiveness.KILL [15147,15168]
                Block [15181,15230]
                    ReturnStatement [15189,15224]
                        QualifiedName: VariableLiveness.MAYBE_LIVE [15196,15223]
to
TypeDeclaration [1322,12490]
at 20
===
move-tree
---
IfStatement [12198,12438]
    PrefixExpression [12202,12247]
        PREFIX_EXPRESSION_OPERATOR: ! [12202,12203]
        MethodInvocation [12203,12247]
            METHOD_INVOCATION_RECEIVER [12203,12219]
                SimpleName: ControlFlowGraph [12203,12219]
            SimpleName: isEnteringNewCfgNode [12220,12240]
            METHOD_INVOCATION_ARGUMENTS [12241,12246]
                SimpleName: child [12241,12246]
    Block [12249,12438]
        VariableDeclarationStatement [12277,12344]
            SimpleType [12277,12293]
                SimpleName: VariableLiveness [12277,12293]
            VariableDeclarationFragment [12294,12343]
                SimpleName: state [12294,12299]
                MethodInvocation [12302,12343]
                    SimpleName: isVariableReadBeforeKill [12302,12326]
                    METHOD_INVOCATION_ARGUMENTS [12327,12342]
                        SimpleName: child [12327,12332]
                        SimpleName: variable [12334,12342]
        IfStatement [12353,12430]
            InfixExpression [12357,12393]
                SimpleName: state [12357,12362]
                INFIX_EXPRESSION_OPERATOR: != [12363,12365]
                QualifiedName: VariableLiveness.MAYBE_LIVE [12366,12393]
            Block [12395,12430]
                ReturnStatement [12407,12420]
                    SimpleName: state [12414,12419]
to
Block [11361,12488]
at 0
===
insert-node
---
SwitchStatement [13167,14460]
to
Block [11361,12488]
at 2
===
move-tree
---
MethodInvocation [12203,12247]
    METHOD_INVOCATION_RECEIVER [12203,12219]
        SimpleName: ControlFlowGraph [12203,12219]
    SimpleName: isEnteringNewCfgNode [12220,12240]
    METHOD_INVOCATION_ARGUMENTS [12241,12246]
        SimpleName: child [12241,12246]
to
IfStatement [12198,12438]
at 0
===
insert-tree
---
MethodInvocation [13175,13186]
    METHOD_INVOCATION_RECEIVER [13175,13176]
        SimpleName: n [13175,13176]
    SimpleName: getType [13177,13184]
to
SwitchStatement [13167,14460]
at 0
===
insert-tree
---
SwitchCase [13218,13232]
    QualifiedName: Token.OR [13223,13231]
to
SwitchStatement [13167,14460]
at 1
===
insert-tree
---
SwitchCase [13239,13254]
    QualifiedName: Token.AND [13244,13253]
to
SwitchStatement [13167,14460]
at 2
===
insert-tree
---
VariableDeclarationStatement [13263,13350]
    SimpleType [13263,13279]
        SimpleName: VariableLiveness [13263,13279]
    VariableDeclarationFragment [13280,13349]
        SimpleName: v1 [13280,13282]
        MethodInvocation [13285,13349]
            SimpleName: isVariableReadBeforeKill [13285,13309]
            METHOD_INVOCATION_ARGUMENTS [13321,13348]
                MethodInvocation [13321,13338]
                    METHOD_INVOCATION_RECEIVER [13321,13322]
                        SimpleName: n [13321,13322]
                    SimpleName: getFirstChild [13323,13336]
                SimpleName: variable [13340,13348]
to
SwitchStatement [13167,14460]
at 3
===
insert-tree
---
VariableDeclarationStatement [13359,13445]
    SimpleType [13359,13375]
        SimpleName: VariableLiveness [13359,13375]
    VariableDeclarationFragment [13376,13444]
        SimpleName: v2 [13376,13378]
        MethodInvocation [13381,13444]
            SimpleName: isVariableReadBeforeKill [13381,13405]
            METHOD_INVOCATION_ARGUMENTS [13417,13443]
                MethodInvocation [13417,13433]
                    METHOD_INVOCATION_RECEIVER [13417,13418]
                        SimpleName: n [13417,13418]
                    SimpleName: getLastChild [13419,13431]
                SimpleName: variable [13435,13443]
to
SwitchStatement [13167,14460]
at 4
===
insert-tree
---
IfStatement [13547,13771]
    InfixExpression [13551,13584]
        SimpleName: v1 [13551,13553]
        INFIX_EXPRESSION_OPERATOR: != [13554,13556]
        QualifiedName: VariableLiveness.MAYBE_LIVE [13557,13584]
    Block [13586,13618]
        ReturnStatement [13598,13608]
            SimpleName: v1 [13605,13607]
    IfStatement [13624,13771]
        InfixExpression [13628,13655]
            SimpleName: v2 [13628,13630]
            INFIX_EXPRESSION_OPERATOR: == [13631,13633]
            QualifiedName: VariableLiveness.READ [13634,13655]
        Block [13657,13708]
            ReturnStatement [13669,13698]
                QualifiedName: VariableLiveness.READ [13676,13697]
        Block [13714,13771]
            ReturnStatement [13726,13761]
                QualifiedName: VariableLiveness.MAYBE_LIVE [13733,13760]
to
SwitchStatement [13167,14460]
at 5
===
insert-tree
---
SwitchCase [13778,13794]
    QualifiedName: Token.HOOK [13783,13793]
to
SwitchStatement [13167,14460]
at 6
===
insert-tree
---
VariableDeclarationStatement [13803,13895]
    SimpleType [13803,13819]
        SimpleName: VariableLiveness [13803,13819]
    VariableDeclarationFragment [13820,13894]
        SimpleName: first [13820,13825]
        MethodInvocation [13828,13894]
            SimpleName: isVariableReadBeforeKill [13828,13852]
            METHOD_INVOCATION_ARGUMENTS [13866,13893]
                MethodInvocation [13866,13883]
                    METHOD_INVOCATION_RECEIVER [13866,13867]
                        SimpleName: n [13866,13867]
                    SimpleName: getFirstChild [13868,13881]
                SimpleName: variable [13885,13893]
to
SwitchStatement [13167,14460]
at 7
===
insert-tree
---
IfStatement [13904,13981]
    InfixExpression [13908,13944]
        SimpleName: first [13908,13913]
        INFIX_EXPRESSION_OPERATOR: != [13914,13916]
        QualifiedName: VariableLiveness.MAYBE_LIVE [13917,13944]
    Block [13946,13981]
        ReturnStatement [13958,13971]
            SimpleName: first [13965,13970]
to
SwitchStatement [13167,14460]
at 8
===
insert-tree
---
ReturnStatement [13990,14097]
    MethodInvocation [13997,14096]
        SimpleName: checkHookBranchReadBeforeKill [13997,14026]
        METHOD_INVOCATION_ARGUMENTS [14040,14095]
            MethodInvocation [14040,14067]
                METHOD_INVOCATION_RECEIVER [14040,14057]
                    MethodInvocation [14040,14057]
                        METHOD_INVOCATION_RECEIVER [14040,14041]
                            SimpleName: n [14040,14041]
                        SimpleName: getFirstChild [14042,14055]
                SimpleName: getNext [14058,14065]
            MethodInvocation [14069,14085]
                METHOD_INVOCATION_RECEIVER [14069,14070]
                    SimpleName: n [14069,14070]
                SimpleName: getLastChild [14071,14083]
            SimpleName: variable [14087,14095]
to
SwitchStatement [13167,14460]
at 9
===
insert-node
---
SwitchCase [14105,14113]
to
SwitchStatement [13167,14460]
at 10
===
insert-node
---
ForStatement [14184,14454]
to
SwitchStatement [13167,14460]
at 11
===
insert-tree
---
VariableDeclarationStatement [10251,10304]
    SimpleType [10251,10267]
        SimpleName: VariableLiveness [10251,10267]
    VariableDeclarationFragment [10268,10303]
        SimpleName: state [10268,10273]
        QualifiedName: VariableLiveness.MAYBE_LIVE [10276,10303]
to
Block [10243,10767]
at 0
===
insert-node
---
SwitchStatement [10311,11526]
to
Block [10243,10767]
at 1
===
move-tree
---
IfStatement [10563,10718]
    InfixExpression [10567,10597]
        SimpleName: state [10567,10572]
        INFIX_EXPRESSION_OPERATOR: == [10573,10575]
        QualifiedName: VariableLiveness.READ [10576,10597]
    Block [10599,10637]
        ReturnStatement [10613,10625]
            BooleanLiteral: true [10620,10624]
    IfStatement [10643,10718]
        InfixExpression [10647,10677]
            SimpleName: state [10647,10652]
            INFIX_EXPRESSION_OPERATOR: == [10653,10655]
            QualifiedName: VariableLiveness.KILL [10656,10677]
        Block [10679,10718]
            ReturnStatement [10693,10706]
                BooleanLiteral: false [10700,10705]
to
Block [10243,10767]
at 2
===
insert-tree
---
ReturnStatement [12440,12475]
    QualifiedName: VariableLiveness.MAYBE_LIVE [12447,12474]
to
Block [12249,12438]
at 0
===
insert-tree
---
VariableDeclarationExpression [14189,14219]
    SimpleType [14189,14193]
        SimpleName: Node [14189,14193]
    VariableDeclarationFragment [14194,14219]
        SimpleName: child [14194,14199]
        MethodInvocation [14202,14219]
            METHOD_INVOCATION_RECEIVER [14202,14203]
                SimpleName: n [14202,14203]
            SimpleName: getFirstChild [14204,14217]
to
ForStatement [14184,14454]
at 0
===
insert-tree
---
InfixExpression [14233,14246]
    SimpleName: child [14233,14238]
    INFIX_EXPRESSION_OPERATOR: != [14239,14241]
    NullLiteral [14242,14246]
to
ForStatement [14184,14454]
at 1
===
insert-tree
---
Assignment [14248,14271]
    SimpleName: child [14248,14253]
    ASSIGNMENT_OPERATOR: = [14254,14255]
    MethodInvocation [14256,14271]
        METHOD_INVOCATION_RECEIVER [14256,14261]
            SimpleName: child [14256,14261]
        SimpleName: getNext [14262,14269]
to
ForStatement [14184,14454]
at 2
===
move-tree
---
Block [12190,12444]
    IfStatement [12198,12438]
        PrefixExpression [12202,12247]
            PREFIX_EXPRESSION_OPERATOR: ! [12202,12203]
            MethodInvocation [12203,12247]
                METHOD_INVOCATION_RECEIVER [12203,12219]
                    SimpleName: ControlFlowGraph [12203,12219]
                SimpleName: isEnteringNewCfgNode [12220,12240]
                METHOD_INVOCATION_ARGUMENTS [12241,12246]
                    SimpleName: child [12241,12246]
        Block [12249,12438]
            VariableDeclarationStatement [12277,12344]
                SimpleType [12277,12293]
                    SimpleName: VariableLiveness [12277,12293]
                VariableDeclarationFragment [12294,12343]
                    SimpleName: state [12294,12299]
                    MethodInvocation [12302,12343]
                        SimpleName: isVariableReadBeforeKill [12302,12326]
                        METHOD_INVOCATION_ARGUMENTS [12327,12342]
                            SimpleName: child [12327,12332]
                            SimpleName: variable [12334,12342]
            IfStatement [12353,12430]
                InfixExpression [12357,12393]
                    SimpleName: state [12357,12362]
                    INFIX_EXPRESSION_OPERATOR: != [12363,12365]
                    QualifiedName: VariableLiveness.MAYBE_LIVE [12366,12393]
                Block [12395,12430]
                    ReturnStatement [12407,12420]
                        SimpleName: state [12414,12419]
to
ForStatement [14184,14454]
at 3
===
insert-tree
---
MethodInvocation [10319,10342]
    METHOD_INVOCATION_RECEIVER [10319,10332]
        MethodInvocation [10319,10332]
            METHOD_INVOCATION_RECEIVER [10319,10320]
                SimpleName: n [10319,10320]
            SimpleName: getParent [10321,10330]
    SimpleName: getType [10333,10340]
to
SwitchStatement [10311,11526]
at 0
===
insert-tree
---
SwitchCase [10354,10368]
    QualifiedName: Token.OR [10359,10367]
to
SwitchStatement [10311,11526]
at 1
===
insert-tree
---
SwitchCase [10377,10392]
    QualifiedName: Token.AND [10382,10391]
to
SwitchStatement [10311,11526]
at 2
===
insert-tree
---
IfStatement [10557,10796]
    InfixExpression [10561,10580]
        MethodInvocation [10561,10572]
            METHOD_INVOCATION_RECEIVER [10561,10562]
                SimpleName: n [10561,10562]
            SimpleName: getNext [10563,10570]
        INFIX_EXPRESSION_OPERATOR: != [10573,10575]
        NullLiteral [10576,10580]
    Block [10582,10796]
        ExpressionStatement [10596,10669]
            Assignment [10596,10668]
                SimpleName: state [10596,10601]
                ASSIGNMENT_OPERATOR: = [10602,10603]
                MethodInvocation [10604,10668]
                    SimpleName: isVariableReadBeforeKill [10604,10628]
                    METHOD_INVOCATION_ARGUMENTS [10646,10667]
                        MethodInvocation [10646,10657]
                            METHOD_INVOCATION_RECEIVER [10646,10647]
                                SimpleName: n [10646,10647]
                            SimpleName: getNext [10648,10655]
                        SimpleName: variable [10659,10667]
        IfStatement [10682,10784]
            InfixExpression [10686,10716]
                SimpleName: state [10686,10691]
                INFIX_EXPRESSION_OPERATOR: == [10692,10694]
                QualifiedName: VariableLiveness.KILL [10695,10716]
            Block [10718,10784]
                ExpressionStatement [10734,10770]
                    Assignment [10734,10769]
                        SimpleName: state [10734,10739]
                        ASSIGNMENT_OPERATOR: = [10740,10741]
                        QualifiedName: VariableLiveness.MAYBE_LIVE [10742,10769]
to
SwitchStatement [10311,11526]
at 3
===
insert-node
---
BreakStatement [10807,10813]
to
SwitchStatement [10311,11526]
at 4
===
insert-tree
---
SwitchCase [10823,10839]
    QualifiedName: Token.HOOK [10828,10838]
to
SwitchStatement [10311,11526]
at 5
===
insert-node
---
IfStatement [11026,11211]
to
SwitchStatement [10311,11526]
at 6
===
insert-node
---
BreakStatement [11222,11228]
to
SwitchStatement [10311,11526]
at 7
===
insert-node
---
SwitchCase [11238,11246]
to
SwitchStatement [10311,11526]
at 8
===
insert-node
---
ForStatement [11257,11518]
to
SwitchStatement [10311,11526]
at 9
===
update-node
---
SimpleName: child [12241,12246]
replace child by n
===
move-tree
---
VariableDeclarationStatement [12277,12344]
    SimpleType [12277,12293]
        SimpleName: VariableLiveness [12277,12293]
    VariableDeclarationFragment [12294,12343]
        SimpleName: state [12294,12299]
        MethodInvocation [12302,12343]
            SimpleName: isVariableReadBeforeKill [12302,12326]
            METHOD_INVOCATION_ARGUMENTS [12327,12342]
                SimpleName: child [12327,12332]
                SimpleName: variable [12334,12342]
to
Block [12190,12444]
at 0
===
move-tree
---
IfStatement [12353,12430]
    InfixExpression [12357,12393]
        SimpleName: state [12357,12362]
        INFIX_EXPRESSION_OPERATOR: != [12363,12365]
        QualifiedName: VariableLiveness.MAYBE_LIVE [12366,12393]
    Block [12395,12430]
        ReturnStatement [12407,12420]
            SimpleName: state [12414,12419]
to
Block [12190,12444]
at 1
===
insert-tree
---
InfixExpression [11030,11082]
    InfixExpression [11030,11049]
        MethodInvocation [11030,11041]
            METHOD_INVOCATION_RECEIVER [11030,11031]
                SimpleName: n [11030,11031]
            SimpleName: getNext [11032,11039]
        INFIX_EXPRESSION_OPERATOR: != [11042,11044]
        NullLiteral [11045,11049]
    INFIX_EXPRESSION_OPERATOR: && [11050,11052]
    InfixExpression [11053,11082]
        MethodInvocation [11053,11074]
            METHOD_INVOCATION_RECEIVER [11053,11064]
                MethodInvocation [11053,11064]
                    METHOD_INVOCATION_RECEIVER [11053,11054]
                        SimpleName: n [11053,11054]
                    SimpleName: getNext [11055,11062]
            SimpleName: getNext [11065,11072]
        INFIX_EXPRESSION_OPERATOR: != [11075,11077]
        NullLiteral [11078,11082]
to
IfStatement [11026,11211]
at 0
===
move-tree
---
Block [10402,10728]
    VariableDeclarationStatement [10414,10483]
        SimpleType [10414,10430]
            SimpleName: VariableLiveness [10414,10430]
        VariableDeclarationFragment [10431,10482]
            SimpleName: state [10431,10436]
            MethodInvocation [10439,10482]
                SimpleName: isVariableReadBeforeKill [10439,10463]
                METHOD_INVOCATION_ARGUMENTS [10464,10481]
                    SimpleName: sibling [10464,10471]
                    SimpleName: variable [10473,10481]
    IfStatement [10563,10718]
        InfixExpression [10567,10597]
            SimpleName: state [10567,10572]
            INFIX_EXPRESSION_OPERATOR: == [10573,10575]
            QualifiedName: VariableLiveness.READ [10576,10597]
        Block [10599,10637]
            ReturnStatement [10613,10625]
                BooleanLiteral: true [10620,10624]
        IfStatement [10643,10718]
            InfixExpression [10647,10677]
                SimpleName: state [10647,10652]
                INFIX_EXPRESSION_OPERATOR: == [10653,10655]
                QualifiedName: VariableLiveness.KILL [10656,10677]
            Block [10679,10718]
                ReturnStatement [10693,10706]
                    BooleanLiteral: false [10700,10705]
to
IfStatement [11026,11211]
at 1
===
insert-tree
---
VariableDeclarationExpression [11261,11287]
    SimpleType [11261,11265]
        SimpleName: Node [11261,11265]
    VariableDeclarationFragment [11266,11287]
        SimpleName: sibling [11266,11273]
        MethodInvocation [11276,11287]
            METHOD_INVOCATION_RECEIVER [11276,11277]
                SimpleName: n [11276,11277]
            SimpleName: getNext [11278,11285]
to
ForStatement [11257,11518]
at 0
===
insert-tree
---
InfixExpression [11289,11304]
    SimpleName: sibling [11289,11296]
    INFIX_EXPRESSION_OPERATOR: != [11297,11299]
    NullLiteral [11300,11304]
to
ForStatement [11257,11518]
at 1
===
insert-tree
---
Assignment [11320,11347]
    SimpleName: sibling [11320,11327]
    ASSIGNMENT_OPERATOR: = [11328,11329]
    MethodInvocation [11330,11347]
        METHOD_INVOCATION_RECEIVER [11330,11337]
            SimpleName: sibling [11330,11337]
        SimpleName: getNext [11338,11345]
to
ForStatement [11257,11518]
at 2
===
move-tree
---
Block [10339,10736]
    IfStatement [10349,10728]
        PrefixExpression [10353,10400]
            PREFIX_EXPRESSION_OPERATOR: ! [10353,10354]
            MethodInvocation [10354,10400]
                METHOD_INVOCATION_RECEIVER [10354,10370]
                    SimpleName: ControlFlowGraph [10354,10370]
                SimpleName: isEnteringNewCfgNode [10371,10391]
                METHOD_INVOCATION_ARGUMENTS [10392,10399]
                    SimpleName: sibling [10392,10399]
        Block [10402,10728]
            VariableDeclarationStatement [10414,10483]
                SimpleType [10414,10430]
                    SimpleName: VariableLiveness [10414,10430]
                VariableDeclarationFragment [10431,10482]
                    SimpleName: state [10431,10436]
                    MethodInvocation [10439,10482]
                        SimpleName: isVariableReadBeforeKill [10439,10463]
                        METHOD_INVOCATION_ARGUMENTS [10464,10481]
                            SimpleName: sibling [10464,10471]
                            SimpleName: variable [10473,10481]
            IfStatement [10563,10718]
                InfixExpression [10567,10597]
                    SimpleName: state [10567,10572]
                    INFIX_EXPRESSION_OPERATOR: == [10573,10575]
                    QualifiedName: VariableLiveness.READ [10576,10597]
                Block [10599,10637]
                    ReturnStatement [10613,10625]
                        BooleanLiteral: true [10620,10624]
                IfStatement [10643,10718]
                    InfixExpression [10647,10677]
                        SimpleName: state [10647,10652]
                        INFIX_EXPRESSION_OPERATOR: == [10653,10655]
                        QualifiedName: VariableLiveness.KILL [10656,10677]
                    Block [10679,10718]
                        ReturnStatement [10693,10706]
                            BooleanLiteral: false [10700,10705]
to
ForStatement [11257,11518]
at 3
===
insert-tree
---
ExpressionStatement [11098,11199]
    Assignment [11098,11198]
        SimpleName: state [11098,11103]
        ASSIGNMENT_OPERATOR: = [11104,11105]
        MethodInvocation [11106,11198]
            SimpleName: checkHookBranchReadBeforeKill [11106,11135]
            METHOD_INVOCATION_ARGUMENTS [11153,11197]
                MethodInvocation [11153,11164]
                    METHOD_INVOCATION_RECEIVER [11153,11154]
                        SimpleName: n [11153,11154]
                    SimpleName: getNext [11155,11162]
                MethodInvocation [11166,11187]
                    METHOD_INVOCATION_RECEIVER [11166,11177]
                        MethodInvocation [11166,11177]
                            METHOD_INVOCATION_RECEIVER [11166,11167]
                                SimpleName: n [11166,11167]
                            SimpleName: getNext [11168,11175]
                    SimpleName: getNext [11178,11185]
                SimpleName: variable [11189,11197]
to
Block [10402,10728]
at 0
===
insert-node
---
ExpressionStatement [11363,11415]
to
Block [10339,10736]
at 0
===
insert-tree
---
IfStatement [11428,11506]
    InfixExpression [11432,11468]
        SimpleName: state [11432,11437]
        INFIX_EXPRESSION_OPERATOR: != [11438,11440]
        QualifiedName: VariableLiveness.MAYBE_LIVE [11441,11468]
    Block [11470,11506]
        BreakStatement [11486,11492]
to
Block [10339,10736]
at 1
===
insert-node
---
Assignment [11363,11414]
to
ExpressionStatement [11363,11415]
at 0
===
move-tree
---
SimpleName: state [10431,10436]
to
Assignment [11363,11414]
at 0
===
insert-node
---
ASSIGNMENT_OPERATOR: = [11369,11370]
to
Assignment [11363,11414]
at 1
===
move-tree
---
MethodInvocation [10439,10482]
    SimpleName: isVariableReadBeforeKill [10439,10463]
    METHOD_INVOCATION_ARGUMENTS [10464,10481]
        SimpleName: sibling [10464,10471]
        SimpleName: variable [10473,10481]
to
Assignment [11363,11414]
at 2
===
delete-tree
---
SimpleType [10414,10430]
    SimpleName: VariableLiveness [10414,10430]
===
delete-node
---
VariableDeclarationFragment [10431,10482]
===
===
delete-node
---
VariableDeclarationStatement [10414,10483]
===
===
delete-tree
---
PrefixExpression [10353,10400]
    PREFIX_EXPRESSION_OPERATOR: ! [10353,10354]
    MethodInvocation [10354,10400]
        METHOD_INVOCATION_RECEIVER [10354,10370]
            SimpleName: ControlFlowGraph [10354,10370]
        SimpleName: isEnteringNewCfgNode [10371,10391]
        METHOD_INVOCATION_ARGUMENTS [10392,10399]
            SimpleName: sibling [10392,10399]
===
delete-node
---
IfStatement [10349,10728]
===
===
delete-tree
---
VariableDeclarationExpression [10255,10281]
    SimpleType [10255,10259]
        SimpleName: Node [10255,10259]
    VariableDeclarationFragment [10260,10281]
        SimpleName: sibling [10260,10267]
        MethodInvocation [10270,10281]
            METHOD_INVOCATION_RECEIVER [10270,10271]
                SimpleName: n [10270,10271]
            SimpleName: getNext [10272,10279]
===
delete-tree
---
InfixExpression [10283,10298]
    SimpleName: sibling [10283,10290]
    INFIX_EXPRESSION_OPERATOR: != [10291,10293]
    NullLiteral [10294,10298]
===
delete-tree
---
Assignment [10310,10337]
    SimpleName: sibling [10310,10317]
    ASSIGNMENT_OPERATOR: = [10318,10319]
    MethodInvocation [10320,10337]
        METHOD_INVOCATION_RECEIVER [10320,10327]
            SimpleName: sibling [10320,10327]
        SimpleName: getNext [10328,10335]
===
delete-node
---
ForStatement [10251,10736]
===
===
delete-node
---
PREFIX_EXPRESSION_OPERATOR: ! [12202,12203]
===
===
delete-node
---
PrefixExpression [12202,12247]
===
===
delete-tree
---
VariableDeclarationExpression [12110,12140]
    SimpleType [12110,12114]
        SimpleName: Node [12110,12114]
    VariableDeclarationFragment [12115,12140]
        SimpleName: child [12115,12120]
        MethodInvocation [12123,12140]
            METHOD_INVOCATION_RECEIVER [12123,12124]
                SimpleName: n [12123,12124]
            SimpleName: getFirstChild [12125,12138]
===
delete-tree
---
InfixExpression [12150,12163]
    SimpleName: child [12150,12155]
    INFIX_EXPRESSION_OPERATOR: != [12156,12158]
    NullLiteral [12159,12163]
===
delete-tree
---
Assignment [12165,12188]
    SimpleName: child [12165,12170]
    ASSIGNMENT_OPERATOR: = [12171,12172]
    MethodInvocation [12173,12188]
        METHOD_INVOCATION_RECEIVER [12173,12178]
            SimpleName: child [12173,12178]
        SimpleName: getNext [12179,12186]
===
delete-node
---
ForStatement [12105,12444]
===
