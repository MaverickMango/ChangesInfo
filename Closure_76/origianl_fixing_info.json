{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "/home/liumengjiao/Desktop/CI/Benchmark/data/changesInfo/",
  "properties": {
    "trigger.tests": "com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testInExpression2,com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testIssue384b,com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testIssue384c,com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testIssue384d",
    "test.dir": "test",
    "clz.modified": "com.google.javascript.jscomp.DeadAssignmentsElimination",
    "src.dir": "src"
  },
  "timeoutSecond": 100,
  "proj": "Closure",
  "id": "76",
  "workingDir": "../bugs/Closure_76_buggy",
  "buggyCommit": "a6ca7c196cb8f9bcddefd038d80217c3de486e4e",
  "inducingCommit": "fe64e87cccd2c38524c0b36c49beb4c988d1453a",
  "originalCommit": "7e0d71b3d68ad4788a094d8618e2b0aa474cf3db",
  "bug_name": "Closure_76",
  "derive": "defects4j",
  "original_fixing_commit": "78b01c3a435cd175ce3ee70f97b2f8faac342cdc",
  "buildFiles_changed": false,
  "regression": true,
  "inducing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/jscomp/CodingConvention.java",
        "src/com/google/javascript/jscomp/CodingConvention.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [
            "com.google.javascript.jscomp.CodingConvention:applySingletonGetter:[FunctionType functionType, FunctionType getterType, ObjectType objectType]:void",
            "com.google.javascript.jscomp.CodingConvention:identifyTypeDeclarationCall:[Node n]:List\u003cString\u003e",
            "com.google.javascript.jscomp.CodingConvention:getDelegateSuperclassName:[]:String",
            "com.google.javascript.jscomp.CodingConvention:defineDelegateProxyProperties:[JSTypeRegistry registry, Scope scope, Map\u003cObjectType,ObjectType\u003e delegateProxyMap]:void",
            "com.google.javascript.jscomp.CodingConvention:isSuperClassReference:[String propertyName]:boolean",
            "com.google.javascript.jscomp.CodingConvention:getExportPropertyFunction:[]:String",
            "com.google.javascript.jscomp.CodingConvention:extractClassNameIfRequire:[Node node, Node parent]:String",
            "com.google.javascript.jscomp.CodingConvention:isOptionalParameter:[Node parameter]:boolean",
            "com.google.javascript.jscomp.CodingConvention\\$SubclassRelationship:SubclassRelationship:[SubclassType type, Node subclassNode, Node superclassNode]:null",
            "com.google.javascript.jscomp.CodingConvention:getAbstractMethodName:[]:String",
            "com.google.javascript.jscomp.CodingConvention:isConstant:[String variableName]:boolean",
            "com.google.javascript.jscomp.CodingConvention:isExported:[String name, boolean local]:boolean",
            "com.google.javascript.jscomp.CodingConvention\\$DelegateRelationship:DelegateRelationship:[String delegateBase, String delegator]:null",
            "com.google.javascript.jscomp.CodingConvention:isPropertyTestFunction:[Node call]:boolean",
            "com.google.javascript.jscomp.CodingConvention:isVarArgsParameter:[Node parameter]:boolean",
            "com.google.javascript.jscomp.CodingConvention:isValidEnumKey:[String key]:boolean",
            "com.google.javascript.jscomp.CodingConvention:getExportSymbolFunction:[]:String",
            "com.google.javascript.jscomp.CodingConvention:getClassesDefinedByCall:[Node callNode]:SubclassRelationship",
            "com.google.javascript.jscomp.CodingConvention:getObjectLiteralCast:[NodeTraversal t, Node callNode]:ObjectLiteralCast",
            "com.google.javascript.jscomp.CodingConvention:applyDelegateRelationship:[ObjectType delegateSuperclass, ObjectType delegateBase, ObjectType delegator, FunctionType delegateProxy, FunctionType findDelegate]:void",
            "com.google.javascript.jscomp.CodingConvention:extractClassNameIfProvide:[Node node, Node parent]:String",
            "com.google.javascript.jscomp.CodingConvention:identifyTypeDefAssign:[Node n]:String",
            "com.google.javascript.jscomp.CodingConvention:isPrivate:[String name]:boolean",
            "com.google.javascript.jscomp.CodingConvention:getSingletonGetterClassName:[Node callNode]:String",
            "com.google.javascript.jscomp.CodingConvention:allowsVariableRedeclaration:[Scope scope, String name, Node parent]:boolean",
            "com.google.javascript.jscomp.CodingConvention:getGlobalObject:[]:String",
            "com.google.javascript.jscomp.CodingConvention\\$ObjectLiteralCast:ObjectLiteralCast:[String typeName, Node objectNode]:null",
            "com.google.javascript.jscomp.CodingConvention:applySubclassRelationship:[FunctionType parentCtor, FunctionType childCtor, SubclassType type]:void",
            "com.google.javascript.jscomp.CodingConvention:getDelegateRelationship:[Node callNode]:DelegateRelationship",
            "com.google.javascript.jscomp.CodingConvention:isExported:[String name]:boolean"
          ],
          "num": 30
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "-1"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "35",
            "36",
            "37",
            "38",
            "39",
            "40",
            "41",
            "42",
            "43",
            "44",
            "45",
            "46",
            "47",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57",
            "58",
            "59",
            "60",
            "61",
            "62",
            "63",
            "64",
            "65",
            "66",
            "67",
            "68",
            "69",
            "70",
            "71",
            "72",
            "73",
            "74",
            "75",
            "76",
            "77",
            "78",
            "79",
            "80",
            "81",
            "82",
            "83",
            "84",
            "85",
            "86",
            "87",
            "88",
            "89",
            "90",
            "91",
            "92",
            "93",
            "94",
            "95",
            "96",
            "97",
            "98",
            "99",
            "100",
            "101",
            "102",
            "103",
            "104",
            "105",
            "106",
            "107",
            "108",
            "109",
            "110",
            "111",
            "112",
            "113",
            "114",
            "115",
            "116",
            "117",
            "118",
            "119",
            "120",
            "121",
            "122",
            "123",
            "124",
            "125",
            "126",
            "127",
            "128",
            "129",
            "130",
            "131",
            "132",
            "133",
            "134",
            "135",
            "136",
            "137",
            "138",
            "139",
            "140",
            "141",
            "142",
            "143",
            "144",
            "145",
            "146",
            "147",
            "148",
            "149",
            "150",
            "151",
            "152",
            "153",
            "154",
            "155",
            "156",
            "157",
            "158",
            "159",
            "160",
            "161",
            "162",
            "163",
            "164",
            "165",
            "166",
            "167",
            "168",
            "169",
            "170",
            "171",
            "172",
            "173",
            "174",
            "175",
            "176",
            "177",
            "178",
            "179",
            "180",
            "181",
            "182",
            "183",
            "184",
            "185",
            "186",
            "187",
            "188",
            "189",
            "190",
            "191",
            "192",
            "193",
            "194",
            "195",
            "196",
            "197",
            "198",
            "199",
            "200",
            "201",
            "202",
            "203",
            "204",
            "205",
            "206",
            "207",
            "208",
            "209",
            "210",
            "211",
            "212",
            "213",
            "214",
            "215",
            "216",
            "217",
            "218",
            "219",
            "220",
            "221",
            "222",
            "223",
            "224",
            "225",
            "226",
            "227",
            "228",
            "229",
            "230",
            "231",
            "232",
            "233",
            "234",
            "235",
            "236",
            "237",
            "238",
            "239",
            "240",
            "241",
            "242",
            "243",
            "244",
            "245",
            "246",
            "247",
            "248",
            "249",
            "250",
            "251",
            "252",
            "253",
            "254",
            "255",
            "256",
            "257",
            "258",
            "259",
            "260",
            "261",
            "262",
            "263",
            "264",
            "265",
            "266",
            "267",
            "268",
            "269",
            "270",
            "271",
            "272",
            "273",
            "274",
            "275",
            "276",
            "277",
            "278",
            "279",
            "280",
            "281",
            "282",
            "283",
            "284",
            "285",
            "286",
            "287",
            "288",
            "289",
            "290",
            "291",
            "292",
            "293",
            "294",
            "295",
            "296",
            "297"
          ],
          "num": 297
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/jscomp/CodingConvention.java b/src/com/google/javascript/jscomp/CodingConvention.java\nnew file mode 100644\nindex 0000000..ef37732\n--- /dev/null\n+++ b/src/com/google/javascript/jscomp/CodingConvention.java\n@@ -0,0 +1,297 @@\n+/*\n+ * Copyright 2007 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.javascript.jscomp;\n+\n+import com.google.javascript.rhino.Node;\n+import com.google.javascript.rhino.jstype.FunctionType;\n+import com.google.javascript.rhino.jstype.JSTypeRegistry;\n+import com.google.javascript.rhino.jstype.ObjectType;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * CodingConvention defines a set of hooks to customize the behavior of the\n+ * Compiler for a specific team/company.\n+ *\n+ * // TODO(bolinfest): Tighten up this interface -- it is far too big.\n+ *\n+*\n+*\n+ */\n+public interface CodingConvention {\n+\n+  /**\n+   * This checks whether a given variable name, such as a name in all-caps\n+   * should be treated as if it had the @const annotation.\n+   *\n+   * @param variableName potentially constant variable name\n+   * @return {@code true} if the name should be treated as a constant.\n+   */\n+  public boolean isConstant(String variableName);\n+\n+  /**\n+   * This checks that a given {@code key} may be used as a key for an enum.\n+   *\n+   * @param key the potential key to an enum\n+   * @return {@code true} if the {@code key} may be used as an enum key,\n+   *     {@code false} otherwise\n+   */\n+  public boolean isValidEnumKey(String key);\n+\n+  /**\n+   * This checks whether a given parameter name should be treated as an\n+   * optional parameter as far as type checking or function call arg count\n+   * checking is concerned. Note that an optional function parameter may be\n+   * declared as a simple type and is automatically converted to a union of the\n+   * declared type and Undefined.\n+   *\n+   * @param parameter The parameter\u0027s node.\n+   * @return {@code true} if the parameter should be treated as an optional\n+   * parameter.\n+   */\n+  public boolean isOptionalParameter(Node parameter);\n+\n+  /**\n+   * This checks whether a given parameter should be treated as a marker\n+   * for a variable argument list function. A VarArgs parameter must be the\n+   * last parameter in a function declaration.\n+   *\n+   * @param parameter The parameter\u0027s node.\n+   * @return {@code true} if the parameter should be treated as a variable\n+   * length parameter.\n+   */\n+  public boolean isVarArgsParameter(Node parameter);\n+\n+  /**\n+   * Checks whether a global variable or function name should be treated as\n+   * exported, or externally referenceable.\n+   *\n+   * @param name A global variable or function name.\n+   * @param local {@code true} if the name is a local variable.\n+   * @return {@code true} if the name should be considered exported.\n+   */\n+  public boolean isExported(String name, boolean local);\n+  \n+  /**\n+   * Should be isExported(name, true) || isExported(name, false);\n+   */\n+  public boolean isExported(String name);\n+\n+  /**\n+   * Checks whether a name should be considered private. Private global\n+   * variables and functions can only be referenced within the source file in\n+   * which they are declared. Private properties and methods should only be\n+   * accessed by the class that defines them.\n+   *\n+   * @param name The name of a global variable or function, or a method or\n+   *     property.\n+   * @return {@code true} if the name should be considered private.\n+   */\n+  public boolean isPrivate(String name);\n+\n+  /**\n+   * Checks if the given method defines a subclass relationship,\n+   * and if it does, returns information on that relationship. By default,\n+   * always returns null. Meant to be overridden by subclasses.\n+   *\n+   * @param callNode A CALL node.\n+   */\n+  public SubclassRelationship getClassesDefinedByCall(Node callNode);\n+\n+  /**\n+   * Returns true if passed a string referring to the superclass.  The string\n+   * will usually be from the string node at the right of a GETPROP, e.g.\n+   * this.superClass_.\n+   */\n+  public boolean isSuperClassReference(String propertyName);\n+\n+  /**\n+   * Convenience method for determining provided dependencies amongst different\n+   * js scripts.\n+   */\n+  public String extractClassNameIfProvide(Node node, Node parent);\n+\n+  /**\n+   * Convenience method for determining required dependencies amongst different\n+   * js scripts.\n+   */\n+  public String extractClassNameIfRequire(Node node, Node parent);\n+\n+  /**\n+   * Function name used when exporting properties.\n+   * Signature: fn(object, publicName, symbol).\n+   * @return function name.\n+   */\n+  public String getExportPropertyFunction();\n+\n+  /**\n+   * Function name used when exporting symbols.\n+   * Signature: fn(publicPath, object).\n+   * @return function name.\n+   */\n+  public String getExportSymbolFunction();\n+\n+  /**\n+   * Checks if the given CALL node is forward-declaring any types,\n+   * and returns the name of the types if it is.\n+   */\n+  public List\u003cString\u003e identifyTypeDeclarationCall(Node n);\n+\n+  /**\n+   * Checks if the given ASSIGN node is a typedef, and returns the\n+   * name of the type if it is.\n+   */\n+  public String identifyTypeDefAssign(Node n);\n+\n+  /**\n+   * In many JS libraries, the function that produces inheritance also\n+   * adds properties to the superclass and/or subclass.\n+   */\n+  public void applySubclassRelationship(FunctionType parentCtor,\n+      FunctionType childCtor, SubclassType type);\n+\n+  /**\n+   * Function name for abstract methods. An abstract method can be assigned to\n+   * an interface method instead of an anonymous function in order to avoid\n+   * linter warnings produced by assigning a function without a return value\n+   * where a return value is expected.\n+   * @return function name.\n+   */\n+  public String getAbstractMethodName();\n+\n+  /**\n+   * Checks if the given method defines a singleton getter, and if it does,\n+   * returns the name of the class with the singleton getter. By default, always\n+   * returns null. Meant to be overridden by subclasses.\n+   *\n+   * @param callNode A CALL node.\n+   */\n+  public String getSingletonGetterClassName(Node callNode);\n+\n+  /**\n+   * In many JS libraries, the function that adds a singleton getter to a class\n+   * adds properties to the class.\n+   */\n+  public void applySingletonGetter(FunctionType functionType,\n+      FunctionType getterType, ObjectType objectType);\n+\n+  public DelegateRelationship getDelegateRelationship(Node callNode);\n+\n+  /**\n+   * In many JS libraries, the function that creates a delegate relationship\n+   * also adds properties to the delegator and delegate base.\n+   */\n+  public void applyDelegateRelationship(\n+      ObjectType delegateSuperclass, ObjectType delegateBase,\n+      ObjectType delegator, FunctionType delegateProxy,\n+      FunctionType findDelegate);\n+\n+  /**\n+   * @return the name of the delegate superclass.\n+   */\n+  public String getDelegateSuperclassName();\n+\n+  /**\n+   * Defines the delegate proxy properties. Their types depend on properties of\n+   * the delegate base methods.\n+   */\n+  public void defineDelegateProxyProperties(\n+      JSTypeRegistry registry, Scope scope,\n+      Map\u003cObjectType, ObjectType\u003e delegateProxyMap);\n+\n+  /**\n+   * Gets the name of the global object.\n+   */\n+  public String getGlobalObject();\n+\n+  public boolean allowsVariableRedeclaration(Scope scope, String name,\n+      Node parent);\n+\n+  /**\n+   * Whether this CALL function is testing for the existence of a property.\n+   */\n+  public boolean isPropertyTestFunction(Node call);\n+\n+  /**\n+   * Checks if the given method performs a object literal cast, and if it does,\n+   * returns information on the cast. By default, always returns null. Meant\n+   * to be overridden by subclasses.\n+   *\n+   * @param t The node traversal.\n+   * @param callNode A CALL node.\n+   */\n+  public ObjectLiteralCast getObjectLiteralCast(NodeTraversal t,\n+      Node callNode);\n+\n+  static enum SubclassType {\n+    INHERITS,\n+    MIXIN\n+  }\n+\n+  static class SubclassRelationship {\n+    final SubclassType type;\n+    final Node subclassNode;\n+    final Node superclassNode;\n+    final String subclassName;\n+    final String superclassName;\n+\n+    SubclassRelationship(SubclassType type,\n+        Node subclassNode, Node superclassNode) {\n+      this.type \u003d type;\n+      this.subclassNode \u003d subclassNode;\n+      this.superclassNode \u003d superclassNode;\n+      this.subclassName \u003d subclassNode.getQualifiedName();\n+      this.superclassName \u003d superclassNode.getQualifiedName();\n+    }\n+  }\n+\n+  /**\n+   * Delegates provides a mechanism and structure for identifying where classes\n+   * can call out to optional code to augment their functionality. The optional\n+   * code is isolated from the base code through the use of a subclass in the\n+   * optional code derived from the delegate class in the base code.\n+   */\n+  static class DelegateRelationship {\n+    /** The subclass in the base code. */\n+    final String delegateBase;\n+\n+    /** The class in the base code. */\n+    final String delegator;\n+\n+    DelegateRelationship(String delegateBase, String delegator) {\n+      this.delegateBase \u003d delegateBase;\n+      this.delegator \u003d delegator;\n+    }\n+  }\n+\n+  /**\n+   * An object literal cast provides a mechanism to cast object literals to\n+   * other types without a warning.\n+   */\n+  static class ObjectLiteralCast {\n+    /** Type to cast to. */\n+    final String typeName;\n+\n+    /** Object to cast. */\n+    final Node objectNode;\n+\n+    ObjectLiteralCast(String typeName, Node objectNode) {\n+      this.typeName \u003d typeName;\n+      this.objectNode \u003d objectNode;\n+    }\n+  }\n+}\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [2712,3089]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [3095,3170]"
        },
        {
          "type": "delete-tree",
          "from": "Javadoc [2712,2968]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/jscomp/CompilationLevel.java",
        "src/com/google/javascript/jscomp/CompilationLevel.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [],
          "num": 0
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "-1"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "35",
            "36",
            "37",
            "38",
            "39",
            "40",
            "41",
            "42",
            "43",
            "44",
            "45",
            "46",
            "47",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57",
            "58",
            "59",
            "60",
            "61",
            "62",
            "63",
            "64",
            "65",
            "66",
            "67",
            "68",
            "69",
            "70",
            "71",
            "72",
            "73",
            "74",
            "75",
            "76",
            "77",
            "78",
            "79",
            "80",
            "81",
            "82",
            "83",
            "84",
            "85",
            "86",
            "87",
            "88",
            "89",
            "90",
            "91",
            "92",
            "93",
            "94",
            "95",
            "96",
            "97",
            "98",
            "99",
            "100",
            "101",
            "102",
            "103",
            "104",
            "105",
            "106",
            "107",
            "108",
            "109",
            "110",
            "111",
            "112",
            "113",
            "114",
            "115",
            "116",
            "117",
            "118",
            "119",
            "120",
            "121",
            "122",
            "123",
            "124",
            "125",
            "126",
            "127",
            "128",
            "129",
            "130",
            "131",
            "132",
            "133",
            "134",
            "135",
            "136",
            "137",
            "138",
            "139",
            "140",
            "141",
            "142",
            "143",
            "144",
            "145",
            "146",
            "147",
            "148",
            "149",
            "150",
            "151",
            "152",
            "153",
            "154",
            "155",
            "156"
          ],
          "num": 156
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/jscomp/CompilationLevel.java b/src/com/google/javascript/jscomp/CompilationLevel.java\nnew file mode 100644\nindex 0000000..cb9b4da\n--- /dev/null\n+++ b/src/com/google/javascript/jscomp/CompilationLevel.java\n@@ -0,0 +1,156 @@\n+/*\n+ * Copyright 2009 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.javascript.jscomp;\n+\n+/**\n+ * A CompilationLevel represents the level of optimization that should be\n+ * applied when compiling JavaScript code.\n+ *\n+*\n+ */\n+public enum CompilationLevel {\n+\n+  /**\n+   * WHITESPACE_ONLY removes comments and extra whitespace in the input JS.\n+   */\n+  WHITESPACE_ONLY,\n+\n+  /**\n+   * SIMPLE_OPTIMIZATIONS performs transformations to the input JS that do not\n+   * require any changes to JS that depend on the input JS. For example,\n+   * function arguments are renamed (which should not matter to code that\n+   * depends on the input JS), but functions themselves are not renamed (which\n+   * would otherwise require external code to change to use the renamed function\n+   * names).\n+   */\n+  SIMPLE_OPTIMIZATIONS,\n+\n+  /**\n+   * ADVANCED_OPTIMIZATIONS aggressively reduces code size by renaming function\n+   * names and variables, removing code which is never called, etc.\n+   */\n+  ADVANCED_OPTIMIZATIONS,\n+  ;\n+\n+  private CompilationLevel() {}\n+\n+  public void setOptionsForCompilationLevel(CompilerOptions options) {\n+    switch (this) {\n+      case WHITESPACE_ONLY:\n+        applyBasicCompilationOptions(options);\n+        break;\n+      case SIMPLE_OPTIMIZATIONS:\n+        applySafeCompilationOptions(options);\n+        break;\n+      case ADVANCED_OPTIMIZATIONS:\n+        applyFullCompilationOptions(options);\n+        break;\n+      default:\n+        throw new RuntimeException(\"Unknown compilation level.\");\n+    }\n+  }\n+\n+  /**\n+   * Gets options that only strip whitespace and comments.\n+   * @param options The CompilerOptions object to set the options on.\n+   */\n+  private static void applyBasicCompilationOptions(CompilerOptions options) {\n+    options.skipAllCompilerPasses();\n+    options.checkGlobalThisLevel \u003d CheckLevel.OFF;\n+\n+    // Allows annotations that are not standard.\n+    options.setWarningLevel(DiagnosticGroups.NON_STANDARD_JSDOC,\n+        CheckLevel.OFF);\n+  }\n+\n+  /**\n+   * Add options that are safe. Safe means options that won\u0027t break the\n+   * JavaScript code even if no symbols are exported and no coding convention\n+   * is used.\n+   * @param options The CompilerOptions object to set the options on.\n+   */\n+  private static void applySafeCompilationOptions(CompilerOptions options) {\n+    // Does not call applyBasicCompilationOptions(options) because the call to\n+    // skipAllCompilerPasses() cannot be easily undone.\n+    options.closurePass \u003d true;\n+    options.variableRenaming \u003d VariableRenamingPolicy.LOCAL;\n+    options.checkGlobalThisLevel \u003d CheckLevel.OFF;\n+    options.foldConstants \u003d true;\n+    options.removeConstantExpressions \u003d true;\n+    options.coalesceVariableNames \u003d true;\n+    options.deadAssignmentElimination \u003d true;\n+    options.extractPrototypeMemberDeclarations \u003d true;\n+    options.collapseVariableDeclarations \u003d true;\n+    options.convertToDottedProperties \u003d true;\n+    options.labelRenaming \u003d true;\n+    options.removeDeadCode \u003d true;\n+    options.optimizeArgumentsArray \u003d true;\n+    options.removeUnusedVars \u003d true;\n+    options.removeUnusedVarsInGlobalScope \u003d false;\n+\n+    // Allows annotations that are not standard.\n+    options.setWarningLevel(DiagnosticGroups.NON_STANDARD_JSDOC,\n+        CheckLevel.OFF);\n+  }\n+\n+  /**\n+   * Add the options that will work only if the user exported all the symbols\n+   * correctly.\n+   * @param options The CompilerOptions object to set the options on.\n+   */\n+  private static void applyFullCompilationOptions(CompilerOptions options) {\n+    // Do not call applySafeCompilationOptions(options) because the call can\n+    // create possible conflicts between multiple diagnostic groups.\n+\n+    // All the safe optimizations.\n+    options.closurePass \u003d true;\n+    options.checkGlobalThisLevel \u003d CheckLevel.OFF;\n+    options.foldConstants \u003d true;\n+    options.removeConstantExpressions \u003d true;\n+    options.coalesceVariableNames \u003d true;\n+    options.deadAssignmentElimination \u003d true;\n+    options.extractPrototypeMemberDeclarations \u003d true;\n+    options.collapseVariableDeclarations \u003d true;\n+    options.convertToDottedProperties \u003d true;\n+    options.rewriteFunctionExpressions \u003d true;\n+    options.labelRenaming \u003d true;\n+    options.removeDeadCode \u003d true;\n+    options.optimizeArgumentsArray \u003d true;\n+\n+    // All the advance optimizations.\n+    options.variableRenaming \u003d VariableRenamingPolicy.ALL;\n+    options.propertyRenaming \u003d PropertyRenamingPolicy.ALL_UNQUOTED;\n+    options.removeUnusedPrototypeProperties \u003d true;\n+    options.removeUnusedPrototypePropertiesInExterns \u003d true;\n+    options.collapseAnonymousFunctions \u003d true;\n+    options.collapseProperties \u003d true;\n+    options.rewriteFunctionExpressions \u003d true;\n+    options.devirtualizePrototypeMethods \u003d true;\n+    options.smartNameRemoval \u003d true;\n+    options.inlineConstantVars \u003d true;\n+    options.inlineFunctions \u003d true;\n+    options.inlineGetters \u003d true;\n+    options.inlineVariables \u003d true;\n+    // Remove unused vars also removes unused functions.\n+    options.removeUnusedVars \u003d true;\n+    options.removeUnusedVarsInGlobalScope \u003d true;\n+\n+    // Kindly tell the user that they have JsDocs that we don\u0027t understand.\n+    options.setWarningLevel(DiagnosticGroups.NON_STANDARD_JSDOC,\n+        CheckLevel.WARNING);\n+  }\n+}\n",
      "operations": [
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [3358,3400]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/jscomp/Compiler.java",
        "src/com/google/javascript/jscomp/Compiler.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [
            "com.google.javascript.jscomp.Compiler:init:[JSSourceFile[] externs, JSSourceFile[] inputs, CompilerOptions options]:void",
            "com.google.javascript.jscomp.Compiler:compile:[JSSourceFile[] externs, JSModule[] modules, CompilerOptions options]:Result",
            "com.google.javascript.jscomp.Compiler:parseSyntheticCode:[String fileName, String js]:Node",
            "com.google.javascript.jscomp.Compiler:aliasStrings:[Set\u003cString\u003e aliasableStrings, boolean aliasAllStrings, String aliasStringsBlacklist, boolean outputStringUsage]:void",
            "com.google.javascript.jscomp.Compiler:newTracer:[String passName]:Tracer",
            "com.google.javascript.jscomp.Compiler:getScopeCreator:[]:ScopeCreator",
            "com.google.javascript.jscomp.Compiler:process:[CompilerPass p]:void",
            "com.google.javascript.jscomp.Compiler\\$CodeBuilder:append:[String str]:CodeBuilder",
            "com.google.javascript.jscomp.Compiler:maybeSanityCheck:[String passName]:void",
            "com.google.javascript.jscomp.Compiler:getReverseAbstractInterpreter:[]:ReverseAbstractInterpreter",
            "com.google.javascript.jscomp.Compiler:invertContextualRenaming:[]:void",
            "com.google.javascript.jscomp.Compiler:instrumentFunctions:[]:void",
            "com.google.javascript.jscomp.Compiler:throwInternalError:[String message, Exception cause]:void",
            "com.google.javascript.jscomp.Compiler:getAstDotGraph:[]:String",
            "com.google.javascript.jscomp.Compiler:setLoggingLevel:[Level level]:void",
            "com.google.javascript.jscomp.Compiler:createPassConfigInternal:[]:PassConfig",
            "com.google.javascript.jscomp.Compiler:toSourceArray:[final JSModule module]:String[]",
            "com.google.javascript.jscomp.Compiler:createDefaultOptions:[]:CompilerOptions",
            "com.google.javascript.jscomp.Compiler:getWarnings:[]:JSError[]",
            "com.google.javascript.jscomp.Compiler:extractPrototypeMemberDeclarations:[]:void",
            "com.google.javascript.jscomp.Compiler:isIdeMode:[]:boolean",
            "com.google.javascript.jscomp.Compiler:parseTestCode:[String js]:Node",
            "com.google.javascript.jscomp.Compiler:compile:[]:Result",
            "com.google.javascript.jscomp.Compiler:setNormalized:[]:void",
            "com.google.javascript.jscomp.Compiler:toSource:[Node n]:String",
            "com.google.javascript.jscomp.Compiler:setState:[IntermediateState state]:void",
            "com.google.javascript.jscomp.Compiler:normalize:[]:void",
            "com.google.javascript.jscomp.Compiler:report:[JSError error]:void",
            "com.google.javascript.jscomp.Compiler:initInputsByNameMap:[]:void",
            "com.google.javascript.jscomp.Compiler:compileInternal:[]:void",
            "com.google.javascript.jscomp.Compiler:renameProperties:[boolean generatePseudoNames, AnonymousFunctionNamingPolicy anonFunctionNamePolicy, VariableMap prevPropertyMap]:void",
            "com.google.javascript.jscomp.Compiler:getModuleGraph:[]:JSModuleGraph",
            "com.google.javascript.jscomp.Compiler:moveFunctionDeclarations:[]:void",
            "com.google.javascript.jscomp.Compiler:normalizeNodeTypes:[Node root]:void",
            "com.google.javascript.jscomp.Compiler:removeChangeHandler:[CodeChangeHandler handler]:void",
            "com.google.javascript.jscomp.Compiler\\$CodeBuilder:reset:[]:void",
            "com.google.javascript.jscomp.Compiler\\$CodeBuilder:getLength:[]:int",
            "com.google.javascript.jscomp.Compiler:stopTracer:[Tracer t, String passName]:void",
            "com.google.javascript.jscomp.Compiler:toSource:[]:String",
            "com.google.javascript.jscomp.Compiler:removeTryCatchFinally:[]:void",
            "com.google.javascript.jscomp.Compiler:toSource:[final JSModule module]:String",
            "com.google.javascript.jscomp.Compiler:convertToDottedProperties:[]:void",
            "com.google.javascript.jscomp.Compiler:setErrorManager:[ErrorManager errorManager]:void",
            "com.google.javascript.jscomp.Compiler:compile:[JSSourceFile extern, JSSourceFile[] input, CompilerOptions options]:Result",
            "com.google.javascript.jscomp.Compiler:recordFunctionInformation:[]:void",
            "com.google.javascript.jscomp.Compiler:getErrors:[]:JSError[]",
            "com.google.javascript.jscomp.Compiler:getErrorManager:[]:ErrorManager",
            "com.google.javascript.jscomp.Compiler\\$CodeBuilder:getLineIndex:[]:int",
            "com.google.javascript.jscomp.Compiler:objectPropertyStringPostprocess:[]:void",
            "com.google.javascript.jscomp.Compiler:getState:[]:IntermediateState",
            "com.google.javascript.jscomp.Compiler\\$CodeBuilder:getColumnIndex:[]:int",
            "com.google.javascript.jscomp.Compiler:getAllInputsFromModules:[]:CompilerInput[]",
            "com.google.javascript.jscomp.Compiler:ambiguateProperties:[char[] reservedCharacters]:void",
            "com.google.javascript.jscomp.Compiler:isTypeCheckingEnabled:[]:boolean",
            "com.google.javascript.jscomp.Compiler:setPassConfig:[PassConfig passes]:void",
            "com.google.javascript.jscomp.Compiler:Compiler:[ErrorManager errorManager]:null",
            "com.google.javascript.jscomp.Compiler:makeCompilerInput:[JSSourceFile[] files, boolean isExtern]:CompilerInput[]",
            "com.google.javascript.jscomp.Compiler:getCssRenamingMap:[]:CssRenamingMap",
            "com.google.javascript.jscomp.Compiler:flowSensitiveInlineVariables:[]:void",
            "com.google.javascript.jscomp.Compiler:aliasExternals:[]:void",
            "com.google.javascript.jscomp.Compiler:sanityCheckVars:[]:void",
            "com.google.javascript.jscomp.Compiler:addChangeHandler:[CodeChangeHandler handler]:void",
            "com.google.javascript.jscomp.Compiler:addToDebugLog:[String str]:void",
            "com.google.javascript.jscomp.Compiler:renameVars:[String renamePrefix, boolean renameLocalVarsOnly, AnonymousFunctionNamingPolicy anonFunctionNamePolicy, VariableMap prevVariableMap]:void",
            "com.google.javascript.jscomp.Compiler\\$IntermediateState:IntermediateState:[]:null",
            "com.google.javascript.jscomp.Compiler:aliasKeywords:[]:void",
            "com.google.javascript.jscomp.Compiler:renamePrototypes:[boolean aggressive, AnonymousFunctionNamingPolicy anonFunctionNamePolicy, VariableMap prevPropertyMap]:void",
            "com.google.javascript.jscomp.Compiler:reportCodeChange:[]:void",
            "com.google.javascript.jscomp.Compiler:stripCode:[Set\u003cString\u003e stripTypes, Set\u003cString\u003e stripNameSuffixes, Set\u003cString\u003e stripTypePrefixes, Set\u003cString\u003e stripNamePrefixes]:void",
            "com.google.javascript.jscomp.Compiler:setCodingConvention:[CodingConvention convention]:void",
            "com.google.javascript.jscomp.Compiler:Compiler:[PrintStream stream]:null",
            "com.google.javascript.jscomp.Compiler:acquireSymbolTable:[]:SymbolTable",
            "com.google.javascript.jscomp.Compiler:isNormalized:[]:boolean",
            "com.google.javascript.jscomp.Compiler:rewriteFunctionExpressions:[]:void",
            "com.google.javascript.jscomp.Compiler:getTypeRegistry:[]:JSTypeRegistry",
            "com.google.javascript.jscomp.Compiler:getErrorCount:[]:int",
            "com.google.javascript.jscomp.Compiler:compile:[JSSourceFile extern, JSSourceFile input, CompilerOptions options]:Result",
            "com.google.javascript.jscomp.Compiler:annotateCodingConvention:[Node root]:void",
            "com.google.javascript.jscomp.Compiler:endPass:[]:void",
            "com.google.javascript.jscomp.Compiler:optimize:[]:void",
            "com.google.javascript.jscomp.Compiler:externExports:[]:void",
            "com.google.javascript.jscomp.Compiler:getFunctionalInformationMap:[]:FunctionInformationMap",
            "com.google.javascript.jscomp.Compiler:toSourceArray:[]:String[]",
            "com.google.javascript.jscomp.Compiler:parseInputs:[]:Node",
            "com.google.javascript.jscomp.Compiler:checkFirstModule:[JSModule[] modules]:void",
            "com.google.javascript.jscomp.Compiler:resetUniqueNameId:[]:void",
            "com.google.javascript.jscomp.Compiler:toSource:[final CodeBuilder cb, final int inputSeqNum, final Node root]:void",
            "com.google.javascript.jscomp.Compiler:parseSyntheticCode:[String js]:Node",
            "com.google.javascript.jscomp.Compiler:nameAnonymousFunctions:[AnonymousFunctionNamingPolicy policy]:void",
            "com.google.javascript.jscomp.Compiler:runCustomPasses:[CustomPassExecutionTime executionTime]:void",
            "com.google.javascript.jscomp.Compiler\\$CodeBuilder:toString:[]:String",
            "com.google.javascript.jscomp.Compiler\\$CodeBuilder:endsWith:[String suffix]:boolean",
            "com.google.javascript.jscomp.Compiler:collapseAnonymousFunctions:[]:void",
            "com.google.javascript.jscomp.Compiler:getDefaultErrorReporter:[]:ErrorReporter",
            "com.google.javascript.jscomp.Compiler:getCodingConvention:[]:CodingConvention",
            "com.google.javascript.jscomp.Compiler:getUniqueNameIdSupplier:[]:Supplier\u003cString\u003e",
            "com.google.javascript.jscomp.Compiler:addIncrementalSourceAst:[JsAst ast]:void",
            "com.google.javascript.jscomp.Compiler:getNodeForCodeInsertion:[JSModule module]:Node",
            "com.google.javascript.jscomp.Compiler:Compiler:[]:null",
            "com.google.javascript.jscomp.Compiler:compile:[JSSourceFile[] externs, JSSourceFile[] inputs, CompilerOptions options]:Result",
            "com.google.javascript.jscomp.Compiler:getSourceRegion:[String sourceName, int lineNumber]:Region",
            "com.google.javascript.jscomp.Compiler:getTopScope:[]:Scope",
            "com.google.javascript.jscomp.Compiler:getSourceLine:[String sourceName, int lineNumber]:String",
            "com.google.javascript.jscomp.Compiler:getWarningCount:[]:int",
            "com.google.javascript.jscomp.Compiler:getSourceMap:[]:SourceMap",
            "com.google.javascript.jscomp.Compiler:newExternInput:[String name]:CompilerInput",
            "com.google.javascript.jscomp.Compiler:computeFunctionNames:[]:void",
            "com.google.javascript.jscomp.Compiler:nextUniqueNameId:[]:int",
            "com.google.javascript.jscomp.Compiler:coalesceVariableNames:[]:void",
            "com.google.javascript.jscomp.Compiler:getVariableMap:[]:VariableMap",
            "com.google.javascript.jscomp.Compiler:compile:[JSSourceFile extern, JSModule[] modules, CompilerOptions options]:Result",
            "com.google.javascript.jscomp.Compiler:getRoot:[]:Node",
            "com.google.javascript.jscomp.Compiler:init:[JSSourceFile[] externs, JSModule[] modules, CompilerOptions options]:void",
            "com.google.javascript.jscomp.Compiler:collapseVariableDeclarations:[]:void",
            "com.google.javascript.jscomp.Compiler:rebuildInputsFromModules:[]:void",
            "com.google.javascript.jscomp.Compiler:getPassConfig:[]:PassConfig",
            "com.google.javascript.jscomp.Compiler:getResult:[]:Result",
            "com.google.javascript.jscomp.Compiler:getPropertyMap:[]:VariableMap",
            "com.google.javascript.jscomp.Compiler:getOptions:[]:CompilerOptions",
            "com.google.javascript.jscomp.Compiler:renameLabels:[]:void",
            "com.google.javascript.jscomp.Compiler:hasHaltingErrors:[]:boolean",
            "com.google.javascript.jscomp.Compiler:disableThreads:[]:void",
            "com.google.javascript.jscomp.Compiler:parse:[]:void",
            "com.google.javascript.jscomp.Compiler:hasErrors:[]:boolean",
            "com.google.javascript.jscomp.Compiler:getMessages:[]:JSError[]",
            "com.google.javascript.jscomp.Compiler:setCssRenamingMap:[CssRenamingMap map]:void",
            "com.google.javascript.jscomp.Compiler:setUnnormalized:[]:void",
            "com.google.javascript.jscomp.Compiler:check:[]:void",
            "com.google.javascript.jscomp.Compiler:isInliningForbidden:[]:boolean",
            "com.google.javascript.jscomp.Compiler:computeCFG:[]:ControlFlowGraph\u003cNode\u003e",
            "com.google.javascript.jscomp.Compiler:getInput:[String name]:CompilerInput",
            "com.google.javascript.jscomp.Compiler:getTypeValidator:[]:TypeValidator",
            "com.google.javascript.jscomp.Compiler:parse:[JSSourceFile file]:Node",
            "com.google.javascript.jscomp.Compiler:createMessageFormatter:[]:MessageFormatter",
            "com.google.javascript.jscomp.Compiler:getSourceFileByName:[String sourceName]:SourceFile",
            "com.google.javascript.jscomp.Compiler:runInCompilerThread:[final Callable\u003cT\u003e callable]:T",
            "com.google.javascript.jscomp.Compiler:precheck:[]:boolean",
            "com.google.javascript.jscomp.Compiler:startPass:[String passName]:void",
            "com.google.javascript.jscomp.Compiler:denormalize:[]:void",
            "com.google.javascript.jscomp.Compiler:processDefines:[]:void"
          ],
          "num": 140
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "-1"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "35",
            "36",
            "37",
            "38",
            "39",
            "40",
            "41",
            "42",
            "43",
            "44",
            "45",
            "46",
            "47",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57",
            "58",
            "59",
            "60",
            "61",
            "62",
            "63",
            "64",
            "65",
            "66",
            "67",
            "68",
            "69",
            "70",
            "71",
            "72",
            "73",
            "74",
            "75",
            "76",
            "77",
            "78",
            "79",
            "80",
            "81",
            "82",
            "83",
            "84",
            "85",
            "86",
            "87",
            "88",
            "89",
            "90",
            "91",
            "92",
            "93",
            "94",
            "95",
            "96",
            "97",
            "98",
            "99",
            "100",
            "101",
            "102",
            "103",
            "104",
            "105",
            "106",
            "107",
            "108",
            "109",
            "110",
            "111",
            "112",
            "113",
            "114",
            "115",
            "116",
            "117",
            "118",
            "119",
            "120",
            "121",
            "122",
            "123",
            "124",
            "125",
            "126",
            "127",
            "128",
            "129",
            "130",
            "131",
            "132",
            "133",
            "134",
            "135",
            "136",
            "137",
            "138",
            "139",
            "140",
            "141",
            "142",
            "143",
            "144",
            "145",
            "146",
            "147",
            "148",
            "149",
            "150",
            "151",
            "152",
            "153",
            "154",
            "155",
            "156",
            "157",
            "158",
            "159",
            "160",
            "161",
            "162",
            "163",
            "164",
            "165",
            "166",
            "167",
            "168",
            "169",
            "170",
            "171",
            "172",
            "173",
            "174",
            "175",
            "176",
            "177",
            "178",
            "179",
            "180",
            "181",
            "182",
            "183",
            "184",
            "185",
            "186",
            "187",
            "188",
            "189",
            "190",
            "191",
            "192",
            "193",
            "194",
            "195",
            "196",
            "197",
            "198",
            "199",
            "200",
            "201",
            "202",
            "203",
            "204",
            "205",
            "206",
            "207",
            "208",
            "209",
            "210",
            "211",
            "212",
            "213",
            "214",
            "215",
            "216",
            "217",
            "218",
            "219",
            "220",
            "221",
            "222",
            "223",
            "224",
            "225",
            "226",
            "227",
            "228",
            "229",
            "230",
            "231",
            "232",
            "233",
            "234",
            "235",
            "236",
            "237",
            "238",
            "239",
            "240",
            "241",
            "242",
            "243",
            "244",
            "245",
            "246",
            "247",
            "248",
            "249",
            "250",
            "251",
            "252",
            "253",
            "254",
            "255",
            "256",
            "257",
            "258",
            "259",
            "260",
            "261",
            "262",
            "263",
            "264",
            "265",
            "266",
            "267",
            "268",
            "269",
            "270",
            "271",
            "272",
            "273",
            "274",
            "275",
            "276",
            "277",
            "278",
            "279",
            "280",
            "281",
            "282",
            "283",
            "284",
            "285",
            "286",
            "287",
            "288",
            "289",
            "290",
            "291",
            "292",
            "293",
            "294",
            "295",
            "296",
            "297",
            "298",
            "299",
            "300",
            "301",
            "302",
            "303",
            "304",
            "305",
            "306",
            "307",
            "308",
            "309",
            "310",
            "311",
            "312",
            "313",
            "314",
            "315",
            "316",
            "317",
            "318",
            "319",
            "320",
            "321",
            "322",
            "323",
            "324",
            "325",
            "326",
            "327",
            "328",
            "329",
            "330",
            "331",
            "332",
            "333",
            "334",
            "335",
            "336",
            "337",
            "338",
            "339",
            "340",
            "341",
            "342",
            "343",
            "344",
            "345",
            "346",
            "347",
            "348",
            "349",
            "350",
            "351",
            "352",
            "353",
            "354",
            "355",
            "356",
            "357",
            "358",
            "359",
            "360",
            "361",
            "362",
            "363",
            "364",
            "365",
            "366",
            "367",
            "368",
            "369",
            "370",
            "371",
            "372",
            "373",
            "374",
            "375",
            "376",
            "377",
            "378",
            "379",
            "380",
            "381",
            "382",
            "383",
            "384",
            "385",
            "386",
            "387",
            "388",
            "389",
            "390",
            "391",
            "392",
            "393",
            "394",
            "395",
            "396",
            "397",
            "398",
            "399",
            "400",
            "401",
            "402",
            "403",
            "404",
            "405",
            "406",
            "407",
            "408",
            "409",
            "410",
            "411",
            "412",
            "413",
            "414",
            "415",
            "416",
            "417",
            "418",
            "419",
            "420",
            "421",
            "422",
            "423",
            "424",
            "425",
            "426",
            "427",
            "428",
            "429",
            "430",
            "431",
            "432",
            "433",
            "434",
            "435",
            "436",
            "437",
            "438",
            "439",
            "440",
            "441",
            "442",
            "443",
            "444",
            "445",
            "446",
            "447",
            "448",
            "449",
            "450",
            "451",
            "452",
            "453",
            "454",
            "455",
            "456",
            "457",
            "458",
            "459",
            "460",
            "461",
            "462",
            "463",
            "464",
            "465",
            "466",
            "467",
            "468",
            "469",
            "470",
            "471",
            "472",
            "473",
            "474",
            "475",
            "476",
            "477",
            "478",
            "479",
            "480",
            "481",
            "482",
            "483",
            "484",
            "485",
            "486",
            "487",
            "488",
            "489",
            "490",
            "491",
            "492",
            "493",
            "494",
            "495",
            "496",
            "497",
            "498",
            "499",
            "500",
            "501",
            "502",
            "503",
            "504",
            "505",
            "506",
            "507",
            "508",
            "509",
            "510",
            "511",
            "512",
            "513",
            "514",
            "515",
            "516",
            "517",
            "518",
            "519",
            "520",
            "521",
            "522",
            "523",
            "524",
            "525",
            "526",
            "527",
            "528",
            "529",
            "530",
            "531",
            "532",
            "533",
            "534",
            "535",
            "536",
            "537",
            "538",
            "539",
            "540",
            "541",
            "542",
            "543",
            "544",
            "545",
            "546",
            "547",
            "548",
            "549",
            "550",
            "551",
            "552",
            "553",
            "554",
            "555",
            "556",
            "557",
            "558",
            "559",
            "560",
            "561",
            "562",
            "563",
            "564",
            "565",
            "566",
            "567",
            "568",
            "569",
            "570",
            "571",
            "572",
            "573",
            "574",
            "575",
            "576",
            "577",
            "578",
            "579",
            "580",
            "581",
            "582",
            "583",
            "584",
            "585",
            "586",
            "587",
            "588",
            "589",
            "590",
            "591",
            "592",
            "593",
            "594",
            "595",
            "596",
            "597",
            "598",
            "599",
            "600",
            "601",
            "602",
            "603",
            "604",
            "605",
            "606",
            "607",
            "608",
            "609",
            "610",
            "611",
            "612",
            "613",
            "614",
            "615",
            "616",
            "617",
            "618",
            "619",
            "620",
            "621",
            "622",
            "623",
            "624",
            "625",
            "626",
            "627",
            "628",
            "629",
            "630",
            "631",
            "632",
            "633",
            "634",
            "635",
            "636",
            "637",
            "638",
            "639",
            "640",
            "641",
            "642",
            "643",
            "644",
            "645",
            "646",
            "647",
            "648",
            "649",
            "650",
            "651",
            "652",
            "653",
            "654",
            "655",
            "656",
            "657",
            "658",
            "659",
            "660",
            "661",
            "662",
            "663",
            "664",
            "665",
            "666",
            "667",
            "668",
            "669",
            "670",
            "671",
            "672",
            "673",
            "674",
            "675",
            "676",
            "677",
            "678",
            "679",
            "680",
            "681",
            "682",
            "683",
            "684",
            "685",
            "686",
            "687",
            "688",
            "689",
            "690",
            "691",
            "692",
            "693",
            "694",
            "695",
            "696",
            "697",
            "698",
            "699",
            "700",
            "701",
            "702",
            "703",
            "704",
            "705",
            "706",
            "707",
            "708",
            "709",
            "710",
            "711",
            "712",
            "713",
            "714",
            "715",
            "716",
            "717",
            "718",
            "719",
            "720",
            "721",
            "722",
            "723",
            "724",
            "725",
            "726",
            "727",
            "728",
            "729",
            "730",
            "731",
            "732",
            "733",
            "734",
            "735",
            "736",
            "737",
            "738",
            "739",
            "740",
            "741",
            "742",
            "743",
            "744",
            "745",
            "746",
            "747",
            "748",
            "749",
            "750",
            "751",
            "752",
            "753",
            "754",
            "755",
            "756",
            "757",
            "758",
            "759",
            "760",
            "761",
            "762",
            "763",
            "764",
            "765",
            "766",
            "767",
            "768",
            "769",
            "770",
            "771",
            "772",
            "773",
            "774",
            "775",
            "776",
            "777",
            "778",
            "779",
            "780",
            "781",
            "782",
            "783",
            "784",
            "785",
            "786",
            "787",
            "788",
            "789",
            "790",
            "791",
            "792",
            "793",
            "794",
            "795",
            "796",
            "797",
            "798",
            "799",
            "800",
            "801",
            "802",
            "803",
            "804",
            "805",
            "806",
            "807",
            "808",
            "809",
            "810",
            "811",
            "812",
            "813",
            "814",
            "815",
            "816",
            "817",
            "818",
            "819",
            "820",
            "821",
            "822",
            "823",
            "824",
            "825",
            "826",
            "827",
            "828",
            "829",
            "830",
            "831",
            "832",
            "833",
            "834",
            "835",
            "836",
            "837",
            "838",
            "839",
            "840",
            "841",
            "842",
            "843",
            "844",
            "845",
            "846",
            "847",
            "848",
            "849",
            "850",
            "851",
            "852",
            "853",
            "854",
            "855",
            "856",
            "857",
            "858",
            "859",
            "860",
            "861",
            "862",
            "863",
            "864",
            "865",
            "866",
            "867",
            "868",
            "869",
            "870",
            "871",
            "872",
            "873",
            "874",
            "875",
            "876",
            "877",
            "878",
            "879",
            "880",
            "881",
            "882",
            "883",
            "884",
            "885",
            "886",
            "887",
            "888",
            "889",
            "890",
            "891",
            "892",
            "893",
            "894",
            "895",
            "896",
            "897",
            "898",
            "899",
            "900",
            "901",
            "902",
            "903",
            "904",
            "905",
            "906",
            "907",
            "908",
            "909",
            "910",
            "911",
            "912",
            "913",
            "914",
            "915",
            "916",
            "917",
            "918",
            "919",
            "920",
            "921",
            "922",
            "923",
            "924",
            "925",
            "926",
            "927",
            "928",
            "929",
            "930",
            "931",
            "932",
            "933",
            "934",
            "935",
            "936",
            "937",
            "938",
            "939",
            "940",
            "941",
            "942",
            "943",
            "944",
            "945",
            "946",
            "947",
            "948",
            "949",
            "950",
            "951",
            "952",
            "953",
            "954",
            "955",
            "956",
            "957",
            "958",
            "959",
            "960",
            "961",
            "962",
            "963",
            "964",
            "965",
            "966",
            "967",
            "968",
            "969",
            "970",
            "971",
            "972",
            "973",
            "974",
            "975",
            "976",
            "977",
            "978",
            "979",
            "980",
            "981",
            "982",
            "983",
            "984",
            "985",
            "986",
            "987",
            "988",
            "989",
            "990",
            "991",
            "992",
            "993",
            "994",
            "995",
            "996",
            "997",
            "998",
            "999",
            "1000",
            "1001",
            "1002",
            "1003",
            "1004",
            "1005",
            "1006",
            "1007",
            "1008",
            "1009",
            "1010",
            "1011",
            "1012",
            "1013",
            "1014",
            "1015",
            "1016",
            "1017",
            "1018",
            "1019",
            "1020",
            "1021",
            "1022",
            "1023",
            "1024",
            "1025",
            "1026",
            "1027",
            "1028",
            "1029",
            "1030",
            "1031",
            "1032",
            "1033",
            "1034",
            "1035",
            "1036",
            "1037",
            "1038",
            "1039",
            "1040",
            "1041",
            "1042",
            "1043",
            "1044",
            "1045",
            "1046",
            "1047",
            "1048",
            "1049",
            "1050",
            "1051",
            "1052",
            "1053",
            "1054",
            "1055",
            "1056",
            "1057",
            "1058",
            "1059",
            "1060",
            "1061",
            "1062",
            "1063",
            "1064",
            "1065",
            "1066",
            "1067",
            "1068",
            "1069",
            "1070",
            "1071",
            "1072",
            "1073",
            "1074",
            "1075",
            "1076",
            "1077",
            "1078",
            "1079",
            "1080",
            "1081",
            "1082",
            "1083",
            "1084",
            "1085",
            "1086",
            "1087",
            "1088",
            "1089",
            "1090",
            "1091",
            "1092",
            "1093",
            "1094",
            "1095",
            "1096",
            "1097",
            "1098",
            "1099",
            "1100",
            "1101",
            "1102",
            "1103",
            "1104",
            "1105",
            "1106",
            "1107",
            "1108",
            "1109",
            "1110",
            "1111",
            "1112",
            "1113",
            "1114",
            "1115",
            "1116",
            "1117",
            "1118",
            "1119",
            "1120",
            "1121",
            "1122",
            "1123",
            "1124",
            "1125",
            "1126",
            "1127",
            "1128",
            "1129",
            "1130",
            "1131",
            "1132",
            "1133",
            "1134",
            "1135",
            "1136",
            "1137",
            "1138",
            "1139",
            "1140",
            "1141",
            "1142",
            "1143",
            "1144",
            "1145",
            "1146",
            "1147",
            "1148",
            "1149",
            "1150",
            "1151",
            "1152",
            "1153",
            "1154",
            "1155",
            "1156",
            "1157",
            "1158",
            "1159",
            "1160",
            "1161",
            "1162",
            "1163",
            "1164",
            "1165",
            "1166",
            "1167",
            "1168",
            "1169",
            "1170",
            "1171",
            "1172",
            "1173",
            "1174",
            "1175",
            "1176",
            "1177",
            "1178",
            "1179",
            "1180",
            "1181",
            "1182",
            "1183",
            "1184",
            "1185",
            "1186",
            "1187",
            "1188",
            "1189",
            "1190",
            "1191",
            "1192",
            "1193",
            "1194",
            "1195",
            "1196",
            "1197",
            "1198",
            "1199",
            "1200",
            "1201",
            "1202",
            "1203",
            "1204",
            "1205",
            "1206",
            "1207",
            "1208",
            "1209",
            "1210",
            "1211",
            "1212",
            "1213",
            "1214",
            "1215",
            "1216",
            "1217",
            "1218",
            "1219",
            "1220",
            "1221",
            "1222",
            "1223",
            "1224",
            "1225",
            "1226",
            "1227",
            "1228",
            "1229",
            "1230",
            "1231",
            "1232",
            "1233",
            "1234",
            "1235",
            "1236",
            "1237",
            "1238",
            "1239",
            "1240",
            "1241",
            "1242",
            "1243",
            "1244",
            "1245",
            "1246",
            "1247",
            "1248",
            "1249",
            "1250",
            "1251",
            "1252",
            "1253",
            "1254",
            "1255",
            "1256",
            "1257",
            "1258",
            "1259",
            "1260",
            "1261",
            "1262",
            "1263",
            "1264",
            "1265",
            "1266",
            "1267",
            "1268",
            "1269",
            "1270",
            "1271",
            "1272",
            "1273",
            "1274",
            "1275",
            "1276",
            "1277",
            "1278",
            "1279",
            "1280",
            "1281",
            "1282",
            "1283",
            "1284",
            "1285",
            "1286",
            "1287",
            "1288",
            "1289",
            "1290",
            "1291",
            "1292",
            "1293",
            "1294",
            "1295",
            "1296",
            "1297",
            "1298",
            "1299",
            "1300",
            "1301",
            "1302",
            "1303",
            "1304",
            "1305",
            "1306",
            "1307",
            "1308",
            "1309",
            "1310",
            "1311",
            "1312",
            "1313",
            "1314",
            "1315",
            "1316",
            "1317",
            "1318",
            "1319",
            "1320",
            "1321",
            "1322",
            "1323",
            "1324",
            "1325",
            "1326",
            "1327",
            "1328",
            "1329",
            "1330",
            "1331",
            "1332",
            "1333",
            "1334",
            "1335",
            "1336",
            "1337",
            "1338",
            "1339",
            "1340",
            "1341",
            "1342",
            "1343",
            "1344",
            "1345",
            "1346",
            "1347",
            "1348",
            "1349",
            "1350",
            "1351",
            "1352",
            "1353",
            "1354",
            "1355",
            "1356",
            "1357",
            "1358",
            "1359",
            "1360",
            "1361",
            "1362",
            "1363",
            "1364",
            "1365",
            "1366",
            "1367",
            "1368",
            "1369",
            "1370",
            "1371",
            "1372",
            "1373",
            "1374",
            "1375",
            "1376",
            "1377",
            "1378",
            "1379",
            "1380",
            "1381",
            "1382",
            "1383",
            "1384",
            "1385",
            "1386",
            "1387",
            "1388",
            "1389",
            "1390",
            "1391",
            "1392",
            "1393",
            "1394",
            "1395",
            "1396",
            "1397",
            "1398",
            "1399",
            "1400",
            "1401",
            "1402",
            "1403",
            "1404",
            "1405",
            "1406",
            "1407",
            "1408",
            "1409",
            "1410",
            "1411",
            "1412",
            "1413",
            "1414",
            "1415",
            "1416",
            "1417",
            "1418",
            "1419",
            "1420",
            "1421",
            "1422",
            "1423",
            "1424",
            "1425",
            "1426",
            "1427",
            "1428",
            "1429",
            "1430",
            "1431",
            "1432",
            "1433",
            "1434",
            "1435",
            "1436",
            "1437",
            "1438",
            "1439",
            "1440",
            "1441",
            "1442",
            "1443",
            "1444",
            "1445",
            "1446",
            "1447",
            "1448",
            "1449",
            "1450",
            "1451",
            "1452",
            "1453",
            "1454",
            "1455",
            "1456",
            "1457",
            "1458",
            "1459",
            "1460",
            "1461",
            "1462",
            "1463",
            "1464",
            "1465",
            "1466",
            "1467",
            "1468",
            "1469",
            "1470",
            "1471",
            "1472",
            "1473",
            "1474",
            "1475",
            "1476",
            "1477",
            "1478",
            "1479",
            "1480",
            "1481",
            "1482",
            "1483",
            "1484",
            "1485",
            "1486",
            "1487",
            "1488",
            "1489",
            "1490",
            "1491",
            "1492",
            "1493",
            "1494",
            "1495",
            "1496",
            "1497",
            "1498",
            "1499",
            "1500",
            "1501",
            "1502",
            "1503",
            "1504",
            "1505",
            "1506",
            "1507",
            "1508",
            "1509",
            "1510",
            "1511",
            "1512",
            "1513",
            "1514",
            "1515",
            "1516",
            "1517",
            "1518",
            "1519",
            "1520",
            "1521",
            "1522",
            "1523",
            "1524",
            "1525",
            "1526",
            "1527",
            "1528",
            "1529",
            "1530",
            "1531",
            "1532",
            "1533",
            "1534",
            "1535",
            "1536",
            "1537",
            "1538",
            "1539",
            "1540",
            "1541",
            "1542",
            "1543",
            "1544",
            "1545",
            "1546",
            "1547",
            "1548",
            "1549",
            "1550",
            "1551",
            "1552",
            "1553",
            "1554",
            "1555",
            "1556",
            "1557",
            "1558",
            "1559",
            "1560",
            "1561",
            "1562",
            "1563",
            "1564",
            "1565",
            "1566",
            "1567",
            "1568",
            "1569",
            "1570",
            "1571",
            "1572",
            "1573",
            "1574",
            "1575",
            "1576",
            "1577",
            "1578",
            "1579",
            "1580",
            "1581",
            "1582",
            "1583",
            "1584",
            "1585",
            "1586",
            "1587",
            "1588",
            "1589",
            "1590",
            "1591",
            "1592",
            "1593",
            "1594",
            "1595",
            "1596",
            "1597",
            "1598",
            "1599",
            "1600",
            "1601",
            "1602",
            "1603",
            "1604",
            "1605",
            "1606",
            "1607",
            "1608",
            "1609",
            "1610",
            "1611",
            "1612",
            "1613",
            "1614",
            "1615",
            "1616",
            "1617",
            "1618",
            "1619",
            "1620",
            "1621",
            "1622",
            "1623",
            "1624",
            "1625",
            "1626",
            "1627",
            "1628",
            "1629",
            "1630",
            "1631",
            "1632",
            "1633",
            "1634",
            "1635",
            "1636",
            "1637",
            "1638",
            "1639",
            "1640",
            "1641",
            "1642",
            "1643",
            "1644",
            "1645",
            "1646",
            "1647",
            "1648",
            "1649",
            "1650",
            "1651",
            "1652",
            "1653",
            "1654",
            "1655",
            "1656",
            "1657",
            "1658",
            "1659",
            "1660",
            "1661",
            "1662",
            "1663",
            "1664",
            "1665",
            "1666",
            "1667",
            "1668",
            "1669",
            "1670",
            "1671",
            "1672",
            "1673",
            "1674",
            "1675",
            "1676",
            "1677",
            "1678",
            "1679",
            "1680",
            "1681",
            "1682",
            "1683",
            "1684",
            "1685",
            "1686",
            "1687",
            "1688",
            "1689",
            "1690",
            "1691",
            "1692",
            "1693",
            "1694",
            "1695",
            "1696",
            "1697",
            "1698",
            "1699",
            "1700",
            "1701",
            "1702",
            "1703",
            "1704",
            "1705",
            "1706",
            "1707",
            "1708",
            "1709",
            "1710",
            "1711",
            "1712",
            "1713",
            "1714",
            "1715",
            "1716",
            "1717",
            "1718",
            "1719",
            "1720",
            "1721",
            "1722",
            "1723",
            "1724",
            "1725",
            "1726",
            "1727",
            "1728",
            "1729",
            "1730",
            "1731",
            "1732",
            "1733",
            "1734",
            "1735",
            "1736",
            "1737",
            "1738",
            "1739",
            "1740",
            "1741",
            "1742",
            "1743",
            "1744",
            "1745",
            "1746",
            "1747",
            "1748",
            "1749",
            "1750",
            "1751",
            "1752",
            "1753",
            "1754",
            "1755",
            "1756",
            "1757",
            "1758",
            "1759",
            "1760",
            "1761",
            "1762",
            "1763",
            "1764",
            "1765",
            "1766",
            "1767",
            "1768",
            "1769",
            "1770",
            "1771",
            "1772",
            "1773",
            "1774",
            "1775",
            "1776",
            "1777",
            "1778",
            "1779",
            "1780",
            "1781",
            "1782",
            "1783",
            "1784",
            "1785",
            "1786",
            "1787",
            "1788",
            "1789",
            "1790",
            "1791",
            "1792",
            "1793",
            "1794",
            "1795",
            "1796",
            "1797",
            "1798",
            "1799",
            "1800",
            "1801",
            "1802",
            "1803",
            "1804",
            "1805",
            "1806",
            "1807",
            "1808",
            "1809",
            "1810",
            "1811",
            "1812",
            "1813",
            "1814",
            "1815",
            "1816",
            "1817",
            "1818",
            "1819",
            "1820",
            "1821",
            "1822",
            "1823",
            "1824",
            "1825",
            "1826",
            "1827",
            "1828",
            "1829",
            "1830",
            "1831",
            "1832",
            "1833",
            "1834",
            "1835",
            "1836",
            "1837",
            "1838",
            "1839",
            "1840",
            "1841",
            "1842",
            "1843",
            "1844",
            "1845",
            "1846",
            "1847",
            "1848",
            "1849",
            "1850",
            "1851",
            "1852",
            "1853",
            "1854",
            "1855",
            "1856",
            "1857",
            "1858",
            "1859",
            "1860",
            "1861",
            "1862",
            "1863",
            "1864",
            "1865",
            "1866",
            "1867",
            "1868",
            "1869",
            "1870",
            "1871",
            "1872",
            "1873",
            "1874",
            "1875",
            "1876",
            "1877",
            "1878",
            "1879",
            "1880",
            "1881",
            "1882",
            "1883",
            "1884",
            "1885",
            "1886",
            "1887",
            "1888",
            "1889",
            "1890",
            "1891",
            "1892",
            "1893",
            "1894",
            "1895",
            "1896",
            "1897",
            "1898",
            "1899",
            "1900",
            "1901",
            "1902",
            "1903",
            "1904",
            "1905",
            "1906",
            "1907",
            "1908",
            "1909",
            "1910",
            "1911",
            "1912",
            "1913",
            "1914",
            "1915",
            "1916",
            "1917",
            "1918",
            "1919",
            "1920",
            "1921",
            "1922",
            "1923",
            "1924",
            "1925",
            "1926",
            "1927",
            "1928",
            "1929",
            "1930",
            "1931",
            "1932",
            "1933",
            "1934",
            "1935",
            "1936",
            "1937",
            "1938",
            "1939",
            "1940",
            "1941",
            "1942",
            "1943",
            "1944",
            "1945",
            "1946",
            "1947",
            "1948",
            "1949",
            "1950",
            "1951",
            "1952",
            "1953",
            "1954",
            "1955",
            "1956",
            "1957",
            "1958",
            "1959",
            "1960",
            "1961",
            "1962",
            "1963",
            "1964",
            "1965",
            "1966",
            "1967",
            "1968",
            "1969",
            "1970",
            "1971",
            "1972",
            "1973",
            "1974",
            "1975",
            "1976",
            "1977",
            "1978",
            "1979",
            "1980",
            "1981",
            "1982",
            "1983",
            "1984",
            "1985",
            "1986",
            "1987",
            "1988",
            "1989",
            "1990",
            "1991",
            "1992",
            "1993",
            "1994",
            "1995",
            "1996",
            "1997",
            "1998",
            "1999",
            "2000",
            "2001",
            "2002",
            "2003",
            "2004",
            "2005",
            "2006",
            "2007",
            "2008",
            "2009",
            "2010",
            "2011",
            "2012",
            "2013",
            "2014",
            "2015",
            "2016",
            "2017",
            "2018",
            "2019",
            "2020",
            "2021",
            "2022",
            "2023",
            "2024",
            "2025",
            "2026",
            "2027",
            "2028"
          ],
          "num": 2028
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/jscomp/Compiler.java b/src/com/google/javascript/jscomp/Compiler.java\nnew file mode 100644\nindex 0000000..e913372\n--- /dev/null\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n@@ -0,0 +1,2028 @@\n+/*\n+ * Copyright 2004 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.javascript.jscomp;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Preconditions;\n+import com.google.common.base.Supplier;\n+import com.google.common.base.Tracer;\n+import com.google.common.collect.Lists;\n+import com.google.common.collect.Maps;\n+import com.google.javascript.jscomp.CompilerOptions.DevMode;\n+import com.google.javascript.jscomp.CompilerOptions.TracerMode;\n+import com.google.javascript.jscomp.mozilla.rhino.ErrorReporter;\n+import com.google.javascript.rhino.Node;\n+import com.google.javascript.rhino.Token;\n+import com.google.javascript.rhino.jstype.JSTypeRegistry;\n+\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.io.PrintStream;\n+import java.io.Serializable;\n+import java.text.ParseException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.Callable;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+/**\n+ * Compiler (and the other classes in this package) does the following:\n+ * \u003cul\u003e\n+ * \u003cli\u003eparses JS code\n+ * \u003cli\u003echecks for undefined variables\n+ * \u003cli\u003eperforms optimizations such as constant folding and constants inlining\n+ * \u003cli\u003erenames variables (to short names)\n+ * \u003cli\u003eoutputs compact javascript code\n+ * \u003c/ul\u003e\n+ *\n+ * External variables are declared in \u0027externs\u0027 files. For instance, the file\n+ * may include definitions for global javascript/browser objects such as\n+ * window, document.\n+ *\n+*\n+*\n+ */\n+public class Compiler extends AbstractCompiler {\n+  CompilerOptions options_ \u003d createDefaultOptions();\n+\n+  private PassConfig passes \u003d null;\n+\n+  // The externs inputs\n+  private CompilerInput[] externs_;\n+\n+  // The JS source modules\n+  private JSModule[] modules_;\n+\n+  // The graph of the JS source modules\n+  private JSModuleGraph moduleGraph_;\n+\n+  // The JS source inputs\n+  private CompilerInput[] inputs_;\n+\n+  // error manager to which error management is delegated\n+  private ErrorManager errorManager;\n+\n+  // Cached data structures.\n+  private SymbolTable symbolTable \u003d null;\n+\n+  // Parse tree root nodes\n+  Node externsRoot;\n+  Node jsRoot;\n+  Node externAndJsRoot;\n+\n+  private Map\u003cString, CompilerInput\u003e inputsByName_;\n+\n+  /** Fully qualified function names and globally unique ids */\n+  private FunctionNames functionNames_;\n+\n+  /** The variable renaming map */\n+  private VariableMap variableMap_;\n+\n+  /** The property renaming map */\n+  private VariableMap propertyMap_;\n+\n+  /** The source code map */\n+  private SourceMap sourceMap_;\n+\n+  /** The externs created from the exports.  */\n+  private String externExports_ \u003d null;\n+\n+  /**\n+   * Ids for function inlining so that each declared name remains\n+   * unique.\n+   */\n+  private int uniqueNameId \u003d 0;\n+\n+  /**\n+   * Whether the optional \"normalization\" pass has been run.  Passes that\n+   * depend on the assumptions made there should check this value.\n+   */\n+  private boolean normalized \u003d false;\n+\n+  /** Whether to use threads. */\n+  private boolean useThreads \u003d true;\n+\n+  /** The naming map for anonymous functions */\n+  private VariableMap anonFunctionNameMap_;\n+\n+  /** The function information map */\n+  private FunctionInformationMap functionInformationMap_;\n+\n+  /** Debugging information */\n+  private final StringBuilder debugLog_ \u003d new StringBuilder();\n+\n+  /** Detects Google-specific coding conventions. */\n+  private CodingConvention codingConvention \u003d new GoogleCodingConvention();\n+\n+  private JSTypeRegistry typeRegistry;\n+\n+  private ReverseAbstractInterpreter abstractInterpreter;\n+  private final TypeValidator typeValidator;\n+\n+  public PerformanceTracker tracker;\n+\n+  // The oldErrorReporter exists so we can get errors from the JSTypeRegistry.\n+  private final com.google.javascript.rhino.ErrorReporter oldErrorReporter \u003d\n+      RhinoErrorReporter.forOldRhino(this);\n+\n+  // This error reporter gets the messages from the current Rhino parser.\n+  private final ErrorReporter defaultErrorReporter \u003d\n+      RhinoErrorReporter.forNewRhino(this);\n+\n+  /** Error strings used for reporting JSErrors */\n+  public static final DiagnosticType READ_ERROR \u003d DiagnosticType.error(\n+      \"JSC_READ_ERROR\", \"Cannot read: {0}\");\n+  public static final DiagnosticType OPTIMIZE_LOOP_ERROR \u003d DiagnosticType.error(\n+      \"JSC_OPTIMIZE_LOOP_ERROR\",\n+      \"Exceeded max number of optimization iterations: {0}\");\n+  public static final DiagnosticType MOTION_ITERATIONS_ERROR \u003d\n+      DiagnosticType.error(\"JSC_OPTIMIZE_LOOP_ERROR\",\n+          \"Exceeded max number of code motion iterations: {0}\");\n+  private static final DiagnosticType INPUT_MAP_PROP_PARSE \u003d\n+      DiagnosticType.error(\"JSC_INPUT_MAP_PROP_PARSE\",\n+          \"Input property map parse error: {0}\");\n+  private static final DiagnosticType INPUT_VAR_PROP_PARSE \u003d\n+      DiagnosticType.error(\"JSC_INPUT_MAP_VAR_PARSE\",\n+          \"Input variable map parse error: {0}\");\n+\n+  private static final long COMPILER_STACK_SIZE \u003d 1048576L;\n+\n+\n+  /**\n+   * Logger for the whole com.google.javascript.jscomp domain -\n+   * setting configuration for this logger affects all loggers\n+   *  in other classes within the compiler.\n+   */\n+  private static final Logger logger_ \u003d\n+      Logger.getLogger(\"com.google.javascript.jscomp\");\n+\n+  /**\n+   * Creates a Compiler that reports errors and warnings to its logger.\n+   */\n+  public Compiler() {\n+    addChangeHandler(recentChange);\n+    this.typeValidator \u003d new TypeValidator(this);\n+    setErrorManager(new LoggerErrorManager(createMessageFormatter(), logger_));\n+  }\n+\n+  /**\n+   * Creates n Compiler that reports errors and warnings to an output\n+   * stream.\n+   */\n+  public Compiler(PrintStream stream) {\n+    this();\n+    setErrorManager(\n+        new PrintStreamErrorManager(createMessageFormatter(), stream));\n+  }\n+\n+  /**\n+   * Creates a Compiler that uses a custom error manager.\n+   */\n+  public Compiler(ErrorManager errorManager) {\n+    this();\n+    setErrorManager(errorManager);\n+  }\n+\n+  CompilerOptions createDefaultOptions() {\n+    return new CompilerOptions();\n+  }\n+\n+  /**\n+   * Acquires the symbol table.\n+   */\n+  @Override\n+  SymbolTable acquireSymbolTable() {\n+    if (symbolTable \u003d\u003d null) {\n+      symbolTable \u003d new SymbolTable(this);\n+    }\n+    symbolTable.acquire();\n+    return symbolTable;\n+  }\n+\n+  /**\n+   * Sets the error manager.\n+   *\n+   * @param errorManager the error manager, it cannot be {@code null}\n+   */\n+  public void setErrorManager(ErrorManager errorManager) {\n+    Preconditions.checkNotNull(\n+        errorManager, \"the error manager cannot be null\");\n+    this.errorManager \u003d errorManager;\n+  }\n+\n+  /**\n+   * Creates a message formatter instance corresponding to the value of\n+   * {@link CompilerOptions}.\n+   */\n+  private MessageFormatter createMessageFormatter() {\n+    boolean colorize \u003d options_.shouldColorizeErrorOutput();\n+    return options_.errorFormat.toFormatter(this, colorize);\n+  }\n+\n+  /**\n+   * Initializes the instance state needed for a compile job.\n+   */\n+  public void init(JSSourceFile[] externs, JSSourceFile[] inputs,\n+      CompilerOptions options) {\n+    externs_ \u003d makeCompilerInput(externs, true);\n+    modules_ \u003d null;\n+    moduleGraph_ \u003d null;\n+    inputs_ \u003d makeCompilerInput(inputs, false);\n+    options_ \u003d options;\n+\n+    initInputsByNameMap();\n+  }\n+\n+  static final DiagnosticType MODULE_DEPENDENCY_ERROR \u003d\n+      DiagnosticType.error(\"JSC_MODULE_DEPENDENCY_ERROR\",\n+          \"Bad dependency: {0} -\u003e {1}. \"\n+              + \"Modules must be listed in dependency order.\");\n+\n+  /**\n+   * Initializes the instance state needed for a compile job.\n+   */\n+  public void init(JSSourceFile[] externs, JSModule[] modules,\n+      CompilerOptions options) {\n+\n+    checkFirstModule(modules);\n+\n+    externs_ \u003d makeCompilerInput(externs, true);\n+    modules_ \u003d modules;\n+    // Generate the module graph, and report any errors in the module\n+    // specification as errors.\n+    try {\n+      moduleGraph_ \u003d new JSModuleGraph(modules);\n+    } catch (JSModuleGraph.ModuleDependenceException e) {\n+      // problems with the module format.  Report as an error.  The\n+      // message gives all details.\n+      report(JSError.make(MODULE_DEPENDENCY_ERROR,\n+          e.getModule().getName(), e.getDependentModule().getName()));\n+      return;\n+    }\n+    inputs_ \u003d getAllInputsFromModules();\n+    options_ \u003d options;\n+\n+\n+    initInputsByNameMap();\n+  }\n+\n+  private CompilerInput[] makeCompilerInput(\n+      JSSourceFile[] files, boolean isExtern) {\n+    CompilerInput [] inputs \u003d new CompilerInput[files.length];\n+    for (int i \u003d 0; i \u003c files.length; ++i) {\n+      inputs[i] \u003d new CompilerInput(files[i], isExtern);\n+    }\n+    return inputs;\n+  }\n+\n+  private static final DiagnosticType EMPTY_MODULE_LIST_ERROR \u003d\n+      DiagnosticType.error(\"JSC_EMPTY_MODULE_LIST_ERROR\",\n+          \"At least one module must be provided\");\n+\n+  private static final DiagnosticType EMPTY_ROOT_MODULE_ERROR \u003d\n+      DiagnosticType.error(\"JSC_EMPTY_ROOT_MODULE_ERROR\",\n+          \"Root module \u0027{0}\u0027 must contain at least one source code input\");\n+\n+  /**\n+   * Verifies that at least one module has been provided and that the first one\n+   * has at least one source code input.\n+   */\n+  private void checkFirstModule(JSModule[] modules) {\n+    if (modules.length \u003d\u003d 0) {\n+      report(JSError.make(EMPTY_MODULE_LIST_ERROR));\n+    } else if (modules[0].getInputs().isEmpty()) {\n+      report(JSError.make(EMPTY_ROOT_MODULE_ERROR,\n+          modules[0].getName()));\n+    }\n+  }\n+\n+  static final DiagnosticType DUPLICATE_INPUT_IN_MODULES \u003d\n+      DiagnosticType.error(\"JSC_DUPLICATE_INPUT_IN_MODULES_ERROR\",\n+          \"Two modules cannot contain the same input, but module {0} and {1} \"\n+              + \"both include \\\"{2}\\\"\");\n+\n+  /**\n+   * Rebuilds the internal list of inputs by iterating over all modules.\n+   * This is necessary if inputs have been added to or removed from a module\n+   * after the {@link #init(JSSourceFile[], JSModule[], CompilerOptions)} call.\n+   */\n+  public void rebuildInputsFromModules() {\n+    inputs_ \u003d getAllInputsFromModules();\n+    initInputsByNameMap();\n+  }\n+\n+  /**\n+   * Builds a single list of all module inputs. Verifies that it contains no\n+   * duplicates.\n+   */\n+  private CompilerInput[] getAllInputsFromModules() {\n+    List\u003cCompilerInput\u003e inputs \u003d new ArrayList\u003cCompilerInput\u003e();\n+    Map\u003cString, JSModule\u003e inputMap \u003d new HashMap\u003cString, JSModule\u003e();\n+    for (JSModule module : modules_) {\n+      for (CompilerInput input : module.getInputs()) {\n+        String inputName \u003d input.getName();\n+        JSModule firstModule \u003d inputMap.get(inputName);\n+        if (firstModule \u003d\u003d null) {\n+          inputs.add(input);\n+          inputMap.put(inputName, module);\n+        } else {\n+          report(JSError.make(DUPLICATE_INPUT_IN_MODULES,\n+              firstModule.getName(), module.getName(), inputName));\n+        }\n+      }\n+    }\n+    if (hasErrors()) {\n+\n+      // There\u0027s no reason to bother parsing the code.\n+      return new CompilerInput[0];\n+    }\n+\n+    return inputs.toArray(new CompilerInput[inputs.size()]);\n+  }\n+\n+  static final DiagnosticType DUPLICATE_INPUT \u003d\n+      DiagnosticType.error(\"JSC_DUPLICATE_INPUT\", \"Duplicate input: {0}\");\n+  static final DiagnosticType DUPLICATE_EXTERN_INPUT \u003d\n+      DiagnosticType.error(\"JSC_DUPLICATE_EXTERN_INPUT\",\n+          \"Duplicate extern input: {0}\");\n+\n+  /**\n+   * Creates a map to make looking up an input by name fast. Also checks for\n+   * duplicate inputs.\n+   */\n+  void initInputsByNameMap() {\n+    inputsByName_ \u003d new HashMap\u003cString, CompilerInput\u003e();\n+    for (CompilerInput input : externs_) {\n+      String name \u003d input.getName();\n+      if (!inputsByName_.containsKey(name)) {\n+        inputsByName_.put(name, input);\n+      } else {\n+        report(JSError.make(DUPLICATE_EXTERN_INPUT, name));\n+      }\n+    }\n+    for (CompilerInput input : inputs_) {\n+      String name \u003d input.getName();\n+      if (!inputsByName_.containsKey(name)) {\n+        inputsByName_.put(name, input);\n+      } else {\n+        report(JSError.make(DUPLICATE_INPUT, name));\n+      }\n+    }\n+  }\n+\n+  public Result compile(\n+      JSSourceFile extern, JSSourceFile input, CompilerOptions options) {\n+     return compile(extern, new JSSourceFile[] { input }, options);\n+  }\n+\n+  public Result compile(\n+      JSSourceFile extern, JSSourceFile[] input, CompilerOptions options) {\n+     return compile(new JSSourceFile[] { extern }, input, options);\n+  }\n+\n+  public Result compile(\n+      JSSourceFile extern, JSModule[] modules, CompilerOptions options) {\n+     return compile(new JSSourceFile[] { extern }, modules, options);\n+  }\n+\n+  /**\n+   * Compiles a list of inputs.\n+   */\n+  public Result compile(JSSourceFile[] externs,\n+                        JSSourceFile[] inputs,\n+                        CompilerOptions options) {\n+\n+    // The compile method should only be called once.\n+    Preconditions.checkState(jsRoot \u003d\u003d null);\n+\n+    try {\n+      init(externs, inputs, options);\n+      if (hasErrors()) {\n+        return getResult();\n+      }\n+      return compile();\n+    } finally {\n+      Tracer t \u003d newTracer(\"generateReport\");\n+      errorManager.generateReport();\n+      stopTracer(t, \"generateReport\");\n+    }\n+  }\n+\n+  /**\n+   * Compiles a list of modules.\n+   */\n+  public Result compile(JSSourceFile[] externs,\n+                        JSModule[] modules,\n+                        CompilerOptions options) {\n+    // The compile method should only be called once.\n+    Preconditions.checkState(jsRoot \u003d\u003d null);\n+\n+    try {\n+      init(externs, modules, options);\n+      if (hasErrors()) {\n+        return getResult();\n+      }\n+      return compile();\n+    } finally {\n+      Tracer t \u003d newTracer(\"generateReport\");\n+      errorManager.generateReport();\n+      stopTracer(t, \"generateReport\");\n+    }\n+  }\n+\n+  private Result compile() {\n+    return runInCompilerThread(new Callable\u003cResult\u003e() {\n+      public Result call() throws Exception {\n+        compileInternal();\n+        return getResult();\n+      }\n+    });\n+  }\n+\n+  /**\n+   * Disable threads. This is for clients that run on AppEngine and\n+   * don\u0027t have threads.\n+   */\n+  public void disableThreads() {\n+    useThreads \u003d false;\n+  }\n+\n+  @SuppressWarnings(\"unchecked\")\n+  private \u003cT\u003e T runInCompilerThread(final Callable\u003cT\u003e callable) {\n+\n+    // Under JRE 1.6, the jscompiler overflows the stack when running on some\n+    // large or complex js code. Here we start a new thread with a larger\n+    // stack in order to let the compiler do its thing, without having to\n+    // increase the stack size for *every* thread (which is what -Xss does).\n+    // Might want to add thread pool support for clients that compile a lot.\n+\n+    final boolean dumpTraceReport \u003d options_.tracer.isOn();\n+    final Object[] result \u003d new Object[1];\n+    final Throwable[] exception \u003d new Throwable[1];\n+    Runnable runnable \u003d new Runnable() {\n+      public void run() {\n+        try {\n+          if (dumpTraceReport) {\n+            Tracer.initCurrentThreadTrace();\n+          }\n+          result[0] \u003d callable.call();\n+        } catch (Throwable e) {\n+          exception[0] \u003d e;\n+        } finally {\n+          if (dumpTraceReport) {\n+            Tracer.logAndClearCurrentThreadTrace();\n+          }\n+        }\n+      }\n+    };\n+\n+    if (useThreads) {\n+      Thread th \u003d new Thread(null, runnable, \"jscompiler\", COMPILER_STACK_SIZE);\n+      th.start();\n+      while (true) {\n+        try {\n+          th.join();\n+          break;\n+        } catch (InterruptedException ignore) {\n+          // ignore\n+        }\n+      }\n+    } else {\n+      runnable.run();\n+    }\n+\n+    // Pass on any exception caught by the runnable object.\n+    if (exception[0] !\u003d null) {\n+      throw new RuntimeException(exception[0]);\n+    }\n+\n+    return (T) result[0];\n+  }\n+\n+  private void compileInternal() {\n+    parse();\n+    if (hasErrors()) {\n+      return;\n+    }\n+\n+    if (!precheck()) {\n+      return;\n+    }\n+\n+    if (options_.nameAnonymousFunctionsOnly) {\n+      nameAnonymousFunctions(options_.anonymousFunctionNaming);\n+      return;\n+    }\n+\n+    if (!options_.skipAllPasses) {\n+      check();\n+      if (hasErrors()) {\n+        return;\n+      }\n+\n+      if (options_.externExportsPath !\u003d null) {\n+        externExports();\n+      }\n+\n+      // IDE-mode is defined to stop here, before the heavy rewriting begins.\n+      if (!options_.ideMode) {\n+        optimize();\n+      }\n+    }\n+\n+    if (options_.recordFunctionInformation) {\n+      recordFunctionInformation();\n+    }\n+  }\n+\n+  public void parse() {\n+    parseInputs();\n+  }\n+\n+  PassConfig getPassConfig() {\n+    if (passes \u003d\u003d null) {\n+      passes \u003d createPassConfigInternal();\n+    }\n+    return passes;\n+  }\n+\n+  /**\n+   * Create the passes object. Clients should use setPassConfig instead of\n+   * overriding this.\n+   */\n+  PassConfig createPassConfigInternal() {\n+    return new DefaultPassConfig(options_);\n+  }\n+\n+  /**\n+   * @param passes The PassConfig to use with this Compiler.\n+   * @throws NullPointerException if passes is null\n+   * @throws IllegalStateException if this.passes has already been assigned\n+   */\n+  public void setPassConfig(PassConfig passes) {\n+    // Important to check for null because if setPassConfig(null) is\n+    // called before this.passes is set, getPassConfig() will create a\n+    // new PassConfig object and use that, which is probably not what\n+    // the client wanted since he or she probably meant to use their\n+    // own PassConfig object.\n+    Preconditions.checkNotNull(passes);\n+\n+    if (this.passes !\u003d null) {\n+      throw new IllegalStateException(\"this.passes has already been assigned\");\n+    }\n+    this.passes \u003d passes;\n+  }\n+\n+  /**\n+   * Carry out any special checks or procedures that need to be done before\n+   * proceeding with rest of the compilation process.\n+   *\n+   * @return true, to continue with compilation\n+   */\n+  boolean precheck() {\n+    return true;\n+  }\n+\n+  public void check() {\n+    runCustomPasses(CustomPassExecutionTime.BEFORE_CHECKS);\n+\n+    PhaseOptimizer phaseOptimizer \u003d new PhaseOptimizer(this, tracker);\n+    if (options_.devMode \u003d\u003d DevMode.EVERY_PASS) {\n+      phaseOptimizer.setSanityCheck(sanityCheck);\n+    }\n+    phaseOptimizer.consume(getPassConfig().getChecks());\n+    phaseOptimizer.process(externsRoot, jsRoot);\n+    if (hasErrors()) {\n+      return;\n+    }\n+\n+    if (options_.instrumentationTemplate !\u003d null ||\n+        options_.recordFunctionInformation) {\n+      computeFunctionNames();\n+    }\n+\n+    if (options_.removeTryCatchFinally) {\n+      removeTryCatchFinally();\n+    }\n+\n+    if (!options_.stripTypes.isEmpty() ||\n+        !options_.stripNameSuffixes.isEmpty() ||\n+        !options_.stripTypePrefixes.isEmpty() ||\n+        !options_.stripNamePrefixes.isEmpty()) {\n+      stripCode(options_.stripTypes, options_.stripNameSuffixes,\n+          options_.stripTypePrefixes, options_.stripNamePrefixes);\n+    }\n+\n+    runCustomPasses(CustomPassExecutionTime.BEFORE_OPTIMIZATIONS);\n+\n+    // Ideally, this pass should be the first pass run, however:\n+    // 1) VariableReferenceCheck reports unexpected warnings if Normalize\n+    // is done first.\n+    // 2) ReplaceMessages, stripCode, and potentially custom passes rely on\n+    // unmodified local names.\n+    normalize();\n+\n+    // Create the source map if necessary.\n+    if (options_.sourceMapOutputPath !\u003d null) {\n+      this.sourceMap_ \u003d new SourceMap();\n+    }\n+  }\n+\n+  private void externExports() {\n+    logger_.info(\"Creating extern file for exports\");\n+    startPass(\"externExports\");\n+\n+    ExternExportsPass pass \u003d new ExternExportsPass(this);\n+    process(pass);\n+\n+    externExports_ \u003d pass.getGeneratedExterns();\n+\n+    endPass();\n+  }\n+\n+  void process(CompilerPass p) {\n+    p.process(externsRoot, jsRoot);\n+  }\n+\n+  private final PassFactory sanityCheck \u003d\n+      new PassFactory(\"sanityCheck\", false) {\n+    @Override\n+    protected CompilerPass createInternal(AbstractCompiler compiler) {\n+      return new SanityCheck(compiler);\n+    }\n+  };\n+\n+  private void maybeSanityCheck(String passName) {\n+    if (options_.devMode \u003d\u003d DevMode.EVERY_PASS) {\n+      sanityCheck.create(this).process(null, jsRoot);\n+    }\n+  }\n+\n+  /**\n+   * Removes try/catch/finally statements for easier debugging.\n+   */\n+  void removeTryCatchFinally() {\n+    logger_.info(\"Remove try/catch/finally\");\n+    startPass(\"removeTryCatchFinally\");\n+    RemoveTryCatch r \u003d new RemoveTryCatch(this);\n+    process(r);\n+    endPass();\n+  }\n+\n+  /**\n+   * Strips code for smaller compiled code. This is useful for removing debug\n+   * statements to prevent leaking them publicly.\n+   */\n+  void stripCode(Set\u003cString\u003e stripTypes, Set\u003cString\u003e stripNameSuffixes,\n+      Set\u003cString\u003e stripTypePrefixes, Set\u003cString\u003e stripNamePrefixes) {\n+    logger_.info(\"Strip code\");\n+    startPass(\"stripCode\");\n+    StripCode r \u003d new StripCode(this, stripTypes, stripNameSuffixes,\n+        stripTypePrefixes, stripNamePrefixes);\n+    process(r);\n+    endPass();\n+  }\n+\n+  /**\n+   * Alias string literals with global variables, to avoid creating lots of\n+   * transient objects.\n+   */\n+  private void aliasStrings(Set\u003cString\u003e aliasableStrings,\n+                            boolean aliasAllStrings,\n+                            String aliasStringsBlacklist,\n+                            boolean outputStringUsage) {\n+    logger_.info(\"Aliasing strings\");\n+    startPass(\"aliasStrings\");\n+    AliasStrings aliasStrings \u003d new AliasStrings(\n+        this,\n+        getModuleGraph(),\n+        aliasAllStrings ? null : aliasableStrings,\n+        aliasStringsBlacklist,\n+        outputStringUsage);\n+    process(aliasStrings);\n+    endPass();\n+  }\n+\n+  private void aliasKeywords() {\n+    logger_.info(\"Aliasing true/false/null\");\n+    startPass(\"aliasKeywords\");\n+    AliasKeywords aliasKeywords \u003d new AliasKeywords(this);\n+    process(aliasKeywords);\n+    endPass();\n+  }\n+\n+  /**\n+   * Runs custom passes that are designated to run at a particular time.\n+   */\n+  private void runCustomPasses(CustomPassExecutionTime executionTime) {\n+    if (options_.customPasses !\u003d null) {\n+      Tracer t \u003d newTracer(\"runCustomPasses\");\n+      try {\n+        for (CompilerPass p : options_.customPasses.get(executionTime)) {\n+          process(p);\n+        }\n+      } finally {\n+        stopTracer(t, \"runCustomPasses\");\n+      }\n+    }\n+  }\n+\n+  private Tracer currentTracer \u003d null;\n+  private String currentPassName \u003d null;\n+\n+  /**\n+   * Marks the beginning of a pass.\n+   */\n+  void startPass(String passName) {\n+    Preconditions.checkState(currentTracer \u003d\u003d null);\n+    currentPassName \u003d passName;\n+    currentTracer \u003d newTracer(passName);\n+  }\n+\n+  /**\n+   * Marks the end of a pass.\n+   */\n+  void endPass() {\n+    Preconditions.checkState(currentTracer !\u003d null,\n+        \"Tracer should not be null at the end of a pass.\");\n+    stopTracer(currentTracer, currentPassName);\n+    String passToCheck \u003d currentPassName;\n+    currentPassName \u003d null;\n+    currentTracer \u003d null;\n+\n+    maybeSanityCheck(passToCheck);\n+  }\n+\n+  /**\n+   * Returns a new tracer for the given pass name.\n+   */\n+  Tracer newTracer(String passName) {\n+    String comment \u003d passName\n+        + (recentChange.hasCodeChanged() ? \" on recently changed AST\" : \"\");\n+    if (options_.tracer.isOn()) {\n+      tracker.recordPassStart(passName);\n+    }\n+    return new Tracer(\"Compiler\", comment);\n+  }\n+\n+  void stopTracer(Tracer t, String passName) {\n+    long result \u003d t.stop();\n+    if (options_.tracer.isOn()) {\n+      tracker.recordPassStop(passName, result);\n+    }\n+  }\n+\n+  /**\n+   * Returns the result of the compilation.\n+   */\n+  public Result getResult() {\n+    return new Result(getErrors(), getWarnings(), debugLog_.toString(),\n+                      variableMap_, propertyMap_, anonFunctionNameMap_,\n+                      functionInformationMap_, sourceMap_, externExports_,\n+                      getPassConfig().getCssNames());\n+  }\n+\n+  /**\n+   * Returns an array constructed from errors + temporary warnings.\n+   */\n+  public JSError[] getMessages() {\n+    return getErrors();\n+  }\n+\n+  /**\n+   * Returns the array of errors (never null).\n+   */\n+  public JSError[] getErrors() {\n+    return errorManager.getErrors();\n+  }\n+\n+  /**\n+   * Returns the array of warnings (never null).\n+   */\n+  public JSError[] getWarnings() {\n+    return errorManager.getWarnings();\n+  }\n+\n+  /**\n+   * Returns the root node of the AST, which includes both externs and source.\n+   */\n+  public Node getRoot() {\n+    return externAndJsRoot;\n+  }\n+\n+  /**\n+   * Creates a new id for making unique names.\n+   */\n+  private int nextUniqueNameId() {\n+    return uniqueNameId++;\n+  }\n+\n+  /**\n+   * Resets the unique name id counter\n+   */\n+  @VisibleForTesting\n+  void resetUniqueNameId() {\n+    uniqueNameId \u003d 0;\n+  }\n+\n+  @Override\n+  Supplier\u003cString\u003e getUniqueNameIdSupplier() {\n+    final Compiler self \u003d this;\n+    return new Supplier\u003cString\u003e() {\n+      public String get() {\n+        return String.valueOf(self.nextUniqueNameId());\n+      }\n+    };\n+  }\n+\n+  /**\n+   * Set if the normalization pass has been done.\n+   * Note: non-private to enable test cases that require the Normalize pass.\n+   */\n+  void setNormalized() {\n+    normalized \u003d true;\n+  }\n+\n+  /**\n+   * Set once unnormalizing passes have been start.\n+   * Note: non-private to enable test cases that require the Normalize pass.\n+   */\n+  void setUnnormalized() {\n+    normalized \u003d false;\n+  }\n+\n+  @Override\n+  boolean isNormalized() {\n+    return normalized;\n+  }\n+\n+  //------------------------------------------------------------------------\n+  // Inputs\n+  //------------------------------------------------------------------------\n+\n+  // TODO(nicksantos): Decide which parts of these belong in an AbstractCompiler\n+  // interface, and which ones should always be injected.\n+\n+  @Override\n+  public CompilerInput getInput(String name) {\n+    return inputsByName_.get(name);\n+  }\n+\n+  @Override\n+  public CompilerInput newExternInput(String name) {\n+    if (inputsByName_.containsKey(name)) {\n+      throw new IllegalArgumentException(\"Conflicting externs name: \" + name);\n+    }\n+    SourceAst ast \u003d new SyntheticAst(name);\n+    CompilerInput input \u003d new CompilerInput(ast, name, true);\n+    inputsByName_.put(name, input);\n+    externsRoot.addChildToFront(ast.getAstRoot(this));\n+    return input;\n+  }\n+\n+  /** Add a source input dynamically. Intended for incremental compilation. */\n+  void addIncrementalSourceAst(JsAst ast) {\n+    String sourceName \u003d ast.getSourceFile().getName();\n+    Preconditions.checkState(\n+        getInput(sourceName) \u003d\u003d null,\n+        \"Duplicate input of name \" + sourceName);\n+    inputsByName_.put(sourceName, new CompilerInput(ast));\n+  }\n+\n+  @Override\n+  JSModuleGraph getModuleGraph() {\n+    return moduleGraph_;\n+  }\n+\n+  @Override\n+  public JSTypeRegistry getTypeRegistry() {\n+    if (typeRegistry \u003d\u003d null) {\n+      typeRegistry \u003d new JSTypeRegistry(oldErrorReporter);\n+    }\n+    return typeRegistry;\n+  }\n+\n+  @Override\n+  ScopeCreator getScopeCreator() {\n+    return getPassConfig().getScopeCreator();\n+  }\n+\n+  @Override\n+  public Scope getTopScope() {\n+    return getPassConfig().getTopScope();\n+  }\n+\n+  @Override\n+  public ReverseAbstractInterpreter getReverseAbstractInterpreter() {\n+    if (abstractInterpreter \u003d\u003d null) {\n+      ChainableReverseAbstractInterpreter interpreter \u003d\n+          new SemanticReverseAbstractInterpreter(\n+              getCodingConvention(), getTypeRegistry());\n+      if (options_.closurePass) {\n+        interpreter \u003d new ClosureReverseAbstractInterpreter(\n+            getCodingConvention(), getTypeRegistry())\n+            .append(interpreter).getFirst();\n+      }\n+      abstractInterpreter \u003d interpreter;\n+    }\n+    return abstractInterpreter;\n+  }\n+\n+  @Override\n+  TypeValidator getTypeValidator() {\n+    return typeValidator;\n+  }\n+\n+  //------------------------------------------------------------------------\n+  // Parsing\n+  //------------------------------------------------------------------------\n+\n+  /**\n+   * Parses the externs and main inputs.\n+   *\n+   * @return A synthetic root node whose two children are the externs root\n+   *     and the main root\n+   */\n+  Node parseInputs() {\n+    boolean devMode \u003d options_.devMode !\u003d DevMode.OFF;\n+\n+    // If old roots exist (we are parsing a second time), detach each of the\n+    // individual file parse trees.\n+    if (externsRoot !\u003d null) {\n+      externsRoot.detachChildren();\n+    }\n+    if (jsRoot !\u003d null) {\n+      jsRoot.detachChildren();\n+    }\n+\n+    // Parse main js sources.\n+    jsRoot \u003d new Node(Token.BLOCK);\n+    jsRoot.setIsSyntheticBlock(true);\n+\n+    if (options_.tracer.isOn()) {\n+      tracker \u003d new PerformanceTracker(jsRoot,\n+          options_.tracer \u003d\u003d TracerMode.ALL);\n+      addChangeHandler(tracker.getCodeChangeHandler());\n+    }\n+\n+    Tracer tracer \u003d newTracer(\"parseInputs\");\n+\n+    try {\n+      // Parse externs sources.\n+      externsRoot \u003d new Node(Token.BLOCK);\n+      externsRoot.setIsSyntheticBlock(true);\n+      for (CompilerInput input : externs_) {\n+        Node n \u003d input.getAstRoot(this);\n+        if (hasErrors()) {\n+          return null;\n+        }\n+        externsRoot.addChildToBack(n);\n+      }\n+\n+      for (CompilerInput input : inputs_) {\n+        Node n \u003d input.getAstRoot(this);\n+        if (hasErrors()) {\n+          return null;\n+        }\n+\n+        // Inputs can have a null AST during initial parse.\n+        if (n \u003d\u003d null) {\n+          continue;\n+        }\n+\n+        if (devMode) {\n+          sanityCheck.create(this).process(null, n);\n+          if (hasErrors()) {\n+            return null;\n+          }\n+        }\n+\n+        if (options_.sourceMapOutputPath !\u003d null ||\n+            options_.nameReferenceReportPath !\u003d null) {\n+\n+          // Annotate the nodes in the tree with information from the\n+          // input file. This information is used to construct the SourceMap.\n+          SourceInformationAnnotator sia \u003d\n+              new SourceInformationAnnotator(input.getName());\n+          NodeTraversal.traverse(this, n, sia);\n+        }\n+\n+        jsRoot.addChildToBack(n);\n+      }\n+\n+      externAndJsRoot \u003d new Node(Token.BLOCK, externsRoot, jsRoot);\n+      externAndJsRoot.setIsSyntheticBlock(true);\n+\n+      return externAndJsRoot;\n+    } finally {\n+      stopTracer(tracer, \"parseInputs\");\n+    }\n+  }\n+\n+  public Node parse(JSSourceFile file) {\n+    addToDebugLog(\"Parsing: \" + file.getName());\n+    return new JsAst(file).getAstRoot(this);\n+  }\n+\n+  @Override\n+  Node parseSyntheticCode(String js) {\n+    CompilerInput input \u003d new CompilerInput(\n+        JSSourceFile.fromCode(\" [synthetic] \", js));\n+    inputsByName_.put(input.getName(), input);\n+    return input.getAstRoot(this);\n+  }\n+\n+  @Override\n+  Node parseSyntheticCode(String fileName, String js) {\n+    return parse(JSSourceFile.fromCode(fileName, js));\n+  }\n+\n+  Node parseTestCode(String js) {\n+    CompilerInput input \u003d new CompilerInput(\n+        JSSourceFile.fromCode(\" [testcode] \", js));\n+    if (inputsByName_ \u003d\u003d null) {\n+      inputsByName_ \u003d Maps.newHashMap();\n+    }\n+    inputsByName_.put(input.getName(), input);\n+    return input.getAstRoot(this);\n+  }\n+\n+  @Override\n+  ErrorReporter getDefaultErrorReporter() {\n+    return defaultErrorReporter;\n+  }\n+\n+  //------------------------------------------------------------------------\n+  // Convert back to source code\n+  //------------------------------------------------------------------------\n+\n+  /**\n+   * Converts the main parse tree back to js code.\n+   */\n+  public String toSource() {\n+    return runInCompilerThread(new Callable\u003cString\u003e() {\n+      public String call() throws Exception {\n+        Tracer tracer \u003d newTracer(\"toSource\");\n+        try {\n+          CodeBuilder cb \u003d new CodeBuilder();\n+          if (jsRoot !\u003d null) {\n+            int i \u003d 0;\n+            for (Node scriptNode \u003d jsRoot.getFirstChild();\n+                 scriptNode !\u003d null;\n+                 scriptNode \u003d scriptNode.getNext()) {\n+              toSource(cb, i++, scriptNode);\n+            }\n+          }\n+          return cb.toString();\n+        } finally {\n+          stopTracer(tracer, \"toSource\");\n+        }\n+      }\n+    });\n+  }\n+\n+  /**\n+   * Converts the parse tree for each input back to js code.\n+   */\n+  public String[] toSourceArray() {\n+    return runInCompilerThread(new Callable\u003cString[]\u003e() {\n+      public String[] call() throws Exception {\n+        Tracer tracer \u003d newTracer(\"toSourceArray\");\n+        try {\n+          int numInputs \u003d inputs_.length;\n+          String[] sources \u003d new String[numInputs];\n+          CodeBuilder cb \u003d new CodeBuilder();\n+          for (int i \u003d 0; i \u003c numInputs; i++) {\n+            Node scriptNode \u003d inputs_[i].getAstRoot(Compiler.this);\n+            cb.reset();\n+            toSource(cb, i, scriptNode);\n+            sources[i] \u003d cb.toString();\n+          }\n+          return sources;\n+        } finally {\n+          stopTracer(tracer, \"toSourceArray\");\n+        }\n+      }\n+    });\n+  }\n+\n+  /**\n+   * Converts the parse tree for a module back to js code.\n+   */\n+  public String toSource(final JSModule module) {\n+    return runInCompilerThread(new Callable\u003cString\u003e() {\n+      public String call() throws Exception {\n+        List\u003cCompilerInput\u003e inputs \u003d module.getInputs();\n+        int numInputs \u003d inputs.size();\n+        if (numInputs \u003d\u003d 0) {\n+          return \"\";\n+        }\n+        CodeBuilder cb \u003d new CodeBuilder();\n+        for (int i \u003d 0; i \u003c numInputs; i++) {\n+          Node scriptNode \u003d inputs.get(i).getAstRoot(Compiler.this);\n+          if (scriptNode \u003d\u003d null) {\n+            throw new IllegalArgumentException(\n+                \"Bad module: \" + module.getName());\n+          }\n+          toSource(cb, i, scriptNode);\n+        }\n+        return cb.toString();\n+      }\n+    });\n+  }\n+\n+\n+  /**\n+   * Converts the parse tree for each input in a module back to js code.\n+   */\n+  public String[] toSourceArray(final JSModule module) {\n+    return runInCompilerThread(new Callable\u003cString[]\u003e() {\n+      public String[] call() throws Exception {\n+        List\u003cCompilerInput\u003e inputs \u003d module.getInputs();\n+        int numInputs \u003d inputs.size();\n+        if (numInputs \u003d\u003d 0) {\n+          return new String[0];\n+        }\n+\n+        String[] sources \u003d new String[numInputs];\n+        CodeBuilder cb \u003d new CodeBuilder();\n+        for (int i \u003d 0; i \u003c numInputs; i++) {\n+          Node scriptNode \u003d inputs.get(i).getAstRoot(Compiler.this);\n+          if (scriptNode \u003d\u003d null) {\n+            throw new IllegalArgumentException(\n+                \"Bad module input: \" + inputs.get(i).getName());\n+          }\n+\n+          cb.reset();\n+          toSource(cb, i, scriptNode);\n+          sources[i] \u003d cb.toString();\n+        }\n+        return sources;\n+      }\n+    });\n+  }\n+\n+  /**\n+   * Writes out js code from a root node. If printing input delimiters, this\n+   * method will attach a comment to the start of the text indicating which\n+   * input the output derived from. If there were any preserve annotations\n+   * within the root\u0027s source, they will also be printed in a block comment\n+   * at the beginning of the output.\n+   */\n+  public void toSource(final CodeBuilder cb,\n+                       final int inputSeqNum,\n+                       final Node root) {\n+    runInCompilerThread(new Callable\u003cVoid\u003e() {\n+      public Void call() throws Exception {\n+        if (options_.printInputDelimiter) {\n+          if ((cb.getLength() \u003e 0) \u0026\u0026 !cb.endsWith(\"\\n\")) {\n+            cb.append(\"\\n\");  // Make sure that the label starts on a new line\n+          }\n+          cb.append(\"// Input \")\n+            .append(String.valueOf(inputSeqNum))\n+            .append(\"\\n\");\n+        }\n+        if (root.getJSDocInfo() !\u003d null \u0026\u0026\n+            root.getJSDocInfo().getLicense() !\u003d null) {\n+          cb.append(\"/*\\n\")\n+            .append(root.getJSDocInfo().getLicense())\n+            .append(\"*/\\n\");\n+        }\n+\n+        // If there is a valid source map, then indicate to it that the current\n+        // root node\u0027s mappings are offset by the given string builder buffer.\n+        if (options_.sourceMapOutputPath !\u003d null) {\n+          sourceMap_.setStartingPosition(\n+              cb.getLineIndex(), cb.getColumnIndex());\n+        }\n+\n+        String code \u003d toSource(root);\n+        if (!code.isEmpty()) {\n+          cb.append(code);\n+          if (!code.endsWith(\";\")) {\n+            cb.append(\";\");\n+          }\n+        }\n+        return null;\n+      }\n+    });\n+  }\n+\n+  /**\n+   * Generates JavaScript source code for an AST.\n+   */\n+  @Override\n+  String toSource(Node n) {\n+    CodePrinter.Builder builder \u003d new CodePrinter.Builder(n);\n+    builder.setPrettyPrint(options_.prettyPrint);\n+    builder.setLineBreak(options_.lineBreak);\n+    builder.setSourceMap(sourceMap_);\n+    return builder.build();\n+  }\n+\n+  /**\n+   * Stores a buffer of text to which more can be appended.  This is just like a\n+   * StringBuilder except that we also track the number of lines.\n+   */\n+  public static class CodeBuilder {\n+    private final StringBuilder sb \u003d new StringBuilder();\n+    private int lineCount \u003d 0;\n+\n+    /** Removes all text, but leaves the line count unchanged. */\n+    void reset() {\n+      sb.setLength(0);\n+    }\n+\n+    /** Appends the given string to the text buffer. */\n+    CodeBuilder append(String str) {\n+      sb.append(str);\n+\n+      // Move the line count to the end of the new text.\n+      int index \u003d -1;\n+      while ((index \u003d str.indexOf(\u0027\\n\u0027, index + 1)) \u003e\u003d 0) {\n+        ++lineCount;\n+      }\n+\n+      return this;\n+    }\n+\n+    /** Returns all text in the text buffer. */\n+    @Override\n+    public String toString() {\n+      return sb.toString();\n+    }\n+\n+    /** Returns the length of the text buffer. */\n+    public int getLength() {\n+      return sb.length();\n+    }\n+\n+    /** Returns the (zero-based) index of the last line in the text buffer. */\n+    int getLineIndex() {\n+      return lineCount;\n+    }\n+\n+    /** Returns the (zero-based) index of the last column in the text buffer. */\n+    int getColumnIndex() {\n+      int index \u003d sb.lastIndexOf(\"\\n\");\n+      return (index \u003e\u003d 0) ? sb.length() - (index + 1) : sb.length();\n+    }\n+\n+    /** Determines whether the text ends with the given suffix. */\n+    boolean endsWith(String suffix) {\n+      return (sb.length() \u003e suffix.length())\n+          \u0026\u0026 suffix.equals(sb.substring(sb.length() - suffix.length()));\n+    }\n+  }\n+\n+  //------------------------------------------------------------------------\n+  // Optimizations\n+  //------------------------------------------------------------------------\n+\n+  public void optimize() {\n+    PhaseOptimizer phaseOptimizer \u003d new PhaseOptimizer(this, tracker);\n+    if (options_.devMode \u003d\u003d DevMode.EVERY_PASS) {\n+      phaseOptimizer.setSanityCheck(sanityCheck);\n+    }\n+    phaseOptimizer.consume(getPassConfig().getOptimizations());\n+    phaseOptimizer.process(externsRoot, jsRoot);\n+    if (hasErrors()) {\n+      return;\n+    }\n+\n+    if (options_.flowSensitiveInlineVariables) {\n+      flowSensitiveInlineVariables();\n+    }\n+\n+    if (options_.collapseAnonymousFunctions) {\n+      collapseAnonymousFunctions();\n+    }\n+\n+    // Move functions before extracting prototype member declarations.\n+    if (options_.moveFunctionDeclarations) {\n+      moveFunctionDeclarations();\n+    }\n+\n+    if (options_.anonymousFunctionNaming \u003d\u003d\n+        AnonymousFunctionNamingPolicy.MAPPED) {\n+      nameAnonymousFunctions(AnonymousFunctionNamingPolicy.MAPPED);\n+    }\n+\n+    // The mapped name anonymous function pass makes use of information that\n+    // the extract prototype member declarations pass removes so the former\n+    // happens before the latter.\n+    //\n+    // Extracting prototype properties screws up the heuristic renaming\n+    // policies, so never run it when those policies are requested.\n+    if (options_.extractPrototypeMemberDeclarations \u0026\u0026\n+        (options_.propertyRenaming !\u003d PropertyRenamingPolicy.HEURISTIC \u0026\u0026\n+         options_.propertyRenaming !\u003d\n+            PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC)) {\n+      extractPrototypeMemberDeclarations();\n+    }\n+\n+    if (options_.coalesceVariableNames) {\n+      coalesceVariableNames();\n+    }\n+\n+    VariableMap prevPropertyMap \u003d null;\n+    if (options_.inputPropertyMapSerialized !\u003d null) {\n+      try {\n+        prevPropertyMap \u003d\n+            VariableMap.fromBytes(options_.inputPropertyMapSerialized);\n+      } catch (ParseException e) {\n+        report(JSError.make(INPUT_MAP_PROP_PARSE, e.getMessage()));\n+      }\n+    }\n+\n+    if (options_.ambiguateProperties \u0026\u0026 (options_.propertyRenaming\n+        \u003d\u003d PropertyRenamingPolicy.ALL_UNQUOTED)) {\n+      ambiguateProperties(options_.anonymousFunctionNaming\n+          .getReservedCharacters());\n+    }\n+\n+    switch (options_.propertyRenaming) {\n+      case HEURISTIC:\n+        renamePrototypes(false,\n+            options_.anonymousFunctionNaming,\n+            prevPropertyMap);\n+        break;\n+      case AGGRESSIVE_HEURISTIC:\n+        renamePrototypes(true,\n+            options_.anonymousFunctionNaming,\n+            prevPropertyMap);\n+        break;\n+      case ALL_UNQUOTED:\n+        renameProperties(options_.generatePseudoNames,\n+            options_.anonymousFunctionNaming,\n+            prevPropertyMap);\n+        break;\n+    }\n+\n+    // This comes after property renaming because quoted property names must\n+    // not be renamed.\n+    if (options_.convertToDottedProperties) {\n+      convertToDottedProperties();\n+    }\n+\n+    // Property renaming must happen before this pass runs since this\n+    // pass may convert dotted properties into quoted properties.  It\n+    // is beneficial to run before alias strings, alias keywords and\n+    // variable renaming.\n+    if (options_.rewriteFunctionExpressions) {\n+      rewriteFunctionExpressions();\n+    }\n+\n+    // This comes after converting quoted property accesses to dotted property\n+    // accesses in order to avoid aliasing property names.\n+    if (!options_.aliasableStrings.isEmpty() || options_.aliasAllStrings) {\n+      aliasStrings(options_.aliasableStrings,\n+                   options_.aliasAllStrings,\n+                   options_.aliasStringsBlacklist,\n+                   options_.outputJsStringUsage);\n+    }\n+\n+    if (options_.aliasExternals) {\n+      aliasExternals();\n+    }\n+\n+    if (options_.aliasKeywords) {\n+      aliasKeywords();\n+    }\n+\n+    if (options_.collapseVariableDeclarations) {\n+      collapseVariableDeclarations();\n+    }\n+\n+    denormalize();\n+\n+    if (options_.instrumentationTemplate !\u003d null) {\n+      instrumentFunctions();\n+    }\n+\n+    if (options_.variableRenaming !\u003d VariableRenamingPolicy.ALL) {\n+      // If we\u0027re leaving some (or all) variables with their old names,\n+      // then we need to undo any of the markers we added for distinguishing\n+      // local variables (\"$$1\") or constants (\"$$constant\").\n+      invertContextualRenaming();\n+    }\n+\n+    if (options_.variableRenaming !\u003d VariableRenamingPolicy.OFF) {\n+      VariableMap prevVariableMap \u003d null;\n+      if (options_.inputVariableMapSerialized !\u003d null) {\n+        try {\n+          prevVariableMap \u003d\n+              VariableMap.fromBytes(options_.inputVariableMapSerialized);\n+        } catch (ParseException e) {\n+          report(JSError.make(INPUT_VAR_PROP_PARSE, e.getMessage()));\n+        }\n+      }\n+\n+      renameVars(options_.renamePrefix,\n+          options_.variableRenaming \u003d\u003d VariableRenamingPolicy.LOCAL,\n+          options_.anonymousFunctionNaming,\n+          prevVariableMap);\n+    }\n+\n+    // This pass should run after names stop changing.\n+    if (options_.processObjectPropertyString) {\n+      objectPropertyStringPostprocess();\n+    }\n+\n+    if (options_.labelRenaming) {\n+      renameLabels();\n+    }\n+\n+    if (options_.anonymousFunctionNaming \u003d\u003d\n+        AnonymousFunctionNamingPolicy.UNMAPPED) {\n+      nameAnonymousFunctions(AnonymousFunctionNamingPolicy.UNMAPPED);\n+    }\n+\n+    // Safety check\n+    if (options_.checkSymbols) {\n+      sanityCheckVars();\n+    }\n+  }\n+\n+  @Override\n+  void setCssRenamingMap(CssRenamingMap map) {\n+    options_.cssRenamingMap \u003d map;\n+  }\n+\n+  @Override\n+  CssRenamingMap getCssRenamingMap() {\n+    return options_.cssRenamingMap;\n+  }\n+\n+\n+  /** Checks that all variables are defined. */\n+  void sanityCheckVars() {\n+    logger_.info(\"Checking for undefined vars\");\n+    startPass(\"sanityCheckVars\");\n+    VarCheck v \u003d new VarCheck(this, true);\n+    process(v);\n+    endPass();\n+  }\n+\n+  /**\n+   * Reprocesses the current defines over the AST.  This is used by GwtCompiler\n+   * to generate N outputs for different targets from the same (checked) AST.\n+   * For each target, we apply the target-specific defines by calling\n+   * {@code processDefines} and then {@code optimize} to optimize the AST\n+   * specifically for that target.\n+   */\n+  public void processDefines() {\n+    (new DefaultPassConfig(options_)).processDefines.create(this)\n+        .process(externsRoot, jsRoot);\n+  }\n+\n+  void computeFunctionNames() {\n+    logger_.info(\"Computing fully-qualified function names and ids\");\n+    startPass(\"computeFunctionNames\");\n+    functionNames_ \u003d new FunctionNames(this);\n+    process(functionNames_);\n+    endPass();\n+  }\n+\n+  void flowSensitiveInlineVariables() {\n+    logger_.info(\"Flow Sensitive Inline Variables\");\n+    startPass(\"flowSensitiveInlineVariables\");\n+    process(new FlowSensitiveInlineVariables(this));\n+    endPass();\n+  }\n+\n+  void coalesceVariableNames() {\n+    logger_.info(\"Coalesce Variable Names\");\n+    startPass(\"coalesceVariableNames\");\n+    process(new CoalesceVariableNames(this));\n+    endPass();\n+  }\n+\n+  void collapseVariableDeclarations() {\n+    logger_.info(\"Collapsing variable declarations\");\n+    startPass(\"collapseVariableDeclarations\");\n+    process(new CollapseVariableDeclarations(this));\n+    setUnnormalized();\n+    endPass();\n+  }\n+\n+  void extractPrototypeMemberDeclarations() {\n+    logger_.info(\"Extracting Common Prototype Member Declarations\");\n+    startPass(\"extractPrototypeMemberDeclarations\");\n+    process(new ExtractPrototypeMemberDeclarations(this));\n+    endPass();\n+  }\n+\n+  void rewriteFunctionExpressions() {\n+    logger_.info(\"Rewrite function expressions\");\n+    startPass(\"rewriteFunctionExpressions\");\n+    process(new FunctionRewriter(this));\n+    endPass();\n+  }\n+\n+  void collapseAnonymousFunctions() {\n+    logger_.info(\"Collapsing anonymous functions\");\n+    startPass(\"collapseAnonymousFunctions\");\n+    process(new CollapseAnonymousFunctions(this));\n+    endPass();\n+  }\n+\n+\n+\n+  void moveFunctionDeclarations() {\n+    logger_.info(\"Move function declarations\");\n+    startPass(\"moveFunctionDeclarations\");\n+    process(new MoveFunctionDeclarations(this));\n+    endPass();\n+  }\n+\n+  boolean isInliningForbidden() {\n+    return options_.propertyRenaming \u003d\u003d PropertyRenamingPolicy.HEURISTIC ||\n+        options_.propertyRenaming \u003d\u003d\n+            PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC;\n+  }\n+\n+  /** Control Flow Analysis. */\n+  ControlFlowGraph\u003cNode\u003e computeCFG() {\n+    logger_.info(\"Computing Control Flow Graph\");\n+    Tracer tracer \u003d newTracer(\"computeCFG\");\n+    ControlFlowAnalysis cfa \u003d new ControlFlowAnalysis(this, true);\n+    process(cfa);\n+    stopTracer(tracer, \"computeCFG\");\n+    return cfa.getCfg();\n+  }\n+\n+  void nameAnonymousFunctions(AnonymousFunctionNamingPolicy policy) {\n+    logger_.info(\"Naming anonymous functions\");\n+    startPass(\"nameAnonymousFunctions\");\n+    if (policy \u003d\u003d AnonymousFunctionNamingPolicy.UNMAPPED) {\n+      process(new NameAnonymousFunctions(this));\n+    } else if (policy \u003d\u003d AnonymousFunctionNamingPolicy.MAPPED) {\n+      NameAnonymousFunctionsMapped naf \u003d new NameAnonymousFunctionsMapped(this);\n+      process(naf);\n+      anonFunctionNameMap_ \u003d naf.getFunctionMap();\n+    }\n+    endPass();\n+  }\n+\n+  void aliasExternals() {\n+    logger_.info(\"Creating alias functions for externals\");\n+    startPass(\"aliasExternals\");\n+    AliasExternals ae \u003d new AliasExternals(this,\n+                                           getModuleGraph(),\n+                                           options_.unaliasableGlobals,\n+                                           options_.aliasableGlobals);\n+    process(ae);\n+    endPass();\n+  }\n+\n+  void objectPropertyStringPostprocess() {\n+    logger_.info(\"goog.testing.ObjectPropertyString postprocess\");\n+    startPass(\"ObjectPropertyStringPostprocess\");\n+    process(new ObjectPropertyStringPostprocess(this));\n+    endPass();\n+  }\n+\n+  void ambiguateProperties(char[] reservedCharacters) {\n+    logger_.info(\"Ambiguating properties\");\n+    startPass(\"ambiguateProperties\");\n+    process(new AmbiguateProperties(this, reservedCharacters));\n+    endPass();\n+  }\n+\n+  public void normalize() {\n+    logger_.info(\"Normalizing\");\n+    startPass(\"normalize\");\n+    process(new Normalize(this, false));\n+    setNormalized();\n+    endPass();\n+  }\n+\n+  private void denormalize() {\n+    logger_.info(\"Denormalizing\");\n+    startPass(\"denormalize\");\n+    process(new Denormalize(this));\n+    setUnnormalized();\n+    endPass();\n+  }\n+\n+  @Override\n+  void normalizeNodeTypes(Node root) {\n+    Tracer tracer \u003d newTracer(\"normalizeNodeTypes\");\n+\n+    // TODO(johnlenz): Move the Node type normalizer into the general\n+    // Normalization pass once we force everybody to turn it on. It\u0027s\n+    // confusing to have a mandatory normalization pass and an optional\n+    // one.\n+    CompilerPass pass \u003d new NodeTypeNormalizer();\n+    pass.process(null, root);\n+\n+    stopTracer(tracer, \"normalizeNodeTypes\");\n+  }\n+\n+  @Override\n+  void annotateCodingConvention(Node root) {\n+    Tracer tracer \u003d newTracer(\"annotateCodingConvention\");\n+    CompilerPass pass \u003d new CodingConventionAnnotator(this);\n+    pass.process(null, root);\n+    stopTracer(tracer, \"annotateCodingConvention\");\n+  }\n+\n+  void renameVars(String renamePrefix, boolean renameLocalVarsOnly,\n+      AnonymousFunctionNamingPolicy anonFunctionNamePolicy,\n+      VariableMap prevVariableMap) {\n+    logger_.info(\"Renaming vars\");\n+    startPass(\"renameVars\");\n+    boolean preserveAnonymousFunctionNames \u003d\n+      anonFunctionNamePolicy !\u003d AnonymousFunctionNamingPolicy.OFF;\n+    RenameVars rn \u003d new RenameVars(\n+        this, renamePrefix,\n+        renameLocalVarsOnly, preserveAnonymousFunctionNames,\n+        prevVariableMap,\n+        anonFunctionNamePolicy.getReservedCharacters(),\n+        getPassConfig().getExportedNames());\n+    process(rn);\n+    variableMap_ \u003d rn.getVariableMap();\n+    endPass();\n+  }\n+\n+  void renameProperties(boolean generatePseudoNames,\n+      AnonymousFunctionNamingPolicy anonFunctionNamePolicy,\n+      VariableMap prevPropertyMap) {\n+    logger_.info(\"Renaming properties\");\n+    startPass(\"renameProperties\");\n+    RenameProperties rp \u003d new RenameProperties(\n+        this, generatePseudoNames, prevPropertyMap,\n+        anonFunctionNamePolicy.getReservedCharacters());\n+    process(rp);\n+    propertyMap_ \u003d rp.getPropertyMap();\n+    endPass();\n+  }\n+\n+  void invertContextualRenaming() {\n+    logger_.info(\"Denormalizing local names\");\n+    startPass(\"invertNames\");\n+    process(MakeDeclaredNamesUnique.getContextualRenameInverter(this));\n+    endPass();\n+  }\n+\n+  void renamePrototypes(boolean aggressive,\n+      AnonymousFunctionNamingPolicy anonFunctionNamePolicy,\n+      VariableMap prevPropertyMap) {\n+    logger_.info(\"Renaming prototypes\");\n+    startPass(\"renamePrototypes\");\n+    RenamePrototypes rp \u003d new RenamePrototypes(this, aggressive,\n+        anonFunctionNamePolicy.getReservedCharacters(),\n+        prevPropertyMap);\n+    process(rp);\n+    propertyMap_ \u003d rp.getPropertyMap();\n+    endPass();\n+  }\n+\n+  void renameLabels() {\n+    logger_.info(\"Renaming labels\");\n+    startPass(\"renameLabels\");\n+    RenameLabels rn \u003d new RenameLabels(this);\n+    process(rn);\n+    endPass();\n+  }\n+\n+  void convertToDottedProperties() {\n+    logger_.info(\"Converting quoted property accesses to dot syntax\");\n+    startPass(\"convertToDottedProperties\");\n+    process(new ConvertToDottedProperties(this));\n+    endPass();\n+  }\n+\n+  void instrumentFunctions() {\n+    logger_.info(\"Instrumenting functions\");\n+    startPass(\"instrumentFunctions\");\n+    try {\n+      FileReader templateFile \u003d\n+          new FileReader(options_.instrumentationTemplate);\n+\n+      process(new InstrumentFunctions(this,\n+                                      functionNames_,\n+                                      options_.instrumentationTemplate,\n+                                      options_.appNameStr,\n+                                      templateFile));\n+    } catch (IOException e) {\n+      report(JSError.make(READ_ERROR, options_.instrumentationTemplate));\n+    }\n+    endPass();\n+  }\n+\n+  void recordFunctionInformation() {\n+    logger_.info(\"Recording function information\");\n+    startPass(\"recordFunctionInformation\");\n+    RecordFunctionInformation recordFunctionInfoPass \u003d\n+        new RecordFunctionInformation(this, functionNames_);\n+    process(recordFunctionInfoPass);\n+    functionInformationMap_ \u003d recordFunctionInfoPass.getMap();\n+    endPass();\n+  }\n+\n+  protected final CodeChangeHandler.RecentChange recentChange \u003d\n+      new CodeChangeHandler.RecentChange();\n+  private final List\u003cCodeChangeHandler\u003e codeChangeHandlers \u003d\n+      Lists.\u003cCodeChangeHandler\u003enewArrayList();\n+\n+  @Override\n+  void addChangeHandler(CodeChangeHandler handler) {\n+    codeChangeHandlers.add(handler);\n+  }\n+\n+  @Override\n+  void removeChangeHandler(CodeChangeHandler handler) {\n+    codeChangeHandlers.remove(handler);\n+  }\n+\n+  /**\n+   * All passes should call reportCodeChange() when they alter\n+   * the JS tree structure. This is verified by CompilerTestCase.\n+   * This allows us to optimize to a fixed point.\n+   */\n+  @Override\n+  public void reportCodeChange() {\n+    for (CodeChangeHandler handler : codeChangeHandlers) {\n+      handler.reportChange();\n+    }\n+  }\n+\n+  @Override\n+  public CodingConvention getCodingConvention() {\n+    return codingConvention;\n+  }\n+\n+  public void setCodingConvention(CodingConvention convention) {\n+    Preconditions.checkState(convention !\u003d null);\n+    codingConvention \u003d convention;\n+  }\n+\n+  @Override\n+  public boolean isIdeMode() {\n+    return options_.ideMode;\n+  }\n+\n+  @Override\n+  public boolean isTypeCheckingEnabled() {\n+    return options_.checkTypes;\n+  }\n+\n+\n+  //------------------------------------------------------------------------\n+  // Error reporting\n+  //------------------------------------------------------------------------\n+\n+  @Override\n+  void report(JSError error) {\n+    CheckLevel level \u003d error.level;\n+    WarningsGuard guard \u003d options_.getWarningsGuard();\n+    if (guard !\u003d null) {\n+      CheckLevel newLevel \u003d guard.level(error);\n+      if (newLevel !\u003d null) {\n+        level \u003d newLevel;\n+      }\n+    }\n+\n+    if (level.isOn()) {\n+      errorManager.report(level, error);\n+    }\n+  }\n+\n+  /**\n+   * Report an internal error.\n+   */\n+  @Override\n+  void throwInternalError(String message, Exception cause) {\n+    String finalMessage \u003d\n+      \"INTERNAL COMPILER ERROR.\\n\" +\n+      \"Please report this problem.\\n\" + message;\n+\n+    RuntimeException e \u003d new RuntimeException(finalMessage, cause);\n+    if (cause !\u003d null) {\n+      e.setStackTrace(cause.getStackTrace());\n+    }\n+    throw e;\n+  }\n+\n+\n+  /**\n+   * Gets the number of errors.\n+   */\n+  public int getErrorCount() {\n+    return errorManager.getErrorCount();\n+  }\n+\n+  /**\n+   * Gets the number of warnings.\n+   */\n+  public int getWarningCount() {\n+    return errorManager.getWarningCount();\n+  }\n+\n+  @Override\n+  boolean hasHaltingErrors() {\n+    return !isIdeMode() \u0026\u0026 getErrorCount() \u003e 0;\n+  }\n+\n+  /**\n+   * Consults the {@link ErrorManager} to see if we\u0027ve encountered errors\n+   * that should halt compilation. \u003cp\u003e\n+   *\n+   * If {@link CompilerOptions#ideMode} is {@code true}, this function\n+   * always returns {@code false} without consulting the error manager. The\n+   * error manager will continue to be told about new errors and warnings, but\n+   * the compiler will complete compilation of all inputs.\u003cp\u003e\n+   */\n+  public boolean hasErrors() {\n+    return hasHaltingErrors();\n+  }\n+\n+  /** Called from the compiler passes, adds debug info */\n+  @Override\n+  void addToDebugLog(String str) {\n+    debugLog_.append(str);\n+    debugLog_.append(\u0027\\n\u0027);\n+    logger_.fine(str);\n+  }\n+\n+  private SourceFile getSourceFileByName(String sourceName) {\n+    if (inputsByName_.containsKey(sourceName)) {\n+      return inputsByName_.get(sourceName).getSourceFile();\n+    }\n+    return null;\n+  }\n+\n+  public String getSourceLine(String sourceName, int lineNumber) {\n+    if (lineNumber \u003c 1) {\n+      return null;\n+    }\n+    SourceFile input \u003d getSourceFileByName(sourceName);\n+    if (input !\u003d null) {\n+      return input.getLine(lineNumber);\n+    }\n+    return null;\n+  }\n+\n+  public Region getSourceRegion(String sourceName, int lineNumber) {\n+    if (lineNumber \u003c 1) {\n+      return null;\n+    }\n+    SourceFile input \u003d getSourceFileByName(sourceName);\n+    if (input !\u003d null) {\n+      return input.getRegion(lineNumber);\n+    }\n+    return null;\n+  }\n+\n+  //------------------------------------------------------------------------\n+  // Package-private helpers\n+  //------------------------------------------------------------------------\n+\n+  @Override\n+  Node getNodeForCodeInsertion(JSModule module) {\n+    if (module \u003d\u003d null) {\n+      if (inputs_.length \u003d\u003d 0) {\n+        throw new IllegalStateException(\"No inputs\");\n+      }\n+\n+      return inputs_[0].getAstRoot(this);\n+    }\n+\n+    List\u003cCompilerInput\u003e inputs \u003d module.getInputs();\n+    if (inputs.size() \u003e 0) {\n+      return inputs.get(0).getAstRoot(this);\n+    }\n+    for (JSModule m : getModuleGraph().getTransitiveDepsDeepestFirst(module)) {\n+      inputs \u003d m.getInputs();\n+      if (inputs.size() \u003e 0) {\n+        return inputs.get(0).getAstRoot(this);\n+      }\n+    }\n+    throw new IllegalStateException(\"Root module has no inputs\");\n+  }\n+\n+  public SourceMap getSourceMap() {\n+    return sourceMap_;\n+  }\n+\n+  VariableMap getVariableMap() {\n+    return variableMap_;\n+  }\n+\n+  VariableMap getPropertyMap() {\n+    return propertyMap_;\n+  }\n+\n+  CompilerOptions getOptions() {\n+    return options_;\n+  }\n+\n+  FunctionInformationMap getFunctionalInformationMap() {\n+    return functionInformationMap_;\n+  }\n+\n+  /**\n+   * Sets the logging level for the com.google.javascript.jscomp package.\n+   */\n+  public static void setLoggingLevel(Level level) {\n+    logger_.setLevel(level);\n+  }\n+\n+  /** Gets the DOT graph of the AST generated at the end of compilation. */\n+  public String getAstDotGraph() throws IOException {\n+    if (jsRoot !\u003d null) {\n+      ControlFlowAnalysis cfa \u003d new ControlFlowAnalysis(this, true);\n+      cfa.process(null, jsRoot);\n+      return DotFormatter.toDot(jsRoot, cfa.getCfg());\n+    } else {\n+      return \"\";\n+    }\n+  }\n+\n+  @Override\n+  public ErrorManager getErrorManager() {\n+    return errorManager;\n+  }\n+\n+  /**\n+   * Stores the internal compiler state just before optimization is performed.\n+   * This can be saved and restored in order to efficiently optimize multiple\n+   * different output targets without having to perform checking multiple times.\n+   *\n+   * NOTE: This does not include all parts of the compiler\u0027s internal state. In\n+   * particular, JSSourceFiles and CompilerOptions are not recorded. In\n+   * order to recreate a Compiler instance from scratch, you would need to\n+   * call {@code init} with the same arguments as in the initial creation before\n+   * restoring intermediate state.\n+   */\n+  public static class IntermediateState implements Serializable {\n+    private static final long serialVersionUID \u003d 1L;\n+\n+    Node externsRoot;\n+    private Node jsRoot;\n+    private CompilerInput[] externs;\n+    private CompilerInput[] inputs;\n+    private JSModule[] modules;\n+    private FunctionNames functionNames;\n+    private PassConfig.State passConfigState;\n+    private JSTypeRegistry typeRegistry;\n+    private boolean normalized;\n+\n+    private IntermediateState() {}\n+  }\n+\n+  /**\n+   * Returns the current internal state, excluding the input files and modules.\n+   */\n+  public IntermediateState getState() {\n+    IntermediateState state \u003d new IntermediateState();\n+    state.externsRoot \u003d externsRoot;\n+    state.jsRoot \u003d jsRoot;\n+    state.externs \u003d externs_;\n+    state.inputs \u003d inputs_;\n+    state.modules \u003d modules_;\n+    state.functionNames \u003d functionNames_;\n+    state.passConfigState \u003d getPassConfig().getIntermediateState();\n+    state.typeRegistry \u003d typeRegistry;\n+    state.normalized \u003d normalized;\n+\n+    return state;\n+  }\n+\n+  /**\n+   * Sets the internal state to the capture given.  Note that this assumes that\n+   * the input files are already set up.\n+   */\n+  public void setState(IntermediateState state) {\n+    externsRoot \u003d state.externsRoot;\n+    jsRoot \u003d state.jsRoot;\n+    externs_ \u003d state.externs;\n+    inputs_ \u003d state.inputs;\n+    modules_ \u003d state.modules;\n+    functionNames_ \u003d state.functionNames;\n+    passes \u003d createPassConfigInternal();\n+    getPassConfig().setIntermediateState(state.passConfigState);\n+    typeRegistry \u003d state.typeRegistry;\n+    normalized \u003d state.normalized;\n+  }\n+}\n",
      "operations": [
        {
          "type": "insert-node",
          "from": "",
          "to": "QualifiedName: options_.outputJsStringUsage [41573,41601]"
        },
        {
          "type": "delete-tree",
          "from": "ImportDeclaration [893,929]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ImportDeclaration [930,970]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "FieldDeclaration [2222,2507]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodInvocation [41940,41973]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/jscomp/CompilerOptions.java",
        "src/com/google/javascript/jscomp/CompilerOptions.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [
            "com.google.javascript.jscomp.CompilerOptions:setCollapsePropertiesOnExternTypes:[boolean collapse]:void",
            "com.google.javascript.jscomp.CompilerOptions:getDefineReplacements:[]:Map\u003cString,Node\u003e",
            "com.google.javascript.jscomp.CompilerOptions:setIdGenerators:[Set\u003cString\u003e idGenerators]:void",
            "com.google.javascript.jscomp.CompilerOptions:setNameAnonymousFunctionsOnly:[boolean value]:void",
            "com.google.javascript.jscomp.CompilerOptions:setDefineToBooleanLiteral:[String defineName, boolean value]:void",
            "com.google.javascript.jscomp.CompilerOptions:shouldColorizeErrorOutput:[]:boolean",
            "com.google.javascript.jscomp.CompilerOptions:isOn:[]:boolean",
            "com.google.javascript.jscomp.CompilerOptions:setProcessObjectPropertyString:[boolean process]:void",
            "com.google.javascript.jscomp.CompilerOptions:CompilerOptions:[]:null",
            "com.google.javascript.jscomp.CompilerOptions:setDefineToStringLiteral:[String defineName, String value]:void",
            "com.google.javascript.jscomp.CompilerOptions:skipAllCompilerPasses:[]:void",
            "com.google.javascript.jscomp.CompilerOptions:setColorizeErrorOutput:[boolean colorizeErrorOutput]:void",
            "com.google.javascript.jscomp.CompilerOptions:setRewriteNewDateGoogNow:[boolean rewrite]:void",
            "com.google.javascript.jscomp.CompilerOptions:clone:[]:Object",
            "com.google.javascript.jscomp.CompilerOptions:setRenamingPolicy:[VariableRenamingPolicy newVariablePolicy, PropertyRenamingPolicy newPropertyPolicy]:void",
            "com.google.javascript.jscomp.CompilerOptions:setWarningLevel:[DiagnosticGroup type, CheckLevel level]:void",
            "com.google.javascript.jscomp.CompilerOptions:setChainCalls:[boolean value]:void",
            "com.google.javascript.jscomp.CompilerOptions:getWarningsGuard:[]:WarningsGuard",
            "com.google.javascript.jscomp.CompilerOptions:setDefineToNumberLiteral:[String defineName, int value]:void",
            "com.google.javascript.jscomp.CompilerOptions:setDefineToDoubleLiteral:[String defineName, double value]:void",
            "com.google.javascript.jscomp.CompilerOptions:addWarningsGuard:[WarningsGuard guard]:void",
            "com.google.javascript.jscomp.CompilerOptions:enables:[DiagnosticGroup type]:boolean"
          ],
          "num": 22
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "-1"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "35",
            "36",
            "37",
            "38",
            "39",
            "40",
            "41",
            "42",
            "43",
            "44",
            "45",
            "46",
            "47",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57",
            "58",
            "59",
            "60",
            "61",
            "62",
            "63",
            "64",
            "65",
            "66",
            "67",
            "68",
            "69",
            "70",
            "71",
            "72",
            "73",
            "74",
            "75",
            "76",
            "77",
            "78",
            "79",
            "80",
            "81",
            "82",
            "83",
            "84",
            "85",
            "86",
            "87",
            "88",
            "89",
            "90",
            "91",
            "92",
            "93",
            "94",
            "95",
            "96",
            "97",
            "98",
            "99",
            "100",
            "101",
            "102",
            "103",
            "104",
            "105",
            "106",
            "107",
            "108",
            "109",
            "110",
            "111",
            "112",
            "113",
            "114",
            "115",
            "116",
            "117",
            "118",
            "119",
            "120",
            "121",
            "122",
            "123",
            "124",
            "125",
            "126",
            "127",
            "128",
            "129",
            "130",
            "131",
            "132",
            "133",
            "134",
            "135",
            "136",
            "137",
            "138",
            "139",
            "140",
            "141",
            "142",
            "143",
            "144",
            "145",
            "146",
            "147",
            "148",
            "149",
            "150",
            "151",
            "152",
            "153",
            "154",
            "155",
            "156",
            "157",
            "158",
            "159",
            "160",
            "161",
            "162",
            "163",
            "164",
            "165",
            "166",
            "167",
            "168",
            "169",
            "170",
            "171",
            "172",
            "173",
            "174",
            "175",
            "176",
            "177",
            "178",
            "179",
            "180",
            "181",
            "182",
            "183",
            "184",
            "185",
            "186",
            "187",
            "188",
            "189",
            "190",
            "191",
            "192",
            "193",
            "194",
            "195",
            "196",
            "197",
            "198",
            "199",
            "200",
            "201",
            "202",
            "203",
            "204",
            "205",
            "206",
            "207",
            "208",
            "209",
            "210",
            "211",
            "212",
            "213",
            "214",
            "215",
            "216",
            "217",
            "218",
            "219",
            "220",
            "221",
            "222",
            "223",
            "224",
            "225",
            "226",
            "227",
            "228",
            "229",
            "230",
            "231",
            "232",
            "233",
            "234",
            "235",
            "236",
            "237",
            "238",
            "239",
            "240",
            "241",
            "242",
            "243",
            "244",
            "245",
            "246",
            "247",
            "248",
            "249",
            "250",
            "251",
            "252",
            "253",
            "254",
            "255",
            "256",
            "257",
            "258",
            "259",
            "260",
            "261",
            "262",
            "263",
            "264",
            "265",
            "266",
            "267",
            "268",
            "269",
            "270",
            "271",
            "272",
            "273",
            "274",
            "275",
            "276",
            "277",
            "278",
            "279",
            "280",
            "281",
            "282",
            "283",
            "284",
            "285",
            "286",
            "287",
            "288",
            "289",
            "290",
            "291",
            "292",
            "293",
            "294",
            "295",
            "296",
            "297",
            "298",
            "299",
            "300",
            "301",
            "302",
            "303",
            "304",
            "305",
            "306",
            "307",
            "308",
            "309",
            "310",
            "311",
            "312",
            "313",
            "314",
            "315",
            "316",
            "317",
            "318",
            "319",
            "320",
            "321",
            "322",
            "323",
            "324",
            "325",
            "326",
            "327",
            "328",
            "329",
            "330",
            "331",
            "332",
            "333",
            "334",
            "335",
            "336",
            "337",
            "338",
            "339",
            "340",
            "341",
            "342",
            "343",
            "344",
            "345",
            "346",
            "347",
            "348",
            "349",
            "350",
            "351",
            "352",
            "353",
            "354",
            "355",
            "356",
            "357",
            "358",
            "359",
            "360",
            "361",
            "362",
            "363",
            "364",
            "365",
            "366",
            "367",
            "368",
            "369",
            "370",
            "371",
            "372",
            "373",
            "374",
            "375",
            "376",
            "377",
            "378",
            "379",
            "380",
            "381",
            "382",
            "383",
            "384",
            "385",
            "386",
            "387",
            "388",
            "389",
            "390",
            "391",
            "392",
            "393",
            "394",
            "395",
            "396",
            "397",
            "398",
            "399",
            "400",
            "401",
            "402",
            "403",
            "404",
            "405",
            "406",
            "407",
            "408",
            "409",
            "410",
            "411",
            "412",
            "413",
            "414",
            "415",
            "416",
            "417",
            "418",
            "419",
            "420",
            "421",
            "422",
            "423",
            "424",
            "425",
            "426",
            "427",
            "428",
            "429",
            "430",
            "431",
            "432",
            "433",
            "434",
            "435",
            "436",
            "437",
            "438",
            "439",
            "440",
            "441",
            "442",
            "443",
            "444",
            "445",
            "446",
            "447",
            "448",
            "449",
            "450",
            "451",
            "452",
            "453",
            "454",
            "455",
            "456",
            "457",
            "458",
            "459",
            "460",
            "461",
            "462",
            "463",
            "464",
            "465",
            "466",
            "467",
            "468",
            "469",
            "470",
            "471",
            "472",
            "473",
            "474",
            "475",
            "476",
            "477",
            "478",
            "479",
            "480",
            "481",
            "482",
            "483",
            "484",
            "485",
            "486",
            "487",
            "488",
            "489",
            "490",
            "491",
            "492",
            "493",
            "494",
            "495",
            "496",
            "497",
            "498",
            "499",
            "500",
            "501",
            "502",
            "503",
            "504",
            "505",
            "506",
            "507",
            "508",
            "509",
            "510",
            "511",
            "512",
            "513",
            "514",
            "515",
            "516",
            "517",
            "518",
            "519",
            "520",
            "521",
            "522",
            "523",
            "524",
            "525",
            "526",
            "527",
            "528",
            "529",
            "530",
            "531",
            "532",
            "533",
            "534",
            "535",
            "536",
            "537",
            "538",
            "539",
            "540",
            "541",
            "542",
            "543",
            "544",
            "545",
            "546",
            "547",
            "548",
            "549",
            "550",
            "551",
            "552",
            "553",
            "554",
            "555",
            "556",
            "557",
            "558",
            "559",
            "560",
            "561",
            "562",
            "563",
            "564",
            "565",
            "566",
            "567",
            "568",
            "569",
            "570",
            "571",
            "572",
            "573",
            "574",
            "575",
            "576",
            "577",
            "578",
            "579",
            "580",
            "581",
            "582",
            "583",
            "584",
            "585",
            "586",
            "587",
            "588",
            "589",
            "590",
            "591",
            "592",
            "593",
            "594",
            "595",
            "596",
            "597",
            "598",
            "599",
            "600",
            "601",
            "602",
            "603",
            "604",
            "605",
            "606",
            "607",
            "608",
            "609",
            "610",
            "611",
            "612",
            "613",
            "614",
            "615",
            "616",
            "617",
            "618",
            "619",
            "620",
            "621",
            "622",
            "623",
            "624",
            "625",
            "626",
            "627",
            "628",
            "629",
            "630",
            "631",
            "632",
            "633",
            "634",
            "635",
            "636",
            "637",
            "638",
            "639",
            "640",
            "641",
            "642",
            "643",
            "644",
            "645",
            "646",
            "647",
            "648",
            "649",
            "650",
            "651",
            "652",
            "653",
            "654",
            "655",
            "656",
            "657",
            "658",
            "659",
            "660",
            "661",
            "662",
            "663",
            "664",
            "665",
            "666",
            "667",
            "668",
            "669",
            "670",
            "671",
            "672",
            "673",
            "674",
            "675",
            "676",
            "677",
            "678",
            "679",
            "680",
            "681",
            "682",
            "683",
            "684",
            "685",
            "686",
            "687",
            "688",
            "689",
            "690",
            "691",
            "692",
            "693",
            "694",
            "695",
            "696",
            "697",
            "698",
            "699",
            "700",
            "701",
            "702",
            "703",
            "704",
            "705",
            "706",
            "707",
            "708",
            "709",
            "710",
            "711",
            "712",
            "713",
            "714",
            "715",
            "716",
            "717",
            "718",
            "719",
            "720",
            "721",
            "722",
            "723",
            "724",
            "725",
            "726",
            "727",
            "728",
            "729",
            "730",
            "731",
            "732",
            "733",
            "734",
            "735",
            "736",
            "737",
            "738",
            "739",
            "740",
            "741",
            "742",
            "743",
            "744",
            "745",
            "746",
            "747",
            "748",
            "749",
            "750",
            "751",
            "752",
            "753",
            "754",
            "755",
            "756",
            "757",
            "758",
            "759",
            "760",
            "761",
            "762",
            "763",
            "764",
            "765",
            "766",
            "767",
            "768",
            "769",
            "770",
            "771",
            "772",
            "773",
            "774",
            "775",
            "776",
            "777",
            "778",
            "779",
            "780",
            "781",
            "782",
            "783",
            "784",
            "785",
            "786",
            "787",
            "788",
            "789",
            "790",
            "791",
            "792",
            "793",
            "794",
            "795",
            "796",
            "797",
            "798",
            "799",
            "800",
            "801",
            "802",
            "803",
            "804",
            "805",
            "806",
            "807",
            "808",
            "809",
            "810",
            "811",
            "812",
            "813",
            "814",
            "815",
            "816",
            "817",
            "818",
            "819",
            "820",
            "821",
            "822",
            "823",
            "824",
            "825",
            "826",
            "827",
            "828",
            "829",
            "830",
            "831",
            "832",
            "833",
            "834",
            "835",
            "836",
            "837"
          ],
          "num": 837
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/jscomp/CompilerOptions.java b/src/com/google/javascript/jscomp/CompilerOptions.java\nnew file mode 100644\nindex 0000000..a272a80\n--- /dev/null\n+++ b/src/com/google/javascript/jscomp/CompilerOptions.java\n@@ -0,0 +1,837 @@\n+/*\n+ * Copyright 2009 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.javascript.jscomp;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.Maps;\n+import com.google.common.collect.Multimap;\n+import com.google.common.collect.Sets;\n+import com.google.javascript.rhino.Node;\n+import com.google.javascript.rhino.Token;\n+\n+import java.io.Serializable;\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * Compiler options\n+*\n+ */\n+public class CompilerOptions implements Serializable, Cloneable {\n+  private static final long serialVersionUID \u003d 7L;\n+\n+  /**\n+   * Configures the compiler for use as an IDE backend.  In this mode:\n+   * \u003cul\u003e\n+   *  \u003cli\u003eNo optimization passes will run.\u003c/li\u003e\n+   *  \u003cli\u003eThe last time custom passes are invoked is\n+   *      {@link CustomPassExecutionTime#BEFORE_OPTIMIZATIONS}\u003c/li\u003e\n+   *  \u003cli\u003eThe compiler will always try to process all inputs fully, even\n+   *      if it encounters errors.\u003c/li\u003e\n+   *  \u003cli\u003eThe compiler may record more information than is strictly\n+   *      needed for codegen.\u003c/li\u003e\n+   * \u003c/ul\u003e\n+   */\n+  public boolean ideMode;\n+\n+  /**\n+   * Configures the compiler to skip as many passes as possible.\n+   */\n+  boolean skipAllPasses;\n+\n+  /**\n+   * If true, name anonymous functions only. All others passes will be skipped.\n+   */\n+  boolean nameAnonymousFunctionsOnly;\n+\n+  /**\n+   * Configures the compiler to run expensive sanity checks after\n+   * every pass. Only intended for internal development.\n+   */\n+  DevMode devMode;\n+\n+  //--------------------------------\n+  // Checks\n+  //--------------------------------\n+\n+  /** Checks that all symbols are defined */\n+  public boolean checkSymbols;\n+\n+  /**\n+   * Checks that all variables with the @noshadow attribute are\n+   * never shadowed.\n+   */\n+  public CheckLevel checkShadowVars;\n+\n+  /** Checks for suspicious variable definitions and undefined variables */\n+  public CheckLevel aggressiveVarCheck;\n+\n+  /** Checks function arity */\n+  public CheckLevel checkFunctions;\n+\n+  /** Checks method arity */\n+  public CheckLevel checkMethods;\n+\n+  /** Makes sure no duplicate messages */\n+  public boolean checkDuplicateMessages;\n+\n+  /** Allows old deprecated js message style */\n+  public boolean allowLegacyJsMessages;\n+\n+  /**\n+   * Whether we should throw an exception in case if the message absent from a\n+   * bundle.\n+   */\n+  public boolean strictMessageReplacement;\n+\n+  /** Checks for suspicious statements that have no effect */\n+  public boolean checkSuspiciousCode;\n+\n+  /** Checks for invalid control structures */\n+  public boolean checkControlStructures;\n+\n+  /** Checks for non-extern properties that are read but never set. */\n+  public CheckLevel checkUndefinedProperties;\n+\n+  /**\n+   * Checks for non-extern properties that are written but never read.\n+   * This check occurs after the first constant-based dead code removal pass,\n+   * but before the main optimization loop.  This is noisy if you are\n+   * including libraries with methods that you don\u0027t use, so it is off by\n+   * default.\n+   */\n+  public boolean checkUnusedPropertiesEarly;\n+\n+  /** Checks types on expressions */\n+  public boolean checkTypes;\n+\n+  /** Tightens types based on a global analysis. */\n+  public boolean tightenTypes;\n+\n+  // TODO(user): A temporary flag to prevent the type inference from\n+  // running in the global scope because it takes too long to finish.\n+  /** Runs a flow sensitive type inference in the global scope */\n+  public boolean inferTypesInGlobalScope;\n+\n+  /** Checks for inexistant property calls */\n+  public boolean checkTypedPropertyCalls;\n+\n+  /**\n+   * Flags a warning if a property is missing the @override annotation, but it\n+   * overrides a base class property.\n+   */\n+  public CheckLevel reportMissingOverride;\n+\n+  /** Flags a warning for every node whose type could not be determined. */\n+  public CheckLevel reportUnknownTypes;\n+\n+  /** Checks for missing goog.require() calls **/\n+  public CheckLevel checkRequires;\n+\n+  /** Checks for missing goog.provides() calls **/\n+  public CheckLevel checkProvides;\n+\n+  /**\n+   * Checks the integrity of references to qualified global names.\n+   * (e.g. \"a.b\")\n+   */\n+  public CheckLevel checkGlobalNamesLevel;\n+\n+  /** Sets the check level for bad Closure require calls. */\n+  public CheckLevel brokenClosureRequiresLevel;\n+\n+  /**\n+   * Checks for certain uses of the {@code this} keyword that are considered\n+   * unsafe because they are likely to reference the global {@code this}\n+   * object unintentionally.\n+   */\n+  public CheckLevel checkGlobalThisLevel;\n+\n+  /**\n+   * Checks that certain string literals only appear in strings used as\n+   * goog.getCssName arguments.\n+   */\n+  public CheckLevel checkMissingGetCssNameLevel;\n+\n+  /**\n+   * Regex of string literals that may only appear in goog.getCssName arguments.\n+   */\n+  public String checkMissingGetCssNameBlacklist;\n+\n+  /** Checks that the synctactic restrictions of ES5 strict mode are met. */\n+  public boolean checkEs5Strict;\n+\n+  /** Checks that the synctactic restrictions of Caja are met. */\n+  public boolean checkCaja;\n+\n+  //--------------------------------\n+  // Optimizations\n+  //--------------------------------\n+\n+  /** Folds constants (e.g. (2 + 3) to 5) */\n+  public boolean foldConstants;\n+\n+  public boolean removeConstantExpressions;\n+\n+  public boolean deadAssignmentElimination;\n+\n+  /** Inlines constants (symbols that are all CAPS) */\n+  public boolean inlineConstantVars;\n+\n+  /** Inlines short functions */\n+  public boolean inlineFunctions;\n+\n+  /** Enhanced function inlining */\n+  public boolean decomposeExpressions;\n+\n+  /** Enhanced function inlining */\n+  public boolean inlineAnonymousFunctionExpressions;\n+\n+  /** Enhanced function inlining */\n+  public boolean inlineLocalFunctions;\n+\n+  /** Move code to a deeper module */\n+  public boolean crossModuleCodeMotion;\n+\n+  /** Merge two variables together as one. */\n+  public boolean coalesceVariableNames;\n+\n+  /** Move methds to a deeper module */\n+  public boolean crossModuleMethodMotion;\n+\n+  /** Inlines trivial getters */\n+  public boolean inlineGetters;\n+\n+  /** Inlines variables */\n+  public boolean inlineVariables;\n+\n+  // TODO(user): This is temporary. Once flow sensitive inlining is stable\n+  // Remove this.\n+  public boolean flowSensitiveInlineVariables;\n+\n+  /** Removes code associated with unused global names */\n+  public boolean smartNameRemoval;\n+\n+  /** Removes code that will never execute */\n+  public boolean removeDeadCode;\n+\n+  /** Checks for unreachable code */\n+  public CheckLevel checkUnreachableCode;\n+\n+  /** Checks for missing return statements */\n+  public CheckLevel checkMissingReturn;\n+\n+  /** Extracts common prototype member declarations */\n+  public boolean extractPrototypeMemberDeclarations;\n+\n+  /** Removes functions that have no body */\n+  public boolean removeEmptyFunctions;\n+\n+  /** Removes unused member prototypes */\n+  public boolean removeUnusedPrototypeProperties;\n+\n+  /** Tells AnalyzePrototypeProperties it can remove externed props. */\n+  public boolean removeUnusedPrototypePropertiesInExterns;\n+\n+  /** Removes unused variables */\n+  public boolean removeUnusedVars;\n+\n+  /** Removes unused variables in global scope. */\n+  public boolean removeUnusedVarsInGlobalScope;\n+\n+  /** Adds variable aliases for externals to reduce code size */\n+  public boolean aliasExternals;\n+\n+  /**\n+   * If set to a non-empty string, then during an alias externals pass only\n+   * externals with these names will be considered for aliasing.\n+   */\n+  public String aliasableGlobals;\n+\n+  /**\n+   * Additional globals that can not be aliased since they may be undefined or\n+   * can cause errors.  Comma separated list of symbols.  e.g. \"foo,bar\"\n+   */\n+  public String unaliasableGlobals;\n+\n+  /** Collapses multiple variable declarations into one */\n+  public boolean collapseVariableDeclarations;\n+\n+  /**\n+   * Collapses anonymous function declarations into named function\n+   * declarations\n+   */\n+  public boolean collapseAnonymousFunctions;\n+\n+  /**\n+   * If set to a non-empty set, those strings literals will be aliased to a\n+   * single global instance per string, to avoid creating more objects than\n+   * necessary.\n+   */\n+  public Set\u003cString\u003e aliasableStrings;\n+\n+  /**\n+   * A blacklist in the form of a regular expression to block strings that\n+   * contains certain words from being aliased.\n+   * If the value is the empty string, no words are blacklisted.\n+   */\n+  public String aliasStringsBlacklist;\n+\n+  /**\n+   * Aliases all string literals to global instances, to avoid creating more\n+   * objects than necessary (if true, overrides any set of strings passed in\n+   * to aliasableStrings)\n+   */\n+  public boolean aliasAllStrings;\n+\n+  /** Print string usage as part of the compilation log. */\n+  boolean outputJsStringUsage;\n+\n+  /** Converts quoted property accesses to dot syntax (a[\u0027b\u0027] -\u003e a.b) */\n+  public boolean convertToDottedProperties;\n+\n+  /** Reduces the size of common function expressions. */\n+  public boolean rewriteFunctionExpressions;\n+\n+  /**\n+   * Remove unused and constant parameters.\n+   */\n+  public boolean optimizeParameters;\n+\n+  /**\n+   * Provide formal names for elements of arguments array.\n+   */\n+  public boolean optimizeArgumentsArray;\n+\n+  /** Chains calls to functions that return this. */\n+  boolean chainCalls;\n+\n+  //--------------------------------\n+  // Renaming\n+  //--------------------------------\n+\n+  /** Controls which variables get renamed. */\n+  public VariableRenamingPolicy variableRenaming;\n+\n+  /** Controls which properties get renamed. */\n+  public PropertyRenamingPolicy propertyRenaming;\n+\n+  /** Controls label renaming. */\n+  public boolean labelRenaming;\n+\n+  /** Generate pseudo names for properties (for debugging purposes) */\n+  public boolean generatePseudoNames;\n+\n+  /** Specifies a prefix for all globals */\n+  public String renamePrefix;\n+\n+  /** Aliases true, false, and null to variables with shorter names. */\n+  public boolean aliasKeywords;\n+\n+  /** Flattens multi-level property names (e.g. a$b \u003d x) */\n+  public boolean collapseProperties;\n+\n+  /** Flattens multi-level property names on extern types (e.g. String$f \u003d x) */\n+  boolean collapsePropertiesOnExternTypes;\n+\n+  /**\n+   * Devirtualize prototype method by rewriting them to be static calls that\n+   * take the this pointer as their first argument\n+   */\n+  public boolean devirtualizePrototypeMethods;\n+\n+  /**\n+   * Use @nosideeffects annotations, function bodies and name graph\n+   * to determine if calls have side effects.  Requires --check_types.\n+   */\n+  public boolean computeFunctionSideEffects;\n+\n+  /**\n+   * Where to save debug report for compute function side effects.\n+   */\n+  public String debugFunctionSideEffectsPath;\n+\n+  /**\n+   * Rename properties to disambiguate between unrelated fields based on\n+   * type information.\n+   */\n+  public boolean disambiguateProperties;\n+\n+  /** Rename unrelated properties to the same name to reduce code size. */\n+  public boolean ambiguateProperties;\n+\n+  /** Give anonymous functions names for easier debugging */\n+  public AnonymousFunctionNamingPolicy anonymousFunctionNaming;\n+\n+  /** Serialized input variable renaming map. */\n+  public byte[] inputVariableMapSerialized;\n+\n+  /** Serialized input property renaming map. */\n+  public byte[] inputPropertyMapSerialized;\n+\n+  /** Whether to export test functions. */\n+  public boolean exportTestFunctions;\n+\n+  //--------------------------------\n+  // Special-purpose alterations\n+  //--------------------------------\n+\n+  /** Instrument code for the purpose of collecting coverage data. */\n+  public boolean instrumentForCoverage;\n+\n+  /**\n+   * Instrument code for the purpose of collecting coverage data - restrict to\n+   * coverage pass only, and skip all other passes.\n+   */\n+  public boolean instrumentForCoverageOnly;\n+\n+  public String syntheticBlockStartMarker;\n+\n+  public String syntheticBlockEndMarker;\n+\n+  /** Compiling locale */\n+  public String locale;\n+\n+  /** Sets the special \"COMPILED\" value to true */\n+  public boolean markAsCompiled;\n+\n+  /** Removes try...catch...finally blocks for easier debugging */\n+  public boolean removeTryCatchFinally;\n+\n+  /** Processes goog.provide() and goog.require() calls */\n+  public boolean closurePass;\n+\n+  /** Rewrite new Date(goog.now()) to new Date().  */\n+  boolean rewriteNewDateGoogNow;\n+\n+  /** Gather CSS names (requires closurePass) */\n+  public boolean gatherCssNames;\n+\n+  /** Names of types to strip */\n+  public Set\u003cString\u003e stripTypes;\n+\n+  /** Name suffixes that determine which variables and properties to strip */\n+  public Set\u003cString\u003e stripNameSuffixes;\n+\n+  /** Name prefixes that determine which variables and properties to strip */\n+  public Set\u003cString\u003e stripNamePrefixes;\n+\n+  /** Qualified type name prefixes that determine which types to strip */\n+  public Set\u003cString\u003e stripTypePrefixes;\n+\n+  /** Custom passes */\n+  public transient\n+      Multimap\u003cCustomPassExecutionTime, CompilerPass\u003e customPasses;\n+\n+  /** Mark no side effect calls */\n+  public boolean markNoSideEffectCalls;\n+\n+  /** Replacements for @defines. Will be Boolean, Numbers, or Strings */\n+  private Map\u003cString, Object\u003e defineReplacements;\n+\n+  /** Move top level function declarations to the top */\n+  public boolean moveFunctionDeclarations;\n+\n+  /** Instrumentation template to use */\n+  public String instrumentationTemplate;\n+\n+  /**\n+   * App identifier string for use by the instrumentation template\u0027s\n+   * app_name_setter\n+   */\n+  public String appNameStr;\n+\n+  /** Record function information */\n+  public boolean recordFunctionInformation;\n+\n+  public boolean generateExports;\n+\n+  /** Map used in the renaming of CSS class names. */\n+  public CssRenamingMap cssRenamingMap;\n+\n+  /** Process instances of goog.testing.ObjectPropertyString. */\n+  boolean processObjectPropertyString;\n+\n+  /** Id generators to replace. */\n+  Set\u003cString\u003e idGenerators;\n+\n+  //--------------------------------\n+  // Output options\n+  //--------------------------------\n+\n+  /** Output in pretty indented format */\n+  public boolean prettyPrint;\n+\n+  /** Line break the output a bit more aggressively */\n+  public boolean lineBreak;\n+\n+  /** Prints a separator comment before each js script */\n+  public boolean printInputDelimiter;\n+\n+  /** Where to save a report of global name usage */\n+  public String reportPath;\n+\n+  public TracerMode tracer;\n+\n+  private boolean colorizeErrorOutput;\n+\n+  public ErrorFormat errorFormat;\n+\n+  public String jsOutputFile;\n+\n+  private transient ComposeWarningsGuard warningsGuard;\n+\n+  //--------------------------------\n+  // Special Output Options\n+  //--------------------------------\n+\n+  /** The output path for the created externs file. */\n+  String externExportsPath;\n+\n+  /** Where to save a cross-reference report from the name reference graph */\n+  public String nameReferenceReportPath;\n+\n+  /** Where to save the name reference graph */\n+  public String nameReferenceGraphPath;\n+\n+  //--------------------------------\n+  // Debugging Options\n+  //--------------------------------\n+\n+  /** The output path for the source map. */\n+  public String sourceMapOutputPath;\n+\n+\n+  /**\n+   * Initializes compiler options. All options are disabled by default.\n+   *\n+   * Command-line frontends to the compiler should set these properties\n+   * like a builder.\n+   */\n+  public CompilerOptions() {\n+    // Checks\n+    skipAllPasses \u003d false;\n+    nameAnonymousFunctionsOnly \u003d false;\n+    devMode \u003d DevMode.OFF;\n+    checkSymbols \u003d false;\n+    checkShadowVars \u003d CheckLevel.OFF;\n+    aggressiveVarCheck \u003d CheckLevel.OFF;\n+    checkFunctions \u003d CheckLevel.OFF;\n+    checkMethods \u003d CheckLevel.OFF;\n+    checkDuplicateMessages \u003d false;\n+    allowLegacyJsMessages \u003d false;\n+    strictMessageReplacement \u003d false;\n+    checkSuspiciousCode \u003d false;\n+    checkControlStructures \u003d false;\n+    checkUndefinedProperties \u003d CheckLevel.OFF;\n+    checkUnusedPropertiesEarly \u003d false;\n+    checkTypes \u003d false;\n+    tightenTypes \u003d false;\n+    inferTypesInGlobalScope \u003d false;\n+    checkTypedPropertyCalls \u003d false;\n+    reportMissingOverride \u003d CheckLevel.OFF;\n+    reportUnknownTypes \u003d CheckLevel.OFF;\n+    checkRequires \u003d CheckLevel.OFF;\n+    checkProvides \u003d CheckLevel.OFF;\n+    checkGlobalNamesLevel \u003d CheckLevel.OFF;\n+    brokenClosureRequiresLevel \u003d CheckLevel.ERROR;\n+    checkGlobalThisLevel \u003d CheckLevel.WARNING;\n+    checkUnreachableCode \u003d CheckLevel.OFF;\n+    checkMissingReturn \u003d CheckLevel.OFF;\n+    checkMissingGetCssNameLevel \u003d CheckLevel.OFF;\n+    checkMissingGetCssNameBlacklist \u003d null;\n+    checkEs5Strict \u003d false;\n+    checkCaja \u003d false;\n+    computeFunctionSideEffects \u003d false;\n+    chainCalls \u003d false;\n+\n+    // Optimizations\n+    foldConstants \u003d false;\n+    removeConstantExpressions \u003d false;\n+    coalesceVariableNames \u003d false;\n+    deadAssignmentElimination \u003d false;\n+    inlineConstantVars \u003d false;\n+    inlineFunctions \u003d false;\n+    crossModuleCodeMotion \u003d false;\n+    crossModuleMethodMotion \u003d false;\n+    inlineGetters \u003d false;\n+    inlineVariables \u003d false;\n+    smartNameRemoval \u003d false;\n+    removeDeadCode \u003d false;\n+    extractPrototypeMemberDeclarations \u003d false;\n+    removeUnusedPrototypeProperties \u003d false;\n+    removeUnusedPrototypePropertiesInExterns \u003d false;\n+    removeUnusedVars \u003d false;\n+    removeUnusedVarsInGlobalScope \u003d true;\n+    aliasExternals \u003d false;\n+    collapseVariableDeclarations \u003d false;\n+    collapseAnonymousFunctions \u003d false;\n+    aliasableStrings \u003d Collections.emptySet();\n+    aliasStringsBlacklist \u003d \"\";\n+    aliasAllStrings \u003d false;\n+    outputJsStringUsage \u003d false;\n+    convertToDottedProperties \u003d false;\n+    rewriteFunctionExpressions \u003d false;\n+    optimizeParameters \u003d false;\n+\n+    // Renaming\n+    variableRenaming \u003d VariableRenamingPolicy.OFF;\n+    propertyRenaming \u003d PropertyRenamingPolicy.OFF;\n+    labelRenaming \u003d false;\n+    generatePseudoNames \u003d false;\n+    renamePrefix \u003d null;\n+    aliasKeywords \u003d false;\n+    collapseProperties \u003d false;\n+    collapsePropertiesOnExternTypes \u003d false;\n+    devirtualizePrototypeMethods \u003d false;\n+    disambiguateProperties \u003d false;\n+    ambiguateProperties \u003d false;\n+    anonymousFunctionNaming \u003d AnonymousFunctionNamingPolicy.OFF;\n+    exportTestFunctions \u003d false;\n+\n+    // Alterations\n+    instrumentForCoverage \u003d false;\n+    instrumentForCoverageOnly \u003d false;\n+    syntheticBlockStartMarker \u003d null;\n+    syntheticBlockEndMarker \u003d null;\n+    locale \u003d null;\n+    markAsCompiled \u003d false;\n+    removeTryCatchFinally \u003d false;\n+    closurePass \u003d false;\n+    rewriteNewDateGoogNow \u003d true;\n+    stripTypes \u003d Collections.emptySet();\n+    stripNameSuffixes \u003d Collections.emptySet();\n+    stripNamePrefixes \u003d Collections.emptySet();\n+    stripTypePrefixes \u003d Collections.emptySet();\n+    customPasses \u003d null;\n+    markNoSideEffectCalls \u003d false;\n+    defineReplacements \u003d Maps.newHashMap();\n+    moveFunctionDeclarations \u003d false;\n+    instrumentationTemplate \u003d null;\n+    appNameStr \u003d \"\";\n+    recordFunctionInformation \u003d false;\n+    generateExports \u003d false;\n+    cssRenamingMap \u003d null;\n+    processObjectPropertyString \u003d false;\n+    idGenerators \u003d Collections.emptySet();\n+\n+    // Output\n+    printInputDelimiter \u003d false;\n+    prettyPrint \u003d false;\n+    lineBreak \u003d false;\n+    reportPath \u003d null;\n+    tracer \u003d TracerMode.OFF;\n+    colorizeErrorOutput \u003d false;\n+    errorFormat \u003d ErrorFormat.SINGLELINE;\n+    warningsGuard \u003d null;\n+    debugFunctionSideEffectsPath \u003d null;\n+    jsOutputFile \u003d \"\";\n+    nameReferenceReportPath \u003d null;\n+    nameReferenceGraphPath \u003d null;\n+  }\n+\n+  /**\n+   * Returns the map of define replacements.\n+   */\n+  public Map\u003cString, Node\u003e getDefineReplacements() {\n+    Map\u003cString, Node\u003e map \u003d Maps.newHashMap();\n+    for (Map.Entry\u003cString, Object\u003e entry : defineReplacements.entrySet()) {\n+      String name \u003d entry.getKey();\n+      Object value \u003d entry.getValue();\n+      if (value instanceof Boolean) {\n+        map.put(name, ((Boolean) value).booleanValue() ?\n+            new Node(Token.TRUE) : new Node(Token.FALSE));\n+      } else if (value instanceof Integer) {\n+        map.put(name, Node.newNumber(((Integer) value).intValue()));\n+      } else if (value instanceof Double) {\n+        map.put(name, Node.newNumber(((Double) value).doubleValue()));\n+      } else {\n+        Preconditions.checkState(value instanceof String);\n+        map.put(name, Node.newString((String) value));\n+      }\n+    }\n+    return map;\n+  }\n+\n+  /**\n+   * Sets the value of the {@code @define} variable in JS\n+   * to a boolean literal.\n+   */\n+  public void setDefineToBooleanLiteral(String defineName, boolean value) {\n+    defineReplacements.put(defineName, new Boolean(value));\n+  }\n+\n+  /**\n+   * Sets the value of the {@code @define} variable in JS to a\n+   * String literal.\n+   */\n+  public void setDefineToStringLiteral(String defineName, String value) {\n+    defineReplacements.put(defineName, value);\n+  }\n+\n+  /**\n+   * Sets the value of the {@code @define} variable in JS to a\n+   * number literal.\n+   */\n+  public void setDefineToNumberLiteral(String defineName, int value) {\n+    defineReplacements.put(defineName, new Integer(value));\n+  }\n+\n+  /**\n+   * Sets the value of the {@code @define} variable in JS to a\n+   * number literal.\n+   */\n+  public void setDefineToDoubleLiteral(String defineName, double value) {\n+    defineReplacements.put(defineName, new Double(value));\n+  }\n+\n+  /**\n+   * Skip all possible passes, to make the compiler as fast as possible.\n+   */\n+  public void skipAllCompilerPasses() {\n+    skipAllPasses \u003d true;\n+  }\n+\n+  /**\n+   * Whether the warnings guard in this Options object enables the given\n+   * group of warnings.\n+   */\n+  boolean enables(DiagnosticGroup type) {\n+    return warningsGuard !\u003d null \u0026\u0026 warningsGuard.enables(type);\n+  }\n+\n+  /**\n+   * Configure the given type of warning to the given level.\n+   */\n+  public void setWarningLevel(DiagnosticGroup type, CheckLevel level) {\n+    addWarningsGuard(new DiagnosticGroupWarningsGuard(type, level));\n+  }\n+\n+  WarningsGuard getWarningsGuard() {\n+    return warningsGuard;\n+  }\n+\n+  /**\n+   * Add a guard to the set of warnings guards.\n+   */\n+  public void addWarningsGuard(WarningsGuard guard) {\n+    if (warningsGuard \u003d\u003d null) {\n+      warningsGuard \u003d new ComposeWarningsGuard(guard);\n+    } else {\n+      warningsGuard.addGuard(guard);\n+    }\n+  }\n+\n+  /**\n+   * Sets the variable and property renaming policies for the compiler,\n+   * in a way that clears warnings about the renaming policy being\n+   * uninitialized from flags.\n+   */\n+  public void setRenamingPolicy(VariableRenamingPolicy newVariablePolicy,\n+      PropertyRenamingPolicy newPropertyPolicy) {\n+    this.variableRenaming \u003d newVariablePolicy;\n+    this.propertyRenaming \u003d newPropertyPolicy;\n+  }\n+\n+  /**\n+   * If true, flattens multi-level property names on extern types\n+   * (e.g. String$f \u003d x). This should only be used with the typed version of\n+   * the externs files.\n+   */\n+  public void setCollapsePropertiesOnExternTypes(boolean collapse) {\n+    collapsePropertiesOnExternTypes \u003d collapse;\n+  }\n+\n+  /**\n+   * If true, process goog.testing.ObjectPropertyString instances.\n+   */\n+  public void setProcessObjectPropertyString(boolean process) {\n+    processObjectPropertyString \u003d process;\n+  }\n+\n+  /**\n+   * Sets the id generators to replace.\n+   */\n+  public void setIdGenerators(Set\u003cString\u003e idGenerators) {\n+    this.idGenerators \u003d Sets.newHashSet(idGenerators);\n+  }\n+\n+  public void setRewriteNewDateGoogNow(boolean rewrite) {\n+    this.rewriteNewDateGoogNow \u003d rewrite;\n+  }\n+\n+  /**\n+   * If true, name anonymous functions only. All other passes will be skipped.\n+   */\n+  public void setNameAnonymousFunctionsOnly(boolean value) {\n+    this.nameAnonymousFunctionsOnly \u003d value;\n+  }\n+\n+  public void setColorizeErrorOutput(boolean colorizeErrorOutput) {\n+    this.colorizeErrorOutput \u003d colorizeErrorOutput;\n+  }\n+\n+  public boolean shouldColorizeErrorOutput() {\n+    return colorizeErrorOutput;\n+  }\n+\n+  /**\n+   * If true, chain calls to functions that return this.\n+   */\n+  public void setChainCalls(boolean value) {\n+    this.chainCalls \u003d value;\n+  }\n+\n+  @Override\n+  public Object clone() throws CloneNotSupportedException {\n+    CompilerOptions clone \u003d (CompilerOptions) super.clone();\n+    // TODO(bolinfest): Add relevant custom cloning.\n+    return clone;\n+  }\n+\n+  //////////////////////////////////////////////////////////////////////////////\n+  // Enums\n+\n+  /** When to do the extra sanity checks */\n+  static enum DevMode {\n+    /**\n+     * Don\u0027t do any extra sanity checks.\n+     */\n+    OFF,\n+\n+    /**\n+     * After the initial parse\n+     */\n+    START,\n+\n+    /**\n+     * After every pass\n+     */\n+    EVERY_PASS\n+  }\n+\n+  public static enum TracerMode {\n+    ALL,  // Collect all timing and size metrics.\n+    FAST, // Collect all timing and size metrics, except gzipped size.\n+    OFF;  // Collect no timing and size metrics.\n+\n+    boolean isOn() {\n+      return this !\u003d OFF;\n+    }\n+  }\n+}\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldDeclaration [9075,9163]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [17660,17688]"
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/jscomp/ControlFlowGraph.java",
        "src/com/google/javascript/jscomp/ControlFlowGraph.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [
            "com.google.javascript.jscomp.AbstractCfgNodeTraversalCallback:isEnteringNewCfgNode:[Node n]:boolean",
            "com.google.javascript.jscomp.ControlFlowGraph:isImplicitReturn:[DiGraphNode\u003cN,ControlFlowGraph.Branch\u003e node]:boolean",
            "com.google.javascript.jscomp.ControlFlowGraph:connectToImplicitReturn:[N srcValue, Branch edgeValue]:void",
            "com.google.javascript.jscomp.AbstractCfgNodeTraversalCallback:shouldTraverse:[NodeTraversal nodeTraversal, Node n, Node parent]:boolean",
            "com.google.javascript.jscomp.ControlFlowGraph:getEntry:[]:DiGraphNode\u003cN,ControlFlowGraph.Branch\u003e",
            "com.google.javascript.jscomp.ControlFlowGraph:ControlFlowGraph:[N entry]:null",
            "com.google.javascript.jscomp.ControlFlowGraph:getOptionalNodeComparator:[boolean isForward]:Comparator\u003cDiGraphNode\u003cN,Branch\u003e\u003e",
            "com.google.javascript.jscomp.ControlFlowGraph:isConditional:[]:boolean",
            "com.google.javascript.jscomp.ControlFlowGraph:getImplicitReturn:[]:DiGraphNode\u003cN,ControlFlowGraph.Branch\u003e"
          ],
          "num": 9
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "-1"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "35",
            "36",
            "37",
            "38",
            "39",
            "40",
            "41",
            "42",
            "43",
            "44",
            "45",
            "46",
            "47",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57",
            "58",
            "59",
            "60",
            "61",
            "62",
            "63",
            "64",
            "65",
            "66",
            "67",
            "68",
            "69",
            "70",
            "71",
            "72",
            "73",
            "74",
            "75",
            "76",
            "77",
            "78",
            "79",
            "80",
            "81",
            "82",
            "83",
            "84",
            "85",
            "86",
            "87",
            "88",
            "89",
            "90",
            "91",
            "92",
            "93",
            "94",
            "95",
            "96",
            "97",
            "98",
            "99",
            "100",
            "101",
            "102",
            "103",
            "104",
            "105",
            "106",
            "107",
            "108",
            "109",
            "110",
            "111",
            "112",
            "113",
            "114",
            "115",
            "116",
            "117",
            "118",
            "119",
            "120",
            "121",
            "122",
            "123",
            "124",
            "125",
            "126",
            "127",
            "128",
            "129",
            "130",
            "131",
            "132",
            "133",
            "134",
            "135",
            "136",
            "137",
            "138",
            "139",
            "140",
            "141",
            "142",
            "143",
            "144",
            "145",
            "146",
            "147",
            "148",
            "149",
            "150",
            "151",
            "152",
            "153",
            "154",
            "155",
            "156",
            "157",
            "158",
            "159",
            "160",
            "161",
            "162",
            "163",
            "164",
            "165",
            "166",
            "167",
            "168",
            "169",
            "170",
            "171",
            "172",
            "173",
            "174",
            "175",
            "176",
            "177",
            "178",
            "179",
            "180",
            "181",
            "182",
            "183",
            "184",
            "185",
            "186",
            "187",
            "188",
            "189",
            "190",
            "191",
            "192",
            "193",
            "194",
            "195"
          ],
          "num": 195
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/jscomp/ControlFlowGraph.java b/src/com/google/javascript/jscomp/ControlFlowGraph.java\nnew file mode 100644\nindex 0000000..dd4afa2\n--- /dev/null\n+++ b/src/com/google/javascript/jscomp/ControlFlowGraph.java\n@@ -0,0 +1,195 @@\n+/*\n+ * Copyright 2008 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.javascript.jscomp;\n+\n+import com.google.javascript.jscomp.NodeTraversal.Callback;\n+import com.google.javascript.jscomp.graph.LinkedDirectedGraph;\n+import com.google.javascript.rhino.Node;\n+import com.google.javascript.rhino.Token;\n+\n+import java.util.Comparator;\n+\n+/**\n+ * Control flow graph.\n+ *\n+*\n+ *\n+ * @param \u003cN\u003e The instruction type of the control flow graph.\n+ */\n+class ControlFlowGraph\u003cN\u003e extends\n+    LinkedDirectedGraph\u003cN, ControlFlowGraph.Branch\u003e {\n+\n+  /**\n+   * A special node marked by the node value key null to a singleton\n+   * \"return\" when control is transfered outside of the current control flow\n+   * graph.\n+   */\n+  private final DiGraphNode\u003cN, ControlFlowGraph.Branch\u003e implicitReturn;\n+\n+  private final DiGraphNode\u003cN, ControlFlowGraph.Branch\u003e entry;\n+\n+  /**\n+   * Constructor.\n+   */\n+  public ControlFlowGraph(N entry) {\n+    implicitReturn \u003d createDirectedGraphNode(null);\n+    this.entry \u003d createDirectedGraphNode(entry);\n+  }\n+\n+  /**\n+   * Gets the implicit return node.\n+   *\n+   * @return Return node.\n+   */\n+  public DiGraphNode\u003cN, ControlFlowGraph.Branch\u003e getImplicitReturn() {\n+    return implicitReturn;\n+  }\n+\n+  /**\n+   * Gets the entry point of the control flow graph. In general, this should be\n+   * the beginning of the global script or beginning of a function.\n+   *\n+   * @return The entry point.\n+   */\n+  public DiGraphNode\u003cN, ControlFlowGraph.Branch\u003e getEntry() {\n+    return entry;\n+  }\n+\n+  /**\n+   * Checks whether node is the implicit return.\n+   *\n+   * @param node Node.\n+   * @return True if the node is the implicit return.\n+   */\n+  public boolean isImplicitReturn(\n+      DiGraphNode\u003cN, ControlFlowGraph.Branch\u003e node) {\n+    return node \u003d\u003d implicitReturn;\n+  }\n+\n+  /**\n+   * Connects the node to the explicit return.\n+   *\n+   * @param srcValue Node.\n+   * @param edgeValue Edge.\n+   */\n+  public void connectToImplicitReturn(N srcValue, Branch edgeValue) {\n+    super.connect(srcValue, edgeValue, null);\n+  }\n+\n+  /**\n+   * Gets a comparator for the nodes. The default implementation returns\n+   * {@code null}. See {@link ControlFlowGraph#getOptionalNodeComparator}.\n+   * @param isForward Whether the comparator sorts the nodes in the direction of\n+   *    the flow.\n+   * @return a comparator or null (in particular, if not overriden)\n+   */\n+  public Comparator\u003cDiGraphNode\u003cN, Branch\u003e\u003e getOptionalNodeComparator(\n+      boolean isForward) {\n+    return null;\n+  }\n+\n+  /**\n+   * The edge object for the control flow graph.\n+   */\n+  public static enum Branch {\n+    /** Edge is taken if the condition is true. */\n+    ON_TRUE,\n+    /** Edge is taken if the condition is false. */\n+    ON_FALSE,\n+    /** Unconditional branch. */\n+    UNCOND,\n+    /** Exception related. */\n+    ON_EX,\n+    /** Possible folded-away template */\n+    SYN_BLOCK;\n+\n+    public boolean isConditional() {\n+      return this \u003d\u003d ON_TRUE || this \u003d\u003d ON_FALSE;\n+    }\n+  }\n+\n+  /**\n+   * Abstract callback to visit a control flow graph node without going into\n+   * subtrees of the node that is also represented by another control flow graph\n+   * node.\n+   *\n+   * \u003cp\u003eFor example, traversing an IF node as root will visit the two subtree\n+   * pointed by the {@link ControlFlowGraph.Branch#ON_TRUE} and\n+   * {@link ControlFlowGraph.Branch#ON_FALSE} edge.\n+   */\n+  public abstract static class AbstractCfgNodeTraversalCallback implements\n+      Callback {\n+    public final boolean shouldTraverse(NodeTraversal nodeTraversal, Node n,\n+        Node parent) {\n+      if (parent \u003d\u003d null) {\n+        return true;\n+      }\n+      return !isEnteringNewCfgNode(n);\n+    }\n+  }\n+  \n+  /**\n+   * @return True if n should be represented by a new CFG node in the control\n+   * flow graph.\n+   */\n+  public static boolean isEnteringNewCfgNode(Node n) {\n+    Node parent \u003d n.getParent();\n+    switch (parent.getType()) {\n+      case Token.BLOCK:\n+      case Token.SCRIPT:\n+      case Token.TRY:\n+      case Token.FINALLY:\n+        return true;\n+      case Token.FUNCTION:\n+        // A function node represents the start of a function where the name\n+        // is bleed into the local scope and parameters has been assigned\n+        // to the formal argument names. The node includes the name of the\n+        // function and the LP list since we assume the whole set up process\n+        // is atomic without change in control flow. The next change of\n+        // control is going into the function\u0027s body represent by the second\n+        // child.\n+        return n !\u003d parent.getFirstChild().getNext();\n+      case Token.WHILE:\n+      case Token.DO:\n+      case Token.IF:\n+        // Theses control structure is represented by its node that holds the\n+        // condition. Each of them is a branch node based on its condition.\n+        return NodeUtil.getConditionExpression(parent) !\u003d n;\n+        \n+      case Token.FOR:\n+        // The FOR(;;) node differs from other control structure in that\n+        // it has a initialization and a increment statement. Those\n+        // two statements have its corresponding CFG nodes to represent them.\n+        // The FOR node represents the condition check for each iteration.\n+        // That way the following:\n+        // for(var x \u003d 0; x \u003c 10; x++) { } has a graph that is isomorphic to\n+        // var x \u003d 0; while(x\u003c10) {  x++; }\n+        if (parent.getChildCount() \u003d\u003d 4) {\n+          return NodeUtil.getConditionExpression(parent) !\u003d n;\n+        } else {\n+          return n \u003d\u003d parent.getLastChild();\n+        }\n+      case Token.SWITCH:\n+      case Token.CASE:\n+      case Token.CATCH:\n+      case Token.WITH:\n+        return n !\u003d parent.getFirstChild();\n+      default:\n+        return false;\n+    }\n+  }\n+}\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [4108,6127]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ReturnStatement [4060,4092]"
        },
        {
          "type": "delete-tree",
          "from": "SwitchStatement [4060,4846]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/jscomp/DeadAssignmentsElimination.java",
        "src/com/google/javascript/jscomp/DeadAssignmentsElimination.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [
            "com.google.javascript.jscomp.DeadAssignmentsElimination:tryRemoveAssignment:[NodeTraversal t, Node n, Node exprRoot, FlowState\u003cLiveVariableLattice\u003e state]:void",
            "com.google.javascript.jscomp.DeadAssignmentsElimination:visit:[NodeTraversal t, Node n, Node parent]:void",
            "com.google.javascript.jscomp.DeadAssignmentsElimination:tryRemoveDeadAssignments:[NodeTraversal t, ControlFlowGraph\u003cNode\u003e cfg]:void",
            "com.google.javascript.jscomp.DeadAssignmentsElimination:isVariableStillLiveWithinExpression:[Node n, Node exprRoot, String variable]:boolean",
            "com.google.javascript.jscomp.DeadAssignmentsElimination:tryRemoveAssignment:[NodeTraversal t, Node n, FlowState\u003cLiveVariableLattice\u003e state]:void",
            "com.google.javascript.jscomp.DeadAssignmentsElimination:DeadAssignmentsElimination:[AbstractCompiler compiler]:null",
            "com.google.javascript.jscomp.DeadAssignmentsElimination:process:[Node externs, Node root]:void",
            "com.google.javascript.jscomp.DeadAssignmentsElimination:readVariableBeforeKilling:[Node n, String variable]:VariableLiveness",
            "com.google.javascript.jscomp.DeadAssignmentsElimination:enterScope:[NodeTraversal t]:void",
            "com.google.javascript.jscomp.DeadAssignmentsElimination:exitScope:[NodeTraversal t]:void"
          ],
          "num": 10
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "-1"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "35",
            "36",
            "37",
            "38",
            "39",
            "40",
            "41",
            "42",
            "43",
            "44",
            "45",
            "46",
            "47",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57",
            "58",
            "59",
            "60",
            "61",
            "62",
            "63",
            "64",
            "65",
            "66",
            "67",
            "68",
            "69",
            "70",
            "71",
            "72",
            "73",
            "74",
            "75",
            "76",
            "77",
            "78",
            "79",
            "80",
            "81",
            "82",
            "83",
            "84",
            "85",
            "86",
            "87",
            "88",
            "89",
            "90",
            "91",
            "92",
            "93",
            "94",
            "95",
            "96",
            "97",
            "98",
            "99",
            "100",
            "101",
            "102",
            "103",
            "104",
            "105",
            "106",
            "107",
            "108",
            "109",
            "110",
            "111",
            "112",
            "113",
            "114",
            "115",
            "116",
            "117",
            "118",
            "119",
            "120",
            "121",
            "122",
            "123",
            "124",
            "125",
            "126",
            "127",
            "128",
            "129",
            "130",
            "131",
            "132",
            "133",
            "134",
            "135",
            "136",
            "137",
            "138",
            "139",
            "140",
            "141",
            "142",
            "143",
            "144",
            "145",
            "146",
            "147",
            "148",
            "149",
            "150",
            "151",
            "152",
            "153",
            "154",
            "155",
            "156",
            "157",
            "158",
            "159",
            "160",
            "161",
            "162",
            "163",
            "164",
            "165",
            "166",
            "167",
            "168",
            "169",
            "170",
            "171",
            "172",
            "173",
            "174",
            "175",
            "176",
            "177",
            "178",
            "179",
            "180",
            "181",
            "182",
            "183",
            "184",
            "185",
            "186",
            "187",
            "188",
            "189",
            "190",
            "191",
            "192",
            "193",
            "194",
            "195",
            "196",
            "197",
            "198",
            "199",
            "200",
            "201",
            "202",
            "203",
            "204",
            "205",
            "206",
            "207",
            "208",
            "209",
            "210",
            "211",
            "212",
            "213",
            "214",
            "215",
            "216",
            "217",
            "218",
            "219",
            "220",
            "221",
            "222",
            "223",
            "224",
            "225",
            "226",
            "227",
            "228",
            "229",
            "230",
            "231",
            "232",
            "233",
            "234",
            "235",
            "236",
            "237",
            "238",
            "239",
            "240",
            "241",
            "242",
            "243",
            "244",
            "245",
            "246",
            "247",
            "248",
            "249",
            "250",
            "251",
            "252",
            "253",
            "254",
            "255",
            "256",
            "257",
            "258",
            "259",
            "260",
            "261",
            "262",
            "263",
            "264",
            "265",
            "266",
            "267",
            "268",
            "269",
            "270",
            "271",
            "272",
            "273",
            "274",
            "275",
            "276",
            "277",
            "278",
            "279",
            "280",
            "281",
            "282",
            "283",
            "284",
            "285",
            "286",
            "287",
            "288",
            "289",
            "290",
            "291",
            "292",
            "293",
            "294",
            "295",
            "296"
          ],
          "num": 296
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java b/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\nnew file mode 100644\nindex 0000000..d554f78\n--- /dev/null\n+++ b/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\n@@ -0,0 +1,296 @@\n+/*\n+ * Copyright 2008 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.javascript.jscomp;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.javascript.jscomp.ControlFlowGraph.Branch;\n+import com.google.javascript.jscomp.DataFlowAnalysis.FlowState;\n+import com.google.javascript.jscomp.graph.DiGraph.DiGraphNode;\n+import com.google.javascript.jscomp.LiveVariablesAnalysis.LiveVariableLattice;\n+import com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback;\n+import com.google.javascript.jscomp.NodeTraversal.ScopedCallback;\n+import com.google.javascript.jscomp.Scope.Var;\n+import com.google.javascript.rhino.Node;\n+import com.google.javascript.rhino.Token;\n+\n+import java.util.List;\n+\n+/**\n+ * Removes local variable assignments that are useless based on information from\n+ * {@link LiveVariablesAnalysis}. If there is an assignment to variable\n+ * {@code x} and {@code x} is dead after this assignment, we know that the\n+ * current content of {@code x} will not be read and this assignment is useless.\n+ *\n+*\n+ */\n+class DeadAssignmentsElimination extends AbstractPostOrderCallback implements\n+    CompilerPass, ScopedCallback {\n+\n+  private final AbstractCompiler compiler;\n+  private LiveVariablesAnalysis liveness;\n+\n+  public DeadAssignmentsElimination(AbstractCompiler compiler) {\n+    this.compiler \u003d compiler;\n+  }\n+\n+  @Override\n+  public void process(Node externs, Node root) {\n+    Preconditions.checkNotNull(externs);\n+    Preconditions.checkNotNull(root);\n+    NodeTraversal.traverse(compiler, root, this);\n+  }\n+\n+  @Override\n+  public void enterScope(NodeTraversal t) {\n+    Scope scope \u003d t.getScope();\n+    // Global scope _SHOULD_ work, however, liveness won\u0027t finish without\n+    // -Xmx1024 in closure. We might have to look at coding conventions for\n+    // exported variables as well.\n+    if (scope.isGlobal()) {\n+      return;\n+    }\n+    \n+    // We are not going to do any dead assignment elimination in when there is\n+    // at least one inner function because in most browsers, when there is a\n+    // closure, ALL the variables are saved (escaped).\n+    if (!NodeUtil.containsFunctionDeclaration(\n+        t.getScopeRoot().getLastChild())) {\n+      // Computes liveness information first.\n+      ControlFlowGraph\u003cNode\u003e cfg \u003d t.getControlFlowGraph();\n+      liveness \u003d new LiveVariablesAnalysis(cfg, scope, compiler);\n+      liveness.analyze();\n+      tryRemoveDeadAssignments(t, cfg);\n+    }\n+  }\n+\n+  @Override\n+  public void exitScope(NodeTraversal t) {\n+  }\n+\n+  @Override\n+  public void visit(NodeTraversal t, Node n, Node parent) {\n+  }\n+\n+  /**\n+   * Try to remove useless assignments from a control flow graph that has been\n+   * annotated with liveness information.\n+   *\n+   * @param t The node traversal.\n+   * @param cfg The control flow graph of the program annotated with liveness\n+   *        information.\n+   */\n+  private void tryRemoveDeadAssignments(NodeTraversal t,\n+      ControlFlowGraph\u003cNode\u003e cfg) {\n+    List\u003cDiGraphNode\u003cNode, Branch\u003e\u003e nodes \u003d cfg.getDirectedGraphNodes();\n+\n+    for (DiGraphNode\u003cNode, Branch\u003e cfgNode : nodes) {\n+      FlowState\u003cLiveVariableLattice\u003e state \u003d\n+          cfgNode.getAnnotation();\n+      Node n \u003d cfgNode.getValue();\n+      if (n \u003d\u003d null) {\n+        continue;\n+      }\n+      switch (n.getType()) {\n+        case Token.IF:\n+        case Token.WHILE:\n+        case Token.DO:\n+          tryRemoveAssignment(t, NodeUtil.getConditionExpression(n), state);\n+          continue;\n+        case Token.FOR:\n+          if (n.getChildCount() \u003d\u003d 4) {\n+            tryRemoveAssignment(\n+                t, NodeUtil.getConditionExpression(n), state);\n+          }\n+          continue;\n+        case Token.SWITCH:\n+        case Token.CASE:\n+        case Token.RETURN:\n+          if (n.hasChildren()) {\n+            tryRemoveAssignment(t, n.getFirstChild(), state);\n+          }\n+          continue;\n+        // TODO(user): case Token.VAR: Remove var a\u003d1;a\u003d2;.....\n+      }\n+      \n+      tryRemoveAssignment(t, n, state);\n+    }\n+  }\n+\n+  private void tryRemoveAssignment(NodeTraversal t, Node n,\n+      FlowState\u003cLiveVariableLattice\u003e state) {\n+    tryRemoveAssignment(t, n, n, state);\n+  }\n+  \n+  /**\n+   * Determines if any local variables are dead after the instruction {@code n}\n+   * and are assigned within the subtree of {@code n}. Removes those assignments\n+   * if there are any.\n+   *\n+   * @param n Target instruction.\n+   * @param exprRoot The CFG node where the liveness information in state is\n+   *     still correct.\n+   * @param state The liveness information at {@code n}.\n+   */\n+  private void tryRemoveAssignment(NodeTraversal t, Node n, Node exprRoot,\n+      FlowState\u003cLiveVariableLattice\u003e state) {\n+\n+    // TODO(user): Add implemenation to handle x++ and ++x by replacing\n+    // them with x or x+1 respectively.\n+    if (NodeUtil.isAssignmentOp(n)) {\n+\n+      Node lhs \u003d n.getFirstChild();\n+      Node rhs \u003d lhs.getNext();\n+      \n+      // Recurse first. Example: dead_x \u003d dead_y \u003d 1; We try to clean up dead_y\n+      // first.\n+      if (rhs !\u003d null) {\n+        tryRemoveAssignment(t, rhs, exprRoot, state);\n+        rhs \u003d lhs.getNext();\n+      }\n+\n+      Scope scope \u003d t.getScope();\n+      if (!NodeUtil.isName(lhs)) {\n+        return; // Not a local variable assignment.\n+      }\n+      String name \u003d lhs.getString();\n+      if (!scope.isDeclared(name, false)) {\n+        return;\n+      }\n+      Var var \u003d scope.getVar(name);\n+      if (liveness.getEscapedLocals().contains(var)) {\n+        return; // Local variable that might be escaped due to closures.\n+      }\n+      if (state.getOut().isLive(var)) {\n+        return; // Variable not dead.\n+      }\n+      if (state.getIn().isLive(var) \u0026\u0026\n+          isVariableStillLiveWithinExpression(n, exprRoot, var.name)) {\n+        // The variable is killed here but it is also live before it.\n+        // This is possible if we have say:\n+        //    if (X \u003d a \u0026\u0026 a \u003d C) {..} ; .......; a \u003d S;\n+        // In this case we are safe to remove \"a \u003d C\" because it is dead.\n+        // However if we have:\n+        //    if (a \u003d C \u0026\u0026 X \u003d a) {..} ; .......; a \u003d S;\n+        // removing \"a \u003d C\" is NOT correct, although the live set at the node\n+        // is exactly the same.\n+        // TODO(user): We need more fine grain CFA or we need to keep track\n+        // of GEN sets when we recurse here.\n+        return;\n+      }\n+      \n+      if (NodeUtil.isAssign(n)) {\n+        n.removeChild(rhs);\n+        n.getParent().replaceChild(n, rhs);\n+      } else if (NodeUtil.isAssignmentOp(n)) {\n+        n.removeChild(rhs);\n+        n.removeChild(lhs);\n+        Node op \u003d new Node(NodeUtil.getOpFromAssignmentOp(n), lhs, rhs);\n+        n.getParent().replaceChild(n, op);\n+      } else {\n+        // TODO(user): this is where the code that handles dead x++ and x--\n+        // should go.\n+        \n+        // Not reachable.\n+        Preconditions.checkState(false, \"Unknow statement\");\n+      }\n+      \n+      compiler.reportCodeChange();\n+      return;\n+\n+    } else {\n+      for (Node c \u003d n.getFirstChild(); c !\u003d null;) {\n+        Node next \u003d c.getNext();\n+        if (!ControlFlowGraph.isEnteringNewCfgNode(c)) {\n+          tryRemoveAssignment(t, c, exprRoot, state);\n+        }\n+        c \u003d next;\n+      }\n+      return;\n+    }\n+  }\n+  \n+  /**\n+   * Given a variable, node n in the tree and a sub-tree denoted by exprRoot as\n+   * the root, this function returns true if there exists a read of that\n+   * variable before a write to that variable that is on the right side of n.\n+   * \n+   * For example, suppose the node is x \u003d 1:\n+   * \n+   * y \u003d 1, x \u003d 1; // false, there is no reads at all.\n+   * y \u003d 1, x \u003d 1, print(x) // true, there is a read right of n.\n+   * y \u003d 1, x \u003d 1, x \u003d 2, print(x) // false, there is a read right of n but \n+   *                               // it is after a write.\n+   * \n+   * @param n The current node we should look at.\n+   * @param exprRoot The node\n+   */\n+  private boolean isVariableStillLiveWithinExpression(\n+      Node n, Node exprRoot, String variable) {\n+    while (n !\u003d exprRoot) {\n+      for(Node sibling \u003d n.getNext(); sibling !\u003d null;\n+          sibling \u003d sibling.getNext()) {\n+        if (!ControlFlowGraph.isEnteringNewCfgNode(sibling)) {\n+          VariableLiveness state \u003d readVariableBeforeKilling(sibling, variable);\n+          \n+          // If we see a READ or KILL there is no need to continue.\n+          if (state \u003d\u003d VariableLiveness.READ) {\n+            return true;\n+          } else if (state \u003d\u003d VariableLiveness.KILL) {\n+            return false;\n+          }\n+        }\n+      }\n+      n \u003d n.getParent();\n+    }\n+    return false;\n+  }\n+  \n+  // The current liveness of the variable\n+  private enum VariableLiveness {\n+    MAYBE_LIVE, // May be still live in the current expression tree.\n+    READ, // Known there is a read left of it.\n+    KILL, // Known there is a write before any read.\n+  }\n+\n+  /**\n+   * Give an expression and a variable. It returns READ, if the right-most\n+   * reference of that variable is a read. It returns KILL, if the right-most\n+   * reference of that variable is an assignment. It returns MAY_LIVE otherwise.\n+   * \n+   * This need to be a pre-order traversal so we cannot use the normal node\n+   * traversals.\n+   */\n+  private VariableLiveness readVariableBeforeKilling(Node n, String variable) {\n+    if (NodeUtil.isName(n) \u0026\u0026 variable.equals(n.getString())) {\n+      if (NodeUtil.isLhs(n, n.getParent())) {\n+        return VariableLiveness.KILL;\n+      } else {\n+        return VariableLiveness.READ;\n+      }\n+    }\n+    for (Node child \u003d n.getFirstChild();\n+        child !\u003d null; child \u003d child.getNext()) {\n+      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) {\n+        VariableLiveness state \u003d readVariableBeforeKilling(child, variable);\n+        if (state !\u003d VariableLiveness.MAYBE_LIVE) {\n+          return state;\n+        }\n+      }\n+    }\n+    return VariableLiveness.MAYBE_LIVE;\n+  }\n+}\n",
      "operations": [
        {
          "type": "insert-node",
          "from": "",
          "to": "MethodDeclaration [4464,4612]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [7642,8968]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "EnumDeclaration [9016,9220]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [9224,10232]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: private [4464,4471]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "PrimitiveType: void [4472,4476]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: tryRemoveAssignment [4477,4496]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SingleVariableDeclaration [4497,4512]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SingleVariableDeclaration [4514,4520]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SingleVariableDeclaration [4528,4564]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Block [4566,4612]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "IfStatement [5247,7632]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodInvocation [5251,5277]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Block [5279,7372]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "ExpressionStatement [4417,4450]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [5459,5568]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "MethodInvocation [4417,4449]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: n [4595,4596]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "InfixExpression [6072,6169]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [6887,7309]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: tryRemoveAssignment [4417,4436]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "METHOD_INVOCATION_ARGUMENTS [4437,4448]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "INFIX_EXPRESSION_OPERATOR: \u0026\u0026 [6098,6100]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodInvocation [6111,6169]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "IfStatement [7474,7586]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "ExpressionStatement [4010,4093]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: t [4437,4438]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: state [4443,4448]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "PrefixExpression [7478,7519]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Block [7521,7586]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "MethodInvocation [4010,4092]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: tryRemoveAssignment [4010,4029]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "METHOD_INVOCATION_ARGUMENTS [4047,4091]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodInvocation [6838,6851]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: t [4047,4048]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: state [4086,4091]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ImportDeclaration [1244,1276]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "FieldDeclaration [1801,1903]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodInvocation [4008,4042]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: n [4044,4045]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [4250,4339]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "METHOD_INVOCATION_RECEIVER [4519,4520]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: n [4538,4539]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodInvocation [4670,4698]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: getFirstChild [4735,4748]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "MethodInvocation [4733,4750]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Block [4700,4770]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "IfStatement [4666,4770]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [5040,5049]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [6525,6642]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: parent [6675,6681]",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/jscomp/DefaultCodingConvention.java",
        "src/com/google/javascript/jscomp/DefaultCodingConvention.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [
            "com.google.javascript.jscomp.DefaultCodingConvention:extractClassNameIfRequire:[Node node, Node parent]:String",
            "com.google.javascript.jscomp.DefaultCodingConvention:defineDelegateProxyProperties:[JSTypeRegistry registry, Scope scope, Map\u003cObjectType,ObjectType\u003e delegateProxyMap]:void",
            "com.google.javascript.jscomp.DefaultCodingConvention:identifyTypeDefAssign:[Node n]:String",
            "com.google.javascript.jscomp.DefaultCodingConvention:isExported:[String name]:boolean",
            "com.google.javascript.jscomp.DefaultCodingConvention:identifyTypeDeclarationCall:[Node n]:List\u003cString\u003e",
            "com.google.javascript.jscomp.DefaultCodingConvention:getAbstractMethodName:[]:String",
            "com.google.javascript.jscomp.DefaultCodingConvention:isPropertyTestFunction:[Node call]:boolean",
            "com.google.javascript.jscomp.DefaultCodingConvention:applyDelegateRelationship:[ObjectType delegateSuperclass, ObjectType delegateBase, ObjectType delegator, FunctionType delegateProxy, FunctionType findDelegate]:void",
            "com.google.javascript.jscomp.DefaultCodingConvention:isValidEnumKey:[String key]:boolean",
            "com.google.javascript.jscomp.DefaultCodingConvention:isOptionalParameter:[Node parameter]:boolean",
            "com.google.javascript.jscomp.DefaultCodingConvention:isVarArgsParameter:[Node parameter]:boolean",
            "com.google.javascript.jscomp.DefaultCodingConvention:extractClassNameIfProvide:[Node node, Node parent]:String",
            "com.google.javascript.jscomp.DefaultCodingConvention:getDelegateRelationship:[Node callNode]:DelegateRelationship",
            "com.google.javascript.jscomp.DefaultCodingConvention:getGlobalObject:[]:String",
            "com.google.javascript.jscomp.DefaultCodingConvention:getDelegateSuperclassName:[]:String",
            "com.google.javascript.jscomp.DefaultCodingConvention:isConstant:[String variableName]:boolean",
            "com.google.javascript.jscomp.DefaultCodingConvention:isPrivate:[String name]:boolean",
            "com.google.javascript.jscomp.DefaultCodingConvention:getSingletonGetterClassName:[Node callNode]:String",
            "com.google.javascript.jscomp.DefaultCodingConvention:getClassesDefinedByCall:[Node callNode]:SubclassRelationship",
            "com.google.javascript.jscomp.DefaultCodingConvention:isExported:[String name, boolean local]:boolean",
            "com.google.javascript.jscomp.DefaultCodingConvention:applySingletonGetter:[FunctionType functionType, FunctionType getterType, ObjectType objectType]:void",
            "com.google.javascript.jscomp.DefaultCodingConvention:getExportSymbolFunction:[]:String",
            "com.google.javascript.jscomp.DefaultCodingConvention:getExportPropertyFunction:[]:String",
            "com.google.javascript.jscomp.DefaultCodingConvention:applySubclassRelationship:[FunctionType parentCtor, FunctionType childCtor, SubclassType type]:void",
            "com.google.javascript.jscomp.DefaultCodingConvention:getObjectLiteralCast:[NodeTraversal t, Node callNode]:ObjectLiteralCast",
            "com.google.javascript.jscomp.DefaultCodingConvention:allowsVariableRedeclaration:[Scope scope, String name, Node parent]:boolean",
            "com.google.javascript.jscomp.DefaultCodingConvention:isSuperClassReference:[String propertyName]:boolean"
          ],
          "num": 27
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "-1"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "35",
            "36",
            "37",
            "38",
            "39",
            "40",
            "41",
            "42",
            "43",
            "44",
            "45",
            "46",
            "47",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57",
            "58",
            "59",
            "60",
            "61",
            "62",
            "63",
            "64",
            "65",
            "66",
            "67",
            "68",
            "69",
            "70",
            "71",
            "72",
            "73",
            "74",
            "75",
            "76",
            "77",
            "78",
            "79",
            "80",
            "81",
            "82",
            "83",
            "84",
            "85",
            "86",
            "87",
            "88",
            "89",
            "90",
            "91",
            "92",
            "93",
            "94",
            "95",
            "96",
            "97",
            "98",
            "99",
            "100",
            "101",
            "102",
            "103",
            "104",
            "105",
            "106",
            "107",
            "108",
            "109",
            "110",
            "111",
            "112",
            "113",
            "114",
            "115",
            "116",
            "117",
            "118",
            "119",
            "120",
            "121",
            "122",
            "123",
            "124",
            "125",
            "126",
            "127",
            "128",
            "129",
            "130",
            "131",
            "132",
            "133",
            "134",
            "135",
            "136",
            "137",
            "138",
            "139",
            "140",
            "141",
            "142",
            "143",
            "144",
            "145",
            "146",
            "147",
            "148",
            "149",
            "150",
            "151",
            "152",
            "153",
            "154",
            "155",
            "156",
            "157",
            "158",
            "159",
            "160",
            "161",
            "162",
            "163",
            "164",
            "165",
            "166",
            "167",
            "168",
            "169",
            "170",
            "171",
            "172",
            "173",
            "174",
            "175",
            "176",
            "177",
            "178",
            "179",
            "180",
            "181",
            "182",
            "183"
          ],
          "num": 183
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/jscomp/DefaultCodingConvention.java b/src/com/google/javascript/jscomp/DefaultCodingConvention.java\nnew file mode 100644\nindex 0000000..3446893\n--- /dev/null\n+++ b/src/com/google/javascript/jscomp/DefaultCodingConvention.java\n@@ -0,0 +1,183 @@\n+/*\n+ * Copyright 2007 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.javascript.jscomp;\n+\n+import com.google.javascript.rhino.Node;\n+import com.google.javascript.rhino.jstype.FunctionType;\n+import com.google.javascript.rhino.jstype.JSTypeRegistry;\n+import com.google.javascript.rhino.jstype.ObjectType;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * CodingConvention defines a set of hooks to customize the behavior of the\n+ * Compiler for a specific team/company.\n+ *\n+*\n+*\n+ */\n+public class DefaultCodingConvention implements CodingConvention {\n+\n+  @Override\n+  public boolean isConstant(String variableName) {\n+    return false;\n+  }\n+\n+  @Override\n+  public boolean isValidEnumKey(String key) {\n+    return key !\u003d null \u0026\u0026 key.length() \u003e 0;\n+  }\n+\n+  @Override\n+  public boolean isOptionalParameter(Node parameter) {\n+    // be as lax as possible, but this must be mutually exclusive from\n+    // var_args parameters.\n+    return !isVarArgsParameter(parameter);\n+  }\n+\n+  @Override\n+  public boolean isVarArgsParameter(Node parameter) {\n+    // be as lax as possible\n+    return parameter.getParent().getLastChild() \u003d\u003d parameter;\n+  }\n+\n+  @Override\n+  public boolean isExported(String name, boolean local) {\n+    return local \u0026\u0026 name.startsWith(\"$super\");\n+  }\n+  \n+  @Override\n+  public boolean isExported(String name) {\n+    return isExported(name, false) || isExported(name, true);\n+  }\n+\n+  @Override\n+  public boolean isPrivate(String name) {\n+    return false;\n+  }\n+\n+  @Override\n+  public SubclassRelationship getClassesDefinedByCall(Node callNode) {\n+    return null;\n+  }\n+\n+  @Override\n+  public boolean isSuperClassReference(String propertyName) {\n+    return false;\n+  }\n+\n+  @Override\n+  public String extractClassNameIfProvide(Node node, Node parent) {\n+    String message \u003d \"only implemented in GoogleCodingConvention\";\n+    throw new UnsupportedOperationException(message);\n+  }\n+\n+  @Override\n+  public String extractClassNameIfRequire(Node node, Node parent) {\n+    String message \u003d \"only implemented in GoogleCodingConvention\";\n+    throw new UnsupportedOperationException(message);\n+  }\n+\n+  @Override\n+  public String getExportPropertyFunction() {\n+    return null;\n+  }\n+\n+  @Override\n+  public String getExportSymbolFunction() {\n+    return null;\n+  }\n+\n+  @Override\n+  public List\u003cString\u003e identifyTypeDeclarationCall(Node n) {\n+    return null;\n+  }\n+\n+  @Override\n+  public String identifyTypeDefAssign(Node n) {\n+    return null;\n+  }\n+\n+  @Override\n+  public void applySubclassRelationship(FunctionType parentCtor,\n+      FunctionType childCtor, SubclassType type) {\n+    // do nothing\n+  }\n+\n+  @Override\n+  public String getAbstractMethodName() {\n+    return null;\n+  }\n+\n+  @Override\n+  public String getSingletonGetterClassName(Node callNode) {\n+    return null;\n+  }\n+\n+  @Override\n+  public void applySingletonGetter(FunctionType functionType,\n+      FunctionType getterType, ObjectType objectType) {\n+    // do nothing.\n+  }\n+\n+  @Override\n+  public DelegateRelationship getDelegateRelationship(Node callNode) {\n+    return null;\n+  }\n+\n+  @Override\n+  public void applyDelegateRelationship(\n+      ObjectType delegateSuperclass, ObjectType delegateBase,\n+      ObjectType delegator, FunctionType delegateProxy,\n+      FunctionType findDelegate) {\n+    // do nothing.\n+  }\n+\n+  @Override\n+  public String getDelegateSuperclassName() {\n+    return null;\n+  }\n+\n+  @Override\n+  public void defineDelegateProxyProperties(\n+      JSTypeRegistry registry, Scope scope,\n+      Map\u003cObjectType, ObjectType\u003e delegateProxyMap) {\n+    // do nothing.\n+  }\n+\n+  @Override\n+  public String getGlobalObject() {\n+    return \"window\";\n+  }\n+\n+  @Override\n+  public boolean allowsVariableRedeclaration(\n+      Scope scope, String name, Node parent) {\n+    return true;\n+  }\n+\n+  @Override\n+  public boolean isPropertyTestFunction(Node call) {\n+    return false;\n+  }\n+\n+  @Override\n+  public ObjectLiteralCast getObjectLiteralCast(NodeTraversal t,\n+      Node callNode) {\n+    return null;\n+  }\n+}\n",
      "operations": [
        {
          "type": "insert-node",
          "from": "",
          "to": "MethodDeclaration [1661,1779]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MarkerAnnotation [1661,1670]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: public [1673,1679]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "PrimitiveType: boolean [1680,1687]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: isExported [1688,1698]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SingleVariableDeclaration [1699,1710]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SingleVariableDeclaration [1712,1725]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Block [1727,1779]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "ReturnStatement [1842,1899]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "InfixExpression [1740,1774]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "InfixExpression [1849,1898]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "MethodInvocation [1849,1872]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "INFIX_EXPRESSION_OPERATOR: || [1873,1875]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodInvocation [1876,1898]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: isExported [1849,1859]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "METHOD_INVOCATION_ARGUMENTS [1860,1871]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: name [1860,1864]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/jscomp/GoogleCodingConvention.java",
        "src/com/google/javascript/jscomp/GoogleCodingConvention.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [
            "com.google.javascript.jscomp.GoogleCodingConvention:isPrivate:[String name]:boolean",
            "com.google.javascript.jscomp.GoogleCodingConvention:isVarArgsParameter:[Node parameter]:boolean",
            "com.google.javascript.jscomp.GoogleCodingConvention:isExported:[String name, boolean local]:boolean",
            "com.google.javascript.jscomp.GoogleCodingConvention:isConstant:[String name]:boolean",
            "com.google.javascript.jscomp.GoogleCodingConvention:isValidEnumKey:[String key]:boolean",
            "com.google.javascript.jscomp.GoogleCodingConvention:isOptionalParameter:[Node parameter]:boolean"
          ],
          "num": 6
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "-1"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "35",
            "36",
            "37",
            "38",
            "39",
            "40",
            "41",
            "42",
            "43",
            "44",
            "45",
            "46",
            "47",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57",
            "58",
            "59",
            "60",
            "61",
            "62",
            "63",
            "64",
            "65",
            "66",
            "67",
            "68",
            "69",
            "70",
            "71",
            "72",
            "73",
            "74",
            "75",
            "76",
            "77",
            "78",
            "79",
            "80",
            "81",
            "82",
            "83",
            "84",
            "85",
            "86",
            "87",
            "88",
            "89",
            "90",
            "91",
            "92",
            "93",
            "94",
            "95",
            "96",
            "97",
            "98",
            "99",
            "100",
            "101",
            "102",
            "103",
            "104",
            "105",
            "106",
            "107",
            "108",
            "109",
            "110",
            "111",
            "112",
            "113",
            "114",
            "115",
            "116",
            "117",
            "118",
            "119",
            "120",
            "121",
            "122",
            "123",
            "124",
            "125",
            "126",
            "127",
            "128",
            "129",
            "130",
            "131",
            "132",
            "133",
            "134",
            "135",
            "136",
            "137",
            "138"
          ],
          "num": 138
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/jscomp/GoogleCodingConvention.java b/src/com/google/javascript/jscomp/GoogleCodingConvention.java\nnew file mode 100644\nindex 0000000..9546260\n--- /dev/null\n+++ b/src/com/google/javascript/jscomp/GoogleCodingConvention.java\n@@ -0,0 +1,138 @@\n+/*\n+ * Copyright 2007 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.javascript.jscomp;\n+\n+\n+\n+\n+import com.google.javascript.rhino.Node;\n+\n+import java.util.regex.Pattern;\n+\n+/**\n+ * This describes the Google-specific JavaScript coding conventions.\n+ * Within Google, variable names are semantically significant.\n+ *\n+*\n+ */\n+public class GoogleCodingConvention extends ClosureCodingConvention {\n+\n+  private static final String OPTIONAL_ARG_PREFIX \u003d \"opt_\";\n+\n+  private static final String VAR_ARGS_NAME \u003d \"var_args\";\n+\n+  private static final Pattern ENUM_KEY_PATTERN \u003d\n+    Pattern.compile(\"[A-Z0-9][A-Z0-9_]*\");\n+\n+  /**\n+   * {@inheritDoc}\n+   *\n+   * \u003cp\u003eThis enforces the Google const name convention, that the first character\n+   * after the last $ must be an upper-case letter and all subsequent letters\n+   * must be upper case. The name must be at least 2 characters long.\n+   *\n+   * \u003cp\u003eExamples:\n+   * \u003cpre\u003e\n+   *      aaa          Not constant - lower-case letters in the name\n+   *      A            Not constant - too short\n+   *      goog$A       Constant - letters after the $ are upper-case.\n+   *      AA17         Constant - digits can appear after the first letter\n+   *      goog$7A      Not constant - first character after the $ must be\n+   *                   upper case.\n+   *      $A           Constant - doesn\u0027t have to be anything in front of the $\n+   * \u003c/pre\u003e\n+   */\n+  @Override\n+  public boolean isConstant(String name) {\n+    if (name.length() \u003c\u003d 1) {\n+      return false;\n+    }\n+\n+    // In compiled code, \u0027$\u0027 is often a namespace delimiter. To allow inlining\n+    // of namespaced constants, we strip off any namespaces here.\n+    int pos \u003d name.lastIndexOf(\u0027$\u0027);\n+    if (pos \u003e\u003d 0) {\n+      name \u003d name.substring(pos + 1);\n+      if (name.length() \u003d\u003d 0) {\n+        return false;\n+      }\n+    }\n+\n+    if (!Character.isUpperCase(name.charAt(0))) {\n+      return false;\n+    }\n+\n+    // hack way of checking that there aren\u0027t any lower-case letters\n+    return name.toUpperCase().equals(name);\n+  }\n+\n+  /**\n+   * {@inheritDoc}\n+   *\n+   * \u003cp\u003eThis enforces Google\u0027s convention about enum key names. They must match\n+   * the regular expression {@code [A-Z0-9][A-Z0-9_]*}.\n+   *\n+   * \u003cp\u003eExamples:\n+   * \u003cul\u003e\n+   * \u003cli\u003eA\u003c/li\u003e\n+   * \u003cli\u003e213\u003c/li\u003e\n+   * \u003cli\u003eFOO_BAR\u003c/li\u003e\n+   * \u003c/ul\u003e\n+   */\n+  @Override\n+  public boolean isValidEnumKey(String key) {\n+    return ENUM_KEY_PATTERN.matcher(key).matches();\n+  }\n+\n+  /**\n+   * {@inheritDoc}\n+   *\n+   * \u003cp\u003eIn Google code, parameter names beginning with {@code opt_} are\n+   * treated as optional arguments.\n+   */\n+  @Override\n+  public boolean isOptionalParameter(Node parameter) {\n+    return parameter.getString().startsWith(OPTIONAL_ARG_PREFIX);\n+  }\n+\n+  @Override\n+  public boolean isVarArgsParameter(Node parameter) {\n+    return VAR_ARGS_NAME.equals(parameter.getString());\n+  }\n+\n+  /**\n+   * {@inheritDoc}\n+   *\n+   * \u003cp\u003eIn Google code, any global name starting with an underscore is\n+   * considered exported.\n+   */\n+  @Override\n+  public boolean isExported(String name, boolean local) {\n+    return !local \u0026\u0026 name.startsWith(\"_\");\n+  }\n+\n+  /**\n+   * {@inheritDoc}\n+   *\n+   * \u003cp\u003eIn Google code, private names end with an underscore, and exported\n+   * names are never considered private (see {@link #isExported}).\n+   */\n+  @Override\n+  public boolean isPrivate(String name) {\n+    return name.endsWith(\"_\") \u0026\u0026 !isExported(name);\n+  }\n+}\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "SingleVariableDeclaration [3503,3516]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "InfixExpression [3531,3561]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "PrefixExpression [3531,3537]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "INFIX_EXPRESSION_OPERATOR: \u0026\u0026 [3538,3540]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/jscomp/MaybeReachingVariableUse.java",
        "src/com/google/javascript/jscomp/MaybeReachingVariableUse.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [
            "com.google.javascript.jscomp.MaybeReachingVariableUse\\$ReachingUses:equals:[Object other]:boolean",
            "com.google.javascript.jscomp.MaybeReachingVariableUse:removeFromUseIfLocal:[String name, ReachingUses use]:void",
            "com.google.javascript.jscomp.MaybeReachingVariableUse:getUses:[String name, Node defNode]:Collection\u003cNode\u003e",
            "com.google.javascript.jscomp.MaybeReachingVariableUse\\$ReachingUses:ReachingUses:[ReachingUses other]:null",
            "com.google.javascript.jscomp.MaybeReachingVariableUse\\$ReachingUsesJoinOp:apply:[List\u003cReachingUses\u003e from]:ReachingUses",
            "com.google.javascript.jscomp.MaybeReachingVariableUse:flowThrough:[Node n, ReachingUses input]:ReachingUses",
            "com.google.javascript.jscomp.MaybeReachingVariableUse:createEntryLattice:[]:ReachingUses",
            "com.google.javascript.jscomp.MaybeReachingVariableUse:createInitialEstimateLattice:[]:ReachingUses",
            "com.google.javascript.jscomp.MaybeReachingVariableUse:computeMayUse:[Node n, Node cfgNode, ReachingUses output, boolean conditional]:void",
            "com.google.javascript.jscomp.MaybeReachingVariableUse:MaybeReachingVariableUse:[ControlFlowGraph\u003cNode\u003e cfg, Scope jsScope, AbstractCompiler compiler]:null",
            "com.google.javascript.jscomp.MaybeReachingVariableUse\\$ReachingUses:ReachingUses:[]:null",
            "com.google.javascript.jscomp.MaybeReachingVariableUse:isForward:[]:boolean",
            "com.google.javascript.jscomp.MaybeReachingVariableUse\\$ReachingUses:hashCode:[]:int",
            "com.google.javascript.jscomp.MaybeReachingVariableUse:addToUseIfLocal:[String name, Node node, ReachingUses use]:void"
          ],
          "num": 14
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "-1"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "35",
            "36",
            "37",
            "38",
            "39",
            "40",
            "41",
            "42",
            "43",
            "44",
            "45",
            "46",
            "47",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57",
            "58",
            "59",
            "60",
            "61",
            "62",
            "63",
            "64",
            "65",
            "66",
            "67",
            "68",
            "69",
            "70",
            "71",
            "72",
            "73",
            "74",
            "75",
            "76",
            "77",
            "78",
            "79",
            "80",
            "81",
            "82",
            "83",
            "84",
            "85",
            "86",
            "87",
            "88",
            "89",
            "90",
            "91",
            "92",
            "93",
            "94",
            "95",
            "96",
            "97",
            "98",
            "99",
            "100",
            "101",
            "102",
            "103",
            "104",
            "105",
            "106",
            "107",
            "108",
            "109",
            "110",
            "111",
            "112",
            "113",
            "114",
            "115",
            "116",
            "117",
            "118",
            "119",
            "120",
            "121",
            "122",
            "123",
            "124",
            "125",
            "126",
            "127",
            "128",
            "129",
            "130",
            "131",
            "132",
            "133",
            "134",
            "135",
            "136",
            "137",
            "138",
            "139",
            "140",
            "141",
            "142",
            "143",
            "144",
            "145",
            "146",
            "147",
            "148",
            "149",
            "150",
            "151",
            "152",
            "153",
            "154",
            "155",
            "156",
            "157",
            "158",
            "159",
            "160",
            "161",
            "162",
            "163",
            "164",
            "165",
            "166",
            "167",
            "168",
            "169",
            "170",
            "171",
            "172",
            "173",
            "174",
            "175",
            "176",
            "177",
            "178",
            "179",
            "180",
            "181",
            "182",
            "183",
            "184",
            "185",
            "186",
            "187",
            "188",
            "189",
            "190",
            "191",
            "192",
            "193",
            "194",
            "195",
            "196",
            "197",
            "198",
            "199",
            "200",
            "201",
            "202",
            "203",
            "204",
            "205",
            "206",
            "207",
            "208",
            "209",
            "210",
            "211",
            "212",
            "213",
            "214",
            "215",
            "216",
            "217",
            "218",
            "219",
            "220",
            "221",
            "222",
            "223",
            "224",
            "225",
            "226",
            "227",
            "228",
            "229",
            "230",
            "231",
            "232",
            "233",
            "234",
            "235",
            "236",
            "237",
            "238",
            "239",
            "240",
            "241",
            "242",
            "243",
            "244",
            "245",
            "246",
            "247",
            "248",
            "249",
            "250",
            "251",
            "252",
            "253",
            "254",
            "255",
            "256",
            "257",
            "258",
            "259",
            "260",
            "261",
            "262",
            "263",
            "264",
            "265",
            "266",
            "267",
            "268",
            "269",
            "270",
            "271",
            "272",
            "273",
            "274",
            "275",
            "276",
            "277",
            "278",
            "279",
            "280",
            "281",
            "282",
            "283",
            "284",
            "285"
          ],
          "num": 285
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java b/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\nnew file mode 100644\nindex 0000000..aed3242\n--- /dev/null\n+++ b/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\n@@ -0,0 +1,285 @@\n+/*\n+ * Copyright 2009 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.javascript.jscomp;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.HashMultimap;\n+import com.google.common.collect.Multimap;\n+import com.google.common.collect.Sets;\n+import com.google.javascript.jscomp.ControlFlowGraph.Branch;\n+import com.google.javascript.jscomp.Scope.Var;\n+import com.google.javascript.jscomp.graph.GraphNode;\n+import com.google.javascript.rhino.Node;\n+import com.google.javascript.rhino.Token;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Set;\n+\n+/**\n+ * Computes \"may be\" reaching use for all definitions of each variables.\n+ *\n+ * A use of {@code A} in {@code alert(A)} is a \"may be\" reaching use of\n+ * the definition of {@code A} at {@code A \u003d foo()} if at least one path from\n+ * the use node reaches that definition and it is the last definition before\n+ * the use on that path.\n+ *\n+*\n+ */\n+class MaybeReachingVariableUse extends\n+    DataFlowAnalysis\u003cNode, MaybeReachingVariableUse.ReachingUses\u003e {\n+\n+  // The scope of the function that we are analyzing.\n+  private final Scope jsScope;\n+  private final Set\u003cVar\u003e escaped;\n+\n+  MaybeReachingVariableUse(\n+      ControlFlowGraph\u003cNode\u003e cfg, Scope jsScope, AbstractCompiler compiler) {\n+    super(cfg, new ReachingUsesJoinOp());\n+    this.jsScope \u003d jsScope;\n+    this.escaped \u003d Sets.newHashSet();\n+\n+    // TODO(user): May be comute it somewhere else and re-use the escape\n+    // local set here.\n+    computeEscaped(jsScope, escaped, compiler);\n+  }\n+\n+  /**\n+   * May use definition lattice representation. It captures a product\n+   * lattice for each local (non-escaped) variable. The sub-lattice is\n+   * a n + 2 power set element lattice with all the Nodes in the program,\n+   * TOP and BOTTOM. This is better explained with an example:\n+   *\n+   * Consider: A sub-lattice element representing the variable A represented\n+   * by { N_4, N_5} where N_x is a Node in the program. This implies at\n+   * that particular point in the program the content of A is \"upward exposed\"\n+   * at point N_4 and N_5.\n+   *\n+   * Example:\n+   *\n+   * A \u003d 1;\n+   * ...\n+   * N_3:\n+   * N_4: print(A);\n+   * N_5: y \u003d A;\n+   * N_6: A \u003d 1;\n+   * N_7: print(A);\n+   *\n+   * At N_3, reads of A in {N_4, N_5} are said to be upward exposed.\n+   */\n+  static final class ReachingUses implements DataFlowAnalysis.LatticeElement {\n+    final Multimap\u003cVar, Node\u003e mayUseMap;\n+\n+    public ReachingUses() {\n+      mayUseMap \u003d HashMultimap.create();\n+    }\n+\n+    /**\n+     * Copy constructor.\n+     *\n+     * @param other The constructed object is a replicated copy of this element.\n+     */\n+    public ReachingUses(ReachingUses other) {\n+      mayUseMap \u003d HashMultimap.create(other.mayUseMap);\n+    }\n+\n+    @Override\n+    public boolean equals(Object other) {\n+      return (other instanceof ReachingUses) \u0026\u0026\n+          ((ReachingUses) other).mayUseMap.equals(this.mayUseMap);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+      return mayUseMap.hashCode();\n+    }\n+  }\n+\n+  /**\n+   * The join is a simple union because of the \"may be\" nature of the analysis.\n+   *\n+   * Consider: A \u003d 1; if (x) { A \u003d 2 }; alert(A);\n+   *\n+   * The read of A \"may be\" exposed to A \u003d 1 in the beginning.\n+   */\n+  private static class ReachingUsesJoinOp implements JoinOp\u003cReachingUses\u003e {\n+    @Override\n+    public ReachingUses apply(List\u003cReachingUses\u003e from) {\n+      ReachingUses result \u003d new ReachingUses();\n+      for (ReachingUses uses : from) {\n+        result.mayUseMap.putAll(uses.mayUseMap);\n+      }\n+      return result;\n+    }\n+  }\n+\n+  @Override\n+  boolean isForward() {\n+    return false;\n+  }\n+\n+  @Override\n+  ReachingUses createEntryLattice() {\n+    return new ReachingUses();\n+  }\n+\n+  @Override\n+  ReachingUses createInitialEstimateLattice() {\n+    return new ReachingUses();\n+  }\n+\n+  @Override\n+  ReachingUses flowThrough(Node n, ReachingUses input) {\n+    ReachingUses output \u003d new ReachingUses(input);\n+    computeMayUse(n, n, output, false);\n+    return output;\n+  }\n+\n+  private void computeMayUse(\n+      Node n, Node cfgNode, ReachingUses output, boolean conditional) {\n+    switch (n.getType()) {\n+\n+      case Token.BLOCK:\n+      case Token.FUNCTION:\n+        return;\n+\n+      case Token.NAME:\n+        addToUseIfLocal(n.getString(), cfgNode, output);\n+        return;\n+\n+      case Token.WHILE:\n+      case Token.DO:\n+      case Token.IF:\n+        computeMayUse(\n+            NodeUtil.getConditionExpression(n), cfgNode, output, conditional);\n+        return;\n+\n+      case Token.FOR:\n+        if (n.getChildCount() \u003d\u003d 4) {\n+          computeMayUse(\n+              NodeUtil.getConditionExpression(n), cfgNode, output, conditional);\n+        } else {\n+          // for(x in y) {...}\n+          Node lhs \u003d n.getFirstChild();\n+          Node rhs \u003d lhs.getNext();\n+          if (NodeUtil.isVar(lhs)) {\n+            lhs \u003d lhs.getLastChild(); // for(var x in y) {...}\n+          }\n+          if (NodeUtil.isName(lhs) \u0026\u0026 !conditional) {\n+            removeFromUseIfLocal(lhs.getString(), output);\n+          }\n+          computeMayUse(rhs, cfgNode, output, conditional);\n+        }\n+        return;\n+\n+      case Token.AND:\n+      case Token.OR:\n+        computeMayUse(n.getLastChild(), cfgNode, output, true);\n+        computeMayUse(n.getFirstChild(), cfgNode, output, conditional);\n+        return;\n+\n+      case Token.HOOK:\n+        computeMayUse(n.getLastChild(), cfgNode, output, true);\n+        computeMayUse(n.getFirstChild().getNext(), cfgNode, output, true);\n+        computeMayUse(n.getFirstChild(), cfgNode, output, conditional);\n+        return;\n+\n+      case Token.VAR:\n+        Node varName \u003d n.getFirstChild();\n+        Preconditions.checkState(n.hasChildren(), \"AST should be normalized\");\n+\n+        if (varName.hasChildren()) {\n+          computeMayUse(varName.getFirstChild(), cfgNode, output, conditional);\n+          if (!conditional) {\n+            removeFromUseIfLocal(varName.getString(), output);\n+          }\n+        }\n+        return;\n+\n+      default:\n+        if (NodeUtil.isAssignmentOp(n) \u0026\u0026 NodeUtil.isName(n.getFirstChild())) {\n+          Node name \u003d n.getFirstChild();\n+          if (!conditional) {\n+            removeFromUseIfLocal(name.getString(), output);\n+          }\n+\n+          // In case of a +\u003d \"Hello\". There is a read of a.\n+          if (!NodeUtil.isAssign(n)) {\n+            addToUseIfLocal(name.getString(), cfgNode, output);\n+          }\n+\n+          computeMayUse(name.getNext(), cfgNode, output, conditional);\n+        } else {\n+          /*\n+           * We want to traverse in reverse order because we want the LAST\n+           * definition in the sub-tree....\n+           * But we have no better way to traverse in reverse other :\u0027(\n+           */\n+          for (Node c \u003d n.getLastChild(); c !\u003d null; c \u003d n.getChildBefore(c)) {\n+            computeMayUse(c, cfgNode, output, conditional);\n+          }\n+        }\n+    }\n+  }\n+\n+  /**\n+   * Sets the variable for the given name to the node value in the upward\n+   * exposed lattice. Do nothing if the variable name is one of the escaped\n+   * variable.\n+   */\n+  private void addToUseIfLocal(String name, Node node, ReachingUses use) {\n+    Var var \u003d jsScope.getVar(name);\n+    if (var \u003d\u003d null || var.scope !\u003d jsScope) {\n+      return;\n+    }\n+    if (!escaped.contains(var)) {\n+      use.mayUseMap.put(var, node);\n+    }\n+  }\n+\n+  /**\n+   * Removes the variable for the given name from the node value in the upward\n+   * exposed lattice. Do nothing if the variable name is one of the escaped\n+   * variable.\n+   */\n+  private void removeFromUseIfLocal(String name, ReachingUses use) {\n+    Var var \u003d jsScope.getVar(name);\n+    if (var \u003d\u003d null || var.scope !\u003d jsScope) {\n+      return;\n+    }\n+    if (!escaped.contains(var)) {\n+      use.mayUseMap.removeAll(var);\n+    }\n+  }\n+\n+  /**\n+   * Gets a list of nodes that may be using the value assigned to {@code name}\n+   * in {@code defNode}. {@code defNode} must be one of the control flow graph\n+   * nodes.\n+   *\n+   * @param name name of the variable. It can only be names of local variable\n+   *     that are not function parameters, escaped variables or variables\n+   *     declared in catch.\n+   * @param defNode The list of upward exposed use for the variable.\n+   */\n+  Collection\u003cNode\u003e getUses(String name, Node defNode) {\n+    GraphNode\u003cNode, Branch\u003e n \u003d getCfg().getNode(defNode);\n+    Preconditions.checkNotNull(n);\n+    FlowState\u003cReachingUses\u003e state \u003d n.getAnnotation();\n+    return state.getOut().mayUseMap.get(jsScope.getVar(name));\n+  }\n+}\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "ImportDeclaration [680,726]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ImportDeclaration [723,766]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/jscomp/NodeUtil.java",
        "src/com/google/javascript/jscomp/NodeUtil.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [
            "com.google.javascript.jscomp.NodeUtil:isConstantName:[Node node]:boolean",
            "com.google.javascript.jscomp.NodeUtil:isNameReferenced:[Node node, String name, Predicate\u003cNode\u003e traverseChildrenPred]:boolean",
            "com.google.javascript.jscomp.NodeUtil:isLabelName:[Node n]:boolean",
            "com.google.javascript.jscomp.NodeUtil:canBeSideEffected:[Node n, Set\u003cString\u003e knownConstants]:boolean",
            "com.google.javascript.jscomp.NodeUtil:getNodeTypeReferenceCount:[Node node, int type]:int",
            "com.google.javascript.jscomp.NodeUtil:hasCatchHandler:[Node n]:boolean",
            "com.google.javascript.jscomp.NodeUtil:isObjectLitKey:[Node node, Node parent]:boolean",
            "com.google.javascript.jscomp.NodeUtil:isAnonymousFunction:[Node n]:boolean",
            "com.google.javascript.jscomp.NodeUtil:isFunctionObjectCall:[Node callNode]:boolean",
            "com.google.javascript.jscomp.NodeUtil:getVarsDeclaredInBranch:[Node root]:Collection\u003cNode\u003e",
            "com.google.javascript.jscomp.NodeUtil:mayEffectMutableState:[Node n]:boolean",
            "com.google.javascript.jscomp.NodeUtil:isNodeTypeReferenced:[Node node, int type]:boolean",
            "com.google.javascript.jscomp.NodeUtil:isLhs:[Node n, Node parent]:boolean",
            "com.google.javascript.jscomp.NodeUtil:constructorCallHasSideEffects:[Node callNode]:boolean",
            "com.google.javascript.jscomp.NodeUtil:isVar:[Node n]:boolean",
            "com.google.javascript.jscomp.NodeUtil:isSimpleFunctionObjectCall:[Node callNode]:boolean",
            "com.google.javascript.jscomp.NodeUtil:isAssign:[Node n]:boolean",
            "com.google.javascript.jscomp.NodeUtil:redeclareVarsInsideBranch:[Node branch]:void",
            "com.google.javascript.jscomp.NodeUtil:isSwitchCase:[Node n]:boolean",
            "com.google.javascript.jscomp.NodeUtil\\$MatchNameNode:apply:[Node n]:boolean",
            "com.google.javascript.jscomp.NodeUtil:isVarArgsFunction:[Node function]:boolean",
            "com.google.javascript.jscomp.NodeUtil:newName:[String name, Node basisNode, String originalName]:Node",
            "com.google.javascript.jscomp.NodeUtil\\$MatchNodeType:MatchNodeType:[int type]:null",
            "com.google.javascript.jscomp.NodeUtil:copyNameAnnotations:[Node source, Node destination]:void",
            "com.google.javascript.jscomp.NodeUtil:isValidPropertyName:[String name]:boolean",
            "com.google.javascript.jscomp.NodeUtil:checkForStateChangeHelper:[Node n, boolean checkForNewObjects]:boolean",
            "com.google.javascript.jscomp.NodeUtil\\$MatchNameNode:MatchNameNode:[String name]:null",
            "com.google.javascript.jscomp.NodeUtil:isTryFinallyNode:[Node parent, Node child]:boolean",
            "com.google.javascript.jscomp.NodeUtil:newFunctionNode:[String name, List\u003cNode\u003e params, Node body, int lineno, int charno]:FunctionNode",
            "com.google.javascript.jscomp.NodeUtil:isValidDefineValue:[Node val, Set\u003cString\u003e defines]:boolean",
            "com.google.javascript.jscomp.NodeUtil:opToStrNoFail:[int operator]:String",
            "com.google.javascript.jscomp.NodeUtil:visitPostOrder:[Node node, Visitor vistor, Predicate\u003cNode\u003e traverseChildrenPred]:void",
            "com.google.javascript.jscomp.NodeUtil:getStringValue:[Node n]:String",
            "com.google.javascript.jscomp.NodeUtil:NodeUtil:[]:null",
            "com.google.javascript.jscomp.NodeUtil:getAssignedValue:[Node n]:Node",
            "com.google.javascript.jscomp.NodeUtil:hasFinally:[Node n]:boolean",
            "com.google.javascript.jscomp.NodeUtil:isNameReferenced:[Node node, String name]:boolean",
            "com.google.javascript.jscomp.NodeUtil\\$MatchNodeType:apply:[Node n]:boolean",
            "com.google.javascript.jscomp.NodeUtil:functionCallHasSideEffects:[Node callNode]:boolean",
            "com.google.javascript.jscomp.NodeUtil:containsCall:[Node n]:boolean",
            "com.google.javascript.jscomp.NodeUtil:newName:[String name, Node basisNode]:Node",
            "com.google.javascript.jscomp.NodeUtil:isNew:[Node n]:boolean",
            "com.google.javascript.jscomp.NodeUtil:isVarDeclaration:[Node n]:boolean",
            "com.google.javascript.jscomp.NodeUtil:isStatementBlock:[Node n]:boolean",
            "com.google.javascript.jscomp.NodeUtil:isPrototypePropertyDeclaration:[Node n]:boolean",
            "com.google.javascript.jscomp.NodeUtil:isEmptyBlock:[Node block]:boolean",
            "com.google.javascript.jscomp.NodeUtil:isGetProp:[Node n]:boolean",
            "com.google.javascript.jscomp.NodeUtil:isObjectCallMethod:[Node callNode, String methodName]:boolean",
            "com.google.javascript.jscomp.NodeUtil:has:[Node node, Predicate\u003cNode\u003e pred, Predicate\u003cNode\u003e traverseChildrenPred]:boolean",
            "com.google.javascript.jscomp.NodeUtil:precedence:[int type]:int",
            "com.google.javascript.jscomp.NodeUtil:isFunctionObjectApply:[Node callNode]:boolean",
            "com.google.javascript.jscomp.NodeUtil:isNodeTypeReferenced:[Node node, int type, Predicate\u003cNode\u003e traverseChildrenPred]:boolean",
            "com.google.javascript.jscomp.NodeUtil:getBooleanValue:[Node n]:boolean",
            "com.google.javascript.jscomp.NodeUtil:isLatin:[String s]:boolean",
            "com.google.javascript.jscomp.NodeUtil:isControlStructure:[Node n]:boolean",
            "com.google.javascript.jscomp.NodeUtil:getPrototypePropertyName:[Node qName]:String",
            "com.google.javascript.jscomp.NodeUtil\\$Visitor:visit:[Node node]:void",
            "com.google.javascript.jscomp.NodeUtil:getConditionExpression:[Node n]:Node",
            "com.google.javascript.jscomp.NodeUtil:isFunction:[Node n]:boolean",
            "com.google.javascript.jscomp.NodeUtil:getAddingRoot:[Node n]:Node",
            "com.google.javascript.jscomp.NodeUtil:newQualifiedNameNode:[String name, int lineno, int charno]:Node",
            "com.google.javascript.jscomp.NodeUtil:containsType:[Node node, int type, Predicate\u003cNode\u003e traverseChildrenPred]:boolean",
            "com.google.javascript.jscomp.NodeUtil:visitPreOrder:[Node node, Visitor vistor, Predicate\u003cNode\u003e traverseChildrenPred]:void",
            "com.google.javascript.jscomp.NodeUtil:isExprCall:[Node n]:boolean",
            "com.google.javascript.jscomp.NodeUtil:isImmutableValue:[Node n]:boolean",
            "com.google.javascript.jscomp.NodeUtil:newQualifiedNameNode:[String name, Node basisNode, String originalName]:Node",
            "com.google.javascript.jscomp.NodeUtil:isLoopStructure:[Node n]:boolean",
            "com.google.javascript.jscomp.NodeUtil:getNameReferenceCount:[Node node, String name]:int",
            "com.google.javascript.jscomp.NodeUtil:isThis:[Node node]:boolean",
            "com.google.javascript.jscomp.NodeUtil:getFunctionBody:[Node fn]:Node",
            "com.google.javascript.jscomp.NodeUtil\\$VarCollector:visit:[Node n]:void",
            "com.google.javascript.jscomp.NodeUtil:canBeSideEffected:[Node n]:boolean",
            "com.google.javascript.jscomp.NodeUtil:getLoopCodeBlock:[Node n]:Node",
            "com.google.javascript.jscomp.NodeUtil:getPrototypeClassName:[Node qName]:Node",
            "com.google.javascript.jscomp.NodeUtil:newExpr:[Node child]:Node",
            "com.google.javascript.jscomp.NodeUtil:isCall:[Node n]:boolean",
            "com.google.javascript.jscomp.NodeUtil:isFunctionDeclaration:[Node n]:boolean",
            "com.google.javascript.jscomp.NodeUtil:isExpressionNode:[Node n]:boolean",
            "com.google.javascript.jscomp.NodeUtil:isString:[Node n]:boolean",
            "com.google.javascript.jscomp.NodeUtil:getCatchBlock:[Node n]:Node",
            "com.google.javascript.jscomp.NodeUtil:isExprAssign:[Node n]:boolean",
            "com.google.javascript.jscomp.NodeUtil:newUndefinedNode:[]:Node",
            "com.google.javascript.jscomp.NodeUtil:tryMergeBlock:[Node block]:boolean",
            "com.google.javascript.jscomp.NodeUtil:getFunctionName:[Node n, Node parent]:String",
            "com.google.javascript.jscomp.NodeUtil:getFnParameters:[Node fnNode]:Node",
            "com.google.javascript.jscomp.NodeUtil:setDebugInformation:[Node node, Node basisNode, String originalName]:void",
            "com.google.javascript.jscomp.NodeUtil:containsFunctionDeclaration:[Node n]:boolean",
            "com.google.javascript.jscomp.NodeUtil:isGet:[Node n]:boolean",
            "com.google.javascript.jscomp.NodeUtil:getCount:[Node n, Predicate\u003cNode\u003e pred]:int",
            "com.google.javascript.jscomp.NodeUtil:isLiteralValue:[Node n]:boolean",
            "com.google.javascript.jscomp.NodeUtil:getInfoForNameNode:[Node nameNode]:JSDocInfo",
            "com.google.javascript.jscomp.NodeUtil:isAssociative:[int type]:boolean",
            "com.google.javascript.jscomp.NodeUtil:getOpFromAssignmentOp:[Node n]:int",
            "com.google.javascript.jscomp.NodeUtil:isSimpleOperatorType:[int type]:boolean",
            "com.google.javascript.jscomp.NodeUtil:mayHaveSideEffects:[Node n]:boolean",
            "com.google.javascript.jscomp.NodeUtil:isAssignmentOp:[Node n]:boolean",
            "com.google.javascript.jscomp.NodeUtil:isPrototypeProperty:[Node n]:boolean",
            "com.google.javascript.jscomp.NodeUtil:isControlStructureCodeBlock:[Node parent, Node n]:boolean",
            "com.google.javascript.jscomp.NodeUtil:removeChild:[Node parent, Node node]:void",
            "com.google.javascript.jscomp.NodeUtil:isName:[Node n]:boolean",
            "com.google.javascript.jscomp.NodeUtil:referencesThis:[Node n]:boolean",
            "com.google.javascript.jscomp.NodeUtil:newVarNode:[String name, Node value]:Node",
            "com.google.javascript.jscomp.NodeUtil:getSourceName:[Node n]:String",
            "com.google.javascript.jscomp.NodeUtil:opToStr:[int operator]:String",
            "com.google.javascript.jscomp.NodeUtil:isFunctionAnonymous:[Node n]:boolean",
            "com.google.javascript.jscomp.NodeUtil:isStatement:[Node n]:boolean",
            "com.google.javascript.jscomp.NodeUtil:containsType:[Node node, int type]:boolean",
            "com.google.javascript.jscomp.NodeUtil:nodeTypeMayHaveSideEffects:[Node n]:boolean"
          ],
          "num": 108
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "-1"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "35",
            "36",
            "37",
            "38",
            "39",
            "40",
            "41",
            "42",
            "43",
            "44",
            "45",
            "46",
            "47",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57",
            "58",
            "59",
            "60",
            "61",
            "62",
            "63",
            "64",
            "65",
            "66",
            "67",
            "68",
            "69",
            "70",
            "71",
            "72",
            "73",
            "74",
            "75",
            "76",
            "77",
            "78",
            "79",
            "80",
            "81",
            "82",
            "83",
            "84",
            "85",
            "86",
            "87",
            "88",
            "89",
            "90",
            "91",
            "92",
            "93",
            "94",
            "95",
            "96",
            "97",
            "98",
            "99",
            "100",
            "101",
            "102",
            "103",
            "104",
            "105",
            "106",
            "107",
            "108",
            "109",
            "110",
            "111",
            "112",
            "113",
            "114",
            "115",
            "116",
            "117",
            "118",
            "119",
            "120",
            "121",
            "122",
            "123",
            "124",
            "125",
            "126",
            "127",
            "128",
            "129",
            "130",
            "131",
            "132",
            "133",
            "134",
            "135",
            "136",
            "137",
            "138",
            "139",
            "140",
            "141",
            "142",
            "143",
            "144",
            "145",
            "146",
            "147",
            "148",
            "149",
            "150",
            "151",
            "152",
            "153",
            "154",
            "155",
            "156",
            "157",
            "158",
            "159",
            "160",
            "161",
            "162",
            "163",
            "164",
            "165",
            "166",
            "167",
            "168",
            "169",
            "170",
            "171",
            "172",
            "173",
            "174",
            "175",
            "176",
            "177",
            "178",
            "179",
            "180",
            "181",
            "182",
            "183",
            "184",
            "185",
            "186",
            "187",
            "188",
            "189",
            "190",
            "191",
            "192",
            "193",
            "194",
            "195",
            "196",
            "197",
            "198",
            "199",
            "200",
            "201",
            "202",
            "203",
            "204",
            "205",
            "206",
            "207",
            "208",
            "209",
            "210",
            "211",
            "212",
            "213",
            "214",
            "215",
            "216",
            "217",
            "218",
            "219",
            "220",
            "221",
            "222",
            "223",
            "224",
            "225",
            "226",
            "227",
            "228",
            "229",
            "230",
            "231",
            "232",
            "233",
            "234",
            "235",
            "236",
            "237",
            "238",
            "239",
            "240",
            "241",
            "242",
            "243",
            "244",
            "245",
            "246",
            "247",
            "248",
            "249",
            "250",
            "251",
            "252",
            "253",
            "254",
            "255",
            "256",
            "257",
            "258",
            "259",
            "260",
            "261",
            "262",
            "263",
            "264",
            "265",
            "266",
            "267",
            "268",
            "269",
            "270",
            "271",
            "272",
            "273",
            "274",
            "275",
            "276",
            "277",
            "278",
            "279",
            "280",
            "281",
            "282",
            "283",
            "284",
            "285",
            "286",
            "287",
            "288",
            "289",
            "290",
            "291",
            "292",
            "293",
            "294",
            "295",
            "296",
            "297",
            "298",
            "299",
            "300",
            "301",
            "302",
            "303",
            "304",
            "305",
            "306",
            "307",
            "308",
            "309",
            "310",
            "311",
            "312",
            "313",
            "314",
            "315",
            "316",
            "317",
            "318",
            "319",
            "320",
            "321",
            "322",
            "323",
            "324",
            "325",
            "326",
            "327",
            "328",
            "329",
            "330",
            "331",
            "332",
            "333",
            "334",
            "335",
            "336",
            "337",
            "338",
            "339",
            "340",
            "341",
            "342",
            "343",
            "344",
            "345",
            "346",
            "347",
            "348",
            "349",
            "350",
            "351",
            "352",
            "353",
            "354",
            "355",
            "356",
            "357",
            "358",
            "359",
            "360",
            "361",
            "362",
            "363",
            "364",
            "365",
            "366",
            "367",
            "368",
            "369",
            "370",
            "371",
            "372",
            "373",
            "374",
            "375",
            "376",
            "377",
            "378",
            "379",
            "380",
            "381",
            "382",
            "383",
            "384",
            "385",
            "386",
            "387",
            "388",
            "389",
            "390",
            "391",
            "392",
            "393",
            "394",
            "395",
            "396",
            "397",
            "398",
            "399",
            "400",
            "401",
            "402",
            "403",
            "404",
            "405",
            "406",
            "407",
            "408",
            "409",
            "410",
            "411",
            "412",
            "413",
            "414",
            "415",
            "416",
            "417",
            "418",
            "419",
            "420",
            "421",
            "422",
            "423",
            "424",
            "425",
            "426",
            "427",
            "428",
            "429",
            "430",
            "431",
            "432",
            "433",
            "434",
            "435",
            "436",
            "437",
            "438",
            "439",
            "440",
            "441",
            "442",
            "443",
            "444",
            "445",
            "446",
            "447",
            "448",
            "449",
            "450",
            "451",
            "452",
            "453",
            "454",
            "455",
            "456",
            "457",
            "458",
            "459",
            "460",
            "461",
            "462",
            "463",
            "464",
            "465",
            "466",
            "467",
            "468",
            "469",
            "470",
            "471",
            "472",
            "473",
            "474",
            "475",
            "476",
            "477",
            "478",
            "479",
            "480",
            "481",
            "482",
            "483",
            "484",
            "485",
            "486",
            "487",
            "488",
            "489",
            "490",
            "491",
            "492",
            "493",
            "494",
            "495",
            "496",
            "497",
            "498",
            "499",
            "500",
            "501",
            "502",
            "503",
            "504",
            "505",
            "506",
            "507",
            "508",
            "509",
            "510",
            "511",
            "512",
            "513",
            "514",
            "515",
            "516",
            "517",
            "518",
            "519",
            "520",
            "521",
            "522",
            "523",
            "524",
            "525",
            "526",
            "527",
            "528",
            "529",
            "530",
            "531",
            "532",
            "533",
            "534",
            "535",
            "536",
            "537",
            "538",
            "539",
            "540",
            "541",
            "542",
            "543",
            "544",
            "545",
            "546",
            "547",
            "548",
            "549",
            "550",
            "551",
            "552",
            "553",
            "554",
            "555",
            "556",
            "557",
            "558",
            "559",
            "560",
            "561",
            "562",
            "563",
            "564",
            "565",
            "566",
            "567",
            "568",
            "569",
            "570",
            "571",
            "572",
            "573",
            "574",
            "575",
            "576",
            "577",
            "578",
            "579",
            "580",
            "581",
            "582",
            "583",
            "584",
            "585",
            "586",
            "587",
            "588",
            "589",
            "590",
            "591",
            "592",
            "593",
            "594",
            "595",
            "596",
            "597",
            "598",
            "599",
            "600",
            "601",
            "602",
            "603",
            "604",
            "605",
            "606",
            "607",
            "608",
            "609",
            "610",
            "611",
            "612",
            "613",
            "614",
            "615",
            "616",
            "617",
            "618",
            "619",
            "620",
            "621",
            "622",
            "623",
            "624",
            "625",
            "626",
            "627",
            "628",
            "629",
            "630",
            "631",
            "632",
            "633",
            "634",
            "635",
            "636",
            "637",
            "638",
            "639",
            "640",
            "641",
            "642",
            "643",
            "644",
            "645",
            "646",
            "647",
            "648",
            "649",
            "650",
            "651",
            "652",
            "653",
            "654",
            "655",
            "656",
            "657",
            "658",
            "659",
            "660",
            "661",
            "662",
            "663",
            "664",
            "665",
            "666",
            "667",
            "668",
            "669",
            "670",
            "671",
            "672",
            "673",
            "674",
            "675",
            "676",
            "677",
            "678",
            "679",
            "680",
            "681",
            "682",
            "683",
            "684",
            "685",
            "686",
            "687",
            "688",
            "689",
            "690",
            "691",
            "692",
            "693",
            "694",
            "695",
            "696",
            "697",
            "698",
            "699",
            "700",
            "701",
            "702",
            "703",
            "704",
            "705",
            "706",
            "707",
            "708",
            "709",
            "710",
            "711",
            "712",
            "713",
            "714",
            "715",
            "716",
            "717",
            "718",
            "719",
            "720",
            "721",
            "722",
            "723",
            "724",
            "725",
            "726",
            "727",
            "728",
            "729",
            "730",
            "731",
            "732",
            "733",
            "734",
            "735",
            "736",
            "737",
            "738",
            "739",
            "740",
            "741",
            "742",
            "743",
            "744",
            "745",
            "746",
            "747",
            "748",
            "749",
            "750",
            "751",
            "752",
            "753",
            "754",
            "755",
            "756",
            "757",
            "758",
            "759",
            "760",
            "761",
            "762",
            "763",
            "764",
            "765",
            "766",
            "767",
            "768",
            "769",
            "770",
            "771",
            "772",
            "773",
            "774",
            "775",
            "776",
            "777",
            "778",
            "779",
            "780",
            "781",
            "782",
            "783",
            "784",
            "785",
            "786",
            "787",
            "788",
            "789",
            "790",
            "791",
            "792",
            "793",
            "794",
            "795",
            "796",
            "797",
            "798",
            "799",
            "800",
            "801",
            "802",
            "803",
            "804",
            "805",
            "806",
            "807",
            "808",
            "809",
            "810",
            "811",
            "812",
            "813",
            "814",
            "815",
            "816",
            "817",
            "818",
            "819",
            "820",
            "821",
            "822",
            "823",
            "824",
            "825",
            "826",
            "827",
            "828",
            "829",
            "830",
            "831",
            "832",
            "833",
            "834",
            "835",
            "836",
            "837",
            "838",
            "839",
            "840",
            "841",
            "842",
            "843",
            "844",
            "845",
            "846",
            "847",
            "848",
            "849",
            "850",
            "851",
            "852",
            "853",
            "854",
            "855",
            "856",
            "857",
            "858",
            "859",
            "860",
            "861",
            "862",
            "863",
            "864",
            "865",
            "866",
            "867",
            "868",
            "869",
            "870",
            "871",
            "872",
            "873",
            "874",
            "875",
            "876",
            "877",
            "878",
            "879",
            "880",
            "881",
            "882",
            "883",
            "884",
            "885",
            "886",
            "887",
            "888",
            "889",
            "890",
            "891",
            "892",
            "893",
            "894",
            "895",
            "896",
            "897",
            "898",
            "899",
            "900",
            "901",
            "902",
            "903",
            "904",
            "905",
            "906",
            "907",
            "908",
            "909",
            "910",
            "911",
            "912",
            "913",
            "914",
            "915",
            "916",
            "917",
            "918",
            "919",
            "920",
            "921",
            "922",
            "923",
            "924",
            "925",
            "926",
            "927",
            "928",
            "929",
            "930",
            "931",
            "932",
            "933",
            "934",
            "935",
            "936",
            "937",
            "938",
            "939",
            "940",
            "941",
            "942",
            "943",
            "944",
            "945",
            "946",
            "947",
            "948",
            "949",
            "950",
            "951",
            "952",
            "953",
            "954",
            "955",
            "956",
            "957",
            "958",
            "959",
            "960",
            "961",
            "962",
            "963",
            "964",
            "965",
            "966",
            "967",
            "968",
            "969",
            "970",
            "971",
            "972",
            "973",
            "974",
            "975",
            "976",
            "977",
            "978",
            "979",
            "980",
            "981",
            "982",
            "983",
            "984",
            "985",
            "986",
            "987",
            "988",
            "989",
            "990",
            "991",
            "992",
            "993",
            "994",
            "995",
            "996",
            "997",
            "998",
            "999",
            "1000",
            "1001",
            "1002",
            "1003",
            "1004",
            "1005",
            "1006",
            "1007",
            "1008",
            "1009",
            "1010",
            "1011",
            "1012",
            "1013",
            "1014",
            "1015",
            "1016",
            "1017",
            "1018",
            "1019",
            "1020",
            "1021",
            "1022",
            "1023",
            "1024",
            "1025",
            "1026",
            "1027",
            "1028",
            "1029",
            "1030",
            "1031",
            "1032",
            "1033",
            "1034",
            "1035",
            "1036",
            "1037",
            "1038",
            "1039",
            "1040",
            "1041",
            "1042",
            "1043",
            "1044",
            "1045",
            "1046",
            "1047",
            "1048",
            "1049",
            "1050",
            "1051",
            "1052",
            "1053",
            "1054",
            "1055",
            "1056",
            "1057",
            "1058",
            "1059",
            "1060",
            "1061",
            "1062",
            "1063",
            "1064",
            "1065",
            "1066",
            "1067",
            "1068",
            "1069",
            "1070",
            "1071",
            "1072",
            "1073",
            "1074",
            "1075",
            "1076",
            "1077",
            "1078",
            "1079",
            "1080",
            "1081",
            "1082",
            "1083",
            "1084",
            "1085",
            "1086",
            "1087",
            "1088",
            "1089",
            "1090",
            "1091",
            "1092",
            "1093",
            "1094",
            "1095",
            "1096",
            "1097",
            "1098",
            "1099",
            "1100",
            "1101",
            "1102",
            "1103",
            "1104",
            "1105",
            "1106",
            "1107",
            "1108",
            "1109",
            "1110",
            "1111",
            "1112",
            "1113",
            "1114",
            "1115",
            "1116",
            "1117",
            "1118",
            "1119",
            "1120",
            "1121",
            "1122",
            "1123",
            "1124",
            "1125",
            "1126",
            "1127",
            "1128",
            "1129",
            "1130",
            "1131",
            "1132",
            "1133",
            "1134",
            "1135",
            "1136",
            "1137",
            "1138",
            "1139",
            "1140",
            "1141",
            "1142",
            "1143",
            "1144",
            "1145",
            "1146",
            "1147",
            "1148",
            "1149",
            "1150",
            "1151",
            "1152",
            "1153",
            "1154",
            "1155",
            "1156",
            "1157",
            "1158",
            "1159",
            "1160",
            "1161",
            "1162",
            "1163",
            "1164",
            "1165",
            "1166",
            "1167",
            "1168",
            "1169",
            "1170",
            "1171",
            "1172",
            "1173",
            "1174",
            "1175",
            "1176",
            "1177",
            "1178",
            "1179",
            "1180",
            "1181",
            "1182",
            "1183",
            "1184",
            "1185",
            "1186",
            "1187",
            "1188",
            "1189",
            "1190",
            "1191",
            "1192",
            "1193",
            "1194",
            "1195",
            "1196",
            "1197",
            "1198",
            "1199",
            "1200",
            "1201",
            "1202",
            "1203",
            "1204",
            "1205",
            "1206",
            "1207",
            "1208",
            "1209",
            "1210",
            "1211",
            "1212",
            "1213",
            "1214",
            "1215",
            "1216",
            "1217",
            "1218",
            "1219",
            "1220",
            "1221",
            "1222",
            "1223",
            "1224",
            "1225",
            "1226",
            "1227",
            "1228",
            "1229",
            "1230",
            "1231",
            "1232",
            "1233",
            "1234",
            "1235",
            "1236",
            "1237",
            "1238",
            "1239",
            "1240",
            "1241",
            "1242",
            "1243",
            "1244",
            "1245",
            "1246",
            "1247",
            "1248",
            "1249",
            "1250",
            "1251",
            "1252",
            "1253",
            "1254",
            "1255",
            "1256",
            "1257",
            "1258",
            "1259",
            "1260",
            "1261",
            "1262",
            "1263",
            "1264",
            "1265",
            "1266",
            "1267",
            "1268",
            "1269",
            "1270",
            "1271",
            "1272",
            "1273",
            "1274",
            "1275",
            "1276",
            "1277",
            "1278",
            "1279",
            "1280",
            "1281",
            "1282",
            "1283",
            "1284",
            "1285",
            "1286",
            "1287",
            "1288",
            "1289",
            "1290",
            "1291",
            "1292",
            "1293",
            "1294",
            "1295",
            "1296",
            "1297",
            "1298",
            "1299",
            "1300",
            "1301",
            "1302",
            "1303",
            "1304",
            "1305",
            "1306",
            "1307",
            "1308",
            "1309",
            "1310",
            "1311",
            "1312",
            "1313",
            "1314",
            "1315",
            "1316",
            "1317",
            "1318",
            "1319",
            "1320",
            "1321",
            "1322",
            "1323",
            "1324",
            "1325",
            "1326",
            "1327",
            "1328",
            "1329",
            "1330",
            "1331",
            "1332",
            "1333",
            "1334",
            "1335",
            "1336",
            "1337",
            "1338",
            "1339",
            "1340",
            "1341",
            "1342",
            "1343",
            "1344",
            "1345",
            "1346",
            "1347",
            "1348",
            "1349",
            "1350",
            "1351",
            "1352",
            "1353",
            "1354",
            "1355",
            "1356",
            "1357",
            "1358",
            "1359",
            "1360",
            "1361",
            "1362",
            "1363",
            "1364",
            "1365",
            "1366",
            "1367",
            "1368",
            "1369",
            "1370",
            "1371",
            "1372",
            "1373",
            "1374",
            "1375",
            "1376",
            "1377",
            "1378",
            "1379",
            "1380",
            "1381",
            "1382",
            "1383",
            "1384",
            "1385",
            "1386",
            "1387",
            "1388",
            "1389",
            "1390",
            "1391",
            "1392",
            "1393",
            "1394",
            "1395",
            "1396",
            "1397",
            "1398",
            "1399",
            "1400",
            "1401",
            "1402",
            "1403",
            "1404",
            "1405",
            "1406",
            "1407",
            "1408",
            "1409",
            "1410",
            "1411",
            "1412",
            "1413",
            "1414",
            "1415",
            "1416",
            "1417",
            "1418",
            "1419",
            "1420",
            "1421",
            "1422",
            "1423",
            "1424",
            "1425",
            "1426",
            "1427",
            "1428",
            "1429",
            "1430",
            "1431",
            "1432",
            "1433",
            "1434",
            "1435",
            "1436",
            "1437",
            "1438",
            "1439",
            "1440",
            "1441",
            "1442",
            "1443",
            "1444",
            "1445",
            "1446",
            "1447",
            "1448",
            "1449",
            "1450",
            "1451",
            "1452",
            "1453",
            "1454",
            "1455",
            "1456",
            "1457",
            "1458",
            "1459",
            "1460",
            "1461",
            "1462",
            "1463",
            "1464",
            "1465",
            "1466",
            "1467",
            "1468",
            "1469",
            "1470",
            "1471",
            "1472",
            "1473",
            "1474",
            "1475",
            "1476",
            "1477",
            "1478",
            "1479",
            "1480",
            "1481",
            "1482",
            "1483",
            "1484",
            "1485",
            "1486",
            "1487",
            "1488",
            "1489",
            "1490",
            "1491",
            "1492",
            "1493",
            "1494",
            "1495",
            "1496",
            "1497",
            "1498",
            "1499",
            "1500",
            "1501",
            "1502",
            "1503",
            "1504",
            "1505",
            "1506",
            "1507",
            "1508",
            "1509",
            "1510",
            "1511",
            "1512",
            "1513",
            "1514",
            "1515",
            "1516",
            "1517",
            "1518",
            "1519",
            "1520",
            "1521",
            "1522",
            "1523",
            "1524",
            "1525",
            "1526",
            "1527",
            "1528",
            "1529",
            "1530",
            "1531",
            "1532",
            "1533",
            "1534",
            "1535",
            "1536",
            "1537",
            "1538",
            "1539",
            "1540",
            "1541",
            "1542",
            "1543",
            "1544",
            "1545",
            "1546",
            "1547",
            "1548",
            "1549",
            "1550",
            "1551",
            "1552",
            "1553",
            "1554",
            "1555",
            "1556",
            "1557",
            "1558",
            "1559",
            "1560",
            "1561",
            "1562",
            "1563",
            "1564",
            "1565",
            "1566",
            "1567",
            "1568",
            "1569",
            "1570",
            "1571",
            "1572",
            "1573",
            "1574",
            "1575",
            "1576",
            "1577",
            "1578",
            "1579",
            "1580",
            "1581",
            "1582",
            "1583",
            "1584",
            "1585",
            "1586",
            "1587",
            "1588",
            "1589",
            "1590",
            "1591",
            "1592",
            "1593",
            "1594",
            "1595",
            "1596",
            "1597",
            "1598",
            "1599",
            "1600",
            "1601",
            "1602",
            "1603",
            "1604",
            "1605",
            "1606",
            "1607",
            "1608",
            "1609",
            "1610",
            "1611",
            "1612",
            "1613",
            "1614",
            "1615",
            "1616",
            "1617",
            "1618",
            "1619",
            "1620",
            "1621",
            "1622",
            "1623",
            "1624",
            "1625",
            "1626",
            "1627",
            "1628",
            "1629",
            "1630",
            "1631",
            "1632",
            "1633",
            "1634",
            "1635",
            "1636",
            "1637",
            "1638",
            "1639",
            "1640",
            "1641",
            "1642",
            "1643",
            "1644",
            "1645",
            "1646",
            "1647",
            "1648",
            "1649",
            "1650",
            "1651",
            "1652",
            "1653",
            "1654",
            "1655",
            "1656",
            "1657",
            "1658",
            "1659",
            "1660",
            "1661",
            "1662",
            "1663",
            "1664",
            "1665",
            "1666",
            "1667",
            "1668",
            "1669",
            "1670",
            "1671",
            "1672",
            "1673",
            "1674",
            "1675",
            "1676",
            "1677",
            "1678",
            "1679",
            "1680",
            "1681",
            "1682",
            "1683",
            "1684",
            "1685",
            "1686",
            "1687",
            "1688",
            "1689",
            "1690",
            "1691",
            "1692",
            "1693",
            "1694",
            "1695",
            "1696",
            "1697",
            "1698",
            "1699",
            "1700",
            "1701",
            "1702",
            "1703",
            "1704",
            "1705",
            "1706",
            "1707",
            "1708",
            "1709",
            "1710",
            "1711",
            "1712",
            "1713",
            "1714",
            "1715",
            "1716",
            "1717",
            "1718",
            "1719",
            "1720",
            "1721",
            "1722",
            "1723",
            "1724",
            "1725",
            "1726",
            "1727",
            "1728",
            "1729",
            "1730",
            "1731",
            "1732",
            "1733",
            "1734",
            "1735",
            "1736",
            "1737",
            "1738",
            "1739",
            "1740",
            "1741",
            "1742",
            "1743",
            "1744",
            "1745",
            "1746",
            "1747",
            "1748",
            "1749",
            "1750",
            "1751",
            "1752",
            "1753",
            "1754",
            "1755",
            "1756",
            "1757",
            "1758",
            "1759",
            "1760",
            "1761",
            "1762",
            "1763",
            "1764",
            "1765",
            "1766",
            "1767",
            "1768",
            "1769",
            "1770",
            "1771",
            "1772",
            "1773",
            "1774",
            "1775",
            "1776",
            "1777",
            "1778",
            "1779",
            "1780",
            "1781",
            "1782",
            "1783",
            "1784",
            "1785",
            "1786",
            "1787",
            "1788",
            "1789",
            "1790",
            "1791",
            "1792",
            "1793",
            "1794",
            "1795",
            "1796",
            "1797",
            "1798",
            "1799",
            "1800",
            "1801",
            "1802",
            "1803",
            "1804",
            "1805",
            "1806",
            "1807",
            "1808",
            "1809",
            "1810",
            "1811",
            "1812",
            "1813",
            "1814",
            "1815",
            "1816",
            "1817",
            "1818",
            "1819",
            "1820",
            "1821",
            "1822",
            "1823",
            "1824",
            "1825",
            "1826",
            "1827",
            "1828",
            "1829",
            "1830",
            "1831",
            "1832",
            "1833",
            "1834",
            "1835",
            "1836",
            "1837",
            "1838",
            "1839",
            "1840",
            "1841",
            "1842",
            "1843",
            "1844",
            "1845",
            "1846",
            "1847",
            "1848",
            "1849",
            "1850",
            "1851",
            "1852",
            "1853",
            "1854",
            "1855",
            "1856",
            "1857",
            "1858",
            "1859",
            "1860",
            "1861",
            "1862",
            "1863",
            "1864",
            "1865",
            "1866",
            "1867",
            "1868",
            "1869",
            "1870",
            "1871",
            "1872",
            "1873",
            "1874",
            "1875",
            "1876",
            "1877",
            "1878",
            "1879",
            "1880",
            "1881",
            "1882",
            "1883",
            "1884",
            "1885",
            "1886",
            "1887",
            "1888",
            "1889",
            "1890",
            "1891",
            "1892",
            "1893",
            "1894",
            "1895",
            "1896",
            "1897",
            "1898",
            "1899",
            "1900",
            "1901",
            "1902",
            "1903",
            "1904",
            "1905",
            "1906",
            "1907",
            "1908",
            "1909",
            "1910",
            "1911",
            "1912",
            "1913",
            "1914",
            "1915",
            "1916",
            "1917",
            "1918",
            "1919",
            "1920",
            "1921",
            "1922",
            "1923",
            "1924",
            "1925"
          ],
          "num": 1925
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java\nnew file mode 100644\nindex 0000000..70a8490\n--- /dev/null\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n@@ -0,0 +1,1925 @@\n+/*\n+ * Copyright 2004 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.javascript.jscomp;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.common.base.Predicate;\n+import com.google.common.base.Predicates;\n+import com.google.common.collect.Maps;\n+import com.google.javascript.rhino.FunctionNode;\n+import com.google.javascript.rhino.JSDocInfo;\n+import com.google.javascript.rhino.Node;\n+import com.google.javascript.rhino.Token;\n+import com.google.javascript.rhino.TokenStream;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * NodeUtil contains utilities that get properties from the Node object.\n+ *\n+*\n+*\n+ */\n+public final class NodeUtil {\n+\n+  // TODO(user): Eliminate this class and make all of the static methods\n+  // instance methods of com.google.javascript.rhino.Node.\n+\n+  /** the set of builtin constructors that don\u0027t have side effects. */\n+  private static final Set\u003cString\u003e CONSTRUCTORS_WITHOUT_SIDE_EFFECTS \u003d\n+      new HashSet\u003cString\u003e(Arrays.asList(\n+        \"Array\",\n+        \"Date\",\n+        \"Error\",\n+        \"Object\",\n+        \"RegExp\",\n+        \"XMLHttpRequest\"));\n+\n+  public static final String CONSTANT_MARKER \u003d \"$$constant\";\n+\n+  // Utility class; do not instantiate.\n+  private NodeUtil() {}\n+\n+  /**\n+   * Gets the boolean value of a node that represents a literal. This method\n+   * effectively emulates the \u003ccode\u003eBoolean()\u003c/code\u003e JavaScript cast function.\n+   *\n+   * @throws IllegalArgumentException If {@code n} is not a literal value\n+   */\n+  static boolean getBooleanValue(Node n) {\n+    switch (n.getType()) {\n+      case Token.STRING:\n+        return n.getString().length() \u003e 0;\n+\n+      case Token.NUMBER:\n+        return n.getDouble() !\u003d 0;\n+\n+      case Token.NULL:\n+      case Token.FALSE:\n+      case Token.VOID:\n+        return false;\n+\n+      case Token.NAME:\n+        String name \u003d n.getString();\n+        if (\"undefined\".equals(name)\n+            || \"NaN\".equals(name)) {\n+          // We assume here that programs don\u0027t change the value of the keyword\n+          // undefined to something other than the value undefined.\n+          return false;\n+        } else if (\"Infinity\".equals(name)) {\n+          return true;\n+        }\n+        break;\n+\n+      case Token.TRUE:\n+      case Token.ARRAYLIT:\n+      case Token.OBJECTLIT:\n+      case Token.REGEXP:\n+        return true;\n+    }\n+    throw new IllegalArgumentException(\"Non-literal value: \" + n);\n+  }\n+\n+\n+  /**\n+   * Gets the value of a node as a String, or null if it cannot be converted.\n+   * When it returns a non-null String, this method effectively emulates the\n+   * \u003ccode\u003eString()\u003c/code\u003e JavaScript cast function.\n+   */\n+  static String getStringValue(Node n) {\n+    // TODO(user): Convert constant array, object, and regex literals as well.\n+    switch (n.getType()) {\n+      case Token.NAME:\n+      case Token.STRING:\n+        return n.getString();\n+\n+      case Token.NUMBER:\n+        double value \u003d n.getDouble();\n+        long longValue \u003d (long) value;\n+\n+        // Return \"1\" instead of \"1.0\"\n+        if (longValue \u003d\u003d value) {\n+          return Long.toString(longValue);\n+        } else {\n+          return Double.toString(n.getDouble());\n+        }\n+\n+      case Token.FALSE:\n+      case Token.TRUE:\n+      case Token.NULL:\n+        return Node.tokenToName(n.getType());\n+\n+      case Token.VOID:\n+        return \"undefined\";\n+    }\n+    return null;\n+  }\n+\n+  /**\n+   * Gets the function\u0027s name. This method recognizes five forms:\n+   * \u003cul\u003e\n+   * \u003cli\u003e{@code function name() ...}\u003c/li\u003e\n+   * \u003cli\u003e{@code var name \u003d function() ...}\u003c/li\u003e\n+   * \u003cli\u003e{@code qualified.name \u003d function() ...}\u003c/li\u003e\n+   * \u003cli\u003e{@code var name2 \u003d function name1() ...}\u003c/li\u003e\n+   * \u003cli\u003e{@code qualified.name2 \u003d function name1() ...}\u003c/li\u003e\n+   * \u003c/ul\u003e\n+   * In two last cases with named anonymous functions, the second name is\n+   * returned (the variable of qualified name).\n+   *\n+   * @param n a node whose type is {@link Token#FUNCTION}\n+   * @param parent {@code n}\u0027s parent (never {@code null})\n+   * @return the function\u0027s name, or {@code null} if it has no name\n+   */\n+  static String getFunctionName(Node n, Node parent) {\n+    String name \u003d n.getFirstChild().getString();\n+    switch (parent.getType()) {\n+      case Token.NAME:\n+        // var name \u003d function() ...\n+        // var name2 \u003d function name1() ...\n+        return parent.getString();\n+\n+      case Token.ASSIGN:\n+        // qualified.name \u003d function() ...\n+        // qualified.name2 \u003d function name1() ...\n+        return parent.getFirstChild().getQualifiedName();\n+\n+      default:\n+        // function name() ...\n+        return name !\u003d null \u0026\u0026 name.length() !\u003d 0 ? name : null;\n+    }\n+  }\n+\n+  /**\n+   * Returns true if this is an immutable value.\n+   */\n+  static boolean isImmutableValue(Node n) {\n+    switch (n.getType()) {\n+      case Token.STRING:\n+      case Token.NUMBER:\n+      case Token.NULL:\n+      case Token.TRUE:\n+      case Token.FALSE:\n+      case Token.VOID:\n+        return true;\n+      case Token.NEG:\n+        return isImmutableValue(n.getFirstChild());\n+      case Token.NAME:\n+        String name \u003d n.getString();\n+        // We assume here that programs don\u0027t change the value of the keyword\n+        // undefined to something other than the value undefined.\n+        return \"undefined\".equals(name)\n+            || \"Infinity\".equals(name)\n+            || \"NaN\".equals(name);\n+    }\n+\n+    return false;\n+  }\n+\n+  /**\n+   * Returns true if this is a literal value. We define a literal value\n+   * as any node that evaluates to the same thing regardless of when or\n+   * where it is evaluated. So /xyz/ and [3, 5] are literals, but\n+   * function() { return a; } is not.\n+   */\n+  static boolean isLiteralValue(Node n) {\n+    // TODO(nicksantos): Refine this function to catch more literals.\n+    switch (n.getType()) {\n+      case Token.ARRAYLIT:\n+      case Token.OBJECTLIT:\n+      case Token.REGEXP:\n+        // Return true only if all children are const.\n+        for (Node child \u003d n.getFirstChild(); child !\u003d null;\n+             child \u003d child.getNext()) {\n+          if (!isLiteralValue(child)) {\n+            return false;\n+          }\n+        }\n+        return true;\n+\n+      default:\n+        return isImmutableValue(n);\n+    }\n+  }\n+\n+  /**\n+   * Determines whether the given value may be assigned to a define.\n+   *\n+   * @param val The value being assigned.\n+   * @param defines The list of names of existing defines.\n+   */\n+  static boolean isValidDefineValue(Node val, Set\u003cString\u003e defines) {\n+    switch (val.getType()) {\n+      case Token.STRING:\n+      case Token.NUMBER:\n+      case Token.TRUE:\n+      case Token.FALSE:\n+        return true;\n+\n+      // Single operators are valid if the child is valid.\n+      case Token.BITAND:\n+      case Token.BITNOT:\n+      case Token.BITOR:\n+      case Token.BITXOR:\n+      case Token.NOT:\n+      case Token.NEG:\n+        return isValidDefineValue(val.getFirstChild(), defines);\n+\n+      // Names are valid if and only if they are defines themselves.\n+      case Token.NAME:\n+      case Token.GETPROP:\n+        if (val.isQualifiedName()) {\n+          return defines.contains(val.getQualifiedName());\n+        }\n+    }\n+    return false;\n+  }\n+\n+  /**\n+   * Returns whether this a BLOCK node with no children.\n+   *\n+   * @param block The node.\n+   */\n+  static boolean isEmptyBlock(Node block) {\n+    if (block.getType() !\u003d Token.BLOCK) {\n+      return false;\n+    }\n+\n+    for (Node n \u003d block.getFirstChild(); n !\u003d null; n \u003d n.getNext()) {\n+      if (n.getType() !\u003d Token.EMPTY) {\n+        return false;\n+      }\n+    }\n+    return true;\n+  }\n+\n+  /**\n+   * A \"simple\" operator is one whose children are expressions,\n+   * has no direct side-effects (unlike \u0027+\u003d\u0027), and has no\n+   * conditional aspects (unlike \u0027||\u0027).\n+   */\n+  static boolean isSimpleOperatorType(int type) {\n+    switch (type) {\n+      case Token.ADD:\n+      case Token.BITAND:\n+      case Token.BITNOT:\n+      case Token.BITOR:\n+      case Token.BITXOR:\n+      case Token.COMMA:\n+      case Token.DIV:\n+      case Token.EQ:\n+      case Token.GE:\n+      case Token.GETELEM:\n+      case Token.GETPROP:\n+      case Token.GT:\n+      case Token.INSTANCEOF:\n+      case Token.LE:\n+      case Token.LSH:\n+      case Token.LT:\n+      case Token.MOD:\n+      case Token.MUL:\n+      case Token.NE:\n+      case Token.NOT:\n+      case Token.RSH:\n+      case Token.SHEQ:\n+      case Token.SHNE:\n+      case Token.SUB:\n+      case Token.TYPEOF:\n+      case Token.VOID:\n+      case Token.POS:\n+      case Token.NEG:\n+      case Token.URSH:\n+        return true;\n+\n+      default:\n+        return false;\n+    }\n+  }\n+\n+  /**\n+   * Creates an EXPR_RESULT.\n+   *\n+   * @param child The expression itself.\n+   * @return Newly created EXPR node with the child as subexpression.\n+   */\n+  public static Node newExpr(Node child) {\n+    return new Node(Token.EXPR_RESULT, child);\n+  }\n+\n+  /**\n+   * Returns true if the node may create new mutable state, or change existing\n+   * state.\n+   *\n+   * @see \u003ca href\u003d\"http://www.xkcd.org/326/\"\u003eXKCD Cartoon\u003c/a\u003e\n+   */\n+  static boolean mayEffectMutableState(Node n) {\n+    return checkForStateChangeHelper(n, true);\n+  }\n+\n+  /**\n+   * Returns true if the node which may have side effects when executed.\n+   */\n+  static boolean mayHaveSideEffects(Node n) {\n+    return checkForStateChangeHelper(n, false);\n+  }\n+\n+  /**\n+   * Returns true if some node in n\u0027s subtree changes application state.\n+   * If {@code checkForNewObjects} is true, we assume that newly created\n+   * mutable objects (like object literals) change state. Otherwise, we assume\n+   * that they have no side effects.\n+   */\n+  private static boolean checkForStateChangeHelper(\n+      Node n, boolean checkForNewObjects) {\n+    // Rather than id which ops may have side effects, id the ones\n+    // that we know to be safe\n+    switch (n.getType()) {\n+      // other side-effect free statements and expressions\n+      case Token.AND:\n+      case Token.BLOCK:\n+      case Token.EXPR_RESULT:\n+      case Token.HOOK:\n+      case Token.IF:\n+      case Token.IN:\n+      case Token.LP:\n+      case Token.NUMBER:\n+      case Token.OR:\n+      case Token.THIS:\n+      case Token.TRUE:\n+      case Token.FALSE:\n+      case Token.NULL:\n+      case Token.STRING:\n+      case Token.SWITCH:\n+      case Token.TRY:\n+      case Token.EMPTY:\n+        break;\n+\n+      // Throws are by definition side effects\n+      case Token.THROW:\n+        return true;\n+\n+      case Token.OBJECTLIT:\n+      case Token.ARRAYLIT:\n+      case Token.REGEXP:\n+        if (checkForNewObjects) {\n+          return true;\n+        }\n+        break;\n+\n+      case Token.VAR:    // empty var statement (no declaration)\n+      case Token.NAME:   // variable by itself\n+        if (n.getFirstChild() !\u003d null)\n+          return true;\n+\n+        break;\n+\n+      case Token.FUNCTION:\n+        // Anonymous functions don\u0027t have side-effects, but named ones\n+        // change the namespace. Therefore, we check if the function has\n+        // a name. Either way, we don\u0027t need to check the children, since\n+        // they aren\u0027t executed at declaration time.\n+        //\n+        return !isFunctionAnonymous(n);\n+\n+      case Token.NEW:\n+        {\n+          if (checkForNewObjects) {\n+            return true;\n+          }\n+\n+          // calls to constructors that have no side effects have the\n+          // no side effect property set.\n+          if (n.isNoSideEffectsCall()) {\n+            break;\n+          }\n+\n+          // certain constructors are certified side effect free\n+          Node constructor \u003d n.getFirstChild();\n+          if (Token.NAME \u003d\u003d constructor.getType()) {\n+            String className \u003d constructor.getString();\n+            if (CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(className)) {\n+              // loop below will see if the constructor parameters have\n+              // side-effects\n+              break;\n+            }\n+          } else {\n+            // the constructor could also be an expression like\n+            // new (useArray ? Object : Array)();\n+          }\n+        }\n+        return true;\n+\n+      case Token.CALL:\n+        // calls to functions that have no side effects have the no\n+        // side effect property set.\n+        if (n.isNoSideEffectsCall()) {\n+          // loop below will see if the function parameters have\n+          // side-effects\n+          break;\n+        }\n+        return true;\n+\n+      default:\n+        if (isSimpleOperatorType(n.getType()))\n+          break;\n+\n+        return true;\n+    }\n+\n+    for (Node c \u003d n.getFirstChild(); c !\u003d null; c \u003d c.getNext()) {\n+      if (checkForStateChangeHelper(c, checkForNewObjects)) {\n+        return true;\n+      }\n+    }\n+\n+    return false;\n+  }\n+\n+  /**\n+   * Do calls to this constructor have side effects?\n+   *\n+   * @param callNode - construtor call node\n+   */\n+  static boolean constructorCallHasSideEffects(Node callNode) {\n+    Preconditions.checkArgument(\n+        callNode.getType() \u003d\u003d Token.NEW,\n+        \"Expected NEW node, got \" + Token.name(callNode.getType()));\n+\n+    if (callNode.isNoSideEffectsCall()) {\n+      return false;\n+    }\n+\n+    Node nameNode \u003d callNode.getFirstChild();\n+    if (nameNode.getType() \u003d\u003d Token.NAME \u0026\u0026\n+        CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString())) {\n+      return false;\n+    }\n+\n+    return true;\n+  }\n+\n+  /**\n+   * Returns true if calls to this function have side effects.\n+   *\n+   * @param callNode - function call node\n+   */\n+  static boolean functionCallHasSideEffects(Node callNode) {\n+    Preconditions.checkArgument(\n+        callNode.getType() \u003d\u003d Token.CALL,\n+        \"Expected CALL node, got \" + Token.name(callNode.getType()));\n+\n+    if (callNode.isNoSideEffectsCall()) {\n+      return false;\n+    }\n+\n+    Node nameNode \u003d callNode.getFirstChild();\n+\n+    // Built-in functions with no side effects.\n+    if (nameNode.getType() \u003d\u003d Token.NAME) {\n+      String name \u003d nameNode.getString();\n+      if (name.equals(\"String\")) {\n+        return false;\n+      }\n+    }\n+\n+    // Functions in the \"Math\" namespace have no side effects.\n+    if (nameNode.getType() \u003d\u003d Token.GETPROP \u0026\u0026\n+        nameNode.getFirstChild().getType() \u003d\u003d Token.NAME) {\n+      String namespaceName \u003d nameNode.getFirstChild().getString();\n+      if (namespaceName.equals(\"Math\")) {\n+        return false;\n+      }\n+    }\n+\n+    return true;\n+  }\n+\n+  /**\n+   * Returns true if the current node\u0027s type implies side effects.\n+   *\n+   * This is a non-recursive version of the may have side effects\n+   * check; used to check wherever the current node\u0027s type is one of\n+   * the reason\u0027s why a subtree has side effects.\n+   */\n+  static boolean nodeTypeMayHaveSideEffects(Node n) {\n+    if (NodeUtil.isAssignmentOp(n)) {\n+      return true;\n+    }\n+\n+    switch(n.getType()) {\n+      case Token.CALL:\n+      case Token.DELPROP:\n+      case Token.NEW:\n+      case Token.DEC:\n+      case Token.INC:\n+      case Token.THROW:\n+        return true;\n+      case Token.NAME:\n+        // A variable definition.\n+        return n.hasChildren();\n+      default:\n+        return false;\n+    }\n+  }\n+\n+  /**\n+   * @return Whether the tree can be affected by side-effects or\n+   * has side-effects.\n+   */\n+  static boolean canBeSideEffected(Node n) {\n+    Set\u003cString\u003e emptySet \u003d Collections.emptySet();\n+    return canBeSideEffected(n, emptySet);\n+  }\n+\n+  /**\n+   * @param knownConstants A set of names known to be constant value at\n+   * node \u0027n\u0027 (such as locals that are last written before n can execute).\n+   * @return Whether the tree can be affected by side-effects or\n+   * has side-effects.\n+   */\n+  static boolean canBeSideEffected(Node n, Set\u003cString\u003e knownConstants) {\n+    switch (n.getType()) {\n+      case Token.CALL:\n+      case Token.NEW:\n+        // Function calls or constructor can reference changed values.\n+        // TODO(johnlenz): Add some mechanism for determining that functions\n+        // are unaffected by side effects.\n+        return true;\n+      case Token.NAME:\n+        // Non-constant names values may have been changed.\n+        return !NodeUtil.isConstantName(n)\n+            \u0026\u0026 !knownConstants.contains(n.getString());\n+\n+      // Properties on constant NAMEs can still be side-effected.\n+      case Token.GETPROP:\n+      case Token.GETELEM:\n+        return true;\n+    }\n+\n+    for (Node c \u003d n.getFirstChild(); c !\u003d null; c \u003d c.getNext()) {\n+      if (canBeSideEffected(c, knownConstants)) {\n+        return true;\n+      }\n+    }\n+\n+    return false;    \n+  }\n+\n+  /*\n+   *  0 comma ,\n+   *  1 assignment \u003d +\u003d -\u003d *\u003d /\u003d %\u003d \u003c\u003c\u003d \u003e\u003e\u003d \u003e\u003e\u003e\u003d \u0026\u003d ^\u003d |\u003d\n+   *  2 conditional ?:\n+   *  3 logical-or ||\n+   *  4 logical-and \u0026\u0026\n+   *  5 bitwise-or |\n+   *  6 bitwise-xor ^\n+   *  7 bitwise-and \u0026\n+   *  8 equality \u003d\u003d !\u003d\n+   *  9 relational \u003c \u003c\u003d \u003e \u003e\u003d\n+   * 10 bitwise shift \u003c\u003c \u003e\u003e \u003e\u003e\u003e\n+   * 11 addition/subtraction + -\n+   * 12 multiply/divide * / %\n+   * 13 negation/increment ! ~ - ++ --\n+   * 14 call, member () [] .\n+   */\n+  static int precedence(int type) {\n+    switch (type) {\n+      case Token.COMMA:  return 0;\n+      case Token.ASSIGN_BITOR:\n+      case Token.ASSIGN_BITXOR:\n+      case Token.ASSIGN_BITAND:\n+      case Token.ASSIGN_LSH:\n+      case Token.ASSIGN_RSH:\n+      case Token.ASSIGN_URSH:\n+      case Token.ASSIGN_ADD:\n+      case Token.ASSIGN_SUB:\n+      case Token.ASSIGN_MUL:\n+      case Token.ASSIGN_DIV:\n+      case Token.ASSIGN_MOD:\n+      case Token.ASSIGN: return 1;\n+      case Token.HOOK:   return 2;  // ?: operator\n+      case Token.OR:     return 3;\n+      case Token.AND:    return 4;\n+      case Token.BITOR:  return 5;\n+      case Token.BITXOR: return 6;\n+      case Token.BITAND: return 7;\n+      case Token.EQ:\n+      case Token.NE:\n+      case Token.SHEQ:\n+      case Token.SHNE:   return 8;\n+      case Token.LT:\n+      case Token.GT:\n+      case Token.LE:\n+      case Token.GE:\n+      case Token.INSTANCEOF:\n+      case Token.IN:     return 9;\n+      case Token.LSH:\n+      case Token.RSH:\n+      case Token.URSH:   return 10;\n+      case Token.SUB:\n+      case Token.ADD:    return 11;\n+      case Token.MUL:\n+      case Token.MOD:\n+      case Token.DIV:    return 12;\n+      case Token.INC:\n+      case Token.DEC:\n+      case Token.NEW:\n+      case Token.DELPROP:\n+      case Token.TYPEOF:\n+      case Token.VOID:\n+      case Token.NOT:\n+      case Token.BITNOT:\n+      case Token.POS:\n+      case Token.NEG:    return 13;\n+\n+      case Token.ARRAYLIT:\n+      case Token.CALL:\n+      case Token.EMPTY:\n+      case Token.FALSE:\n+      case Token.FUNCTION:\n+      case Token.GETELEM:\n+      case Token.GETPROP:\n+      case Token.GET_REF:\n+      case Token.IF:\n+      case Token.LP:\n+      case Token.NAME:\n+      case Token.NULL:\n+      case Token.NUMBER:\n+      case Token.OBJECTLIT:\n+      case Token.REGEXP:\n+      case Token.RETURN:\n+      case Token.STRING:\n+      case Token.THIS:\n+      case Token.TRUE:\n+        return 15;\n+\n+      default: throw new Error(\"Unknown precedence for \" +\n+                               Node.tokenToName(type) +\n+                               \" (type \" + type + \")\");\n+    }\n+  }\n+\n+  /**\n+   * Returns true if the operator is associative.\n+   * e.g. (a * b) * c \u003d a * (b * c)\n+   * Note: \"+\" is not associative because it is also the concatentation\n+   * for strings. e.g. \"a\" + (1 + 2) is not \"a\" + 1 + 2\n+   */\n+  static boolean isAssociative(int type) {\n+    switch (type) {\n+      case Token.MUL:\n+      case Token.AND:\n+      case Token.OR:\n+      case Token.BITOR:\n+      case Token.BITAND:\n+        return true;\n+      default:\n+        return false;\n+    }\n+  }\n+\n+  static boolean isAssignmentOp(Node n) {\n+    switch (n.getType()){\n+      case Token.ASSIGN:\n+      case Token.ASSIGN_BITOR:\n+      case Token.ASSIGN_BITXOR:\n+      case Token.ASSIGN_BITAND:\n+      case Token.ASSIGN_LSH:\n+      case Token.ASSIGN_RSH:\n+      case Token.ASSIGN_URSH:\n+      case Token.ASSIGN_ADD:\n+      case Token.ASSIGN_SUB:\n+      case Token.ASSIGN_MUL:\n+      case Token.ASSIGN_DIV:\n+      case Token.ASSIGN_MOD:\n+        return true;\n+    }\n+    return false;\n+  }\n+  \n+  static int getOpFromAssignmentOp(Node n) {\n+    switch (n.getType()){\n+      case Token.ASSIGN_BITOR:\n+        return Token.BITOR;\n+      case Token.ASSIGN_BITXOR:\n+        return Token.BITXOR;\n+      case Token.ASSIGN_BITAND:\n+        return Token.BITAND;\n+      case Token.ASSIGN_LSH:\n+        return Token.LSH;\n+      case Token.ASSIGN_RSH:\n+        return Token.RSH;\n+      case Token.ASSIGN_URSH:\n+        return Token.URSH;\n+      case Token.ASSIGN_ADD:\n+        return Token.ADD;\n+      case Token.ASSIGN_SUB:\n+        return Token.SUB;\n+      case Token.ASSIGN_MUL:\n+        return Token.MUL;\n+      case Token.ASSIGN_DIV:\n+        return Token.DIV;\n+      case Token.ASSIGN_MOD:\n+        return Token.MOD;\n+    }\n+    throw new IllegalArgumentException(\"Not an assiment op\");\n+  }\n+\n+  static boolean isExpressionNode(Node n) {\n+    return n.getType() \u003d\u003d Token.EXPR_RESULT;\n+  }\n+\n+  /**\n+   * Determines if the given node contains a function declaration.\n+   */\n+  static boolean containsFunctionDeclaration(Node n) {\n+    return containsType(n, Token.FUNCTION);\n+  }\n+\n+  /**\n+   * Returns true if the subtree contains references to \u0027this\u0027 keyword\n+   */\n+  static boolean referencesThis(Node n) {\n+    return containsType(n, Token.THIS);\n+  }\n+\n+  /**\n+   * Is this a GETPROP or GETELEM node?\n+   */\n+  static boolean isGet(Node n) {\n+    return n.getType() \u003d\u003d Token.GETPROP\n+        || n.getType() \u003d\u003d Token.GETELEM;\n+  }\n+\n+  /**\n+   * Is this a GETPROP node?\n+   */\n+  static boolean isGetProp(Node n) {\n+    return n.getType() \u003d\u003d Token.GETPROP;\n+  }\n+\n+  /**\n+   * Is this a NAME node?\n+   */\n+  static boolean isName(Node n) {\n+    return n.getType() \u003d\u003d Token.NAME;\n+  }\n+\n+  /**\n+   * Is this a NEW node?\n+   */\n+  static boolean isNew(Node n) {\n+    return n.getType() \u003d\u003d Token.NEW;\n+  }\n+\n+  /**\n+   * Is this a VAR node?\n+   */\n+  static boolean isVar(Node n) {\n+    return n.getType() \u003d\u003d Token.VAR;\n+  }\n+\n+  /**\n+   * Is this node the name of a variable being declared?\n+   *\n+   * @param n The node\n+   * @return True if {@code n} is NAME and {@code parent} is VAR\n+   */\n+  static boolean isVarDeclaration(Node n) {\n+    // There is no need to verify that parent !\u003d null because a NAME node\n+    // always has a parent in a valid parse tree.\n+    return n.getType() \u003d\u003d Token.NAME \u0026\u0026 n.getParent().getType() \u003d\u003d Token.VAR;\n+  }\n+\n+  /**\n+   * For an assignment or variable declaration get the assigned value.\n+   * @return The value node representing the new value.\n+   */\n+  static Node getAssignedValue(Node n) {\n+    Preconditions.checkState(isName(n));\n+    Node parent \u003d n.getParent();\n+    if (isVar(parent)) {\n+      return n.getFirstChild();\n+    } else if (isAssign(parent) \u0026\u0026 parent.getFirstChild() \u003d\u003d n) {\n+      return n.getNext();\n+    } else {\n+      return null;\n+    }\n+  }\n+  \n+  /**\n+   * Is this a STRING node?\n+   */\n+  static boolean isString(Node n) {\n+    return n.getType() \u003d\u003d Token.STRING;\n+  }\n+\n+  /**\n+   * Is this node an assignment expression statement?\n+   *\n+   * @param n The node\n+   * @return True if {@code n} is EXPR_RESULT and {@code n}\u0027s\n+   *     first child is ASSIGN\n+   */\n+  static boolean isExprAssign(Node n) {\n+    return n.getType() \u003d\u003d Token.EXPR_RESULT\n+        \u0026\u0026 n.getFirstChild().getType() \u003d\u003d Token.ASSIGN;\n+  }\n+\n+  /**\n+   * Is this an ASSIGN node?\n+   */\n+  static boolean isAssign(Node n) {\n+    return n.getType() \u003d\u003d Token.ASSIGN;\n+  }\n+\n+  /**\n+   * Is this node a call expression statement?\n+   *\n+   * @param n The node\n+   * @return True if {@code n} is EXPR_RESULT and {@code n}\u0027s\n+   *     first child is CALL\n+   */\n+  static boolean isExprCall(Node n) {\n+    return n.getType() \u003d\u003d Token.EXPR_RESULT\n+        \u0026\u0026 n.getFirstChild().getType() \u003d\u003d Token.CALL;\n+  }\n+\n+\n+  /**\n+   * Determines whether the given node is a FOR, DO, WHILE, WITH, or IF node.\n+   */\n+  static boolean isLoopStructure(Node n) {\n+    switch (n.getType()) {\n+      case Token.FOR:\n+      case Token.DO:\n+      case Token.WHILE:\n+        return true;\n+      default:\n+        return false;\n+    }\n+  }\n+\n+  /**\n+   * @param n The node to inspect.\n+   * @return If the node, is a FOR, WHILE, or DO, it returns the node for\n+   * the code BLOCK, null otherwise.\n+   */\n+  static Node getLoopCodeBlock(Node n) {\n+    switch (n.getType()) {\n+      case Token.FOR:\n+      case Token.WHILE:\n+        return n.getLastChild();\n+      case Token.DO:\n+        return n.getFirstChild();\n+      default:\n+        return null;\n+    }\n+  }\n+\n+  /**\n+   * Determines whether the given node is a FOR, DO, WHILE, WITH, or IF node.\n+   */\n+  static boolean isControlStructure(Node n) {\n+    switch (n.getType()) {\n+      case Token.FOR:\n+      case Token.DO:\n+      case Token.WHILE:\n+      case Token.WITH:\n+      case Token.IF:\n+      case Token.LABEL:\n+      case Token.TRY:\n+      case Token.CATCH:\n+      case Token.SWITCH:\n+      case Token.CASE:\n+      case Token.DEFAULT:\n+        return true;\n+      default:\n+        return false;\n+    }\n+  }\n+\n+  /**\n+   * Determines whether the given node is code node for FOR, DO,\n+   * WHILE, WITH, or IF node.\n+   */\n+  static boolean isControlStructureCodeBlock(Node parent, Node n) {\n+    switch (parent.getType()) {\n+      case Token.FOR:\n+      case Token.WHILE:\n+      case Token.LABEL:\n+      case Token.WITH:\n+        return parent.getLastChild() \u003d\u003d n;\n+      case Token.DO:\n+        return parent.getFirstChild() \u003d\u003d n;\n+      case Token.IF:\n+        return parent.getFirstChild() !\u003d n;\n+      case Token.TRY:\n+        return parent.getFirstChild() \u003d\u003d n || parent.getLastChild() \u003d\u003d n;\n+      case Token.CATCH:\n+        return parent.getLastChild() \u003d\u003d n;\n+      case Token.SWITCH:\n+      case Token.CASE:\n+        return parent.getFirstChild() !\u003d n;\n+      case Token.DEFAULT:\n+        return true;\n+      default:\n+        Preconditions.checkState(isControlStructure(parent));\n+        return false;\n+    }\n+  }\n+\n+  /**\n+   * Gets the condition of an ON_TRUE / ON_FALSE CFG edge.\n+   * @param n a node with an outgoing conditional CFG edge\n+   * @return the condition node or null if the condition is not obviously a node\n+   */\n+  static Node getConditionExpression(Node n) {\n+    switch (n.getType()) {\n+      case Token.IF:\n+      case Token.WHILE:\n+        return n.getFirstChild();\n+      case Token.DO:\n+        return n.getLastChild();\n+      case Token.FOR:\n+        switch (n.getChildCount()) {\n+          case 3:\n+            return null;\n+          case 4:\n+            return n.getFirstChild().getNext();\n+        }\n+        throw new IllegalArgumentException(\"malformed \u0027for\u0027 statement \" + n);\n+      case Token.CASE:\n+        return null;\n+    }\n+    throw new IllegalArgumentException(n + \" does not have a condition.\");\n+  }\n+\n+  /**\n+   * @return Whether the node is of a type that contain other statements.\n+   */\n+  static boolean isStatementBlock(Node n) {\n+    return n.getType() \u003d\u003d Token.SCRIPT || n.getType() \u003d\u003d Token.BLOCK;\n+  }\n+\n+  /**\n+   * @return Whether the node is used as a statement.\n+   */\n+  static boolean isStatement(Node n) {\n+    Node parent \u003d n.getParent();\n+    // It is not possible to determine definitely if a node is a statement\n+    // or not if it is not part of the AST.  A FUNCTION node, for instance,\n+    // is either part of an expression (as a anonymous function) or as\n+    // a statement.\n+    Preconditions.checkState(parent !\u003d null);\n+    switch (parent.getType()) {\n+      case Token.SCRIPT:\n+      case Token.BLOCK:\n+      case Token.LABEL:\n+        return true;\n+      default:\n+        return false;\n+    }\n+  }\n+\n+  /** Whether the node is part of a switch statement. */\n+  static boolean isSwitchCase(Node n) {\n+    return n.getType() \u003d\u003d Token.CASE || n.getType() \u003d\u003d Token.DEFAULT;\n+  }\n+\n+  /** @return Whether the node is a label name. */\n+  static boolean isLabelName(Node n) {\n+    if (n !\u003d null \u0026\u0026 n.getType() \u003d\u003d Token.NAME) {\n+      Node parent \u003d n.getParent();\n+      switch (parent.getType()) {\n+        case Token.LABEL:\n+        case Token.BREAK:\n+        case Token.CONTINUE:\n+          if (n \u003d\u003d parent.getFirstChild()) {\n+            return true;\n+          }\n+      }\n+    }\n+    return false;\n+  }\n+\n+  /** Whether the child node is the FINALLY block of a try. */\n+  static boolean isTryFinallyNode(Node parent, Node child) {\n+    return parent.getType() \u003d\u003d Token.TRY \u0026\u0026 parent.getChildCount() \u003d\u003d 3\n+        \u0026\u0026 child \u003d\u003d parent.getLastChild();\n+  }\n+\n+  /** Safely remove children while maintaining a valid node structure. */\n+  static void removeChild(Node parent, Node node) {\n+    // Node parent \u003d node.getParent();\n+    if (isStatementBlock(parent)\n+        || isSwitchCase(node)\n+        || isTryFinallyNode(parent, node)) {\n+      // A statement in a block can simply be removed.\n+      parent.removeChild(node);\n+    } else if (parent.getType() \u003d\u003d Token.VAR) {\n+      if (parent.hasMoreThanOneChild()) {\n+        parent.removeChild(node);\n+      } else {\n+        // Remove the node from the parent, so it can be reused.\n+        parent.removeChild(node);\n+        // This would leave an empty VAR, remove the VAR itself.\n+        removeChild(parent.getParent(), parent);\n+      }\n+    } else if (node.getType() \u003d\u003d Token.BLOCK) {\n+      // Simply empty the block.  This maintains source location and\n+      // \"synthetic\"-ness.\n+      node.detachChildren();\n+    } else if (parent.getType() \u003d\u003d Token.LABEL\n+        \u0026\u0026 node \u003d\u003d parent.getLastChild()) {\n+      // Remove the node from the parent, so it can be reused.\n+      parent.removeChild(node);\n+      // A LABEL without children can not be referred to, remove it.\n+      removeChild(parent.getParent(), parent);\n+    } else if (parent.getType() \u003d\u003d Token.FOR\n+        \u0026\u0026 parent.getChildCount() \u003d\u003d 4) {\n+      // Only Token.FOR can have an Token.EMPTY other control structure\n+      // need something for the condition. Others need to be replaced\n+      // or the structure removed.\n+      Preconditions.checkState(parent.getType() \u003d\u003d Token.FOR\n+          \u0026\u0026 parent.getChildCount() \u003d\u003d 4);\n+      parent.replaceChild(node, new Node(Token.EMPTY));\n+    } else {\n+      throw new IllegalStateException(\"Invalid attempt to remove node: \" +\n+          node.toString() + \" of \"+ parent.toString());\n+    }\n+  }\n+\n+  /**\n+   * Merge a block with its parent block.\n+   * @return Whether the block was removed.\n+   */\n+  static boolean tryMergeBlock(Node block) {\n+    Preconditions.checkState(block.getType() \u003d\u003d Token.BLOCK);\n+    Node parent \u003d block.getParent();\n+    // Try to remove the block if its parent is a block/script or if its\n+    // parent is label and it has exactly one child.\n+    if (NodeUtil.isStatementBlock(parent)) {\n+      Node previous \u003d block;\n+      while (block.hasChildren()) {\n+        Node child \u003d block.removeFirstChild();\n+        parent.addChildAfter(child, previous);\n+        previous \u003d child;\n+      }\n+      parent.removeChild(block);\n+      return true;\n+    } else if (parent.getType() \u003d\u003d Token.LABEL \u0026\u0026 block.hasOneChild()) {\n+      parent.replaceChild(block, block.removeFirstChild());\n+      return true;\n+    } else {\n+      return false;\n+    }\n+  }\n+\n+  /**\n+   * Is this a CALL node?\n+   */\n+  static boolean isCall(Node n) {\n+    return n.getType() \u003d\u003d Token.CALL;\n+  }\n+\n+  /**\n+   * Is this a FUNCTION node?\n+   */\n+  static boolean isFunction(Node n) {\n+    return n.getType() \u003d\u003d Token.FUNCTION;\n+  }\n+\n+  /**\n+   * Return a BLOCK node for the given FUNCTION node.\n+   */\n+  static Node getFunctionBody(Node fn) {\n+    Preconditions.checkArgument(isFunction(fn));\n+    return fn.getLastChild();\n+  }\n+\n+  /**\n+   * Is this a THIS node?\n+   */\n+  static boolean isThis(Node node) {\n+    return node.getType() \u003d\u003d Token.THIS;\n+  }\n+\n+  /**\n+   * Is this node or any of its children a CALL?\n+   */\n+  static boolean containsCall(Node n) {\n+    return containsType(n, Token.CALL);\n+  }\n+\n+  /**\n+   * Is this node a function declaration? A function declaration is a function\n+   * that has a name that is added to the current scope (i.e. a function that\n+   * is not anonymous; see {@link #isFunctionAnonymous}).\n+   */\n+  static boolean isFunctionDeclaration(Node n) {\n+    return n.getType() \u003d\u003d Token.FUNCTION \u0026\u0026 !isFunctionAnonymous(n);\n+  }\n+\n+  /**\n+   * Is this node an anonymous function? An anonymous function is one that has\n+   * either no name or a name that is not added to the current scope (see\n+   * {@link #isFunctionAnonymous}).\n+   */\n+  static boolean isAnonymousFunction(Node n) {\n+    return n.getType() \u003d\u003d Token.FUNCTION \u0026\u0026 isFunctionAnonymous(n);\n+  }\n+\n+  /**\n+   * Is a FUNCTION node an anonymous function? An anonymous function is one that\n+   * has either no name or a name that is not added to the current scope.\n+   *\n+   * \u003cp\u003eSome examples of anonymous functions:\n+   * \u003cpre\u003e\n+   * function () {}\n+   * (function f() {})()\n+   * [ function f() {} ]\n+   * var f \u003d function f() {};\n+   * for (function f() {};;) {}\n+   * \u003c/pre\u003e\n+   *\n+   * \u003cp\u003eSome examples of functions that are \u003cem\u003enot\u003c/em\u003e anonymous:\n+   * \u003cpre\u003e\n+   * function f() {}\n+   * if (x); else function f() {}\n+   * for (;;) { function f() {} }\n+   * \u003c/pre\u003e\n+   *\n+   * @param n A FUNCTION node\n+   * @return Whether n is an anonymous function\n+   */\n+  static boolean isFunctionAnonymous(Node n) {\n+    return !isStatement(n);\n+  }\n+\n+  /**\n+   * Determines if a function takes a variable number of arguments by\n+   * looking for references to the \"arguments\" var_args object.\n+   */\n+  static boolean isVarArgsFunction(Node function) {\n+    Preconditions.checkArgument(isFunction(function));\n+    return NodeUtil.isNameReferenced(\n+        function.getLastChild(),\n+        \"arguments\",\n+        Predicates.\u003cNode\u003enot(new NodeUtil.MatchNodeType(Token.FUNCTION)));\n+  }\n+\n+  /**\n+   * @return Whether node is a call to methodName.\n+   *    a.f(...)\n+   *    a[\u0027f\u0027](...)\n+   */\n+  static boolean isObjectCallMethod(Node callNode, String methodName) {\n+    if (callNode.getType() \u003d\u003d Token.CALL) {\n+      Node functionIndentifyingExpression \u003d callNode.getFirstChild();\n+      if (NodeUtil.isGet(functionIndentifyingExpression)) {\n+        Node last \u003d functionIndentifyingExpression.getLastChild();\n+        if (last !\u003d null \u0026\u0026 last.getType() \u003d\u003d Token.STRING) {\n+          String propName \u003d last.getString();\n+          return (propName.equals(methodName));\n+        }\n+      }\n+    }\n+    return false;\n+  }\n+\n+\n+  /**\n+   * @return Whether the callNode represents an expression in the form of:\n+   *    x.call(...)\n+   *    x[\u0027call\u0027](...)\n+   */\n+  static boolean isFunctionObjectCall(Node callNode) {\n+    return isObjectCallMethod(callNode, \"call\");\n+  }\n+\n+  /**\n+   * @return Whether the callNode represents an expression in the form of:\n+   *    x.apply(...)\n+   *    x[\u0027apply\u0027](...)\n+   */\n+  static boolean isFunctionObjectApply(Node callNode) {\n+    return isObjectCallMethod(callNode, \"apply\");\n+  }\n+\n+  /**\n+   * @return Whether the callNode represents an expression in the form of:\n+   *    x.call(...)\n+   *    x[\u0027call\u0027](...)\n+   * where x is a NAME node.\n+   */\n+  static boolean isSimpleFunctionObjectCall(Node callNode) {\n+    if (isFunctionObjectCall(callNode)) {\n+      if (callNode.getFirstChild().getFirstChild().getType() \u003d\u003d Token.NAME) {\n+        return true;\n+      }\n+    }\n+\n+    return false;\n+  }\n+\n+  /**\n+   * Determines whether this node is strictly on the left hand side of an assign\n+   * or var initialization. Notably, this does not include all L-values, only\n+   * statements where the node is used only as an L-value.\n+   *\n+   * @param n The node\n+   * @param parent Parent of the node\n+   * @return True if n is the left hand of an assign\n+   */\n+  static boolean isLhs(Node n, Node parent) {\n+    return (parent.getType() \u003d\u003d Token.ASSIGN \u0026\u0026 parent.getFirstChild() \u003d\u003d n) ||\n+           parent.getType() \u003d\u003d Token.VAR;\n+  }\n+\n+  /**\n+   * Determines whether a node represents an object literal key\n+   * (e.g. key1 in {key1: value1, key2: value2}).\n+   *\n+   * @param node A node\n+   * @param parent The node\u0027s parent\n+   */\n+  static boolean isObjectLitKey(Node node, Node parent) {\n+    if (node.getType() \u003d\u003d Token.STRING \u0026\u0026 parent.getType() \u003d\u003d Token.OBJECTLIT) {\n+      int index \u003d 0;\n+      for (Node current \u003d parent.getFirstChild();\n+           current !\u003d null;\n+           current \u003d current.getNext()) {\n+        if (current \u003d\u003d node) {\n+          return index % 2 \u003d\u003d 0;\n+        }\n+        index++;\n+      }\n+    }\n+    return false;\n+  }\n+\n+  /**\n+   * Converts an operator\u0027s token value (see {@link Token}) to a string\n+   * representation.\n+   *\n+   * @param operator the operator\u0027s token value to convert\n+   * @return the string representation or {@code null} if the token value is\n+   * not an operator\n+   */\n+  static String opToStr(int operator) {\n+    switch (operator) {\n+      case Token.BITOR: return \"|\";\n+      case Token.OR: return \"||\";\n+      case Token.BITXOR: return \"^\";\n+      case Token.AND: return \"\u0026\u0026\";\n+      case Token.BITAND: return \"\u0026\";\n+      case Token.SHEQ: return \"\u003d\u003d\u003d\";\n+      case Token.EQ: return \"\u003d\u003d\";\n+      case Token.NOT: return \"!\";\n+      case Token.NE: return \"!\u003d\";\n+      case Token.SHNE: return \"!\u003d\u003d\";\n+      case Token.LSH: return \"\u003c\u003c\";\n+      case Token.IN: return \"in\";\n+      case Token.LE: return \"\u003c\u003d\";\n+      case Token.LT: return \"\u003c\";\n+      case Token.URSH: return \"\u003e\u003e\u003e\";\n+      case Token.RSH: return \"\u003e\u003e\";\n+      case Token.GE: return \"\u003e\u003d\";\n+      case Token.GT: return \"\u003e\";\n+      case Token.MUL: return \"*\";\n+      case Token.DIV: return \"/\";\n+      case Token.MOD: return \"%\";\n+      case Token.BITNOT: return \"~\";\n+      case Token.ADD: return \"+\";\n+      case Token.SUB: return \"-\";\n+      case Token.POS: return \"+\";\n+      case Token.NEG: return \"-\";\n+      case Token.ASSIGN: return \"\u003d\";\n+      case Token.ASSIGN_BITOR: return \"|\u003d\";\n+      case Token.ASSIGN_BITXOR: return \"^\u003d\";\n+      case Token.ASSIGN_BITAND: return \"\u0026\u003d\";\n+      case Token.ASSIGN_LSH: return \"\u003c\u003c\u003d\";\n+      case Token.ASSIGN_RSH: return \"\u003e\u003e\u003d\";\n+      case Token.ASSIGN_URSH: return \"\u003e\u003e\u003e\u003d\";\n+      case Token.ASSIGN_ADD: return \"+\u003d\";\n+      case Token.ASSIGN_SUB: return \"-\u003d\";\n+      case Token.ASSIGN_MUL: return \"*\u003d\";\n+      case Token.ASSIGN_DIV: return \"/\u003d\";\n+      case Token.ASSIGN_MOD: return \"%\u003d\";\n+      case Token.VOID: return \"void\";\n+      case Token.TYPEOF: return \"typeof\";\n+      case Token.INSTANCEOF: return \"instanceof\";\n+      default: return null;\n+    }\n+  }\n+\n+  /**\n+   * Converts an operator\u0027s token value (see {@link Token}) to a string\n+   * representation or fails.\n+   *\n+   * @param operator the operator\u0027s token value to convert\n+   * @return the string representation\n+   * @throws Error if the token value is not an operator\n+   */\n+  static String opToStrNoFail(int operator) {\n+    String res \u003d opToStr(operator);\n+    if (res \u003d\u003d null) {\n+      throw new Error(\"Unknown op \" + operator + \": \" +\n+                      Token.name(operator));\n+    }\n+    return res;\n+  }\n+\n+  /**\n+   * @return true if n or any of its children are of the specified type\n+   */\n+  static boolean containsType(Node node,\n+                              int type,\n+                              Predicate\u003cNode\u003e traverseChildrenPred) {\n+    return has(node, new MatchNodeType(type), traverseChildrenPred);\n+  }\n+\n+  /**\n+   * @return true if n or any of its children are of the specified type\n+   */\n+  static boolean containsType(Node node, int type) {\n+    return containsType(node, type, Predicates.\u003cNode\u003ealwaysTrue());\n+  }\n+\n+\n+  /**\n+   * Given a node tree, finds all the VAR declarations in that tree that are\n+   * not in an inner scope. Then adds a new VAR node at the top of the current\n+   * scope that redeclares them, if necessary.\n+   */\n+  static void redeclareVarsInsideBranch(Node branch) {\n+    Collection\u003cNode\u003e vars \u003d getVarsDeclaredInBranch(branch);\n+    if (vars.isEmpty()) {\n+      return;\n+    }\n+\n+    Node parent \u003d getAddingRoot(branch);\n+    for (Node nameNode : vars) {\n+      Node var \u003d new Node(\n+          Token.VAR, Node.newString(Token.NAME, nameNode.getString()));\n+      copyNameAnnotations(nameNode, var.getFirstChild());\n+      parent.addChildToFront(var);\n+    }\n+  }\n+\n+  /**\n+   * Copy any annotations that follow a named value.\n+   * @param source\n+   * @param destination\n+   */\n+  static void copyNameAnnotations(Node source, Node destination) {\n+    if (source.getBooleanProp(Node.IS_CONSTANT_NAME)) {\n+      destination.putBooleanProp(Node.IS_CONSTANT_NAME, true);\n+    }\n+  }\n+\n+  /**\n+   * Gets a Node at the top of the current scope where we can add new var\n+   * declarations as children.\n+   */\n+  private static Node getAddingRoot(Node n) {\n+    Node addingRoot \u003d null;\n+    Node ancestor \u003d n;\n+    while (null !\u003d (ancestor \u003d ancestor.getParent())) {\n+      int type \u003d ancestor.getType();\n+      if (type \u003d\u003d Token.SCRIPT) {\n+        addingRoot \u003d ancestor;\n+        break;\n+      } else if (type \u003d\u003d Token.FUNCTION) {\n+        addingRoot \u003d ancestor.getLastChild();\n+        break;\n+      }\n+    }\n+\n+    // make sure that the adding root looks ok\n+    Preconditions.checkState(addingRoot.getType() \u003d\u003d Token.BLOCK ||\n+        addingRoot.getType() \u003d\u003d Token.SCRIPT);\n+    Preconditions.checkState(addingRoot.getFirstChild() \u003d\u003d null ||\n+        addingRoot.getFirstChild().getType() !\u003d Token.SCRIPT);\n+    return addingRoot;\n+  }\n+\n+  /** Creates function name(params_0, ..., params_n) { body }. */\n+  public static FunctionNode newFunctionNode(String name, List\u003cNode\u003e params,\n+      Node body, int lineno, int charno) {\n+    Node parameterParen \u003d new Node(Token.LP, lineno, charno);\n+    for (Node param : params) {\n+      parameterParen.addChildToBack(param);\n+    }\n+    FunctionNode function \u003d new FunctionNode(name, lineno, charno);\n+    function.addChildrenToBack(\n+        Node.newString(Token.NAME, name, lineno, charno));\n+    function.addChildToBack(parameterParen);\n+    function.addChildToBack(body);\n+    return function;\n+  }\n+\n+  /**\n+   * Creates a node representing a qualified name.\n+   *\n+   * @param name A qualified name (e.g. \"foo\" or \"foo.bar.baz\")\n+   * @param lineno The source line offset.\n+   * @param charno The source character offset from start of the line.\n+   * @return A NAME or GETPROP node\n+   */\n+  public static Node newQualifiedNameNode(String name, int lineno, int charno) {\n+    int endPos \u003d name.indexOf(\u0027.\u0027);\n+    if (endPos \u003d\u003d -1) {\n+      return Node.newString(Token.NAME, name, lineno, charno);\n+    }\n+    Node node \u003d Node.newString(Token.NAME, name.substring(0, endPos),\n+                               lineno, charno);\n+    int startPos;\n+    do {\n+      startPos \u003d endPos + 1;\n+      endPos \u003d name.indexOf(\u0027.\u0027, startPos);\n+      String part \u003d (endPos \u003d\u003d -1\n+                     ? name.substring(startPos)\n+                     : name.substring(startPos, endPos));\n+      node \u003d new Node(Token.GETPROP, node,\n+                      Node.newString(Token.STRING, part, lineno, charno),\n+                      lineno, charno);\n+    } while (endPos !\u003d -1);\n+\n+    return node;\n+  }\n+\n+  /**\n+   * Creates a node representing a qualified name, copying over the source\n+   * location information from the basis node and assigning the given original\n+   * name to the node.\n+   *\n+   * @param name A qualified name (e.g. \"foo\" or \"foo.bar.baz\")\n+   * @param basisNode The node that represents the name as currently found in\n+   *     the AST.\n+   * @param originalName The original name of the item being represented by the\n+   *     NAME node. Used for debugging information.\n+   *\n+   * @return A NAME or GETPROP node\n+   */\n+  static Node newQualifiedNameNode(String name, Node basisNode,\n+      String originalName) {\n+    Node node \u003d newQualifiedNameNode(name, -1, -1);\n+    setDebugInformation(node, basisNode, originalName);\n+    return node;\n+  }\n+\n+  /**\n+   * Sets the debug information (source file info and orignal name)\n+   * on the given node.\n+   *\n+   * @param node The node on which to set the debug information.\n+   * @param basisNode The basis node from which to copy the source file info.\n+   * @param originalName The original name of the node.\n+   */\n+  static void setDebugInformation(Node node, Node basisNode,\n+                                  String originalName) {\n+    node.copyInformationFrom(basisNode);\n+    node.putProp(Node.ORIGINALNAME_PROP, originalName);\n+  }\n+\n+  /**\n+   * Creates a new node representing an *existing* name, copying over the source\n+   * location information from the basis node.\n+   *\n+   * @param name The name for the new NAME node.\n+   * @param basisNode The node that represents the name as currently found in\n+   *     the AST.\n+   *\n+   * @return The node created.\n+   */\n+  static Node newName(String name, Node basisNode) {\n+    Node nameNode \u003d Node.newString(Token.NAME, name);\n+    nameNode.copyInformationFrom(basisNode);\n+    return nameNode;\n+  }\n+\n+  /**\n+   * Creates a new node representing an *existing* name, copying over the source\n+   * location information from the basis node and assigning the given original\n+   * name to the node.\n+   *\n+   * @param name The name for the new NAME node.\n+   * @param basisNode The node that represents the name as currently found in\n+   *     the AST.\n+   * @param originalName The original name of the item being represented by the\n+   *     NAME node. Used for debugging information.\n+   *\n+   * @return The node created.\n+   */\n+  static Node newName(String name, Node basisNode, String originalName) {\n+    Node nameNode \u003d newName(name, basisNode);\n+    nameNode.putProp(Node.ORIGINALNAME_PROP, originalName);\n+    return nameNode;\n+  }\n+\n+  /** Test if all characters in the string are in the Basic Latin (aka ASCII)\n+   * character set - that they have UTF-16 values equal to or below 0x7f.\n+   * This check can find which identifiers with Unicode characters need to be\n+   * escaped in order to allow resulting files to be processed by non-Unicode\n+   * aware UNIX tools and editors.\n+   * *\n+   * See http://en.wikipedia.org/wiki/Latin_characters_in_Unicode\n+   * for more on Basic Latin.\n+   *\n+   * @param s The string to be checked for ASCII-goodness.\n+   *\n+   * @return True if all characters in the string are in Basic Latin set.\n+   */\n+\n+  static boolean isLatin(String s) {\n+    char LARGEST_BASIC_LATIN \u003d 0x7f;\n+    int len \u003d s.length();\n+    for (int index \u003d 0; index \u003c len; index++) {\n+      char c \u003d s.charAt(index);\n+      if (c \u003e LARGEST_BASIC_LATIN) {\n+        return false;\n+      }\n+    }\n+    return true;\n+  }\n+\n+  /**\n+   * Determines whether the given name can appear on the right side of\n+   * the dot operator. Many properties (like reserved words) cannot.\n+   */\n+  static boolean isValidPropertyName(String name) {\n+    return TokenStream.isJSIdentifier(name) \u0026\u0026\n+        !TokenStream.isKeyword(name) \u0026\u0026\n+        // no Unicode escaped characters - some browsers are less tolerant\n+        // of Unicode characters that might be valid according to the\n+        // language spec.\n+        // Note that by this point, unicode escapes have been converted\n+        // to UTF-16 characters, so we\u0027re only searching for character\n+        // values, not escapes.\n+        NodeUtil.isLatin(name);\n+  }\n+\n+  private static class VarCollector implements Visitor {\n+    final Map\u003cString, Node\u003e vars \u003d Maps.newLinkedHashMap();\n+\n+    public void visit(Node n) {\n+      if (n.getType() \u003d\u003d Token.NAME) {\n+        Node parent \u003d n.getParent();\n+        if (parent !\u003d null \u0026\u0026 parent.getType() \u003d\u003d Token.VAR) {\n+          String name \u003d n.getString();\n+          if (!vars.containsKey(name)) {\n+            vars.put(name, n);\n+          }\n+        }\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Retrieves vars declared in the current node tree, excluding descent scopes.\n+   */\n+  public static Collection\u003cNode\u003e getVarsDeclaredInBranch(Node root) {\n+    VarCollector collector \u003d new VarCollector();\n+    visitPreOrder(\n+        root,\n+        collector,\n+        Predicates.\u003cNode\u003enot(new NodeUtil.MatchNodeType(Token.FUNCTION)));\n+    return collector.vars.values();\n+  }\n+\n+  /**\n+   * @return {@code true} if the node an assignment to a prototype property of\n+   *     some constructor.\n+   */\n+  static boolean isPrototypePropertyDeclaration(Node n) {\n+    if (!NodeUtil.isExprAssign(n)) {\n+      return false;\n+    }\n+    return isPrototypeProperty(n.getFirstChild().getFirstChild());\n+  }\n+\n+  static boolean isPrototypeProperty(Node n) {\n+    String lhsString \u003d n.getQualifiedName();\n+    if (lhsString \u003d\u003d null) {\n+      return false;\n+    }\n+    int prototypeIdx \u003d lhsString.indexOf(\".prototype.\");\n+    return prototypeIdx !\u003d -1;\n+  }\n+\n+  /**\n+   * @return The class name part of a qualified prototype name.\n+   */\n+  static Node getPrototypeClassName(Node qName) {\n+    Node cur \u003d qName;\n+    while (isGetProp(cur)) {\n+      if (cur.getLastChild().getString().equals(\"prototype\")) {\n+        return cur.getFirstChild();\n+      } else {\n+        cur \u003d cur.getFirstChild();\n+      }\n+    }\n+    return null;\n+  }\n+\n+  /**\n+   * @return The string property name part of a qualified prototype name.\n+   */\n+  static String getPrototypePropertyName(Node qName) {\n+    String qNameStr \u003d qName.getQualifiedName();\n+    int prototypeIdx \u003d qNameStr.lastIndexOf(\".prototype.\");\n+    int memberIndex \u003d prototypeIdx + \".prototype\".length() + 1;\n+    return qNameStr.substring(memberIndex);\n+  }\n+\n+  /**\n+   * Create a node for an empty result expression:\n+   *   \"void 0\"\n+   */\n+  static Node newUndefinedNode() {\n+    // TODO(johnlenz): Why this instead of the more common \"undefined\"?\n+    return new Node(Token.VOID, Node.newNumber(0));\n+  }\n+\n+  /**\n+   * Create a VAR node containing the given name and initial value expression.\n+   */\n+  static Node newVarNode(String name, Node value) {\n+    Node nodeName \u003d Node.newString(Token.NAME, name);\n+    if (value !\u003d null) {\n+      nodeName.addChildrenToBack(value);\n+    }\n+    Node var \u003d new Node(Token.VAR, nodeName);\n+\n+    return var;\n+  }\n+\n+  /**\n+   * A predicate for matching name nodes with the specified node.\n+   */\n+  private static class MatchNameNode implements Predicate\u003cNode\u003e{\n+    final String name;\n+\n+    MatchNameNode(String name){\n+      this.name \u003d name;\n+    }\n+\n+    public boolean apply(Node n) {\n+      return n.getType() \u003d\u003d Token.NAME\n+          \u0026\u0026 n.getString().equals(name);\n+    }\n+  }\n+\n+  /**\n+   * A predicate for matching nodes with the specified type.\n+   */\n+  static class MatchNodeType implements Predicate\u003cNode\u003e{\n+    final int type;\n+\n+    MatchNodeType(int type){\n+      this.type \u003d type;\n+    }\n+\n+    public boolean apply(Node n) {\n+      return n.getType() \u003d\u003d type;\n+    }\n+  }\n+\n+  /**\n+   * Whether a Node type is within the node tree.\n+   */\n+  static boolean isNodeTypeReferenced(Node node, int type) {\n+    return isNodeTypeReferenced(node, type, Predicates.\u003cNode\u003ealwaysTrue());\n+  }\n+\n+  /**\n+   * Whether a Node type is within the node tree.\n+   */\n+  static boolean isNodeTypeReferenced(\n+      Node node, int type, Predicate\u003cNode\u003e traverseChildrenPred) {\n+    return has(node, new MatchNodeType(type), traverseChildrenPred);\n+  }\n+\n+  /**\n+   * Finds the number of times a type is referenced within the node tree.\n+   */\n+  static int getNodeTypeReferenceCount(Node node, int type) {\n+    return getCount(node, new MatchNodeType(type));\n+  }\n+\n+  /**\n+   * Whether a simple name is referenced within the node tree.\n+   */\n+  static boolean isNameReferenced(Node node,\n+                                  String name,\n+                                  Predicate\u003cNode\u003e traverseChildrenPred) {\n+    return has(node, new MatchNameNode(name), traverseChildrenPred);\n+  }\n+\n+  /**\n+   * Whether a simple name is referenced within the node tree.\n+   */\n+  static boolean isNameReferenced(Node node, String name) {\n+    return isNameReferenced(node, name, Predicates.\u003cNode\u003ealwaysTrue());\n+  }\n+\n+  /**\n+   * Finds the number of times a simple name is referenced within the node tree.\n+   */\n+  static int getNameReferenceCount(Node node, String name) {\n+    return getCount(node, new MatchNameNode(name) );\n+  }\n+\n+  /**\n+   * @return Whether the predicate is true for the node or any of its children.\n+   */\n+  static boolean has(Node node,\n+                     Predicate\u003cNode\u003e pred,\n+                     Predicate\u003cNode\u003e traverseChildrenPred) {\n+    if (pred.apply(node)) {\n+      return true;\n+    }\n+\n+    if (!traverseChildrenPred.apply(node)) {\n+      return false;\n+    }\n+\n+    for (Node c \u003d node.getFirstChild(); c !\u003d null; c \u003d c.getNext()) {\n+      if (has(c, pred, traverseChildrenPred)) {\n+        return true;\n+      }\n+    }\n+\n+    return false;\n+  }\n+\n+  /**\n+   * @return The number of times the the predicate is true for the node\n+   * or any of its children.\n+   */\n+  static int getCount(Node n, Predicate\u003cNode\u003e pred) {\n+    int total \u003d 0;\n+\n+    if (pred.apply(n)) {\n+      total++;\n+    }\n+\n+    for (Node c \u003d n.getFirstChild(); c !\u003d null; c \u003d c.getNext()) {\n+      total +\u003d getCount(c, pred);\n+    }\n+\n+    return total;\n+  }\n+\n+  /**\n+   * Interface for use with the visit method.\n+   * @see #visit\n+   */\n+  static interface Visitor {\n+    void visit(Node node);\n+  }\n+\n+  /**\n+   * A pre-order traversal, calling Vistor.visit for each child matching\n+   * the predicate.\n+   */\n+  static void visitPreOrder(Node node,\n+                     Visitor vistor,\n+                     Predicate\u003cNode\u003e traverseChildrenPred) {\n+    vistor.visit(node);\n+\n+    if (traverseChildrenPred.apply(node)) {\n+      for (Node c \u003d node.getFirstChild(); c !\u003d null; c \u003d c.getNext()) {\n+        visitPreOrder(c, vistor, traverseChildrenPred);\n+      }\n+    }\n+  }\n+\n+  /**\n+   * A post-order traversal, calling Vistor.visit for each child matching\n+   * the predicate.\n+   */\n+  static void visitPostOrder(Node node,\n+                     Visitor vistor,\n+                     Predicate\u003cNode\u003e traverseChildrenPred) {\n+    if (traverseChildrenPred.apply(node)) {\n+      for (Node c \u003d node.getFirstChild(); c !\u003d null; c \u003d c.getNext()) {\n+        visitPostOrder(c, vistor, traverseChildrenPred);\n+      }\n+    }\n+\n+    vistor.visit(node);\n+  }\n+\n+  /**\n+   * @return Whether a TRY node has a finally block.\n+   */\n+  static boolean hasFinally(Node n) {\n+    Preconditions.checkArgument(n.getType() \u003d\u003d Token.TRY);\n+    return n.getChildCount() \u003d\u003d 3;\n+  }\n+\n+  /**\n+   * @return The BLOCK node containing the CATCH node (if any)\n+   * of a TRY.\n+   */\n+  static Node getCatchBlock(Node n) {\n+    Preconditions.checkArgument(n.getType() \u003d\u003d Token.TRY);\n+    return n.getFirstChild().getNext();\n+  }\n+\n+  /**\n+   * @return Whether BLOCK (from a TRY node) contains a CATCH.\n+   * @see NodeUtil#getCatchBlock\n+   */\n+  static boolean hasCatchHandler(Node n) {\n+    Preconditions.checkArgument(n.getType() \u003d\u003d Token.BLOCK);\n+    return n.hasChildren() \u0026\u0026 n.getFirstChild().getType() \u003d\u003d Token.CATCH;\n+  }\n+\n+  /**\n+    * @param fnNode The function.\n+    * @return The Node containing the Function parameters.\n+    */\n+  static Node getFnParameters(Node fnNode) {\n+   // Function NODE: [ FUNCTION -\u003e NAME, LP -\u003e ARG1, ARG2, ... ]\n+   Preconditions.checkArgument(fnNode.getType() \u003d\u003d Token.FUNCTION);\n+   return fnNode.getFirstChild().getNext();\n+  }\n+\n+  /**\n+   * Returns true if a name node represents a constant variable.\n+   *\n+   * \u003cp\u003eDetermining whether a variable is constant has three steps:\n+   * \u003col\u003e\n+   * \u003cli\u003eIn CodingConventionAnnotator, any name that matches the\n+   *     {@link CodingConvention#isConstant(String)} is annotated with an\n+   *     IS_CONSTANT_NAME property.\n+   * \u003cli\u003eThe normalize pass renames any variable with the IS_CONSTANT_NAME\n+   *     annotation and that is initialized to a constant value with\n+   *     a variable name inlucding $$constant.\n+   * \u003cli\u003eReturn true here if the variable includes $$constant in its name.\n+   * \u003c/ol\u003e\n+   *\n+   * @param node A NAME or STRING node\n+   * @return True if the variable is constant\n+   */\n+  static boolean isConstantName(Node node) {\n+    return node.getString().contains(CONSTANT_MARKER);\n+  }\n+\n+  /**\n+   * @param nameNode A name node\n+   * @return The JSDocInfo for the name node\n+   */\n+  static JSDocInfo getInfoForNameNode(Node nameNode) {\n+    JSDocInfo info \u003d null;\n+    Node parent \u003d null;\n+    if (nameNode !\u003d null) {\n+      info \u003d nameNode.getJSDocInfo();\n+      parent \u003d nameNode.getParent();\n+    }\n+\n+    if (info \u003d\u003d null \u0026\u0026 parent !\u003d null \u0026\u0026\n+        ((parent.getType() \u003d\u003d Token.VAR \u0026\u0026 parent.hasOneChild()) ||\n+          parent.getType() \u003d\u003d Token.FUNCTION)) {\n+      info \u003d parent.getJSDocInfo();\n+    }\n+    return info;\n+  }\n+\n+  /**\n+   * @param n The node.\n+   * @return The source name property on the node or its ancestors.\n+   */\n+  static String getSourceName(Node n) {\n+    String sourceName \u003d null;\n+    while (sourceName \u003d\u003d null \u0026\u0026 n !\u003d null) {\n+      sourceName \u003d (String) n.getProp(Node.SOURCENAME_PROP);\n+      n \u003d n.getParent();\n+    }\n+    return sourceName;\n+  }\n+}\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [20101,20864]"
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/jscomp/OptimizeArgumentsArray.java",
        "src/com/google/javascript/jscomp/OptimizeArgumentsArray.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [
            "com.google.javascript.jscomp.OptimizeArgumentsArray:process:[Node externs, Node root]:void",
            "com.google.javascript.jscomp.OptimizeArgumentsArray:getNewName:[]:String",
            "com.google.javascript.jscomp.OptimizeArgumentsArray:shouldTraverse:[NodeTraversal nodeTraversal, Node node, Node parent]:boolean",
            "com.google.javascript.jscomp.OptimizeArgumentsArray:OptimizeArgumentsArray:[AbstractCompiler compiler, String paramPrefix]:null",
            "com.google.javascript.jscomp.OptimizeArgumentsArray:exitScope:[NodeTraversal traversal]:void",
            "com.google.javascript.jscomp.OptimizeArgumentsArray:tryReplaceArguments:[Scope scope]:boolean",
            "com.google.javascript.jscomp.OptimizeArgumentsArray:OptimizeArgumentsArray:[AbstractCompiler compiler]:null",
            "com.google.javascript.jscomp.OptimizeArgumentsArray:visit:[NodeTraversal traversal, Node node, Node parent]:void",
            "com.google.javascript.jscomp.OptimizeArgumentsArray:enterScope:[NodeTraversal traversal]:void"
          ],
          "num": 9
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "-1"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "35",
            "36",
            "37",
            "38",
            "39",
            "40",
            "41",
            "42",
            "43",
            "44",
            "45",
            "46",
            "47",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57",
            "58",
            "59",
            "60",
            "61",
            "62",
            "63",
            "64",
            "65",
            "66",
            "67",
            "68",
            "69",
            "70",
            "71",
            "72",
            "73",
            "74",
            "75",
            "76",
            "77",
            "78",
            "79",
            "80",
            "81",
            "82",
            "83",
            "84",
            "85",
            "86",
            "87",
            "88",
            "89",
            "90",
            "91",
            "92",
            "93",
            "94",
            "95",
            "96",
            "97",
            "98",
            "99",
            "100",
            "101",
            "102",
            "103",
            "104",
            "105",
            "106",
            "107",
            "108",
            "109",
            "110",
            "111",
            "112",
            "113",
            "114",
            "115",
            "116",
            "117",
            "118",
            "119",
            "120",
            "121",
            "122",
            "123",
            "124",
            "125",
            "126",
            "127",
            "128",
            "129",
            "130",
            "131",
            "132",
            "133",
            "134",
            "135",
            "136",
            "137",
            "138",
            "139",
            "140",
            "141",
            "142",
            "143",
            "144",
            "145",
            "146",
            "147",
            "148",
            "149",
            "150",
            "151",
            "152",
            "153",
            "154",
            "155",
            "156",
            "157",
            "158",
            "159",
            "160",
            "161",
            "162",
            "163",
            "164",
            "165",
            "166",
            "167",
            "168",
            "169",
            "170",
            "171",
            "172",
            "173",
            "174",
            "175",
            "176",
            "177",
            "178",
            "179",
            "180",
            "181",
            "182",
            "183",
            "184",
            "185",
            "186",
            "187",
            "188",
            "189",
            "190",
            "191",
            "192",
            "193",
            "194",
            "195",
            "196",
            "197",
            "198",
            "199",
            "200",
            "201",
            "202",
            "203",
            "204",
            "205",
            "206",
            "207",
            "208",
            "209",
            "210",
            "211",
            "212",
            "213",
            "214",
            "215",
            "216",
            "217",
            "218",
            "219",
            "220",
            "221",
            "222",
            "223",
            "224",
            "225",
            "226",
            "227",
            "228",
            "229",
            "230",
            "231",
            "232",
            "233",
            "234",
            "235",
            "236",
            "237",
            "238",
            "239",
            "240",
            "241",
            "242",
            "243",
            "244",
            "245",
            "246",
            "247",
            "248",
            "249",
            "250",
            "251",
            "252",
            "253",
            "254",
            "255",
            "256",
            "257",
            "258",
            "259",
            "260",
            "261",
            "262",
            "263",
            "264",
            "265",
            "266",
            "267",
            "268",
            "269",
            "270",
            "271",
            "272",
            "273",
            "274",
            "275",
            "276",
            "277",
            "278",
            "279",
            "280",
            "281",
            "282",
            "283",
            "284",
            "285",
            "286",
            "287"
          ],
          "num": 287
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/jscomp/OptimizeArgumentsArray.java b/src/com/google/javascript/jscomp/OptimizeArgumentsArray.java\nnew file mode 100644\nindex 0000000..aba0ae7\n--- /dev/null\n+++ b/src/com/google/javascript/jscomp/OptimizeArgumentsArray.java\n@@ -0,0 +1,287 @@\n+/*\n+ * Copyright 2009 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.javascript.jscomp;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.Lists;\n+import com.google.javascript.jscomp.NodeTraversal.ScopedCallback;\n+import com.google.javascript.rhino.Node;\n+import com.google.javascript.rhino.Token;\n+\n+import java.util.Deque;\n+import java.util.List;\n+\n+/**\n+ * Optimization for functions that have {@code var_args} or access the\n+ * arguments array.\n+ *\n+ * \u003cp\u003eExample:\n+ * \u003cpre\u003e\n+ * function() { alert(arguments[0] + argument[1]) }\n+ * \u003c/pre\u003e\n+ * to:\n+ * \u003cpre\u003e\n+ * function(a, b) { alert(a, b) }\n+ * \u003c/pre\u003e\n+ *\n+ * Each newly inserted variable name will be unique very much like the output\n+ * of the AST found after the {@link Normalize} pass.\n+ *\n+*\n+ */\n+class OptimizeArgumentsArray implements CompilerPass, ScopedCallback {\n+\n+  // The arguments object as described by ECMA script version 3\n+  // section 10.1.8\n+  private static final String ARGUMENTS \u003d \"arguments\";\n+\n+  // To ensure that the newly introduced parameter names are unique. We will\n+  // use this string as prefix unless the caller specify a different prefix.\n+  private static final String PARAMETER_PREFIX \u003d\n+      \"JSCompiler_OptimizeArgumentsArray_p\";\n+\n+  // The prefix for the newly introduced parameter name.\n+  private final String paramPredix;\n+\n+  // To make each parameter name unique in the function. We append an\n+  // unique integer at the end.\n+  private int uniqueId \u003d 0;\n+\n+  // Reference to the compiler object to notify any changes to source code AST.\n+  private final AbstractCompiler compiler;\n+\n+  // A stack of arguments access list to the corresponding outer functions.\n+  private final Deque\u003cList\u003cNode\u003e\u003e argumentsAccessStack \u003d Lists.newLinkedList();\n+\n+  // This stores a list of argument access in the current scope.\n+  private List\u003cNode\u003e currentArgumentsAccess \u003d null;\n+\n+  /**\n+   * Construct this pass and use {@link #PARAMETER_PREFIX} as the prefix for\n+   * all parameter names that it introduces.\n+   */\n+  OptimizeArgumentsArray(AbstractCompiler compiler) {\n+    this(compiler, PARAMETER_PREFIX);\n+  }\n+\n+  /**\n+   * @param paramPrefix the prefix to use for all parameter names that this\n+   *     pass introduces\n+   */\n+  OptimizeArgumentsArray(AbstractCompiler compiler, String paramPrefix) {\n+    this.compiler \u003d Preconditions.checkNotNull(compiler);\n+    this.paramPredix \u003d Preconditions.checkNotNull(paramPrefix);\n+  }\n+\n+  @Override\n+  public void process(Node externs, Node root) {\n+    NodeTraversal.traverse(compiler, Preconditions.checkNotNull(root), this);\n+  }\n+\n+  @Override\n+  public void enterScope(NodeTraversal traversal) {\n+    Preconditions.checkNotNull(traversal);\n+\n+    // This optimization is valid only within a function so we are going to\n+    // skip over the initial entry to the global scope.\n+    Node function \u003d traversal.getScopeRoot();\n+    if (!NodeUtil.isFunction(function)) {\n+      return;\n+    }\n+\n+    // Introduces a new access list and stores the access list of the outer\n+    // scope in the stack if necessary.\n+    if (currentArgumentsAccess !\u003d null) {\n+      argumentsAccessStack.push(currentArgumentsAccess);\n+    }\n+    currentArgumentsAccess \u003d Lists.newLinkedList();\n+  }\n+\n+  @Override\n+  public void exitScope(NodeTraversal traversal) {\n+    Preconditions.checkNotNull(traversal);\n+\n+    // This is the case when we are exiting the global scope where we had never\n+    // collected argument access list. Since we do not perform this optimization\n+    // for the global scope, we will skip this exit point.\n+    if (currentArgumentsAccess \u003d\u003d null) {\n+      return;\n+    }\n+\n+    // Attempt to replace the argument access and if the AST has been change,\n+    // report back to the compiler.\n+    if (tryReplaceArguments(traversal.getScope())) {\n+      traversal.getCompiler().reportCodeChange();\n+    }\n+\n+    // After the attempt to replace the arguments. The currentArgumentsAccess\n+    // is stale and as we exit the Scope, no longer holds all the access to the\n+    // current scope anymore. We\u0027ll pop the access list from the outer scope\n+    // and set it as currentArgumentsAcess if the outer scope is not the global\n+    // scope.\n+    if (!argumentsAccessStack.isEmpty()) {\n+      currentArgumentsAccess \u003d argumentsAccessStack.pop();\n+    } else {\n+      currentArgumentsAccess \u003d null;\n+    }\n+  }\n+\n+  @Override\n+  public boolean shouldTraverse(\n+      NodeTraversal nodeTraversal, Node node, Node parent) {\n+    // We will continuously recurse down the AST regardless of the node types.\n+    return true;\n+  }\n+\n+  @Override\n+  public void visit(NodeTraversal traversal, Node node, Node parent) {\n+    Preconditions.checkNotNull(traversal);\n+    Preconditions.checkNotNull(node);\n+\n+\n+    // Searches for all the references to the arguments array.\n+\n+    // We don\u0027t have an arguments list set up for this scope. This implies we\n+    // are currently in the global scope so we will not record any arguments\n+    // array access.\n+    if (currentArgumentsAccess \u003d\u003d null) {\n+      return;\n+    }\n+\n+    // Otherwise, we are in a function scope and we should record if the current\n+    // name is referring to the implicit arguments array.\n+    if (NodeUtil.isName(node) \u0026\u0026 ARGUMENTS.equals(node.getString())) {\n+      currentArgumentsAccess.add(node);\n+    }\n+  }\n+\n+  /**\n+   * Tries to optimize all the arguments array access in this scope by assigning\n+   * a name to each element.\n+   *\n+   * @param scope scope of the function\n+   * @return true if any modification has been done to the AST\n+   */\n+  private boolean tryReplaceArguments(Scope scope) {\n+\n+    Node parametersList \u003d scope.getRootNode().getFirstChild().getNext();\n+    Preconditions.checkState(parametersList.getType() \u003d\u003d Token.LP);\n+\n+    // Keep track of rather this function modified the AST and needs to be\n+    // reported back to the compiler later.\n+    boolean changed \u003d false;\n+\n+    // Number of parameter that can be accessed without using the arguments\n+    // array.\n+    int numNamedParameter \u003d parametersList.getChildCount();\n+\n+    // We want to guess what the highest index that has been access from the\n+    // arguments array. We will guess that it does not use anything index higher\n+    // than the named parameter list first until we see other wise.\n+    int highestIndex \u003d numNamedParameter - 1;\n+\n+    // Iterate through all the references to arguments array in the function to\n+    // determine the real highestIndex.\n+    for (Node ref : currentArgumentsAccess) {\n+\n+      // Bail on anything but argument[c] access where c is a constant.\n+      // TODO(user): We might not need to bail out all the time, there might\n+      // be more cases that we can cover.\n+      if (ref.getParent().getType() !\u003d Token.GETELEM) {\n+        return false;\n+      }\n+\n+      Node index \u003d ref.getNext();\n+\n+      // We have something like arguments[x] where x is not a constant. That\n+      // means at least one of the access is not known.\n+      if (index.getType() !\u003d Token.NUMBER) {\n+        // TODO(user): Its possible not to give up just yet. The type\n+        // inference did a \u0027semi value propagation\u0027. If we know that string\n+        // is never a subclass of the type of the index. We\u0027d know that\n+        // it is never \u0027callee\u0027.\n+        return false; // Give up.\n+      }\n+\n+      // Replace the highest index if we see an access that has a higher index\n+      // than all the one we saw before.\n+      int value \u003d (int) index.getDouble();\n+      if (value \u003e highestIndex) {\n+        highestIndex \u003d value;\n+      }\n+    }\n+\n+    // Number of extra arguments we need.\n+    // For example: function() { arguments[3] } access index 3 so\n+    // it will need 4 extra named arguments to changed into:\n+    // function(a,b,c,d) { d }.\n+    int numExtraArgs \u003d highestIndex - numNamedParameter + 1;\n+\n+    // Temporary holds the new names as string for quick access later.\n+    String[] argNames \u003d new String[numExtraArgs];\n+\n+    // Insert the formal parameter to the method\u0027s signature.\n+    // Example: function() --\u003e function(r0, r1, r2)\n+    for (int i \u003d 0; i \u003c numExtraArgs; i++) {\n+      String name \u003d getNewName();\n+      argNames[i] \u003d name;\n+      parametersList.addChildrenToBack(Node.newString(Token.NAME, name));\n+      changed \u003d true;\n+    }\n+\n+    // This loop performs the replacement of arguments[x] -\u003e a if x is known.\n+    for (Node ref : currentArgumentsAccess) {\n+      Node index \u003d ref.getNext();\n+\n+      // Skip if it is unknown.\n+      if (index.getType() !\u003d Token.NUMBER) {\n+        continue;\n+      }\n+      int value \u003d (int) index.getDouble();\n+\n+      // Unnamed parameter.\n+      if (value \u003e\u003d numNamedParameter) {\n+        ref.getParent().getParent().replaceChild(ref.getParent(),\n+            Node.newString(Token.NAME, argNames[value - numNamedParameter]));\n+      } else {\n+\n+        // Here, for no apparent reason, the user is accessing a named parameter\n+        // with arguments[idx]. We can replace it with the actual name for them.\n+        Node name \u003d parametersList.getFirstChild();\n+\n+        // This is a linear search for the actual name from the signature.\n+        // It is not necessary to make this fast because chances are the user\n+        // will not deliberately write code like this.\n+        for (int i \u003d 0; i \u003c value; i++) {\n+          name \u003d name.getNext();\n+        }\n+        ref.getParent().getParent().replaceChild(ref.getParent(),\n+            Node.newString(Token.NAME, name.getString()));\n+      }\n+      changed \u003d true;\n+    }\n+\n+    return changed;\n+  }\n+\n+  /**\n+   * Generate a unique name for the next parameter.\n+   */\n+  private String getNewName() {\n+    return paramPredix + uniqueId++;\n+  }\n+}\n",
      "operations": [
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ReturnStatement [7666,7679]"
        },
        {
          "type": "delete-node",
          "from": "ContinueStatement [8627,8636]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/jscomp/RenameVars.java",
        "src/com/google/javascript/jscomp/RenameVars.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [
            "com.google.javascript.jscomp.RenameVars:getVariableMap:[]:VariableMap",
            "com.google.javascript.jscomp.RenameVars:okToRenameVar:[String name, boolean isLocal]:boolean",
            "com.google.javascript.jscomp.RenameVars\\$ProcessVars:incCount:[String name, CompilerInput input]:void",
            "com.google.javascript.jscomp.RenameVars:assignNames:[Set\u003cAssignment\u003e varsToRename]:void",
            "com.google.javascript.jscomp.RenameVars\\$Assignment:Assignment:[String name, CompilerInput input]:null",
            "com.google.javascript.jscomp.RenameVars:process:[Node externs, Node root]:void",
            "com.google.javascript.jscomp.RenameVars\\$Assignment:setNewName:[String newName]:void",
            "com.google.javascript.jscomp.RenameVars\\$ProcessVars:visit:[NodeTraversal t, Node n, Node parent]:void",
            "com.google.javascript.jscomp.RenameVars:reusePreviouslyUsedVariableMap:[]:void",
            "com.google.javascript.jscomp.RenameVars\\$ProcessVars:ProcessVars:[boolean isExterns]:null",
            "com.google.javascript.jscomp.RenameVars:RenameVars:[AbstractCompiler compiler, String prefix, boolean localRenamingOnly, boolean preserveAnonymousFunctionNames, VariableMap prevUsedRenameMap, @Nullable char[] reservedCharacters, @Nullable Set\u003cString\u003e reservedNames]:null",
            "com.google.javascript.jscomp.RenameVars:finalizeNameAssignment:[Assignment a, String newName]:void"
          ],
          "num": 12
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "-1"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "35",
            "36",
            "37",
            "38",
            "39",
            "40",
            "41",
            "42",
            "43",
            "44",
            "45",
            "46",
            "47",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57",
            "58",
            "59",
            "60",
            "61",
            "62",
            "63",
            "64",
            "65",
            "66",
            "67",
            "68",
            "69",
            "70",
            "71",
            "72",
            "73",
            "74",
            "75",
            "76",
            "77",
            "78",
            "79",
            "80",
            "81",
            "82",
            "83",
            "84",
            "85",
            "86",
            "87",
            "88",
            "89",
            "90",
            "91",
            "92",
            "93",
            "94",
            "95",
            "96",
            "97",
            "98",
            "99",
            "100",
            "101",
            "102",
            "103",
            "104",
            "105",
            "106",
            "107",
            "108",
            "109",
            "110",
            "111",
            "112",
            "113",
            "114",
            "115",
            "116",
            "117",
            "118",
            "119",
            "120",
            "121",
            "122",
            "123",
            "124",
            "125",
            "126",
            "127",
            "128",
            "129",
            "130",
            "131",
            "132",
            "133",
            "134",
            "135",
            "136",
            "137",
            "138",
            "139",
            "140",
            "141",
            "142",
            "143",
            "144",
            "145",
            "146",
            "147",
            "148",
            "149",
            "150",
            "151",
            "152",
            "153",
            "154",
            "155",
            "156",
            "157",
            "158",
            "159",
            "160",
            "161",
            "162",
            "163",
            "164",
            "165",
            "166",
            "167",
            "168",
            "169",
            "170",
            "171",
            "172",
            "173",
            "174",
            "175",
            "176",
            "177",
            "178",
            "179",
            "180",
            "181",
            "182",
            "183",
            "184",
            "185",
            "186",
            "187",
            "188",
            "189",
            "190",
            "191",
            "192",
            "193",
            "194",
            "195",
            "196",
            "197",
            "198",
            "199",
            "200",
            "201",
            "202",
            "203",
            "204",
            "205",
            "206",
            "207",
            "208",
            "209",
            "210",
            "211",
            "212",
            "213",
            "214",
            "215",
            "216",
            "217",
            "218",
            "219",
            "220",
            "221",
            "222",
            "223",
            "224",
            "225",
            "226",
            "227",
            "228",
            "229",
            "230",
            "231",
            "232",
            "233",
            "234",
            "235",
            "236",
            "237",
            "238",
            "239",
            "240",
            "241",
            "242",
            "243",
            "244",
            "245",
            "246",
            "247",
            "248",
            "249",
            "250",
            "251",
            "252",
            "253",
            "254",
            "255",
            "256",
            "257",
            "258",
            "259",
            "260",
            "261",
            "262",
            "263",
            "264",
            "265",
            "266",
            "267",
            "268",
            "269",
            "270",
            "271",
            "272",
            "273",
            "274",
            "275",
            "276",
            "277",
            "278",
            "279",
            "280",
            "281",
            "282",
            "283",
            "284",
            "285",
            "286",
            "287",
            "288",
            "289",
            "290",
            "291",
            "292",
            "293",
            "294",
            "295",
            "296",
            "297",
            "298",
            "299",
            "300",
            "301",
            "302",
            "303",
            "304",
            "305",
            "306",
            "307",
            "308",
            "309",
            "310",
            "311",
            "312",
            "313",
            "314",
            "315",
            "316",
            "317",
            "318",
            "319",
            "320",
            "321",
            "322",
            "323",
            "324",
            "325",
            "326",
            "327",
            "328",
            "329",
            "330",
            "331",
            "332",
            "333",
            "334",
            "335",
            "336",
            "337",
            "338",
            "339",
            "340",
            "341",
            "342",
            "343",
            "344",
            "345",
            "346",
            "347",
            "348",
            "349",
            "350",
            "351",
            "352",
            "353",
            "354",
            "355",
            "356",
            "357",
            "358",
            "359",
            "360",
            "361",
            "362",
            "363",
            "364",
            "365",
            "366",
            "367",
            "368",
            "369",
            "370",
            "371",
            "372",
            "373",
            "374",
            "375",
            "376",
            "377",
            "378",
            "379",
            "380",
            "381",
            "382",
            "383",
            "384",
            "385",
            "386",
            "387",
            "388",
            "389",
            "390",
            "391",
            "392",
            "393",
            "394",
            "395",
            "396",
            "397",
            "398",
            "399",
            "400",
            "401",
            "402",
            "403",
            "404",
            "405",
            "406",
            "407",
            "408",
            "409",
            "410",
            "411",
            "412",
            "413",
            "414",
            "415",
            "416",
            "417",
            "418",
            "419",
            "420",
            "421",
            "422",
            "423",
            "424",
            "425",
            "426",
            "427",
            "428",
            "429",
            "430",
            "431",
            "432",
            "433",
            "434",
            "435",
            "436",
            "437",
            "438",
            "439",
            "440",
            "441",
            "442",
            "443",
            "444",
            "445",
            "446"
          ],
          "num": 446
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/jscomp/RenameVars.java b/src/com/google/javascript/jscomp/RenameVars.java\nnew file mode 100644\nindex 0000000..18e2680\n--- /dev/null\n+++ b/src/com/google/javascript/jscomp/RenameVars.java\n@@ -0,0 +1,446 @@\n+/*\n+ * Copyright 2004 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.javascript.jscomp;\n+\n+import javax.annotation.Nullable;\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.Sets;\n+import com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback;\n+import com.google.javascript.rhino.Node;\n+import com.google.javascript.rhino.Token;\n+\n+import java.util.*;\n+\n+\n+/**\n+ * RenameVars renames all the variables names into short names, to reduce\n+ * code size and also to obfuscate the code.\n+ *\n+*\n+*\n+ */\n+final class RenameVars implements CompilerPass {\n+  private final AbstractCompiler compiler;\n+\n+  /** List of global NAME nodes */\n+  private final ArrayList\u003cNode\u003e globalNameNodes \u003d new ArrayList\u003cNode\u003e();\n+\n+  /** List of local NAME nodes */\n+  private final ArrayList\u003cNode\u003e localNameNodes \u003d new ArrayList\u003cNode\u003e();\n+\n+  /** List of local names that corresponds to the localNameNodes */\n+  private final ArrayList\u003cString\u003e localTempNames \u003d new ArrayList\u003cString\u003e();\n+\n+  /** Set of extern variable names */\n+  private final Set\u003cString\u003e externNames \u003d new HashSet\u003cString\u003e();\n+\n+  /** Set of reserved variable names */\n+  private final Set\u003cString\u003e reservedNames;\n+\n+  /** The renaming map */\n+  private final Map\u003cString, String\u003e renameMap \u003d new HashMap\u003cString, String\u003e();\n+\n+  /** The previously used rename map. */\n+  private final VariableMap prevUsedRenameMap;\n+\n+  /** The global name prefix */\n+  private final String prefix;\n+\n+  /** Counter for each assignment */\n+  private int assignmentCount \u003d 0;\n+\n+  /** Logs all name assignments */\n+  private StringBuilder assignmentLog;\n+\n+  class Assignment {\n+    final CompilerInput input;\n+    final String oldName;\n+    final int orderOfOccurrence;\n+    String newName;\n+    int count;                          // Number of times this is referenced\n+\n+    Assignment(String name, CompilerInput input) {\n+      this.input \u003d input;\n+      this.oldName \u003d name;\n+      this.newName \u003d null;\n+      this.count \u003d 0;\n+\n+      // Represents the order at which a symbol appears in the source.\n+      this.orderOfOccurrence \u003d assignmentCount++;\n+    }\n+\n+    /**\n+     * Assigns the new name.\n+     */\n+    void setNewName(String newName) {\n+      Preconditions.checkState(this.newName \u003d\u003d null);\n+      this.newName \u003d newName;\n+    }\n+  }\n+\n+  /** Maps an old name to a new name assignment */\n+  private final SortedMap\u003cString, Assignment\u003e assignments \u003d\n+      new TreeMap\u003cString, Assignment\u003e();\n+\n+  /** Whether renaming should apply to local variables only. */\n+  private final boolean localRenamingOnly;\n+\n+  /**\n+   * Whether anonymous function names should be preserved. Typically, for\n+   * debugging purposes.\n+   * @see NameAnonymousFunctions\n+   */\n+  private boolean preserveAnonymousFunctionNames;\n+\n+  /** Characters that shouldn\u0027t be used in variable names. */\n+  private final char[] reservedCharacters;\n+\n+  /** A prefix to distinguish temporary local names from global names */\n+  private static final String LOCAL_VAR_PREFIX \u003d \"L \";\n+\n+  RenameVars(AbstractCompiler compiler,\n+      String prefix,\n+      boolean localRenamingOnly,\n+      boolean preserveAnonymousFunctionNames,\n+      VariableMap prevUsedRenameMap,\n+      @Nullable char[] reservedCharacters,\n+      @Nullable Set\u003cString\u003e reservedNames) {\n+    this.compiler \u003d compiler;\n+    this.prefix \u003d prefix \u003d\u003d null ? \"\" : prefix;\n+    this.localRenamingOnly \u003d localRenamingOnly;\n+    this.preserveAnonymousFunctionNames \u003d preserveAnonymousFunctionNames;\n+    this.prevUsedRenameMap \u003d prevUsedRenameMap;\n+    this.reservedCharacters \u003d reservedCharacters;\n+    if (reservedNames \u003d\u003d null) {\n+      this.reservedNames \u003d Sets.newHashSet();\n+    } else {\n+      this.reservedNames \u003d Sets.newHashSet(reservedNames);\n+    }\n+  }\n+\n+  /**\n+   * Iterate through the nodes, collect all the NAME nodes that need to be\n+   * renamed, and count how many times each variable name is referenced.\n+   *\n+   * There are 2 passes:\n+   * - externs: keep track of the global vars in the externNames_ map.\n+   * - source: keep track of all name references in globalNameNodes_, and\n+   *   localNameNodes_.\n+   *\n+   * To get shorter local variable renaming, we rename local variables to a\n+   * temporary name \"LOCAL_VAR_PREFIX + index\" where index is the index of the\n+   * variable declared in the local scope stack.\n+   * e.g.\n+   * Foo(fa, fb) {\n+   *   var c \u003d function(d, e) { return fa; }\n+   * }\n+   * The indexes are: fa:0, fb:1, c:2, d:3, e:4\n+   *\n+   * In that way, local variable names are reused in each global function.\n+   * e.g. the final code might look like\n+   * function x(a,b) { ... }\n+   * function y(a,b,c) { ... }\n+   */\n+  class ProcessVars extends AbstractPostOrderCallback {\n+    private final boolean isExternsPass_;\n+\n+    ProcessVars(boolean isExterns) {\n+      isExternsPass_ \u003d isExterns;\n+    }\n+\n+    @Override\n+    public void visit(NodeTraversal t, Node n, Node parent) {\n+      if (n.getType() !\u003d Token.NAME) {\n+        return;\n+      }\n+\n+      String name \u003d n.getString();\n+\n+      // Ignore anonymous functions\n+      if (name.length() \u003d\u003d 0) {\n+        return;\n+      }\n+\n+      // Is this local or Global?\n+      Scope.Var var \u003d t.getScope().getVar(name);\n+      boolean local \u003d (var !\u003d null) \u0026\u0026 var.isLocal();\n+\n+      // Are we renaming global variables?\n+      if (!local \u0026\u0026 localRenamingOnly) {\n+        reservedNames.add(name);\n+        return;\n+      }\n+\n+      // Are we renaming anonymous function names?\n+      if (preserveAnonymousFunctionNames\n+          \u0026\u0026 var !\u003d null\n+          \u0026\u0026 NodeUtil.isAnonymousFunction(var.getParentNode())) {\n+        reservedNames.add(name);\n+        return;\n+      }\n+\n+      // Check if we can rename this.\n+      if (!okToRenameVar(name, local)) {\n+        return;\n+      }\n+\n+      if (isExternsPass_) {\n+        // Keep track of extern globals.\n+        if (!local) {\n+          externNames.add(name);\n+        }\n+        return;\n+      }\n+\n+      if (local) {\n+        // Local var: assign a new name\n+        String tempName \u003d LOCAL_VAR_PREFIX + var.getLocalVarIndex();\n+        incCount(tempName, null);\n+        localNameNodes.add(n);\n+        localTempNames.add(tempName);\n+      } else if (var !\u003d null) {  // Not an extern\n+        // If it\u0027s global, increment global count\n+        incCount(name, var.input);\n+        globalNameNodes.add(n);\n+      }\n+    }\n+\n+    // Increment count of an assignment\n+    void incCount(String name, CompilerInput input) {\n+      Assignment s \u003d assignments.get(name);\n+      if (s \u003d\u003d null) {\n+        s \u003d new Assignment(name, input);\n+        assignments.put(name, s);\n+      }\n+      s.count++;\n+    }\n+  }\n+\n+  /**\n+   * Sorts Assignment objects by their count, breaking ties by their\n+   * order of occurrence in the source to ensure a deterministic total\n+   * ordering.\n+   */\n+  private static final Comparator\u003cAssignment\u003e FREQUENCY_COMPARATOR \u003d\n+    new Comparator\u003cAssignment\u003e() {\n+      public int compare(Assignment a1, Assignment a2) {\n+        if (a1.count !\u003d a2.count) {\n+          return a2.count - a1.count;\n+        }\n+        // Break a tie using the order in which the variable first appears in\n+        // the source.\n+        return ORDER_OF_OCCURRENCE_COMPARATOR.compare(a1, a2);\n+      }\n+    };\n+\n+  /**\n+   * Sorts Assignment objects by the order the variable name first appears in\n+   * the source.\n+   */\n+  private static final Comparator\u003cAssignment\u003e ORDER_OF_OCCURRENCE_COMPARATOR \u003d\n+    new Comparator\u003cAssignment\u003e() {\n+      public int compare(Assignment a1, Assignment a2) {\n+        return a1.orderOfOccurrence - a2.orderOfOccurrence;\n+      }\n+    };\n+\n+  /**\n+   * {@inheritDoc}\n+   */\n+  public void process(Node externs, Node root) {\n+    assignmentLog \u003d new StringBuilder();\n+\n+    // Do variable reference counting.\n+    NodeTraversal.traverse(compiler, externs, new ProcessVars(true));\n+    NodeTraversal.traverse(compiler, root, new ProcessVars(false));\n+\n+    // Make sure that new names don\u0027t overlap with extern names.\n+    reservedNames.addAll(externNames);\n+\n+    // Rename vars, sorted by frequency of occurrence to minimize code size.\n+    SortedSet\u003cAssignment\u003e varsByFrequency \u003d\n+        new TreeSet\u003cAssignment\u003e(FREQUENCY_COMPARATOR);\n+    varsByFrequency.addAll(assignments.values());\n+\n+    // First try to reuse names from an earlier compilation.\n+    if (prevUsedRenameMap !\u003d null) {\n+      reusePreviouslyUsedVariableMap();\n+    }\n+\n+    // Assign names, sorted by descending frequency to minimize code size.\n+    assignNames(varsByFrequency);\n+\n+    boolean changed \u003d false;\n+\n+    // Rename the globals!\n+    for (Node n : globalNameNodes) {\n+      String oldName \u003d n.getString();\n+      Assignment a \u003d assignments.get(oldName);\n+\n+      // Note: if newName is null, then oldName is an extern.\n+      if (a.newName !\u003d null) {\n+        n.setString(a.newName);\n+        changed \u003d changed || !a.newName.equals(oldName);\n+      }\n+    }\n+\n+    // Rename the locals!\n+    int count \u003d 0;\n+    for (Node n : localNameNodes) {\n+      String oldName \u003d localTempNames.get(count);\n+      Assignment a \u003d assignments.get(oldName);\n+      n.setString(a.newName);\n+      changed \u003d changed || !a.newName.equals(oldName);\n+      count++;\n+    }\n+\n+    if (changed) {\n+      compiler.reportCodeChange();\n+    }\n+\n+    // Lastly, write the name assignments to the debug log.\n+    compiler.addToDebugLog(\"JS var assignments:\\n\" + assignmentLog);\n+    assignmentLog \u003d null;\n+  }\n+\n+  /**\n+   * Runs through the assignments and reuses as many names as possible from the\n+   * previously used variable map. Updates reservedNames with the set of names\n+   * that were reused.\n+   */\n+  private void reusePreviouslyUsedVariableMap() {\n+    for (Assignment a : assignments.values()) {\n+      String prevNewName \u003d prevUsedRenameMap.lookupNewName(a.oldName);\n+      if (prevNewName \u003d\u003d null || reservedNames.contains(prevNewName)) {\n+        continue;\n+      }\n+\n+      if (a.oldName.startsWith(LOCAL_VAR_PREFIX) ||\n+          (!externNames.contains(a.oldName) \u0026\u0026\n+           prevNewName.startsWith(prefix))) {\n+        reservedNames.add(prevNewName);\n+        finalizeNameAssignment(a, prevNewName);\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Determines which new names to substitute for the original names.\n+   */\n+  private void assignNames(Set\u003cAssignment\u003e varsToRename) {\n+    NameGenerator globalNameGenerator \u003d\n+        new NameGenerator(reservedNames, prefix, reservedCharacters);\n+\n+    // Local variables never need a prefix.\n+    NameGenerator localNameGenerator \u003d prefix.isEmpty() ?\n+        globalNameGenerator : new NameGenerator(reservedNames, \"\",\n+        reservedCharacters);\n+\n+    // Generated names and the assignments for non-local vars.\n+    List\u003cAssignment\u003e pendingAssignments \u003d new ArrayList\u003cAssignment\u003e();\n+    List\u003cString\u003e generatedNamesForAssignments \u003d new ArrayList\u003cString\u003e();\n+\n+    for (Assignment a : varsToRename) {\n+      if (a.newName !\u003d null) {\n+        continue;\n+      }\n+\n+      if (externNames.contains(a.oldName)) {\n+        continue;\n+      }\n+\n+      String newName;\n+      if (a.oldName.startsWith(LOCAL_VAR_PREFIX)) {\n+        // For local variable, we make the assignment right away.\n+        newName \u003d localNameGenerator.generateNextName();\n+        finalizeNameAssignment(a, newName);\n+\n+      } else {\n+        // For non-local variable, delay finalizing the name assignment\n+        // until we know how many new names we\u0027ll have of length 2, 3, etc.\n+        newName \u003d globalNameGenerator.generateNextName();\n+        pendingAssignments.add(a);\n+        generatedNamesForAssignments.add(newName);\n+      }\n+      reservedNames.add(newName);\n+    }\n+\n+    // Now that we have a list of generated names, and a list of variable\n+    // Assignment objects, we assign the generated names to the vars as\n+    // follows:\n+    // 1) The most frequent vars get the shorter names.\n+    // 2) If N number of vars are going to be assigned names of the same\n+    //    length, we assign the N names based on the order at which the vars\n+    //    first appear in the source. This makes the output somewhat less\n+    //    random, because symbols declared close together are assigned names\n+    //    that are quite similar. With this heuristic, the output is more\n+    //    compressible.\n+    //    For instance, the output may look like:\n+    //    var da \u003d \"..\", ea \u003d \"..\";\n+    //    function fa() { .. } function ga() { .. }\n+\n+    int numPendingAssignments \u003d generatedNamesForAssignments.size();\n+    for (int i \u003d 0; i \u003c numPendingAssignments;) {\n+      SortedSet\u003cAssignment\u003e varsByOrderOfOccurrence \u003d\n+          new TreeSet\u003cAssignment\u003e(ORDER_OF_OCCURRENCE_COMPARATOR);\n+\n+      // Add k number of Assignment to the set, where k is the number of\n+      // generated names of the same length.\n+      int len \u003d generatedNamesForAssignments.get(i).length();\n+      for (int j \u003d i;\n+           j \u003c numPendingAssignments \u0026\u0026\n+               generatedNamesForAssignments.get(j).length() \u003d\u003d len;\n+           j++) {\n+        varsByOrderOfOccurrence.add(pendingAssignments.get(j));\n+      }\n+\n+      // Now, make the assignments\n+      for (Assignment a : varsByOrderOfOccurrence) {\n+        finalizeNameAssignment(a, generatedNamesForAssignments.get(i));\n+        ++i;\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Makes a final name assignment.\n+   */\n+  private void finalizeNameAssignment(Assignment a, String newName) {\n+    a.setNewName(newName);\n+\n+    // Keep track of the mapping\n+    renameMap.put(a.oldName, newName);\n+\n+    // Log the mapping\n+    assignmentLog.append(a.oldName).append(\" \u003d\u003e \").append(newName).\n+        append(\u0027\\n\u0027);\n+  }\n+\n+  /**\n+   * Gets the variable map.\n+   */\n+  VariableMap getVariableMap() {\n+    return new VariableMap(renameMap);\n+  }\n+\n+  /**\n+   * Determines whether a variable name is okay to rename.\n+   */\n+  private boolean okToRenameVar(String name, boolean isLocal) {\n+    return !compiler.getCodingConvention().isExported(name, isLocal);\n+  }\n+}\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "ReturnStatement [14038,14103]"
        },
        {
          "type": "delete-tree",
          "from": "ReturnStatement [14038,14105]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/jscomp/RhinoErrorReporter.java",
        "src/com/google/javascript/jscomp/RhinoErrorReporter.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [
            "com.google.javascript.jscomp.RhinoErrorReporter:makeError:[String message, String sourceName, int line, int lineOffset, CheckLevel defaultLevel]:JSError",
            "com.google.javascript.jscomp.RhinoErrorReporter\\$NewRhinoErrorReporter:NewRhinoErrorReporter:[AbstractCompiler compiler]:null",
            "com.google.javascript.jscomp.RhinoErrorReporter:RhinoErrorReporter:[AbstractCompiler compiler]:null",
            "com.google.javascript.jscomp.RhinoErrorReporter:forOldRhino:[AbstractCompiler compiler]:ErrorReporter",
            "com.google.javascript.jscomp.RhinoErrorReporter\\$OldRhinoErrorReporter:OldRhinoErrorReporter:[AbstractCompiler compiler]:null",
            "com.google.javascript.jscomp.RhinoErrorReporter:forNewRhino:[AbstractCompiler compiler]:com.google.javascript.jscomp.mozilla.rhino.ErrorReporter",
            "com.google.javascript.jscomp.RhinoErrorReporter:replacePlaceHolders:[String s]:String",
            "com.google.javascript.jscomp.RhinoErrorReporter\\$OldRhinoErrorReporter:runtimeError:[String message, String sourceName, int line, String lineSource, int lineOffset]:EvaluatorException",
            "com.google.javascript.jscomp.RhinoErrorReporter:warning:[String message, String sourceName, int line, String lineSource, int lineOffset]:void",
            "com.google.javascript.jscomp.RhinoErrorReporter\\$NewRhinoErrorReporter:runtimeError:[String message, String sourceName, int line, String lineSource, int lineOffset]:com.google.javascript.jscomp.mozilla.rhino.EvaluatorException",
            "com.google.javascript.jscomp.RhinoErrorReporter:error:[String message, String sourceName, int line, String lineSource, int lineOffset]:void"
          ],
          "num": 11
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "-1"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "35",
            "36",
            "37",
            "38",
            "39",
            "40",
            "41",
            "42",
            "43",
            "44",
            "45",
            "46",
            "47",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57",
            "58",
            "59",
            "60",
            "61",
            "62",
            "63",
            "64",
            "65",
            "66",
            "67",
            "68",
            "69",
            "70",
            "71",
            "72",
            "73",
            "74",
            "75",
            "76",
            "77",
            "78",
            "79",
            "80",
            "81",
            "82",
            "83",
            "84",
            "85",
            "86",
            "87",
            "88",
            "89",
            "90",
            "91",
            "92",
            "93",
            "94",
            "95",
            "96",
            "97",
            "98",
            "99",
            "100",
            "101",
            "102",
            "103",
            "104",
            "105",
            "106",
            "107",
            "108",
            "109",
            "110",
            "111",
            "112",
            "113",
            "114",
            "115",
            "116",
            "117",
            "118",
            "119",
            "120",
            "121",
            "122",
            "123",
            "124",
            "125",
            "126",
            "127",
            "128",
            "129",
            "130",
            "131",
            "132",
            "133",
            "134",
            "135",
            "136",
            "137",
            "138",
            "139",
            "140",
            "141",
            "142",
            "143",
            "144",
            "145",
            "146",
            "147",
            "148",
            "149",
            "150",
            "151",
            "152",
            "153",
            "154",
            "155",
            "156",
            "157",
            "158"
          ],
          "num": 158
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/jscomp/RhinoErrorReporter.java b/src/com/google/javascript/jscomp/RhinoErrorReporter.java\nnew file mode 100644\nindex 0000000..0c90c7c\n--- /dev/null\n+++ b/src/com/google/javascript/jscomp/RhinoErrorReporter.java\n@@ -0,0 +1,158 @@\n+/*\n+ * Copyright 2009 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.javascript.jscomp;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.google.javascript.rhino.ErrorReporter;\n+import com.google.javascript.rhino.EvaluatorException;\n+import com.google.javascript.rhino.ScriptRuntime;\n+import com.google.javascript.jscomp.CheckLevel;\n+\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * An error reporter for serizalizing Rhino errors into our error format.\n+*\n+ */\n+class RhinoErrorReporter {\n+\n+  static final DiagnosticType PARSE_ERROR \u003d\n+      DiagnosticType.error(\"JSC_PARSE_ERROR\", \"Parse error. {0}\");\n+\n+  // A special-cased error, so that it can be configured via the\n+  // warnings API.\n+  static final DiagnosticType EXTRA_FILEOVERVIEW \u003d\n+      DiagnosticType.warning(\"JSC_EXTRA_FILEOVERVIEW\", \"Parse error. {0}\");\n+\n+  static final DiagnosticType TRAILING_COMMA \u003d\n+      DiagnosticType.error(\"JSC_TRAILING_COMMA\", \"Parse error. {0}\");\n+\n+  static final DiagnosticType DUPLICATE_PARAM \u003d\n+      DiagnosticType.error(\"JSC_DUPLICATE_PARAM\", \"Parse error. {0}\");\n+\n+  static final DiagnosticType BAD_JSDOC_ANNOTATION \u003d\n+    DiagnosticType.warning(\"JSC_BAD_JSDOC_ANNOTATION\", \"Parse error. {0}\");\n+\n+  // A map of Rhino messages to their DiagnosticType.\n+  private final Map\u003cString, DiagnosticType\u003e typeMap;\n+\n+  private final AbstractCompiler compiler;\n+\n+  /**\n+   * For each message such as \"Not a good use of {0}\", replace the place\n+   * holder {0} with a wild card that matches all possible strings.\n+   * Also put the any non-place-holder in quotes for regex matching later.\n+   */\n+  private String replacePlaceHolders(String s) {\n+    s \u003d Pattern.quote(s);\n+    return s.replaceAll(\"\\\\{\\\\d+\\\\}\", \"\\\\\\\\E.*\\\\\\\\Q\");\n+  }\n+\n+  private RhinoErrorReporter(AbstractCompiler compiler) {\n+    this.compiler \u003d compiler;\n+    typeMap \u003d ImmutableMap.of(\n+\n+        // Extra @fileoverview\n+        replacePlaceHolders(\n+            ScriptRuntime.getMessage0(\"msg.jsdoc.fileoverview.extra\")),\n+        EXTRA_FILEOVERVIEW,\n+\n+        // Trailing comma\n+        replacePlaceHolders(\n+            com.google.javascript.jscomp.mozilla.rhino.ScriptRuntime\n+              .getMessage0(\"msg.extra.trailing.comma\")),\n+        TRAILING_COMMA,\n+\n+        // Duplicate parameter\n+        replacePlaceHolders(\n+            com.google.javascript.jscomp.mozilla.rhino.ScriptRuntime\n+              .getMessage0(\"msg.dup.parms\")),\n+        DUPLICATE_PARAM,\n+\n+        // Unknown @annotations.\n+        replacePlaceHolders(ScriptRuntime.getMessage0(\"msg.bad.jsdoc.tag\")),\n+        BAD_JSDOC_ANNOTATION);\n+  }\n+\n+  public static com.google.javascript.jscomp.mozilla.rhino.ErrorReporter\n+      forNewRhino(AbstractCompiler compiler) {\n+    return new NewRhinoErrorReporter(compiler);\n+  }\n+\n+  public static ErrorReporter forOldRhino(AbstractCompiler compiler) {\n+    return new OldRhinoErrorReporter(compiler);\n+  }\n+\n+  public void warning(String message, String sourceName, int line,\n+      String lineSource, int lineOffset) {\n+    compiler.report(\n+        makeError(message, sourceName, line, lineOffset, CheckLevel.WARNING));\n+  }\n+\n+  public void error(String message, String sourceName, int line,\n+      String lineSource, int lineOffset) {\n+    compiler.report(\n+        makeError(message, sourceName, line, lineOffset, CheckLevel.ERROR));\n+  }\n+\n+  private JSError makeError(String message, String sourceName, int line,\n+      int lineOffset, CheckLevel defaultLevel) {\n+\n+    // Try to see if the message is one of the rhino errors we want to\n+    // expose as DiagnosticType by matching it with the regex key.\n+    for (Entry\u003cString, DiagnosticType\u003e entry : typeMap.entrySet()) {\n+      if (message.matches(entry.getKey())) {\n+        return JSError.make(\n+            sourceName, line, lineOffset, entry.getValue(), message);\n+      }\n+    }\n+\n+    return JSError.make(sourceName, line, lineOffset, defaultLevel,\n+        PARSE_ERROR, message);\n+  }\n+\n+  private static class OldRhinoErrorReporter extends RhinoErrorReporter\n+      implements ErrorReporter {\n+\n+    private OldRhinoErrorReporter(AbstractCompiler compiler) {\n+      super(compiler);\n+    }\n+\n+    public EvaluatorException runtimeError(String message, String sourceName,\n+        int line, String lineSource, int lineOffset) {\n+      return new EvaluatorException(message, sourceName, line, lineSource,\n+          lineOffset);\n+    }\n+  }\n+\n+  private static class NewRhinoErrorReporter extends RhinoErrorReporter\n+      implements com.google.javascript.jscomp.mozilla.rhino.ErrorReporter {\n+\n+    private NewRhinoErrorReporter(AbstractCompiler compiler) {\n+      super(compiler);\n+    }\n+\n+    public com.google.javascript.jscomp.mozilla.rhino.EvaluatorException\n+        runtimeError(String message, String sourceName, int line,\n+            String lineSource, int lineOffset) {\n+      return new com.google.javascript.jscomp.mozilla.rhino.EvaluatorException(\n+          message, sourceName, line, lineSource, lineOffset);\n+    }\n+  }\n+}\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldDeclaration [1525,1641]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodInvocation [2814,2948]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: DUPLICATE_PARAM [2958,2973]"
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/jscomp/WarningLevel.java",
        "src/com/google/javascript/jscomp/WarningLevel.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [],
          "num": 0
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "-1"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "35",
            "36",
            "37",
            "38",
            "39",
            "40",
            "41",
            "42",
            "43",
            "44",
            "45",
            "46",
            "47",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57",
            "58",
            "59",
            "60",
            "61",
            "62",
            "63",
            "64",
            "65",
            "66",
            "67",
            "68",
            "69",
            "70",
            "71",
            "72",
            "73",
            "74",
            "75",
            "76",
            "77",
            "78",
            "79",
            "80",
            "81",
            "82",
            "83",
            "84",
            "85",
            "86",
            "87"
          ],
          "num": 87
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/jscomp/WarningLevel.java b/src/com/google/javascript/jscomp/WarningLevel.java\nnew file mode 100644\nindex 0000000..d7b3800\n--- /dev/null\n+++ b/src/com/google/javascript/jscomp/WarningLevel.java\n@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2009 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.javascript.jscomp;\n+\n+import com.google.javascript.jscomp.CheckLevel;\n+import com.google.javascript.jscomp.CompilerOptions;\n+\n+/**\n+ * Convert the warnings level to an Options object.\n+ *\n+*\n+ */\n+public enum WarningLevel {\n+  QUIET,\n+\n+  DEFAULT,\n+\n+  VERBOSE;\n+\n+  public void setOptionsForWarningLevel(CompilerOptions options) {\n+    switch (this) {\n+      case QUIET:\n+        // Nothing to do\n+        break;\n+      case DEFAULT:\n+        addDefaultWarnings(options);\n+        break;\n+      case VERBOSE:\n+        addVerboseWarnings(options);\n+        break;\n+      default:\n+        throw new RuntimeException(\"Unknown warning level.\");\n+    }\n+  }\n+\n+  /**\n+   * Add the default checking pass to the compilation options.\n+   * @param options The CompilerOptions object to set the options on.\n+   */\n+  private static void addDefaultWarnings(CompilerOptions options) {\n+    options.checkSuspiciousCode \u003d true;\n+    // TODO(user): This is deprecated. We should turn on the\n+    // new one once it is default in command line JSCompiler.\n+    options.checkUndefinedProperties \u003d CheckLevel.OFF;\n+    options.checkUnusedPropertiesEarly \u003d false;\n+    options.checkUnreachableCode \u003d CheckLevel.WARNING;\n+  }\n+\n+  /**\n+   * Add all the check pass that are possibly relevant to a non googler.\n+   * @param options The CompilerOptions object to set the options on.\n+   */\n+  private static void addVerboseWarnings(CompilerOptions options) {\n+    addDefaultWarnings(options);\n+\n+    // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.\n+    options.checkSuspiciousCode \u003d true;\n+    options.checkGlobalThisLevel \u003d CheckLevel.WARNING;\n+    options.checkSymbols \u003d true;\n+\n+    // checkTypes and checkFunctions have the side-effect of asserting that the\n+    // correct number of arguments are passed to a function.\n+    // Because the CodingConvention used with the web service does not provide a\n+    // way for optional arguments to be specified, these warnings may result in\n+    // false positives.\n+    options.checkTypes \u003d true;\n+    options.checkFunctions \u003d CheckLevel.WARNING;\n+\n+    options.checkMethods \u003d CheckLevel.WARNING;\n+    options.checkGlobalNamesLevel \u003d CheckLevel.WARNING;\n+    options.aggressiveVarCheck \u003d CheckLevel.WARNING;\n+  }\n+}\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [1723,1773]"
        }
      ]
    }
  ],
  "inducing_type": {
    "add_classes": {
      "qualified_names": [
        "src/com/google/javascript/jscomp/AbstractCompiler.java",
        "src/com/google/javascript/jscomp/AbstractCompilerRunner.java",
        "src/com/google/javascript/jscomp/AbstractMessageFormatter.java",
        "src/com/google/javascript/jscomp/AliasExternals.java",
        "src/com/google/javascript/jscomp/AliasKeywords.java",
        "src/com/google/javascript/jscomp/AliasStrings.java",
        "src/com/google/javascript/jscomp/AmbiguateProperties.java",
        "src/com/google/javascript/jscomp/AnalyzeNameReferences.java",
        "src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java",
        "src/com/google/javascript/jscomp/AnonymousFunctionNamingCallback.java",
        "src/com/google/javascript/jscomp/AnonymousFunctionNamingPolicy.java",
        "src/com/google/javascript/jscomp/AstChangeProxy.java",
        "src/com/google/javascript/jscomp/AstParallelizer.java",
        "src/com/google/javascript/jscomp/BasicErrorManager.java",
        "src/com/google/javascript/jscomp/ChainCalls.java",
        "src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java",
        "src/com/google/javascript/jscomp/CheckAccessControls.java",
        "src/com/google/javascript/jscomp/CheckAccidentalSemicolon.java",
        "src/com/google/javascript/jscomp/CheckGlobalNames.java",
        "src/com/google/javascript/jscomp/CheckGlobalThis.java",
        "src/com/google/javascript/jscomp/CheckLevel.java",
        "src/com/google/javascript/jscomp/CheckLevelLegacy.java",
        "src/com/google/javascript/jscomp/CheckMissingGetCssName.java",
        "src/com/google/javascript/jscomp/CheckMissingReturn.java",
        "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java",
        "src/com/google/javascript/jscomp/CheckProvides.java",
        "src/com/google/javascript/jscomp/CheckRequiresForConstructors.java",
        "src/com/google/javascript/jscomp/CheckSideEffects.java",
        "src/com/google/javascript/jscomp/CheckUnreachableCode.java",
        "src/com/google/javascript/jscomp/ClosureCodingConvention.java",
        "src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java",
        "src/com/google/javascript/jscomp/CoalesceVariableNames.java",
        "src/com/google/javascript/jscomp/CodeChangeHandler.java",
        "src/com/google/javascript/jscomp/CodeConsumer.java",
        "src/com/google/javascript/jscomp/CodeGenerator.java",
        "src/com/google/javascript/jscomp/CodePrinter.java",
        "src/com/google/javascript/jscomp/CodingConvention.java",
        "src/com/google/javascript/jscomp/CodingConventionAnnotator.java",
        "src/com/google/javascript/jscomp/CollapseAnonymousFunctions.java",
        "src/com/google/javascript/jscomp/CollapseProperties.java",
        "src/com/google/javascript/jscomp/CollapseVariableDeclarations.java",
        "src/com/google/javascript/jscomp/CombinedCompilerPass.java",
        "src/com/google/javascript/jscomp/CompilationLevel.java",
        "src/com/google/javascript/jscomp/Compiler.java",
        "src/com/google/javascript/jscomp/CompilerInput.java",
        "src/com/google/javascript/jscomp/CompilerOptions.java",
        "src/com/google/javascript/jscomp/CompilerPass.java",
        "src/com/google/javascript/jscomp/CompilerRunner.java",
        "src/com/google/javascript/jscomp/ComposeWarningsGuard.java",
        "src/com/google/javascript/jscomp/ConcreteType.java",
        "src/com/google/javascript/jscomp/ConstCheck.java",
        "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "src/com/google/javascript/jscomp/ControlFlowGraph.java",
        "src/com/google/javascript/jscomp/ControlStructureCheck.java",
        "src/com/google/javascript/jscomp/ConvertToDottedProperties.java",
        "src/com/google/javascript/jscomp/CreateSyntheticBlocks.java",
        "src/com/google/javascript/jscomp/CrossModuleCodeMotion.java",
        "src/com/google/javascript/jscomp/CrossModuleMethodMotion.java",
        "src/com/google/javascript/jscomp/CssRenamingMap.java",
        "src/com/google/javascript/jscomp/CustomPassExecutionTime.java",
        "src/com/google/javascript/jscomp/DataFlowAnalysis.java",
        "src/com/google/javascript/jscomp/DeadAssignmentsElimination.java",
        "src/com/google/javascript/jscomp/DefaultCodingConvention.java",
        "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "src/com/google/javascript/jscomp/DefinitionProvider.java",
        "src/com/google/javascript/jscomp/DefinitionSite.java",
        "src/com/google/javascript/jscomp/DefinitionsRemover.java",
        "src/com/google/javascript/jscomp/Denormalize.java",
        "src/com/google/javascript/jscomp/DevirtualizePrototypeMethods.java",
        "src/com/google/javascript/jscomp/DiagnosticGroup.java",
        "src/com/google/javascript/jscomp/DiagnosticGroupWarningsGuard.java",
        "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "src/com/google/javascript/jscomp/DiagnosticType.java",
        "src/com/google/javascript/jscomp/DisambiguateProperties.java",
        "src/com/google/javascript/jscomp/DotFormatter.java",
        "src/com/google/javascript/jscomp/ErrorFormat.java",
        "src/com/google/javascript/jscomp/ErrorManager.java",
        "src/com/google/javascript/jscomp/ExportTestFunctions.java",
        "src/com/google/javascript/jscomp/ExpressionDecomposer.java",
        "src/com/google/javascript/jscomp/ExternExportsPass.java",
        "src/com/google/javascript/jscomp/ExtractPrototypeMemberDeclarations.java",
        "src/com/google/javascript/jscomp/FindExportableNodes.java",
        "src/com/google/javascript/jscomp/FlowScope.java",
        "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "src/com/google/javascript/jscomp/FoldConstants.java",
        "src/com/google/javascript/jscomp/FunctionArgumentInjector.java",
        "src/com/google/javascript/jscomp/FunctionCheck.java",
        "src/com/google/javascript/jscomp/FunctionInjector.java",
        "src/com/google/javascript/jscomp/FunctionNames.java",
        "src/com/google/javascript/jscomp/FunctionRewriter.java",
        "src/com/google/javascript/jscomp/FunctionToBlockMutator.java",
        "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "src/com/google/javascript/jscomp/GatherSideEffectSubexpressionsCallback.java",
        "src/com/google/javascript/jscomp/GenerateExports.java",
        "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "src/com/google/javascript/jscomp/GoogleCodeRemoval.java",
        "src/com/google/javascript/jscomp/GoogleCodingConvention.java",
        "src/com/google/javascript/jscomp/InferJSDocInfo.java",
        "src/com/google/javascript/jscomp/InlineCostEstimator.java",
        "src/com/google/javascript/jscomp/InlineFunctions.java",
        "src/com/google/javascript/jscomp/InlineGetters.java",
        "src/com/google/javascript/jscomp/InlineVariables.java",
        "src/com/google/javascript/jscomp/InstrumentFunctions.java",
        "src/com/google/javascript/jscomp/InvocationsCallback.java",
        "src/com/google/javascript/jscomp/JSError.java",
        "src/com/google/javascript/jscomp/JSModule.java",
        "src/com/google/javascript/jscomp/JSModuleGraph.java",
        "src/com/google/javascript/jscomp/JSSourceFile.java",
        "src/com/google/javascript/jscomp/JsAst.java",
        "src/com/google/javascript/jscomp/LightweightMessageFormatter.java",
        "src/com/google/javascript/jscomp/LineNumberCheck.java",
        "src/com/google/javascript/jscomp/LinkedFlowScope.java",
        "src/com/google/javascript/jscomp/LiveVariablesAnalysis.java",
        "src/com/google/javascript/jscomp/LocaleUtil.java",
        "src/com/google/javascript/jscomp/LoggerErrorManager.java",
        "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "src/com/google/javascript/jscomp/MarkNoSideEffectCalls.java",
        "src/com/google/javascript/jscomp/MaybeReachingVariableUse.java",
        "src/com/google/javascript/jscomp/MemoizedScopeCreator.java",
        "src/com/google/javascript/jscomp/MessageFormatter.java",
        "src/com/google/javascript/jscomp/MethodCheck.java",
        "src/com/google/javascript/jscomp/MethodCompilerPass.java",
        "src/com/google/javascript/jscomp/MinimizeExitPoints.java",
        "src/com/google/javascript/jscomp/MoveFunctionDeclarations.java",
        "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java",
        "src/com/google/javascript/jscomp/NameAnalyzer.java",
        "src/com/google/javascript/jscomp/NameAnonymousFunctions.java",
        "src/com/google/javascript/jscomp/NameAnonymousFunctionsMapped.java",
        "src/com/google/javascript/jscomp/NameGenerator.java",
        "src/com/google/javascript/jscomp/NameReferenceGraph.java",
        "src/com/google/javascript/jscomp/NameReferenceGraphConstruction.java",
        "src/com/google/javascript/jscomp/NodeIterators.java",
        "src/com/google/javascript/jscomp/NodeNameExtractor.java",
        "src/com/google/javascript/jscomp/NodeTraversal.java",
        "src/com/google/javascript/jscomp/NodeTypeNormalizer.java",
        "src/com/google/javascript/jscomp/NodeUtil.java",
        "src/com/google/javascript/jscomp/Normalize.java",
        "src/com/google/javascript/jscomp/ObjectPropertyStringPostprocess.java",
        "src/com/google/javascript/jscomp/ObjectPropertyStringPreprocess.java",
        "src/com/google/javascript/jscomp/OptimizeArgumentsArray.java",
        "src/com/google/javascript/jscomp/OptimizeParameters.java",
        "src/com/google/javascript/jscomp/ParallelCompilerPass.java",
        "src/com/google/javascript/jscomp/PassConfig.java",
        "src/com/google/javascript/jscomp/PassFactory.java",
        "src/com/google/javascript/jscomp/PerformanceTracker.java",
        "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "src/com/google/javascript/jscomp/Position.java",
        "src/com/google/javascript/jscomp/PotentialCheck.java",
        "src/com/google/javascript/jscomp/PotentialCheckManager.java",
        "src/com/google/javascript/jscomp/PrintStreamErrorManager.java",
        "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "src/com/google/javascript/jscomp/ProcessDefines.java",
        "src/com/google/javascript/jscomp/PropertyRenamingPolicy.java",
        "src/com/google/javascript/jscomp/PureFunctionIdentifier.java",
        "src/com/google/javascript/jscomp/RecordFunctionInformation.java",
        "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java",
        "src/com/google/javascript/jscomp/Region.java",
        "src/com/google/javascript/jscomp/RemoveConstantExpressions.java",
        "src/com/google/javascript/jscomp/RemoveConstantExpressionsParallel.java",
        "src/com/google/javascript/jscomp/RemoveTryCatch.java",
        "src/com/google/javascript/jscomp/RemoveUnusedNames.java",
        "src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java",
        "src/com/google/javascript/jscomp/RemoveUnusedVars.java",
        "src/com/google/javascript/jscomp/RenameLabels.java",
        "src/com/google/javascript/jscomp/RenameProperties.java",
        "src/com/google/javascript/jscomp/RenamePrototypes.java",
        "src/com/google/javascript/jscomp/RenameVars.java",
        "src/com/google/javascript/jscomp/ReplaceCssNames.java",
        "src/com/google/javascript/jscomp/ReplaceIdGenerators.java",
        "src/com/google/javascript/jscomp/Result.java",
        "src/com/google/javascript/jscomp/ReverseAbstractInterpreter.java",
        "src/com/google/javascript/jscomp/RhinoErrorReporter.java",
        "src/com/google/javascript/jscomp/SanityCheck.java",
        "src/com/google/javascript/jscomp/Scope.java",
        "src/com/google/javascript/jscomp/ScopeCreator.java",
        "src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java",
        "src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java",
        "src/com/google/javascript/jscomp/SimpleDefinitionFinder.java",
        "src/com/google/javascript/jscomp/SimpleRegion.java",
        "src/com/google/javascript/jscomp/SourceAst.java",
        "src/com/google/javascript/jscomp/SourceExcerptProvider.java",
        "src/com/google/javascript/jscomp/SourceFile.java",
        "src/com/google/javascript/jscomp/SourceInformationAnnotator.java",
        "src/com/google/javascript/jscomp/SourceMap.java",
        "src/com/google/javascript/jscomp/StrictModeCheck.java",
        "src/com/google/javascript/jscomp/StrictWarningsGuard.java",
        "src/com/google/javascript/jscomp/StripCode.java",
        "src/com/google/javascript/jscomp/SuspiciousPropertiesCheck.java",
        "src/com/google/javascript/jscomp/SymbolTable.java",
        "src/com/google/javascript/jscomp/SyntacticScopeCreator.java",
        "src/com/google/javascript/jscomp/SyntheticAst.java",
        "src/com/google/javascript/jscomp/TightenTypes.java",
        "src/com/google/javascript/jscomp/TypeCheck.java",
        "src/com/google/javascript/jscomp/TypeInference.java",
        "src/com/google/javascript/jscomp/TypeInferencePass.java",
        "src/com/google/javascript/jscomp/TypeValidator.java",
        "src/com/google/javascript/jscomp/TypedCodeGenerator.java",
        "src/com/google/javascript/jscomp/TypedScopeCreator.java",
        "src/com/google/javascript/jscomp/UnreachableCodeElimination.java",
        "src/com/google/javascript/jscomp/UseSite.java",
        "src/com/google/javascript/jscomp/VarCheck.java",
        "src/com/google/javascript/jscomp/VariableMap.java",
        "src/com/google/javascript/jscomp/VariableNameGenerator.java",
        "src/com/google/javascript/jscomp/VariableReferenceCheck.java",
        "src/com/google/javascript/jscomp/VariableRenamingPolicy.java",
        "src/com/google/javascript/jscomp/VariableShadowDeclarationCheck.java",
        "src/com/google/javascript/jscomp/VerboseMessageFormatter.java",
        "src/com/google/javascript/jscomp/WarningLevel.java",
        "src/com/google/javascript/jscomp/WarningsGuard.java",
        "src/com/google/javascript/jscomp/graph/AdjacencyGraph.java",
        "src/com/google/javascript/jscomp/graph/Annotatable.java",
        "src/com/google/javascript/jscomp/graph/Annotation.java",
        "src/com/google/javascript/jscomp/graph/DiGraph.java",
        "src/com/google/javascript/jscomp/graph/FixedPointGraphTraversal.java",
        "src/com/google/javascript/jscomp/graph/Graph.java",
        "src/com/google/javascript/jscomp/graph/GraphColoring.java",
        "src/com/google/javascript/jscomp/graph/GraphNode.java",
        "src/com/google/javascript/jscomp/graph/GraphReachability.java",
        "src/com/google/javascript/jscomp/graph/GraphvizGraph.java",
        "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java",
        "src/com/google/javascript/jscomp/graph/StandardUnionFind.java",
        "src/com/google/javascript/jscomp/graph/SubGraph.java",
        "src/com/google/javascript/jscomp/graph/UndiGraph.java",
        "src/com/google/javascript/jscomp/graph/UnionFind.java",
        "src/com/google/javascript/jscomp/parsing/Config.java",
        "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "src/com/google/javascript/jscomp/parsing/JsDocToken.java",
        "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "src/com/google/javascript/jscomp/parsing/NullErrorReporter.java",
        "src/com/google/javascript/jscomp/parsing/ParserRunner.java",
        "src/com/google/javascript/jscomp/parsing/TypeSafeDispatcher.java",
        "src/com/google/javascript/rhino/CompilerEnvirons.java",
        "src/com/google/javascript/rhino/Context.java",
        "src/com/google/javascript/rhino/DToA.java",
        "src/com/google/javascript/rhino/Decompiler.java",
        "src/com/google/javascript/rhino/EcmaError.java",
        "src/com/google/javascript/rhino/ErrorReporter.java",
        "src/com/google/javascript/rhino/EvaluatorException.java",
        "src/com/google/javascript/rhino/FunctionNode.java",
        "src/com/google/javascript/rhino/IRFactory.java",
        "src/com/google/javascript/rhino/JSDocInfo.java",
        "src/com/google/javascript/rhino/JSDocInfoBuilder.java",
        "src/com/google/javascript/rhino/JSTypeExpression.java",
        "src/com/google/javascript/rhino/JavaScriptException.java",
        "src/com/google/javascript/rhino/Kit.java",
        "src/com/google/javascript/rhino/Node.java",
        "src/com/google/javascript/rhino/ObjArray.java",
        "src/com/google/javascript/rhino/ObjToIntMap.java",
        "src/com/google/javascript/rhino/Parser.java",
        "src/com/google/javascript/rhino/RhinoException.java",
        "src/com/google/javascript/rhino/ScriptOrFnNode.java",
        "src/com/google/javascript/rhino/ScriptRuntime.java",
        "src/com/google/javascript/rhino/SimpleErrorReporter.java",
        "src/com/google/javascript/rhino/SourcePosition.java",
        "src/com/google/javascript/rhino/Token.java",
        "src/com/google/javascript/rhino/TokenStream.java",
        "src/com/google/javascript/rhino/UintMap.java",
        "src/com/google/javascript/rhino/UniqueTag.java",
        "src/com/google/javascript/rhino/jstype/AllType.java",
        "src/com/google/javascript/rhino/jstype/ArrowType.java",
        "src/com/google/javascript/rhino/jstype/BooleanLiteralSet.java",
        "src/com/google/javascript/rhino/jstype/BooleanType.java",
        "src/com/google/javascript/rhino/jstype/EnumElementType.java",
        "src/com/google/javascript/rhino/jstype/EnumType.java",
        "src/com/google/javascript/rhino/jstype/ErrorFunctionType.java",
        "src/com/google/javascript/rhino/jstype/FunctionParamBuilder.java",
        "src/com/google/javascript/rhino/jstype/FunctionPrototypeType.java",
        "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "src/com/google/javascript/rhino/jstype/IndexedType.java",
        "src/com/google/javascript/rhino/jstype/InstanceObjectType.java",
        "src/com/google/javascript/rhino/jstype/JSType.java",
        "src/com/google/javascript/rhino/jstype/JSTypeNative.java",
        "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "src/com/google/javascript/rhino/jstype/NamedType.java",
        "src/com/google/javascript/rhino/jstype/NoObjectType.java",
        "src/com/google/javascript/rhino/jstype/NoType.java",
        "src/com/google/javascript/rhino/jstype/NullType.java",
        "src/com/google/javascript/rhino/jstype/NumberType.java",
        "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "src/com/google/javascript/rhino/jstype/ParameterizedType.java",
        "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "src/com/google/javascript/rhino/jstype/ProxyObjectType.java",
        "src/com/google/javascript/rhino/jstype/RecordType.java",
        "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java",
        "src/com/google/javascript/rhino/jstype/SimpleSlot.java",
        "src/com/google/javascript/rhino/jstype/StaticScope.java",
        "src/com/google/javascript/rhino/jstype/StaticSlot.java",
        "src/com/google/javascript/rhino/jstype/StringType.java",
        "src/com/google/javascript/rhino/jstype/TemplateType.java",
        "src/com/google/javascript/rhino/jstype/TernaryValue.java",
        "src/com/google/javascript/rhino/jstype/UnionType.java",
        "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "src/com/google/javascript/rhino/jstype/UnknownType.java",
        "src/com/google/javascript/rhino/jstype/ValueType.java",
        "src/com/google/javascript/rhino/jstype/Visitor.java",
        "src/com/google/javascript/rhino/jstype/VoidType.java"
      ],
      "num": 298
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [
        "com.google.javascript.jscomp.Compiler:process:[CompilerPass p]:void",
        "com.google.javascript.jscomp.NodeUtil:isNodeTypeReferenced:[Node node, int type]:boolean",
        "com.google.javascript.jscomp.NodeUtil:removeChild:[Node parent, Node node]:void",
        "com.google.javascript.jscomp.Compiler:compile:[JSSourceFile[] externs, JSSourceFile[] inputs, CompilerOptions options]:Result",
        "com.google.javascript.jscomp.CompilerOptions:enables:[DiagnosticGroup type]:boolean",
        "com.google.javascript.jscomp.Compiler:moveFunctionDeclarations:[]:void",
        "com.google.javascript.jscomp.DefaultCodingConvention:extractClassNameIfProvide:[Node node, Node parent]:String",
        "com.google.javascript.jscomp.Compiler:initInputsByNameMap:[]:void",
        "com.google.javascript.jscomp.DefaultCodingConvention:isExported:[String name]:boolean",
        "com.google.javascript.jscomp.CodingConvention:isVarArgsParameter:[Node parameter]:boolean",
        "com.google.javascript.jscomp.MaybeReachingVariableUse\\$ReachingUses:ReachingUses:[]:null",
        "com.google.javascript.jscomp.NodeUtil:getNameReferenceCount:[Node node, String name]:int",
        "com.google.javascript.jscomp.DefaultCodingConvention:allowsVariableRedeclaration:[Scope scope, String name, Node parent]:boolean",
        "com.google.javascript.jscomp.NodeUtil\\$MatchNameNode:apply:[Node n]:boolean",
        "com.google.javascript.jscomp.NodeUtil:isSimpleFunctionObjectCall:[Node callNode]:boolean",
        "com.google.javascript.jscomp.Compiler:compile:[JSSourceFile extern, JSSourceFile[] input, CompilerOptions options]:Result",
        "com.google.javascript.jscomp.Compiler:parseInputs:[]:Node",
        "com.google.javascript.jscomp.OptimizeArgumentsArray:getNewName:[]:String",
        "com.google.javascript.jscomp.NodeUtil:newName:[String name, Node basisNode, String originalName]:Node",
        "com.google.javascript.jscomp.RenameVars:reusePreviouslyUsedVariableMap:[]:void",
        "com.google.javascript.jscomp.DeadAssignmentsElimination:visit:[NodeTraversal t, Node n, Node parent]:void",
        "com.google.javascript.jscomp.DeadAssignmentsElimination:exitScope:[NodeTraversal t]:void",
        "com.google.javascript.jscomp.NodeUtil:newVarNode:[String name, Node value]:Node",
        "com.google.javascript.jscomp.Compiler:getDefaultErrorReporter:[]:ErrorReporter",
        "com.google.javascript.jscomp.MaybeReachingVariableUse:createInitialEstimateLattice:[]:ReachingUses",
        "com.google.javascript.jscomp.NodeUtil:isCall:[Node n]:boolean",
        "com.google.javascript.jscomp.RenameVars\\$ProcessVars:incCount:[String name, CompilerInput input]:void",
        "com.google.javascript.jscomp.NodeUtil:isFunctionObjectCall:[Node callNode]:boolean",
        "com.google.javascript.jscomp.NodeUtil\\$MatchNodeType:apply:[Node n]:boolean",
        "com.google.javascript.jscomp.Compiler:parseTestCode:[String js]:Node",
        "com.google.javascript.jscomp.Compiler:setCssRenamingMap:[CssRenamingMap map]:void",
        "com.google.javascript.jscomp.NodeUtil:isLiteralValue:[Node n]:boolean",
        "com.google.javascript.jscomp.CodingConvention:defineDelegateProxyProperties:[JSTypeRegistry registry, Scope scope, Map\u003cObjectType,ObjectType\u003e delegateProxyMap]:void",
        "com.google.javascript.jscomp.Compiler:parseSyntheticCode:[String js]:Node",
        "com.google.javascript.jscomp.CodingConvention:isExported:[String name, boolean local]:boolean",
        "com.google.javascript.jscomp.Compiler:compile:[JSSourceFile extern, JSSourceFile input, CompilerOptions options]:Result",
        "com.google.javascript.jscomp.ControlFlowGraph:isImplicitReturn:[DiGraphNode\u003cN,ControlFlowGraph.Branch\u003e node]:boolean",
        "com.google.javascript.jscomp.NodeUtil:referencesThis:[Node n]:boolean",
        "com.google.javascript.jscomp.CodingConvention:getDelegateRelationship:[Node callNode]:DelegateRelationship",
        "com.google.javascript.jscomp.Compiler:extractPrototypeMemberDeclarations:[]:void",
        "com.google.javascript.jscomp.Compiler:aliasExternals:[]:void",
        "com.google.javascript.jscomp.DeadAssignmentsElimination:enterScope:[NodeTraversal t]:void",
        "com.google.javascript.jscomp.Compiler:compileInternal:[]:void",
        "com.google.javascript.jscomp.CodingConvention:isExported:[String name]:boolean",
        "com.google.javascript.jscomp.GoogleCodingConvention:isPrivate:[String name]:boolean",
        "com.google.javascript.jscomp.NodeUtil\\$MatchNodeType:MatchNodeType:[int type]:null",
        "com.google.javascript.jscomp.RhinoErrorReporter:replacePlaceHolders:[String s]:String",
        "com.google.javascript.jscomp.MaybeReachingVariableUse\\$ReachingUses:hashCode:[]:int",
        "com.google.javascript.jscomp.Compiler:getModuleGraph:[]:JSModuleGraph",
        "com.google.javascript.jscomp.Compiler:hasHaltingErrors:[]:boolean",
        "com.google.javascript.jscomp.DeadAssignmentsElimination:tryRemoveAssignment:[NodeTraversal t, Node n, FlowState\u003cLiveVariableLattice\u003e state]:void",
        "com.google.javascript.jscomp.NodeUtil:constructorCallHasSideEffects:[Node callNode]:boolean",
        "com.google.javascript.jscomp.Compiler:report:[JSError error]:void",
        "com.google.javascript.jscomp.NodeUtil:isNameReferenced:[Node node, String name, Predicate\u003cNode\u003e traverseChildrenPred]:boolean",
        "com.google.javascript.jscomp.NodeUtil:isAnonymousFunction:[Node n]:boolean",
        "com.google.javascript.jscomp.NodeUtil:getAddingRoot:[Node n]:Node",
        "com.google.javascript.jscomp.RhinoErrorReporter:error:[String message, String sourceName, int line, String lineSource, int lineOffset]:void",
        "com.google.javascript.jscomp.Compiler:newTracer:[String passName]:Tracer",
        "com.google.javascript.jscomp.Compiler:getErrors:[]:JSError[]",
        "com.google.javascript.jscomp.Compiler:addIncrementalSourceAst:[JsAst ast]:void",
        "com.google.javascript.jscomp.NodeUtil:isThis:[Node node]:boolean",
        "com.google.javascript.jscomp.DefaultCodingConvention:isSuperClassReference:[String propertyName]:boolean",
        "com.google.javascript.jscomp.DefaultCodingConvention:getGlobalObject:[]:String",
        "com.google.javascript.jscomp.RenameVars\\$ProcessVars:ProcessVars:[boolean isExterns]:null",
        "com.google.javascript.jscomp.RhinoErrorReporter\\$NewRhinoErrorReporter:NewRhinoErrorReporter:[AbstractCompiler compiler]:null",
        "com.google.javascript.jscomp.Compiler:toSource:[Node n]:String",
        "com.google.javascript.jscomp.Compiler:renameVars:[String renamePrefix, boolean renameLocalVarsOnly, AnonymousFunctionNamingPolicy anonFunctionNamePolicy, VariableMap prevVariableMap]:void",
        "com.google.javascript.jscomp.DefaultCodingConvention:getDelegateRelationship:[Node callNode]:DelegateRelationship",
        "com.google.javascript.jscomp.Compiler:isIdeMode:[]:boolean",
        "com.google.javascript.jscomp.NodeUtil:isFunctionObjectApply:[Node callNode]:boolean",
        "com.google.javascript.jscomp.NodeUtil:isGetProp:[Node n]:boolean",
        "com.google.javascript.jscomp.Compiler:getErrorManager:[]:ErrorManager",
        "com.google.javascript.jscomp.NodeUtil:NodeUtil:[]:null",
        "com.google.javascript.jscomp.MaybeReachingVariableUse\\$ReachingUsesJoinOp:apply:[List\u003cReachingUses\u003e from]:ReachingUses",
        "com.google.javascript.jscomp.CompilerOptions:setWarningLevel:[DiagnosticGroup type, CheckLevel level]:void",
        "com.google.javascript.jscomp.Compiler:normalizeNodeTypes:[Node root]:void",
        "com.google.javascript.jscomp.Compiler:addToDebugLog:[String str]:void",
        "com.google.javascript.jscomp.NodeUtil:copyNameAnnotations:[Node source, Node destination]:void",
        "com.google.javascript.jscomp.Compiler:Compiler:[PrintStream stream]:null",
        "com.google.javascript.jscomp.Compiler:externExports:[]:void",
        "com.google.javascript.jscomp.Compiler:denormalize:[]:void",
        "com.google.javascript.jscomp.RhinoErrorReporter\\$OldRhinoErrorReporter:runtimeError:[String message, String sourceName, int line, String lineSource, int lineOffset]:EvaluatorException",
        "com.google.javascript.jscomp.Compiler:acquireSymbolTable:[]:SymbolTable",
        "com.google.javascript.jscomp.CompilerOptions:isOn:[]:boolean",
        "com.google.javascript.jscomp.NodeUtil:isLoopStructure:[Node n]:boolean",
        "com.google.javascript.jscomp.Compiler:setNormalized:[]:void",
        "com.google.javascript.jscomp.Compiler:getResult:[]:Result",
        "com.google.javascript.jscomp.Compiler:compile:[JSSourceFile[] externs, JSModule[] modules, CompilerOptions options]:Result",
        "com.google.javascript.jscomp.Compiler:computeCFG:[]:ControlFlowGraph\u003cNode\u003e",
        "com.google.javascript.jscomp.Compiler:getSourceLine:[String sourceName, int lineNumber]:String",
        "com.google.javascript.jscomp.Compiler:newExternInput:[String name]:CompilerInput",
        "com.google.javascript.jscomp.RhinoErrorReporter:forNewRhino:[AbstractCompiler compiler]:com.google.javascript.jscomp.mozilla.rhino.ErrorReporter",
        "com.google.javascript.jscomp.CodingConvention:applySingletonGetter:[FunctionType functionType, FunctionType getterType, ObjectType objectType]:void",
        "com.google.javascript.jscomp.Compiler:setErrorManager:[ErrorManager errorManager]:void",
        "com.google.javascript.jscomp.CodingConvention:isValidEnumKey:[String key]:boolean",
        "com.google.javascript.jscomp.RenameVars:RenameVars:[AbstractCompiler compiler, String prefix, boolean localRenamingOnly, boolean preserveAnonymousFunctionNames, VariableMap prevUsedRenameMap, @Nullable char[] reservedCharacters, @Nullable Set\u003cString\u003e reservedNames]:null",
        "com.google.javascript.jscomp.Compiler:removeTryCatchFinally:[]:void",
        "com.google.javascript.jscomp.Compiler:setCodingConvention:[CodingConvention convention]:void",
        "com.google.javascript.jscomp.DefaultCodingConvention:identifyTypeDefAssign:[Node n]:String",
        "com.google.javascript.jscomp.CompilerOptions:clone:[]:Object",
        "com.google.javascript.jscomp.Compiler:reportCodeChange:[]:void",
        "com.google.javascript.jscomp.Compiler:getErrorCount:[]:int",
        "com.google.javascript.jscomp.MaybeReachingVariableUse:computeMayUse:[Node n, Node cfgNode, ReachingUses output, boolean conditional]:void",
        "com.google.javascript.jscomp.Compiler:runCustomPasses:[CustomPassExecutionTime executionTime]:void",
        "com.google.javascript.jscomp.Compiler:Compiler:[ErrorManager errorManager]:null",
        "com.google.javascript.jscomp.Compiler:getWarningCount:[]:int",
        "com.google.javascript.jscomp.NodeUtil:getFnParameters:[Node fnNode]:Node",
        "com.google.javascript.jscomp.Compiler:parse:[JSSourceFile file]:Node",
        "com.google.javascript.jscomp.NodeUtil:isPrototypePropertyDeclaration:[Node n]:boolean",
        "com.google.javascript.jscomp.CodingConvention:isPrivate:[String name]:boolean",
        "com.google.javascript.jscomp.Compiler:resetUniqueNameId:[]:void",
        "com.google.javascript.jscomp.Compiler:stripCode:[Set\u003cString\u003e stripTypes, Set\u003cString\u003e stripNameSuffixes, Set\u003cString\u003e stripTypePrefixes, Set\u003cString\u003e stripNamePrefixes]:void",
        "com.google.javascript.jscomp.RhinoErrorReporter:warning:[String message, String sourceName, int line, String lineSource, int lineOffset]:void",
        "com.google.javascript.jscomp.DeadAssignmentsElimination:tryRemoveDeadAssignments:[NodeTraversal t, ControlFlowGraph\u003cNode\u003e cfg]:void",
        "com.google.javascript.jscomp.NodeUtil:visitPostOrder:[Node node, Visitor vistor, Predicate\u003cNode\u003e traverseChildrenPred]:void",
        "com.google.javascript.jscomp.GoogleCodingConvention:isExported:[String name, boolean local]:boolean",
        "com.google.javascript.jscomp.NodeUtil:isFunctionAnonymous:[Node n]:boolean",
        "com.google.javascript.jscomp.Compiler\\$CodeBuilder:getColumnIndex:[]:int",
        "com.google.javascript.jscomp.Compiler:createMessageFormatter:[]:MessageFormatter",
        "com.google.javascript.jscomp.NodeUtil\\$VarCollector:visit:[Node n]:void",
        "com.google.javascript.jscomp.NodeUtil:isValidDefineValue:[Node val, Set\u003cString\u003e defines]:boolean",
        "com.google.javascript.jscomp.NodeUtil:isControlStructureCodeBlock:[Node parent, Node n]:boolean",
        "com.google.javascript.jscomp.RenameVars:finalizeNameAssignment:[Assignment a, String newName]:void",
        "com.google.javascript.jscomp.CompilerOptions:setChainCalls:[boolean value]:void",
        "com.google.javascript.jscomp.CompilerOptions:setNameAnonymousFunctionsOnly:[boolean value]:void",
        "com.google.javascript.jscomp.NodeUtil:getAssignedValue:[Node n]:Node",
        "com.google.javascript.jscomp.DefaultCodingConvention:extractClassNameIfRequire:[Node node, Node parent]:String",
        "com.google.javascript.jscomp.CodingConvention:getSingletonGetterClassName:[Node callNode]:String",
        "com.google.javascript.jscomp.DefaultCodingConvention:applyDelegateRelationship:[ObjectType delegateSuperclass, ObjectType delegateBase, ObjectType delegator, FunctionType delegateProxy, FunctionType findDelegate]:void",
        "com.google.javascript.jscomp.Compiler:getSourceMap:[]:SourceMap",
        "com.google.javascript.jscomp.MaybeReachingVariableUse:addToUseIfLocal:[String name, Node node, ReachingUses use]:void",
        "com.google.javascript.jscomp.CompilerOptions:getWarningsGuard:[]:WarningsGuard",
        "com.google.javascript.jscomp.Compiler:setPassConfig:[PassConfig passes]:void",
        "com.google.javascript.jscomp.Compiler:normalize:[]:void",
        "com.google.javascript.jscomp.Compiler:isTypeCheckingEnabled:[]:boolean",
        "com.google.javascript.jscomp.NodeUtil:hasCatchHandler:[Node n]:boolean",
        "com.google.javascript.jscomp.MaybeReachingVariableUse:createEntryLattice:[]:ReachingUses",
        "com.google.javascript.jscomp.Compiler:getOptions:[]:CompilerOptions",
        "com.google.javascript.jscomp.CodingConvention:isSuperClassReference:[String propertyName]:boolean",
        "com.google.javascript.jscomp.Compiler:isInliningForbidden:[]:boolean",
        "com.google.javascript.jscomp.NodeUtil:isVar:[Node n]:boolean",
        "com.google.javascript.jscomp.NodeUtil:isFunction:[Node n]:boolean",
        "com.google.javascript.jscomp.NodeUtil:isExpressionNode:[Node n]:boolean",
        "com.google.javascript.jscomp.CompilerOptions:addWarningsGuard:[WarningsGuard guard]:void",
        "com.google.javascript.jscomp.NodeUtil:isConstantName:[Node node]:boolean",
        "com.google.javascript.jscomp.NodeUtil:getBooleanValue:[Node n]:boolean",
        "com.google.javascript.jscomp.Compiler:getTypeRegistry:[]:JSTypeRegistry",
        "com.google.javascript.jscomp.CodingConvention:getExportPropertyFunction:[]:String",
        "com.google.javascript.jscomp.DefaultCodingConvention:applySingletonGetter:[FunctionType functionType, FunctionType getterType, ObjectType objectType]:void",
        "com.google.javascript.jscomp.NodeUtil:getFunctionBody:[Node fn]:Node",
        "com.google.javascript.jscomp.CodingConvention:identifyTypeDeclarationCall:[Node n]:List\u003cString\u003e",
        "com.google.javascript.jscomp.NodeUtil:isExprCall:[Node n]:boolean",
        "com.google.javascript.jscomp.NodeUtil:getPrototypeClassName:[Node qName]:Node",
        "com.google.javascript.jscomp.CodingConvention\\$ObjectLiteralCast:ObjectLiteralCast:[String typeName, Node objectNode]:null",
        "com.google.javascript.jscomp.DefaultCodingConvention:isPropertyTestFunction:[Node call]:boolean",
        "com.google.javascript.jscomp.Compiler:removeChangeHandler:[CodeChangeHandler handler]:void",
        "com.google.javascript.jscomp.CompilerOptions:setProcessObjectPropertyString:[boolean process]:void",
        "com.google.javascript.jscomp.Compiler:precheck:[]:boolean",
        "com.google.javascript.jscomp.Compiler:rewriteFunctionExpressions:[]:void",
        "com.google.javascript.jscomp.Compiler:sanityCheckVars:[]:void",
        "com.google.javascript.jscomp.Compiler:collapseAnonymousFunctions:[]:void",
        "com.google.javascript.jscomp.Compiler:getCssRenamingMap:[]:CssRenamingMap",
        "com.google.javascript.jscomp.NodeUtil:has:[Node node, Predicate\u003cNode\u003e pred, Predicate\u003cNode\u003e traverseChildrenPred]:boolean",
        "com.google.javascript.jscomp.NodeUtil:isLhs:[Node n, Node parent]:boolean",
        "com.google.javascript.jscomp.Compiler:createPassConfigInternal:[]:PassConfig",
        "com.google.javascript.jscomp.Compiler:getPassConfig:[]:PassConfig",
        "com.google.javascript.jscomp.NodeUtil:isVarArgsFunction:[Node function]:boolean",
        "com.google.javascript.jscomp.Compiler:optimize:[]:void",
        "com.google.javascript.jscomp.CompilerOptions:setRenamingPolicy:[VariableRenamingPolicy newVariablePolicy, PropertyRenamingPolicy newPropertyPolicy]:void",
        "com.google.javascript.jscomp.Compiler:coalesceVariableNames:[]:void",
        "com.google.javascript.jscomp.Compiler\\$CodeBuilder:reset:[]:void",
        "com.google.javascript.jscomp.MaybeReachingVariableUse:MaybeReachingVariableUse:[ControlFlowGraph\u003cNode\u003e cfg, Scope jsScope, AbstractCompiler compiler]:null",
        "com.google.javascript.jscomp.MaybeReachingVariableUse:getUses:[String name, Node defNode]:Collection\u003cNode\u003e",
        "com.google.javascript.jscomp.CompilerOptions:setDefineToBooleanLiteral:[String defineName, boolean value]:void",
        "com.google.javascript.jscomp.NodeUtil:containsCall:[Node n]:boolean",
        "com.google.javascript.jscomp.CodingConvention:extractClassNameIfProvide:[Node node, Node parent]:String",
        "com.google.javascript.jscomp.Compiler:runInCompilerThread:[final Callable\u003cT\u003e callable]:T",
        "com.google.javascript.jscomp.RhinoErrorReporter\\$NewRhinoErrorReporter:runtimeError:[String message, String sourceName, int line, String lineSource, int lineOffset]:com.google.javascript.jscomp.mozilla.rhino.EvaluatorException",
        "com.google.javascript.jscomp.DefaultCodingConvention:getObjectLiteralCast:[NodeTraversal t, Node callNode]:ObjectLiteralCast",
        "com.google.javascript.jscomp.Compiler:getScopeCreator:[]:ScopeCreator",
        "com.google.javascript.jscomp.Compiler:toSource:[final JSModule module]:String",
        "com.google.javascript.jscomp.Compiler:throwInternalError:[String message, Exception cause]:void",
        "com.google.javascript.jscomp.NodeUtil:getCount:[Node n, Predicate\u003cNode\u003e pred]:int",
        "com.google.javascript.jscomp.DefaultCodingConvention:getClassesDefinedByCall:[Node callNode]:SubclassRelationship",
        "com.google.javascript.jscomp.NodeUtil:opToStr:[int operator]:String",
        "com.google.javascript.jscomp.Compiler:nextUniqueNameId:[]:int",
        "com.google.javascript.jscomp.NodeUtil:isImmutableValue:[Node n]:boolean",
        "com.google.javascript.jscomp.Compiler:getWarnings:[]:JSError[]",
        "com.google.javascript.jscomp.DefaultCodingConvention:isExported:[String name, boolean local]:boolean",
        "com.google.javascript.jscomp.NodeUtil:isAssign:[Node n]:boolean",
        "com.google.javascript.jscomp.NodeUtil:getConditionExpression:[Node n]:Node",
        "com.google.javascript.jscomp.Compiler:checkFirstModule:[JSModule[] modules]:void",
        "com.google.javascript.jscomp.DefaultCodingConvention:isVarArgsParameter:[Node parameter]:boolean",
        "com.google.javascript.jscomp.NodeUtil:redeclareVarsInsideBranch:[Node branch]:void",
        "com.google.javascript.jscomp.ControlFlowGraph:getEntry:[]:DiGraphNode\u003cN,ControlFlowGraph.Branch\u003e",
        "com.google.javascript.jscomp.GoogleCodingConvention:isVarArgsParameter:[Node parameter]:boolean",
        "com.google.javascript.jscomp.CodingConvention:getDelegateSuperclassName:[]:String",
        "com.google.javascript.jscomp.NodeUtil\\$Visitor:visit:[Node node]:void",
        "com.google.javascript.jscomp.NodeUtil:containsFunctionDeclaration:[Node n]:boolean",
        "com.google.javascript.jscomp.OptimizeArgumentsArray:tryReplaceArguments:[Scope scope]:boolean",
        "com.google.javascript.jscomp.Compiler:nameAnonymousFunctions:[AnonymousFunctionNamingPolicy policy]:void",
        "com.google.javascript.jscomp.NodeUtil:visitPreOrder:[Node node, Visitor vistor, Predicate\u003cNode\u003e traverseChildrenPred]:void",
        "com.google.javascript.jscomp.GoogleCodingConvention:isConstant:[String name]:boolean",
        "com.google.javascript.jscomp.Compiler:rebuildInputsFromModules:[]:void",
        "com.google.javascript.jscomp.Compiler\\$CodeBuilder:getLength:[]:int",
        "com.google.javascript.jscomp.Compiler:renamePrototypes:[boolean aggressive, AnonymousFunctionNamingPolicy anonFunctionNamePolicy, VariableMap prevPropertyMap]:void",
        "com.google.javascript.jscomp.GoogleCodingConvention:isValidEnumKey:[String key]:boolean",
        "com.google.javascript.jscomp.Compiler:compile:[JSSourceFile extern, JSModule[] modules, CompilerOptions options]:Result",
        "com.google.javascript.jscomp.Compiler:getUniqueNameIdSupplier:[]:Supplier\u003cString\u003e",
        "com.google.javascript.jscomp.Compiler:setState:[IntermediateState state]:void",
        "com.google.javascript.jscomp.CodingConvention:isConstant:[String variableName]:boolean",
        "com.google.javascript.jscomp.Compiler:instrumentFunctions:[]:void",
        "com.google.javascript.jscomp.Compiler:convertToDottedProperties:[]:void",
        "com.google.javascript.jscomp.GoogleCodingConvention:isOptionalParameter:[Node parameter]:boolean",
        "com.google.javascript.jscomp.NodeUtil:isNameReferenced:[Node node, String name]:boolean",
        "com.google.javascript.jscomp.NodeUtil:getSourceName:[Node n]:String",
        "com.google.javascript.jscomp.Compiler:annotateCodingConvention:[Node root]:void",
        "com.google.javascript.jscomp.CompilerOptions:setCollapsePropertiesOnExternTypes:[boolean collapse]:void",
        "com.google.javascript.jscomp.ControlFlowGraph:getImplicitReturn:[]:DiGraphNode\u003cN,ControlFlowGraph.Branch\u003e",
        "com.google.javascript.jscomp.Compiler:getState:[]:IntermediateState",
        "com.google.javascript.jscomp.RhinoErrorReporter:forOldRhino:[AbstractCompiler compiler]:ErrorReporter",
        "com.google.javascript.jscomp.Compiler:addChangeHandler:[CodeChangeHandler handler]:void",
        "com.google.javascript.jscomp.NodeUtil:newUndefinedNode:[]:Node",
        "com.google.javascript.jscomp.CompilerOptions:shouldColorizeErrorOutput:[]:boolean",
        "com.google.javascript.jscomp.CodingConvention:getGlobalObject:[]:String",
        "com.google.javascript.jscomp.DefaultCodingConvention:getExportSymbolFunction:[]:String",
        "com.google.javascript.jscomp.Compiler\\$CodeBuilder:getLineIndex:[]:int",
        "com.google.javascript.jscomp.RenameVars:getVariableMap:[]:VariableMap",
        "com.google.javascript.jscomp.Compiler:Compiler:[]:null",
        "com.google.javascript.jscomp.DefaultCodingConvention:isPrivate:[String name]:boolean",
        "com.google.javascript.jscomp.OptimizeArgumentsArray:enterScope:[NodeTraversal traversal]:void",
        "com.google.javascript.jscomp.Compiler:recordFunctionInformation:[]:void",
        "com.google.javascript.jscomp.DefaultCodingConvention:identifyTypeDeclarationCall:[Node n]:List\u003cString\u003e",
        "com.google.javascript.jscomp.AbstractCfgNodeTraversalCallback:shouldTraverse:[NodeTraversal nodeTraversal, Node n, Node parent]:boolean",
        "com.google.javascript.jscomp.Compiler:setUnnormalized:[]:void",
        "com.google.javascript.jscomp.CodingConvention:isOptionalParameter:[Node parameter]:boolean",
        "com.google.javascript.jscomp.NodeUtil:isGet:[Node n]:boolean",
        "com.google.javascript.jscomp.CodingConvention:isPropertyTestFunction:[Node call]:boolean",
        "com.google.javascript.jscomp.Compiler:init:[JSSourceFile[] externs, JSSourceFile[] inputs, CompilerOptions options]:void",
        "com.google.javascript.jscomp.Compiler:objectPropertyStringPostprocess:[]:void",
        "com.google.javascript.jscomp.DeadAssignmentsElimination:readVariableBeforeKilling:[Node n, String variable]:VariableLiveness",
        "com.google.javascript.jscomp.ControlFlowGraph:isConditional:[]:boolean",
        "com.google.javascript.jscomp.NodeUtil:isObjectLitKey:[Node node, Node parent]:boolean",
        "com.google.javascript.jscomp.NodeUtil:opToStrNoFail:[int operator]:String",
        "com.google.javascript.jscomp.Compiler:getTopScope:[]:Scope",
        "com.google.javascript.jscomp.NodeUtil:isStatement:[Node n]:boolean",
        "com.google.javascript.jscomp.RenameVars:okToRenameVar:[String name, boolean isLocal]:boolean",
        "com.google.javascript.jscomp.ControlFlowGraph:connectToImplicitReturn:[N srcValue, Branch edgeValue]:void",
        "com.google.javascript.jscomp.NodeUtil:isControlStructure:[Node n]:boolean",
        "com.google.javascript.jscomp.NodeUtil:isExprAssign:[Node n]:boolean",
        "com.google.javascript.jscomp.OptimizeArgumentsArray:OptimizeArgumentsArray:[AbstractCompiler compiler, String paramPrefix]:null",
        "com.google.javascript.jscomp.Compiler:getAllInputsFromModules:[]:CompilerInput[]",
        "com.google.javascript.jscomp.NodeUtil:containsType:[Node node, int type, Predicate\u003cNode\u003e traverseChildrenPred]:boolean",
        "com.google.javascript.jscomp.Compiler:parse:[]:void",
        "com.google.javascript.jscomp.CodingConvention:getAbstractMethodName:[]:String",
        "com.google.javascript.jscomp.Compiler:maybeSanityCheck:[String passName]:void",
        "com.google.javascript.jscomp.NodeUtil:isPrototypeProperty:[Node n]:boolean",
        "com.google.javascript.jscomp.Compiler:hasErrors:[]:boolean",
        "com.google.javascript.jscomp.Compiler:disableThreads:[]:void",
        "com.google.javascript.jscomp.NodeUtil:getOpFromAssignmentOp:[Node n]:int",
        "com.google.javascript.jscomp.CompilerOptions:CompilerOptions:[]:null",
        "com.google.javascript.jscomp.NodeUtil:isSwitchCase:[Node n]:boolean",
        "com.google.javascript.jscomp.Compiler:collapseVariableDeclarations:[]:void",
        "com.google.javascript.jscomp.OptimizeArgumentsArray:visit:[NodeTraversal traversal, Node node, Node parent]:void",
        "com.google.javascript.jscomp.RhinoErrorReporter:RhinoErrorReporter:[AbstractCompiler compiler]:null",
        "com.google.javascript.jscomp.NodeUtil:getLoopCodeBlock:[Node n]:Node",
        "com.google.javascript.jscomp.Compiler:getPropertyMap:[]:VariableMap",
        "com.google.javascript.jscomp.NodeUtil:isNew:[Node n]:boolean",
        "com.google.javascript.jscomp.Compiler:getAstDotGraph:[]:String",
        "com.google.javascript.jscomp.NodeUtil:getVarsDeclaredInBranch:[Node root]:Collection\u003cNode\u003e",
        "com.google.javascript.jscomp.CompilerOptions:setIdGenerators:[Set\u003cString\u003e idGenerators]:void",
        "com.google.javascript.jscomp.NodeUtil:isNodeTypeReferenced:[Node node, int type, Predicate\u003cNode\u003e traverseChildrenPred]:boolean",
        "com.google.javascript.jscomp.NodeUtil:newExpr:[Node child]:Node",
        "com.google.javascript.jscomp.NodeUtil:isObjectCallMethod:[Node callNode, String methodName]:boolean",
        "com.google.javascript.jscomp.NodeUtil:mayEffectMutableState:[Node n]:boolean",
        "com.google.javascript.jscomp.NodeUtil:getCatchBlock:[Node n]:Node",
        "com.google.javascript.jscomp.NodeUtil\\$MatchNameNode:MatchNameNode:[String name]:null",
        "com.google.javascript.jscomp.RenameVars\\$Assignment:Assignment:[String name, CompilerInput input]:null",
        "com.google.javascript.jscomp.CodingConvention:getExportSymbolFunction:[]:String",
        "com.google.javascript.jscomp.Compiler:toSource:[final CodeBuilder cb, final int inputSeqNum, final Node root]:void",
        "com.google.javascript.jscomp.MaybeReachingVariableUse:removeFromUseIfLocal:[String name, ReachingUses use]:void",
        "com.google.javascript.jscomp.CodingConvention:allowsVariableRedeclaration:[Scope scope, String name, Node parent]:boolean",
        "com.google.javascript.jscomp.Compiler:makeCompilerInput:[JSSourceFile[] files, boolean isExtern]:CompilerInput[]",
        "com.google.javascript.jscomp.NodeUtil:newName:[String name, Node basisNode]:Node",
        "com.google.javascript.jscomp.OptimizeArgumentsArray:process:[Node externs, Node root]:void",
        "com.google.javascript.jscomp.NodeUtil:hasFinally:[Node n]:boolean",
        "com.google.javascript.jscomp.RenameVars\\$Assignment:setNewName:[String newName]:void",
        "com.google.javascript.jscomp.NodeUtil:getFunctionName:[Node n, Node parent]:String",
        "com.google.javascript.jscomp.DeadAssignmentsElimination:tryRemoveAssignment:[NodeTraversal t, Node n, Node exprRoot, FlowState\u003cLiveVariableLattice\u003e state]:void",
        "com.google.javascript.jscomp.NodeUtil:newFunctionNode:[String name, List\u003cNode\u003e params, Node body, int lineno, int charno]:FunctionNode",
        "com.google.javascript.jscomp.Compiler:getInput:[String name]:CompilerInput",
        "com.google.javascript.jscomp.Compiler\\$CodeBuilder:toString:[]:String",
        "com.google.javascript.jscomp.NodeUtil:precedence:[int type]:int",
        "com.google.javascript.jscomp.Compiler:getReverseAbstractInterpreter:[]:ReverseAbstractInterpreter",
        "com.google.javascript.jscomp.CodingConvention\\$DelegateRelationship:DelegateRelationship:[String delegateBase, String delegator]:null",
        "com.google.javascript.jscomp.RhinoErrorReporter\\$OldRhinoErrorReporter:OldRhinoErrorReporter:[AbstractCompiler compiler]:null",
        "com.google.javascript.jscomp.Compiler:flowSensitiveInlineVariables:[]:void",
        "com.google.javascript.jscomp.NodeUtil:isValidPropertyName:[String name]:boolean",
        "com.google.javascript.jscomp.NodeUtil:tryMergeBlock:[Node block]:boolean",
        "com.google.javascript.jscomp.NodeUtil:nodeTypeMayHaveSideEffects:[Node n]:boolean",
        "com.google.javascript.jscomp.CodingConvention:getClassesDefinedByCall:[Node callNode]:SubclassRelationship",
        "com.google.javascript.jscomp.MaybeReachingVariableUse\\$ReachingUses:equals:[Object other]:boolean",
        "com.google.javascript.jscomp.AbstractCfgNodeTraversalCallback:isEnteringNewCfgNode:[Node n]:boolean",
        "com.google.javascript.jscomp.CodingConvention:getObjectLiteralCast:[NodeTraversal t, Node callNode]:ObjectLiteralCast",
        "com.google.javascript.jscomp.NodeUtil:getInfoForNameNode:[Node nameNode]:JSDocInfo",
        "com.google.javascript.jscomp.NodeUtil:mayHaveSideEffects:[Node n]:boolean",
        "com.google.javascript.jscomp.CompilerOptions:setDefineToStringLiteral:[String defineName, String value]:void",
        "com.google.javascript.jscomp.NodeUtil:functionCallHasSideEffects:[Node callNode]:boolean",
        "com.google.javascript.jscomp.Compiler:getSourceRegion:[String sourceName, int lineNumber]:Region",
        "com.google.javascript.jscomp.NodeUtil:isEmptyBlock:[Node block]:boolean",
        "com.google.javascript.jscomp.Compiler:getSourceFileByName:[String sourceName]:SourceFile",
        "com.google.javascript.jscomp.NodeUtil:checkForStateChangeHelper:[Node n, boolean checkForNewObjects]:boolean",
        "com.google.javascript.jscomp.Compiler:endPass:[]:void",
        "com.google.javascript.jscomp.CompilerOptions:setColorizeErrorOutput:[boolean colorizeErrorOutput]:void",
        "com.google.javascript.jscomp.NodeUtil:isLabelName:[Node n]:boolean",
        "com.google.javascript.jscomp.NodeUtil:isName:[Node n]:boolean",
        "com.google.javascript.jscomp.Compiler\\$CodeBuilder:endsWith:[String suffix]:boolean",
        "com.google.javascript.jscomp.ControlFlowGraph:getOptionalNodeComparator:[boolean isForward]:Comparator\u003cDiGraphNode\u003cN,Branch\u003e\u003e",
        "com.google.javascript.jscomp.CodingConvention\\$SubclassRelationship:SubclassRelationship:[SubclassType type, Node subclassNode, Node superclassNode]:null",
        "com.google.javascript.jscomp.Compiler:startPass:[String passName]:void",
        "com.google.javascript.jscomp.NodeUtil:isAssociative:[int type]:boolean",
        "com.google.javascript.jscomp.MaybeReachingVariableUse\\$ReachingUses:ReachingUses:[ReachingUses other]:null",
        "com.google.javascript.jscomp.NodeUtil:newQualifiedNameNode:[String name, int lineno, int charno]:Node",
        "com.google.javascript.jscomp.NodeUtil:isLatin:[String s]:boolean",
        "com.google.javascript.jscomp.Compiler:aliasKeywords:[]:void",
        "com.google.javascript.jscomp.DefaultCodingConvention:getAbstractMethodName:[]:String",
        "com.google.javascript.jscomp.Compiler:renameProperties:[boolean generatePseudoNames, AnonymousFunctionNamingPolicy anonFunctionNamePolicy, VariableMap prevPropertyMap]:void",
        "com.google.javascript.jscomp.CompilerOptions:skipAllCompilerPasses:[]:void",
        "com.google.javascript.jscomp.DefaultCodingConvention:isValidEnumKey:[String key]:boolean",
        "com.google.javascript.jscomp.CodingConvention:identifyTypeDefAssign:[Node n]:String",
        "com.google.javascript.jscomp.Compiler:getCodingConvention:[]:CodingConvention",
        "com.google.javascript.jscomp.Compiler:toSourceArray:[final JSModule module]:String[]",
        "com.google.javascript.jscomp.Compiler:getRoot:[]:Node",
        "com.google.javascript.jscomp.MaybeReachingVariableUse:flowThrough:[Node n, ReachingUses input]:ReachingUses",
        "com.google.javascript.jscomp.Compiler:stopTracer:[Tracer t, String passName]:void",
        "com.google.javascript.jscomp.NodeUtil:canBeSideEffected:[Node n, Set\u003cString\u003e knownConstants]:boolean",
        "com.google.javascript.jscomp.NodeUtil:isFunctionDeclaration:[Node n]:boolean",
        "com.google.javascript.jscomp.Compiler:toSource:[]:String",
        "com.google.javascript.jscomp.NodeUtil:containsType:[Node node, int type]:boolean",
        "com.google.javascript.jscomp.Compiler\\$CodeBuilder:append:[String str]:CodeBuilder",
        "com.google.javascript.jscomp.NodeUtil:isVarDeclaration:[Node n]:boolean",
        "com.google.javascript.jscomp.NodeUtil:setDebugInformation:[Node node, Node basisNode, String originalName]:void",
        "com.google.javascript.jscomp.RhinoErrorReporter:makeError:[String message, String sourceName, int line, int lineOffset, CheckLevel defaultLevel]:JSError",
        "com.google.javascript.jscomp.RenameVars\\$ProcessVars:visit:[NodeTraversal t, Node n, Node parent]:void",
        "com.google.javascript.jscomp.DeadAssignmentsElimination:DeadAssignmentsElimination:[AbstractCompiler compiler]:null",
        "com.google.javascript.jscomp.CodingConvention:extractClassNameIfRequire:[Node node, Node parent]:String",
        "com.google.javascript.jscomp.Compiler:getVariableMap:[]:VariableMap",
        "com.google.javascript.jscomp.RenameVars:assignNames:[Set\u003cAssignment\u003e varsToRename]:void",
        "com.google.javascript.jscomp.NodeUtil:isTryFinallyNode:[Node parent, Node child]:boolean",
        "com.google.javascript.jscomp.Compiler:isNormalized:[]:boolean",
        "com.google.javascript.jscomp.CompilerOptions:setDefineToNumberLiteral:[String defineName, int value]:void",
        "com.google.javascript.jscomp.Compiler:processDefines:[]:void",
        "com.google.javascript.jscomp.DefaultCodingConvention:getSingletonGetterClassName:[Node callNode]:String",
        "com.google.javascript.jscomp.DeadAssignmentsElimination:process:[Node externs, Node root]:void",
        "com.google.javascript.jscomp.CodingConvention:applySubclassRelationship:[FunctionType parentCtor, FunctionType childCtor, SubclassType type]:void",
        "com.google.javascript.jscomp.Compiler:toSourceArray:[]:String[]",
        "com.google.javascript.jscomp.NodeUtil:getPrototypePropertyName:[Node qName]:String",
        "com.google.javascript.jscomp.DefaultCodingConvention:defineDelegateProxyProperties:[JSTypeRegistry registry, Scope scope, Map\u003cObjectType,ObjectType\u003e delegateProxyMap]:void",
        "com.google.javascript.jscomp.NodeUtil:canBeSideEffected:[Node n]:boolean",
        "com.google.javascript.jscomp.OptimizeArgumentsArray:shouldTraverse:[NodeTraversal nodeTraversal, Node node, Node parent]:boolean",
        "com.google.javascript.jscomp.DefaultCodingConvention:getDelegateSuperclassName:[]:String",
        "com.google.javascript.jscomp.Compiler:renameLabels:[]:void",
        "com.google.javascript.jscomp.CodingConvention:applyDelegateRelationship:[ObjectType delegateSuperclass, ObjectType delegateBase, ObjectType delegator, FunctionType delegateProxy, FunctionType findDelegate]:void",
        "com.google.javascript.jscomp.NodeUtil:getNodeTypeReferenceCount:[Node node, int type]:int",
        "com.google.javascript.jscomp.Compiler:check:[]:void",
        "com.google.javascript.jscomp.Compiler:aliasStrings:[Set\u003cString\u003e aliasableStrings, boolean aliasAllStrings, String aliasStringsBlacklist, boolean outputStringUsage]:void",
        "com.google.javascript.jscomp.Compiler:getNodeForCodeInsertion:[JSModule module]:Node",
        "com.google.javascript.jscomp.Compiler:computeFunctionNames:[]:void",
        "com.google.javascript.jscomp.Compiler:ambiguateProperties:[char[] reservedCharacters]:void",
        "com.google.javascript.jscomp.Compiler:invertContextualRenaming:[]:void",
        "com.google.javascript.jscomp.DeadAssignmentsElimination:isVariableStillLiveWithinExpression:[Node n, Node exprRoot, String variable]:boolean",
        "com.google.javascript.jscomp.CompilerOptions:setRewriteNewDateGoogNow:[boolean rewrite]:void",
        "com.google.javascript.jscomp.OptimizeArgumentsArray:OptimizeArgumentsArray:[AbstractCompiler compiler]:null",
        "com.google.javascript.jscomp.DefaultCodingConvention:getExportPropertyFunction:[]:String",
        "com.google.javascript.jscomp.Compiler:getTypeValidator:[]:TypeValidator",
        "com.google.javascript.jscomp.MaybeReachingVariableUse:isForward:[]:boolean",
        "com.google.javascript.jscomp.Compiler\\$IntermediateState:IntermediateState:[]:null",
        "com.google.javascript.jscomp.OptimizeArgumentsArray:exitScope:[NodeTraversal traversal]:void",
        "com.google.javascript.jscomp.DefaultCodingConvention:isOptionalParameter:[Node parameter]:boolean",
        "com.google.javascript.jscomp.Compiler:getMessages:[]:JSError[]",
        "com.google.javascript.jscomp.DefaultCodingConvention:isConstant:[String variableName]:boolean",
        "com.google.javascript.jscomp.RenameVars:process:[Node externs, Node root]:void",
        "com.google.javascript.jscomp.NodeUtil:isStatementBlock:[Node n]:boolean",
        "com.google.javascript.jscomp.Compiler:init:[JSSourceFile[] externs, JSModule[] modules, CompilerOptions options]:void",
        "com.google.javascript.jscomp.DefaultCodingConvention:applySubclassRelationship:[FunctionType parentCtor, FunctionType childCtor, SubclassType type]:void",
        "com.google.javascript.jscomp.Compiler:parseSyntheticCode:[String fileName, String js]:Node",
        "com.google.javascript.jscomp.Compiler:getFunctionalInformationMap:[]:FunctionInformationMap",
        "com.google.javascript.jscomp.CompilerOptions:getDefineReplacements:[]:Map\u003cString,Node\u003e",
        "com.google.javascript.jscomp.NodeUtil:isString:[Node n]:boolean",
        "com.google.javascript.jscomp.Compiler:setLoggingLevel:[Level level]:void",
        "com.google.javascript.jscomp.Compiler:createDefaultOptions:[]:CompilerOptions",
        "com.google.javascript.jscomp.NodeUtil:newQualifiedNameNode:[String name, Node basisNode, String originalName]:Node",
        "com.google.javascript.jscomp.ControlFlowGraph:ControlFlowGraph:[N entry]:null",
        "com.google.javascript.jscomp.NodeUtil:getStringValue:[Node n]:String",
        "com.google.javascript.jscomp.NodeUtil:isSimpleOperatorType:[int type]:boolean",
        "com.google.javascript.jscomp.Compiler:compile:[]:Result",
        "com.google.javascript.jscomp.NodeUtil:isAssignmentOp:[Node n]:boolean",
        "com.google.javascript.jscomp.CompilerOptions:setDefineToDoubleLiteral:[String defineName, double value]:void"
      ],
      "num": 398
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  },
  "trigger_tests": [
    {
      "test_class": "com.google.javascript.jscomp.DeadAssignmentsEliminationTest",
      "test_function": "testInExpression2",
      "assertion_line": "459",
      "exception": "junit.framework.AssertionFailedError",
      "message": "Expected: function FUNC(param1,param2){var a;a\u003d1;if(2||(a\u003d3)||a);}\nResult: function FUNC(param1,param2){var a;a\u003d1;if((a\u003d2)||(a\u003d3)||a);}"
    },
    {
      "test_class": "com.google.javascript.jscomp.DeadAssignmentsEliminationTest",
      "test_function": "testIssue384b",
      "assertion_line": "345",
      "exception": "junit.framework.AssertionFailedError",
      "message": "Expected: function FUNC(param1,param2){var a,b;f(b\u003dtrue)||f(b\u003dfalse)?a\u003db:a\u003dnull;return a}\nResult: function FUNC(param1,param2){var a,b;f(true)||f(b\u003dfalse)?a\u003db:a\u003dnull;return a}"
    },
    {
      "test_class": "com.google.javascript.jscomp.DeadAssignmentsEliminationTest",
      "test_function": "testIssue384c",
      "assertion_line": "345",
      "exception": "junit.framework.AssertionFailedError",
      "message": "Expected: function FUNC(param1,param2){var a,b;(a?f(b\u003dtrue):f(b\u003dfalse))\u0026\u0026(a\u003db);return a}\nResult: function FUNC(param1,param2){var a,b;(a?f(true):f(b\u003dfalse))\u0026\u0026(a\u003db);return a}"
    },
    {
      "test_class": "com.google.javascript.jscomp.DeadAssignmentsEliminationTest",
      "test_function": "testIssue384d",
      "assertion_line": "345",
      "exception": "junit.framework.AssertionFailedError",
      "message": "Expected: function FUNC(param1,param2){var a,b;(f(b\u003dtrue)||f(b\u003dfalse))\u0026\u0026(a\u003db);return a}\nResult: function FUNC(param1,param2){var a,b;(f(true)||f(b\u003dfalse))\u0026\u0026(a\u003db);return a}"
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/jscomp/DeadAssignmentsElimination.java",
        "src/com/google/javascript/jscomp/DeadAssignmentsElimination.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "com.google.javascript.jscomp.DeadAssignmentsElimination:isVariableReadBeforeKill:[Node n, String variable]:VariableLiveness",
            "com.google.javascript.jscomp.DeadAssignmentsElimination:isVariableStillLiveWithinExpression:[Node n, Node exprRoot, String variable]:boolean"
          ],
          "num": 2
        },
        {
          "qualified_names": [
            "com.google.javascript.jscomp.DeadAssignmentsElimination:isVariableReadBeforeKill:[Node n, String variable]:VariableLiveness",
            "com.google.javascript.jscomp.DeadAssignmentsElimination:isVariableStillLiveWithinExpression:[Node n, Node exprRoot, String variable]:boolean",
            "com.google.javascript.jscomp.DeadAssignmentsElimination:checkHookBranchReadBeforeKill:[Node trueCase, Node falseCase, String variable]:VariableLiveness"
          ],
          "num": 3
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "293",
            "294",
            "295",
            "296",
            "297",
            "298",
            "299",
            "300",
            "301",
            "302",
            "304",
            "324",
            "342",
            "343",
            "344",
            "345",
            "346",
            "347",
            "348",
            "350"
          ],
          "num": 20
        },
        {
          "qualified_names": [
            "293",
            "294",
            "295",
            "296",
            "297",
            "298",
            "299",
            "300",
            "301",
            "302",
            "303",
            "304",
            "305",
            "307",
            "308",
            "309",
            "310",
            "311",
            "312",
            "313",
            "314",
            "315",
            "316",
            "317",
            "318",
            "319",
            "320",
            "321",
            "322",
            "323",
            "324",
            "325",
            "326",
            "327",
            "328",
            "329",
            "330",
            "331",
            "332",
            "333",
            "354",
            "355",
            "356",
            "357",
            "375",
            "376",
            "377",
            "378",
            "379",
            "380",
            "381",
            "382",
            "383",
            "384",
            "385",
            "386",
            "387",
            "388",
            "389",
            "390",
            "392",
            "393",
            "394",
            "395",
            "396",
            "397",
            "398",
            "399",
            "400",
            "401",
            "402",
            "403",
            "404",
            "405",
            "406",
            "407",
            "408",
            "409",
            "411",
            "414",
            "415",
            "416",
            "417",
            "418",
            "419",
            "420",
            "421",
            "422",
            "423",
            "424",
            "425",
            "426",
            "427",
            "428",
            "429",
            "430",
            "431"
          ],
          "num": 97
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java b/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\nindex 879056f..aaab0d6 100644\n--- a/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\n+++ b/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\n@@ -290,18 +290,47 @@\n   private boolean isVariableStillLiveWithinExpression(\n       Node n, Node exprRoot, String variable) {\n     while (n !\u003d exprRoot) {\n-      for(Node sibling \u003d n.getNext(); sibling !\u003d null;\n-          sibling \u003d sibling.getNext()) {\n-        if (!ControlFlowGraph.isEnteringNewCfgNode(sibling)) {\n-          VariableLiveness state \u003d isVariableReadBeforeKill(sibling, variable);\n-\n-          // If we see a READ or KILL there is no need to continue.\n-          if (state \u003d\u003d VariableLiveness.READ) {\n-            return true;\n-          } else if (state \u003d\u003d VariableLiveness.KILL) {\n-            return false;\n+      VariableLiveness state \u003d VariableLiveness.MAYBE_LIVE;\n+      switch (n.getParent().getType()) {\n+        case Token.OR:\n+        case Token.AND:\n+          // If the currently node is the first child of\n+          // AND/OR, be conservative only consider the READs\n+          // of the second operand.\n+          if (n.getNext() !\u003d null) {\n+            state \u003d isVariableReadBeforeKill(\n+                n.getNext(), variable);\n+            if (state \u003d\u003d VariableLiveness.KILL) {\n+              state \u003d VariableLiveness.MAYBE_LIVE;\n+            }\n           }\n-        }\n+          break;\n+\n+        case Token.HOOK:\n+          // If current node is the condition, check each following\n+          // branch, otherwise it is a conditional branch and the\n+          // other branch can be ignored.\n+          if (n.getNext() !\u003d null \u0026\u0026 n.getNext().getNext() !\u003d null) {\n+            state \u003d checkHookBranchReadBeforeKill(\n+                n.getNext(), n.getNext().getNext(), variable);\n+          }\n+          break;\n+\n+        default:\n+          for(Node sibling \u003d n.getNext(); sibling !\u003d null;\n+              sibling \u003d sibling.getNext()) {\n+            state \u003d isVariableReadBeforeKill(sibling, variable);\n+            if (state !\u003d VariableLiveness.MAYBE_LIVE) {\n+              break;\n+            }\n+          }\n+      }\n+\n+      // If we see a READ or KILL there is no need to continue.\n+      if (state \u003d\u003d VariableLiveness.READ) {\n+        return true;\n+      } else if (state \u003d\u003d VariableLiveness.KILL) {\n+        return false;\n       }\n       n \u003d n.getParent();\n     }\n@@ -322,6 +351,10 @@\n    */\n   private VariableLiveness isVariableReadBeforeKill(\n       Node n, String variable) {\n+    if (ControlFlowGraph.isEnteringNewCfgNode(n)) { // Not a FUNCTION\n+      return VariableLiveness.MAYBE_LIVE;\n+    }\n+\n     if (NodeUtil.isName(n) \u0026\u0026 variable.equals(n.getString())) {\n       if (NodeUtil.isLhs(n, n.getParent())) {\n         Preconditions.checkState(n.getParent().getType() \u003d\u003d Token.ASSIGN);\n@@ -339,16 +372,61 @@\n       }\n     }\n \n-    // Expressions are evaluated left-right, depth first.\n-    for (Node child \u003d n.getFirstChild();\n-        child !\u003d null; child \u003d child.getNext()) {\n-      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION\n-        VariableLiveness state \u003d isVariableReadBeforeKill(child, variable);\n-        if (state !\u003d VariableLiveness.MAYBE_LIVE) {\n-          return state;\n+    switch (n.getType()) {\n+      // Conditionals\n+      case Token.OR:\n+      case Token.AND:\n+        VariableLiveness v1 \u003d isVariableReadBeforeKill(\n+          n.getFirstChild(), variable);\n+        VariableLiveness v2 \u003d isVariableReadBeforeKill(\n+          n.getLastChild(), variable);\n+        // With a AND/OR the first branch always runs, but the second is\n+        // may not.\n+        if (v1 !\u003d VariableLiveness.MAYBE_LIVE) {\n+          return v1;\n+        } else if (v2 \u003d\u003d VariableLiveness.READ) {\n+          return VariableLiveness.READ;\n+        } else {\n+          return VariableLiveness.MAYBE_LIVE;\n         }\n-      }\n+      case Token.HOOK:\n+        VariableLiveness first \u003d isVariableReadBeforeKill(\n+            n.getFirstChild(), variable);\n+        if (first !\u003d VariableLiveness.MAYBE_LIVE) {\n+          return first;\n+        }\n+        return checkHookBranchReadBeforeKill(\n+            n.getFirstChild().getNext(), n.getLastChild(), variable);\n+\n+      default:\n+        // Expressions are evaluated left-right, depth first.\n+        for (Node child \u003d n.getFirstChild();\n+            child !\u003d null; child \u003d child.getNext()) {\n+          VariableLiveness state \u003d isVariableReadBeforeKill(child, variable);\n+          if (state !\u003d VariableLiveness.MAYBE_LIVE) {\n+            return state;\n+          }\n+        }\n     }\n+\n     return VariableLiveness.MAYBE_LIVE;\n   }\n+\n+  private VariableLiveness checkHookBranchReadBeforeKill(\n+      Node trueCase, Node falseCase, String variable) {\n+    VariableLiveness v1 \u003d isVariableReadBeforeKill(\n+      trueCase, variable);\n+    VariableLiveness v2 \u003d isVariableReadBeforeKill(\n+      falseCase, variable);\n+    // With a hook it is unknown which branch will run, so\n+    // we must be conservative.  A read by either is a READ, and\n+    // a KILL is only considered if both KILL.\n+    if (v1 \u003d\u003d VariableLiveness.READ || v2 \u003d\u003d VariableLiveness.READ) {\n+      return VariableLiveness.READ;\n+    } else if (v1 \u003d\u003d VariableLiveness.KILL \u0026\u0026 v2 \u003d\u003d VariableLiveness.KILL) {\n+      return VariableLiveness.KILL;\n+    } else {\n+      return VariableLiveness.MAYBE_LIVE;\n+    }\n+  }\n }\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [14509,15234]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SwitchStatement [13167,14460]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodInvocation [13175,13186]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SwitchCase [13218,13232]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SwitchCase [13239,13254]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [13263,13350]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [13359,13445]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [13547,13771]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SwitchCase [13778,13794]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [13803,13895]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [13904,13981]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ReturnStatement [13990,14097]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SwitchCase [14105,14113]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "ForStatement [14184,14454]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [10251,10304]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SwitchStatement [10311,11526]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ReturnStatement [12440,12475]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationExpression [14189,14219]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "InfixExpression [14233,14246]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Assignment [14248,14271]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodInvocation [10319,10342]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SwitchCase [10354,10368]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SwitchCase [10377,10392]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [10557,10796]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "BreakStatement [10807,10813]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SwitchCase [10823,10839]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "IfStatement [11026,11211]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "BreakStatement [11222,11228]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SwitchCase [11238,11246]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "ForStatement [11257,11518]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "InfixExpression [11030,11082]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationExpression [11261,11287]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "InfixExpression [11289,11304]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Assignment [11320,11347]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [11098,11199]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "ExpressionStatement [11363,11415]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [11428,11506]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Assignment [11363,11414]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "ASSIGNMENT_OPERATOR: \u003d [11369,11370]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [10414,10430]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "VariableDeclarationFragment [10431,10482]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "VariableDeclarationStatement [10414,10483]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "PrefixExpression [10353,10400]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "IfStatement [10349,10728]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationExpression [10255,10281]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "InfixExpression [10283,10298]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "Assignment [10310,10337]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "ForStatement [10251,10736]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "PREFIX_EXPRESSION_OPERATOR: ! [12202,12203]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "PrefixExpression [12202,12247]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationExpression [12110,12140]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "InfixExpression [12150,12163]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "Assignment [12165,12188]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "ForStatement [12105,12444]",
          "to": ""
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [
        "com.google.javascript.jscomp.DeadAssignmentsElimination:checkHookBranchReadBeforeKill:[Node trueCase, Node falseCase, String variable]:VariableLiveness"
      ],
      "num": 1
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  },
  "patch_changed_mths": {
    "qualified_names": [
      "com.google.javascript.jscomp.DeadAssignmentsElimination:isVariableStillLiveWithinExpression(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Ljava/lang/String;)Z:regression",
      "com.google.javascript.jscomp.DeadAssignmentsElimination:isVariableReadBeforeKill(Lcom/google/javascript/rhino/Node;Ljava/lang/String;)Lcom/google/javascript/jscomp/DeadAssignmentsElimination$VariableLiveness;:regression"
    ],
    "num": 2
  }
}