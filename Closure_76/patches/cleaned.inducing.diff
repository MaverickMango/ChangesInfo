Only in data/changesInfo//Closure_76/properties/modified_classes/inducing/: src
Only in data/changesInfo//Closure_76/properties/modified_classes/inducing/test/com/google/javascript/jscomp: CompilerRunnerTest.java
diff -u -r data/changesInfo//Closure_76/properties/modified_classes/inducing/test/com/google/javascript/jscomp/DeadAssignmentsEliminationTest.java data/changesInfo//Closure_76/cleaned/inducing/test/com/google/javascript/jscomp/DeadAssignmentsEliminationTest.java
--- data/changesInfo//Closure_76/properties/modified_classes/inducing/test/com/google/javascript/jscomp/DeadAssignmentsEliminationTest.java	2023-12-27 22:41:44.796031543 -0800
+++ data/changesInfo//Closure_76/cleaned/inducing/test/com/google/javascript/jscomp/DeadAssignmentsEliminationTest.java	2023-06-14 19:22:37.407770064 -0700
@@ -86,19 +86,10 @@
 
     inFunction("var x,y; if( (x=1)+(y=2) > 3){}",
         "var x,y; if( 1+2 > 3){}");
-  }
 
-  public void testUsedAsConditionsInSwitchStatements() {
     inFunction("var x; switch(x=1){}","var x; switch(1){}");
     inFunction("var x; switch(x){case(x=1):break;}",
         "var x; switch(x){case(1):break;}");
-    
-    inFunction("var x,y; switch(y) { case (x += 1): break; case (x): break;}");
-    
-    inFunction("var x,y; switch(y) { case (x = 1): break; case (2): break;}",
-               "var x,y; switch(y) { case (1): break; case (2): break;}");
-    inFunction("var x,y; switch(y) { case (x+=1): break; case (x=2): break;}",
-               "var x,y; switch(y) { case (x+1): break; case (2): break;}");
   }
 
   public void testAssignmentInReturn() {
@@ -116,8 +107,8 @@
    */
   public void testAssignAndReadInCondition() {
     inFunction("var a, b; if ((a = 1) && (b = a)) {b}");
-    inFunction("var a, b; if ((b = a) && (a = 1)) {b}",
-               "var a, b; if ((b = a) && (1)) {b}");
+    // But we missed an opportunity here.
+    inFunction("var a, b; if ((b = a) && (a = 1)) {b}");
   }
 
   public void testParameters() {
@@ -159,147 +150,6 @@
     inFunction("var x = 0; print(x); x = 1; var y = function(){}; y()");
   }
 
-  public void testSelfReAssignment() {
-    inFunction("var x; x = x;", "var x; x");
-  }
-  
-  public void testSelfIncrement() {
-    inFunction("var x; x = x + 1;", "var x; x + 1");
-  }
-  
-  public void testAssignmentOp() {
-    // We have remove constant expressions that cleans this one up.
-    inFunction("var x; x += foo()", "var x; x + foo()");
-  }
-  
-  public void testAssignmentOpUsedAsLhs() {
-    inFunction("var x,y; y = x += foo(); print(y)",
-               "var x,y; y = x +  foo(); print(y)");
-  }
-  
-  public void testAssignmentOpUsedAsCondition() {    
-    inFunction("var x; if(x += foo()) {}",
-               "var x; if(x +  foo()) {}");
-
-    inFunction("var x; if((x += foo()) > 1) {}",
-               "var x; if((x +  foo()) > 1) {}");
-    
-    // Not in a while because this happens every loop.
-    inFunction("var x; while((x += foo()) > 1) {}");
-    
-    inFunction("var x; for(;--x;){}");
-    inFunction("var x; for(;x--;){}");
-    inFunction("var x; for(;x -= 1;){}");
-    inFunction("var x; for(;x = 0;){}", "var x; for(;0;){}");
-    
-    inFunction("var x; for(;;--x){}");
-    inFunction("var x; for(;;x--){}");
-    inFunction("var x; for(;;x -= 1){}");
-    inFunction("var x; for(;;x = 0){}", "var x; for(;;0){}");
-    
-    // TODO(user): Add support of INC and DEC.
-    inFunction("var x; for(--x;;){}");
-    inFunction("var x; for(x--;;){}");
-    inFunction("var x; for(x -= 1;;){}", "var x; for(x - 1;;){}");
-    inFunction("var x; for(x = 0;;){}", "var x; for(0;;){}");
-  }
-  
-  public void testDeadIncrement() {
-    // TODO(user): Optimize this.
-    inFunction("var x; x ++");
-    inFunction("var x; x --");
-  }
-  
-  public void testDeadButAlivePartiallyWithinTheExpression() {
-    inFunction("var x; x = 100, print(x), x = 101;",
-               "var x; x = 100, print(x),     101;");
-    inFunction("var x; x = 100, print(x), print(x), x = 101;",
-               "var x; x = 100, print(x), print(x),     101;");
-    inFunction("var x; x = 100, print(x), x = 0, print(x), x = 101;",
-               "var x; x = 100, print(x), x = 0, print(x),     101;");
-  }
-  
-  public void testMutipleDeadAssignmentsButAlivePartiallyWithinTheExpression() {
-    inFunction("var x; x = 1, x = 2, x = 3, x = 4, x = 5," + 
-               "  print(x), x = 0, print(x), x = 101;",
-               
-               "var x; 1, 2, 3, 4, x = 5, print(x), x = 0, print(x), 101;");
-  }
-  
-
-  public void testDeadPartiallyWithinTheExpression() {
-    // Sadly, this is not covered. We don't suspect this would happend too
-    // often.
-    inFunction("var x; x = 100, x = 101; print(x);");
-  }
-  
-  public void testAssignmentChain() {
-    inFunction("var a,b,c,d,e; a = b = c = d = e = 1",
-               "var a,b,c,d,e; 1");
-    inFunction("var a,b,c,d,e; a = b = c = d = e = 1; print(c)",
-               "var a,b,c,d,e;         c = 1        ; print(c)");
-    inFunction("var a,b,c,d,e; a = b = c = d = e = 1; print(a + e)",
-               "var a,b,c,d,e; a =             e = 1; print(a + e)");
-    inFunction("var a,b,c,d,e; a = b = c = d = e = 1; print(b + d)",
-               "var a,b,c,d,e;     b =     d     = 1; print(b + d)");
-    inFunction("var a,b,c,d,e; a = b = c = d = e = 1; print(a + b + d + e)",
-               "var a,b,c,d,e; a = b =     d = e = 1; print(a + b + d + e)");
-    inFunction("var a,b,c,d,e; a = b = c = d = e = 1; print(a+b+c+d+e)");
-  }
-  
-  public void testAssignmentOpChain() {
-    inFunction("var a,b,c,d,e; a = b = c += d = e = 1",
-               "var a,b,c,d,e;         c + 1");
-    inFunction("var a,b,c,d,e; a = b = c += d = e = 1;  print(e)",
-               "var a,b,c,d,e;         c +     (e = 1); print(e)");
-    inFunction("var a,b,c,d,e; a = b = c += d = e = 1;  print(d)",
-               "var a,b,c,d,e;         c + (d = 1)  ;   print(d)");
-    inFunction("var a,b,c,d,e; a = b = c += d = e = 1;  print(a)",
-               "var a,b,c,d,e; a =     c +          1;  print(a)");
-  }
-  
-  public void testIncDecInSubExpressions() {
-    inFunction("var a; a = 1, a++; a");
-  }
-  
-  public void testNestedReassignments() {
-    inFunction("var a; a = (a = 1)", "var a; 1");
-    inFunction("var a; a = (a *= 2)", "var a; a*2");
-    
-    // TODO(user): ++ not supported.
-    
-    // Note a = (a++) is not same as a++. Only if 'a' is dead.
-    inFunction("var a; a = (a++)", "var a; a++");
-    inFunction("var a; a = (++a)", "var a; ++a");
-    
-    inFunction("var a; a = (b = (a = 1))", "var a; b = 1");
-    inFunction("var a; a = (b = (a *= 2))", "var a; b = a * 2");
-    inFunction("var a; a = (b = (a++))", "var a; b=a++");
-    inFunction("var a; a = (b = (++a))", "var a; b=++a");
-    
-    // Include b as local.
-    inFunction("var a,b; a = (b = (a = 1))", "var a,b; 1");
-    inFunction("var a,b; a = (b = (a *= 2))", "var a,b; a * 2");
-    inFunction("var a,b; a = (b = (a++))", "var a,b; a++");
-    inFunction("var a,b; a = (b = (++a))", "var a,b; ++a");
-    
-    inFunction("var a; a += (a++)", "var a; a+a++");
-    inFunction("var a; a += (++a)", "var a; a+ ++a");
-    
-    // Include b as local.
-    inFunction("var a,b; a += (b = (a = 1))", "var a,b; a + 1");
-    inFunction("var a,b; a += (b = (a *= 2))", "var a,b; a + (a * 2)");
-    inFunction("var a,b; a += (b = (a++))", "var a,b; a + a++");
-    inFunction("var a,b; a += (b = (++a))", "var a,b; a+(++a)"); 
-  }
-  
-  public void testIncrementalReassignmentInForLoops() {
-    inFunction("for(;x+=1;x+=1) {}");
-    inFunction("for(;x;x+=1){}");
-    inFunction("for(;x+=1;){foo(x)}");
-    inFunction("for(;1;x+=1){foo(x)}");
-  }
-  
   private void inFunction(String src) {
     inFunction(src, src);
   }
@@ -326,4 +176,69 @@
   public void testAssignToExtern() {
     inFunction("extern = true;", "extern = true;");
   }
+
+  public void testInExpression2() {
+    // This can be improved.  "a = 1" is dead but "a" is read in the following
+    // expression.
+    inFunction(
+            "var a; a = 1; if ((a = 2) || (a = 3) || (a)) {}",
+            "var a; a = 1; if ((    2) || (a = 3) || (a)) {}");
+
+    inFunction(
+            "var a; (a = 1) || (a = 2)",
+            "var a; 1 || 2");
+
+    inFunction("var a; (a = 1) || (a = 2); return a");
+
+    inFunction(
+            "var a; a = 1; a ? a = 2 : a;",
+            "var a; a = 1; a ?     2 : a;");
+
+    inFunction("var a; a = 1; a ? a = 2 : a; return a");
+
+    inFunction(
+            "var a; a = 1; a ? a : a = 2;",
+            "var a; a = 1; a ? a : 2;");
+
+    inFunction("var a; a = 1; a ? a : a =2; return a");
+
+    inFunction(
+            "var a; (a = 1) ? a = 2 : a = 3;",
+            "var a;      1  ?     2 :     3;");
+
+    // This can be improved.  "a = 1" is dead but "a" is read in the following
+    // expression.
+    inFunction("var a; (a = 1) ? a = 2 : a = 3; return a");
+  }
+
+  public void testIssue384a() {
+    inFunction(
+            " var a, b;\n" +
+                    " if (f(b = true) || f(b = false))\n" +
+                    "   a = b;\n" +
+                    " else\n" +
+                    "   a = null;\n" +
+                    " return a;");
+  }
+
+  public void testIssue384b() {
+    inFunction(
+            " var a, b;\n" +
+                    " (f(b = true) || f(b = false)) ? (a = b) : (a = null);\n" +
+                    " return a;");
+  }
+
+  public void testIssue384c() {
+    inFunction(
+            " var a, b;\n" +
+                    " (a ? f(b = true) : f(b = false)) && (a = b);\n" +
+                    " return a;");
+  }
+
+  public void testIssue384d() {
+    inFunction(
+            " var a, b;\n" +
+                    " (f(b = true) || f(b = false)) && (a = b);\n" +
+                    " return a;");
+  }
 }
Only in data/changesInfo//Closure_76/properties/modified_classes/inducing/test/com/google/javascript/jscomp: OptimizeArgumentsArrayTest.java
Only in data/changesInfo//Closure_76/properties/modified_classes/inducing/test/com/google/javascript/jscomp: RenameVarsTest.java
Only in data/changesInfo//Closure_76/properties/modified_classes/inducing/test/com/google/javascript/jscomp: SimpleDefinitionFinderTest.java
