diff -r -u original/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java buggy/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java
--- original/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	2023-06-13 15:31:43.147099824 +0800
+++ buggy/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	2023-06-12 11:40:26.406717631 +0800
@@ -1,5 +1,5 @@
 /*
- * Copyright 2008 Google Inc.
+ * Copyright 2008 The Closure Compiler Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -17,34 +17,43 @@
 package com.google.javascript.jscomp;
 
 import com.google.common.base.Preconditions;
+import com.google.common.base.Predicate;
+import com.google.common.base.Predicates;
 import com.google.javascript.jscomp.ControlFlowGraph.Branch;
 import com.google.javascript.jscomp.DataFlowAnalysis.FlowState;
-import com.google.javascript.jscomp.graph.DiGraph.DiGraphNode;
 import com.google.javascript.jscomp.LiveVariablesAnalysis.LiveVariableLattice;
 import com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback;
 import com.google.javascript.jscomp.NodeTraversal.ScopedCallback;
 import com.google.javascript.jscomp.Scope.Var;
+import com.google.javascript.jscomp.graph.DiGraph.DiGraphNode;
 import com.google.javascript.rhino.Node;
 import com.google.javascript.rhino.Token;
 
-import java.util.List;
-import java.util.logging.Logger;
-
 /**
  * Removes local variable assignments that are useless based on information from
  * {@link LiveVariablesAnalysis}. If there is an assignment to variable
  * {@code x} and {@code x} is dead after this assignment, we know that the
  * current content of {@code x} will not be read and this assignment is useless.
  *
-*
  */
 class DeadAssignmentsElimination extends AbstractPostOrderCallback implements
     CompilerPass, ScopedCallback {
 
   private final AbstractCompiler compiler;
   private LiveVariablesAnalysis liveness;
-  private static final Logger logger =
-    Logger.getLogger(DeadAssignmentsElimination.class.getName());
+
+  // Matches all assignment operators and increment/decrement operators.
+  // Does *not* match VAR initialization, since RemoveUnusedVariables
+  // will already remove variables that are initialized but unused.
+  private static final Predicate<Node> matchRemovableAssigns =
+      new Predicate<Node>() {
+    @Override
+    public boolean apply(Node n) {
+      return (NodeUtil.isAssignmentOp(n) &&
+              n.getFirstChild().getType() == Token.NAME) ||
+          n.getType() == Token.INC || n.getType() == Token.DEC;
+    }
+  };
 
   public DeadAssignmentsElimination(AbstractCompiler compiler) {
     this.compiler = compiler;
@@ -66,18 +75,27 @@
     if (scope.isGlobal()) {
       return;
     }
-    
+
     // We are not going to do any dead assignment elimination in when there is
     // at least one inner function because in most browsers, when there is a
     // closure, ALL the variables are saved (escaped).
-    if (!NodeUtil.containsFunctionDeclaration(
-        t.getScopeRoot().getLastChild())) {
-      // Computes liveness information first.
-      ControlFlowGraph<Node> cfg = t.getControlFlowGraph();
-      liveness = new LiveVariablesAnalysis(cfg, scope, compiler);
-      liveness.analyze();
-      tryRemoveDeadAssignments(t, cfg);
+    Node fnBlock = t.getScopeRoot().getLastChild();
+    if (NodeUtil.containsFunction(fnBlock)) {
+      return;
     }
+
+    // We don't do any dead assignment elimination if there are no assigns
+    // to eliminate. :)
+    if (!NodeUtil.has(fnBlock, matchRemovableAssigns,
+            Predicates.<Node>alwaysTrue())) {
+      return;
+    }
+
+    // Computes liveness information first.
+    ControlFlowGraph<Node> cfg = t.getControlFlowGraph();
+    liveness = new LiveVariablesAnalysis(cfg, scope, compiler);
+    liveness.analyze();
+    tryRemoveDeadAssignments(t, cfg);
   }
 
   @Override
@@ -98,7 +116,7 @@
    */
   private void tryRemoveDeadAssignments(NodeTraversal t,
       ControlFlowGraph<Node> cfg) {
-    List<DiGraphNode<Node, Branch>> nodes = cfg.getDirectedGraphNodes();
+    Iterable<DiGraphNode<Node, Branch>> nodes = cfg.getDirectedGraphNodes();
 
     for (DiGraphNode<Node, Branch> cfgNode : nodes) {
       FlowState<LiveVariableLattice> state =
@@ -111,45 +129,61 @@
         case Token.IF:
         case Token.WHILE:
         case Token.DO:
-          tryRemoveAssignment(t, NodeUtil.getConditionExpression(n), n, state);
+          tryRemoveAssignment(t, NodeUtil.getConditionExpression(n), state);
           continue;
         case Token.FOR:
-          if (n.getChildCount() == 4) {
+          if (!NodeUtil.isForIn(n)) {
             tryRemoveAssignment(
-                t, NodeUtil.getConditionExpression(n), n, state);
-            tryRemoveAssignment(
-                t, n.getFirstChild().getNext().getNext(), n, state);
+                t, NodeUtil.getConditionExpression(n), state);
           }
           continue;
         case Token.SWITCH:
         case Token.CASE:
         case Token.RETURN:
           if (n.hasChildren()) {
-            tryRemoveAssignment(t, n.getFirstChild(), n, state);
+            tryRemoveAssignment(t, n.getFirstChild(), state);
           }
           continue;
         // TODO(user): case Token.VAR: Remove var a=1;a=2;.....
       }
-      
-      if (NodeUtil.isExpressionNode(n)) {
-        tryRemoveAssignment(t, n.getFirstChild(), n, state);
-      }
+
+      tryRemoveAssignment(t, n, state);
     }
   }
 
+  private void tryRemoveAssignment(NodeTraversal t, Node n,
+      FlowState<LiveVariableLattice> state) {
+    tryRemoveAssignment(t, n, n, state);
+  }
+
   /**
    * Determines if any local variables are dead after the instruction {@code n}
    * and are assigned within the subtree of {@code n}. Removes those assignments
    * if there are any.
    *
    * @param n Target instruction.
-   * @param parent Parent of {@code n}.
+   * @param exprRoot The CFG node where the liveness information in state is
+   *     still correct.
    * @param state The liveness information at {@code n}.
    */
-  private void tryRemoveAssignment(NodeTraversal t, Node n, Node parent,
+  private void tryRemoveAssignment(NodeTraversal t, Node n, Node exprRoot,
       FlowState<LiveVariableLattice> state) {
-    if (NodeUtil.isAssign(n)) {
+
+    Node parent = n.getParent();
+
+    if (NodeUtil.isAssignmentOp(n) ||
+        n.getType() == Token.INC || n.getType() == Token.DEC) {
+
       Node lhs = n.getFirstChild();
+      Node rhs = lhs.getNext();
+
+      // Recurse first. Example: dead_x = dead_y = 1; We try to clean up dead_y
+      // first.
+      if (rhs != null) {
+        tryRemoveAssignment(t, rhs, exprRoot, state);
+        rhs = lhs.getNext();
+      }
+
       Scope scope = t.getScope();
       if (!NodeUtil.isName(lhs)) {
         return; // Not a local variable assignment.
@@ -159,14 +193,31 @@
         return;
       }
       Var var = scope.getVar(name);
+
       if (liveness.getEscapedLocals().contains(var)) {
         return; // Local variable that might be escaped due to closures.
       }
+
+      // If we have an identity assignment such as a=a, always remove it
+      // regardless of what the liveness results because it
+      // does not change the result afterward.
+      if (rhs != null &&
+          NodeUtil.isName(rhs) &&
+          rhs.getString().equals(var.name) &&
+          NodeUtil.isAssign(n)) {
+        n.removeChild(rhs);
+        n.getParent().replaceChild(n, rhs);
+        compiler.reportCodeChange();
+        return;
+      }
+
       if (state.getOut().isLive(var)) {
         return; // Variable not dead.
       }
-      if (state.getIn().isLive(var)) {
-        // Oddly, the variable is killed here but it is also live before it.
+
+      if (state.getIn().isLive(var) &&
+          isVariableStillLiveWithinExpression(n, exprRoot, var.name)) {
+        // The variable is killed here but it is also live before it.
         // This is possible if we have say:
         //    if (X = a && a = C) {..} ; .......; a = S;
         // In this case we are safe to remove "a = C" because it is dead.
@@ -178,22 +229,126 @@
         // of GEN sets when we recurse here.
         return;
       }
-      Node rhs = n.getLastChild();
-      // Now we are at a dead local variable assignment.
-      logger.info("Removing dead assignemnt to " + name + " in "
-          + t.getSourceName() + " line " + n.getLineno());
-      n.removeChild(rhs);
-      parent.replaceChild(n, rhs);
+
+      if (NodeUtil.isAssign(n)) {
+        n.removeChild(rhs);
+        n.getParent().replaceChild(n, rhs);
+      } else if (NodeUtil.isAssignmentOp(n)) {
+        n.removeChild(rhs);
+        n.removeChild(lhs);
+        Node op = new Node(NodeUtil.getOpFromAssignmentOp(n), lhs, rhs);
+        parent.replaceChild(n, op);
+      } else if (n.getType() == Token.INC || n.getType() == Token.DEC) {
+        if (NodeUtil.isExpressionNode(parent)) {
+          parent.replaceChild(n,
+              new Node(Token.VOID, Node.newNumber(0).copyInformationFrom(n)));
+        } else if(n.getType() == Token.COMMA && n != parent.getLastChild()) {
+          parent.removeChild(n);
+        } else if (parent.getType() == Token.FOR && !NodeUtil.isForIn(parent) &&
+            NodeUtil.getConditionExpression(parent) != n) {
+          parent.replaceChild(n, new Node(Token.EMPTY));
+        } else {
+          // Cannot replace x = a++ with x = a because that's not valid
+          // when a is not a number.
+          return;
+        }
+      } else {
+        // Not reachable.
+        Preconditions.checkState(false, "Unknown statement");
+      }
+
       compiler.reportCodeChange();
       return;
 
     } else {
       for (Node c = n.getFirstChild(); c != null;) {
         Node next = c.getNext();
-        tryRemoveAssignment(t, c, n, state);
+        if (!ControlFlowGraph.isEnteringNewCfgNode(c)) {
+          tryRemoveAssignment(t, c, exprRoot, state);
+        }
         c = next;
       }
       return;
     }
   }
+
+  /**
+   * Given a variable, node n in the tree and a sub-tree denoted by exprRoot as
+   * the root, this function returns true if there exists a read of that
+   * variable before a write to that variable that is on the right side of n.
+   *
+   * For example, suppose the node is x = 1:
+   *
+   * y = 1, x = 1; // false, there is no reads at all.
+   * y = 1, x = 1, print(x) // true, there is a read right of n.
+   * y = 1, x = 1, x = 2, print(x) // false, there is a read right of n but
+   *                               // it is after a write.
+   *
+   * @param n The current node we should look at.
+   * @param exprRoot The node
+   */
+  private boolean isVariableStillLiveWithinExpression(
+      Node n, Node exprRoot, String variable) {
+    while (n != exprRoot) {
+      for(Node sibling = n.getNext(); sibling != null;
+          sibling = sibling.getNext()) {
+        if (!ControlFlowGraph.isEnteringNewCfgNode(sibling)) {
+          VariableLiveness state = isVariableReadBeforeKill(sibling, variable);
+
+          // If we see a READ or KILL there is no need to continue.
+          if (state == VariableLiveness.READ) {
+            return true;
+          } else if (state == VariableLiveness.KILL) {
+            return false;
+          }
+        }
+      }
+      n = n.getParent();
+    }
+    return false;
+  }
+
+  // The current liveness of the variable
+  private enum VariableLiveness {
+    MAYBE_LIVE, // May be still live in the current expression tree.
+    READ, // Known there is a read left of it.
+    KILL, // Known there is a write before any read.
+  }
+
+  /**
+   * Give an expression and a variable. It returns READ, if the first
+   * reference of that variable is a read. It returns KILL, if the first
+   * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
+   */
+  private VariableLiveness isVariableReadBeforeKill(
+      Node n, String variable) {
+    if (NodeUtil.isName(n) && variable.equals(n.getString())) {
+      if (NodeUtil.isLhs(n, n.getParent())) {
+        Preconditions.checkState(n.getParent().getType() == Token.ASSIGN);
+        // The expression to which the assignment is made is evaluated before
+        // the RHS is evaluated (normal left to right evaluation) but the KILL
+        // occurs after the RHS is evaluated.
+        Node rhs = n.getNext();
+        VariableLiveness state = isVariableReadBeforeKill(rhs, variable);
+        if (state == VariableLiveness.READ) {
+          return state;
+        }
+        return VariableLiveness.KILL;
+      } else {
+        return VariableLiveness.READ;
+      }
+    }
+
+    // Expressions are evaluated left-right, depth first.
+    for (Node child = n.getFirstChild();
+        child != null; child = child.getNext()) {
+      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
+        VariableLiveness state = isVariableReadBeforeKill(child, variable);
+        if (state != VariableLiveness.MAYBE_LIVE) {
+          return state;
+        }
+      }
+    }
+    return VariableLiveness.MAYBE_LIVE;
+  }
 }
diff -r -u original/test/com/google/javascript/jscomp/DeadAssignmentsEliminationTest.java buggy/test/com/google/javascript/jscomp/DeadAssignmentsEliminationTest.java
--- original/test/com/google/javascript/jscomp/DeadAssignmentsEliminationTest.java	2023-06-13 15:31:43.147099824 +0800
+++ buggy/test/com/google/javascript/jscomp/DeadAssignmentsEliminationTest.java	2023-06-12 11:40:26.406717631 +0800
@@ -1,5 +1,5 @@
 /*
- * Copyright 2008 Google Inc.
+ * Copyright 2008 The Closure Compiler Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -21,7 +21,6 @@
 /**
  * Tests for {@link DeadAssignmentsElimination}.
  *
-*
  */
 public class DeadAssignmentsEliminationTest extends CompilerTestCase {
 
@@ -30,6 +29,11 @@
   }
 
   @Override
+  public void setUp() {
+    super.enableLineNumberCheck(true);
+  }
+
+  @Override
   public CompilerPass getProcessor(final Compiler compiler) {
     return new CompilerPass() {
       public void process(Node externs, Node js) {
@@ -39,6 +43,11 @@
     };
   }
 
+  @Override
+  protected int getNumRepetitions() {
+    return 1;
+  }
+
   public void testSimple() {
     inFunction("var a; a=1", "var a; 1");
     inFunction("var a; a=1+1", "var a; 1+1");
@@ -82,21 +91,38 @@
     inFunction("var x; if(x=1==4&&1){}", "var x; if(1==4&&1) {}");
     inFunction("var x; if(0&&(x=1)){}", "var x; if(0&&1){}");
     inFunction("var x; if((x=2)&&(x=1)){}", "var x; if(2&&1){}");
-    inFunction("var x; x=2; if(0&&x=1){}; x");
+    inFunction("var x; x=2; if(0&&(x=1)){}; x");
 
     inFunction("var x,y; if( (x=1)+(y=2) > 3){}",
         "var x,y; if( 1+2 > 3){}");
+  }
 
+  public void testUsedAsConditionsInSwitchStatements() {
     inFunction("var x; switch(x=1){}","var x; switch(1){}");
     inFunction("var x; switch(x){case(x=1):break;}",
         "var x; switch(x){case(1):break;}");
+
+    inFunction("var x,y; switch(y) { case (x += 1): break; case (x): break;}");
+
+    inFunction("var x,y; switch(y) { case (x = 1): break; case (2): break;}",
+               "var x,y; switch(y) { case (1): break; case (2): break;}");
+    inFunction("var x,y; switch(y) { case (x+=1): break; case (x=2): break;}",
+               "var x,y; switch(y) { case (x+1): break; case (2): break;}");
   }
 
   public void testAssignmentInReturn() {
     inFunction("var x; return x = 1;", "var x; return 1");
     inFunction("var x; return");
   }
-  
+
+  public void testAssignmentSamples() {
+    // We want this to be "var x" in these cases.
+    inFunction("var x = 2;");
+    inFunction("var x = 2; x++;", "var x=2; void 0");
+    inFunction("var x; x=x++;", "var x;x++");
+    inFunction("var x; x+=1;", "var x;x+1");
+  }
+
   public void testAssignmentInArgs() {
     inFunction("var x; foo(x = 1);", "var x; foo(1);");
     inFunction("var x; return foo(x = 1);", "var x; return foo(1);");
@@ -107,8 +133,8 @@
    */
   public void testAssignAndReadInCondition() {
     inFunction("var a, b; if ((a = 1) && (b = a)) {b}");
-    // But we missed an opportunity here.
-    inFunction("var a, b; if ((b = a) && (a = 1)) {b}");
+    inFunction("var a, b; if ((b = a) && (a = 1)) {b}",
+               "var a, b; if ((b = a) && (1)) {b}");
   }
 
   public void testParameters() {
@@ -144,12 +170,173 @@
     inFunction("var x = function() { var x; x=1; }",
         "var x = function() { var x; 1; }");
   }
-  
+
   public void testInnerFunctions2() {
     // Give up DCE if there is a inner function.
     inFunction("var x = 0; print(x); x = 1; var y = function(){}; y()");
   }
 
+  public void testSelfReAssignment() {
+    inFunction("var x; x = x;", "var x; x");
+  }
+
+  public void testSelfIncrement() {
+    inFunction("var x; x = x + 1;", "var x; x + 1");
+  }
+
+  public void testAssignmentOp() {
+    // We have remove constant expressions that cleans this one up.
+    inFunction("var x; x += foo()", "var x; x + foo()");
+  }
+
+  public void testAssignmentOpUsedAsLhs() {
+    inFunction("var x,y; y = x += foo(); print(y)",
+               "var x,y; y = x +  foo(); print(y)");
+  }
+
+  public void testAssignmentOpUsedAsCondition() {
+    inFunction("var x; if(x += foo()) {}",
+               "var x; if(x +  foo()) {}");
+
+    inFunction("var x; if((x += foo()) > 1) {}",
+               "var x; if((x +  foo()) > 1) {}");
+
+    // Not in a while because this happens every loop.
+    inFunction("var x; while((x += foo()) > 1) {}");
+
+    inFunction("var x; for(;--x;){}");
+    inFunction("var x; for(;x--;){}");
+    inFunction("var x; for(;x -= 1;){}");
+    inFunction("var x; for(;x = 0;){}", "var x; for(;0;){}");
+
+    inFunction("var x; for(;;--x){}");
+    inFunction("var x; for(;;x--){}");
+    inFunction("var x; for(;;x -= 1){}");
+    inFunction("var x; for(;;x = 0){}", "var x; for(;;0){}");
+
+    inFunction("var x; for(--x;;){}", "var x; for(;;){}");
+    inFunction("var x; for(x--;;){}", "var x; for(;;){}");
+    inFunction("var x; for(x -= 1;;){}", "var x; for(x - 1;;){}");
+    inFunction("var x; for(x = 0;;){}", "var x; for(0;;){}");
+  }
+
+  public void testDeadIncrement() {
+    // TODO(user): Optimize this.
+    inFunction("var x; x ++", "var x; void 0");
+    inFunction("var x; x --", "var x; void 0");
+  }
+
+  public void testDeadButAlivePartiallyWithinTheExpression() {
+    inFunction("var x; x = 100, print(x), x = 101;",
+               "var x; x = 100, print(x),     101;");
+    inFunction("var x; x = 100, print(x), print(x), x = 101;",
+               "var x; x = 100, print(x), print(x),     101;");
+    inFunction("var x; x = 100, print(x), x = 0, print(x), x = 101;",
+               "var x; x = 100, print(x), x = 0, print(x),     101;");
+  }
+
+  public void testMutipleDeadAssignmentsButAlivePartiallyWithinTheExpression() {
+    inFunction("var x; x = 1, x = 2, x = 3, x = 4, x = 5," +
+               "  print(x), x = 0, print(x), x = 101;",
+
+               "var x; 1, 2, 3, 4, x = 5, print(x), x = 0, print(x), 101;");
+  }
+
+
+  public void testDeadPartiallyWithinTheExpression() {
+    // Sadly, this is not covered. We don't suspect this would happend too
+    // often.
+    inFunction("var x; x = 100, x = 101; print(x);");
+  }
+
+  public void testAssignmentChain() {
+    inFunction("var a,b,c,d,e; a = b = c = d = e = 1",
+               "var a,b,c,d,e; 1");
+    inFunction("var a,b,c,d,e; a = b = c = d = e = 1; print(c)",
+               "var a,b,c,d,e;         c = 1        ; print(c)");
+    inFunction("var a,b,c,d,e; a = b = c = d = e = 1; print(a + e)",
+               "var a,b,c,d,e; a =             e = 1; print(a + e)");
+    inFunction("var a,b,c,d,e; a = b = c = d = e = 1; print(b + d)",
+               "var a,b,c,d,e;     b =     d     = 1; print(b + d)");
+    inFunction("var a,b,c,d,e; a = b = c = d = e = 1; print(a + b + d + e)",
+               "var a,b,c,d,e; a = b =     d = e = 1; print(a + b + d + e)");
+    inFunction("var a,b,c,d,e; a = b = c = d = e = 1; print(a+b+c+d+e)");
+  }
+
+  public void testAssignmentOpChain() {
+    inFunction("var a,b,c,d,e; a = b = c += d = e = 1",
+               "var a,b,c,d,e;         c + 1");
+    inFunction("var a,b,c,d,e; a = b = c += d = e = 1;  print(e)",
+               "var a,b,c,d,e;         c +     (e = 1); print(e)");
+    inFunction("var a,b,c,d,e; a = b = c += d = e = 1;  print(d)",
+               "var a,b,c,d,e;         c + (d = 1)  ;   print(d)");
+    inFunction("var a,b,c,d,e; a = b = c += d = e = 1;  print(a)",
+               "var a,b,c,d,e; a =     c +          1;  print(a)");
+  }
+
+  public void testIncDecInSubExpressions() {
+    inFunction("var a; a = 1, a++; a");
+    inFunction("var a; a = 1, ++a; a");
+    inFunction("var a; a = 1, a--; a");
+    inFunction("var a; a = 1, --a; a");
+
+    inFunction("var a; a = 1, a++, print(a)");
+    inFunction("var a; a = 1, ++a, print(a)");
+    inFunction("var a; a = 1, a--, print(a)");
+    inFunction("var a; a = 1, --a, print(a)");
+
+    inFunction("var a; a = 1, print(a++)");
+    inFunction("var a; a = 1, print(++a)");
+
+    inFunction("var a; a = 1, print(a++)");
+    inFunction("var a; a = 1, print(++a)");
+
+    inFunction("var a; a = 1, print(a--)");
+    inFunction("var a; a = 1, print(--a)");
+  }
+
+  public void testNestedReassignments() {
+    inFunction("var a; a = (a = 1)", "var a; 1");
+    inFunction("var a; a = (a *= 2)", "var a; a*2");
+
+    // Note a = (a++) is not same as a++. Only if 'a' is dead.
+    inFunction("var a; a = (a++)", "var a; a++"); // Preferred: "var a"
+    inFunction("var a; a = (++a)", "var a; ++a"); // Preferred: "var a"
+
+    inFunction("var a; a = (b = (a = 1))", "var a; b = 1");
+    inFunction("var a; a = (b = (a *= 2))", "var a; b = a * 2");
+    inFunction("var a; a = (b = (a++))", "var a; b=a++");
+    inFunction("var a; a = (b = (++a))", "var a; b=++a");
+
+    // Include b as local.
+    inFunction("var a,b; a = (b = (a = 1))", "var a,b; 1");
+    inFunction("var a,b; a = (b = (a *= 2))", "var a,b; a * 2");
+    inFunction("var a,b; a = (b = (a++))",
+               "var a,b; a++"); // Preferred: "var a,b"
+    inFunction("var a,b; a = (b = (++a))",
+               "var a,b; ++a"); // Preferred: "var a,b"
+
+    inFunction("var a; a += (a++)", "var a; a + a++");
+    inFunction("var a; a += (++a)", "var a; a+ (++a)");
+
+    // Include b as local.
+    inFunction("var a,b; a += (b = (a = 1))", "var a,b; a + 1");
+    inFunction("var a,b; a += (b = (a *= 2))", "var a,b; a + (a * 2)");
+    inFunction("var a,b; a += (b = (a++))", "var a,b; a + a++");
+    inFunction("var a,b; a += (b = (++a))", "var a,b; a+(++a)");
+  }
+
+  public void testIncrementalReassignmentInForLoops() {
+    inFunction("for(;x+=1;x+=1) {}");
+    inFunction("for(;x;x+=1){}");
+    inFunction("for(;x+=1;){foo(x)}");
+    inFunction("for(;1;x+=1){foo(x)}");
+  }
+
+  public void testIdentityAssignments() {
+    inFunction("var x; x=x", "var x; x");
+  }
+
   private void inFunction(String src) {
     inFunction(src, src);
   }
@@ -174,6 +361,95 @@
   }
 
   public void testAssignToExtern() {
-    inFunction("extern = true;", "extern = true;");
+    inFunction("extern = true;");
+  }
+
+  public void testIssue297a() {
+    testSame("function f(p) {" +
+         " var x;" +
+         " return ((x=p.id) && (x=parseInt(x.substr(1))) && x>0);" +
+         "}; f('');");
+  }
+
+  public void testIssue297b() {
+    test("function f() {" +
+         " var x;" +
+         " return (x='') && (x = x.substr(1));" +
+         "};",
+         "function f() {" +
+         " var x;" +
+         " return (x='') && (x.substr(1));" +
+         "};");
+  }
+
+  public void testIssue297c() {
+    test("function f() {" +
+         " var x;" +
+         " return (x=1) && (x = f(x));" +
+         "};",
+         "function f() {" +
+         " var x;" +
+         " return (x=1) && f(x);" +
+         "};");
+  }
+
+  public void testIssue297d() {
+    test("function f(a) {" +
+         " return (a=1) && (a = f(a));" +
+         "};",
+         "function f(a) {" +
+         " return (a=1) && (f(a));" +
+         "};");
+  }
+
+  public void testIssue297e() {
+    test("function f(a) {" +
+         " return (a=1) - (a = g(a));" +
+         "};",
+         "function f(a) {" +
+         " return (a=1) - (g(a));" +
+         "};");
+  }
+
+  public void testIssue297f() {
+    test("function f(a) {" +
+         " h((a=1) - (a = g(a)));" +
+         "};",
+         "function f(a) {" +
+         " h((a=1) - (g(a)));" +
+         "};");
+  }
+
+  public void testIssue297g() {
+    test("function f(a) {" +
+         " var b = h((b=1) - (b = g(b)));" +
+         " return b;" +
+         "};",
+         // The last assignment in the initializer should be eliminated
+         "function f(a) {" +
+         " var b = h((b=1) - (b = g(b)));" +
+         " return b;" +
+         "};");
+  }
+
+  public void testIssue297h() {
+    test("function f(a) {" +
+         " var b = b=1;" +
+         " return b;" +
+         "};",
+         // The assignment in the initializer should be eliminated
+         "function f(a) {" +
+         " var b = b = 1;" +
+         " return b;" +
+         "};");
+  }
+
+
+  public void testInExpression() {
+    inFunction("var a; return a=(a=(a=3));", "var a; return 3;");
+    inFunction("var a; return a=(a=(a=a));", "var a; return a;");
+    inFunction("var a; return a=(a=(a=a+1)+1);", "var a; return a+1+1;");
+    inFunction("var a; return a=(a=(a=f(a)+1)+1);", "var a; return f(a)+1+1;");
+    inFunction("var a; return a=f(a=f(a=f(a)));", "var a; return f(f(f(a)));");
   }
 }
