diff --git a/src/main/java/org/apache/commons/math/complex/Complex.java b/src/main/java/org/apache/commons/math/complex/Complex.java
index 137765c..dd0b00a 100644
--- a/src/main/java/org/apache/commons/math/complex/Complex.java
+++ b/src/main/java/org/apache/commons/math/complex/Complex.java
@@ -256,7 +256,8 @@
         }
 
         if (divisor.isZero) {
-            return isZero ? NaN : INF;
+            // return isZero ? NaN : INF; // See MATH-657
+            return NaN;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -292,7 +293,8 @@
             return NaN;
         }
         if (divisor == 0d) {
-            return isZero ? NaN : INF;
+            // return isZero ? NaN : INF; // See MATH-657
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
diff --git a/src/test/java/org/apache/commons/math/complex/ComplexTest.java b/src/test/java/org/apache/commons/math/complex/ComplexTest.java
index a002b0b..71bdd1e 100644
--- a/src/test/java/org/apache/commons/math/complex/ComplexTest.java
+++ b/src/test/java/org/apache/commons/math/complex/ComplexTest.java
@@ -229,7 +229,8 @@
     public void testDivideZero() {
         Complex x = new Complex(3.0, 4.0);
         Complex z = x.divide(Complex.ZERO);
-        Assert.assertEquals(z, Complex.INF);
+        // Assert.assertEquals(z, Complex.INF); // See MATH-657
+        Assert.assertEquals(z, Complex.NaN);
     }
 
     @Test
@@ -573,10 +574,7 @@
 
     @Test
     public void testAtanI() {
-        for (int i = -10; i < 10; i++) {
-            System.out.println(new Complex(0, 1 - 0.1 * i).atan());
-        }
-        Assert.assertTrue(Complex.I.atan().isInfinite());
+        Assert.assertTrue(Complex.I.atan().isNaN());
     }
 
     @Test
