Only in buggy/: JodaTime
diff -r -u inducing/JodaTimeContrib/gwt/src/main/gwt-emul/org/joda/time/emul/org/joda/time/DateTimeZone.java buggy/JodaTimeContrib/gwt/src/main/gwt-emul/org/joda/time/emul/org/joda/time/DateTimeZone.java
--- inducing/JodaTimeContrib/gwt/src/main/gwt-emul/org/joda/time/emul/org/joda/time/DateTimeZone.java	2023-06-12 11:40:49.601676012 +0800
+++ buggy/JodaTimeContrib/gwt/src/main/gwt-emul/org/joda/time/emul/org/joda/time/DateTimeZone.java	2023-06-12 11:40:49.417684061 +0800
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2005 Stephen Colebourne
+ *  Copyright 2001-2006 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -20,16 +20,18 @@
 import java.io.ObjectOutputStream;
 import java.io.ObjectStreamException;
 import java.io.Serializable;
-import java.lang.ref.Reference;
-import java.lang.ref.SoftReference;
+//import java.lang.ref.Reference;
+//import java.lang.ref.SoftReference;
 import java.util.HashMap;
 import java.util.Locale;
 import java.util.Map;
 import java.util.Set;
+import java.util.TimeZone;
 
 import org.joda.time.chrono.BaseChronology;
 import org.joda.time.chrono.ISOChronology;
 import org.joda.time.field.FieldUtils;
+import org.joda.time.format.DateTimeFormat;
 import org.joda.time.format.DateTimeFormatter;
 import org.joda.time.format.DateTimeFormatterBuilder;
 import org.joda.time.format.FormatUtils;
@@ -38,7 +40,7 @@
 import org.joda.time.tz.NameProvider;
 import org.joda.time.tz.Provider;
 import org.joda.time.tz.UTCProvider;
-import org.joda.time.tz.ZoneInfoProvider;
+//import org.joda.time.tz.ZoneInfoProvider;
 
 /**
  * DateTimeZone represents a time zone.
@@ -113,14 +115,14 @@
         setNameProvider0(null);
 
         try {
-            try {
-                cDefault = getInstance(System.getProperty("user.timezone"));
-            } catch (RuntimeException ex) {
-                // ignored
-            }
-            if (cDefault == null) {
-                cDefault = getInstance(java.util.TimeZone.getDefault());
-            }
+//            try {
+//                cDefault = forID(System.getProperty("user.timezone"));
+//            } catch (RuntimeException ex) {
+//                // ignored
+//            }
+//            if (cDefault == null) {
+//                cDefault = forTimeZone(TimeZone.getDefault());
+//            }
         } catch (IllegalArgumentException ex) {
             // ignored
         }
@@ -130,6 +132,7 @@
         }
     }
 
+    //-----------------------------------------------------------------------
     /**
      * Gets the default time zone.
      * 
@@ -147,18 +150,19 @@
      * @throws SecurityException if the application has insufficient security rights
      */
     public static void setDefault(DateTimeZone zone) throws SecurityException {
-        SecurityManager sm = System.getSecurityManager();
-        if (sm != null) {
-            sm.checkPermission(new JodaTimePermission("DateTimeZone.setDefault"));
-        }
+//        SecurityManager sm = System.getSecurityManager();
+//        if (sm != null) {
+//            sm.checkPermission(new JodaTimePermission("DateTimeZone.setDefault"));
+//        }
         if (zone == null) {
             throw new IllegalArgumentException("The datetime zone must not be null");
         }
         cDefault = zone;
     }
 
+    //-----------------------------------------------------------------------
     /**
-     * Get the time zone by id.
+     * Gets a time zone instance for the specified time zone id.
      * <p>
      * The time zone id may be one of those returned by getAvailableIDs.
      * Short ids, as accepted by {@link java.util.TimeZone}, are not accepted.
@@ -172,7 +176,7 @@
      * @return the DateTimeZone object for the ID
      * @throws IllegalArgumentException if the ID is not recognised
      */
-    public static DateTimeZone getInstance(String id) throws IllegalArgumentException {
+    public static DateTimeZone forID(String id) {
         if (id == null) {
             return getDefault();
         }
@@ -188,7 +192,6 @@
             if (offset == 0L) {
                 return DateTimeZone.UTC;
             } else {
-                StringBuffer buf = new StringBuffer();
                 id = printOffset(offset);
                 return fixedOffsetZone(id, offset);
             }
@@ -197,7 +200,7 @@
     }
 
     /**
-     * Get the time zone by the number of hours difference from UTC.
+     * Gets a time zone instance for the specified offset to UTC in hours.
      * This method assumes standard length hours.
      * <p>
      * This factory is a convenient way of constructing zones with a fixed offset.
@@ -206,12 +209,12 @@
      * @return the DateTimeZone object for the offset
      * @throws IllegalArgumentException if the offset is too large or too small
      */
-    public static DateTimeZone getInstance(int hoursOffset) throws IllegalArgumentException {
-        return getInstance(hoursOffset, 0);
+    public static DateTimeZone forOffsetHours(int hoursOffset) throws IllegalArgumentException {
+        return forOffsetHoursMinutes(hoursOffset, 0);
     }
 
     /**
-     * Get the time zone by the number of hours and minutes difference from UTC.
+     * Gets a time zone instance for the specified offset to UTC in hours and minutes.
      * This method assumes 60 minutes in an hour, and standard length minutes.
      * <p>
      * This factory is a convenient way of constructing zones with a fixed offset.
@@ -223,7 +226,7 @@
      * @return the DateTimeZone object for the offset
      * @throws IllegalArgumentException if the offset or minute is too large or too small
      */
-    public static DateTimeZone getInstance(int hoursOffset, int minutesOffset) throws IllegalArgumentException {
+    public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException {
         if (hoursOffset == 0 && minutesOffset == 0) {
             return DateTimeZone.UTC;
         }
@@ -232,33 +235,46 @@
         }
         int offset = 0;
         try {
-            int hoursInMinutes = FieldUtils.safeMultiplyToInt(hoursOffset, 60);
+            int hoursInMinutes = FieldUtils.safeMultiply(hoursOffset, 60);
             if (hoursInMinutes < 0) {
                 minutesOffset = FieldUtils.safeAdd(hoursInMinutes, -minutesOffset);
             } else {
                 minutesOffset = FieldUtils.safeAdd(hoursInMinutes, minutesOffset);
             }
-            offset = FieldUtils.safeMultiplyToInt(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);
+            offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);
         } catch (ArithmeticException ex) {
             throw new IllegalArgumentException("Offset is too large");
         }
-        String id = printOffset(offset);
-        return fixedOffsetZone(id, offset);
+        return forOffsetMillis(offset);
+    }
+
+    /**
+     * Gets a time zone instance for the specified offset to UTC in milliseconds.
+     *
+     * @param millisOffset  the offset in millis from UTC
+     * @return the DateTimeZone object for the offset
+     */
+    public static DateTimeZone forOffsetMillis(int millisOffset) {
+        String id = printOffset(millisOffset);
+        return fixedOffsetZone(id, millisOffset);
     }
 
     /**
-     * Get the time zone by Java TimeZone.
+     * Gets a time zone instance for a JDK TimeZone.
      * <p>
      * DateTimeZone only accepts a subset of the IDs from TimeZone. The
      * excluded IDs are the short three letter form (except UTC). This 
      * method will attempt to convert between time zones created using the
      * short IDs and the full version.
+     * <p>
+     * This method is not designed to parse time zones with rules created by
+     * applications using <code>SimpleTimeZone</code> directly.
      * 
      * @param zone  the zone to convert, null means default
      * @return the DateTimeZone object for the zone
      * @throws IllegalArgumentException if the zone is not recognised
      */
-    public static DateTimeZone getInstance(java.util.TimeZone zone) {
+    public static DateTimeZone forTimeZone(TimeZone zone) {
         if (zone == null) {
             return getDefault();
         }
@@ -298,6 +314,7 @@
         throw new IllegalArgumentException("The datetime zone id is not recognised: " + id);
     }
 
+    //-----------------------------------------------------------------------
     /**
      * Gets the zone using a fixed offset amount.
      * 
@@ -306,19 +323,27 @@
      * @return the zone
      */
     private static synchronized DateTimeZone fixedOffsetZone(String id, int offset) {
+        if (offset == 0) {
+            return DateTimeZone.UTC;
+        }
         if (iFixedOffsetCache == null) {
             iFixedOffsetCache = new HashMap();
         }
-        DateTimeZone zone;
-        Reference ref = (Reference) iFixedOffsetCache.get(id);
-        if (ref != null) {
-            zone = (DateTimeZone) ref.get();
-            if (zone != null) {
-                return zone;
-            }
+//        DateTimeZone zone;
+//        Reference ref = (Reference) iFixedOffsetCache.get(id);
+//        if (ref != null) {
+//            zone = (DateTimeZone) ref.get();
+//            if (zone != null) {
+//                return zone;
+//            }
+//        }
+//        zone = new FixedDateTimeZone(id, null, offset, offset);
+//        iFixedOffsetCache.put(id, new SoftReference(zone));
+        DateTimeZone zone = (DateTimeZone) iFixedOffsetCache.get(id);
+        if (zone == null) {
+            zone = new FixedDateTimeZone(id, null, offset, offset);
+            iFixedOffsetCache.put(id, zone);
         }
-        zone = new FixedDateTimeZone(id, null, offset, offset);
-        iFixedOffsetCache.put(id, new SoftReference(zone));
         return zone;
     }
 
@@ -355,10 +380,10 @@
      * @throws IllegalArgumentException if the provider is invalid
      */
     public static void setProvider(Provider provider) throws SecurityException {
-        SecurityManager sm = System.getSecurityManager();
-        if (sm != null) {
-            sm.checkPermission(new JodaTimePermission("DateTimeZone.setProvider"));
-        }
+//        SecurityManager sm = System.getSecurityManager();
+//        if (sm != null) {
+//            sm.checkPermission(new JodaTimePermission("DateTimeZone.setProvider"));
+//        }
         setProvider0(provider);
     }
 
@@ -399,29 +424,29 @@
     private static Provider getDefaultProvider() {
         Provider provider = null;
 
-        try {
-            String providerClass =
-                System.getProperty("org.joda.time.DateTimeZone.Provider");
-            if (providerClass != null) {
-                try {
-                    provider = (Provider) Class.forName(providerClass).newInstance();
-                } catch (Exception ex) {
-                    Thread thread = Thread.currentThread();
-                    thread.getThreadGroup().uncaughtException(thread, ex);
-                }
-            }
-        } catch (SecurityException ex) {
-            // ignored
-        }
-
-        if (provider == null) {
-            try {
-                provider = new ZoneInfoProvider("org/joda/time/tz/data");
-            } catch (Exception ex) {
-                Thread thread = Thread.currentThread();
-                thread.getThreadGroup().uncaughtException(thread, ex);
-            }
-        }
+//        try {
+//            String providerClass =
+//                System.getProperty("org.joda.time.DateTimeZone.Provider");
+//            if (providerClass != null) {
+//                try {
+//                    provider = (Provider) Class.forName(providerClass).newInstance();
+//                } catch (Exception ex) {
+//                    Thread thread = Thread.currentThread();
+//                    thread.getThreadGroup().uncaughtException(thread, ex);
+//                }
+//            }
+//        } catch (SecurityException ex) {
+//            // ignored
+//        }
+//
+//        if (provider == null) {
+//            try {
+//                provider = new ZoneInfoProvider("org/joda/time/tz/data");
+//            } catch (Exception ex) {
+//                Thread thread = Thread.currentThread();
+//                thread.getThreadGroup().uncaughtException(thread, ex);
+//            }
+//        }
 
         if (provider == null) {
             provider = new UTCProvider();
@@ -454,10 +479,10 @@
      * @throws IllegalArgumentException if the provider is invalid
      */
     public static void setNameProvider(NameProvider nameProvider) throws SecurityException {
-        SecurityManager sm = System.getSecurityManager();
-        if (sm != null) {
-            sm.checkPermission(new JodaTimePermission("DateTimeZone.setNameProvider"));
-        }
+//        SecurityManager sm = System.getSecurityManager();
+//        if (sm != null) {
+//            sm.checkPermission(new JodaTimePermission("DateTimeZone.setNameProvider"));
+//        }
         setNameProvider0(nameProvider);
     }
 
@@ -484,19 +509,19 @@
      */
     private static NameProvider getDefaultNameProvider() {
         NameProvider nameProvider = null;
-        try {
-            String providerClass = System.getProperty("org.joda.time.DateTimeZone.NameProvider");
-            if (providerClass != null) {
-                try {
-                    nameProvider = (NameProvider) Class.forName(providerClass).newInstance();
-                } catch (Exception ex) {
-                    Thread thread = Thread.currentThread();
-                    thread.getThreadGroup().uncaughtException(thread, ex);
-                }
-            }
-        } catch (SecurityException ex) {
-            // ignore
-        }
+//        try {
+//            String providerClass = System.getProperty("org.joda.time.DateTimeZone.NameProvider");
+//            if (providerClass != null) {
+//                try {
+//                    nameProvider = (NameProvider) Class.forName(providerClass).newInstance();
+//                } catch (Exception ex) {
+//                    Thread thread = Thread.currentThread();
+//                    thread.getThreadGroup().uncaughtException(thread, ex);
+//                }
+//            }
+//        } catch (SecurityException ex) {
+//            // ignore
+//        }
 
         if (nameProvider == null) {
             nameProvider = new DefaultNameProvider();
@@ -577,7 +602,7 @@
             };
         }
 
-        return -(int) offsetFormatter().parseMillis(str, chrono);
+        return -(int) offsetFormatter().withChronology(chrono).parseMillis(str);
     }
 
     /**
@@ -787,6 +812,25 @@
     public abstract int getStandardOffset(long instant);
 
     /**
+     * Checks whether, at a particular instant, the offset is standard or not.
+     * <p>
+     * This method can be used to determine whether Summer Time (DST) applies.
+     * As a general rule, if the offset at the specified instant is standard,
+     * then either Winter time applies, or there is no Summer Time. If the
+     * instant is not standard, then Summer Time applies.
+     * <p>
+     * The implementation of the method is simply whether {@link #getOffset(long)}
+     * equals {@link #getStandardOffset(long)} at the specified instant.
+     * 
+     * @param instant  milliseconds from 1970-01-01T00:00:00Z to get the offset for
+     * @return true if the offset at the given instant is the standard offset
+     * @since 1.5
+     */
+    public boolean isStandardOffset(long instant) {
+        return getOffset(instant) == getStandardOffset(instant);
+    }
+
+    /**
      * Gets the millisecond offset to subtract from local time to get UTC time.
      * This offset can be used to undo adding the offset obtained by getOffset.
      *
@@ -795,16 +839,119 @@
      * millisUTC   == millisLocal - getOffsetFromLocal(millisLocal)
      * </pre>
      *
-     * Note: After calculating millisLocal, some error may be introduced. At
+     * NOTE: After calculating millisLocal, some error may be introduced. At
      * offset transitions (due to DST or other historical changes), ranges of
      * local times may map to different UTC times.
+     * <p>
+     * This method will return an offset suitable for calculating an instant
+     * after any DST gap. For example, consider a zone with a cutover
+     * from 01:00 to 01:59:<br />
+     * Input: 00:00  Output: 00:00<br />
+     * Input: 00:30  Output: 00:30<br />
+     * Input: 01:00  Output: 02:00<br />
+     * Input: 01:30  Output: 02:30<br />
+     * Input: 02:00  Output: 02:00<br />
+     * Input: 02:30  Output: 02:30<br />
+     * <p>
+     * NOTE: The behaviour of this method changed in v1.5, with the emphasis
+     * on returning a consistent result later along the time-line (shown above).
      *
      * @param instantLocal  the millisecond instant, relative to this time zone, to
      * get the offset for
      * @return the millisecond offset to subtract from local time to get UTC time
      */
     public int getOffsetFromLocal(long instantLocal) {
-        return getOffset(instantLocal - getOffset(instantLocal));
+        // get the offset at instantLocal (first estimate)
+        int offsetLocal = getOffset(instantLocal);
+        // adjust instantLocal using the estimate and recalc the offset
+        int offsetAdjusted = getOffset(instantLocal - offsetLocal);
+        // if the offsets differ, we must be near a DST boundary
+        if (offsetLocal != offsetAdjusted) {
+            // we need to ensure that time is always after the DST gap
+            // this happens naturally for positive offsets, but not for negative
+            if ((offsetLocal - offsetAdjusted) < 0) {
+                // if we just return offsetAdjusted then the time is pushed
+                // back before the transition, whereas it should be
+                // on or after the transition
+                long nextLocal = nextTransition(instantLocal - offsetLocal);
+                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);
+                if (nextLocal != nextAdjusted) {
+                    return offsetLocal;
+                }
+            }
+        }
+        return offsetAdjusted;
+    }
+
+    /**
+     * Converts a standard UTC instant to a local instant with the same
+     * local time. This conversion is used before performing a calculation
+     * so that the calculation can be done using a simple local zone.
+     *
+     * @param instantUTC  the UTC instant to convert to local
+     * @return the local instant with the same local time
+     * @throws ArithmeticException if the result overflows a long
+     * @since 1.5
+     */
+    public long convertUTCToLocal(long instantUTC) {
+        int offset = getOffset(instantUTC);
+        long instantLocal = instantUTC + offset;
+        // If there is a sign change, but the two values have the same sign...
+        if ((instantUTC ^ instantLocal) < 0 && (instantUTC ^ offset) >= 0) {
+            throw new ArithmeticException("Adding time zone offset caused overflow");
+        }
+        return instantLocal;
+    }
+
+    /**
+     * Converts a local instant to a standard UTC instant with the same
+     * local time. This conversion is used after performing a calculation
+     * where the calculation was done using a simple local zone.
+     *
+     * @param instantLocal  the local instant to convert to UTC
+     * @param strict  whether the conversion should reject non-existent local times
+     * @return the UTC instant with the same local time, 
+     * @throws ArithmeticException if the result overflows a long
+     * @throws IllegalArgumentException if the zone has no eqivalent local time
+     * @since 1.5
+     */
+    public long convertLocalToUTC(long instantLocal, boolean strict) {
+        // get the offset at instantLocal (first estimate)
+        int offsetLocal = getOffset(instantLocal);
+        // adjust instantLocal using the estimate and recalc the offset
+        int offset = getOffset(instantLocal - offsetLocal);
+        // if the offsets differ, we must be near a DST boundary
+        if (offsetLocal != offset) {
+            // if strict then always check if in DST gap
+            // otherwise only check if zone in Western hemisphere (as the
+            // value of offset is already correct for Eastern hemisphere)
+            if (strict || offsetLocal < 0) {
+                // determine if we are in the DST gap
+                long nextLocal = nextTransition(instantLocal - offsetLocal);
+                long nextAdjusted = nextTransition(instantLocal - offset);
+                if (nextLocal != nextAdjusted) {
+                    // yes we are in the DST gap
+                    if (strict) {
+                        // DST gap is not acceptable
+                        throw new IllegalArgumentException("Illegal instant due to time zone offset transition: " +
+                                DateTimeFormat.forPattern("yyyy-MM-dd'T'HH:mm:ss.SSS").print(new Instant(instantLocal)) +
+                                " (" + getID() + ")");
+                    } else {
+                        // DST gap is acceptable, but for the Western hemisphere
+                        // the offset is wrong and will result in local times
+                        // before the cutover so use the offsetLocal instead
+                        offset = offsetLocal;
+                    }
+                }
+            }
+        }
+        // check for overflow
+        long instantUTC = instantLocal - offset;
+        // If there is a sign change, but the two values have different signs...
+        if ((instantLocal ^ instantUTC) < 0 && (instantLocal ^ offset) < 0) {
+            throw new ArithmeticException("Subtracting time zone offset caused overflow");
+        }
+        return instantUTC;
     }
 
     /**
@@ -821,10 +968,132 @@
         if (newZone == null) {
             newZone = DateTimeZone.getDefault();
         }
+        if (newZone == this) {
+            return oldInstant;
+        }
         long instantLocal = oldInstant + getOffset(oldInstant);
         return instantLocal - newZone.getOffsetFromLocal(instantLocal);
     }
 
+//    //-----------------------------------------------------------------------
+//    /**
+//     * Checks if the given {@link LocalDateTime} is within an overlap.
+//     * <p>
+//     * When switching from Daylight Savings Time to standard time there is
+//     * typically an overlap where the same clock hour occurs twice. This
+//     * method identifies whether the local datetime refers to such an overlap.
+//     * 
+//     * @param localDateTime  the time to check, not null
+//     * @return true if the given datetime refers to an overlap
+//     */
+//    public boolean isLocalDateTimeOverlap(LocalDateTime localDateTime) {
+//        if (isFixed()) {
+//            return false;
+//        }
+//        long instantLocal = localDateTime.toDateTime(DateTimeZone.UTC).getMillis();
+//        // get the offset at instantLocal (first estimate)
+//        int offsetLocal = getOffset(instantLocal);
+//        // adjust instantLocal using the estimate and recalc the offset
+//        int offset = getOffset(instantLocal - offsetLocal);
+//        // if the offsets differ, we must be near a DST boundary
+//        if (offsetLocal != offset) {
+//            long nextLocal = nextTransition(instantLocal - offsetLocal);
+//            long nextAdjusted = nextTransition(instantLocal - offset);
+//            if (nextLocal != nextAdjusted) {
+//                // in DST gap
+//                return false;
+//            }
+//            long diff = Math.abs(offset - offsetLocal);
+//            DateTime dateTime = localDateTime.toDateTime(this);
+//            DateTime adjusted = dateTime.plus(diff);
+//            if (dateTime.getHourOfDay() == adjusted.getHourOfDay() &&
+//                    dateTime.getMinuteOfHour() == adjusted.getMinuteOfHour() &&
+//                    dateTime.getSecondOfMinute() == adjusted.getSecondOfMinute()) {
+//                return true;
+//            }
+//            adjusted = dateTime.minus(diff);
+//            if (dateTime.getHourOfDay() == adjusted.getHourOfDay() &&
+//                    dateTime.getMinuteOfHour() == adjusted.getMinuteOfHour() &&
+//                    dateTime.getSecondOfMinute() == adjusted.getSecondOfMinute()) {
+//                return true;
+//            }
+//            return false;
+//        }
+//        return false;
+//    }
+//        
+//        
+//        DateTime dateTime = null;
+//        try {
+//            dateTime = localDateTime.toDateTime(this);
+//        } catch (IllegalArgumentException ex) {
+//            return false;  // it is a gap, not an overlap
+//        }
+//        long offset1 = Math.abs(getOffset(dateTime.getMillis() + 1) - getStandardOffset(dateTime.getMillis() + 1));
+//        long offset2 = Math.abs(getOffset(dateTime.getMillis() - 1) - getStandardOffset(dateTime.getMillis() - 1));
+//        long offset = Math.max(offset1, offset2);
+//        if (offset == 0) {
+//            return false;
+//        }
+//        DateTime adjusted = dateTime.plus(offset);
+//        if (dateTime.getHourOfDay() == adjusted.getHourOfDay() &&
+//                dateTime.getMinuteOfHour() == adjusted.getMinuteOfHour() &&
+//                dateTime.getSecondOfMinute() == adjusted.getSecondOfMinute()) {
+//            return true;
+//        }
+//        adjusted = dateTime.minus(offset);
+//        if (dateTime.getHourOfDay() == adjusted.getHourOfDay() &&
+//                dateTime.getMinuteOfHour() == adjusted.getMinuteOfHour() &&
+//                dateTime.getSecondOfMinute() == adjusted.getSecondOfMinute()) {
+//            return true;
+//        }
+//        return false;
+        
+//        long millis = dateTime.getMillis();
+//        long nextTransition = nextTransition(millis);
+//        long previousTransition = previousTransition(millis);
+//        long deltaToPreviousTransition = millis - previousTransition;
+//        long deltaToNextTransition = nextTransition - millis;
+//        if (deltaToNextTransition < deltaToPreviousTransition) {
+//            int offset = getOffset(nextTransition);
+//            int standardOffset = getStandardOffset(nextTransition);
+//            if (Math.abs(offset - standardOffset) >= deltaToNextTransition) {
+//                return true;
+//            }
+//        } else  {
+//            int offset = getOffset(previousTransition);
+//            int standardOffset = getStandardOffset(previousTransition);
+//            if (Math.abs(offset - standardOffset) >= deltaToPreviousTransition) {
+//                return true;
+//            }
+//        }
+//        return false;
+//    }
+
+    /**
+     * Checks if the given {@link LocalDateTime} is within a gap.
+     * <p>
+     * When switching from standard time to Daylight Savings Time there is
+     * typically a gap where a clock hour is missing. This method identifies
+     * whether the local datetime refers to such a gap.
+     * 
+     * @param localDateTime  the time to check, not null
+     * @return true if the given datetime refers to a gap
+     * @since 1.6
+     */
+    public boolean isLocalDateTimeGap(LocalDateTime localDateTime) {
+        if (isFixed()) {
+            return false;
+        }
+        try {
+            localDateTime.toDateTime(this);
+            return false;
+        } catch (IllegalArgumentException ex) {
+            return true;
+        }
+    }
+
+    //-----------------------------------------------------------------------
     /**
      * Returns true if this time zone has no transitions.
      *
@@ -858,7 +1127,7 @@
     /**
      * Get the datetime zone as a {@link java.util.TimeZone}.
      * 
-     * @return the equivalent TimeZone object
+     * @return the closest matching TimeZone object
      */
     public java.util.TimeZone toTimeZone() {
         return java.util.TimeZone.getTimeZone(iID);
@@ -925,7 +1194,7 @@
         }
 
         private Object readResolve() throws ObjectStreamException {
-            return getInstance(iID);
+            return forID(iID);
         }
     }
 }
