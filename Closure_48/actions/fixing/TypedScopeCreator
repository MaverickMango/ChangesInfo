===
insert-tree
---
TagElement [4984,5027]
    TextElement:  nicksantos@google.com (Nick Santos) [4991,5027]
to
Javadoc [4535,4981]
at 1
===
insert-node
---
MethodDeclaration [45306,45653]
to
TypeDeclaration [16034,62535]
at 33
===
insert-tree
---
Javadoc [45306,45373]
    TagElement [45317,45365]
        TextElement: Return the scope for the name of the given node. [45317,45365]
to
MethodDeclaration [45306,45653]
at 0
===
insert-node
---
Modifier: private [45378,45385]
to
MethodDeclaration [45306,45653]
at 1
===
insert-tree
---
SimpleType [45386,45391]
    SimpleName: Scope [45386,45391]
to
MethodDeclaration [45306,45653]
at 2
===
insert-node
---
SimpleName: getQnameRootScope [45392,45409]
to
MethodDeclaration [45306,45653]
at 3
===
insert-tree
---
SingleVariableDeclaration [45410,45416]
    SimpleType [45410,45414]
        SimpleName: Node [45410,45414]
    SimpleName: n [45415,45416]
to
MethodDeclaration [45306,45653]
at 4
===
insert-node
---
Block [45418,45653]
to
MethodDeclaration [45306,45653]
at 5
===
insert-tree
---
VariableDeclarationStatement [45211,45246]
    SimpleType [45211,45216]
        SimpleName: Scope [45211,45216]
    VariableDeclarationFragment [45217,45245]
        SimpleName: scope [45217,45222]
        MethodInvocation [45225,45245]
            SimpleName: getQnameRootScope [45225,45242]
            METHOD_INVOCATION_ARGUMENTS [45243,45244]
                SimpleName: n [45243,45244]
to
Block [45153,45389]
at 0
===
insert-tree
---
ReturnStatement [45253,45294]
    InfixExpression [45260,45293]
        InfixExpression [45260,45273]
            SimpleName: scope [45260,45265]
            INFIX_EXPRESSION_OPERATOR: != [45266,45268]
            NullLiteral [45269,45273]
        INFIX_EXPRESSION_OPERATOR: && [45274,45276]
        MethodInvocation [45277,45293]
            METHOD_INVOCATION_RECEIVER [45277,45282]
                SimpleName: scope [45277,45282]
            SimpleName: isGlobal [45283,45291]
to
Block [45153,45389]
at 1
===
move-tree
---
VariableDeclarationStatement [45161,45208]
    SimpleType [45161,45165]
        SimpleName: Node [45161,45165]
    VariableDeclarationFragment [45166,45207]
        SimpleName: root [45166,45170]
        MethodInvocation [45173,45207]
            METHOD_INVOCATION_RECEIVER [45173,45181]
                SimpleName: NodeUtil [45173,45181]
            SimpleName: getRootOfQualifiedName [45182,45204]
            METHOD_INVOCATION_ARGUMENTS [45205,45206]
                SimpleName: n [45205,45206]
to
Block [45418,45653]
at 0
===
move-tree
---
IfStatement [45215,45363]
    MethodInvocation [45219,45232]
        METHOD_INVOCATION_RECEIVER [45219,45223]
            SimpleName: root [45219,45223]
        SimpleName: isName [45224,45230]
    Block [45234,45363]
        VariableDeclarationStatement [45244,45285]
            SimpleType [45244,45247]
                SimpleName: Var [45244,45247]
            VariableDeclarationFragment [45248,45284]
                SimpleName: var [45248,45251]
                MethodInvocation [45254,45284]
                    METHOD_INVOCATION_RECEIVER [45254,45259]
                        SimpleName: scope [45254,45259]
                    SimpleName: getVar [45260,45266]
                    METHOD_INVOCATION_ARGUMENTS [45267,45283]
                        MethodInvocation [45267,45283]
                            METHOD_INVOCATION_RECEIVER [45267,45271]
                                SimpleName: root [45267,45271]
                            SimpleName: getString [45272,45281]
        IfStatement [45294,45355]
            InfixExpression [45298,45309]
                SimpleName: var [45298,45301]
                INFIX_EXPRESSION_OPERATOR: != [45302,45304]
                NullLiteral [45305,45309]
            Block [45311,45355]
                ReturnStatement [45323,45345]
                    MethodInvocation [45330,45344]
                        METHOD_INVOCATION_RECEIVER [45330,45333]
                            SimpleName: var [45330,45333]
                        SimpleName: isGlobal [45334,45342]
to
Block [45418,45653]
at 1
===
insert-tree
---
ReturnStatement [45635,45647]
    NullLiteral [45642,45646]
to
Block [45418,45653]
at 2
===
insert-node
---
InfixExpression [58326,58379]
to
IfStatement [57053,57260]
at 0
===
insert-node
---
InfixExpression [58326,58354]
to
InfixExpression [58326,58379]
at 0
===
insert-node
---
INFIX_EXPRESSION_OPERATOR: && [58355,58357]
to
InfixExpression [58326,58379]
at 1
===
insert-tree
---
MethodInvocation [58358,58379]
    METHOD_INVOCATION_RECEIVER [58358,58366]
        SimpleName: rhsValue [58358,58366]
    SimpleName: isFunction [58367,58377]
to
InfixExpression [58326,58379]
at 2
===
insert-tree
---
IfStatement [58433,58622]
    InfixExpression [58437,58449]
        SimpleName: info [58437,58441]
        INFIX_EXPRESSION_OPERATOR: != [58442,58444]
        NullLiteral [58445,58449]
    Block [58451,58490]
        ExpressionStatement [58463,58480]
            Assignment [58463,58479]
                SimpleName: inferred [58463,58471]
                ASSIGNMENT_OPERATOR: = [58472,58473]
                BooleanLiteral: false [58474,58479]
    IfStatement [58496,58622]
        InfixExpression [58500,58581]
            PrefixExpression [58500,58531]
                PREFIX_EXPRESSION_OPERATOR: ! [58500,58501]
                MethodInvocation [58501,58531]
                    METHOD_INVOCATION_RECEIVER [58501,58506]
                        SimpleName: scope [58501,58506]
                    SimpleName: isDeclared [58507,58517]
                    METHOD_INVOCATION_ARGUMENTS [58518,58530]
                        SimpleName: qName [58518,58523]
                        BooleanLiteral: false [58525,58530]
            INFIX_EXPRESSION_OPERATOR: && [58532,58534]
            MethodInvocation [58554,58581]
                METHOD_INVOCATION_RECEIVER [58554,58555]
                    SimpleName: n [58554,58555]
                SimpleName: isUnscopedQualifiedName [58556,58579]
        Block [58583,58622]
            ExpressionStatement [58595,58612]
                Assignment [58595,58611]
                    SimpleName: inferred [58595,58603]
                    ASSIGNMENT_OPERATOR: = [58604,58605]
                    BooleanLiteral: false [58606,58611]
to
Block [57067,57260]
at 0
===
move-tree
---
SimpleName: inferred [57057,57065]
to
InfixExpression [58326,58354]
at 0
===
insert-node
---
INFIX_EXPRESSION_OPERATOR: && [58335,58337]
to
InfixExpression [58326,58354]
at 1
===
insert-tree
---
InfixExpression [58338,58354]
    SimpleName: rhsValue [58338,58346]
    INFIX_EXPRESSION_OPERATOR: != [58347,58349]
    NullLiteral [58350,58354]
to
InfixExpression [58326,58354]
at 2
===
update-node
---
SimpleName: isGlobal [45334,45342]
replace isGlobal by getScope
===
delete-tree
---
ReturnStatement [45370,45383]
    BooleanLiteral: false [45377,45382]
===
delete-tree
---
ExpressionStatement [57119,57252]
    Assignment [57119,57251]
        SimpleName: inferred [57119,57127]
        ASSIGNMENT_OPERATOR: = [57128,57129]
        PrefixExpression [57130,57251]
            PREFIX_EXPRESSION_OPERATOR: ! [57130,57131]
            ParenthesizedExpression [57131,57251]
                InfixExpression [57132,57250]
                    InfixExpression [57132,57185]
                        InfixExpression [57132,57148]
                            SimpleName: rhsValue [57132,57140]
                            INFIX_EXPRESSION_OPERATOR: != [57141,57143]
                            NullLiteral [57144,57148]
                        INFIX_EXPRESSION_OPERATOR: && [57149,57151]
                        MethodInvocation [57164,57185]
                            METHOD_INVOCATION_RECEIVER [57164,57172]
                                SimpleName: rhsValue [57164,57172]
                            SimpleName: isFunction [57173,57183]
                    INFIX_EXPRESSION_OPERATOR: && [57186,57188]
                    ParenthesizedExpression [57201,57250]
                        InfixExpression [57202,57249]
                            InfixExpression [57202,57214]
                                SimpleName: info [57202,57206]
                                INFIX_EXPRESSION_OPERATOR: != [57207,57209]
                                NullLiteral [57210,57214]
                            INFIX_EXPRESSION_OPERATOR: || [57215,57217]
                            PrefixExpression [57218,57249]
                                PREFIX_EXPRESSION_OPERATOR: ! [57218,57219]
                                MethodInvocation [57219,57249]
                                    METHOD_INVOCATION_RECEIVER [57219,57224]
                                        SimpleName: scope [57219,57224]
                                    SimpleName: isDeclared [57225,57235]
                                    METHOD_INVOCATION_ARGUMENTS [57236,57248]
                                        SimpleName: qName [57236,57241]
                                        BooleanLiteral: false [57243,57248]
