===
insert-node
---
Javadoc [741,1448]
to
TypeDeclaration [741,8451]
at 0
===
insert-tree
---
FieldDeclaration [2013,2128]
    Javadoc [2013,2062]
        TagElement [2017,2060]
            TextElement: A complex number representing "0.0 + 0.0i"  [2017,2060]
    Modifier: public [2071,2077]
    Modifier: static [2078,2084]
    Modifier: final [2085,2090]
    SimpleType [2091,2098]
        SimpleName: Complex [2091,2098]
    VariableDeclarationFragment [2099,2127]
        SimpleName: ZERO [2099,2103]
        ClassInstanceCreation [2106,2127]
            SimpleType [2110,2117]
                SimpleName: Complex [2110,2117]
            NumberLiteral: 0.0 [2118,2121]
            NumberLiteral: 0.0 [2123,2126]
to
TypeDeclaration [741,8451]
at 10
===
insert-tree
---
MethodDeclaration [10297,10832]
    Javadoc [10297,10689]
        TagElement [10308,10552]
            TextElement: Returns true if either the real or imaginary part of this complex number [10308,10380]
            TextElement: takes an infinite value (either <code>Double.POSITIVE_INFINITY</code> or  [10388,10461]
            TextElement: <code>Double.NEGATIVE_INFINITY</code>) and neither part [10469,10524]
            TextElement: is <code>NaN</code>. [10532,10552]
        TagElement [10568,10681]
            TextElement:  true if one or both parts of this complex number are infinite [10575,10637]
            TextElement: and neither part is <code>NaN</code> [10645,10681]
    Modifier: public [10694,10700]
    PrimitiveType: boolean [10701,10708]
    SimpleName: isInfinite [10709,10719]
    Block [10722,10832]
        ReturnStatement [10732,10818]
            InfixExpression [10739,10817]
                PrefixExpression [10739,10747]
                    PREFIX_EXPRESSION_OPERATOR: ! [10739,10740]
                    MethodInvocation [10740,10747]
                        SimpleName: isNaN [10740,10745]
                INFIX_EXPRESSION_OPERATOR: && [10748,10750]
                ParenthesizedExpression [10760,10817]
                    InfixExpression [10761,10816]
                        MethodInvocation [10761,10784]
                            METHOD_INVOCATION_RECEIVER [10761,10767]
                                SimpleName: Double [10761,10767]
                            SimpleName: isInfinite [10768,10778]
                            METHOD_INVOCATION_ARGUMENTS [10779,10783]
                                SimpleName: real [10779,10783]
                        INFIX_EXPRESSION_OPERATOR: || [10785,10787]
                        MethodInvocation [10788,10816]
                            METHOD_INVOCATION_RECEIVER [10788,10794]
                                SimpleName: Double [10788,10794]
                            SimpleName: isInfinite [10795,10805]
                            METHOD_INVOCATION_ARGUMENTS [10806,10815]
                                SimpleName: imaginary [10806,10815]
to
TypeDeclaration [741,8451]
at 23
===
insert-node
---
TagElement [748,1373]
to
Javadoc [741,1448]
at 0
===
move-tree
---
TagElement [846,880]
    TextElement:  Apache Software Foundation [853,880]
to
Javadoc [741,1448]
at 1
===
move-tree
---
TagElement [884,910]
    TextElement:  $Revision$ $Date$ [892,910]
to
Javadoc [741,1448]
at 2
===
insert-node
---
Modifier: private [1545,1552]
to
FieldDeclaration [968,1070]
at 1
===
insert-tree
---
Javadoc [1622,1686]
    TagElement [1626,1684]
        TextElement: The square root of -1. A number representing "0.0 + 1.0i"  [1626,1684]
to
FieldDeclaration [1080,1207]
at 0
===
insert-tree
---
Javadoc [1759,1808]
    TagElement [1763,1806]
        TextElement: A complex number representing "NaN + NaNi"  [1763,1806]
to
FieldDeclaration [1217,1357]
at 0
===
insert-tree
---
Javadoc [2138,2163]
    TagElement [2142,2161]
        TextElement: The imaginary part  [2142,2161]
to
FieldDeclaration [1487,1545]
at 0
===
insert-tree
---
Javadoc [2205,2225]
    TagElement [2209,2223]
        TextElement: The real part  [2209,2223]
to
FieldDeclaration [1555,1603]
at 0
===
insert-node
---
Javadoc [2566,2918]
to
MethodDeclaration [1919,2585]
at 0
===
insert-node
---
Javadoc [3585,4215]
to
MethodDeclaration [2595,2990]
at 0
===
insert-node
---
Javadoc [4366,4951]
to
MethodDeclaration [3000,3432]
at 0
===
insert-node
---
Javadoc [5106,6667]
to
MethodDeclaration [3442,4595]
at 0
===
insert-tree
---
Javadoc [9967,10182]
    TagElement [9978,10068]
        TextElement: Returns true if either or both parts of this complex number is NaN; [9978,10045]
        TextElement: false otherwise [10053,10068]
    TagElement [10083,10174]
        TextElement:   true if either or both parts of this complex number is NaN; [10090,10151]
        TextElement: false otherwise [10159,10174]
to
MethodDeclaration [6865,7179]
at 0
===
insert-node
---
Javadoc [10842,11702]
to
MethodDeclaration [7189,7725]
at 0
===
insert-node
---
Javadoc [11967,12241]
to
MethodDeclaration [7735,8013]
at 0
===
insert-node
---
Javadoc [12400,13058]
to
MethodDeclaration [8023,8449]
at 0
===
move-tree
---
TextElement: Representation of a Complex number - a number which has both a  [748,811]
to
TagElement [748,1373]
at 0
===
move-tree
---
TextElement: real and imaginary part. [815,839]
to
TagElement [748,1373]
at 1
===
insert-node
---
TextElement: <p> [843,846]
to
TagElement [748,1373]
at 2
===
insert-node
---
TextElement: Implementations of arithmetic operations handle <code>NaN</code> and [850,918]
to
TagElement [748,1373]
at 3
===
insert-node
---
TextElement: infinite values according to the rules for  [922,965]
to
TagElement [748,1373]
at 4
===
insert-tree
---
TagElement [965,989]
    QualifiedName: java.lang.Double [972,988]
to
TagElement [748,1373]
at 5
===
insert-node
---
TextElement: arithmetic, applying definitional formulas and returning <code>NaN</code> or [993,1069]
to
TagElement [748,1373]
at 6
===
insert-node
---
TextElement: infinite values in real or imaginary parts as these arise in computation.  [1073,1147]
to
TagElement [748,1373]
at 7
===
insert-node
---
TextElement: See individual method javadocs for details. [1151,1194]
to
TagElement [748,1373]
at 8
===
insert-node
---
TextElement: <p> [1198,1201]
to
TagElement [748,1373]
at 9
===
insert-tree
---
TagElement [1205,1220]
    MemberRef [1212,1219]
        SimpleName: equals [1213,1219]
to
TagElement [748,1373]
at 10
===
insert-node
---
TextElement:  identifies all values with <code>NaN</code> in either real  [1220,1280]
to
TagElement [748,1373]
at 11
===
insert-node
---
TextElement: or imaginary part - e.g., <pre> [1284,1315]
to
TagElement [748,1373]
at 12
===
insert-node
---
TextElement: <code>1 + NaNi  == NaN + i == NaN + NaNi.</code></pre> [1319,1373]
to
TagElement [748,1373]
at 13
===
insert-node
---
TagElement [2577,2869]
to
Javadoc [2566,2918]
at 0
===
insert-tree
---
TagElement [2884,2910]
    TextElement:  the absolute value [2891,2910]
to
Javadoc [2566,2918]
at 1
===
insert-tree
---
IfStatement [3026,3100]
    MethodInvocation [3030,3042]
        SimpleName: isInfinite [3030,3040]
    Block [3044,3100]
        ReturnStatement [3058,3090]
            QualifiedName: Double.POSITIVE_INFINITY [3065,3089]
to
Block [2054,2585]
at 1
===
insert-node
---
TagElement [3596,4055]
to
Javadoc [3585,4215]
at 0
===
move-tree
---
TagElement [2688,2724]
    SimpleName: rhs [2695,2698]
    TextElement:  the other complex number. [2698,2724]
to
Javadoc [3585,4215]
at 1
===
insert-tree
---
TagElement [4113,4143]
    TextElement:  the complex number sum [4120,4143]
to
Javadoc [3585,4215]
at 2
===
insert-tree
---
TagElement [4151,4207]
    SimpleName: NullPointerException [4159,4179]
    TextElement:  if <code>rhs</code> is null [4179,4207]
to
Javadoc [3585,4215]
at 3
===
insert-tree
---
TagElement [4377,4884]
    TextElement: Return the conjugate of this complex number. The conjugate of [4377,4438]
    TextElement: "A + Bi" is "A - Bi".  [4446,4468]
    TextElement: <p> [4476,4479]
    TagElement [4487,4499]
        MemberRef [4494,4498]
            SimpleName: NaN [4495,4498]
    TextElement:  is returned if either the real or imaginary [4499,4543]
    TextElement: part of this Complex number equals <code>Double.NaN</code>. [4551,4610]
    TextElement: <p> [4618,4621]
    TextElement: If the imaginary part is infinite, and the real part is not NaN,  [4629,4694]
    TextElement: the returned value has infinite imaginary part of the opposite [4702,4764]
    TextElement: sign - e.g. the conjugate of <code>1 + POSITIVE_INFINITY i</code> [4772,4837]
    TextElement: is <code>1 - NEGATIVE_INFINITY i</code> [4845,4884]
to
Javadoc [4366,4951]
at 0
===
move-tree
---
TagElement [3229,3273]
    TextElement:  the conjugate of this Complex object [3236,3273]
to
Javadoc [4366,4951]
at 1
===
insert-node
---
TagElement [5117,6501]
to
Javadoc [5106,6667]
at 0
===
move-tree
---
TagElement [3533,3569]
    SimpleName: rhs [3540,3543]
    TextElement:  the other complex number. [3543,3569]
to
Javadoc [5106,6667]
at 1
===
insert-tree
---
TagElement [6560,6595]
    TextElement:  the complex number quotient [6567,6595]
to
Javadoc [5106,6667]
at 2
===
insert-tree
---
TagElement [6603,6659]
    SimpleName: NullPointerException [6611,6631]
    TextElement:  if <code>rhs</code> is null [6631,6659]
to
Javadoc [5106,6667]
at 3
===
insert-tree
---
IfStatement [6942,7017]
    InfixExpression [6946,6979]
        MethodInvocation [6946,6962]
            METHOD_INVOCATION_RECEIVER [6946,6949]
                SimpleName: rhs [6946,6949]
            SimpleName: isInfinite [6950,6960]
        INFIX_EXPRESSION_OPERATOR: && [6963,6965]
        PrefixExpression [6966,6979]
            PREFIX_EXPRESSION_OPERATOR: ! [6966,6967]
            MethodInvocation [6967,6979]
                SimpleName: isInfinite [6967,6977]
    Block [6981,7017]
        ReturnStatement [6995,7007]
            SimpleName: ZERO [7002,7006]
to
Block [3661,4595]
at 4
===
insert-node
---
TagElement [10853,11537]
to
Javadoc [10842,11702]
at 0
===
move-tree
---
TagElement [7286,7322]
    SimpleName: rhs [7293,7296]
    TextElement:  the other complex number. [7296,7322]
to
Javadoc [10842,11702]
at 1
===
insert-tree
---
TagElement [11596,11630]
    TextElement:  the complex number product [11603,11630]
to
Javadoc [10842,11702]
at 2
===
insert-tree
---
TagElement [11638,11694]
    SimpleName: NullPointerException [11646,11666]
    TextElement:  if <code>rhs</code> is null [11666,11694]
to
Javadoc [10842,11702]
at 3
===
insert-tree
---
ReturnStatement [11826,11951]
    ClassInstanceCreation [11833,11950]
        SimpleType [11837,11844]
            SimpleName: Complex [11837,11844]
        InfixExpression [11845,11888]
            InfixExpression [11845,11860]
                SimpleName: real [11845,11849]
                INFIX_EXPRESSION_OPERATOR: * [11850,11851]
                QualifiedName: rhs.real [11852,11860]
            INFIX_EXPRESSION_OPERATOR: - [11861,11862]
            InfixExpression [11863,11888]
                SimpleName: imaginary [11863,11872]
                INFIX_EXPRESSION_OPERATOR: * [11873,11874]
                QualifiedName: rhs.imaginary [11875,11888]
        InfixExpression [11906,11949]
            InfixExpression [11906,11926]
                SimpleName: real [11906,11910]
                INFIX_EXPRESSION_OPERATOR: * [11911,11912]
                QualifiedName: rhs.imaginary [11913,11926]
            INFIX_EXPRESSION_OPERATOR: + [11927,11928]
            InfixExpression [11929,11949]
                SimpleName: imaginary [11929,11938]
                INFIX_EXPRESSION_OPERATOR: * [11939,11940]
                QualifiedName: rhs.real [11941,11949]
to
Block [7415,7725]
at 1
===
insert-node
---
TagElement [11978,12175]
to
Javadoc [11967,12241]
at 0
===
insert-tree
---
TagElement [12190,12233]
    TextElement:  the negation of this complex number [12197,12233]
to
Javadoc [11967,12241]
at 1
===
insert-node
---
TagElement [12411,12890]
to
Javadoc [12400,13058]
at 0
===
move-tree
---
TagElement [8135,8171]
    SimpleName: rhs [8142,8145]
    TextElement:  the other complex number. [8145,8171]
to
Javadoc [12400,13058]
at 1
===
insert-tree
---
TagElement [12949,12986]
    TextElement:  the complex number difference [12956,12986]
to
Javadoc [12400,13058]
at 2
===
insert-tree
---
TagElement [12994,13050]
    SimpleName: NullPointerException [13002,13022]
    TextElement:  if <code>rhs</code> is null [13022,13050]
to
Javadoc [12400,13058]
at 3
===
update-node
---
TextElement:  the real part. [1709,1724]
replace  the real part. by  the real part
===
update-node
---
TextElement:  the imaginary part. [1748,1768]
replace  the imaginary part. by  the imaginary part
===
move-tree
---
TextElement: Return the absolute value of this complex number. [1930,1979]
to
TagElement [2577,2869]
at 0
===
insert-node
---
TextElement: <p> [2634,2637]
to
TagElement [2577,2869]
at 1
===
insert-node
---
TextElement: Returns <code>NaN</code> if either real or imaginary part is [2645,2705]
to
TagElement [2577,2869]
at 2
===
insert-node
---
TextElement: <code>NaN</code> and <code>Double.POSITIVE_INFINITY</code> if [2713,2774]
to
TagElement [2577,2869]
at 3
===
insert-node
---
TextElement: neither part is <code>NaN</code>, but at least one part takes an infinite [2782,2855]
to
TagElement [2577,2869]
at 4
===
insert-node
---
TextElement: value. [2863,2869]
to
TagElement [2577,2869]
at 5
===
move-tree
---
TextElement: Return the sum of this complex number and the given complex number. [2606,2673]
to
TagElement [3596,4055]
at 0
===
insert-node
---
TextElement: <p> [3671,3674]
to
TagElement [3596,4055]
at 1
===
insert-node
---
TextElement: Uses the definitional formula  [3682,3712]
to
TagElement [3596,4055]
at 2
===
insert-node
---
TextElement: <pre> [3720,3725]
to
TagElement [3596,4055]
at 3
===
insert-node
---
TextElement: (a + bi) + (c + di) = (a+c) + (b+d)i [3733,3769]
to
TagElement [3596,4055]
at 4
===
insert-node
---
TextElement: </pre> [3777,3783]
to
TagElement [3596,4055]
at 5
===
insert-node
---
TextElement: <p> [3791,3794]
to
TagElement [3596,4055]
at 6
===
insert-node
---
TextElement: If either this or <code>rhs</code> has a NaN value in either part, [3802,3868]
to
TagElement [3596,4055]
at 7
===
insert-tree
---
TagElement [3876,3888]
    MemberRef [3883,3887]
        SimpleName: NaN [3884,3887]
to
TagElement [3596,4055]
at 8
===
insert-node
---
TextElement:  is returned; otherwise Inifinite and NaN values are [3888,3940]
to
TagElement [3596,4055]
at 9
===
insert-node
---
TextElement: returned in the parts of the result according to the rules for [3948,4010]
to
TagElement [3596,4055]
at 10
===
insert-tree
---
TagElement [4018,4042]
    QualifiedName: java.lang.Double [4025,4041]
to
TagElement [3596,4055]
at 11
===
insert-node
---
TextElement:  arithmetic.  [4042,4055]
to
TagElement [3596,4055]
at 12
===
update-node
---
TextElement:  the other complex number. [2698,2724]
replace  the other complex number. by  the other complex number
===
move-tree
---
TextElement: Return the quotient of this complex number and the given complex number. [3453,3525]
to
TagElement [5117,6501]
at 0
===
insert-node
---
TextElement: <p> [5197,5200]
to
TagElement [5117,6501]
at 1
===
insert-node
---
TextElement: Implements the definitional formula [5208,5243]
to
TagElement [5117,6501]
at 2
===
insert-node
---
TextElement: <pre><code> [5251,5262]
to
TagElement [5117,6501]
at 3
===
insert-node
---
TextElement: a + bi          ac + bd + (bc - ad)i [5273,5309]
to
TagElement [5117,6501]
at 4
===
insert-node
---
TextElement: ----------- = ------------------------- [5320,5359]
to
TagElement [5117,6501]
at 5
===
insert-node
---
TextElement: c + di               c<sup>2</sup> + d<sup>2</sup> [5370,5420]
to
TagElement [5117,6501]
at 6
===
insert-node
---
TextElement: </code></pre> [5428,5441]
to
TagElement [5117,6501]
at 7
===
insert-node
---
TextElement: but uses  [5449,5458]
to
TagElement [5117,6501]
at 8
===
insert-node
---
TextElement: <a href="http://doi.acm.org/10.1145/1039813.1039814"> [5466,5519]
to
TagElement [5117,6501]
at 9
===
insert-node
---
TextElement: prescaling of operands</a> to limit the effects of overflows and [5527,5591]
to
TagElement [5117,6501]
at 10
===
insert-node
---
TextElement: underflows in the computation. [5599,5629]
to
TagElement [5117,6501]
at 11
===
insert-node
---
TextElement: <p> [5637,5640]
to
TagElement [5117,6501]
at 12
===
insert-node
---
TextElement: Infinite and NaN values are handled / returned according to the [5648,5711]
to
TagElement [5117,6501]
at 13
===
insert-node
---
TextElement: following rules, applied in the order presented: [5719,5767]
to
TagElement [5117,6501]
at 14
===
insert-node
---
TextElement: <ul> [5775,5779]
to
TagElement [5117,6501]
at 15
===
insert-node
---
TextElement: <li>If either this or <code>rhs</code> has a NaN value in either part, [5787,5857]
to
TagElement [5117,6501]
at 16
===
insert-tree
---
TagElement [5866,5878]
    MemberRef [5873,5877]
        SimpleName: NaN [5874,5877]
to
TagElement [5117,6501]
at 17
===
insert-node
---
TextElement:  is returned.</li> [5878,5896]
to
TagElement [5117,6501]
at 18
===
insert-node
---
TextElement: <li>If <code>rhs</code> equals  [5904,5935]
to
TagElement [5117,6501]
at 19
===
insert-tree
---
TagElement [5935,5948]
    MemberRef [5942,5947]
        SimpleName: ZERO [5943,5947]
to
TagElement [5117,6501]
at 20
===
insert-node
---
TextElement: ,  [5948,5950]
to
TagElement [5117,6501]
at 21
===
insert-tree
---
TagElement [5950,5962]
    MemberRef [5957,5961]
        SimpleName: NaN [5958,5961]
to
TagElement [5117,6501]
at 22
===
insert-node
---
TextElement:  is returned. [5962,5975]
to
TagElement [5117,6501]
at 23
===
insert-node
---
TextElement: </li> [5983,5988]
to
TagElement [5117,6501]
at 24
===
insert-node
---
TextElement: <li>If this and <code>rhs</code> are both infinite, [5996,6047]
to
TagElement [5117,6501]
at 25
===
insert-tree
---
TagElement [6055,6067]
    MemberRef [6062,6066]
        SimpleName: NaN [6063,6066]
to
TagElement [5117,6501]
at 26
===
insert-node
---
TextElement:  is returned.</li> [6067,6085]
to
TagElement [5117,6501]
at 27
===
insert-node
---
TextElement: <li>If this is finite (i.e., has no infinite or NaN parts) and [6093,6155]
to
TagElement [5117,6501]
at 28
===
insert-node
---
TextElement: <code>rhs</code> is infinite (one or both parts infinite),  [6164,6223]
to
TagElement [5117,6501]
at 29
===
insert-tree
---
TagElement [6231,6244]
    MemberRef [6238,6243]
        SimpleName: ZERO [6239,6243]
to
TagElement [5117,6501]
at 30
===
insert-node
---
TextElement:  is returned.</li> [6244,6262]
to
TagElement [5117,6501]
at 31
===
insert-node
---
TextElement: <li>If this is infinite and <code>rhs</code> is finite, NaN values are [6270,6340]
to
TagElement [5117,6501]
at 32
===
insert-node
---
TextElement: returned in the parts of the result if the  [6348,6391]
to
TagElement [5117,6501]
at 33
===
insert-tree
---
TagElement [6391,6415]
    QualifiedName: java.lang.Double [6398,6414]
to
TagElement [5117,6501]
at 34
===
insert-node
---
TextElement: rules applied to the definitional formula force NaN results.</li> [6423,6488]
to
TagElement [5117,6501]
at 35
===
insert-node
---
TextElement: </ul> [6496,6501]
to
TagElement [5117,6501]
at 36
===
update-node
---
TextElement:  the other complex number. [3543,3569]
replace  the other complex number. by  the other complex number
===
update-node
---
TextElement: to Double.NaN, the complex number is equal to  [5040,5086]
replace to Double.NaN, the complex number is equal to  by to <code>Double.NaN</code>, the complex number is equal to 
===
update-node
---
TextElement: not equal to this Complex instance. [5323,5358]
replace not equal to this Complex instance. by not equal to this Complex instance
===
update-node
---
TextElement:  the imaginary part. [6620,6640]
replace  the imaginary part. by  the imaginary part
===
update-node
---
TextElement:  the real part. [6775,6790]
replace  the real part. by  the real part
===
move-tree
---
TextElement: Return the product of this complex number and the given complex number. [7200,7271]
to
TagElement [10853,11537]
at 0
===
insert-node
---
TextElement: <p> [10932,10935]
to
TagElement [10853,11537]
at 1
===
insert-node
---
TextElement: Implements the definitional formula: [10943,10979]
to
TagElement [10853,11537]
at 2
===
insert-node
---
TextElement: <pre><code> [10987,10998]
to
TagElement [10853,11537]
at 3
===
insert-node
---
TextElement: (a + bi)(c + di) = (ac - bd) + (ad + bc)i [11006,11047]
to
TagElement [10853,11537]
at 4
===
insert-node
---
TextElement: </code></pre> [11055,11068]
to
TagElement [10853,11537]
at 5
===
insert-node
---
TextElement: <p> [11076,11079]
to
TagElement [10853,11537]
at 6
===
insert-node
---
TextElement: Returns  [11087,11095]
to
TagElement [10853,11537]
at 7
===
insert-tree
---
TagElement [11095,11107]
    MemberRef [11102,11106]
        SimpleName: NaN [11103,11106]
to
TagElement [10853,11537]
at 8
===
insert-node
---
TextElement:  if either this or <code>rhs</code> has one or more [11107,11158]
to
TagElement [10853,11537]
at 9
===
insert-node
---
TextElement: NaN parts. [11166,11176]
to
TagElement [10853,11537]
at 10
===
insert-node
---
TextElement: <p> [11184,11187]
to
TagElement [10853,11537]
at 11
===
insert-node
---
TextElement: Returns NaN or infinite values in components of the result per the [11195,11261]
to
TagElement [10853,11537]
at 12
===
insert-node
---
TextElement: definitional formula and and the rules for  [11269,11312]
to
TagElement [10853,11537]
at 13
===
insert-tree
---
TagElement [11312,11336]
    QualifiedName: java.lang.Double [11319,11335]
to
TagElement [10853,11537]
at 14
===
insert-node
---
TextElement: arithmetic.  Examples: [11344,11366]
to
TagElement [10853,11537]
at 15
===
insert-node
---
TextElement: <pre><code> [11374,11385]
to
TagElement [10853,11537]
at 16
===
insert-node
---
TextElement: (1 + i) (INF + i)  =  INF + INFi [11394,11426]
to
TagElement [10853,11537]
at 17
===
insert-node
---
TextElement: (1 + INFi) (1 - INFi) = INF + NaNi [11435,11469]
to
TagElement [10853,11537]
at 18
===
insert-node
---
TextElement: (-INF + -INFi)(1 + NaNi) = NaN + NaNi [11478,11515]
to
TagElement [10853,11537]
at 19
===
insert-node
---
TextElement: </code></pre> [11524,11537]
to
TagElement [10853,11537]
at 20
===
update-node
---
TextElement:  the other complex number. [7296,7322]
replace  the other complex number. by  the other complex number
===
move-tree
---
TextElement: Return the additive inverse of this complex number. [7746,7797]
to
TagElement [11978,12175]
at 0
===
insert-node
---
TextElement: <p> [12037,12040]
to
TagElement [11978,12175]
at 1
===
insert-node
---
TextElement: Returns <code>Complex.NaN</code> if either real or imaginary [12048,12108]
to
TagElement [11978,12175]
at 2
===
insert-node
---
TextElement: part of this Complex number equals <code>Double.NaN</code>. [12116,12175]
to
TagElement [11978,12175]
at 3
===
move-tree
---
TextElement: Return the difference between this complex number and the given complex [8034,8105]
to
TagElement [12411,12890]
at 0
===
move-tree
---
TextElement: number. [8113,8120]
to
TagElement [12411,12890]
at 1
===
insert-node
---
TextElement: <p> [12506,12509]
to
TagElement [12411,12890]
at 2
===
insert-node
---
TextElement: Uses the definitional formula  [12517,12547]
to
TagElement [12411,12890]
at 3
===
insert-node
---
TextElement: <pre> [12555,12560]
to
TagElement [12411,12890]
at 4
===
insert-node
---
TextElement: (a + bi) - (c + di) = (a-c) + (b-d)i [12568,12604]
to
TagElement [12411,12890]
at 5
===
insert-node
---
TextElement: </pre> [12612,12618]
to
TagElement [12411,12890]
at 6
===
insert-node
---
TextElement: <p> [12626,12629]
to
TagElement [12411,12890]
at 7
===
insert-node
---
TextElement: If either this or <code>rhs</code> has a NaN value in either part, [12637,12703]
to
TagElement [12411,12890]
at 8
===
insert-tree
---
TagElement [12711,12723]
    MemberRef [12718,12722]
        SimpleName: NaN [12719,12722]
to
TagElement [12411,12890]
at 9
===
insert-node
---
TextElement:  is returned; otherwise inifinite and NaN values are [12723,12775]
to
TagElement [12411,12890]
at 10
===
insert-node
---
TextElement: returned in the parts of the result according to the rules for [12783,12845]
to
TagElement [12411,12890]
at 11
===
insert-tree
---
TagElement [12853,12877]
    QualifiedName: java.lang.Double [12860,12876]
to
TagElement [12411,12890]
at 12
===
insert-node
---
TextElement:  arithmetic.  [12877,12890]
to
TagElement [12411,12890]
at 13
===
update-node
---
TextElement:  the other complex number. [8145,8171]
replace  the other complex number. by  the other complex number
===
insert-tree
---
ReturnStatement [6903,6914]
    SimpleName: NaN [6910,6913]
to
Block [3843,3925]
at 0
===
delete-node
---
TagElement [748,839]
===
===
delete-node
---
Javadoc [741,914]
===
===
delete-tree
---
Javadoc [1080,1144]
    TagElement [1084,1142]
        TextElement: The square root of -1. A number representing "0.0 + 1.0i". [1084,1142]
===
delete-tree
---
Javadoc [1217,1282]
    TagElement [1221,1280]
        TextElement: A complex number analogous to  [1221,1251]
        TagElement [1251,1279]
            MemberRef [1258,1278]
                QualifiedName: java.lang.Double [1258,1274]
                SimpleName: NaN [1275,1278]
        TextElement:   [1279,1280]
===
delete-tree
---
Javadoc [1487,1513]
    TagElement [1491,1511]
        TextElement: The imaginary part.  [1491,1511]
===
delete-tree
---
Javadoc [1555,1576]
    TagElement [1559,1574]
        TextElement: The real part.  [1559,1574]
===
delete-node
---
TagElement [1930,1979]
===
===
delete-tree
---
TagElement [1994,2021]
    TextElement:  the absolute value. [2001,2021]
===
delete-node
---
Javadoc [1919,2029]
===
===
delete-node
---
TagElement [2606,2673]
===
===
delete-tree
---
TagElement [2732,2763]
    TextElement:  the complex number sum. [2739,2763]
===
delete-node
---
Javadoc [2595,2771]
===
===
delete-tree
---
IfStatement [2818,2881]
    InfixExpression [2822,2844]
        MethodInvocation [2822,2829]
            SimpleName: isNaN [2822,2827]
        INFIX_EXPRESSION_OPERATOR: || [2830,2832]
        MethodInvocation [2833,2844]
            METHOD_INVOCATION_RECEIVER [2833,2836]
                SimpleName: rhs [2833,2836]
            SimpleName: isNaN [2837,2842]
    Block [2846,2881]
        ReturnStatement [2860,2871]
            SimpleName: NaN [2867,2870]
===
delete-tree
---
TagElement [3011,3214]
    TextElement: Return the conjugate of this complex number.  The conjugate of [3011,3073]
    TextElement: "A + Bi" is "A - Bi".  Complex.NaN is returned if either the real or imaginary part of  [3081,3168]
    TextElement: this Complex number equals Double.NaN. [3176,3214]
===
delete-node
---
Javadoc [3000,3281]
===
===
delete-node
---
TagElement [3453,3525]
===
===
delete-tree
---
TagElement [3577,3613]
    TextElement:  the complex number quotient. [3584,3613]
===
delete-node
---
Javadoc [3442,3621]
===
===
delete-tree
---
ThrowStatement [3857,3915]
    ClassInstanceCreation [3863,3914]
        SimpleType [3867,3886]
            SimpleName: ArithmeticException [3867,3886]
        StringLiteral: "Error: division by zero." [3887,3913]
===
delete-tree
---
Javadoc [6865,7074]
    TagElement [6876,6959]
        TextElement: Returns true if this complex number is the special Not-a-Number (NaN) [6876,6945]
        TextElement: value. [6953,6959]
    TagElement [6974,7066]
        TextElement:  true if the value represented by this object is NaN; false [6981,7040]
        TextElement: otherwise. [7056,7066]
===
delete-node
---
TagElement [7200,7271]
===
===
delete-tree
---
TagElement [7330,7365]
    TextElement:  the complex number product. [7337,7365]
===
delete-node
---
Javadoc [7189,7373]
===
===
delete-tree
---
VariableDeclarationStatement [7506,7575]
    PrimitiveType: double [7506,7512]
    VariableDeclarationFragment [7513,7574]
        SimpleName: p [7513,7514]
        InfixExpression [7517,7574]
            ParenthesizedExpression [7517,7535]
                InfixExpression [7518,7534]
                    SimpleName: real [7518,7522]
                    INFIX_EXPRESSION_OPERATOR: + [7523,7524]
                    SimpleName: imaginary [7525,7534]
            INFIX_EXPRESSION_OPERATOR: * [7536,7537]
            ParenthesizedExpression [7538,7574]
                InfixExpression [7539,7573]
                    MethodInvocation [7539,7552]
                        METHOD_INVOCATION_RECEIVER [7539,7542]
                            SimpleName: rhs [7539,7542]
                        SimpleName: getReal [7543,7550]
                    INFIX_EXPRESSION_OPERATOR: + [7553,7554]
                    MethodInvocation [7555,7573]
                        METHOD_INVOCATION_RECEIVER [7555,7558]
                            SimpleName: rhs [7555,7558]
                        SimpleName: getImaginary [7559,7571]
===
delete-tree
---
VariableDeclarationStatement [7584,7617]
    PrimitiveType: double [7584,7590]
    VariableDeclarationFragment [7591,7616]
        SimpleName: ac [7591,7593]
        InfixExpression [7596,7616]
            SimpleName: real [7596,7600]
            INFIX_EXPRESSION_OPERATOR: * [7601,7602]
            MethodInvocation [7603,7616]
                METHOD_INVOCATION_RECEIVER [7603,7606]
                    SimpleName: rhs [7603,7606]
                SimpleName: getReal [7607,7614]
===
delete-tree
---
VariableDeclarationStatement [7626,7669]
    PrimitiveType: double [7626,7632]
    VariableDeclarationFragment [7633,7668]
        SimpleName: bd [7633,7635]
        InfixExpression [7638,7668]
            SimpleName: imaginary [7638,7647]
            INFIX_EXPRESSION_OPERATOR: * [7648,7649]
            MethodInvocation [7650,7668]
                METHOD_INVOCATION_RECEIVER [7650,7653]
                    SimpleName: rhs [7650,7653]
                SimpleName: getImaginary [7654,7666]
===
delete-tree
---
ReturnStatement [7678,7719]
    ClassInstanceCreation [7685,7718]
        SimpleType [7689,7696]
            SimpleName: Complex [7689,7696]
        InfixExpression [7697,7704]
            SimpleName: ac [7697,7699]
            INFIX_EXPRESSION_OPERATOR: - [7700,7701]
            SimpleName: bd [7702,7704]
        InfixExpression [7706,7717]
            SimpleName: p [7706,7707]
            INFIX_EXPRESSION_OPERATOR: - [7708,7709]
            SimpleName: ac [7710,7712]
            SimpleName: bd [7715,7717]
===
delete-node
---
TagElement [7746,7797]
===
===
delete-tree
---
TagElement [7812,7856]
    TextElement:  the negation of this complex number. [7819,7856]
===
delete-node
---
Javadoc [7735,7864]
===
===
delete-node
---
TagElement [8034,8120]
===
===
delete-tree
---
TagElement [8179,8217]
    TextElement:  the complex number difference. [8186,8217]
===
delete-node
---
Javadoc [8023,8225]
===
