===
insert-tree
---
MethodDeclaration [10179,11624]
    Javadoc [10179,11346]
        TagElement [10190,11064]
            TextElement: Creates a complex number from the given polar representation. [10190,10251]
            TextElement: <p> [10259,10262]
            TextElement: The value returned is <code>r&middot;e<sup>i&middot;theta</sup></code>, [10270,10341]
            TextElement: computed as <code>r&middot;cos(theta) + r&middot;sin(theta)i</code> [10349,10416]
            TextElement: <p> [10424,10427]
            TextElement: If either <code>r</code> or <code>theta</code> is NaN, or  [10435,10493]
            TextElement: <code>theta</code> is infinite,  [10501,10533]
            TagElement [10533,10552]
                MemberRef [10540,10551]
                    SimpleName: Complex [10540,10547]
                    SimpleName: NaN [10548,10551]
            TextElement:  is returned. [10552,10565]
            TextElement: <p> [10573,10576]
            TextElement: If <code>r</code> is infinite and <code>theta</code> is finite,  [10584,10648]
            TextElement: infinite or NaN values may be returned in parts of the result, following [10656,10728]
            TextElement: the rules for double arithmetic.<pre> [10736,10773]
            TextElement: Examples:  [10781,10791]
            TextElement: <code> [10799,10805]
            TextElement: polar2Complex(INFINITY, &pi;/4) = INFINITY + INFINITY i [10813,10868]
            TextElement: polar2Complex(INFINITY, 0) = INFINITY + NaN i [10876,10921]
            TextElement: polar2Complex(INFINITY, -&pi;/4) = INFINITY - INFINITY i [10929,10985]
            TextElement: polar2Complex(INFINITY, 5&pi;/4) = -INFINITY - INFINITY i </code></pre> [10993,11064]
        TagElement [11080,11132]
            SimpleName: r [11087,11088]
            TextElement:  the modulus of the complex number to create [11088,11132]
        TagElement [11140,11198]
            SimpleName: theta [11147,11152]
            TextElement:   the argument of the complex number to create [11152,11198]
        TagElement [11206,11262]
            TextElement:  <code>r&middot;e<sup>i&middot;theta</sup></code> [11213,11262]
        TagElement [11270,11320]
            SimpleName: IllegalArgumentException [11278,11302]
            TextElement:   if r is negative [11302,11320]
        TagElement [11328,11338]
            TextElement:  1.1 [11334,11338]
    Modifier: public [11351,11357]
    Modifier: static [11358,11364]
    SimpleType [11365,11372]
        SimpleName: Complex [11365,11372]
    SimpleName: polar2Complex [11373,11386]
    SingleVariableDeclaration [11387,11395]
        PrimitiveType: double [11387,11393]
        SimpleName: r [11394,11395]
    SingleVariableDeclaration [11397,11409]
        PrimitiveType: double [11397,11403]
        SimpleName: theta [11404,11409]
    Block [11411,11624]
        IfStatement [11421,11548]
            InfixExpression [11425,11430]
                SimpleName: r [11425,11426]
                INFIX_EXPRESSION_OPERATOR: < [11427,11428]
                NumberLiteral: 0 [11429,11430]
            Block [11432,11548]
                ThrowStatement [11446,11538]
                    ClassInstanceCreation [11452,11537]
                        SimpleType [11456,11480]
                            SimpleName: IllegalArgumentException [11456,11480]
                        StringLiteral: "Complex modulus must not be negative" [11498,11536]
        ReturnStatement [11557,11618]
            ClassInstanceCreation [11564,11617]
                SimpleType [11568,11575]
                    SimpleName: Complex [11568,11575]
                InfixExpression [11576,11595]
                    SimpleName: r [11576,11577]
                    INFIX_EXPRESSION_OPERATOR: * [11578,11579]
                    MethodInvocation [11580,11595]
                        METHOD_INVOCATION_RECEIVER [11580,11584]
                            SimpleName: Math [11580,11584]
                        SimpleName: cos [11585,11588]
                        METHOD_INVOCATION_ARGUMENTS [11589,11594]
                            SimpleName: theta [11589,11594]
                InfixExpression [11597,11616]
                    SimpleName: r [11597,11598]
                    INFIX_EXPRESSION_OPERATOR: * [11599,11600]
                    MethodInvocation [11601,11616]
                        METHOD_INVOCATION_RECEIVER [11601,11605]
                            SimpleName: Math [11601,11605]
                        SimpleName: sin [11606,11609]
                        METHOD_INVOCATION_ARGUMENTS [11610,11615]
                            SimpleName: theta [11610,11615]
to
TypeDeclaration [712,8783]
at 12
===
insert-node
---
Javadoc [1621,2246]
to
MethodDeclaration [1167,1658]
at 0
===
insert-node
---
Javadoc [2481,3098]
to
MethodDeclaration [1668,2151]
at 0
===
insert-node
---
Javadoc [3333,3949]
to
MethodDeclaration [2161,2710]
at 0
===
insert-node
---
Javadoc [4229,5363]
to
MethodDeclaration [2720,3264]
at 0
===
insert-node
---
Javadoc [5683,6877]
to
MethodDeclaration [3274,3862]
at 0
===
insert-node
---
Javadoc [7197,8340]
to
MethodDeclaration [3872,4446]
at 0
===
insert-node
---
Javadoc [8626,9942]
to
MethodDeclaration [4456,4897]
at 0
===
insert-node
---
Javadoc [11634,12325]
to
MethodDeclaration [4912,5216]
at 0
===
insert-node
---
Javadoc [12435,13573]
to
MethodDeclaration [5226,5761]
at 0
===
insert-node
---
Javadoc [13892,15067]
to
MethodDeclaration [5771,6351]
at 0
===
insert-node
---
Javadoc [15387,16877]
to
MethodDeclaration [6361,7168]
at 0
===
insert-node
---
Javadoc [17442,18203]
to
MethodDeclaration [7178,7550]
at 0
===
insert-node
---
Javadoc [18323,19543]
to
MethodDeclaration [7560,8140]
at 0
===
insert-node
---
Javadoc [19894,21129]
to
MethodDeclaration [8150,8781]
at 0
===
update-node
---
TextElement: Implementations of various transcendental functions for [719,774]
replace Implementations of various transcendental functions for by Static implementations of common 
===
update-node
---
TextElement:  arguments. [825,836]
replace  arguments. by -valued functions.  Included
===
insert-node
---
TextElement: are trigonometric, exponential, log, power and square root functions. [835,904]
to
TagElement [719,991]
at 3
===
insert-node
---
TextElement: <p> [907,910]
to
TagElement [719,991]
at 4
===
insert-node
---
TextElement: See individual method javadocs for the computational formulas used. [1066,1133]
to
TagElement [719,991]
at 10
===
insert-node
---
TextElement: In general, NaN values in either real or imaginary parts of input arguments [1137,1212]
to
TagElement [719,991]
at 11
===
insert-node
---
TextElement: result in  [1216,1226]
to
TagElement [719,991]
at 12
===
insert-tree
---
TagElement [1226,1245]
    MemberRef [1233,1244]
        SimpleName: Complex [1233,1240]
        SimpleName: NaN [1241,1244]
to
TagElement [719,991]
at 13
===
insert-node
---
TextElement:  returned.  Otherwise, infinite or NaN values [1245,1290]
to
TagElement [719,991]
at 14
===
insert-node
---
TextElement: are returned as they arise in computing the real functions specified in the [1294,1369]
to
TagElement [719,991]
at 15
===
insert-node
---
TextElement: computational formulas.  Null arguments result in NullPointerExceptions. [1373,1445]
to
TagElement [719,991]
at 16
===
insert-node
---
TagElement [1632,2051]
to
Javadoc [1621,2246]
at 0
===
move-tree
---
TagElement [1314,1372]
    SimpleName: z [1321,1322]
    TextElement:  the value whose inverse cosine is to be returned. [1322,1372]
to
Javadoc [1621,2246]
at 1
===
insert-tree
---
TagElement [2132,2176]
    TextElement:  the inverse cosine of <code>z</code> [2139,2176]
to
Javadoc [1621,2246]
at 2
===
insert-tree
---
TagElement [2184,2238]
    SimpleName: NullPointerException [2192,2212]
    TextElement:  if <code>z</code> is null [2212,2238]
to
Javadoc [1621,2246]
at 3
===
insert-node
---
TagElement [2492,2905]
to
Javadoc [2481,3098]
at 0
===
move-tree
---
TagElement [1811,1867]
    SimpleName: z [1818,1819]
    TextElement:  the value whose inverse sine is to be returned. [1819,1867]
to
Javadoc [2481,3098]
at 1
===
move-tree
---
TagElement [1875,1918]
    TextElement:  the inverse sine of <code>z</code>. [1882,1918]
to
Javadoc [2481,3098]
at 2
===
insert-tree
---
TagElement [3036,3090]
    SimpleName: NullPointerException [3044,3064]
    TextElement:  if <code>z</code> is null [3064,3090]
to
Javadoc [2481,3098]
at 3
===
insert-node
---
TagElement [3344,3752]
to
Javadoc [3333,3949]
at 0
===
move-tree
---
TagElement [2310,2369]
    SimpleName: z [2317,2318]
    TextElement:  the value whose inverse tangent is to be returned. [2318,2369]
to
Javadoc [3333,3949]
at 1
===
insert-tree
---
TagElement [3834,3879]
    TextElement:  the inverse tangent of <code>z</code> [3841,3879]
to
Javadoc [3333,3949]
at 2
===
insert-tree
---
TagElement [3887,3941]
    SimpleName: NullPointerException [3895,3915]
    TextElement:  if <code>z</code> is null [3915,3941]
to
Javadoc [3333,3949]
at 3
===
insert-node
---
TagElement [4240,5184]
to
Javadoc [4229,5363]
at 0
===
move-tree
---
TagElement [2851,2901]
    SimpleName: z [2858,2859]
    TextElement:  the value whose cosine is to be returned. [2859,2901]
to
Javadoc [4229,5363]
at 1
===
insert-tree
---
TagElement [5257,5293]
    TextElement:  the cosine of <code>z</code> [5264,5293]
to
Javadoc [4229,5363]
at 2
===
insert-tree
---
TagElement [5301,5355]
    SimpleName: NullPointerException [5309,5329]
    TextElement:  if <code>z</code> is null [5329,5355]
to
Javadoc [4229,5363]
at 3
===
insert-node
---
TagElement [5694,6736]
to
Javadoc [5683,6877]
at 0
===
move-tree
---
TagElement [3427,3488]
    SimpleName: z [3434,3435]
    TextElement:  the value whose hyperbolic cosine is to be returned. [3435,3488]
to
Javadoc [5683,6877]
at 1
===
move-tree
---
TagElement [3496,3544]
    TextElement:  the hyperbolic cosine of <code>z</code>. [3503,3544]
to
Javadoc [5683,6877]
at 2
===
insert-node
---
TagElement [7208,8249]
to
Javadoc [7197,8340]
at 0
===
move-tree
---
TagElement [4038,4057]
    SimpleName: z [4045,4046]
    TextElement:  the value. [4046,4057]
to
Javadoc [7197,8340]
at 1
===
insert-tree
---
TagElement [8291,8332]
    TextElement:  <i>e</i><sup><code>z</code></sup> [8298,8332]
to
Javadoc [7197,8340]
at 2
===
insert-node
---
TagElement [8637,9865]
to
Javadoc [8626,9942]
at 0
===
move-tree
---
TagElement [4609,4628]
    SimpleName: z [4616,4617]
    TextElement:  the value. [4617,4628]
to
Javadoc [8626,9942]
at 1
===
move-tree
---
TagElement [4636,4662]
    TextElement:  ln <code>z</code>. [4643,4662]
to
Javadoc [8626,9942]
at 2
===
insert-node
---
TagElement [11645,12137]
to
Javadoc [11634,12325]
at 0
===
move-tree
---
TagElement [5004,5022]
    SimpleName: y [5011,5012]
    TextElement:  the base. [5012,5022]
to
Javadoc [11634,12325]
at 1
===
move-tree
---
TagElement [5030,5052]
    SimpleName: x [5037,5038]
    TextElement:  the exponent. [5038,5052]
to
Javadoc [11634,12325]
at 2
===
insert-tree
---
TagElement [12209,12256]
    TextElement:  <code>y</code><sup><code>x</code></sup> [12216,12256]
to
Javadoc [11634,12325]
at 3
===
insert-tree
---
TagElement [12264,12317]
    SimpleName: NullPointerException [12272,12292]
    TextElement:  if either x or y is null [12292,12317]
to
Javadoc [11634,12325]
at 4
===
insert-node
---
TagElement [12446,13458]
to
Javadoc [12435,13573]
at 0
===
move-tree
---
TagElement [5353,5401]
    SimpleName: z [5360,5361]
    TextElement:  the value whose sine is to be returned. [5361,5401]
to
Javadoc [12435,13573]
at 1
===
move-tree
---
TagElement [5409,5444]
    TextElement:  the sine of <code>z</code>. [5416,5444]
to
Javadoc [12435,13573]
at 2
===
insert-node
---
TagElement [13903,14870]
to
Javadoc [13892,15067]
at 0
===
move-tree
---
TagElement [5920,5979]
    SimpleName: z [5927,5928]
    TextElement:  the value whose hyperbolic sine is to be returned. [5928,5979]
to
Javadoc [13892,15067]
at 1
===
insert-tree
---
TagElement [14952,14997]
    TextElement:  the hyperbolic sine of <code>z</code> [14959,14997]
to
Javadoc [13892,15067]
at 2
===
insert-tree
---
TagElement [15005,15059]
    SimpleName: NullPointerException [15013,15033]
    TextElement:  if <code>z</code> is null [15033,15059]
to
Javadoc [13892,15067]
at 3
===
insert-tree
---
TagElement [15398,16688]
    TextElement: Compute the  [15398,15410]
    TextElement: <a href="http://mathworld.wolfram.com/SquareRoot.html" TARGET="_top"> [15418,15487]
    TextElement: square root</a> for the given complex argument. [15495,15542]
    TextElement: <p> [15550,15553]
    TextElement: Implements the following algorithm to compute <code>sqrt(a + bi)</code>:  [15561,15634]
    TextElement: <ol><li>Let <code>t = sqrt((|a| + |a + bi|) / 2)</code></li> [15642,15702]
    TextElement: <li><pre>if <code> a &#8805; 0</code> return <code>t + (b/2t)i</code> [15710,15779]
    TextElement: else return <code>|b|/2t + sign(b)t i </code></pre></li> [15788,15844]
    TextElement: </ol> [15852,15857]
    TextElement: where <ul> [15865,15875]
    TextElement: <li><code>|a| =  [15883,15899]
    TagElement [15899,15915]
        MemberRef [15906,15914]
            SimpleName: Math [15906,15910]
            SimpleName: abs [15911,15914]
    TextElement: (a)</code></li> [15915,15930]
    TextElement: <li><code>|a + bi| =  [15938,15959]
    TagElement [15959,15978]
        MemberRef [15966,15977]
            SimpleName: Complex [15966,15973]
            SimpleName: abs [15974,15977]
    TextElement: (a + bi) </code></li> [15978,15999]
    TextElement: <li><code>sign(b) =   [16007,16028]
    TagElement [16028,16055]
        MemberRef [16035,16054]
            SimpleName: MathUtils [16035,16044]
            SimpleName: indicator [16045,16054]
    TextElement: (b) </code> [16055,16066]
    TextElement: </ul> [16074,16079]
    TextElement: <p> [16087,16090]
    TextElement: Returns  [16098,16106]
    TagElement [16106,16125]
        MemberRef [16113,16124]
            SimpleName: Complex [16113,16120]
            SimpleName: NaN [16121,16124]
    TextElement:  if either real or imaginary part of the  [16125,16166]
    TextElement: input argument is <code>NaN</code>. [16174,16209]
    TextElement: <p> [16217,16220]
    TextElement: Infinite values in real or imaginary parts of the input may result in [16228,16297]
    TextElement: infinite or NaN values returned in parts of the result.<pre> [16305,16365]
    TextElement: Examples:  [16373,16383]
    TextElement: <code> [16391,16397]
    TextElement: sqrt(1 &plusmn; INFINITY i) = INFINITY + NaN i [16405,16451]
    TextElement: sqrt(INFINITY + i) = INFINITY + 0i [16459,16493]
    TextElement: sqrt(-INFINITY + i) = 0 + INFINITY i [16501,16537]
    TextElement: sqrt(INFINITY &plusmn; INFINITY i) = INFINITY + NaN i [16545,16598]
    TextElement: sqrt(-INFINITY &plusmn; INFINITY i) = NaN &plusmn; INFINITY i [16606,16667]
    TextElement: </code></pre> [16675,16688]
to
Javadoc [15387,16877]
at 0
===
move-tree
---
TagElement [6500,6555]
    SimpleName: z [6507,6508]
    TextElement:  the value whose square root is to be returned. [6508,6555]
to
Javadoc [15387,16877]
at 1
===
insert-tree
---
TagElement [16766,16807]
    TextElement:  the square root of <code>z</code> [16773,16807]
to
Javadoc [15387,16877]
at 2
===
insert-tree
---
TagElement [16815,16869]
    SimpleName: NullPointerException [16823,16843]
    TextElement:  if <code>z</code> is null [16843,16869]
to
Javadoc [15387,16877]
at 3
===
insert-tree
---
TagElement [17453,18034]
    TextElement: Compute the  [17453,17465]
    TextElement: <a href="http://mathworld.wolfram.com/SquareRoot.html" TARGET="_top"> [17473,17542]
    TextElement: square root</a> of 1 - <code>z</code><sup>2</sup> for the given complex [17550,17621]
    TextElement: argument. [17629,17638]
    TextElement: <p> [17646,17649]
    TextElement: Computes the result directly as  [17657,17689]
    TextElement: <code>sqrt(Complex.ONE.subtract(z.multiply(z)))</code>. [17697,17752]
    TextElement: <p> [17760,17763]
    TextElement: Returns  [17771,17779]
    TagElement [17779,17798]
        MemberRef [17786,17797]
            SimpleName: Complex [17786,17793]
            SimpleName: NaN [17794,17797]
    TextElement:  if either real or imaginary part of the  [17798,17839]
    TextElement: input argument is <code>NaN</code>. [17847,17882]
    TextElement: <p> [17890,17893]
    TextElement: Infinite values in real or imaginary parts of the input may result in [17901,17970]
    TextElement: infinite or NaN values returned in parts of the result.  [17978,18034]
to
Javadoc [17442,18203]
at 0
===
move-tree
---
TagElement [7347,7366]
    SimpleName: z [7354,7355]
    TextElement:  the value. [7355,7366]
to
Javadoc [17442,18203]
at 1
===
insert-tree
---
TagElement [18076,18133]
    TextElement:  the square root of 1 - <code>z</code><sup>2</sup> [18083,18133]
to
Javadoc [17442,18203]
at 2
===
insert-tree
---
TagElement [18141,18195]
    SimpleName: NullPointerException [18149,18169]
    TextElement:  if <code>z</code> is null [18169,18195]
to
Javadoc [17442,18203]
at 3
===
insert-node
---
TagElement [18334,19362]
to
Javadoc [18323,19543]
at 0
===
move-tree
---
TagElement [7694,7745]
    SimpleName: z [7701,7702]
    TextElement:  the value whose tangent is to be returned. [7702,7745]
to
Javadoc [18323,19543]
at 1
===
insert-tree
---
TagElement [19436,19473]
    TextElement:  the tangent of <code>z</code> [19443,19473]
to
Javadoc [18323,19543]
at 2
===
insert-tree
---
TagElement [19481,19535]
    SimpleName: NullPointerException [19489,19509]
    TextElement:  if <code>z</code> is null [19509,19535]
to
Javadoc [18323,19543]
at 3
===
insert-node
---
TagElement [19905,20927]
to
Javadoc [19894,21129]
at 0
===
move-tree
---
TagElement [8312,8374]
    SimpleName: z [8319,8320]
    TextElement:  the value whose hyperbolic tangent is to be returned. [8320,8374]
to
Javadoc [19894,21129]
at 1
===
insert-tree
---
TagElement [21011,21059]
    TextElement:  the hyperbolic tangent of <code>z</code> [21018,21059]
to
Javadoc [19894,21129]
at 2
===
insert-tree
---
TagElement [21067,21121]
    SimpleName: NullPointerException [21075,21095]
    TextElement:  if <code>z</code> is null [21095,21121]
to
Javadoc [19894,21129]
at 3
===
insert-node
---
TextElement: Compute the  [1632,1644]
to
TagElement [1632,2051]
at 0
===
insert-node
---
TextElement: <a href="http://mathworld.wolfram.com/InverseCosine.html" TARGET="_top"> [1652,1724]
to
TagElement [1632,2051]
at 1
===
move-tree
---
TextElement: inverse cosine</a> for the given complex argument. [1256,1306]
to
TagElement [1632,2051]
at 2
===
insert-node
---
TextElement: <p> [1790,1793]
to
TagElement [1632,2051]
at 3
===
insert-node
---
TextElement: Implements the formula: <pre> [1801,1830]
to
TagElement [1632,2051]
at 4
===
insert-node
---
TextElement: <code> acos(z) = -i (log(z + i (sqrt(1 - z<sup>2</sup>))))</code></pre> [1838,1909]
to
TagElement [1632,2051]
at 5
===
insert-node
---
TextElement: <p> [1917,1920]
to
TagElement [1632,2051]
at 6
===
insert-node
---
TextElement: Returns  [1928,1936]
to
TagElement [1632,2051]
at 7
===
insert-tree
---
TagElement [1936,1955]
    MemberRef [1943,1954]
        SimpleName: Complex [1943,1950]
        SimpleName: NaN [1951,1954]
to
TagElement [1632,2051]
at 8
===
insert-node
---
TextElement:  if either real or imaginary part of the  [1955,1996]
to
TagElement [1632,2051]
at 9
===
insert-node
---
TextElement: input argument is <code>NaN</code> or infinite. [2004,2051]
to
TagElement [1632,2051]
at 10
===
update-node
---
TextElement:  the value whose inverse cosine is to be returned. [1322,1372]
replace  the value whose inverse cosine is to be returned. by  the value whose inverse cosine is to be returned
===
insert-node
---
TextElement: Compute the  [2492,2504]
to
TagElement [2492,2905]
at 0
===
insert-node
---
TextElement: <a href="http://mathworld.wolfram.com/InverseSine.html" TARGET="_top"> [2512,2582]
to
TagElement [2492,2905]
at 1
===
move-tree
---
TextElement: inverse sine</a> for the given complex argument. [1755,1803]
to
TagElement [2492,2905]
at 2
===
insert-node
---
TextElement: <p> [2646,2649]
to
TagElement [2492,2905]
at 3
===
insert-node
---
TextElement: Implements the formula: <pre> [2657,2686]
to
TagElement [2492,2905]
at 4
===
insert-node
---
TextElement: <code> asin(z) = -i (log(sqrt(1 - z<sup>2</sup>) + iz)) </code></pre> [2694,2763]
to
TagElement [2492,2905]
at 5
===
insert-node
---
TextElement: <p> [2771,2774]
to
TagElement [2492,2905]
at 6
===
insert-node
---
TextElement: Returns  [2782,2790]
to
TagElement [2492,2905]
at 7
===
insert-tree
---
TagElement [2790,2809]
    MemberRef [2797,2808]
        SimpleName: Complex [2797,2804]
        SimpleName: NaN [2805,2808]
to
TagElement [2492,2905]
at 8
===
insert-node
---
TextElement:  if either real or imaginary part of the  [2809,2850]
to
TagElement [2492,2905]
at 9
===
insert-node
---
TextElement: input argument is <code>NaN</code> or infinite. [2858,2905]
to
TagElement [2492,2905]
at 10
===
insert-node
---
TextElement: Compute the  [3344,3356]
to
TagElement [3344,3752]
at 0
===
insert-node
---
TextElement: <a href="http://mathworld.wolfram.com/InverseTangent.html" TARGET="_top"> [3364,3437]
to
TagElement [3344,3752]
at 1
===
move-tree
---
TextElement: inverse tangent</a> for the given complex argument. [2251,2302]
to
TagElement [3344,3752]
at 2
===
insert-node
---
TextElement: <p> [3504,3507]
to
TagElement [3344,3752]
at 3
===
insert-node
---
TextElement: Implements the formula: <pre> [3515,3544]
to
TagElement [3344,3752]
at 4
===
insert-node
---
TextElement: <code> atan(z) = (i/2) log((i + z)/(i - z)) </code></pre> [3552,3609]
to
TagElement [3344,3752]
at 5
===
insert-node
---
TextElement: <p> [3617,3620]
to
TagElement [3344,3752]
at 6
===
insert-node
---
TextElement: Returns  [3628,3636]
to
TagElement [3344,3752]
at 7
===
insert-tree
---
TagElement [3636,3655]
    MemberRef [3643,3654]
        SimpleName: Complex [3643,3650]
        SimpleName: NaN [3651,3654]
to
TagElement [3344,3752]
at 8
===
insert-node
---
TextElement:  if either real or imaginary part of the  [3655,3696]
to
TagElement [3344,3752]
at 9
===
insert-node
---
TextElement: input argument is <code>NaN</code> or infinite.  [3704,3752]
to
TagElement [3344,3752]
at 10
===
update-node
---
TextElement:  the value whose inverse tangent is to be returned. [2318,2369]
replace  the value whose inverse tangent is to be returned. by  the value whose inverse tangent is to be returned
===
insert-node
---
TextElement: Compute the  [4240,4252]
to
TagElement [4240,5184]
at 0
===
insert-node
---
TextElement: <a href="http://mathworld.wolfram.com/Cosine.html" TARGET="_top"> [4260,4325]
to
TagElement [4240,5184]
at 1
===
insert-node
---
TextElement: cosine</a> [4333,4343]
to
TagElement [4240,5184]
at 2
===
move-tree
---
TextElement: for the given complex argument. [2812,2843]
to
TagElement [4240,5184]
at 3
===
insert-node
---
TextElement: <p> [4390,4393]
to
TagElement [4240,5184]
at 4
===
insert-node
---
TextElement: Implements the formula: <pre> [4401,4430]
to
TagElement [4240,5184]
at 5
===
insert-node
---
TextElement: <code> cos(a + bi) = cos(a)cosh(b) - sin(a)sinh(b)i</code></pre> [4438,4502]
to
TagElement [4240,5184]
at 6
===
insert-node
---
TextElement: where the (real) functions on the right-hand side are [4510,4563]
to
TagElement [4240,5184]
at 7
===
insert-tree
---
TagElement [4571,4597]
    MemberRef [4578,4596]
        QualifiedName: java.lang.Math [4578,4592]
        SimpleName: sin [4593,4596]
to
TagElement [4240,5184]
at 8
===
insert-node
---
TextElement: ,  [4597,4599]
to
TagElement [4240,5184]
at 9
===
insert-tree
---
TagElement [4599,4625]
    MemberRef [4606,4624]
        QualifiedName: java.lang.Math [4606,4620]
        SimpleName: cos [4621,4624]
to
TagElement [4240,5184]
at 10
===
insert-node
---
TextElement: ,  [4625,4627]
to
TagElement [4240,5184]
at 11
===
insert-tree
---
TagElement [4635,4657]
    MemberRef [4642,4656]
        SimpleName: MathUtils [4642,4651]
        SimpleName: cosh [4652,4656]
to
TagElement [4240,5184]
at 12
===
insert-node
---
TextElement:  and  [4657,4662]
to
TagElement [4240,5184]
at 13
===
insert-tree
---
TagElement [4662,4684]
    MemberRef [4669,4683]
        SimpleName: MathUtils [4669,4678]
        SimpleName: sinh [4679,4683]
to
TagElement [4240,5184]
at 14
===
insert-node
---
TextElement: . [4684,4685]
to
TagElement [4240,5184]
at 15
===
insert-node
---
TextElement: <p> [4693,4696]
to
TagElement [4240,5184]
at 16
===
insert-node
---
TextElement: Returns  [4704,4712]
to
TagElement [4240,5184]
at 17
===
insert-tree
---
TagElement [4712,4731]
    MemberRef [4719,4730]
        SimpleName: Complex [4719,4726]
        SimpleName: NaN [4727,4730]
to
TagElement [4240,5184]
at 18
===
insert-node
---
TextElement:  if either real or imaginary part of the  [4731,4772]
to
TagElement [4240,5184]
at 19
===
insert-node
---
TextElement: input argument is <code>NaN</code>. [4780,4815]
to
TagElement [4240,5184]
at 20
===
insert-node
---
TextElement: <p> [4823,4826]
to
TagElement [4240,5184]
at 21
===
insert-node
---
TextElement: Infinite values in real or imaginary parts of the input may result in [4834,4903]
to
TagElement [4240,5184]
at 22
===
insert-node
---
TextElement: infinite or NaN values returned in parts of the result.<pre> [4911,4971]
to
TagElement [4240,5184]
at 23
===
insert-node
---
TextElement: Examples:  [4979,4989]
to
TagElement [4240,5184]
at 24
===
insert-node
---
TextElement: <code> [4997,5003]
to
TagElement [4240,5184]
at 25
===
insert-node
---
TextElement: cos(1 &plusmn; INFINITY i) = 1 &#x2213; INFINITY i [5011,5061]
to
TagElement [4240,5184]
at 26
===
insert-node
---
TextElement: cos(&plusmn;INFINITY + i) = NaN + NaN i [5069,5108]
to
TagElement [4240,5184]
at 27
===
insert-node
---
TextElement: cos(&plusmn;INFINITY &plusmn; INFINITY i) = NaN + NaN i</code></pre> [5116,5184]
to
TagElement [4240,5184]
at 28
===
update-node
---
TextElement:  the value whose cosine is to be returned. [2859,2901]
replace  the value whose cosine is to be returned. by  the value whose cosine is to be returned
===
insert-node
---
TextElement: Compute the  [5694,5706]
to
TagElement [5694,6736]
at 0
===
insert-node
---
TextElement: <a href="http://mathworld.wolfram.com/HyperbolicCosine.html" TARGET="_top"> [5714,5789]
to
TagElement [5694,6736]
at 1
===
move-tree
---
TextElement: hyperbolic cosine</a> for the given complex argument. [3366,3419]
to
TagElement [5694,6736]
at 2
===
insert-node
---
TextElement: <p> [5858,5861]
to
TagElement [5694,6736]
at 3
===
insert-node
---
TextElement: Implements the formula: <pre> [5869,5898]
to
TagElement [5694,6736]
at 4
===
insert-node
---
TextElement: <code> cosh(a + bi) = cosh(a)cos(b) + sinh(a)sin(b)i</code></pre> [5906,5971]
to
TagElement [5694,6736]
at 5
===
insert-node
---
TextElement: where the (real) functions on the right-hand side are [5979,6032]
to
TagElement [5694,6736]
at 6
===
insert-tree
---
TagElement [6040,6066]
    MemberRef [6047,6065]
        QualifiedName: java.lang.Math [6047,6061]
        SimpleName: sin [6062,6065]
to
TagElement [5694,6736]
at 7
===
insert-node
---
TextElement: ,  [6066,6068]
to
TagElement [5694,6736]
at 8
===
insert-tree
---
TagElement [6068,6094]
    MemberRef [6075,6093]
        QualifiedName: java.lang.Math [6075,6089]
        SimpleName: cos [6090,6093]
to
TagElement [5694,6736]
at 9
===
insert-node
---
TextElement: ,  [6094,6096]
to
TagElement [5694,6736]
at 10
===
insert-tree
---
TagElement [6104,6126]
    MemberRef [6111,6125]
        SimpleName: MathUtils [6111,6120]
        SimpleName: cosh [6121,6125]
to
TagElement [5694,6736]
at 11
===
insert-node
---
TextElement:  and  [6126,6131]
to
TagElement [5694,6736]
at 12
===
insert-tree
---
TagElement [6131,6153]
    MemberRef [6138,6152]
        SimpleName: MathUtils [6138,6147]
        SimpleName: sinh [6148,6152]
to
TagElement [5694,6736]
at 13
===
insert-node
---
TextElement: . [6153,6154]
to
TagElement [5694,6736]
at 14
===
insert-node
---
TextElement: <p> [6162,6165]
to
TagElement [5694,6736]
at 15
===
insert-node
---
TextElement: Returns  [6173,6181]
to
TagElement [5694,6736]
at 16
===
insert-tree
---
TagElement [6181,6200]
    MemberRef [6188,6199]
        SimpleName: Complex [6188,6195]
        SimpleName: NaN [6196,6199]
to
TagElement [5694,6736]
at 17
===
insert-node
---
TextElement:  if either real or imaginary part of the  [6200,6241]
to
TagElement [5694,6736]
at 18
===
insert-node
---
TextElement: input argument is <code>NaN</code>. [6249,6284]
to
TagElement [5694,6736]
at 19
===
insert-node
---
TextElement: <p> [6292,6295]
to
TagElement [5694,6736]
at 20
===
insert-node
---
TextElement: Infinite values in real or imaginary parts of the input may result in [6303,6372]
to
TagElement [5694,6736]
at 21
===
insert-node
---
TextElement: infinite or NaN values returned in parts of the result.<pre> [6380,6440]
to
TagElement [5694,6736]
at 22
===
insert-node
---
TextElement: Examples:  [6448,6458]
to
TagElement [5694,6736]
at 23
===
insert-node
---
TextElement: <code> [6466,6472]
to
TagElement [5694,6736]
at 24
===
insert-node
---
TextElement: cosh(1 &plusmn; INFINITY i) = NaN + NaN i [6480,6521]
to
TagElement [5694,6736]
at 25
===
insert-node
---
TextElement: cosh(&plusmn;INFINITY + i) = INFINITY &plusmn; INFINITY i [6529,6586]
to
TagElement [5694,6736]
at 26
===
insert-node
---
TextElement: cosh(&plusmn;INFINITY &plusmn; INFINITY i) = NaN + NaN i</code></pre> [6594,6663]
to
TagElement [5694,6736]
at 27
===
insert-node
---
TextElement: <p> [6671,6674]
to
TagElement [5694,6736]
at 28
===
insert-node
---
TextElement: Throws <code>NullPointerException</code> if z is null. [6682,6736]
to
TagElement [5694,6736]
at 29
===
move-tree
---
TextElement: Compute the [3883,3894]
to
TagElement [7208,8249]
at 0
===
insert-node
---
TextElement: <a href="http://mathworld.wolfram.com/ExponentialFunction.html" TARGET="_top"> [7227,7305]
to
TagElement [7208,8249]
at 1
===
move-tree
---
TextElement: exponential function</a> for the given complex argument. [3974,4030]
to
TagElement [7208,8249]
at 2
===
insert-node
---
TextElement: <p> [7377,7380]
to
TagElement [7208,8249]
at 3
===
insert-node
---
TextElement: Implements the formula: <pre> [7388,7417]
to
TagElement [7208,8249]
at 4
===
insert-node
---
TextElement: <code> exp(a + bi) = exp(a)cos(b) + exp(a)sin(b)i</code></pre> [7425,7487]
to
TagElement [7208,8249]
at 5
===
insert-node
---
TextElement: where the (real) functions on the right-hand side are [7495,7548]
to
TagElement [7208,8249]
at 6
===
insert-tree
---
TagElement [7556,7582]
    MemberRef [7563,7581]
        QualifiedName: java.lang.Math [7563,7577]
        SimpleName: exp [7578,7581]
to
TagElement [7208,8249]
at 7
===
insert-node
---
TextElement: ,  [7582,7584]
to
TagElement [7208,8249]
at 8
===
insert-tree
---
TagElement [7584,7610]
    MemberRef [7591,7609]
        QualifiedName: java.lang.Math [7591,7605]
        SimpleName: cos [7606,7609]
to
TagElement [7208,8249]
at 9
===
insert-node
---
TextElement: , and [7610,7615]
to
TagElement [7208,8249]
at 10
===
insert-tree
---
TagElement [7623,7649]
    MemberRef [7630,7648]
        QualifiedName: java.lang.Math [7630,7644]
        SimpleName: sin [7645,7648]
to
TagElement [7208,8249]
at 11
===
insert-node
---
TextElement: . [7649,7650]
to
TagElement [7208,8249]
at 12
===
insert-node
---
TextElement: <p> [7658,7661]
to
TagElement [7208,8249]
at 13
===
insert-node
---
TextElement: Returns  [7669,7677]
to
TagElement [7208,8249]
at 14
===
insert-tree
---
TagElement [7677,7696]
    MemberRef [7684,7695]
        SimpleName: Complex [7684,7691]
        SimpleName: NaN [7692,7695]
to
TagElement [7208,8249]
at 15
===
insert-node
---
TextElement:  if either real or imaginary part of the  [7696,7737]
to
TagElement [7208,8249]
at 16
===
insert-node
---
TextElement: input argument is <code>NaN</code>. [7745,7780]
to
TagElement [7208,8249]
at 17
===
insert-node
---
TextElement: <p> [7788,7791]
to
TagElement [7208,8249]
at 18
===
insert-node
---
TextElement: Infinite values in real or imaginary parts of the input may result in [7799,7868]
to
TagElement [7208,8249]
at 19
===
insert-node
---
TextElement: infinite or NaN values returned in parts of the result.<pre> [7876,7936]
to
TagElement [7208,8249]
at 20
===
insert-node
---
TextElement: Examples:  [7944,7954]
to
TagElement [7208,8249]
at 21
===
insert-node
---
TextElement: <code> [7962,7968]
to
TagElement [7208,8249]
at 22
===
insert-node
---
TextElement: exp(1 &plusmn; INFINITY i) = NaN + NaN i [7976,8016]
to
TagElement [7208,8249]
at 23
===
insert-node
---
TextElement: exp(INFINITY + i) = INFINITY + INFINITY i [8024,8065]
to
TagElement [7208,8249]
at 24
===
insert-node
---
TextElement: exp(-INFINITY + i) = 0 + 0i [8073,8100]
to
TagElement [7208,8249]
at 25
===
insert-node
---
TextElement: exp(&plusmn;INFINITY &plusmn; INFINITY i) = NaN + NaN i</code></pre> [8108,8176]
to
TagElement [7208,8249]
at 26
===
insert-node
---
TextElement: <p> [8184,8187]
to
TagElement [7208,8249]
at 27
===
insert-node
---
TextElement: Throws <code>NullPointerException</code> if z is null. [8195,8249]
to
TagElement [7208,8249]
at 28
===
update-node
---
TextElement:  the value. [4046,4057]
replace  the value. by  the value
===
insert-node
---
TextElement: Compute the  [8637,8649]
to
TagElement [8637,9865]
at 0
===
insert-node
---
TextElement: <a href="http://mathworld.wolfram.com/NaturalLogarithm.html" TARGET="_top"> [8657,8732]
to
TagElement [8637,9865]
at 1
===
move-tree
---
TextElement: natural logarithm</a> for the given complex argument. [4548,4601]
to
TagElement [8637,9865]
at 2
===
insert-node
---
TextElement: <p> [8801,8804]
to
TagElement [8637,9865]
at 3
===
insert-node
---
TextElement: Implements the formula: <pre> [8812,8841]
to
TagElement [8637,9865]
at 4
===
insert-node
---
TextElement: <code> log(a + bi) = ln(|a + bi|) + arg(a + bi)i</code></pre> [8849,8910]
to
TagElement [8637,9865]
at 5
===
insert-node
---
TextElement: where ln on the right hand side is  [8918,8953]
to
TagElement [8637,9865]
at 6
===
insert-tree
---
TagElement [8953,8979]
    MemberRef [8960,8978]
        QualifiedName: java.lang.Math [8960,8974]
        SimpleName: log [8975,8978]
to
TagElement [8637,9865]
at 7
===
insert-node
---
TextElement: , [8979,8980]
to
TagElement [8637,9865]
at 8
===
insert-node
---
TextElement: <code>|a + bi|</code> is the modulus,  [8988,9026]
to
TagElement [8637,9865]
at 9
===
insert-tree
---
TagElement [9026,9045]
    MemberRef [9033,9044]
        SimpleName: Complex [9033,9040]
        SimpleName: abs [9041,9044]
to
TagElement [8637,9865]
at 10
===
insert-node
---
TextElement: ,  and [9045,9051]
to
TagElement [8637,9865]
at 11
===
insert-node
---
TextElement: <code>arg(a + bi) =  [9059,9079]
to
TagElement [8637,9865]
at 12
===
insert-tree
---
TagElement [9079,9107]
    MemberRef [9086,9106]
        QualifiedName: java.lang.Math [9086,9100]
        SimpleName: atan2 [9101,9106]
to
TagElement [8637,9865]
at 13
===
insert-node
---
TextElement: (b, a)</code> [9107,9120]
to
TagElement [8637,9865]
at 14
===
insert-node
---
TextElement: <p> [9128,9131]
to
TagElement [8637,9865]
at 15
===
insert-node
---
TextElement: Returns  [9139,9147]
to
TagElement [8637,9865]
at 16
===
insert-tree
---
TagElement [9147,9166]
    MemberRef [9154,9165]
        SimpleName: Complex [9154,9161]
        SimpleName: NaN [9162,9165]
to
TagElement [8637,9865]
at 17
===
insert-node
---
TextElement:  if either real or imaginary part of the  [9166,9207]
to
TagElement [8637,9865]
at 18
===
insert-node
---
TextElement: input argument is <code>NaN</code>. [9215,9250]
to
TagElement [8637,9865]
at 19
===
insert-node
---
TextElement: <p> [9258,9261]
to
TagElement [8637,9865]
at 20
===
insert-node
---
TextElement: Infinite (or critical) values in real or imaginary parts of the input may [9269,9342]
to
TagElement [8637,9865]
at 21
===
insert-node
---
TextElement: result in infinite or NaN values returned in parts of the result.<pre> [9350,9420]
to
TagElement [8637,9865]
at 22
===
insert-node
---
TextElement: Examples:  [9428,9438]
to
TagElement [8637,9865]
at 23
===
insert-node
---
TextElement: <code> [9446,9452]
to
TagElement [8637,9865]
at 24
===
insert-node
---
TextElement: log(1 &plusmn; INFINITY i) = INFINITY &plusmn; (&pi;/2)i [9460,9516]
to
TagElement [8637,9865]
at 25
===
insert-node
---
TextElement: log(INFINITY + i) = INFINITY + 0i [9524,9557]
to
TagElement [8637,9865]
at 26
===
insert-node
---
TextElement: log(-INFINITY + i) = INFINITY + &pi;i [9565,9602]
to
TagElement [8637,9865]
at 27
===
insert-node
---
TextElement: log(INFINITY &plusmn; INFINITY i) = INFINITY &plusmn; (&pi;/4)i [9610,9673]
to
TagElement [8637,9865]
at 28
===
insert-node
---
TextElement: log(-INFINITY &plusmn; INFINITY i) = INFINITY &plusmn; (3&pi;/4)i [9681,9746]
to
TagElement [8637,9865]
at 29
===
insert-node
---
TextElement: log(0 + 0i) = -INFINITY + 0i [9754,9782]
to
TagElement [8637,9865]
at 30
===
insert-node
---
TextElement: </code></pre> [9790,9803]
to
TagElement [8637,9865]
at 31
===
insert-node
---
TextElement: Throws <code>NullPointerException</code> if z is null. [9811,9865]
to
TagElement [8637,9865]
at 32
===
move-tree
---
TextElement: Returns of value of <code>y</code> raised to the power of <code>x</code>. [4923,4996]
to
TagElement [11645,12137]
at 0
===
insert-node
---
TextElement: <p> [11726,11729]
to
TagElement [11645,12137]
at 1
===
insert-node
---
TextElement: Implements the formula: <pre> [11737,11766]
to
TagElement [11645,12137]
at 2
===
insert-node
---
TextElement: <code> y<sup>x</sup> = exp(x&middot;log(y))</code></pre>  [11774,11831]
to
TagElement [11645,12137]
at 3
===
insert-node
---
TextElement: where <code>exp</code> and <code>log</code> are  [11839,11887]
to
TagElement [11645,12137]
at 4
===
insert-tree
---
TagElement [11887,11899]
    MemberRef [11894,11898]
        SimpleName: exp [11895,11898]
to
TagElement [11645,12137]
at 5
===
insert-node
---
TextElement:  and [11899,11903]
to
TagElement [11645,12137]
at 6
===
insert-tree
---
TagElement [11911,11923]
    MemberRef [11918,11922]
        SimpleName: log [11919,11922]
to
TagElement [11645,12137]
at 7
===
insert-node
---
TextElement: , respectively. [11923,11938]
to
TagElement [11645,12137]
at 8
===
insert-node
---
TextElement: <p> [11946,11949]
to
TagElement [11645,12137]
at 9
===
insert-node
---
TextElement: Returns  [11957,11965]
to
TagElement [11645,12137]
at 10
===
insert-tree
---
TagElement [11965,11984]
    MemberRef [11972,11983]
        SimpleName: Complex [11972,11979]
        SimpleName: NaN [11980,11983]
to
TagElement [11645,12137]
at 11
===
insert-node
---
TextElement:  if either real or imaginary part of the  [11984,12025]
to
TagElement [11645,12137]
at 12
===
insert-node
---
TextElement: input argument is <code>NaN</code> or infinite, or if <code>y</code> [12033,12101]
to
TagElement [11645,12137]
at 13
===
insert-node
---
TextElement: equals  [12109,12116]
to
TagElement [11645,12137]
at 14
===
insert-tree
---
TagElement [12116,12136]
    MemberRef [12123,12135]
        SimpleName: Complex [12123,12130]
        SimpleName: ZERO [12131,12135]
to
TagElement [11645,12137]
at 15
===
insert-node
---
TextElement: . [12136,12137]
to
TagElement [11645,12137]
at 16
===
insert-node
---
TextElement: Compute the  [12446,12458]
to
TagElement [12446,13458]
at 0
===
insert-node
---
TextElement: <a href="http://mathworld.wolfram.com/Sine.html" TARGET="_top"> [12466,12529]
to
TagElement [12446,13458]
at 1
===
insert-node
---
TextElement: sine</a> [12537,12545]
to
TagElement [12446,13458]
at 2
===
move-tree
---
TextElement: for the given complex argument. [5314,5345]
to
TagElement [12446,13458]
at 3
===
insert-node
---
TextElement: <p> [12592,12595]
to
TagElement [12446,13458]
at 4
===
insert-node
---
TextElement: Implements the formula: <pre> [12604,12633]
to
TagElement [12446,13458]
at 5
===
insert-node
---
TextElement: <code> sin(a + bi) = sin(a)cosh(b) - cos(a)sinh(b)i</code></pre> [12641,12705]
to
TagElement [12446,13458]
at 6
===
insert-node
---
TextElement: where the (real) functions on the right-hand side are [12713,12766]
to
TagElement [12446,13458]
at 7
===
insert-tree
---
TagElement [12774,12800]
    MemberRef [12781,12799]
        QualifiedName: java.lang.Math [12781,12795]
        SimpleName: sin [12796,12799]
to
TagElement [12446,13458]
at 8
===
insert-node
---
TextElement: ,  [12800,12802]
to
TagElement [12446,13458]
at 9
===
insert-tree
---
TagElement [12802,12828]
    MemberRef [12809,12827]
        QualifiedName: java.lang.Math [12809,12823]
        SimpleName: cos [12824,12827]
to
TagElement [12446,13458]
at 10
===
insert-node
---
TextElement: ,  [12828,12830]
to
TagElement [12446,13458]
at 11
===
insert-tree
---
TagElement [12838,12860]
    MemberRef [12845,12859]
        SimpleName: MathUtils [12845,12854]
        SimpleName: cosh [12855,12859]
to
TagElement [12446,13458]
at 12
===
insert-node
---
TextElement:  and  [12860,12865]
to
TagElement [12446,13458]
at 13
===
insert-tree
---
TagElement [12865,12887]
    MemberRef [12872,12886]
        SimpleName: MathUtils [12872,12881]
        SimpleName: sinh [12882,12886]
to
TagElement [12446,13458]
at 14
===
insert-node
---
TextElement: . [12887,12888]
to
TagElement [12446,13458]
at 15
===
insert-node
---
TextElement: <p> [12896,12899]
to
TagElement [12446,13458]
at 16
===
insert-node
---
TextElement: Returns  [12907,12915]
to
TagElement [12446,13458]
at 17
===
insert-tree
---
TagElement [12915,12934]
    MemberRef [12922,12933]
        SimpleName: Complex [12922,12929]
        SimpleName: NaN [12930,12933]
to
TagElement [12446,13458]
at 18
===
insert-node
---
TextElement:  if either real or imaginary part of the  [12934,12975]
to
TagElement [12446,13458]
at 19
===
insert-node
---
TextElement: input argument is <code>NaN</code>. [12983,13018]
to
TagElement [12446,13458]
at 20
===
insert-node
---
TextElement: <p> [13026,13029]
to
TagElement [12446,13458]
at 21
===
insert-node
---
TextElement: Infinite values in real or imaginary parts of the input may result in [13037,13106]
to
TagElement [12446,13458]
at 22
===
insert-node
---
TextElement: infinite or NaN values returned in parts of the result.<pre> [13114,13174]
to
TagElement [12446,13458]
at 23
===
insert-node
---
TextElement: Examples:  [13182,13192]
to
TagElement [12446,13458]
at 24
===
insert-node
---
TextElement: <code> [13200,13206]
to
TagElement [12446,13458]
at 25
===
insert-node
---
TextElement: sin(1 &plusmn; INFINITY i) = 1 &plusmn; INFINITY i [13214,13264]
to
TagElement [12446,13458]
at 26
===
insert-node
---
TextElement: sin(&plusmn;INFINITY + i) = NaN + NaN i [13272,13311]
to
TagElement [12446,13458]
at 27
===
insert-node
---
TextElement: sin(&plusmn;INFINITY &plusmn; INFINITY i) = NaN + NaN i</code></pre> [13319,13387]
to
TagElement [12446,13458]
at 28
===
insert-node
---
TextElement: Throws <code>NullPointerException</code> if z is null.  [13403,13458]
to
TagElement [12446,13458]
at 29
===
insert-node
---
TextElement: Compute the  [13903,13915]
to
TagElement [13903,14870]
at 0
===
insert-node
---
TextElement: <a href="http://mathworld.wolfram.com/HyperbolicSine.html" TARGET="_top"> [13923,13996]
to
TagElement [13903,14870]
at 1
===
move-tree
---
TextElement: hyperbolic sine</a> for the given complex argument. [5861,5912]
to
TagElement [13903,14870]
at 2
===
insert-node
---
TextElement: <p> [14063,14066]
to
TagElement [13903,14870]
at 3
===
insert-node
---
TextElement: Implements the formula: <pre> [14074,14103]
to
TagElement [13903,14870]
at 4
===
insert-node
---
TextElement: <code> sinh(a + bi) = sinh(a)cos(b)) + cosh(a)sin(b)i</code></pre> [14111,14177]
to
TagElement [13903,14870]
at 5
===
insert-node
---
TextElement: where the (real) functions on the right-hand side are [14185,14238]
to
TagElement [13903,14870]
at 6
===
insert-tree
---
TagElement [14246,14272]
    MemberRef [14253,14271]
        QualifiedName: java.lang.Math [14253,14267]
        SimpleName: sin [14268,14271]
to
TagElement [13903,14870]
at 7
===
insert-node
---
TextElement: ,  [14272,14274]
to
TagElement [13903,14870]
at 8
===
insert-tree
---
TagElement [14274,14300]
    MemberRef [14281,14299]
        QualifiedName: java.lang.Math [14281,14295]
        SimpleName: cos [14296,14299]
to
TagElement [13903,14870]
at 9
===
insert-node
---
TextElement: ,  [14300,14302]
to
TagElement [13903,14870]
at 10
===
insert-tree
---
TagElement [14310,14332]
    MemberRef [14317,14331]
        SimpleName: MathUtils [14317,14326]
        SimpleName: cosh [14327,14331]
to
TagElement [13903,14870]
at 11
===
insert-node
---
TextElement:  and  [14332,14337]
to
TagElement [13903,14870]
at 12
===
insert-tree
---
TagElement [14337,14359]
    MemberRef [14344,14358]
        SimpleName: MathUtils [14344,14353]
        SimpleName: sinh [14354,14358]
to
TagElement [13903,14870]
at 13
===
insert-node
---
TextElement: . [14359,14360]
to
TagElement [13903,14870]
at 14
===
insert-node
---
TextElement: <p> [14368,14371]
to
TagElement [13903,14870]
at 15
===
insert-node
---
TextElement: Returns  [14379,14387]
to
TagElement [13903,14870]
at 16
===
insert-tree
---
TagElement [14387,14406]
    MemberRef [14394,14405]
        SimpleName: Complex [14394,14401]
        SimpleName: NaN [14402,14405]
to
TagElement [13903,14870]
at 17
===
insert-node
---
TextElement:  if either real or imaginary part of the  [14406,14447]
to
TagElement [13903,14870]
at 18
===
insert-node
---
TextElement: input argument is <code>NaN</code>. [14455,14490]
to
TagElement [13903,14870]
at 19
===
insert-node
---
TextElement: <p> [14498,14501]
to
TagElement [13903,14870]
at 20
===
insert-node
---
TextElement: Infinite values in real or imaginary parts of the input may result in [14509,14578]
to
TagElement [13903,14870]
at 21
===
insert-node
---
TextElement: infinite or NaN values returned in parts of the result.<pre> [14586,14646]
to
TagElement [13903,14870]
at 22
===
insert-node
---
TextElement: Examples:  [14654,14664]
to
TagElement [13903,14870]
at 23
===
insert-node
---
TextElement: <code> [14672,14678]
to
TagElement [13903,14870]
at 24
===
insert-node
---
TextElement: sinh(1 &plusmn; INFINITY i) = NaN + NaN i [14686,14727]
to
TagElement [13903,14870]
at 25
===
insert-node
---
TextElement: sinh(&plusmn;INFINITY + i) = &plusmn; INFINITY + INFINITY i [14735,14794]
to
TagElement [13903,14870]
at 26
===
insert-node
---
TextElement: sinh(&plusmn;INFINITY &plusmn; INFINITY i) = NaN + NaN i</code></pre [14802,14870]
to
TagElement [13903,14870]
at 27
===
update-node
---
TextElement:  the value whose hyperbolic sine is to be returned. [5928,5979]
replace  the value whose hyperbolic sine is to be returned. by  the value whose hyperbolic sine is to be returned
===
update-node
---
TextElement:  the value whose square root is to be returned. [6508,6555]
replace  the value whose square root is to be returned. by  the value whose square root is to be returned
===
update-node
---
TextElement:  the value. [7355,7366]
replace  the value. by  the value
===
insert-node
---
TextElement: Compute the  [18334,18346]
to
TagElement [18334,19362]
at 0
===
insert-node
---
TextElement: <a href="http://mathworld.wolfram.com/Tangent.html" TARGET="_top"> [18354,18420]
to
TagElement [18334,19362]
at 1
===
move-tree
---
TextElement: tangent</a> for the given complex argument. [7643,7686]
to
TagElement [18334,19362]
at 2
===
insert-node
---
TextElement: <p> [18479,18482]
to
TagElement [18334,19362]
at 3
===
insert-node
---
TextElement: Implements the formula: <pre> [18490,18519]
to
TagElement [18334,19362]
at 4
===
insert-node
---
TextElement: <code>tan(a + bi) = sin(2a)/(cos(2a)+cosh(2b)) + [sinh(2b)/(cos(2a)+cosh(2b))]i</code></pre> [18527,18619]
to
TagElement [18334,19362]
at 5
===
insert-node
---
TextElement: where the (real) functions on the right-hand side are [18627,18680]
to
TagElement [18334,19362]
at 6
===
insert-tree
---
TagElement [18688,18714]
    MemberRef [18695,18713]
        QualifiedName: java.lang.Math [18695,18709]
        SimpleName: sin [18710,18713]
to
TagElement [18334,19362]
at 7
===
insert-node
---
TextElement: ,  [18714,18716]
to
TagElement [18334,19362]
at 8
===
insert-tree
---
TagElement [18716,18742]
    MemberRef [18723,18741]
        QualifiedName: java.lang.Math [18723,18737]
        SimpleName: cos [18738,18741]
to
TagElement [18334,19362]
at 9
===
insert-node
---
TextElement: ,  [18742,18744]
to
TagElement [18334,19362]
at 10
===
insert-tree
---
TagElement [18752,18774]
    MemberRef [18759,18773]
        SimpleName: MathUtils [18759,18768]
        SimpleName: cosh [18769,18773]
to
TagElement [18334,19362]
at 11
===
insert-node
---
TextElement:  and  [18774,18779]
to
TagElement [18334,19362]
at 12
===
insert-tree
---
TagElement [18779,18801]
    MemberRef [18786,18800]
        SimpleName: MathUtils [18786,18795]
        SimpleName: sinh [18796,18800]
to
TagElement [18334,19362]
at 13
===
insert-node
---
TextElement: . [18801,18802]
to
TagElement [18334,19362]
at 14
===
insert-node
---
TextElement: <p> [18810,18813]
to
TagElement [18334,19362]
at 15
===
insert-node
---
TextElement: Returns  [18821,18829]
to
TagElement [18334,19362]
at 16
===
insert-tree
---
TagElement [18829,18848]
    MemberRef [18836,18847]
        SimpleName: Complex [18836,18843]
        SimpleName: NaN [18844,18847]
to
TagElement [18334,19362]
at 17
===
insert-node
---
TextElement:  if either real or imaginary part of the  [18848,18889]
to
TagElement [18334,19362]
at 18
===
insert-node
---
TextElement: input argument is <code>NaN</code>. [18897,18932]
to
TagElement [18334,19362]
at 19
===
insert-node
---
TextElement: <p> [18940,18943]
to
TagElement [18334,19362]
at 20
===
insert-node
---
TextElement: Infinite (or critical) values in real or imaginary parts of the input may [18951,19024]
to
TagElement [18334,19362]
at 21
===
insert-node
---
TextElement: result in infinite or NaN values returned in parts of the result.<pre> [19032,19102]
to
TagElement [18334,19362]
at 22
===
insert-node
---
TextElement: Examples:  [19110,19120]
to
TagElement [18334,19362]
at 23
===
insert-node
---
TextElement: <code> [19128,19134]
to
TagElement [18334,19362]
at 24
===
insert-node
---
TextElement: tan(1 &plusmn; INFINITY i) = 0 + NaN i [19142,19180]
to
TagElement [18334,19362]
at 25
===
insert-node
---
TextElement: tan(&plusmn;INFINITY + i) = NaN + NaN i [19188,19227]
to
TagElement [18334,19362]
at 26
===
insert-node
---
TextElement: tan(&plusmn;INFINITY &plusmn; INFINITY i) = NaN + NaN i [19235,19290]
to
TagElement [18334,19362]
at 27
===
insert-node
---
TextElement: tan(&plusmn;&pi/2 + 0 i) = &plusmn;INFINITY + NaN i</code></pre> [19298,19362]
to
TagElement [18334,19362]
at 28
===
update-node
---
TextElement:  the value whose tangent is to be returned. [7702,7745]
replace  the value whose tangent is to be returned. by  the value whose tangent is to be returned
===
move-tree
---
TextElement: Compute the [8161,8172]
to
TagElement [19905,20927]
at 0
===
insert-node
---
TextElement: <a href="http://mathworld.wolfram.com/HyperbolicTangent.html" TARGET="_top"> [19924,20000]
to
TagElement [19905,20927]
at 1
===
move-tree
---
TextElement: hyperbolic tangent</a> for the given complex argument. [8250,8304]
to
TagElement [19905,20927]
at 2
===
insert-node
---
TextElement: <p> [20069,20072]
to
TagElement [19905,20927]
at 3
===
insert-node
---
TextElement: Implements the formula: <pre> [20080,20109]
to
TagElement [19905,20927]
at 4
===
insert-node
---
TextElement: <code>tan(a + bi) = sinh(2a)/(cosh(2a)+cos(2b)) + [sin(2b)/(cosh(2a)+cos(2b))]i</code></pre> [20117,20209]
to
TagElement [19905,20927]
at 5
===
insert-node
---
TextElement: where the (real) functions on the right-hand side are [20217,20270]
to
TagElement [19905,20927]
at 6
===
insert-tree
---
TagElement [20278,20304]
    MemberRef [20285,20303]
        QualifiedName: java.lang.Math [20285,20299]
        SimpleName: sin [20300,20303]
to
TagElement [19905,20927]
at 7
===
insert-node
---
TextElement: ,  [20304,20306]
to
TagElement [19905,20927]
at 8
===
insert-tree
---
TagElement [20306,20332]
    MemberRef [20313,20331]
        QualifiedName: java.lang.Math [20313,20327]
        SimpleName: cos [20328,20331]
to
TagElement [19905,20927]
at 9
===
insert-node
---
TextElement: ,  [20332,20334]
to
TagElement [19905,20927]
at 10
===
insert-tree
---
TagElement [20342,20364]
    MemberRef [20349,20363]
        SimpleName: MathUtils [20349,20358]
        SimpleName: cosh [20359,20363]
to
TagElement [19905,20927]
at 11
===
insert-node
---
TextElement:  and  [20364,20369]
to
TagElement [19905,20927]
at 12
===
insert-tree
---
TagElement [20369,20391]
    MemberRef [20376,20390]
        SimpleName: MathUtils [20376,20385]
        SimpleName: sinh [20386,20390]
to
TagElement [19905,20927]
at 13
===
insert-node
---
TextElement: . [20391,20392]
to
TagElement [19905,20927]
at 14
===
insert-node
---
TextElement: <p> [20400,20403]
to
TagElement [19905,20927]
at 15
===
insert-node
---
TextElement: Returns  [20411,20419]
to
TagElement [19905,20927]
at 16
===
insert-tree
---
TagElement [20419,20438]
    MemberRef [20426,20437]
        SimpleName: Complex [20426,20433]
        SimpleName: NaN [20434,20437]
to
TagElement [19905,20927]
at 17
===
insert-node
---
TextElement:  if either real or imaginary part of the  [20438,20479]
to
TagElement [19905,20927]
at 18
===
insert-node
---
TextElement: input argument is <code>NaN</code>. [20487,20522]
to
TagElement [19905,20927]
at 19
===
insert-node
---
TextElement: <p> [20530,20533]
to
TagElement [19905,20927]
at 20
===
insert-node
---
TextElement: Infinite values in real or imaginary parts of the input may result in [20541,20610]
to
TagElement [19905,20927]
at 21
===
insert-node
---
TextElement: infinite or NaN values returned in parts of the result.<pre> [20618,20678]
to
TagElement [19905,20927]
at 22
===
insert-node
---
TextElement: Examples:  [20686,20696]
to
TagElement [19905,20927]
at 23
===
insert-node
---
TextElement: <code> [20704,20710]
to
TagElement [19905,20927]
at 24
===
insert-node
---
TextElement: tanh(1 &plusmn; INFINITY i) = NaN + NaN i [20718,20759]
to
TagElement [19905,20927]
at 25
===
insert-node
---
TextElement: tanh(&plusmn;INFINITY + i) = NaN + 0 i [20767,20805]
to
TagElement [19905,20927]
at 26
===
insert-node
---
TextElement: tanh(&plusmn;INFINITY &plusmn; INFINITY i) = NaN + NaN i [20813,20869]
to
TagElement [19905,20927]
at 27
===
insert-node
---
TextElement: tanh(0 + (&pi/2)i) = NaN + INFINITY i</code></pre> [20877,20927]
to
TagElement [19905,20927]
at 28
===
update-node
---
TextElement:  the value whose hyperbolic tangent is to be returned. [8320,8374]
replace  the value whose hyperbolic tangent is to be returned. by  the value whose hyperbolic tangent is to be returned
===
insert-node
---
InfixExpression [8569,8588]
to
ClassInstanceCreation [4402,4439]
at 1
===
insert-node
---
InfixExpression [8590,8608]
to
ClassInstanceCreation [4402,4439]
at 2
===
move-tree
---
SimpleName: expA [4414,4418]
to
InfixExpression [8569,8588]
at 0
===
move-tree
---
INFIX_EXPRESSION_OPERATOR: * [4419,4420]
to
InfixExpression [8569,8588]
at 1
===
move-tree
---
MethodInvocation [4374,4385]
    METHOD_INVOCATION_RECEIVER [4374,4378]
        SimpleName: Math [4374,4378]
    SimpleName: cos [4379,4382]
    METHOD_INVOCATION_ARGUMENTS [4383,4384]
        SimpleName: b [4383,4384]
to
InfixExpression [8569,8588]
at 2
===
move-tree
---
SimpleName: expA [4427,4431]
to
InfixExpression [8590,8608]
at 0
===
move-tree
---
INFIX_EXPRESSION_OPERATOR: * [4432,4433]
to
InfixExpression [8590,8608]
at 1
===
move-tree
---
MethodInvocation [4339,4350]
    METHOD_INVOCATION_RECEIVER [4339,4343]
        SimpleName: Math [4339,4343]
    SimpleName: sin [4344,4347]
    METHOD_INVOCATION_ARGUMENTS [4348,4349]
        SimpleName: b [4348,4349]
to
InfixExpression [8590,8608]
at 2
===
delete-node
---
TextElement: Compute the <a href="http://mathworld.wolfram.com/InverseCosine.html"> [1178,1248]
===
===
delete-node
---
TagElement [1178,1306]
===
===
delete-tree
---
TagElement [1380,1425]
    TextElement:  the inverse cosine of <code>z</code>. [1387,1425]
===
delete-node
---
Javadoc [1167,1433]
===
===
delete-node
---
TextElement: Compute the <a href="http://mathworld.wolfram.com/InverseSine.html"> [1679,1747]
===
===
delete-node
---
TagElement [1679,1803]
===
===
delete-node
---
Javadoc [1668,1926]
===
===
delete-node
---
TextElement: Compute the <a href="http://mathworld.wolfram.com/InverseTangent.html"> [2172,2243]
===
===
delete-node
---
TagElement [2172,2302]
===
===
delete-tree
---
TagElement [2377,2423]
    TextElement:  the inverse tangent of <code>z</code>. [2384,2423]
===
delete-node
---
Javadoc [2161,2431]
===
===
delete-node
---
TextElement: Compute the <a href="http://mathworld.wolfram.com/Cosine.html">cosine</a> [2731,2804]
===
===
delete-node
---
TagElement [2731,2843]
===
===
delete-tree
---
TagElement [2909,2946]
    TextElement:  the cosine of <code>z</code>. [2916,2946]
===
delete-node
---
Javadoc [2720,2954]
===
===
delete-node
---
TextElement: Compute the <a href="http://mathworld.wolfram.com/HyperbolicCosine.html"> [3285,3358]
===
===
delete-node
---
TagElement [3285,3419]
===
===
delete-node
---
Javadoc [3274,3552]
===
===
delete-node
---
TextElement: <a href="http://mathworld.wolfram.com/ExponentialFunction.html"> [3902,3966]
===
===
delete-node
---
TagElement [3883,4030]
===
===
delete-tree
---
TagElement [4065,4107]
    TextElement:  <i>e</i><sup><code>z</code></sup>. [4072,4107]
===
delete-node
---
Javadoc [3872,4115]
===
===
delete-node
---
PrimitiveType: double [4325,4331]
===
===
delete-node
---
SimpleName: sinB [4332,4336]
===
===
delete-node
---
VariableDeclarationFragment [4332,4350]
===
===
delete-node
---
VariableDeclarationStatement [4325,4351]
===
===
delete-node
---
PrimitiveType: double [4360,4366]
===
===
delete-node
---
SimpleName: cosB [4367,4371]
===
===
delete-node
---
VariableDeclarationFragment [4367,4385]
===
===
delete-node
---
VariableDeclarationStatement [4360,4386]
===
===
delete-node
---
SimpleName: cosB [4421,4425]
===
===
delete-node
---
InfixExpression [4414,4425]
===
===
delete-node
---
SimpleName: sinB [4434,4438]
===
===
delete-node
---
InfixExpression [4427,4438]
===
===
delete-node
---
TextElement: Compute the <a href="http://mathworld.wolfram.com/NaturalLogarithm.html"> [4467,4540]
===
===
delete-node
---
TagElement [4467,4601]
===
===
delete-node
---
Javadoc [4456,4670]
===
===
delete-node
---
TagElement [4923,4996]
===
===
delete-tree
---
TagElement [5060,5108]
    TextElement:  <code>y</code><sup><code>z</code></sup>. [5067,5108]
===
delete-node
---
Javadoc [4912,5116]
===
===
delete-node
---
TextElement: Compute the <a href="http://mathworld.wolfram.com/Sine.html">sine</a> [5237,5306]
===
===
delete-node
---
TagElement [5237,5345]
===
===
delete-node
---
Javadoc [5226,5452]
===
===
delete-node
---
TextElement: Compute the <a href="http://mathworld.wolfram.com/HyperbolicSine.html"> [5782,5853]
===
===
delete-node
---
TagElement [5782,5912]
===
===
delete-tree
---
TagElement [5987,6033]
    TextElement:  the hyperbolic sine of <code>z</code>. [5994,6033]
===
delete-node
---
Javadoc [5771,6041]
===
===
delete-tree
---
TagElement [6372,6492]
    TextElement: Compute the <a href="http://mathworld.wolfram.com/SquareRoot.html">squre [6372,6444]
    TextElement: root</a> for the given complex argument. [6452,6492]
===
delete-tree
---
TagElement [6563,6605]
    TextElement:  the square root of <code>z</code>. [6570,6605]
===
delete-node
---
Javadoc [6361,6613]
===
===
delete-tree
---
TagElement [7189,7339]
    TextElement: Compute the <a href="http://mathworld.wolfram.com/SquareRoot.html">squre [7189,7261]
    TextElement: root of 1 - <code>z</code><sup>2</sup> for the given complex argument. [7269,7339]
===
delete-tree
---
TagElement [7374,7432]
    TextElement:  the square root of 1 - <code>z</code><sup>2</sup>. [7381,7432]
===
delete-node
---
Javadoc [7178,7440]
===
===
delete-node
---
TextElement: Compute the <a href="http://mathworld.wolfram.com/Tangent.html"> [7571,7635]
===
===
delete-node
---
TagElement [7571,7686]
===
===
delete-tree
---
TagElement [7753,7791]
    TextElement:  the tangent of <code>z</code>. [7760,7791]
===
delete-node
---
Javadoc [7560,7799]
===
===
delete-node
---
TextElement: <a href="http://mathworld.wolfram.com/HyperbolicTangent.html"> [8180,8242]
===
===
delete-node
---
TagElement [8161,8304]
===
===
delete-tree
---
TagElement [8382,8431]
    TextElement:  the hyperbolic tangent of <code>z</code>. [8389,8431]
===
delete-node
---
Javadoc [8150,8439]
===
