{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "/home/liumengjiao/Desktop/CI/Benchmark/data/changesInfo/",
  "properties": {
    "trigger.tests": "org.apache.commons.math.distribution.NormalDistributionTest::testExtremeValues",
    "test.dir": "src/test/java",
    "clz.modified": "org.apache.commons.math.distribution.NormalDistributionImpl",
    "src.dir": "src/main/java"
  },
  "timeoutSecond": 100,
  "proj": "Math",
  "id": "60",
  "workingDir": "../bugs/Math_60_buggy",
  "buggyCommit": "87430634d19f8f3af1e0019f733afb578c80d669",
  "inducingCommit": "fcabfb5a821e31e42aa15740ebc7d740e689819f",
  "originalCommit": "46af8180a7dca91b3a59d587b35ddcb56d508dc4",
  "bug_name": "Math_60",
  "derive": "defects4j",
  "original_fixing_commit": "9054aac4b948117b838d6a5b15be1f50965d805a",
  "buildFiles_changed": false,
  "regression": false,
  "inducing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/math/MessagesResources_fr.java",
        "src/main/java/org/apache/commons/math/MessagesResources_fr.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [],
          "num": 0
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "217",
            "737"
          ],
          "num": 2
        },
        {
          "qualified_names": [
            "218",
            "219",
            "740",
            "741",
            "742",
            "743",
            "744",
            "745",
            "746",
            "747",
            "748"
          ],
          "num": 11
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/math/MessagesResources_fr.java b/src/main/java/org/apache/commons/math/MessagesResources_fr.java\nindex dceb1af..3c00fc6 100644\n--- a/src/main/java/org/apache/commons/math/MessagesResources_fr.java\n+++ b/src/main/java/org/apache/commons/math/MessagesResources_fr.java\n@@ -215,6 +215,8 @@\n       \"Divergence de fraction continue \\u00e0 l\u0027\u0027infini pour la valeur {0}\" },\n     { \"Continued fraction convergents failed to converge for value {0}\",\n       \"\\u00c9chec de convergence de fraction continue pour la valeur {0}\" },\n+    { \"Continued fraction diverged to NaN for value {0}\",\n+      \"Divergence de fraction continue \\u00e0 NaN pour la valeur {0}\"},\n \n     // org.apache.commons.math.util.DefaultTransformer\n     { \"Conversion Exception in Transformation, Object is null\",\n@@ -735,6 +737,15 @@\n      \"la borne inf\\u00e9rieure ({0}) devrait \\u00eatre inf\\u00e9rieure \" +\n      \"ou \\u00e9gale \\u00e0 la borne sup\\u00e9rieure ({1})\" },\n \n+   // org.apache.commons.math.distribution.AbstractContinuousDistribution\n+   { \"Cumulative probability function returned NaN for argument {0} p \u003d {1}\",\n+     \"Fonction de probabilit\\u00e9 cumulative retourn\\u00e9 NaN \\u00e0 l\u0027\u0027argument de {0} p \u003d {1}\" },\n+\n+   // org.apache.commons.math.distribution.AbstractIntegerDistribution\n+   { \"Discrete cumulative probability function returned NaN for argument {0}\",\n+     \"Discr\\u00e8tes fonction de probabilit\\u00e9 cumulative retourn\\u00e9 NaN \\u00e0 l\u0027\u0027argument de {0}\" },\n+\n+\n    // org.apache.commons.math.distribution.BinomialDistributionImpl\n    { \"number of trials must be non-negative ({0})\",\n      \"le nombre d\u0027\u0027essais ne doit pas \\u00eatre n\\u00e9gatif ({0})\" },\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "ArrayInitializer [12016,12140]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ArrayInitializer [41921,42096]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ArrayInitializer [42173,42356]"
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java",
        "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.math.analysis.solvers.BrentSolver:BrentSolver:[]:null",
            "org.apache.commons.math.analysis.solvers.BrentSolver:BrentSolver:[UnivariateRealFunction f]:null"
          ],
          "num": 2
        },
        {
          "qualified_names": [
            "org.apache.commons.math.analysis.solvers.BrentSolver:BrentSolver:[double absoluteAccuracy]:null",
            "org.apache.commons.math.analysis.solvers.BrentSolver:BrentSolver:[int maximumIterations, double absoluteAccuracy]:null",
            "org.apache.commons.math.analysis.solvers.BrentSolver:BrentSolver:[]:null",
            "org.apache.commons.math.analysis.solvers.BrentSolver:BrentSolver:[UnivariateRealFunction f]:null"
          ],
          "num": 4
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "34",
            "54",
            "58",
            "61"
          ],
          "num": 4
        },
        {
          "qualified_names": [
            "35",
            "36",
            "37",
            "38",
            "39",
            "40",
            "60",
            "64",
            "67",
            "68",
            "69",
            "70",
            "71",
            "72",
            "73",
            "74",
            "75",
            "76",
            "77",
            "78",
            "79",
            "80",
            "81",
            "82",
            "83",
            "84",
            "85",
            "86"
          ],
          "num": 28
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\nindex e8c27e8..a2a726e 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n@@ -32,6 +32,12 @@\n  */\n public class BrentSolver extends UnivariateRealSolverImpl {\n \n+    /** Default absolute accuracy */\n+    public static final double DEFAULT_ABSOLUTE_ACCURACY \u003d 1E-6;\n+\n+    /** Default maximum number of iterations */\n+    public static final int DEFAULT_MAXIMUM_ITERATIONS \u003d 100;\n+\n     /** Error message for non-bracketing interval. */\n     private static final String NON_BRACKETING_MESSAGE \u003d\n         \"function values at endpoints do not have different signs.  \" +\n@@ -51,14 +57,33 @@\n      */\n     @Deprecated\n     public BrentSolver(UnivariateRealFunction f) {\n-        super(f, 100, 1E-6);\n+        super(f, DEFAULT_MAXIMUM_ITERATIONS, DEFAULT_ABSOLUTE_ACCURACY);\n     }\n \n     /**\n-     * Construct a solver.\n+     * Construct a solver with default properties.\n      */\n     public BrentSolver() {\n-        super(100, 1E-6);\n+        super(DEFAULT_MAXIMUM_ITERATIONS, DEFAULT_ABSOLUTE_ACCURACY);\n+    }\n+\n+    /**\n+     * Construct a solver with the given absolute accuracy.\n+     *\n+     * @param absoluteAccuracy lower bound for absolute accuracy of solutions returned by the solver\n+     */\n+    public BrentSolver(double absoluteAccuracy) {\n+        super(DEFAULT_MAXIMUM_ITERATIONS, absoluteAccuracy);\n+    }\n+\n+    /**\n+     * Contstruct a solver with the given maximum iterations and absolute accuracy.\n+     *\n+     * @param maximumIterations maximum number of iterations\n+     * @param absoluteAccuracy lower bound for absolute accuracy of solutions returned by the solver\n+     */\n+    public BrentSolver(int maximumIterations, double absoluteAccuracy) {\n+        super(maximumIterations, absoluteAccuracy);\n     }\n \n     /** {@inheritDoc} */\n",
      "operations": [
        {
          "type": "insert-node",
          "from": "",
          "to": "FieldDeclaration [1482,1579]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "FieldDeclaration [1585,1690]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [2731,3027]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [3033,3428]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [1482,1514]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: public [1519,1525]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: static [1526,1532]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: final [1533,1538]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "PrimitiveType: double [1539,1545]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "VariableDeclarationFragment [1546,1578]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [1585,1628]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: public [1633,1639]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: static [1640,1646]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: final [1647,1652]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "PrimitiveType: int [1653,1656]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "VariableDeclarationFragment [1657,1689]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [2560,2622]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: DEFAULT_ABSOLUTE_ACCURACY [1546,1571]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: DEFAULT_MAXIMUM_ITERATIONS [1657,1683]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: DEFAULT_MAXIMUM_ITERATIONS [2493,2519]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: DEFAULT_ABSOLUTE_ACCURACY [2521,2546]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: DEFAULT_MAXIMUM_ITERATIONS [2664,2690]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: DEFAULT_ABSOLUTE_ACCURACY [2692,2717]"
        },
        {
          "type": "delete-node",
          "from": "NumberLiteral: 100 [2279,2282]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "NumberLiteral: 1E-6 [2284,2288]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "Javadoc [2302,2340]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java",
        "src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.math.distribution.AbstractContinuousDistribution:inverseCumulativeProbability:[final double p]:double",
            "org.apache.commons.math.distribution.AbstractContinuousDistribution:getDomainUpperBound:[double p]:double"
          ],
          "num": 2
        },
        {
          "qualified_names": [
            "org.apache.commons.math.distribution.AbstractContinuousDistribution:getSolverAbsoluteAccuracy:[]:double",
            "org.apache.commons.math.distribution.AbstractContinuousDistribution:inverseCumulativeProbability:[final double p]:double"
          ],
          "num": 2
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "25",
            "41",
            "73",
            "93",
            "94",
            "95",
            "109",
            "143"
          ],
          "num": 8
        },
        {
          "qualified_names": [
            "26",
            "43",
            "44",
            "45",
            "76",
            "78",
            "82",
            "83",
            "84",
            "85",
            "86",
            "116",
            "117",
            "118",
            "153",
            "154",
            "155",
            "156",
            "157",
            "158",
            "159",
            "160",
            "161"
          ],
          "num": 23
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java b/src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\nindex 815b8b1..1e4fcca 100644\n--- a/src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\n+++ b/src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\n@@ -23,6 +23,7 @@\n import org.apache.commons.math.MathException;\n import org.apache.commons.math.MathRuntimeException;\n import org.apache.commons.math.analysis.UnivariateRealFunction;\n+import org.apache.commons.math.analysis.solvers.BrentSolver;\n import org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils;\n \n /**\n@@ -39,6 +40,9 @@\n     /** Serializable version identifier */\n     private static final long serialVersionUID \u003d -38038050983108802L;\n \n+    /** Solver absolute accuracy for inverse cum computation */\n+    private double solverAbsoluteAccuracy \u003d BrentSolver.DEFAULT_ABSOLUTE_ACCURACY;\n+\n     /**\n      * Default constructor.\n      */\n@@ -69,11 +73,17 @@\n         UnivariateRealFunction rootFindingFunction \u003d\n             new UnivariateRealFunction() {\n             public double value(double x) throws FunctionEvaluationException {\n+                double ret \u003d Double.NaN;\n                 try {\n-                    return cumulativeProbability(x) - p;\n+                    ret \u003d cumulativeProbability(x) - p;\n                 } catch (MathException ex) {\n                     throw new FunctionEvaluationException(ex, x, ex.getPattern(), ex.getArguments());\n                 }\n+                if (Double.isNaN(ret)) {\n+                    throw new FunctionEvaluationException(x,\n+                        \"Cumulative probability function returned NaN for argument {0} p \u003d {1}\", x, p);\n+                }\n+                return ret;\n             }\n         };\n \n@@ -90,9 +100,6 @@\n              * Check domain endpoints to see if one gives value that is within\n              * the default solver\u0027s defaultAbsoluteAccuracy of 0 (will be the\n              * case if density has bounded support and p is 0 or 1).\n-             *\n-             * TODO: expose the default solver, defaultAbsoluteAccuracy as\n-             * a constant.\n              */\n             if (Math.abs(rootFindingFunction.value(lowerBound)) \u003c 1E-6) {\n                 return lowerBound;\n@@ -106,7 +113,9 @@\n \n         // find root\n         double root \u003d UnivariateRealSolverUtils.solve(rootFindingFunction,\n-                bracket[0],bracket[1]);\n+                // override getSolverAbsoluteAccuracy() to use a Brent solver with\n+                // absolute accuracy different from BrentSolver default\n+                bracket[0],bracket[1], getSolverAbsoluteAccuracy());\n         return root;\n     }\n \n@@ -141,4 +150,13 @@\n      *         P(X \u0026lt; \u003ci\u003eupper bound\u003c/i\u003e) \u0026gt; \u003ccode\u003ep\u003c/code\u003e\n      */\n     protected abstract double getDomainUpperBound(double p);\n+\n+    /**\n+     * Returns the solver absolute accuracy for inverse cum computation.\n+     *\n+     * @return the maximum absolute error in inverse cumulative probability estimates\n+     */\n+    protected double getSolverAbsoluteAccuracy() {\n+        return solverAbsoluteAccuracy;\n+    }\n }\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "ImportDeclaration [1156,1216]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldDeclaration [1757,1899]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [6388,6661]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodInvocation [5015,5042]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [3120,3144]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [3404,3611]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ReturnStatement [3628,3639]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "ExpressionStatement [3187,3222]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Assignment [3187,3221]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: ret [3187,3190]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "ASSIGNMENT_OPERATOR: \u003d [3191,3192]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "ReturnStatement [2937,2973]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java",
        "src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.math.distribution.AbstractIntegerDistribution:inverseCumulativeProbability:[final double p]:int"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "org.apache.commons.math.distribution.AbstractIntegerDistribution:inverseCumulativeProbability:[final double p]:int",
            "org.apache.commons.math.distribution.AbstractIntegerDistribution:getDomainLowerBound:[double p]:int",
            "org.apache.commons.math.distribution.AbstractIntegerDistribution:checkedCumulativeProbability:[int argument]:double"
          ],
          "num": 3
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "20",
            "176",
            "201",
            "204"
          ],
          "num": 4
        },
        {
          "qualified_names": [
            "21",
            "177",
            "202",
            "205",
            "212",
            "213",
            "214",
            "215",
            "216",
            "217",
            "218",
            "219",
            "220",
            "221",
            "222",
            "223",
            "224",
            "225",
            "226",
            "227",
            "228",
            "229",
            "230",
            "231",
            "232",
            "233",
            "234",
            "235"
          ],
          "num": 28
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java b/src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java\nindex 661f1e5..284af38 100644\n--- a/src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java\n+++ b/src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java\n@@ -18,6 +18,7 @@\n \n import java.io.Serializable;\n \n+import org.apache.commons.math.FunctionEvaluationException;\n import org.apache.commons.math.MathException;\n import org.apache.commons.math.MathRuntimeException;\n \n@@ -173,7 +174,7 @@\n         double pm;\n         while (x0 \u003c x1) {\n             int xm \u003d x0 + (x1 - x0) / 2;\n-            pm \u003d cumulativeProbability(xm);\n+            pm \u003d checkedCumulativeProbability(xm);\n             if (pm \u003e p) {\n                 // update x1\n                 if (xm \u003d\u003d x1) {\n@@ -198,16 +199,40 @@\n         }\n \n         // insure x0 is the correct critical point\n-        pm \u003d cumulativeProbability(x0);\n+        pm \u003d checkedCumulativeProbability(x0);\n         while (pm \u003e p) {\n             --x0;\n-            pm \u003d cumulativeProbability(x0);\n+            pm \u003d checkedCumulativeProbability(x0);\n         }\n \n         return x0;\n     }\n \n     /**\n+     * Computes the cumulative probablity function and checks for NaN values returned.\n+     * Throws MathException if the value is NaN. Wraps and rethrows any MathException encountered\n+     * evaluating the cumulative probability function in a FunctionEvaluationException. Throws\n+     * FunctionEvaluationException of the cumulative probability function returns NaN.\n+     *\n+     * @param argument input value\n+     * @return cumulative probability\n+     * @throws FunctionEvaluationException if a MathException occurs computing the cumulative probability\n+     */\n+    private double checkedCumulativeProbability(int argument) throws FunctionEvaluationException {\n+        double result \u003d Double.NaN;\n+        try {\n+            result \u003d cumulativeProbability(argument);\n+        } catch (MathException ex) {\n+            throw new FunctionEvaluationException(ex, argument, ex.getPattern(), ex.getArguments());\n+        }\n+        if (Double.isNaN(result)) {\n+            throw new FunctionEvaluationException(argument,\n+                \"Discrete cumulative probability function returned NaN for argument {0}\", argument);\n+        }\n+        return result;\n+    }\n+\n+    /**\n      * Access the domain value lower bound, based on \u003ccode\u003ep\u003c/code\u003e, used to\n      * bracket a PDF root.  This method is used by\n      * {@link #inverseCumulativeProbability(double)} to find critical values.\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "ImportDeclaration [880,939]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [8228,9379]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java",
        "src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.math.distribution.NormalDistributionImpl:inverseCumulativeProbability:[final double p]:double",
            "org.apache.commons.math.distribution.NormalDistributionImpl:NormalDistributionImpl:[double mean, double sd]:null"
          ],
          "num": 2
        },
        {
          "qualified_names": [
            "org.apache.commons.math.distribution.NormalDistributionImpl:NormalDistributionImpl:[double mean, double sd]:null",
            "org.apache.commons.math.distribution.NormalDistributionImpl:NormalDistributionImpl:[double mean, double sd, double inverseCumAccuracy]:null",
            "org.apache.commons.math.distribution.NormalDistributionImpl:getSolverAbsoluteAccuracy:[]:double",
            "org.apache.commons.math.distribution.NormalDistributionImpl:inverseCumulativeProbability:[final double p]:double"
          ],
          "num": 4
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "35",
            "55",
            "56",
            "139"
          ],
          "num": 4
        },
        {
          "qualified_names": [
            "36",
            "37",
            "38",
            "51",
            "52",
            "53",
            "60",
            "61",
            "62",
            "63",
            "64",
            "65",
            "66",
            "67",
            "68",
            "69",
            "70",
            "71",
            "73",
            "74",
            "75",
            "159",
            "160",
            "161",
            "162",
            "163",
            "164",
            "165",
            "166",
            "167",
            "168",
            "169"
          ],
          "num": 32
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java b/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\nindex 010060c..e5bdce7 100644\n--- a/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n+++ b/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n@@ -33,6 +33,9 @@\n public class NormalDistributionImpl extends AbstractContinuousDistribution\n         implements NormalDistribution, Serializable {\n \n+    /** Default inverse cumulative probability accuracy */\n+    public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY \u003d 1e-9;\n+\n     /** Serializable version identifier */\n     private static final long serialVersionUID \u003d 8589540077390120676L;\n \n@@ -45,15 +48,31 @@\n     /** The standard deviation of this distribution. */\n     private double standardDeviation \u003d 1;\n \n+    /** Inverse cumulative probability accuracy */\n+    private final double solverAbsoluteAccuracy;\n+\n     /**\n      * Create a normal distribution using the given mean and standard deviation.\n      * @param mean mean for this distribution\n      * @param sd standard deviation for this distribution\n      */\n     public NormalDistributionImpl(double mean, double sd){\n+        this(mean, sd, DEFAULT_INVERSE_ABSOLUTE_ACCURACY);\n+    }\n+\n+    /**\n+     * Create a normal distribution using the given mean, standard deviation and\n+     * inverse cumulative distribution accuracy.\n+     *\n+     * @param mean mean for this distribution\n+     * @param sd standard deviation for this distribution\n+     * @param inverseCumAccuracy inverse cumulative probability accuracy\n+     */\n+    public NormalDistributionImpl(double mean, double sd, double inverseCumAccuracy) {\n         super();\n-        setMean(mean);\n-        setStandardDeviation(sd);\n+        this.mean \u003d mean;\n+        this.standardDeviation \u003d sd;\n+        solverAbsoluteAccuracy \u003d inverseCumAccuracy;\n     }\n \n     /**\n@@ -137,6 +156,17 @@\n     }\n \n     /**\n+     * Return the absolute accuracy setting of the solver used to estimate\n+     * inverse cumulative probabilities.\n+     *\n+     * @return the solver absolute accuracy\n+     */\n+    @Override\n+    protected double getSolverAbsoluteAccuracy() {\n+        return solverAbsoluteAccuracy;\n+    }\n+\n+    /**\n      * For this distribution, X, this method returns the critical point x, such\n      * that P(X \u0026lt; x) \u003d \u003ccode\u003ep\u003c/code\u003e.\n      * \u003cp\u003e\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldDeclaration [1360,1487]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldDeclaration [1872,1967]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [2299,2850]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [5340,5628]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ConstructorInvocation [2237,2287]"
        },
        {
          "type": "delete-node",
          "from": "SuperConstructorInvocation [2003,2011]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [2020,2034]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [2043,2068]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java",
        "src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.math.distribution.PoissonDistributionImpl:PoissonDistributionImpl:[double p]:null",
            "org.apache.commons.math.distribution.PoissonDistributionImpl:PoissonDistributionImpl:[double p, NormalDistribution z]:null",
            "org.apache.commons.math.distribution.PoissonDistributionImpl:cumulativeProbability:[int x]:double"
          ],
          "num": 3
        },
        {
          "qualified_names": [
            "org.apache.commons.math.distribution.PoissonDistributionImpl:cumulativeProbability:[int x]:double",
            "org.apache.commons.math.distribution.PoissonDistributionImpl:PoissonDistributionImpl:[double p, int maxIterations]:null",
            "org.apache.commons.math.distribution.PoissonDistributionImpl:PoissonDistributionImpl:[double p]:null",
            "org.apache.commons.math.distribution.PoissonDistributionImpl:PoissonDistributionImpl:[double p, NormalDistribution z]:null",
            "org.apache.commons.math.distribution.PoissonDistributionImpl:PoissonDistributionImpl:[double p, double epsilon]:null",
            "org.apache.commons.math.distribution.PoissonDistributionImpl:PoissonDistributionImpl:[double p, double epsilon, int maxIterations]:null"
          ],
          "num": 6
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "33",
            "45",
            "56",
            "135",
            "136"
          ],
          "num": 5
        },
        {
          "qualified_names": [
            "34",
            "35",
            "36",
            "37",
            "38",
            "39",
            "40",
            "41",
            "42",
            "43",
            "56",
            "57",
            "58",
            "59",
            "60",
            "61",
            "62",
            "63",
            "64",
            "65",
            "66",
            "67",
            "68",
            "80",
            "81",
            "82",
            "83",
            "84",
            "85",
            "86",
            "87",
            "88",
            "89",
            "90",
            "91",
            "92",
            "93",
            "94",
            "95",
            "96",
            "97",
            "98",
            "99",
            "100",
            "101",
            "102",
            "103",
            "104",
            "105",
            "106",
            "107",
            "108",
            "109",
            "110",
            "111",
            "112",
            "113",
            "114",
            "115",
            "116",
            "195"
          ],
          "num": 61
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java b/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java\nindex 5e09dba..9e25099 100644\n--- a/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java\n+++ b/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java\n@@ -31,6 +31,16 @@\n public class PoissonDistributionImpl extends AbstractIntegerDistribution\n         implements PoissonDistribution, Serializable {\n \n+    /**\n+     * Default maximum number of iterations for cumulative probability calculations.\n+     */\n+    public static final int DEFAULT_MAX_ITERATIONS \u003d 10000000;\n+\n+    /**\n+     * Default convergence criterion\n+     */\n+    public static final double DEFAULT_EPSILON \u003d 1E-12;\n+\n     /** Serializable version identifier */\n     private static final long serialVersionUID \u003d -3349935121172596109L;\n \n@@ -43,6 +53,19 @@\n     private double mean;\n \n     /**\n+     * Maximum number of iterations for cumulative probability.\n+     *\n+     * Cumulative probabilities are estimated using either Lanczos series approximation of\n+     * Gamma#regularizedGammaP or continued fraction approximation of Gamma#regularizedGammaQ.\n+     */\n+    private int maxIterations \u003d DEFAULT_MAX_ITERATIONS;\n+\n+    /**\n+     * Convergence criterion for cumulative probability.\n+     */\n+    private double epsilon \u003d DEFAULT_EPSILON;\n+\n+    /**\n      * Create a new Poisson distribution with the given the mean. The mean value\n      * must be positive; otherwise an \u003ccode\u003eIllegalArgument\u003c/code\u003e is thrown.\n      *\n@@ -54,6 +77,43 @@\n     }\n \n     /**\n+     * Create a new Poisson distribution with the given mean, convergence criterion\n+     * and maximum number of iterations.\n+     *\n+     * @param p the Poisson mean\n+     * @param epsilon the convergence criteria for cumulative probabilites\n+     * @param maxIterations the maximum number of iterations for cumulative probabilites\n+     */\n+    public PoissonDistributionImpl(double p, double epsilon, int maxIterations) {\n+        setMean(p);\n+        this.epsilon \u003d epsilon;\n+        this.maxIterations \u003d maxIterations;\n+    }\n+\n+    /**\n+     * Create a new Poisson distribution with the given mean and convergence criterion.\n+     *\n+     * @param p the Poisson mean\n+     * @param epsilon the convergence criteria for cumulative probabilites\n+     */\n+    public PoissonDistributionImpl(double p, double epsilon) {\n+        setMean(p);\n+        this.epsilon \u003d epsilon;\n+    }\n+\n+    /**\n+     * Create a new Poisson distribution with the given mean and maximum number of iterations.\n+     *\n+     * @param p the Poisson mean\n+     * @param maxIterations the maximum number of iterations for cumulative probabilites\n+     */\n+    public PoissonDistributionImpl(double p, int maxIterations) {\n+        setMean(p);\n+        this.maxIterations \u003d maxIterations;\n+    }\n+\n+\n+    /**\n      * Create a new Poisson distribution with the given the mean. The mean value\n      * must be positive; otherwise an \u003ccode\u003eIllegalArgument\u003c/code\u003e is thrown.\n      *\n@@ -132,8 +192,7 @@\n         if (x \u003d\u003d Integer.MAX_VALUE) {\n             return 1;\n         }\n-        return Gamma.regularizedGammaQ((double) x + 1, mean, 1E-12,\n-                Integer.MAX_VALUE);\n+        return Gamma.regularizedGammaQ((double) x + 1, mean, epsilon, maxIterations);\n     }\n \n     /**\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldDeclaration [1302,1461]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldDeclaration [1467,1571]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldDeclaration [1889,2213]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldDeclaration [2219,2333]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [2707,3231]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [3237,3572]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [3578,3949]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: epsilon [6548,6555]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: maxIterations [6557,6570]"
        },
        {
          "type": "delete-node",
          "from": "NumberLiteral: 1E-12 [4574,4579]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "QualifiedName: Integer.MAX_VALUE [4597,4614]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/math/special/Gamma.java",
        "src/main/java/org/apache/commons/math/special/Gamma.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.math.special.Gamma:regularizedGammaQ:[final double a, double x, double epsilon, int maxIterations]:double",
            "org.apache.commons.math.special.Gamma:regularizedGammaP:[double a, double x, double epsilon, int maxIterations]:double"
          ],
          "num": 2
        },
        {
          "qualified_names": [
            "org.apache.commons.math.special.Gamma:regularizedGammaP:[double a, double x, double epsilon, int maxIterations]:double",
            "org.apache.commons.math.special.Gamma:regularizedGammaQ:[final double a, double x, double epsilon, int maxIterations]:double"
          ],
          "num": 2
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "169",
            "178",
            "187",
            "219",
            "244"
          ],
          "num": 5
        },
        {
          "qualified_names": [
            "169",
            "178",
            "188",
            "189",
            "221",
            "246"
          ],
          "num": 6
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/math/special/Gamma.java b/src/main/java/org/apache/commons/math/special/Gamma.java\nindex a80c019..af3086b 100644\n--- a/src/main/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/main/java/org/apache/commons/math/special/Gamma.java\n@@ -166,7 +166,7 @@\n             ret \u003d Double.NaN;\n         } else if (x \u003d\u003d 0.0) {\n             ret \u003d 0.0;\n-        } else if (a \u003e\u003d 1.0 \u0026\u0026 x \u003e a) {\n+        } else if (x \u003e\u003d a + 1) {\n             // use regularizedGammaQ because it should converge faster in this\n             // case.\n             ret \u003d 1.0 - regularizedGammaQ(a, x, epsilon, maxIterations);\n@@ -175,7 +175,7 @@\n             double n \u003d 0.0; // current element index\n             double an \u003d 1.0 / a; // n-th element in the series\n             double sum \u003d an; // partial sum\n-            while (Math.abs(an) \u003e epsilon \u0026\u0026 n \u003c maxIterations) {\n+            while (Math.abs(an/sum) \u003e epsilon \u0026\u0026 n \u003c maxIterations \u0026\u0026 sum \u003c Double.POSITIVE_INFINITY) {\n                 // compute next element in the series\n                 n \u003d n + 1.0;\n                 an \u003d an * (x / (a + n));\n@@ -185,6 +185,8 @@\n             }\n             if (n \u003e\u003d maxIterations) {\n                 throw new MaxIterationsExceededException(maxIterations);\n+            } else if (Double.isInfinite(sum)) {\n+                ret \u003d 1.0;\n             } else {\n                 ret \u003d Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * sum;\n             }\n@@ -216,7 +218,7 @@\n      * \u003ca href\u003d\"http://mathworld.wolfram.com/RegularizedGammaFunction.html\"\u003e\n      * Regularized Gamma Function\u003c/a\u003e, equation (1).\u003c/li\u003e\n      * \u003cli\u003e\n-     * \u003ca href\u003d\"    http://functions.wolfram.com/GammaBetaErf/GammaRegularized/10/0003/\"\u003e\n+     * \u003ca href\u003d\"http://functions.wolfram.com/GammaBetaErf/GammaRegularized/10/0003/\"\u003e\n      * Regularized incomplete gamma function: Continued fraction representations  (formula 06.08.10.0003)\u003c/a\u003e\u003c/li\u003e\n      * \u003c/ul\u003e\n      *\n@@ -241,7 +243,7 @@\n             ret \u003d Double.NaN;\n         } else if (x \u003d\u003d 0.0) {\n             ret \u003d 1.0;\n-        } else if (x \u003c a || a \u003c 1.0) {\n+        } else if (x \u003c a + 1.0) {\n             // use regularizedGammaP because it should converge faster in this\n             // case.\n             ret \u003d 1.0 - regularizedGammaP(a, x, epsilon, maxIterations);\n",
      "operations": [
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "InfixExpression [5795,5800]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "INFIX_EXPRESSION_OPERATOR: + [5797,5798]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "NumberLiteral: 1 [5799,5800]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "InfixExpression [6205,6286]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "IfStatement [6629,6796]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "INFIX_EXPRESSION_OPERATOR: \u0026\u0026 [6253,6255]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "InfixExpression [6256,6286]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodInvocation [6633,6655]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Block [6657,6699]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "InfixExpression [6214,6220]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "INFIX_EXPRESSION_OPERATOR: / [6216,6217]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: sum [6217,6220]"
        },
        {
          "type": "delete-node",
          "from": "NumberLiteral: 1.0 [5795,5798]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "InfixExpression [5790,5798]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "INFIX_EXPRESSION_OPERATOR: \u0026\u0026 [5799,5801]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "INFIX_EXPRESSION_OPERATOR: \u003e [5804,5805]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: a [5806,5807]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "InfixExpression [5802,5807]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: a [8657,8658]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "InfixExpression [8653,8658]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "INFIX_EXPRESSION_OPERATOR: || [8659,8661]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/math/util/ContinuedFraction.java",
        "src/main/java/org/apache/commons/math/util/ContinuedFraction.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.math.util.ContinuedFraction:evaluate:[double x, double epsilon, int maxIterations]:double"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "org.apache.commons.math.util.ContinuedFraction:evaluate:[double x, double epsilon, int maxIterations]:double"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "142",
            "143",
            "144",
            "145",
            "146",
            "147",
            "148",
            "149",
            "150",
            "152",
            "153"
          ],
          "num": 11
        },
        {
          "qualified_names": [
            "141",
            "143",
            "144",
            "145",
            "146",
            "147",
            "148",
            "149",
            "150",
            "151",
            "152",
            "154",
            "155",
            "156",
            "157",
            "158",
            "159",
            "160",
            "161",
            "162",
            "163",
            "164",
            "165",
            "166",
            "167",
            "168",
            "169",
            "170",
            "171",
            "174",
            "175",
            "176",
            "177",
            "178",
            "179",
            "180",
            "181",
            "183",
            "184",
            "185",
            "186",
            "187",
            "188"
          ],
          "num": 43
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/math/util/ContinuedFraction.java b/src/main/java/org/apache/commons/math/util/ContinuedFraction.java\nindex c633b2f..5a8ae5a 100644\n--- a/src/main/java/org/apache/commons/math/util/ContinuedFraction.java\n+++ b/src/main/java/org/apache/commons/math/util/ContinuedFraction.java\n@@ -138,22 +138,54 @@\n             double b \u003d getB(n, x);\n             double p2 \u003d a * p1 + b * p0;\n             double q2 \u003d a * q1 + b * q0;\n+            boolean infinite \u003d false;\n             if (Double.isInfinite(p2) || Double.isInfinite(q2)) {\n-                // need to scale\n-                if (a !\u003d 0.0) {\n-                    p2 \u003d p1 + (b / a * p0);\n-                    q2 \u003d q1 + (b / a * q0);\n-                } else if (b !\u003d 0) {\n-                    p2 \u003d (a / b * p1) + p0;\n-                    q2 \u003d (a / b * q1) + q0;\n-                } else {\n-                    // can not scale an convergent is unbounded.\n+                /*\n+                 * Need to scale. Try successive powers of the larger of a or b\n+                 * up to 5th power. Throw ConvergenceException if one or both\n+                 * of p2, q2 still overflow.\n+                 */\n+                double scaleFactor \u003d 1d;\n+                double lastScaleFactor \u003d 1d;\n+                final int maxPower \u003d 5;\n+                final double scale \u003d Math.max(a,b);\n+                if (scale \u003c\u003d 0) {  // Can\u0027t scale\n                     throw new ConvergenceException(\n-                        \"Continued fraction convergents diverged to +/- infinity for value {0}\",\n-                        x);\n+                            \"Continued fraction convergents diverged to +/- infinity for value {0}\",\n+                             x);\n+                }\n+                infinite \u003d true;\n+                for (int i \u003d 0; i \u003c maxPower; i++) {\n+                    lastScaleFactor \u003d scaleFactor;\n+                    scaleFactor *\u003d scale;\n+                    if (a !\u003d 0.0 \u0026\u0026 a \u003e b) {\n+                        p2 \u003d p1 / lastScaleFactor + (b / scaleFactor * p0);\n+                        q2 \u003d q1 / lastScaleFactor + (b / scaleFactor * q0);\n+                    } else if (b !\u003d 0) {\n+                        p2 \u003d (a / scaleFactor * p1) + p0 / lastScaleFactor;\n+                        q2 \u003d (a / scaleFactor * q1) + q0 / lastScaleFactor;\n+                    }\n+                    infinite \u003d Double.isInfinite(p2) || Double.isInfinite(q2);\n+                    if (!infinite) {\n+                        break;\n+                    }\n                 }\n             }\n+\n+            if (infinite) {\n+               // Scaling failed\n+               throw new ConvergenceException(\n+                 \"Continued fraction convergents diverged to +/- infinity for value {0}\",\n+                  x);\n+            }\n+\n             double r \u003d p2 / q2;\n+\n+            if (Double.isNaN(r)) {\n+                throw new ConvergenceException(\n+                  \"Continued fraction diverged to NaN for value {0}\",\n+                  x);\n+            }\n             relativeError \u003d Math.abs(r / c - 1.0);\n \n             // prepare for next iteration\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [5180,5205]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [6751,6972]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [7019,7195]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [5530,5554]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [5571,5599]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [5616,5639]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [5656,5691]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "IfStatement [5708,5945]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [5962,5978]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "ForStatement [5995,6723]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "InfixExpression [5712,5722]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationExpression [6000,6009]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "InfixExpression [6011,6023]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "PostfixExpression [6025,6028]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Block [6030,6723]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [6052,6082]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [6103,6124]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [6557,6615]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [6636,6705]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "InfixExpression [6149,6166]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "INFIX_EXPRESSION_OPERATOR: \u0026\u0026 [6158,6160]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "InfixExpression [6161,6166]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [6194,6245]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [6270,6321]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [6387,6438]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [6463,6514]"
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [5319,5342]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [5363,5386]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [5444,5467]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [5488,5511]",
          "to": ""
        }
      ]
    }
  ],
  "inducing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [
        "org.apache.commons.math.analysis.solvers.BrentSolver:BrentSolver:[double absoluteAccuracy]:null",
        "org.apache.commons.math.distribution.PoissonDistributionImpl:PoissonDistributionImpl:[double p, int maxIterations]:null",
        "org.apache.commons.math.distribution.NormalDistributionImpl:getSolverAbsoluteAccuracy:[]:double",
        "org.apache.commons.math.distribution.PoissonDistributionImpl:PoissonDistributionImpl:[double p, double epsilon, int maxIterations]:null",
        "org.apache.commons.math.distribution.NormalDistributionImpl:NormalDistributionImpl:[double mean, double sd, double inverseCumAccuracy]:null",
        "org.apache.commons.math.distribution.AbstractContinuousDistribution:getSolverAbsoluteAccuracy:[]:double",
        "org.apache.commons.math.analysis.solvers.BrentSolver:BrentSolver:[int maximumIterations, double absoluteAccuracy]:null",
        "org.apache.commons.math.distribution.AbstractIntegerDistribution:checkedCumulativeProbability:[int argument]:double",
        "org.apache.commons.math.distribution.PoissonDistributionImpl:PoissonDistributionImpl:[double p, double epsilon]:null",
        "org.apache.commons.math.distribution.AbstractIntegerDistribution:getDomainLowerBound:[double p]:int"
      ],
      "num": 10
    },
    "delete_functions": {
      "qualified_names": [
        "org.apache.commons.math.distribution.AbstractContinuousDistribution:getDomainUpperBound:[double p]:double"
      ],
      "num": 1
    }
  },
  "trigger_tests": [
    {
      "test_class": "org.apache.commons.math.distribution.NormalDistributionTest",
      "test_function": "testExtremeValues",
      "assertion_line": "174",
      "exception": "org.apache.commons.math.ConvergenceException",
      "message": "Continued fraction diverged to NaN for value ∞"
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java",
        "src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.math.distribution.NormalDistributionImpl:cumulativeProbability:[double x]:double"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "org.apache.commons.math.distribution.NormalDistributionImpl:cumulativeProbability:[double x]:double"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "120",
            "121",
            "122",
            "125",
            "126",
            "127",
            "128",
            "129",
            "130",
            "131",
            "132",
            "133",
            "134",
            "135"
          ],
          "num": 14
        },
        {
          "qualified_names": [
            "117",
            "118",
            "122",
            "125",
            "126",
            "127",
            "129",
            "130"
          ],
          "num": 8
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java b/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\nindex 456555b..0d7ce7d 100644\n--- a/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n+++ b/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n@@ -114,26 +114,20 @@\n \n     /**\n      * For this distribution, {@code X}, this method returns {@code P(X \u003c x)}.\n+     * If {@code x}is more than 40 standard deviations from the mean, 0 or 1 is returned,\n+     * as in these cases the actual value is within {@code Double.MIN_VALUE} of 0 or 1.\n      *\n      * @param x Value at which the CDF is evaluated.\n      * @return CDF evaluated at {@code x}.\n-     * @throws MathException if the algorithm fails to converge; unless\n-     * {@code x} is more than 20 standard deviations from the mean, in which\n-     * case the convergence exception is caught and 0 or 1 is returned.\n+     * @throws MathException if the algorithm fails to converge\n      */\n     public double cumulativeProbability(double x) throws MathException {\n-        try {\n-            return 0.5 * (1.0 + Erf.erf((x - mean) /\n-                    (standardDeviation * FastMath.sqrt(2.0))));\n-        } catch (MaxIterationsExceededException ex) {\n-            if (x \u003c (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38\n-                return 0;\n-            } else if (x \u003e (mean + 20 * standardDeviation)) {\n-                return 1;\n-            } else {\n-                throw ex;\n-            }\n+        final double dev \u003d x - mean;\n+        if (FastMath.abs(dev) \u003e 40 * standardDeviation) { \n+            return dev \u003c 0 ? 0.0d : 1.0d;\n         }\n+        return 0.5 * (1.0 + Erf.erf((dev) /\n+                    (standardDeviation * FastMath.sqrt(2.0))));\n     }\n \n     /**\n",
      "operations": [
        {
          "type": "insert-node",
          "from": "",
          "to": "VariableDeclarationStatement [4390,4418]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [4427,4529]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: If  [3963,3966]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: is more than 40 standard deviations from the mean, 0 or 1 is returned, [3975,4045]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: as in these cases the actual value is within  [4053,4098]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [4098,4122]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement:  of 0 or 1. [4122,4133]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: final [4390,4395]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "PrimitiveType: double [4396,4402]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "VariableDeclarationFragment [4403,4417]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: dev [4403,4406]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: dev [4567,4570]"
        },
        {
          "type": "delete-node",
          "from": "TextElement:  is more than 20 standard deviations from the mean, in which [4147,4207]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: case the convergence exception is caught and 0 or 1 is returned. [4215,4279]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Block [4373,4501]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "CatchClause [4502,4808]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TryStatement [4369,4808]",
          "to": ""
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  },
  "patch_changed_mths": {
    "qualified_names": [],
    "num": 0
  }
}