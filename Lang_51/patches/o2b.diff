diff -r -u original/src/java/org/apache/commons/lang/BooleanUtils.java buggy/src/java/org/apache/commons/lang/BooleanUtils.java
--- original/src/java/org/apache/commons/lang/BooleanUtils.java	2023-06-13 15:31:50.667136877 +0800
+++ buggy/src/java/org/apache/commons/lang/BooleanUtils.java	2023-06-12 11:40:36.626251971 +0800
@@ -1,55 +1,18 @@
-/* ====================================================================
- * The Apache Software License, Version 1.1
- *
- * Copyright (c) 2002-2003 The Apache Software Foundation.  All rights
- * reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions
- * are met:
- *
- * 1. Redistributions of source code must retain the above copyright
- *    notice, this list of conditions and the following disclaimer.
- *
- * 2. Redistributions in binary form must reproduce the above copyright
- *    notice, this list of conditions and the following disclaimer in
- *    the documentation and/or other materials provided with the
- *    distribution.
- *
- * 3. The end-user documentation included with the redistribution, if
- *    any, must include the following acknowledgement:
- *       "This product includes software developed by the
- *        Apache Software Foundation (http://www.apache.org/)."
- *    Alternately, this acknowledgement may appear in the software itself,
- *    if and wherever such third-party acknowledgements normally appear.
- *
- * 4. The names "The Jakarta Project", "Commons", and "Apache Software
- *    Foundation" must not be used to endorse or promote products derived
- *    from this software without prior written permission. For written
- *    permission, please contact apache@apache.org.
- *
- * 5. Products derived from this software may not be called "Apache"
- *    nor may "Apache" appear in their names without prior written
- *    permission of the Apache Software Foundation.
- *
- * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
- * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
- * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
- * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
- * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
- * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
- * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
- * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
- * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
- * SUCH DAMAGE.
- * ====================================================================
- *
- * This software consists of voluntary contributions made by many
- * individuals on behalf of the Apache Software Foundation.  For more
- * information on the Apache Software Foundation, please see
- * <http://www.apache.org/>.
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
  */
 package org.apache.commons.lang;
 
@@ -66,7 +29,7 @@
  * @author Matthew Hawthorne
  * @author Gary Gregory
  * @since 2.0
- * @version $Id: BooleanUtils.java,v 1.16 2003/09/23 19:45:14 fredrik Exp $
+ * @version $Id$
  */
 public class BooleanUtils {
 
@@ -78,6 +41,7 @@
      * to operate.</p>
      */
     public BooleanUtils() {
+      super();
     }
 
     // Boolean utilities
@@ -106,6 +70,85 @@
     // boolean Boolean methods
     //-----------------------------------------------------------------------
     /**
+     * <p>Checks if a <code>Boolean</code> value is <code>true</code>,
+     * handling <code>null</code> by returning <code>false</code>.</p>
+     *
+     * <pre>
+     *   BooleanUtils.isTrue(Boolean.TRUE)  = true
+     *   BooleanUtils.isTrue(Boolean.FALSE) = false
+     *   BooleanUtils.isTrue(null)          = false
+     * </pre>
+     *
+     * @param bool  the boolean to check, null returns <code>false</code>
+     * @return <code>true</code> only if the input is non-null and true
+     * @since 2.1
+     */
+    public static boolean isTrue(Boolean bool) {
+        if (bool == null) {
+            return false;
+        }
+        return bool.booleanValue() ? true : false;
+    }
+
+    /**
+     * <p>Checks if a <code>Boolean</code> value is <i>not</i> <code>true</code>,
+     * handling <code>null</code> by returning <code>true</code>.</p>
+     *
+     * <pre>
+     *   BooleanUtils.isNotTrue(Boolean.TRUE)  = false
+     *   BooleanUtils.isNotTrue(Boolean.FALSE) = true
+     *   BooleanUtils.isNotTrue(null)          = true
+     * </pre>
+     *
+     * @param bool  the boolean to check, null returns <code>true</code>
+     * @return <code>true</code> if the input is null or false
+     * @since 2.3
+     */
+    public static boolean isNotTrue(Boolean bool) {
+        return !isTrue(bool);
+    }
+
+    /**
+     * <p>Checks if a <code>Boolean</code> value is <code>false</code>,
+     * handling <code>null</code> by returning <code>false</code>.</p>
+     *
+     * <pre>
+     *   BooleanUtils.isFalse(Boolean.TRUE)  = false
+     *   BooleanUtils.isFalse(Boolean.FALSE) = true
+     *   BooleanUtils.isFalse(null)          = false
+     * </pre>
+     *
+     * @param bool  the boolean to check, null returns <code>false</code>
+     * @return <code>true</code> only if the input is non-null and false
+     * @since 2.1
+     */
+    public static boolean isFalse(Boolean bool) {
+        if (bool == null) {
+            return false;
+        }
+        return bool.booleanValue() ? false : true;
+    }
+
+    /**
+     * <p>Checks if a <code>Boolean</code> value is <i>not</i> <code>false</code>,
+     * handling <code>null</code> by returning <code>true</code>.</p>
+     *
+     * <pre>
+     *   BooleanUtils.isNotFalse(Boolean.TRUE)  = true
+     *   BooleanUtils.isNotFalse(Boolean.FALSE) = false
+     *   BooleanUtils.isNotFalse(null)          = true
+     * </pre>
+     *
+     * @param bool  the boolean to check, null returns <code>true</code>
+     * @return <code>true</code> if the input is null or true
+     * @since 2.3
+     */
+    public static boolean isNotFalse(Boolean bool) {
+        return !isFalse(bool);
+    }
+
+    //-----------------------------------------------------------------------
+    /**
      * <p>Boolean factory that avoids creating new Boolean objecs all the time.</p>
      * 
      * <p>This method was added to JDK1.4 but is available here for earlier JDKs.</p>
@@ -119,7 +162,7 @@
      * @return Boolean.TRUE or Boolean.FALSE as appropriate
      */
     public static Boolean toBooleanObject(boolean bool) {
-        return (bool ? Boolean.TRUE : Boolean.FALSE);
+        return bool ? Boolean.TRUE : Boolean.FALSE;
     }
     
     /**
@@ -140,7 +183,7 @@
         if (bool == null) {
             return false;
         }
-        return (bool.booleanValue() ? true : false);
+        return bool.booleanValue() ? true : false;
     }
     
     /**
@@ -160,7 +203,7 @@
         if (bool == null) {
             return valueIfNull;
         }
-        return (bool.booleanValue() ? true : false);
+        return bool.booleanValue() ? true : false;
     }
     
     // Integer to Boolean methods
@@ -180,7 +223,7 @@
      *  if zero
      */
     public static boolean toBoolean(int value) {
-        return (value == 0 ? false : true);
+        return value == 0 ? false : true;
     }
     
     /**
@@ -198,7 +241,7 @@
      *  <code>null</code> if <code>null</code>
      */
     public static Boolean toBooleanObject(int value) {
-        return (value == 0 ? Boolean.FALSE : Boolean.TRUE);
+        return value == 0 ? Boolean.FALSE : Boolean.TRUE;
     }
     
     /**
@@ -221,7 +264,7 @@
         if (value == null) {
             return null;
         }
-        return (value.intValue() == 0 ? Boolean.FALSE : Boolean.TRUE);
+        return value.intValue() == 0 ? Boolean.FALSE : Boolean.TRUE;
     }
     
     /**
@@ -367,7 +410,7 @@
      * @return one if <code>true</code>, zero if <code>false</code>
      */
     public static int toInteger(boolean bool) {
-        return (bool ? 1 : 0);
+        return bool ? 1 : 0;
     }
     
     /**
@@ -383,7 +426,7 @@
      * @return one if <code>true</code>, zero if <code>false</code>
      */
     public static Integer toIntegerObject(boolean bool) {
-        return (bool ? NumberUtils.INTEGER_ONE : NumberUtils.INTEGER_ZERO);
+        return bool ? NumberUtils.INTEGER_ONE : NumberUtils.INTEGER_ZERO;
     }
     
     /**
@@ -404,7 +447,7 @@
         if (bool == null) {
             return null;
         }
-        return (bool.booleanValue() ? NumberUtils.INTEGER_ONE : NumberUtils.INTEGER_ZERO);
+        return bool.booleanValue() ? NumberUtils.INTEGER_ONE : NumberUtils.INTEGER_ZERO;
     }
     
     /**
@@ -421,7 +464,7 @@
      * @return the appropriate value
      */
     public static int toInteger(boolean bool, int trueValue, int falseValue) {
-        return (bool ? trueValue : falseValue);
+        return bool ? trueValue : falseValue;
     }
     
     /**
@@ -443,7 +486,7 @@
         if (bool == null) {
             return nullValue;
         }
-        return (bool.booleanValue() ? trueValue : falseValue);
+        return bool.booleanValue() ? trueValue : falseValue;
     }
     
     /**
@@ -462,7 +505,7 @@
      * @return the appropriate value
      */
     public static Integer toIntegerObject(boolean bool, Integer trueValue, Integer falseValue) {
-        return (bool ? trueValue : falseValue);
+        return bool ? trueValue : falseValue;
     }
     
     /**
@@ -487,7 +530,7 @@
         if (bool == null) {
             return nullValue;
         }
-        return (bool.booleanValue() ? trueValue : falseValue);
+        return bool.booleanValue() ? trueValue : falseValue;
     }
     
     // String to Boolean methods
@@ -502,12 +545,14 @@
      * Otherwise, <code>null</code> is returned.</p>
      *
      * <pre>
+     *   BooleanUtils.toBooleanObject(null)    = null
      *   BooleanUtils.toBooleanObject("true")  = Boolean.TRUE
      *   BooleanUtils.toBooleanObject("false") = Boolean.FALSE
      *   BooleanUtils.toBooleanObject("on")    = Boolean.TRUE
      *   BooleanUtils.toBooleanObject("ON")    = Boolean.TRUE
      *   BooleanUtils.toBooleanObject("off")   = Boolean.FALSE
      *   BooleanUtils.toBooleanObject("oFf")   = Boolean.FALSE
+     *   BooleanUtils.toBooleanObject("blue")  = null
      * </pre>
      *
      * @param str  the String to check
@@ -549,7 +594,10 @@
      * @param nullString  the String to match for <code>null</code>
      *  (case sensitive), may be <code>null</code>
      * @return the Boolean value of the string,
-     *  <code>null</code> if no match or <code>null</code> input
+     *  <code>null</code> if either the String matches <code>nullString</code>
+     *  or if <code>null</code> input and <code>nullString</code> is
+     *  <code>null</code>
+     * @throws IllegalArgumentException if the String doesn't match
      */
     public static Boolean toBooleanObject(String str, String trueString, String falseString, String nullString) {
         if (str == null) {
@@ -574,34 +622,94 @@
     // String to boolean methods
     //-----------------------------------------------------------------------
     /**
-     * <p>Converts a String to a boolean.</p>
+     * <p>Converts a String to a boolean (optimised for performance).</p>
      * 
      * <p><code>'true'</code>, <code>'on'</code> or <code>'yes'</code>
      * (case insensitive) will return <code>true</code>. Otherwise,
      * <code>false</code> is returned.</p>
+     * 
+     * <p>This method performs 4 times faster (JDK1.4) than
+     * <code>Boolean.valueOf(String)</code>. However, this method accepts
+     * 'on' and 'yes' as true values.
      *
      * <pre>
+     *   BooleanUtils.toBoolean(null)    = false
      *   BooleanUtils.toBoolean("true")  = true
+     *   BooleanUtils.toBoolean("TRUE")  = true
+     *   BooleanUtils.toBoolean("tRUe")  = true
      *   BooleanUtils.toBoolean("on")    = true
      *   BooleanUtils.toBoolean("yes")   = true
      *   BooleanUtils.toBoolean("false") = false
+     *   BooleanUtils.toBoolean("x gti") = false
      * </pre>
      *
      * @param str  the String to check
      * @return the boolean value of the string, <code>false</code> if no match
      */
     public static boolean toBoolean(String str) {
-        if ("true".equalsIgnoreCase(str)) {
-            return true;
-        } else if ("on".equalsIgnoreCase(str)) {
-            return true;
-        } else if ("yes".equalsIgnoreCase(str)) {
+        // Previously used equalsIgnoreCase, which was fast for interned 'true'.
+        // Non interned 'true' matched 15 times slower.
+        // 
+        // Optimisation provides same performance as before for interned 'true'.
+        // Similar performance for null, 'false', and other strings not length 2/3/4.
+        // 'true'/'TRUE' match 4 times slower, 'tRUE'/'True' 7 times slower.
+        if (str == "true") {
             return true;
         }
-        // no match
+        if (str == null) {
+            return false;
+        }
+        switch (str.length()) {
+            case 2: {
+                char ch0 = str.charAt(0);
+                char ch1 = str.charAt(1);
+                return 
+                    (ch0 == 'o' || ch0 == 'O') &&
+                    (ch1 == 'n' || ch1 == 'N');
+            }
+            case 3: {
+                char ch = str.charAt(0);
+                if (ch == 'y') {
+                    return 
+                        (str.charAt(1) == 'e' || str.charAt(1) == 'E') &&
+                        (str.charAt(2) == 's' || str.charAt(2) == 'S');
+                }
+                if (ch == 'Y') {
+                    return 
+                        (str.charAt(1) == 'E' || str.charAt(1) == 'e') &&
+                        (str.charAt(2) == 'S' || str.charAt(2) == 's');
+                }
+            }
+            case 4: {
+                char ch = str.charAt(0);
+                if (ch == 't') {
+                    return 
+                        (str.charAt(1) == 'r' || str.charAt(1) == 'R') &&
+                        (str.charAt(2) == 'u' || str.charAt(2) == 'U') &&
+                        (str.charAt(3) == 'e' || str.charAt(3) == 'E');
+                }
+                if (ch == 'T') {
+                    return 
+                        (str.charAt(1) == 'R' || str.charAt(1) == 'r') &&
+                        (str.charAt(2) == 'U' || str.charAt(2) == 'u') &&
+                        (str.charAt(3) == 'E' || str.charAt(3) == 'e');
+                }
+            }
+        }
         return false;
     }
-
+    
+//    public static void main(String[] args) {
+//        long start = System.currentTimeMillis();
+//        boolean flag = true;
+//        int count = 0;
+//        for (int i = 0; i < 100000000; i++) {
+//            flag = toBoolean("YES");
+//        }
+//        long end = System.currentTimeMillis();
+//        System.out.println((end - start) + " " + flag + " " + count);
+//    }
+    
     /**
      * <p>Converts a String to a Boolean throwing an exception if no match found.</p>
      * 
@@ -714,7 +822,7 @@
         if (bool == null) {
             return nullString;
         }
-        return (bool.booleanValue() ? trueString : falseString);
+        return bool.booleanValue() ? trueString : falseString;
     }
     
     // boolean to String methods
@@ -786,7 +894,7 @@
      * @return one of the two input Strings
      */
     public static String toString(boolean bool, String trueString, String falseString) {
-        return (bool ? trueString : falseString);
+        return bool ? trueString : falseString;
     }
     
     // xor methods
@@ -858,7 +966,7 @@
         } catch (NullPointerException ex) {
             throw new IllegalArgumentException("The array must not contain any null elements");
         }
-        return (xor(primitive) ? Boolean.TRUE : Boolean.FALSE);
+        return xor(primitive) ? Boolean.TRUE : Boolean.FALSE;
     }
 
 }
diff -r -u original/src/test/org/apache/commons/lang/BooleanUtilsTest.java buggy/src/test/org/apache/commons/lang/BooleanUtilsTest.java
--- original/src/test/org/apache/commons/lang/BooleanUtilsTest.java	2023-06-13 15:31:50.667136877 +0800
+++ buggy/src/test/org/apache/commons/lang/BooleanUtilsTest.java	2023-06-12 11:40:36.662250349 +0800
@@ -1,55 +1,18 @@
-/* ====================================================================
- * The Apache Software License, Version 1.1
- *
- * Copyright (c) 2002-2003 The Apache Software Foundation.  All rights
- * reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions
- * are met:
- *
- * 1. Redistributions of source code must retain the above copyright
- *    notice, this list of conditions and the following disclaimer.
- *
- * 2. Redistributions in binary form must reproduce the above copyright
- *    notice, this list of conditions and the following disclaimer in
- *    the documentation and/or other materials provided with the
- *    distribution.
- *
- * 3. The end-user documentation included with the redistribution, if
- *    any, must include the following acknowledgement:
- *       "This product includes software developed by the
- *        Apache Software Foundation (http://www.apache.org/)."
- *    Alternately, this acknowledgement may appear in the software itself,
- *    if and wherever such third-party acknowledgements normally appear.
- *
- * 4. The names "The Jakarta Project", "Commons", and "Apache Software
- *    Foundation" must not be used to endorse or promote products derived
- *    from this software without prior written permission. For written
- *    permission, please contact apache@apache.org.
- *
- * 5. Products derived from this software may not be called "Apache"
- *    nor may "Apache" appear in their names without prior written
- *    permission of the Apache Software Foundation.
- *
- * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
- * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
- * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
- * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
- * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
- * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
- * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
- * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
- * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
- * SUCH DAMAGE.
- * ====================================================================
- *
- * This software consists of voluntary contributions made by many
- * individuals on behalf of the Apache Software Foundation.  For more
- * information on the Apache Software Foundation, please see
- * <http://www.apache.org/>.
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
  */
 package org.apache.commons.lang;
 
@@ -66,7 +29,7 @@
  *
  * @author Stephen Colebourne
  * @author Matthew Hawthorne
- * @version $Id: BooleanUtilsTest.java,v 1.7 2003/08/18 02:22:25 bayard Exp $
+ * @version $Id$
  */
 public class BooleanUtilsTest extends TestCase {
 
@@ -79,8 +42,8 @@
     }
 
     public static Test suite() {
-    	TestSuite suite = new TestSuite(BooleanUtilsTest.class);
-    	suite.setName("BooleanUtils Tests");
+        TestSuite suite = new TestSuite(BooleanUtilsTest.class);
+        suite.setName("BooleanUtils Tests");
         return suite;
     }
 
@@ -110,6 +73,32 @@
     }
 
     //-----------------------------------------------------------------------
+    public void test_isTrue_Boolean() {
+        assertEquals(true, BooleanUtils.isTrue(Boolean.TRUE));
+        assertEquals(false, BooleanUtils.isTrue(Boolean.FALSE));
+        assertEquals(false, BooleanUtils.isTrue((Boolean) null));
+    }
+
+    public void test_isNotTrue_Boolean() {
+        assertEquals(false, BooleanUtils.isNotTrue(Boolean.TRUE));
+        assertEquals(true, BooleanUtils.isNotTrue(Boolean.FALSE));
+        assertEquals(true, BooleanUtils.isNotTrue((Boolean) null));
+    }
+
+    //-----------------------------------------------------------------------
+    public void test_isFalse_Boolean() {
+        assertEquals(false, BooleanUtils.isFalse(Boolean.TRUE));
+        assertEquals(true, BooleanUtils.isFalse(Boolean.FALSE));
+        assertEquals(false, BooleanUtils.isFalse((Boolean) null));
+    }
+
+    public void test_isNotFalse_Boolean() {
+        assertEquals(true, BooleanUtils.isNotFalse(Boolean.TRUE));
+        assertEquals(false, BooleanUtils.isNotFalse(Boolean.FALSE));
+        assertEquals(true, BooleanUtils.isNotFalse((Boolean) null));
+    }
+
+    //-----------------------------------------------------------------------
     public void test_toBooleanObject_boolean() {
         assertSame(Boolean.TRUE, BooleanUtils.toBooleanObject(true));
         assertSame(Boolean.FALSE, BooleanUtils.toBooleanObject(false));
@@ -308,13 +297,39 @@
         assertEquals(false, BooleanUtils.toBoolean(""));
         assertEquals(false, BooleanUtils.toBoolean("off"));
         assertEquals(false, BooleanUtils.toBoolean("oof"));
-        assertEquals(true, BooleanUtils.toBoolean("true"));
-        assertEquals(true, BooleanUtils.toBoolean("yes"));
-        assertEquals(true, BooleanUtils.toBoolean("on"));
+        assertEquals(false, BooleanUtils.toBoolean("yep"));
+        assertEquals(false, BooleanUtils.toBoolean("trux"));
+        assertEquals(false, BooleanUtils.toBoolean("false"));
+        assertEquals(false, BooleanUtils.toBoolean("a"));
+        assertEquals(true, BooleanUtils.toBoolean("true")); // interned handled differently
+        assertEquals(true, BooleanUtils.toBoolean(new StringBuffer("tr").append("ue").toString()));
+        assertEquals(true, BooleanUtils.toBoolean("truE"));
+        assertEquals(true, BooleanUtils.toBoolean("trUe"));
+        assertEquals(true, BooleanUtils.toBoolean("trUE"));
+        assertEquals(true, BooleanUtils.toBoolean("tRue"));
+        assertEquals(true, BooleanUtils.toBoolean("tRuE"));
+        assertEquals(true, BooleanUtils.toBoolean("tRUe"));
+        assertEquals(true, BooleanUtils.toBoolean("tRUE"));
         assertEquals(true, BooleanUtils.toBoolean("TRUE"));
+        assertEquals(true, BooleanUtils.toBoolean("TRUe"));
+        assertEquals(true, BooleanUtils.toBoolean("TRuE"));
+        assertEquals(true, BooleanUtils.toBoolean("TRue"));
+        assertEquals(true, BooleanUtils.toBoolean("TrUE"));
+        assertEquals(true, BooleanUtils.toBoolean("TrUe"));
+        assertEquals(true, BooleanUtils.toBoolean("TruE"));
+        assertEquals(true, BooleanUtils.toBoolean("True"));
+        assertEquals(true, BooleanUtils.toBoolean("on"));
+        assertEquals(true, BooleanUtils.toBoolean("oN"));
+        assertEquals(true, BooleanUtils.toBoolean("On"));
         assertEquals(true, BooleanUtils.toBoolean("ON"));
+        assertEquals(true, BooleanUtils.toBoolean("yes"));
+        assertEquals(true, BooleanUtils.toBoolean("yeS"));
+        assertEquals(true, BooleanUtils.toBoolean("yEs"));
+        assertEquals(true, BooleanUtils.toBoolean("yES"));
+        assertEquals(true, BooleanUtils.toBoolean("Yes"));
+        assertEquals(true, BooleanUtils.toBoolean("YeS"));
+        assertEquals(true, BooleanUtils.toBoolean("YEs"));
         assertEquals(true, BooleanUtils.toBoolean("YES"));
-        assertEquals(true, BooleanUtils.toBoolean("TruE"));
     }
 
     public void test_toBoolean_String_String_String() {
