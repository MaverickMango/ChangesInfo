diff -r -u buggy/src/java/org/apache/commons/lang/BooleanUtils.java inducing/src/java/org/apache/commons/lang/BooleanUtils.java
--- buggy/src/java/org/apache/commons/lang/BooleanUtils.java	2023-06-12 11:34:39.198453412 +0800
+++ inducing/src/java/org/apache/commons/lang/BooleanUtils.java	2023-06-12 11:34:39.310455457 +0800
@@ -1,18 +1,55 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- * 
- *      http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2002-2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their names without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
  */
 package org.apache.commons.lang;
 
@@ -29,7 +66,7 @@
  * @author Matthew Hawthorne
  * @author Gary Gregory
  * @since 2.0
- * @version $Id$
+ * @version $Id: BooleanUtils.java,v 1.17 2003/10/21 23:23:06 scolebourne Exp $
  */
 public class BooleanUtils {
 
@@ -41,7 +78,6 @@
      * to operate.</p>
      */
     public BooleanUtils() {
-      super();
     }
 
     // Boolean utilities
@@ -70,85 +106,6 @@
     // boolean Boolean methods
     //-----------------------------------------------------------------------
     /**
-     * <p>Checks if a <code>Boolean</code> value is <code>true</code>,
-     * handling <code>null</code> by returning <code>false</code>.</p>
-     *
-     * <pre>
-     *   BooleanUtils.isTrue(Boolean.TRUE)  = true
-     *   BooleanUtils.isTrue(Boolean.FALSE) = false
-     *   BooleanUtils.isTrue(null)          = false
-     * </pre>
-     *
-     * @param bool  the boolean to check, null returns <code>false</code>
-     * @return <code>true</code> only if the input is non-null and true
-     * @since 2.1
-     */
-    public static boolean isTrue(Boolean bool) {
-        if (bool == null) {
-            return false;
-        }
-        return bool.booleanValue() ? true : false;
-    }
-
-    /**
-     * <p>Checks if a <code>Boolean</code> value is <i>not</i> <code>true</code>,
-     * handling <code>null</code> by returning <code>true</code>.</p>
-     *
-     * <pre>
-     *   BooleanUtils.isNotTrue(Boolean.TRUE)  = false
-     *   BooleanUtils.isNotTrue(Boolean.FALSE) = true
-     *   BooleanUtils.isNotTrue(null)          = true
-     * </pre>
-     *
-     * @param bool  the boolean to check, null returns <code>true</code>
-     * @return <code>true</code> if the input is null or false
-     * @since 2.3
-     */
-    public static boolean isNotTrue(Boolean bool) {
-        return !isTrue(bool);
-    }
-
-    /**
-     * <p>Checks if a <code>Boolean</code> value is <code>false</code>,
-     * handling <code>null</code> by returning <code>false</code>.</p>
-     *
-     * <pre>
-     *   BooleanUtils.isFalse(Boolean.TRUE)  = false
-     *   BooleanUtils.isFalse(Boolean.FALSE) = true
-     *   BooleanUtils.isFalse(null)          = false
-     * </pre>
-     *
-     * @param bool  the boolean to check, null returns <code>false</code>
-     * @return <code>true</code> only if the input is non-null and false
-     * @since 2.1
-     */
-    public static boolean isFalse(Boolean bool) {
-        if (bool == null) {
-            return false;
-        }
-        return bool.booleanValue() ? false : true;
-    }
-
-    /**
-     * <p>Checks if a <code>Boolean</code> value is <i>not</i> <code>false</code>,
-     * handling <code>null</code> by returning <code>true</code>.</p>
-     *
-     * <pre>
-     *   BooleanUtils.isNotFalse(Boolean.TRUE)  = true
-     *   BooleanUtils.isNotFalse(Boolean.FALSE) = false
-     *   BooleanUtils.isNotFalse(null)          = true
-     * </pre>
-     *
-     * @param bool  the boolean to check, null returns <code>true</code>
-     * @return <code>true</code> if the input is null or true
-     * @since 2.3
-     */
-    public static boolean isNotFalse(Boolean bool) {
-        return !isFalse(bool);
-    }
-
-    //-----------------------------------------------------------------------
-    /**
      * <p>Boolean factory that avoids creating new Boolean objecs all the time.</p>
      * 
      * <p>This method was added to JDK1.4 but is available here for earlier JDKs.</p>
@@ -162,7 +119,7 @@
      * @return Boolean.TRUE or Boolean.FALSE as appropriate
      */
     public static Boolean toBooleanObject(boolean bool) {
-        return bool ? Boolean.TRUE : Boolean.FALSE;
+        return (bool ? Boolean.TRUE : Boolean.FALSE);
     }
     
     /**
@@ -183,7 +140,7 @@
         if (bool == null) {
             return false;
         }
-        return bool.booleanValue() ? true : false;
+        return (bool.booleanValue() ? true : false);
     }
     
     /**
@@ -203,7 +160,7 @@
         if (bool == null) {
             return valueIfNull;
         }
-        return bool.booleanValue() ? true : false;
+        return (bool.booleanValue() ? true : false);
     }
     
     // Integer to Boolean methods
@@ -223,7 +180,7 @@
      *  if zero
      */
     public static boolean toBoolean(int value) {
-        return value == 0 ? false : true;
+        return (value == 0 ? false : true);
     }
     
     /**
@@ -241,7 +198,7 @@
      *  <code>null</code> if <code>null</code>
      */
     public static Boolean toBooleanObject(int value) {
-        return value == 0 ? Boolean.FALSE : Boolean.TRUE;
+        return (value == 0 ? Boolean.FALSE : Boolean.TRUE);
     }
     
     /**
@@ -264,7 +221,7 @@
         if (value == null) {
             return null;
         }
-        return value.intValue() == 0 ? Boolean.FALSE : Boolean.TRUE;
+        return (value.intValue() == 0 ? Boolean.FALSE : Boolean.TRUE);
     }
     
     /**
@@ -410,7 +367,7 @@
      * @return one if <code>true</code>, zero if <code>false</code>
      */
     public static int toInteger(boolean bool) {
-        return bool ? 1 : 0;
+        return (bool ? 1 : 0);
     }
     
     /**
@@ -426,7 +383,7 @@
      * @return one if <code>true</code>, zero if <code>false</code>
      */
     public static Integer toIntegerObject(boolean bool) {
-        return bool ? NumberUtils.INTEGER_ONE : NumberUtils.INTEGER_ZERO;
+        return (bool ? NumberUtils.INTEGER_ONE : NumberUtils.INTEGER_ZERO);
     }
     
     /**
@@ -447,7 +404,7 @@
         if (bool == null) {
             return null;
         }
-        return bool.booleanValue() ? NumberUtils.INTEGER_ONE : NumberUtils.INTEGER_ZERO;
+        return (bool.booleanValue() ? NumberUtils.INTEGER_ONE : NumberUtils.INTEGER_ZERO);
     }
     
     /**
@@ -464,7 +421,7 @@
      * @return the appropriate value
      */
     public static int toInteger(boolean bool, int trueValue, int falseValue) {
-        return bool ? trueValue : falseValue;
+        return (bool ? trueValue : falseValue);
     }
     
     /**
@@ -486,7 +443,7 @@
         if (bool == null) {
             return nullValue;
         }
-        return bool.booleanValue() ? trueValue : falseValue;
+        return (bool.booleanValue() ? trueValue : falseValue);
     }
     
     /**
@@ -505,7 +462,7 @@
      * @return the appropriate value
      */
     public static Integer toIntegerObject(boolean bool, Integer trueValue, Integer falseValue) {
-        return bool ? trueValue : falseValue;
+        return (bool ? trueValue : falseValue);
     }
     
     /**
@@ -530,7 +487,7 @@
         if (bool == null) {
             return nullValue;
         }
-        return bool.booleanValue() ? trueValue : falseValue;
+        return (bool.booleanValue() ? trueValue : falseValue);
     }
     
     // String to Boolean methods
@@ -594,10 +551,7 @@
      * @param nullString  the String to match for <code>null</code>
      *  (case sensitive), may be <code>null</code>
      * @return the Boolean value of the string,
-     *  <code>null</code> if either the String matches <code>nullString</code>
-     *  or if <code>null</code> input and <code>nullString</code> is
-     *  <code>null</code>
-     * @throws IllegalArgumentException if the String doesn't match
+     *  <code>null</code> if no match or <code>null</code> input
      */
     public static Boolean toBooleanObject(String str, String trueString, String falseString, String nullString) {
         if (str == null) {
@@ -822,7 +776,7 @@
         if (bool == null) {
             return nullString;
         }
-        return bool.booleanValue() ? trueString : falseString;
+        return (bool.booleanValue() ? trueString : falseString);
     }
     
     // boolean to String methods
@@ -894,7 +848,7 @@
      * @return one of the two input Strings
      */
     public static String toString(boolean bool, String trueString, String falseString) {
-        return bool ? trueString : falseString;
+        return (bool ? trueString : falseString);
     }
     
     // xor methods
@@ -966,7 +920,7 @@
         } catch (NullPointerException ex) {
             throw new IllegalArgumentException("The array must not contain any null elements");
         }
-        return xor(primitive) ? Boolean.TRUE : Boolean.FALSE;
+        return (xor(primitive) ? Boolean.TRUE : Boolean.FALSE);
     }
 
 }
diff -r -u buggy/src/test/org/apache/commons/lang/BooleanUtilsTest.java inducing/src/test/org/apache/commons/lang/BooleanUtilsTest.java
--- buggy/src/test/org/apache/commons/lang/BooleanUtilsTest.java	2023-06-12 11:34:39.210453632 +0800
+++ inducing/src/test/org/apache/commons/lang/BooleanUtilsTest.java	2023-06-12 11:34:39.322455677 +0800
@@ -1,18 +1,55 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- * 
- *      http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2002-2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their names without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
  */
 package org.apache.commons.lang;
 
@@ -29,7 +66,7 @@
  *
  * @author Stephen Colebourne
  * @author Matthew Hawthorne
- * @version $Id$
+ * @version $Id: BooleanUtilsTest.java,v 1.8 2003/10/21 23:23:06 scolebourne Exp $
  */
 public class BooleanUtilsTest extends TestCase {
 
@@ -42,8 +79,8 @@
     }
 
     public static Test suite() {
-        TestSuite suite = new TestSuite(BooleanUtilsTest.class);
-        suite.setName("BooleanUtils Tests");
+    	TestSuite suite = new TestSuite(BooleanUtilsTest.class);
+    	suite.setName("BooleanUtils Tests");
         return suite;
     }
 
@@ -73,32 +110,6 @@
     }
 
     //-----------------------------------------------------------------------
-    public void test_isTrue_Boolean() {
-        assertEquals(true, BooleanUtils.isTrue(Boolean.TRUE));
-        assertEquals(false, BooleanUtils.isTrue(Boolean.FALSE));
-        assertEquals(false, BooleanUtils.isTrue((Boolean) null));
-    }
-
-    public void test_isNotTrue_Boolean() {
-        assertEquals(false, BooleanUtils.isNotTrue(Boolean.TRUE));
-        assertEquals(true, BooleanUtils.isNotTrue(Boolean.FALSE));
-        assertEquals(true, BooleanUtils.isNotTrue((Boolean) null));
-    }
-
-    //-----------------------------------------------------------------------
-    public void test_isFalse_Boolean() {
-        assertEquals(false, BooleanUtils.isFalse(Boolean.TRUE));
-        assertEquals(true, BooleanUtils.isFalse(Boolean.FALSE));
-        assertEquals(false, BooleanUtils.isFalse((Boolean) null));
-    }
-
-    public void test_isNotFalse_Boolean() {
-        assertEquals(true, BooleanUtils.isNotFalse(Boolean.TRUE));
-        assertEquals(false, BooleanUtils.isNotFalse(Boolean.FALSE));
-        assertEquals(true, BooleanUtils.isNotFalse((Boolean) null));
-    }
-
-    //-----------------------------------------------------------------------
     public void test_toBooleanObject_boolean() {
         assertSame(Boolean.TRUE, BooleanUtils.toBooleanObject(true));
         assertSame(Boolean.FALSE, BooleanUtils.toBooleanObject(false));
