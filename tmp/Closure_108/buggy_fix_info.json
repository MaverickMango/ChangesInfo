{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "data/changesInfo/",
  "properties": {
    "trigger.tests": "com.google.javascript.jscomp.ScopedAliasesTest::testIssue1144",
    "test.dir": "test",
    "clz.modified": "com.google.javascript.jscomp.ScopedAliases",
    "src.dir": "src"
  },
  "timeoutSecond": 100,
  "proj": "Closure",
  "id": "108",
  "workingDir": "../bugs/Closure_108_tmp",
  "bug_name": "Closure_108",
  "derive": "defects4j",
  "trigger_tests": [
    {
      "test_class": "com.google.javascript.jscomp.ScopedAliasesTest",
      "test_function": "testIssue1144",
      "assertion_line": "570",
      "exception": "java.lang.IllegalStateException",
      "message": ""
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/jscomp/ScopedAliases.java",
        "src/com/google/javascript/jscomp/ScopedAliases.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "com.google.javascript.jscomp.ScopedAliases\\$Traversal:findAliases:[NodeTraversal t]:void",
            "com.google.javascript.jscomp.ScopedAliases\\$Traversal:visit:[NodeTraversal t, Node n, Node parent]:void",
            "com.google.javascript.jscomp.ScopedAliases\\$Traversal:exitScope:[NodeTraversal t]:void"
          ],
          "num": 3
        },
        {
          "qualified_names": [
            "com.google.javascript.jscomp.ScopedAliases\\$Traversal:exitScope:[NodeTraversal t]:void",
            "com.google.javascript.jscomp.ScopedAliases\\$Traversal:findAliases:[NodeTraversal t]:void",
            "com.google.javascript.jscomp.ScopedAliases\\$Traversal:visit:[NodeTraversal t, Node n, Node parent]:void"
          ],
          "num": 3
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "259",
            "317",
            "434",
            "584"
          ],
          "num": 4
        },
        {
          "qualified_names": [
            "258",
            "317",
            "435",
            "581"
          ],
          "num": 4
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/jscomp/ScopedAliases.java b/src/com/google/javascript/jscomp/ScopedAliases.java\nindex b2a1690..1e22c9e 100644\n--- a/src/com/google/javascript/jscomp/ScopedAliases.java\n+++ b/src/com/google/javascript/jscomp/ScopedAliases.java\n@@ -256,7 +256,6 @@\n     private final Map\u003cString, Var\u003e aliases \u003d Maps.newHashMap();\n \n     // Also temporary and cleared for each scope.\n-    private final Set\u003cNode\u003e injectedDecls \u003d Sets.newHashSet();\n \n     // Suppose you create an alias.\n     // var x \u003d goog.x;\n@@ -314,7 +313,6 @@\n \n       if (t.getScopeDepth() \u003d\u003d 2) {\n         renameNamespaceShadows(t);\n-        injectedDecls.clear();\n         aliases.clear();\n         forbiddenLocals.clear();\n         transformation \u003d null;\n@@ -431,7 +429,6 @@\n             } else {\n               grandparent.addChildBefore(newDecl, varNode);\n             }\n-            injectedDecls.add(newDecl.getFirstChild());\n           }\n \n           // Rewrite \"var name \u003d EXPR;\" to \"var name \u003d $jscomp.scope.name;\"\n@@ -581,7 +578,7 @@\n         // When we inject declarations, we duplicate jsdoc. Make sure\n         // we only process that jsdoc once.\n         JSDocInfo info \u003d n.getJSDocInfo();\n-        if (info !\u003d null \u0026\u0026 !injectedDecls.contains(n)) {\n+        if (info !\u003d null) {\n           for (Node node : info.getTypeNodes()) {\n             fixTypeNode(node);\n           }\n",
      "operations": [
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "FieldDeclaration [9051,9109]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [10828,10850]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [15504,15547]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "INFIX_EXPRESSION_OPERATOR: \u0026\u0026 [20701,20703]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "PrefixExpression [20704,20730]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "InfixExpression [20688,20730]",
          "to": ""
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  }
}