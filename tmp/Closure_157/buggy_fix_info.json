{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "data/changesInfo/",
  "properties": {
    "trigger.tests": "com.google.javascript.jscomp.CodePrinterTest::testObjectLit2,com.google.javascript.jscomp.CodePrinterTest::testObjectLit3,com.google.javascript.jscomp.CodePrinterTest::testGetter,com.google.javascript.jscomp.CodePrinterTest::testSetter,com.google.javascript.jscomp.FunctionNamesTest::testFunctionsNamesAndIds,com.google.javascript.jscomp.RenamePropertiesTest::testPrototypePropertiesAsObjLitKeys2,com.google.javascript.jscomp.RenamePropertiesTest::testPrototypePropertiesAsObjLitKeys3,com.google.javascript.jscomp.SimpleDefinitionFinderTest::testDefineNumber,com.google.javascript.jscomp.parsing.IRFactoryTest::testObjectLiteral6,com.google.javascript.jscomp.parsing.IRFactoryTest::testObjectLiteral7,com.google.javascript.jscomp.parsing.IRFactoryTest::testObjectLiteral8,com.google.javascript.jscomp.parsing.ParserTest::testObjectLiteralDoc1",
    "test.dir": "test",
    "clz.modified": "com.google.javascript.jscomp.CodeGenerator,com.google.javascript.jscomp.parsing.IRFactory,com.google.javascript.jscomp.RenamePrototypes",
    "src.dir": "src"
  },
  "timeoutSecond": 100,
  "proj": "Closure",
  "id": "157",
  "workingDir": "../bugs/Closure_157_tmp",
  "bug_name": "Closure_157",
  "derive": "defects4j",
  "trigger_tests": [
    {
      "test_class": "com.google.javascript.jscomp.CodePrinterTest",
      "test_function": "testObjectLit2",
      "assertion_line": "1127",
      "exception": "junit.framework.ComparisonFailure",
      "message": "expected:\u003cvar x\u003d{[1]:1}\u003e but was:\u003cvar x\u003d{[\"1\"]:1}\u003e"
    },
    {
      "test_class": "com.google.javascript.jscomp.CodePrinterTest",
      "test_function": "testObjectLit3",
      "assertion_line": "1136",
      "exception": "junit.framework.ComparisonFailure",
      "message": "expected:\u003cvar x\u003d{[3E9]:1}\u003e but was:\u003cvar x\u003d{[\"3000000000\"]:1}\u003e"
    },
    {
      "test_class": "com.google.javascript.jscomp.CodePrinterTest",
      "test_function": "testGetter",
      "assertion_line": "1153",
      "exception": "junit.framework.ComparisonFailure",
      "message": "expected:\u003cvar x\u003d{get [\"a\"](){return 1}}\u003e but was:\u003cvar x\u003d{get [a](){return 1}}\u003e"
    },
    {
      "test_class": "com.google.javascript.jscomp.CodePrinterTest",
      "test_function": "testSetter",
      "assertion_line": "1172",
      "exception": "junit.framework.ComparisonFailure",
      "message": "expected:\u003cvar x\u003d{get [\"a\"](){return 1}}\u003e but was:\u003cvar x\u003d{get [a](){return 1}}\u003e"
    },
    {
      "test_class": "com.google.javascript.jscomp.FunctionNamesTest",
      "test_function": "testFunctionsNamesAndIds",
      "assertion_line": "91",
      "exception": "junit.framework.AssertionFailedError",
      "message": "Function id/name mismatch expected:\u003c{0\u003dgoog.widget.member_fn, 1\u003dgoog.widget::local_fn, 2\u003dgoog.widget::\u003canonymous\u003e, 3\u003dgoog.widget, 4\u003dfoo::bar, 5\u003dfoo, 6\u003dliteral.f1, 7\u003dliteral.f2, 8\u003dnamed, 9\u003d\u003canonymous\u003e, 10\u003dquax, 11\u003drecliteral.l1.l2, 12\u003dlitnamed, 13\u003dreclitnamed, 14\u003dnumliteral.__2, 15\u003drecnumliteral.__3.a}\u003e but was:\u003c{0\u003dgoog.widget.member_fn, 1\u003dgoog.widget::local_fn, 2\u003dgoog.widget::\u003canonymous\u003e, 3\u003dgoog.widget, 4\u003dfoo::bar, 5\u003dfoo, 6\u003dliteral.f1, 7\u003dliteral.f2, 8\u003dnamed, 9\u003d\u003canonymous\u003e, 10\u003dquax, 11\u003drecliteral.l1.l2, 12\u003dlitnamed, 13\u003dreclitnamed, 14\u003d\u003canonymous\u003e, 15\u003d\u003canonymous\u003e}\u003e"
    },
    {
      "test_class": "com.google.javascript.jscomp.RenamePropertiesTest",
      "test_function": "testPrototypePropertiesAsObjLitKeys2",
      "assertion_line": "71",
      "exception": "java.lang.RuntimeException",
      "message": "INTERNAL COMPILER ERROR."
    },
    {
      "test_class": "com.google.javascript.jscomp.RenamePropertiesTest",
      "test_function": "testPrototypePropertiesAsObjLitKeys3",
      "assertion_line": "80",
      "exception": "java.lang.RuntimeException",
      "message": "INTERNAL COMPILER ERROR."
    },
    {
      "test_class": "com.google.javascript.jscomp.SimpleDefinitionFinderTest",
      "test_function": "testDefineNumber",
      "assertion_line": "327",
      "exception": "junit.framework.AssertionFailedError",
      "message": "expected:\u003c[DEF STRING null -\u003e NUMBER]\u003e but was:\u003c[]\u003e"
    },
    {
      "test_class": "com.google.javascript.jscomp.parsing.IRFactoryTest",
      "test_function": "testObjectLiteral6",
      "assertion_line": "1134",
      "exception": "junit.framework.ComparisonFailure",
      "message": "expected:\u003c...: true]"
    },
    {
      "test_class": "com.google.javascript.jscomp.parsing.IRFactoryTest",
      "test_function": "testObjectLiteral7",
      "assertion_line": "1134",
      "exception": "junit.framework.ComparisonFailure",
      "message": "expected:\u003c...ue]"
    },
    {
      "test_class": "com.google.javascript.jscomp.parsing.IRFactoryTest",
      "test_function": "testObjectLiteral8",
      "assertion_line": "1134",
      "exception": "junit.framework.ComparisonFailure",
      "message": "expected:\u003c...ue]"
    },
    {
      "test_class": "com.google.javascript.jscomp.parsing.ParserTest",
      "test_function": "testObjectLiteralDoc1",
      "assertion_line": "740",
      "exception": "junit.framework.AssertionFailedError",
      "message": "expected:\u003c40\u003e but was:\u003c39\u003e"
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/jscomp/CodeGenerator.java",
        "src/com/google/javascript/jscomp/CodeGenerator.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "com.google.javascript.jscomp.CodeGenerator:isSimpleNumber:[String s]:boolean",
            "com.google.javascript.jscomp.CodeGenerator:add:[Node n, Context context]:void",
            "com.google.javascript.jscomp.CodeGenerator:getSimpleNumber:[String s]:double"
          ],
          "num": 3
        },
        {
          "qualified_names": [
            "com.google.javascript.jscomp.CodeGenerator:addNonEmptyStatement:[Node n, Context context, boolean allowNonBlockChild]:void",
            "com.google.javascript.jscomp.CodeGenerator:add:[Node n, Context context]:void"
          ],
          "num": 2
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "343",
            "344",
            "351",
            "352",
            "353",
            "354",
            "355",
            "356",
            "660",
            "661",
            "664",
            "665",
            "666",
            "669",
            "670",
            "673",
            "674",
            "675",
            "676",
            "677",
            "678",
            "736",
            "737",
            "738",
            "739",
            "740",
            "741",
            "742",
            "743",
            "744",
            "745",
            "747",
            "748",
            "749",
            "750",
            "751",
            "752",
            "753",
            "754",
            "755"
          ],
          "num": 40
        },
        {
          "qualified_names": [
            "343",
            "350",
            "656",
            "657",
            "658",
            "659",
            "662",
            "663",
            "666",
            "747"
          ],
          "num": 10
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 593ec05..142e820 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -340,20 +340,14 @@\n         Node body \u003d fn.getLastChild();\n \n         // Add the property name.\n-        if (!n.isQuotedString() \u0026\u0026\n-            TokenStream.isJSIdentifier(name) \u0026\u0026\n+        if (TokenStream.isJSIdentifier(name) \u0026\u0026\n             // do not encode literally any non-literal characters that were\n             // unicode escaped.\n             NodeUtil.isLatin(name)) {\n           add(name);\n         } else {\n           // Determine if the string is a simple number.\n-          double d \u003d getSimpleNumber(name);\n-          if (!Double.isNaN(d)) {\n-            cc.addNumber(d);\n-          } else {\n-            add(jsString(n.getString(), outputCharsetEncoder));\n-          }\n+          add(jsString(n.getString(), outputCharsetEncoder));\n         }\n \n         add(parameters);\n@@ -657,25 +651,19 @@\n           if (c.getType() \u003d\u003d Token.GET || c.getType() \u003d\u003d Token.SET) {\n             add(c);\n           } else {\n-            Preconditions.checkState(c.getType() \u003d\u003d Token.STRING);\n-            String key \u003d c.getString();\n             // Object literal property names don\u0027t have to be quoted if they\n             // are not JavaScript keywords\n-            if (!c.isQuotedString() \u0026\u0026\n-                !TokenStream.isKeyword(key) \u0026\u0026\n-                TokenStream.isJSIdentifier(key) \u0026\u0026\n+            if (c.getType() \u003d\u003d Token.STRING \u0026\u0026\n+                !c.isQuotedString() \u0026\u0026\n+                !TokenStream.isKeyword(c.getString()) \u0026\u0026\n+                TokenStream.isJSIdentifier(c.getString()) \u0026\u0026\n                 // do not encode literally any non-literal characters that\n                 // were unicode escaped.\n-                NodeUtil.isLatin(key)) {\n-              add(key);\n+                NodeUtil.isLatin(c.getString())) {\n+              add(c.getString());\n             } else {\n               // Determine if the string is a simple number.\n-              double d \u003d getSimpleNumber(key);\n-              if (!Double.isNaN(d)) {\n-                cc.addNumber(d);\n-              } else {\n-                addExpr(c, 1);\n-              }\n+              addExpr(c, 1);\n             }\n             add(\":\");\n             addExpr(c.getFirstChild(), 1);\n@@ -733,26 +721,7 @@\n     cc.endSourceMapping(n);\n   }\n \n-  static boolean isSimpleNumber(String s) {\n-    int len \u003d s.length();\n-    for (int index \u003d 0; index \u003c len; index++) {\n-      char c \u003d s.charAt(index);\n-      if (c \u003c \u00270\u0027 || c \u003e \u00279\u0027) {\n-        return false;\n-      }\n-    }\n-    return len \u003e 0;\n-  }\n \n-  static double getSimpleNumber(String s) {\n-    if (isSimpleNumber(s)) {\n-      long l \u003d Long.parseLong(s);\n-      if (l \u003c NodeUtil.MAX_POSITIVE_INTEGER_NUMBER) {\n-        return l;\n-      }\n-    }\n-    return Double.NaN;\n-  }\n \n   /**\n    * @return Whether the name is an indirect eval.\n",
      "operations": [
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodInvocation [12047,12062]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "InfixExpression [19776,20127]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "InfixExpression [19776,19960]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "INFIX_EXPRESSION_OPERATOR: \u0026\u0026 [19961,19963]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodInvocation [20096,20127]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "ExpressionStatement [20145,20164]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "InfixExpression [19776,19899]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "INFIX_EXPRESSION_OPERATOR: \u0026\u0026 [19900,19902]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodInvocation [19919,19960]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "MethodInvocation [20145,20163]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "InfixExpression [19776,19842]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "INFIX_EXPRESSION_OPERATOR: \u0026\u0026 [19843,19845]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "PrefixExpression [19862,19899]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: add [20145,20148]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "METHOD_INVOCATION_ARGUMENTS [20149,20162]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodInvocation [19863,19899]"
        },
        {
          "type": "delete-node",
          "from": "SimpleName: key [20354,20357]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "PrefixExpression [10065,10084]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [10387,10420]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "PrefixExpression [10435,10451]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Block [10453,10495]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Block [10501,10578]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "IfStatement [10431,10578]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "METHOD_INVOCATION_RECEIVER [10467,10469]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: d [10480,10481]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodInvocation [20508,20523]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "PrefixExpression [20507,20523]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [20543,20559]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [19827,19881]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [19894,19900]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: key [19901,19904]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "VariableDeclarationFragment [19901,19920]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "VariableDeclarationStatement [19894,19921]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "InfixExpression [20058,20332]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Block [20334,20373]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [20456,20488]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Block [20379,20643]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "IfStatement [20054,20643]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [22005,22244]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [22248,22465]",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/jscomp/RenamePrototypes.java",
        "src/com/google/javascript/jscomp/RenamePrototypes.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "com.google.javascript.jscomp.RenamePrototypes\\$ProcessProperties:processPrototypeParent:[Node n, CompilerInput input]:void",
            "com.google.javascript.jscomp.RenamePrototypes\\$ProcessProperties:visit:[NodeTraversal t, Node n, Node parent]:void"
          ],
          "num": 2
        },
        {
          "qualified_names": [
            "com.google.javascript.jscomp.RenamePrototypes\\$ProcessProperties:processPrototypeParent:[Node n, CompilerInput input]:void",
            "com.google.javascript.jscomp.RenamePrototypes\\$ProcessProperties:visit:[NodeTraversal t, Node n, Node parent]:void"
          ],
          "num": 2
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "336",
            "377"
          ],
          "num": 2
        },
        {
          "qualified_names": [
            "336",
            "377"
          ],
          "num": 2
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/jscomp/RenamePrototypes.java b/src/com/google/javascript/jscomp/RenamePrototypes.java\nindex d7558d0..304c0e1 100644\n--- a/src/com/google/javascript/jscomp/RenamePrototypes.java\n+++ b/src/com/google/javascript/jscomp/RenamePrototypes.java\n@@ -333,7 +333,7 @@\n                  child !\u003d null;\n                  child \u003d child.getNext()) {\n \n-              if (TokenStream.isJSIdentifier(child.getString())) {\n+              if (child.getType() !\u003d Token.NUMBER) {\n                 markObjLitPropertyCandidate(child, t.getInput());\n               }\n             }\n@@ -374,7 +374,7 @@\n \n             for (Node key \u003d map.getFirstChild();\n                  key !\u003d null; key \u003d key.getNext()) {\n-              if (TokenStream.isJSIdentifier(key.getString())) {\n+              if (key.getType() !\u003d Token.NUMBER) {\n                // May be STRING, GET, or SET\n                 markPrototypePropertyCandidate(key, input);\n               }\n",
      "operations": [
        {
          "type": "insert-node",
          "from": "",
          "to": "InfixExpression [11151,11182]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "InfixExpression [12560,12589]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "INFIX_EXPRESSION_OPERATOR: !\u003d [11167,11169]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "QualifiedName: Token.NUMBER [11170,11182]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "INFIX_EXPRESSION_OPERATOR: !\u003d [12574,12576]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "QualifiedName: Token.NUMBER [12577,12589]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "METHOD_INVOCATION_RECEIVER [11151,11162]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: isJSIdentifier [11163,11177]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "METHOD_INVOCATION_ARGUMENTS [11178,11195]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "MethodInvocation [11151,11196]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "METHOD_INVOCATION_RECEIVER [12574,12585]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: isJSIdentifier [12586,12600]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "METHOD_INVOCATION_ARGUMENTS [12601,12616]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "MethodInvocation [12574,12617]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "src/com/google/javascript/jscomp/parsing/IRFactory.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "com.google.javascript.jscomp.parsing.IRFactory:transformNumberAsString:[NumberLiteral literalNode]:Node",
            "com.google.javascript.jscomp.parsing.IRFactory\\$TransformDispatcher:transformAsString:[AstNode n]:Node",
            "com.google.javascript.jscomp.parsing.IRFactory:getStringValue:[double value]:String"
          ],
          "num": 3
        },
        {
          "qualified_names": [
            "com.google.javascript.jscomp.parsing.IRFactory\\$TransformDispatcher:transformAsString:[AstNode n]:Node"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "255",
            "256",
            "257",
            "258",
            "259",
            "260",
            "261",
            "262",
            "263",
            "265",
            "266",
            "269",
            "270",
            "271",
            "272",
            "273",
            "274",
            "364",
            "365",
            "366",
            "371"
          ],
          "num": 21
        },
        {
          "qualified_names": [
            "254",
            "349",
            "350",
            "351",
            "353"
          ],
          "num": 5
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 3d1db67..dcc3def 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -252,26 +252,9 @@\n     return irNode;\n   }\n \n-  private Node transformNumberAsString(NumberLiteral literalNode) {\n-    JSDocInfo jsDocInfo \u003d handleJsDoc(literalNode);\n-    Node irNode \u003d newStringNode(getStringValue(literalNode.getNumber()));\n-    if (jsDocInfo !\u003d null) {\n-      irNode.setJSDocInfo(jsDocInfo);\n-    }\n-    setSourceInfo(irNode, literalNode);\n-    return irNode;\n-  }\n \n-  private static String getStringValue(double value) {\n-    long longValue \u003d (long) value;\n \n     // Return \"1\" instead of \"1.0\"\n-    if (longValue \u003d\u003d value) {\n-      return Long.toString(longValue);\n-    } else {\n-      return Double.toString(value);\n-    }\n-  }\n \n   private void setSourceInfo(Node irNode, AstNode node) {\n     // If we have a named function, set the position to that of the name.\n@@ -361,14 +344,14 @@\n       Node ret;\n       if (n instanceof Name) {\n         ret \u003d transformNameAsString((Name)n);\n-      } else if (n instanceof NumberLiteral) {\n-        ret \u003d transformNumberAsString((NumberLiteral)n);\n-        ret.putBooleanProp(Node.QUOTED_PROP, true);\n       } else {\n         ret \u003d transform(n);\n+        Preconditions.checkState(ret.getType() \u003d\u003d Token.NUMBER\n+            || ret.getType() \u003d\u003d Token.STRING);\n+        if (ret.getType() \u003d\u003d Token.STRING) {\n         ret.putBooleanProp(Node.QUOTED_PROP, true);\n+        }\n       }\n-      Preconditions.checkState(ret.getType() \u003d\u003d Token.STRING);\n       return ret;\n     }\n \n",
      "operations": [
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "IfStatement [13761,13859]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "InfixExpression [13765,13794]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "InfixExpression [13676,13750]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "InfixExpression [13676,13705]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "INFIX_EXPRESSION_OPERATOR: || [13718,13720]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [10190,10517]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [10521,10773]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [14204,14252]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [14356,14399]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "InstanceofExpression [14166,14192]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "IfStatement [14162,14407]",
          "to": ""
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [
        "com.google.javascript.jscomp.CodeGenerator:addNonEmptyStatement:[Node n, Context context, boolean allowNonBlockChild]:void"
      ],
      "num": 1
    },
    "delete_functions": {
      "qualified_names": [
        "com.google.javascript.jscomp.CodeGenerator:isSimpleNumber:[String s]:boolean",
        "com.google.javascript.jscomp.parsing.IRFactory:getStringValue:[double value]:String",
        "com.google.javascript.jscomp.CodeGenerator:getSimpleNumber:[String s]:double",
        "com.google.javascript.jscomp.parsing.IRFactory:transformNumberAsString:[NumberLiteral literalNode]:Node"
      ],
      "num": 4
    }
  }
}