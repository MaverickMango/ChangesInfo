{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "data/changesInfo/",
  "properties": {
    "trigger.tests": "com.fasterxml.jackson.databind.jsontype.TestTypeNames::testBaseTypeId1616",
    "test.dir": "src/test/java",
    "clz.modified": "com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver",
    "src.dir": "src/main/java"
  },
  "timeoutSecond": 100,
  "proj": "JacksonDatabind",
  "id": "80",
  "workingDir": "../bugs/JacksonDatabind_80_tmp",
  "bug_name": "JacksonDatabind_80",
  "derive": "defects4j",
  "trigger_tests": [
    {
      "test_class": "com.fasterxml.jackson.databind.jsontype.TestTypeNames",
      "test_function": "testBaseTypeId1616",
      "assertion_line": "47",
      "exception": "java.lang.NullPointerException",
      "message": ""
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/com/fasterxml/jackson/databind/jsontype/impl/StdSubtypeResolver.java",
        "src/main/java/com/fasterxml/jackson/databind/jsontype/impl/StdSubtypeResolver.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver:collectAndResolveSubtypesByTypeId:[MapperConfig\u003c?\u003e config, AnnotatedMember property, JavaType baseType]:Collection\u003cNamedType\u003e",
            "com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver:collectAndResolveSubtypesByClass:[MapperConfig\u003c?\u003e config, AnnotatedMember property, JavaType baseType]:Collection\u003cNamedType\u003e"
          ],
          "num": 2
        },
        {
          "qualified_names": [
            "com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver:collectAndResolveSubtypesByClass:[MapperConfig\u003c?\u003e config, AnnotatedMember property, JavaType baseType]:Collection\u003cNamedType\u003e",
            "com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver:collectAndResolveSubtypesByTypeId:[MapperConfig\u003c?\u003e config, AnnotatedMember property, JavaType baseType]:Collection\u003cNamedType\u003e"
          ],
          "num": 2
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "79",
            "87",
            "147",
            "154"
          ],
          "num": 4
        },
        {
          "qualified_names": [
            "78",
            "87",
            "148"
          ],
          "num": 3
        }
      ],
      "diff": "diff --git a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/StdSubtypeResolver.java b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/StdSubtypeResolver.java\nindex 9cb8bec..a12a878 100644\n--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/StdSubtypeResolver.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/StdSubtypeResolver.java\n@@ -76,7 +76,6 @@\n         }\n         \n         // then annotated types for property itself\n-        if (property !\u003d null) {\n             Collection\u003cNamedType\u003e st \u003d ai.findSubtypes(property);\n             if (st !\u003d null) {\n                 for (NamedType nt : st) {\n@@ -84,7 +83,6 @@\n                             nt.getType());\n                     _collectAndResolve(ac, nt, config, ai, collected);\n                 }            \n-            }\n         }\n \n         NamedType rootType \u003d new NamedType(rawBase, null);\n@@ -144,14 +142,12 @@\n         _collectAndResolveByTypeId(ac, rootType, config, typesHandled, byName);\n         \n         // then with definitions from property\n-        if (property !\u003d null) {\n             Collection\u003cNamedType\u003e st \u003d ai.findSubtypes(property);\n             if (st !\u003d null) {\n                 for (NamedType nt : st) {\n                     ac \u003d AnnotatedClassResolver.resolveWithoutSuperTypes(config, nt.getType());\n                     _collectAndResolveByTypeId(ac, nt, config, typesHandled, byName);\n                 }            \n-            }\n         }\n         // and finally explicit type registrations (highest precedence)\n         if (_registeredSubtypes !\u003d null) {\n",
      "operations": [
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "InfixExpression [2834,2850]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Block [2852,3255]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "IfStatement [2830,3255]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "InfixExpression [5939,5955]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Block [5957,6332]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "IfStatement [5935,6332]",
          "to": ""
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  }
}