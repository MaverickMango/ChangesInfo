{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "data/changesInfo/",
  "properties": {
    "trigger.tests": "com.google.javascript.jscomp.IntegrationTest::testIncompleteFunction",
    "test.dir": "test",
    "clz.modified": "com.google.javascript.jscomp.NodeTraversal,com.google.javascript.jscomp.parsing.IRFactory",
    "src.dir": "src"
  },
  "timeoutSecond": 100,
  "proj": "Closure",
  "id": "37",
  "workingDir": "../bugs/Closure_37_tmp",
  "bug_name": "Closure_37",
  "derive": "defects4j",
  "trigger_tests": [
    {
      "test_class": "com.google.javascript.jscomp.IntegrationTest",
      "test_function": "testIncompleteFunction",
      "assertion_line": "1945",
      "exception": "java.lang.RuntimeException",
      "message": "java.lang.RuntimeException: INTERNAL COMPILER ERROR."
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/jscomp/NodeTraversal.java",
        "src/com/google/javascript/jscomp/NodeTraversal.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "com.google.javascript.jscomp.NodeTraversal:traverseFunction:[Node n, Node parent]:void"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "com.google.javascript.jscomp.NodeTraversal:traverseFunction:[Node n, Node parent]:void"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "541"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "541"
          ],
          "num": 1
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/jscomp/NodeTraversal.java b/src/com/google/javascript/jscomp/NodeTraversal.java\nindex 435b4a8..8201b41 100644\n--- a/src/com/google/javascript/jscomp/NodeTraversal.java\n+++ b/src/com/google/javascript/jscomp/NodeTraversal.java\n@@ -538,7 +538,7 @@\n \n     // Body\n     Preconditions.checkState(body.getNext() \u003d\u003d null \u0026\u0026\n-            body.isBlock(), body);\n+            body.isBlock());\n     traverseBranch(body, n);\n \n     popScope();\n",
      "operations": [
        {
          "type": "delete-node",
          "from": "SimpleName: body [15439,15443]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "src/com/google/javascript/jscomp/parsing/IRFactory.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "com.google.javascript.jscomp.parsing.IRFactory\\$TransformDispatcher:processFunctionNode:[FunctionNode functionNode]:Node"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "com.google.javascript.jscomp.parsing.IRFactory\\$TransformDispatcher:processFunctionNode:[FunctionNode functionNode]:Node"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "667",
            "671",
            "672",
            "673"
          ],
          "num": 4
        },
        {
          "qualified_names": [
            "666"
          ],
          "num": 1
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 26cbc19..4da4085 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -664,13 +664,9 @@\n       node.addChildToBack(lp);\n \n       Node bodyNode \u003d transform(functionNode.getBody());\n-      if (!bodyNode.isBlock()) {\n         // When in ideMode Rhino tries to parse some constructs the compiler\n         // doesn\u0027t support, repair it here. see Rhino\u0027s\n         // Parser#parseFunctionBodyExpr.\n-        Preconditions.checkState(config.isIdeMode);\n-        bodyNode \u003d IR.block();\n-      }\n       parseDirectives(bodyNode);\n       node.addChildToBack(bodyNode);\n      return node;\n",
      "operations": [
        {
          "type": "delete-tree",
          "from": "IfStatement [23759,24050]",
          "to": ""
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  }
}