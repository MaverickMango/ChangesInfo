{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "data/changesInfo/",
  "properties": {
    "trigger.tests": "com.google.javascript.jscomp.parsing.ParserTest::testSuspiciousBlockCommentWarning3,com.google.javascript.jscomp.parsing.ParserTest::testSuspiciousBlockCommentWarning4,com.google.javascript.jscomp.parsing.ParserTest::testSuspiciousBlockCommentWarning5",
    "test.dir": "test",
    "clz.modified": "com.google.javascript.jscomp.parsing.IRFactory",
    "src.dir": "src"
  },
  "timeoutSecond": 100,
  "proj": "Closure",
  "id": "122",
  "workingDir": "../bugs/Closure_122_tmp",
  "bug_name": "Closure_122",
  "derive": "defects4j",
  "trigger_tests": [
    {
      "test_class": "com.google.javascript.jscomp.parsing.ParserTest",
      "test_function": "testSuspiciousBlockCommentWarning3",
      "assertion_line": "695",
      "exception": "junit.framework.AssertionFailedError",
      "message": ""
    },
    {
      "test_class": "com.google.javascript.jscomp.parsing.ParserTest",
      "test_function": "testSuspiciousBlockCommentWarning4",
      "assertion_line": "699",
      "exception": "junit.framework.AssertionFailedError",
      "message": ""
    },
    {
      "test_class": "com.google.javascript.jscomp.parsing.ParserTest",
      "test_function": "testSuspiciousBlockCommentWarning5",
      "assertion_line": "708",
      "exception": "junit.framework.AssertionFailedError",
      "message": ""
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "src/com/google/javascript/jscomp/parsing/IRFactory.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "com.google.javascript.jscomp.parsing.IRFactory:handleBlockComment:[Comment comment]:void"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "com.google.javascript.jscomp.parsing.IRFactory:handleBlockComment:[Comment comment]:void"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "252",
            "253"
          ],
          "num": 2
        },
        {
          "qualified_names": [
            "252"
          ],
          "num": 1
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 936af02..709534b 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -249,8 +249,7 @@\n    * Check to see if the given block comment looks like it should be JSDoc.\n    */\n   private void handleBlockComment(Comment comment) {\n-    Pattern p \u003d Pattern.compile(\"(/|(\\n[ \\t]*))\\\\*[ \\t]*@[a-zA-Z]\");\n-    if (p.matcher(comment.getValue()).find()) {\n+    if (comment.getValue().indexOf(\"/* @\") !\u003d -1 || comment.getValue().indexOf(\"\\n * @\") !\u003d -1) {\n       errorReporter.warning(\n           SUSPICIOUS_COMMENT_WARNING,\n           sourceName,\n",
      "operations": [
        {
          "type": "insert-node",
          "from": "",
          "to": "InfixExpression [10288,10374]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "InfixExpression [10288,10328]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "INFIX_EXPRESSION_OPERATOR: || [10329,10331]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "InfixExpression [10332,10374]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "INFIX_EXPRESSION_OPERATOR: !\u003d [10323,10325]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "PrefixExpression [10326,10328]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "METHOD_INVOCATION_ARGUMENTS [10315,10321]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [10284,10348]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "METHOD_INVOCATION_RECEIVER [10357,10358]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: matcher [10359,10366]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "METHOD_INVOCATION_ARGUMENTS [10367,10385]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "MethodInvocation [10357,10386]",
          "to": ""
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  }
}