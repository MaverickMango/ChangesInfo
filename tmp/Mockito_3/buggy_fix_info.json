{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "data/changesInfo/",
  "properties": {
    "trigger.tests": "org.mockito.internal.invocation.InvocationMatcherTest::should_capture_varargs_as_vararg,org.mockitousage.bugs.varargs.VarargsAndAnyObjectPicksUpExtraInvocationsTest::shouldVerifyCorrectlyNumberOfInvocationsWithVarargs,org.mockitousage.bugs.varargs.VarargsNotPlayingWithAnyObjectTest::shouldMatchAnyVararg,org.mockitousage.matchers.CapturingArgumentsTest::should_capture_all_vararg,org.mockitousage.matchers.CapturingArgumentsTest::captures_correctly_when_captor_used_multiple_times,org.mockitousage.matchers.CapturingArgumentsTest::should_capture_vararg,org.mockitousage.matchers.CapturingArgumentsTest::captures_correctly_when_captor_used_on_pure_vararg_method,org.mockitousage.matchers.CapturingArgumentsTest::should_capture_byte_vararg_by_creating_captor_with_primitive_wrapper,org.mockitousage.matchers.CapturingArgumentsTest::should_capture_byte_vararg_by_creating_captor_with_primitive",
    "test.dir": "test",
    "clz.modified": "org.mockito.internal.invocation.InvocationMatcher",
    "src.dir": "src"
  },
  "timeoutSecond": 100,
  "proj": "Mockito",
  "id": "3",
  "workingDir": "../bugs/Mockito_3_tmp",
  "bug_name": "Mockito_3",
  "derive": "defects4j",
  "trigger_tests": [
    {
      "test_class": "org.mockito.internal.invocation.InvocationMatcherTest",
      "test_function": "should_capture_varargs_as_vararg",
      "assertion_line": "154",
      "exception": "junit.framework.AssertionFailedError",
      "message": "expected:\u003c[[\u0027a\u0027, \u0027b\u0027]]\u003e but was:\u003c[[1]]\u003e"
    },
    {
      "test_class": "org.mockitousage.bugs.varargs.VarargsAndAnyObjectPicksUpExtraInvocationsTest",
      "test_function": "shouldVerifyCorrectlyNumberOfInvocationsWithVarargs",
      "assertion_line": "50",
      "exception": "java.lang.ArrayIndexOutOfBoundsException",
      "message": "2"
    },
    {
      "test_class": "org.mockitousage.bugs.varargs.VarargsNotPlayingWithAnyObjectTest",
      "test_function": "shouldMatchAnyVararg",
      "assertion_line": "28",
      "exception": "java.lang.ArrayIndexOutOfBoundsException",
      "message": "1"
    },
    {
      "test_class": "org.mockitousage.matchers.CapturingArgumentsTest",
      "test_function": "should_capture_all_vararg",
      "assertion_line": "278",
      "exception": "junit.framework.AssertionFailedError",
      "message": "expected:\u003c[[\u0027a\u0027, \u0027b\u0027, \u0027c\u0027, \u0027again ?!\u0027]]\u003e but was:\u003c[[42, 42]]\u003e"
    },
    {
      "test_class": "org.mockitousage.matchers.CapturingArgumentsTest",
      "test_function": "captures_correctly_when_captor_used_multiple_times",
      "assertion_line": "304",
      "exception": "java.lang.ArrayIndexOutOfBoundsException",
      "message": "2"
    },
    {
      "test_class": "org.mockitousage.matchers.CapturingArgumentsTest",
      "test_function": "should_capture_vararg",
      "assertion_line": "263",
      "exception": "junit.framework.AssertionFailedError",
      "message": "expected:\u003c[[\u0027a\u0027, \u0027b\u0027, \u0027c\u0027]]\u003e but was:\u003c[[42]]\u003e"
    },
    {
      "test_class": "org.mockitousage.matchers.CapturingArgumentsTest",
      "test_function": "captures_correctly_when_captor_used_on_pure_vararg_method",
      "assertion_line": "317",
      "exception": "java.lang.ArrayIndexOutOfBoundsException",
      "message": "1"
    },
    {
      "test_class": "org.mockitousage.matchers.CapturingArgumentsTest",
      "test_function": "should_capture_byte_vararg_by_creating_captor_with_primitive_wrapper",
      "assertion_line": "249",
      "exception": "java.lang.ClassCastException",
      "message": "[B cannot be cast to java.lang.Byte"
    },
    {
      "test_class": "org.mockitousage.matchers.CapturingArgumentsTest",
      "test_function": "should_capture_byte_vararg_by_creating_captor_with_primitive",
      "assertion_line": "235",
      "exception": "java.lang.ClassCastException",
      "message": "[B cannot be cast to java.lang.Byte"
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/org/mockito/internal/invocation/InvocationMatcher.java",
        "src/org/mockito/internal/invocation/InvocationMatcher.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.mockito.internal.invocation.InvocationMatcher:uniqueMatcherSet:[int indexOfVararg]:Set\u003cMatcher\u003e",
            "org.mockito.internal.invocation.InvocationMatcher:captureArgumentsFrom:[Invocation invocation]:void"
          ],
          "num": 2
        },
        {
          "qualified_names": [
            "org.mockito.internal.invocation.InvocationMatcher:captureArgumentsFrom:[Invocation invocation]:void",
            "org.mockito.internal.invocation.InvocationMatcher:createFrom:[List\u003cInvocation\u003e invocations]:List\u003cInvocationMatcher\u003e"
          ],
          "num": 2
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "127",
            "129",
            "130",
            "131",
            "132",
            "145",
            "146",
            "147",
            "148",
            "149",
            "150",
            "151",
            "152",
            "153",
            "154",
            "155",
            "156"
          ],
          "num": 17
        },
        {
          "qualified_names": [
            "127",
            "128",
            "130",
            "146"
          ],
          "num": 4
        }
      ],
      "diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex 3b3795b..a3a7c08 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -124,12 +124,10 @@\n                     ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));\n                 }\n             }\n-            for (Matcher m : uniqueMatcherSet(indexOfVararg)) {\n+            for (int position \u003d indexOfVararg; position \u003c matchers.size(); position++) {\n+                Matcher m \u003d matchers.get(position);\n                 if (m instanceof CapturesArguments) {\n-                    Object rawArgument \u003d invocation.getRawArguments()[indexOfVararg];\n-                    for (int i \u003d 0; i \u003c Array.getLength(rawArgument); i++) {\n-                        ((CapturesArguments) m).captureFrom(Array.get(rawArgument, i));\n-                    }\n+                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position - indexOfVararg]);\n                 }\n             }\n         } else {\n@@ -142,18 +140,6 @@\n         }\n     }\n \n-    private Set\u003cMatcher\u003e uniqueMatcherSet(int indexOfVararg) {\n-        HashSet\u003cMatcher\u003e set \u003d new HashSet\u003cMatcher\u003e();\n-        for (int position \u003d indexOfVararg; position \u003c matchers.size(); position++) {\n-            Matcher matcher \u003d matchers.get(position);\n-            if(matcher instanceof MatcherDecorator) {\n-                set.add(((MatcherDecorator) matcher).getActualMatcher());\n-            } else {\n-                set.add(matcher);\n-            }\n-        }\n-        return set;\n-    }\n \n     public static List\u003cInvocationMatcher\u003e createFrom(List\u003cInvocation\u003e invocations) {\n         LinkedList\u003cInvocationMatcher\u003e out \u003d new LinkedList\u003cInvocationMatcher\u003e();\n",
      "operations": [
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ArrayAccess [4705,4759]"
        },
        {
          "type": "delete-tree",
          "from": "MethodInvocation [4795,4820]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [4592,4657]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationExpression [4683,4692]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "InfixExpression [4694,4726]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "PostfixExpression [4728,4731]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Block [4733,4844]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "ForStatement [4678,4844]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [5502,5686]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Block [5434,5696]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SingleVariableDeclaration [4471,4480]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodInvocation [4483,4514]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "EnhancedForStatement [4466,4876]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: private [5237,5244]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ParameterizedType [5245,5257]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: uniqueMatcherSet [5258,5274]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SingleVariableDeclaration [5275,5292]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [5304,5350]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ReturnStatement [5705,5716]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Block [5294,5722]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "MethodDeclaration [5237,5722]",
          "to": ""
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [
        "org.mockito.internal.invocation.InvocationMatcher:createFrom:[List\u003cInvocation\u003e invocations]:List\u003cInvocationMatcher\u003e"
      ],
      "num": 1
    },
    "delete_functions": {
      "qualified_names": [
        "org.mockito.internal.invocation.InvocationMatcher:uniqueMatcherSet:[int indexOfVararg]:Set\u003cMatcher\u003e"
      ],
      "num": 1
    }
  }
}