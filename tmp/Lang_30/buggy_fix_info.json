{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "data/changesInfo/",
  "properties": {
    "trigger.tests": "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsNone_CharArrayWithSupplementaryChars,org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsNone_StringWithSupplementaryChars,org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAny_StringCharArrayWithBadSupplementaryChars,org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testIndexOfAnyBut_StringStringWithSupplementaryChars,org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAny_StringWithBadSupplementaryChars,org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testIndexOfAny_StringCharArrayWithSupplementaryChars,org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testIndexOfAnyBut_StringCharArrayWithSupplementaryChars,org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsNone_StringWithBadSupplementaryChars,org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testIndexOfAny_StringStringWithSupplementaryChars,org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsNone_CharArrayWithBadSupplementaryChars",
    "test.dir": "src/test/java",
    "clz.modified": "org.apache.commons.lang3.StringUtils",
    "src.dir": "src/main/java"
  },
  "timeoutSecond": 100,
  "proj": "Lang",
  "id": "30",
  "workingDir": "../bugs/Lang_30_tmp",
  "bug_name": "Lang_30",
  "derive": "defects4j",
  "trigger_tests": [
    {
      "test_class": "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest",
      "test_function": "testContainsNone_CharArrayWithSupplementaryChars",
      "assertion_line": "327",
      "exception": "junit.framework.AssertionFailedError",
      "message": "expected:\u003ctrue\u003e but was:\u003cfalse\u003e"
    },
    {
      "test_class": "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest",
      "test_function": "testContainsNone_StringWithSupplementaryChars",
      "assertion_line": "381",
      "exception": "junit.framework.AssertionFailedError",
      "message": "expected:\u003ctrue\u003e but was:\u003cfalse\u003e"
    },
    {
      "test_class": "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest",
      "test_function": "testContainsAny_StringCharArrayWithBadSupplementaryChars",
      "assertion_line": "138",
      "exception": "junit.framework.AssertionFailedError",
      "message": "expected:\u003cfalse\u003e but was:\u003ctrue\u003e"
    },
    {
      "test_class": "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest",
      "test_function": "testIndexOfAnyBut_StringStringWithSupplementaryChars",
      "assertion_line": "616",
      "exception": "junit.framework.AssertionFailedError",
      "message": "expected:\u003c2\u003e but was:\u003c3\u003e"
    },
    {
      "test_class": "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest",
      "test_function": "testContainsAny_StringWithBadSupplementaryChars",
      "assertion_line": "186",
      "exception": "junit.framework.AssertionFailedError",
      "message": "expected:\u003cfalse\u003e but was:\u003ctrue\u003e"
    },
    {
      "test_class": "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest",
      "test_function": "testIndexOfAny_StringCharArrayWithSupplementaryChars",
      "assertion_line": "528",
      "exception": "junit.framework.AssertionFailedError",
      "message": "expected:\u003c2\u003e but was:\u003c0\u003e"
    },
    {
      "test_class": "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest",
      "test_function": "testIndexOfAnyBut_StringCharArrayWithSupplementaryChars",
      "assertion_line": "593",
      "exception": "junit.framework.AssertionFailedError",
      "message": "expected:\u003c2\u003e but was:\u003c3\u003e"
    },
    {
      "test_class": "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest",
      "test_function": "testContainsNone_StringWithBadSupplementaryChars",
      "assertion_line": "362",
      "exception": "junit.framework.AssertionFailedError",
      "message": "expected:\u003ctrue\u003e but was:\u003cfalse\u003e"
    },
    {
      "test_class": "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest",
      "test_function": "testIndexOfAny_StringStringWithSupplementaryChars",
      "assertion_line": "571",
      "exception": "junit.framework.AssertionFailedError",
      "message": "expected:\u003c2\u003e but was:\u003c0\u003e"
    },
    {
      "test_class": "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest",
      "test_function": "testContainsNone_CharArrayWithBadSupplementaryChars",
      "assertion_line": "308",
      "exception": "junit.framework.AssertionFailedError",
      "message": "expected:\u003ctrue\u003e but was:\u003cfalse\u003e"
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/lang3/StringUtils.java",
        "src/main/java/org/apache/commons/lang3/StringUtils.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.lang3.StringUtils:containsAny:[String cs, char[] searchChars]:boolean",
            "org.apache.commons.lang3.StringUtils:indexOfAny:[CharSequence cs, char[] searchChars]:int",
            "org.apache.commons.lang3.StringUtils:containsAny:[String cs, String searchChars]:boolean",
            "org.apache.commons.lang3.StringUtils:indexOfAnyBut:[CharSequence cs, char[] searchChars]:int",
            "org.apache.commons.lang3.StringUtils:indexOfAnyBut:[String str, String searchChars]:int",
            "org.apache.commons.lang3.StringUtils:containsNone:[CharSequence cs, char[] searchChars]:boolean"
          ],
          "num": 6
        },
        {
          "qualified_names": [
            "org.apache.commons.lang3.StringUtils:containsAny:[CharSequence cs, char[] searchChars]:boolean",
            "org.apache.commons.lang3.StringUtils:indexOfAny:[String str, String[] searchStrs]:int",
            "org.apache.commons.lang3.StringUtils:indexOfAny:[CharSequence cs, char[] searchChars]:int",
            "org.apache.commons.lang3.StringUtils:indexOfAnyBut:[String str, String searchChars]:int",
            "org.apache.commons.lang3.StringUtils:containsAny:[CharSequence cs, String searchChars]:boolean"
          ],
          "num": 5
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "1376",
            "1378",
            "1383",
            "1385",
            "1386",
            "1387",
            "1388",
            "1390",
            "1451",
            "1463",
            "1464",
            "1466",
            "1467",
            "1468",
            "1508",
            "1544",
            "1546",
            "1552",
            "1553",
            "1554",
            "1555",
            "1556",
            "1558",
            "1595",
            "1596",
            "1597",
            "1598",
            "1600",
            "1601",
            "1602",
            "1603",
            "1604",
            "1705",
            "1707",
            "1712",
            "1713",
            "1715",
            "1716",
            "1717",
            "1718",
            "1719",
            "1720",
            "1723"
          ],
          "num": 43
        },
        {
          "qualified_names": [
            "1375",
            "1443",
            "1455",
            "1457",
            "1497",
            "1554",
            "1576",
            "1731"
          ],
          "num": 8
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex da86fdb..dd2f5cf 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1373,21 +1373,13 @@\n             return INDEX_NOT_FOUND;\n         }\n         int csLen \u003d cs.length();\n-        int csLast \u003d csLen - 1;\n         int searchLen \u003d searchChars.length;\n-        int searchLast \u003d searchLen - 1;\n         for (int i \u003d 0; i \u003c csLen; i++) {\n             char ch \u003d cs.charAt(i);\n             for (int j \u003d 0; j \u003c searchLen; j++) {\n                 if (searchChars[j] \u003d\u003d ch) {\n-                    if (i \u003c csLast \u0026\u0026 j \u003c searchLast \u0026\u0026 Character.isHighSurrogate(ch)) {\n                         // ch is a supplementary character\n-                        if (searchChars[j + 1] \u003d\u003d cs.charAt(i + 1)) {\n-                            return i;\n-                        }\n-                    } else {\n                         return i;\n-                    }\n                 }\n             }\n         }\n@@ -1448,7 +1440,7 @@\n      * \u003ccode\u003efalse\u003c/code\u003e if no match or null input\n      * @since 2.4\n      */\n-    public static boolean containsAny(String cs, char[] searchChars) {\n+    public static boolean containsAny(CharSequence cs, char[] searchChars) {\n         if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n             return false;\n         }\n@@ -1460,12 +1452,9 @@\n             char ch \u003d cs.charAt(i);\n             for (int j \u003d 0; j \u003c searchLength; j++) {\n                 if (searchChars[j] \u003d\u003d ch) {\n-                    if (Character.isHighSurrogate(ch)) {\n-                        if (j \u003d\u003d searchLast) {\n+                    if (i \u003c csLast \u0026\u0026 j \u003c searchLast \u0026\u0026 ch \u003e\u003d Character.MIN_HIGH_SURROGATE \u0026\u0026 ch \u003c\u003d Character.MAX_HIGH_SURROGATE) {\n                             // missing low surrogate, fine, like String.indexOf(String)\n-                            return true;\n-                        }\n-                        if (i \u003c csLast \u0026\u0026 searchChars[j + 1] \u003d\u003d cs.charAt(i + 1)) {\n+                        if (searchChars[j + 1] \u003d\u003d cs.charAt(i + 1)) {\n                             return true;\n                         }\n                     } else {\n@@ -1505,7 +1494,7 @@\n      * @return the \u003ccode\u003etrue\u003c/code\u003e if any of the chars are found, \u003ccode\u003efalse\u003c/code\u003e if no match or null input\n      * @since 2.4\n      */\n-    public static boolean containsAny(String cs, String searchChars) {\n+    public static boolean containsAny(CharSequence cs, String searchChars) {\n         if (searchChars \u003d\u003d null) {\n             return false;\n         }\n@@ -1541,21 +1530,13 @@\n             return INDEX_NOT_FOUND;\n         }\n         int csLen \u003d cs.length();\n-        int csLast \u003d csLen - 1;\n         int searchLen \u003d searchChars.length;\n-        int searchLast \u003d searchLen - 1;\n         outer:\n         for (int i \u003d 0; i \u003c csLen; i++) {\n             char ch \u003d cs.charAt(i);\n             for (int j \u003d 0; j \u003c searchLen; j++) {\n                 if (searchChars[j] \u003d\u003d ch) {\n-                    if (i \u003c csLast \u0026\u0026 j \u003c searchLast \u0026\u0026 Character.isHighSurrogate(ch)) {\n-                        if (searchChars[j + 1] \u003d\u003d cs.charAt(i + 1)) {\n-                            continue outer;\n-                        }\n-                    } else {\n                         continue outer;\n-                    }\n                 }\n             }\n             return i;\n@@ -1592,16 +1573,8 @@\n         int strLen \u003d str.length();\n         for (int i \u003d 0; i \u003c strLen; i++) {\n             char ch \u003d str.charAt(i);\n-            boolean chFound \u003d searchChars.indexOf(ch) \u003e\u003d 0;\n-            if (i + 1 \u003c strLen \u0026\u0026 Character.isHighSurrogate(ch)) {\n-                char ch2 \u003d str.charAt(i + 1);\n-                if (chFound \u0026\u0026 searchChars.indexOf(ch2) \u003c 0) {\n+            if (searchChars.indexOf(ch) \u003c 0) {\n                     return i;\n-                }\n-            } else {\n-                if (!chFound) {\n-                    return i;\n-                }\n             }\n         }\n         return INDEX_NOT_FOUND;\n@@ -1702,25 +1675,14 @@\n             return true;\n         }\n         int csLen \u003d cs.length();\n-        int csLast \u003d csLen - 1;\n         int searchLen \u003d searchChars.length;\n-        int searchLast \u003d searchLen - 1;\n         for (int i \u003d 0; i \u003c csLen; i++) {\n             char ch \u003d cs.charAt(i);\n             for (int j \u003d 0; j \u003c searchLen; j++) {\n                 if (searchChars[j] \u003d\u003d ch) {\n-                    if (Character.isHighSurrogate(ch)) {\n-                        if (j \u003d\u003d searchLast) {\n                             // missing low surrogate, fine, like String.indexOf(String)\n-                            return false;\n-                        }\n-                        if (i \u003c csLast \u0026\u0026 searchChars[j + 1] \u003d\u003d cs.charAt(i + 1)) {\n-                            return false;\n-                        }\n-                    } else {\n                         // ch is in the Basic Multilingual Plane\n                         return false;\n-                    }\n                 }\n             }\n         }\n",
      "operations": [
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "InfixExpression [57852,57956]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "InfixExpression [57852,57918]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "INFIX_EXPRESSION_OPERATOR: \u0026\u0026 [57919,57921]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "InfixExpression [57922,57956]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "INFIX_EXPRESSION_OPERATOR: \u003c\u003d [57925,57927]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "QualifiedName: Character.MAX_HIGH_SURROGATE [57928,57956]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [54653,54676]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [54729,54760]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "InfixExpression [54957,55018]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "InfixExpression [55109,55147]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Block [55149,55214]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "IfStatement [55105,55214]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Block [55020,55236]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "Block [55242,55299]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "IfStatement [54953,55299]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "METHOD_INVOCATION_RECEIVER [58192,58201]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: isHighSurrogate [58202,58217]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "METHOD_INVOCATION_ARGUMENTS [58218,58220]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "MethodInvocation [58192,58221]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [58249,58426]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "InfixExpression [58455,58465]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "INFIX_EXPRESSION_OPERATOR: \u0026\u0026 [58466,58468]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "InfixExpression [58455,58507]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [61346,61369]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [61422,61453]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "InfixExpression [61665,61726]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "InfixExpression [61758,61796]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Block [61798,61869]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "IfStatement [61754,61869]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Block [61728,61891]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "Block [61897,61960]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "IfStatement [61661,61960]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: chFound [63471,63478]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "INFIX_EXPRESSION_OPERATOR: \u0026\u0026 [63479,63481]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "InfixExpression [63471,63510]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [63290,63337]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "InfixExpression [63354,63401]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [63421,63450]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Block [63403,63575]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "Block [63581,63676]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "IfStatement [63350,63676]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [67634,67657]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [67710,67741]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodInvocation [67938,67967]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "InfixExpression [67999,68014]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Block [68016,68173]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "IfStatement [67995,68173]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [68198,68325]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Block [67969,68347]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "Block [68353,68479]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "IfStatement [67934,68479]",
          "to": ""
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [
        "org.apache.commons.lang3.StringUtils:containsAny:[CharSequence cs, char[] searchChars]:boolean",
        "org.apache.commons.lang3.StringUtils:containsAny:[CharSequence cs, String searchChars]:boolean",
        "org.apache.commons.lang3.StringUtils:indexOfAny:[String str, String[] searchStrs]:int"
      ],
      "num": 3
    },
    "delete_functions": {
      "qualified_names": [
        "org.apache.commons.lang3.StringUtils:containsNone:[CharSequence cs, char[] searchChars]:boolean",
        "org.apache.commons.lang3.StringUtils:containsAny:[String cs, String searchChars]:boolean",
        "org.apache.commons.lang3.StringUtils:indexOfAnyBut:[CharSequence cs, char[] searchChars]:int",
        "org.apache.commons.lang3.StringUtils:containsAny:[String cs, char[] searchChars]:boolean"
      ],
      "num": 4
    }
  }
}