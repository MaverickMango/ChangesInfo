{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "data/changesInfo/",
  "properties": {
    "trigger.tests": "com.fasterxml.jackson.databind.type.TestJavaType::testLocalType728,com.fasterxml.jackson.databind.type.TestLocalType609::testLocalPartialType609",
    "test.dir": "src/test/java",
    "clz.modified": "com.fasterxml.jackson.databind.type.TypeFactory",
    "src.dir": "src/main/java"
  },
  "timeoutSecond": 100,
  "proj": "JacksonDatabind",
  "id": "11",
  "workingDir": "../bugs/JacksonDatabind_11_tmp",
  "bug_name": "JacksonDatabind_11",
  "derive": "defects4j",
  "trigger_tests": [
    {
      "test_class": "com.fasterxml.jackson.databind.type.TestJavaType",
      "test_function": "testLocalType728",
      "assertion_line": "43",
      "exception": "junit.framework.AssertionFailedError",
      "message": "expected:\u003cinterface java.lang.CharSequence\u003e but was:\u003cclass java.lang.Object\u003e"
    },
    {
      "test_class": "com.fasterxml.jackson.databind.type.TestLocalType609",
      "test_function": "testLocalPartialType609",
      "assertion_line": "32",
      "exception": "com.fasterxml.jackson.databind.JsonMappingException",
      "message": "Type variable \u0027T\u0027 can not be resolved (with context of class com.fasterxml.jackson.databind.type.TestLocalType609$EntityContainer)"
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "src/main/java/com/fasterxml/jackson/databind/type/TypeFactory.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "com.fasterxml.jackson.databind.type.TypeFactory:_fromVariable:[TypeVariable\u003c?\u003e type, TypeBindings context]:JavaType"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "com.fasterxml.jackson.databind.type.TypeFactory:_fromVariable:[TypeVariable\u003c?\u003e type, TypeBindings context]:JavaType"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "895",
            "902"
          ],
          "num": 2
        },
        {
          "qualified_names": [
            "895",
            "902"
          ],
          "num": 2
        }
      ],
      "diff": "diff --git a/src/main/java/com/fasterxml/jackson/databind/type/TypeFactory.java b/src/main/java/com/fasterxml/jackson/databind/type/TypeFactory.java\nindex e0eb639..a8bd240 100644\n--- a/src/main/java/com/fasterxml/jackson/databind/type/TypeFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/type/TypeFactory.java\n@@ -892,14 +892,14 @@\n         // 19-Mar-2015: Without context, all we can check are bounds.\n         if (context \u003d\u003d null) {\n             // And to prevent infinite loops, now need this:\n-            context \u003d new TypeBindings(this, (Class\u003c?\u003e) null);\n+            return _unknownType();\n         } else {\n             // Ok: here\u0027s where context might come in handy!\n             /* 19-Mar-2015, tatu: As per [databind#609], may need to allow\n              *   unresolved type variables to handle some cases where bounds\n              *   are enough. Let\u0027s hope it does not hide real fail cases.\n              */\n-            JavaType actualType \u003d context.findType(name, false);\n+            JavaType actualType \u003d context.findType(name);\n             if (actualType !\u003d null) {\n                 return actualType;\n             }\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "ReturnStatement [35556,35578]"
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [35556,35606]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "BooleanLiteral: false [35984,35989]",
          "to": ""
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  }
}