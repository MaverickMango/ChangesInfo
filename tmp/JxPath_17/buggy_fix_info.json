{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "data/changesInfo/",
  "properties": {
    "trigger.tests": "org.apache.commons.jxpath.ri.model.dom.DOMModelTest::testAxisAttribute,org.apache.commons.jxpath.ri.model.jdom.JDOMModelTest::testAxisAttribute",
    "test.dir": "src/test",
    "clz.modified": "org.apache.commons.jxpath.ri.model.dom.DOMAttributeIterator,org.apache.commons.jxpath.ri.model.jdom.JDOMAttributeIterator",
    "src.dir": "src/java"
  },
  "timeoutSecond": 100,
  "proj": "JxPath",
  "id": "17",
  "workingDir": "../bugs/JxPath_17_tmp",
  "bug_name": "JxPath_17",
  "derive": "defects4j",
  "trigger_tests": [
    {
      "test_class": "org.apache.commons.jxpath.ri.model.dom.DOMModelTest",
      "test_function": "testAxisAttribute",
      "exception": "junit.framework.AssertionFailedError",
      "message": "Evaluating value iterator \u003cvendor/product/price:amount/@*\u003e expected:\u003c[10%, 20%]\u003e but was:\u003c[20%]\u003e"
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/jxpath/ri/model/dom/DOMAttributeIterator.java",
        "src/java/org/apache/commons/jxpath/ri/model/dom/DOMAttributeIterator.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.jxpath.ri.model.dom.DOMAttributeIterator:testAttr:[Attr attr]:boolean"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "org.apache.commons.jxpath.ri.model.dom.DOMAttributeIterator:testAttr:[Attr attr]:boolean"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "84",
            "87",
            "88",
            "90",
            "91",
            "151"
          ],
          "num": 6
        },
        {
          "qualified_names": [
            "84",
            "87",
            "88",
            "89",
            "91",
            "92",
            "93",
            "94",
            "95",
            "146"
          ],
          "num": 10
        }
      ],
      "diff": "diff --git a/src/java/org/apache/commons/jxpath/ri/model/dom/DOMAttributeIterator.java b/src/java/org/apache/commons/jxpath/ri/model/dom/DOMAttributeIterator.java\nindex a979a10..a2ee4db 100644\n--- a/src/java/org/apache/commons/jxpath/ri/model/dom/DOMAttributeIterator.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/dom/DOMAttributeIterator.java\n@@ -81,14 +81,18 @@\n         if (testLocalName.equals(\"*\") || testLocalName.equals(nodeLocalName)) {\n             String testPrefix \u003d name.getPrefix();\n \n-            if (testPrefix \u003d\u003d null || equalStrings(testPrefix, nodePrefix)) {\n+            if (equalStrings(testPrefix, nodePrefix)) {\n                 return true;\n             }\n-            if (nodePrefix \u003d\u003d null) {\n-                return false;\n+            String testNS \u003d null;\n+            if (testPrefix !\u003d null) {\n+                testNS \u003d parent.getNamespaceURI(testPrefix);\n             }\n-            return equalStrings(parent.getNamespaceURI(testPrefix), parent\n-                    .getNamespaceURI(nodePrefix));\n+            String nodeNS \u003d null;\n+            if (nodePrefix !\u003d null) {\n+                nodeNS \u003d parent.getNamespaceURI(nodePrefix);\n+            }\n+            return equalStrings(testNS, nodeNS);\n         }\n         return false;\n     }\n@@ -148,4 +152,4 @@\n         this.position \u003d position;\n         return position \u003e\u003d 1 \u0026\u0026 position \u003c\u003d attributes.size();\n     }\n-}\n\\ No newline at end of file\n+}\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [3018,3039]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "IfStatement [3052,3152]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [3165,3186]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "InfixExpression [3056,3074]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Block [3076,3152]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "ExpressionStatement [3094,3138]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "ExpressionStatement [3241,3285]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Assignment [3094,3137]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Assignment [3241,3284]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: testNS [3332,3338]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: nodeNS [3340,3346]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: testNS [3094,3100]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "ASSIGNMENT_OPERATOR: \u003d [3101,3102]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: nodeNS [3241,3247]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "ASSIGNMENT_OPERATOR: \u003d [3248,3249]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "InfixExpression [2923,2941]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "INFIX_EXPRESSION_OPERATOR: || [2942,2944]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "InfixExpression [2923,2981]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ReturnStatement [3082,3095]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/jxpath/ri/model/jdom/JDOMAttributeIterator.java",
        "src/java/org/apache/commons/jxpath/ri/model/jdom/JDOMAttributeIterator.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.jxpath.ri.model.jdom.JDOMAttributeIterator:JDOMAttributeIterator:[NodePointer parent, QName name]:null"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "org.apache.commons.jxpath.ri.model.jdom.JDOMAttributeIterator:setPosition:[int position]:boolean",
            "org.apache.commons.jxpath.ri.model.jdom.JDOMAttributeIterator:JDOMAttributeIterator:[NodePointer parent, QName name]:null"
          ],
          "num": 2
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "69",
            "80",
            "81",
            "116"
          ],
          "num": 4
        },
        {
          "qualified_names": [
            "70",
            "74",
            "82",
            "114"
          ],
          "num": 4
        }
      ],
      "diff": "diff --git a/src/java/org/apache/commons/jxpath/ri/model/jdom/JDOMAttributeIterator.java b/src/java/org/apache/commons/jxpath/ri/model/jdom/JDOMAttributeIterator.java\nindex d7b7a30..db0b14d 100644\n--- a/src/java/org/apache/commons/jxpath/ri/model/jdom/JDOMAttributeIterator.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/jdom/JDOMAttributeIterator.java\n@@ -67,9 +67,11 @@\n             String lname \u003d name.getName();\n             if (!lname.equals(\"*\")) {\n                 attributes \u003d new ArrayList();\n+                if (ns !\u003d null) {\n                 Attribute attr \u003d element.getAttribute(lname, ns);\n                 if (attr !\u003d null) {\n                     attributes.add(attr);\n+                    }\n                 }\n             }\n             else {\n@@ -77,8 +79,7 @@\n                 List allAttributes \u003d element.getAttributes();\n                 for (int i \u003d 0; i \u003c allAttributes.size(); i++) {\n                     Attribute attr \u003d (Attribute) allAttributes.get(i);\n-                    if (ns \u003d\u003d Namespace.NO_NAMESPACE\n-                            || attr.getNamespace().equals(ns)) {\n+                    if (attr.getNamespace().equals(ns)) {\n                         attributes.add(attr);\n                     }\n                 }\n@@ -113,4 +114,4 @@\n         this.position \u003d position;\n         return position \u003e\u003d 1 \u0026\u0026 position \u003c\u003d attributes.size();\n     }\n-}\n\\ No newline at end of file\n+}\n",
      "operations": [
        {
          "type": "insert-node",
          "from": "",
          "to": "IfStatement [2556,2757]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "InfixExpression [2560,2570]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Block [2572,2757]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "InfixExpression [3003,3031]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "INFIX_EXPRESSION_OPERATOR: || [3060,3062]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "InfixExpression [3003,3093]",
          "to": ""
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [
        "org.apache.commons.jxpath.ri.model.jdom.JDOMAttributeIterator:setPosition:[int position]:boolean"
      ],
      "num": 1
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  }
}