{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "data/changesInfo/",
  "properties": {
    "trigger.tests": "org.apache.commons.lang3.text.ExtendedMessageFormatTest::testEqualsHashcode",
    "test.dir": "src/test/java",
    "clz.modified": "org.apache.commons.lang3.text.ExtendedMessageFormat",
    "src.dir": "src/main/java"
  },
  "timeoutSecond": 100,
  "proj": "Lang",
  "id": "23",
  "workingDir": "../bugs/Lang_23_tmp",
  "bug_name": "Lang_23",
  "derive": "defects4j",
  "trigger_tests": [
    {
      "test_class": "org.apache.commons.lang3.text.ExtendedMessageFormatTest",
      "test_function": "testEqualsHashcode",
      "assertion_line": "301",
      "exception": "junit.framework.AssertionFailedError",
      "message": "registry, hashcode()"
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java",
        "src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.lang3.text.ExtendedMessageFormat:equals:[Object obj]:boolean",
            "org.apache.commons.lang3.text.ExtendedMessageFormat:hashCode:[]:int"
          ],
          "num": 2
        },
        {
          "qualified_names": [],
          "num": 0
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "73",
            "264",
            "265",
            "266",
            "267",
            "268",
            "269",
            "270",
            "271",
            "272",
            "273",
            "274",
            "275",
            "276",
            "277",
            "278",
            "279",
            "280",
            "281",
            "282",
            "283",
            "284",
            "285",
            "286",
            "293",
            "294",
            "295",
            "296",
            "297",
            "298",
            "299"
          ],
          "num": 31
        },
        {
          "qualified_names": [
            "72",
            "264"
          ],
          "num": 2
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java b/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java\nindex 55ee7d1..a2cc169 100644\n--- a/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java\n+++ b/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java\n@@ -70,7 +70,6 @@\n  */\n public class ExtendedMessageFormat extends MessageFormat {\n     private static final long serialVersionUID \u003d -2362048321261811743L;\n-    private static final int HASH_SEED \u003d 31;\n \n     private static final String DUMMY_PATTERN \u003d \"\";\n     private static final String ESCAPED_QUOTE \u003d \"\u0027\u0027\";\n@@ -261,42 +260,12 @@\n      * @param obj the object to compare to\n      * @return true if this object equals the other, otherwise false\n      */\n-    @Override\n-    public boolean equals(Object obj) {\n-        if (obj \u003d\u003d this) {\n-            return true;\n-        }\n-        if (obj \u003d\u003d null) {\n-            return false;\n-        }\n-        if (!super.equals(obj)) {\n-            return false;\n-        }\n-        if (ObjectUtils.notEqual(getClass(), obj.getClass())) {\n-          return false;\n-        }\n-        ExtendedMessageFormat rhs \u003d (ExtendedMessageFormat)obj;\n-        if (ObjectUtils.notEqual(toPattern, rhs.toPattern)) {\n-            return false;\n-        }\n-        if (ObjectUtils.notEqual(registry, rhs.registry)) {\n-            return false;\n-        }\n-        return true;\n-    }\n \n     /**\n      * Return the hashcode.\n      *\n      * @return the hashcode\n      */\n-    @Override\n-    public int hashCode() {\n-        int result \u003d super.hashCode();\n-        result \u003d HASH_SEED * result + ObjectUtils.hashCode(registry);\n-        result \u003d HASH_SEED * result + ObjectUtils.hashCode(toPattern);\n-        return result;\n-    }\n \n     /**\n      * Get a custom format from a format description.\n",
      "operations": [
        {
          "type": "delete-tree",
          "from": "FieldDeclaration [3464,3504]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [9953,10788]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [10794,11119]",
          "to": ""
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [
        "org.apache.commons.lang3.text.ExtendedMessageFormat:hashCode:[]:int",
        "org.apache.commons.lang3.text.ExtendedMessageFormat:equals:[Object obj]:boolean"
      ],
      "num": 2
    }
  }
}