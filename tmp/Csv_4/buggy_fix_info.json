{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "data/changesInfo/",
  "properties": {
    "trigger.tests": "org.apache.commons.csv.CSVParserTest::testNoHeaderMap",
    "test.dir": "src/test/java",
    "clz.modified": "org.apache.commons.csv.CSVParser",
    "src.dir": "src/main/java"
  },
  "timeoutSecond": 100,
  "proj": "Csv",
  "id": "4",
  "workingDir": "../bugs/Csv_4_tmp",
  "bug_name": "Csv_4",
  "derive": "defects4j",
  "trigger_tests": [
    {
      "test_class": "org.apache.commons.csv.CSVParserTest",
      "test_function": "testNoHeaderMap",
      "assertion_line": "670",
      "exception": "java.lang.NullPointerException",
      "message": ""
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/csv/CSVParser.java",
        "src/main/java/org/apache/commons/csv/CSVParser.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.csv.CSVParser:getHeaderMap:[]:Map\u003cString,Integer\u003e"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "org.apache.commons.csv.CSVParser:getHeaderMap:[]:Map\u003cString,Integer\u003e"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "288"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "288"
          ],
          "num": 1
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/csv/CSVParser.java b/src/main/java/org/apache/commons/csv/CSVParser.java\nindex e97a364..9d56f1a 100644\n--- a/src/main/java/org/apache/commons/csv/CSVParser.java\n+++ b/src/main/java/org/apache/commons/csv/CSVParser.java\n@@ -285,7 +285,7 @@\n      * @return a copy of the header map that iterates in column order.\n      */\n     public Map\u003cString, Integer\u003e getHeaderMap() {\n-        return this.headerMap \u003d\u003d null ? null : new LinkedHashMap\u003cString, Integer\u003e(this.headerMap);\n+        return new LinkedHashMap\u003cString, Integer\u003e(this.headerMap);\n     }\n \n     /**\n",
      "operations": [
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "InfixExpression [9818,9840]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "NullLiteral [9843,9847]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "ConditionalExpression [9818,9900]",
          "to": ""
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  }
}