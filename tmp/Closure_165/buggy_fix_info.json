{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "data/changesInfo/",
  "properties": {
    "trigger.tests": "com.google.javascript.jscomp.TypeCheckTest::testIssue725",
    "test.dir": "test",
    "clz.modified": "com.google.javascript.rhino.jstype.JSTypeRegistry,com.google.javascript.rhino.jstype.ObjectType,com.google.javascript.rhino.jstype.RecordType,com.google.javascript.rhino.jstype.RecordTypeBuilder",
    "src.dir": "src"
  },
  "timeoutSecond": 100,
  "proj": "Closure",
  "id": "165",
  "workingDir": "../bugs/Closure_165_tmp",
  "bug_name": "Closure_165",
  "derive": "defects4j",
  "trigger_tests": [
    {
      "test_class": "com.google.javascript.jscomp.TypeCheckTest",
      "test_function": "testIssue725",
      "assertion_line": "5852",
      "exception": "junit.framework.AssertionFailedError",
      "message": "expected a warning"
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "com.google.javascript.rhino.jstype.JSTypeRegistry:canPropertyBeDefined:[JSType type, String propertyName]:boolean"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "com.google.javascript.rhino.jstype.JSTypeRegistry:canPropertyBeDefined:[JSType type, String propertyName]:boolean"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "698",
            "699",
            "700",
            "701"
          ],
          "num": 4
        },
        {
          "qualified_names": [
            "697"
          ],
          "num": 1
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java b/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\nindex edce9bf..6c6fcd4 100644\n--- a/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\n+++ b/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\n@@ -695,10 +695,6 @@\n         if (!greatestSubtype.isEmptyType()) {\n           // We\u0027ve found a type with this property. Now we just have to make\n           // sure it\u0027s not a type used for internal bookkeeping.\n-          RecordType maybeRecordType \u003d greatestSubtype.toMaybeRecordType();\n-          if (maybeRecordType !\u003d null \u0026\u0026 maybeRecordType.isSynthetic()) {\n-            continue;\n-          }\n \n           return true;\n         }\n",
      "operations": [
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [27888,27953]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [27964,28061]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "src/com/google/javascript/rhino/jstype/ObjectType.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "com.google.javascript.rhino.jstype.ObjectType:defineSynthesizedProperty:[String propertyName, JSType type, Node propertyNode]:boolean"
          ],
          "num": 1
        },
        {
          "qualified_names": [],
          "num": 0
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "290",
            "291",
            "292",
            "293"
          ],
          "num": 4
        },
        {
          "qualified_names": [
            "289"
          ],
          "num": 1
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/rhino/jstype/ObjectType.java b/src/com/google/javascript/rhino/jstype/ObjectType.java\nindex 37bd487..82d229d 100644\n--- a/src/com/google/javascript/rhino/jstype/ObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/ObjectType.java\n@@ -287,10 +287,6 @@\n    * don\u0027t actually exist in the user\u0027s program. They\u0027re just used for\n    * bookkeeping in the type system.\n    */\n-  public final boolean defineSynthesizedProperty(String propertyName,\n-      JSType type, Node propertyNode) {\n-    return defineProperty(propertyName, type, false, propertyNode);\n-  }\n \n   /**\n    * Defines a property whose type is inferred.\n",
      "operations": [
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [8446,8822]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/rhino/jstype/RecordType.java",
        "src/com/google/javascript/rhino/jstype/RecordType.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "com.google.javascript.rhino.jstype.RecordType:isSynthetic:[]:boolean",
            "com.google.javascript.rhino.jstype.RecordType:getGreatestSubtypeHelper:[JSType that]:JSType",
            "com.google.javascript.rhino.jstype.RecordType:RecordType:[JSTypeRegistry registry, Map\u003cString,RecordProperty\u003e properties, boolean declared]:null",
            "com.google.javascript.rhino.jstype.RecordType:RecordType:[JSTypeRegistry registry, Map\u003cString,RecordProperty\u003e properties]:null"
          ],
          "num": 4
        },
        {
          "qualified_names": [
            "com.google.javascript.rhino.jstype.RecordType:isEquivalentTo:[JSType other]:boolean",
            "com.google.javascript.rhino.jstype.RecordType:getGreatestSubtypeHelper:[JSType that]:JSType",
            "com.google.javascript.rhino.jstype.RecordType:RecordType:[JSTypeRegistry registry, Map\u003cString,RecordProperty\u003e properties]:null"
          ],
          "num": 3
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "68",
            "71",
            "72",
            "73",
            "87",
            "88",
            "91",
            "99",
            "102",
            "103",
            "104",
            "105",
            "113",
            "114",
            "115",
            "166"
          ],
          "num": 16
        },
        {
          "qualified_names": [
            "67",
            "83",
            "104",
            "123",
            "179"
          ],
          "num": 5
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/rhino/jstype/RecordType.java b/src/com/google/javascript/rhino/jstype/RecordType.java\nindex 8ff279c..7cc4890 100755\n--- a/src/com/google/javascript/rhino/jstype/RecordType.java\n+++ b/src/com/google/javascript/rhino/jstype/RecordType.java\n@@ -65,12 +65,8 @@\n   private static final long serialVersionUID \u003d 1L;\n \n   private final SortedMap\u003cString, JSType\u003e properties \u003d Maps.newTreeMap();\n-  private final boolean declared;\n   private boolean isFrozen \u003d false;\n \n-  RecordType(JSTypeRegistry registry, Map\u003cString, RecordProperty\u003e properties) {\n-    this(registry, properties, true);\n-  }\n \n   /**\n    * Creates a record type.\n@@ -84,11 +80,9 @@\n    * @throws IllegalStateException if the {@code RecordProperty} associated\n    *         with a property is null.\n    */\n-  RecordType(JSTypeRegistry registry, Map\u003cString, RecordProperty\u003e properties,\n-      boolean declared) {\n+  RecordType(JSTypeRegistry registry, Map\u003cString, RecordProperty\u003e properties) {\n     super(registry, null, null);\n     setPrettyPrint(true);\n-    this.declared \u003d declared;\n \n     for (String property : properties.keySet()) {\n       RecordProperty prop \u003d properties.get(property);\n@@ -96,13 +90,8 @@\n         throw new IllegalStateException(\n             \"RecordProperty associated with a property should not be null!\");\n       }\n-      if (declared) {\n         defineDeclaredProperty(\n             property, prop.getType(), prop.getPropertyNode());\n-      } else {\n-        defineSynthesizedProperty(\n-            property, prop.getType(), prop.getPropertyNode());\n-      }\n     }\n \n     // Freeze the record type.\n@@ -110,9 +99,6 @@\n   }\n \n   /** @return Is this synthesized for internal bookkeeping? */\n-  boolean isSynthetic() {\n-    return !declared;\n-  }\n \n   @Override\n   public boolean isEquivalentTo(JSType other) {\n@@ -163,7 +149,6 @@\n     if (that.isRecordType()) {\n       RecordType thatRecord \u003d that.toMaybeRecordType();\n       RecordTypeBuilder builder \u003d new RecordTypeBuilder(registry);\n-      builder.setSynthesized(true);\n \n       // The greatest subtype consists of those *unique* properties of both\n       // record types. If any property conflicts, then the NO_TYPE type\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [2716,3247]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [3806,3866]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SuperConstructorInvocation [3332,3360]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [3365,3386]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "EnhancedForStatement [3392,3745]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [3782,3798]"
        },
        {
          "type": "delete-tree",
          "from": "FieldDeclaration [2678,2709]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ConstructorInvocation [2831,2864]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [2872,4155]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [4159,4271]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [5534,5563]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java",
        "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "com.google.javascript.rhino.jstype.RecordTypeBuilder:build:[]:JSType",
            "com.google.javascript.rhino.jstype.RecordTypeBuilder:setSynthesized:[boolean synthesized]:void"
          ],
          "num": 2
        },
        {
          "qualified_names": [
            "com.google.javascript.rhino.jstype.RecordTypeBuilder:addProperty:[String name, JSType type, Node propertyNode]:RecordTypeBuilder",
            "com.google.javascript.rhino.jstype.RecordTypeBuilder:build:[]:JSType"
          ],
          "num": 2
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "54",
            "63",
            "64",
            "65",
            "96"
          ],
          "num": 5
        },
        {
          "qualified_names": [
            "53",
            "63",
            "92"
          ],
          "num": 3
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java b/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\nindex 60d1e10..345795b 100755\n--- a/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\n+++ b/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\n@@ -51,7 +51,6 @@\n  */\n public class RecordTypeBuilder {\n   private boolean isEmpty \u003d true;\n-  private boolean isDeclared \u003d true;\n   private final JSTypeRegistry registry;\n   private final HashMap\u003cString, RecordProperty\u003e properties \u003d Maps.newHashMap();\n \n@@ -60,9 +59,6 @@\n   }\n \n   /** See the comments on RecordType about synthetic types. */\n-  void setSynthesized(boolean synthesized) {\n-    isDeclared \u003d !synthesized;\n-  }\n \n   /**\n    * Adds a property with the given name and type to the record type.\n@@ -93,7 +89,7 @@\n     }\n \n     return new RecordType(\n-        registry, Collections.unmodifiableMap(properties), isDeclared);\n+        registry, Collections.unmodifiableMap(properties));\n   }\n \n   static class RecordProperty {\n",
      "operations": [
        {
          "type": "delete-tree",
          "from": "FieldDeclaration [1877,1911]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [2125,2265]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: isDeclared [3220,3230]",
          "to": ""
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [
        "com.google.javascript.rhino.jstype.RecordType:isEquivalentTo:[JSType other]:boolean",
        "com.google.javascript.rhino.jstype.RecordTypeBuilder:addProperty:[String name, JSType type, Node propertyNode]:RecordTypeBuilder"
      ],
      "num": 2
    },
    "delete_functions": {
      "qualified_names": [
        "com.google.javascript.rhino.jstype.RecordType:RecordType:[JSTypeRegistry registry, Map\u003cString,RecordProperty\u003e properties, boolean declared]:null",
        "com.google.javascript.rhino.jstype.RecordTypeBuilder:setSynthesized:[boolean synthesized]:void",
        "com.google.javascript.rhino.jstype.ObjectType:defineSynthesizedProperty:[String propertyName, JSType type, Node propertyNode]:boolean",
        "com.google.javascript.rhino.jstype.RecordType:isSynthetic:[]:boolean"
      ],
      "num": 4
    }
  }
}