{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "data/changesInfo/",
  "properties": {
    "trigger.tests": "com.fasterxml.jackson.databind.objectid.TestObjectIdSerialization::testNullStringPropertyId",
    "test.dir": "src/test/java",
    "clz.modified": "com.fasterxml.jackson.databind.deser.impl.ObjectIdValueProperty",
    "src.dir": "src/main/java"
  },
  "timeoutSecond": 100,
  "proj": "JacksonDatabind",
  "id": "43",
  "workingDir": "../bugs/JacksonDatabind_43_tmp",
  "bug_name": "JacksonDatabind_43",
  "derive": "defects4j",
  "trigger_tests": [
    {
      "test_class": "com.fasterxml.jackson.databind.objectid.TestObjectIdSerialization",
      "test_function": "testNullStringPropertyId",
      "assertion_line": "316",
      "exception": "com.fasterxml.jackson.databind.JsonMappingException",
      "message": "Can not deserialize instance of java.lang.String out of VALUE_NULL token"
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/com/fasterxml/jackson/databind/deser/impl/ObjectIdValueProperty.java",
        "src/main/java/com/fasterxml/jackson/databind/deser/impl/ObjectIdValueProperty.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "com.fasterxml.jackson.databind.deser.impl.ObjectIdValueProperty:deserializeSetAndReturn:[JsonParser p, DeserializationContext ctxt, Object instance]:Object"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "com.fasterxml.jackson.databind.deser.impl.ObjectIdValueProperty:deserializeSetAndReturn:[JsonParser p, DeserializationContext ctxt, Object instance]:Object"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "7",
            "85",
            "88"
          ],
          "num": 3
        },
        {
          "qualified_names": [
            "6",
            "78",
            "85"
          ],
          "num": 3
        }
      ],
      "diff": "diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/impl/ObjectIdValueProperty.java b/src/main/java/com/fasterxml/jackson/databind/deser/impl/ObjectIdValueProperty.java\nindex 4847c3c..dc0b05f 100644\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/impl/ObjectIdValueProperty.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/ObjectIdValueProperty.java\n@@ -4,7 +4,6 @@\n import java.lang.annotation.Annotation;\n \n import com.fasterxml.jackson.core.JsonParser;\n-import com.fasterxml.jackson.core.JsonToken;\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.deser.*;\n import com.fasterxml.jackson.databind.introspect.AnnotatedMember;\n@@ -76,16 +75,16 @@\n     public Object deserializeSetAndReturn(JsonParser p,\n     \t\tDeserializationContext ctxt, Object instance) throws IOException\n     {\n+        Object id \u003d _valueDeserializer.deserialize(p, ctxt);\n         /* 02-Apr-2015, tatu: Actually, as per [databind#742], let it be;\n          *  missing or null id is needed for some cases, such as cases where id\n          *  will be generated externally, at a later point, and is not available\n          *  quite yet. Typical use case is with DB inserts.\n          */\n         // note: no null checks (unlike usually); deserializer should fail if one found\n-        if (p.hasToken(JsonToken.VALUE_NULL)) {\n+        if (id \u003d\u003d null) {\n             return null;\n         }\n-        Object id \u003d _valueDeserializer.deserialize(p, ctxt);\n         ReadableObjectId roid \u003d ctxt.findObjectId(id, _objectIdReader.generator, _objectIdReader.resolver);\n         roid.bindItem(instance);\n         // also: may need to set a property value as well\n",
      "operations": [
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "InfixExpression [2832,2842]"
        },
        {
          "type": "delete-tree",
          "from": "ImportDeclaration [167,211]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodInvocation [2816,2848]",
          "to": ""
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  }
}