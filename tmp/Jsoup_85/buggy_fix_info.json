{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "data/changesInfo/",
  "properties": {
    "trigger.tests": "org.jsoup.nodes.AttributeTest::validatesKeysNotEmpty",
    "test.dir": "src/test/java",
    "clz.modified": "org.jsoup.nodes.Attribute",
    "src.dir": "src/main/java"
  },
  "timeoutSecond": 100,
  "proj": "Jsoup",
  "id": "85",
  "workingDir": "../bugs/Jsoup_85_tmp",
  "bug_name": "Jsoup_85",
  "derive": "defects4j",
  "trigger_tests": [
    {
      "test_class": "org.jsoup.nodes.AttributeTest",
      "test_function": "validatesKeysNotEmpty",
      "exception": "junit.framework.AssertionFailedError",
      "message": "Expected exception: java.lang.IllegalArgumentException"
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/jsoup/nodes/Attribute.java",
        "src/main/java/org/jsoup/nodes/Attribute.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.jsoup.nodes.Attribute:Attribute:[String key, String val, Attributes parent]:null"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "org.jsoup.nodes.Attribute:Attribute:[String key, String val, Attributes parent]:null"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "44",
            "46"
          ],
          "num": 2
        },
        {
          "qualified_names": [
            "44"
          ],
          "num": 1
        }
      ],
      "diff": "diff --git a/src/main/java/org/jsoup/nodes/Attribute.java b/src/main/java/org/jsoup/nodes/Attribute.java\nindex e321b6a..612fdeb 100644\n--- a/src/main/java/org/jsoup/nodes/Attribute.java\n+++ b/src/main/java/org/jsoup/nodes/Attribute.java\n@@ -41,9 +41,8 @@\n      * @see #createFromEncoded*/\n     public Attribute(String key, String val, Attributes parent) {\n         Validate.notNull(key);\n-        key \u003d key.trim();\n+        this.key \u003d key.trim();\n         Validate.notEmpty(key); // trimming could potentially make empty, so validate here\n-        this.key \u003d key;\n         this.val \u003d val;\n         this.parent \u003d parent;\n     }\n",
      "operations": [
        {
          "type": "insert-node",
          "from": "",
          "to": "FieldAccess [1686,1694]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "ThisExpression [1686,1690]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [1803,1818]",
          "to": ""
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  }
}