{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "data/changesInfo/",
  "properties": {
    "trigger.tests": "com.fasterxml.jackson.databind.deser.TestCustomDeserializers::testCustomMapValueDeser735",
    "test.dir": "src/test/java",
    "clz.modified": "com.fasterxml.jackson.databind.deser.std.MapDeserializer",
    "src.dir": "src/main/java"
  },
  "timeoutSecond": 100,
  "proj": "JacksonDatabind",
  "id": "12",
  "workingDir": "../bugs/JacksonDatabind_12_tmp",
  "bug_name": "JacksonDatabind_12",
  "derive": "defects4j",
  "trigger_tests": [
    {
      "test_class": "com.fasterxml.jackson.databind.deser.TestCustomDeserializers",
      "test_function": "testCustomMapValueDeser735",
      "assertion_line": "370",
      "exception": "junit.framework.AssertionFailedError",
      "message": "expected:\u003c1\u003e but was:\u003c100\u003e"
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/com/fasterxml/jackson/databind/deser/std/MapDeserializer.java",
        "src/main/java/com/fasterxml/jackson/databind/deser/std/MapDeserializer.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "com.fasterxml.jackson.databind.deser.std.MapDeserializer:isCachable:[]:boolean"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "com.fasterxml.jackson.databind.deser.std.MapDeserializer:isCachable:[]:boolean"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "303",
            "304",
            "305"
          ],
          "num": 3
        },
        {
          "qualified_names": [
            "303"
          ],
          "num": 1
        }
      ],
      "diff": "diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/std/MapDeserializer.java b/src/main/java/com/fasterxml/jackson/databind/deser/std/MapDeserializer.java\nindex a01167f..4785e3f 100644\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/MapDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/MapDeserializer.java\n@@ -300,9 +300,7 @@\n         /* As per [databind#735], existence of value or key deserializer (only passed\n          * if annotated to use non-standard one) should also prevent caching.\n          */\n-        return (_valueDeserializer \u003d\u003d null)\n-                \u0026\u0026 (_keyDeserializer \u003d\u003d null)\n-                \u0026\u0026 (_valueTypeDeserializer \u003d\u003d null)\n+        return (_valueTypeDeserializer \u003d\u003d null)\n                 \u0026\u0026 (_ignorableProperties \u003d\u003d null);\n     }\n \n",
      "operations": [
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ParenthesizedExpression [11785,11813]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ParenthesizedExpression [11833,11859]",
          "to": ""
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  }
}