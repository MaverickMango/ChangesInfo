{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "data/changesInfo/",
  "properties": {
    "trigger.tests": "org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london",
    "test.dir": "src/test/java",
    "clz.modified": "org.joda.time.DateTimeZone",
    "src.dir": "src/main/java"
  },
  "timeoutSecond": 100,
  "proj": "Time",
  "id": "19",
  "workingDir": "../bugs/Time_19_tmp",
  "bug_name": "Time_19",
  "derive": "defects4j",
  "trigger_tests": [
    {
      "test_class": "org.joda.time.TestDateTimeZoneCutover",
      "test_function": "testDateTimeCreation_london",
      "assertion_line": "1266",
      "exception": "junit.framework.ComparisonFailure",
      "message": "expected:\u003c...1-10-30T01:15:00.000[+01:00]\u003e but was:\u003c...1-10-30T01:15:00.000[Z]\u003e"
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/joda/time/DateTimeZone.java",
        "src/main/java/org/joda/time/DateTimeZone.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.joda.time.DateTimeZone:getOffsetFromLocal:[long instantLocal]:int"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "org.joda.time.DateTimeZone:getOffsetFromLocal:[long instantLocal]:int"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "900"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "900"
          ],
          "num": 1
        }
      ],
      "diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex ec05941..855cad0 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -897,7 +897,7 @@\n                     return offsetLocal;\n                 }\n             }\n-        } else if (offsetLocal \u003e\u003d 0) {\n+        } else if (offsetLocal \u003e 0) {\n             long prev \u003d previousTransition(instantAdjusted);\n             if (prev \u003c instantAdjusted) {\n                 int offsetPrev \u003d getOffset(prev);\n",
      "operations": [
        {
          "type": "update-node",
          "from": "",
          "to": ""
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  }
}