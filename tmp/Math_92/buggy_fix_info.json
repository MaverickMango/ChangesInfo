{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "data/changesInfo/",
  "properties": {
    "trigger.tests": "org.apache.commons.math.util.MathUtilsTest::testBinomialCoefficientLarge",
    "test.dir": "src/test",
    "clz.modified": "org.apache.commons.math.util.MathUtils",
    "src.dir": "src/java"
  },
  "timeoutSecond": 100,
  "proj": "Math",
  "id": "92",
  "workingDir": "../bugs/Math_92_tmp",
  "bug_name": "Math_92",
  "derive": "defects4j",
  "trigger_tests": [
    {
      "test_class": "org.apache.commons.math.util.MathUtilsTest",
      "test_function": "testBinomialCoefficientLarge",
      "assertion_line": "195",
      "exception": "junit.framework.AssertionFailedError",
      "message": "48,22 expected:\u003c27385657281648\u003e but was:\u003c27385657281647\u003e"
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/math/util/MathUtils.java",
        "src/java/org/apache/commons/math/util/MathUtils.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.math.util.MathUtils:binomialCoefficient:[final int n, final int k]:long",
            "org.apache.commons.math.util.MathUtils:binomialCoefficientDouble:[final int n, final int k]:double",
            "org.apache.commons.math.util.MathUtils:binomialCoefficientLog:[final int n, final int k]:double"
          ],
          "num": 3
        },
        {
          "qualified_names": [
            "org.apache.commons.math.util.MathUtils:binomialCoefficient:[final int n, final int k]:long",
            "org.apache.commons.math.util.MathUtils:binomialCoefficientDouble:[final int n, final int k]:double"
          ],
          "num": 2
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "185",
            "186",
            "193",
            "194",
            "196",
            "197",
            "198",
            "199",
            "202",
            "209",
            "210",
            "211",
            "212",
            "216",
            "217",
            "218",
            "219",
            "220",
            "247",
            "248",
            "249",
            "250",
            "251",
            "252",
            "253",
            "254",
            "255",
            "256",
            "257",
            "258",
            "259",
            "260",
            "261",
            "262",
            "263",
            "264",
            "265",
            "266",
            "268",
            "269",
            "270",
            "271",
            "273",
            "314",
            "315",
            "316",
            "322",
            "323",
            "324"
          ],
          "num": 49
        },
        {
          "qualified_names": [
            "184",
            "185",
            "186",
            "187",
            "188",
            "236",
            "350"
          ],
          "num": 7
        }
      ],
      "diff": "diff --git a/src/java/org/apache/commons/math/util/MathUtils.java b/src/java/org/apache/commons/math/util/MathUtils.java\nindex 03c92eb..1ae554c 100644\n--- a/src/java/org/apache/commons/math/util/MathUtils.java\n+++ b/src/java/org/apache/commons/math/util/MathUtils.java\n@@ -181,43 +181,30 @@\n         if ((k \u003d\u003d 1) || (k \u003d\u003d n - 1)) {\n             return n;\n         }\n+        long result \u003d Math.round(binomialCoefficientDouble(n, k));\n+        if (result \u003d\u003d Long.MAX_VALUE) {\n+            throw new ArithmeticException(\n+                \"result too large to represent in a long integer\");\n+        }\n         // Use symmetry for large k\n-        if (k \u003e n / 2)\n-            return binomialCoefficient(n, n - k);\n         \n         // We use the formula\n         // (n choose k) \u003d n! / (n-k)! / k!\n         // (n choose k) \u003d\u003d ((n-k+1)*...*n) / (1*...*k)\n         // which could be written\n         // (n choose k) \u003d\u003d (n-1 choose k-1) * n / k\n-        long result \u003d 1;\n-        if (n \u003c\u003d 61) {\n             // For n \u003c\u003d 61, the naive implementation cannot overflow.\n-            for (int j \u003d 1, i \u003d n - k + 1; j \u003c\u003d k; i++, j++) {\n-                result \u003d result * i / j;\n-            }\n-        } else if (n \u003c\u003d 66) {\n             // For n \u003e 61 but n \u003c\u003d 66, the result cannot overflow,\n             // but we must take care not to overflow intermediate values.\n-            for (int j \u003d 1, i \u003d n - k + 1; j \u003c\u003d k; i++, j++) {\n                 // We know that (result * i) is divisible by j,\n                 // but (result * i) may overflow, so we split j:\n                 // Filter out the gcd, d, so j/d and i/d are integer.\n                 // result is divisible by (j/d) because (j/d)\n                 // is relative prime to (i/d) and is a divisor of\n                 // result * (i/d).\n-                long d \u003d gcd(i, j);\n-                result \u003d (result / (j / d)) * (i / d);\n-            }\n-        } else {\n             // For n \u003e 66, a result overflow might occur, so we check\n             // the multiplication, taking care to not overflow\n             // unnecessary.\n-            for (int j \u003d 1, i \u003d n - k + 1; j \u003c\u003d k; i++, j++) {\n-                long d \u003d gcd(i, j);\n-                result \u003d mulAndCheck((result / (j / d)), (i / d));\n-            }\n-        }\n         return result;\n     }\n \n@@ -244,33 +231,9 @@\n      * @throws IllegalArgumentException if preconditions are not met.\n      */\n     public static double binomialCoefficientDouble(final int n, final int k) {\n-        if (n \u003c k) {\n-            throw new IllegalArgumentException(\n-                \"must have n \u003e\u003d k for binomial coefficient (n,k)\");\n-        }\n-        if (n \u003c 0) {\n-            throw new IllegalArgumentException(\n-                \"must have n \u003e\u003d 0 for binomial coefficient (n,k)\");\n-        }\n-        if ((n \u003d\u003d k) || (k \u003d\u003d 0)) {\n-            return 1d;\n-        }\n-        if ((k \u003d\u003d 1) || (k \u003d\u003d n - 1)) {\n-            return n;\n-        }\n-        if (k \u003e n/2) {\n-            return binomialCoefficientDouble(n, n - k);\n-        }\n-        if (n \u003c 67) {\n-            return binomialCoefficient(n,k);\n-        }\n         \n-        double result \u003d 1d;\n-        for (int i \u003d 1; i \u003c\u003d k; i++) {\n-             result *\u003d (double)(n - k + i) / (double)i;\n-        }\n   \n-        return Math.floor(result + 0.5);\n+        return Math.floor(Math.exp(binomialCoefficientLog(n, k)) + 0.5);\n     }\n     \n     /**\n@@ -311,17 +274,11 @@\n          * For values small enough to do exact integer computation,\n          * return the log of the exact value \n          */\n-        if (n \u003c 67) {  \n-            return Math.log(binomialCoefficient(n,k));\n-        }\n         \n         /*\n          * Return the log of binomialCoefficientDouble for values that will not\n          * overflow binomialCoefficientDouble\n          */\n-        if (n \u003c 1030) { \n-            return Math.log(binomialCoefficientDouble(n, k));\n-        } \n         \n         /*\n          * Sum logs for values that could overflow\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [6045,6103]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [6112,6264]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodInvocation [8404,8442]"
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [6081,6145]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [6377,6393]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [6402,7673]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [8790,8928]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [8937,9075]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [9084,9144]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [9153,9216]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [9225,9305]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [9314,9382]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [9400,9419]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ForStatement [9428,9524]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: result [9554,9560]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [10974,11054]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [11221,11309]",
          "to": ""
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [
        "org.apache.commons.math.util.MathUtils:binomialCoefficientLog:[final int n, final int k]:double"
      ],
      "num": 1
    }
  }
}