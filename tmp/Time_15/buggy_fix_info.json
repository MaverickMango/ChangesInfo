{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "data/changesInfo/",
  "properties": {
    "trigger.tests": "org.joda.time.field.TestFieldUtils::testSafeMultiplyLongInt",
    "test.dir": "src/test/java",
    "clz.modified": "org.joda.time.field.FieldUtils",
    "src.dir": "src/main/java"
  },
  "timeoutSecond": 100,
  "proj": "Time",
  "id": "15",
  "workingDir": "../bugs/Time_15_tmp",
  "bug_name": "Time_15",
  "derive": "defects4j",
  "trigger_tests": [
    {
      "test_class": "org.joda.time.field.TestFieldUtils",
      "test_function": "testSafeMultiplyLongInt",
      "assertion_line": "261",
      "exception": "junit.framework.AssertionFailedError",
      "message": ""
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/joda/time/field/FieldUtils.java",
        "src/main/java/org/joda/time/field/FieldUtils.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.joda.time.field.FieldUtils:safeMultiply:[long val1, int val2]:long"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "org.joda.time.field.FieldUtils:safeMultiply:[long val1, int val2]:long"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "138",
            "139",
            "140"
          ],
          "num": 3
        },
        {
          "qualified_names": [
            "137"
          ],
          "num": 1
        }
      ],
      "diff": "diff --git a/src/main/java/org/joda/time/field/FieldUtils.java b/src/main/java/org/joda/time/field/FieldUtils.java\nindex 1e045b2..a0fe7e2 100644\n--- a/src/main/java/org/joda/time/field/FieldUtils.java\n+++ b/src/main/java/org/joda/time/field/FieldUtils.java\n@@ -135,9 +135,6 @@\n     public static long safeMultiply(long val1, int val2) {\n         switch (val2) {\n             case -1:\n-                if (val1 \u003d\u003d Long.MIN_VALUE) {\n-                    throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n-                }\n                 return -val1;\n             case 0:\n                 return 0L;\n",
      "operations": [
        {
          "type": "delete-tree",
          "from": "IfStatement [4607,4764]",
          "to": ""
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  }
}