{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "data/changesInfo/",
  "properties": {
    "trigger.tests": "com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldTypeof,com.google.javascript.jscomp.SourceMapTest::testGoldenOutput0,com.google.javascript.jscomp.SourceMapTest::testGoldenOutput1,com.google.javascript.jscomp.SourceMapTest::testGoldenOutput2,com.google.javascript.jscomp.SourceMapTest::testGoldenOutput3,com.google.javascript.jscomp.SourceMapTest::testGoldenOutput4",
    "test.dir": "test",
    "clz.modified": "com.google.javascript.jscomp.PeepholeFoldConstants,com.google.javascript.jscomp.SourceMap",
    "src.dir": "src"
  },
  "timeoutSecond": 100,
  "proj": "Closure",
  "id": "148",
  "workingDir": "../bugs/Closure_148_tmp",
  "bug_name": "Closure_148",
  "derive": "defects4j",
  "trigger_tests": [
    {
      "test_class": "com.google.javascript.jscomp.PeepholeFoldConstantsTest",
      "test_function": "testFoldTypeof",
      "assertion_line": "552",
      "exception": "junit.framework.AssertionFailedError",
      "message": "Expected: x\u003d\"undefined\"\nResult: x\u003dtypeof void 0"
    },
    {
      "test_class": "com.google.javascript.jscomp.SourceMapTest",
      "test_function": "testGoldenOutput0",
      "assertion_line": "213",
      "exception": "junit.framework.ComparisonFailure",
      "message": "expected:\u003c...ng definitions. **/"
    },
    {
      "test_class": "com.google.javascript.jscomp.SourceMapTest",
      "test_function": "testGoldenOutput1",
      "assertion_line": "213",
      "exception": "junit.framework.ComparisonFailure",
      "message": "expected:\u003c...ode\", \"count\": 1 }"
    },
    {
      "test_class": "com.google.javascript.jscomp.SourceMapTest",
      "test_function": "testGoldenOutput2",
      "assertion_line": "213",
      "exception": "junit.framework.ComparisonFailure",
      "message": "expected:\u003c...ode\", \"count\": 1 }"
    },
    {
      "test_class": "com.google.javascript.jscomp.SourceMapTest",
      "test_function": "testGoldenOutput3",
      "assertion_line": "213",
      "exception": "junit.framework.ComparisonFailure",
      "message": "expected:\u003c...ode\", \"count\": 1 }"
    },
    {
      "test_class": "com.google.javascript.jscomp.SourceMapTest",
      "test_function": "testGoldenOutput4",
      "assertion_line": "213",
      "exception": "junit.framework.ComparisonFailure",
      "message": "expected:\u003c...ode\", \"count\": 1 }"
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/jscomp/PeepholeFoldConstants.java",
        "src/com/google/javascript/jscomp/PeepholeFoldConstants.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "com.google.javascript.jscomp.PeepholeFoldConstants:tryFoldTypeof:[Node originalTypeofNode]:Node"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "com.google.javascript.jscomp.PeepholeFoldConstants:tryFoldTypeof:[Node originalTypeofNode]:Node"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "182",
            "183",
            "184"
          ],
          "num": 3
        },
        {
          "qualified_names": [
            "181"
          ],
          "num": 1
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex f3d9583..1df9098 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -179,9 +179,6 @@\n       case Token.ARRAYLIT:\n         typeNameString \u003d \"object\";\n         break;\n-      case Token.VOID:\n-        typeNameString \u003d \"undefined\";\n-        break;\n       case Token.NAME:\n         // We assume here that programs don\u0027t change the value of the\n         // keyword undefined to something other than the value undefined.\n",
      "operations": [
        {
          "type": "delete-tree",
          "from": "SwitchCase [5059,5075]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [5084,5113]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "BreakStatement [5122,5128]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/jscomp/SourceMap.java",
        "src/com/google/javascript/jscomp/SourceMap.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "com.google.javascript.jscomp.SourceMap:prepMappings:[]:int",
            "com.google.javascript.jscomp.SourceMap\\$MappingTraversal:traverse:[MappingVisitor v]:void",
            "com.google.javascript.jscomp.SourceMap\\$MappingWriter:appendMappings:[Appendable out]:void",
            "com.google.javascript.jscomp.SourceMap\\$LineMapper:appendLineMappings:[]:void",
            "com.google.javascript.jscomp.SourceMap\\$MappingVisitor:visit:[Mapping m, int line, int col, int endLine, int endCol]:void",
            "com.google.javascript.jscomp.SourceMap\\$MappingTraversal:MappingTraversal:[]:null",
            "com.google.javascript.jscomp.SourceMap\\$UsedMappingCheck:visit:[Mapping m, int line, int col, int nextLine, int nextCol]:void",
            "com.google.javascript.jscomp.SourceMap\\$LineMapper:openLine:[]:void",
            "com.google.javascript.jscomp.SourceMap\\$LineMapper:closeLine:[]:void",
            "com.google.javascript.jscomp.SourceMap:escapeString:[String value]:String",
            "com.google.javascript.jscomp.SourceMap:appendTo:[Appendable out, String name]:void",
            "com.google.javascript.jscomp.SourceMap\\$MappingTraversal:maybeVisitParent:[MappingVisitor v, Mapping parent, Mapping m]:void",
            "com.google.javascript.jscomp.SourceMap\\$MappingWriter:appendMappingTo:[Mapping m, Appendable out]:void",
            "com.google.javascript.jscomp.SourceMap\\$MappingTraversal:maybeVisit:[MappingVisitor v, Mapping m]:void",
            "com.google.javascript.jscomp.SourceMap:addMapping:[Node node, Position startPosition, Position endPosition]:void",
            "com.google.javascript.jscomp.SourceMap\\$LineMapper:addCharEntry:[String id]:void",
            "com.google.javascript.jscomp.SourceMap\\$LineMapper:visit:[Mapping m, int line, int col, int nextLine, int nextCol]:void",
            "com.google.javascript.jscomp.SourceMap\\$MappingTraversal:visit:[MappingVisitor v, Mapping m, int nextLine, int nextCol]:void"
          ],
          "num": 18
        },
        {
          "qualified_names": [
            "com.google.javascript.jscomp.SourceMap:appendTo:[Appendable out, String name]:void",
            "com.google.javascript.jscomp.SourceMap:findLastLine:[]:int",
            "com.google.javascript.jscomp.SourceMap:addMapping:[Node node, Position startPosition, Position endPosition]:void",
            "com.google.javascript.jscomp.SourceMap\\$LineMapper:closeLine:[]:void",
            "com.google.javascript.jscomp.SourceMap\\$LineMapper:openLine:[]:void",
            "com.google.javascript.jscomp.SourceMap\\$LineMapper:writeClosedMapping:[Mapping m]:void",
            "com.google.javascript.jscomp.SourceMap:reset:[]:void",
            "com.google.javascript.jscomp.SourceMap\\$LineMapper:getAdjustedCol:[Position p]:int",
            "com.google.javascript.jscomp.SourceMap\\$LineMapper:appendLineMappings:[]:void",
            "com.google.javascript.jscomp.SourceMap\\$LineMapper:addCharEntry:[String id]:void",
            "com.google.javascript.jscomp.SourceMap\\$Mapping:appendTo:[Appendable out]:void",
            "com.google.javascript.jscomp.SourceMap\\$LineMapper:writeCharsBetween:[Mapping prev, Mapping next]:void",
            "com.google.javascript.jscomp.SourceMap\\$LineMapper:writeCharsUpTo:[int nextLine, int nextCol, int id]:void"
          ],
          "num": 13
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "41",
            "51",
            "86",
            "87",
            "89",
            "93",
            "94",
            "95",
            "96",
            "101",
            "102",
            "105",
            "107",
            "108",
            "109",
            "110",
            "111",
            "112",
            "113",
            "114",
            "115",
            "116",
            "117",
            "118",
            "119",
            "120",
            "121",
            "122",
            "123",
            "126",
            "127",
            "129",
            "131",
            "134",
            "136",
            "140",
            "141",
            "142",
            "143",
            "144",
            "145",
            "146",
            "172",
            "193",
            "198",
            "201",
            "202",
            "203",
            "204",
            "205",
            "229",
            "283",
            "323",
            "345",
            "351",
            "353",
            "356",
            "357",
            "358",
            "359",
            "360",
            "361",
            "362",
            "363",
            "364",
            "367",
            "368",
            "370",
            "373",
            "379",
            "380",
            "389",
            "390",
            "392",
            "393",
            "396",
            "397",
            "398",
            "399",
            "401",
            "402",
            "403",
            "404",
            "405",
            "406",
            "407",
            "409",
            "410",
            "411",
            "412",
            "421",
            "424",
            "425",
            "430",
            "431",
            "432",
            "433",
            "434",
            "435",
            "440",
            "441",
            "442",
            "443",
            "444",
            "450",
            "451",
            "452",
            "453",
            "454",
            "455",
            "456",
            "457",
            "458",
            "459",
            "460",
            "465",
            "469",
            "470",
            "471",
            "472",
            "473",
            "474",
            "475",
            "476",
            "478",
            "488",
            "489",
            "490",
            "496",
            "498",
            "499",
            "501",
            "502",
            "505",
            "506",
            "519",
            "525",
            "534",
            "573",
            "579",
            "586",
            "588",
            "589",
            "591",
            "592",
            "593",
            "594",
            "601",
            "602",
            "604",
            "605",
            "609",
            "613"
          ],
          "num": 153
        },
        {
          "qualified_names": [
            "40",
            "50",
            "93",
            "96",
            "101",
            "102",
            "103",
            "104",
            "105",
            "106",
            "107",
            "109",
            "112",
            "143",
            "144",
            "163",
            "164",
            "165",
            "166",
            "167",
            "168",
            "171",
            "172",
            "177",
            "254",
            "257",
            "258",
            "259",
            "260",
            "261",
            "262",
            "263",
            "264",
            "304",
            "326",
            "327",
            "328",
            "329",
            "341",
            "344",
            "345",
            "351",
            "417",
            "426",
            "432",
            "441",
            "443",
            "444",
            "445",
            "446",
            "447",
            "448",
            "449",
            "450",
            "451",
            "452",
            "453",
            "454",
            "455",
            "456",
            "457",
            "458",
            "468",
            "496",
            "502",
            "509",
            "511",
            "512",
            "514",
            "515",
            "522",
            "523",
            "525",
            "526",
            "533",
            "534",
            "535",
            "536",
            "537",
            "538",
            "539",
            "540",
            "541",
            "542",
            "543",
            "570"
          ],
          "num": 86
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/jscomp/SourceMap.java b/src/com/google/javascript/jscomp/SourceMap.java\nindex 698dfde..ff61bdd 100644\n--- a/src/com/google/javascript/jscomp/SourceMap.java\n+++ b/src/com/google/javascript/jscomp/SourceMap.java\n@@ -38,7 +38,6 @@\n  */\n public class SourceMap {\n \n-  private final static int UNMAPPED \u003d -1;\n \n   /**\n    * A mapping from a given position in an input source file to a given position\n@@ -48,7 +47,7 @@\n     /**\n      * A unique ID for this mapping for record keeping purposes.\n      */\n-    int id \u003d UNMAPPED;\n+    int id;\n \n     /**\n      * The input source file.\n@@ -83,67 +82,38 @@\n     /**\n      * Whether the mapping is actually used by the source map.\n      */\n-    boolean used \u003d false;\n-  }\n \n-  private class MappingWriter {\n     /**\n      * Cache of escaped source file name.\n      */\n-    private String lastSourceFile \u003d null;\n-    private String lastSourceFileEscaped \u003d null;\n-    private int lastLine \u003d 0;\n-    private String lastLineString \u003d String.valueOf(0);\n \n     /**\n      * Appends the mapping to the given buffer.\n      */\n-    private void appendMappingTo(\n-        Mapping m, Appendable out) throws IOException {\n+    void appendTo(Appendable out) throws IOException {\n       out.append(\"[\");\n \n-      String sourceFile \u003d m.sourceFile;\n+      out.append(sourceFile);\n       // The source file rarely changes, so cache the escaped string.\n-      String escapedSourceFile;\n-      if (lastSourceFile !\u003d sourceFile) { // yes, s1 !\u003d s2, not !s1.equals(s2)\n-        lastSourceFile \u003d sourceFile;\n-        lastSourceFileEscaped \u003d escapeString(sourceFile);\n-      }\n-      escapedSourceFile \u003d lastSourceFileEscaped;\n-\n-      out.append(escapedSourceFile);\n-      out.append(\",\");\n-\n-      int line \u003d m.originalPosition.getLineNumber();\n-      if (line !\u003d lastLine) {\n-        lastLineString \u003d String.valueOf(line);\n-      }\n-      String lineValue \u003d lastLineString;\n-\n-      out.append(lineValue);\n \n       out.append(\",\");\n-      out.append(String.valueOf(\n-          m.originalPosition.getCharacterIndex()));\n \n-      if (m.originalName !\u003d null) {\n+\n+      out.append(String.valueOf(originalPosition.getLineNumber()));\n+\n+      out.append(\",\");\n+      out.append(String.valueOf(originalPosition.getCharacterIndex()));\n+\n+      if (originalName !\u003d null) {\n         out.append(\",\");\n-        out.append(escapeString(m.originalName));\n+        out.append(originalName);\n       }\n \n-      out.append(\"]\\n\");\n+      out.append(\"]\");\n     }\n-\n     /**\n      * Add used mappings to the supplied Appendable.\n      */\n-    void appendMappings(Appendable out) throws IOException {\n-      for (Mapping m : mappings) {\n-        if (m.used) {\n-          appendMappingTo(m, out);\n-        }\n-      }\n-    }\n   }\n \n   /**\n@@ -170,6 +140,8 @@\n   private static String escapeString(String value) {\n     return CodeGenerator.escapeToDoubleQuotedJsString(value);\n   }\n+  private String lastSourceFile \u003d null;\n+  private String lastSourceFileEscaped \u003d null;\n \n   /**\n    * Adds a mapping for the given node.  Mappings must be added in order.\n@@ -188,21 +160,23 @@\n       return;\n     }\n \n+    String escapedSourceFile;\n+    if (lastSourceFile !\u003d sourceFile) {  // yes, \"s1 !\u003d s2\" not \"!s1.equals(s2)\"\n+      lastSourceFile \u003d sourceFile;\n+      lastSourceFileEscaped \u003d escapeString(sourceFile);\n+    }\n+    escapedSourceFile \u003d lastSourceFileEscaped;\n     // Create the new mapping.\n     Mapping mapping \u003d new Mapping();\n-    mapping.sourceFile \u003d sourceFile;\n+    mapping.id \u003d mappings.size();\n+    mapping.sourceFile \u003d escapedSourceFile;\n     mapping.originalPosition \u003d new Position(node.getLineno(), node.getCharno());\n \n     String originalName \u003d (String)node.getProp(Node.ORIGINALNAME_PROP);\n     if (originalName !\u003d null) {\n-      mapping.originalName \u003d originalName;\n+      mapping.originalName \u003d escapeString(originalName);\n     }\n \n-    if (offsetPosition.getLineNumber() \u003d\u003d 0\n-        \u0026\u0026 offsetPosition.getCharacterIndex() \u003d\u003d 0) {\n-      mapping.startPosition \u003d startPosition;\n-      mapping.endPosition \u003d endPosition;\n-    } else {\n       // If the mapping is found on the first line, we need to offset\n       // its character position by the number of characters found on\n       // the *last* line of the source file to which the code is\n@@ -226,7 +200,6 @@\n       mapping.endPosition \u003d\n           new Position(endPosition.getLineNumber() + offsetLine,\n                        endPosition.getCharacterIndex() + endOffsetPosition);\n-    }\n \n     mappings.add(mapping);\n   }\n@@ -281,6 +254,14 @@\n     prefixPosition \u003d new Position(0, 0);\n   }\n \n+  private int findLastLine() {\n+    int maxLine \u003d 0;\n+    for (Mapping mapping : mappings) {\n+      int endPositionLine \u003d mapping.endPosition.getLineNumber();\n+      maxLine \u003d Math.max(maxLine, endPositionLine);\n+    }\n+    return maxLine + prefixPosition.getLineNumber();\n+  }\n   /**\n    * Appends the source map in LavaBug format to the given buffer.\n    *\n@@ -320,7 +301,7 @@\n     // 11) [\"c.js\", 1, 4]\n     // 12) [\"d.js\", 3, 78, \"foo\"]\n \n-    int maxLine \u003d prepMappings();\n+    int maxLine \u003d findLastLine();\n \n     // Add the line character maps.\n     out.append(\"/** Begin line maps. **/{ \\\"file\\\" : \");\n@@ -342,42 +323,32 @@\n     // Add the mappings themselves.\n     out.append(\"/** Begin mapping definitions. **/\\n\");\n \n-    (new MappingWriter()).appendMappings(out);\n+    for (Mapping mapping : mappings) {\n+      mapping.appendTo(out);\n+      out.append(\"\\n\");\n+    }\n   }\n \n   /**\n    * Assigns sequential ids to used mappings, and returns the last line mapped.\n    */\n-  private int prepMappings() throws IOException {\n     // Mark any unused mappings.\n-    (new MappingTraversal()).traverse(new UsedMappingCheck());\n \n     // Renumber used mappings and keep track of the last line.\n-    int id \u003d 0;\n-    int maxLine \u003d 0;\n-    for (Mapping m : mappings) {\n-      if (m.used) {\n-        m.id \u003d id++;\n-        int endPositionLine \u003d m.endPosition.getLineNumber();\n-        maxLine \u003d Math.max(maxLine, endPositionLine);\n-      }\n-    }\n \n     // Adjust for the prefix.\n-    return maxLine + prefixPosition.getLineNumber();\n-  }\n \n-  private class LineMapper implements MappingVisitor {\n+  private class LineMapper {\n     // The destination.\n     private final Appendable out;\n-\n+    private int line;\n+    private int col;\n     // Whether the current line has had a value written yet.\n     private boolean firstChar \u003d true;\n \n     private final static String UNMAPPED_STRING \u003d \"-1\";\n \n-    private int lastId \u003d UNMAPPED;\n-    private String lastIdString \u003d UNMAPPED_STRING;\n+    private final static int UNMAPPED \u003d -1;\n \n     LineMapper(Appendable out) {\n       this.out \u003d out;\n@@ -386,30 +357,11 @@\n     /**\n      * As each segment is visited write out the appropriate line mapping.\n      */\n-    public void visit(Mapping m, int line, int col, int nextLine, int nextCol)\n-      throws IOException {\n \n-      int id \u003d (m !\u003d null) ? m.id : UNMAPPED;\n-      if (lastId !\u003d id) {\n         // Prevent the creation of unnecessary temporary stings for often\n         // repeated values.\n-        lastIdString \u003d (id \u003d\u003d UNMAPPED) ? UNMAPPED_STRING : String.valueOf(id);\n-        lastId \u003d id;\n-      }\n-      String idString \u003d lastIdString;\n \n-      for (int i \u003d line; i \u003c\u003d nextLine; i++) {\n-        if (i \u003d\u003d nextLine) {\n-          for (int j \u003d col; j \u003c nextCol; j++) {\n-            addCharEntry(idString);\n-          }\n-          break;\n-        }\n \n-        closeLine();\n-        openLine();\n-      }\n-    }\n \n     // Append the line mapping entries.\n     void appendLineMappings() throws IOException {\n@@ -418,64 +370,29 @@\n       // Start the first line.\n       openLine();\n \n-      (new MappingTraversal()).traverse(this);\n \n       // And close the final line.\n-      closeLine();\n-    }\n \n     /**\n      * Begin the entry for a new line.\n      */\n-    private void openLine() throws IOException {\n-      if (out !\u003d null) {\n-        out.append(\"[\");\n-        this.firstChar \u003d true;\n-      }\n-    }\n \n     /**\n      * End the entry for a line.\n      */\n-    private void closeLine() throws IOException {\n-      if (out !\u003d null) {\n-        out.append(\"]\\n\");\n-      }\n-    }\n \n     /**\n      * Add a new char position entry.\n      * @param id The mapping id to record.\n      */\n-    private void addCharEntry(String id) throws IOException {\n-      if (out !\u003d null) {\n-        if (firstChar) {\n-          firstChar \u003d false;\n-        } else {\n-          out.append(\",\");\n-        }\n-        out.append(id);\n-      }\n-    }\n-  }\n \n   /**\n    * Mark any visited mapping as \"used\".\n    */\n-  private class UsedMappingCheck implements MappingVisitor {\n     /**\n      * @throws IOException\n      */\n-    @Override\n-    public void visit(Mapping m, int line, int col, int nextLine, int nextCol)\n-        throws IOException {\n-      if (m !\u003d null) {\n-        m.used \u003d true;\n-      }\n-    }\n-  }\n \n-  private interface MappingVisitor {\n     /**\n      * @param m The mapping for the current code segment. null if the segment\n      *     is unmapped.\n@@ -485,25 +402,15 @@\n      * @param endCol The ending column\n      * @throws IOException\n      */\n-    void visit(Mapping m, int line, int col, int endLine, int endCol)\n-        throws IOException;\n-  }\n \n   /**\n    * Walk the mappings and visit each segment of the mappings, unmapped\n    * segments are visited with a null mapping, unused mapping are not visited.\n    */\n-  private class MappingTraversal {\n     // The last line and column written\n-    private int line;\n-    private int col;\n \n-    MappingTraversal() {\n-    }\n \n     // Append the line mapping entries.\n-    void traverse(MappingVisitor v) throws IOException {\n-      Preconditions.checkState(!mappings.isEmpty());\n \n       // The mapping list is ordered as a pre-order traversal.  The mapping\n       // positions give us enough information to rebuild the stack and this\n@@ -516,13 +423,13 @@\n         // closed in the reverse order of when they encountered.\n         while (!stack.isEmpty() \u0026\u0026 !isOverlapped(stack.peek(), m)) {\n           Mapping previous \u003d stack.pop();\n-          maybeVisit(v, previous);\n+          writeClosedMapping(previous);\n         }\n \n         // Any gaps between the current line position and the start of the\n         // current mapping belong to the parent.\n         Mapping parent \u003d stack.peek();\n-        maybeVisitParent(v, parent, m);\n+        writeCharsBetween(parent, m);\n \n         stack.push(m);\n       }\n@@ -531,8 +438,24 @@\n       // mappings in the reverse order of when they encountered.\n       while (!stack.isEmpty()) {\n         Mapping m \u003d stack.pop();\n-        maybeVisit(v, m);\n+        writeClosedMapping(m);\n       }\n+      closeLine();\n+    }\n+    private void openLine() throws IOException {\n+      out.append(\"[\");\n+      this.firstChar \u003d true;\n+    }\n+    private void closeLine() throws IOException {\n+      out.append(\"]\\n\");\n+    }\n+    private void addCharEntry(String id) throws IOException {\n+      if (firstChar) {\n+        firstChar \u003d false;\n+      } else {\n+        out.append(\",\");\n+      }\n+      out.append(id);\n     }\n \n     /**\n@@ -570,47 +493,54 @@\n      * Write any needed entries from the current position to the end of the\n      * provided mapping.\n      */\n-    private void maybeVisit(MappingVisitor v, Mapping m) throws IOException {\n+    private void writeClosedMapping(Mapping m) throws IOException {\n       int nextLine \u003d getAdjustedLine(m.endPosition);\n       int nextCol \u003d getAdjustedCol(m.endPosition);\n       // If this anything remaining in this mapping beyond the\n       // current line and column position, write it out now.\n       if (line \u003c nextLine || (line \u003d\u003d nextLine \u0026\u0026 col \u003c nextCol)) {\n-        visit(v, m, nextLine, nextCol);\n+        writeCharsUpTo(nextLine, nextCol, m.id);\n       }\n     }\n \n     /**\n      * Write any needed entries to complete the provided mapping.\n      */\n-    private void maybeVisitParent(MappingVisitor v, Mapping parent, Mapping m)\n+    private void writeCharsBetween(Mapping prev, Mapping next)\n         throws IOException {\n-      int nextLine \u003d getAdjustedLine(m.startPosition);\n-      int nextCol \u003d getAdjustedCol(m.startPosition);\n+      int nextLine \u003d getAdjustedLine(next.startPosition);\n+      int nextCol \u003d getAdjustedCol(next.startPosition);\n       // If the previous value is null, no mapping exists.\n-      Preconditions.checkState(line \u003c nextLine || col \u003c\u003d nextCol);\n-      if (line \u003c nextLine || (line \u003d\u003d nextLine \u0026\u0026 col \u003c nextCol)) {\n-        visit(v, parent, nextLine, nextCol);\n-      }\n+      int id \u003d (prev !\u003d null) ? prev.id : UNMAPPED;\n+      writeCharsUpTo(nextLine, nextCol, id);\n     }\n \n     /**\n      * Write any entries needed between the current position the next position\n      * and update the current position.\n      */\n-    private void visit(MappingVisitor v, Mapping m,\n-        int nextLine, int nextCol)\n+    private void writeCharsUpTo(\n+        int nextLine, int nextCol, int id)\n         throws IOException {\n-      Preconditions.checkState(line \u003c\u003d nextLine);\n-      Preconditions.checkState(line \u003c nextLine || col \u003c nextCol);\n+      Preconditions.checkState(line \u003c\u003d nextLine, \"\");\n+      Preconditions.checkState(line \u003c nextLine || col \u003c\u003d nextCol);\n \n       if (line \u003d\u003d nextLine \u0026\u0026 col \u003d\u003d nextCol) {\n         // Nothing to do.\n-        Preconditions.checkState(false);\n         return;\n       }\n \n-      v.visit(m, line, col, nextLine, nextCol);\n+      String idString \u003d (id \u003d\u003d UNMAPPED) ? UNMAPPED_STRING : String.valueOf(id);\n+      for (int i \u003d line; i \u003c\u003d nextLine; i++) {\n+        if (i \u003d\u003d nextLine) {\n+          for (int j \u003d col; j \u003c nextCol; j++) {\n+            addCharEntry(idString);\n+          }\n+          break;\n+        }\n+        closeLine();\n+        openLine();\n+      }\n \n       line \u003d nextLine;\n       col \u003d nextCol;\n",
      "operations": [
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [10290,10379]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [15418,15863]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [15869,16705]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [4416,4441]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [4446,4619]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [4624,4666]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [4739,4768]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [4773,4812]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "EnhancedForStatement [10189,10282]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [10907,10992]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [12441,12490]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "EnhancedForStatement [12497,13197]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "WhileStatement [13344,13442]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: originalName [2732,2744]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [15358,15398]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "MethodInvocation [5028,5054]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "METHOD_INVOCATION_RECEIVER [2574,2580]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: escapeString [5028,5040]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "METHOD_INVOCATION_ARGUMENTS [5041,5053]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodInvocation [2589,2621]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: originalPosition [2681,2697]"
        },
        {
          "type": "delete-node",
          "from": "SimpleName: UNMAPPED [1417,1425]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: private [2647,2654]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SingleVariableDeclaration [2685,2694]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [2763,2796]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [2873,2898]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [2905,3080]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [3087,3129]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [3198,3244]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [3251,3329]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [3336,3370]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "QualifiedName: m.originalName [3604,3618]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "QualifiedName: m.originalPosition [3468,3486]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "QualifiedName: m.originalName [3521,3535]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "FieldDeclaration [2206,2306]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: private [2314,2321]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TYPE_DECLARATION_KIND: class [2322,2327]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: MappingWriter [2328,2341]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "FieldDeclaration [2497,2522]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "FieldDeclaration [2527,2577]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [3667,3908]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TypeDeclaration [2314,3912]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "Javadoc [2348,2401]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [5384,5416]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "InfixExpression [5661,5747]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "Block [5749,5842]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Block [5848,6798]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "IfStatement [5657,6798]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "Javadoc [10761,10850]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [10887,10898]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [10938,10996]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [11065,11076]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "QualifiedName: m.used [11141,11147]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [11159,11171]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Block [11149,11294]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "IfStatement [11137,11294]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [10711,10753]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [11428,11442]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "FieldDeclaration [11665,11695]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "FieldDeclaration [11700,11746]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [11814,12583]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [12786,12826]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "Javadoc [12893,12943]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "InfixExpression [13003,13014]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Block [13016,13081]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "IfStatement [12999,13081]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "Javadoc [13093,13137]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "InfixExpression [13198,13209]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Block [13211,13247]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "IfStatement [13194,13247]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "Javadoc [13259,13351]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "InfixExpression [13424,13435]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Block [13437,13578]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "IfStatement [13420,13578]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SingleVariableDeclaration [17271,17287]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [17625,17656]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TypeDeclaration [13592,13932]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TypeDeclaration [13936,14415]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "Javadoc [14419,14579]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: private [14582,14589]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TYPE_DECLARATION_KIND: class [14590,14595]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: MappingTraversal [14596,14612]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [14703,14729]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [14775,16100]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [17676,18222]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [18228,18830]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TypeDeclaration [14419,18834]",
          "to": ""
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [
        "com.google.javascript.jscomp.SourceMap\\$LineMapper:writeCharsUpTo:[int nextLine, int nextCol, int id]:void",
        "com.google.javascript.jscomp.SourceMap\\$LineMapper:getAdjustedCol:[Position p]:int",
        "com.google.javascript.jscomp.SourceMap\\$LineMapper:writeClosedMapping:[Mapping m]:void",
        "com.google.javascript.jscomp.SourceMap\\$Mapping:appendTo:[Appendable out]:void",
        "com.google.javascript.jscomp.SourceMap:findLastLine:[]:int",
        "com.google.javascript.jscomp.SourceMap\\$LineMapper:writeCharsBetween:[Mapping prev, Mapping next]:void",
        "com.google.javascript.jscomp.SourceMap:reset:[]:void"
      ],
      "num": 7
    },
    "delete_functions": {
      "qualified_names": [
        "com.google.javascript.jscomp.SourceMap:prepMappings:[]:int",
        "com.google.javascript.jscomp.SourceMap\\$MappingVisitor:visit:[Mapping m, int line, int col, int endLine, int endCol]:void",
        "com.google.javascript.jscomp.SourceMap\\$MappingTraversal:maybeVisit:[MappingVisitor v, Mapping m]:void",
        "com.google.javascript.jscomp.SourceMap\\$MappingTraversal:MappingTraversal:[]:null",
        "com.google.javascript.jscomp.SourceMap\\$MappingTraversal:visit:[MappingVisitor v, Mapping m, int nextLine, int nextCol]:void",
        "com.google.javascript.jscomp.SourceMap\\$MappingTraversal:traverse:[MappingVisitor v]:void",
        "com.google.javascript.jscomp.SourceMap\\$MappingTraversal:maybeVisitParent:[MappingVisitor v, Mapping parent, Mapping m]:void",
        "com.google.javascript.jscomp.SourceMap\\$LineMapper:visit:[Mapping m, int line, int col, int nextLine, int nextCol]:void",
        "com.google.javascript.jscomp.SourceMap\\$MappingWriter:appendMappings:[Appendable out]:void",
        "com.google.javascript.jscomp.SourceMap\\$UsedMappingCheck:visit:[Mapping m, int line, int col, int nextLine, int nextCol]:void",
        "com.google.javascript.jscomp.SourceMap:escapeString:[String value]:String",
        "com.google.javascript.jscomp.SourceMap\\$MappingWriter:appendMappingTo:[Mapping m, Appendable out]:void"
      ],
      "num": 12
    }
  }
}