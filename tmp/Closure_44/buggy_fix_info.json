{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "data/changesInfo/",
  "properties": {
    "trigger.tests": "com.google.javascript.jscomp.CodePrinterTest::testIssue620",
    "test.dir": "test",
    "clz.modified": "com.google.javascript.jscomp.CodeConsumer",
    "src.dir": "src"
  },
  "timeoutSecond": 100,
  "proj": "Closure",
  "id": "44",
  "workingDir": "../bugs/Closure_44_tmp",
  "bug_name": "Closure_44",
  "derive": "defects4j",
  "trigger_tests": [
    {
      "test_class": "com.google.javascript.jscomp.CodePrinterTest",
      "test_function": "testIssue620",
      "assertion_line": "1283",
      "exception": "junit.framework.ComparisonFailure",
      "message": "expected:\u003calert(/ //[ ]/ /)\u003e but was:\u003calert(/ //[]/ /)\u003e"
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/jscomp/CodeConsumer.java",
        "src/com/google/javascript/jscomp/CodeConsumer.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "com.google.javascript.jscomp.CodeConsumer:add:[String newcode]:void"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "com.google.javascript.jscomp.CodeConsumer:add:[String newcode]:void"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "194",
            "200"
          ],
          "num": 2
        },
        {
          "qualified_names": [
            "193"
          ],
          "num": 1
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/jscomp/CodeConsumer.java b/src/com/google/javascript/jscomp/CodeConsumer.java\nindex 8023324..4755665 100644\n--- a/src/com/google/javascript/jscomp/CodeConsumer.java\n+++ b/src/com/google/javascript/jscomp/CodeConsumer.java\n@@ -191,13 +191,11 @@\n       // need space to separate. This is not pretty printing.\n       // For example: \"return foo;\"\n       append(\" \");\n-    } else if (c \u003d\u003d \u0027/\u0027 \u0026\u0026 getLastChar() \u003d\u003d \u0027/\u0027) {\n       // Do not allow a forward slash to appear after a DIV.\n       // For example,\n       // REGEXP DIV REGEXP\n       // is valid and should print like\n       // / // / /\n-      append(\" \");\n     }\n \n     append(newcode);\n",
      "operations": [
        {
          "type": "delete-tree",
          "from": "IfStatement [4147,4379]",
          "to": ""
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  }
}