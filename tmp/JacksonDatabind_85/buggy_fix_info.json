{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "data/changesInfo/",
  "properties": {
    "trigger.tests": "com.fasterxml.jackson.databind.ser.DateSerializationTest::testFormatWithoutPattern",
    "test.dir": "src/test/java",
    "clz.modified": "com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase",
    "src.dir": "src/main/java"
  },
  "timeoutSecond": 100,
  "proj": "JacksonDatabind",
  "id": "85",
  "workingDir": "../bugs/JacksonDatabind_85_tmp",
  "bug_name": "JacksonDatabind_85",
  "derive": "defects4j",
  "trigger_tests": [
    {
      "test_class": "com.fasterxml.jackson.databind.ser.DateSerializationTest",
      "test_function": "testFormatWithoutPattern",
      "assertion_line": "316",
      "exception": "junit.framework.ComparisonFailure",
      "message": "expected:\u003c{\"date\":\"1970-01-01[X01:00:]00\"}\u003e but was:\u003c{\"date\":\"1970-01-01[T01:00:00.000+01]00\"}\u003e"
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java",
        "src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase:createContextual:[SerializerProvider serializers, BeanProperty property]:JsonSerializer\u003c?\u003e"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase:createContextual:[SerializerProvider serializers, BeanProperty property]:JsonSerializer\u003c?\u003e"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "67",
            "71",
            "72",
            "73",
            "79",
            "80",
            "81",
            "83",
            "84",
            "85",
            "87",
            "89",
            "90",
            "91",
            "92",
            "93",
            "94",
            "95",
            "96",
            "97",
            "98",
            "103",
            "105",
            "106",
            "107",
            "108",
            "109",
            "110",
            "112",
            "113",
            "114",
            "115",
            "116",
            "117",
            "118",
            "119",
            "120",
            "121"
          ],
          "num": 38
        },
        {
          "qualified_names": [
            "67",
            "68",
            "69",
            "70",
            "71",
            "72",
            "76",
            "77",
            "78",
            "79",
            "94"
          ],
          "num": 11
        }
      ],
      "diff": "diff --git a/src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java b/src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java\nindex 4b9312b..df3205c 100644\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java\n@@ -64,61 +64,34 @@\n \n         // 08-Jun-2017, tatu: With [databind#1648], this gets bit tricky..\n         // First: custom pattern will override things\n-        if (format.hasPattern()) {\n+                if ((shape \u003d\u003d JsonFormat.Shape.STRING) || format.hasPattern()\n+                                || format.hasLocale() || format.hasTimeZone()) {\n+                    TimeZone tz \u003d format.getTimeZone();\n+                    final String pattern \u003d format.hasPattern()\n+                                    ? format.getPattern()\n+                                    : StdDateFormat.DATE_FORMAT_STR_ISO8601;\n             final Locale loc \u003d format.hasLocale()\n                             ? format.getLocale()\n                             : serializers.getLocale();\n-            SimpleDateFormat df \u003d new SimpleDateFormat(format.getPattern(), loc);\n-            TimeZone tz \u003d format.hasTimeZone() ? format.getTimeZone()\n-                    : serializers.getTimeZone();\n+                    SimpleDateFormat df \u003d new SimpleDateFormat(pattern, loc);\n+                    if (tz \u003d\u003d null) {\n+                        tz \u003d serializers.getTimeZone();\n+                    }\n             df.setTimeZone(tz);\n             return withFormat(Boolean.FALSE, df);\n         }\n \n         // Otherwise, need one of these changes:\n-        final boolean hasLocale \u003d format.hasLocale();\n-        final boolean hasTZ \u003d format.hasTimeZone();\n-        final boolean asString \u003d (shape \u003d\u003d JsonFormat.Shape.STRING);\n \n-        if (!hasLocale \u0026\u0026 !hasTZ \u0026\u0026 !asString) {\n-            return this;\n-        }\n \n-        DateFormat df0 \u003d serializers.getConfig().getDateFormat();\n         // Jackson\u0027s own `StdDateFormat` is quite easy to deal with...\n-        if (df0 instanceof StdDateFormat) {\n-            StdDateFormat std \u003d (StdDateFormat) df0;\n-            if (format.hasLocale()) {\n-                std \u003d std.withLocale(format.getLocale());\n-            }\n-            if (format.hasTimeZone()) {\n-                std \u003d std.withTimeZone(format.getTimeZone());\n-            }\n-            return withFormat(Boolean.FALSE, std);\n-        }\n \n         // 08-Jun-2017, tatu: Unfortunately there\u0027s no generally usable\n         //    mechanism for changing `DateFormat` instances (or even clone()ing)\n         //    So: require it be `SimpleDateFormat`; can\u0027t config other types\n-        if (!(df0 instanceof SimpleDateFormat)) {\n //            serializers.reportBadDefinition(handledType(), String.format(\n-            serializers.reportMappingProblem(\n-\"Configured `DateFormat` (%s) not a `SimpleDateFormat`; can not configure `Locale` or `TimeZone`\",\n-df0.getClass().getName());\n-        }\n-        SimpleDateFormat df \u003d (SimpleDateFormat) df0;\n-        if (hasLocale) {\n             // Ugh. No way to change `Locale`, create copy; must re-crete completely:\n-            df \u003d new SimpleDateFormat(df.toPattern(), format.getLocale());\n-        } else {\n-            df \u003d (SimpleDateFormat) df.clone();\n-        }\n-        TimeZone newTz \u003d format.getTimeZone();\n-        boolean changeTZ \u003d (newTz !\u003d null) \u0026\u0026 !newTz.equals(df.getTimeZone());\n-        if (changeTZ) {\n-            df.setTimeZone(newTz);\n-        }\n-        return withFormat(Boolean.FALSE, df);\n+        return this;\n     }\n \n     /*\n",
      "operations": [
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "InfixExpression [2266,2401]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ParenthesizedExpression [2266,2300]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "INFIX_EXPRESSION_OPERATOR: || [2301,2303]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodInvocation [2359,2377]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodInvocation [2381,2401]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "VariableDeclarationStatement [2833,2890]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "IfStatement [2911,3006]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: final [2481,2486]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SimpleType [2833,2849]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "VariableDeclarationFragment [2850,2889]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "InfixExpression [2915,2925]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Block [2927,3006]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "ConditionalExpression [2504,2657]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "ClassInstanceCreation [2855,2889]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "ExpressionStatement [2953,2984]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodInvocation [2504,2523]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "QualifiedName: StdDateFormat.DATE_FORMAT_STR_ISO8601 [2620,2657]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: pattern [2876,2883]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: loc [2885,2888]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Assignment [2953,2983]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "ASSIGNMENT_OPERATOR: \u003d [2956,2957]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [2473,2489]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: loc [2511,2514]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "ClassInstanceCreation [2469,2515]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [2529,2537]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodInvocation [2543,2563]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodInvocation [2566,2586]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "ConditionalExpression [2543,2634]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "VariableDeclarationFragment [2538,2634]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "VariableDeclarationStatement [2529,2635]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [2786,2831]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [2840,2883]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [2892,2952]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "InfixExpression [2966,2999]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Block [3001,3037]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "IfStatement [2962,3037]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [3047,3104]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [3184,3559]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [3799,4098]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [4107,4152]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: hasLocale [4165,4174]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "ASSIGNMENT_OPERATOR: \u003d [4279,4280]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodInvocation [4302,4316]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodInvocation [4318,4336]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "ClassInstanceCreation [4281,4337]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Assignment [4276,4337]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "ExpressionStatement [4276,4338]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Block [4176,4348]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "Block [4354,4413]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "IfStatement [4161,4413]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [4469,4539]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [4548,4608]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ReturnStatement [4617,4654]",
          "to": ""
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  }
}