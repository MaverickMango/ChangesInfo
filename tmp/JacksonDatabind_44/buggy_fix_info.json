{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "data/changesInfo/",
  "properties": {
    "trigger.tests": "com.fasterxml.jackson.databind.jsontype.TestSubtypes::testIssue1125WithDefault",
    "test.dir": "src/test/java",
    "clz.modified": "com.fasterxml.jackson.databind.type.SimpleType",
    "src.dir": "src/main/java"
  },
  "timeoutSecond": 100,
  "proj": "JacksonDatabind",
  "id": "44",
  "workingDir": "../bugs/JacksonDatabind_44_tmp",
  "bug_name": "JacksonDatabind_44",
  "derive": "defects4j",
  "trigger_tests": [
    {
      "test_class": "com.fasterxml.jackson.databind.jsontype.TestSubtypes",
      "test_function": "testIssue1125WithDefault",
      "assertion_line": "319",
      "exception": "com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException",
      "message": "Unrecognized field \"b\" (class com.fasterxml.jackson.databind.jsontype.TestSubtypes$Default1125), not marked as ignorable (2 known properties: \"a\", \"def\"])"
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/com/fasterxml/jackson/databind/type/SimpleType.java",
        "src/main/java/com/fasterxml/jackson/databind/type/SimpleType.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "com.fasterxml.jackson.databind.type.SimpleType:_narrow:[Class\u003c?\u003e subclass]:JavaType"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "com.fasterxml.jackson.databind.type.SimpleType:_narrow:[Class\u003c?\u003e subclass]:JavaType"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "132",
            "139",
            "141",
            "142",
            "143",
            "144",
            "145",
            "146",
            "147",
            "148",
            "149",
            "150",
            "152",
            "153",
            "154",
            "155",
            "156",
            "157",
            "158",
            "159",
            "160",
            "161",
            "162",
            "163",
            "165",
            "166"
          ],
          "num": 26
        },
        {
          "qualified_names": [
            "131"
          ],
          "num": 1
        }
      ],
      "diff": "diff --git a/src/main/java/com/fasterxml/jackson/databind/type/SimpleType.java b/src/main/java/com/fasterxml/jackson/databind/type/SimpleType.java\nindex 0273c70..09fae77 100644\n--- a/src/main/java/com/fasterxml/jackson/databind/type/SimpleType.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/type/SimpleType.java\n@@ -129,41 +129,15 @@\n         // 15-Jan-2016, tatu: Almost yes, but there are some complications with\n         //    placeholder values (`Void`, `NoClass`), so can not quite do yet.\n         // TODO: fix in 2.8\n-        if (!_class.isAssignableFrom(subclass)) {\n             /*\n             throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" not sub-type of \"\n                     +_class.getName());\n                     */\n             return new SimpleType(subclass, _bindings, this, _superInterfaces,\n                     _valueHandler, _typeHandler, _asStatic);\n-        }\n         // Otherwise, stitch together the hierarchy. First, super-class\n-        Class\u003c?\u003e next \u003d subclass.getSuperclass();\n-        if (next \u003d\u003d _class) { // straight up parent class? Great.\n-            return new SimpleType(subclass, _bindings, this,\n-                    _superInterfaces, _valueHandler, _typeHandler, _asStatic);\n-        }\n-        if ((next !\u003d null) \u0026\u0026 _class.isAssignableFrom(next)) {\n-            JavaType superb \u003d _narrow(next);\n-            return new SimpleType(subclass, _bindings, superb,\n-                    null, _valueHandler, _typeHandler, _asStatic);\n-        }\n         // if not found, try a super-interface\n-        Class\u003c?\u003e[] nextI \u003d subclass.getInterfaces();\n-        for (Class\u003c?\u003e iface : nextI) {\n-            if (iface \u003d\u003d _class) { // directly implemented\n-                return new SimpleType(subclass, _bindings, null,\n-                        new JavaType[] { this }, _valueHandler, _typeHandler, _asStatic);\n-            }\n-            if (_class.isAssignableFrom(iface)) { // indirect, so recurse\n-                JavaType superb \u003d _narrow(iface);\n-                return new SimpleType(subclass, _bindings, null,\n-                        new JavaType[] { superb }, _valueHandler, _typeHandler, _asStatic);\n-            }\n-        }\n         // should not get here but...\n-        throw new IllegalArgumentException(\"Internal error: Can not resolve sub-type for Class \"+subclass.getName()+\" to \"\n-                +_class.getName());\n     }\n     \n     @Override\n",
      "operations": [
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "PrefixExpression [4976,5010]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Block [5012,5336]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "IfStatement [4972,5336]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [5417,5458]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [5467,5674]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [5683,5922]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [5978,6022]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "EnhancedForStatement [6031,6594]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ThrowStatement [6641,6791]",
          "to": ""
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  }
}