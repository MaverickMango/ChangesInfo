{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "data/changesInfo/",
  "properties": {
    "trigger.tests": "com.fasterxml.jackson.databind.jsontype.TestDefaultWithCreators::testWithCreatorAndJsonValue,com.fasterxml.jackson.databind.jsontype.ext.ExternalTypeIdTest::testWithAsValue",
    "test.dir": "src/test/java",
    "clz.modified": "com.fasterxml.jackson.databind.ser.std.JsonValueSerializer",
    "src.dir": "src/main/java"
  },
  "timeoutSecond": 100,
  "proj": "JacksonDatabind",
  "id": "60",
  "workingDir": "../bugs/JacksonDatabind_60_tmp",
  "bug_name": "JacksonDatabind_60",
  "derive": "defects4j",
  "trigger_tests": [
    {
      "test_class": "com.fasterxml.jackson.databind.jsontype.TestDefaultWithCreators",
      "test_function": "testWithCreatorAndJsonValue",
      "assertion_line": "94",
      "exception": "junit.framework.AssertionFailedError",
      "message": "expected:\u003cclass com.fasterxml.jackson.databind.jsontype.TestDefaultWithCreators$Bean1385\u003e but was:\u003cclass [B\u003e"
    },
    {
      "test_class": "com.fasterxml.jackson.databind.jsontype.ext.ExternalTypeIdTest",
      "test_function": "testWithAsValue",
      "assertion_line": "476",
      "exception": "junit.framework.ComparisonFailure",
      "message": "expected:\u003c...alue\":12345,\"type\":\"[thingy]\"}\u003e but was:\u003c...alue\":12345,\"type\":\"[date]\"}\u003e"
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/com/fasterxml/jackson/databind/ser/std/JsonValueSerializer.java",
        "src/main/java/com/fasterxml/jackson/databind/ser/std/JsonValueSerializer.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "com.fasterxml.jackson.databind.ser.std.JsonValueSerializer\\$TypeSerializerRerouter:writeTypeSuffixForScalar:[Object value, JsonGenerator gen]:void",
            "com.fasterxml.jackson.databind.ser.std.JsonValueSerializer\\$TypeSerializerRerouter:writeCustomTypePrefixForArray:[Object value, JsonGenerator gen, String typeId]:void",
            "com.fasterxml.jackson.databind.ser.std.JsonValueSerializer\\$TypeSerializerRerouter:writeTypeSuffixForObject:[Object value, JsonGenerator gen]:void",
            "com.fasterxml.jackson.databind.ser.std.JsonValueSerializer\\$TypeSerializerRerouter:writeCustomTypeSuffixForObject:[Object value, JsonGenerator gen, String typeId]:void",
            "com.fasterxml.jackson.databind.ser.std.JsonValueSerializer\\$TypeSerializerRerouter:writeCustomTypePrefixForObject:[Object value, JsonGenerator gen, String typeId]:void",
            "com.fasterxml.jackson.databind.ser.std.JsonValueSerializer\\$TypeSerializerRerouter:writeTypePrefixForArray:[Object value, JsonGenerator gen, Class\u003c?\u003e type]:void",
            "com.fasterxml.jackson.databind.ser.std.JsonValueSerializer\\$TypeSerializerRerouter:writeCustomTypeSuffixForArray:[Object value, JsonGenerator gen, String typeId]:void",
            "com.fasterxml.jackson.databind.ser.std.JsonValueSerializer\\$TypeSerializerRerouter:forProperty:[BeanProperty prop]:TypeSerializer",
            "com.fasterxml.jackson.databind.ser.std.JsonValueSerializer\\$TypeSerializerRerouter:writeTypePrefixForObject:[Object value, JsonGenerator gen]:void",
            "com.fasterxml.jackson.databind.ser.std.JsonValueSerializer\\$TypeSerializerRerouter:writeTypePrefixForObject:[Object value, JsonGenerator gen, Class\u003c?\u003e type]:void",
            "com.fasterxml.jackson.databind.ser.std.JsonValueSerializer\\$TypeSerializerRerouter:writeTypePrefixForScalar:[Object value, JsonGenerator gen, Class\u003c?\u003e type]:void",
            "com.fasterxml.jackson.databind.ser.std.JsonValueSerializer\\$TypeSerializerRerouter:writeTypePrefixForScalar:[Object value, JsonGenerator gen]:void",
            "com.fasterxml.jackson.databind.ser.std.JsonValueSerializer\\$TypeSerializerRerouter:getPropertyName:[]:String",
            "com.fasterxml.jackson.databind.ser.std.JsonValueSerializer\\$TypeSerializerRerouter:getTypeIdResolver:[]:TypeIdResolver",
            "com.fasterxml.jackson.databind.ser.std.JsonValueSerializer\\$TypeSerializerRerouter:TypeSerializerRerouter:[TypeSerializer ts, Object ob]:null",
            "com.fasterxml.jackson.databind.ser.std.JsonValueSerializer\\$TypeSerializerRerouter:writeTypeSuffixForArray:[Object value, JsonGenerator gen]:void",
            "com.fasterxml.jackson.databind.ser.std.JsonValueSerializer:serializeWithType:[Object bean, JsonGenerator gen, SerializerProvider provider, TypeSerializer typeSer0]:void",
            "com.fasterxml.jackson.databind.ser.std.JsonValueSerializer\\$TypeSerializerRerouter:writeCustomTypePrefixForScalar:[Object value, JsonGenerator gen, String typeId]:void",
            "com.fasterxml.jackson.databind.ser.std.JsonValueSerializer\\$TypeSerializerRerouter:writeCustomTypeSuffixForScalar:[Object value, JsonGenerator gen, String typeId]:void",
            "com.fasterxml.jackson.databind.ser.std.JsonValueSerializer\\$TypeSerializerRerouter:writeTypePrefixForArray:[Object value, JsonGenerator gen]:void",
            "com.fasterxml.jackson.databind.ser.std.JsonValueSerializer\\$TypeSerializerRerouter:getTypeInclusion:[]:As"
          ],
          "num": 21
        },
        {
          "qualified_names": [
            "com.fasterxml.jackson.databind.ser.std.JsonValueSerializer:serializeWithType:[Object bean, JsonGenerator gen, SerializerProvider provider, TypeSerializer typeSer0]:void"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "9",
            "18",
            "228",
            "229",
            "366",
            "367",
            "368",
            "369",
            "370",
            "372",
            "373",
            "374",
            "375",
            "377",
            "378",
            "379",
            "380",
            "382",
            "383",
            "384",
            "385",
            "387",
            "388",
            "389",
            "390",
            "392",
            "393",
            "394",
            "395",
            "397",
            "398",
            "399",
            "400",
            "402",
            "403",
            "404",
            "405",
            "407",
            "408",
            "409",
            "410",
            "412",
            "413",
            "414",
            "415",
            "417",
            "418",
            "419",
            "420",
            "422",
            "423",
            "424",
            "425",
            "427",
            "428",
            "429",
            "431",
            "432",
            "433",
            "435",
            "436",
            "437",
            "439",
            "440",
            "441",
            "442",
            "443",
            "445",
            "446",
            "447",
            "448",
            "450",
            "451",
            "452",
            "453",
            "455",
            "456",
            "457",
            "458",
            "460",
            "461",
            "462",
            "463",
            "465",
            "466",
            "467",
            "468",
            "469"
          ],
          "num": 88
        },
        {
          "qualified_names": [
            "8",
            "18",
            "226",
            "368"
          ],
          "num": 4
        }
      ],
      "diff": "diff --git a/src/main/java/com/fasterxml/jackson/databind/ser/std/JsonValueSerializer.java b/src/main/java/com/fasterxml/jackson/databind/ser/std/JsonValueSerializer.java\nindex 538796d..c7cb812 100644\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/JsonValueSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/JsonValueSerializer.java\n@@ -6,7 +6,6 @@\n import java.util.LinkedHashSet;\n import java.util.Set;\n \n-import com.fasterxml.jackson.annotation.JsonTypeInfo.As;\n import com.fasterxml.jackson.core.*;\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n@@ -15,7 +14,6 @@\n import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;\n import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonStringFormatVisitor;\n import com.fasterxml.jackson.databind.jsonschema.SchemaAware;\n-import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;\n import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n import com.fasterxml.jackson.databind.ser.BeanSerializer;\n import com.fasterxml.jackson.databind.ser.ContextualSerializer;\n@@ -225,8 +223,7 @@\n             // 28-Sep-2016, tatu: As per [databind#1385], we do need to do some juggling\n             //    to use different Object for type id (logical type) and actual serialization\n             //    (delegat type).\n-            TypeSerializerRerouter rr \u003d new TypeSerializerRerouter(typeSer0, bean);\n-            ser.serializeWithType(value, gen, provider, rr);\n+            ser.serializeWithType(value, gen, provider, typeSer0);\n         } catch (IOException ioe) {\n             throw ioe;\n         } catch (Exception e) {\n@@ -363,108 +360,24 @@\n      * override Object to use for type id (logical type) even when asking serialization\n      * of something else (delegate type)\n      */\n-    static class TypeSerializerRerouter\n-        extends TypeSerializer\n-    {\n-        protected final TypeSerializer _typeSerializer;\n-        protected final Object _forObject;\n \n-        public TypeSerializerRerouter(TypeSerializer ts, Object ob) {\n-            _typeSerializer \u003d ts;\n-            _forObject \u003d ob;\n-        }\n \n-        @Override\n-        public TypeSerializer forProperty(BeanProperty prop) { // should never get called\n-            throw new UnsupportedOperationException();\n-        }\n \n-        @Override\n-        public As getTypeInclusion() {\n-            return _typeSerializer.getTypeInclusion();\n-        }\n \n-        @Override\n-        public String getPropertyName() {\n-            return _typeSerializer.getPropertyName();\n-        }\n \n-        @Override\n-        public TypeIdResolver getTypeIdResolver() {\n-            return _typeSerializer.getTypeIdResolver();\n-        }\n \n-        @Override\n-        public void writeTypePrefixForScalar(Object value, JsonGenerator gen) throws IOException {\n-            _typeSerializer.writeTypePrefixForScalar(_forObject, gen);\n-        }\n \n-        @Override\n-        public void writeTypePrefixForObject(Object value, JsonGenerator gen) throws IOException {\n-            _typeSerializer.writeTypePrefixForObject(_forObject, gen);\n-        }\n \n-        @Override\n-        public void writeTypePrefixForArray(Object value, JsonGenerator gen) throws IOException {\n-            _typeSerializer.writeTypePrefixForArray(_forObject, gen);\n-        }\n \n-        @Override\n-        public void writeTypeSuffixForScalar(Object value, JsonGenerator gen) throws IOException {\n-            _typeSerializer.writeTypeSuffixForScalar(_forObject, gen);\n-        }\n \n-        @Override\n-        public void writeTypeSuffixForObject(Object value, JsonGenerator gen) throws IOException {\n-            _typeSerializer.writeTypeSuffixForObject(_forObject, gen);\n-        }\n \n-        @Override\n-        public void writeTypeSuffixForArray(Object value, JsonGenerator gen) throws IOException {\n-            _typeSerializer.writeTypeSuffixForArray(_forObject, gen);\n-        }\n \n-        public void writeTypePrefixForScalar(Object value, JsonGenerator gen, Class\u003c?\u003e type) throws IOException {\n-            _typeSerializer.writeTypePrefixForScalar(_forObject, gen, type);\n-        }\n \n-        public void writeTypePrefixForObject(Object value, JsonGenerator gen, Class\u003c?\u003e type) throws IOException {\n-            _typeSerializer.writeTypePrefixForObject(_forObject, gen, type);\n-        }\n \n-        public void writeTypePrefixForArray(Object value, JsonGenerator gen, Class\u003c?\u003e type) throws IOException {\n-            _typeSerializer.writeTypePrefixForArray(_forObject, gen, type);\n-        }\n         \n-        @Override\n-        public void writeCustomTypePrefixForScalar(Object value, JsonGenerator gen, String typeId)\n-                throws IOException {\n-            _typeSerializer.writeCustomTypePrefixForScalar(_forObject, gen, typeId);\n-        }\n \n-        @Override\n-        public void writeCustomTypePrefixForObject(Object value, JsonGenerator gen, String typeId) throws IOException {\n-            _typeSerializer.writeCustomTypePrefixForObject(_forObject, gen, typeId);\n-        }\n \n-        @Override\n-        public void writeCustomTypePrefixForArray(Object value, JsonGenerator gen, String typeId) throws IOException {\n-            _typeSerializer.writeCustomTypePrefixForArray(_forObject, gen, typeId);\n-        }\n \n-        @Override\n-        public void writeCustomTypeSuffixForScalar(Object value, JsonGenerator gen, String typeId) throws IOException {\n-            _typeSerializer.writeCustomTypeSuffixForScalar(_forObject, gen, typeId);\n-        }\n \n-        @Override\n-        public void writeCustomTypeSuffixForObject(Object value, JsonGenerator gen, String typeId) throws IOException {\n-            _typeSerializer.writeCustomTypeSuffixForObject(_forObject, gen, typeId);\n-        }\n \n-        @Override\n-        public void writeCustomTypeSuffixForArray(Object value, JsonGenerator gen, String typeId) throws IOException {\n-            _typeSerializer.writeCustomTypeSuffixForArray(_forObject, gen, typeId);\n-        }\n-    }\n }\n",
      "operations": [
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ImportDeclaration [215,271]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ImportDeclaration [786,848]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [9688,9759]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TypeDeclaration [15014,19345]",
          "to": ""
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [
        "com.fasterxml.jackson.databind.ser.std.JsonValueSerializer\\$TypeSerializerRerouter:forProperty:[BeanProperty prop]:TypeSerializer",
        "com.fasterxml.jackson.databind.ser.std.JsonValueSerializer\\$TypeSerializerRerouter:writeTypePrefixForObject:[Object value, JsonGenerator gen]:void",
        "com.fasterxml.jackson.databind.ser.std.JsonValueSerializer\\$TypeSerializerRerouter:writeCustomTypeSuffixForArray:[Object value, JsonGenerator gen, String typeId]:void",
        "com.fasterxml.jackson.databind.ser.std.JsonValueSerializer\\$TypeSerializerRerouter:getTypeInclusion:[]:As",
        "com.fasterxml.jackson.databind.ser.std.JsonValueSerializer\\$TypeSerializerRerouter:writeCustomTypePrefixForObject:[Object value, JsonGenerator gen, String typeId]:void",
        "com.fasterxml.jackson.databind.ser.std.JsonValueSerializer\\$TypeSerializerRerouter:writeTypePrefixForArray:[Object value, JsonGenerator gen, Class\u003c?\u003e type]:void",
        "com.fasterxml.jackson.databind.ser.std.JsonValueSerializer\\$TypeSerializerRerouter:writeCustomTypeSuffixForObject:[Object value, JsonGenerator gen, String typeId]:void",
        "com.fasterxml.jackson.databind.ser.std.JsonValueSerializer\\$TypeSerializerRerouter:writeTypeSuffixForArray:[Object value, JsonGenerator gen]:void",
        "com.fasterxml.jackson.databind.ser.std.JsonValueSerializer\\$TypeSerializerRerouter:getTypeIdResolver:[]:TypeIdResolver",
        "com.fasterxml.jackson.databind.ser.std.JsonValueSerializer\\$TypeSerializerRerouter:writeTypePrefixForArray:[Object value, JsonGenerator gen]:void",
        "com.fasterxml.jackson.databind.ser.std.JsonValueSerializer\\$TypeSerializerRerouter:writeTypePrefixForScalar:[Object value, JsonGenerator gen, Class\u003c?\u003e type]:void",
        "com.fasterxml.jackson.databind.ser.std.JsonValueSerializer\\$TypeSerializerRerouter:TypeSerializerRerouter:[TypeSerializer ts, Object ob]:null",
        "com.fasterxml.jackson.databind.ser.std.JsonValueSerializer\\$TypeSerializerRerouter:writeCustomTypeSuffixForScalar:[Object value, JsonGenerator gen, String typeId]:void",
        "com.fasterxml.jackson.databind.ser.std.JsonValueSerializer\\$TypeSerializerRerouter:writeTypeSuffixForScalar:[Object value, JsonGenerator gen]:void",
        "com.fasterxml.jackson.databind.ser.std.JsonValueSerializer\\$TypeSerializerRerouter:getPropertyName:[]:String",
        "com.fasterxml.jackson.databind.ser.std.JsonValueSerializer\\$TypeSerializerRerouter:writeCustomTypePrefixForScalar:[Object value, JsonGenerator gen, String typeId]:void",
        "com.fasterxml.jackson.databind.ser.std.JsonValueSerializer\\$TypeSerializerRerouter:writeTypeSuffixForObject:[Object value, JsonGenerator gen]:void",
        "com.fasterxml.jackson.databind.ser.std.JsonValueSerializer\\$TypeSerializerRerouter:writeCustomTypePrefixForArray:[Object value, JsonGenerator gen, String typeId]:void",
        "com.fasterxml.jackson.databind.ser.std.JsonValueSerializer\\$TypeSerializerRerouter:writeTypePrefixForScalar:[Object value, JsonGenerator gen]:void",
        "com.fasterxml.jackson.databind.ser.std.JsonValueSerializer\\$TypeSerializerRerouter:writeTypePrefixForObject:[Object value, JsonGenerator gen, Class\u003c?\u003e type]:void"
      ],
      "num": 20
    }
  }
}