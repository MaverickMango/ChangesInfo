{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "data/changesInfo/",
  "properties": {
    "trigger.tests": "com.google.javascript.jscomp.TypeCheckTest::testThisTypeOfFunction2,com.google.javascript.jscomp.TypeCheckTest::testThisTypeOfFunction3,com.google.javascript.jscomp.TypeCheckTest::testThisTypeOfFunction4",
    "test.dir": "test",
    "clz.modified": "com.google.javascript.jscomp.TypeCheck",
    "src.dir": "src"
  },
  "timeoutSecond": 100,
  "proj": "Closure",
  "id": "69",
  "workingDir": "../bugs/Closure_69_tmp",
  "bug_name": "Closure_69",
  "derive": "defects4j",
  "trigger_tests": [
    {
      "test_class": "com.google.javascript.jscomp.TypeCheckTest",
      "test_function": "testThisTypeOfFunction2",
      "assertion_line": "4553",
      "exception": "junit.framework.AssertionFailedError",
      "message": "expected a warning"
    },
    {
      "test_class": "com.google.javascript.jscomp.TypeCheckTest",
      "test_function": "testThisTypeOfFunction3",
      "assertion_line": "4561",
      "exception": "junit.framework.AssertionFailedError",
      "message": "expected a warning"
    },
    {
      "test_class": "com.google.javascript.jscomp.TypeCheckTest",
      "test_function": "testThisTypeOfFunction4",
      "assertion_line": "4569",
      "exception": "junit.framework.AssertionFailedError",
      "message": "expected a warning"
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/jscomp/TypeCheck.java",
        "src/com/google/javascript/jscomp/TypeCheck.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "com.google.javascript.jscomp.TypeCheck:visitCall:[NodeTraversal t, Node n]:void"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "com.google.javascript.jscomp.TypeCheck:visitCall:[NodeTraversal t, Node n]:void"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "1580",
            "1581",
            "1582",
            "1583",
            "1584",
            "1585",
            "1586"
          ],
          "num": 7
        },
        {
          "qualified_names": [
            "1579"
          ],
          "num": 1
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 5edb4f0..f58418c 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,13 +1577,6 @@\n \n       // Functions with explcit \u0027this\u0027 types must be called in a GETPROP\n       // or GETELEM.\n-      if (functionType.isOrdinaryFunction() \u0026\u0026\n-          !functionType.getTypeOfThis().isUnknownType() \u0026\u0026\n-          !functionType.getTypeOfThis().isNativeObjectType() \u0026\u0026\n-          !(child.getType() \u003d\u003d Token.GETELEM ||\n-            child.getType() \u003d\u003d Token.GETPROP)) {\n-        report(t, n, EXPECTED_THIS_TYPE, functionType.toString());\n-      }\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());\n",
      "operations": [
        {
          "type": "delete-tree",
          "from": "IfStatement [55140,55475]",
          "to": ""
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  }
}