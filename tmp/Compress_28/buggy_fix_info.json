{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "data/changesInfo/",
  "properties": {
    "trigger.tests": "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest::shouldThrowAnExceptionOnTruncatedEntries",
    "test.dir": "src/test/java",
    "clz.modified": "org.apache.commons.compress.archivers.tar.TarArchiveInputStream",
    "src.dir": "src/main/java"
  },
  "timeoutSecond": 100,
  "proj": "Compress",
  "id": "28",
  "workingDir": "../bugs/Compress_28_tmp",
  "bug_name": "Compress_28",
  "derive": "defects4j",
  "trigger_tests": [
    {
      "test_class": "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest",
      "test_function": "shouldThrowAnExceptionOnTruncatedEntries",
      "exception": "junit.framework.AssertionFailedError",
      "message": "Expected exception: java.io.IOException"
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java",
        "src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:read:[byte[] buf, int offset, int numToRead]:int"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:read:[byte[] buf, int offset, int numToRead]:int"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "585",
            "586",
            "587",
            "590"
          ],
          "num": 4
        },
        {
          "qualified_names": [
            "583"
          ],
          "num": 1
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java\nindex 6f0c6a4..fe2c113 100644\n--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java\n@@ -580,14 +580,11 @@\n         numToRead \u003d Math.min(numToRead, available());\n         \n         totalRead \u003d is.read(buf, offset, numToRead);\n+        count(totalRead);\n         \n         if (totalRead \u003d\u003d -1) {\n-            if (numToRead \u003e 0) {\n-                throw new IOException(\"Truncated TAR archive\");\n-            }\n             hasHitEOF \u003d true;\n         } else {\n-            count(totalRead);\n             entryOffset +\u003d totalRead;\n         }\n \n",
      "operations": [
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [20234,20332]",
          "to": ""
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  }
}