{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "data/changesInfo/",
  "properties": {
    "trigger.tests": "com.fasterxml.jackson.core.filter.BasicParserFilteringTest::testSingleMatchFilteringWithPath,com.fasterxml.jackson.core.filter.BasicParserFilteringTest::testAllowMultipleMatchesWithPath1,com.fasterxml.jackson.core.filter.BasicParserFilteringTest::testAllowMultipleMatchesWithPath2,com.fasterxml.jackson.core.filter.BasicParserFilteringTest::testMultipleMatchFilteringWithPath1,com.fasterxml.jackson.core.filter.BasicParserFilteringTest::testMultipleMatchFilteringWithPath2,com.fasterxml.jackson.core.filter.BasicParserFilteringTest::testMultipleMatchFilteringWithPath3,com.fasterxml.jackson.core.filter.BasicParserFilteringTest::testSingleMatchFilteringWithoutPath,com.fasterxml.jackson.core.filter.BasicParserFilteringTest::testNotAllowMultipleMatchesWithoutPath1,com.fasterxml.jackson.core.filter.BasicParserFilteringTest::testNotAllowMultipleMatchesWithoutPath2,com.fasterxml.jackson.core.filter.BasicParserFilteringTest::testIndexMatchWithPath1,com.fasterxml.jackson.core.filter.BasicParserFilteringTest::testIndexMatchWithPath2,com.fasterxml.jackson.core.filter.BasicParserFilteringTest::testAllowMultipleMatchesWithoutPath",
    "test.dir": "src/test/java",
    "clz.modified": "com.fasterxml.jackson.core.filter.FilteringParserDelegate",
    "src.dir": "src/main/java"
  },
  "timeoutSecond": 100,
  "proj": "JacksonCore",
  "id": "22",
  "workingDir": "../bugs/JacksonCore_22_tmp",
  "bug_name": "JacksonCore_22",
  "derive": "defects4j",
  "trigger_tests": [
    {
      "test_class": "com.fasterxml.jackson.core.filter.BasicParserFilteringTest",
      "test_function": "testSingleMatchFilteringWithPath",
      "assertion_line": "105",
      "exception": "junit.framework.AssertionFailedError",
      "message": "expected:\u003c1\u003e but was:\u003c0\u003e"
    },
    {
      "test_class": "com.fasterxml.jackson.core.filter.BasicParserFilteringTest",
      "test_function": "testAllowMultipleMatchesWithPath1",
      "assertion_line": "166",
      "exception": "junit.framework.AssertionFailedError",
      "message": "expected:\u003c3\u003e but was:\u003c0\u003e"
    },
    {
      "test_class": "com.fasterxml.jackson.core.filter.BasicParserFilteringTest",
      "test_function": "testAllowMultipleMatchesWithPath2",
      "assertion_line": "182",
      "exception": "junit.framework.AssertionFailedError",
      "message": "expected:\u003c2\u003e but was:\u003c0\u003e"
    },
    {
      "test_class": "com.fasterxml.jackson.core.filter.BasicParserFilteringTest",
      "test_function": "testMultipleMatchFilteringWithPath1",
      "assertion_line": "194",
      "exception": "junit.framework.AssertionFailedError",
      "message": "expected:\u003c2\u003e but was:\u003c0\u003e"
    },
    {
      "test_class": "com.fasterxml.jackson.core.filter.BasicParserFilteringTest",
      "test_function": "testMultipleMatchFilteringWithPath2",
      "assertion_line": "209",
      "exception": "junit.framework.AssertionFailedError",
      "message": "expected:\u003c2\u003e but was:\u003c0\u003e"
    },
    {
      "test_class": "com.fasterxml.jackson.core.filter.BasicParserFilteringTest",
      "test_function": "testMultipleMatchFilteringWithPath3",
      "assertion_line": "222",
      "exception": "junit.framework.AssertionFailedError",
      "message": "expected:\u003c2\u003e but was:\u003c0\u003e"
    },
    {
      "test_class": "com.fasterxml.jackson.core.filter.BasicParserFilteringTest",
      "test_function": "testSingleMatchFilteringWithoutPath",
      "assertion_line": "91",
      "exception": "junit.framework.AssertionFailedError",
      "message": "expected:\u003c1\u003e but was:\u003c0\u003e"
    },
    {
      "test_class": "com.fasterxml.jackson.core.filter.BasicParserFilteringTest",
      "test_function": "testNotAllowMultipleMatchesWithoutPath1",
      "assertion_line": "120",
      "exception": "junit.framework.AssertionFailedError",
      "message": "expected:\u003c1\u003e but was:\u003c0\u003e"
    },
    {
      "test_class": "com.fasterxml.jackson.core.filter.BasicParserFilteringTest",
      "test_function": "testNotAllowMultipleMatchesWithoutPath2",
      "assertion_line": "134",
      "exception": "junit.framework.ComparisonFailure",
      "message": "expected:\u003c2[]\u003e but was:\u003c2[ 4]\u003e"
    },
    {
      "test_class": "com.fasterxml.jackson.core.filter.BasicParserFilteringTest",
      "test_function": "testIndexMatchWithPath1",
      "assertion_line": "232",
      "exception": "junit.framework.AssertionFailedError",
      "message": "expected:\u003c1\u003e but was:\u003c0\u003e"
    },
    {
      "test_class": "com.fasterxml.jackson.core.filter.BasicParserFilteringTest",
      "test_function": "testIndexMatchWithPath2",
      "assertion_line": "247",
      "exception": "junit.framework.AssertionFailedError",
      "message": "expected:\u003c2\u003e but was:\u003c0\u003e"
    },
    {
      "test_class": "com.fasterxml.jackson.core.filter.BasicParserFilteringTest",
      "test_function": "testAllowMultipleMatchesWithoutPath",
      "assertion_line": "150",
      "exception": "junit.framework.AssertionFailedError",
      "message": "expected:\u003c3\u003e but was:\u003c0\u003e"
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java",
        "src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "com.fasterxml.jackson.core.filter.FilteringParserDelegate:_nextTokenWithBuffering:[final TokenFilterContext buffRoot]:JsonToken",
            "com.fasterxml.jackson.core.filter.FilteringParserDelegate:_nextToken2:[]:JsonToken",
            "com.fasterxml.jackson.core.filter.FilteringParserDelegate:_verifyAllowedMatches:[]:boolean",
            "com.fasterxml.jackson.core.filter.FilteringParserDelegate:nextToken:[]:JsonToken"
          ],
          "num": 4
        },
        {
          "qualified_names": [
            "com.fasterxml.jackson.core.filter.FilteringParserDelegate:nextToken:[]:JsonToken",
            "com.fasterxml.jackson.core.filter.FilteringParserDelegate:_nextToken2:[]:JsonToken",
            "com.fasterxml.jackson.core.filter.FilteringParserDelegate:_nextTokenWithBuffering:[final TokenFilterContext buffRoot]:JsonToken",
            "com.fasterxml.jackson.core.filter.FilteringParserDelegate:skipChildren:[]:JsonParser"
          ],
          "num": 4
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "417",
            "440",
            "442",
            "577",
            "602",
            "604",
            "721",
            "736",
            "738",
            "777",
            "778",
            "779",
            "780",
            "781",
            "782",
            "783"
          ],
          "num": 16
        },
        {
          "qualified_names": [
            "417",
            "439",
            "575",
            "603",
            "717",
            "739",
            "782"
          ],
          "num": 7
        }
      ],
      "diff": "diff --git a/src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java b/src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java\nindex 4459e7f..4dc7c9a 100644\n--- a/src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java\n+++ b/src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java\n@@ -414,7 +414,7 @@\n                 }\n                 _itemFilter \u003d f;\n                 if (f \u003d\u003d TokenFilter.INCLUDE_ALL) {\n-                    if (_verifyAllowedMatches() \u0026\u0026 _includePath) {\n+                    if (_includePath) {\n                         return (_currToken \u003d t);\n                     }\n                 }\n@@ -437,9 +437,7 @@\n                 f \u003d _headContext.checkValue(f);\n                 if ((f \u003d\u003d TokenFilter.INCLUDE_ALL)\n                         || ((f !\u003d null) \u0026\u0026 f.includeValue(delegate))) {\n-                    if (_verifyAllowedMatches()) {\n                         return (_currToken \u003d t);\n-                    }\n                 }\n             }\n             // Otherwise not included (leaves must be explicitly included)\n@@ -574,7 +572,7 @@\n                     }\n                     _itemFilter \u003d f;\n                     if (f \u003d\u003d TokenFilter.INCLUDE_ALL) {\n-                        if (_verifyAllowedMatches() \u0026\u0026 _includePath) {\n+                        if (_includePath) {\n                             return (_currToken \u003d t);\n                         }\n //                        if (_includeImmediateParent) { ...\n@@ -599,9 +597,7 @@\n                     f \u003d _headContext.checkValue(f);\n                     if ((f \u003d\u003d TokenFilter.INCLUDE_ALL)\n                             || ((f !\u003d null) \u0026\u0026 f.includeValue(delegate))) {\n-                        if (_verifyAllowedMatches()) {\n                             return (_currToken \u003d t);\n-                        }\n                     }\n                 }\n                 // Otherwise not included (leaves must be explicitly included)\n@@ -718,7 +714,7 @@\n                         continue main_loop;\n                     }\n                     _itemFilter \u003d f;\n-                    if (f \u003d\u003d TokenFilter.INCLUDE_ALL \u0026\u0026 _verifyAllowedMatches()) {\n+                    if (f \u003d\u003d TokenFilter.INCLUDE_ALL) {\n                         return _nextBuffered(buffRoot);\n                     }\n                 }\n@@ -733,9 +729,7 @@\n                     f \u003d _headContext.checkValue(f);\n                     if ((f \u003d\u003d TokenFilter.INCLUDE_ALL)\n                             || ((f !\u003d null) \u0026\u0026 f.includeValue(delegate))) {\n-                        if (_verifyAllowedMatches()) {\n                             return _nextBuffered(buffRoot);\n-                        }\n                     }\n                 }\n                 // Otherwise not included (leaves must be explicitly included)\n@@ -774,13 +768,6 @@\n         }\n     }\n \n-    private final boolean _verifyAllowedMatches() throws IOException {\n-        if (_matchCount \u003d\u003d 0 || _allowMultipleMatches) {\n-            ++_matchCount;\n-            return true;\n-        }\n-        return false;\n-    }\n \n     @Override\n     public JsonToken nextValue() throws IOException {\n",
      "operations": [
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodInvocation [15173,15196]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "INFIX_EXPRESSION_OPERATOR: \u0026\u0026 [15197,15199]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "InfixExpression [15173,15212]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodInvocation [15982,16005]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Block [16007,16079]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "IfStatement [15978,16079]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodInvocation [21331,21354]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "INFIX_EXPRESSION_OPERATOR: \u0026\u0026 [21355,21357]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "InfixExpression [21331,21370]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodInvocation [22342,22365]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Block [22367,22447]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "IfStatement [22338,22447]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "INFIX_EXPRESSION_OPERATOR: \u0026\u0026 [27058,27060]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodInvocation [27061,27084]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "InfixExpression [27029,27084]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodInvocation [27657,27680]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Block [27682,27769]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "IfStatement [27653,27769]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [29001,29214]",
          "to": ""
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [
        "com.fasterxml.jackson.core.filter.FilteringParserDelegate:skipChildren:[]:JsonParser"
      ],
      "num": 1
    },
    "delete_functions": {
      "qualified_names": [
        "com.fasterxml.jackson.core.filter.FilteringParserDelegate:_verifyAllowedMatches:[]:boolean"
      ],
      "num": 1
    }
  }
}