{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "data/changesInfo/",
  "properties": {
    "trigger.tests": "com.fasterxml.jackson.databind.node.TestConversions::testConversionOfPojos",
    "test.dir": "src/test/java",
    "clz.modified": "com.fasterxml.jackson.databind.util.TokenBuffer",
    "src.dir": "src/main/java"
  },
  "timeoutSecond": 100,
  "proj": "JacksonDatabind",
  "id": "2",
  "workingDir": "../bugs/JacksonDatabind_2_tmp",
  "bug_name": "JacksonDatabind_2",
  "derive": "defects4j",
  "trigger_tests": [
    {
      "test_class": "com.fasterxml.jackson.databind.node.TestConversions",
      "test_function": "testConversionOfPojos",
      "assertion_line": "263",
      "exception": "junit.framework.AssertionFailedError",
      "message": "Expected Object, got POJO"
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/com/fasterxml/jackson/databind/util/TokenBuffer.java",
        "src/main/java/com/fasterxml/jackson/databind/util/TokenBuffer.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "com.fasterxml.jackson.databind.util.TokenBuffer:writeObject:[Object value]:void",
            "com.fasterxml.jackson.databind.util.TokenBuffer:writeTree:[TreeNode node]:void"
          ],
          "num": 2
        },
        {
          "qualified_names": [
            "com.fasterxml.jackson.databind.util.TokenBuffer:writeObject:[Object value]:void"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "783",
            "784",
            "785",
            "786",
            "787",
            "788",
            "790",
            "791",
            "796",
            "797",
            "798",
            "799",
            "805",
            "806",
            "807",
            "808",
            "810",
            "813",
            "814",
            "815"
          ],
          "num": 20
        },
        {
          "qualified_names": [
            "782"
          ],
          "num": 1
        }
      ],
      "diff": "diff --git a/src/main/java/com/fasterxml/jackson/databind/util/TokenBuffer.java b/src/main/java/com/fasterxml/jackson/databind/util/TokenBuffer.java\nindex caea328..ff8b1c4 100644\n--- a/src/main/java/com/fasterxml/jackson/databind/util/TokenBuffer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/util/TokenBuffer.java\n@@ -780,39 +780,19 @@\n     @Override\n     public void writeObject(Object value) throws IOException\n     {\n-        if (value \u003d\u003d null) {\n-            writeNull();\n-            return;\n-        }\n-        Class\u003c?\u003e raw \u003d value.getClass();\n-        if (raw \u003d\u003d byte[].class) {\n             _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n-            return;\n-        } else if (_objectCodec \u003d\u003d null) {\n             /* 28-May-2014, tatu: Tricky choice here; if no codec, should we\n              *   err out, or just embed? For now, do latter.\n              */\n //          throw new JsonMappingException(\"No ObjectCodec configured for TokenBuffer, writeObject() called\");\n-            _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n-        } else {\n-            _objectCodec.writeValue(this, value);\n-        }\n     }\n \n     @Override\n     public void writeTree(TreeNode node) throws IOException\n     {\n-        if (node \u003d\u003d null) {\n-            writeNull();\n-            return;\n-        }\n \n-        if (_objectCodec \u003d\u003d null) {\n             // as with \u0027writeObject()\u0027, is codec optional?\n             _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n-        } else {\n-            _objectCodec.writeTree(this, node);\n-        }\n     }\n \n     /*\n",
      "operations": [
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [24473,24548]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [24557,24589]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "InfixExpression [24602,24621]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "ReturnStatement [24698,24705]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Block [24623,24715]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "InfixExpression [24725,24745]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Block [24747,25084]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "Block [25090,25151]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "IfStatement [24721,25151]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "IfStatement [24598,25151]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [25247,25321]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "InfixExpression [25335,25355]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Block [25357,25487]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "Block [25493,25552]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "IfStatement [25331,25552]",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [
        "com.fasterxml.jackson.databind.util.TokenBuffer:writeTree:[TreeNode node]:void"
      ],
      "num": 1
    }
  }
}