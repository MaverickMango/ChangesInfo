{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "data/changesInfo/",
  "properties": {
    "trigger.tests": "com.google.javascript.jscomp.PeepholeFoldConstantsTest::testIssue522",
    "test.dir": "test",
    "clz.modified": "com.google.javascript.jscomp.PeepholeFoldConstants",
    "src.dir": "src"
  },
  "timeoutSecond": 100,
  "proj": "Closure",
  "id": "161",
  "workingDir": "../bugs/Closure_161_tmp",
  "bug_name": "Closure_161",
  "derive": "defects4j",
  "trigger_tests": [
    {
      "test_class": "com.google.javascript.jscomp.PeepholeFoldConstantsTest",
      "test_function": "testIssue522",
      "assertion_line": "927",
      "exception": "junit.framework.AssertionFailedError",
      "message": "Unexpected error(s): JSC_INDEX_OUT_OF_BOUNDS_ERROR. Array index out of bounds: NUMBER 1.0 1 [source_file: testcode] at testcode line 1 : 3 expected:\u003c0\u003e but was:\u003c1\u003e"
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/jscomp/PeepholeFoldConstants.java",
        "src/com/google/javascript/jscomp/PeepholeFoldConstants.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "com.google.javascript.jscomp.PeepholeFoldConstants:tryFoldArrayAccess:[Node n, Node left, Node right]:Node"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "com.google.javascript.jscomp.PeepholeFoldConstants:tryFoldArrayAccess:[Node n, Node left, Node right]:Node"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "1283",
            "1284",
            "1285"
          ],
          "num": 3
        },
        {
          "qualified_names": [
            "1282"
          ],
          "num": 1
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex c51297f..0b2636f 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1280,9 +1280,6 @@\n     // If GETPROP/GETELEM is used as assignment target the array literal is\n     // acting as a temporary we can\u0027t fold it here:\n     //    \"[][0] +\u003d 1\"\n-    if (isAssignmentTarget(n)) {\n-      return n;\n-    }\n \n     if (right.getType() !\u003d Token.NUMBER) {\n       // Sometimes people like to use complex expressions to index into\n",
      "operations": [
        {
          "type": "delete-tree",
          "from": "IfStatement [37407,37457]",
          "to": ""
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  }
}