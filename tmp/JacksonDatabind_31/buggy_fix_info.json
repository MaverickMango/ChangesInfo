{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "data/changesInfo/",
  "properties": {
    "trigger.tests": "com.fasterxml.jackson.databind.util.TestTokenBuffer::testOutputContext",
    "test.dir": "src/test/java",
    "clz.modified": "com.fasterxml.jackson.databind.util.TokenBuffer",
    "src.dir": "src/main/java"
  },
  "timeoutSecond": 100,
  "proj": "JacksonDatabind",
  "id": "31",
  "workingDir": "../bugs/JacksonDatabind_31_tmp",
  "bug_name": "JacksonDatabind_31",
  "derive": "defects4j",
  "trigger_tests": [
    {
      "test_class": "com.fasterxml.jackson.databind.util.TestTokenBuffer",
      "test_function": "testOutputContext",
      "assertion_line": "283",
      "exception": "junit.framework.AssertionFailedError",
      "message": "Expected name \u0027b\u0027 (JsonParser), TokenBuffer had \u0027a\u0027"
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/com/fasterxml/jackson/databind/util/TokenBuffer.java",
        "src/main/java/com/fasterxml/jackson/databind/util/TokenBuffer.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "com.fasterxml.jackson.databind.util.TokenBuffer:writeNumber:[BigDecimal dec]:void",
            "com.fasterxml.jackson.databind.util.TokenBuffer:writeObject:[Object value]:void",
            "com.fasterxml.jackson.databind.util.TokenBuffer:writeString:[String text]:void",
            "com.fasterxml.jackson.databind.util.TokenBuffer:writeNull:[]:void",
            "com.fasterxml.jackson.databind.util.TokenBuffer:_appendValue:[JsonToken type]:void",
            "com.fasterxml.jackson.databind.util.TokenBuffer:writeNumber:[String encodedValue]:void",
            "com.fasterxml.jackson.databind.util.TokenBuffer:writeBoolean:[boolean state]:void",
            "com.fasterxml.jackson.databind.util.TokenBuffer:writeString:[SerializableString text]:void",
            "com.fasterxml.jackson.databind.util.TokenBuffer:writeRawValue:[char[] text, int offset, int len]:void",
            "com.fasterxml.jackson.databind.util.TokenBuffer:_appendValue:[JsonToken type, Object value]:void",
            "com.fasterxml.jackson.databind.util.TokenBuffer:writeRawValue:[String text, int offset, int len]:void",
            "com.fasterxml.jackson.databind.util.TokenBuffer:writeNumber:[short i]:void",
            "com.fasterxml.jackson.databind.util.TokenBuffer:writeNumber:[long l]:void",
            "com.fasterxml.jackson.databind.util.TokenBuffer:writeNumber:[double d]:void",
            "com.fasterxml.jackson.databind.util.TokenBuffer:writeNumber:[float f]:void",
            "com.fasterxml.jackson.databind.util.TokenBuffer:writeRawValue:[String text]:void",
            "com.fasterxml.jackson.databind.util.TokenBuffer:writeNumber:[int i]:void",
            "com.fasterxml.jackson.databind.util.TokenBuffer:writeNumber:[BigInteger v]:void",
            "com.fasterxml.jackson.databind.util.TokenBuffer:writeTree:[TreeNode node]:void"
          ],
          "num": 19
        },
        {
          "qualified_names": [
            "com.fasterxml.jackson.databind.util.TokenBuffer:writeString:[String text]:void",
            "com.fasterxml.jackson.databind.util.TokenBuffer:writeRawValue:[String text, int offset, int len]:void",
            "com.fasterxml.jackson.databind.util.TokenBuffer:writeNumber:[double d]:void",
            "com.fasterxml.jackson.databind.util.TokenBuffer:writeNull:[]:void",
            "com.fasterxml.jackson.databind.util.TokenBuffer:writeNumber:[long l]:void",
            "com.fasterxml.jackson.databind.util.TokenBuffer:writeNumber:[BigInteger v]:void",
            "com.fasterxml.jackson.databind.util.TokenBuffer:writeRawValue:[String text]:void",
            "com.fasterxml.jackson.databind.util.TokenBuffer:writeNumber:[short i]:void",
            "com.fasterxml.jackson.databind.util.TokenBuffer:writeNumber:[int i]:void",
            "com.fasterxml.jackson.databind.util.TokenBuffer:writeNumber:[String encodedValue]:void",
            "com.fasterxml.jackson.databind.util.TokenBuffer:writeNumber:[BigDecimal dec]:void",
            "com.fasterxml.jackson.databind.util.TokenBuffer:writeObject:[Object value]:void",
            "com.fasterxml.jackson.databind.util.TokenBuffer:writeRawValue:[char[] text, int offset, int len]:void",
            "com.fasterxml.jackson.databind.util.TokenBuffer:writeNumber:[float f]:void",
            "com.fasterxml.jackson.databind.util.TokenBuffer:writeBoolean:[boolean state]:void",
            "com.fasterxml.jackson.databind.util.TokenBuffer:writeString:[SerializableString text]:void",
            "com.fasterxml.jackson.databind.util.TokenBuffer:writeTree:[TreeNode node]:void"
          ],
          "num": 17
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "672",
            "686",
            "731",
            "739",
            "744",
            "755",
            "760",
            "765",
            "770",
            "775",
            "783",
            "792",
            "801",
            "806",
            "811",
            "829",
            "837",
            "853",
            "1091",
            "1092",
            "1093",
            "1094",
            "1095",
            "1096",
            "1097",
            "1098",
            "1099",
            "1100",
            "1101",
            "1102",
            "1103",
            "1111",
            "1112",
            "1113",
            "1114",
            "1115",
            "1116",
            "1117",
            "1118",
            "1119",
            "1120",
            "1121",
            "1122",
            "1123"
          ],
          "num": 44
        },
        {
          "qualified_names": [
            "672",
            "686",
            "731",
            "739",
            "744",
            "755",
            "760",
            "765",
            "770",
            "775",
            "783",
            "792",
            "801",
            "806",
            "811",
            "829",
            "837",
            "853",
            "1090",
            "1123"
          ],
          "num": 20
        }
      ],
      "diff": "diff --git a/src/main/java/com/fasterxml/jackson/databind/util/TokenBuffer.java b/src/main/java/com/fasterxml/jackson/databind/util/TokenBuffer.java\nindex fcf0c3b..b7cec0b 100644\n--- a/src/main/java/com/fasterxml/jackson/databind/util/TokenBuffer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/util/TokenBuffer.java\n@@ -669,7 +669,7 @@\n         if (text \u003d\u003d null) {\n             writeNull();\n         } else {\n-            _appendValue(JsonToken.VALUE_STRING, text);\n+            _append(JsonToken.VALUE_STRING, text);\n         }\n     }\n \n@@ -683,7 +683,7 @@\n         if (text \u003d\u003d null) {\n             writeNull();\n         } else {\n-            _appendValue(JsonToken.VALUE_STRING, text);\n+            _append(JsonToken.VALUE_STRING, text);\n         }\n     }\n     \n@@ -728,7 +728,7 @@\n \n     @Override\n     public void writeRawValue(String text) throws IOException {\n-        _appendValue(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n     }\n \n     @Override\n@@ -736,12 +736,12 @@\n         if (offset \u003e 0 || len !\u003d text.length()) {\n             text \u003d text.substring(offset, offset+len);\n         }\n-        _appendValue(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n     }\n \n     @Override\n     public void writeRawValue(char[] text, int offset, int len) throws IOException {\n-        _appendValue(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len));\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len));\n     }\n \n     /*\n@@ -752,27 +752,27 @@\n \n     @Override\n     public void writeNumber(short i) throws IOException {\n-        _appendValue(JsonToken.VALUE_NUMBER_INT, Short.valueOf(i));\n+        _append(JsonToken.VALUE_NUMBER_INT, Short.valueOf(i));\n     }\n \n     @Override\n     public void writeNumber(int i) throws IOException {\n-        _appendValue(JsonToken.VALUE_NUMBER_INT, Integer.valueOf(i));\n+        _append(JsonToken.VALUE_NUMBER_INT, Integer.valueOf(i));\n     }\n \n     @Override\n     public void writeNumber(long l) throws IOException {\n-        _appendValue(JsonToken.VALUE_NUMBER_INT, Long.valueOf(l));\n+        _append(JsonToken.VALUE_NUMBER_INT, Long.valueOf(l));\n     }\n \n     @Override\n     public void writeNumber(double d) throws IOException {\n-        _appendValue(JsonToken.VALUE_NUMBER_FLOAT, Double.valueOf(d));\n+        _append(JsonToken.VALUE_NUMBER_FLOAT, Double.valueOf(d));\n     }\n \n     @Override\n     public void writeNumber(float f) throws IOException {\n-        _appendValue(JsonToken.VALUE_NUMBER_FLOAT, Float.valueOf(f));\n+        _append(JsonToken.VALUE_NUMBER_FLOAT, Float.valueOf(f));\n     }\n \n     @Override\n@@ -780,7 +780,7 @@\n         if (dec \u003d\u003d null) {\n             writeNull();\n         } else {\n-            _appendValue(JsonToken.VALUE_NUMBER_FLOAT, dec);\n+            _append(JsonToken.VALUE_NUMBER_FLOAT, dec);\n         }\n     }\n \n@@ -789,7 +789,7 @@\n         if (v \u003d\u003d null) {\n             writeNull();\n         } else {\n-            _appendValue(JsonToken.VALUE_NUMBER_INT, v);\n+            _append(JsonToken.VALUE_NUMBER_INT, v);\n         }\n     }\n \n@@ -798,17 +798,17 @@\n         /* 03-Dec-2010, tatu: related to [JACKSON-423], should try to keep as numeric\n          *   identity as long as possible\n          */\n-        _appendValue(JsonToken.VALUE_NUMBER_FLOAT, encodedValue);\n+        _append(JsonToken.VALUE_NUMBER_FLOAT, encodedValue);\n     }\n \n     @Override\n     public void writeBoolean(boolean state) throws IOException {\n-        _appendValue(state ? JsonToken.VALUE_TRUE : JsonToken.VALUE_FALSE);\n+        _append(state ? JsonToken.VALUE_TRUE : JsonToken.VALUE_FALSE);\n     }\n \n     @Override\n     public void writeNull() throws IOException {\n-        _appendValue(JsonToken.VALUE_NULL);\n+        _append(JsonToken.VALUE_NULL);\n     }\n \n     /*\n@@ -826,7 +826,7 @@\n         }\n         Class\u003c?\u003e raw \u003d value.getClass();\n         if (raw \u003d\u003d byte[].class || (value instanceof RawValue)) {\n-            _appendValue(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n+            _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n             return;\n         }\n         if (_objectCodec \u003d\u003d null) {\n@@ -834,7 +834,7 @@\n              *   err out, or just embed? For now, do latter.\n              */\n //          throw new JsonMappingException(\"No ObjectCodec configured for TokenBuffer, writeObject() called\");\n-            _appendValue(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n+            _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n         } else {\n             _objectCodec.writeValue(this, value);\n         }\n@@ -850,7 +850,7 @@\n \n         if (_objectCodec \u003d\u003d null) {\n             // as with \u0027writeObject()\u0027, is codec optional?\n-            _appendValue(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+            _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n         } else {\n             _objectCodec.writeTree(this, node);\n         }\n@@ -1088,19 +1088,6 @@\n      *\n      * @since 2.6.4\n      */\n-    protected final void _appendValue(JsonToken type)\n-    {\n-        _writeContext.writeValue();\n-        Segment next \u003d _hasNativeId\n-                ? _last.append(_appendAt, type, _objectId, _typeId)\n-                : _last.append(_appendAt, type);\n-        if (next \u003d\u003d null) {\n-            ++_appendAt;\n-        } else {\n-            _last \u003d next;\n-            _appendAt \u003d 1; // since we added first at 0\n-        }\n-    }\n \n     /**\n      * Similar to {@link #_append(JsonToken,Object)} but also updates context with\n@@ -1108,19 +1095,6 @@\n      *\n      * @since 2.6.4\n      */\n-    protected final void _appendValue(JsonToken type, Object value)\n-    {\n-        _writeContext.writeValue();\n-        Segment next \u003d _hasNativeId\n-                ? _last.append(_appendAt, type, value, _objectId, _typeId)\n-                : _last.append(_appendAt, type, value);\n-        if (next \u003d\u003d null) {\n-            ++_appendAt;\n-        } else {\n-            _last \u003d next;\n-            _appendAt \u003d 1;\n-        }\n-    }\n     \n     protected final void _appendRaw(int rawType, Object value)\n     {\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [33594,33764]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [33515,34095]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [34101,34687]",
          "to": ""
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [
        "com.fasterxml.jackson.databind.util.TokenBuffer:_appendValue:[JsonToken type]:void",
        "com.fasterxml.jackson.databind.util.TokenBuffer:_appendValue:[JsonToken type, Object value]:void"
      ],
      "num": 2
    }
  }
}