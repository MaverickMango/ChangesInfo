{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "data/changesInfo/",
  "properties": {
    "trigger.tests": "com.google.javascript.jscomp.ScopedAliasesTest::testForwardJsDoc",
    "test.dir": "test",
    "clz.modified": "com.google.javascript.jscomp.Scope,com.google.javascript.jscomp.ScopedAliases",
    "src.dir": "src"
  },
  "timeoutSecond": 100,
  "proj": "Closure",
  "id": "162",
  "workingDir": "../bugs/Closure_162_tmp",
  "bug_name": "Closure_162",
  "derive": "defects4j",
  "trigger_tests": [
    {
      "test_class": "com.google.javascript.jscomp.ScopedAliasesTest",
      "test_function": "testForwardJsDoc",
      "assertion_line": "590",
      "exception": "junit.framework.AssertionFailedError",
      "message": "expected:\u003c[STRING foo.Foo.Bar 4 [source_file: testcode]"
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/jscomp/Scope.java",
        "src/com/google/javascript/jscomp/Scope.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "com.google.javascript.jscomp.Scope:getVarIterable:[]:Iterable\u003cVar\u003e"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "com.google.javascript.jscomp.Scope:getReferences:[Var var]:Iterable\u003cVar\u003e"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "568",
            "569",
            "570"
          ],
          "num": 3
        },
        {
          "qualified_names": [
            "567"
          ],
          "num": 1
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/jscomp/Scope.java b/src/com/google/javascript/jscomp/Scope.java\nindex 8b6b1a5..b6037cb 100644\n--- a/src/com/google/javascript/jscomp/Scope.java\n+++ b/src/com/google/javascript/jscomp/Scope.java\n@@ -565,9 +565,6 @@\n   /**\n    * Return an iterable over all of the variables declared in this scope.\n    */\n-  Iterable\u003cVar\u003e getVarIterable() {\n-    return vars.values();\n-  }\n \n   @Override\n   public Iterable\u003cVar\u003e getReferences(Var var) {\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [14833,14916]"
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [14833,14981]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/jscomp/ScopedAliases.java",
        "src/com/google/javascript/jscomp/ScopedAliases.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "com.google.javascript.jscomp.ScopedAliases\\$Traversal:enterScope:[NodeTraversal t]:void",
            "com.google.javascript.jscomp.ScopedAliases\\$Traversal:visit:[NodeTraversal t, Node n, Node parent]:void",
            "com.google.javascript.jscomp.ScopedAliases\\$Traversal:findAliases:[NodeTraversal t]:void"
          ],
          "num": 3
        },
        {
          "qualified_names": [
            "com.google.javascript.jscomp.ScopedAliases\\$Traversal:enterScope:[NodeTraversal t]:void",
            "com.google.javascript.jscomp.ScopedAliases\\$Traversal:visit:[NodeTraversal t, Node n, Node parent]:void"
          ],
          "num": 2
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "226",
            "272",
            "273",
            "274",
            "275",
            "276",
            "277",
            "278",
            "279",
            "280",
            "281",
            "282",
            "284",
            "285",
            "286",
            "287",
            "289",
            "290",
            "291",
            "292",
            "293",
            "324",
            "325",
            "326",
            "328",
            "329",
            "330",
            "331",
            "332",
            "333",
            "334",
            "335",
            "336",
            "340",
            "341",
            "342",
            "348",
            "364",
            "372"
          ],
          "num": 39
        },
        {
          "qualified_names": [
            "225",
            "272",
            "307",
            "308",
            "309",
            "310",
            "311",
            "312",
            "314",
            "315",
            "316",
            "317",
            "322",
            "325",
            "326",
            "327",
            "328",
            "342",
            "343",
            "344",
            "345",
            "346",
            "355"
          ],
          "num": 23
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/jscomp/ScopedAliases.java b/src/com/google/javascript/jscomp/ScopedAliases.java\nindex 2b447cc..ba31680 100644\n--- a/src/com/google/javascript/jscomp/ScopedAliases.java\n+++ b/src/com/google/javascript/jscomp/ScopedAliases.java\n@@ -223,7 +223,6 @@\n       if (n !\u003d null \u0026\u0026 isCallToScopeMethod(n)) {\n         transformation \u003d transformationHandler.logAliasTransformation(\n             n.getSourceFileName(), getSourceRegion(n));\n-        findAliases(t);\n       }\n     }\n \n@@ -269,28 +268,8 @@\n       hasErrors \u003d true;\n     }\n \n-    private void findAliases(NodeTraversal t) {\n-      Scope scope \u003d t.getScope();\n-      for (Var v : scope.getVarIterable()) {\n-        Node n \u003d v.getNode();\n-        int type \u003d n.getType();\n-        Node parent \u003d n.getParent();\n-        if (parent.getType() \u003d\u003d Token.VAR) {\n-          if (n.hasChildren() \u0026\u0026 n.getFirstChild().isQualifiedName()) {\n-            String name \u003d n.getString();\n-            Var aliasVar \u003d scope.getVar(name);\n-            aliases.put(name, aliasVar);\n \n-            String qualifiedName \u003d\n-                aliasVar.getInitialValue().getQualifiedName();\n-            transformation.addAlias(name, qualifiedName);\n-          } else {\n             // TODO(robbyw): Support using locals for private variables.\n-            report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n-          }\n-        }\n-      }\n-    }\n \n     private void validateScopeCall(NodeTraversal t, Node n, Node parent) {\n       if (preprocessorSymbolTable !\u003d null) {\n@@ -321,33 +300,32 @@\n         validateScopeCall(t, n, n.getParent());\n       }\n \n-      if (t.getScopeDepth() \u003c 2) {\n-        return;\n-      }\n \n-      int type \u003d n.getType();\n-      Var aliasVar \u003d null;\n-      if (type \u003d\u003d Token.NAME) {\n-        String name \u003d n.getString();\n-        Var lexicalVar \u003d t.getScope().getVar(n.getString());\n-        if (lexicalVar !\u003d null \u0026\u0026 lexicalVar \u003d\u003d aliases.get(name)) {\n-          aliasVar \u003d lexicalVar;\n-        }\n-      }\n \n       // Validate the top level of the goog.scope block.\n       if (t.getScopeDepth() \u003d\u003d 2) {\n-        if (aliasVar !\u003d null \u0026\u0026 NodeUtil.isLValue(n)) {\n-          if (aliasVar.getNode() \u003d\u003d n) {\n-            aliasDefinitionsInOrder.add(n);\n+        int type \u003d n.getType();\n+        if (type \u003d\u003d Token.NAME \u0026\u0026 parent.getType() \u003d\u003d Token.VAR) {\n+          if (n.hasChildren() \u0026\u0026 n.getFirstChild().isQualifiedName()) {\n+            String name \u003d n.getString();\n+            Var aliasVar \u003d t.getScope().getVar(name);\n+            aliases.put(name, aliasVar);\n \n+            aliasDefinitionsInOrder.add(n);\n+            String qualifiedName \u003d\n+                aliasVar.getInitialValue().getQualifiedName();\n+            transformation.addAlias(name, qualifiedName);\n             // Return early, to ensure that we don\u0027t record a definition\n             // twice.\n             return;\n           } else {\n-            report(t, n, GOOG_SCOPE_ALIAS_REDEFINED, n.getString());\n+            report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n           }\n         }\n+        if (type \u003d\u003d Token.NAME \u0026\u0026 NodeUtil.isAssignmentOp(parent) \u0026\u0026\n+            n \u003d\u003d parent.getFirstChild()) {\n+            report(t, n, GOOG_SCOPE_ALIAS_REDEFINED, n.getString());\n+        }\n \n         if (type \u003d\u003d Token.RETURN) {\n           report(t, n, GOOG_SCOPE_USES_RETURN);\n@@ -361,7 +339,11 @@\n       // Validate all descendent scopes of the goog.scope block.\n       if (t.getScopeDepth() \u003e\u003d 2) {\n         // Check if this name points to an alias.\n-        if (aliasVar !\u003d null) {\n+        if (n.getType() \u003d\u003d Token.NAME) {\n+          String name \u003d n.getString();\n+          Var aliasVar \u003d aliases.get(name);\n+          if (aliasVar !\u003d null \u0026\u0026\n+              t.getScope().getVar(name) \u003d\u003d aliasVar) {\n           // Note, to support the transitive case, it\u0027s important we don\u0027t\n           // clone aliasedNode here.  For example,\n           // var g \u003d goog; var d \u003d g.dom; d.createElement(\u0027DIV\u0027);\n@@ -370,6 +352,7 @@\n           // with \u003ccode\u003eg.dom.createElement(\u0027DIV\u0027)\u003c/code\u003e.\n           Node aliasedNode \u003d aliasVar.getInitialValue();\n           aliasUsages.add(new AliasedNode(n, aliasedNode));\n+          }\n         }\n \n         JSDocInfo info \u003d n.getJSDocInfo();\n",
      "operations": [
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "IfStatement [10831,11013]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "IfStatement [11459,12206]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "InfixExpression [10134,10185]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "InfixExpression [10835,10931]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "InfixExpression [11463,11488]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Block [11490,12206]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "INFIX_EXPRESSION_OPERATOR: \u0026\u0026 [10153,10155]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "InfixExpression [10156,10185]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [11541,11574]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Block [10730,10812]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "InfixExpression [11589,11660]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "MethodInvocation [10203,10218]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodInvocation [10222,10257]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "VariableDeclarationStatement [10273,10301]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [10368,10396]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [10454,10539]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [10552,10597]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "INFIX_EXPRESSION_OPERATOR: \u0026\u0026 [11606,11608]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "InfixExpression [11623,11660]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "METHOD_INVOCATION_RECEIVER [10203,10204]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: hasChildren [10205,10216]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SimpleType [10273,10279]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "VariableDeclarationFragment [10280,10300]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: name [10280,10284]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: name [10349,10353]"
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [7437,7452]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [8836,9657]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "InfixExpression [10781,10802]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Block [10804,10829]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "IfStatement [10777,10829]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [10867,10887]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "InfixExpression [11244,11260]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "METHOD_INVOCATION_RECEIVER [11264,11272]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: isLValue [11273,11281]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "METHOD_INVOCATION_ARGUMENTS [11282,11283]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "MethodInvocation [11264,11284]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "ReturnStatement [11481,11488]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "InfixExpression [11302,11325]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "IfStatement [11298,11588]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Block [11286,11598]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [11026,11129]",
          "to": ""
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [
        "com.google.javascript.jscomp.Scope:getReferences:[Var var]:Iterable\u003cVar\u003e"
      ],
      "num": 1
    },
    "delete_functions": {
      "qualified_names": [
        "com.google.javascript.jscomp.Scope:getVarIterable:[]:Iterable\u003cVar\u003e",
        "com.google.javascript.jscomp.ScopedAliases\\$Traversal:findAliases:[NodeTraversal t]:void"
      ],
      "num": 2
    }
  }
}