{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "data/changesInfo/",
  "properties": {
    "trigger.tests": "org.jsoup.safety.CleanerTest::testIsValidBodyHtml,org.jsoup.safety.CleanerTest::testIsValidDocument",
    "test.dir": "src/test/java",
    "clz.modified": "org.jsoup.Jsoup,org.jsoup.parser.Parser,org.jsoup.safety.Cleaner",
    "src.dir": "src/main/java"
  },
  "timeoutSecond": 100,
  "proj": "Jsoup",
  "id": "58",
  "workingDir": "../bugs/Jsoup_58_tmp",
  "bug_name": "Jsoup_58",
  "derive": "defects4j",
  "trigger_tests": [
    {
      "test_class": "org.jsoup.safety.CleanerTest",
      "test_function": "testIsValidBodyHtml",
      "assertion_line": "160",
      "exception": "junit.framework.AssertionFailedError",
      "message": ""
    },
    {
      "test_class": "org.jsoup.safety.CleanerTest",
      "test_function": "testIsValidDocument",
      "assertion_line": "175",
      "exception": "junit.framework.AssertionFailedError",
      "message": ""
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/jsoup/Jsoup.java",
        "src/main/java/org/jsoup/Jsoup.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.jsoup.Jsoup:isValid:[String bodyHtml, Whitelist whitelist]:boolean"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "org.jsoup.Jsoup:isValid:[String bodyHtml, Whitelist whitelist]:boolean"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "250"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "250"
          ],
          "num": 1
        }
      ],
      "diff": "diff --git a/src/main/java/org/jsoup/Jsoup.java b/src/main/java/org/jsoup/Jsoup.java\nindex 84a5e34..d25c186 100644\n--- a/src/main/java/org/jsoup/Jsoup.java\n+++ b/src/main/java/org/jsoup/Jsoup.java\n@@ -247,7 +247,7 @@\n      @see #clean(String, org.jsoup.safety.Whitelist) \n      */\n     public static boolean isValid(String bodyHtml, Whitelist whitelist) {\n-        return new Cleaner(whitelist).isValidBodyHtml(bodyHtml);\n+        return new Cleaner(whitelist).isValid(parseBodyFragment(bodyHtml, \"\"));\n     }\n     \n }\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "ReturnStatement [10745,10816]"
        },
        {
          "type": "delete-tree",
          "from": "ReturnStatement [10745,10801]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/jsoup/parser/Parser.java",
        "src/main/java/org/jsoup/parser/Parser.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.jsoup.parser.Parser:parseFragment:[String fragmentHtml, Element context, String baseUri, ParseErrorList errorList]:List\u003cNode\u003e"
          ],
          "num": 1
        },
        {
          "qualified_names": [],
          "num": 0
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "129",
            "130",
            "131",
            "132"
          ],
          "num": 4
        },
        {
          "qualified_names": [
            "128"
          ],
          "num": 1
        }
      ],
      "diff": "diff --git a/src/main/java/org/jsoup/parser/Parser.java b/src/main/java/org/jsoup/parser/Parser.java\nindex 0751c22..197219b 100644\n--- a/src/main/java/org/jsoup/parser/Parser.java\n+++ b/src/main/java/org/jsoup/parser/Parser.java\n@@ -126,10 +126,6 @@\n      *\n      * @return list of nodes parsed from the input HTML. Note that the context element, if supplied, is not modified.\n      */\n-    public static List\u003cNode\u003e parseFragment(String fragmentHtml, Element context, String baseUri, ParseErrorList errorList) {\n-        HtmlTreeBuilder treeBuilder \u003d new HtmlTreeBuilder();\n-        return treeBuilder.parseFragment(fragmentHtml, context, baseUri, errorList, treeBuilder.defaultSettings());\n-    }\n \n     /**\n      * Parse a fragment of XML into a list of nodes.\n",
      "operations": [
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [3922,4874]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/jsoup/safety/Cleaner.java",
        "src/main/java/org/jsoup/safety/Cleaner.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.jsoup.safety.Cleaner:isValidBodyHtml:[String bodyHtml]:boolean",
            "org.jsoup.safety.Cleaner:isValid:[Document dirtyDocument]:boolean"
          ],
          "num": 2
        },
        {
          "qualified_names": [
            "org.jsoup.safety.Cleaner:isValid:[Document dirtyDocument]:boolean"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "17",
            "79",
            "80",
            "83",
            "84",
            "85",
            "86",
            "87",
            "88",
            "89",
            "90",
            "91"
          ],
          "num": 12
        },
        {
          "qualified_names": [
            "16",
            "78"
          ],
          "num": 2
        }
      ],
      "diff": "diff --git a/src/main/java/org/jsoup/safety/Cleaner.java b/src/main/java/org/jsoup/safety/Cleaner.java\nindex 1223bbe..7e0eb28 100644\n--- a/src/main/java/org/jsoup/safety/Cleaner.java\n+++ b/src/main/java/org/jsoup/safety/Cleaner.java\n@@ -14,7 +14,6 @@\n import org.jsoup.select.NodeTraversor;\n import org.jsoup.select.NodeVisitor;\n \n-import java.util.List;\n \n \n /**\n@@ -76,19 +75,9 @@\n \n         Document clean \u003d Document.createShell(dirtyDocument.baseUri());\n         int numDiscarded \u003d copySafeNodes(dirtyDocument.body(), clean.body());\n-        return numDiscarded \u003d\u003d 0\n-            \u0026\u0026 dirtyDocument.head().childNodes().size() \u003d\u003d 0; // because we only look at the body, but we start from a shell, make sure there\u0027s nothing in the head\n+        return numDiscarded \u003d\u003d 0;\n     }\n \n-    public boolean isValidBodyHtml(String bodyHtml) {\n-        Document clean \u003d Document.createShell(\"\");\n-        Document dirty \u003d Document.createShell(\"\");\n-        ParseErrorList errorList \u003d ParseErrorList.tracking(1);\n-        List\u003cNode\u003e nodes \u003d Parser.parseFragment(bodyHtml, dirty.body(), \"\", errorList);\n-        dirty.body().insertChildren(0, nodes);\n-        int numDiscarded \u003d copySafeNodes(dirty.body(), clean.body());\n-        return numDiscarded \u003d\u003d 0 \u0026\u0026 errorList.size() \u003d\u003d 0;\n-    }\n \n     /**\n      Iterates the input and copies trusted nodes (tags, attributes, text) into the destination.\n",
      "operations": [
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ImportDeclaration [468,490]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "INFIX_EXPRESSION_OPERATOR: \u0026\u0026 [3228,3230]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "InfixExpression [3231,3276]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "InfixExpression [3198,3276]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [3391,3875]",
          "to": ""
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [
        "org.jsoup.safety.Cleaner:isValidBodyHtml:[String bodyHtml]:boolean",
        "org.jsoup.parser.Parser:parseFragment:[String fragmentHtml, Element context, String baseUri, ParseErrorList errorList]:List\u003cNode\u003e"
      ],
      "num": 2
    }
  }
}