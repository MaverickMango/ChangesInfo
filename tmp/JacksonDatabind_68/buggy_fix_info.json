{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "data/changesInfo/",
  "properties": {
    "trigger.tests": "com.fasterxml.jackson.databind.struct.SingleValueAsArrayTest::testSuccessfulDeserializationOfObjectWithChainedArrayCreators,com.fasterxml.jackson.databind.struct.SingleValueAsArrayTest::testWithSingleString",
    "test.dir": "src/test/java",
    "clz.modified": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase",
    "src.dir": "src/main/java"
  },
  "timeoutSecond": 100,
  "proj": "JacksonDatabind",
  "id": "68",
  "workingDir": "../bugs/JacksonDatabind_68_tmp",
  "bug_name": "JacksonDatabind_68",
  "derive": "defects4j",
  "trigger_tests": [
    {
      "test_class": "com.fasterxml.jackson.databind.struct.SingleValueAsArrayTest",
      "test_function": "testSuccessfulDeserializationOfObjectWithChainedArrayCreators",
      "assertion_line": "74",
      "exception": "com.fasterxml.jackson.databind.JsonMappingException",
      "message": "Can not construct instance of com.fasterxml.jackson.databind.struct.SingleValueAsArrayTest$Messages: no suitable constructor found, can not deserialize from Object value (missing default constructor or creator, or perhaps need to add/enable type information?)"
    },
    {
      "test_class": "com.fasterxml.jackson.databind.struct.SingleValueAsArrayTest",
      "test_function": "testWithSingleString",
      "assertion_line": "80",
      "exception": "com.fasterxml.jackson.databind.JsonMappingException",
      "message": "Can not construct instance of com.fasterxml.jackson.databind.struct.SingleValueAsArrayTest$Bean1421B: no String-argument constructor/factory method to deserialize from String value (\u0027test2\u0027)"
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
        "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "com.fasterxml.jackson.databind.deser.BeanDeserializerBase:deserializeFromArray:[JsonParser p, DeserializationContext ctxt]:Object",
            "com.fasterxml.jackson.databind.deser.BeanDeserializerBase:deserializeFromString:[JsonParser p, DeserializationContext ctxt]:Object",
            "com.fasterxml.jackson.databind.deser.BeanDeserializerBase:deserializeFromDouble:[JsonParser p, DeserializationContext ctxt]:Object",
            "com.fasterxml.jackson.databind.deser.BeanDeserializerBase:deserializeFromObjectUsingNonDefault:[JsonParser p, DeserializationContext ctxt]:Object",
            "com.fasterxml.jackson.databind.deser.BeanDeserializerBase:_delegateDeserializer:[]:JsonDeserializer\u003cObject\u003e",
            "com.fasterxml.jackson.databind.deser.BeanDeserializerBase:deserializeFromBoolean:[JsonParser p, DeserializationContext ctxt]:Object",
            "com.fasterxml.jackson.databind.deser.BeanDeserializerBase:deserializeFromNumber:[JsonParser p, DeserializationContext ctxt]:Object"
          ],
          "num": 7
        },
        {
          "qualified_names": [
            "com.fasterxml.jackson.databind.deser.BeanDeserializerBase:deserializeFromArray:[JsonParser p, DeserializationContext ctxt]:Object",
            "com.fasterxml.jackson.databind.deser.BeanDeserializerBase:deserializeFromBoolean:[JsonParser p, DeserializationContext ctxt]:Object",
            "com.fasterxml.jackson.databind.deser.BeanDeserializerBase:deserializeFromNumber:[JsonParser p, DeserializationContext ctxt]:Object",
            "com.fasterxml.jackson.databind.deser.BeanDeserializerBase:deserializeFromString:[JsonParser p, DeserializationContext ctxt]:Object",
            "com.fasterxml.jackson.databind.deser.BeanDeserializerBase:deserializeFromObjectUsingNonDefault:[JsonParser p, DeserializationContext ctxt]:Object",
            "com.fasterxml.jackson.databind.deser.BeanDeserializerBase:deserializeFromDouble:[JsonParser p, DeserializationContext ctxt]:Object"
          ],
          "num": 6
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "1192",
            "1193",
            "1195",
            "1221",
            "1224",
            "1227",
            "1236",
            "1239",
            "1249",
            "1251",
            "1271",
            "1272",
            "1275",
            "1294",
            "1295",
            "1298",
            "1308",
            "1309",
            "1311",
            "1323",
            "1324",
            "1327",
            "1341",
            "1343",
            "1345",
            "1390",
            "1391",
            "1392",
            "1393",
            "1394",
            "1395",
            "1396"
          ],
          "num": 32
        },
        {
          "qualified_names": [
            "1192",
            "1194",
            "1222",
            "1225",
            "1234",
            "1237",
            "1247",
            "1249",
            "1269",
            "1272",
            "1291",
            "1294",
            "1304",
            "1306",
            "1318",
            "1321",
            "1335",
            "1336",
            "1337",
            "1338",
            "1339",
            "1340",
            "1341",
            "1342",
            "1343",
            "1344",
            "1345",
            "1347",
            "1348",
            "1350",
            "1355",
            "1356",
            "1357",
            "1358",
            "1380"
          ],
          "num": 35
        }
      ],
      "diff": "diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java\nindex 3c68604..ac95adc 100644\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java\n@@ -1189,10 +1189,9 @@\n     protected Object deserializeFromObjectUsingNonDefault(JsonParser p,\n             DeserializationContext ctxt) throws IOException\n     {\n-        final JsonDeserializer\u003cObject\u003e delegateDeser \u003d _delegateDeserializer();\n-        if (delegateDeser !\u003d null) {\n+        if (_delegateDeserializer !\u003d null) {\n             return _valueInstantiator.createUsingDelegate(ctxt,\n-                    delegateDeser.deserialize(p, ctxt));\n+                    _delegateDeserializer.deserialize(p, ctxt));\n         }\n         if (_propertyBasedCreator !\u003d null) {\n             return _deserializeUsingPropertyBased(p, ctxt);\n@@ -1218,13 +1217,12 @@\n         if (_objectIdReader !\u003d null) {\n             return deserializeFromObjectId(p, ctxt);\n         }\n-        final JsonDeserializer\u003cObject\u003e delegateDeser \u003d _delegateDeserializer();\n         switch (p.getNumberType()) {\n         case INT:\n-            if (delegateDeser !\u003d null) {\n+            if (_delegateDeserializer !\u003d null) {\n                 if (!_valueInstantiator.canCreateFromInt()) {\n                     Object bean \u003d _valueInstantiator.createUsingDelegate(ctxt,\n-                            delegateDeser.deserialize(p, ctxt));\n+                            _delegateDeserializer.deserialize(p, ctxt));\n                     if (_injectables !\u003d null) {\n                         injectValues(ctxt, bean);\n                     }\n@@ -1233,10 +1231,10 @@\n             }\n             return _valueInstantiator.createFromInt(ctxt, p.getIntValue());\n         case LONG:\n-            if (delegateDeser !\u003d null) {\n+            if (_delegateDeserializer !\u003d null) {\n                 if (!_valueInstantiator.canCreateFromInt()) {\n                     Object bean \u003d _valueInstantiator.createUsingDelegate(ctxt,\n-                            delegateDeser.deserialize(p, ctxt));\n+                            _delegateDeserializer.deserialize(p, ctxt));\n                     if (_injectables !\u003d null) {\n                         injectValues(ctxt, bean);\n                     }\n@@ -1246,9 +1244,9 @@\n             return _valueInstantiator.createFromLong(ctxt, p.getLongValue());\n         }\n         // actually, could also be BigInteger, so:\n-        if (delegateDeser !\u003d null) {\n+        if (_delegateDeserializer !\u003d null) {\n             Object bean \u003d _valueInstantiator.createUsingDelegate(ctxt,\n-                    delegateDeser.deserialize(p, ctxt));\n+                    _delegateDeserializer.deserialize(p, ctxt));\n             if (_injectables !\u003d null) {\n                 injectValues(ctxt, bean);\n             }\n@@ -1268,11 +1266,10 @@\n         /* Bit complicated if we have delegating creator; may need to use it,\n          * or might not...\n          */\n-        JsonDeserializer\u003cObject\u003e delegateDeser \u003d _delegateDeserializer();\n-        if (delegateDeser !\u003d null) {\n+        if (_delegateDeserializer !\u003d null) {\n             if (!_valueInstantiator.canCreateFromString()) {\n                 Object bean \u003d _valueInstantiator.createUsingDelegate(ctxt,\n-                        delegateDeser.deserialize(p, ctxt));\n+                        _delegateDeserializer.deserialize(p, ctxt));\n                 if (_injectables !\u003d null) {\n                     injectValues(ctxt, bean);\n                 }\n@@ -1291,11 +1288,10 @@\n         NumberType t \u003d p.getNumberType();\n         // no separate methods for taking float...\n         if ((t \u003d\u003d NumberType.DOUBLE) || (t \u003d\u003d NumberType.FLOAT)) {\n-            JsonDeserializer\u003cObject\u003e delegateDeser \u003d _delegateDeserializer();\n-            if (delegateDeser !\u003d null) {\n+            if (_delegateDeserializer !\u003d null) {\n                 if (!_valueInstantiator.canCreateFromDouble()) {\n                     Object bean \u003d _valueInstantiator.createUsingDelegate(ctxt,\n-                            delegateDeser.deserialize(p, ctxt));\n+                            _delegateDeserializer.deserialize(p, ctxt));\n                     if (_injectables !\u003d null) {\n                         injectValues(ctxt, bean);\n                     }\n@@ -1305,10 +1301,9 @@\n             return _valueInstantiator.createFromDouble(ctxt, p.getDoubleValue());\n         }\n         // actually, could also be BigDecimal, so:\n-        JsonDeserializer\u003cObject\u003e delegateDeser \u003d _delegateDeserializer();\n-        if (delegateDeser !\u003d null) {\n+        if (_delegateDeserializer !\u003d null) {\n             return _valueInstantiator.createUsingDelegate(ctxt,\n-                    delegateDeser.deserialize(p, ctxt));\n+                    _delegateDeserializer.deserialize(p, ctxt));\n         }\n         return ctxt.handleMissingInstantiator(handledType(), p,\n                 \"no suitable creator method found to deserialize from Number value (%s)\",\n@@ -1320,11 +1315,10 @@\n      */\n     public Object deserializeFromBoolean(JsonParser p, DeserializationContext ctxt) throws IOException\n     {\n-        JsonDeserializer\u003cObject\u003e delegateDeser \u003d _delegateDeserializer();\n-        if (delegateDeser !\u003d null) {\n+        if (_delegateDeserializer !\u003d null) {\n             if (!_valueInstantiator.canCreateFromBoolean()) {\n                 Object bean \u003d _valueInstantiator.createUsingDelegate(ctxt,\n-                        delegateDeser.deserialize(p, ctxt));\n+                        _delegateDeserializer.deserialize(p, ctxt));\n                 if (_injectables !\u003d null) {\n                     injectValues(ctxt, bean);\n                 }\n@@ -1338,15 +1332,30 @@\n     public Object deserializeFromArray(JsonParser p, DeserializationContext ctxt) throws IOException\n     {\n         // note: can not call `_delegateDeserializer()` since order reversed here:\n-        JsonDeserializer\u003cObject\u003e delegateDeser \u003d _arrayDelegateDeserializer;\n+        if (_arrayDelegateDeserializer !\u003d null) {\n+            try {\n+                Object bean \u003d _valueInstantiator.createUsingArrayDelegate(ctxt, _arrayDelegateDeserializer.deserialize(p, ctxt));\n+                if (_injectables !\u003d null) {\n+                    injectValues(ctxt, bean);\n+                }\n+                return bean;\n+            } catch (Exception e) {\n+                return wrapInstantiationProblem(e, ctxt);\n+            }\n+        }\n         // fallback to non-array delegate\n-        if ((delegateDeser !\u003d null) || ((delegateDeser \u003d _delegateDeserializer) !\u003d null)) {\n+        if (_delegateDeserializer !\u003d null) {\n+            try {\n             Object bean \u003d _valueInstantiator.createUsingArrayDelegate(ctxt,\n-                    delegateDeser.deserialize(p, ctxt));\n+                    _delegateDeserializer.deserialize(p, ctxt));\n             if (_injectables !\u003d null) {\n                 injectValues(ctxt, bean);\n             }\n             return bean;\n+            } catch (Exception e) {\n+                wrapInstantiationProblem(e, ctxt);\n+                return null;\n+            }\n         }\n         if (ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {\n             JsonToken t \u003d p.nextToken();\n@@ -1387,13 +1396,6 @@\n     /**\n      * @since 2.9\n      */\n-    private final JsonDeserializer\u003cObject\u003e _delegateDeserializer() {\n-        JsonDeserializer\u003cObject\u003e deser \u003d _delegateDeserializer;\n-        if (deser \u003d\u003d null) {\n-            deser \u003d _arrayDelegateDeserializer;\n-        }\n-        return deser;\n-    }\n \n     /*\n     /**********************************************************\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [57107,57136]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "IfStatement [54723,55167]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [55218,55674]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "InfixExpression [54727,54761]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Block [54763,55167]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TryStatement [54777,55157]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Block [54781,55063]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "CatchClause [55064,55157]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: delegateDeser [48540,48553]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "MethodInvocation [48556,48579]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "VariableDeclarationStatement [48509,48580]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: delegateDeser [49925,49938]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "MethodInvocation [49941,49964]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "VariableDeclarationStatement [49894,49965]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: delegateDeser [52048,52061]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "MethodInvocation [52064,52087]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "VariableDeclarationStatement [52023,52088]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: delegateDeser [52972,52985]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "MethodInvocation [52988,53011]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "VariableDeclarationStatement [52947,53012]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [53599,53664]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: delegateDeser [54276,54289]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "MethodInvocation [54292,54315]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "VariableDeclarationStatement [54251,54316]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ParameterizedType [55055,55079]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: delegateDeser [55080,55093]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "VariableDeclarationFragment [55080,55122]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "VariableDeclarationStatement [55055,55123]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "InfixExpression [55178,55254]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Block [55256,55521]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "IfStatement [55174,55521]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [56954,57231]",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [
        "com.fasterxml.jackson.databind.deser.BeanDeserializerBase:_delegateDeserializer:[]:JsonDeserializer\u003cObject\u003e"
      ],
      "num": 1
    }
  }
}