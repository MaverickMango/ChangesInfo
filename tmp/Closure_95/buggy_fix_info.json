{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "data/changesInfo/",
  "properties": {
    "trigger.tests": "com.google.javascript.jscomp.TypeCheckTest::testQualifiedNameInference5,com.google.javascript.jscomp.TypedScopeCreatorTest::testGlobalQualifiedNameInLocalScope",
    "test.dir": "test",
    "clz.modified": "com.google.javascript.jscomp.TypedScopeCreator",
    "src.dir": "src"
  },
  "timeoutSecond": 100,
  "proj": "Closure",
  "id": "95",
  "workingDir": "../bugs/Closure_95_tmp",
  "bug_name": "Closure_95",
  "derive": "defects4j",
  "trigger_tests": [
    {
      "test_class": "com.google.javascript.jscomp.TypeCheckTest",
      "test_function": "testQualifiedNameInference5",
      "assertion_line": "4761",
      "exception": "junit.framework.AssertionFailedError",
      "message": "expected a warning"
    },
    {
      "test_class": "com.google.javascript.jscomp.TypedScopeCreatorTest",
      "test_function": "testGlobalQualifiedNameInLocalScope",
      "assertion_line": "781",
      "exception": "junit.framework.AssertionFailedError",
      "message": ""
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/jscomp/TypedScopeCreator.java",
        "src/com/google/javascript/jscomp/TypedScopeCreator.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "com.google.javascript.jscomp.TypedScopeCreator\\$AbstractScopeBuilder:defineSlot:[Node n, Node parent, JSType type, boolean inferred]:void"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "com.google.javascript.jscomp.TypedScopeCreator\\$AbstractScopeBuilder:defineSlot:[Node n, Node parent, JSType type, boolean inferred]:void"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "899",
            "900",
            "901",
            "905",
            "906",
            "907",
            "908"
          ],
          "num": 7
        },
        {
          "qualified_names": [
            "898"
          ],
          "num": 1
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex c7005b2..4bd6bfb 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -896,16 +896,9 @@\n       // scope where the root object appears. This helps out people\n       // who declare \"global\" names in an anonymous namespace.\n       Scope scopeToDeclareIn \u003d scope;\n-      if (n.getType() \u003d\u003d Token.GETPROP \u0026\u0026 !scope.isGlobal() \u0026\u0026\n-          isQnameRootedInGlobalScope(n)) {\n-        Scope globalScope \u003d scope.getGlobalScope();\n \n         // don\u0027t try to declare in the global scope if there\u0027s\n         // already a symbol there with this name.\n-        if (!globalScope.isDeclared(variableName, false)) {\n-          scopeToDeclareIn \u003d scope.getGlobalScope();\n-        }\n-      }\n \n       // declared in closest scope?\n       if (scopeToDeclareIn.isDeclared(variableName, false)) {\n",
      "operations": [
        {
          "type": "delete-tree",
          "from": "IfStatement [33278,33674]",
          "to": ""
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  }
}