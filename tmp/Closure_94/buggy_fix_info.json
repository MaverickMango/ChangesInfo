{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "data/changesInfo/",
  "properties": {
    "trigger.tests": "com.google.javascript.jscomp.NodeUtilTest::testValidDefine,com.google.javascript.jscomp.ProcessDefinesTest::testOverridingString1,com.google.javascript.jscomp.ProcessDefinesTest::testOverridingString3",
    "test.dir": "test",
    "clz.modified": "com.google.javascript.jscomp.NodeUtil",
    "src.dir": "src"
  },
  "timeoutSecond": 100,
  "proj": "Closure",
  "id": "94",
  "workingDir": "../bugs/Closure_94_tmp",
  "bug_name": "Closure_94",
  "derive": "defects4j",
  "trigger_tests": [
    {
      "test_class": "com.google.javascript.jscomp.NodeUtilTest",
      "test_function": "testValidDefine",
      "assertion_line": "1086",
      "exception": "junit.framework.AssertionFailedError",
      "message": ""
    },
    {
      "test_class": "com.google.javascript.jscomp.ProcessDefinesTest",
      "test_function": "testOverridingString1",
      "assertion_line": "147",
      "exception": "junit.framework.AssertionFailedError",
      "message": "Unexpected error(s): JSC_INVALID_DEFINE_INIT_ERROR. illegal initialization of @define variable DEF_OVERRIDE_STRING at testcode line 1 : 54 expected:\u003c0\u003e but was:\u003c1\u003e"
    },
    {
      "test_class": "com.google.javascript.jscomp.ProcessDefinesTest",
      "test_function": "testOverridingString3",
      "assertion_line": "161",
      "exception": "junit.framework.AssertionFailedError",
      "message": "Unexpected error(s): JSC_INVALID_DEFINE_INIT_ERROR. illegal initialization of @define variable DEF_OVERRIDE_STRING at testcode line 1 : 54 expected:\u003c0\u003e but was:\u003c1\u003e"
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/jscomp/NodeUtil.java",
        "src/com/google/javascript/jscomp/NodeUtil.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "com.google.javascript.jscomp.NodeUtil:isValidDefineValue:[Node val, Set\u003cString\u003e defines]:boolean"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "com.google.javascript.jscomp.NodeUtil:isValidDefineValue:[Node val, Set\u003cString\u003e defines]:boolean"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "329",
            "334",
            "335",
            "336",
            "337",
            "338",
            "339",
            "340",
            "341",
            "342",
            "343",
            "344",
            "345",
            "346",
            "347",
            "348",
            "349",
            "350",
            "355"
          ],
          "num": 19
        },
        {
          "qualified_names": [
            "328"
          ],
          "num": 1
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java\nindex 8c5d125..a31b17a 100644\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n@@ -326,33 +326,14 @@\n         return true;\n \n       // Binary operators are only valid if both children are valid.\n-      case Token.ADD:\n       case Token.BITAND:\n       case Token.BITNOT:\n       case Token.BITOR:\n       case Token.BITXOR:\n-      case Token.DIV:\n-      case Token.EQ:\n-      case Token.GE:\n-      case Token.GT:\n-      case Token.LE:\n-      case Token.LSH:\n-      case Token.LT:\n-      case Token.MOD:\n-      case Token.MUL:\n-      case Token.NE:\n-      case Token.RSH:\n-      case Token.SHEQ:\n-      case Token.SHNE:\n-      case Token.SUB:\n-      case Token.URSH:\n-        return isValidDefineValue(val.getFirstChild(), defines)\n-            \u0026\u0026 isValidDefineValue(val.getLastChild(), defines);\n \n       // Uniary operators are valid if the child is valid.\n       case Token.NOT:\n       case Token.NEG:\n-      case Token.POS:\n         return isValidDefineValue(val.getFirstChild(), defines);\n \n       // Names are valid if and only if they are defines themselves.\n",
      "operations": [
        {
          "type": "delete-tree",
          "from": "SwitchCase [10399,10414]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SwitchCase [10520,10535]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SwitchCase [10542,10556]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SwitchCase [10563,10577]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SwitchCase [10584,10598]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SwitchCase [10605,10619]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SwitchCase [10626,10641]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SwitchCase [10648,10662]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SwitchCase [10669,10684]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SwitchCase [10691,10706]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SwitchCase [10713,10727]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SwitchCase [10734,10749]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SwitchCase [10756,10772]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SwitchCase [10779,10795]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SwitchCase [10802,10817]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SwitchCase [10824,10840]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ReturnStatement [10849,10968]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SwitchCase [11079,11094]",
          "to": ""
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  }
}