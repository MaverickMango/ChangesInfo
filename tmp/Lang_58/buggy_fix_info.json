{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "data/changesInfo/",
  "properties": {
    "trigger.tests": "org.apache.commons.lang.math.NumberUtilsTest::testLang300",
    "test.dir": "src/test",
    "clz.modified": "org.apache.commons.lang.math.NumberUtils",
    "src.dir": "src/java"
  },
  "timeoutSecond": 100,
  "proj": "Lang",
  "id": "58",
  "workingDir": "../bugs/Lang_58_tmp",
  "bug_name": "Lang_58",
  "derive": "defects4j",
  "trigger_tests": [
    {
      "test_class": "org.apache.commons.lang.math.NumberUtilsTest",
      "test_function": "testLang300",
      "assertion_line": "1371",
      "exception": "java.lang.NumberFormatException",
      "message": "1l is not a valid number."
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/lang/math/NumberUtils.java",
        "src/java/org/apache/commons/lang/math/NumberUtils.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.lang.math.NumberUtils:createNumber:[String str]:Number"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "org.apache.commons.lang.math.NumberUtils:createNumber:[String str]:Number"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "454"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "454",
            "455"
          ],
          "num": 2
        }
      ],
      "diff": "diff --git a/src/java/org/apache/commons/lang/math/NumberUtils.java b/src/java/org/apache/commons/lang/math/NumberUtils.java\nindex eb74e72..c0f06a4 100644\n--- a/src/java/org/apache/commons/lang/math/NumberUtils.java\n+++ b/src/java/org/apache/commons/lang/math/NumberUtils.java\n@@ -451,7 +451,8 @@\n                 case \u0027L\u0027 :\n                     if (dec \u003d\u003d null\n                         \u0026\u0026 exp \u003d\u003d null\n-                        \u0026\u0026 (numeric.charAt(0) \u003d\u003d \u0027-\u0027 \u0026\u0026 isDigits(numeric.substring(1)) || isDigits(numeric))) {\n+                        \u0026\u0026 isDigits(numeric.substring(1))\n+                        \u0026\u0026 (numeric.charAt(0) \u003d\u003d \u0027-\u0027 || Character.isDigit(numeric.charAt(0)))) {\n                         try {\n                             return createLong(numeric);\n                         } catch (NumberFormatException nfe) {\n",
      "operations": [
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "InfixExpression [16329,16437]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "ParenthesizedExpression [16465,16531]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "InfixExpression [16466,16530]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "MethodInvocation [16494,16530]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "METHOD_INVOCATION_RECEIVER [16494,16503]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: isDigit [16504,16511]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "METHOD_INVOCATION_ARGUMENTS [16512,16529]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "MethodInvocation [16512,16529]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "METHOD_INVOCATION_RECEIVER [16512,16519]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: charAt [16520,16526]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "METHOD_INVOCATION_ARGUMENTS [16527,16528]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: isDigits [16470,16478]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "METHOD_INVOCATION_ARGUMENTS [16479,16486]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "MethodInvocation [16470,16487]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "InfixExpression [16408,16487]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "ParenthesizedExpression [16407,16488]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "InfixExpression [16329,16488]",
          "to": ""
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  }
}