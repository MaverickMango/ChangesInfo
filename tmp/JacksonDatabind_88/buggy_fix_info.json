{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "data/changesInfo/",
  "properties": {
    "trigger.tests": "com.fasterxml.jackson.databind.jsontype.GenericTypeId1735Test::testNestedTypeCheck1735",
    "test.dir": "src/test/java",
    "clz.modified": "com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver",
    "src.dir": "src/main/java"
  },
  "timeoutSecond": 100,
  "proj": "JacksonDatabind",
  "id": "88",
  "workingDir": "../bugs/JacksonDatabind_88_tmp",
  "bug_name": "JacksonDatabind_88",
  "derive": "defects4j",
  "trigger_tests": [
    {
      "test_class": "com.fasterxml.jackson.databind.jsontype.GenericTypeId1735Test",
      "test_function": "testNestedTypeCheck1735",
      "assertion_line": "61",
      "exception": "junit.framework.AssertionFailedError",
      "message": "Expected an exception with one of substrings ([not subtype of]): got one (of type com.fasterxml.jackson.databind.JsonMappingException) with message \"Problem deserializing property \u0027w\u0027 (expected type: [simple type, class com.fasterxml.jackson.databind.jsontype.GenericTypeId1735Test$Payload1735]; actual type: java.util.HashMap), problem: Can not set com.fasterxml.jackson.databind.jsontype.GenericTypeId1735Test$Payload1735 field com.fasterxml.jackson.databind.jsontype.GenericTypeId1735Test$Wrapper1735.w to java.util.HashMap"
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/com/fasterxml/jackson/databind/jsontype/impl/ClassNameIdResolver.java",
        "src/main/java/com/fasterxml/jackson/databind/jsontype/impl/ClassNameIdResolver.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver:_typeFromId:[String id, DatabindContext ctxt]:JavaType"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver:_typeFromId:[String id, DatabindContext ctxt]:JavaType"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "58",
            "60",
            "61",
            "62"
          ],
          "num": 4
        },
        {
          "qualified_names": [
            "57"
          ],
          "num": 1
        }
      ],
      "diff": "diff --git a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/ClassNameIdResolver.java b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/ClassNameIdResolver.java\nindex d1418eb..142fc36 100644\n--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/ClassNameIdResolver.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/ClassNameIdResolver.java\n@@ -55,11 +55,7 @@\n             //    compatibility -- needed later anyway, and not doing so may open\n             //    security issues.\n             JavaType t \u003d tf.constructFromCanonical(id);\n-            if (!t.isTypeOrSubTypeOf(_baseType.getRawClass())) {\n                 // Probably cleaner to have a method in `TypeFactory` but can\u0027t add in patch\n-                throw new IllegalArgumentException(String.format(\n-                        \"Class %s not subtype of %s\", t.getRawClass().getName(), _baseType));\n-            }\n             return t;\n         }\n         Class\u003c?\u003e cls;\n",
      "operations": [
        {
          "type": "delete-tree",
          "from": "IfStatement [2049,2368]",
          "to": ""
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  }
}