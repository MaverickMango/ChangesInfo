{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "data/changesInfo/",
  "properties": {
    "trigger.tests": "org.apache.commons.math3.dfp.DfpTest::testMultiply",
    "test.dir": "src/test/java",
    "clz.modified": "org.apache.commons.math3.dfp.Dfp",
    "src.dir": "src/main/java"
  },
  "timeoutSecond": 100,
  "proj": "Math",
  "id": "17",
  "workingDir": "../bugs/Math_17_tmp",
  "bug_name": "Math_17",
  "derive": "defects4j",
  "trigger_tests": [
    {
      "test_class": "org.apache.commons.math3.dfp.DfpTest",
      "test_function": "testMultiply",
      "assertion_line": "909",
      "exception": "junit.framework.AssertionFailedError",
      "message": "assersion failed Multiply #37 x \u003d NaN flags \u003d 1"
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/math3/dfp/Dfp.java",
        "src/main/java/org/apache/commons/math3/dfp/Dfp.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.math3.dfp.Dfp:multiply:[final int x]:Dfp"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "org.apache.commons.math3.dfp.Dfp:multiply:[final int x]:Dfp"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "1603",
            "1605",
            "1606",
            "1607"
          ],
          "num": 4
        },
        {
          "qualified_names": [
            "1602"
          ],
          "num": 1
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/math3/dfp/Dfp.java b/src/main/java/org/apache/commons/math3/dfp/Dfp.java\nindex 3a91982..0f78330 100644\n--- a/src/main/java/org/apache/commons/math3/dfp/Dfp.java\n+++ b/src/main/java/org/apache/commons/math3/dfp/Dfp.java\n@@ -1600,11 +1600,7 @@\n      * @return product of this and x\n      */\n     public Dfp multiply(final int x) {\n-        if (x \u003e\u003d 0 \u0026\u0026 x \u003c RADIX) {\n             return multiplyFast(x);\n-        } else {\n-            return multiply(newInstance(x));\n-        }\n     }\n \n     /** Multiply this by a single digit 0\u0026lt;\u003dx\u0026lt;radix.\n",
      "operations": [
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "InfixExpression [49359,49378]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Block [49380,49427]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "Block [49433,49489]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "IfStatement [49355,49489]",
          "to": ""
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  }
}