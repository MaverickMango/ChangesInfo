{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "data/changesInfo/",
  "properties": {
    "trigger.tests": "com.google.javascript.jscomp.CrossModuleMethodMotionTest::testIssue600b,com.google.javascript.jscomp.CrossModuleMethodMotionTest::testIssue600e,com.google.javascript.jscomp.CrossModuleMethodMotionTest::testIssue600",
    "test.dir": "test",
    "clz.modified": "com.google.javascript.jscomp.AnalyzePrototypeProperties,com.google.javascript.jscomp.CrossModuleMethodMotion",
    "src.dir": "src"
  },
  "timeoutSecond": 100,
  "proj": "Closure",
  "id": "163",
  "workingDir": "../bugs/Closure_163_tmp",
  "bug_name": "Closure_163",
  "derive": "defects4j",
  "trigger_tests": [
    {
      "test_class": "com.google.javascript.jscomp.CrossModuleMethodMotionTest",
      "test_function": "testIssue600b",
      "assertion_line": "458",
      "exception": "junit.framework.AssertionFailedError",
      "message": "Expected: var jQuery1\u003dfunction(){var jQuery2\u003dfunction(){};jQuery2.prototype\u003d{size:function(){return 1}};return jQuery2}();(function(){var div\u003djQuery1(\"div\");div.size()})()\nResult: var JSCompiler_stubMap\u003d[];function JSCompiler_stubMethod(JSCompiler_stubMethod_id){return function(){return JSCompiler_stubMap[JSCompiler_stubMethod_id].apply(this,arguments)}}function JSCompiler_unstubMethod(JSCompiler_unstubMethod_id,JSCompiler_unstubMethod_body){return JSCompiler_stubMap[JSCompiler_unstubMethod_id]\u003dJSCompiler_unstubMethod_body}var jQuery1\u003dfunction(){var jQuery2\u003dfunction(){};jQuery2.prototype\u003d{size:JSCompiler_stubMethod(0)};return jQuery2}();"
    },
    {
      "test_class": "com.google.javascript.jscomp.CrossModuleMethodMotionTest",
      "test_function": "testIssue600e",
      "assertion_line": "539",
      "exception": "junit.framework.AssertionFailedError",
      "message": "Expected: var jQuery2\u003dfunction(){};(function(){var theLoneliestNumber\u003d1;jQuery2.prototype\u003d{size:function(){return theLoneliestNumber}}})();(function(){var div\u003djQuery2(\"div\");div.size()})()\nResult: var JSCompiler_stubMap\u003d[];function JSCompiler_stubMethod(JSCompiler_stubMethod_id){return function(){return JSCompiler_stubMap[JSCompiler_stubMethod_id].apply(this,arguments)}}function JSCompiler_unstubMethod(JSCompiler_unstubMethod_id,JSCompiler_unstubMethod_body){return JSCompiler_stubMap[JSCompiler_unstubMethod_id]\u003dJSCompiler_unstubMethod_body}var jQuery2\u003dfunction(){};(function(){var theLoneliestNumber\u003d1;jQuery2.prototype\u003d{size:JSCompiler_stubMethod(0)}})();"
    },
    {
      "test_class": "com.google.javascript.jscomp.CrossModuleMethodMotionTest",
      "test_function": "testIssue600",
      "assertion_line": "438",
      "exception": "junit.framework.AssertionFailedError",
      "message": "Expected: var jQuery1\u003dfunction(){var jQuery2\u003dfunction(){};var theLoneliestNumber\u003d1;jQuery2.prototype\u003d{size:function(){return theLoneliestNumber}};return jQuery2}();(function(){var div\u003djQuery1(\"div\");div.size()})()\nResult: var JSCompiler_stubMap\u003d[];function JSCompiler_stubMethod(JSCompiler_stubMethod_id){return function(){return JSCompiler_stubMap[JSCompiler_stubMethod_id].apply(this,arguments)}}function JSCompiler_unstubMethod(JSCompiler_unstubMethod_id,JSCompiler_unstubMethod_body){return JSCompiler_stubMap[JSCompiler_unstubMethod_id]\u003dJSCompiler_unstubMethod_body}var jQuery1\u003dfunction(){var jQuery2\u003dfunction(){};var theLoneliestNumber\u003d1;jQuery2.prototype\u003d{size:JSCompiler_stubMethod(0)};return jQuery2}();"
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java",
        "src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "com.google.javascript.jscomp.AnalyzePrototypeProperties\\$AssignmentProperty:getRootVar:[]:Var",
            "com.google.javascript.jscomp.AnalyzePrototypeProperties\\$Symbol:getRootVar:[]:Var",
            "com.google.javascript.jscomp.AnalyzePrototypeProperties\\$ProcessProperties:isAssignRValue:[Node n, Node parent]:boolean",
            "com.google.javascript.jscomp.AnalyzePrototypeProperties\\$ProcessProperties:processGlobalFunctionDeclaration:[NodeTraversal t, Node nameNode, Var v]:boolean",
            "com.google.javascript.jscomp.AnalyzePrototypeProperties\\$GlobalFunction:getRootVar:[]:Var",
            "com.google.javascript.jscomp.AnalyzePrototypeProperties\\$LiteralProperty:getRootVar:[]:Var",
            "com.google.javascript.jscomp.AnalyzePrototypeProperties\\$ProcessProperties:processPrototypeRef:[NodeTraversal t, Node ref]:boolean",
            "com.google.javascript.jscomp.AnalyzePrototypeProperties\\$ProcessProperties:shouldTraverse:[NodeTraversal t, Node n, Node parent]:boolean",
            "com.google.javascript.jscomp.AnalyzePrototypeProperties\\$ProcessProperties:isGlobalFunctionDeclaration:[NodeTraversal t, Node n]:boolean",
            "com.google.javascript.jscomp.AnalyzePrototypeProperties\\$NameContext:NameContext:[NameInfo name, Scope scope]:null",
            "com.google.javascript.jscomp.AnalyzePrototypeProperties\\$ProcessProperties:visit:[NodeTraversal t, Node n, Node parent]:void",
            "com.google.javascript.jscomp.AnalyzePrototypeProperties\\$GlobalFunction:GlobalFunction:[Node nameNode, Var var, JSModule module]:null",
            "com.google.javascript.jscomp.AnalyzePrototypeProperties\\$AssignmentProperty:remove:[]:void",
            "com.google.javascript.jscomp.AnalyzePrototypeProperties\\$LiteralProperty:LiteralProperty:[Node key, Node value, Node map, Node assign, Var rootVar, JSModule module]:null",
            "com.google.javascript.jscomp.AnalyzePrototypeProperties\\$GlobalFunction:remove:[]:void",
            "com.google.javascript.jscomp.AnalyzePrototypeProperties\\$ProcessProperties:enterScope:[NodeTraversal t]:void",
            "com.google.javascript.jscomp.AnalyzePrototypeProperties\\$ProcessProperties:exitScope:[NodeTraversal t]:void",
            "com.google.javascript.jscomp.AnalyzePrototypeProperties\\$ProcessProperties:processNonFunctionPrototypeAssign:[Node n, Node parent]:String",
            "com.google.javascript.jscomp.AnalyzePrototypeProperties\\$LiteralProperty:remove:[]:void",
            "com.google.javascript.jscomp.AnalyzePrototypeProperties\\$AssignmentProperty:AssignmentProperty:[Node node, Var rootVar, JSModule module]:null",
            "com.google.javascript.jscomp.AnalyzePrototypeProperties\\$ProcessProperties:getPrototypePropertyNameFromRValue:[Node rValue]:String"
          ],
          "num": 21
        },
        {
          "qualified_names": [
            "com.google.javascript.jscomp.AnalyzePrototypeProperties\\$ProcessProperties:processGlobalFunctionDeclaration:[NodeTraversal t, Node nameNode, Node parent, Node gramps]:boolean",
            "com.google.javascript.jscomp.AnalyzePrototypeProperties\\$ProcessProperties:enterScope:[NodeTraversal t]:void",
            "com.google.javascript.jscomp.AnalyzePrototypeProperties\\$ProcessProperties:visit:[NodeTraversal t, Node n, Node parent]:void",
            "com.google.javascript.jscomp.AnalyzePrototypeProperties\\$ProcessProperties:shouldTraverse:[NodeTraversal t, Node n, Node parent]:boolean",
            "com.google.javascript.jscomp.AnalyzePrototypeProperties\\$GlobalFunction:remove:[]:void",
            "com.google.javascript.jscomp.AnalyzePrototypeProperties\\$ProcessProperties:exitScope:[NodeTraversal t]:void",
            "com.google.javascript.jscomp.AnalyzePrototypeProperties\\$GlobalFunction:GlobalFunction:[Node nameNode, Node parent, Node gramps, JSModule module]:null",
            "com.google.javascript.jscomp.AnalyzePrototypeProperties\\$ProcessProperties:isGlobalFunctionDeclaration:[NodeTraversal t, Node n]:boolean",
            "com.google.javascript.jscomp.AnalyzePrototypeProperties\\$NameContext:NameContext:[NameInfo name]:null",
            "com.google.javascript.jscomp.AnalyzePrototypeProperties\\$AssignmentProperty:AssignmentProperty:[Node node, JSModule module]:null",
            "com.google.javascript.jscomp.AnalyzePrototypeProperties\\$ProcessProperties:processPrototypeParent:[NodeTraversal t, Node n]:void",
            "com.google.javascript.jscomp.AnalyzePrototypeProperties\\$ProcessProperties:isPrototypePropertyAssign:[Node assign]:boolean",
            "com.google.javascript.jscomp.AnalyzePrototypeProperties\\$ProcessProperties:ProcessProperties:[]:null",
            "com.google.javascript.jscomp.AnalyzePrototypeProperties\\$LiteralProperty:LiteralProperty:[Node key, Node value, Node map, Node assign, JSModule module]:null"
          ],
          "num": 14
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "203",
            "204",
            "205",
            "206",
            "207",
            "208",
            "209",
            "210",
            "211",
            "212",
            "213",
            "214",
            "215",
            "216",
            "217",
            "218",
            "224",
            "225",
            "226",
            "227",
            "228",
            "229",
            "234",
            "240",
            "241",
            "242",
            "243",
            "244",
            "254",
            "256",
            "257",
            "258",
            "261",
            "264",
            "265",
            "266",
            "267",
            "268",
            "269",
            "270",
            "273",
            "274",
            "278",
            "279",
            "280",
            "281",
            "282",
            "303",
            "328",
            "352",
            "353",
            "354",
            "355",
            "356",
            "357",
            "366",
            "367",
            "368",
            "369",
            "370",
            "372",
            "373",
            "379",
            "380",
            "381",
            "390",
            "391",
            "392",
            "393",
            "394",
            "395",
            "396",
            "397",
            "400",
            "401",
            "402",
            "403",
            "404",
            "405",
            "406",
            "407",
            "408",
            "410",
            "411",
            "412",
            "413",
            "414",
            "415",
            "423",
            "425",
            "434",
            "454",
            "455",
            "457",
            "471",
            "474",
            "488",
            "492",
            "496",
            "548",
            "566",
            "569",
            "570",
            "575",
            "580",
            "581",
            "582",
            "584",
            "633",
            "639",
            "641",
            "646",
            "647",
            "648",
            "650",
            "686",
            "690",
            "695",
            "700",
            "701",
            "702",
            "704",
            "734",
            "736",
            "738"
          ],
          "num": 125
        },
        {
          "qualified_names": [
            "201",
            "202",
            "203",
            "206",
            "216",
            "222",
            "223",
            "224",
            "225",
            "226",
            "227",
            "228",
            "229",
            "230",
            "231",
            "242",
            "247",
            "250",
            "254",
            "255",
            "256",
            "257",
            "278",
            "279",
            "304",
            "305",
            "306",
            "339",
            "340",
            "341",
            "342",
            "348",
            "349",
            "350",
            "351",
            "352",
            "353",
            "354",
            "363",
            "364",
            "365",
            "366",
            "367",
            "368",
            "369",
            "370",
            "373",
            "374",
            "382",
            "392",
            "412",
            "514",
            "518",
            "533",
            "581",
            "596",
            "626",
            "665",
            "667"
          ],
          "num": 59
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java b/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\nindex 1eca61c..89a39bc 100644\n--- a/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\n+++ b/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\n@@ -198,50 +198,37 @@\n     //    given a name context. These contexts do not have scopes.\n     private Stack\u003cNameContext\u003e symbolStack \u003d new Stack\u003cNameContext\u003e();\n \n+    private ProcessProperties() {\n+      symbolStack.push(new NameContext(globalNode));\n+    }\n     @Override\n     public void enterScope(NodeTraversal t) {\n-      Node n \u003d t.getCurrentNode();\n-      if (n.isFunction()) {\n-        String propName \u003d getPrototypePropertyNameFromRValue(n);\n-        if (propName !\u003d null) {\n-          symbolStack.push(\n-              new NameContext(\n-                  getNameInfoForName(propName, PROPERTY),\n-                  t.getScope()));\n-        } else if (isGlobalFunctionDeclaration(t, n)) {\n-          Node parent \u003d n.getParent();\n-          String name \u003d parent.isName() ?\n-              parent.getString() /* VAR */ :\n-              n.getFirstChild().getString() /* named function */;\n-          symbolStack.push(\n-              new NameContext(getNameInfoForName(name, VAR), t.getScope()));\n-        } else {\n+      symbolStack.peek().scope \u003d t.getScope();\n           // NOTE(nicksantos): We use the same anonymous node for all\n           // functions that do not have reasonable names. I can\u0027t remember\n           // at the moment why we do this. I think it\u0027s because anonymous\n           // nodes can never have in-edges. They\u0027re just there as a placeholder\n           // for scope information, and do not matter in the edge propagation.\n-          symbolStack.push(new NameContext(anonymousNode, t.getScope()));\n-        }\n-      } else {\n-        Preconditions.checkState(t.inGlobalScope());\n-        symbolStack.push(new NameContext(globalNode, t.getScope()));\n-      }\n     }\n \n     @Override\n     public void exitScope(NodeTraversal t) {\n-      symbolStack.pop();\n+\n     }\n \n     @Override\n     public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n       // Process prototype assignments to non-functions.\n-      String propName \u003d processNonFunctionPrototypeAssign(n, parent);\n-      if (propName !\u003d null) {\n-        symbolStack.push(\n-            new NameContext(\n-                getNameInfoForName(propName, PROPERTY), null));\n+      if (isPrototypePropertyAssign(n)) {\n+        symbolStack.push(new NameContext(getNameInfoForName(\n+                n.getFirstChild().getLastChild().getString(), PROPERTY)));\n+      } else if (isGlobalFunctionDeclaration(t, n)) {\n+        String name \u003d parent.isName() ?\n+            parent.getString() /* VAR */ :\n+            n.getFirstChild().getString() /* named function */;\n+        symbolStack.push(new NameContext(getNameInfoForName(name, VAR)));\n+      } else if (n.isFunction()) {\n+        symbolStack.push(new NameContext(anonymousNode));\n       }\n       return true;\n     }\n@@ -251,35 +238,23 @@\n       if (n.isGetProp()) {\n         String propName \u003d n.getFirstChild().getNext().getString();\n \n-        if (n.isQualifiedName()) {\n           if (propName.equals(\"prototype\")) {\n-            if (processPrototypeRef(t, n)) {\n-              return;\n-            }\n+          processPrototypeParent(t, parent);\n           } else if (compiler.getCodingConvention().isExported(propName)) {\n             addGlobalUseOfSymbol(propName, t.getModule(), PROPERTY);\n-            return;\n           } else {\n             // Do not mark prototype prop assigns as a \u0027use\u0027 in the global scope.\n-            if (n.getParent().isAssign() \u0026\u0026 n.getNext() !\u003d null) {\n-              String rValueName \u003d getPrototypePropertyNameFromRValue(n);\n-              if (rValueName !\u003d null) {\n-                return;\n-              }\n-            }\n-          }\n+          addSymbolUse(propName, t.getModule(), PROPERTY);\n         }\n \n-        addSymbolUse(propName, t.getModule(), PROPERTY);\n-      } else if (n.isObjectLit()) {\n+      } else if (n.isObjectLit() \u0026\u0026\n         // Make sure that we\u0027re not handling object literals being\n         // assigned to a prototype, as in:\n         // Foo.prototype \u003d {bar: 3, baz: 5};\n-        String lValueName \u003d NodeUtil.getBestLValueName(\n-            NodeUtil.getBestLValue(n));\n-        if (lValueName !\u003d null \u0026\u0026 lValueName.endsWith(\".prototype\")) {\n-          return;\n-        }\n+          !(parent.isAssign() \u0026\u0026\n+            parent.getFirstChild().isGetProp() \u0026\u0026\n+            parent.getFirstChild().getLastChild().getString().equals(\n+                \"prototype\"))) {\n \n         // var x \u003d {a: 1, b: 2}\n         // should count as a use of property a and b.\n@@ -300,7 +275,8 @@\n             if (var.getInitialValue() !\u003d null \u0026\u0026\n                 var.getInitialValue().isFunction()) {\n               if (t.inGlobalScope()) {\n-                if (!processGlobalFunctionDeclaration(t, n, var)) {\n+                if (!processGlobalFunctionDeclaration(t, n, parent,\n+                        parent.getParent())) {\n                   addGlobalUseOfSymbol(name, t.getModule(), VAR);\n                 }\n               } else {\n@@ -325,7 +301,9 @@\n       }\n \n       // Process prototype assignments to non-functions.\n-      if (processNonFunctionPrototypeAssign(n, parent) !\u003d null) {\n+      if (isPrototypePropertyAssign(n) ||\n+          isGlobalFunctionDeclaration(t, n) ||\n+          n.isFunction()) {\n         symbolStack.pop();\n       }\n     }\n@@ -349,12 +327,6 @@\n      * If this is a non-function prototype assign, return the prop name.\n      * Otherwise, return null.\n      */\n-    private String processNonFunctionPrototypeAssign(Node n, Node parent) {\n-      if (isAssignRValue(n, parent) \u0026\u0026 !n.isFunction()) {\n-        return getPrototypePropertyNameFromRValue(n);\n-      }\n-      return null;\n-    }\n \n     /**\n      * Determines whether {@code n} is the FUNCTION node in a global function\n@@ -363,22 +335,23 @@\n     private boolean isGlobalFunctionDeclaration(NodeTraversal t, Node n) {\n       // Make sure we\u0027re either in the global scope, or the function\n       // we\u0027re looking at is the root of the current local scope.\n-      Scope s \u003d t.getScope();\n-      if (!(s.isGlobal() ||\n-            s.getDepth() \u003d\u003d 1 \u0026\u0026 s.getRootNode() \u003d\u003d n)) {\n-        return false;\n-      }\n \n-      return NodeUtil.isFunctionDeclaration(n) ||\n-          n.isFunction() \u0026\u0026 n.getParent().isName();\n+      return t.inGlobalScope() \u0026\u0026\n+          (NodeUtil.isFunctionDeclaration(n) ||\n+           n.isFunction() \u0026\u0026\n+           n.getParent().isName());\n     }\n \n     /**\n      * Returns true if this is the r-value of an assignment.\n      */\n-    private boolean isAssignRValue(Node n, Node parent) {\n-      return parent !\u003d null \u0026\u0026 parent.isAssign() \u0026\u0026 parent.getFirstChild() !\u003d n;\n-    }\n+    private boolean isPrototypePropertyAssign(Node assign) {\n+      Node n \u003d assign.getFirstChild();\n+      if (n !\u003d null \u0026\u0026 NodeUtil.isVarOrSimpleAssignLhs(n, assign)\n+          \u0026\u0026 n.isGetProp()\n+          \u0026\u0026 assign.getParent().isExprResult()) {\n+        boolean isChainedProperty \u003d\n+            n.getFirstChild().isGetProp();\n \n     /**\n      * Returns the name of a prototype property being assigned to this r-value.\n@@ -387,32 +360,18 @@\n      * the R-value is used in multiple expressions (i.e., if there\u0027s\n      * a prototype property assignment in a more complex expression).\n      */\n-    private String getPrototypePropertyNameFromRValue(Node rValue) {\n-      Node lValue \u003d NodeUtil.getBestLValue(rValue);\n-      if (lValue \u003d\u003d null ||\n-          lValue.getParent() \u003d\u003d null ||\n-          lValue.getParent().getParent() \u003d\u003d null ||\n-          !(NodeUtil.isObjectLitKey(lValue, lValue.getParent()) ||\n-            NodeUtil.isExprAssign(lValue.getParent().getParent()))) {\n-        return null;\n+        if (isChainedProperty) {\n+          Node child \u003d n.getFirstChild().getFirstChild().getNext();\n+\n+          if (child.isString() \u0026\u0026\n+              child.getString().equals(\"prototype\")) {\n+            return true;\n+          }\n+        }\n       }\n \n-      String lValueName \u003d\n-          NodeUtil.getBestLValueName(NodeUtil.getBestLValue(rValue));\n-      if (lValueName \u003d\u003d null) {\n-        return null;\n-      }\n-      int lastDot \u003d lValueName.lastIndexOf(\u0027.\u0027);\n-      if (lastDot \u003d\u003d -1) {\n-        return null;\n-      }\n \n-      String firstPart \u003d lValueName.substring(0, lastDot);\n-      if (!firstPart.endsWith(\".prototype\")) {\n-        return null;\n-      }\n-\n-      return lValueName.substring(lastDot + 1);\n+      return false;\n     }\n \n     /**\n@@ -420,9 +379,8 @@\n      * If it is, record it and return true. Otherwise, return false.\n      */\n     private boolean processGlobalFunctionDeclaration(NodeTraversal t,\n-        Node nameNode, Var v) {\n+        Node nameNode, Node parent, Node gramps) {\n       Node firstChild \u003d nameNode.getFirstChild();\n-      Node parent \u003d nameNode.getParent();\n \n       if (// Check for a named FUNCTION.\n           isGlobalFunctionDeclaration(t, parent) ||\n@@ -431,7 +389,7 @@\n           isGlobalFunctionDeclaration(t, firstChild)) {\n         String name \u003d nameNode.getString();\n         getNameInfoForName(name, VAR).getDeclarations().add(\n-            new GlobalFunction(nameNode, v, t.getModule()));\n+            new GlobalFunction(nameNode, parent, gramps, t.getModule()));\n \n         // If the function name is exported, we should create an edge here\n         // so that it\u0027s never removed.\n@@ -451,10 +409,8 @@\n      * under an assignment (in the case of Foo.prototype \u003d ...).\n      * @return True if a declaration was added.\n      */\n-    private boolean processPrototypeRef(NodeTraversal t, Node ref) {\n-      Node root \u003d NodeUtil.getRootOfQualifiedName(ref);\n+    private void processPrototypeParent(NodeTraversal t, Node n) {\n \n-      Node n \u003d ref.getParent();\n       switch (n.getType()) {\n         // Foo.prototype.getBar \u003d function() { ... }\n         case Token.GETPROP:\n@@ -468,10 +424,8 @@\n             String name \u003d dest.getString();\n             Property prop \u003d new AssignmentProperty(\n                 grandParent,\n-                t.getScope().getVar(root.getString()),\n                 t.getModule());\n             getNameInfoForName(name, PROPERTY).getDeclarations().add(prop);\n-            return true;\n           }\n           break;\n \n@@ -485,15 +439,12 @@\n               String name \u003d key.getString();\n               Property prop \u003d new LiteralProperty(\n                   key, key.getFirstChild(), map, n,\n-                  t.getScope().getVar(root.getString()),\n                   t.getModule());\n               getNameInfoForName(name, PROPERTY).getDeclarations().add(prop);\n             }\n-            return true;\n           }\n           break;\n       }\n-      return false;\n     }\n \n     private void addGlobalUseOfSymbol(String name, JSModule module,\n@@ -545,7 +496,6 @@\n     /**\n      * The variable for the root of this symbol.\n      */\n-    Var getRootVar();\n \n     /**\n      * Returns the module where this appears.\n@@ -563,25 +513,18 @@\n    */\n   class GlobalFunction implements Symbol {\n     private final Node nameNode;\n-    private final Var var;\n     private final JSModule module;\n \n-    GlobalFunction(Node nameNode, Var var, JSModule module) {\n-      Node parent \u003d nameNode.getParent();\n+    GlobalFunction(Node nameNode, Node parent, Node gramps, JSModule module) {\n       Preconditions.checkState(\n           parent.isVar() ||\n           NodeUtil.isFunctionDeclaration(parent));\n       this.nameNode \u003d nameNode;\n-      this.var \u003d var;\n       this.module \u003d module;\n     }\n \n     @Override\n-    public Var getRootVar() {\n-      return var;\n-    }\n \n-    @Override\n     public void remove() {\n       Node parent \u003d nameNode.getParent();\n       if (parent.isFunction() || parent.hasOneChild()) {\n@@ -630,24 +573,18 @@\n    */\n   static class AssignmentProperty implements Property {\n     private final Node exprNode;\n-    private final Var rootVar;\n     private final JSModule module;\n \n     /**\n      * @param node An EXPR node.\n      */\n-    AssignmentProperty(Node node, Var rootVar, JSModule module) {\n+    AssignmentProperty(Node node, JSModule module) {\n       this.exprNode \u003d node;\n-      this.rootVar \u003d rootVar;\n       this.module \u003d module;\n     }\n \n     @Override\n-    public Var getRootVar() {\n-      return rootVar;\n-    }\n \n-    @Override\n     public void remove() {\n       NodeUtil.removeChild(exprNode.getParent(), exprNode);\n     }\n@@ -683,25 +620,19 @@\n     private final Node value;\n     private final Node map;\n     private final Node assign;\n-    private final Var rootVar;\n     private final JSModule module;\n \n     LiteralProperty(Node key, Node value, Node map, Node assign,\n-        Var rootVar, JSModule module) {\n+        JSModule module) {\n       this.key \u003d key;\n       this.value \u003d value;\n       this.map \u003d map;\n       this.assign \u003d assign;\n-      this.rootVar \u003d rootVar;\n       this.module \u003d module;\n     }\n \n     @Override\n-    public Var getRootVar() {\n-      return rootVar;\n-    }\n \n-    @Override\n     public void remove() {\n       map.removeChild(key);\n     }\n@@ -731,11 +662,10 @@\n \n     // If this is a function context, then scope will be the scope of the\n     // corresponding function. Otherwise, it will be null.\n-    final Scope scope;\n+    Scope scope;\n \n-    NameContext(NameInfo name, Scope scope) {\n+    NameContext(NameInfo name) {\n       this.name \u003d name;\n-      this.scope \u003d scope;\n     }\n   }\n \n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [7501,7589]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [12848,13837]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SingleVariableDeclaration [14092,14103]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SingleVariableDeclaration [14105,14116]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SingleVariableDeclaration [15232,15238]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SingleVariableDeclaration [18365,18376]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SingleVariableDeclaration [18378,18389]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [7656,7696]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "IfStatement [8300,8847]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodInvocation [8304,8332]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [8485,8847]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "InfixExpression [12703,12835]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "InfixExpression [9469,9825]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodInvocation [11641,11674]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodInvocation [11688,11702]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodInvocation [12703,12720]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "INFIX_EXPRESSION_OPERATOR: \u0026\u0026 [12721,12723]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "ParenthesizedExpression [12734,12835]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "INFIX_EXPRESSION_OPERATOR: \u0026\u0026 [9485,9487]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "PrefixExpression [9653,9825]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [9101,9135]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [9392,9440]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: gramps [14548,14554]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodInvocation [8413,8457]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodInvocation [10713,10731]"
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [7563,7591]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [7598,8844]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [8917,8935]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: propName [9278,9286]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "NullLiteral [9299,9303]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [9094,9157]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "InfixExpression [9168,9184]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "IfStatement [9164,9314]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [9605,9673]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "ReturnStatement [9831,9838]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [9952,10173]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodInvocation [9524,9543]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Block [9545,10195]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "IfStatement [9520,10195]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [10205,10253]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [10453,10540]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [10549,10639]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: parent [12400,12406]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "NullLiteral [12411,12415]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [12961,13297]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [13629,13652]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [13659,13768]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [13883,14100]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [14106,15282]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SingleVariableDeclaration [15537,15542]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [15602,15637]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SingleVariableDeclaration [16687,16695]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [16705,16754]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [16762,16787]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodInvocation [17324,17361]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ReturnStatement [17483,17495]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodInvocation [18012,18049]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ReturnStatement [18189,18201]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ReturnStatement [18245,18258]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [19649,19731]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "FieldDeclaration [20048,20070]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SingleVariableDeclaration [20141,20148]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [20175,20210]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [20360,20375]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [20415,20478]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "FieldDeclaration [21779,21805]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SingleVariableDeclaration [21925,21936]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [21991,22014]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [22054,22121]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "FieldDeclaration [22926,22952]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SingleVariableDeclaration [23062,23073]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [23198,23221]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [23261,23328]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: final [23979,23984]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SingleVariableDeclaration [24030,24041]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [24075,24094]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/jscomp/CrossModuleMethodMotion.java",
        "src/com/google/javascript/jscomp/CrossModuleMethodMotion.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "com.google.javascript.jscomp.CrossModuleMethodMotion:moveMethods:[Collection\u003cNameInfo\u003e allNameInfo]:void"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "com.google.javascript.jscomp.CrossModuleMethodMotion:moveMethods:[Collection\u003cNameInfo\u003e allNameInfo]:void"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "141",
            "142",
            "143"
          ],
          "num": 3
        },
        {
          "qualified_names": [
            "140"
          ],
          "num": 1
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/jscomp/CrossModuleMethodMotion.java b/src/com/google/javascript/jscomp/CrossModuleMethodMotion.java\nindex d52a390..1bd14b3 100644\n--- a/src/com/google/javascript/jscomp/CrossModuleMethodMotion.java\n+++ b/src/com/google/javascript/jscomp/CrossModuleMethodMotion.java\n@@ -138,9 +138,6 @@\n         // So if we move a prototype method into a deeper module, we must\n         // replace it with a stub function so that it preserves its original\n         // behavior.\n-        if (!(prop.getRootVar() !\u003d null \u0026\u0026 prop.getRootVar().isGlobal())) {\n-          continue;\n-        }\n \n         Node value \u003d prop.getValue();\n         if (moduleGraph.dependsOn(deepestCommonModuleRef, prop.getModule()) \u0026\u0026\n",
      "operations": [
        {
          "type": "delete-tree",
          "from": "IfStatement [5205,5302]",
          "to": ""
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [
        "com.google.javascript.jscomp.AnalyzePrototypeProperties\\$ProcessProperties:processPrototypeParent:[NodeTraversal t, Node n]:void",
        "com.google.javascript.jscomp.AnalyzePrototypeProperties\\$ProcessProperties:processGlobalFunctionDeclaration:[NodeTraversal t, Node nameNode, Node parent, Node gramps]:boolean",
        "com.google.javascript.jscomp.AnalyzePrototypeProperties\\$ProcessProperties:ProcessProperties:[]:null",
        "com.google.javascript.jscomp.AnalyzePrototypeProperties\\$LiteralProperty:LiteralProperty:[Node key, Node value, Node map, Node assign, JSModule module]:null",
        "com.google.javascript.jscomp.AnalyzePrototypeProperties\\$AssignmentProperty:AssignmentProperty:[Node node, JSModule module]:null",
        "com.google.javascript.jscomp.AnalyzePrototypeProperties\\$ProcessProperties:isPrototypePropertyAssign:[Node assign]:boolean",
        "com.google.javascript.jscomp.AnalyzePrototypeProperties\\$GlobalFunction:GlobalFunction:[Node nameNode, Node parent, Node gramps, JSModule module]:null",
        "com.google.javascript.jscomp.AnalyzePrototypeProperties\\$NameContext:NameContext:[NameInfo name]:null"
      ],
      "num": 8
    },
    "delete_functions": {
      "qualified_names": [
        "com.google.javascript.jscomp.AnalyzePrototypeProperties\\$ProcessProperties:processNonFunctionPrototypeAssign:[Node n, Node parent]:String",
        "com.google.javascript.jscomp.AnalyzePrototypeProperties\\$NameContext:NameContext:[NameInfo name, Scope scope]:null",
        "com.google.javascript.jscomp.AnalyzePrototypeProperties\\$ProcessProperties:processGlobalFunctionDeclaration:[NodeTraversal t, Node nameNode, Var v]:boolean",
        "com.google.javascript.jscomp.AnalyzePrototypeProperties\\$ProcessProperties:processPrototypeRef:[NodeTraversal t, Node ref]:boolean",
        "com.google.javascript.jscomp.AnalyzePrototypeProperties\\$GlobalFunction:getRootVar:[]:Var",
        "com.google.javascript.jscomp.AnalyzePrototypeProperties\\$ProcessProperties:isAssignRValue:[Node n, Node parent]:boolean",
        "com.google.javascript.jscomp.AnalyzePrototypeProperties\\$LiteralProperty:getRootVar:[]:Var",
        "com.google.javascript.jscomp.AnalyzePrototypeProperties\\$AssignmentProperty:remove:[]:void",
        "com.google.javascript.jscomp.AnalyzePrototypeProperties\\$LiteralProperty:remove:[]:void",
        "com.google.javascript.jscomp.AnalyzePrototypeProperties\\$AssignmentProperty:AssignmentProperty:[Node node, Var rootVar, JSModule module]:null",
        "com.google.javascript.jscomp.AnalyzePrototypeProperties\\$ProcessProperties:getPrototypePropertyNameFromRValue:[Node rValue]:String",
        "com.google.javascript.jscomp.AnalyzePrototypeProperties\\$AssignmentProperty:getRootVar:[]:Var",
        "com.google.javascript.jscomp.AnalyzePrototypeProperties\\$Symbol:getRootVar:[]:Var",
        "com.google.javascript.jscomp.AnalyzePrototypeProperties\\$GlobalFunction:GlobalFunction:[Node nameNode, Var var, JSModule module]:null",
        "com.google.javascript.jscomp.AnalyzePrototypeProperties\\$LiteralProperty:LiteralProperty:[Node key, Node value, Node map, Node assign, Var rootVar, JSModule module]:null"
      ],
      "num": 15
    }
  }
}