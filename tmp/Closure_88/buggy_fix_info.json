{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "data/changesInfo/",
  "properties": {
    "trigger.tests": "com.google.javascript.jscomp.CommandLineRunnerTest::testIssue297,com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testIssue297a,com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testIssue297b,com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testIssue297c,com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testIssue297d,com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testIssue297e,com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testIssue297f",
    "test.dir": "test",
    "clz.modified": "com.google.javascript.jscomp.DeadAssignmentsElimination",
    "src.dir": "src"
  },
  "timeoutSecond": 100,
  "proj": "Closure",
  "id": "88",
  "workingDir": "../bugs/Closure_88_tmp",
  "bug_name": "Closure_88",
  "derive": "defects4j",
  "trigger_tests": [
    {
      "test_class": "com.google.javascript.jscomp.CommandLineRunnerTest",
      "test_function": "testIssue297",
      "assertion_line": "252",
      "exception": "junit.framework.AssertionFailedError",
      "message": "Expected: function f(b){var a;return(a\u003db.id)\u0026\u0026(a\u003dparseInt(a.substr(1)))\u0026\u0026a\u003e0}\nResult: function f(b){var a;return b.id\u0026\u0026(a\u003dparseInt(a.substr(1)))\u0026\u0026a\u003e0}"
    },
    {
      "test_class": "com.google.javascript.jscomp.DeadAssignmentsEliminationTest",
      "test_function": "testIssue297a",
      "assertion_line": "368",
      "exception": "junit.framework.AssertionFailedError",
      "message": "Expected: function f(p){var x;return(x\u003dp.id)\u0026\u0026(x\u003dparseInt(x.substr(1)))\u0026\u0026x\u003e0}f(\"\")\nResult: function f(p){var x;return p.id\u0026\u0026(x\u003dparseInt(x.substr(1)))\u0026\u0026x\u003e0}f(\"\")"
    },
    {
      "test_class": "com.google.javascript.jscomp.DeadAssignmentsEliminationTest",
      "test_function": "testIssue297b",
      "assertion_line": "375",
      "exception": "junit.framework.AssertionFailedError",
      "message": "Expected: function f(){var x;return(x\u003d\"\")\u0026\u0026x.substr(1)}\nResult: function f(){var x;return\"\"\u0026\u0026x.substr(1)}"
    },
    {
      "test_class": "com.google.javascript.jscomp.DeadAssignmentsEliminationTest",
      "test_function": "testIssue297c",
      "assertion_line": "386",
      "exception": "junit.framework.AssertionFailedError",
      "message": "Expected: function f(){var x;return(x\u003d1)\u0026\u0026f(x)}\nResult: function f(){var x;return 1\u0026\u0026f(x)}"
    },
    {
      "test_class": "com.google.javascript.jscomp.DeadAssignmentsEliminationTest",
      "test_function": "testIssue297d",
      "assertion_line": "397",
      "exception": "junit.framework.AssertionFailedError",
      "message": "Expected: function f(a){return(a\u003d1)\u0026\u0026f(a)}\nResult: function f(a){return 1\u0026\u0026f(a)}"
    },
    {
      "test_class": "com.google.javascript.jscomp.DeadAssignmentsEliminationTest",
      "test_function": "testIssue297e",
      "assertion_line": "406",
      "exception": "junit.framework.AssertionFailedError",
      "message": "Expected: function f(a){return(a\u003d1)-g(a)}\nResult: function f(a){return 1-g(a)}"
    },
    {
      "test_class": "com.google.javascript.jscomp.DeadAssignmentsEliminationTest",
      "test_function": "testIssue297f",
      "assertion_line": "415",
      "exception": "junit.framework.AssertionFailedError",
      "message": "Expected: function f(a){h((a\u003d1)-g(a))}\nResult: function f(a){h(1-g(a))}"
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/jscomp/DeadAssignmentsElimination.java",
        "src/com/google/javascript/jscomp/DeadAssignmentsElimination.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "com.google.javascript.jscomp.DeadAssignmentsElimination:isVariableReadBeforeKill:[Node n, String variable]:VariableLiveness"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "com.google.javascript.jscomp.DeadAssignmentsElimination:isVariableReadBeforeKill:[Node n, String variable]:VariableLiveness"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "327",
            "331",
            "332",
            "333",
            "334",
            "335"
          ],
          "num": 6
        },
        {
          "qualified_names": [
            "326"
          ],
          "num": 1
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java b/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\nindex 879056f..ef33e4c 100644\n--- a/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\n+++ b/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\n@@ -324,15 +324,9 @@\n       Node n, String variable) {\n     if (NodeUtil.isName(n) \u0026\u0026 variable.equals(n.getString())) {\n       if (NodeUtil.isLhs(n, n.getParent())) {\n-        Preconditions.checkState(n.getParent().getType() \u003d\u003d Token.ASSIGN);\n         // The expression to which the assignment is made is evaluated before\n         // the RHS is evaluated (normal left to right evaluation) but the KILL\n         // occurs after the RHS is evaluated.\n-        Node rhs \u003d n.getNext();\n-        VariableLiveness state \u003d isVariableReadBeforeKill(rhs, variable);\n-        if (state \u003d\u003d VariableLiveness.READ) {\n-          return state;\n-        }\n         return VariableLiveness.KILL;\n       } else {\n         return VariableLiveness.READ;\n",
      "operations": [
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [11481,11547]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [11759,11782]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [11791,11856]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [11865,11936]",
          "to": ""
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  }
}