{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "data/changesInfo/",
  "properties": {
    "trigger.tests": "org.apache.commons.codec.net.QuotedPrintableCodecTest::testSkipNotEncodedCRLF,org.apache.commons.codec.net.QuotedPrintableCodecTest::testSoftLineBreakDecode,org.apache.commons.codec.net.QuotedPrintableCodecTest::testSoftLineBreakEncode,org.apache.commons.codec.net.QuotedPrintableCodecTest::testUltimateSoftBreak,org.apache.commons.codec.net.QuotedPrintableCodecTest::testTrailingSpecial",
    "test.dir": "src/test/java",
    "clz.modified": "org.apache.commons.codec.net.QuotedPrintableCodec",
    "src.dir": "src/main/java"
  },
  "timeoutSecond": 100,
  "proj": "Codec",
  "id": "11",
  "workingDir": "../bugs/Codec_11_tmp",
  "bug_name": "Codec_11",
  "derive": "defects4j",
  "trigger_tests": [
    {
      "test_class": "org.apache.commons.codec.net.QuotedPrintableCodecTest",
      "test_function": "testSkipNotEncodedCRLF",
      "assertion_line": "300",
      "exception": "org.apache.commons.codec.DecoderException",
      "message": "Invalid URL encoding: not a valid digit (radix 16): 13"
    },
    {
      "test_class": "org.apache.commons.codec.net.QuotedPrintableCodecTest",
      "test_function": "testSoftLineBreakDecode",
      "assertion_line": "274",
      "exception": "org.apache.commons.codec.DecoderException",
      "message": "Invalid URL encoding: not a valid digit (radix 16): 13"
    },
    {
      "test_class": "org.apache.commons.codec.net.QuotedPrintableCodecTest",
      "test_function": "testSoftLineBreakEncode",
      "assertion_line": "288",
      "exception": "junit.framework.AssertionFailedError",
      "message": "expected:\u003c...matics is the most b[\u003d"
    },
    {
      "test_class": "org.apache.commons.codec.net.QuotedPrintableCodecTest",
      "test_function": "testUltimateSoftBreak",
      "assertion_line": "326",
      "exception": "junit.framework.AssertionFailedError",
      "message": "expected:\u003c...There is no end to i[\u003d"
    },
    {
      "test_class": "org.apache.commons.codec.net.QuotedPrintableCodecTest",
      "test_function": "testTrailingSpecial",
      "assertion_line": "312",
      "exception": "junit.framework.AssertionFailedError",
      "message": "expected:\u003c... might contain sp\u003d3D[\u003d"
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/codec/net/QuotedPrintableCodec.java",
        "src/main/java/org/apache/commons/codec/net/QuotedPrintableCodec.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.codec.net.QuotedPrintableCodec:decodeQuotedPrintable:[byte[] bytes]:byte[]",
            "org.apache.commons.codec.net.QuotedPrintableCodec:encodeQuotedPrintable:[int b, ByteArrayOutputStream buffer]:int",
            "org.apache.commons.codec.net.QuotedPrintableCodec:encodeByte:[final int b, final boolean encode, final ByteArrayOutputStream buffer]:int",
            "org.apache.commons.codec.net.QuotedPrintableCodec:getUnsignedOctet:[final int index, final byte[] bytes]:int",
            "org.apache.commons.codec.net.QuotedPrintableCodec:isWhitespace:[final int b]:boolean",
            "org.apache.commons.codec.net.QuotedPrintableCodec:encodeQuotedPrintable:[BitSet printable, byte[] bytes]:byte[]"
          ],
          "num": 6
        },
        {
          "qualified_names": [
            "org.apache.commons.codec.net.QuotedPrintableCodec:encodeQuotedPrintable:[BitSet printable, byte[] bytes]:byte[]",
            "org.apache.commons.codec.net.QuotedPrintableCodec:encodeQuotedPrintable:[int b, ByteArrayOutputStream buffer]:void",
            "org.apache.commons.codec.net.QuotedPrintableCodec:decodeQuotedPrintable:[byte[] bytes]:byte[]"
          ],
          "num": 3
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "70",
            "72",
            "75",
            "117",
            "123",
            "136",
            "137",
            "138",
            "139",
            "140",
            "141",
            "142",
            "155",
            "156",
            "157",
            "158",
            "159",
            "160",
            "161",
            "162",
            "163",
            "172",
            "173",
            "174",
            "198",
            "201",
            "202",
            "203",
            "205",
            "208",
            "211",
            "212",
            "213",
            "214",
            "220",
            "221",
            "222",
            "227",
            "228",
            "229",
            "230",
            "231",
            "232",
            "233",
            "235",
            "236",
            "237",
            "267",
            "268",
            "269",
            "270",
            "276"
          ],
          "num": 52
        },
        {
          "qualified_names": [
            "69",
            "114",
            "139",
            "165",
            "178",
            "179",
            "180",
            "181",
            "182",
            "183",
            "184",
            "189",
            "191",
            "229",
            "235"
          ],
          "num": 15
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/codec/net/QuotedPrintableCodec.java b/src/main/java/org/apache/commons/codec/net/QuotedPrintableCodec.java\nindex ed09fec..13291cd 100644\n--- a/src/main/java/org/apache/commons/codec/net/QuotedPrintableCodec.java\n+++ b/src/main/java/org/apache/commons/codec/net/QuotedPrintableCodec.java\n@@ -67,12 +67,9 @@\n \n     private static final byte SPACE \u003d 32;\n \n-    private static final byte CR \u003d 13;\n \n-    private static final byte LF \u003d 10;\n \n     /** Safe line length for quoted printable encoded text. */\n-    private static final int SAFE_LENGTH \u003d 73;\n \n     // Static initializer for printable chars collection\n     static {\n@@ -114,13 +111,12 @@\n      *            the buffer to write to\n      * @return The number of bytes written to the \u003ccode\u003ebuffer\u003c/code\u003e\n      */\n-    private static final int encodeQuotedPrintable(int b, ByteArrayOutputStream buffer) {\n+    private static final void encodeQuotedPrintable(int b, ByteArrayOutputStream buffer) {\n         buffer.write(ESCAPE_CHAR);\n         char hex1 \u003d Character.toUpperCase(Character.forDigit((b \u003e\u003e 4) \u0026 0xF, 16));\n         char hex2 \u003d Character.toUpperCase(Character.forDigit(b \u0026 0xF, 16));\n         buffer.write(hex1);\n         buffer.write(hex2);\n-        return 3;\n     }\n \n     /**\n@@ -133,13 +129,6 @@\n      *                  the byte array\n      * @return the unsigned octet at position \u003ccode\u003eindex\u003c/code\u003e from the array\n      */\n-    private static int getUnsignedOctet(final int index, final byte[] bytes) {\n-        int b \u003d bytes[index];\n-        if (b \u003c 0) {\n-            b \u003d 256 + b;\n-        }\n-        return b;\n-    }\n \n     /**\n      * Write a byte to the buffer.\n@@ -152,15 +141,6 @@\n      *                  the buffer to write to\n      * @return the number of bytes that have been written to the buffer\n      */\n-    private static int encodeByte(final int b, final boolean encode,\n-                                  final ByteArrayOutputStream buffer) {\n-        if (encode) {\n-            return encodeQuotedPrintable(b, buffer);\n-        } else {\n-            buffer.write(b);\n-            return 1;\n-        }\n-    }\n \n     /**\n      * Checks whether the given byte is whitespace.\n@@ -169,9 +149,6 @@\n      *                  byte to be checked\n      * @return \u003ccode\u003etrue\u003c/code\u003e if the byte is either a space or tab character\n      */\n-    private static boolean isWhitespace(final int b) {\n-        return b \u003d\u003d SPACE || b \u003d\u003d TAB;\n-    }\n \n     /**\n      * Encodes an array of bytes into an array of quoted-printable 7-bit characters. Unsafe characters are escaped.\n@@ -195,46 +172,31 @@\n             printable \u003d PRINTABLE_CHARS;\n         }\n         ByteArrayOutputStream buffer \u003d new ByteArrayOutputStream();\n-        int pos \u003d 1;\n         // encode up to buffer.length - 3, the last three octets will be treated\n         // separately for simplification of note #3\n-        for (int i \u003d 0; i \u003c bytes.length - 3; i++) {\n-            int b \u003d getUnsignedOctet(i, bytes);\n-            if (pos \u003c SAFE_LENGTH) {\n                 // up to this length it is safe to add any byte, encoded or not\n-                pos +\u003d encodeByte(b, !printable.get(b), buffer);\n+        for (byte c : bytes) {\n+            int b \u003d c;\n+            if (b \u003c 0) {\n+                b \u003d 256 + b;\n+            }\n+            if (printable.get(b)) {\n+                buffer.write(b);\n             } else {\n                 // rule #3: whitespace at the end of a line *must* be encoded\n-                encodeByte(b, !printable.get(b) || isWhitespace(b), buffer);\n \n                 // rule #5: soft line break\n-                buffer.write(ESCAPE_CHAR);\n-                buffer.write(CR);\n-                buffer.write(LF);\n-                pos \u003d 1;\n+                encodeQuotedPrintable(b, buffer);\n             }\n         }\n \n         // rule #3: whitespace at the end of a line *must* be encoded\n         // if we would do a soft break line after this octet, encode whitespace\n-        int b \u003d getUnsignedOctet(bytes.length - 3, bytes);\n-        boolean encode \u003d !printable.get(b) || (isWhitespace(b) \u0026\u0026 pos \u003e SAFE_LENGTH - 5);\n-        pos +\u003d encodeByte(b, encode, buffer);\n \n         // note #3: \u0027\u003d\u0027 *must not* be the ultimate or penultimate character\n         // simplification: if \u003c 6 bytes left, do a soft line break as we may need\n         //                 exactly 6 bytes space for the last 2 bytes\n-        if (pos \u003e SAFE_LENGTH - 2) {\n-            buffer.write(ESCAPE_CHAR);\n-            buffer.write(CR);\n-            buffer.write(LF);\n-        }\n-        for (int i \u003d bytes.length - 2; i \u003c bytes.length; i++) {\n-            b \u003d getUnsignedOctet(i, bytes);\n             // rule #3: trailing whitespace shall be encoded\n-            encode \u003d !printable.get(b) || (i \u003e bytes.length - 2 \u0026\u0026 isWhitespace(b));\n-            encodeByte(b, encode, buffer);\n-        }\n \n         return buffer.toByteArray();\n     }\n@@ -264,16 +226,13 @@\n             if (b \u003d\u003d ESCAPE_CHAR) {\n                 try {\n                     // if the next octet is a CR we have found a soft line break\n-                    if (bytes[++i] \u003d\u003d CR) {\n-                        continue;\n-                    }\n-                    int u \u003d Utils.digit16(bytes[i]);\n+                    int u \u003d Utils.digit16(bytes[++i]);\n                     int l \u003d Utils.digit16(bytes[++i]);\n                     buffer.write((char) ((u \u003c\u003c 4) + l));\n                 } catch (ArrayIndexOutOfBoundsException e) {\n                     throw new DecoderException(\"Invalid quoted-printable encoding\", e);\n                 }\n-            } else if (b !\u003d CR \u0026\u0026 b !\u003d LF) {\n+            } else {\n                 // every other octet is appended except for CR \u0026 LF\n                 buffer.write(b);\n             }\n",
      "operations": [
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: static [3001,3007]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [2884,2936]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SingleVariableDeclaration [6332,6338]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: bytes [6341,6346]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: c [6370,6371]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "ExpressionStatement [6670,6703]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "PrefixExpression [8295,8298]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "PREFIX_EXPRESSION_OPERATOR: ++ [8295,8297]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "FieldDeclaration [2878,2912]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "FieldDeclaration [2918,2952]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "FieldDeclaration [2958,3063]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ReturnStatement [4433,4442]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "Javadoc [4454,4786]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: private [4791,4798]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: static [4799,4805]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "PrimitiveType: int [4806,4809]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: getUnsignedOctet [4810,4826]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SingleVariableDeclaration [4827,4842]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SingleVariableDeclaration [4844,4862]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ReturnStatement [4960,4969]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Block [4864,4975]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "MethodDeclaration [4454,4975]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "Javadoc [4981,5318]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: private [5323,5330]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: static [5331,5337]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "PrimitiveType: int [5338,5341]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: encodeByte [5342,5352]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SingleVariableDeclaration [5353,5364]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SingleVariableDeclaration [5366,5386]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SingleVariableDeclaration [5422,5456]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Block [5458,5618]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "MethodDeclaration [4981,5618]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [5624,5933]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [6845,6857]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationExpression [7004,7013]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "InfixExpression [7015,7035]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "PostfixExpression [7037,7040]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [7056,7091]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "InfixExpression [7108,7125]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "IfStatement [7104,7644]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Block [7042,7654]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "ForStatement [6999,7654]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "PrimitiveType: int [7814,7817]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodInvocation [7822,7863]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "VariableDeclarationFragment [7818,7863]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "VariableDeclarationStatement [7814,7864]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [7873,7954]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [7963,8000]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [8238,8375]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationExpression [8389,8413]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "InfixExpression [8415,8431]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "PostfixExpression [8433,8436]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ArrayAccess [4882,4894]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: b [5577,5578]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: pos [7225,7228]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "ASSIGNMENT_OPERATOR: +\u003d [7229,7231]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: encodeByte [7232,7242]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: b [7243,7244]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "PREFIX_EXPRESSION_OPERATOR: ! [7246,7247]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "PrefixExpression [7246,7263]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: buffer [7265,7271]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "METHOD_INVOCATION_ARGUMENTS [7243,7271]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "MethodInvocation [7232,7272]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Assignment [7225,7272]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "ExpressionStatement [7225,7273]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: encodeByte [7389,7399]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: b [7400,7401]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "PREFIX_EXPRESSION_OPERATOR: ! [7403,7404]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "PrefixExpression [7403,7420]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "INFIX_EXPRESSION_OPERATOR: || [7421,7423]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodInvocation [7424,7439]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "InfixExpression [7403,7439]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: buffer [7441,7447]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "METHOD_INVOCATION_ARGUMENTS [7400,7447]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "MethodInvocation [7389,7448]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "ExpressionStatement [7389,7449]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [7511,7537]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [7554,7571]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [7588,7605]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [7622,7630]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: encode [5472,5478]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "ReturnStatement [5494,5534]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Block [5480,5544]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ReturnStatement [5593,5602]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Block [5550,5612]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "ASSIGNMENT_OPERATOR: \u003d [8454,8455]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodInvocation [8456,8482]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Assignment [8452,8482]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "ExpressionStatement [8452,8483]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [8557,8629]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [8642,8672]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [9781,9860]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "InfixExpression [10216,10234]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "IfStatement [10212,10352]",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [
        "org.apache.commons.codec.net.QuotedPrintableCodec:encodeQuotedPrintable:[int b, ByteArrayOutputStream buffer]:void"
      ],
      "num": 1
    },
    "delete_functions": {
      "qualified_names": [
        "org.apache.commons.codec.net.QuotedPrintableCodec:isWhitespace:[final int b]:boolean",
        "org.apache.commons.codec.net.QuotedPrintableCodec:getUnsignedOctet:[final int index, final byte[] bytes]:int",
        "org.apache.commons.codec.net.QuotedPrintableCodec:encodeByte:[final int b, final boolean encode, final ByteArrayOutputStream buffer]:int",
        "org.apache.commons.codec.net.QuotedPrintableCodec:encodeQuotedPrintable:[int b, ByteArrayOutputStream buffer]:int"
      ],
      "num": 4
    }
  }
}