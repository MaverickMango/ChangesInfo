{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "data/changesInfo/",
  "properties": {
    "trigger.tests": "com.fasterxml.jackson.databind.deser.KeyDeser1429Test::testDeserializeKeyViaFactory",
    "test.dir": "src/test/java",
    "clz.modified": "com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer,com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
    "src.dir": "src/main/java"
  },
  "timeoutSecond": 100,
  "proj": "JacksonDatabind",
  "id": "65",
  "workingDir": "../bugs/JacksonDatabind_65_tmp",
  "bug_name": "JacksonDatabind_65",
  "derive": "defects4j",
  "trigger_tests": [
    {
      "test_class": "com.fasterxml.jackson.databind.deser.KeyDeser1429Test",
      "test_function": "testDeserializeKeyViaFactory",
      "assertion_line": "39",
      "exception": "com.fasterxml.jackson.databind.exc.InvalidFormatException",
      "message": "Can not deserialize Map key of type com.fasterxml.jackson.databind.deser.KeyDeser1429Test$FullName from String \"first.last\": not a valid representation, problem: wrong number of arguments"
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java",
        "src/main/java/com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer:deserializeKey:[String key, DeserializationContext ctxt]:Object"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer:deserializeKey:[String key, DeserializationContext ctxt]:Object"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "128",
            "129"
          ],
          "num": 2
        },
        {
          "qualified_names": [
            "128"
          ],
          "num": 1
        }
      ],
      "diff": "diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java b/src/main/java/com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java\nindex 5e353d3..b43c092 100644\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java\n@@ -125,8 +125,7 @@\n                 return result;\n             }\n         } catch (Exception re) {\n-            return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation, problem: (%s) %s\",\n-                    re.getClass().getName(), re.getMessage());\n+            return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation, problem: %s\", re.getMessage());\n         }\n         if (_keyClass.isEnum() \u0026\u0026 ctxt.getConfig().isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL)) {\n             return null;\n",
      "operations": [
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodInvocation [4646,4669]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
        "src/main/java/com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "com.fasterxml.jackson.databind.introspect.BasicBeanDescription:isFactoryMethod:[AnnotatedMethod am]:boolean",
            "com.fasterxml.jackson.databind.introspect.BasicBeanDescription:findFactoryMethod:[Class\u003c?\u003e... expArgTypes]:Method"
          ],
          "num": 2
        },
        {
          "qualified_names": [
            "com.fasterxml.jackson.databind.introspect.BasicBeanDescription:isFactoryMethod:[AnnotatedMethod am]:boolean",
            "com.fasterxml.jackson.databind.introspect.BasicBeanDescription:findFactoryMethod:[Class\u003c?\u003e... expArgTypes]:Method"
          ],
          "num": 2
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "525",
            "558",
            "560"
          ],
          "num": 3
        },
        {
          "qualified_names": [
            "525",
            "557"
          ],
          "num": 2
        }
      ],
      "diff": "diff --git a/src/main/java/com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java b/src/main/java/com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java\nindex 7f8e76d..27a115f 100644\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java\n@@ -522,7 +522,7 @@\n         // So, of all single-arg static methods:\n         for (AnnotatedMethod am : _classInfo.getStaticMethods()) {\n             // 24-Oct-2016, tatu: Better ensure it only takes 1 arg, no matter what\n-            if (isFactoryMethod(am) \u0026\u0026 am.getParameterCount() \u003d\u003d 1) {\n+            if (isFactoryMethod(am)) {\n                 // And must take one of expected arg types (or supertype)\n                 Class\u003c?\u003e actualArgType \u003d am.getRawParameterType(0);\n                 for (Class\u003c?\u003e expArgType : expArgTypes) {\n@@ -555,9 +555,7 @@\n         final String name \u003d am.getName();\n         // 24-Oct-2016, tatu: As per [databind#1429] must ensure takes exactly one arg\n         if (\"valueOf\".equals(name)) {\n-            if (am.getParameterCount() \u003d\u003d 1) {\n                 return true;\n-            }\n         }\n         // [databind#208] Also accept \"fromString()\", if takes String or CharSequence\n         if (\"fromString\".equals(name)) {\n",
      "operations": [
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "INFIX_EXPRESSION_OPERATOR: \u0026\u0026 [17761,17763]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "InfixExpression [17764,17791]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "InfixExpression [17741,17791]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "InfixExpression [19110,19137]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Block [19139,19183]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "IfStatement [19106,19183]",
          "to": ""
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  }
}