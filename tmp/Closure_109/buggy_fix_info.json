{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "data/changesInfo/",
  "properties": {
    "trigger.tests": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testStructuralConstructor2,com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testStructuralConstructor3",
    "test.dir": "test",
    "clz.modified": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
    "src.dir": "src"
  },
  "timeoutSecond": 100,
  "proj": "Closure",
  "id": "109",
  "workingDir": "../bugs/Closure_109_tmp",
  "bug_name": "Closure_109",
  "derive": "defects4j",
  "trigger_tests": [
    {
      "test_class": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
      "test_function": "testStructuralConstructor2",
      "assertion_line": "585",
      "exception": "junit.framework.AssertionFailedError",
      "message": "extra warning: Bad type annotation. type not recognized due to syntax error"
    },
    {
      "test_class": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
      "test_function": "testStructuralConstructor3",
      "exception": "junit.framework.AssertionFailedError",
      "message": "extra warning: Bad type annotation. type not recognized due to syntax error"
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "com.google.javascript.jscomp.parsing.JsDocInfoParser:parseContextTypeExpression:[JsDocToken token]:Node"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "com.google.javascript.jscomp.parsing.JsDocInfoParser:parseContextTypeExpression:[JsDocToken token]:Node"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "1908",
            "1909",
            "1910",
            "1911",
            "1912"
          ],
          "num": 5
        },
        {
          "qualified_names": [
            "1908"
          ],
          "num": 1
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex c115e10..e30c350 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -1905,11 +1905,7 @@\n    * For expressions on the right hand side of a this: or new:\n    */\n   private Node parseContextTypeExpression(JsDocToken token) {\n-    if (token \u003d\u003d JsDocToken.QMARK) {\n-      return newNode(Token.QMARK);\n-    } else {\n-      return parseBasicTypeExpression(token);\n-    }\n+          return parseTypeName(token);\n   }\n \n   /**\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "ReturnStatement [61261,61289]"
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [61255,61387]",
          "to": ""
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  }
}