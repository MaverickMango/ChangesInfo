{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "data/changesInfo/",
  "properties": {
    "trigger.tests": "org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValuesTest::should_return_zero_if_mock_is_compared_to_itself,org.mockitousage.bugs.ShouldMocksCompareToBeConsistentWithEqualsTest::should_compare_to_be_consistent_with_equals_when_comparing_the_same_reference",
    "test.dir": "test",
    "clz.modified": "org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValues",
    "src.dir": "src"
  },
  "timeoutSecond": 100,
  "proj": "Mockito",
  "id": "24",
  "workingDir": "../bugs/Mockito_24_tmp",
  "bug_name": "Mockito_24",
  "derive": "defects4j",
  "trigger_tests": [
    {
      "test_class": "org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValuesTest",
      "test_function": "should_return_zero_if_mock_is_compared_to_itself",
      "assertion_line": "77",
      "exception": "junit.framework.AssertionFailedError",
      "message": "expected:\u003c0\u003e but was:\u003c1\u003e"
    },
    {
      "test_class": "org.mockitousage.bugs.ShouldMocksCompareToBeConsistentWithEqualsTest",
      "test_function": "should_compare_to_be_consistent_with_equals_when_comparing_the_same_reference",
      "assertion_line": "48",
      "exception": "junit.framework.AssertionFailedError",
      "message": "expected:\u003c1\u003e but was:\u003c2\u003e"
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java",
        "src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValues:answer:[InvocationOnMock invocation]:Object"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValues:answer:[InvocationOnMock invocation]:Object"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "76"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "76"
          ],
          "num": 1
        }
      ],
      "diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex d19fcda..4c00f50 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -73,7 +73,7 @@\n             //see issue 184.\n             //mocks by default should return 0 if references are the same, otherwise some other value because they are not the same. Hence we return 1 (anything but 0 is good).\n             //Only for compareTo() method by the Comparable interface\n-            return invocation.getMock() \u003d\u003d invocation.getArguments()[0] ? 0 : 1;\n+            return 1;\n         }\n         \n         Class\u003c?\u003e returnType \u003d invocation.getMethod().getReturnType();\n",
      "operations": [
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "InfixExpression [2752,2804]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "NumberLiteral: 0 [2807,2808]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "ConditionalExpression [2752,2812]",
          "to": ""
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  }
}