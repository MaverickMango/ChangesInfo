{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "data/changesInfo/",
  "properties": {
    "trigger.tests": "org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear,org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_tokyo_endOfYear",
    "test.dir": "src/test/java",
    "clz.modified": "org.joda.time.format.DateTimeFormatter",
    "src.dir": "src/main/java"
  },
  "timeoutSecond": 100,
  "proj": "Time",
  "id": "7",
  "workingDir": "../bugs/Time_7_tmp",
  "bug_name": "Time_7",
  "derive": "defects4j",
  "trigger_tests": [
    {
      "test_class": "org.joda.time.format.TestDateTimeFormatter",
      "test_function": "testParseInto_monthDay_feb29_newYork_startOfYear",
      "assertion_line": "932",
      "exception": "org.joda.time.IllegalFieldValueException",
      "message": "Cannot parse \"2 29\": Value 29 for dayOfMonth must be in the range [1,28]"
    },
    {
      "test_class": "org.joda.time.format.TestDateTimeFormatter",
      "test_function": "testParseInto_monthDay_feb29_tokyo_endOfYear",
      "assertion_line": "960",
      "exception": "org.joda.time.IllegalFieldValueException",
      "message": "Cannot parse \"2 29\": Value 29 for dayOfMonth must be in the range [1,28]"
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/joda/time/format/DateTimeFormatter.java",
        "src/main/java/org/joda/time/format/DateTimeFormatter.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.joda.time.format.DateTimeFormatter:parseInto:[ReadWritableInstant instant, String text, int position]:int"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "org.joda.time.format.DateTimeFormatter:parseInto:[ReadWritableInstant instant, String text, int position]:int"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "708"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "710"
          ],
          "num": 1
        }
      ],
      "diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex 913d036..447674a 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -705,9 +705,9 @@\n         \n         long instantMillis \u003d instant.getMillis();\n         Chronology chrono \u003d instant.getChronology();\n-        int defaultYear \u003d DateTimeUtils.getChronology(chrono).year().get(instantMillis);\n         long instantLocal \u003d instantMillis + chrono.getZone().getOffset(instantMillis);\n         chrono \u003d selectChronology(chrono);\n+        int defaultYear \u003d chrono.year().get(instantLocal);\n         \n         DateTimeParserBucket bucket \u003d new DateTimeParserBucket(\n             instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n",
      "operations": [
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "METHOD_INVOCATION_RECEIVER [26893,26906]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: getChronology [26907,26920]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "METHOD_INVOCATION_ARGUMENTS [26921,26927]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "MethodInvocation [26893,26928]",
          "to": ""
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  }
}