{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "data/changesInfo/",
  "properties": {
    "trigger.tests": "org.joda.time.TestPartial_Basics::testWith3",
    "test.dir": "src/test/java",
    "clz.modified": "org.joda.time.Partial",
    "src.dir": "src/main/java"
  },
  "timeoutSecond": 100,
  "proj": "Time",
  "id": "4",
  "workingDir": "../bugs/Time_4_tmp",
  "bug_name": "Time_4",
  "derive": "defects4j",
  "trigger_tests": [
    {
      "test_class": "org.joda.time.TestPartial_Basics",
      "test_function": "testWith3",
      "assertion_line": "364",
      "exception": "junit.framework.AssertionFailedError",
      "message": ""
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/joda/time/Partial.java",
        "src/main/java/org/joda/time/Partial.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.joda.time.Partial:with:[DateTimeFieldType fieldType, int value]:Partial"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "org.joda.time.Partial:with:[DateTimeFieldType fieldType, int value]:Partial"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "464"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "464"
          ],
          "num": 1
        }
      ],
      "diff": "diff --git a/src/main/java/org/joda/time/Partial.java b/src/main/java/org/joda/time/Partial.java\nindex 8e8e603..0d4edf4 100644\n--- a/src/main/java/org/joda/time/Partial.java\n+++ b/src/main/java/org/joda/time/Partial.java\n@@ -461,7 +461,7 @@\n             System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);\n             // use public constructor to ensure full validation\n             // this isn\u0027t overly efficient, but is safe\n-            Partial newPartial \u003d new Partial(newTypes, newValues, iChronology);\n+            Partial newPartial \u003d new Partial(iChronology, newTypes, newValues);\n             iChronology.validate(newPartial, newValues);\n             return newPartial;\n         }\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [18532,18599]"
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [18532,18599]",
          "to": ""
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  }
}