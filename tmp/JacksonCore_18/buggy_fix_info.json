{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "data/changesInfo/",
  "properties": {
    "trigger.tests": "com.fasterxml.jackson.core.json.TestJsonGeneratorFeatures::testTooBigBigDecimal",
    "test.dir": "src/test/java",
    "clz.modified": "com.fasterxml.jackson.core.base.GeneratorBase,com.fasterxml.jackson.core.json.UTF8JsonGenerator,com.fasterxml.jackson.core.json.WriterBasedJsonGenerator",
    "src.dir": "src/main/java"
  },
  "timeoutSecond": 100,
  "proj": "JacksonCore",
  "id": "18",
  "workingDir": "../bugs/JacksonCore_18_tmp",
  "bug_name": "JacksonCore_18",
  "derive": "defects4j",
  "trigger_tests": [
    {
      "test_class": "com.fasterxml.jackson.core.json.TestJsonGeneratorFeatures",
      "test_function": "testTooBigBigDecimal",
      "assertion_line": "154",
      "exception": "junit.framework.AssertionFailedError",
      "message": "Should not have written without exception: 1E+10000"
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java",
        "src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "com.fasterxml.jackson.core.base.GeneratorBase:_asString:[BigDecimal value]:String"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "com.fasterxml.jackson.core.base.GeneratorBase:_asString:[BigDecimal value]:String"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "53",
            "435",
            "437",
            "438",
            "439",
            "440",
            "441",
            "442",
            "443",
            "444"
          ],
          "num": 10
        },
        {
          "qualified_names": [
            "52",
            "435"
          ],
          "num": 2
        }
      ],
      "diff": "diff --git a/src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java b/src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java\nindex 128fbcf..a414839 100644\n--- a/src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java\n+++ b/src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java\n@@ -50,7 +50,6 @@\n      * \n      * @since 2.7.7\n      */\n-    protected final static int MAX_BIG_DECIMAL_SCALE \u003d 9999;\n     \n     /*\n     /**********************************************************\n@@ -432,16 +431,7 @@\n      * @since 2.7.7\n      */\n     protected String _asString(BigDecimal value) throws IOException {\n-        if (Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features)) {\n             // 24-Aug-2016, tatu: [core#315] prevent possible DoS vector\n-            int scale \u003d value.scale();\n-            if ((scale \u003c -MAX_BIG_DECIMAL_SCALE) || (scale \u003e MAX_BIG_DECIMAL_SCALE)) {\n-                _reportError(String.format(\n-\"Attempt to write plain `java.math.BigDecimal` (see JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN) with illegal scale (%d): needs to be between [-%d, %d]\",\n-scale, MAX_BIG_DECIMAL_SCALE, MAX_BIG_DECIMAL_SCALE));\n-            }\n-            return value.toPlainString();\n-        }\n         return value.toString();\n     }\n \n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [1701,2043]"
        },
        {
          "type": "delete-tree",
          "from": "FieldDeclaration [1701,2104]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [15122,15705]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java",
        "src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "com.fasterxml.jackson.core.json.UTF8JsonGenerator:writeNumber:[BigDecimal value]:void"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "com.fasterxml.jackson.core.json.UTF8JsonGenerator:writeNumber:[BigDecimal value]:void"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "910"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "910",
            "911",
            "912",
            "913"
          ],
          "num": 4
        }
      ],
      "diff": "diff --git a/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java b/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java\nindex 5524691..cf6ca3a 100644\n--- a/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java\n+++ b/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java\n@@ -907,7 +907,10 @@\n         if (value \u003d\u003d null) {\n             _writeNull();\n         } else  if (_cfgNumbersAsStrings) {\n-            _writeQuotedRaw(_asString(value));\n+            String raw \u003d Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features) ? value.toPlainString() : value.toString();\n+            _writeQuotedRaw(raw);\n+        } else if (Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features)) {\n+            writeRaw(value.toPlainString());\n         } else {\n             writeRaw(_asString(value));\n         }\n",
      "operations": [
        {
          "type": "insert-node",
          "from": "",
          "to": "IfStatement [30092,30265]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [29931,30042]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodInvocation [30096,30150]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Block [30152,30208]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: raw [30071,30074]"
        },
        {
          "type": "delete-tree",
          "from": "MethodInvocation [29947,29963]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java",
        "src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "com.fasterxml.jackson.core.json.WriterBasedJsonGenerator:writeNumber:[BigDecimal value]:void"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "com.fasterxml.jackson.core.json.WriterBasedJsonGenerator:writeNumber:[BigDecimal value]:void"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "687"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "687",
            "688",
            "689",
            "690"
          ],
          "num": 4
        }
      ],
      "diff": "diff --git a/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java b/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java\nindex 2340ea2..156d997 100644\n--- a/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java\n+++ b/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java\n@@ -684,7 +684,10 @@\n         if (value \u003d\u003d null) {\n             _writeNull();\n         } else  if (_cfgNumbersAsStrings) {\n-            _writeQuotedRaw(_asString(value));\n+            String raw \u003d isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toPlainString() : value.toString();\n+            _writeQuotedRaw(raw);\n+        } else if (isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n+            writeRaw(value.toPlainString());\n         } else {\n             writeRaw(_asString(value));\n         }\n",
      "operations": [
        {
          "type": "insert-node",
          "from": "",
          "to": "IfStatement [21849,22012]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [21698,21799]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodInvocation [21853,21897]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Block [21899,21955]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: raw [21828,21831]"
        },
        {
          "type": "delete-tree",
          "from": "MethodInvocation [21714,21730]",
          "to": ""
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  }
}