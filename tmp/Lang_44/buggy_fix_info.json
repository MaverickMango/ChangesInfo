{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "data/changesInfo/",
  "properties": {
    "trigger.tests": "org.apache.commons.lang.NumberUtilsTest::testLang457",
    "test.dir": "src/test",
    "clz.modified": "org.apache.commons.lang.NumberUtils",
    "src.dir": "src/java"
  },
  "timeoutSecond": 100,
  "proj": "Lang",
  "id": "44",
  "workingDir": "../bugs/Lang_44_tmp",
  "bug_name": "Lang_44",
  "derive": "defects4j",
  "trigger_tests": [
    {
      "test_class": "org.apache.commons.lang.NumberUtilsTest",
      "test_function": "testLang457",
      "assertion_line": "528",
      "exception": "java.lang.StringIndexOutOfBoundsException",
      "message": "String index out of range: 0"
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/lang/NumberUtils.java",
        "src/java/org/apache/commons/lang/NumberUtils.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.lang.NumberUtils:createNumber:[String val]:Number"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "org.apache.commons.lang.NumberUtils:createNumber:[String val]:Number"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "145",
            "146",
            "147"
          ],
          "num": 3
        },
        {
          "qualified_names": [
            "144"
          ],
          "num": 1
        }
      ],
      "diff": "diff --git a/src/java/org/apache/commons/lang/NumberUtils.java b/src/java/org/apache/commons/lang/NumberUtils.java\nindex c5ca8cd..18a05ef 100644\n--- a/src/java/org/apache/commons/lang/NumberUtils.java\n+++ b/src/java/org/apache/commons/lang/NumberUtils.java\n@@ -142,9 +142,6 @@\n         if (val.length() \u003d\u003d 0) {\n             throw new NumberFormatException(\"\\\"\\\" is not a valid number.\");\n         }\n-        if (val.length() \u003d\u003d 1 \u0026\u0026 !Character.isDigit(val.charAt(0))) {\n-            throw new NumberFormatException(val + \" is not a valid number.\");\n-        }\n         if (val.startsWith(\"--\")) {\n             // this is protection for poorness in java.lang.BigDecimal.\n             // it accepts this as a legal value, but it does not appear \n",
      "operations": [
        {
          "type": "delete-tree",
          "from": "IfStatement [5285,5434]",
          "to": ""
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  }
}