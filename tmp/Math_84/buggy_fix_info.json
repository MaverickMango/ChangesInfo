{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "data/changesInfo/",
  "properties": {
    "trigger.tests": "org.apache.commons.math.optimization.direct.MultiDirectionalTest::testMinimizeMaximize,org.apache.commons.math.optimization.direct.MultiDirectionalTest::testMath283",
    "test.dir": "src/test/java",
    "clz.modified": "org.apache.commons.math.optimization.direct.MultiDirectional",
    "src.dir": "src/main/java"
  },
  "timeoutSecond": 100,
  "proj": "Math",
  "id": "84",
  "workingDir": "../bugs/Math_84_tmp",
  "bug_name": "Math_84",
  "derive": "defects4j",
  "trigger_tests": [
    {
      "test_class": "org.apache.commons.math.optimization.direct.MultiDirectionalTest",
      "test_function": "testMinimizeMaximize",
      "assertion_line": "103",
      "exception": "junit.framework.AssertionFailedError",
      "message": ""
    },
    {
      "test_class": "org.apache.commons.math.optimization.direct.MultiDirectionalTest",
      "test_function": "testMath283",
      "assertion_line": "203",
      "exception": "org.apache.commons.math.optimization.OptimizationException",
      "message": "org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (100) exceeded"
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java",
        "src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.math.optimization.direct.MultiDirectional:iterateSimplex:[final Comparator\u003cRealPointValuePair\u003e comparator]:void"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "org.apache.commons.math.optimization.direct.MultiDirectional:iterateSimplex:[final Comparator\u003cRealPointValuePair\u003e comparator]:void"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "64",
            "93",
            "94",
            "97",
            "98",
            "99",
            "100",
            "101",
            "102"
          ],
          "num": 9
        },
        {
          "qualified_names": [
            "63",
            "93"
          ],
          "num": 2
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 929560c..42a4d9d 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -61,7 +61,6 @@\n     protected void iterateSimplex(final Comparator\u003cRealPointValuePair\u003e comparator)\n         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n \n-        final RealConvergenceChecker checker \u003d getConvergenceChecker();\n         while (true) {\n \n             incrementIterationsCounter();\n@@ -90,16 +89,8 @@\n             final RealPointValuePair contracted \u003d evaluateNewSimplex(original, gamma, comparator);\n             if (comparator.compare(contracted, best) \u003c 0) {\n                 // accept the contracted simplex\n-                return;\n-            }\n \n             // check convergence\n-            final int iter \u003d getIterations();\n-            boolean converged \u003d true;\n-            for (int i \u003d 0; i \u003c simplex.length; ++i) {\n-                converged \u0026\u003d checker.converged(iter, original[i], simplex[i]);\n-            }\n-            if (converged) {\n                 return;\n             }\n \n",
      "operations": [
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [2246,2309]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [3514,3547]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [3560,3585]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ForStatement [3598,3733]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [3746,3800]",
          "to": ""
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  }
}