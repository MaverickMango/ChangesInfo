{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "data/changesInfo/",
  "properties": {
    "trigger.tests": "org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber,org.apache.commons.lang3.math.NumberUtilsTest::testIsNumber",
    "test.dir": "src/test",
    "clz.modified": "org.apache.commons.lang3.math.NumberUtils",
    "src.dir": "src/java"
  },
  "timeoutSecond": 100,
  "proj": "Lang",
  "id": "36",
  "workingDir": "../bugs/Lang_36_tmp",
  "bug_name": "Lang_36",
  "derive": "defects4j",
  "trigger_tests": [
    {
      "test_class": "org.apache.commons.lang3.math.NumberUtilsTest",
      "test_function": "testCreateNumber",
      "assertion_line": "213",
      "exception": "java.lang.NumberFormatException",
      "message": "2. is not a valid number."
    },
    {
      "test_class": "org.apache.commons.lang3.math.NumberUtilsTest",
      "test_function": "testIsNumber",
      "assertion_line": "1138",
      "exception": "junit.framework.AssertionFailedError",
      "message": "isNumber(String) LANG-521 failed"
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/lang3/math/NumberUtils.java",
        "src/java/org/apache/commons/lang3/math/NumberUtils.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.lang3.math.NumberUtils:isNumber:[String str]:boolean",
            "org.apache.commons.lang3.math.NumberUtils:createNumber:[String str]:Number"
          ],
          "num": 2
        },
        {
          "qualified_names": [
            "org.apache.commons.lang3.math.NumberUtils:isNumber:[String str]:boolean",
            "org.apache.commons.lang3.math.NumberUtils:createNumber:[String str]:Number"
          ],
          "num": 2
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "491",
            "1388",
            "1389",
            "1390",
            "1391",
            "1392",
            "1393",
            "1394",
            "1395"
          ],
          "num": 9
        },
        {
          "qualified_names": [
            "491",
            "1387"
          ],
          "num": 2
        }
      ],
      "diff": "diff --git a/src/java/org/apache/commons/lang3/math/NumberUtils.java b/src/java/org/apache/commons/lang3/math/NumberUtils.java\nindex 0d30b22..d3054f3 100644\n--- a/src/java/org/apache/commons/lang3/math/NumberUtils.java\n+++ b/src/java/org/apache/commons/lang3/math/NumberUtils.java\n@@ -488,7 +488,7 @@\n             }\n             dec \u003d null;\n         }\n-        if (!Character.isDigit(lastChar) \u0026\u0026 lastChar !\u003d \u0027.\u0027) {\n+        if (!Character.isDigit(lastChar)) {\n             if (expPos \u003e -1 \u0026\u0026 expPos \u003c str.length() - 1) {\n                 exp \u003d str.substring(expPos + 1, str.length() - 1);\n             } else {\n@@ -1385,14 +1385,6 @@\n                 // can\u0027t have an E at the last byte\n                 return false;\n             }\n-            if (chars[i] \u003d\u003d \u0027.\u0027) {\n-                if (hasDecPoint || hasExp) {\n-                    // two decimal points or dec in exponent\n-                    return false;\n-                }\n-                // single trailing decimal point after non-exponent is ok\n-                return foundDigit;\n-            }\n             if (!allowSigns\n                 \u0026\u0026 (chars[i] \u003d\u003d \u0027d\u0027\n                     || chars[i] \u003d\u003d \u0027D\u0027\n",
      "operations": [
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "INFIX_EXPRESSION_OPERATOR: \u0026\u0026 [17394,17396]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "InfixExpression [17397,17412]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "InfixExpression [17365,17412]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [46702,47005]",
          "to": ""
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  }
}