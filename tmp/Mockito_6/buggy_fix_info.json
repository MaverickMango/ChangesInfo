{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "data/changesInfo/",
  "properties": {
    "trigger.tests": "org.mockitousage.matchers.AnyXMatchersAcceptNullsTest::shouldNotAcceptNullInAllAnyPrimitiveWrapperMatchers,org.mockitousage.matchers.AnyXMatchersAcceptNullsTest::shouldNotAcceptNullInAnyXMatchers,org.mockitousage.matchers.MatchersTest::anyStringMatcher,org.mockitousage.matchers.NewMatchersTest::shouldAllowAnyCollection,org.mockitousage.matchers.NewMatchersTest::shouldAllowAnyList,org.mockitousage.matchers.NewMatchersTest::shouldAllowAnyMap,org.mockitousage.matchers.NewMatchersTest::shouldAllowAnySet",
    "test.dir": "test",
    "clz.modified": "org.mockito.Matchers",
    "src.dir": "src"
  },
  "timeoutSecond": 100,
  "proj": "Mockito",
  "id": "6",
  "workingDir": "../bugs/Mockito_6_tmp",
  "bug_name": "Mockito_6",
  "derive": "defects4j",
  "trigger_tests": [
    {
      "test_class": "org.mockitousage.matchers.AnyXMatchersAcceptNullsTest",
      "test_function": "shouldNotAcceptNullInAllAnyPrimitiveWrapperMatchers",
      "assertion_line": "54",
      "exception": "junit.framework.ComparisonFailure",
      "message": "expected:\u003cnull\u003e but was:\u003c0\u003e"
    },
    {
      "test_class": "org.mockitousage.matchers.AnyXMatchersAcceptNullsTest",
      "test_function": "shouldNotAcceptNullInAnyXMatchers",
      "assertion_line": "35",
      "exception": "junit.framework.ComparisonFailure",
      "message": "expected:\u003cnull\u003e but was:\u003c0\u003e"
    },
    {
      "test_class": "org.mockitousage.matchers.MatchersTest",
      "test_function": "anyStringMatcher",
      "assertion_line": "232",
      "exception": "junit.framework.ComparisonFailure",
      "message": "expected:\u003cnull\u003e but was:\u003cmatched\u003e"
    },
    {
      "test_class": "org.mockitousage.matchers.NewMatchersTest",
      "test_function": "shouldAllowAnyCollection",
      "assertion_line": "45",
      "exception": "junit.framework.ComparisonFailure",
      "message": "expected:\u003cnull\u003e but was:\u003cmatched\u003e"
    },
    {
      "test_class": "org.mockitousage.matchers.NewMatchersTest",
      "test_function": "shouldAllowAnyList",
      "assertion_line": "35",
      "exception": "junit.framework.ComparisonFailure",
      "message": "expected:\u003cnull\u003e but was:\u003cmatched\u003e"
    },
    {
      "test_class": "org.mockitousage.matchers.NewMatchersTest",
      "test_function": "shouldAllowAnyMap",
      "assertion_line": "55",
      "exception": "junit.framework.ComparisonFailure",
      "message": "expected:\u003cnull\u003e but was:\u003cmatched\u003e"
    },
    {
      "test_class": "org.mockitousage.matchers.NewMatchersTest",
      "test_function": "shouldAllowAnySet",
      "assertion_line": "65",
      "exception": "junit.framework.ComparisonFailure",
      "message": "expected:\u003cnull\u003e but was:\u003cmatched\u003e"
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/org/mockito/Matchers.java",
        "src/org/mockito/Matchers.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.mockito.Matchers:anyDouble:[]:double",
            "org.mockito.Matchers:anyObject:[]:T",
            "org.mockito.Matchers:any:[Class\u003cT\u003e clazz]:T",
            "org.mockito.Matchers:anyCollection:[]:Collection",
            "org.mockito.Matchers:anyList:[]:List",
            "org.mockito.Matchers:anyByte:[]:byte",
            "org.mockito.Matchers:anyInt:[]:int",
            "org.mockito.Matchers:anyString:[]:String",
            "org.mockito.Matchers:anyBoolean:[]:boolean",
            "org.mockito.Matchers:any:[]:T",
            "org.mockito.Matchers:anyMap:[]:Map",
            "org.mockito.Matchers:anyMapOf:[Class\u003cK\u003e keyClazz, Class\u003cV\u003e valueClazz]:Map\u003cK,V\u003e",
            "org.mockito.Matchers:anyChar:[]:char",
            "org.mockito.Matchers:anySetOf:[Class\u003cT\u003e clazz]:Set\u003cT\u003e",
            "org.mockito.Matchers:anyCollectionOf:[Class\u003cT\u003e clazz]:Collection\u003cT\u003e",
            "org.mockito.Matchers:anyListOf:[Class\u003cT\u003e clazz]:List\u003cT\u003e",
            "org.mockito.Matchers:anySet:[]:Set",
            "org.mockito.Matchers:anyLong:[]:long",
            "org.mockito.Matchers:anyShort:[]:short",
            "org.mockito.Matchers:anyFloat:[]:float"
          ],
          "num": 20
        },
        {
          "qualified_names": [
            "org.mockito.Matchers:any:[]:T",
            "org.mockito.Matchers:anyObject:[]:T",
            "org.mockito.Matchers:anyBoolean:[]:boolean",
            "org.mockito.Matchers:anyMapOf:[Class\u003cK\u003e keyClazz, Class\u003cV\u003e valueClazz]:Map\u003cK,V\u003e",
            "org.mockito.Matchers:anySet:[]:Set",
            "org.mockito.Matchers:anyDouble:[]:double",
            "org.mockito.Matchers:anySetOf:[Class\u003cT\u003e clazz]:Set\u003cT\u003e",
            "org.mockito.Matchers:anyCollection:[]:Collection",
            "org.mockito.Matchers:anyCollectionOf:[Class\u003cT\u003e clazz]:Collection\u003cT\u003e",
            "org.mockito.Matchers:anyMap:[]:Map",
            "org.mockito.Matchers:anyInt:[]:int",
            "org.mockito.Matchers:any:[Class\u003cT\u003e clazz]:T",
            "org.mockito.Matchers:anyListOf:[Class\u003cT\u003e clazz]:List\u003cT\u003e",
            "org.mockito.Matchers:anyByte:[]:byte",
            "org.mockito.Matchers:anyString:[]:String",
            "org.mockito.Matchers:anyFloat:[]:float",
            "org.mockito.Matchers:anyList:[]:List",
            "org.mockito.Matchers:anyLong:[]:long",
            "org.mockito.Matchers:anyShort:[]:short",
            "org.mockito.Matchers:anyChar:[]:char"
          ],
          "num": 20
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "122",
            "137",
            "152",
            "167",
            "182",
            "197",
            "212",
            "227",
            "244",
            "292",
            "309",
            "324",
            "339",
            "358",
            "373",
            "392",
            "407",
            "427",
            "442",
            "461"
          ],
          "num": 20
        },
        {
          "qualified_names": [
            "122",
            "137",
            "152",
            "167",
            "182",
            "197",
            "212",
            "227",
            "244",
            "292",
            "309",
            "324",
            "339",
            "358",
            "373",
            "392",
            "407",
            "427",
            "442",
            "461"
          ],
          "num": 20
        }
      ],
      "diff": "diff --git a/src/org/mockito/Matchers.java b/src/org/mockito/Matchers.java\nindex d6893af..04f40e5 100644\n--- a/src/org/mockito/Matchers.java\n+++ b/src/org/mockito/Matchers.java\n@@ -119,7 +119,7 @@\n      * @return \u003ccode\u003efalse\u003c/code\u003e.\r\n      */\r\n     public static boolean anyBoolean() {\r\n-        return reportMatcher(new InstanceOf(Boolean.class)).returnFalse();\r\n+        return reportMatcher(Any.ANY).returnFalse();\r\n     }\r\n \r\n     /**\r\n@@ -134,7 +134,7 @@\n      * @return \u003ccode\u003e0\u003c/code\u003e.\r\n      */\r\n     public static byte anyByte() {\r\n-        return reportMatcher(new InstanceOf(Byte.class)).returnZero();\r\n+        return reportMatcher(Any.ANY).returnZero();\r\n     }\r\n \r\n     /**\r\n@@ -149,7 +149,7 @@\n      * @return \u003ccode\u003e0\u003c/code\u003e.\r\n      */\r\n     public static char anyChar() {\r\n-        return reportMatcher(new InstanceOf(Character.class)).returnChar();\r\n+        return reportMatcher(Any.ANY).returnChar();\r\n     }\r\n \r\n     /**\r\n@@ -164,7 +164,7 @@\n      * @return \u003ccode\u003e0\u003c/code\u003e.\r\n      */\r\n     public static int anyInt() {\r\n-        return reportMatcher(new InstanceOf(Integer.class)).returnZero();\r\n+        return reportMatcher(Any.ANY).returnZero();\r\n     }\r\n \r\n     /**\r\n@@ -179,7 +179,7 @@\n      * @return \u003ccode\u003e0\u003c/code\u003e.\r\n      */\r\n     public static long anyLong() {\r\n-        return reportMatcher(new InstanceOf(Long.class)).returnZero();\r\n+        return reportMatcher(Any.ANY).returnZero();\r\n     }\r\n \r\n     /**\r\n@@ -194,7 +194,7 @@\n      * @return \u003ccode\u003e0\u003c/code\u003e.\r\n      */\r\n     public static float anyFloat() {\r\n-        return reportMatcher(new InstanceOf(Float.class)).returnZero();\r\n+        return reportMatcher(Any.ANY).returnZero();\r\n     }\r\n \r\n     /**\r\n@@ -209,7 +209,7 @@\n      * @return \u003ccode\u003e0\u003c/code\u003e.\r\n      */\r\n     public static double anyDouble() {\r\n-        return reportMatcher(new InstanceOf(Double.class)).returnZero();\r\n+        return reportMatcher(Any.ANY).returnZero();\r\n     }\r\n \r\n     /**\r\n@@ -224,7 +224,7 @@\n      * @return \u003ccode\u003e0\u003c/code\u003e.\r\n      */\r\n     public static short anyShort() {\r\n-        return reportMatcher(new InstanceOf(Short.class)).returnZero();\r\n+        return reportMatcher(Any.ANY).returnZero();\r\n     }\r\n \r\n     /**\r\n@@ -241,7 +241,7 @@\n      * @return \u003ccode\u003enull\u003c/code\u003e.\r\n      */\r\n     public static \u003cT\u003e T anyObject() {\r\n-        return (T) reportMatcher(new InstanceOf(Object.class)).returnNull();\r\n+        return (T) reportMatcher(Any.ANY).returnNull();\r\n     }\r\n \r\n     /**\r\n@@ -289,7 +289,7 @@\n      * @return \u003ccode\u003enull\u003c/code\u003e.\r\n      */\r\n     public static \u003cT\u003e T any(Class\u003cT\u003e clazz) {\r\n-        return (T) reportMatcher(new InstanceOf(clazz)).returnFor(clazz);\r\n+        return (T) reportMatcher(Any.ANY).returnFor(clazz);\r\n     }\r\n     \r\n     /**\r\n@@ -306,7 +306,7 @@\n      * @return \u003ccode\u003enull\u003c/code\u003e.\r\n      */\r\n     public static \u003cT\u003e T any() {\r\n-        return (T) reportMatcher(Any.ANY).returnNull();\r\n+        return (T) anyObject();\r\n     }\r\n \r\n     /**\r\n@@ -321,7 +321,7 @@\n      * @return empty String (\"\")\r\n      */\r\n     public static String anyString() {\r\n-        return reportMatcher(new InstanceOf(String.class)).returnString();\r\n+        return reportMatcher(Any.ANY).returnString();\r\n     }\r\n     \r\n     /**\r\n@@ -336,7 +336,7 @@\n      * @return empty List.\r\n      */\r\n     public static List anyList() {\r\n-        return reportMatcher(new InstanceOf(List.class)).returnList();\r\n+        return reportMatcher(Any.ANY).returnList();\r\n     }    \r\n     \r\n     /**\r\n@@ -355,7 +355,7 @@\n      * @return empty List.\r\n      */\r\n     public static \u003cT\u003e List\u003cT\u003e anyListOf(Class\u003cT\u003e clazz) {\r\n-        return anyList();\r\n+        return (List) reportMatcher(Any.ANY).returnList();\r\n     }    \r\n     \r\n     /**\r\n@@ -370,7 +370,7 @@\n      * @return empty Set\r\n      */\r\n     public static Set anySet() {\r\n-        return reportMatcher(new InstanceOf(Set.class)).returnSet();\r\n+        return reportMatcher(Any.ANY).returnSet();\r\n     }\r\n     \r\n     /**\r\n@@ -389,7 +389,7 @@\n      * @return empty Set\r\n      */\r\n     public static \u003cT\u003e Set\u003cT\u003e anySetOf(Class\u003cT\u003e clazz) {\r\n-        return anySet();\r\n+        return (Set) reportMatcher(Any.ANY).returnSet();\r\n     }\r\n \r\n     /**\r\n@@ -404,7 +404,7 @@\n      * @return empty Map.\r\n      */\r\n     public static Map anyMap() {\r\n-        return reportMatcher(new InstanceOf(Map.class)).returnMap();\r\n+        return reportMatcher(Any.ANY).returnMap();\r\n     }\r\n \r\n     /**\r\n@@ -424,7 +424,7 @@\n      * @return empty Map.\r\n      */\r\n     public static \u003cK, V\u003e  Map\u003cK, V\u003e anyMapOf(Class\u003cK\u003e keyClazz, Class\u003cV\u003e valueClazz) {\r\n-        return anyMap();\r\n+        return reportMatcher(Any.ANY).returnMap();\r\n     }\r\n     \r\n     /**\r\n@@ -439,7 +439,7 @@\n      * @return empty Collection.\r\n      */\r\n     public static Collection anyCollection() {\r\n-        return reportMatcher(new InstanceOf(Collection.class)).returnList();\r\n+        return reportMatcher(Any.ANY).returnList();\r\n     }    \r\n     \r\n     /**\r\n@@ -458,7 +458,7 @@\n      * @return empty Collection.\r\n      */\r\n     public static \u003cT\u003e Collection\u003cT\u003e anyCollectionOf(Class\u003cT\u003e clazz) {\r\n-        return anyCollection();\r\n+        return (Collection) reportMatcher(Any.ANY).returnList();\r\n     }    \r\n \r\n     /**\r\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "ReturnStatement [11497,11520]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ReturnStatement [13242,13292]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ReturnStatement [14493,14541]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ReturnStatement [15826,15868]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ReturnStatement [17150,17206]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "QualifiedName: Any.ANY [5187,5194]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "QualifiedName: Any.ANY [5702,5709]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "QualifiedName: Any.ANY [6221,6228]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "QualifiedName: Any.ANY [6709,6716]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "QualifiedName: Any.ANY [7223,7230]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "QualifiedName: Any.ANY [7741,7748]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "QualifiedName: Any.ANY [8263,8270]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "QualifiedName: Any.ANY [8781,8788]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "QualifiedName: Any.ANY [12001,12008]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "QualifiedName: Any.ANY [12498,12505]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "QualifiedName: Any.ANY [13763,13770]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "QualifiedName: Any.ANY [15006,15013]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "QualifiedName: Any.ANY [16365,16372]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "QualifiedName: Any.ANY [9366,9373]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "QualifiedName: Any.ANY [10960,10967]"
        },
        {
          "type": "delete-tree",
          "from": "ClassInstanceCreation [5187,5216]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ClassInstanceCreation [5724,5750]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ClassInstanceCreation [6262,6293]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ClassInstanceCreation [6774,6803]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ClassInstanceCreation [7310,7336]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ClassInstanceCreation [7847,7874]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ClassInstanceCreation [8389,8417]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ClassInstanceCreation [8928,8955]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ClassInstanceCreation [9533,9561]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ClassInstanceCreation [11148,11169]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ReturnStatement [11699,11746]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ClassInstanceCreation [12227,12255]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ClassInstanceCreation [12745,12771]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ReturnStatement [13508,13525]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ClassInstanceCreation [13996,14021]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ReturnStatement [14744,14760]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ClassInstanceCreation [15225,15250]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ReturnStatement [16063,16079]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ClassInstanceCreation [16576,16608]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ReturnStatement [17386,17409]",
          "to": ""
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  }
}