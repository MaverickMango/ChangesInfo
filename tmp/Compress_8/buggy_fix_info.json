{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "data/changesInfo/",
  "properties": {
    "trigger.tests": "org.apache.commons.compress.archivers.tar.TarUtilsTest::testParseOctalInvalid",
    "test.dir": "src/test/java",
    "clz.modified": "org.apache.commons.compress.archivers.tar.TarUtils",
    "src.dir": "src/main/java"
  },
  "timeoutSecond": 100,
  "proj": "Compress",
  "id": "8",
  "workingDir": "../bugs/Compress_8_tmp",
  "bug_name": "Compress_8",
  "derive": "defects4j",
  "trigger_tests": [
    {
      "test_class": "org.apache.commons.compress.archivers.tar.TarUtilsTest",
      "test_function": "testParseOctalInvalid",
      "assertion_line": "66",
      "exception": "junit.framework.AssertionFailedError",
      "message": "Expected IllegalArgumentException - should be at least 2 bytes long"
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java",
        "src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.compress.archivers.tar.TarUtils:parseOctal:[final byte[] buffer, final int offset, final int length]:long"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "org.apache.commons.compress.archivers.tar.TarUtils:parseOctal:[final byte[] buffer, final int offset, final int length]:long"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "56",
            "57",
            "58",
            "59",
            "60",
            "62",
            "63",
            "66",
            "67",
            "68",
            "69",
            "72",
            "73",
            "74",
            "75",
            "76",
            "78",
            "81",
            "82",
            "83",
            "84",
            "85",
            "86",
            "87",
            "88",
            "90",
            "91",
            "92",
            "93",
            "95",
            "96"
          ],
          "num": 31
        },
        {
          "qualified_names": [
            "53",
            "58",
            "59",
            "64",
            "65",
            "66",
            "68",
            "69",
            "70",
            "71",
            "76"
          ],
          "num": 11
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java b/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java\nindex 27b2a00..31ef536 100644\n--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java\n@@ -50,50 +50,30 @@\n      */\n     public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n         long    result \u003d 0;\n+        boolean stillPadding \u003d true;\n         int     end \u003d offset + length;\n         int     start \u003d offset;\n \n-        if (length \u003c 2){\n-            throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");\n-        }\n-\n-        boolean allNUL \u003d true;\n         for (int i \u003d start; i \u003c end; i++){\n-            if (buffer[i] !\u003d 0){\n-                allNUL \u003d false;\n+            final byte currentByte \u003d buffer[i];\n+            if (currentByte \u003d\u003d 0) {\n                 break;\n             }\n-        }\n-        if (allNUL) {\n-            return 0L;\n-        }\n \n         // Skip leading spaces\n-        while (start \u003c end){\n-            if (buffer[start] \u003d\u003d \u0027 \u0027){\n-                start++;\n-            } else {\n-                break;\n+            if (currentByte \u003d\u003d (byte) \u0027 \u0027 || currentByte \u003d\u003d \u00270\u0027) {\n+                if (stillPadding) {\n+                   continue;\n             }\n-        }\n+                if (currentByte \u003d\u003d (byte) \u0027 \u0027) {\n+                break;\n+                }\n+            }\n \n         // Must have trailing NUL or space\n-        byte trailer;\n-        trailer \u003d buffer[end-1];\n-        if (trailer \u003d\u003d 0 || trailer \u003d\u003d \u0027 \u0027){\n-            end--;\n-        } else {\n-            throw new IllegalArgumentException(\n-                    exceptionMessage(buffer, offset, length, end-1, trailer));\n-        }\n         // May have additional NUL or space\n-        trailer \u003d buffer[end-1];\n-        if (trailer \u003d\u003d 0 || trailer \u003d\u003d \u0027 \u0027){\n-            end--;\n-        }\n \n-        for ( ;start \u003c end; start++) {\n-            final byte currentByte \u003d buffer[start];\n+            stillPadding \u003d false;\n             // CheckStyle:MagicNumber OFF\n             if (currentByte \u003c \u00270\u0027 || currentByte \u003e \u00277\u0027){\n                 throw new IllegalArgumentException(\n",
      "operations": [
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [2218,2253]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "IfStatement [2266,2326]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "IfStatement [2371,2608]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "InfixExpression [2270,2286]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "InfixExpression [2375,2422]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Block [2424,2608]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [2442,2504]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: currentByte [2525,2536]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "CastExpression [2540,2550]"
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [2134,2248]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ArrayAccess [2340,2349]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "NumberLiteral: 0 [2353,2354]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [2444,2490]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "InfixExpression [2538,2549]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "InfixExpression [2568,2588]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "Block [2589,2629]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "IfStatement [2564,2673]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Block [2550,2683]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "WhileStatement [2531,2683]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [2736,2749]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [2758,2782]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [2791,3000]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [3053,3077]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [3086,3151]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "InfixExpression [3168,3179]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "PostfixExpression [3181,3188]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [3204,3243]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Block [3190,3626]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "ForStatement [3161,3626]",
          "to": ""
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  }
}