{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "data/changesInfo/",
  "properties": {
    "trigger.tests": "org.apache.commons.math.complex.ComplexTest::testMath221",
    "test.dir": "src/test",
    "clz.modified": "org.apache.commons.math.complex.Complex",
    "src.dir": "src/java"
  },
  "timeoutSecond": 100,
  "proj": "Math",
  "id": "96",
  "workingDir": "../bugs/Math_96_tmp",
  "bug_name": "Math_96",
  "derive": "defects4j",
  "trigger_tests": [
    {
      "test_class": "org.apache.commons.math.complex.ComplexTest",
      "test_function": "testMath221",
      "assertion_line": "696",
      "exception": "junit.framework.AssertionFailedError",
      "message": "expected:\u003corg.apache.commons.math.complex.Complex@98b00000\u003e but was:\u003corg.apache.commons.math.complex.Complex@18b00000\u003e"
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/math/complex/Complex.java",
        "src/java/org/apache/commons/math/complex/Complex.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.math.complex.Complex:equals:[Object other]:boolean"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "org.apache.commons.math.complex.Complex:equals:[Object other]:boolean"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "258"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "258"
          ],
          "num": 1
        }
      ],
      "diff": "diff --git a/src/java/org/apache/commons/math/complex/Complex.java b/src/java/org/apache/commons/math/complex/Complex.java\nindex 8b622cb..3571567 100644\n--- a/src/java/org/apache/commons/math/complex/Complex.java\n+++ b/src/java/org/apache/commons/math/complex/Complex.java\n@@ -255,7 +255,7 @@\n                 if (rhs.isNaN()) {\n                     ret \u003d this.isNaN();\n                 } else {\n-                    ret \u003d (real \u003d\u003d rhs.real) \u0026\u0026 (imaginary \u003d\u003d rhs.imaginary); \n+                    ret \u003d (Double.doubleToRawLongBits(real) \u003d\u003d Double.doubleToRawLongBits(rhs.getReal())) \u0026\u0026 (Double.doubleToRawLongBits(imaginary) \u003d\u003d Double.doubleToRawLongBits(rhs.getImaginary())); \n                 }\n             } catch (ClassCastException ex) {\n                 // ignore exception\n",
      "operations": [
        {
          "type": "insert-node",
          "from": "",
          "to": "ParenthesizedExpression [9268,9347]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "ParenthesizedExpression [9351,9440]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "InfixExpression [9269,9346]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "InfixExpression [9352,9439]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "MethodInvocation [9269,9301]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodInvocation [9305,9346]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "MethodInvocation [9352,9389]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodInvocation [9393,9439]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "METHOD_INVOCATION_RECEIVER [9269,9275]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: doubleToRawLongBits [9276,9295]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "METHOD_INVOCATION_ARGUMENTS [9296,9300]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "METHOD_INVOCATION_RECEIVER [9352,9358]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: doubleToRawLongBits [9359,9378]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "METHOD_INVOCATION_ARGUMENTS [9379,9388]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "QualifiedName: rhs.real [9277,9285]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "InfixExpression [9269,9285]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "ParenthesizedExpression [9268,9286]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "QualifiedName: rhs.imaginary [9304,9317]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "InfixExpression [9291,9317]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "ParenthesizedExpression [9290,9318]",
          "to": ""
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  }
}