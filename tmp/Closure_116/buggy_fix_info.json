{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "data/changesInfo/",
  "properties": {
    "trigger.tests": "com.google.javascript.jscomp.FunctionInjectorTest::testIssue1101a,com.google.javascript.jscomp.FunctionInjectorTest::testIssue1101b,com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818,com.google.javascript.jscomp.InlineFunctionsTest::testDoubleInlining2,com.google.javascript.jscomp.InlineFunctionsTest::testIssue1101,com.google.javascript.jscomp.InlineFunctionsTest::testInlineIfParametersModified8,com.google.javascript.jscomp.InlineFunctionsTest::testInlineIfParametersModified9,com.google.javascript.jscomp.InlineFunctionsTest::testInlineFunctions6",
    "test.dir": "test",
    "clz.modified": "com.google.javascript.jscomp.FunctionInjector",
    "src.dir": "src"
  },
  "timeoutSecond": 100,
  "proj": "Closure",
  "id": "116",
  "workingDir": "../bugs/Closure_116_tmp",
  "bug_name": "Closure_116",
  "derive": "defects4j",
  "trigger_tests": [
    {
      "test_class": "com.google.javascript.jscomp.FunctionInjectorTest",
      "test_function": "testIssue1101a",
      "assertion_line": "1545",
      "exception": "junit.framework.AssertionFailedError",
      "message": "expected:\u003cNO\u003e but was:\u003cYES\u003e"
    },
    {
      "test_class": "com.google.javascript.jscomp.FunctionInjectorTest",
      "test_function": "testIssue1101b",
      "assertion_line": "1545",
      "exception": "junit.framework.AssertionFailedError",
      "message": "expected:\u003cNO\u003e but was:\u003cYES\u003e"
    },
    {
      "test_class": "com.google.javascript.jscomp.InlineFunctionsTest",
      "test_function": "testBug4944818",
      "assertion_line": "2063",
      "exception": "junit.framework.AssertionFailedError",
      "message": "Expected: HangoutStarter.prototype.launchHangout\u003dfunction(){var self$$2\u003da.b;var JSCompiler_temp_const$$0\u003dgoog.Uri;var JSCompiler_inline_result$$1;var JSCompiler_inline_result$$0;var self$$inline_1\u003dself$$2;if(!self$$inline_1.domServices_)self$$inline_1.domServices_\u003dgoog$component$DomServices.get(self$$inline_1.appContext_);JSCompiler_inline_result$$0\u003dself$$inline_1.domServices_;JSCompiler_inline_result$$1\u003dJSCompiler_inline_result$$0.getDomHelper().getWindow();var myUrl\u003dnew JSCompiler_temp_const$$0(JSCompiler_inline_result$$1.location.href)}\nResult: HangoutStarter.prototype.launchHangout\u003dfunction(){var self$$2\u003da.b;var JSCompiler_temp_const$$0\u003dgoog.Uri;var JSCompiler_inline_result$$1;var self$$inline_2\u003dself$$2;if(!self$$inline_2.domServices_)self$$inline_2.domServices_\u003dgoog$component$DomServices.get(self$$inline_2.appContext_);JSCompiler_inline_result$$1\u003dself$$inline_2.domServices_;var myUrl\u003dnew JSCompiler_temp_const$$0(JSCompiler_inline_result$$1.getDomHelper().getWindow().location.href)}"
    },
    {
      "test_class": "com.google.javascript.jscomp.InlineFunctionsTest",
      "test_function": "testDoubleInlining2",
      "assertion_line": "1109",
      "exception": "junit.framework.AssertionFailedError",
      "message": "Expected: getWindow(x)\nResult: getWindow(x)"
    },
    {
      "test_class": "com.google.javascript.jscomp.InlineFunctionsTest",
      "test_function": "testIssue1101",
      "assertion_line": "2371",
      "exception": "junit.framework.AssertionFailedError",
      "message": "Expected: var x;var saved$$inline_0\u003dobj[\"prop\"];x\u003dfoo(obj)+saved$$inline_0\nResult: var x\u003dfoo(obj)+obj[\"prop\"]"
    },
    {
      "test_class": "com.google.javascript.jscomp.InlineFunctionsTest",
      "test_function": "testInlineIfParametersModified8",
      "assertion_line": "601",
      "exception": "junit.framework.AssertionFailedError",
      "message": "Expected: o.x\u003d2\nResult: o.x\u003d2"
    },
    {
      "test_class": "com.google.javascript.jscomp.InlineFunctionsTest",
      "test_function": "testInlineIfParametersModified9",
      "assertion_line": "606",
      "exception": "junit.framework.AssertionFailedError",
      "message": "Expected: o[2]\u003d2\nResult: o[2]\u003d2"
    },
    {
      "test_class": "com.google.javascript.jscomp.InlineFunctionsTest",
      "test_function": "testInlineFunctions6",
      "assertion_line": "157",
      "exception": "junit.framework.AssertionFailedError",
      "message": "Expected: var JSCompiler_temp_const$$0\u003dalert;var JSCompiler_inline_result$$1;JSCompiler_inline_result$$1\u003dbaz(nochg(1+2));JSCompiler_temp_const$$0(JSCompiler_inline_result$$1)\nResult: alert(baz(nochg(1+2)))"
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/jscomp/FunctionInjector.java",
        "src/com/google/javascript/jscomp/FunctionInjector.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "com.google.javascript.jscomp.FunctionInjector:canInlineReferenceDirectly:[Node callNode, Node fnNode]:CanInlineResult"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "com.google.javascript.jscomp.FunctionInjector:canInlineReferenceDirectly:[Node callNode, Node fnNode]:CanInlineResult"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "697",
            "698",
            "699",
            "700",
            "701",
            "702",
            "703",
            "704",
            "705",
            "732",
            "733",
            "734"
          ],
          "num": 12
        },
        {
          "qualified_names": [
            "696",
            "740"
          ],
          "num": 2
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/jscomp/FunctionInjector.java b/src/com/google/javascript/jscomp/FunctionInjector.java\nindex accf4c5..c3fc14b 100644\n--- a/src/com/google/javascript/jscomp/FunctionInjector.java\n+++ b/src/com/google/javascript/jscomp/FunctionInjector.java\n@@ -694,15 +694,6 @@\n \n     Node block \u003d fnNode.getLastChild();\n \n-    boolean hasSideEffects \u003d false;  // empty function case\n-    if (block.hasChildren()) {\n-      Preconditions.checkState(block.hasOneChild());\n-      Node stmt \u003d block.getFirstChild();\n-      if (stmt.isReturn()) {\n-        hasSideEffects \u003d NodeUtil.mayHaveSideEffects(\n-            stmt.getFirstChild(), compiler);\n-      }\n-    }\n \n     // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n     Node cArg \u003d callNode.getFirstChild().getNext();\n@@ -729,9 +720,6 @@\n       // For each named parameter check if a mutable argument use more than one.\n       if (fnParam !\u003d null) {\n         if (cArg !\u003d null) {\n-          if (hasSideEffects \u0026\u0026 NodeUtil.canBeSideEffected(cArg)) {\n-            return CanInlineResult.NO;\n-          }\n \n           // Check for arguments that are evaluated more than once.\n           // Note: Unlike block inlining, there it is not possible that a\n",
      "operations": [
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [23700,23731]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [23760,24022]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [25058,25166]",
          "to": ""
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  }
}