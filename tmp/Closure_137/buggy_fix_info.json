{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "data/changesInfo/",
  "properties": {
    "trigger.tests": "com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest::testOnlyInversion3,com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest::testOnlyInversion4,com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest::testArguments,com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest::testMakeLocalNamesUniqueWithContext1,com.google.javascript.jscomp.NormalizeTest::testRemoveDuplicateVarDeclarations2",
    "test.dir": "test",
    "clz.modified": "com.google.javascript.jscomp.MakeDeclaredNamesUnique,com.google.javascript.jscomp.NodeUtil,com.google.javascript.jscomp.Normalize",
    "src.dir": "src"
  },
  "timeoutSecond": 100,
  "proj": "Closure",
  "id": "137",
  "workingDir": "../bugs/Closure_137_tmp",
  "bug_name": "Closure_137",
  "derive": "defects4j",
  "trigger_tests": [
    {
      "test_class": "com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest",
      "test_function": "testOnlyInversion3",
      "assertion_line": "282",
      "exception": "junit.framework.AssertionFailedError",
      "message": "Expected: function x1(){var a$$1;function x2(){var a}function x3(){var a}}\nResult: function x1(){var a;function x2(){var a}function x3(){var a}}"
    },
    {
      "test_class": "com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest",
      "test_function": "testOnlyInversion4",
      "assertion_line": "305",
      "exception": "junit.framework.AssertionFailedError",
      "message": "Expected: function x1(){var a$$1;function x2(){var a;a$$1++}}\nResult: function x1(){var a;function x2(){var a;a++}}"
    },
    {
      "test_class": "com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest",
      "test_function": "testArguments",
      "assertion_line": "82",
      "exception": "junit.framework.AssertionFailedError",
      "message": "Expected: function foo(){var arguments;function bar(){var arguments}}\nResult: function foo(){var arguments;function bar(){var arguments$$1}}"
    },
    {
      "test_class": "com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest",
      "test_function": "testMakeLocalNamesUniqueWithContext1",
      "assertion_line": "112",
      "exception": "junit.framework.AssertionFailedError",
      "message": "Expected: var a;function foo(){var a}\nResult: var a;function foo(){var a$$inline_1}"
    },
    {
      "test_class": "com.google.javascript.jscomp.NormalizeTest",
      "test_function": "testRemoveDuplicateVarDeclarations2",
      "assertion_line": "204",
      "exception": "junit.framework.AssertionFailedError",
      "message": "Expected: var e\u003d1;function f(){try{}catch(e$$2){}var e$$1\u003d2}\nResult: var e\u003d1;function f(){try{}catch(e$$1){}e\u003d2}"
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "com.google.javascript.jscomp.MakeDeclaredNamesUnique\\$InlineRenamer:addDeclaredName:[String name]:void",
            "com.google.javascript.jscomp.MakeDeclaredNamesUnique\\$ContextualRenameInverter:visit:[NodeTraversal t, Node node, Node parent]:void",
            "com.google.javascript.jscomp.MakeDeclaredNamesUnique\\$ContextualRenameInverter:exitScope:[NodeTraversal t]:void",
            "com.google.javascript.jscomp.MakeDeclaredNamesUnique\\$ContextualRenameInverter:addCandidateNameReference:[String name, Node n]:void",
            "com.google.javascript.jscomp.MakeDeclaredNamesUnique\\$ContextualRenameInverter:enterScope:[NodeTraversal t]:void",
            "com.google.javascript.jscomp.MakeDeclaredNamesUnique\\$ContextualRenameInverter:shouldTraverse:[NodeTraversal t, Node n, Node parent]:boolean",
            "com.google.javascript.jscomp.MakeDeclaredNamesUnique\\$ContextualRenameInverter:handleScopeVar:[Var v]:void",
            "com.google.javascript.jscomp.MakeDeclaredNamesUnique\\$ContextualRenamer:addDeclaredName:[String name]:void"
          ],
          "num": 8
        },
        {
          "qualified_names": [
            "com.google.javascript.jscomp.MakeDeclaredNamesUnique\\$ContextualRenameInverter:getOrginalNameInternal:[String name, int index]:String",
            "com.google.javascript.jscomp.MakeDeclaredNamesUnique\\$ContextualRenameInverter:visit:[NodeTraversal t, Node node, Node parent]:void",
            "com.google.javascript.jscomp.MakeDeclaredNamesUnique\\$ContextualRenamer:addDeclaredName:[String name]:void",
            "com.google.javascript.jscomp.MakeDeclaredNamesUnique\\$ContextualRenameInverter:getNameSuffix:[String name, int index]:String"
          ],
          "num": 4
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "26",
            "48",
            "236",
            "237",
            "241",
            "244",
            "247",
            "273",
            "274",
            "275",
            "276",
            "278",
            "279",
            "286",
            "287",
            "291",
            "292",
            "293",
            "294",
            "298",
            "299",
            "303",
            "304",
            "305",
            "306",
            "313",
            "314",
            "315",
            "316",
            "318",
            "319",
            "320",
            "321",
            "324",
            "325",
            "326",
            "327",
            "328",
            "329",
            "330",
            "333",
            "334",
            "335",
            "337",
            "338",
            "339",
            "340",
            "342",
            "343",
            "344",
            "345",
            "348",
            "349",
            "352",
            "354",
            "355",
            "360",
            "361",
            "362",
            "363",
            "364",
            "365",
            "366",
            "367",
            "414",
            "424",
            "425",
            "486"
          ],
          "num": 68
        },
        {
          "qualified_names": [
            "26",
            "47",
            "235",
            "236",
            "244",
            "266",
            "267",
            "268",
            "274",
            "275",
            "276",
            "277",
            "284",
            "285",
            "286",
            "287",
            "288",
            "289",
            "290",
            "291",
            "295",
            "296",
            "297",
            "298",
            "299",
            "300",
            "307",
            "308",
            "309",
            "310",
            "318",
            "319",
            "320",
            "321",
            "322",
            "325",
            "326",
            "327",
            "328",
            "329",
            "330",
            "331",
            "335",
            "402",
            "435",
            "509"
          ],
          "num": 46
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java b/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java\nindex d88520c..51f440c 100644\n--- a/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java\n+++ b/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java\n@@ -23,7 +23,7 @@\n import com.google.common.collect.Maps;\n import com.google.common.collect.Multiset;\n import com.google.common.collect.Sets;\n-import com.google.javascript.jscomp.NodeTraversal.ScopedCallback;\n+import com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback;\n import com.google.javascript.jscomp.Scope.Var;\n import com.google.javascript.rhino.Node;\n import com.google.javascript.rhino.Token;\n@@ -45,7 +45,6 @@\n class MakeDeclaredNamesUnique\n     implements NodeTraversal.ScopedCallback {\n \n-  public static final String ARGUMENTS \u003d \"arguments\";\n   private Deque\u003cRenamer\u003e nameStack \u003d new ArrayDeque\u003cRenamer\u003e();\n   private final Renamer rootRenamer;\n \n@@ -233,18 +232,16 @@\n   /**\n    * Inverts the transformation by {@link ContextualRenamer}, when possible.\n    */\n-  static class ContextualRenameInverter\n-      implements ScopedCallback, CompilerPass {\n+  static class ContextualRenameInverter extends AbstractPostOrderCallback\n+      implements CompilerPass {\n     private final AbstractCompiler compiler;\n \n     // The set of names referenced in the current scope.\n-    private Set\u003cString\u003e referencedNames \u003d ImmutableSet.of();\n \n     // Stack reference sets.\n-    private Deque\u003cSet\u003cString\u003e\u003e referenceStack \u003d new ArrayDeque\u003cSet\u003cString\u003e\u003e();\n \n     // Name are globally unique initially, so we don\u0027t need a per-scope map.\n-    private Map\u003cString, List\u003cNode\u003e\u003e nameMap \u003d Maps.newHashMap();\n+    private Map\u003cVar, String\u003e nameMap \u003d Maps.newHashMap();\n \n     private ContextualRenameInverter(AbstractCompiler compiler) {\n       this.compiler \u003d compiler;\n@@ -266,105 +263,86 @@\n     private boolean containsSeparator(String name) {\n       return name.indexOf(ContextualRenamer.UNIQUE_ID_SEPARATOR) !\u003d -1;\n     }\n+    private static String getOrginalNameInternal(String name, int index) {\n+      return name.substring(0, index);\n+    }\n \n     /**\n      * Prepare a set for the new scope.\n      */\n-    public void enterScope(NodeTraversal t) {\n-      if (t.inGlobalScope()) {\n-        return;\n-      }\n \n-      referenceStack.push(referencedNames);\n-      referencedNames \u003d Sets.newHashSet();\n+    private static String getNameSuffix(String name, int index) {\n+      return name.substring(\n+          index + ContextualRenamer.UNIQUE_ID_SEPARATOR.length(),\n+          name.length());\n     }\n \n     /**\n      * Rename vars for the current scope, and merge any referenced \n      * names into the parent scope reference set.\n      */\n-    public void exitScope(NodeTraversal t) {\n-      if (t.inGlobalScope()) {\n+    @Override\n+    public void visit(NodeTraversal t, Node node, Node parent) {\n+      if (node.getType() \u003d\u003d Token.NAME) {\n+        String oldName \u003d node.getString();\n+        if (containsSeparator(oldName)) {\n+          Scope scope \u003d t.getScope();\n+          Var var \u003d t.getScope().getVar(oldName);\n+          if (var \u003d\u003d null || var.isGlobal()) {\n         return;\n       }\n \n-      for (Iterator\u003cVar\u003e it \u003d t.getScope().getVars(); it.hasNext();) {\n-        Var v \u003d it.next();\n-        handleScopeVar(v);\n-      }\n+          if (nameMap.containsKey(var)) {\n+            node.setString(nameMap.get(var));\n+          } else {\n+            int index \u003d indexOfSeparator(oldName);\n+            String newName \u003d getOrginalNameInternal(oldName, index);\n+            String suffix \u003d getNameSuffix(oldName, index);\n \n       // Merge any names that were referenced but not declared in the current\n       // scope.\n-      Set\u003cString\u003e current \u003d referencedNames;\n-      referencedNames \u003d referenceStack.pop();\n       // If there isn\u0027t anything left in the stack we will be going into the\n       // global scope: don\u0027t try to build a set of referenced names for the\n       // global scope.\n-      if (!referenceStack.isEmpty()) {\n-        referencedNames.addAll(current);\n-      }\n-    }\n+            boolean recurseScopes \u003d false;\n+            if (!suffix.matches(\"\\\\d+\")) {\n+              recurseScopes \u003d true;\n+            }\n \n     /**\n      * For the Var declared in the current scope determine if it is possible\n      * to revert the name to its orginal form without conflicting with other\n      * values.\n      */\n-    void handleScopeVar(Var v) {\n-      String name  \u003d v.getName();\n-      if (containsSeparator(name)) {\n-        String newName \u003d getOrginalName(name);\n         // Check if the new name is valid and if it would cause conflicts.\n-        if (TokenStream.isJSIdentifier(newName) \u0026\u0026\n-            !referencedNames.contains(newName) \u0026\u0026 \n-            !newName.equals(ARGUMENTS)) {\n-          referencedNames.remove(name);\n+            if (var.scope.isDeclared(newName, recurseScopes) ||\n+                !TokenStream.isJSIdentifier(newName)) {\n+              newName \u003d oldName;\n+            } else {\n+              var.scope.declare(newName, var.nameNode, null, null);\n           // Adding a reference to the new name to prevent either the parent\n           // scopes or the current scope renaming another var to this new name.\n-          referencedNames.add(newName);\n-          List\u003cNode\u003e references \u003d nameMap.get(name);\n-          Preconditions.checkState(references !\u003d null);\n-          for (Node n : references) {\n-            Preconditions.checkState(n.getType() \u003d\u003d Token.NAME);\n-            n.setString(newName);\n-          }\n+              Node parentNode \u003d var.getParentNode();\n+              if (parentNode.getType() \u003d\u003d Token.FUNCTION \u0026\u0026\n+                  parentNode \u003d\u003d var.scope.getRootNode()) {\n+                var.getNameNode().setString(newName);\n+              }\n+\n+              node.setString(newName);\n           compiler.reportCodeChange();\n         }\n-        nameMap.remove(name);\n-      }\n-    }\n \n-    @Override\n-    public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n-      return true;\n-    }\n+            nameMap.put(var, newName);\n \n-    @Override\n-    public void visit(NodeTraversal t, Node node, Node parent) {\n-      if (t.inGlobalScope()) {\n-        return;\n       }\n \n-      if (NodeUtil.isReferenceName(node)) {\n-        String name \u003d node.getString();\n         // Add all referenced names to the set so it is possible to check for\n         // conflicts.\n-        referencedNames.add(name);\n         // Store only references to candidate names in the node map.\n-        if (containsSeparator(name)) {\n-          addCandidateNameReference(name, node);\n         }\n       }\n     }\n \n-    private void addCandidateNameReference(String name, Node n) {\n-      List\u003cNode\u003e nodes \u003d nameMap.get(name);\n-      if (null \u003d\u003d nodes) {\n-        nodes \u003d Lists.newLinkedList();\n-        nameMap.put(name, nodes);\n-      }\n-      nodes.add(n);\n-    }\n   }\n \n   /**\n@@ -411,7 +389,6 @@\n      */\n     @Override\n     public void addDeclaredName(String name) {\n-      if (!name.equals(ARGUMENTS)) {\n         if (global) {\n           reserveName(name);\n         } else {\n@@ -421,9 +398,8 @@\n             String newName \u003d null;\n             if (id !\u003d 0) {\n               newName \u003d getUniqueName(name, id);\n-            }\n-            declarations.put(name, newName);\n           }\n+          declarations.put(name, newName);\n         }\n       }\n     }\n@@ -483,7 +459,6 @@\n \n     @Override\n     public void addDeclaredName(String name) {\n-      Preconditions.checkState(!name.equals(ARGUMENTS));\n       if (!declarations.containsKey(name)) {\n         declarations.put(name, getUniqueName(name));\n       }\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "ImportDeclaration [974,1050]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SimpleType [7097,7122]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [8069,8184]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [8190,8435]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ParameterizedType [7378,7394]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [8441,8570]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "InfixExpression [8660,8688]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "MethodInvocation [8660,8674]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "INFIX_EXPRESSION_OPERATOR: \u003d\u003d [8675,8677]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "QualifiedName: Token.NAME [8678,8688]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "METHOD_INVOCATION_RECEIVER [8660,8664]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: getType [8665,8672]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [8787,8814]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [8825,8864]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [8947,10669]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "InfixExpression [8879,8908]"
        },
        {
          "type": "delete-tree",
          "from": "ImportDeclaration [974,1039]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "FieldDeclaration [1688,1739]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [7149,7163]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "FieldDeclaration [7287,7343]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "FieldDeclaration [7378,7452]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ParameterizedType [7543,7566]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [8242,8488]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [8494,9313]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [9319,10457]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [10463,10571]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "METHOD_INVOCATION_RECEIVER [10718,10726]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: isReferenceName [10727,10742]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "METHOD_INVOCATION_ARGUMENTS [10743,10747]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "MethodInvocation [10718,10748]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [10900,10926]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodInvocation [10662,10679]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [11045,11083]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [11113,11352]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "PrefixExpression [12618,12641]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Block [12643,13082]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "IfStatement [12614,13082]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [14666,14716]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/jscomp/NodeUtil.java",
        "src/com/google/javascript/jscomp/NodeUtil.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "com.google.javascript.jscomp.NodeUtil:isReferenceName:[Node n]:boolean"
          ],
          "num": 1
        },
        {
          "qualified_names": [],
          "num": 0
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "1043",
            "1044",
            "1045"
          ],
          "num": 3
        },
        {
          "qualified_names": [
            "1042"
          ],
          "num": 1
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java\nindex 6c3643a..c69d9d1 100644\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n@@ -1040,9 +1040,6 @@\n    * @return Whether the name is a reference to a variable, function or\n    *       function parameter (not a label or a empty anonymous function name).\n    */\n-  static boolean isReferenceName(Node n) {\n-    return isName(n) \u0026\u0026 !n.getString().isEmpty() \u0026\u0026 !isLabelName(n);\n-  }\n \n   /** @return Whether the node is a label name. */\n   static boolean isLabelName(Node n) {\n",
      "operations": [
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [28543,28820]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/jscomp/Normalize.java",
        "src/com/google/javascript/jscomp/Normalize.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "com.google.javascript.jscomp.Normalize:process:[Node externs, Node root]:void"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "com.google.javascript.jscomp.Normalize:process:[Node externs, Node root]:void"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "81",
            "101"
          ],
          "num": 2
        },
        {
          "qualified_names": [
            "82",
            "99"
          ],
          "num": 2
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/jscomp/Normalize.java b/src/com/google/javascript/jscomp/Normalize.java\nindex 993b68d..a8526b5 100644\n--- a/src/com/google/javascript/jscomp/Normalize.java\n+++ b/src/com/google/javascript/jscomp/Normalize.java\n@@ -79,6 +79,7 @@\n   public void process(Node externs, Node root) {\n     NodeTraversal.traverse(compiler, root,\n         new NormalizeStatements(compiler, assertOnChange));\n+    removeDuplicateDeclarations(root);\n     if (MAKE_LOCAL_NAMES_UNIQUE) {\n       MakeDeclaredNamesUnique renamer \u003d new MakeDeclaredNamesUnique();\n       NodeTraversal t \u003d new NodeTraversal(compiler, renamer);\n@@ -98,7 +99,6 @@\n     //   }\n     // otherwise \u0027var e \u003d 1\u0027 would be rewritten as \u0027e \u003d 1\u0027.\n     // TODO(johnlenz): Introduce a seperate scope for catch nodes. \n-    removeDuplicateDeclarations(root);\n     new PropogateConstantAnnotations(compiler, assertOnChange)\n         .process(externs, root);\n   }\n",
      "operations": [
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [
        "com.google.javascript.jscomp.MakeDeclaredNamesUnique\\$ContextualRenameInverter:getNameSuffix:[String name, int index]:String",
        "com.google.javascript.jscomp.MakeDeclaredNamesUnique\\$ContextualRenameInverter:getOrginalNameInternal:[String name, int index]:String"
      ],
      "num": 2
    },
    "delete_functions": {
      "qualified_names": [
        "com.google.javascript.jscomp.MakeDeclaredNamesUnique\\$ContextualRenameInverter:addCandidateNameReference:[String name, Node n]:void",
        "com.google.javascript.jscomp.MakeDeclaredNamesUnique\\$InlineRenamer:addDeclaredName:[String name]:void",
        "com.google.javascript.jscomp.MakeDeclaredNamesUnique\\$ContextualRenameInverter:shouldTraverse:[NodeTraversal t, Node n, Node parent]:boolean",
        "com.google.javascript.jscomp.MakeDeclaredNamesUnique\\$ContextualRenameInverter:enterScope:[NodeTraversal t]:void",
        "com.google.javascript.jscomp.MakeDeclaredNamesUnique\\$ContextualRenameInverter:exitScope:[NodeTraversal t]:void",
        "com.google.javascript.jscomp.NodeUtil:isReferenceName:[Node n]:boolean",
        "com.google.javascript.jscomp.MakeDeclaredNamesUnique\\$ContextualRenameInverter:handleScopeVar:[Var v]:void"
      ],
      "num": 7
    }
  }
}