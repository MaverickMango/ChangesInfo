{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "data/changesInfo/",
  "properties": {
    "trigger.tests": "com.google.javascript.jscomp.ScopedAliasesTest::testNonAliasLocal",
    "test.dir": "test",
    "clz.modified": "com.google.javascript.jscomp.ScopedAliases",
    "src.dir": "src"
  },
  "timeoutSecond": 100,
  "proj": "Closure",
  "id": "24",
  "workingDir": "../bugs/Closure_24_tmp",
  "bug_name": "Closure_24",
  "derive": "defects4j",
  "trigger_tests": [
    {
      "test_class": "com.google.javascript.jscomp.ScopedAliasesTest",
      "test_function": "testNonAliasLocal",
      "assertion_line": "413",
      "exception": "junit.framework.AssertionFailedError",
      "message": "There should be one error.  expected:\u003c1\u003e but was:\u003c0\u003e"
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/jscomp/ScopedAliases.java",
        "src/com/google/javascript/jscomp/ScopedAliases.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "com.google.javascript.jscomp.ScopedAliases\\$Traversal:findAliases:[NodeTraversal t]:void"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "com.google.javascript.jscomp.ScopedAliases\\$Traversal:findAliases:[NodeTraversal t]:void"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "278",
            "279",
            "287",
            "290"
          ],
          "num": 4
        },
        {
          "qualified_names": [
            "278",
            "279",
            "295"
          ],
          "num": 3
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/jscomp/ScopedAliases.java b/src/com/google/javascript/jscomp/ScopedAliases.java\nindex c248002..30d29d0 100644\n--- a/src/com/google/javascript/jscomp/ScopedAliases.java\n+++ b/src/com/google/javascript/jscomp/ScopedAliases.java\n@@ -275,8 +275,8 @@\n         Node n \u003d v.getNode();\n         int type \u003d n.getType();\n         Node parent \u003d n.getParent();\n-        if (parent.isVar() \u0026\u0026\n-            n.hasChildren() \u0026\u0026 n.getFirstChild().isQualifiedName()) {\n+        if (parent.isVar()) {\n+          if (n.hasChildren() \u0026\u0026 n.getFirstChild().isQualifiedName()) {\n           String name \u003d n.getString();\n           Var aliasVar \u003d scope.getVar(name);\n           aliases.put(name, aliasVar);\n@@ -284,16 +284,15 @@\n           String qualifiedName \u003d\n               aliasVar.getInitialValue().getQualifiedName();\n           transformation.addAlias(name, qualifiedName);\n-        } else if (v.isBleedingFunction()) {\n           // Bleeding functions already get a BAD_PARAMETERS error, so just\n           // do nothing.\n-        } else if (parent.getType() \u003d\u003d Token.LP) {\n           // Parameters of the scope function also get a BAD_PARAMETERS\n           // error.\n         } else {\n           // TODO(robbyw): Support using locals for private variables.\n           report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n         }\n+        }\n       }\n     }\n \n",
      "operations": [
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Block [9026,9741]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodInvocation [9010,9024]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodInvocation [9391,9413]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Block [9415,9527]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "IfStatement [9387,9825]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "INFIX_EXPRESSION_OPERATOR: \u003d\u003d [9554,9556]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "QualifiedName: Token.LP [9557,9565]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "InfixExpression [9537,9565]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Block [9567,9670]",
          "to": ""
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  }
}