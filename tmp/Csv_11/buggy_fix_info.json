{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "data/changesInfo/",
  "properties": {
    "trigger.tests": "org.apache.commons.csv.CSVParserTest::testHeaderMissingWithNull",
    "test.dir": "src/test/java",
    "clz.modified": "org.apache.commons.csv.CSVParser",
    "src.dir": "src/main/java"
  },
  "timeoutSecond": 100,
  "proj": "Csv",
  "id": "11",
  "workingDir": "../bugs/Csv_11_tmp",
  "bug_name": "Csv_11",
  "derive": "defects4j",
  "trigger_tests": [
    {
      "test_class": "org.apache.commons.csv.CSVParserTest",
      "test_function": "testHeaderMissingWithNull",
      "assertion_line": "670",
      "exception": "java.lang.NullPointerException",
      "message": ""
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/csv/CSVParser.java",
        "src/main/java/org/apache/commons/csv/CSVParser.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.csv.CSVParser:initializeHeader:[]:Map\u003cString,Integer\u003e"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "org.apache.commons.csv.CSVParser:initializeHeader:[]:Map\u003cString,Integer\u003e"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "384"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "384"
          ],
          "num": 1
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/csv/CSVParser.java b/src/main/java/org/apache/commons/csv/CSVParser.java\nindex b7ca3fa..b6867a4 100644\n--- a/src/main/java/org/apache/commons/csv/CSVParser.java\n+++ b/src/main/java/org/apache/commons/csv/CSVParser.java\n@@ -381,7 +381,7 @@\n                 for (int i \u003d 0; i \u003c headerRecord.length; i++) {\n                     final String header \u003d headerRecord[i];\n                     final boolean containsHeader \u003d hdrMap.containsKey(header);\n-                    final boolean emptyHeader \u003d header \u003d\u003d null || header.trim().isEmpty();\n+                    final boolean emptyHeader \u003d header.trim().isEmpty();\n                     if (containsHeader \u0026\u0026 (!emptyHeader || (emptyHeader \u0026\u0026 !this.format.getIgnoreEmptyHeaders()))) {\n                         throw new IllegalArgumentException(\"The header contains a duplicate name: \\\"\" + header +\n                                 \"\\\" in \" + Arrays.toString(headerRecord));\n",
      "operations": [
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "InfixExpression [13568,13582]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "INFIX_EXPRESSION_OPERATOR: || [13583,13585]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "InfixExpression [13568,13609]",
          "to": ""
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  }
}