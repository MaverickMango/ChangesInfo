{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "data/changesInfo/",
  "properties": {
    "trigger.tests": "com.fasterxml.jackson.core.json.async.AsyncNumberCoercionTest::testToLongFailing,com.fasterxml.jackson.core.json.async.AsyncNumberCoercionTest::testToIntFailing,com.fasterxml.jackson.core.read.NumberCoercionTest::testToLongFailing,com.fasterxml.jackson.core.read.NumberCoercionTest::testToIntFailing,com.fasterxml.jackson.core.read.NumberOverflowTest::testMaliciousLongOverflow,com.fasterxml.jackson.core.read.NumberOverflowTest::testSimpleLongOverflow,com.fasterxml.jackson.core.read.NumberOverflowTest::testMaliciousIntOverflow,com.fasterxml.jackson.core.read.NumberParsingTest::testSimpleLong",
    "test.dir": "src/test/java",
    "clz.modified": "com.fasterxml.jackson.core.base.ParserBase,com.fasterxml.jackson.core.base.ParserMinimalBase",
    "src.dir": "src/main/java"
  },
  "timeoutSecond": 100,
  "proj": "JacksonCore",
  "id": "24",
  "workingDir": "../bugs/JacksonCore_24_tmp",
  "bug_name": "JacksonCore_24",
  "derive": "defects4j",
  "trigger_tests": [
    {
      "test_class": "com.fasterxml.jackson.core.json.async.AsyncNumberCoercionTest",
      "test_function": "testToLongFailing",
      "assertion_line": "189",
      "exception": "com.fasterxml.jackson.core.JsonParseException",
      "message": "Numeric value (9223372036854775817) out of range of long (-9223372036854775808 - 9223372036854775807)"
    },
    {
      "test_class": "com.fasterxml.jackson.core.json.async.AsyncNumberCoercionTest",
      "test_function": "testToIntFailing",
      "assertion_line": "73",
      "exception": "com.fasterxml.jackson.core.JsonParseException",
      "message": "Numeric value (2147483648) out of range of int"
    },
    {
      "test_class": "com.fasterxml.jackson.core.read.NumberCoercionTest",
      "test_function": "testToLongFailing",
      "assertion_line": "189",
      "exception": "com.fasterxml.jackson.core.JsonParseException",
      "message": "Numeric value (9223372036854775817) out of range of long (-9223372036854775808 - 9223372036854775807)"
    },
    {
      "test_class": "com.fasterxml.jackson.core.read.NumberCoercionTest",
      "test_function": "testToIntFailing",
      "assertion_line": "68",
      "exception": "com.fasterxml.jackson.core.JsonParseException",
      "message": "Numeric value (2147483648) out of range of int"
    },
    {
      "test_class": "com.fasterxml.jackson.core.read.NumberOverflowTest",
      "test_function": "testMaliciousLongOverflow",
      "assertion_line": "72",
      "exception": "com.fasterxml.jackson.core.JsonParseException",
      "message": "Numeric value ([Integer with 199999 digits]) out of range of long"
    },
    {
      "test_class": "com.fasterxml.jackson.core.read.NumberOverflowTest",
      "test_function": "testSimpleLongOverflow",
      "assertion_line": "41",
      "exception": "com.fasterxml.jackson.core.JsonParseException",
      "message": "Numeric value (-9223372036854775809) out of range of long"
    },
    {
      "test_class": "com.fasterxml.jackson.core.read.NumberOverflowTest",
      "test_function": "testMaliciousIntOverflow",
      "assertion_line": "92",
      "exception": "com.fasterxml.jackson.core.JsonParseException",
      "message": "Numeric value ([Integer with 199999 digits]) out of range of int"
    },
    {
      "test_class": "com.fasterxml.jackson.core.read.NumberParsingTest",
      "test_function": "testSimpleLong",
      "assertion_line": "128",
      "exception": "com.fasterxml.jackson.core.JsonParseException",
      "message": "Numeric value (12345678907) out of range of int"
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/com/fasterxml/jackson/core/base/ParserBase.java",
        "src/main/java/com/fasterxml/jackson/core/base/ParserBase.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "com.fasterxml.jackson.core.base.ParserBase:_reportTooLongIntegral:[int expType, String rawNum]:void",
            "com.fasterxml.jackson.core.base.ParserBase:convertNumberToInt:[]:void"
          ],
          "num": 2
        },
        {
          "qualified_names": [
            "com.fasterxml.jackson.core.base.ParserBase:convertNumberToInt:[]:void",
            "com.fasterxml.jackson.core.base.ParserBase:_reportTooLongIntegral:[int expType, String rawNum]:void"
          ],
          "num": 2
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "869",
            "870",
            "871",
            "872",
            "873",
            "889"
          ],
          "num": 6
        },
        {
          "qualified_names": [
            "869",
            "870",
            "871",
            "887"
          ],
          "num": 4
        }
      ],
      "diff": "diff --git a/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java b/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java\nindex 981e796..1e52b9e 100644\n--- a/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java\n+++ b/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java\n@@ -866,11 +866,9 @@\n     // @since 2.9.8\n     protected void _reportTooLongIntegral(int expType, String rawNum) throws IOException\n     {\n-        if (expType \u003d\u003d NR_INT) {\n-            reportOverflowInt(rawNum);\n-        } else {\n-            reportOverflowLong(rawNum);\n-        }\n+        final String numDesc \u003d _longIntegerDesc(rawNum);\n+        _reportError(\"Numeric value (%s) out of range of %s\", numDesc,\n+                (expType \u003d\u003d NR_LONG) ? \"long\" : \"int\");\n     }\n \n     /*\n@@ -886,7 +884,7 @@\n             // Let\u0027s verify it\u0027s lossless conversion by simple roundtrip\n             int result \u003d (int) _numberLong;\n             if (((long) result) !\u003d _numberLong) {\n-                reportOverflowInt(getText(), currentToken());\n+                _reportError(\"Numeric value (\"+getText()+\") out of range of int\");\n             }\n             _numberInt \u003d result;\n         } else if ((_numTypesValid \u0026 NR_BIGINT) !\u003d 0) {\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [28859,28907]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [28916,29034]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [29572,29638]"
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [28859,28989]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [29527,29572]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java",
        "src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "com.fasterxml.jackson.core.base.ParserMinimalBase:reportOverflowLong:[String numDesc, JsonToken inputType]:void",
            "com.fasterxml.jackson.core.base.ParserMinimalBase:reportOverflowInt:[String numDesc, JsonToken inputType]:void",
            "com.fasterxml.jackson.core.base.ParserMinimalBase:reportOverflowLong:[String numDesc]:void",
            "com.fasterxml.jackson.core.base.ParserMinimalBase:reportOverflowInt:[String numDesc]:void"
          ],
          "num": 4
        },
        {
          "qualified_names": [
            "com.fasterxml.jackson.core.base.ParserMinimalBase:reportOverflowLong:[String numDesc]:void",
            "com.fasterxml.jackson.core.base.ParserMinimalBase:reportOverflowInt:[String numDesc]:void"
          ],
          "num": 2
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "565",
            "569",
            "570",
            "571",
            "572",
            "573",
            "586",
            "590",
            "591",
            "592",
            "593",
            "594"
          ],
          "num": 12
        },
        {
          "qualified_names": [
            "565",
            "566",
            "582",
            "583"
          ],
          "num": 4
        }
      ],
      "diff": "diff --git a/src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java b/src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java\nindex fe9a047..c83ade9 100644\n--- a/src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java\n+++ b/src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java\n@@ -562,15 +562,11 @@\n \n     // @since 2.10\n     protected void reportOverflowInt(String numDesc) throws IOException {\n-        reportOverflowInt(numDesc, JsonToken.VALUE_NUMBER_INT);\n+        _reportError(String.format(\"Numeric value (%s) out of range of int (%d - %s)\",\n+                _longIntegerDesc(numDesc), Integer.MIN_VALUE, Integer.MAX_VALUE));\n     }\n \n     // @since 2.10\n-    protected void reportOverflowInt(String numDesc, JsonToken inputType) throws IOException {\n-        _reportInputCoercion(String.format(\"Numeric value (%s) out of range of int (%d - %s)\",\n-                _longIntegerDesc(numDesc), Integer.MIN_VALUE, Integer.MAX_VALUE),\n-                inputType, Integer.TYPE);\n-    }\n \n     /**\n      * Method called to throw an exception for integral (not floating point) input\n@@ -583,15 +579,11 @@\n \n     // @since 2.10\n     protected void reportOverflowLong(String numDesc) throws IOException {\n-        reportOverflowLong(numDesc, JsonToken.VALUE_NUMBER_INT);\n+        _reportError(String.format(\"Numeric value (%s) out of range of long (%d - %s)\",\n+                _longIntegerDesc(numDesc), Long.MIN_VALUE, Long.MAX_VALUE));\n     }\n \n     // @since 2.10\n-    protected void reportOverflowLong(String numDesc, JsonToken inputType) throws IOException {\n-        _reportInputCoercion(String.format(\"Numeric value (%s) out of range of long (%d - %s)\",\n-                _longIntegerDesc(numDesc), Long.MIN_VALUE, Long.MAX_VALUE),\n-                inputType, Long.TYPE);\n-    }\n \n     /**\n      * @since 2.10\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [19068,19229]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [19724,19880]"
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [19068,19123]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [19154,19469]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [19938,19994]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [20025,20333]",
          "to": ""
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [
        "com.fasterxml.jackson.core.base.ParserMinimalBase:reportOverflowLong:[String numDesc, JsonToken inputType]:void",
        "com.fasterxml.jackson.core.base.ParserMinimalBase:reportOverflowInt:[String numDesc, JsonToken inputType]:void"
      ],
      "num": 2
    }
  }
}