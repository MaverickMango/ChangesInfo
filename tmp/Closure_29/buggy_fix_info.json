{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "data/changesInfo/",
  "properties": {
    "trigger.tests": "com.google.javascript.jscomp.InlineObjectLiteralsTest::testObject10,com.google.javascript.jscomp.InlineObjectLiteralsTest::testObject12,com.google.javascript.jscomp.InlineObjectLiteralsTest::testObject22,com.google.javascript.jscomp.InlineObjectLiteralsTest::testIssue724,com.google.javascript.jscomp.IntegrationTest::testIssue724",
    "test.dir": "test",
    "clz.modified": "com.google.javascript.jscomp.InlineObjectLiterals",
    "src.dir": "src"
  },
  "timeoutSecond": 100,
  "proj": "Closure",
  "id": "29",
  "workingDir": "../bugs/Closure_29_tmp",
  "bug_name": "Closure_29",
  "derive": "defects4j",
  "trigger_tests": [
    {
      "test_class": "com.google.javascript.jscomp.InlineObjectLiteralsTest",
      "test_function": "testObject10",
      "assertion_line": "174",
      "exception": "junit.framework.AssertionFailedError",
      "message": "Expected: function local(){var x\u003d{};var b\u003df();x\u003d{a:a,b:b};if(x.a)g(x.b)+x.c}\nResult: function local(){var JSCompiler_object_inline_a_0;var JSCompiler_object_inline_b_1;var JSCompiler_object_inline_c_2;var b\u003df();JSCompiler_object_inline_a_0\u003da,JSCompiler_object_inline_b_1\u003db,JSCompiler_object_inline_c_2\u003dvoid 0,true;if(JSCompiler_object_inline_a_0)g(JSCompiler_object_inline_b_1)+JSCompiler_object_inline_c_2}"
    },
    {
      "test_class": "com.google.javascript.jscomp.InlineObjectLiteralsTest",
      "test_function": "testObject12",
      "assertion_line": "355",
      "exception": "junit.framework.AssertionFailedError",
      "message": "Expected: function local(){var a;a\u003d{x:1,y:2};f(a.x,a.y2)}\nResult: function local(){var JSCompiler_object_inline_x_0;var JSCompiler_object_inline_y_1;var JSCompiler_object_inline_y2_2;JSCompiler_object_inline_x_0\u003d1,JSCompiler_object_inline_y_1\u003d2,JSCompiler_object_inline_y2_2\u003dvoid 0,true;f(JSCompiler_object_inline_x_0,JSCompiler_object_inline_y2_2)}"
    },
    {
      "test_class": "com.google.javascript.jscomp.InlineObjectLiteralsTest",
      "test_function": "testObject22",
      "assertion_line": "355",
      "exception": "junit.framework.AssertionFailedError",
      "message": "Expected: function local(){var a;for(;1;){f(a.x,a.y);a\u003d{x:1,y:1}}}\nResult: function local(){var JSCompiler_object_inline_x_0;var JSCompiler_object_inline_y_1;for(;1;){f(JSCompiler_object_inline_x_0,JSCompiler_object_inline_y_1);JSCompiler_object_inline_x_0\u003d1,JSCompiler_object_inline_y_1\u003d1,true}}"
    },
    {
      "test_class": "com.google.javascript.jscomp.InlineObjectLiteralsTest",
      "test_function": "testIssue724",
      "assertion_line": "355",
      "exception": "junit.framework.AssertionFailedError",
      "message": "Expected: function local(){var getType;getType\u003d{};return functionToCheck\u0026\u0026getType.toString.apply(functionToCheck)\u003d\u003d\u003d\"[object Function]\"}\nResult: function local(){var JSCompiler_object_inline_toString_0;JSCompiler_object_inline_toString_0\u003dvoid 0,true;return functionToCheck\u0026\u0026JSCompiler_object_inline_toString_0.apply(functionToCheck)\u003d\u003d\u003d\"[object Function]\"}"
    },
    {
      "test_class": "com.google.javascript.jscomp.IntegrationTest",
      "test_function": "testIssue724",
      "assertion_line": "1687",
      "exception": "junit.framework.AssertionFailedError",
      "message": "Expected: isFunction\u003dfunction(a){var b\u003d{};return a\u0026\u0026\"[object Function]\"\u003d\u003d\u003db.b.a(a)}\nResult: isFunction\u003dfunction(a){return a\u0026\u0026\"[object Function]\"\u003d\u003d\u003d(void 0).a(a)}"
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/jscomp/InlineObjectLiterals.java",
        "src/com/google/javascript/jscomp/InlineObjectLiterals.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "com.google.javascript.jscomp.InlineObjectLiterals\\$InliningBehavior:isInlinableObject:[List\u003cReference\u003e refs]:boolean"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "com.google.javascript.jscomp.InlineObjectLiterals\\$InliningBehavior:isInlinableObject:[List\u003cReference\u003e refs]:boolean"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "157",
            "182",
            "183",
            "184",
            "185",
            "186",
            "187",
            "188",
            "189",
            "225"
          ],
          "num": 10
        },
        {
          "qualified_names": [
            "156",
            "182",
            "233"
          ],
          "num": 3
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/jscomp/InlineObjectLiterals.java b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\nindex 8c3159d..9f5c607 100644\n--- a/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n+++ b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n@@ -154,7 +154,6 @@\n      */\n     private boolean isInlinableObject(List\u003cReference\u003e refs) {\n       boolean ret \u003d false;\n-      Set\u003cString\u003e validProperties \u003d Sets.newHashSet();\n       for (Reference ref : refs) {\n         Node name \u003d ref.getNode();\n         Node parent \u003d ref.getParent();\n@@ -179,14 +178,6 @@\n           // We short-circuit this problem by bailing out if we see a reference\n           // to a property that isn\u0027t defined on the object literal. This\n           // isn\u0027t a perfect algorithm, but it should catch most cases.\n-          String propName \u003d parent.getLastChild().getString();\n-          if (!validProperties.contains(propName)) {\n-            if (NodeUtil.isVarOrSimpleAssignLhs(parent, gramps)) {\n-              validProperties.add(propName);\n-            } else {\n-              return false;\n-            }\n-          }\n           continue;\n         }\n \n@@ -222,7 +213,6 @@\n             return false;\n           }\n \n-          validProperties.add(child.getString());\n \n           Node childVal \u003d child.getFirstChild();\n           // Check if childVal is the parent of any of the passed in\n",
      "operations": [
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [5476,5524]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [6660,6712]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [6723,6952]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [8037,8076]",
          "to": ""
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  }
}