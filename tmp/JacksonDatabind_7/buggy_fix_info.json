{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "data/changesInfo/",
  "properties": {
    "trigger.tests": "com.fasterxml.jackson.databind.creators.TestCreatorsDelegating::testDelegateWithTokenBuffer",
    "test.dir": "src/test/java",
    "clz.modified": "com.fasterxml.jackson.databind.util.TokenBuffer",
    "src.dir": "src/main/java"
  },
  "timeoutSecond": 100,
  "proj": "JacksonDatabind",
  "id": "7",
  "workingDir": "../bugs/JacksonDatabind_7_tmp",
  "bug_name": "JacksonDatabind_7",
  "derive": "defects4j",
  "trigger_tests": [
    {
      "test_class": "com.fasterxml.jackson.databind.creators.TestCreatorsDelegating",
      "test_function": "testDelegateWithTokenBuffer",
      "assertion_line": "132",
      "exception": "junit.framework.AssertionFailedError",
      "message": "Expected token START_OBJECT, current token FIELD_NAME"
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/com/fasterxml/jackson/databind/util/TokenBuffer.java",
        "src/main/java/com/fasterxml/jackson/databind/util/TokenBuffer.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "com.fasterxml.jackson.databind.util.TokenBuffer:deserialize:[JsonParser jp, DeserializationContext ctxt]:TokenBuffer"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "com.fasterxml.jackson.databind.util.TokenBuffer:deserialize:[JsonParser jp, DeserializationContext ctxt]:TokenBuffer"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "405",
            "407",
            "408",
            "413",
            "414",
            "415",
            "416",
            "417",
            "418",
            "419",
            "420",
            "421"
          ],
          "num": 12
        },
        {
          "qualified_names": [
            "404"
          ],
          "num": 1
        }
      ],
      "diff": "diff --git a/src/main/java/com/fasterxml/jackson/databind/util/TokenBuffer.java b/src/main/java/com/fasterxml/jackson/databind/util/TokenBuffer.java\nindex 58d3e08..21a6b28 100644\n--- a/src/main/java/com/fasterxml/jackson/databind/util/TokenBuffer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/util/TokenBuffer.java\n@@ -402,23 +402,11 @@\n      */\n     public TokenBuffer deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException\n     {\n-        if (jp.getCurrentTokenId() !\u003d JsonToken.FIELD_NAME.id()) {\n             copyCurrentStructure(jp);\n-            return this;\n-        }\n         /* 28-Oct-2014, tatu: As per #592, need to support a special case of starting from\n          *    FIELD_NAME, which is taken to mean that we are missing START_OBJECT, but need\n          *    to assume one did exist.\n          */\n-        JsonToken t;\n-        writeStartObject();\n-        do {\n-            copyCurrentStructure(jp);\n-        } while ((t \u003d jp.nextToken()) \u003d\u003d JsonToken.FIELD_NAME);\n-        if (t !\u003d JsonToken.END_OBJECT) {\n-            throw ctxt.mappingException(\"Expected END_OBJECT after copying contents of a JsonParser into TokenBuffer, got \"+t);\n-        }\n-        writeEndObject();\n         return this;\n     }\n     \n",
      "operations": [
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "InfixExpression [13311,13362]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Block [13364,13438]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "IfStatement [13307,13438]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [13681,13693]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [13702,13721]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "DoStatement [13730,13836]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [13845,14015]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [14024,14041]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ReturnStatement [14050,14062]",
          "to": ""
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  }
}