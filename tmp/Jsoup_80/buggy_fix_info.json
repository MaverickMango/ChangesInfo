{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "data/changesInfo/",
  "properties": {
    "trigger.tests": "org.jsoup.parser.XmlTreeBuilderTest::handlesDodgyXmlDecl",
    "test.dir": "src/test/java",
    "clz.modified": "org.jsoup.parser.XmlTreeBuilder",
    "src.dir": "src/main/java"
  },
  "timeoutSecond": 100,
  "proj": "Jsoup",
  "id": "80",
  "workingDir": "../bugs/Jsoup_80_tmp",
  "bug_name": "Jsoup_80",
  "derive": "defects4j",
  "trigger_tests": [
    {
      "test_class": "org.jsoup.parser.XmlTreeBuilderTest",
      "test_function": "handlesDodgyXmlDecl",
      "assertion_line": "227",
      "exception": "java.lang.IndexOutOfBoundsException",
      "message": "Index: 0, Size: 0"
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/jsoup/parser/XmlTreeBuilder.java",
        "src/main/java/org/jsoup/parser/XmlTreeBuilder.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.jsoup.parser.XmlTreeBuilder:insert:[Token.Comment commentToken]:void"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "org.jsoup.parser.XmlTreeBuilder:insert:[Token.Comment commentToken]:void"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "91",
            "95"
          ],
          "num": 2
        },
        {
          "qualified_names": [
            "90"
          ],
          "num": 1
        }
      ],
      "diff": "diff --git a/src/main/java/org/jsoup/parser/XmlTreeBuilder.java b/src/main/java/org/jsoup/parser/XmlTreeBuilder.java\nindex aec5ba7..75374e4 100644\n--- a/src/main/java/org/jsoup/parser/XmlTreeBuilder.java\n+++ b/src/main/java/org/jsoup/parser/XmlTreeBuilder.java\n@@ -88,11 +88,9 @@\n             String data \u003d comment.getData();\n             if (data.length() \u003e 1 \u0026\u0026 (data.startsWith(\"!\") || data.startsWith(\"?\"))) {\n                 Document doc \u003d Jsoup.parse(\"\u003c\" + data.substring(1, data.length() -1) + \"\u003e\", baseUri, Parser.xmlParser());\n-                if (doc.childNodeSize() \u003e 0) {\n                     Element el \u003d doc.child(0);\n                     insert \u003d new XmlDeclaration(settings.normalizeTag(el.tagName()), data.startsWith(\"!\"));\n                     insert.attributes().addAll(el.attributes());\n-                } // else, we couldn\u0027t parse it as a decl, so leave as a comment\n             }\n         }\n         insertNode(insert);\n",
      "operations": [
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "InfixExpression [3463,3486]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Block [3488,3727]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "IfStatement [3459,3727]",
          "to": ""
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  }
}