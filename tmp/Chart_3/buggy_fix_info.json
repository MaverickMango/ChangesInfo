{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "data/changesInfo/",
  "properties": {
    "trigger.tests": "org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3",
    "test.dir": "tests",
    "clz.modified": "org.jfree.data.time.TimeSeries",
    "src.dir": "source"
  },
  "timeoutSecond": 100,
  "proj": "Chart",
  "id": "3",
  "workingDir": "../bugs/Chart_3_tmp",
  "bug_name": "Chart_3",
  "derive": "defects4j",
  "trigger_tests": [
    {
      "test_class": "org.jfree.data.time.junit.TimeSeriesTests",
      "test_function": "testCreateCopy3",
      "assertion_line": "607",
      "exception": "junit.framework.AssertionFailedError",
      "message": "expected:\u003c101.0\u003e but was:\u003c102.0\u003e"
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "source/org/jfree/data/time/TimeSeries.java",
        "source/org/jfree/data/time/TimeSeries.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.jfree.data.time.TimeSeries:createCopy:[int start, int end]:TimeSeries"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "org.jfree.data.time.TimeSeries:createCopy:[int start, int end]:TimeSeries"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "1057",
            "1058"
          ],
          "num": 2
        },
        {
          "qualified_names": [
            "1056"
          ],
          "num": 1
        }
      ],
      "diff": "diff --git a/source/org/jfree/data/time/TimeSeries.java b/source/org/jfree/data/time/TimeSeries.java\nindex 72bb2ea..795d791 100644\n--- a/source/org/jfree/data/time/TimeSeries.java\n+++ b/source/org/jfree/data/time/TimeSeries.java\n@@ -1054,8 +1054,6 @@\n             throw new IllegalArgumentException(\"Requires start \u003c\u003d end.\");\r\n         }\r\n         TimeSeries copy \u003d (TimeSeries) super.clone();\r\n-        copy.minY \u003d Double.NaN;\r\n-        copy.maxY \u003d Double.NaN;\r\n         copy.data \u003d new java.util.ArrayList();\r\n         if (this.data.size() \u003e 0) {\r\n             for (int index \u003d start; index \u003c\u003d end; index++) {\r\n",
      "operations": [
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [38385,38408]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [38418,38441]",
          "to": ""
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  }
}