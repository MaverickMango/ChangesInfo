{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "data/changesInfo/",
  "properties": {
    "trigger.tests": "org.apache.commons.codec.binary.Base64InputStreamTest::testCodec101",
    "test.dir": "src/test",
    "clz.modified": "org.apache.commons.codec.binary.Base64InputStream",
    "src.dir": "src/java"
  },
  "timeoutSecond": 100,
  "proj": "Codec",
  "id": "6",
  "workingDir": "../bugs/Codec_6_tmp",
  "bug_name": "Codec_6",
  "derive": "defects4j",
  "trigger_tests": [
    {
      "test_class": "org.apache.commons.codec.binary.Base64InputStreamTest",
      "test_function": "testCodec101",
      "assertion_line": "61",
      "exception": "junit.framework.AssertionFailedError",
      "message": "Codec101: First read successful [c\u003d0]"
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/codec/binary/Base64InputStream.java",
        "src/java/org/apache/commons/codec/binary/Base64InputStream.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.codec.binary.Base64InputStream:read:[byte b[], int offset, int len]:int"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "org.apache.commons.codec.binary.Base64InputStream:read:[byte b[], int offset, int len]:int"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "148",
            "165",
            "180",
            "181",
            "182"
          ],
          "num": 5
        },
        {
          "qualified_names": [
            "147",
            "165",
            "178"
          ],
          "num": 3
        }
      ],
      "diff": "diff --git a/src/java/org/apache/commons/codec/binary/Base64InputStream.java b/src/java/org/apache/commons/codec/binary/Base64InputStream.java\nindex 479638b..583a584 100644\n--- a/src/java/org/apache/commons/codec/binary/Base64InputStream.java\n+++ b/src/java/org/apache/commons/codec/binary/Base64InputStream.java\n@@ -145,7 +145,6 @@\n         } else if (len \u003d\u003d 0) {\n             return 0;\n         } else {\n-            int readLen \u003d 0;\n             /*\n              Rationale for while-loop on (readLen \u003d\u003d 0):\n              -----\n@@ -162,7 +161,6 @@\n              -----\n              This is a fix for CODEC-101\n             */\n-            while (readLen \u003d\u003d 0) {\n                 if (!base64.hasData()) {\n                     byte[] buf \u003d new byte[doEncode ? 4096 : 8192];\n                     int c \u003d in.read(buf);\n@@ -177,9 +175,7 @@\n                         base64.decode(buf, 0, c);\n                     }\n                 }\n-                readLen \u003d base64.readResults(b, offset, len);\n-            }\n-            return readLen;\n+            return base64.readResults(b, offset, len);\n         }\n     }\n \n",
      "operations": [
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "ReturnStatement [7233,7275]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [5819,5835]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "InfixExpression [6664,6676]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: readLen [7301,7308]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "ASSIGNMENT_OPERATOR: \u003d [7309,7310]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Assignment [7301,7345]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "ExpressionStatement [7301,7346]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Block [6678,7360]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "WhileStatement [6657,7360]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ReturnStatement [7373,7388]",
          "to": ""
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  }
}