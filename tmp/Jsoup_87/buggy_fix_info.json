{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "data/changesInfo/",
  "properties": {
    "trigger.tests": "org.jsoup.parser.HtmlParserTest::preservedCaseLinksCantNest",
    "test.dir": "src/test/java",
    "clz.modified": "org.jsoup.nodes.Element,org.jsoup.parser.HtmlTreeBuilder,org.jsoup.parser.HtmlTreeBuilderState,org.jsoup.parser.Tag",
    "src.dir": "src/main/java"
  },
  "timeoutSecond": 100,
  "proj": "Jsoup",
  "id": "87",
  "workingDir": "../bugs/Jsoup_87_tmp",
  "bug_name": "Jsoup_87",
  "derive": "defects4j",
  "trigger_tests": [
    {
      "test_class": "org.jsoup.parser.HtmlParserTest",
      "test_function": "preservedCaseLinksCantNest",
      "assertion_line": "1135",
      "exception": "junit.framework.AssertionFailedError",
      "message": "expected:\u003c\u003cA\u003e ONE \u003c[/A\u003e \u003cA\u003e Two] \u003c/A\u003e\u003e but was:\u003c\u003cA\u003e ONE \u003c[A\u003e Two \u003c/A\u003e] \u003c/A\u003e\u003e"
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/jsoup/nodes/Element.java",
        "src/main/java/org/jsoup/nodes/Element.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.jsoup.nodes.Element:normalName:[]:String"
          ],
          "num": 1
        },
        {
          "qualified_names": [],
          "num": 0
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "140",
            "141",
            "142"
          ],
          "num": 3
        },
        {
          "qualified_names": [
            "139"
          ],
          "num": 1
        }
      ],
      "diff": "diff --git a/src/main/java/org/jsoup/nodes/Element.java b/src/main/java/org/jsoup/nodes/Element.java\nindex efbfced..9652120 100644\n--- a/src/main/java/org/jsoup/nodes/Element.java\n+++ b/src/main/java/org/jsoup/nodes/Element.java\n@@ -137,9 +137,6 @@\n      * of the tag case preserving setting of the parser.\n      * @return\n      */\n-    public String normalName() {\n-        return tag.normalName();\n-    }\n \n     /**\n      * Change the tag of this element. For example, convert a {@code \u003cspan\u003e} to a {@code \u003cdiv\u003e} with\n",
      "operations": [
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [3784,4059]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/jsoup/parser/HtmlTreeBuilder.java",
        "src/main/java/org/jsoup/parser/HtmlTreeBuilder.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.jsoup.parser.HtmlTreeBuilder:getFromStack:[String elName]:Element",
            "org.jsoup.parser.HtmlTreeBuilder:getActiveFormattingElement:[String nodeName]:Element",
            "org.jsoup.parser.HtmlTreeBuilder:popStackToClose:[String elName]:void",
            "org.jsoup.parser.HtmlTreeBuilder:generateImpliedEndTags:[String excludeTag]:void",
            "org.jsoup.parser.HtmlTreeBuilder:resetInsertionMode:[]:void",
            "org.jsoup.parser.HtmlTreeBuilder:popStackToClose:[String... elNames]:void",
            "org.jsoup.parser.HtmlTreeBuilder:isSameFormattingElement:[Element a, Element b]:boolean",
            "org.jsoup.parser.HtmlTreeBuilder:isSpecial:[Element el]:boolean",
            "org.jsoup.parser.HtmlTreeBuilder:reconstructFormattingElements:[]:void",
            "org.jsoup.parser.HtmlTreeBuilder:inSelectScope:[String targetName]:boolean",
            "org.jsoup.parser.HtmlTreeBuilder:inSpecificScope:[String[] targetNames, String[] baseTypes, String[] extraTypes]:boolean",
            "org.jsoup.parser.HtmlTreeBuilder:popStackToBefore:[String elName]:void",
            "org.jsoup.parser.HtmlTreeBuilder:clearStackToContext:[String... nodeNames]:void"
          ],
          "num": 13
        },
        {
          "qualified_names": [
            "org.jsoup.parser.HtmlTreeBuilder:clearStackToContext:[String... nodeNames]:void",
            "org.jsoup.parser.HtmlTreeBuilder:generateImpliedEndTags:[String excludeTag]:void",
            "org.jsoup.parser.HtmlTreeBuilder:resetInsertionMode:[]:void",
            "org.jsoup.parser.HtmlTreeBuilder:getFromStack:[String elName]:Element",
            "org.jsoup.parser.HtmlTreeBuilder:inSpecificScope:[String[] targetNames, String[] baseTypes, String[] extraTypes]:boolean",
            "org.jsoup.parser.HtmlTreeBuilder:reconstructFormattingElements:[]:void",
            "org.jsoup.parser.HtmlTreeBuilder:isSameFormattingElement:[Element a, Element b]:boolean",
            "org.jsoup.parser.HtmlTreeBuilder:popStackToClose:[String elName]:void",
            "org.jsoup.parser.HtmlTreeBuilder:popStackToClose:[String... elNames]:void",
            "org.jsoup.parser.HtmlTreeBuilder:getActiveFormattingElement:[String nodeName]:Element",
            "org.jsoup.parser.HtmlTreeBuilder:popStackToBefore:[String elName]:void",
            "org.jsoup.parser.HtmlTreeBuilder:isSpecial:[Element el]:boolean",
            "org.jsoup.parser.HtmlTreeBuilder:inSelectScope:[String targetName]:boolean"
          ],
          "num": 13
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "315",
            "337",
            "347",
            "355",
            "378",
            "420",
            "476",
            "517",
            "569",
            "570",
            "581",
            "618",
            "649",
            "689"
          ],
          "num": 14
        },
        {
          "qualified_names": [
            "315",
            "337",
            "347",
            "355",
            "378",
            "420",
            "476",
            "517",
            "569",
            "570",
            "581",
            "618",
            "649",
            "689"
          ],
          "num": 14
        }
      ],
      "diff": "diff --git a/src/main/java/org/jsoup/parser/HtmlTreeBuilder.java b/src/main/java/org/jsoup/parser/HtmlTreeBuilder.java\nindex bea598d..1bffec7 100644\n--- a/src/main/java/org/jsoup/parser/HtmlTreeBuilder.java\n+++ b/src/main/java/org/jsoup/parser/HtmlTreeBuilder.java\n@@ -312,7 +312,7 @@\n     Element getFromStack(String elName) {\n         for (int pos \u003d stack.size() -1; pos \u003e\u003d 0; pos--) {\n             Element next \u003d stack.get(pos);\n-            if (next.normalName().equals(elName)) {\n+            if (next.nodeName().equals(elName)) {\n                 return next;\n             }\n         }\n@@ -334,7 +334,7 @@\n         for (int pos \u003d stack.size() -1; pos \u003e\u003d 0; pos--) {\n             Element next \u003d stack.get(pos);\n             stack.remove(pos);\n-            if (next.normalName().equals(elName))\n+            if (next.nodeName().equals(elName))\n                 break;\n         }\n     }\n@@ -344,7 +344,7 @@\n         for (int pos \u003d stack.size() -1; pos \u003e\u003d 0; pos--) {\n             Element next \u003d stack.get(pos);\n             stack.remove(pos);\n-            if (inSorted(next.normalName(), elNames))\n+            if (inSorted(next.nodeName(), elNames))\n                 break;\n         }\n     }\n@@ -352,7 +352,7 @@\n     void popStackToBefore(String elName) {\n         for (int pos \u003d stack.size() -1; pos \u003e\u003d 0; pos--) {\n             Element next \u003d stack.get(pos);\n-            if (next.normalName().equals(elName)) {\n+            if (next.nodeName().equals(elName)) {\n                 break;\n             } else {\n                 stack.remove(pos);\n@@ -375,7 +375,7 @@\n     private void clearStackToContext(String... nodeNames) {\n         for (int pos \u003d stack.size() -1; pos \u003e\u003d 0; pos--) {\n             Element next \u003d stack.get(pos);\n-            if (StringUtil.in(next.normalName(), nodeNames) || next.normalName().equals(\"html\"))\n+            if (StringUtil.in(next.nodeName(), nodeNames) || next.nodeName().equals(\"html\"))\n                 break;\n             else\n                 stack.remove(pos);\n@@ -417,7 +417,7 @@\n                 last \u003d true;\n                 node \u003d contextElement;\n             }\n-            String name \u003d node.normalName();\n+            String name \u003d node.nodeName();\n             if (\"select\".equals(name)) {\n                 transition(HtmlTreeBuilderState.InSelect);\n                 break; // frag\n@@ -473,7 +473,7 @@\n         // don\u0027t walk too far up the tree\n \n         for (int pos \u003d bottom; pos \u003e\u003d top; pos--) {\n-            final String elName \u003d stack.get(pos).normalName();\n+            final String elName \u003d stack.get(pos).nodeName();\n             if (inSorted(elName, targetNames))\n                 return true;\n             if (inSorted(elName, baseTypes))\n@@ -514,7 +514,7 @@\n     boolean inSelectScope(String targetName) {\n         for (int pos \u003d stack.size() -1; pos \u003e\u003d 0; pos--) {\n             Element el \u003d stack.get(pos);\n-            String elName \u003d el.normalName();\n+            String elName \u003d el.nodeName();\n             if (elName.equals(targetName))\n                 return true;\n             if (!inSorted(elName, TagSearchSelectScope)) // all elements except\n@@ -566,8 +566,8 @@\n      process, then the UA must perform the above steps as if that element was not in the above list.\n      */\n     void generateImpliedEndTags(String excludeTag) {\n-        while ((excludeTag !\u003d null \u0026\u0026 !currentElement().normalName().equals(excludeTag)) \u0026\u0026\n-                inSorted(currentElement().normalName(), TagSearchEndTags))\n+        while ((excludeTag !\u003d null \u0026\u0026 !currentElement().nodeName().equals(excludeTag)) \u0026\u0026\n+                inSorted(currentElement().nodeName(), TagSearchEndTags))\n             pop();\n     }\n \n@@ -578,7 +578,7 @@\n     boolean isSpecial(Element el) {\n         // todo: mathml\u0027s mi, mo, mn\n         // todo: svg\u0027s foreigObject, desc, title\n-        String name \u003d el.normalName();\n+        String name \u003d el.nodeName();\n         return inSorted(name, TagSearchSpecial);\n     }\n \n@@ -615,7 +615,7 @@\n \n     private boolean isSameFormattingElement(Element a, Element b) {\n         // same if: same namespace, tag, and attributes. Element.equals only checks tag, might in future check children\n-        return a.normalName().equals(b.normalName()) \u0026\u0026\n+        return a.nodeName().equals(b.nodeName()) \u0026\u0026\n                 // a.namespace().equals(b.namespace()) \u0026\u0026\n                 a.attributes().equals(b.attributes());\n         // todo: namespaces\n@@ -646,7 +646,7 @@\n \n             // 8. create new element from element, 9 insert into current node, onto stack\n             skip \u003d false; // can only skip increment from 4.\n-            Element newEl \u003d insertStartTag(entry.normalName()); // todo: avoid fostering here?\n+            Element newEl \u003d insertStartTag(entry.nodeName());\n             // newEl.namespace(entry.namespace()); // todo: namespaces\n             newEl.attributes().addAll(entry.attributes());\n \n@@ -686,7 +686,7 @@\n             Element next \u003d formattingElements.get(pos);\n             if (next \u003d\u003d null) // scope marker\n                 break;\n-            else if (next.normalName().equals(nodeName))\n+            else if (next.nodeName().equals(nodeName))\n                 return next;\n         }\n         return null;\n",
      "operations": [
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java",
        "src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [],
          "num": 0
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "315",
            "319",
            "339",
            "353",
            "372",
            "398",
            "399",
            "402",
            "531",
            "538",
            "574",
            "598",
            "633",
            "662",
            "675",
            "699",
            "711",
            "721",
            "731",
            "745",
            "768",
            "772",
            "774",
            "887",
            "897",
            "926",
            "954",
            "1007",
            "1018",
            "1089",
            "1173",
            "1240",
            "1244",
            "1246",
            "1269",
            "1271",
            "1277",
            "1296",
            "1383",
            "1388",
            "1393"
          ],
          "num": 41
        },
        {
          "qualified_names": [
            "315",
            "319",
            "339",
            "353",
            "372",
            "398",
            "399",
            "402",
            "531",
            "538",
            "574",
            "598",
            "633",
            "662",
            "675",
            "699",
            "711",
            "721",
            "731",
            "745",
            "768",
            "772",
            "774",
            "887",
            "897",
            "926",
            "954",
            "1007",
            "1018",
            "1089",
            "1173",
            "1240",
            "1244",
            "1246",
            "1269",
            "1271",
            "1277",
            "1296",
            "1383",
            "1388",
            "1393"
          ],
          "num": 41
        }
      ],
      "diff": "diff --git a/src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java b/src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java\nindex a5532c7..b51991f 100644\n--- a/src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java\n+++ b/src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java\n@@ -312,11 +312,11 @@\n                         ArrayList\u003cElement\u003e stack \u003d tb.getStack();\n                         for (int i \u003d stack.size() - 1; i \u003e 0; i--) {\n                             Element el \u003d stack.get(i);\n-                            if (el.normalName().equals(\"li\")) {\n+                            if (el.nodeName().equals(\"li\")) {\n                                 tb.processEndTag(\"li\");\n                                 break;\n                             }\n-                            if (tb.isSpecial(el) \u0026\u0026 !StringUtil.inSorted(el.normalName(), Constants.InBodyStartLiBreakers))\n+                            if (tb.isSpecial(el) \u0026\u0026 !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers))\n                                 break;\n                         }\n                         if (tb.inButtonScope(\"p\")) {\n@@ -336,7 +336,7 @@\n                     } else if (name.equals(\"body\")) {\n                         tb.error(this);\n                         ArrayList\u003cElement\u003e stack \u003d tb.getStack();\n-                        if (stack.size() \u003d\u003d 1 || (stack.size() \u003e 2 \u0026\u0026 !stack.get(1).normalName().equals(\"body\"))) {\n+                        if (stack.size() \u003d\u003d 1 || (stack.size() \u003e 2 \u0026\u0026 !stack.get(1).nodeName().equals(\"body\"))) {\n                             // only in fragment case\n                             return false; // ignore\n                         } else {\n@@ -350,7 +350,7 @@\n                     } else if (name.equals(\"frameset\")) {\n                         tb.error(this);\n                         ArrayList\u003cElement\u003e stack \u003d tb.getStack();\n-                        if (stack.size() \u003d\u003d 1 || (stack.size() \u003e 2 \u0026\u0026 !stack.get(1).normalName().equals(\"body\"))) {\n+                        if (stack.size() \u003d\u003d 1 || (stack.size() \u003e 2 \u0026\u0026 !stack.get(1).nodeName().equals(\"body\"))) {\n                             // only in fragment case\n                             return false; // ignore\n                         } else if (!tb.framesetOk()) {\n@@ -369,7 +369,7 @@\n                         if (tb.inButtonScope(\"p\")) {\n                             tb.processEndTag(\"p\");\n                         }\n-                        if (StringUtil.inSorted(tb.currentElement().normalName(), Constants.Headings)) {\n+                        if (StringUtil.inSorted(tb.currentElement().nodeName(), Constants.Headings)) {\n                             tb.error(this);\n                             tb.pop();\n                         }\n@@ -395,11 +395,11 @@\n                         ArrayList\u003cElement\u003e stack \u003d tb.getStack();\n                         for (int i \u003d stack.size() - 1; i \u003e 0; i--) {\n                             Element el \u003d stack.get(i);\n-                            if (StringUtil.inSorted(el.normalName(), Constants.DdDt)) {\n-                                tb.processEndTag(el.normalName());\n+                            if (StringUtil.inSorted(el.nodeName(), Constants.DdDt)) {\n+                                tb.processEndTag(el.nodeName());\n                                 break;\n                             }\n-                            if (tb.isSpecial(el) \u0026\u0026 !StringUtil.inSorted(el.normalName(), Constants.InBodyStartLiBreakers))\n+                            if (tb.isSpecial(el) \u0026\u0026 !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers))\n                                 break;\n                         }\n                         if (tb.inButtonScope(\"p\")) {\n@@ -528,14 +528,14 @@\n                         else\n                             tb.transition(InSelect);\n                     } else if (StringUtil.inSorted(name, Constants.InBodyStartOptions)) {\n-                        if (tb.currentElement().normalName().equals(\"option\"))\n+                        if (tb.currentElement().nodeName().equals(\"option\"))\n                             tb.processEndTag(\"option\");\n                         tb.reconstructFormattingElements();\n                         tb.insert(startTag);\n                     } else if (StringUtil.inSorted(name, Constants.InBodyStartRuby)) {\n                         if (tb.inScope(\"ruby\")) {\n                             tb.generateImpliedEndTags();\n-                            if (!tb.currentElement().normalName().equals(\"ruby\")) {\n+                            if (!tb.currentElement().nodeName().equals(\"ruby\")) {\n                                 tb.error(this);\n                                 tb.popStackToBefore(\"ruby\"); // i.e. close up to but not include name\n                             }\n@@ -571,7 +571,7 @@\n                                 tb.error(this);\n                                 tb.removeFromActiveFormattingElements(formatEl);\n                                 return true;\n-                            } else if (!tb.inScope(formatEl.normalName())) {\n+                            } else if (!tb.inScope(formatEl.nodeName())) {\n                                 tb.error(this);\n                                 return false;\n                             } else if (tb.currentElement() !\u003d formatEl)\n@@ -595,7 +595,7 @@\n                                 }\n                             }\n                             if (furthestBlock \u003d\u003d null) {\n-                                tb.popStackToClose(formatEl.normalName());\n+                                tb.popStackToClose(formatEl.nodeName());\n                                 tb.removeFromActiveFormattingElements(formatEl);\n                                 return true;\n                             }\n@@ -630,7 +630,7 @@\n                                 lastNode \u003d node;\n                             }\n \n-                            if (StringUtil.inSorted(commonAncestor.normalName(), Constants.InBodyEndTableFosters)) {\n+                            if (StringUtil.inSorted(commonAncestor.nodeName(), Constants.InBodyEndTableFosters)) {\n                                 if (lastNode.parent() !\u003d null)\n                                     lastNode.remove();\n                                 tb.insertInFosterParent(lastNode);\n@@ -659,7 +659,7 @@\n                             return false;\n                         } else {\n                             tb.generateImpliedEndTags();\n-                            if (!tb.currentElement().normalName().equals(name))\n+                            if (!tb.currentElement().nodeName().equals(name))\n                                 tb.error(this);\n                             tb.popStackToClose(name);\n                         }\n@@ -672,7 +672,7 @@\n                             return false;\n                         } else {\n                             tb.generateImpliedEndTags(name);\n-                            if (!tb.currentElement().normalName().equals(name))\n+                            if (!tb.currentElement().nodeName().equals(name))\n                                 tb.error(this);\n                             tb.popStackToClose(name);\n                         }\n@@ -696,7 +696,7 @@\n                             return false;\n                         } else {\n                             tb.generateImpliedEndTags();\n-                            if (!tb.currentElement().normalName().equals(name))\n+                            if (!tb.currentElement().nodeName().equals(name))\n                                 tb.error(this);\n                             // remove currentForm from stack. will shift anything under up.\n                             tb.removeFromStack(currentForm);\n@@ -708,7 +708,7 @@\n                             return tb.process(endTag);\n                         } else {\n                             tb.generateImpliedEndTags(name);\n-                            if (!tb.currentElement().normalName().equals(name))\n+                            if (!tb.currentElement().nodeName().equals(name))\n                                 tb.error(this);\n                             tb.popStackToClose(name);\n                         }\n@@ -718,7 +718,7 @@\n                             return false;\n                         } else {\n                             tb.generateImpliedEndTags(name);\n-                            if (!tb.currentElement().normalName().equals(name))\n+                            if (!tb.currentElement().nodeName().equals(name))\n                                 tb.error(this);\n                             tb.popStackToClose(name);\n                         }\n@@ -728,7 +728,7 @@\n                             return false;\n                         } else {\n                             tb.generateImpliedEndTags(name);\n-                            if (!tb.currentElement().normalName().equals(name))\n+                            if (!tb.currentElement().nodeName().equals(name))\n                                 tb.error(this);\n                             tb.popStackToClose(Constants.Headings);\n                         }\n@@ -742,7 +742,7 @@\n                                 return false;\n                             }\n                             tb.generateImpliedEndTags();\n-                            if (!tb.currentElement().normalName().equals(name))\n+                            if (!tb.currentElement().nodeName().equals(name))\n                                 tb.error(this);\n                             tb.popStackToClose(name);\n                             tb.clearFormattingElementsToLastMarker();\n@@ -765,13 +765,13 @@\n         }\n \n         boolean anyOtherEndTag(Token t, HtmlTreeBuilder tb) {\n-            String name \u003d t.asEndTag().normalName; // case insensitive search - goal is to preserve output case, not for the parse to be case sensitive\n+            String name \u003d tb.settings.normalizeTag(t.asEndTag().name());\n             ArrayList\u003cElement\u003e stack \u003d tb.getStack();\n             for (int pos \u003d stack.size() -1; pos \u003e\u003d 0; pos--) {\n                 Element node \u003d stack.get(pos);\n-                if (node.normalName().equals(name)) {\n+                if (node.nodeName().equals(name)) {\n                     tb.generateImpliedEndTags(name);\n-                    if (!name.equals(tb.currentElement().normalName()))\n+                    if (!name.equals(tb.currentElement().nodeName()))\n                         tb.error(this);\n                     tb.popStackToClose(name);\n                     break;\n@@ -884,7 +884,7 @@\n                 }\n                 return true; // todo: as above todo\n             } else if (t.isEOF()) {\n-                if (tb.currentElement().normalName().equals(\"html\"))\n+                if (tb.currentElement().nodeName().equals(\"html\"))\n                     tb.error(this);\n                 return true; // stops parsing\n             }\n@@ -894,7 +894,7 @@\n         boolean anythingElse(Token t, HtmlTreeBuilder tb) {\n             tb.error(this);\n             boolean processed;\n-            if (StringUtil.in(tb.currentElement().normalName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) {\n+            if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) {\n                 tb.setFosterInserts(true);\n                 processed \u003d tb.process(t, InBody);\n                 tb.setFosterInserts(false);\n@@ -923,7 +923,7 @@\n                             if (!isWhitespace(character)) {\n                                 // InTable anything else section:\n                                 tb.error(this);\n-                                if (StringUtil.in(tb.currentElement().normalName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) {\n+                                if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) {\n                                     tb.setFosterInserts(true);\n                                     tb.process(new Token.Character().data(character), InBody);\n                                     tb.setFosterInserts(false);\n@@ -951,7 +951,7 @@\n                     return false;\n                 } else {\n                     tb.generateImpliedEndTags();\n-                    if (!tb.currentElement().normalName().equals(\"caption\"))\n+                    if (!tb.currentElement().nodeName().equals(\"caption\"))\n                         tb.error(this);\n                     tb.popStackToClose(\"caption\");\n                     tb.clearFormattingElementsToLastMarker();\n@@ -1004,7 +1004,7 @@\n                 case EndTag:\n                     Token.EndTag endTag \u003d t.asEndTag();\n                     if (endTag.normalName.equals(\"colgroup\")) {\n-                        if (tb.currentElement().normalName().equals(\"html\")) { // frag case\n+                        if (tb.currentElement().nodeName().equals(\"html\")) {\n                             tb.error(this);\n                             return false;\n                         } else {\n@@ -1015,7 +1015,7 @@\n                         return anythingElse(t, tb);\n                     break;\n                 case EOF:\n-                    if (tb.currentElement().normalName().equals(\"html\"))\n+                    if (tb.currentElement().nodeName().equals(\"html\"))\n                         return true; // stop parsing; frag case\n                     else\n                         return anythingElse(t, tb);\n@@ -1086,7 +1086,7 @@\n                 return false;\n             }\n             tb.clearStackToTableBodyContext();\n-            tb.processEndTag(tb.currentElement().normalName()); // tbody, tfoot, thead\n+            tb.processEndTag(tb.currentElement().nodeName());\n             return tb.process(t);\n         }\n \n@@ -1170,7 +1170,7 @@\n                         return false;\n                     }\n                     tb.generateImpliedEndTags();\n-                    if (!tb.currentElement().normalName().equals(name))\n+                    if (!tb.currentElement().nodeName().equals(name))\n                         tb.error(this);\n                     tb.popStackToClose(name);\n                     tb.clearFormattingElementsToLastMarker();\n@@ -1237,13 +1237,13 @@\n                     if (name.equals(\"html\"))\n                         return tb.process(start, InBody);\n                     else if (name.equals(\"option\")) {\n-                        if (tb.currentElement().normalName().equals(\"option\"))\n+                        if (tb.currentElement().nodeName().equals(\"option\"))\n                             tb.processEndTag(\"option\");\n                         tb.insert(start);\n                     } else if (name.equals(\"optgroup\")) {\n-                        if (tb.currentElement().normalName().equals(\"option\"))\n+                        if (tb.currentElement().nodeName().equals(\"option\"))\n                             tb.processEndTag(\"option\");\n-                        else if (tb.currentElement().normalName().equals(\"optgroup\"))\n+                        else if (tb.currentElement().nodeName().equals(\"optgroup\"))\n                             tb.processEndTag(\"optgroup\");\n                         tb.insert(start);\n                     } else if (name.equals(\"select\")) {\n@@ -1266,15 +1266,15 @@\n                     name \u003d end.normalName();\n                     switch (name) {\n                         case \"optgroup\":\n-                            if (tb.currentElement().normalName().equals(\"option\") \u0026\u0026 tb.aboveOnStack(tb.currentElement()) !\u003d null \u0026\u0026 tb.aboveOnStack(tb.currentElement()).normalName().equals(\"optgroup\"))\n+                            if (tb.currentElement().nodeName().equals(\"option\") \u0026\u0026 tb.aboveOnStack(tb.currentElement()) !\u003d null \u0026\u0026 tb.aboveOnStack(tb.currentElement()).nodeName().equals(\"optgroup\"))\n                                 tb.processEndTag(\"option\");\n-                            if (tb.currentElement().normalName().equals(\"optgroup\"))\n+                            if (tb.currentElement().nodeName().equals(\"optgroup\"))\n                                 tb.pop();\n                             else\n                                 tb.error(this);\n                             break;\n                         case \"option\":\n-                            if (tb.currentElement().normalName().equals(\"option\"))\n+                            if (tb.currentElement().nodeName().equals(\"option\"))\n                                 tb.pop();\n                             else\n                                 tb.error(this);\n@@ -1293,7 +1293,7 @@\n                     }\n                     break;\n                 case EOF:\n-                    if (!tb.currentElement().normalName().equals(\"html\"))\n+                    if (!tb.currentElement().nodeName().equals(\"html\"))\n                         tb.error(this);\n                     break;\n                 default:\n@@ -1380,17 +1380,17 @@\n                         return false;\n                 }\n             } else if (t.isEndTag() \u0026\u0026 t.asEndTag().normalName().equals(\"frameset\")) {\n-                if (tb.currentElement().normalName().equals(\"html\")) { // frag\n+                if (tb.currentElement().nodeName().equals(\"html\")) {\n                     tb.error(this);\n                     return false;\n                 } else {\n                     tb.pop();\n-                    if (!tb.isFragmentParsing() \u0026\u0026 !tb.currentElement().normalName().equals(\"frameset\")) {\n+                    if (!tb.isFragmentParsing() \u0026\u0026 !tb.currentElement().nodeName().equals(\"frameset\")) {\n                         tb.transition(AfterFrameset);\n                     }\n                 }\n             } else if (t.isEOF()) {\n-                if (!tb.currentElement().normalName().equals(\"html\")) {\n+                if (!tb.currentElement().nodeName().equals(\"html\")) {\n                     tb.error(this);\n                     return true;\n                 }\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [38605,38665]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [38645,38683]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/jsoup/parser/Tag.java",
        "src/main/java/org/jsoup/parser/Tag.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.jsoup.parser.Tag:Tag:[String tagName]:null",
            "org.jsoup.parser.Tag:normalName:[]:String"
          ],
          "num": 2
        },
        {
          "qualified_names": [
            "org.jsoup.parser.Tag:getName:[]:String",
            "org.jsoup.parser.Tag:valueOf:[String tagName, ParseSettings settings]:Tag"
          ],
          "num": 2
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "4",
            "18",
            "30",
            "46",
            "47",
            "48"
          ],
          "num": 6
        },
        {
          "qualified_names": [
            "3",
            "18",
            "31",
            "48"
          ],
          "num": 4
        }
      ],
      "diff": "diff --git a/src/main/java/org/jsoup/parser/Tag.java b/src/main/java/org/jsoup/parser/Tag.java\nindex 1808572..25488df 100644\n--- a/src/main/java/org/jsoup/parser/Tag.java\n+++ b/src/main/java/org/jsoup/parser/Tag.java\n@@ -1,7 +1,6 @@\n package org.jsoup.parser;\n \n import org.jsoup.helper.Validate;\n-import org.jsoup.internal.Normalizer;\n \n import java.util.HashMap;\n import java.util.Map;\n@@ -15,7 +14,6 @@\n     private static final Map\u003cString, Tag\u003e tags \u003d new HashMap\u003c\u003e(); // map of known tags\n \n     private String tagName;\n-    private String normalName; // always the lower case version of this tag, regardless of case preservation mode\n     private boolean isBlock \u003d true; // block or inline\n     private boolean formatAsBlock \u003d true; // should be formatted as a block\n     private boolean canContainInline \u003d true; // only pcdata if not\n@@ -27,7 +25,6 @@\n \n     private Tag(String tagName) {\n         this.tagName \u003d tagName;\n-        normalName \u003d Normalizer.lowerCase(tagName);\n     }\n \n     /**\n@@ -43,9 +40,6 @@\n      * Get this tag\u0027s normalized (lowercased) name.\n      * @return the tag\u0027s normal name.\n      */\n-    public String normalName() {\n-        return normalName;\n-    }\n \n     /**\n      * Get a Tag by name. If not previously defined (unknown), returns a new generic tag, that can do anything.\n",
      "operations": [
        {
          "type": "delete-tree",
          "from": "ImportDeclaration [61,98]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "FieldDeclaration [373,399]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [1240,1283]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [1437,1604]",
          "to": ""
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [
        "org.jsoup.parser.Tag:valueOf:[String tagName, ParseSettings settings]:Tag",
        "org.jsoup.parser.Tag:getName:[]:String"
      ],
      "num": 2
    },
    "delete_functions": {
      "qualified_names": [
        "org.jsoup.nodes.Element:normalName:[]:String",
        "org.jsoup.parser.Tag:Tag:[String tagName]:null",
        "org.jsoup.parser.Tag:normalName:[]:String"
      ],
      "num": 3
    }
  }
}