{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "data/changesInfo/",
  "properties": {
    "trigger.tests": "com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545",
    "test.dir": "test",
    "clz.modified": "com.google.javascript.jscomp.InlineObjectLiterals",
    "src.dir": "src"
  },
  "timeoutSecond": 100,
  "proj": "Closure",
  "id": "53",
  "workingDir": "../bugs/Closure_53_tmp",
  "bug_name": "Closure_53",
  "derive": "defects4j",
  "trigger_tests": [
    {
      "test_class": "com.google.javascript.jscomp.InlineObjectLiteralsTest",
      "test_function": "testBug545",
      "assertion_line": "361",
      "exception": "java.lang.RuntimeException",
      "message": "INTERNAL COMPILER ERROR."
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/jscomp/InlineObjectLiterals.java",
        "src/com/google/javascript/jscomp/InlineObjectLiterals.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "com.google.javascript.jscomp.InlineObjectLiterals\\$InliningBehavior:replaceAssignmentExpression:[Var v, Reference ref, Map\u003cString,String\u003e varmap]:void"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "com.google.javascript.jscomp.InlineObjectLiterals\\$InliningBehavior:replaceAssignmentExpression:[Var v, Reference ref, Map\u003cString,String\u003e varmap]:void"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "331",
            "332",
            "333",
            "353"
          ],
          "num": 4
        },
        {
          "qualified_names": [
            "330",
            "355"
          ],
          "num": 2
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/jscomp/InlineObjectLiterals.java b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\nindex d92b16c..9061925 100644\n--- a/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n+++ b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n@@ -328,9 +328,6 @@\n       }\n \n       Node replacement;\n-      if (nodes.isEmpty()) {\n-        replacement \u003d new Node(Token.TRUE);\n-      } else {\n         // All assignments evaluate to true, so make sure that the\n         // expr statement evaluates to true in case it matters.\n         nodes.add(new Node(Token.TRUE));\n@@ -350,7 +347,6 @@\n         }\n         cur.addChildToFront(nodes.get(i));\n         cur.addChildToFront(nodes.get(i + 1));\n-      }\n \n       Node replace \u003d ref.getParent();\n       replacement.copyInformationFromForTree(replace);\n",
      "operations": [
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodInvocation [11764,11779]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "Block [11781,11834]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Block [11840,12653]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "IfStatement [11760,12653]",
          "to": ""
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  }
}