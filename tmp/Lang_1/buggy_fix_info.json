{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "data/changesInfo/",
  "properties": {
    "trigger.tests": "org.apache.commons.lang3.math.NumberUtilsTest::TestLang747",
    "test.dir": "src/test/java",
    "clz.modified": "org.apache.commons.lang3.math.NumberUtils",
    "src.dir": "src/main/java"
  },
  "timeoutSecond": 100,
  "proj": "Lang",
  "id": "1",
  "workingDir": "../bugs/Lang_1_tmp",
  "bug_name": "Lang_1",
  "derive": "defects4j",
  "trigger_tests": [
    {
      "test_class": "org.apache.commons.lang3.math.NumberUtilsTest",
      "test_function": "TestLang747",
      "assertion_line": "256",
      "exception": "java.lang.NumberFormatException",
      "message": "For input string: \"80000000\""
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/lang3/math/NumberUtils.java",
        "src/main/java/org/apache/commons/lang3/math/NumberUtils.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.lang3.math.NumberUtils:createNumber:[final String str]:Number"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "org.apache.commons.lang3.math.NumberUtils:createNumber:[final String str]:Number"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "467",
            "468",
            "469",
            "470",
            "471",
            "472",
            "473",
            "474",
            "475",
            "477",
            "480"
          ],
          "num": 11
        },
        {
          "qualified_names": [
            "468",
            "471"
          ],
          "num": 2
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\nindex 70b8d64..1e6ccdc 100644\n--- a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n@@ -464,20 +464,11 @@\n             }\n         }\n         if (pfxLen \u003e 0) { // we have a hex number\n-            char firstSigDigit \u003d 0; // strip leading zeroes\n-            for(int i \u003d pfxLen; i \u003c str.length(); i++) {\n-                firstSigDigit \u003d str.charAt(i);\n-                if (firstSigDigit \u003d\u003d \u00270\u0027) { // count leading zeroes\n-                    pfxLen++;\n-                } else {\n-                    break;\n-                }\n-            }\n             final int hexDigits \u003d str.length() - pfxLen;\n-            if (hexDigits \u003e 16 || (hexDigits \u003d\u003d 16 \u0026\u0026 firstSigDigit \u003e \u00277\u0027)) { // too many for Long\n+            if (hexDigits \u003e 16) { // too many for Long\n                 return createBigInteger(str);\n             }\n-            if (hexDigits \u003e 8 || (hexDigits \u003d\u003d 8 \u0026\u0026 firstSigDigit \u003e \u00277\u0027)) { // too many for an int\n+            if (hexDigits \u003e 8) { // too many for an int\n                 return createLong(str);\n             }\n             return createInteger(str);\n",
      "operations": [
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [16768,16791]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ForStatement [16828,17101]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "INFIX_EXPRESSION_OPERATOR: || [17190,17192]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ParenthesizedExpression [17193,17233]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "InfixExpression [17175,17233]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "INFIX_EXPRESSION_OPERATOR: || [17348,17350]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ParenthesizedExpression [17351,17390]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "InfixExpression [17334,17390]",
          "to": ""
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  }
}