{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "data/changesInfo/",
  "properties": {
    "trigger.tests": "com.fasterxml.jackson.databind.jsontype.TypeRefinementForMap1215Test::testMapRefinement",
    "test.dir": "src/test/java",
    "clz.modified": "com.fasterxml.jackson.databind.type.TypeBindings,com.fasterxml.jackson.databind.type.TypeFactory",
    "src.dir": "src/main/java"
  },
  "timeoutSecond": 100,
  "proj": "JacksonDatabind",
  "id": "53",
  "workingDir": "../bugs/JacksonDatabind_53_tmp",
  "bug_name": "JacksonDatabind_53",
  "derive": "defects4j",
  "trigger_tests": [
    {
      "test_class": "com.fasterxml.jackson.databind.jsontype.TypeRefinementForMap1215Test",
      "test_function": "testMapRefinement",
      "assertion_line": "65",
      "exception": "com.fasterxml.jackson.databind.JsonMappingException",
      "message": "Can not construct instance of com.fasterxml.jackson.databind.jsontype.TypeRefinementForMap1215Test$HasUniqueId, problem: abstract types either need to be mapped to concrete types, have custom deserializer, or be instantiated with additional type information"
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/com/fasterxml/jackson/databind/type/TypeBindings.java",
        "src/main/java/com/fasterxml/jackson/databind/type/TypeBindings.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "com.fasterxml.jackson.databind.type.TypeBindings:asKey:[Class\u003c?\u003e rawBase]:Object",
            "com.fasterxml.jackson.databind.type.TypeBindings\\$AsKey:AsKey:[Class\u003c?\u003e raw, JavaType[] params, int hash]:null",
            "com.fasterxml.jackson.databind.type.TypeBindings\\$AsKey:toString:[]:String",
            "com.fasterxml.jackson.databind.type.TypeBindings\\$AsKey:hashCode:[]:int",
            "com.fasterxml.jackson.databind.type.TypeBindings\\$AsKey:equals:[Object o]:boolean"
          ],
          "num": 5
        },
        {
          "qualified_names": [
            "com.fasterxml.jackson.databind.type.TypeBindings:toString:[]:String"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "302",
            "305",
            "306",
            "431",
            "432",
            "433",
            "434",
            "436",
            "437",
            "438",
            "439",
            "440",
            "442",
            "443",
            "444",
            "445",
            "446",
            "447",
            "448",
            "449",
            "450",
            "451",
            "452",
            "453",
            "454",
            "455",
            "456",
            "457",
            "458",
            "459",
            "460",
            "461",
            "462",
            "463",
            "464",
            "465",
            "466",
            "467",
            "468",
            "469",
            "470",
            "471",
            "472"
          ],
          "num": 43
        },
        {
          "qualified_names": [
            "301",
            "433"
          ],
          "num": 2
        }
      ],
      "diff": "diff --git a/src/main/java/com/fasterxml/jackson/databind/type/TypeBindings.java b/src/main/java/com/fasterxml/jackson/databind/type/TypeBindings.java\nindex 6752f20..3666aba 100644\n--- a/src/main/java/com/fasterxml/jackson/databind/type/TypeBindings.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/type/TypeBindings.java\n@@ -299,11 +299,8 @@\n      *\n      * @since 2.8\n      */\n-    public Object asKey(Class\u003c?\u003e rawBase) {\n         // safe to pass _types array without copy since it is not exposed via\n         // any access, nor modified by this class\n-        return new AsKey(rawBase, _types, _hashCode);\n-    }\n \n     /*\n     /**********************************************************************\n@@ -428,46 +425,6 @@\n      *\n      * @since 2.8\n      */\n-    final static class AsKey {\n-        private final Class\u003c?\u003e _raw;\n-        private final JavaType[] _params;\n-        private final int _hash;\n \n-        public AsKey(Class\u003c?\u003e raw, JavaType[] params, int hash) {\n-            _raw \u003d raw ;\n-            _params \u003d params;\n-            _hash \u003d hash;\n-        }\n \n-        @Override\n-        public int hashCode() { return _hash; }\n-\n-        @Override\n-        public boolean equals(Object o) {\n-            if (o \u003d\u003d this) return true;\n-            if (o \u003d\u003d null) return false;\n-            if (o.getClass() !\u003d getClass()) return false;\n-            AsKey other \u003d (AsKey) o;\n-\n-            if ((_hash \u003d\u003d other._hash) \u0026\u0026 (_raw \u003d\u003d other._raw)) {\n-                final JavaType[] otherParams \u003d other._params;\n-                final int len \u003d _params.length;\n-\n-                if (len \u003d\u003d otherParams.length) {\n-                    for (int i \u003d 0; i \u003c len; ++i) {\n-                        if (!_params[i].equals(otherParams[i])) {\n-                            return false;\n-                        }\n-                    }\n-                    return true;\n-                }\n-            }\n-            return false;\n-        }\n-\n-        @Override\n-        public String toString() {\n-            return _raw.getName()+\"\u003c\u003e\";\n-        }\n-    }\n }\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [9976,10138]"
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [9976,10370]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TypeDeclaration [14723,16068]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "src/main/java/com/fasterxml/jackson/databind/type/TypeFactory.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "com.fasterxml.jackson.databind.type.TypeFactory:constructSpecializedType:[JavaType baseType, Class\u003c?\u003e subclass]:JavaType",
            "com.fasterxml.jackson.databind.type.TypeFactory:_fromClass:[ClassStack context, Class\u003c?\u003e rawType, TypeBindings bindings]:JavaType",
            "com.fasterxml.jackson.databind.type.TypeFactory:_bindingsForSubtype:[JavaType baseType, int typeParamCount, Class\u003c?\u003e subclass]:TypeBindings"
          ],
          "num": 3
        },
        {
          "qualified_names": [
            "com.fasterxml.jackson.databind.type.TypeFactory:_fromClass:[ClassStack context, Class\u003c?\u003e rawType, TypeBindings bindings]:JavaType",
            "com.fasterxml.jackson.databind.type.TypeFactory:constructSpecializedType:[JavaType baseType, Class\u003c?\u003e subclass]:JavaType"
          ],
          "num": 2
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "117",
            "385",
            "387",
            "389",
            "393",
            "447",
            "448",
            "451",
            "452",
            "453",
            "454",
            "455",
            "456",
            "457",
            "458",
            "459",
            "460",
            "461",
            "462",
            "463",
            "464",
            "465",
            "467",
            "468",
            "1170",
            "1171",
            "1172",
            "1173",
            "1174",
            "1175",
            "1176",
            "1177",
            "1239"
          ],
          "num": 33
        },
        {
          "qualified_names": [
            "117",
            "386",
            "388",
            "392",
            "393",
            "394",
            "395",
            "396",
            "397",
            "398",
            "399",
            "400",
            "401",
            "402",
            "437",
            "1160",
            "1161",
            "1162",
            "1165",
            "1225",
            "1226",
            "1227"
          ],
          "num": 22
        }
      ],
      "diff": "diff --git a/src/main/java/com/fasterxml/jackson/databind/type/TypeFactory.java b/src/main/java/com/fasterxml/jackson/databind/type/TypeFactory.java\nindex a27097e..c3fc79f 100644\n--- a/src/main/java/com/fasterxml/jackson/databind/type/TypeFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/type/TypeFactory.java\n@@ -114,7 +114,7 @@\n      * actual generic types), we will use small cache to avoid repetitive\n      * resolution of core types\n      */\n-    protected final LRUMap\u003cObject,JavaType\u003e _typeCache \u003d new LRUMap\u003cObject,JavaType\u003e(16, 100);\n+    protected final LRUMap\u003cClass\u003c?\u003e, JavaType\u003e _typeCache \u003d new LRUMap\u003cClass\u003c?\u003e, JavaType\u003e(16, 100);\n \n     /*\n     /**********************************************************\n@@ -382,15 +382,24 @@\n             //  for a case where this code does get invoked: not ideal\n             // 29-Jun-2016, tatu: As to bindings, this works for [databind#1215], but\n             //  not certain it would reliably work... but let\u0027s hope for best for now\n-            TypeBindings tb \u003d _bindingsForSubtype(baseType, typeParamCount, subclass);\n             if (baseType.isInterface()) {\n-                newType \u003d baseType.refine(subclass, tb, null, new JavaType[] { baseType });\n+                newType \u003d baseType.refine(subclass, TypeBindings.emptyBindings(), null, new JavaType[] { baseType });\n             } else {\n-                newType \u003d baseType.refine(subclass, tb, baseType, NO_TYPES);\n+                newType \u003d baseType.refine(subclass, TypeBindings.emptyBindings(), baseType, NO_TYPES);\n             }\n             // Only SimpleType returns null, but if so just resolve regularly\n             if (newType \u003d\u003d null) {\n-                newType \u003d _fromClass(null, subclass, tb);\n+                TypeBindings tb \u003d null;\n+                if (baseType.containedTypeCount() \u003d\u003d typeParamCount) {\n+                    if (typeParamCount \u003d\u003d 1) {\n+                        tb \u003d TypeBindings.create(subclass, baseType.containedType(0));\n+                    } else if (typeParamCount \u003d\u003d 2) {\n+                        tb \u003d TypeBindings.create(subclass, baseType.containedType(0),\n+                                baseType.containedType(1));\n+                    }\n+                }\n+                newType \u003d _fromClass(null, subclass,\n+                        (tb \u003d\u003d null) ? TypeBindings.emptyBindings() : tb);\n             }\n         } while (false);\n \n@@ -444,28 +453,9 @@\n         */\n     }\n \n-    private TypeBindings _bindingsForSubtype(JavaType baseType, int typeParamCount, Class\u003c?\u003e subclass)\n-    {\n         // But otherwise gets bit tricky, as we need to partially resolve the type hierarchy\n         // (hopefully passing null Class for root is ok)\n-        int baseCount \u003d baseType.containedTypeCount();\n-        if (baseCount \u003d\u003d typeParamCount) {\n-            if (typeParamCount \u003d\u003d 1) {\n-                return TypeBindings.create(subclass, baseType.containedType(0));\n-            }\n-            if (typeParamCount \u003d\u003d 2) {\n-                return TypeBindings.create(subclass, baseType.containedType(0),\n-                        baseType.containedType(1));\n-            }\n-            List\u003cJavaType\u003e types \u003d new ArrayList\u003cJavaType\u003e(baseCount);\n-            for (int i \u003d 0; i \u003c baseCount; ++i) {\n-                types.add(baseType.containedType(i));\n-            }\n-            return TypeBindings.create(subclass, types);\n-        }\n         // Otherwise, two choices: match N first, or empty. Do latter, for now\n-        return TypeBindings.emptyBindings();\n-    }\n \n     /**\n      * Method similar to {@link #constructSpecializedType}, but that creates a\n@@ -1167,16 +1157,12 @@\n             return result;\n         }\n         // Barring that, we may have recently constructed an instance\n-        final Object key;\n-        if ((bindings \u003d\u003d null) || bindings.isEmpty()) {\n-            key \u003d rawType;\n-            result \u003d _typeCache.get(key); // ok, cache object is synced\n-        } else {\n-            key \u003d bindings.asKey(rawType);\n-        }\n-        result \u003d _typeCache.get(key); // ok, cache object is synced\n+        boolean cachable \u003d (bindings \u003d\u003d null) || bindings.isEmpty();\n+        if (cachable) {\n+            result \u003d _typeCache.get(rawType);\n         if (result !\u003d null) {\n             return result;\n+            }\n         }\n \n         // 15-Oct-2015, tatu: recursive reference?\n@@ -1236,7 +1222,9 @@\n             }\n         }\n         context.resolveSelfReferences(result);\n-        _typeCache.putIfAbsent(key, result); // cache object syncs\n+        if (cachable) {\n+            _typeCache.putIfAbsent(rawType, result);\n+        }\n         return result;\n     }\n \n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "ParameterizedType [4445,4471]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "VariableDeclarationStatement [46055,46115]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "IfStatement [46124,46266]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "IfStatement [49042,49120]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "PrimitiveType: boolean [46055,46062]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "VariableDeclarationFragment [46063,46114]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: cachable [46128,46136]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: cachable [49046,49054]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Block [49056,49120]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ParameterizedType [4496,4504]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: cachable [46063,46071]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [15538,15561]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodInvocation [15205,15233]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodInvocation [15344,15372]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "ExpressionStatement [15704,15766]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "ConditionalExpression [16084,16132]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Assignment [15704,15765]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "ExpressionStatement [15845,15966]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ParenthesizedExpression [16084,16096]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: tb [15704,15706]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "ASSIGNMENT_OPERATOR: \u003d [15707,15708]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Assignment [15845,15965]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: tb [15845,15847]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "ASSIGNMENT_OPERATOR: \u003d [15848,15849]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ParameterizedType [4445,4468]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [4493,4499]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [15117,15191]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: tb [15286,15288]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: tb [15399,15401]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: baseCount [18110,18119]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "ReturnStatement [18196,18260]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "ReturnStatement [18330,18445]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [18472,18530]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ForStatement [18543,18648]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ReturnStatement [18661,18705]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: private [17788,17795]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [17796,17808]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: _bindingsForSubtype [17809,17828]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SingleVariableDeclaration [17829,17846]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SingleVariableDeclaration [17848,17866]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SingleVariableDeclaration [17868,17885]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "PrimitiveType: int [18051,18054]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: baseCount [18055,18064]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "VariableDeclarationFragment [18055,18096]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "VariableDeclarationStatement [18051,18097]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "ReturnStatement [18803,18839]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Block [17891,18845]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "MethodDeclaration [17788,18845]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: key [46448,46451]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "ASSIGNMENT_OPERATOR: \u003d [46452,46453]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Assignment [46448,46461]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "ExpressionStatement [46448,46462]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [46362,46379]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "Block [46550,46604]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "IfStatement [46388,46604]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [46613,46642]",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [
        "com.fasterxml.jackson.databind.type.TypeBindings:toString:[]:String"
      ],
      "num": 1
    },
    "delete_functions": {
      "qualified_names": [
        "com.fasterxml.jackson.databind.type.TypeBindings\\$AsKey:equals:[Object o]:boolean",
        "com.fasterxml.jackson.databind.type.TypeBindings\\$AsKey:toString:[]:String",
        "com.fasterxml.jackson.databind.type.TypeFactory:_bindingsForSubtype:[JavaType baseType, int typeParamCount, Class\u003c?\u003e subclass]:TypeBindings",
        "com.fasterxml.jackson.databind.type.TypeBindings\\$AsKey:AsKey:[Class\u003c?\u003e raw, JavaType[] params, int hash]:null",
        "com.fasterxml.jackson.databind.type.TypeBindings\\$AsKey:hashCode:[]:int",
        "com.fasterxml.jackson.databind.type.TypeBindings:asKey:[Class\u003c?\u003e rawBase]:Object"
      ],
      "num": 6
    }
  }
}