{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "data/changesInfo/",
  "properties": {
    "trigger.tests": "org.mockito.internal.stubbing.defaultanswers.ReturnsGenericDeepStubsTest::will_return_default_value_on_non_mockable_nested_generic,org.mockito.internal.stubbing.defaultanswers.ReturnsGenericDeepStubsTest::can_create_mock_from_multiple_type_variable_bounds_when_return_type_of_parameterized_method_is_a_typevar_that_is_referencing_a_typevar_on_class,org.mockito.internal.stubbing.defaultanswers.ReturnsGenericDeepStubsTest::can_create_mock_from_return_types_declared_with_a_bounded_wildcard,org.mockito.internal.stubbing.defaultanswers.ReturnsGenericDeepStubsTest::can_create_mock_from_multiple_type_variable_bounds_when_return_type_of_parameterized_method_is_a_parameterizedtype_that_is_referencing_a_typevar_on_class,org.mockito.internal.stubbing.defaultanswers.ReturnsGenericDeepStubsTest::generic_deep_mock_frenzy__look_at_these_chained_calls,org.mockito.internal.stubbing.defaultanswers.ReturnsGenericDeepStubsTest::can_create_mock_from_multiple_type_variable_bounds_when_method_return_type_is_referencing_a_typevar_on_class",
    "test.dir": "test",
    "clz.modified": "org.mockito.internal.stubbing.defaultanswers.ReturnsDeepStubs",
    "src.dir": "src"
  },
  "timeoutSecond": 100,
  "proj": "Mockito",
  "id": "25",
  "workingDir": "../bugs/Mockito_25_tmp",
  "bug_name": "Mockito_25",
  "derive": "defects4j",
  "trigger_tests": [
    {
      "test_class": "org.mockito.internal.stubbing.defaultanswers.ReturnsGenericDeepStubsTest",
      "test_function": "will_return_default_value_on_non_mockable_nested_generic",
      "assertion_line": "97",
      "exception": "java.lang.ClassCastException",
      "message": "org.mockito.internal.creation.jmock.ClassImposterizer$ClassWithSuperclassToWorkAroundCglibBug$$EnhancerByMockitoWithCGLIB$$2f702d3d cannot be cast to java.lang.String"
    },
    {
      "test_class": "org.mockito.internal.stubbing.defaultanswers.ReturnsGenericDeepStubsTest",
      "test_function": "can_create_mock_from_multiple_type_variable_bounds_when_return_type_of_parameterized_method_is_a_typevar_that_is_referencing_a_typevar_on_class",
      "assertion_line": "71",
      "exception": "java.lang.ClassCastException",
      "message": "$java.lang.Comparable$$EnhancerByMockitoWithCGLIB$$5139a9fd cannot be cast to java.lang.Cloneable"
    },
    {
      "test_class": "org.mockito.internal.stubbing.defaultanswers.ReturnsGenericDeepStubsTest",
      "test_function": "can_create_mock_from_return_types_declared_with_a_bounded_wildcard",
      "assertion_line": "80",
      "exception": "java.lang.ClassCastException",
      "message": "org.mockito.internal.creation.jmock.ClassImposterizer$ClassWithSuperclassToWorkAroundCglibBug$$EnhancerByMockitoWithCGLIB$$2f702d3d cannot be cast to java.lang.Number"
    },
    {
      "test_class": "org.mockito.internal.stubbing.defaultanswers.ReturnsGenericDeepStubsTest",
      "test_function": "can_create_mock_from_multiple_type_variable_bounds_when_return_type_of_parameterized_method_is_a_parameterizedtype_that_is_referencing_a_typevar_on_class",
      "assertion_line": "54",
      "exception": "java.lang.ClassCastException",
      "message": "org.mockito.internal.creation.jmock.ClassImposterizer$ClassWithSuperclassToWorkAroundCglibBug$$EnhancerByMockitoWithCGLIB$$2f702d3d cannot be cast to java.lang.Cloneable"
    },
    {
      "test_class": "org.mockito.internal.stubbing.defaultanswers.ReturnsGenericDeepStubsTest",
      "test_function": "generic_deep_mock_frenzy__look_at_these_chained_calls",
      "assertion_line": "39",
      "exception": "java.lang.ClassCastException",
      "message": "org.mockito.internal.creation.jmock.ClassImposterizer$ClassWithSuperclassToWorkAroundCglibBug$$EnhancerByMockitoWithCGLIB$$2f702d3d cannot be cast to java.util.Map$Entry"
    },
    {
      "test_class": "org.mockito.internal.stubbing.defaultanswers.ReturnsGenericDeepStubsTest",
      "test_function": "can_create_mock_from_multiple_type_variable_bounds_when_method_return_type_is_referencing_a_typevar_on_class",
      "assertion_line": "63",
      "exception": "java.lang.ClassCastException",
      "message": "$java.lang.Comparable$$EnhancerByMockitoWithCGLIB$$5139a9fd cannot be cast to java.lang.Cloneable"
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java",
        "src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.mockito.internal.stubbing.defaultanswers.ReturnsDeepStubs:createNewDeepStubMock:[GenericMetadataSupport returnTypeGenericMetadata]:Object",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsDeepStubs:recordDeepStubMock:[final Object mock, InvocationContainerImpl container]:Object",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsDeepStubs:getMock:[InvocationOnMock invocation, GenericMetadataSupport returnTypeGenericMetadata]:Object",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsDeepStubs:returnsDeepStubsAnswerUsing:[final GenericMetadataSupport returnTypeGenericMetadata]:ReturnsDeepStubs",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsDeepStubs:answer:[InvocationOnMock invocation]:Object",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsDeepStubs:withSettingsUsing:[GenericMetadataSupport returnTypeGenericMetadata]:MockSettings"
          ],
          "num": 6
        },
        {
          "qualified_names": [
            "org.mockito.internal.stubbing.defaultanswers.ReturnsDeepStubs:answer:[InvocationOnMock invocation]:Object",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsDeepStubs:getMock:[InvocationOnMock invocation]:Object",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsDeepStubs:recordDeepStubMock:[InvocationOnMock invocation, InvocationContainerImpl container]:Object"
          ],
          "num": 3
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "7",
            "20",
            "21",
            "56",
            "59",
            "71",
            "80",
            "81",
            "82",
            "83",
            "84",
            "85",
            "87",
            "88",
            "89",
            "90",
            "91",
            "93",
            "94",
            "95",
            "97",
            "98",
            "99",
            "100",
            "101",
            "102",
            "103",
            "104",
            "106"
          ],
          "num": 29
        },
        {
          "qualified_names": [
            "6",
            "20",
            "53",
            "56",
            "68",
            "81",
            "82",
            "83"
          ],
          "num": 8
        }
      ],
      "diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java\nindex 918c42a..6fa773f 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java\n@@ -4,7 +4,6 @@\n  */\r\n package org.mockito.internal.stubbing.defaultanswers;\r\n \r\n-import org.mockito.MockSettings;\r\n import org.mockito.internal.InternalMockHandler;\r\n import org.mockito.internal.creation.settings.CreationSettings;\r\n import org.mockito.internal.stubbing.InvocationContainerImpl;\r\n@@ -17,8 +16,6 @@\n \r\n import java.io.Serializable;\r\n \r\n-import static org.mockito.Mockito.mock;\r\n-import static org.mockito.Mockito.withSettings;\r\n \r\n /**\r\n  * Returning deep stub implementation.\r\n@@ -53,10 +50,10 @@\n             return delegate.returnValueFor(rawType);\r\n         }\r\n \r\n-        return getMock(invocation, returnTypeGenericMetadata);\r\n+        return getMock(invocation);\r\n     }\r\n \r\n-    private Object getMock(InvocationOnMock invocation, GenericMetadataSupport returnTypeGenericMetadata) throws Throwable {\r\n+    private Object getMock(InvocationOnMock invocation) throws Throwable {\r\n     \tInternalMockHandler\u003cObject\u003e handler \u003d new MockUtil().getMockHandler(invocation.getMock());\r\n     \tInvocationContainerImpl container \u003d (InvocationContainerImpl) handler.getInvocationContainer();\r\n \r\n@@ -68,7 +65,7 @@\n \t\t}\r\n \r\n         // deep stub\r\n-        return recordDeepStubMock(createNewDeepStubMock(returnTypeGenericMetadata), container);\r\n+        return recordDeepStubMock(invocation, container);\r\n     }\r\n \r\n     /**\r\n@@ -77,33 +74,13 @@\n      * @param returnTypeGenericMetadata The metadata to use to create the new mock.\r\n      * @return The mock\r\n      */\r\n-    private Object createNewDeepStubMock(GenericMetadataSupport returnTypeGenericMetadata) {\r\n-        return mock(\r\n-                returnTypeGenericMetadata.rawType(),\r\n-                withSettingsUsing(returnTypeGenericMetadata)\r\n-        );\r\n-    }\r\n \r\n-    private MockSettings withSettingsUsing(GenericMetadataSupport returnTypeGenericMetadata) {\r\n-        MockSettings mockSettings \u003d\r\n-                returnTypeGenericMetadata.rawExtraInterfaces().length \u003e 0 ?\r\n-                withSettings().extraInterfaces(returnTypeGenericMetadata.rawExtraInterfaces())\r\n-                : withSettings();\r\n \r\n-        return mockSettings\r\n-                .defaultAnswer(returnsDeepStubsAnswerUsing(returnTypeGenericMetadata));\r\n-    }\r\n \r\n-    private ReturnsDeepStubs returnsDeepStubsAnswerUsing(final GenericMetadataSupport returnTypeGenericMetadata) {\r\n-        return new ReturnsDeepStubs() {\r\n-            @Override\r\n-            protected GenericMetadataSupport actualParameterizedType(Object mock) {\r\n-                return returnTypeGenericMetadata;\r\n-            }\r\n-        };\r\n-    }\r\n \r\n-    private Object recordDeepStubMock(final Object mock, InvocationContainerImpl container) throws Throwable {\r\n+    private Object recordDeepStubMock(InvocationOnMock invocation, InvocationContainerImpl container) {\r\n+        Class\u003c?\u003e clz \u003d invocation.getMethod().getReturnType();\r\n+        final Object mock \u003d org.mockito.Mockito.mock(clz, this);\r\n \r\n         container.addAnswer(new Answer\u003cObject\u003e() {\r\n             public Object answer(InvocationOnMock invocation) throws Throwable {\r\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [2833,3015]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SingleVariableDeclaration [3063,3090]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [3138,3192]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [3202,3258]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: invocation [2795,2805]"
        },
        {
          "type": "delete-tree",
          "from": "ImportDeclaration [181,213]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ImportDeclaration [747,786]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ImportDeclaration [788,835]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: returnTypeGenericMetadata [2248,2273]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SingleVariableDeclaration [2342,2390]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodInvocation [2996,3044]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [3072,3505]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [3513,3975]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [3983,4327]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SingleVariableDeclaration [4369,4386]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [4430,4439]",
          "to": ""
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [
        "org.mockito.internal.stubbing.defaultanswers.ReturnsDeepStubs:getMock:[InvocationOnMock invocation]:Object",
        "org.mockito.internal.stubbing.defaultanswers.ReturnsDeepStubs:recordDeepStubMock:[InvocationOnMock invocation, InvocationContainerImpl container]:Object"
      ],
      "num": 2
    },
    "delete_functions": {
      "qualified_names": [
        "org.mockito.internal.stubbing.defaultanswers.ReturnsDeepStubs:recordDeepStubMock:[final Object mock, InvocationContainerImpl container]:Object",
        "org.mockito.internal.stubbing.defaultanswers.ReturnsDeepStubs:withSettingsUsing:[GenericMetadataSupport returnTypeGenericMetadata]:MockSettings",
        "org.mockito.internal.stubbing.defaultanswers.ReturnsDeepStubs:createNewDeepStubMock:[GenericMetadataSupport returnTypeGenericMetadata]:Object",
        "org.mockito.internal.stubbing.defaultanswers.ReturnsDeepStubs:returnsDeepStubsAnswerUsing:[final GenericMetadataSupport returnTypeGenericMetadata]:ReturnsDeepStubs",
        "org.mockito.internal.stubbing.defaultanswers.ReturnsDeepStubs:getMock:[InvocationOnMock invocation, GenericMetadataSupport returnTypeGenericMetadata]:Object"
      ],
      "num": 5
    }
  }
}