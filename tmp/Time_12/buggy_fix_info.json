{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "data/changesInfo/",
  "properties": {
    "trigger.tests": "org.joda.time.TestLocalDateTime_Constructors::testFactory_fromDateFields_beforeYearZero1,org.joda.time.TestLocalDateTime_Constructors::testFactory_fromDateFields_beforeYearZero3,org.joda.time.TestLocalDateTime_Constructors::testFactory_fromCalendarFields_beforeYearZero1,org.joda.time.TestLocalDateTime_Constructors::testFactory_fromCalendarFields_beforeYearZero3,org.joda.time.TestLocalDate_Constructors::testFactory_fromDateFields_beforeYearZero1,org.joda.time.TestLocalDate_Constructors::testFactory_fromDateFields_beforeYearZero3,org.joda.time.TestLocalDate_Constructors::testFactory_fromCalendarFields_beforeYearZero1,org.joda.time.TestLocalDate_Constructors::testFactory_fromCalendarFields_beforeYearZero3",
    "test.dir": "src/test/java",
    "clz.modified": "org.joda.time.LocalDate,org.joda.time.LocalDateTime",
    "src.dir": "src/main/java"
  },
  "timeoutSecond": 100,
  "proj": "Time",
  "id": "12",
  "workingDir": "../bugs/Time_12_tmp",
  "bug_name": "Time_12",
  "derive": "defects4j",
  "trigger_tests": [
    {
      "test_class": "org.joda.time.TestLocalDateTime_Constructors",
      "test_function": "testFactory_fromDateFields_beforeYearZero1",
      "assertion_line": "155",
      "exception": "junit.framework.AssertionFailedError",
      "message": "expected:\u003c0000-02-03T04:05:06.007\u003e but was:\u003c0001-02-03T04:05:06.007\u003e"
    },
    {
      "test_class": "org.joda.time.TestLocalDateTime_Constructors",
      "test_function": "testFactory_fromDateFields_beforeYearZero3",
      "assertion_line": "163",
      "exception": "junit.framework.AssertionFailedError",
      "message": "expected:\u003c-0002-02-03T04:05:06.007\u003e but was:\u003c0003-02-03T04:05:06.007\u003e"
    },
    {
      "test_class": "org.joda.time.TestLocalDateTime_Constructors",
      "test_function": "testFactory_fromCalendarFields_beforeYearZero1",
      "assertion_line": "117",
      "exception": "junit.framework.AssertionFailedError",
      "message": "expected:\u003c0000-02-03T04:05:06.007\u003e but was:\u003c0001-02-03T04:05:06.007\u003e"
    },
    {
      "test_class": "org.joda.time.TestLocalDateTime_Constructors",
      "test_function": "testFactory_fromCalendarFields_beforeYearZero3",
      "assertion_line": "125",
      "exception": "junit.framework.AssertionFailedError",
      "message": "expected:\u003c-0002-02-03T04:05:06.007\u003e but was:\u003c0003-02-03T04:05:06.007\u003e"
    },
    {
      "test_class": "org.joda.time.TestLocalDate_Constructors",
      "test_function": "testFactory_fromDateFields_beforeYearZero1",
      "assertion_line": "147",
      "exception": "junit.framework.AssertionFailedError",
      "message": "expected:\u003c0000-02-03\u003e but was:\u003c0001-02-03\u003e"
    },
    {
      "test_class": "org.joda.time.TestLocalDate_Constructors",
      "test_function": "testFactory_fromDateFields_beforeYearZero3",
      "assertion_line": "155",
      "exception": "junit.framework.AssertionFailedError",
      "message": "expected:\u003c-0002-02-03\u003e but was:\u003c0003-02-03\u003e"
    },
    {
      "test_class": "org.joda.time.TestLocalDate_Constructors",
      "test_function": "testFactory_fromCalendarFields_beforeYearZero1",
      "assertion_line": "109",
      "exception": "junit.framework.AssertionFailedError",
      "message": "expected:\u003c0000-02-03\u003e but was:\u003c0001-02-03\u003e"
    },
    {
      "test_class": "org.joda.time.TestLocalDate_Constructors",
      "test_function": "testFactory_fromCalendarFields_beforeYearZero3",
      "assertion_line": "117",
      "exception": "junit.framework.AssertionFailedError",
      "message": "expected:\u003c-0002-02-03\u003e but was:\u003c0003-02-03\u003e"
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/joda/time/LocalDate.java",
        "src/main/java/org/joda/time/LocalDate.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.joda.time.LocalDate:fromDateFields:[Date date]:LocalDate",
            "org.joda.time.LocalDate:fromCalendarFields:[Calendar calendar]:LocalDate"
          ],
          "num": 2
        },
        {
          "qualified_names": [
            "org.joda.time.LocalDate:fromCalendarFields:[Calendar calendar]:LocalDate",
            "org.joda.time.LocalDate:fromDateFields:[Date date]:LocalDate"
          ],
          "num": 2
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "210",
            "213",
            "244",
            "246",
            "247",
            "248",
            "249"
          ],
          "num": 7
        },
        {
          "qualified_names": [
            "212",
            "244"
          ],
          "num": 2
        }
      ],
      "diff": "diff --git a/src/main/java/org/joda/time/LocalDate.java b/src/main/java/org/joda/time/LocalDate.java\nindex c86b9d7..3868531 100644\n--- a/src/main/java/org/joda/time/LocalDate.java\n+++ b/src/main/java/org/joda/time/LocalDate.java\n@@ -207,10 +207,9 @@\n         if (calendar \u003d\u003d null) {\n             throw new IllegalArgumentException(\"The calendar must not be null\");\n         }\n-        int era \u003d calendar.get(Calendar.ERA);\n         int yearOfEra \u003d calendar.get(Calendar.YEAR);\n         return new LocalDate(\n-            (era \u003d\u003d GregorianCalendar.AD ? yearOfEra : 1 - yearOfEra),\n+            yearOfEra,\n             calendar.get(Calendar.MONTH) + 1,\n             calendar.get(Calendar.DAY_OF_MONTH)\n         );\n@@ -241,12 +240,7 @@\n         if (date \u003d\u003d null) {\n             throw new IllegalArgumentException(\"The date must not be null\");\n         }\n-        if (date.getTime() \u003c 0) {\n             // handle years in era BC\n-            GregorianCalendar cal \u003d new GregorianCalendar();\n-            cal.setTime(date);\n-            return fromCalendarFields(cal);\n-        }\n         return new LocalDate(\n             date.getYear() + 1900,\n             date.getMonth() + 1,\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "ReturnStatement [7781,7930]"
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [7728,7765]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ReturnStatement [7827,8024]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [9230,9439]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/joda/time/LocalDateTime.java",
        "src/main/java/org/joda/time/LocalDateTime.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.joda.time.LocalDateTime:fromCalendarFields:[Calendar calendar]:LocalDateTime",
            "org.joda.time.LocalDateTime:fromDateFields:[Date date]:LocalDateTime"
          ],
          "num": 2
        },
        {
          "qualified_names": [
            "org.joda.time.LocalDateTime:fromDateFields:[Date date]:LocalDateTime",
            "org.joda.time.LocalDateTime:fromCalendarFields:[Calendar calendar]:LocalDateTime"
          ],
          "num": 2
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "199",
            "202",
            "237",
            "239",
            "240",
            "241",
            "242"
          ],
          "num": 7
        },
        {
          "qualified_names": [
            "201",
            "237"
          ],
          "num": 2
        }
      ],
      "diff": "diff --git a/src/main/java/org/joda/time/LocalDateTime.java b/src/main/java/org/joda/time/LocalDateTime.java\nindex e75deca..f37db3e 100644\n--- a/src/main/java/org/joda/time/LocalDateTime.java\n+++ b/src/main/java/org/joda/time/LocalDateTime.java\n@@ -196,10 +196,9 @@\n         if (calendar \u003d\u003d null) {\n             throw new IllegalArgumentException(\"The calendar must not be null\");\n         }\n-        int era \u003d calendar.get(Calendar.ERA);\n         int yearOfEra \u003d calendar.get(Calendar.YEAR);\n         return new LocalDateTime(\n-            (era \u003d\u003d GregorianCalendar.AD ? yearOfEra : 1 - yearOfEra),\n+            yearOfEra,\n             calendar.get(Calendar.MONTH) + 1,\n             calendar.get(Calendar.DAY_OF_MONTH),\n             calendar.get(Calendar.HOUR_OF_DAY),\n@@ -234,12 +233,7 @@\n         if (date \u003d\u003d null) {\n             throw new IllegalArgumentException(\"The date must not be null\");\n         }\n-        if (date.getTime() \u003c 0) {\n             // handle years in era BC\n-            GregorianCalendar cal \u003d new GregorianCalendar();\n-            cal.setTime(date);\n-            return fromCalendarFields(cal);\n-        }\n         return new LocalDateTime(\n             date.getYear() + 1900,\n             date.getMonth() + 1,\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "ReturnStatement [7365,7700]"
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [7312,7349]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ReturnStatement [7411,7794]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [9021,9230]",
          "to": ""
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  }
}