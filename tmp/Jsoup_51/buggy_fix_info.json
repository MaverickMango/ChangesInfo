{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "data/changesInfo/",
  "properties": {
    "trigger.tests": "org.jsoup.parser.HtmlParserTest::testSupportsNonAsciiTags",
    "test.dir": "src/test/java",
    "clz.modified": "org.jsoup.parser.CharacterReader",
    "src.dir": "src/main/java"
  },
  "timeoutSecond": 100,
  "proj": "Jsoup",
  "id": "51",
  "workingDir": "../bugs/Jsoup_51_tmp",
  "bug_name": "Jsoup_51",
  "derive": "defects4j",
  "trigger_tests": [
    {
      "test_class": "org.jsoup.parser.HtmlParserTest",
      "test_function": "testSupportsNonAsciiTags",
      "assertion_line": "891",
      "exception": "junit.framework.AssertionFailedError",
      "message": "expected:\u003c[Yes]\u003e but was:\u003c[]\u003e"
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/jsoup/parser/CharacterReader.java",
        "src/main/java/org/jsoup/parser/CharacterReader.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.jsoup.parser.CharacterReader:matchesLetter:[]:boolean"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "org.jsoup.parser.CharacterReader:matchesLetter:[]:boolean"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "300"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "300"
          ],
          "num": 1
        }
      ],
      "diff": "diff --git a/src/main/java/org/jsoup/parser/CharacterReader.java b/src/main/java/org/jsoup/parser/CharacterReader.java\nindex a34311a..6b0b9fb 100644\n--- a/src/main/java/org/jsoup/parser/CharacterReader.java\n+++ b/src/main/java/org/jsoup/parser/CharacterReader.java\n@@ -297,7 +297,7 @@\n         if (isEmpty())\n             return false;\n         char c \u003d input[pos];\n-        return (c \u003e\u003d \u0027A\u0027 \u0026\u0026 c \u003c\u003d \u0027Z\u0027) || (c \u003e\u003d \u0027a\u0027 \u0026\u0026 c \u003c\u003d \u0027z\u0027) || Character.isLetter(c);\n+        return (c \u003e\u003d \u0027A\u0027 \u0026\u0026 c \u003c\u003d \u0027Z\u0027) || (c \u003e\u003d \u0027a\u0027 \u0026\u0026 c \u003c\u003d \u0027z\u0027);\n     }\n \n     boolean matchesDigit() {\n",
      "operations": [
        {
          "type": "delete-tree",
          "from": "MethodInvocation [8011,8032]",
          "to": ""
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  }
}