{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "data/changesInfo/",
  "properties": {
    "trigger.tests": "com.google.javascript.jscomp.CheckAccessControlsTest::testNoPrivateAccessForProperties6,com.google.javascript.jscomp.CheckAccessControlsTest::testNoPrivateAccessForProperties8",
    "test.dir": "test",
    "clz.modified": "com.google.javascript.jscomp.CheckAccessControls",
    "src.dir": "src"
  },
  "timeoutSecond": 100,
  "proj": "Closure",
  "id": "71",
  "workingDir": "../bugs/Closure_71_tmp",
  "bug_name": "Closure_71",
  "derive": "defects4j",
  "trigger_tests": [
    {
      "test_class": "com.google.javascript.jscomp.CheckAccessControlsTest",
      "test_function": "testNoPrivateAccessForProperties6",
      "assertion_line": "402",
      "exception": "junit.framework.AssertionFailedError",
      "message": "Overriding private property of Foo.prototype."
    },
    {
      "test_class": "com.google.javascript.jscomp.CheckAccessControlsTest",
      "test_function": "testNoPrivateAccessForProperties8",
      "assertion_line": "425",
      "exception": "junit.framework.AssertionFailedError",
      "message": "There should be one error.  expected:\u003c1\u003e but was:\u003c0\u003e"
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/jscomp/CheckAccessControls.java",
        "src/com/google/javascript/jscomp/CheckAccessControls.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "com.google.javascript.jscomp.CheckAccessControls:checkPropertyVisibility:[NodeTraversal t, Node getprop, Node parent]:void"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "com.google.javascript.jscomp.CheckAccessControls:checkPropertyVisibility:[NodeTraversal t, Node getprop, Node parent]:void"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "416"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "416"
          ],
          "num": 1
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/jscomp/CheckAccessControls.java b/src/com/google/javascript/jscomp/CheckAccessControls.java\nindex 09eaa26..b23fd7a 100644\n--- a/src/com/google/javascript/jscomp/CheckAccessControls.java\n+++ b/src/com/google/javascript/jscomp/CheckAccessControls.java\n@@ -413,7 +413,7 @@\n     if (objectType !\u003d null) {\n       // Is this a normal property access, or are we trying to override\n       // an existing property?\n-      boolean isOverride \u003d parent.getJSDocInfo() !\u003d null \u0026\u0026\n+      boolean isOverride \u003d t.inGlobalScope() \u0026\u0026\n           parent.getType() \u003d\u003d Token.ASSIGN \u0026\u0026\n           parent.getFirstChild() \u003d\u003d getprop;\n \n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodInvocation [14248,14265]"
        },
        {
          "type": "delete-tree",
          "from": "InfixExpression [14248,14277]",
          "to": ""
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  }
}