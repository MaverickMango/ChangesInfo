{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "data/changesInfo/",
  "properties": {
    "trigger.tests": "org.apache.commons.math.geometry.euclidean.threed.RotationTest::testIssue639",
    "test.dir": "src/test/java",
    "clz.modified": "org.apache.commons.math.geometry.euclidean.threed.Rotation",
    "src.dir": "src/main/java"
  },
  "timeoutSecond": 100,
  "proj": "Math",
  "id": "52",
  "workingDir": "../bugs/Math_52_tmp",
  "bug_name": "Math_52",
  "derive": "defects4j",
  "trigger_tests": [
    {
      "test_class": "org.apache.commons.math.geometry.euclidean.threed.RotationTest",
      "test_function": "testIssue639",
      "assertion_line": "488",
      "exception": "junit.framework.AssertionFailedError",
      "message": "expected:\u003c0.6228370359608201\u003e but was:\u003cNaN\u003e"
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java",
        "src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.math.geometry.euclidean.threed.Rotation:Rotation:[Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2]:null"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "org.apache.commons.math.geometry.euclidean.threed.Rotation:Rotation:[Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2]:null"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "344",
            "345",
            "354",
            "360"
          ],
          "num": 4
        },
        {
          "qualified_names": [
            "344",
            "353",
            "359"
          ],
          "num": 3
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java b/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java\nindex ada0a8f..20f5b34 100644\n--- a/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java\n+++ b/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java\n@@ -341,8 +341,7 @@\n   Vector3D k     \u003d v1Su1.crossProduct(v2Su2);\n   Vector3D u3    \u003d u1.crossProduct(u2);\n   double c       \u003d k.dotProduct(u3);\n-  final double inPlaneThreshold \u003d 0.001;\n-  if (c \u003c\u003d inPlaneThreshold * k.getNorm() * u3.getNorm()) {\n+  if (c \u003d\u003d 0) {\n     // the (q1, q2, q3) vector is close to the (u1, u2) plane\n     // we try other vectors\n     Vector3D v3 \u003d Vector3D.crossProduct(v1, v2);\n@@ -351,13 +350,13 @@\n     Vector3D u2Prime \u003d u1.crossProduct(u3);\n     c \u003d k.dotProduct(u2Prime);\n \n-    if (c \u003c\u003d inPlaneThreshold * k.getNorm() * u2Prime.getNorm()) {\n+    if (c \u003d\u003d 0) {\n       // the (q1, q2, q3) vector is also close to the (u1, u3) plane,\n       // it is almost aligned with u1: we try (u2, u3) and (v2, v3)\n       k \u003d v2Su2.crossProduct(v3Su3);;\n       c \u003d k.dotProduct(u2.crossProduct(u3));;\n \n-      if (c \u003c\u003d 0) {\n+      if (c \u003d\u003d 0) {\n         // the (q1, q2, q3) vector is aligned with everything\n         // this is really the identity rotation\n         q0 \u003d 1.0;\n",
      "operations": [
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "NumberLiteral: 0 [15555,15556]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "NumberLiteral: 0 [15861,15862]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [15546,15584]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "InfixExpression [15596,15641]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "InfixExpression [15946,15996]",
          "to": ""
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  }
}