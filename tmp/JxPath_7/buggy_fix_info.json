{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "data/changesInfo/",
  "properties": {
    "trigger.tests": "org.apache.commons.jxpath.ri.compiler.CoreOperationTest::testNodeSetOperations",
    "test.dir": "src/test",
    "clz.modified": "org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan,org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual,org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan,org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual,org.apache.commons.jxpath.ri.compiler.CoreOperationRelationalExpression",
    "src.dir": "src/java"
  },
  "timeoutSecond": 100,
  "proj": "JxPath",
  "id": "7",
  "workingDir": "../bugs/JxPath_7_tmp",
  "bug_name": "JxPath_7",
  "derive": "defects4j",
  "trigger_tests": [
    {
      "test_class": "org.apache.commons.jxpath.ri.compiler.CoreOperationTest",
      "test_function": "testNodeSetOperations",
      "assertion_line": "100",
      "exception": "junit.framework.AssertionFailedError",
      "message": "Evaluating \u003c$array \u003e 0\u003e expected:\u003ctrue\u003e but was:\u003cfalse\u003e"
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationGreaterThan.java",
        "src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationGreaterThan.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan:evaluateCompare:[int compare]:boolean"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan:computeValue:[EvalContext context]:Object"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "18",
            "31",
            "32"
          ],
          "num": 3
        },
        {
          "qualified_names": [
            "19",
            "20",
            "33",
            "34",
            "35",
            "36"
          ],
          "num": 6
        }
      ],
      "diff": "diff --git a/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationGreaterThan.java b/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationGreaterThan.java\nindex 4d8c2c4..af667db 100644\n--- a/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationGreaterThan.java\n+++ b/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationGreaterThan.java\n@@ -16,6 +16,8 @@\n  */\n package org.apache.commons.jxpath.ri.compiler;\n \n+import org.apache.commons.jxpath.ri.EvalContext;\n+import org.apache.commons.jxpath.ri.InfoSetUtil;\n /**\n  * Implementation of Expression for the operation \"\u0026gt;\".\n  *\n@@ -28,8 +30,10 @@\n         super(new Expression[] { arg1, arg2 });\n     }\n \n-    protected boolean evaluateCompare(int compare) {\n-        return compare \u003e 0;\n+    public Object computeValue(EvalContext context) {\n+        double l \u003d InfoSetUtil.doubleValue(args[0].computeValue(context));\n+        double r \u003d InfoSetUtil.doubleValue(args[1].computeValue(context));\n+        return l \u003e r ? Boolean.TRUE : Boolean.FALSE;\n     }\n \n     public String getSymbol() {\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "ImportDeclaration [850,898]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ImportDeclaration [899,947]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [1289,1547]"
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [1191,1273]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationGreaterThanOrEqual.java",
        "src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationGreaterThanOrEqual.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual:evaluateCompare:[int compare]:boolean"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual:computeValue:[EvalContext context]:Object"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "18",
            "32",
            "33"
          ],
          "num": 3
        },
        {
          "qualified_names": [
            "19",
            "20",
            "34",
            "35",
            "36",
            "37"
          ],
          "num": 6
        }
      ],
      "diff": "diff --git a/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationGreaterThanOrEqual.java b/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationGreaterThanOrEqual.java\nindex c3d5720..42b4ec2 100644\n--- a/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationGreaterThanOrEqual.java\n+++ b/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationGreaterThanOrEqual.java\n@@ -16,6 +16,8 @@\n  */\n package org.apache.commons.jxpath.ri.compiler;\n \n+import org.apache.commons.jxpath.ri.EvalContext;\n+import org.apache.commons.jxpath.ri.InfoSetUtil;\n /**\n  * Implementation of Expression for the operation \"\u0026gt;\u003d\".\n  *\n@@ -29,8 +31,10 @@\n         super(new Expression[] { arg1, arg2 });\n     }\n \n-    protected boolean evaluateCompare(int compare) {\n-        return compare \u003e\u003d 0;\n+    public Object computeValue(EvalContext context) {\n+        double l \u003d InfoSetUtil.doubleValue(args[0].computeValue(context));\n+        double r \u003d InfoSetUtil.doubleValue(args[1].computeValue(context));\n+        return l \u003e\u003d r ? Boolean.TRUE : Boolean.FALSE;\n     }\n \n     public String getSymbol() {\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "ImportDeclaration [850,898]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ImportDeclaration [899,947]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [1312,1571]"
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [1214,1297]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationLessThan.java",
        "src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationLessThan.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan:evaluateCompare:[int compare]:boolean"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan:computeValue:[EvalContext context]:Object"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "18",
            "31",
            "32"
          ],
          "num": 3
        },
        {
          "qualified_names": [
            "19",
            "20",
            "33",
            "34",
            "35",
            "36"
          ],
          "num": 6
        }
      ],
      "diff": "diff --git a/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationLessThan.java b/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationLessThan.java\nindex 4c0d9ce..e0da347 100644\n--- a/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationLessThan.java\n+++ b/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationLessThan.java\n@@ -16,6 +16,8 @@\n  */\n package org.apache.commons.jxpath.ri.compiler;\n \n+import org.apache.commons.jxpath.ri.EvalContext;\n+import org.apache.commons.jxpath.ri.InfoSetUtil;\n /**\n  * Implementation of Expression for the operation \"\u0026lt;\".\n  *\n@@ -28,8 +30,10 @@\n         super(new Expression[] { arg1, arg2 });\n     }\n \n-    protected boolean evaluateCompare(int compare) {\n-        return compare \u003c 0;\n+    public Object computeValue(EvalContext context) {\n+        double l \u003d InfoSetUtil.doubleValue(args[0].computeValue(context));\n+        double r \u003d InfoSetUtil.doubleValue(args[1].computeValue(context));\n+        return l \u003c r ? Boolean.TRUE : Boolean.FALSE;\n     }\n \n     public String getSymbol() {\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "ImportDeclaration [850,898]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ImportDeclaration [899,947]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [1283,1541]"
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [1185,1267]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationLessThanOrEqual.java",
        "src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationLessThanOrEqual.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual:evaluateCompare:[int compare]:boolean"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual:computeValue:[EvalContext context]:Object"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "18",
            "32",
            "33"
          ],
          "num": 3
        },
        {
          "qualified_names": [
            "19",
            "20",
            "34",
            "35",
            "36",
            "37"
          ],
          "num": 6
        }
      ],
      "diff": "diff --git a/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationLessThanOrEqual.java b/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationLessThanOrEqual.java\nindex 7940ecb..becf2e7 100644\n--- a/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationLessThanOrEqual.java\n+++ b/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationLessThanOrEqual.java\n@@ -16,6 +16,8 @@\n  */\n package org.apache.commons.jxpath.ri.compiler;\n \n+import org.apache.commons.jxpath.ri.EvalContext;\n+import org.apache.commons.jxpath.ri.InfoSetUtil;\n /**\n  * Implementation of Expression for the operation \"\u0026lt;\u003d\".\n  *\n@@ -29,8 +31,10 @@\n         super(new Expression[] { arg1, arg2 });\n     }\n \n-    protected boolean evaluateCompare(int compare) {\n-        return compare \u003c\u003d 0;\n+    public Object computeValue(EvalContext context) {\n+        double l \u003d InfoSetUtil.doubleValue(args[0].computeValue(context));\n+        double r \u003d InfoSetUtil.doubleValue(args[1].computeValue(context));\n+        return l \u003c\u003d r ? Boolean.TRUE : Boolean.FALSE;\n     }\n \n     public String getSymbol() {\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "ImportDeclaration [850,898]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ImportDeclaration [899,947]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [1306,1565]"
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [1208,1291]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationRelationalExpression.java",
        "src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationRelationalExpression.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.jxpath.ri.compiler.CoreOperationRelationalExpression:compute:[Object left, Object right]:boolean",
            "org.apache.commons.jxpath.ri.compiler.CoreOperationRelationalExpression:reduce:[Object o]:Object",
            "org.apache.commons.jxpath.ri.compiler.CoreOperationRelationalExpression:computeValue:[EvalContext context]:Object",
            "org.apache.commons.jxpath.ri.compiler.CoreOperationRelationalExpression:containsMatch:[Iterator it, Object value]:boolean",
            "org.apache.commons.jxpath.ri.compiler.CoreOperationRelationalExpression:evaluateCompare:[int compare]:boolean",
            "org.apache.commons.jxpath.ri.compiler.CoreOperationRelationalExpression:compare:[Object l, Object r]:int",
            "org.apache.commons.jxpath.ri.compiler.CoreOperationRelationalExpression:findMatch:[Iterator lit, Iterator rit]:boolean"
          ],
          "num": 7
        },
        {
          "qualified_names": [],
          "num": 0
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "19",
            "20",
            "21",
            "22",
            "23",
            "24",
            "25",
            "26",
            "27",
            "40",
            "41",
            "42",
            "43",
            "44",
            "53",
            "54",
            "55",
            "56",
            "57",
            "58",
            "59",
            "60",
            "61",
            "62",
            "63",
            "64",
            "65",
            "66",
            "67",
            "68",
            "69",
            "70",
            "71",
            "72",
            "73",
            "74",
            "75",
            "76",
            "77",
            "78",
            "79",
            "80",
            "81",
            "82",
            "83",
            "84",
            "85",
            "86",
            "87",
            "88",
            "89",
            "90",
            "91",
            "92",
            "93",
            "94",
            "95",
            "96",
            "97",
            "98",
            "99",
            "100",
            "101",
            "102",
            "103",
            "104",
            "105",
            "106",
            "107",
            "108",
            "109",
            "110",
            "111",
            "112",
            "113",
            "114",
            "115"
          ],
          "num": 77
        },
        {
          "qualified_names": [
            "18",
            "48",
            "66"
          ],
          "num": 3
        }
      ],
      "diff": "diff --git a/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationRelationalExpression.java b/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationRelationalExpression.java\nindex bbb070d..1d6ffd5 100644\n--- a/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationRelationalExpression.java\n+++ b/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationRelationalExpression.java\n@@ -16,15 +16,6 @@\n  */\n package org.apache.commons.jxpath.ri.compiler;\n \n-import java.util.Collection;\n-import java.util.HashSet;\n-import java.util.Iterator;\n-\n-import org.apache.commons.jxpath.ri.EvalContext;\n-import org.apache.commons.jxpath.ri.InfoSetUtil;\n-import org.apache.commons.jxpath.ri.axes.InitialContext;\n-import org.apache.commons.jxpath.ri.axes.SelfContext;\n-\n /**\n  * Base implementation of Expression for the operations \"\u0026gt;\", \"\u0026gt;\u003d\", \"\u0026lt;\", \"\u0026lt;\u003d\".\n  *\n@@ -37,11 +28,6 @@\n         super(args);\n     }\n \n-    public final Object computeValue(EvalContext context) {\n-        return compute(args[0].computeValue(context), args[1]\n-                .computeValue(context)) ? Boolean.TRUE : Boolean.FALSE;\n-    }\n-\n     protected final int getPrecedence() {\n         return 3;\n     }\n@@ -50,67 +36,4 @@\n         return false;\n     }\n \n-    protected abstract boolean evaluateCompare(int compare);\n-\n-    private boolean compute(Object left, Object right) {\n-        left \u003d reduce(left);\n-        right \u003d reduce(right);\n-\n-        if (left instanceof InitialContext) {\n-            ((InitialContext) left).reset();\n-        }\n-        if (right instanceof InitialContext) {\n-            ((InitialContext) right).reset();\n-        }\n-        if (left instanceof Iterator \u0026\u0026 right instanceof Iterator) {\n-            return findMatch((Iterator) left, (Iterator) right);\n-        }\n-        if (left instanceof Iterator) {\n-            return containsMatch((Iterator) left, right);\n-        }\n-        if (right instanceof Iterator) {\n-            return containsMatch((Iterator) right, left);\n-        }\n-        return evaluateCompare(compare(left, right));\n-    }\n-\n-    private Object reduce(Object o) {\n-        if (o instanceof SelfContext) {\n-            o \u003d ((EvalContext) o).getSingleNodePointer();\n-        }\n-        if (o instanceof Collection) {\n-            o \u003d ((Collection) o).iterator();\n-        }\n-        return o;\n-    }\n-\n-    private boolean containsMatch(Iterator it, Object value) {\n-        while (it.hasNext()) {\n-            Object element \u003d it.next();\n-            if (evaluateCompare(compare(element, value))) {\n-                return true;\n-            }\n-        }\n-        return false;\n-    }\n-\n-    private boolean findMatch(Iterator lit, Iterator rit) {\n-        HashSet left \u003d new HashSet();\n-        while (lit.hasNext()) {\n-            left.add(lit.next());\n-        }\n-        while (rit.hasNext()) {\n-            if (containsMatch(left.iterator(), rit.next())) {\n-                return true;\n-            }\n-        }\n-        return false;\n-    }\n-\n-    private int compare(Object l, Object r) {\n-        double ld \u003d InfoSetUtil.doubleValue(l);\n-        double rd \u003d InfoSetUtil.doubleValue(r);\n-        return ld \u003d\u003d rd ? 0 : ld \u003c rd ? -1 : 1;\n-    }\n-\n }\n",
      "operations": [
        {
          "type": "delete-tree",
          "from": "ImportDeclaration [850,878]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ImportDeclaration [879,904]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ImportDeclaration [905,931]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ImportDeclaration [933,981]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ImportDeclaration [982,1030]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ImportDeclaration [1031,1087]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ImportDeclaration [1088,1141]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [1481,1676]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [1822,1878]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [1884,2622]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [2628,2887]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [2893,3163]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [3169,3513]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [3519,3710]",
          "to": ""
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [
        "org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan:computeValue:[EvalContext context]:Object",
        "org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual:computeValue:[EvalContext context]:Object",
        "org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual:computeValue:[EvalContext context]:Object",
        "org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan:computeValue:[EvalContext context]:Object"
      ],
      "num": 4
    },
    "delete_functions": {
      "qualified_names": [
        "org.apache.commons.jxpath.ri.compiler.CoreOperationRelationalExpression:compare:[Object l, Object r]:int",
        "org.apache.commons.jxpath.ri.compiler.CoreOperationRelationalExpression:compute:[Object left, Object right]:boolean",
        "org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual:evaluateCompare:[int compare]:boolean",
        "org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual:evaluateCompare:[int compare]:boolean",
        "org.apache.commons.jxpath.ri.compiler.CoreOperationRelationalExpression:evaluateCompare:[int compare]:boolean",
        "org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan:evaluateCompare:[int compare]:boolean",
        "org.apache.commons.jxpath.ri.compiler.CoreOperationRelationalExpression:computeValue:[EvalContext context]:Object",
        "org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan:evaluateCompare:[int compare]:boolean",
        "org.apache.commons.jxpath.ri.compiler.CoreOperationRelationalExpression:containsMatch:[Iterator it, Object value]:boolean",
        "org.apache.commons.jxpath.ri.compiler.CoreOperationRelationalExpression:findMatch:[Iterator lit, Iterator rit]:boolean",
        "org.apache.commons.jxpath.ri.compiler.CoreOperationRelationalExpression:reduce:[Object o]:Object"
      ],
      "num": 11
    }
  }
}