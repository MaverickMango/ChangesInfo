{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "data/changesInfo/",
  "properties": {
    "trigger.tests": "org.joda.time.TestDateTimeZoneCutover::testWithSecondOfMinuteInDstChange,org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange,org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange_mockZone,org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral,org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_Paris_summer,org.joda.time.TestDateTimeZoneCutover::testWithHourOfDayInDstChange,org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_NewYork_winter,org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW",
    "test.dir": "src/test/java",
    "clz.modified": "org.joda.time.chrono.ZonedChronology,org.joda.time.DateTimeZone,org.joda.time.field.LenientDateTimeField",
    "src.dir": "src/main/java"
  },
  "timeoutSecond": 100,
  "proj": "Time",
  "id": "26",
  "workingDir": "../bugs/Time_26_tmp",
  "bug_name": "Time_26",
  "derive": "defects4j",
  "trigger_tests": [
    {
      "test_class": "org.joda.time.TestDateTimeZoneCutover",
      "test_function": "testWithSecondOfMinuteInDstChange",
      "assertion_line": "1101",
      "exception": "junit.framework.ComparisonFailure",
      "message": "expected:\u003c...10-31T02:30:00.123+0[2]:00\u003e but was:\u003c...10-31T02:30:00.123+0[1]:00\u003e"
    },
    {
      "test_class": "org.joda.time.TestDateTimeZoneCutover",
      "test_function": "testWithMinuteOfHourInDstChange",
      "assertion_line": "1094",
      "exception": "junit.framework.ComparisonFailure",
      "message": "expected:\u003c...10-31T02:00:10.123+0[2]:00\u003e but was:\u003c...10-31T02:00:10.123+0[1]:00\u003e"
    },
    {
      "test_class": "org.joda.time.TestDateTimeZoneCutover",
      "test_function": "testWithMinuteOfHourInDstChange_mockZone",
      "assertion_line": "1073",
      "exception": "junit.framework.ComparisonFailure",
      "message": "expected:\u003c...10-31T01:30:00.000+0[1:0]0\u003e but was:\u003c...10-31T01:30:00.000+0[0:3]0\u003e"
    },
    {
      "test_class": "org.joda.time.TestDateTimeZoneCutover",
      "test_function": "testBug2182444_usCentral",
      "assertion_line": "1166",
      "exception": "junit.framework.AssertionFailedError",
      "message": "expected:\u003c2008-11-02T01:00:00.000-06:00\u003e but was:\u003c2008-11-02T01:00:00.000-05:00\u003e"
    },
    {
      "test_class": "org.joda.time.TestDateTimeZoneCutover",
      "test_function": "testWithMillisOfSecondInDstChange_Paris_summer",
      "assertion_line": "1108",
      "exception": "junit.framework.ComparisonFailure",
      "message": "expected:\u003c...10-31T02:30:10.000+0[2]:00\u003e but was:\u003c...10-31T02:30:10.000+0[1]:00\u003e"
    },
    {
      "test_class": "org.joda.time.TestDateTimeZoneCutover",
      "test_function": "testWithHourOfDayInDstChange",
      "assertion_line": "1087",
      "exception": "junit.framework.ComparisonFailure",
      "message": "expected:\u003c...10-31T02:30:10.123+0[2]:00\u003e but was:\u003c...10-31T02:30:10.123+0[1]:00\u003e"
    },
    {
      "test_class": "org.joda.time.TestDateTimeZoneCutover",
      "test_function": "testWithMillisOfSecondInDstChange_NewYork_winter",
      "assertion_line": "1129",
      "exception": "junit.framework.ComparisonFailure",
      "message": "expected:\u003c...11-04T01:30:00.000-0[5]:00\u003e but was:\u003c...11-04T01:30:00.000-0[4]:00\u003e"
    },
    {
      "test_class": "org.joda.time.TestDateTimeZoneCutover",
      "test_function": "testBug2182444_ausNSW",
      "assertion_line": "1187",
      "exception": "junit.framework.AssertionFailedError",
      "message": "expected:\u003c2008-04-06T02:00:00.000+11:00\u003e but was:\u003c2008-04-06T02:00:00.000+10:00\u003e"
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/joda/time/DateTimeZone.java",
        "src/main/java/org/joda/time/DateTimeZone.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.joda.time.DateTimeZone:convertLocalToUTC:[long instantLocal, boolean strict, long originalInstantUTC]:long"
          ],
          "num": 1
        },
        {
          "qualified_names": [],
          "num": 0
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "936",
            "937",
            "938",
            "939",
            "940",
            "941",
            "942",
            "943",
            "944"
          ],
          "num": 9
        },
        {
          "qualified_names": [
            "935"
          ],
          "num": 1
        }
      ],
      "diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex 23f70a5..9edb188 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -933,15 +933,6 @@\n      * @throws IllegalArgumentException if the zone has no equivalent local time\n      * @since 2.0\n      */\n-    public long convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC) {\n-        int offsetOriginal \u003d getOffset(originalInstantUTC);\n-        long instantUTC \u003d instantLocal - offsetOriginal;\n-        int offsetLocalFromOriginal \u003d getOffset(instantUTC);\n-        if (offsetLocalFromOriginal \u003d\u003d offsetOriginal) {\n-            return instantUTC;\n-        }\n-        return convertLocalToUTC(instantLocal, strict);\n-    }\n \n     /**\n      * Converts a local instant to a standard UTC instant with the same\n",
      "operations": [
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [34671,36007]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/joda/time/chrono/ZonedChronology.java",
        "src/main/java/org/joda/time/chrono/ZonedChronology.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.joda.time.chrono.ZonedChronology\\$ZonedDateTimeField:roundFloor:[long instant]:long",
            "org.joda.time.chrono.ZonedChronology\\$ZonedDateTimeField:roundCeiling:[long instant]:long",
            "org.joda.time.chrono.ZonedChronology\\$ZonedDateTimeField:set:[long instant, String text, Locale locale]:long",
            "org.joda.time.chrono.ZonedChronology\\$ZonedDateTimeField:set:[long instant, int value]:long",
            "org.joda.time.chrono.ZonedChronology\\$ZonedDateTimeField:addWrapField:[long instant, int value]:long",
            "org.joda.time.chrono.ZonedChronology\\$ZonedDateTimeField:add:[long instant, int value]:long",
            "org.joda.time.chrono.ZonedChronology\\$ZonedDateTimeField:add:[long instant, long value]:long"
          ],
          "num": 7
        },
        {
          "qualified_names": [
            "org.joda.time.chrono.ZonedChronology\\$ZonedDateTimeField:roundCeiling:[long instant]:long",
            "org.joda.time.chrono.ZonedChronology\\$ZonedDateTimeField:add:[long instant, int value]:long",
            "org.joda.time.chrono.ZonedChronology\\$ZonedDateTimeField:roundFloor:[long instant]:long",
            "org.joda.time.chrono.ZonedChronology\\$ZonedDateTimeField:add:[long instant, long value]:long",
            "org.joda.time.chrono.ZonedChronology\\$ZonedDateTimeField:set:[long instant, String text, Locale locale]:long",
            "org.joda.time.chrono.ZonedChronology\\$ZonedDateTimeField:addWrapField:[long instant, int value]:long",
            "org.joda.time.chrono.ZonedChronology\\$ZonedDateTimeField:set:[long instant, int value]:long"
          ],
          "num": 7
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "436",
            "448",
            "460",
            "467",
            "481",
            "528",
            "540"
          ],
          "num": 7
        },
        {
          "qualified_names": [
            "436",
            "448",
            "460",
            "467",
            "481",
            "528",
            "540"
          ],
          "num": 7
        }
      ],
      "diff": "diff --git a/src/main/java/org/joda/time/chrono/ZonedChronology.java b/src/main/java/org/joda/time/chrono/ZonedChronology.java\nindex 819f64e..f165f3d 100644\n--- a/src/main/java/org/joda/time/chrono/ZonedChronology.java\n+++ b/src/main/java/org/joda/time/chrono/ZonedChronology.java\n@@ -433,7 +433,7 @@\n             } else {\n                long localInstant \u003d iZone.convertUTCToLocal(instant);\n                localInstant \u003d iField.add(localInstant, value);\n-               return iZone.convertLocalToUTC(localInstant, false, instant);\n+               return iZone.convertLocalToUTC(localInstant, false);\n             }\n         }\n \n@@ -445,7 +445,7 @@\n             } else {\n                long localInstant \u003d iZone.convertUTCToLocal(instant);\n                localInstant \u003d iField.add(localInstant, value);\n-               return iZone.convertLocalToUTC(localInstant, false, instant);\n+               return iZone.convertLocalToUTC(localInstant, false);\n             }\n         }\n \n@@ -457,14 +457,14 @@\n             } else {\n                 long localInstant \u003d iZone.convertUTCToLocal(instant);\n                 localInstant \u003d iField.addWrapField(localInstant, value);\n-                return iZone.convertLocalToUTC(localInstant, false, instant);\n+                return iZone.convertLocalToUTC(localInstant, false);\n             }\n         }\n \n         public long set(long instant, int value) {\n             long localInstant \u003d iZone.convertUTCToLocal(instant);\n             localInstant \u003d iField.set(localInstant, value);\n-            long result \u003d iZone.convertLocalToUTC(localInstant, false, instant);\n+            long result \u003d iZone.convertLocalToUTC(localInstant, false);\n             if (get(result) !\u003d value) {\n                 throw new IllegalFieldValueException(iField.getType(), new Integer(value),\n                     \"Illegal instant due to time zone offset transition: \" +\n@@ -478,7 +478,7 @@\n             // cannot verify that new value stuck because set may be lenient\n             long localInstant \u003d iZone.convertUTCToLocal(instant);\n             localInstant \u003d iField.set(localInstant, text, locale);\n-            return iZone.convertLocalToUTC(localInstant, false, instant);\n+            return iZone.convertLocalToUTC(localInstant, false);\n         }\n \n         public int getDifference(long minuendInstant, long subtrahendInstant) {\n@@ -525,7 +525,7 @@\n             } else {\n                 long localInstant \u003d iZone.convertUTCToLocal(instant);\n                 localInstant \u003d iField.roundFloor(localInstant);\n-                return iZone.convertLocalToUTC(localInstant, false, instant);\n+                return iZone.convertLocalToUTC(localInstant, false);\n             }\n         }\n \n@@ -537,7 +537,7 @@\n             } else {\n                 long localInstant \u003d iZone.convertUTCToLocal(instant);\n                 localInstant \u003d iField.roundCeiling(localInstant);\n-                return iZone.convertLocalToUTC(localInstant, false, instant);\n+                return iZone.convertLocalToUTC(localInstant, false);\n             }\n         }\n \n",
      "operations": [
        {
          "type": "delete-node",
          "from": "SimpleName: instant [16996,17003]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: instant [17506,17513]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: instant [18045,18052]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: instant [18328,18335]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: instant [19099,19106]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: instant [20921,20928]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: instant [21420,21427]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/joda/time/field/LenientDateTimeField.java",
        "src/main/java/org/joda/time/field/LenientDateTimeField.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.joda.time.field.LenientDateTimeField:set:[long instant, int value]:long"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "org.joda.time.field.LenientDateTimeField:set:[long instant, int value]:long"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "75"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "75"
          ],
          "num": 1
        }
      ],
      "diff": "diff --git a/src/main/java/org/joda/time/field/LenientDateTimeField.java b/src/main/java/org/joda/time/field/LenientDateTimeField.java\nindex 6cf4c71..450a4ef 100644\n--- a/src/main/java/org/joda/time/field/LenientDateTimeField.java\n+++ b/src/main/java/org/joda/time/field/LenientDateTimeField.java\n@@ -72,6 +72,6 @@\n         long localInstant \u003d iBase.getZone().convertUTCToLocal(instant);\n         long difference \u003d FieldUtils.safeSubtract(value, get(instant));\n         localInstant \u003d getType().getField(iBase.withUTC()).add(localInstant, difference);\n-        return iBase.getZone().convertLocalToUTC(localInstant, false, instant);\n+        return iBase.getZone().convertLocalToUTC(localInstant, false);\n     }\n }\n",
      "operations": [
        {
          "type": "delete-node",
          "from": "SimpleName: instant [2631,2638]",
          "to": ""
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [
        "org.joda.time.DateTimeZone:convertLocalToUTC:[long instantLocal, boolean strict, long originalInstantUTC]:long"
      ],
      "num": 1
    }
  }
}