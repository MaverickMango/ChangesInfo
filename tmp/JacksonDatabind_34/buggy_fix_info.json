{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "data/changesInfo/",
  "properties": {
    "trigger.tests": "com.fasterxml.jackson.databind.jsonschema.NewSchemaTest::testSimpleNumbers",
    "test.dir": "src/test/java",
    "clz.modified": "com.fasterxml.jackson.databind.ser.std.NumberSerializer",
    "src.dir": "src/main/java"
  },
  "timeoutSecond": 100,
  "proj": "JacksonDatabind",
  "id": "34",
  "workingDir": "../bugs/JacksonDatabind_34_tmp",
  "bug_name": "JacksonDatabind_34",
  "derive": "defects4j",
  "trigger_tests": [
    {
      "test_class": "com.fasterxml.jackson.databind.jsonschema.NewSchemaTest",
      "test_function": "testSimpleNumbers",
      "assertion_line": "204",
      "exception": "junit.framework.ComparisonFailure",
      "message": "expected:\u003c...dec([numberType\u003dBIG_[DECIMAL]])][optProp bigInt([...\u003e but was:\u003c...dec([numberType\u003dBIG_[INTEGER]])][optProp bigInt([...\u003e"
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializer.java",
        "src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializer.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "com.fasterxml.jackson.databind.ser.std.NumberSerializer:acceptJsonFormatVisitor:[JsonFormatVisitorWrapper visitor, JavaType typeHint]:void"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "com.fasterxml.jackson.databind.ser.std.NumberSerializer:acceptJsonFormatVisitor:[JsonFormatVisitorWrapper visitor, JavaType typeHint]:void"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "81"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "81"
          ],
          "num": 1
        }
      ],
      "diff": "diff --git a/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializer.java b/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializer.java\nindex 13118a0..5624624 100644\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializer.java\n@@ -78,7 +78,7 @@\n         } else {\n             Class\u003c?\u003e h \u003d handledType();\n             if (h \u003d\u003d BigDecimal.class) {\n-                visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_DECIMAL);\n+                visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);\n             } else {\n                 // otherwise bit unclear what to call... but let\u0027s try:\n                 /*JsonNumberFormatVisitor v2 \u003d*/ visitor.expectNumberFormat(typeHint);\n",
      "operations": [
        {
          "type": "update-node",
          "from": "",
          "to": ""
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  }
}