{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "data/changesInfo/",
  "properties": {
    "trigger.tests": "org.jfree.data.general.junit.DatasetUtilitiesTests::testBug2849731_2,org.jfree.data.general.junit.DatasetUtilitiesTests::testBug2849731_3",
    "test.dir": "tests",
    "clz.modified": "org.jfree.data.general.DatasetUtilities",
    "src.dir": "source"
  },
  "timeoutSecond": 100,
  "proj": "Chart",
  "id": "2",
  "workingDir": "../bugs/Chart_2_tmp",
  "bug_name": "Chart_2",
  "derive": "defects4j",
  "trigger_tests": [
    {
      "test_class": "org.jfree.data.general.junit.DatasetUtilitiesTests",
      "test_function": "testBug2849731_2",
      "assertion_line": "1276",
      "exception": "java.lang.NullPointerException",
      "message": ""
    },
    {
      "test_class": "org.jfree.data.general.junit.DatasetUtilitiesTests",
      "test_function": "testBug2849731_3",
      "assertion_line": "1299",
      "exception": "java.lang.NullPointerException",
      "message": ""
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "source/org/jfree/data/general/DatasetUtilities.java",
        "source/org/jfree/data/general/DatasetUtilities.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.jfree.data.general.DatasetUtilities:iterateDomainBounds:[XYDataset dataset, boolean includeInterval]:Range",
            "org.jfree.data.general.DatasetUtilities:iterateRangeBounds:[XYDataset dataset, boolean includeInterval]:Range"
          ],
          "num": 2
        },
        {
          "qualified_names": [
            "org.jfree.data.general.DatasetUtilities:iterateDomainBounds:[XYDataset dataset, boolean includeInterval]:Range",
            "org.jfree.data.general.DatasetUtilities:iterateRangeBounds:[XYDataset dataset, boolean includeInterval]:Range"
          ],
          "num": 2
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "755",
            "758",
            "759",
            "760",
            "761",
            "764",
            "767",
            "1249",
            "1252",
            "1253",
            "1254",
            "1255",
            "1258",
            "1261"
          ],
          "num": 14
        },
        {
          "qualified_names": [
            "754",
            "1255"
          ],
          "num": 2
        }
      ],
      "diff": "diff --git a/source/org/jfree/data/general/DatasetUtilities.java b/source/org/jfree/data/general/DatasetUtilities.java\nindex 548d684..927cbad 100644\n--- a/source/org/jfree/data/general/DatasetUtilities.java\n+++ b/source/org/jfree/data/general/DatasetUtilities.java\n@@ -752,19 +752,12 @@\n             for (int series \u003d 0; series \u003c seriesCount; series++) {\r\n                 int itemCount \u003d dataset.getItemCount(series);\r\n                 for (int item \u003d 0; item \u003c itemCount; item++) {\r\n-                    double value \u003d intervalXYData.getXValue(series, item);\r\n                     lvalue \u003d intervalXYData.getStartXValue(series, item);\r\n                     uvalue \u003d intervalXYData.getEndXValue(series, item);\r\n-                    if (!Double.isNaN(value)) {\r\n-                        minimum \u003d Math.min(minimum, value);\r\n-                        maximum \u003d Math.max(maximum, value);\r\n-                    }\r\n                     if (!Double.isNaN(lvalue)) {\r\n                         minimum \u003d Math.min(minimum, lvalue);\r\n-                        maximum \u003d Math.max(maximum, lvalue);\r\n                     }\r\n                     if (!Double.isNaN(uvalue)) {\r\n-                        minimum \u003d Math.min(minimum, uvalue);\r\n                         maximum \u003d Math.max(maximum, uvalue);\r\n                     }\r\n                 }\r\n@@ -1246,19 +1239,12 @@\n             for (int series \u003d 0; series \u003c seriesCount; series++) {\r\n                 int itemCount \u003d dataset.getItemCount(series);\r\n                 for (int item \u003d 0; item \u003c itemCount; item++) {\r\n-                    double value \u003d ixyd.getYValue(series, item);\r\n                     double lvalue \u003d ixyd.getStartYValue(series, item);\r\n                     double uvalue \u003d ixyd.getEndYValue(series, item);\r\n-                    if (!Double.isNaN(value)) {\r\n-                        minimum \u003d Math.min(minimum, value);\r\n-                        maximum \u003d Math.max(maximum, value);\r\n-                    }\r\n                     if (!Double.isNaN(lvalue)) {\r\n                         minimum \u003d Math.min(minimum, lvalue);\r\n-                        maximum \u003d Math.max(maximum, lvalue);\r\n                     }\r\n                     if (!Double.isNaN(uvalue)) {\r\n-                        minimum \u003d Math.min(minimum, uvalue);\r\n                         maximum \u003d Math.max(maximum, uvalue);\r\n                     }\r\n                 }\r\n",
      "operations": [
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [30345,30399]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [30569,30741]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [30879,30915]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [31014,31050]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [50656,50700]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [50864,51036]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [51174,51210]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [51309,51345]",
          "to": ""
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  }
}