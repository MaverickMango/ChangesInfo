{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "data/changesInfo/",
  "properties": {
    "trigger.tests": "com.google.javascript.jscomp.TypeCheckTest::testBadInterfaceExtendsNonExistentInterfaces",
    "test.dir": "test",
    "clz.modified": "com.google.javascript.jscomp.TypeCheck",
    "src.dir": "src"
  },
  "timeoutSecond": 100,
  "proj": "Closure",
  "id": "2",
  "workingDir": "../bugs/Closure_2_tmp",
  "bug_name": "Closure_2",
  "derive": "defects4j",
  "trigger_tests": [
    {
      "test_class": "com.google.javascript.jscomp.TypeCheckTest",
      "test_function": "testBadInterfaceExtendsNonExistentInterfaces",
      "assertion_line": "3780",
      "exception": "java.lang.NullPointerException",
      "message": ""
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/jscomp/TypeCheck.java",
        "src/com/google/javascript/jscomp/TypeCheck.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "com.google.javascript.jscomp.TypeCheck:checkInterfaceConflictProperties:[NodeTraversal t, Node n, String functionName, HashMap\u003cString,ObjectType\u003e properties, HashMap\u003cString,ObjectType\u003e currentProperties, ObjectType interfaceType]:void"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "com.google.javascript.jscomp.TypeCheck:checkInterfaceConflictProperties:[NodeTraversal t, Node n, String functionName, HashMap\u003cString,ObjectType\u003e properties, HashMap\u003cString,ObjectType\u003e currentProperties, ObjectType interfaceType]:void"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "1572",
            "1575",
            "1576",
            "1578"
          ],
          "num": 4
        },
        {
          "qualified_names": [
            "1571"
          ],
          "num": 1
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 96f256d..a0f95db 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1569,13 +1569,9 @@\n       ObjectType interfaceType) {\n     ObjectType implicitProto \u003d interfaceType.getImplicitPrototype();\n     Set\u003cString\u003e currentPropertyNames;\n-    if (implicitProto \u003d\u003d null) {\n       // This can be the case if interfaceType is proxy to a non-existent\n       // object (which is a bad type annotation, but shouldn\u0027t crash).\n-      currentPropertyNames \u003d ImmutableSet.of();\n-    } else {\n       currentPropertyNames \u003d implicitProto.getOwnPropertyNames();\n-    }\n     for (String name : currentPropertyNames) {\n       ObjectType oType \u003d properties.get(name);\n       if (oType !\u003d null) {\n",
      "operations": [
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "InfixExpression [54572,54593]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "Block [54595,54795]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Block [54801,54874]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "IfStatement [54568,54874]",
          "to": ""
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  }
}