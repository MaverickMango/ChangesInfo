{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "data/changesInfo/",
  "properties": {
    "trigger.tests": "org.apache.commons.csv.CSVLexerTest::testEscapedMySqlNullValue,org.apache.commons.csv.CSVLexerTest::testEscapedCharacter,org.apache.commons.csv.CSVParserTest::testBackslashEscaping",
    "test.dir": "src/test/java",
    "clz.modified": "org.apache.commons.csv.Lexer",
    "src.dir": "src/main/java"
  },
  "timeoutSecond": 100,
  "proj": "Csv",
  "id": "3",
  "workingDir": "../bugs/Csv_3_tmp",
  "bug_name": "Csv_3",
  "derive": "defects4j",
  "trigger_tests": [
    {
      "test_class": "org.apache.commons.csv.CSVLexerTest",
      "test_function": "testEscapedMySqlNullValue",
      "assertion_line": "335",
      "exception": "junit.framework.AssertionFailedError",
      "message": "Expected: token has content \"character\\NEscaped\""
    },
    {
      "test_class": "org.apache.commons.csv.CSVLexerTest",
      "test_function": "testEscapedCharacter",
      "assertion_line": "341",
      "exception": "junit.framework.AssertionFailedError",
      "message": "Expected: token has content \"character\\aEscaped\""
    },
    {
      "test_class": "org.apache.commons.csv.CSVParserTest",
      "test_function": "testBackslashEscaping",
      "assertion_line": "322",
      "exception": "junit.framework.AssertionFailedError",
      "message": "Records do not match expected result (entry 8): arrays first differed at element [1]; expected:\u003c   \"quoted \"\" [/]\" / string\"   \u003e but was:\u003c   \"quoted \"\" []\" / string\"   \u003e"
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/csv/Lexer.java",
        "src/main/java/org/apache/commons/csv/Lexer.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.csv.Lexer:readEscape:[]:int"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "org.apache.commons.csv.Lexer:readEscape:[]:int"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "111",
            "113",
            "115"
          ],
          "num": 3
        },
        {
          "qualified_names": [
            "110"
          ],
          "num": 1
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/csv/Lexer.java b/src/main/java/org/apache/commons/csv/Lexer.java\nindex af99745..0a6a090 100644\n--- a/src/main/java/org/apache/commons/csv/Lexer.java\n+++ b/src/main/java/org/apache/commons/csv/Lexer.java\n@@ -108,11 +108,8 @@\n             throw new IOException(\"EOF whilst processing escape sequence\");\n         default:\n             // Now check for meta-characters\n-            if (isDelimiter(c) || isEscape(c) || isQuoteChar(c) || isCommentStart(c)) {\n                 return c;\n-            }\n             // indicate unexpected char - available from in.getLastChar()\n-            return END_OF_STREAM;\n         }\n     }\n \n",
      "operations": [
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "InfixExpression [4144,4212]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Block [4214,4255]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "IfStatement [4140,4255]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ReturnStatement [4342,4363]",
          "to": ""
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  }
}