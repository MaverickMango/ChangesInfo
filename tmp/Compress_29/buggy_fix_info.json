{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "data/changesInfo/",
  "properties": {
    "trigger.tests": "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest::testEncodingInputStream,org.apache.commons.compress.archivers.ArchiveStreamFactoryTest::testEncodingInputStreamAutodetect,org.apache.commons.compress.archivers.ArchiveStreamFactoryTest::testEncodingOutputStream",
    "test.dir": "src/test/java",
    "clz.modified": "org.apache.commons.compress.archivers.ArchiveStreamFactory,org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream,org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream,org.apache.commons.compress.archivers.dump.DumpArchiveInputStream,org.apache.commons.compress.archivers.tar.TarArchiveInputStream,org.apache.commons.compress.archivers.tar.TarArchiveOutputStream,org.apache.commons.compress.archivers.zip.ZipArchiveInputStream",
    "src.dir": "src/main/java"
  },
  "timeoutSecond": 100,
  "proj": "Compress",
  "id": "29",
  "workingDir": "../bugs/Compress_29_tmp",
  "bug_name": "Compress_29",
  "derive": "defects4j",
  "trigger_tests": [
    {
      "test_class": "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest",
      "test_function": "testEncodingInputStream",
      "assertion_line": "319",
      "exception": "junit.framework.AssertionFailedError",
      "message": "Tests failed: 20"
    },
    {
      "test_class": "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest",
      "test_function": "testEncodingInputStreamAutodetect",
      "assertion_line": "302",
      "exception": "junit.framework.AssertionFailedError",
      "message": "Tests failed: 24"
    },
    {
      "test_class": "org.apache.commons.compress.archivers.ArchiveStreamFactoryTest",
      "test_function": "testEncodingOutputStream",
      "assertion_line": "338",
      "exception": "junit.framework.AssertionFailedError",
      "message": "Tests failed: 14"
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java",
        "src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.compress.archivers.ArchiveStreamFactory:createArchiveOutputStream:[final String archiverName, final OutputStream out]:ArchiveOutputStream",
            "org.apache.commons.compress.archivers.ArchiveStreamFactory:createArchiveInputStream:[final InputStream in]:ArchiveInputStream"
          ],
          "num": 2
        },
        {
          "qualified_names": [
            "org.apache.commons.compress.archivers.ArchiveStreamFactory:createArchiveInputStream:[final InputStream in]:ArchiveInputStream",
            "org.apache.commons.compress.archivers.ArchiveStreamFactory:createArchiveOutputStream:[final String archiverName, final OutputStream out]:ArchiveOutputStream"
          ],
          "num": 2
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "297",
            "298",
            "299",
            "301",
            "364",
            "365",
            "366",
            "368"
          ],
          "num": 8
        },
        {
          "qualified_names": [
            "296",
            "367"
          ],
          "num": 2
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java b/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java\nindex c73e665..6bd8f03 100644\n--- a/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java\n@@ -294,11 +294,7 @@\n             }\n         }\n         if (JAR.equalsIgnoreCase(archiverName)) {\n-            if (entryEncoding !\u003d null) {\n-                return new JarArchiveOutputStream(out, entryEncoding);\n-            } else {\n                 return new JarArchiveOutputStream(out);\n-            }\n         }\n         if (CPIO.equalsIgnoreCase(archiverName)) {\n             if (entryEncoding !\u003d null) {\n@@ -361,11 +357,7 @@\n                     return new CpioArchiveInputStream(in);\n                 }\n             } else if (ArjArchiveInputStream.matches(signature, signatureLength)) {\n-                if (entryEncoding !\u003d null) {\n-                    return new ArjArchiveInputStream(in, entryEncoding);\n-                } else {\n                     return new ArjArchiveInputStream(in);\n-                }\n             } else if (SevenZFile.matches(signature, signatureLength)) {\n                 throw new StreamingNotSupportedException(SEVEN_Z);\n             }\n",
      "operations": [
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "InfixExpression [11042,11063]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "Block [11065,11151]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Block [11157,11228]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "IfStatement [11038,11228]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "InfixExpression [13955,13976]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "Block [13978,14070]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Block [14076,14153]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "IfStatement [13951,14153]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java",
        "src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:CpioArchiveInputStream:[final InputStream in, int blockSize, String encoding]:null"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:CpioArchiveInputStream:[final InputStream in, int blockSize, String encoding]:null"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "97",
            "156"
          ],
          "num": 2
        },
        {
          "qualified_names": [
            "96",
            "156"
          ],
          "num": 2
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java b/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java\nindex 915b56e..1ad5f10 100644\n--- a/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java\n@@ -94,7 +94,6 @@\n     private final ZipEncoding zipEncoding;\n \n     // the provided encoding (for unit tests)\n-    final String encoding;\n \n     /**\n      * Construct the cpio input stream with a blocksize of {@link\n@@ -153,7 +152,6 @@\n     public CpioArchiveInputStream(final InputStream in, int blockSize, String encoding) {\n         this.in \u003d in;\n         this.blockSize \u003d blockSize;\n-        this.encoding \u003d encoding;\n         this.zipEncoding \u003d ZipEncodingHelper.getZipEncoding(encoding);\n     }\n \n",
      "operations": [
        {
          "type": "delete-tree",
          "from": "FieldDeclaration [3303,3325]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [5134,5159]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java",
        "src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:CpioArchiveOutputStream:[final OutputStream out, final short format, final int blockSize, final String encoding]:null"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:CpioArchiveOutputStream:[final OutputStream out, final short format, final int blockSize, final String encoding]:null"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "98",
            "163"
          ],
          "num": 2
        },
        {
          "qualified_names": [
            "97",
            "163"
          ],
          "num": 2
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java b/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java\nindex fc829ff..d2d1282 100644\n--- a/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java\n@@ -95,7 +95,6 @@\n     private final ZipEncoding zipEncoding;\n \n     // the provided encoding (for unit tests)\n-    final String encoding;\n \n     /**\n      * Construct the cpio output stream with a specified format, a\n@@ -160,7 +159,6 @@\n         }\n         this.entryFormat \u003d format;\n         this.blockSize \u003d blockSize;\n-        this.encoding \u003d encoding;\n         this.zipEncoding \u003d ZipEncodingHelper.getZipEncoding(encoding);\n     }\n \n",
      "operations": [
        {
          "type": "delete-tree",
          "from": "FieldDeclaration [3424,3446]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [5492,5517]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java",
        "src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream:DumpArchiveInputStream:[InputStream is, String encoding]:null"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream:DumpArchiveInputStream:[InputStream is, String encoding]:null"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "80",
            "105"
          ],
          "num": 2
        },
        {
          "qualified_names": [
            "79",
            "105"
          ],
          "num": 2
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java b/src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java\nindex 09431a4..84c7839 100644\n--- a/src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java\n@@ -77,7 +77,6 @@\n     private final ZipEncoding zipEncoding;\n \n     // the provided encoding (for unit tests)\n-    final String encoding;\n \n     /**\n      * Constructor using the platform\u0027s default encoding for file\n@@ -102,7 +101,6 @@\n         throws ArchiveException {\n         this.raw \u003d new TapeInputStream(is);\n         this.hasHitEOF \u003d false;\n-        this.encoding \u003d encoding;\n         this.zipEncoding \u003d ZipEncodingHelper.getZipEncoding(encoding);\n \n         try {\n",
      "operations": [
        {
          "type": "delete-tree",
          "from": "FieldDeclaration [3005,3027]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [3662,3687]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java",
        "src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:TarArchiveInputStream:[InputStream is, int blockSize, int recordSize, String encoding]:null"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:TarArchiveInputStream:[InputStream is, int blockSize, int recordSize, String encoding]:null"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "79",
            "143"
          ],
          "num": 2
        },
        {
          "qualified_names": [
            "78",
            "143"
          ],
          "num": 2
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java\nindex c557007..b3cd0d6 100644\n--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java\n@@ -76,7 +76,6 @@\n     private final ZipEncoding zipEncoding;\n \n     // the provided encoding (for unit tests)\n-    final String encoding;\n \n     /**\n      * Constructor for TarInputStream.\n@@ -140,7 +139,6 @@\n                                  String encoding) {\n         this.is \u003d is;\n         this.hasHitEOF \u003d false;\n-        this.encoding \u003d encoding;\n         this.zipEncoding \u003d ZipEncodingHelper.getZipEncoding(encoding);\n         this.recordSize \u003d recordSize;\n         this.blockSize \u003d blockSize;\n",
      "operations": [
        {
          "type": "delete-tree",
          "from": "FieldDeclaration [2680,2702]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [4784,4809]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java",
        "src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:TarArchiveOutputStream:[OutputStream os, int blockSize, int recordSize, String encoding]:null"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:TarArchiveOutputStream:[OutputStream os, int blockSize, int recordSize, String encoding]:null"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "90",
            "156"
          ],
          "num": 2
        },
        {
          "qualified_names": [
            "89",
            "156"
          ],
          "num": 2
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java\nindex 43525c8..96ec740 100644\n--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java\n@@ -87,7 +87,6 @@\n     private final ZipEncoding zipEncoding;\n \n     // the provided encoding (for unit tests)\n-    final String encoding;\n \n     private boolean addPaxHeadersForNonAsciiNames \u003d false;\n     private static final ZipEncoding ASCII \u003d\n@@ -153,7 +152,6 @@\n     public TarArchiveOutputStream(OutputStream os, int blockSize,\n                                   int recordSize, String encoding) {\n         out \u003d new CountingOutputStream(os);\n-        this.encoding \u003d encoding;\n         this.zipEncoding \u003d ZipEncodingHelper.getZipEncoding(encoding);\n \n         this.assemLen \u003d 0;\n",
      "operations": [
        {
          "type": "delete-tree",
          "from": "FieldDeclaration [3420,3442]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [5671,5696]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java",
        "src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:ZipArchiveInputStream:[InputStream inputStream, String encoding, boolean useUnicodeExtraFields, boolean allowStoredEntriesWithDataDescriptor]:null"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:ZipArchiveInputStream:[InputStream inputStream, String encoding, boolean useUnicodeExtraFields, boolean allowStoredEntriesWithDataDescriptor]:null"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "65",
            "185"
          ],
          "num": 2
        },
        {
          "qualified_names": [
            "64",
            "185"
          ],
          "num": 2
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java\nindex 7a69141..711c149 100644\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java\n@@ -62,7 +62,6 @@\n     private final ZipEncoding zipEncoding;\n \n     // the provided encoding (for unit tests)\n-    final String encoding;\n \n     /** Whether to look for and use Unicode extra fields. */\n     private final boolean useUnicodeExtraFields;\n@@ -182,7 +181,6 @@\n                                  String encoding,\n                                  boolean useUnicodeExtraFields,\n                                  boolean allowStoredEntriesWithDataDescriptor) {\n-        this.encoding \u003d encoding;\n         zipEncoding \u003d ZipEncodingHelper.getZipEncoding(encoding);\n         this.useUnicodeExtraFields \u003d useUnicodeExtraFields;\n         in \u003d new PushbackInputStream(inputStream, buf.capacity());\n",
      "operations": [
        {
          "type": "delete-tree",
          "from": "FieldDeclaration [2497,2519]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [7134,7159]",
          "to": ""
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  }
}