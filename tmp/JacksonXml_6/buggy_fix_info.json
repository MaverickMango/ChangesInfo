{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "data/changesInfo/",
  "properties": {
    "trigger.tests": "com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization::testWith0Bytes,com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization::testWith2Bytes,com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization::testWith3Bytes,com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization::testWith4Bytes,com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization::testWith1Byte",
    "test.dir": "src/test/java",
    "clz.modified": "com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator",
    "src.dir": "src/main/java"
  },
  "timeoutSecond": 100,
  "proj": "JacksonXml",
  "id": "6",
  "workingDir": "../bugs/JacksonXml_6_tmp",
  "bug_name": "JacksonXml_6",
  "derive": "defects4j",
  "trigger_tests": [
    {
      "test_class": "com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization",
      "test_function": "testWith0Bytes",
      "assertion_line": "18",
      "exception": "com.fasterxml.jackson.databind.JsonMappingException",
      "message": "Operation not supported by generator of type com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator (through reference chain: com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization$TestPojo[\"field\"])"
    },
    {
      "test_class": "com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization",
      "test_function": "testWith2Bytes",
      "assertion_line": "30",
      "exception": "com.fasterxml.jackson.databind.JsonMappingException",
      "message": "Operation not supported by generator of type com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator (through reference chain: com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization$TestPojo[\"field\"])"
    },
    {
      "test_class": "com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization",
      "test_function": "testWith3Bytes",
      "assertion_line": "36",
      "exception": "com.fasterxml.jackson.databind.JsonMappingException",
      "message": "Operation not supported by generator of type com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator (through reference chain: com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization$TestPojo[\"field\"])"
    },
    {
      "test_class": "com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization",
      "test_function": "testWith4Bytes",
      "assertion_line": "42",
      "exception": "com.fasterxml.jackson.databind.JsonMappingException",
      "message": "Operation not supported by generator of type com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator (through reference chain: com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization$TestPojo[\"field\"])"
    },
    {
      "test_class": "com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization",
      "test_function": "testWith1Byte",
      "assertion_line": "24",
      "exception": "com.fasterxml.jackson.databind.JsonMappingException",
      "message": "Operation not supported by generator of type com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator (through reference chain: com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization$TestPojo[\"field\"])"
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/com/fasterxml/jackson/dataformat/xml/ser/ToXmlGenerator.java",
        "src/main/java/com/fasterxml/jackson/dataformat/xml/ser/ToXmlGenerator.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator:writeBinary:[Base64Variant b64variant, InputStream data, int dataLength]:int",
            "com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator:toFullBuffer:[InputStream data, final int len]:byte[]",
            "com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator:writeStreamAsBinary:[InputStream data, int len]:void"
          ],
          "num": 3
        },
        {
          "qualified_names": [
            "com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator:writeNumber:[long l]:void"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "843",
            "844",
            "845",
            "846",
            "847",
            "848",
            "849",
            "850",
            "851",
            "852",
            "853",
            "854",
            "855",
            "857",
            "858",
            "859",
            "861",
            "863",
            "864",
            "865",
            "866",
            "867",
            "868",
            "869",
            "870",
            "871",
            "872",
            "873",
            "874",
            "875",
            "876",
            "878",
            "879",
            "881",
            "882",
            "884",
            "885",
            "886",
            "887",
            "888",
            "889",
            "890",
            "891",
            "892",
            "893",
            "894",
            "895",
            "896",
            "897",
            "900",
            "901",
            "902",
            "903",
            "919",
            "920",
            "921",
            "922",
            "924",
            "925",
            "926",
            "927",
            "928",
            "929",
            "930",
            "931",
            "932"
          ],
          "num": 66
        },
        {
          "qualified_names": [
            "842",
            "971"
          ],
          "num": 2
        }
      ],
      "diff": "diff --git a/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/ToXmlGenerator.java b/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/ToXmlGenerator.java\nindex 35d09f6..63e42a1 100644\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/ToXmlGenerator.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/ToXmlGenerator.java\n@@ -840,67 +840,14 @@\n         }\n     }\n \n-    @Override\n-    public int writeBinary(Base64Variant b64variant, InputStream data, int dataLength) throws IOException\n-    {\n-        if (data \u003d\u003d null) {\n-            writeNull();\n-            return 0;\n-        }\n-        _verifyValueWrite(\"write Binary value\");\n-        if (_nextName \u003d\u003d null) {\n-            handleMissingName();\n-        }\n-        try {\n-            if (_nextIsAttribute) {\n                 // Stax2 API only has \u0027full buffer\u0027 write method:\n-                byte[] fullBuffer \u003d toFullBuffer(data, dataLength);\n-                _xmlWriter.writeBinaryAttribute(\"\", _nextName.getNamespaceURI(), _nextName.getLocalPart(), fullBuffer);\n-            } else if (checkNextIsUnwrapped()) {\n               // should we consider pretty-printing or not?\n-                writeStreamAsBinary(data, dataLength);\n \n-            } else {\n-                if (_xmlPrettyPrinter !\u003d null) {\n-                    _xmlPrettyPrinter.writeLeafElement(_xmlWriter,\n-                            _nextName.getNamespaceURI(), _nextName.getLocalPart(),\n-                            toFullBuffer(data, dataLength), 0, dataLength);\n-                } else {\n-                    _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart());\n-                    writeStreamAsBinary(data, dataLength);\n-                    _xmlWriter.writeEndElement();\n-                }\n-            }\n-        } catch (XMLStreamException e) {\n-            StaxUtil.throwAsGenerationException(e, this);\n-        }\n \n-        return dataLength;\n-    }\n \n-    private void writeStreamAsBinary(InputStream data, int len) throws IOException, XMLStreamException \n-    {\n         // base64 encodes up to 3 bytes into a 4 bytes string\n-        byte[] tmp \u003d new byte[3];\n-        int offset \u003d 0;\n-        int read;\n-        while((read \u003d data.read(tmp, offset, Math.min(3 - offset, len))) !\u003d -1) {\n-            offset +\u003d read;\n-            len -\u003d read;\n-            if(offset \u003d\u003d 3) {\n-                offset \u003d 0;\n-                _xmlWriter.writeBinary(tmp, 0, 3);\n-            }\n-            if (len \u003d\u003d 0) {\n-                break;\n-            }\n-        }\n \n         // we still have \u003c 3 bytes in the buffer\n-        if(offset \u003e 0) {\n-            _xmlWriter.writeBinary(tmp, 0, offset);\n-        }\n-    }\n \n     \n     private byte[] toFullBuffer(byte[] data, int offset, int len)\n@@ -916,20 +863,7 @@\n         return result;\n     }\n \n-    private byte[] toFullBuffer(InputStream data, final int len) throws IOException \n-    {\n-        byte[] result \u003d new byte[len];\n-        int offset \u003d 0;\n \n-        for (; offset \u003c len; ) {\n-            int count \u003d data.read(result, offset, len - offset);\n-            if (count \u003c 0) {\n-                _reportError(\"Too few bytes available: missing \"+(len - offset)+\" bytes (out of \"+len+\")\");\n-            }\n-            offset +\u003d count;\n-        }\n-        return result;\n-    }\n \n     /*\n     /**********************************************************\n",
      "operations": [
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [28383,29893]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [29899,30618]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [30979,31446]",
          "to": ""
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [
        "com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator:writeNumber:[long l]:void"
      ],
      "num": 1
    },
    "delete_functions": {
      "qualified_names": [
        "com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator:writeBinary:[Base64Variant b64variant, InputStream data, int dataLength]:int",
        "com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator:toFullBuffer:[InputStream data, final int len]:byte[]",
        "com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator:writeStreamAsBinary:[InputStream data, int len]:void"
      ],
      "num": 3
    }
  }
}