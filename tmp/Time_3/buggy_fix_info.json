{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "data/changesInfo/",
  "properties": {
    "trigger.tests": "org.joda.time.TestMutableDateTime_Adds::testAddYears_int_dstOverlapWinter_addZero,org.joda.time.TestMutableDateTime_Adds::testAddDays_int_dstOverlapWinter_addZero,org.joda.time.TestMutableDateTime_Adds::testAddWeeks_int_dstOverlapWinter_addZero,org.joda.time.TestMutableDateTime_Adds::testAdd_DurationFieldType_int_dstOverlapWinter_addZero,org.joda.time.TestMutableDateTime_Adds::testAddMonths_int_dstOverlapWinter_addZero",
    "test.dir": "src/test/java",
    "clz.modified": "org.joda.time.MutableDateTime",
    "src.dir": "src/main/java"
  },
  "timeoutSecond": 100,
  "proj": "Time",
  "id": "3",
  "workingDir": "../bugs/Time_3_tmp",
  "bug_name": "Time_3",
  "derive": "defects4j",
  "trigger_tests": [
    {
      "test_class": "org.joda.time.TestMutableDateTime_Adds",
      "test_function": "testAddYears_int_dstOverlapWinter_addZero",
      "assertion_line": "227",
      "exception": "junit.framework.ComparisonFailure",
      "message": "expected:\u003c...10-30T02:30:00.000+0[1]:00\u003e but was:\u003c...10-30T02:30:00.000+0[2]:00\u003e"
    },
    {
      "test_class": "org.joda.time.TestMutableDateTime_Adds",
      "test_function": "testAddDays_int_dstOverlapWinter_addZero",
      "assertion_line": "271",
      "exception": "junit.framework.ComparisonFailure",
      "message": "expected:\u003c...10-30T02:30:00.000+0[1]:00\u003e but was:\u003c...10-30T02:30:00.000+0[2]:00\u003e"
    },
    {
      "test_class": "org.joda.time.TestMutableDateTime_Adds",
      "test_function": "testAddWeeks_int_dstOverlapWinter_addZero",
      "assertion_line": "300",
      "exception": "junit.framework.ComparisonFailure",
      "message": "expected:\u003c...10-30T02:30:00.000+0[1]:00\u003e but was:\u003c...10-30T02:30:00.000+0[2]:00\u003e"
    },
    {
      "test_class": "org.joda.time.TestMutableDateTime_Adds",
      "test_function": "testAdd_DurationFieldType_int_dstOverlapWinter_addZero",
      "assertion_line": "187",
      "exception": "junit.framework.ComparisonFailure",
      "message": "expected:\u003c...10-30T02:30:00.000+0[1]:00\u003e but was:\u003c...10-30T02:30:00.000+0[2]:00\u003e"
    },
    {
      "test_class": "org.joda.time.TestMutableDateTime_Adds",
      "test_function": "testAddMonths_int_dstOverlapWinter_addZero",
      "assertion_line": "249",
      "exception": "junit.framework.ComparisonFailure",
      "message": "expected:\u003c...10-30T02:30:00.000+0[1]:00\u003e but was:\u003c...10-30T02:30:00.000+0[2]:00\u003e"
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/joda/time/MutableDateTime.java",
        "src/main/java/org/joda/time/MutableDateTime.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.joda.time.MutableDateTime:add:[DurationFieldType type, int amount]:void",
            "org.joda.time.MutableDateTime:addMillis:[final int millis]:void",
            "org.joda.time.MutableDateTime:addWeeks:[final int weeks]:void",
            "org.joda.time.MutableDateTime:addMonths:[final int months]:void",
            "org.joda.time.MutableDateTime:addYears:[final int years]:void",
            "org.joda.time.MutableDateTime:addHours:[final int hours]:void",
            "org.joda.time.MutableDateTime:addMinutes:[final int minutes]:void",
            "org.joda.time.MutableDateTime:addDays:[final int days]:void",
            "org.joda.time.MutableDateTime:addWeekyears:[final int weekyears]:void",
            "org.joda.time.MutableDateTime:addSeconds:[final int seconds]:void"
          ],
          "num": 10
        },
        {
          "qualified_names": [
            "org.joda.time.MutableDateTime:setDate:[final ReadableInstant instant]:void",
            "org.joda.time.MutableDateTime:setDayOfMonth:[final int dayOfMonth]:void",
            "org.joda.time.MutableDateTime:addMillis:[final int millis]:void",
            "org.joda.time.MutableDateTime:setMonthOfYear:[final int monthOfYear]:void",
            "org.joda.time.MutableDateTime:addSeconds:[final int seconds]:void",
            "org.joda.time.MutableDateTime:add:[DurationFieldType type, int amount]:void",
            "org.joda.time.MutableDateTime:addHours:[final int hours]:void",
            "org.joda.time.MutableDateTime:setWeekOfWeekyear:[final int weekOfWeekyear]:void"
          ],
          "num": 8
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "639",
            "641",
            "662",
            "664",
            "685",
            "687",
            "708",
            "710",
            "731",
            "733",
            "774",
            "776",
            "797",
            "799",
            "830",
            "832",
            "863",
            "865",
            "898",
            "900"
          ],
          "num": 20
        },
        {
          "qualified_names": [
            "638",
            "663",
            "688",
            "713",
            "738",
            "783",
            "808",
            "843",
            "878",
            "915"
          ],
          "num": 10
        }
      ],
      "diff": "diff --git a/src/main/java/org/joda/time/MutableDateTime.java b/src/main/java/org/joda/time/MutableDateTime.java\nindex 9aa8602..310f55d 100644\n--- a/src/main/java/org/joda/time/MutableDateTime.java\n+++ b/src/main/java/org/joda/time/MutableDateTime.java\n@@ -636,9 +636,7 @@\n         if (type \u003d\u003d null) {\n             throw new IllegalArgumentException(\"Field must not be null\");\n         }\n-        if (amount !\u003d 0) {\n             setMillis(type.getField(getChronology()).add(getMillis(), amount));\n-        }\n     }\n \n     //-----------------------------------------------------------------------\n@@ -659,9 +657,7 @@\n      * @throws IllegalArgumentException if the value is invalid\n      */\n     public void addYears(final int years) {\n-        if (years !\u003d 0) {\n             setMillis(getChronology().years().add(getMillis(), years));\n-        }\n     }\n \n     //-----------------------------------------------------------------------\n@@ -682,9 +678,7 @@\n      * @throws IllegalArgumentException if the value is invalid\n      */\n     public void addWeekyears(final int weekyears) {\n-        if (weekyears !\u003d 0) {\n             setMillis(getChronology().weekyears().add(getMillis(), weekyears));\n-        }\n     }\n \n     //-----------------------------------------------------------------------\n@@ -705,9 +699,7 @@\n      * @throws IllegalArgumentException if the value is invalid\n      */\n     public void addMonths(final int months) {\n-        if (months !\u003d 0) {\n             setMillis(getChronology().months().add(getMillis(), months));\n-        }\n     }\n \n     //-----------------------------------------------------------------------\n@@ -728,9 +720,7 @@\n      * @throws IllegalArgumentException if the value is invalid\n      */\n     public void addWeeks(final int weeks) {\n-        if (weeks !\u003d 0) {\n             setMillis(getChronology().weeks().add(getMillis(), weeks));\n-        }\n     }\n \n     //-----------------------------------------------------------------------\n@@ -771,9 +761,7 @@\n      * @throws IllegalArgumentException if the value is invalid\n      */\n     public void addDays(final int days) {\n-        if (days !\u003d 0) {\n             setMillis(getChronology().days().add(getMillis(), days));\n-        }\n     }\n \n     //-----------------------------------------------------------------------\n@@ -794,9 +782,7 @@\n      * @throws IllegalArgumentException if the value is invalid\n      */\n     public void addHours(final int hours) {\n-        if (hours !\u003d 0) {\n             setMillis(getChronology().hours().add(getMillis(), hours));\n-        }\n     }\n     \n     //-----------------------------------------------------------------------\n@@ -827,9 +813,7 @@\n      * @throws IllegalArgumentException if the value is invalid\n      */\n     public void addMinutes(final int minutes) {\n-        if (minutes !\u003d 0) {\n             setMillis(getChronology().minutes().add(getMillis(), minutes));\n-        }\n     }\n \n     //-----------------------------------------------------------------------\n@@ -860,9 +844,7 @@\n      * @throws IllegalArgumentException if the value is invalid\n      */\n     public void addSeconds(final int seconds) {\n-        if (seconds !\u003d 0) {\n             setMillis(getChronology().seconds().add(getMillis(), seconds));\n-        }\n     }\n \n     //-----------------------------------------------------------------------\n@@ -895,9 +877,7 @@\n      * @throws IllegalArgumentException if the value is invalid\n      */\n     public void addMillis(final int millis) {\n-        if (millis !\u003d 0) {\n             setMillis(getChronology().millis().add(getMillis(), millis));\n-        }\n     }\n \n     //-----------------------------------------------------------------------\n",
      "operations": [
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "InfixExpression [23754,23765]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Block [23767,23858]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "IfStatement [23750,23858]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "InfixExpression [24442,24452]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Block [24454,24537]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "IfStatement [24438,24537]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "InfixExpression [25169,25183]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Block [25185,25276]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "IfStatement [25165,25276]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "InfixExpression [25926,25937]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Block [25939,26024]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "IfStatement [25922,26024]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "InfixExpression [26685,26695]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Block [26697,26780]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "IfStatement [26681,26780]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "InfixExpression [28048,28057]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Block [28059,28140]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "IfStatement [28044,28140]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "InfixExpression [28767,28777]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Block [28779,28862]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "IfStatement [28763,28862]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "InfixExpression [29856,29868]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Block [29870,29957]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "IfStatement [29852,29957]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "InfixExpression [30961,30973]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Block [30975,31062]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "IfStatement [30957,31062]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "InfixExpression [32211,32222]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Block [32224,32309]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "IfStatement [32207,32309]",
          "to": ""
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [
        "org.joda.time.MutableDateTime:setMonthOfYear:[final int monthOfYear]:void",
        "org.joda.time.MutableDateTime:setWeekOfWeekyear:[final int weekOfWeekyear]:void",
        "org.joda.time.MutableDateTime:setDayOfMonth:[final int dayOfMonth]:void",
        "org.joda.time.MutableDateTime:setDate:[final ReadableInstant instant]:void"
      ],
      "num": 4
    },
    "delete_functions": {
      "qualified_names": [
        "org.joda.time.MutableDateTime:addWeekyears:[final int weekyears]:void",
        "org.joda.time.MutableDateTime:addDays:[final int days]:void",
        "org.joda.time.MutableDateTime:addWeeks:[final int weeks]:void",
        "org.joda.time.MutableDateTime:addYears:[final int years]:void",
        "org.joda.time.MutableDateTime:addMinutes:[final int minutes]:void",
        "org.joda.time.MutableDateTime:addMonths:[final int months]:void"
      ],
      "num": 6
    }
  }
}