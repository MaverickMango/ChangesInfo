{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "data/changesInfo/",
  "properties": {
    "trigger.tests": "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testTrivial,org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testConstrainedRosen,org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testElliRotated,org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testEllipse,org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTwoAxes,org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigar,org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRosen,org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRastrigin,org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiagonalRosen,org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSsDiffPow,org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize,org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testAckley,org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigTab,org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiffPow,org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSphere,org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTablet,org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigarWithBoundaries,org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest::testSumSinc,org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize1,org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize2,org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize1,org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize2,org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMaximize1,org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMaximize2,org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMinimize1,org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMinimize2,org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testGetIterations,org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testGetIterations",
    "test.dir": "src/test/java",
    "clz.modified": "org.apache.commons.math3.optim.BaseOptimizer,org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer,org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer,org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer,org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer,org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer,org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer",
    "src.dir": "src/main/java"
  },
  "timeoutSecond": 100,
  "proj": "Math",
  "id": "6",
  "workingDir": "../bugs/Math_6_tmp",
  "bug_name": "Math_6",
  "derive": "defects4j",
  "trigger_tests": [
    {
      "test_class": "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest",
      "test_function": "testTrivial",
      "assertion_line": "141",
      "exception": "junit.framework.AssertionFailedError",
      "message": ""
    },
    {
      "test_class": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest",
      "test_function": "testConstrainedRosen",
      "assertion_line": "514",
      "exception": "junit.framework.AssertionFailedError",
      "message": ""
    },
    {
      "test_class": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest",
      "test_function": "testElliRotated",
      "assertion_line": "514",
      "exception": "junit.framework.AssertionFailedError",
      "message": ""
    },
    {
      "test_class": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest",
      "test_function": "testEllipse",
      "assertion_line": "514",
      "exception": "junit.framework.AssertionFailedError",
      "message": ""
    },
    {
      "test_class": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest",
      "test_function": "testTwoAxes",
      "assertion_line": "514",
      "exception": "junit.framework.AssertionFailedError",
      "message": ""
    },
    {
      "test_class": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest",
      "test_function": "testCigar",
      "assertion_line": "514",
      "exception": "junit.framework.AssertionFailedError",
      "message": ""
    },
    {
      "test_class": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest",
      "test_function": "testRosen",
      "assertion_line": "514",
      "exception": "junit.framework.AssertionFailedError",
      "message": ""
    },
    {
      "test_class": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest",
      "test_function": "testRastrigin",
      "assertion_line": "514",
      "exception": "junit.framework.AssertionFailedError",
      "message": ""
    },
    {
      "test_class": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest",
      "test_function": "testDiagonalRosen",
      "assertion_line": "514",
      "exception": "junit.framework.AssertionFailedError",
      "message": ""
    },
    {
      "test_class": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest",
      "test_function": "testSsDiffPow",
      "assertion_line": "514",
      "exception": "junit.framework.AssertionFailedError",
      "message": ""
    },
    {
      "test_class": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest",
      "test_function": "testMaximize",
      "assertion_line": "514",
      "exception": "junit.framework.AssertionFailedError",
      "message": ""
    },
    {
      "test_class": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest",
      "test_function": "testAckley",
      "assertion_line": "514",
      "exception": "junit.framework.AssertionFailedError",
      "message": ""
    },
    {
      "test_class": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest",
      "test_function": "testCigTab",
      "assertion_line": "514",
      "exception": "junit.framework.AssertionFailedError",
      "message": ""
    },
    {
      "test_class": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest",
      "test_function": "testDiffPow",
      "assertion_line": "514",
      "exception": "junit.framework.AssertionFailedError",
      "message": ""
    },
    {
      "test_class": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest",
      "test_function": "testSphere",
      "assertion_line": "514",
      "exception": "junit.framework.AssertionFailedError",
      "message": ""
    },
    {
      "test_class": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest",
      "test_function": "testTablet",
      "assertion_line": "514",
      "exception": "junit.framework.AssertionFailedError",
      "message": ""
    },
    {
      "test_class": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest",
      "test_function": "testCigarWithBoundaries",
      "assertion_line": "514",
      "exception": "junit.framework.AssertionFailedError",
      "message": ""
    },
    {
      "test_class": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest",
      "test_function": "testSumSinc",
      "assertion_line": "266",
      "exception": "junit.framework.AssertionFailedError",
      "message": ""
    },
    {
      "test_class": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest",
      "test_function": "testMaximize1",
      "assertion_line": "108",
      "exception": "junit.framework.AssertionFailedError",
      "message": ""
    },
    {
      "test_class": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest",
      "test_function": "testMaximize2",
      "assertion_line": "129",
      "exception": "junit.framework.AssertionFailedError",
      "message": ""
    },
    {
      "test_class": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest",
      "test_function": "testMinimize1",
      "assertion_line": "66",
      "exception": "junit.framework.AssertionFailedError",
      "message": ""
    },
    {
      "test_class": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest",
      "test_function": "testMinimize2",
      "assertion_line": "87",
      "exception": "junit.framework.AssertionFailedError",
      "message": ""
    },
    {
      "test_class": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest",
      "test_function": "testMaximize1",
      "assertion_line": "113",
      "exception": "junit.framework.AssertionFailedError",
      "message": ""
    },
    {
      "test_class": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest",
      "test_function": "testMaximize2",
      "assertion_line": "134",
      "exception": "junit.framework.AssertionFailedError",
      "message": ""
    },
    {
      "test_class": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest",
      "test_function": "testMinimize1",
      "assertion_line": "71",
      "exception": "junit.framework.AssertionFailedError",
      "message": ""
    },
    {
      "test_class": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest",
      "test_function": "testMinimize2",
      "assertion_line": "92",
      "exception": "junit.framework.AssertionFailedError",
      "message": ""
    },
    {
      "test_class": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest",
      "test_function": "testGetIterations",
      "exception": "junit.framework.AssertionFailedError",
      "message": ""
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java",
        "src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.math3.optim.BaseOptimizer:BaseOptimizer:[ConvergenceChecker\u003cPAIR\u003e checker]:null"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "org.apache.commons.math3.optim.BaseOptimizer:BaseOptimizer:[ConvergenceChecker\u003cPAIR\u003e checker]:null"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "51"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "51"
          ],
          "num": 1
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java b/src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java\nindex 927e17f..75c9757 100644\n--- a/src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java\n@@ -48,7 +48,7 @@\n         this.checker \u003d checker;\n \n         evaluations \u003d new Incrementor(0, new MaxEvalCallback());\n-        iterations \u003d new Incrementor(Integer.MAX_VALUE, new MaxIterCallback());\n+        iterations \u003d new Incrementor(0, new MaxIterCallback());\n     }\n \n     /**\n",
      "operations": [
        {
          "type": "insert-node",
          "from": "",
          "to": "NumberLiteral: 0 [1976,1977]"
        },
        {
          "type": "delete-node",
          "from": "QualifiedName: Integer.MAX_VALUE [1976,1993]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer.java",
        "src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer:doOptimize:[]:PointValuePair"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer:doOptimize:[]:PointValuePair"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "216",
            "222",
            "276"
          ],
          "num": 3
        },
        {
          "qualified_names": [
            "214",
            "217",
            "223",
            "277"
          ],
          "num": 4
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer.java b/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer.java\nindex bd12b54..e010781 100644\n--- a/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer.java\n@@ -211,15 +211,16 @@\n         }\n \n         PointValuePair current \u003d null;\n+        int iter \u003d 0;\n         int maxEval \u003d getMaxEvaluations();\n         while (true) {\n-            incrementIterationCount();\n+            ++iter;\n \n             final double objective \u003d computeObjectiveValue(point);\n             PointValuePair previous \u003d current;\n             current \u003d new PointValuePair(point, objective);\n             if (previous !\u003d null) {\n-                if (checker.converged(getIterations(), previous, current)) {\n+                if (checker.converged(iter, previous, current)) {\n                     // We have found an optimum.\n                     return current;\n                 }\n@@ -273,7 +274,7 @@\n             steepestDescent \u003d newSteepestDescent;\n \n             // Compute conjugate search direction.\n-            if (getIterations() % n \u003d\u003d 0 ||\n+            if (iter % n \u003d\u003d 0 ||\n                 beta \u003c 0) {\n                 // Break conjugation: reset search direction.\n                 searchDirection \u003d steepestDescent.clone();\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [8261,8274]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [8353,8360]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: iter [10670,10674]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: iter [8610,8614]"
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [8331,8357]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodInvocation [8607,8622]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodInvocation [10678,10693]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java",
        "src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:doOptimize:[]:PointValuePair"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:doOptimize:[]:PointValuePair"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "388"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "387"
          ],
          "num": 1
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java b/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java\nindex fed67b1..0303041 100644\n--- a/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java\n@@ -385,7 +385,6 @@\n \n         generationLoop:\n         for (iterations \u003d 1; iterations \u003c\u003d maxIterations; iterations++) {\n-            incrementIterationCount();\n \n             // Generate and evaluate lambda offspring\n             final RealMatrix arz \u003d randn1(dimension, lambda);\n",
      "operations": [
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [15357,15383]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer.java",
        "src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer:doOptimize:[]:PointValuePair"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer:doOptimize:[]:PointValuePair"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "192",
            "226"
          ],
          "num": 2
        },
        {
          "qualified_names": [
            "191",
            "193",
            "227"
          ],
          "num": 3
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer.java b/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer.java\nindex afe8d2f..9572820 100644\n--- a/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer.java\n@@ -188,8 +188,9 @@\n         double[] x \u003d guess;\n         double fVal \u003d computeObjectiveValue(x);\n         double[] x1 \u003d x.clone();\n+        int iter \u003d 0;\n         while (true) {\n-            incrementIterationCount();\n+            ++iter;\n \n             double fX \u003d fVal;\n             double fX2 \u003d 0;\n@@ -223,7 +224,7 @@\n             final PointValuePair current \u003d new PointValuePair(x, fVal);\n             if (!stop) { // User-defined stopping criteria.\n                 if (checker !\u003d null) {\n-                    stop \u003d checker.converged(getIterations(), previous, current);\n+                    stop \u003d checker.converged(iter, previous, current);\n                 }\n             }\n             if (stop) {\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [7743,7756]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [7792,7799]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: iter [9007,9011]"
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [7770,7796]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodInvocation [9004,9019]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizer.java",
        "src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizer.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer:doOptimize:[]:PointValuePair"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer:doOptimize:[]:PointValuePair"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "158",
            "175"
          ],
          "num": 2
        },
        {
          "qualified_names": [
            "158",
            "175"
          ],
          "num": 2
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizer.java b/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizer.java\nindex 0dd644e..9ea2324 100644\n--- a/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizer.java\n@@ -155,7 +155,7 @@\n         int iteration \u003d 0;\n         final ConvergenceChecker\u003cPointValuePair\u003e checker \u003d getConvergenceChecker();\n         while (true) {\n-            if (getIterations() \u003e 0) {\n+            if (iteration \u003e 0) {\n                 boolean converged \u003d true;\n                 for (int i \u003d 0; i \u003c simplex.getSize(); i++) {\n                     PointValuePair prev \u003d previous[i];\n@@ -172,7 +172,7 @@\n             previous \u003d simplex.getPoints();\n             simplex.iterate(evalFunc, comparator);\n \n-            incrementIterationCount();\n+\t\t\t++iteration;\n         }\n     }\n \n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [7065,7077]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: iteration [6443,6452]"
        },
        {
          "type": "delete-tree",
          "from": "MethodInvocation [6443,6458]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [7080,7106]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer.java",
        "src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer:doOptimize:[]:PointVectorValuePair"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer:doOptimize:[]:PointVectorValuePair"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "107",
            "159"
          ],
          "num": 2
        },
        {
          "qualified_names": [
            "106",
            "108",
            "160"
          ],
          "num": 3
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer.java b/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer.java\nindex 844ed22..a2834f2 100644\n--- a/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer.java\n@@ -103,8 +103,9 @@\n \n         // iterate until convergence is reached\n         PointVectorValuePair current \u003d null;\n+        int iter \u003d 0;\n         for (boolean converged \u003d false; !converged;) {\n-            incrementIterationCount();\n+            ++iter;\n \n             // evaluate the objective function and its jacobian\n             PointVectorValuePair previous \u003d current;\n@@ -156,7 +157,7 @@\n \n             // Check convergence.\n             if (previous !\u003d null) {\n-                converged \u003d checker.converged(getIterations(), previous, current);\n+                converged \u003d checker.converged(iter, previous, current);\n                 if (converged) {\n                     setCost(computeCost(currentResiduals));\n                     return current;\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [4164,4177]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [4245,4252]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: iter [6559,6563]"
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [4223,4249]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodInvocation [6556,6571]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java",
        "src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer:doOptimize:[]:PointVectorValuePair"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer:doOptimize:[]:PointVectorValuePair"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "324",
            "325",
            "489"
          ],
          "num": 3
        },
        {
          "qualified_names": [
            "322",
            "325",
            "489"
          ],
          "num": 3
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java b/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java\nindex 4016131..ca2d138 100644\n--- a/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java\n@@ -319,10 +319,10 @@\n         // Outer loop.\n         lmPar \u003d 0;\n         boolean firstIteration \u003d true;\n+        int iter \u003d 0;\n         final ConvergenceChecker\u003cPointVectorValuePair\u003e checker \u003d getConvergenceChecker();\n         while (true) {\n-            incrementIterationCount();\n-\n+            ++iter;\n             final PointVectorValuePair previous \u003d current;\n \n             // QR decomposition of the jacobian matrix\n@@ -486,7 +486,7 @@\n                     // tests for convergence.\n                     if (checker !\u003d null) {\n                         // we use the vectorial convergence checker\n-                        if (checker.converged(getIterations(), previous, current)) {\n+                        if (checker.converged(iter, previous, current)) {\n                             setCost(currentCost);\n                             return current;\n                         }\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [15015,15028]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [15154,15161]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: iter [21901,21905]"
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [15132,15158]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodInvocation [21899,21914]",
          "to": ""
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  }
}