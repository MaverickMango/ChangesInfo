{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "data/changesInfo/",
  "properties": {
    "trigger.tests": "org.apache.commons.codec.binary.Base32InputStreamTest::testSkipToEnd,org.apache.commons.codec.binary.Base32InputStreamTest::testCodec130,org.apache.commons.codec.binary.Base32InputStreamTest::testSkipWrongArgument,org.apache.commons.codec.binary.Base32InputStreamTest::testAvailable,org.apache.commons.codec.binary.Base32InputStreamTest::testSkipPastEnd,org.apache.commons.codec.binary.Base32InputStreamTest::testSkipBig,org.apache.commons.codec.binary.Base64InputStreamTest::testSkipToEnd,org.apache.commons.codec.binary.Base64InputStreamTest::testCodec130,org.apache.commons.codec.binary.Base64InputStreamTest::testSkipWrongArgument,org.apache.commons.codec.binary.Base64InputStreamTest::testAvailable,org.apache.commons.codec.binary.Base64InputStreamTest::testSkipPastEnd,org.apache.commons.codec.binary.Base64InputStreamTest::testSkipBig",
    "test.dir": "src/test/java",
    "clz.modified": "org.apache.commons.codec.binary.BaseNCodecInputStream",
    "src.dir": "src/main/java"
  },
  "timeoutSecond": 100,
  "proj": "Codec",
  "id": "12",
  "workingDir": "../bugs/Codec_12_tmp",
  "bug_name": "Codec_12",
  "derive": "defects4j",
  "trigger_tests": [
    {
      "test_class": "org.apache.commons.codec.binary.Base32InputStreamTest",
      "test_function": "testSkipToEnd",
      "assertion_line": "528",
      "exception": "junit.framework.AssertionFailedError",
      "message": "expected:\u003c-1\u003e but was:\u003c183\u003e"
    },
    {
      "test_class": "org.apache.commons.codec.binary.Base32InputStreamTest",
      "test_function": "testCodec130",
      "assertion_line": "63",
      "exception": "junit.framework.AssertionFailedError",
      "message": "expected:\u003c[ello World]\u003e but was:\u003c[\f����"
    },
    {
      "test_class": "org.apache.commons.codec.binary.Base32InputStreamTest",
      "test_function": "testSkipWrongArgument",
      "assertion_line": "156",
      "exception": "junit.framework.AssertionFailedError",
      "message": "Expected exception: java.lang.IllegalArgumentException"
    },
    {
      "test_class": "org.apache.commons.codec.binary.Base32InputStreamTest",
      "test_function": "testSkipPastEnd",
      "assertion_line": "510",
      "exception": "junit.framework.AssertionFailedError",
      "message": "expected:\u003c3\u003e but was:\u003c8\u003e"
    },
    {
      "test_class": "org.apache.commons.codec.binary.Base32InputStreamTest",
      "test_function": "testSkipBig",
      "assertion_line": "494",
      "exception": "junit.framework.AssertionFailedError",
      "message": "expected:\u003c3\u003e but was:\u003c8\u003e"
    },
    {
      "test_class": "org.apache.commons.codec.binary.Base64InputStreamTest",
      "test_function": "testSkipToEnd",
      "assertion_line": "539",
      "exception": "junit.framework.AssertionFailedError",
      "message": "expected:\u003c-1\u003e but was:\u003c255\u003e"
    },
    {
      "test_class": "org.apache.commons.codec.binary.Base64InputStreamTest",
      "test_function": "testCodec130",
      "assertion_line": "73",
      "exception": "junit.framework.AssertionFailedError",
      "message": "expected:\u003c[ello World]\u003e but was:\u003c[\u0019[\u001b\u001b�\u0015�ܛ\u0019]\u003e"
    },
    {
      "test_class": "org.apache.commons.codec.binary.Base64InputStreamTest",
      "test_function": "testSkipWrongArgument",
      "assertion_line": "164",
      "exception": "junit.framework.AssertionFailedError",
      "message": "Expected exception: java.lang.IllegalArgumentException"
    },
    {
      "test_class": "org.apache.commons.codec.binary.Base64InputStreamTest",
      "test_function": "testSkipPastEnd",
      "assertion_line": "521",
      "exception": "junit.framework.AssertionFailedError",
      "message": "expected:\u003c6\u003e but was:\u003c8\u003e"
    },
    {
      "test_class": "org.apache.commons.codec.binary.Base64InputStreamTest",
      "test_function": "testSkipBig",
      "assertion_line": "488",
      "exception": "junit.framework.AssertionFailedError",
      "message": "expected:\u003c6\u003e but was:\u003c8\u003e"
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java",
        "src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.codec.binary.BaseNCodecInputStream:available:[]:int",
            "org.apache.commons.codec.binary.BaseNCodecInputStream:skip:[long n]:long"
          ],
          "num": 2
        },
        {
          "qualified_names": [],
          "num": 0
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "142",
            "143",
            "144",
            "145",
            "146",
            "149",
            "150",
            "151",
            "153",
            "154",
            "155",
            "156",
            "157",
            "158",
            "159",
            "160",
            "161",
            "162",
            "163",
            "164",
            "165",
            "166",
            "174",
            "181",
            "182",
            "183",
            "184",
            "185",
            "186"
          ],
          "num": 29
        },
        {
          "qualified_names": [
            "141",
            "195"
          ],
          "num": 2
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java b/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java\nindex d1eb77b..02cb18a 100644\n--- a/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java\n+++ b/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java\n@@ -139,31 +139,9 @@\n      *\n      * @throws IllegalArgumentException if the provided skip length is negative\n      */\n-    @Override\n-    public long skip(long n) throws IOException {\n-        if (n \u003c 0) {\n-            throw new IllegalArgumentException(\"Negative skip length\");\n-        }\n \n         // skip in chunks of 512 bytes\n-        final byte[] b \u003d new byte[512];\n-        final int max \u003d (int) Math.min(n, Integer.MAX_VALUE);\n-        int total \u003d 0;\n \n-        while (total \u003c max) {\n-            int len \u003d max - total;\n-            if (len \u003e b.length) {\n-                len \u003d b.length;\n-            }\n-            len \u003d read(b, 0, len);\n-            if (len \u003d\u003d EOF) {\n-                break;\n-            }\n-            total +\u003d len;\n-        }\n-\n-        return total;\n-    }\n \n     /**\n      * {@inheritDoc}\n@@ -171,17 +149,10 @@\n      * @return \u003ccode\u003e0\u003c/code\u003e if the {@link InputStream} has reached \u003ccode\u003eEOF\u003c/code\u003e,\n      * \u003ccode\u003e1\u003c/code\u003e otherwise\n      */\n-    public int available() throws IOException {\n         // Note: the logic is similar to the InflaterInputStream:\n         //       as long as we have not reached EOF, indicate that there is more\n         //       data available. As we do not know for sure how much data is left,\n         //       just return 1 as a safe guess.\n \n         // use the EOF flag of the underlying codec instance\n-        if (baseNCodec.eof) {\n-            return 0;\n-        } else {\n-            return 1;\n-        }\n-    }\n }\n",
      "operations": [
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [4694,5458]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [5464,6117]",
          "to": ""
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [
        "org.apache.commons.codec.binary.BaseNCodecInputStream:skip:[long n]:long",
        "org.apache.commons.codec.binary.BaseNCodecInputStream:available:[]:int"
      ],
      "num": 2
    }
  }
}