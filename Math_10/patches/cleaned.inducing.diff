Only in data/changesInfo//Math_10/properties/modified_classes/inducing/src: main
diff -u -r data/changesInfo//Math_10/properties/modified_classes/inducing/src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java data/changesInfo//Math_10/cleaned/inducing/src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java
--- data/changesInfo//Math_10/properties/modified_classes/inducing/src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java	2023-12-27 22:46:11.663973462 -0800
+++ data/changesInfo//Math_10/cleaned/inducing/src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java	2023-06-20 07:10:12.207000000 -0700
@@ -569,6 +569,33 @@
     }
 
     @Test
+    public void testAtan2SpecialCases() {
+
+        DerivativeStructure pp =
+                DerivativeStructure.atan2(new DerivativeStructure(2, 2, 1, +0.0),
+                        new DerivativeStructure(2, 2, 1, +0.0));
+        Assert.assertEquals(0, pp.getValue(), 1.0e-15);
+        Assert.assertEquals(+1, FastMath.copySign(1, pp.getValue()), 1.0e-15);
+
+        DerivativeStructure pn =
+                DerivativeStructure.atan2(new DerivativeStructure(2, 2, 1, +0.0),
+                        new DerivativeStructure(2, 2, 1, -0.0));
+        Assert.assertEquals(FastMath.PI, pn.getValue(), 1.0e-15);
+
+        DerivativeStructure np =
+                DerivativeStructure.atan2(new DerivativeStructure(2, 2, 1, -0.0),
+                        new DerivativeStructure(2, 2, 1, +0.0));
+        Assert.assertEquals(0, np.getValue(), 1.0e-15);
+        Assert.assertEquals(-1, FastMath.copySign(1, np.getValue()), 1.0e-15);
+
+        DerivativeStructure nn =
+                DerivativeStructure.atan2(new DerivativeStructure(2, 2, 1, -0.0),
+                        new DerivativeStructure(2, 2, 1, -0.0));
+        Assert.assertEquals(-FastMath.PI, nn.getValue(), 1.0e-15);
+
+    }
+
+    @Test
     public void testCompositionOneVariableY() {
         double epsilon = 1.0e-13;
         for (int maxOrder = 0; maxOrder < 5; ++maxOrder) {
