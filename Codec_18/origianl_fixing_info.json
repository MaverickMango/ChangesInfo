{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "/home/liumengjiao/Desktop/CI/Benchmark/data/changesInfo/",
  "properties": {
    "trigger.tests": "org.apache.commons.codec.binary.StringUtilsTest::testEqualsCS1,org.apache.commons.codec.binary.StringUtilsTest::testEqualsCS2",
    "test.dir": "src/test/java",
    "clz.modified": "org.apache.commons.codec.binary.StringUtils",
    "src.dir": "src/main/java"
  },
  "timeoutSecond": 100,
  "proj": "Codec",
  "id": "18",
  "workingDir": "../bugs/Codec_18_buggy",
  "buggyCommit": "ca30fae3acb59a5caef3c3c21eecae7c928827e0",
  "inducingCommit": "37ba197e62d6b60037d18afc33801e6221f1b8c6",
  "originalCommit": "8c145775da55fb33104751199a28809acb657c1f",
  "bug_name": "Codec_18",
  "derive": "defects4j",
  "original_fixing_commit": "5ef5bd199a4e3df74479b4b363fa29b0b3092547",
  "buildFiles_changed": false,
  "regression": false,
  "inducing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/codec/binary/StringUtils.java",
        "src/main/java/org/apache/commons/codec/binary/StringUtils.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.codec.binary.StringUtils:getBytes:[final String string, final Charset charset]:byte[]"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "org.apache.commons.codec.binary.StringUtils:equals:[final CharSequence cs1, final CharSequence cs2]:boolean",
            "org.apache.commons.codec.binary.StringUtils:getBytes:[final String string, final Charset charset]:byte[]"
          ],
          "num": 2
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "40"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "41",
            "42",
            "43",
            "44",
            "45",
            "46",
            "47",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57",
            "58",
            "59",
            "60",
            "61",
            "62",
            "63",
            "64",
            "65",
            "66",
            "67",
            "68",
            "69",
            "70",
            "71",
            "72",
            "73",
            "74",
            "75",
            "76",
            "77",
            "78",
            "79",
            "80",
            "81",
            "82",
            "83"
          ],
          "num": 43
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/codec/binary/StringUtils.java b/src/main/java/org/apache/commons/codec/binary/StringUtils.java\nindex 14a362f..8f1f57f 100644\n--- a/src/main/java/org/apache/commons/codec/binary/StringUtils.java\n+++ b/src/main/java/org/apache/commons/codec/binary/StringUtils.java\n@@ -38,6 +38,49 @@\n public class StringUtils {\n \n     /**\n+     * \u003cp\u003e\n+     * Compares two CharSequences, returning {@code true} if they represent equal sequences of characters.\n+     * \u003c/p\u003e\n+     * \n+     * \u003cp\u003e\n+     * {@code null}s are handled without exceptions. Two {@code null} references are considered to be equal. The\n+     * comparison is case sensitive.\n+     * \u003c/p\u003e\n+     * \n+     * \u003cpre\u003e\n+     * StringUtils.equals(null, null)   \u003d true\n+     * StringUtils.equals(null, \"abc\")  \u003d false\n+     * StringUtils.equals(\"abc\", null)  \u003d false\n+     * StringUtils.equals(\"abc\", \"abc\") \u003d true\n+     * StringUtils.equals(\"abc\", \"ABC\") \u003d false\n+     * \u003c/pre\u003e\n+     * \n+     * \u003cp\u003e\n+     * Copied from Apache Commons Lang r1583482 on April 10, 2014 (day of 3.3.2 release).\n+     * \u003c/p\u003e\n+     * \n+     * @see Object#equals(Object)\n+     * @param cs1\n+     *            the first CharSequence, may be {@code null}\n+     * @param cs2\n+     *            the second CharSequence, may be {@code null}\n+     * @return {@code true} if the CharSequences are equal (case-sensitive), or both {@code null}\n+     * @since 1.10\n+     */\n+    public static boolean equals(final CharSequence cs1, final CharSequence cs2) {\n+        if (cs1 \u003d\u003d cs2) {\n+            return true;\n+        }\n+        if (cs1 \u003d\u003d null || cs2 \u003d\u003d null) {\n+            return false;\n+        }\n+        if (cs1 instanceof String \u0026\u0026 cs2 instanceof String) {\n+            return cs1.equals(cs2);\n+        }\n+        return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));\n+    }\n+\n+    /**\n      * Calls {@link String#getBytes(Charset)}\n      *\n      * @param string\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [1519,3000]"
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/codec/language/DoubleMetaphone.java",
        "src/main/java/org/apache/commons/codec/language/DoubleMetaphone.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.codec.language.DoubleMetaphone:isDoubleMetaphoneEqual:[final String value1, final String value2, final boolean alternate]:boolean"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "org.apache.commons.codec.language.DoubleMetaphone:isDoubleMetaphoneEqual:[final String value1, final String value2, final boolean alternate]:boolean"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "21",
            "244"
          ],
          "num": 2
        },
        {
          "qualified_names": [
            "22",
            "245"
          ],
          "num": 2
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/codec/language/DoubleMetaphone.java b/src/main/java/org/apache/commons/codec/language/DoubleMetaphone.java\nindex 125503a..6ccd3f2 100644\n--- a/src/main/java/org/apache/commons/codec/language/DoubleMetaphone.java\n+++ b/src/main/java/org/apache/commons/codec/language/DoubleMetaphone.java\n@@ -19,6 +19,7 @@\n \n import org.apache.commons.codec.EncoderException;\n import org.apache.commons.codec.StringEncoder;\n+import org.apache.commons.codec.binary.StringUtils;\n \n /**\n  * Encodes a string into a double metaphone value. This Implementation is based on the algorithm by \u003cCITE\u003eLawrence\n@@ -241,7 +242,7 @@\n      *          {@code false} otherwise.\n      */\n     public boolean isDoubleMetaphoneEqual(final String value1, final String value2, final boolean alternate) {\n-        return doubleMetaphone(value1, alternate).equals(doubleMetaphone(value2, alternate));\n+        return StringUtils.equals(doubleMetaphone(value1, alternate), doubleMetaphone(value2, alternate));\n     }\n \n     /**\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "ImportDeclaration [945,996]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: StringUtils [9008,9019]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        }
      ]
    }
  ],
  "inducing_type": {
    "add_classes": {
      "qualified_names": [
        "src/main/java/org/apache/commons/codec/binary/CharSequenceUtils.java"
      ],
      "num": 1
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [
        "org.apache.commons.codec.binary.StringUtils:equals:[final CharSequence cs1, final CharSequence cs2]:boolean"
      ],
      "num": 1
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  },
  "trigger_tests": [
    {
      "test_class": "org.apache.commons.codec.binary.StringUtilsTest",
      "test_function": "testEqualsCS1",
      "assertion_line": "228",
      "exception": "java.lang.StringIndexOutOfBoundsException",
      "message": "String index out of range: 3"
    },
    {
      "test_class": "org.apache.commons.codec.binary.StringUtilsTest",
      "test_function": "testEqualsCS2",
      "assertion_line": "236",
      "exception": "java.lang.StringIndexOutOfBoundsException",
      "message": "String index out of range: 3"
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/codec/binary/StringUtils.java",
        "src/main/java/org/apache/commons/codec/binary/StringUtils.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.codec.binary.StringUtils:equals:[final CharSequence cs1, final CharSequence cs2]:boolean"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "org.apache.commons.codec.binary.StringUtils:equals:[final CharSequence cs1, final CharSequence cs2]:boolean"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "81"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "81"
          ],
          "num": 1
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/codec/binary/StringUtils.java b/src/main/java/org/apache/commons/codec/binary/StringUtils.java\nindex bef55f7..e5fb718 100644\n--- a/src/main/java/org/apache/commons/codec/binary/StringUtils.java\n+++ b/src/main/java/org/apache/commons/codec/binary/StringUtils.java\n@@ -78,7 +78,7 @@\n         if (cs1 instanceof String \u0026\u0026 cs2 instanceof String) {\n             return cs1.equals(cs2);\n         }\n-        return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));\n+        return cs1.length() \u003d\u003d cs2.length() \u0026\u0026 CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, cs1.length());\n     }\n \n     /**\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "ReturnStatement [2953,3061]"
        },
        {
          "type": "delete-tree",
          "from": "ReturnStatement [2953,3053]",
          "to": ""
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  },
  "patch_changed_mths": {
    "qualified_names": [],
    "num": 0
  }
}