{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "/home/liumengjiao/Desktop/CI/Benchmark/data/changesInfo/",
  "properties": {
    "trigger.tests": "org.apache.commons.lang.StringUtilsEqualsIndexOfTest::testContainsIgnoreCase_LocaleIndependence",
    "test.dir": "src/test",
    "clz.modified": "org.apache.commons.lang.StringUtils",
    "src.dir": "src/java"
  },
  "timeoutSecond": 100,
  "proj": "Lang",
  "id": "40",
  "workingDir": "../bugs/Lang_40_buggy",
  "buggyCommit": "c72adf1b7592f302b8abefdb3b2f95782cc75aa2",
  "inducingCommit": "0c5f9f0d1f91164b9cfb3daf887fc9dbf7bd198c",
  "originalCommit": "ac9420eb93f40a6cf1e17a896a9b2de2d39d8669",
  "bug_name": "Lang_40",
  "derive": "defects4j",
  "original_fixing_commit": "8b1a8e178abb46cc048a3982636b8ec4e6ffc8dc",
  "buildFiles_changed": false,
  "regression": true,
  "inducing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/lang/StringUtils.java",
        "src/java/org/apache/commons/lang/StringUtils.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [
            "org.apache.commons.lang.StringUtils:containsIgnoreCase:[String str, String searchStr]:boolean"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "1036"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "1037",
            "1038",
            "1039",
            "1040",
            "1041",
            "1042",
            "1043",
            "1044",
            "1045",
            "1046",
            "1047",
            "1048",
            "1049",
            "1050",
            "1051",
            "1052",
            "1053",
            "1054",
            "1055",
            "1056",
            "1057",
            "1058",
            "1059",
            "1060",
            "1061",
            "1062",
            "1063",
            "1064",
            "1065",
            "1066"
          ],
          "num": 30
        }
      ],
      "diff": "diff --git a/src/java/org/apache/commons/lang/StringUtils.java b/src/java/org/apache/commons/lang/StringUtils.java\nindex 4d0d8c5..47bc32f 100644\n--- a/src/java/org/apache/commons/lang/StringUtils.java\n+++ b/src/java/org/apache/commons/lang/StringUtils.java\n@@ -1034,6 +1034,36 @@\n         return str.indexOf(searchStr) \u003e\u003d 0;\n     }\n \n+ /**\n+     * \u003cp\u003eChecks if String contains a search String irrespective of case,\n+     * handling \u003ccode\u003enull\u003c/code\u003e. This method uses\n+     * {@link #contains(String, String)}.\u003c/p\u003e\n+     *\n+     * \u003cp\u003eA \u003ccode\u003enull\u003c/code\u003e String will return \u003ccode\u003efalse\u003c/code\u003e.\u003c/p\u003e\n+     *\n+     * \u003cpre\u003e\n+     * StringUtils.contains(null, *) \u003d false\n+     * StringUtils.contains(*, null) \u003d false\n+     * StringUtils.contains(\"\", \"\") \u003d true\n+     * StringUtils.contains(\"abc\", \"\") \u003d true\n+     * StringUtils.contains(\"abc\", \"a\") \u003d true\n+     * StringUtils.contains(\"abc\", \"z\") \u003d false\n+     * StringUtils.contains(\"abc\", \"A\") \u003d true\n+     * StringUtils.contains(\"abc\", \"Z\") \u003d false\n+     * \u003c/pre\u003e\n+     *\n+     * @param str the String to check, may be null\n+     * @param searchStr the String to find, may be null\n+     * @return true if the String contains the search String irrespective of\n+     * case or false if not or \u003ccode\u003enull\u003c/code\u003e string input\n+     */\n+    public static boolean containsIgnoreCase(String str, String searchStr) {\n+        if (str \u003d\u003d null || searchStr \u003d\u003d null) {\n+            return false;\n+        }\n+        return contains(str.toUpperCase(), searchStr.toUpperCase());\n+    } \n+\n     // IndexOfAny chars\n     //-----------------------------------------------------------------------\n     /**\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [39502,40657]"
        }
      ]
    }
  ],
  "inducing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [
        "org.apache.commons.lang.StringUtils:containsIgnoreCase:[String str, String searchStr]:boolean"
      ],
      "num": 1
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  },
  "trigger_tests": [
    {
      "test_class": "org.apache.commons.lang.StringUtilsEqualsIndexOfTest",
      "test_function": "testContainsIgnoreCase_LocaleIndependence",
      "assertion_line": "341",
      "exception": "junit.framework.AssertionFailedError",
      "message": "en: 0 ÃŸ SS"
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/lang/StringUtils.java",
        "src/java/org/apache/commons/lang/StringUtils.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.lang.StringUtils:containsIgnoreCase:[String str, String searchStr]:boolean"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "org.apache.commons.lang.StringUtils:containsIgnoreCase:[String str, String searchStr]:boolean"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "1023",
            "1024",
            "1048"
          ],
          "num": 3
        },
        {
          "qualified_names": [
            "1023",
            "1024",
            "1048",
            "1049",
            "1050",
            "1051",
            "1052",
            "1053",
            "1054",
            "1055"
          ],
          "num": 10
        }
      ],
      "diff": "diff --git a/src/java/org/apache/commons/lang/StringUtils.java b/src/java/org/apache/commons/lang/StringUtils.java\nindex 6ad364b..8351b3e 100644\n--- a/src/java/org/apache/commons/lang/StringUtils.java\n+++ b/src/java/org/apache/commons/lang/StringUtils.java\n@@ -1020,8 +1020,8 @@\n \n     /**\n      * \u003cp\u003eChecks if String contains a search String irrespective of case,\n-     * handling \u003ccode\u003enull\u003c/code\u003e. This method uses\n-     * {@link #contains(String, String)}.\u003c/p\u003e\n+     * handling \u003ccode\u003enull\u003c/code\u003e. Case-insensitivity is defined as by\n+     * {@link String#equalsIgnoreCase(String)}.\n      *\n      * \u003cp\u003eA \u003ccode\u003enull\u003c/code\u003e String will return \u003ccode\u003efalse\u003c/code\u003e.\u003c/p\u003e\n      *\n@@ -1045,7 +1045,14 @@\n         if (str \u003d\u003d null || searchStr \u003d\u003d null) {\n             return false;\n         }\n-        return contains(str.toUpperCase(), searchStr.toUpperCase());\n+        int len \u003d searchStr.length();\n+        int max \u003d str.length() - len;\n+        for (int i \u003d 0; i \u003c\u003d max; i++) {\n+            if (str.regionMatches(true, i, searchStr, 0, len)) {\n+                return true;\n+            }\n+        }\n+        return false;\n     }\n \n     // IndexOfAny chars\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [40202,40231]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [40240,40269]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ForStatement [40278,40428]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ReturnStatement [40437,40450]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: equalsIgnoreCase [39260,39276]"
        },
        {
          "type": "delete-tree",
          "from": "MethodRefParameter [39244,39250]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ReturnStatement [40181,40241]",
          "to": ""
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  },
  "patch_changed_mths": {
    "qualified_names": [
      "org.apache.commons.lang.StringUtils:containsIgnoreCase(Ljava/lang/String;Ljava/lang/String;)Z"
    ],
    "num": 1
  }
}