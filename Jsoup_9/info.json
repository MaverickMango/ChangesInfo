{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "data/changesInfo/",
  "timeoutSecond": 300,
  "proj": "Jsoup",
  "id": "9",
  "workingDir": "../bugs/Jsoup_9_buggy",
  "inducingCommit": "935cab0e00f289ce5369f4c217b5eb3a3d9e33e7",
  "originalCommit": "f8841edabba28d6125dd87ed72f557e85570066b",
  "bug_name": "Jsoup_9",
  "derive": "defects4j",
  "original_fixing_commit": "2e4969497c5734d90d394103728bb517644f9157",
  "buildFiles_changed": false,
  "inducing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/jsoup/nodes/Entities.java",
        "src/main/java/org/jsoup/nodes/Entities.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "unescape"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "unescape"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "3",
            "4",
            "7",
            "25",
            "48",
            "49",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57",
            "58",
            "59",
            "61",
            "62",
            "63",
            "64",
            "65",
            "66",
            "67",
            "68",
            "69",
            "70",
            "71",
            "72",
            "73",
            "74",
            "75",
            "77",
            "78",
            "79",
            "80",
            "82",
            "83",
            "85",
            "86",
            "88",
            "89",
            "90",
            "91",
            "92"
          ],
          "num": 43
        },
        {
          "qualified_names": [
            "5",
            "6",
            "25",
            "48",
            "49",
            "51",
            "53",
            "54",
            "56",
            "57",
            "59",
            "61",
            "62",
            "63",
            "66",
            "67",
            "68",
            "69",
            "70",
            "71",
            "72",
            "73"
          ],
          "num": 22
        }
      ],
      "diff": "diff --git a/src/main/java/org/jsoup/nodes/Entities.java b/src/main/java/org/jsoup/nodes/Entities.java\nindex 37266af..35a6666 100644\n--- a/src/main/java/org/jsoup/nodes/Entities.java\n+++ b/src/main/java/org/jsoup/nodes/Entities.java\n@@ -1,10 +1,9 @@\n package org.jsoup.nodes;\n \n-import org.jsoup.parser.TokenQueue;\n-\n import java.util.HashMap;\n import java.util.Map;\n-import java.nio.charset.Charset;\n+import java.util.regex.Pattern;\n+import java.util.regex.Matcher;\n import java.nio.charset.CharsetEncoder;\n \n /**\n@@ -23,6 +22,7 @@\n     private static final Map\u003cString, Character\u003e full;\n     private static final Map\u003cCharacter, String\u003e baseByVal;\n     private static final Map\u003cCharacter, String\u003e fullByVal;\n+    private static final Pattern unescapePattern \u003d Pattern.compile(\"\u0026(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]+);?\");\n \n     static String escape(String string, CharsetEncoder encoder, EscapeMode escapeMode) {\n         StringBuilder accum \u003d new StringBuilder(string.length() * 2);\n@@ -45,52 +45,32 @@\n         if (!string.contains(\"\u0026\"))\n             return string;\n \n-        StringBuilder accum \u003d new StringBuilder(string.length());\n-        TokenQueue cq \u003d new TokenQueue(string);\n+        Matcher m \u003d unescapePattern.matcher(string); // \u0026(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]+);?\n+        StringBuffer accum \u003d new StringBuffer(string.length()); // pity matcher can\u0027t use stringbuilder, avoid syncs\n \n-        // formats dealt with: [\u0026amp] (no semi), [\u0026amp;], [\u0026#123;] (int), \u0026#\n-        while (!cq.isEmpty()) {\n-            accum.append(cq.consumeTo(\"\u0026\"));\n-            if (!cq.matches(\"\u0026\")) { // ran to end\n-                accum.append(cq.remainder());\n-                break;\n-            }\n-            cq.advance(); // past \u0026\n-            String val;\n+        while (m.find()) {\n             int charval \u003d -1;\n-\n-            boolean isNum \u003d false;\n-            if (cq.matches(\"#\")) {\n-                isNum \u003d true;\n-                cq.consume();\n-            }\n-            val \u003d cq.consumeWord(); // and num!\n-            if (val.length() \u003d\u003d 0) {\n-                accum.append(\"\u0026\");\n-                continue;\n-            }\n-            if (cq.matches(\";\"))\n-                cq.advance();\n-\n-            if (isNum) {\n+            String num \u003d m.group(3);\n+            if (num !\u003d null) {\n                 try {\n-                    if (val.charAt(0) \u003d\u003d \u0027x\u0027 || val.charAt(0) \u003d\u003d \u0027X\u0027)\n-                        charval \u003d Integer.valueOf(val.substring(1), 16);\n-                    else\n-                        charval \u003d Integer.valueOf(val, 10);\n+                    int base \u003d m.group(2) !\u003d null ? 16 : 10; // 2 is hex indicator\n+                    charval \u003d Integer.valueOf(num, base);\n                 } catch (NumberFormatException e) {\n-                    // skip\n-                }\n+                } // skip\n             } else {\n-                if (full.containsKey(val.toLowerCase()))\n-                    charval \u003d full.get(val.toLowerCase());\n+                String name \u003d m.group(1).toLowerCase();\n+                if (full.containsKey(name))\n+                    charval \u003d full.get(name);\n             }\n-            if (charval \u003d\u003d -1 || charval \u003e 0xFFFF) // out of range\n-                accum.append(\"\u0026\").append(val).append(\";\");\n-            else\n-                accum.append((char) charval);\n-        }\n \n+            if (charval !\u003d -1 || charval \u003e 0xFFFF) { // out of range\n+                String c \u003d Character.toString((char) charval);\n+                m.appendReplacement(accum, c);\n+            } else {\n+                m.appendReplacement(accum, m.group(0)); // replace with original string\n+            }\n+        }\n+        m.appendTail(accum);\n         return accum.toString();\n     }\n \n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "ImportDeclaration [74,105]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ImportDeclaration [106,137]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldDeclaration [732,835]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "WhileStatement [1833,2684]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [2693,2713]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodInvocation [1840,1848]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "MethodInvocation [1634,1665]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [1894,1918]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "METHOD_INVOCATION_RECEIVER [1634,1649]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: matcher [1650,1657]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "METHOD_INVOCATION_ARGUMENTS [1658,1664]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "InfixExpression [1935,1946]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Block [2424,2565]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Block [2571,2674]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "VariableDeclarationStatement [2228,2267]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SimpleType [2228,2234]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "VariableDeclarationFragment [2235,2266]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [1992,2032]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: name [2235,2239]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: name [2305,2309]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodInvocation [2242,2252]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: name [2351,2355]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: base [2106,2110]"
        },
        {
          "type": "delete-tree",
          "from": "ImportDeclaration [26,61]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ImportDeclaration [111,143]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [1606,1616]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "ClassInstanceCreation [1602,1624]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [1748,1780]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [1793,1913]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [1926,1939]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [1962,1973]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [2017,2039]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [2052,2148]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [2161,2184]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [2209,2308]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [2321,2371]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: isNum [2389,2394]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "NumberLiteral: 10 [2643,2645]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "InfixExpression [2444,2488]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [2514,2562]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "IfStatement [2440,2647]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: val [2804,2807]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: val [2863,2866]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [2980,3022]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [3056,3085]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "PrefixExpression [1719,1732]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "WhileStatement [1712,3095]",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        }
      ]
    }
  ],
  "inducing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  },
  "trigger_tests": [],
  "fixing_changes": [],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  }
}