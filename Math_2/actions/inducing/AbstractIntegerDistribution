===
insert-tree
---
ImportDeclaration [1011,1078]
    QualifiedName: org.apache.commons.math.exception.NumberIsTooLargeException [1018,1077]
to
CompilationUnit [0,6609]
at 4
===
insert-tree
---
ImportDeclaration [1259,1304]
    QualifiedName: org.apache.commons.math.util.FastMath [1266,1303]
to
CompilationUnit [0,6609]
at 9
===
insert-node
---
MethodDeclaration [4436,5765]
to
TypeDeclaration [1260,6608]
at 12
===
insert-tree
---
SimpleType [2190,2215]
    SimpleName: NumberIsTooLargeException [2190,2215]
to
MethodDeclaration [1925,2414]
at 6
===
insert-node
---
Javadoc [2469,2824]
to
MethodDeclaration [2420,3832]
at 0
===
insert-tree
---
SimpleType [2892,2911]
    SimpleName: OutOfRangeException [2892,2911]
to
MethodDeclaration [2420,3832]
at 6
===
insert-tree
---
Javadoc [4436,5082]
    TagElement [4447,4795]
        TextElement: This is a utility function used by  [4447,4482]
        TagElement [4482,4534]
            MethodRef [4496,4533]
                SimpleName: inverseCumulativeProbability [4497,4525]
                MethodRefParameter [4526,4532]
                    PrimitiveType: double [4526,4532]
        TextElement: . It assumes  [4534,4547]
        TagElement [4547,4564]
            TextElement:  0 < p < 1 [4553,4563]
        TextElement:  and [4564,4568]
        TextElement: that the inverse cumulative probability lies in the bracket  [4576,4636]
        TagElement [4636,4665]
            TextElement: (lower, upper] [4650,4664]
        TextElement: . The implementation does simple bisection to find the [4665,4719]
        TextElement: smallest  [4727,4736]
        TagElement [4736,4745]
            TextElement:  p [4742,4744]
        TextElement: -quantile <code>inf{x in Z | P(X<=x) >= p}</code>. [4745,4795]
    TagElement [4810,4845]
        SimpleName: p [4817,4818]
        TextElement:  the cumulative probability [4818,4845]
    TagElement [4853,4925]
        SimpleName: lower [4860,4865]
        TextElement:  a value satisfying  [4865,4885]
        TagElement [4885,4925]
            TextElement:  cumulativeProbability(lower) < p [4891,4924]
    TagElement [4933,5006]
        SimpleName: upper [4940,4945]
        TextElement:  a value satisfying  [4945,4965]
        TagElement [4965,5006]
            TextElement:  p <= cumulativeProbability(upper) [4971,5005]
    TagElement [5014,5074]
        TextElement:  the smallest  [5021,5035]
        TagElement [5035,5044]
            TextElement:  p [5041,5043]
        TextElement: -quantile of this distribution [5044,5074]
to
MethodDeclaration [4436,5765]
at 0
===
insert-node
---
Modifier: protected [5087,5096]
to
MethodDeclaration [4436,5765]
at 1
===
insert-node
---
PrimitiveType: int [5097,5100]
to
MethodDeclaration [4436,5765]
at 2
===
insert-node
---
SimpleName: solveInverseCumulativeProbability [5101,5134]
to
MethodDeclaration [4436,5765]
at 3
===
insert-tree
---
SingleVariableDeclaration [5135,5149]
    Modifier: final [5135,5140]
    PrimitiveType: double [5141,5147]
    SimpleName: p [5148,5149]
to
MethodDeclaration [4436,5765]
at 4
===
insert-tree
---
SingleVariableDeclaration [5151,5160]
    PrimitiveType: int [5151,5154]
    SimpleName: lower [5155,5160]
to
MethodDeclaration [4436,5765]
at 5
===
insert-tree
---
SingleVariableDeclaration [5162,5171]
    PrimitiveType: int [5162,5165]
    SimpleName: upper [5166,5171]
to
MethodDeclaration [4436,5765]
at 6
===
insert-node
---
Block [5173,5765]
to
MethodDeclaration [4436,5765]
at 7
===
insert-node
---
TagElement [2480,2816]
to
Javadoc [2469,2824]
at 0
===
insert-tree
---
VariableDeclarationStatement [3019,3054]
    PrimitiveType: int [3019,3022]
    VariableDeclarationFragment [3023,3053]
        SimpleName: lower [3023,3028]
        MethodInvocation [3031,3053]
            SimpleName: getSupportLowerBound [3031,3051]
to
Block [2501,3832]
at 1
===
insert-node
---
IfStatement [3063,3114]
to
Block [2501,3832]
at 2
===
insert-tree
---
IfStatement [3123,3428]
    InfixExpression [3127,3153]
        SimpleName: lower [3127,3132]
        INFIX_EXPRESSION_OPERATOR: == [3133,3135]
        QualifiedName: Integer.MIN_VALUE [3136,3153]
    Block [3155,3270]
        IfStatement [3169,3260]
            InfixExpression [3173,3213]
                MethodInvocation [3173,3208]
                    SimpleName: checkedCumulativeProbability [3173,3201]
                    METHOD_INVOCATION_ARGUMENTS [3202,3207]
                        SimpleName: lower [3202,3207]
                INFIX_EXPRESSION_OPERATOR: >= [3209,3211]
                SimpleName: p [3212,3213]
            Block [3215,3260]
                ReturnStatement [3233,3246]
                    SimpleName: lower [3240,3245]
    Block [3276,3428]
        ExpressionStatement [3290,3301]
            Assignment [3290,3300]
                SimpleName: lower [3290,3295]
                ASSIGNMENT_OPERATOR: -= [3296,3298]
                NumberLiteral: 1 [3299,3300]
to
Block [2501,3832]
at 3
===
insert-tree
---
VariableDeclarationStatement [3438,3473]
    PrimitiveType: int [3438,3441]
    VariableDeclarationFragment [3442,3472]
        SimpleName: upper [3442,3447]
        MethodInvocation [3450,3472]
            SimpleName: getSupportUpperBound [3450,3470]
to
Block [2501,3832]
at 4
===
insert-tree
---
IfStatement [3482,3533]
    InfixExpression [3486,3494]
        SimpleName: p [3486,3487]
        INFIX_EXPRESSION_OPERATOR: == [3488,3490]
        NumberLiteral: 1.0 [3491,3494]
    Block [3496,3533]
        ReturnStatement [3510,3523]
            SimpleName: upper [3517,3522]
to
Block [2501,3832]
at 5
===
insert-tree
---
VariableDeclarationStatement [3692,3729]
    Modifier: final [3692,3697]
    PrimitiveType: double [3698,3704]
    VariableDeclarationFragment [3705,3728]
        SimpleName: mu [3705,3707]
        MethodInvocation [3710,3728]
            SimpleName: getNumericalMean [3710,3726]
to
Block [2501,3832]
at 6
===
insert-tree
---
VariableDeclarationStatement [3738,3797]
    Modifier: final [3738,3743]
    PrimitiveType: double [3744,3750]
    VariableDeclarationFragment [3751,3796]
        SimpleName: sigma [3751,3756]
        MethodInvocation [3759,3796]
            METHOD_INVOCATION_RECEIVER [3759,3767]
                SimpleName: FastMath [3759,3767]
            SimpleName: sqrt [3768,3772]
            METHOD_INVOCATION_ARGUMENTS [3773,3795]
                MethodInvocation [3773,3795]
                    SimpleName: getNumericalVariance [3773,3793]
to
Block [2501,3832]
at 7
===
insert-tree
---
VariableDeclarationStatement [3806,3967]
    Modifier: final [3806,3811]
    PrimitiveType: boolean [3812,3819]
    VariableDeclarationFragment [3820,3966]
        SimpleName: chebyshevApplies [3820,3836]
        PrefixExpression [3839,3966]
            PREFIX_EXPRESSION_OPERATOR: ! [3839,3840]
            ParenthesizedExpression [3840,3966]
                InfixExpression [3841,3965]
                    MethodInvocation [3841,3862]
                        METHOD_INVOCATION_RECEIVER [3841,3847]
                            SimpleName: Double [3841,3847]
                        SimpleName: isInfinite [3848,3858]
                        METHOD_INVOCATION_ARGUMENTS [3859,3861]
                            SimpleName: mu [3859,3861]
                    INFIX_EXPRESSION_OPERATOR: || [3863,3865]
                    MethodInvocation [3866,3882]
                        METHOD_INVOCATION_RECEIVER [3866,3872]
                            SimpleName: Double [3866,3872]
                        SimpleName: isNaN [3873,3878]
                        METHOD_INVOCATION_ARGUMENTS [3879,3881]
                            SimpleName: mu [3879,3881]
                    MethodInvocation [3902,3926]
                        METHOD_INVOCATION_RECEIVER [3902,3908]
                            SimpleName: Double [3902,3908]
                        SimpleName: isInfinite [3909,3919]
                        METHOD_INVOCATION_ARGUMENTS [3920,3925]
                            SimpleName: sigma [3920,3925]
                    MethodInvocation [3930,3949]
                        METHOD_INVOCATION_RECEIVER [3930,3936]
                            SimpleName: Double [3930,3936]
                        SimpleName: isNaN [3937,3942]
                        METHOD_INVOCATION_ARGUMENTS [3943,3948]
                            SimpleName: sigma [3943,3948]
                    InfixExpression [3953,3965]
                        SimpleName: sigma [3953,3958]
                        INFIX_EXPRESSION_OPERATOR: == [3959,3961]
                        NumberLiteral: 0.0 [3962,3965]
to
Block [2501,3832]
at 8
===
insert-tree
---
IfStatement [3976,4356]
    SimpleName: chebyshevApplies [3980,3996]
    Block [3998,4356]
        VariableDeclarationStatement [4012,4052]
            PrimitiveType: double [4012,4018]
            VariableDeclarationFragment [4019,4051]
                SimpleName: k [4019,4020]
                MethodInvocation [4023,4051]
                    METHOD_INVOCATION_RECEIVER [4023,4031]
                        SimpleName: FastMath [4023,4031]
                    SimpleName: sqrt [4032,4036]
                    METHOD_INVOCATION_ARGUMENTS [4037,4050]
                        InfixExpression [4037,4050]
                            ParenthesizedExpression [4037,4046]
                                InfixExpression [4038,4045]
                                    NumberLiteral: 1.0 [4038,4041]
                                    INFIX_EXPRESSION_OPERATOR: - [4042,4043]
                                    SimpleName: p [4044,4045]
                            INFIX_EXPRESSION_OPERATOR: / [4047,4048]
                            SimpleName: p [4049,4050]
        VariableDeclarationStatement [4065,4093]
            PrimitiveType: double [4065,4071]
            VariableDeclarationFragment [4072,4092]
                SimpleName: tmp [4072,4075]
                InfixExpression [4078,4092]
                    SimpleName: mu [4078,4080]
                    INFIX_EXPRESSION_OPERATOR: - [4081,4082]
                    InfixExpression [4083,4092]
                        SimpleName: k [4083,4084]
                        INFIX_EXPRESSION_OPERATOR: * [4085,4086]
                        SimpleName: sigma [4087,4092]
        IfStatement [4106,4190]
            InfixExpression [4110,4121]
                SimpleName: tmp [4110,4113]
                INFIX_EXPRESSION_OPERATOR: > [4114,4115]
                SimpleName: lower [4116,4121]
            Block [4123,4190]
                ExpressionStatement [4141,4176]
                    Assignment [4141,4175]
                        SimpleName: lower [4141,4146]
                        ASSIGNMENT_OPERATOR: = [4147,4148]
                        InfixExpression [4149,4175]
                            ParenthesizedExpression [4149,4171]
                                CastExpression [4150,4170]
                                    PrimitiveType: int [4151,4154]
                                    MethodInvocation [4156,4170]
                                        METHOD_INVOCATION_RECEIVER [4156,4160]
                                            SimpleName: Math [4156,4160]
                                        SimpleName: ceil [4161,4165]
                                        METHOD_INVOCATION_ARGUMENTS [4166,4169]
                                            SimpleName: tmp [4166,4169]
                            INFIX_EXPRESSION_OPERATOR: - [4172,4173]
                            NumberLiteral: 1 [4174,4175]
        ExpressionStatement [4203,4215]
            Assignment [4203,4214]
                SimpleName: k [4203,4204]
                ASSIGNMENT_OPERATOR: = [4205,4206]
                InfixExpression [4207,4214]
                    NumberLiteral: 1.0 [4207,4210]
                    INFIX_EXPRESSION_OPERATOR: / [4211,4212]
                    SimpleName: k [4213,4214]
        ExpressionStatement [4228,4249]
            Assignment [4228,4248]
                SimpleName: tmp [4228,4231]
                ASSIGNMENT_OPERATOR: = [4232,4233]
                InfixExpression [4234,4248]
                    SimpleName: mu [4234,4236]
                    INFIX_EXPRESSION_OPERATOR: + [4237,4238]
                    InfixExpression [4239,4248]
                        SimpleName: k [4239,4240]
                        INFIX_EXPRESSION_OPERATOR: * [4241,4242]
                        SimpleName: sigma [4243,4248]
        IfStatement [4262,4346]
            InfixExpression [4266,4277]
                SimpleName: tmp [4266,4269]
                INFIX_EXPRESSION_OPERATOR: < [4270,4271]
                SimpleName: upper [4272,4277]
            Block [4279,4346]
                ExpressionStatement [4297,4332]
                    Assignment [4297,4331]
                        SimpleName: upper [4297,4302]
                        ASSIGNMENT_OPERATOR: = [4303,4304]
                        InfixExpression [4305,4331]
                            ParenthesizedExpression [4305,4327]
                                CastExpression [4306,4326]
                                    PrimitiveType: int [4307,4310]
                                    MethodInvocation [4312,4326]
                                        METHOD_INVOCATION_RECEIVER [4312,4316]
                                            SimpleName: Math [4312,4316]
                                        SimpleName: ceil [4317,4321]
                                        METHOD_INVOCATION_ARGUMENTS [4322,4325]
                                            SimpleName: tmp [4322,4325]
                            INFIX_EXPRESSION_OPERATOR: - [4328,4329]
                            NumberLiteral: 1 [4330,4331]
to
Block [2501,3832]
at 9
===
insert-tree
---
ReturnStatement [4366,4424]
    MethodInvocation [4373,4423]
        SimpleName: solveInverseCumulativeProbability [4373,4406]
        METHOD_INVOCATION_ARGUMENTS [4407,4422]
            SimpleName: p [4407,4408]
            SimpleName: lower [4410,4415]
            SimpleName: upper [4417,4422]
to
Block [2501,3832]
at 10
===
move-tree
---
WhileStatement [2813,3603]
    InfixExpression [2820,2827]
        SimpleName: x0 [2820,2822]
        INFIX_EXPRESSION_OPERATOR: < [2823,2824]
        SimpleName: x1 [2825,2827]
    Block [2829,3603]
        VariableDeclarationStatement [2843,2871]
            PrimitiveType: int [2843,2846]
            VariableDeclarationFragment [2847,2870]
                SimpleName: xm [2847,2849]
                InfixExpression [2852,2870]
                    SimpleName: x0 [2852,2854]
                    INFIX_EXPRESSION_OPERATOR: + [2855,2856]
                    InfixExpression [2857,2870]
                        ParenthesizedExpression [2857,2866]
                            InfixExpression [2858,2865]
                                SimpleName: x1 [2858,2860]
                                INFIX_EXPRESSION_OPERATOR: - [2861,2862]
                                SimpleName: x0 [2863,2865]
                        INFIX_EXPRESSION_OPERATOR: / [2867,2868]
                        NumberLiteral: 2 [2869,2870]
        ExpressionStatement [2884,2922]
            Assignment [2884,2921]
                SimpleName: pm [2884,2886]
                ASSIGNMENT_OPERATOR: = [2887,2888]
                MethodInvocation [2889,2921]
                    SimpleName: checkedCumulativeProbability [2889,2917]
                    METHOD_INVOCATION_ARGUMENTS [2918,2920]
                        SimpleName: xm [2918,2920]
        IfStatement [2935,3593]
            InfixExpression [2939,2945]
                SimpleName: pm [2939,2941]
                INFIX_EXPRESSION_OPERATOR: > [2942,2943]
                SimpleName: p [2944,2945]
            Block [2947,3267]
                IfStatement [2994,3253]
                    InfixExpression [2998,3006]
                        SimpleName: xm [2998,3000]
                        INFIX_EXPRESSION_OPERATOR: == [3001,3003]
                        SimpleName: x1 [3004,3006]
                    Block [3008,3157]
                        ExpressionStatement [3134,3139]
                            PrefixExpression [3134,3138]
                                PREFIX_EXPRESSION_OPERATOR: -- [3134,3136]
                                SimpleName: x1 [3136,3138]
                    Block [3163,3253]
                        ExpressionStatement [3227,3235]
                            Assignment [3227,3234]
                                SimpleName: x1 [3227,3229]
                                ASSIGNMENT_OPERATOR: = [3230,3231]
                                SimpleName: xm [3232,3234]
            Block [3273,3593]
                IfStatement [3320,3579]
                    InfixExpression [3324,3332]
                        SimpleName: xm [3324,3326]
                        INFIX_EXPRESSION_OPERATOR: == [3327,3329]
                        SimpleName: x0 [3330,3332]
                    Block [3334,3483]
                        ExpressionStatement [3460,3465]
                            PrefixExpression [3460,3464]
                                PREFIX_EXPRESSION_OPERATOR: ++ [3460,3462]
                                SimpleName: x0 [3462,3464]
                    Block [3489,3579]
                        ExpressionStatement [3553,3561]
                            Assignment [3553,3560]
                                SimpleName: x0 [3553,3555]
                                ASSIGNMENT_OPERATOR: = [3556,3557]
                                SimpleName: xm [3558,3560]
to
Block [5173,5765]
at 0
===
insert-tree
---
ReturnStatement [5746,5759]
    SimpleName: upper [5753,5758]
to
Block [5173,5765]
at 1
===
move-tree
---
TagElement [2424,2437]
to
TagElement [2480,2816]
at 0
===
insert-node
---
TextElement: The default implementation returns [2508,2542]
to
TagElement [2480,2816]
at 1
===
insert-node
---
TextElement: <ul> [2550,2554]
to
TagElement [2480,2816]
at 2
===
insert-node
---
TextElement: <li> [2562,2566]
to
TagElement [2480,2816]
at 3
===
insert-tree
---
TagElement [2566,2597]
    MethodRef [2573,2596]
        SimpleName: getSupportLowerBound [2574,2594]
to
TagElement [2480,2816]
at 4
===
insert-node
---
TextElement:  for  [2597,2602]
to
TagElement [2480,2816]
at 5
===
insert-tree
---
TagElement [2602,2615]
    TextElement:  p = 0 [2608,2614]
to
TagElement [2480,2816]
at 6
===
insert-node
---
TextElement: ,</li> [2615,2621]
to
TagElement [2480,2816]
at 7
===
insert-node
---
TextElement: <li> [2629,2633]
to
TagElement [2480,2816]
at 8
===
insert-tree
---
TagElement [2633,2664]
    MethodRef [2640,2663]
        SimpleName: getSupportUpperBound [2641,2661]
to
TagElement [2480,2816]
at 9
===
insert-node
---
TextElement:  for  [2664,2669]
to
TagElement [2480,2816]
at 10
===
insert-tree
---
TagElement [2669,2682]
    TextElement:  p = 1 [2675,2681]
to
TagElement [2480,2816]
at 11
===
insert-node
---
TextElement: , and</li> [2682,2692]
to
TagElement [2480,2816]
at 12
===
insert-node
---
TextElement: <li> [2700,2704]
to
TagElement [2480,2816]
at 13
===
insert-tree
---
TagElement [2704,2764]
    MethodRef [2711,2763]
        SimpleName: solveInverseCumulativeProbability [2712,2745]
        MethodRefParameter [2746,2752]
            PrimitiveType: double [2746,2752]
        MethodRefParameter [2754,2757]
            PrimitiveType: int [2754,2757]
        MethodRefParameter [2759,2762]
            PrimitiveType: int [2759,2762]
to
TagElement [2480,2816]
at 14
===
insert-node
---
TextElement:  for [2764,2768]
to
TagElement [2480,2816]
at 15
===
insert-tree
---
TagElement [2780,2797]
    TextElement:  0 < p < 1 [2786,2796]
to
TagElement [2480,2816]
at 16
===
insert-node
---
TextElement: .</li> [2797,2803]
to
TagElement [2480,2816]
at 17
===
insert-node
---
TextElement: </ul> [2811,2816]
to
TagElement [2480,2816]
at 18
===
insert-tree
---
InfixExpression [3067,3075]
    SimpleName: p [3067,3068]
    INFIX_EXPRESSION_OPERATOR: == [3069,3071]
    NumberLiteral: 0.0 [3072,3075]
to
IfStatement [3063,3114]
at 0
===
insert-node
---
Block [3077,3114]
to
IfStatement [3063,3114]
at 1
===
move-tree
---
SimpleName: x0 [2820,2822]
to
InfixExpression [2820,2827]
at 1
===
update-node
---
TextElement:  P(x0 <= X <= x1) = P(X <= x1) - P(X <= x0 - 1) [2025,2072]
replace  P(x0 <= X <= x1) = P(X <= x1) - P(X <= x0 - 1) by  P(x0 < X <= x1) = P(X <= x1) - P(X <= x0)
===
move-tree
---
ReturnStatement [3816,3826]
    SimpleName: x0 [3823,3825]
to
Block [3077,3114]
at 0
===
insert-tree
---
InfixExpression [5190,5199]
    SimpleName: lower [5190,5195]
    INFIX_EXPRESSION_OPERATOR: + [5196,5197]
    NumberLiteral: 1 [5198,5199]
to
InfixExpression [2820,2827]
at 0
===
update-node
---
SimpleName: x0 [2820,2822]
replace x0 by upper
===
insert-tree
---
VariableDeclarationStatement [5223,5252]
    PrimitiveType: int [5223,5226]
    VariableDeclarationFragment [5227,5251]
        SimpleName: xm [5227,5229]
        InfixExpression [5232,5251]
            ParenthesizedExpression [5232,5247]
                InfixExpression [5233,5246]
                    SimpleName: lower [5233,5238]
                    INFIX_EXPRESSION_OPERATOR: + [5239,5240]
                    SimpleName: upper [5241,5246]
            INFIX_EXPRESSION_OPERATOR: / [5248,5249]
            NumberLiteral: 2 [5250,5251]
to
Block [2829,3603]
at 0
===
insert-node
---
IfStatement [5265,5550]
to
Block [2829,3603]
at 1
===
insert-node
---
VariableDeclarationStatement [5564,5609]
to
Block [2829,3603]
at 2
===
move-tree
---
SimpleName: x1 [2310,2312]
to
ClassInstanceCreation [2185,2323]
at 3
===
update-node
---
NumberLiteral: 0 [2519,2520]
replace 0 by 0.0
===
update-node
---
NumberLiteral: 1 [2528,2529]
replace 1 by 1.0
===
update-node
---
SimpleName: x0 [3823,3825]
replace x0 by lower
===
insert-tree
---
InfixExpression [5269,5293]
    InfixExpression [5269,5279]
        SimpleName: xm [5269,5271]
        INFIX_EXPRESSION_OPERATOR: < [5272,5273]
        SimpleName: lower [5274,5279]
    INFIX_EXPRESSION_OPERATOR: || [5280,5282]
    InfixExpression [5283,5293]
        SimpleName: xm [5283,5285]
        INFIX_EXPRESSION_OPERATOR: > [5286,5287]
        SimpleName: upper [5288,5293]
to
IfStatement [5265,5550]
at 0
===
move-tree
---
Block [3163,3253]
    ExpressionStatement [3227,3235]
        Assignment [3227,3234]
            SimpleName: x1 [3227,3229]
            ASSIGNMENT_OPERATOR: = [3230,3231]
            SimpleName: xm [3232,3234]
to
IfStatement [5265,5550]
at 1
===
insert-node
---
PrimitiveType: double [5564,5570]
to
VariableDeclarationStatement [5564,5609]
at 0
===
insert-node
---
VariableDeclarationFragment [5571,5608]
to
VariableDeclarationStatement [5564,5609]
at 1
===
move-tree
---
SimpleName: x0 [2400,2402]
to
METHOD_INVOCATION_ARGUMENTS [2400,2406]
at 0
===
insert-node
---
ExpressionStatement [5503,5536]
to
Block [3163,3253]
at 0
===
move-tree
---
SimpleName: pm [2884,2886]
to
VariableDeclarationFragment [5571,5608]
at 0
===
move-tree
---
MethodInvocation [2889,2921]
    SimpleName: checkedCumulativeProbability [2889,2917]
    METHOD_INVOCATION_ARGUMENTS [2918,2920]
        SimpleName: xm [2918,2920]
to
VariableDeclarationFragment [5571,5608]
at 1
===
update-node
---
INFIX_EXPRESSION_OPERATOR: > [2942,2943]
replace > by >=
===
insert-tree
---
ExpressionStatement [5653,5664]
    Assignment [5653,5663]
        SimpleName: upper [5653,5658]
        ASSIGNMENT_OPERATOR: = [5659,5660]
        SimpleName: xm [5661,5663]
to
Block [2947,3267]
at 0
===
move-tree
---
ExpressionStatement [3553,3561]
    Assignment [3553,3560]
        SimpleName: x0 [3553,3555]
        ASSIGNMENT_OPERATOR: = [3556,3557]
        SimpleName: xm [3558,3560]
to
Block [3273,3593]
at 0
===
update-node
---
SimpleName: NumberIsTooSmallException [2189,2214]
replace NumberIsTooSmallException by NumberIsTooLargeException
===
insert-node
---
Assignment [5503,5535]
to
ExpressionStatement [5503,5536]
at 0
===
move-tree
---
SimpleName: xm [2847,2849]
to
Assignment [5503,5535]
at 0
===
insert-node
---
ASSIGNMENT_OPERATOR: = [5506,5507]
to
Assignment [5503,5535]
at 1
===
move-tree
---
InfixExpression [2852,2870]
    SimpleName: x0 [2852,2854]
    INFIX_EXPRESSION_OPERATOR: + [2855,2856]
    InfixExpression [2857,2870]
        ParenthesizedExpression [2857,2866]
            InfixExpression [2858,2865]
                SimpleName: x1 [2858,2860]
                INFIX_EXPRESSION_OPERATOR: - [2861,2862]
                SimpleName: x0 [2863,2865]
        INFIX_EXPRESSION_OPERATOR: / [2867,2868]
        NumberLiteral: 2 [2869,2870]
to
Assignment [5503,5535]
at 2
===
update-node
---
SimpleName: x0 [3553,3555]
replace x0 by lower
===
update-node
---
SimpleName: x0 [2852,2854]
replace x0 by lower
===
update-node
---
SimpleName: x1 [2858,2860]
replace x1 by upper
===
update-node
---
SimpleName: x0 [2863,2865]
replace x0 by lower
===
delete-tree
---
ImportDeclaration [1011,1078]
    QualifiedName: org.apache.commons.math.exception.NumberIsTooSmallException [1018,1077]
===
delete-node
---
INFIX_EXPRESSION_OPERATOR: - [2403,2404]
===
===
delete-node
---
NumberLiteral: 1 [2405,2406]
===
===
delete-node
---
InfixExpression [2400,2406]
===
===
delete-node
---
TextElement:   [2437,2438]
===
===
delete-node
---
TagElement [2424,2438]
===
===
delete-node
---
Javadoc [2420,2440]
===
===
delete-tree
---
VariableDeclarationStatement [2712,2744]
    PrimitiveType: int [2712,2715]
    VariableDeclarationFragment [2716,2743]
        SimpleName: x0 [2716,2718]
        MethodInvocation [2721,2743]
            SimpleName: getDomainLowerBound [2721,2740]
            METHOD_INVOCATION_ARGUMENTS [2741,2742]
                SimpleName: p [2741,2742]
===
delete-tree
---
VariableDeclarationStatement [2753,2785]
    PrimitiveType: int [2753,2756]
    VariableDeclarationFragment [2757,2784]
        SimpleName: x1 [2757,2759]
        MethodInvocation [2762,2784]
            SimpleName: getDomainUpperBound [2762,2781]
            METHOD_INVOCATION_ARGUMENTS [2782,2783]
                SimpleName: p [2782,2783]
===
delete-tree
---
VariableDeclarationStatement [2794,2804]
    PrimitiveType: double [2794,2800]
    VariableDeclarationFragment [2801,2803]
        SimpleName: pm [2801,2803]
===
delete-tree
---
ExpressionStatement [3664,3702]
    Assignment [3664,3701]
        SimpleName: pm [3664,3666]
        ASSIGNMENT_OPERATOR: = [3667,3668]
        MethodInvocation [3669,3701]
            SimpleName: checkedCumulativeProbability [3669,3697]
            METHOD_INVOCATION_ARGUMENTS [3698,3700]
                SimpleName: x0 [3698,3700]
===
delete-tree
---
WhileStatement [3711,3806]
    InfixExpression [3718,3724]
        SimpleName: pm [3718,3720]
        INFIX_EXPRESSION_OPERATOR: > [3721,3722]
        SimpleName: p [3723,3724]
    Block [3726,3806]
        ExpressionStatement [3740,3745]
            PrefixExpression [3740,3744]
                PREFIX_EXPRESSION_OPERATOR: -- [3740,3742]
                SimpleName: x0 [3742,3744]
        ExpressionStatement [3758,3796]
            Assignment [3758,3795]
                SimpleName: pm [3758,3760]
                ASSIGNMENT_OPERATOR: = [3761,3762]
                MethodInvocation [3763,3795]
                    SimpleName: checkedCumulativeProbability [3763,3791]
                    METHOD_INVOCATION_ARGUMENTS [3792,3794]
                        SimpleName: x0 [3792,3794]
===
delete-node
---
SimpleName: x1 [2825,2827]
===
===
delete-tree
---
ExpressionStatement [3227,3235]
    Assignment [3227,3234]
        SimpleName: x1 [3227,3229]
        ASSIGNMENT_OPERATOR: = [3230,3231]
        SimpleName: xm [3232,3234]
===
delete-node
---
PrimitiveType: int [2843,2846]
===
===
delete-node
---
VariableDeclarationFragment [2847,2870]
===
===
delete-node
---
VariableDeclarationStatement [2843,2871]
===
===
delete-node
---
ASSIGNMENT_OPERATOR: = [2887,2888]
===
===
delete-node
---
Assignment [2884,2921]
===
===
delete-node
---
ExpressionStatement [2884,2922]
===
===
delete-tree
---
InfixExpression [2998,3006]
    SimpleName: xm [2998,3000]
    INFIX_EXPRESSION_OPERATOR: == [3001,3003]
    SimpleName: x1 [3004,3006]
===
delete-tree
---
Block [3008,3157]
    ExpressionStatement [3134,3139]
        PrefixExpression [3134,3138]
            PREFIX_EXPRESSION_OPERATOR: -- [3134,3136]
            SimpleName: x1 [3136,3138]
===
delete-node
---
IfStatement [2994,3253]
===
===
delete-tree
---
InfixExpression [3324,3332]
    SimpleName: xm [3324,3326]
    INFIX_EXPRESSION_OPERATOR: == [3327,3329]
    SimpleName: x0 [3330,3332]
===
delete-tree
---
Block [3334,3483]
    ExpressionStatement [3460,3465]
        PrefixExpression [3460,3464]
            PREFIX_EXPRESSION_OPERATOR: ++ [3460,3462]
            SimpleName: x0 [3462,3464]
===
delete-node
---
Block [3489,3579]
===
===
delete-node
---
IfStatement [3320,3579]
===
===
delete-tree
---
MethodDeclaration [3838,4302]
    Javadoc [3838,4244]
        TagElement [3849,4041]
            TextElement: Access the domain value lower bound, based on  [3849,3895]
            TagElement [3895,3904]
                TextElement:  p [3901,3903]
            TextElement: , used to [3904,3913]
            TextElement: bracket a CDF root. This method is used by [3921,3963]
            TagElement [3971,4016]
                MethodRef [3978,4015]
                    SimpleName: inverseCumulativeProbability [3979,4007]
                    MethodRefParameter [4008,4014]
                        PrimitiveType: double [4008,4014]
            TextElement:  to find critical values. [4016,4041]
        TagElement [4056,4131]
            SimpleName: p [4063,4064]
            TextElement:  the desired probability for the critical value ( [4064,4113]
            TagElement [4113,4130]
                TextElement:  0 < p < 1 [4119,4129]
            TextElement: ) [4130,4131]
        TagElement [4139,4236]
            TextElement:  a domain value lower bound, i.e. a value  [4146,4188]
            TagElement [4188,4197]
                TextElement:  x [4194,4196]
            TextElement:  such that [4197,4207]
            TagElement [4215,4236]
                TextElement:  P(X <= x) < p [4221,4235]
    Modifier: protected [4249,4258]
    Modifier: abstract [4259,4267]
    PrimitiveType: int [4268,4271]
    SimpleName: getDomainLowerBound [4272,4291]
    SingleVariableDeclaration [4292,4300]
        PrimitiveType: double [4292,4298]
        SimpleName: p [4299,4300]
===
delete-tree
---
MethodDeclaration [4308,4773]
    Javadoc [4308,4715]
        TagElement [4319,4511]
            TextElement: Access the domain value upper bound, based on  [4319,4365]
            TagElement [4365,4374]
                TextElement:  p [4371,4373]
            TextElement: , used to [4374,4383]
            TextElement: bracket a CDF root. This method is used by [4391,4433]
            TagElement [4441,4486]
                MethodRef [4448,4485]
                    SimpleName: inverseCumulativeProbability [4449,4477]
                    MethodRefParameter [4478,4484]
                        PrimitiveType: double [4478,4484]
            TextElement:  to find critical values. [4486,4511]
        TagElement [4526,4601]
            SimpleName: p [4533,4534]
            TextElement:  the desired probability for the critical value ( [4534,4583]
            TagElement [4583,4600]
                TextElement:  0 < p < 1 [4589,4599]
            TextElement: ) [4600,4601]
        TagElement [4609,4707]
            TextElement:  a domain value upper bound, i.e. a value  [4616,4658]
            TagElement [4658,4667]
                TextElement:  x [4664,4666]
            TextElement:  such that [4667,4677]
            TagElement [4685,4707]
                TextElement:  P(X <= x) >= p [4691,4706]
    Modifier: protected [4720,4729]
    Modifier: abstract [4730,4738]
    PrimitiveType: int [4739,4742]
    SimpleName: getDomainUpperBound [4743,4762]
    SingleVariableDeclaration [4763,4771]
        PrimitiveType: double [4763,4769]
        SimpleName: p [4770,4771]
