Only in data/changesInfo//Math_87/properties/modified_classes/inducing/src: java
diff -u -r data/changesInfo//Math_87/properties/modified_classes/inducing/src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java data/changesInfo//Math_87/cleaned/inducing/src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java
--- data/changesInfo//Math_87/properties/modified_classes/inducing/src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java	2023-12-27 22:48:08.693701443 -0800
+++ data/changesInfo//Math_87/cleaned/inducing/src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java	2023-06-24 01:11:23.170000000 -0700
@@ -64,6 +64,18 @@
         assertEquals(57.0, solution.getValue(), 0.0);
     }
 
+    @Test
+    public void testSingleVariableAndConstraint() throws OptimizationException {
+        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 3 }, 0);
+        Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();
+        constraints.add(new LinearConstraint(new double[] { 1 }, Relationship.LEQ, 10));
+
+        SimplexSolver solver = new SimplexSolver();
+        RealPointValuePair solution = solver.optimize(f, constraints, GoalType.MAXIMIZE, false);
+        assertEquals(10.0, solution.getPoint()[0], 0.0);
+        assertEquals(30.0, solution.getValue(), 0.0);
+    }
+
     /**
      * With no artificial variables needed (no equals and no greater than
      * constraints) we can go straight to Phase 2.
