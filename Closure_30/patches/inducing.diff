diff --git a/contrib/externs/chrome_extensions.js b/contrib/externs/chrome_extensions.js
index a6f1945..a2e46f0 100644
--- a/contrib/externs/chrome_extensions.js
+++ b/contrib/externs/chrome_extensions.js
@@ -44,7 +44,7 @@
 chrome.extension.getBackgroundPage = function() {};
 
 /**
- * @param {number} opt_windowId An optional windowId.
+ * @param {number=} opt_windowId An optional windowId.
  * @return {Array.<Window>} The global JS objects for each content view.
  */
 chrome.extension.getExtensionTabs = function(opt_windowId) {};
@@ -62,9 +62,9 @@
 chrome.extension.getViews = function() {};
 
 /**
- * @param {number|*} opt_arg1 Either the extensionId to send the request to,
+ * @param {number|*=} opt_arg1 Either the extensionId to send the request to,
  *     in which case the request is passed as the next arg, or the request.
- * @param {*} opt_request The request value, if arg1 was the extensionId.
+ * @param {*=} opt_request The request value, if arg1 was the extensionId.
  * @param {function(*) : void=} opt_callback The callback function which
  *     takes a JSON response object sent by the handler of the request.
  */
@@ -148,13 +148,13 @@
  * @param {number} tabId Tab id.
  * @param {Object.<string, number>} moveProperties An object with 'index'
  *     and optional 'windowId' keys.
- * @param {function(Tab) : void} opt_callback Callback.
+ * @param {function(Tab) : void=} opt_callback Callback.
  */
 chrome.tabs.move = function(tabId, moveProperties, opt_callback) {};
 
 /**
  * @param {number} tabId Tab id.
- * @param {function(Tab) : void} opt_callback Callback.
+ * @param {function(Tab) : void=} opt_callback Callback.
  */
 chrome.tabs.remove = function(tabId, opt_callback) {};
 
@@ -170,7 +170,7 @@
  * @param {number} tabId Tab id.
  * @param {Object.<string, (string|boolean)>} updateProperties An object which
  *     may have 'url' or 'selected' key.
- * @param {function(Tab) : void} opt_callback Callback.
+ * @param {function(Tab) : void=} opt_callback Callback.
  */
 chrome.tabs.update = function(tabId, updateProperties, opt_callback) {};
 
@@ -218,7 +218,7 @@
 
 /**
  * @param {number} tabId Tab Id.
- * @param {function() : void} opt_callback Callback.
+ * @param {function() : void=} opt_callback Callback.
  */
 chrome.windows.remove = function(tabId, opt_callback) {};
 
@@ -226,7 +226,7 @@
  * @param {number} tabId Tab Id.
  * @param {Object.<string, number>} updateProperties An object which may
  *     have 'left', 'top', 'width', or 'height' keys.
- * @param {function() : void} opt_callback Callback.
+ * @param {function() : void=} opt_callback Callback.
  */
 chrome.windows.update = function(tabId, updateProperties, opt_callback) {};
 
diff --git a/externs/deprecated.js b/externs/deprecated.js
index afcc719..f8cc2fe 100644
--- a/externs/deprecated.js
+++ b/externs/deprecated.js
@@ -39,6 +39,10 @@
 /** @constructor */ function XSLTProcessor() {}
 /** @constructor */ function NodeFilter() {}
 /**
+ * @param {*=} opt_text
+ * @param {*=} opt_value
+ * @param {*=} opt_defaultSelected
+ * @param {*=} opt_selected
  * @constructor
  * @extends {Element}
  */
diff --git a/externs/es3.js b/externs/es3.js
index 6db1bc6..554bda7 100644
--- a/externs/es3.js
+++ b/externs/es3.js
@@ -1048,6 +1048,13 @@
 
 
 /**
+ * @param [opt_yr_num]
+ * @param [opt_mo_num]
+ * @param [opt_day_num]
+ * @param [opt_hr_num]
+ * @param [opt_min_num]
+ * @param [opt_sec_num]
+ * @param [opt_ms_num]
  * @constructor
  * @return {string}
  * @nosideeffects
diff --git a/externs/gears_types.js b/externs/gears_types.js
index 0805512..f3737eb 100644
--- a/externs/gears_types.js
+++ b/externs/gears_types.js
@@ -23,13 +23,21 @@
 /** @constructor */
 function GearsFactory() {}
 
-/** @return {Object} */
+/**
+ * @param {*=} opt_classVersion
+ * @return {Object}
+ */
 GearsFactory.prototype.create = function(className, opt_classVersion) {};
 
 /** @return {string} */
 GearsFactory.prototype.getBuildInfo = function() {};
 
-/** @return {boolean} */
+/**
+ * @param {*=} opt_siteName
+ * @param {*=} opt_imageUrl
+ * @param {*=} opt_extraMessage
+ * @return {boolean}
+ */
 GearsFactory.prototype.getPermission = function(opt_siteName,
                                                 opt_imageUrl,
                                                 opt_extraMessage) {};
@@ -70,7 +78,10 @@
 /** @param {string=} opt_name */
 GearsDatabase.prototype.open = function(opt_name) {};
 
-/** @return {GearsResultSet} */
+/**
+ * @param {*=} opt_argArray
+ * @return {GearsResultSet}
+ */
 GearsDatabase.prototype.execute = function(sqlStatement, opt_argArray) {};
 
 GearsDatabase.prototype.close = function() {};
@@ -396,22 +407,39 @@
 /** @return {boolean} */
 GearsLocalServer.prototype.canServeLocally = function(url) {};
 
-/** @return {GearsResourceStore} */
+/**
+ * @param {*=} opt_requiredCookie
+ * @return {GearsResourceStore}
+ */
 GearsLocalServer.prototype.createStore = function(name, opt_requiredCookie) {};
 
-/** @return {GearsResourceStore} */
+/**
+ * @param {*=} opt_requiredCookie
+ * @return {GearsResourceStore}
+ */
 GearsLocalServer.prototype.openStore = function(name, opt_requiredCookie) {};
 
+/**
+ * @param {*=} opt_requiredCookie
+ */
 GearsLocalServer.prototype.removeStore = function(name, opt_requiredCookie) {};
 
-/** @return {GearsManagedResourceStore} */
+/**
+ * @param {*=} opt_requiredCookie
+ * @return {GearsManagedResourceStore}
+ */
 GearsLocalServer.prototype.createManagedStore = function(name,
                                                          opt_requiredCookie) {};
-
-/** @return {GearsManagedResourceStore} */
+/**
+ * @param {*=} opt_requiredCookie
+ * @return {GearsManagedResourceStore}
+ */
 GearsLocalServer.prototype.openManagedStore = function(name,
                                                        opt_requiredCookie) {};
 
+/**
+ * @param {*=} opt_requiredCookie
+ */
 GearsLocalServer.prototype.removeManagedStore = function(name,
                                                          opt_requiredCookie) {};
 
diff --git a/externs/ie_dom.js b/externs/ie_dom.js
index 1dcb7b4..0ed7e7d 100644
--- a/externs/ie_dom.js
+++ b/externs/ie_dom.js
@@ -1315,7 +1315,7 @@
 Element.prototype.currentStyle;
 
 /**
- * @param {string} opt_action
+ * @param {string=} opt_action
  * @see http://msdn.microsoft.com/en-us/library/ms536414%28VS.85%29.aspx
  */
 Element.prototype.doScroll = function(opt_action) {};
@@ -1447,6 +1447,7 @@
 // For IE, returns an object representing key-value pairs for all the global
 // variables prefixed with str, e.g. test*
 
+/** @param {*=} opt_str */
 function RuntimeObject(opt_str) {}
 
 
diff --git a/externs/webkit_notifications.js b/externs/webkit_notifications.js
index be1e77c..c5be4c5 100644
--- a/externs/webkit_notifications.js
+++ b/externs/webkit_notifications.js
@@ -87,7 +87,7 @@
 
 /**
  * Requests permission from the user to display notifications.
- * @param {Function} opt_callback
+ * @param {Function=} opt_callback
  * @return {void}
  */
 NotificationCenter.prototype.requestPermission = function(opt_callback) {};
diff --git a/externs/window.js b/externs/window.js
index 2e059ca..400b9a1 100644
--- a/externs/window.js
+++ b/externs/window.js
@@ -136,6 +136,7 @@
 function dump(x) {}
 
 /**
+ * @param {*=} opt_value
  * @see https://developer.mozilla.org/en/DOM/window.prompt
  */
 function prompt(x, opt_value) {}
diff --git a/javadoc/com/google/javascript/jscomp/DiagnosticGroups.html b/javadoc/com/google/javascript/jscomp/DiagnosticGroups.html
index bafa4cd..33d0731 100644
--- a/javadoc/com/google/javascript/jscomp/DiagnosticGroups.html
+++ b/javadoc/com/google/javascript/jscomp/DiagnosticGroups.html
@@ -124,6 +124,14 @@
 <TR BGCOLOR="white" CLASS="TableRowColor">
 <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
 <CODE>static&nbsp;<A HREF="../../../../com/google/javascript/jscomp/DiagnosticGroup.html" title="class in com.google.javascript.jscomp">DiagnosticGroup</A></CODE></FONT></TD>
+<TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/DiagnosticGroups.html#CHECK_REGEXP">CHECK_REGEXP</A></B></CODE>
+
+<BR>
+&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
+</TR>
+<TR BGCOLOR="white" CLASS="TableRowColor">
+<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
+<CODE>static&nbsp;<A HREF="../../../../com/google/javascript/jscomp/DiagnosticGroup.html" title="class in com.google.javascript.jscomp">DiagnosticGroup</A></CODE></FONT></TD>
 <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/DiagnosticGroups.html#CHECK_TYPES">CHECK_TYPES</A></B></CODE>
 
 <BR>
@@ -366,10 +374,10 @@
 </DL>
 <HR>
 
-<A NAME="CHECK_VARIABLES"><!-- --></A><H3>
-CHECK_VARIABLES</H3>
+<A NAME="CHECK_REGEXP"><!-- --></A><H3>
+CHECK_REGEXP</H3>
 <PRE>
-public static <A HREF="../../../../com/google/javascript/jscomp/DiagnosticGroup.html" title="class in com.google.javascript.jscomp">DiagnosticGroup</A> <B>CHECK_VARIABLES</B></PRE>
+public static <A HREF="../../../../com/google/javascript/jscomp/DiagnosticGroup.html" title="class in com.google.javascript.jscomp">DiagnosticGroup</A> <B>CHECK_REGEXP</B></PRE>
 <DL>
 <DL>
 </DL>
@@ -384,6 +392,16 @@
 <DL>
 </DL>
 </DL>
+<HR>
+
+<A NAME="CHECK_VARIABLES"><!-- --></A><H3>
+CHECK_VARIABLES</H3>
+<PRE>
+public static <A HREF="../../../../com/google/javascript/jscomp/DiagnosticGroup.html" title="class in com.google.javascript.jscomp">DiagnosticGroup</A> <B>CHECK_VARIABLES</B></PRE>
+<DL>
+<DL>
+</DL>
+</DL>
 
 <!-- ========= CONSTRUCTOR DETAIL ======== -->
 
diff --git a/javadoc/index-all.html b/javadoc/index-all.html
index d0d5d07..132e50c 100644
--- a/javadoc/index-all.html
+++ b/javadoc/index-all.html
@@ -636,6 +636,9 @@
 <DT><A HREF="./com/google/javascript/jscomp/TypeCheck.html#check(com.google.javascript.rhino.Node, boolean)"><B>check(Node, boolean)</B></A> - 
 Method in class com.google.javascript.jscomp.<A HREF="./com/google/javascript/jscomp/TypeCheck.html" title="class in com.google.javascript.jscomp">TypeCheck</A>
 <DD>&nbsp;
+<DT><A HREF="./com/google/javascript/jscomp/DiagnosticGroups.html#CHECK_REGEXP"><B>CHECK_REGEXP</B></A> - 
+Static variable in class com.google.javascript.jscomp.<A HREF="./com/google/javascript/jscomp/DiagnosticGroups.html" title="class in com.google.javascript.jscomp">DiagnosticGroups</A>
+<DD>&nbsp;
 <DT><A HREF="./com/google/javascript/jscomp/DiagnosticGroups.html#CHECK_TYPES"><B>CHECK_TYPES</B></A> - 
 Static variable in class com.google.javascript.jscomp.<A HREF="./com/google/javascript/jscomp/DiagnosticGroups.html" title="class in com.google.javascript.jscomp">DiagnosticGroups</A>
 <DD>&nbsp;
diff --git a/lib/google_common_deploy.jar b/lib/google_common_deploy.jar
index 6461c39..bb9a7d6 100755
--- a/lib/google_common_deploy.jar
+++ b/lib/google_common_deploy.jar
Binary files differ
diff --git a/src/com/google/javascript/jscomp/AbstractCompiler.java b/src/com/google/javascript/jscomp/AbstractCompiler.java
index 890b0e3..2971dbc 100644
--- a/src/com/google/javascript/jscomp/AbstractCompiler.java
+++ b/src/com/google/javascript/jscomp/AbstractCompiler.java
@@ -224,4 +224,17 @@
    * If type aware optimizations are on, type equality is checked.
    */
   abstract boolean areNodesEqualForInlining(Node n1, Node n2);
+
+  /**
+   * Set if RegExp global properties are used.
+   * @param references Whether there are references to the RegExp global object
+   *     properties.
+   */
+  abstract void setHasRegExpGlobalReferences(boolean references);
+  
+  /**
+   * @return Whether the AST constains references to the RegExp global object
+   *     properties.
+   */
+  abstract boolean hasRegExpGlobalReferences();
 }
diff --git a/src/com/google/javascript/jscomp/CheckRegExp.java b/src/com/google/javascript/jscomp/CheckRegExp.java
new file mode 100644
index 0000000..9b30d57
--- /dev/null
+++ b/src/com/google/javascript/jscomp/CheckRegExp.java
@@ -0,0 +1,64 @@
+/*
+ * Copyright 2010 Google Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.google.javascript.jscomp;
+
+import com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback;
+import com.google.javascript.jscomp.mozilla.rhino.Token;
+import com.google.javascript.rhino.Node;
+
+/**
+ * Look for references to the global RegExp object that would cause
+ * regular expressions to be unoptimizable.
+ * 
+ * @author johnlenz@google.com (John Lenz)
+ */
+class CheckRegExp extends AbstractPostOrderCallback implements CompilerPass {
+
+  // TODO(johnlenz): Get this warning turned on by default.
+  static final DiagnosticType REGEXP_REFERENCE =
+    DiagnosticType.disabled("JSC_REGEXP_REFERENCE",
+        "References to the global RegExp object prevents " +
+        "optimization of regular expressions.");
+
+  private final AbstractCompiler compiler;
+  private boolean globalRegExpPropertiesUsed = false;
+
+  public boolean isGlobalRegExpPropertiesUsed() {
+    return globalRegExpPropertiesUsed;
+  }
+
+  public CheckRegExp(AbstractCompiler compiler) {
+    this.compiler = compiler;
+  }
+
+  @Override
+  public void process(Node externs, Node root) {
+    NodeTraversal.traverse(compiler, root, this);
+  }
+
+  @Override
+  public void visit(NodeTraversal t, Node n, Node parent) {
+    if (NodeUtil.isReferenceName(n)) {
+      String name = n.getString();
+      if (name.equals("RegExp") && t.getScope().getVar(name) == null) {
+        if (parent.getType() != Token.NEW || n != parent.getFirstChild()) {
+          t.report(n, REGEXP_REFERENCE);
+          globalRegExpPropertiesUsed = true;
+        }
+      }
+    }
+  }
+}
diff --git a/src/com/google/javascript/jscomp/Compiler.java b/src/com/google/javascript/jscomp/Compiler.java
index d28d951..0104062 100644
--- a/src/com/google/javascript/jscomp/Compiler.java
+++ b/src/com/google/javascript/jscomp/Compiler.java
@@ -111,6 +111,12 @@
   /** Whether to use threads. */
   private boolean useThreads = true;
 
+  /** 
+   * Whether to assume there are references to the RegExp Global object
+   * properties.
+   */
+  private boolean hasRegExpGlobalReferences = true;
+  
   /** The function information map */
   private FunctionInformationMap functionInformationMap;
 
@@ -1735,4 +1741,14 @@
     typeRegistry = state.typeRegistry;
     normalized = state.normalized;
   }
+
+  @Override
+  boolean hasRegExpGlobalReferences() {
+    return hasRegExpGlobalReferences;
+  }
+
+  @Override
+  void setHasRegExpGlobalReferences(boolean references) {
+    hasRegExpGlobalReferences = references;
+  }
 }
diff --git a/src/com/google/javascript/jscomp/DefaultPassConfig.java b/src/com/google/javascript/jscomp/DefaultPassConfig.java
index b55cb48..d60ba48 100644
--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java
+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java
@@ -216,6 +216,9 @@
     }
 
     checks.add(checkVars);
+    if (options.computeFunctionSideEffects) {
+      checks.add(checkRegExp);
+    }
 
     if (options.checkShadowVars.isOn()) {
       checks.add(checkShadowVars);
@@ -814,6 +817,24 @@
     }
   };
 
+  /** Checks for RegExp references. */
+  private final PassFactory checkRegExp =
+      new PassFactory("checkRegExp", true) {
+    @Override
+    protected CompilerPass createInternal(final AbstractCompiler compiler) {
+      final CheckRegExp pass = new CheckRegExp(compiler);
+
+      return new CompilerPass() {
+        @Override
+        public void process(Node externs, Node root) {
+          pass.process(externs, root);
+          compiler.setHasRegExpGlobalReferences(
+              pass.isGlobalRegExpPropertiesUsed());
+        }
+      };
+    }
+  };
+
   /** Checks that no vars are illegally shadowed. */
   private final PassFactory checkShadowVars =
       new PassFactory("variableShadowDeclarationCheck", true) {
diff --git a/src/com/google/javascript/jscomp/DiagnosticGroups.java b/src/com/google/javascript/jscomp/DiagnosticGroups.java
index 0e98ef5..c29b417 100644
--- a/src/com/google/javascript/jscomp/DiagnosticGroups.java
+++ b/src/com/google/javascript/jscomp/DiagnosticGroups.java
@@ -47,8 +47,8 @@
   // A bit a hack to display the available groups on the command-line.
   // New groups should be added to this list if they are public and should
   // be listed on the command-line as an available option.
-  static final String DIAGNOSTIC_GROUP_NAMES = "accessControls, checkVars, " +
-      "checkTypes, deprecated, fileoverviewTags, invalidCasts, " +
+  static final String DIAGNOSTIC_GROUP_NAMES = "accessControls, checkRegExp," +
+      "checkTypes, checkVars, deprecated, fileoverviewTags, invalidCasts, " +
       "missingProperties, nonStandardJsDocs, strictModuleDepCheck, " +
       "undefinedVars, unknownDefines, visibility";
 
@@ -104,11 +104,10 @@
       DiagnosticGroups.registerGroup("undefinedVars",
           new DiagnosticGroup(VarCheck.UNDEFINED_VAR_ERROR));
 
-  public static DiagnosticGroup CHECK_VARIABLES =
-      DiagnosticGroups.registerGroup("checkVars",
-          new DiagnosticGroup(
-              VarCheck.UNDEFINED_VAR_ERROR,
-              SyntacticScopeCreator.VAR_MULTIPLY_DECLARED_ERROR));
+  public static DiagnosticGroup CHECK_REGEXP =
+    DiagnosticGroups.registerGroup("checkRegExp",
+        new DiagnosticGroup(
+            CheckRegExp.REGEXP_REFERENCE));
 
   public static DiagnosticGroup CHECK_TYPES =
       DiagnosticGroups.registerGroup("checkTypes",
@@ -116,6 +115,12 @@
               TypeValidator.ALL_DIAGNOSTICS,
               TypeCheck.ALL_DIAGNOSTICS));
 
+  public static DiagnosticGroup CHECK_VARIABLES =
+    DiagnosticGroups.registerGroup("checkVars",
+        new DiagnosticGroup(
+            VarCheck.UNDEFINED_VAR_ERROR,
+            SyntacticScopeCreator.VAR_MULTIPLY_DECLARED_ERROR));
+
   /**
    * Adds warning levels by name.
    */
diff --git a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java
index 2dde585..8ec85c1 100644
--- a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java
+++ b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java
@@ -18,6 +18,7 @@
 
 import com.google.common.base.Preconditions;
 import com.google.common.base.Predicate;
+import com.google.common.base.Predicates;
 import com.google.common.collect.Lists;
 import com.google.javascript.jscomp.ControlFlowGraph.AbstractCfgNodeTraversalCallback;
 import com.google.javascript.jscomp.ControlFlowGraph.Branch;
@@ -26,6 +27,7 @@
 import com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback;
 import com.google.javascript.jscomp.NodeTraversal.AbstractShallowCallback;
 import com.google.javascript.jscomp.NodeTraversal.ScopedCallback;
+import com.google.javascript.jscomp.graph.DiGraph.DiGraphEdge;
 import com.google.javascript.jscomp.graph.DiGraph.DiGraphNode;
 import com.google.javascript.rhino.Node;
 import com.google.javascript.rhino.Token;
@@ -77,6 +79,36 @@
   private MustBeReachingVariableDef reachingDef;
   private MaybeReachingVariableUse reachingUses;
 
+  private static final Predicate<Node> SIDE_EFFECT_PREDICATE =
+    new Predicate<Node>() {
+      @Override
+      public boolean apply(Node n) {
+        // When the node is null it means, we reached the implicit return
+        // where the function returns (possibly without an return statement)
+        if (n == null) {
+          return false;
+        }
+
+        // TODO(user): We only care about calls to functions that
+        // passes one of the dependent variable to a non-sideeffect free
+        // function.
+        if (NodeUtil.isCall(n) && NodeUtil.functionCallHasSideEffects(n)) {
+          return true;
+        }
+
+        if (NodeUtil.isNew(n) && NodeUtil.constructorCallHasSideEffects(n)) {
+          return true;
+        }
+
+        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
+          if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {
+            return true;
+          }
+        }
+        return false;
+      }
+  };
+
   public FlowSensitiveInlineVariables(AbstractCompiler compiler) {
     this.compiler = compiler;
   }
@@ -229,6 +261,37 @@
         return false;
       }
 
+
+      // The right of the definition has side effect:
+      // Example, for x:
+      // x = readProp(b), modifyProp(b); print(x);
+      if (checkRightOf(def, defCfgNode, SIDE_EFFECT_PREDICATE)) {
+        return false;
+      }
+
+      // Similar check as the above but this time, all the sub-expressions
+      // left of the use of the variable.
+      // x = readProp(b); modifyProp(b), print(x);
+      if (checkLeftOf(use, useCfgNode, SIDE_EFFECT_PREDICATE)) {
+        return false;
+      }
+
+      // Similar side effect check as above but this time the side effect is
+      // else where along the path.
+      // x = readProp(b); while(modifyProp(b)) {}; print(x);
+      CheckPathsBetweenNodes<Node, ControlFlowGraph.Branch>
+        pathCheck = new CheckPathsBetweenNodes<Node, ControlFlowGraph.Branch>(
+               cfg,
+               cfg.getDirectedGraphNode(defCfgNode),
+               cfg.getDirectedGraphNode(useCfgNode),
+               SIDE_EFFECT_PREDICATE,
+               Predicates.
+                   <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),
+               false);
+      if (pathCheck.somePathsSatisfyPredicate()) {
+        return false;
+      }
+
       // TODO(user): Side-effect is ok sometimes. As long as there are no
       // side-effect function down all paths to the use. Once we have all the
       // side-effect analysis tool.
@@ -363,4 +426,45 @@
       NodeTraversal.traverse(compiler, n, gatherCb);
     }
   }
+
+  /**
+   * Given an expression by its root and sub-expression n, return true if there
+   * the predicate is true for some expression on the right of n.
+   *
+   * Example:
+   *
+   * NotChecked(), NotChecked(), n, Checked(), Checked();
+   */
+  private static boolean checkRightOf(
+      Node n, Node expressionRoot, Predicate<Node> predicate) {
+    for (Node p = n; p != expressionRoot; p = p.getParent()) {
+      for (Node cur = p.getNext(); cur != null; cur = cur.getNext()) {
+        if (predicate.apply(cur)) {
+          return true;
+        }
+      }
+    }
+    return false;
+  }
+
+  /**
+   * Given an expression by its root and sub-expression n, return true if there
+   * the predicate is true for some expression on the left of n.
+   *
+   * Example:
+   *
+   * Checked(), Checked(), n, NotChecked(), NotChecked();
+   */
+  private static boolean checkLeftOf(
+      Node n, Node expressionRoot, Predicate<Node> predicate) {
+    for (Node p = n.getParent(); p != expressionRoot; p = p.getParent()) {
+      for (Node cur = p.getParent().getFirstChild(); cur != p;
+          cur = cur.getNext()) {
+        if (predicate.apply(cur)) {
+          return true;
+        }
+      }
+    }
+    return false;
+  }
 }
diff --git a/src/com/google/javascript/jscomp/TypedCodeGenerator.java b/src/com/google/javascript/jscomp/TypedCodeGenerator.java
index 675239f..167f75f 100644
--- a/src/com/google/javascript/jscomp/TypedCodeGenerator.java
+++ b/src/com/google/javascript/jscomp/TypedCodeGenerator.java
@@ -38,7 +38,9 @@
   @Override
   void add(Node n, Context context) {
     Node parent = n.getParent();
-    if (parent.getType() == Token.BLOCK || parent.getType() == Token.SCRIPT) {
+    if (parent != null 
+        && (parent.getType() == Token.BLOCK
+            || parent.getType() == Token.SCRIPT)) {
       if (n.getType() == Token.FUNCTION) {
         add(getFunctionAnnotation(n));
       } else if (n.getType() == Token.EXPR_RESULT
diff --git a/test/com/google/javascript/jscomp/CheckRegExpTest.java b/test/com/google/javascript/jscomp/CheckRegExpTest.java
new file mode 100644
index 0000000..2fd4cf8
--- /dev/null
+++ b/test/com/google/javascript/jscomp/CheckRegExpTest.java
@@ -0,0 +1,64 @@
+/*
+ * Copyright 2010 Google Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.google.javascript.jscomp;
+
+/**
+ * @author johnlenz@google.com (John Lenz)
+ */
+public class CheckRegExpTest extends CompilerTestCase {
+  CheckRegExp last = null;
+
+  public CheckRegExpTest() {
+    super("var RegExp;", true);
+  }
+
+  @Override
+  protected CompilerPass getProcessor(Compiler compiler) {
+    compiler.options.setWarningLevel(
+        DiagnosticGroups.CHECK_REGEXP, CheckLevel.WARNING);
+    last = new CheckRegExp(compiler);
+    return last;
+  }
+
+  private void testReference(String code, boolean expected) {
+    testSame(code, (expected) ? CheckRegExp.REGEXP_REFERENCE : null);
+    assertEquals(expected, last.isGlobalRegExpPropertiesUsed());
+  }
+
+  public void testRegExp() {
+    // creating regexp's is ok
+    testReference("new RegExp();", false);
+    testReference("var x = new RegExp();", false);
+
+    // Any other reference isn't
+    testReference("RegExp.test();", true);
+    testReference("var x = RegExp.test();", true);
+    testReference("RegExp.exec();", true);
+    testReference("RegExp.$1;", true);
+    testReference("RegExp.foobar;", true);
+
+    // Aliases aren't allowed
+    testReference("var x = RegExp;", true);
+    testReference("var x = RegExp; x.test()", true);
+
+    // No RegExp reference is ok
+    testReference("var x;", false);
+    
+    // Local RegExp is ok
+    testReference("function f() {var RegExp; RegExp.test();}", false);
+  }
+}
diff --git a/test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java b/test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java
index 710ddf7..eae5fd9 100644
--- a/test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java
+++ b/test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java
@@ -16,12 +16,19 @@
 
 package com.google.javascript.jscomp;
 
+import com.google.javascript.rhino.Node;
+
 /**
  * Unit tests for {@link FlowSensitiveInlineVariables}.
  *
 *
  */
 public class FlowSensitiveInlineVariablesTest extends CompilerTestCase  {
+
+  public static final String EXTERN_FUNCTIONS = "" +
+      "/** @nosideeffects */ function noSFX() {} \n" +
+      "                      function hasSFX() {} \n";
+
   @Override
   public int getNumRepetitions() {
     // Test repeatedly inline.
@@ -29,8 +36,15 @@
   }
 
   @Override
-  protected CompilerPass getProcessor(Compiler compiler) {
-    return new FlowSensitiveInlineVariables(compiler);
+  protected CompilerPass getProcessor(final Compiler compiler) {
+    //return new FlowSensitiveInlineVariables(compiler);
+    return new CompilerPass() {
+      @Override
+      public void process(Node externs, Node root) {
+        (new MarkNoSideEffectCalls(compiler)).process(externs, root);
+        (new FlowSensitiveInlineVariables(compiler)).process(externs, root);
+      }
+    };
   }
 
   public void testSimpleAssign() {
@@ -75,6 +89,10 @@
     noInline("var x = 1; if (print) { print(x) } else { alert(x) }");
   }
 
+  public void testAssignmentBeforeDefinition() {
+    inline("x = 1; var x = 0; print(x)","x = 1; var x; print(0)" );
+  }
+
   public void testVarInConditionPath() {
     noInline("if (foo) { var x = 0 } print(x)");
   }
@@ -261,6 +279,7 @@
     noInline("var x = new Iterator(); x.next();");
   }
 
+  // TODO(user): These should be inlinable.
   public void testNoInlineArrayLits() {
     noInline("var x = []; print(x)");
   }
@@ -276,7 +295,7 @@
   public void testInlineConstructorCallsIntoLoop() {
     // Is a bad idea, a similar case was found in closure string.js
     noInline("var x = new Iterator();" +
-             "for(var x = 0; x < 10; x++) {j = x.next()};");
+             "for(i = 0; i < 10; i++) {j = x.next()}");
   }
 
   public void testRemoveWithLabels() {
@@ -285,6 +304,41 @@
     inline("var x = 1; L: M: N: x = 2; print(x)", "var x = 1; print(2)");
   }
 
+  public void testInlineAcrossSideEffect1() {
+    inline("var y; var x = noSFX(y); print(x)", "var y;var x;print(noSFX(y))");
+  }
+
+  public void testInlineAcrossSideEffect2() {
+    // Think noSFX() as a function that reads y.foo and return it
+    // and SFX() write some new value of y.foo. If that's the case,
+    // inlining across hasSFX() is not valid.
+
+    // This is a case where hasSFX is right of the source of the inlining.
+    noInline("var y; var x = noSFX(y), z = hasSFX(y); print(x)");
+    noInline("var y; var x = noSFX(y), z = new hasSFX(y); print(x)");
+    noInline("var y; var x = new noSFX(y), z = new hasSFX(y); print(x)");
+  }
+
+  public void testInlineAcrossSideEffect3() {
+    // This is a case where hasSFX is left of the destination of the inlining.
+    noInline("var y; var x = noSFX(y); hasSFX(y), print(x)");
+    noInline("var y; var x = noSFX(y); new hasSFX(y), print(x)");
+    noInline("var y; var x = new noSFX(y); new hasSFX(y), print(x)");
+  }
+
+  public void testInlineAcrossSideEffect4() {
+    // This is a case where hasSFX is some control flow path between the
+    // source and its destination.
+    noInline("var y; var x = noSFX(y); hasSFX(y); print(x)");
+    noInline("var y; var x = noSFX(y); new hasSFX(y); print(x)");
+    noInline("var y; var x = new noSFX(y); new hasSFX(y); print(x)");
+  }
+
+  public void testCanInlineAcrossNoSideEffect() {
+    inline("var y; var x = noSFX(Y), z = noSFX(); noSFX(); noSFX(), print(x)",
+           "var y; var x, z = noSFX(); noSFX(); noSFX(), print(noSFX(Y))");
+  }
+
   public void testInlineArguments() {
     testSame("function _func(x) { print(x) }");
     testSame("function _func(x,y) { if(y) { x = 1 }; print(x) }");
@@ -301,7 +355,7 @@
   }
 
   private void inline(String input, String expected) {
-    test("function _func() {" + input + "}",
-        "function _func() {" + expected + "}");
+    test(EXTERN_FUNCTIONS, "function _func() {" + input + "}",
+        "function _func() {" + expected + "}", null, null);
   }
 }
