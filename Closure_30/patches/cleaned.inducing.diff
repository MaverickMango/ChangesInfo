Only in data/changesInfo//Closure_30/cleaned/inducing/: FlowSensitiveInlineVariablesTest.java
Only in data/changesInfo//Closure_30/properties/modified_classes/inducing/: src
diff -u -r data/changesInfo//Closure_30/properties/modified_classes/inducing/test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java data/changesInfo//Closure_30/cleaned/inducing/test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java
--- data/changesInfo//Closure_30/properties/modified_classes/inducing/test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java	2023-12-27 22:37:08.599948353 -0800
+++ data/changesInfo//Closure_30/cleaned/inducing/test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java	2023-06-13 08:14:27.855749453 -0700
@@ -16,19 +16,12 @@
 
 package com.google.javascript.jscomp;
 
-import com.google.javascript.rhino.Node;
-
 /**
  * Unit tests for {@link FlowSensitiveInlineVariables}.
  *
 *
  */
 public class FlowSensitiveInlineVariablesTest extends CompilerTestCase  {
-
-  public static final String EXTERN_FUNCTIONS = "" +
-      "/** @nosideeffects */ function noSFX() {} \n" +
-      "                      function hasSFX() {} \n";
-
   @Override
   public int getNumRepetitions() {
     // Test repeatedly inline.
@@ -36,15 +29,8 @@
   }
 
   @Override
-  protected CompilerPass getProcessor(final Compiler compiler) {
-    //return new FlowSensitiveInlineVariables(compiler);
-    return new CompilerPass() {
-      @Override
-      public void process(Node externs, Node root) {
-        (new MarkNoSideEffectCalls(compiler)).process(externs, root);
-        (new FlowSensitiveInlineVariables(compiler)).process(externs, root);
-      }
-    };
+  protected CompilerPass getProcessor(Compiler compiler) {
+    return new FlowSensitiveInlineVariables(compiler);
   }
 
   public void testSimpleAssign() {
@@ -89,10 +75,6 @@
     noInline("var x = 1; if (print) { print(x) } else { alert(x) }");
   }
 
-  public void testAssignmentBeforeDefinition() {
-    inline("x = 1; var x = 0; print(x)","x = 1; var x; print(0)" );
-  }
-
   public void testVarInConditionPath() {
     noInline("if (foo) { var x = 0 } print(x)");
   }
@@ -279,7 +261,6 @@
     noInline("var x = new Iterator(); x.next();");
   }
 
-  // TODO(user): These should be inlinable.
   public void testNoInlineArrayLits() {
     noInline("var x = []; print(x)");
   }
@@ -295,7 +276,7 @@
   public void testInlineConstructorCallsIntoLoop() {
     // Is a bad idea, a similar case was found in closure string.js
     noInline("var x = new Iterator();" +
-             "for(i = 0; i < 10; i++) {j = x.next()}");
+             "for(var x = 0; x < 10; x++) {j = x.next()};");
   }
 
   public void testRemoveWithLabels() {
@@ -304,41 +285,6 @@
     inline("var x = 1; L: M: N: x = 2; print(x)", "var x = 1; print(2)");
   }
 
-  public void testInlineAcrossSideEffect1() {
-    inline("var y; var x = noSFX(y); print(x)", "var y;var x;print(noSFX(y))");
-  }
-
-  public void testInlineAcrossSideEffect2() {
-    // Think noSFX() as a function that reads y.foo and return it
-    // and SFX() write some new value of y.foo. If that's the case,
-    // inlining across hasSFX() is not valid.
-
-    // This is a case where hasSFX is right of the source of the inlining.
-    noInline("var y; var x = noSFX(y), z = hasSFX(y); print(x)");
-    noInline("var y; var x = noSFX(y), z = new hasSFX(y); print(x)");
-    noInline("var y; var x = new noSFX(y), z = new hasSFX(y); print(x)");
-  }
-
-  public void testInlineAcrossSideEffect3() {
-    // This is a case where hasSFX is left of the destination of the inlining.
-    noInline("var y; var x = noSFX(y); hasSFX(y), print(x)");
-    noInline("var y; var x = noSFX(y); new hasSFX(y), print(x)");
-    noInline("var y; var x = new noSFX(y); new hasSFX(y), print(x)");
-  }
-
-  public void testInlineAcrossSideEffect4() {
-    // This is a case where hasSFX is some control flow path between the
-    // source and its destination.
-    noInline("var y; var x = noSFX(y); hasSFX(y); print(x)");
-    noInline("var y; var x = noSFX(y); new hasSFX(y); print(x)");
-    noInline("var y; var x = new noSFX(y); new hasSFX(y); print(x)");
-  }
-
-  public void testCanInlineAcrossNoSideEffect() {
-    inline("var y; var x = noSFX(Y), z = noSFX(); noSFX(); noSFX(), print(x)",
-           "var y; var x, z = noSFX(); noSFX(); noSFX(), print(noSFX(Y))");
-  }
-
   public void testInlineArguments() {
     testSame("function _func(x) { print(x) }");
     testSame("function _func(x,y) { if(y) { x = 1 }; print(x) }");
@@ -355,7 +301,46 @@
   }
 
   private void inline(String input, String expected) {
-    test(EXTERN_FUNCTIONS, "function _func() {" + input + "}",
-        "function _func() {" + expected + "}", null, null);
+    test("function _func() {" + input + "}",
+        "function _func() {" + expected + "}");
+  }
+
+  public void testInlineAcrossSideEffect1() {
+    // This can't be inlined because print() has side-effects and might change
+    // the definition of noSFX.
+    //
+    // noSFX must be both const and pure in order to inline it.
+    noInline("var y; var x = noSFX(y); print(x)");
+    //inline("var y; var x = noSFX(y); print(x)", "var y;var x;print(noSFX(y))");
+  }
+
+  public void testCanInlineAcrossNoSideEffect() {
+    // This can't be inlined because print() has side-effects and might change
+    // the definition of noSFX. We should be able to mark noSFX as const
+    // in some way.
+    noInline(
+            "var y; var x = noSFX(y), z = noSFX(); noSFX(); noSFX(), print(x)");
+    //inline(
+    //    "var y; var x = noSFX(y), z = noSFX(); noSFX(); noSFX(), print(x)",
+    //    "var y; var x, z = noSFX(); noSFX(); noSFX(), print(noSFX(y))");
+  }
+
+  public void testIssue698() {
+    // Most of the flow algorithms operate on Vars. We want to make
+    // sure the algorithm bails out appropriately if it sees
+    // a var that it doesn't know about.
+    inline(
+            "var x = ''; "
+                    + "unknown.length < 2 && (unknown='0' + unknown);"
+                    + "x = x + unknown; "
+                    + "unknown.length < 3 && (unknown='0' + unknown);"
+                    + "x = x + unknown; "
+                    + "return x;",
+            "var x; "
+                    + "unknown.length < 2 && (unknown='0' + unknown);"
+                    + "x = '' + unknown; "
+                    + "unknown.length < 3 && (unknown='0' + unknown);"
+                    + "x = x + unknown; "
+                    + "return x;");
   }
 }
