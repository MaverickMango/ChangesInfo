diff -r -u original/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java buggy/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java
--- original/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	2023-06-13 15:31:38.823078556 +0800
+++ buggy/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	2023-06-12 11:40:19.183053299 +0800
@@ -1,5 +1,5 @@
 /*
- * Copyright 2009 Google Inc.
+ * Copyright 2009 The Closure Compiler Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -18,6 +18,7 @@
 
 import com.google.common.base.Preconditions;
 import com.google.common.base.Predicate;
+import com.google.common.base.Predicates;
 import com.google.common.collect.Lists;
 import com.google.javascript.jscomp.ControlFlowGraph.AbstractCfgNodeTraversalCallback;
 import com.google.javascript.jscomp.ControlFlowGraph.Branch;
@@ -26,6 +27,7 @@
 import com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback;
 import com.google.javascript.jscomp.NodeTraversal.AbstractShallowCallback;
 import com.google.javascript.jscomp.NodeTraversal.ScopedCallback;
+import com.google.javascript.jscomp.graph.DiGraph.DiGraphEdge;
 import com.google.javascript.jscomp.graph.DiGraph.DiGraphNode;
 import com.google.javascript.rhino.Node;
 import com.google.javascript.rhino.Token;
@@ -50,7 +52,6 @@
  * <p>Other requirements can be found in {@link Candidate#canInline}. Currently
  * this pass does not operate on the global scope due to compilation time.
  *
-*
  */
 class FlowSensitiveInlineVariables extends AbstractPostOrderCallback
     implements CompilerPass, ScopedCallback {
@@ -77,6 +78,36 @@
   private MustBeReachingVariableDef reachingDef;
   private MaybeReachingVariableUse reachingUses;
 
+  private static final Predicate<Node> SIDE_EFFECT_PREDICATE =
+    new Predicate<Node>() {
+      @Override
+      public boolean apply(Node n) {
+        // When the node is null it means, we reached the implicit return
+        // where the function returns (possibly without an return statement)
+        if (n == null) {
+          return false;
+        }
+
+        // TODO(user): We only care about calls to functions that
+        // passes one of the dependent variable to a non-sideeffect free
+        // function.
+        if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {
+          return true;
+        }
+
+        if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {
+          return true;
+        }
+
+        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
+          if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {
+            return true;
+          }
+        }
+        return false;
+      }
+  };
+
   public FlowSensitiveInlineVariables(AbstractCompiler compiler) {
     this.compiler = compiler;
   }
@@ -88,10 +119,15 @@
       return; // Don't even brother. All global variables are likely escaped.
     }
 
+    if (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE <
+        t.getScope().getVarCount()) {
+      return;
+    }
+
     // Compute the forward reaching definition.
-    ControlFlowAnalysis cfa = new ControlFlowAnalysis(compiler, false);
+    ControlFlowAnalysis cfa = new ControlFlowAnalysis(compiler, false, true);
     // Process the body of the function.
-    Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
+    Preconditions.checkState(t.getScopeRoot().isFunction());
     cfa.process(null, t.getScopeRoot().getLastChild());
     cfg = cfa.getCfg();
     reachingDef = new MustBeReachingVariableDef(cfg, t.getScope(), compiler);
@@ -153,13 +189,13 @@
 
         @Override
         public void visit(NodeTraversal t, Node n, Node parent) {
-          if (NodeUtil.isName(n)) {
+          if (n.isName()) {
 
             // Make sure that the name node is purely a read.
             if ((NodeUtil.isAssignmentOp(parent) && parent.getFirstChild() == n)
-                || NodeUtil.isVar(parent) || parent.getType() == Token.INC ||
-                parent.getType() == Token.DEC || parent.getType() == Token.LP ||
-                parent.getType() == Token.CATCH) {
+                || parent.isVar() || parent.isInc() ||
+                parent.isDec() || parent.isParamList() ||
+                parent.isCatch()) {
               return;
             }
 
@@ -169,7 +205,8 @@
             }
 
             Node defNode = reachingDef.getDef(name, cfgNode);
-            if (defNode != null) {
+            if (defNode != null &&
+                !reachingDef.dependsOnOuterScopeVars(name, cfgNode)) {
               candidates.add(new Candidate(name, defNode, n, cfgNode));
             }
           }
@@ -201,7 +238,7 @@
     private int numUseWithinUseCfgNode;
 
     Candidate(String varName, Node defCfgNode, Node use, Node useCfgNode) {
-      Preconditions.checkArgument(NodeUtil.isName(use));
+      Preconditions.checkArgument(use.isName());
       this.varName = varName;
       this.defCfgNode = defCfgNode;
       this.use = use;
@@ -211,7 +248,7 @@
     private boolean canInline() {
 
       // Cannot inline a parameter.
-      if (NodeUtil.isFunction(defCfgNode)) {
+      if (defCfgNode.isFunction()) {
         return false;
       }
 
@@ -225,10 +262,26 @@
 
       // Check that the assignment isn't used as a R-Value.
       // TODO(user): Certain cases we can still inline.
-      if (NodeUtil.isAssign(def) && !NodeUtil.isExprAssign(def.getParent())) {
+      if (def.isAssign() && !NodeUtil.isExprAssign(def.getParent())) {
         return false;
       }
 
+
+      // The right of the definition has side effect:
+      // Example, for x:
+      // x = readProp(b), modifyProp(b); print(x);
+      if (checkRightOf(def, defCfgNode, SIDE_EFFECT_PREDICATE)) {
+        return false;
+      }
+
+      // Similar check as the above but this time, all the sub-expressions
+      // left of the use of the variable.
+      // x = readProp(b); modifyProp(b), print(x);
+      if (checkLeftOf(use, useCfgNode, SIDE_EFFECT_PREDICATE)) {
+        return false;
+      }
+
+
       // TODO(user): Side-effect is ok sometimes. As long as there are no
       // side-effect function down all paths to the use. Once we have all the
       // side-effect analysis tool.
@@ -245,6 +298,18 @@
         return false;
       }
 
+      // Make sure that the name is not within a loop
+      if (NodeUtil.isWithinLoop(use)) {
+        return false;
+      }
+
+
+      Collection<Node> uses = reachingUses.getUses(varName, defCfgNode);
+
+      if (uses.size() != 1) {
+        return false;
+      }
+
       // We give up inling stuff with R-Value that has GETPROP, GETELEM,
       // or anything that creates a new object.
       // Example:
@@ -272,16 +337,31 @@
               @Override
               public boolean apply(Node input) {
                 // Recurse if the node is not a function.
-                return !NodeUtil.isFunction(input);
+                return !input.isFunction();
               }
           })) {
         return false;
       }
 
-      Collection<Node> uses = reachingUses.getUses(varName, defCfgNode);
-
-      if (uses.size() != 1) {
-        return false;
+      // We can skip the side effect check along the paths of two nodes if
+      // they are just next to each other.
+      if (NodeUtil.isStatementBlock(defCfgNode.getParent()) &&
+          defCfgNode.getNext() != useCfgNode) {
+        // Similar side effect check as above but this time the side effect is
+        // else where along the path.
+        // x = readProp(b); while(modifyProp(b)) {}; print(x);
+        CheckPathsBetweenNodes<Node, ControlFlowGraph.Branch>
+          pathCheck = new CheckPathsBetweenNodes<Node, ControlFlowGraph.Branch>(
+                 cfg,
+                 cfg.getDirectedGraphNode(defCfgNode),
+                 cfg.getDirectedGraphNode(useCfgNode),
+                 SIDE_EFFECT_PREDICATE,
+                 Predicates.
+                     <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),
+                 false);
+        if (pathCheck.somePathsSatisfyPredicate()) {
+          return false;
+        }
       }
 
       return true;
@@ -293,17 +373,17 @@
     private void inlineVariable() {
       Node defParent = def.getParent();
       Node useParent = use.getParent();
-      if (NodeUtil.isAssign(def)) {
+      if (def.isAssign()) {
         Node rhs = def.getLastChild();
         rhs.detachFromParent();
         // Oh yes! I have grandparent to remove this.
-        Preconditions.checkState(NodeUtil.isExpressionNode(defParent));
-        while (defParent.getParent().getType() == Token.LABEL) {
+        Preconditions.checkState(defParent.isExprResult());
+        while (defParent.getParent().isLabel()) {
           defParent = defParent.getParent();
         }
         defParent.detachFromParent();
         useParent.replaceChild(use, rhs);
-      } else if (NodeUtil.isVar(defParent)) {
+      } else if (defParent.isVar()) {
         Node rhs = def.getLastChild();
         def.removeChild(rhs);
         useParent.replaceChild(use, rhs);
@@ -333,7 +413,7 @@
 
             case Token.ASSIGN:
               Node lhs = n.getFirstChild();
-              if (NodeUtil.isName(lhs) && lhs.getString().equals(varName)) {
+              if (lhs.isName() && lhs.getString().equals(varName)) {
                 def = n;
               }
               return;
@@ -354,7 +434,10 @@
 
         @Override
         public void visit(NodeTraversal t, Node n, Node parent) {
-          if (NodeUtil.isName(n) && n.getString().equals(varName)) {
+          if (n.isName() && n.getString().equals(varName) &&
+              // do not count in if it is left child of an assignment operator
+              !(parent.isAssign() &&
+               (parent.getFirstChild() == n))) {
             numUseWithinUseCfgNode++;
           }
         }
@@ -363,4 +446,45 @@
       NodeTraversal.traverse(compiler, n, gatherCb);
     }
   }
+
+  /**
+   * Given an expression by its root and sub-expression n, return true if there
+   * the predicate is true for some expression on the right of n.
+   *
+   * Example:
+   *
+   * NotChecked(), NotChecked(), n, Checked(), Checked();
+   */
+  private static boolean checkRightOf(
+      Node n, Node expressionRoot, Predicate<Node> predicate) {
+    for (Node p = n; p != expressionRoot; p = p.getParent()) {
+      for (Node cur = p.getNext(); cur != null; cur = cur.getNext()) {
+        if (predicate.apply(cur)) {
+          return true;
+        }
+      }
+    }
+    return false;
+  }
+
+  /**
+   * Given an expression by its root and sub-expression n, return true if there
+   * the predicate is true for some expression on the left of n.
+   *
+   * Example:
+   *
+   * Checked(), Checked(), n, NotChecked(), NotChecked();
+   */
+  private static boolean checkLeftOf(
+      Node n, Node expressionRoot, Predicate<Node> predicate) {
+    for (Node p = n.getParent(); p != expressionRoot; p = p.getParent()) {
+      for (Node cur = p.getParent().getFirstChild(); cur != p;
+          cur = cur.getNext()) {
+        if (predicate.apply(cur)) {
+          return true;
+        }
+      }
+    }
+    return false;
+  }
 }
Only in buggy/src/com/google/javascript/jscomp: MustBeReachingVariableDef.java
diff -r -u original/test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java buggy/test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java
--- original/test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java	2023-06-13 15:31:38.827078575 +0800
+++ buggy/test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java	2023-06-12 11:40:19.231051053 +0800
@@ -1,5 +1,5 @@
 /*
- * Copyright 2009 Google Inc.
+ * Copyright 2009 The Closure Compiler Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -16,12 +16,18 @@
 
 package com.google.javascript.jscomp;
 
+import com.google.javascript.rhino.Node;
+
 /**
  * Unit tests for {@link FlowSensitiveInlineVariables}.
  *
-*
  */
 public class FlowSensitiveInlineVariablesTest extends CompilerTestCase  {
+
+  public static final String EXTERN_FUNCTIONS = "" +
+      "/** @nosideeffects */ function noSFX() {} \n" +
+      "                      function hasSFX() {} \n";
+
   @Override
   public int getNumRepetitions() {
     // Test repeatedly inline.
@@ -29,20 +35,29 @@
   }
 
   @Override
-  protected CompilerPass getProcessor(Compiler compiler) {
-    return new FlowSensitiveInlineVariables(compiler);
+  protected CompilerPass getProcessor(final Compiler compiler) {
+    //return new FlowSensitiveInlineVariables(compiler);
+    return new CompilerPass() {
+      @Override
+      public void process(Node externs, Node root) {
+        (new MarkNoSideEffectCalls(compiler)).process(externs, root);
+        (new FlowSensitiveInlineVariables(compiler)).process(externs, root);
+      }
+    };
   }
 
   public void testSimpleAssign() {
     inline("var x; x = 1; print(x)", "var x; print(1)");
     inline("var x; x = 1; x", "var x; 1");
     inline("var x; x = 1; var a = x", "var x; var a = 1");
+    inline("var x; x = 1; x = x + 1", "var x; x = 1 + 1");
   }
 
   public void testSimpleVar() {
     inline("var x = 1; print(x)", "var x; print(1)");
     inline("var x = 1; x", "var x; 1");
     inline("var x = 1; var a = x", "var x; var a = 1");
+    inline("var x = 1; x = x + 1", "var x; x = 1 + 1");
   }
 
   public void testExported() {
@@ -75,6 +90,10 @@
     noInline("var x = 1; if (print) { print(x) } else { alert(x) }");
   }
 
+  public void testAssignmentBeforeDefinition() {
+    inline("x = 1; var x = 0; print(x)","x = 1; var x; print(0)" );
+  }
+
   public void testVarInConditionPath() {
     noInline("if (foo) { var x = 0 } print(x)");
   }
@@ -84,8 +103,10 @@
   }
 
   public void testMultiDefinitionsInSameCfgNode() {
-    noInline("var x; x = 1 || x = 2; print(x)");
-    noInline("var x; x = 1 && x = 2; print(x)");
+    noInline("var x; (x = 1) || (x = 2); print(x)");
+    noInline("var x; x = (1 || (x = 2)); print(x)");
+    noInline("var x;(x = 1) && (x = 2); print(x)");
+    noInline("var x;x = (1 && (x = 2)); print(x)");
     noInline("var x; x = 1 , x = 2; print(x)");
   }
 
@@ -105,6 +126,10 @@
     noInline("while (z) { var x = 3; } var y = x;");
   }
 
+  public void testDoNotInlineWithinLoop() {
+    noInline("var y = noSFX(); do { var z = y.foo(); } while (true);");
+  }
+
   public void testDefinitionAfterUse() {
     inline("var x = 0; print(x); x = 1", "var x; print(0); x = 1");
   }
@@ -257,26 +282,30 @@
     noInline("var x = a[i]; a[j] = 2; print(x); ");
   }
 
+  // TODO(user): These should be inlinable.
   public void testNoInlineConstructors() {
     noInline("var x = new Iterator(); x.next();");
   }
 
+  // TODO(user): These should be inlinable.
   public void testNoInlineArrayLits() {
     noInline("var x = []; print(x)");
   }
 
+  // TODO(user): These should be inlinable.
   public void testNoInlineObjectLits() {
     noInline("var x = {}; print(x)");
   }
 
+  // TODO(user): These should be inlinable after the REGEX checks.
   public void testNoInlineRegExpLits() {
     noInline("var x = /y/; print(x)");
   }
 
   public void testInlineConstructorCallsIntoLoop() {
-    // Is a bad idea, a similar case was found in closure string.js
+    // Don't inline construction into loops.
     noInline("var x = new Iterator();" +
-             "for(var x = 0; x < 10; x++) {j = x.next()};");
+             "for(i = 0; i < 10; i++) {j = x.next()}");
   }
 
   public void testRemoveWithLabels() {
@@ -285,15 +314,88 @@
     inline("var x = 1; L: M: N: x = 2; print(x)", "var x = 1; print(2)");
   }
 
+  public void testInlineAcrossSideEffect1() {
+    inline("var y; var x = noSFX(y); print(x)", "var y;var x;print(noSFX(y))");
+  }
+
+  public void testInlineAcrossSideEffect2() {
+    // Think noSFX() as a function that reads y.foo and return it
+    // and SFX() write some new value of y.foo. If that's the case,
+    // inlining across hasSFX() is not valid.
+
+    // This is a case where hasSFX is right of the source of the inlining.
+    noInline("var y; var x = noSFX(y), z = hasSFX(y); print(x)");
+    noInline("var y; var x = noSFX(y), z = new hasSFX(y); print(x)");
+    noInline("var y; var x = new noSFX(y), z = new hasSFX(y); print(x)");
+  }
+
+  public void testInlineAcrossSideEffect3() {
+    // This is a case where hasSFX is left of the destination of the inlining.
+    noInline("var y; var x = noSFX(y); hasSFX(y), print(x)");
+    noInline("var y; var x = noSFX(y); new hasSFX(y), print(x)");
+    noInline("var y; var x = new noSFX(y); new hasSFX(y), print(x)");
+  }
+
+  public void testInlineAcrossSideEffect4() {
+    // This is a case where hasSFX is some control flow path between the
+    // source and its destination.
+    noInline("var y; var x = noSFX(y); hasSFX(y); print(x)");
+    noInline("var y; var x = noSFX(y); new hasSFX(y); print(x)");
+    noInline("var y; var x = new noSFX(y); new hasSFX(y); print(x)");
+  }
+
+  public void testCanInlineAcrossNoSideEffect() {
+    inline("var y; var x = noSFX(Y), z = noSFX(); noSFX(); noSFX(), print(x)",
+           "var y; var x, z = noSFX(); noSFX(); noSFX(), print(noSFX(Y))");
+  }
+
+  public void testDependOnOuterScopeVariables() {
+    noInline("var x; function foo() { var y = x; x = 0; print(y) }");
+    noInline("var x; function foo() { var y = x; x++; print(y) }");
+
+    // Sadly, we don't understand the data flow of outer scoped variables as
+    // it can be modified by code outside of this scope. We can't inline
+    // at all if the definition has dependence on such variable.
+    noInline("var x; function foo() { var y = x; print(y) }");
+  }
+
+  public void testInlineIfNameIsLeftSideOfAssign() {
+    inline("var x = 1; x = print(x) + 1", "var x; x = print(1) + 1");
+    inline("var x = 1; L: x = x + 2", "var x; L: x = 1 + 2");
+    inline("var x = 1; x = (x = x + 1)", "var x; x = (x = 1 + 1)");
+
+    noInline("var x = 1; x = (x = (x = 10) + x)");
+    noInline("var x = 1; x = (f(x) + (x = 10) + x);");
+    noInline("var x = 1; x=-1,foo(x)");
+    noInline("var x = 1; x-=1,foo(x)");
+  }
+
   public void testInlineArguments() {
     testSame("function _func(x) { print(x) }");
     testSame("function _func(x,y) { if(y) { x = 1 }; print(x) }");
 
-    test("function(x, y) { x = 1; print(x) }",
-         "function(x, y) { print(1) }");
+    test("function f(x, y) { x = 1; print(x) }",
+         "function f(x, y) { print(1) }");
+
+    test("function f(x, y) { if (y) { x = 1; print(x) }}",
+         "function f(x, y) { if (y) { print(1) }}");
+  }
+
+  public void testInvalidInlineArguments1() {
+    testSame("function f(x, y) { x = 1; arguments[0] = 2; print(x) }");
+    testSame("function f(x, y) { x = 1; var z = arguments;" +
+        "z[0] = 2; z[1] = 3; print(x)}");
+    testSame("function g(a){a[0]=2} function f(x){x=1;g(arguments);print(x)}");
+  }
+
+  public void testInvalidInlineArguments2() {
+    testSame("function f(c) {var f = c; arguments[0] = this;" +
+             "f.apply(this, arguments); return this;}");
+  }
 
-    test("function(x, y) { if (y) { x = 1; print(x) }}",
-         "function(x, y) { if (y) { print(1) }}");
+  public void testNotOkToSkipCheckPathBetweenNodes() {
+    noInline("var x; for(x = 1; foo(x);) {}");
+    noInline("var x; for(; x = 1;foo(x)) {}");
   }
 
   private void noInline(String input) {
@@ -301,7 +403,7 @@
   }
 
   private void inline(String input, String expected) {
-    test("function _func() {" + input + "}",
-        "function _func() {" + expected + "}");
+    test(EXTERN_FUNCTIONS, "function _func() {" + input + "}",
+        "function _func() {" + expected + "}", null, null);
   }
 }
