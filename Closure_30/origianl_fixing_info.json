{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "/home/liumengjiao/Desktop/CI/Benchmark/data/changesInfo/",
  "properties": {
    "trigger.tests": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest::testInlineAcrossSideEffect1,com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest::testCanInlineAcrossNoSideEffect,com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest::testIssue698",
    "test.dir": "test",
    "clz.modified": "com.google.javascript.jscomp.FlowSensitiveInlineVariables,com.google.javascript.jscomp.MustBeReachingVariableDef",
    "src.dir": "src"
  },
  "timeoutSecond": 100,
  "proj": "Closure",
  "id": "30",
  "workingDir": "../bugs/Closure_30_buggy",
  "buggyCommit": "6da361c5865ecac18ee147014c9e84244d19c2a9",
  "inducingCommit": "74a817bbf5256d671036356c58096f612535e4a2",
  "originalCommit": "7e0d71b3d68ad4788a094d8618e2b0aa474cf3db",
  "bug_name": "Closure_30",
  "derive": "defects4j",
  "original_fixing_commit": "38e2b8f247423734adec3dbd76fa22da1a3561a8",
  "buildFiles_changed": false,
  "regression": true,
  "inducing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/jscomp/AbstractCompiler.java",
        "src/com/google/javascript/jscomp/AbstractCompiler.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [
            "com.google.javascript.jscomp.AbstractCompiler:getCssRenamingMap:[]:CssRenamingMap",
            "com.google.javascript.jscomp.AbstractCompiler:getNodeForCodeInsertion:[JSModule module]:Node",
            "com.google.javascript.jscomp.AbstractCompiler:addChangeHandler:[CodeChangeHandler handler]:void",
            "com.google.javascript.jscomp.AbstractCompiler:parseSyntheticCode:[String filename, String code]:Node",
            "com.google.javascript.jscomp.AbstractCompiler:removeChangeHandler:[CodeChangeHandler handler]:void",
            "com.google.javascript.jscomp.AbstractCompiler:prepareAst:[Node root]:void",
            "com.google.javascript.jscomp.AbstractCompiler:setUnnormalized:[]:void",
            "com.google.javascript.jscomp.AbstractCompiler:getCodingConvention:[]:CodingConvention",
            "com.google.javascript.jscomp.AbstractCompiler:hasHaltingErrors:[]:boolean",
            "com.google.javascript.jscomp.AbstractCompiler:hasRegExpGlobalReferences:[]:boolean",
            "com.google.javascript.jscomp.AbstractCompiler:newExternInput:[String name]:CompilerInput",
            "com.google.javascript.jscomp.AbstractCompiler:getModuleGraph:[]:JSModuleGraph",
            "com.google.javascript.jscomp.AbstractCompiler:getTypeValidator:[]:TypeValidator",
            "com.google.javascript.jscomp.AbstractCompiler:getScopeCreator:[]:ScopeCreator",
            "com.google.javascript.jscomp.AbstractCompiler:getTypeRegistry:[]:JSTypeRegistry",
            "com.google.javascript.jscomp.AbstractCompiler:getErrorManager:[]:ErrorManager",
            "com.google.javascript.jscomp.AbstractCompiler:report:[JSError error]:void",
            "com.google.javascript.jscomp.AbstractCompiler:setNormalized:[]:void",
            "com.google.javascript.jscomp.AbstractCompiler:setCssRenamingMap:[CssRenamingMap map]:void",
            "com.google.javascript.jscomp.AbstractCompiler:getParserConfig:[]:Config",
            "com.google.javascript.jscomp.AbstractCompiler:isIdeMode:[]:boolean",
            "com.google.javascript.jscomp.AbstractCompiler:toSource:[Node root]:String",
            "com.google.javascript.jscomp.AbstractCompiler:reportCodeChange:[]:void",
            "com.google.javascript.jscomp.AbstractCompiler:addToDebugLog:[String message]:void",
            "com.google.javascript.jscomp.AbstractCompiler:parseSyntheticCode:[String code]:Node",
            "com.google.javascript.jscomp.AbstractCompiler:getUniqueNameIdSupplier:[]:Supplier\u003cString\u003e",
            "com.google.javascript.jscomp.AbstractCompiler:setHasRegExpGlobalReferences:[boolean references]:void",
            "com.google.javascript.jscomp.AbstractCompiler:getTopScope:[]:Scope",
            "com.google.javascript.jscomp.AbstractCompiler:getReverseAbstractInterpreter:[]:ReverseAbstractInterpreter",
            "com.google.javascript.jscomp.AbstractCompiler:getInput:[String sourceName]:CompilerInput",
            "com.google.javascript.jscomp.AbstractCompiler:isTypeCheckingEnabled:[]:boolean",
            "com.google.javascript.jscomp.AbstractCompiler:acquireSymbolTable:[]:SymbolTable",
            "com.google.javascript.jscomp.AbstractCompiler:throwInternalError:[String msg, Exception cause]:void",
            "com.google.javascript.jscomp.AbstractCompiler:getDefaultErrorReporter:[]:ErrorReporter",
            "com.google.javascript.jscomp.AbstractCompiler:areNodesEqualForInlining:[Node n1, Node n2]:boolean",
            "com.google.javascript.jscomp.AbstractCompiler:isNormalized:[]:boolean"
          ],
          "num": 36
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "-1"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "35",
            "36",
            "37",
            "38",
            "39",
            "40",
            "41",
            "42",
            "43",
            "44",
            "45",
            "46",
            "47",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57",
            "58",
            "59",
            "60",
            "61",
            "62",
            "63",
            "64",
            "65",
            "66",
            "67",
            "68",
            "69",
            "70",
            "71",
            "72",
            "73",
            "74",
            "75",
            "76",
            "77",
            "78",
            "79",
            "80",
            "81",
            "82",
            "83",
            "84",
            "85",
            "86",
            "87",
            "88",
            "89",
            "90",
            "91",
            "92",
            "93",
            "94",
            "95",
            "96",
            "97",
            "98",
            "99",
            "100",
            "101",
            "102",
            "103",
            "104",
            "105",
            "106",
            "107",
            "108",
            "109",
            "110",
            "111",
            "112",
            "113",
            "114",
            "115",
            "116",
            "117",
            "118",
            "119",
            "120",
            "121",
            "122",
            "123",
            "124",
            "125",
            "126",
            "127",
            "128",
            "129",
            "130",
            "131",
            "132",
            "133",
            "134",
            "135",
            "136",
            "137",
            "138",
            "139",
            "140",
            "141",
            "142",
            "143",
            "144",
            "145",
            "146",
            "147",
            "148",
            "149",
            "150",
            "151",
            "152",
            "153",
            "154",
            "155",
            "156",
            "157",
            "158",
            "159",
            "160",
            "161",
            "162",
            "163",
            "164",
            "165",
            "166",
            "167",
            "168",
            "169",
            "170",
            "171",
            "172",
            "173",
            "174",
            "175",
            "176",
            "177",
            "178",
            "179",
            "180",
            "181",
            "182",
            "183",
            "184",
            "185",
            "186",
            "187",
            "188",
            "189",
            "190",
            "191",
            "192",
            "193",
            "194",
            "195",
            "196",
            "197",
            "198",
            "199",
            "200",
            "201",
            "202",
            "203",
            "204",
            "205",
            "206",
            "207",
            "208",
            "209",
            "210",
            "211",
            "212",
            "213",
            "214",
            "215",
            "216",
            "217",
            "218",
            "219",
            "220",
            "221",
            "222",
            "223",
            "224",
            "225",
            "226",
            "227",
            "228",
            "229",
            "230",
            "231",
            "232",
            "233",
            "234",
            "235",
            "236",
            "237",
            "238",
            "239",
            "240"
          ],
          "num": 240
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/jscomp/AbstractCompiler.java b/src/com/google/javascript/jscomp/AbstractCompiler.java\nnew file mode 100644\nindex 0000000..2971dbc\n--- /dev/null\n+++ b/src/com/google/javascript/jscomp/AbstractCompiler.java\n@@ -0,0 +1,240 @@\n+/*\n+ * Copyright 2009 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.javascript.jscomp;\n+\n+import com.google.common.base.Supplier;\n+import com.google.javascript.jscomp.mozilla.rhino.ErrorReporter;\n+import com.google.javascript.jscomp.parsing.Config;\n+import com.google.javascript.rhino.Node;\n+import com.google.javascript.rhino.jstype.JSTypeRegistry;\n+\n+/**\n+ * An abstract compiler, to help remove the circular dependency of\n+ * passes on JSCompiler.\n+ *\n+ * This is an abstract class, so that we can make the methods package-private.\n+ *\n+ * @author nicksantos@google.com (Nick Santos)\n+ */\n+public abstract class AbstractCompiler implements SourceExcerptProvider {\n+  static final DiagnosticType READ_ERROR \u003d DiagnosticType.error(\n+      \"JSC_READ_ERROR\", \"Cannot read: {0}\");\n+\n+  // TODO(nicksantos): Decide if all of these are really necessary.\n+  // Many of them are just accessors that should be passed to the\n+  // CompilerPass\u0027s constructor.\n+\n+  /**\n+   * Looks up an input (possibly an externs input) by name. May return null.\n+   */\n+  public abstract CompilerInput getInput(String sourceName);\n+\n+  /**\n+   * Creates a new externs file.\n+   * @param name A name for the new externs file.\n+   * @throws IllegalArgumentException If the name of the externs file conflicts\n+   *     with a pre-existing externs file.\n+   */\n+  abstract CompilerInput newExternInput(String name);\n+\n+  /**\n+   * Gets the module graph. May return null if there are no modules.\n+   */\n+  abstract JSModuleGraph getModuleGraph();\n+\n+  /**\n+   * Gets a central registry of type information from the compiled JS.\n+   */\n+  public abstract JSTypeRegistry getTypeRegistry();\n+\n+  /**\n+   * Gets a memoized scope creator.\n+   */\n+  abstract ScopeCreator getScopeCreator();\n+\n+  /**\n+   * Gets the top scope.\n+   */\n+  public abstract Scope getTopScope();\n+\n+  /**\n+   * Report an error or warning.\n+   */\n+  public abstract void report(JSError error);\n+\n+  /**\n+   * Report an internal error.\n+   */\n+  abstract void throwInternalError(String msg, Exception cause);\n+\n+  /**\n+   * Gets the current coding convention.\n+   */\n+  public abstract CodingConvention getCodingConvention();\n+\n+  /**\n+   * Report code changes.\n+   */\n+  public abstract void reportCodeChange();\n+\n+  /**\n+   * Logs a message under a central logger.\n+   */\n+  abstract void addToDebugLog(String message);\n+\n+  /**\n+   * Sets the CssRenamingMap.\n+   */\n+  abstract void setCssRenamingMap(CssRenamingMap map);\n+\n+  /**\n+   * Gets the CssRenamingMap.\n+   */\n+  abstract CssRenamingMap getCssRenamingMap();\n+\n+  /**\n+   * Gets a suitable SCRIPT node to serve as a parent for code insertion. If\n+   * {@code module} contains any inputs, the returned node will be the SCRIPT\n+   * node corresponding to its first input. If {@code module} is empty, on the\n+   * other hand, then the returned node will be the first SCRIPT node in a\n+   * non-empty module that {@code module} depends on (the deepest one possible).\n+   *\n+   * @param module A module. If null, will return the first SCRIPT node of all\n+   *     modules.\n+   * @return A SCRIPT node (never null).\n+   */\n+  abstract Node getNodeForCodeInsertion(JSModule module);\n+\n+  /**\n+   * Gets the central registry of type violations.\n+   */\n+  abstract TypeValidator getTypeValidator();\n+\n+  /**\n+   * Parses code for injecting.\n+   */\n+  abstract Node parseSyntheticCode(String code);\n+\n+  /**\n+   * Parses code for injecting, and associate it with a given source file.\n+   */\n+  abstract Node parseSyntheticCode(String filename, String code);\n+\n+  /**\n+   * Prints a node to source code.\n+   */\n+  abstract String toSource(Node root);\n+\n+  /**\n+   * Gets a default error reporter for injecting into Rhino.\n+   */\n+  abstract ErrorReporter getDefaultErrorReporter();\n+\n+  /**\n+   * Get an interpreter for type analysis.\n+   */\n+  public abstract ReverseAbstractInterpreter getReverseAbstractInterpreter();\n+\n+  /**\n+   * @return Whether the normalization pass has been run.\n+   */\n+  abstract boolean isNormalized();\n+\n+  /**\n+   * Generates unique ids.\n+   */\n+  abstract Supplier\u003cString\u003e getUniqueNameIdSupplier();\n+\n+  /**\n+   * @return Whether any errors have been encountered that\n+   *     should stop the compilation process.\n+   */\n+  abstract boolean hasHaltingErrors();\n+\n+  /**\n+   * Register a listener for code change events.\n+   */\n+  abstract void addChangeHandler(CodeChangeHandler handler);\n+\n+  /**\n+   * Remove a listener for code change events.\n+   */\n+  abstract void removeChangeHandler(CodeChangeHandler handler);\n+\n+  /**\n+   * Returns true if compiling in IDE mode.\n+   */\n+  abstract boolean isIdeMode();\n+\n+  /**\n+   * Returns the parser configuration.\n+   */\n+  abstract Config getParserConfig();\n+\n+  /**\n+   * Returns true if type checking is enabled.\n+   */\n+  abstract boolean isTypeCheckingEnabled();\n+\n+  /**\n+   * Normalizes the types of AST nodes in the given tree, and\n+   * annotates any nodes to which the coding convention applies so that passes\n+   * can read the annotations instead of using the coding convention.\n+   */\n+  abstract void prepareAst(Node root);\n+\n+  /**\n+   * Acquires the symbol table.\n+   */\n+  abstract SymbolTable acquireSymbolTable();\n+\n+  /**\n+   * Gets the error manager.\n+   */\n+  abstract public ErrorManager getErrorManager();\n+\n+  /**\n+   * Set if the normalization pass has been done.\n+   * Note: non-private to enable test cases that require the Normalize pass.\n+   */\n+  abstract void setNormalized();\n+\n+  /**\n+   * Set once unnormalizing passes have been start.\n+   * Note: non-private to enable test cases that require the Normalize pass.\n+   */\n+  abstract void setUnnormalized();\n+\n+  /**\n+   * Are the nodes equal for the purpose of inlining?\n+   * If type aware optimizations are on, type equality is checked.\n+   */\n+  abstract boolean areNodesEqualForInlining(Node n1, Node n2);\n+\n+  /**\n+   * Set if RegExp global properties are used.\n+   * @param references Whether there are references to the RegExp global object\n+   *     properties.\n+   */\n+  abstract void setHasRegExpGlobalReferences(boolean references);\n+  \n+  /**\n+   * @return Whether the AST constains references to the RegExp global object\n+   *     properties.\n+   */\n+  abstract boolean hasRegExpGlobalReferences();\n+}\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [6207,6430]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [6436,6592]"
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/jscomp/Compiler.java",
        "src/com/google/javascript/jscomp/Compiler.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [
            "com.google.javascript.jscomp.Compiler:compile:[List\u003cJSSourceFile\u003e externs, List\u003cJSSourceFile\u003e inputs, CompilerOptions options]:Result",
            "com.google.javascript.jscomp.Compiler:runInCompilerThread:[final Callable\u003cT\u003e callable]:T",
            "com.google.javascript.jscomp.Compiler:getSourceFileByName:[String sourceName]:SourceFile",
            "com.google.javascript.jscomp.Compiler:stopTracer:[Tracer t, String passName]:void",
            "com.google.javascript.jscomp.Compiler:compile:[JSSourceFile extern, JSSourceFile input, CompilerOptions options]:Result",
            "com.google.javascript.jscomp.Compiler:getVariableMap:[]:VariableMap",
            "com.google.javascript.jscomp.Compiler:getCodingConvention:[]:CodingConvention",
            "com.google.javascript.jscomp.Compiler:getMessages:[]:JSError[]",
            "com.google.javascript.jscomp.Compiler:Compiler:[PrintStream stream]:null",
            "com.google.javascript.jscomp.Compiler:getAllInputsFromModules:[]:List\u003cCompilerInput\u003e",
            "com.google.javascript.jscomp.Compiler:compile:[JSSourceFile extern, JSSourceFile[] input, CompilerOptions options]:Result",
            "com.google.javascript.jscomp.Compiler:toSource:[]:String",
            "com.google.javascript.jscomp.Compiler:setHasRegExpGlobalReferences:[boolean references]:void",
            "com.google.javascript.jscomp.Compiler:endPass:[]:void",
            "com.google.javascript.jscomp.Compiler:getInput:[String name]:CompilerInput",
            "com.google.javascript.jscomp.Compiler:getWarnings:[]:JSError[]",
            "com.google.javascript.jscomp.Compiler:getDefaultErrorReporter:[]:ErrorReporter",
            "com.google.javascript.jscomp.Compiler:parseSyntheticCode:[String fileName, String js]:Node",
            "com.google.javascript.jscomp.Compiler:checkFirstModule:[List\u003cJSModule\u003e modules]:void",
            "com.google.javascript.jscomp.Compiler:processDefines:[]:void",
            "com.google.javascript.jscomp.Compiler\\$CodeBuilder:endsWith:[String suffix]:boolean",
            "com.google.javascript.jscomp.Compiler:compile:[JSSourceFile[] externs, JSModule[] modules, CompilerOptions options]:Result",
            "com.google.javascript.jscomp.Compiler:parseTestCode:[String js]:Node",
            "com.google.javascript.jscomp.Compiler:initCompilerOptionsIfTesting:[]:void",
            "com.google.javascript.jscomp.Compiler:runCustomPasses:[CustomPassExecutionTime executionTime]:void",
            "com.google.javascript.jscomp.Compiler:getNodeForCodeInsertion:[JSModule module]:Node",
            "com.google.javascript.jscomp.Compiler:Compiler:[ErrorManager errorManager]:null",
            "com.google.javascript.jscomp.Compiler:stripCode:[Set\u003cString\u003e stripTypes, Set\u003cString\u003e stripNameSuffixes, Set\u003cString\u003e stripTypePrefixes, Set\u003cString\u003e stripNamePrefixes]:void",
            "com.google.javascript.jscomp.Compiler:compile:[JSSourceFile[] externs, JSSourceFile[] inputs, CompilerOptions options]:Result",
            "com.google.javascript.jscomp.Compiler\\$CodeBuilder:toString:[]:String",
            "com.google.javascript.jscomp.Compiler:isInliningForbidden:[]:boolean",
            "com.google.javascript.jscomp.Compiler:computeCFG:[]:ControlFlowGraph\u003cNode\u003e",
            "com.google.javascript.jscomp.Compiler:parse:[JSSourceFile file]:Node",
            "com.google.javascript.jscomp.Compiler:init:[JSSourceFile[] externs, JSSourceFile[] inputs, CompilerOptions options]:void",
            "com.google.javascript.jscomp.Compiler:startPass:[String passName]:void",
            "com.google.javascript.jscomp.Compiler:rebuildInputsFromModules:[]:void",
            "com.google.javascript.jscomp.Compiler:isIdeMode:[]:boolean",
            "com.google.javascript.jscomp.Compiler:makeCompilerInput:[List\u003cJSSourceFile\u003e files, boolean isExtern]:List\u003cCompilerInput\u003e",
            "com.google.javascript.jscomp.Compiler:getResult:[]:Result",
            "com.google.javascript.jscomp.Compiler:getOptions:[]:CompilerOptions",
            "com.google.javascript.jscomp.Compiler:createMessageFormatter:[]:MessageFormatter",
            "com.google.javascript.jscomp.Compiler:getParserConfig:[]:Config",
            "com.google.javascript.jscomp.Compiler:setErrorManager:[ErrorManager errorManager]:void",
            "com.google.javascript.jscomp.Compiler:toSourceArray:[final JSModule module]:String[]",
            "com.google.javascript.jscomp.Compiler:getTypeValidator:[]:TypeValidator",
            "com.google.javascript.jscomp.Compiler:addIncrementalSourceAst:[JsAst ast]:void",
            "com.google.javascript.jscomp.Compiler:getModuleGraph:[]:JSModuleGraph",
            "com.google.javascript.jscomp.Compiler:initModules:[List\u003cJSSourceFile\u003e externs, List\u003cJSModule\u003e modules, CompilerOptions options]:void",
            "com.google.javascript.jscomp.Compiler:getPassConfig:[]:PassConfig",
            "com.google.javascript.jscomp.Compiler:getErrors:[]:JSError[]",
            "com.google.javascript.jscomp.Compiler:addToDebugLog:[String str]:void",
            "com.google.javascript.jscomp.Compiler:compileModules:[List\u003cJSSourceFile\u003e externs, List\u003cJSModule\u003e modules, CompilerOptions options]:Result",
            "com.google.javascript.jscomp.Compiler:process:[CompilerPass p]:void",
            "com.google.javascript.jscomp.Compiler:optimize:[]:void",
            "com.google.javascript.jscomp.Compiler:fillEmptyModules:[List\u003cJSModule\u003e modules]:void",
            "com.google.javascript.jscomp.Compiler:getState:[]:IntermediateState",
            "com.google.javascript.jscomp.Compiler:newTracer:[String passName]:Tracer",
            "com.google.javascript.jscomp.Compiler:toSource:[final CodeBuilder cb, final int inputSeqNum, final Node root]:void",
            "com.google.javascript.jscomp.Compiler:runSanityCheck:[]:void",
            "com.google.javascript.jscomp.Compiler:init:[JSSourceFile[] externs, JSModule[] modules, CompilerOptions options]:void",
            "com.google.javascript.jscomp.Compiler:setCssRenamingMap:[CssRenamingMap map]:void",
            "com.google.javascript.jscomp.Compiler:throwInternalError:[String message, Exception cause]:void",
            "com.google.javascript.jscomp.Compiler:nextUniqueNameId:[]:int",
            "com.google.javascript.jscomp.Compiler:getSourceLine:[String sourceName, int lineNumber]:String",
            "com.google.javascript.jscomp.Compiler:compile:[JSSourceFile extern, JSModule[] modules, CompilerOptions options]:Result",
            "com.google.javascript.jscomp.Compiler:acquireSymbolTable:[]:SymbolTable",
            "com.google.javascript.jscomp.Compiler:newExternInput:[String name]:CompilerInput",
            "com.google.javascript.jscomp.Compiler:toSourceArray:[]:String[]",
            "com.google.javascript.jscomp.Compiler\\$CodeBuilder:getColumnIndex:[]:int",
            "com.google.javascript.jscomp.Compiler:getWarningCount:[]:int",
            "com.google.javascript.jscomp.Compiler:getTypeRegistry:[]:JSTypeRegistry",
            "com.google.javascript.jscomp.Compiler:createPassConfigInternal:[]:PassConfig",
            "com.google.javascript.jscomp.Compiler\\$CodeBuilder:append:[String str]:CodeBuilder",
            "com.google.javascript.jscomp.Compiler:normalize:[]:void",
            "com.google.javascript.jscomp.Compiler:init:[List\u003cJSSourceFile\u003e externs, List\u003cJSSourceFile\u003e inputs, CompilerOptions options]:void",
            "com.google.javascript.jscomp.Compiler:getPropertyMap:[]:VariableMap",
            "com.google.javascript.jscomp.Compiler:hasErrors:[]:boolean",
            "com.google.javascript.jscomp.Compiler:removeChangeHandler:[CodeChangeHandler handler]:void",
            "com.google.javascript.jscomp.Compiler:getCssRenamingMap:[]:CssRenamingMap",
            "com.google.javascript.jscomp.Compiler\\$CodeBuilder:getLineIndex:[]:int",
            "com.google.javascript.jscomp.Compiler\\$IntermediateState:IntermediateState:[]:null",
            "com.google.javascript.jscomp.Compiler:getErrorCount:[]:int",
            "com.google.javascript.jscomp.Compiler:report:[JSError error]:void",
            "com.google.javascript.jscomp.Compiler:initBasedOnOptions:[]:void",
            "com.google.javascript.jscomp.Compiler:hasHaltingErrors:[]:boolean",
            "com.google.javascript.jscomp.Compiler:precheck:[]:boolean",
            "com.google.javascript.jscomp.Compiler:getTopScope:[]:Scope",
            "com.google.javascript.jscomp.Compiler:externExports:[]:void",
            "com.google.javascript.jscomp.Compiler:initInputsByNameMap:[]:void",
            "com.google.javascript.jscomp.Compiler:setNormalized:[]:void",
            "com.google.javascript.jscomp.Compiler\\$CodeBuilder:reset:[]:void",
            "com.google.javascript.jscomp.Compiler:disableThreads:[]:void",
            "com.google.javascript.jscomp.Compiler:isTypeCheckingEnabled:[]:boolean",
            "com.google.javascript.jscomp.Compiler:getAstDotGraph:[]:String",
            "com.google.javascript.jscomp.Compiler:Compiler:[]:null",
            "com.google.javascript.jscomp.Compiler:parseSyntheticCode:[String js]:Node",
            "com.google.javascript.jscomp.Compiler:setState:[IntermediateState state]:void",
            "com.google.javascript.jscomp.Compiler:reportCodeChange:[]:void",
            "com.google.javascript.jscomp.Compiler:compile:[]:Result",
            "com.google.javascript.jscomp.Compiler:setPassConfig:[PassConfig passes]:void",
            "com.google.javascript.jscomp.Compiler:isNormalized:[]:boolean",
            "com.google.javascript.jscomp.Compiler:removeTryCatchFinally:[]:void",
            "com.google.javascript.jscomp.Compiler:prepareAst:[Node root]:void",
            "com.google.javascript.jscomp.Compiler:parse:[]:void",
            "com.google.javascript.jscomp.Compiler:check:[]:void",
            "com.google.javascript.jscomp.Compiler:toSource:[Node n]:String",
            "com.google.javascript.jscomp.Compiler:getSourceMap:[]:SourceMap",
            "com.google.javascript.jscomp.Compiler:setUnnormalized:[]:void",
            "com.google.javascript.jscomp.Compiler:getErrorManager:[]:ErrorManager",
            "com.google.javascript.jscomp.Compiler:getReverseAbstractInterpreter:[]:ReverseAbstractInterpreter",
            "com.google.javascript.jscomp.Compiler\\$CodeBuilder:getLength:[]:int",
            "com.google.javascript.jscomp.Compiler:getFunctionalInformationMap:[]:FunctionInformationMap",
            "com.google.javascript.jscomp.Compiler:parseInputs:[]:Node",
            "com.google.javascript.jscomp.Compiler:setLoggingLevel:[Level level]:void",
            "com.google.javascript.jscomp.Compiler:toSource:[final JSModule module]:String",
            "com.google.javascript.jscomp.Compiler:getSourceRegion:[String sourceName, int lineNumber]:Region",
            "com.google.javascript.jscomp.Compiler:getRoot:[]:Node",
            "com.google.javascript.jscomp.Compiler:initOptions:[CompilerOptions options]:void",
            "com.google.javascript.jscomp.Compiler:getUniqueNameIdSupplier:[]:Supplier\u003cString\u003e",
            "com.google.javascript.jscomp.Compiler:compileInternal:[]:void",
            "com.google.javascript.jscomp.Compiler:getScopeCreator:[]:ScopeCreator",
            "com.google.javascript.jscomp.Compiler:resetUniqueNameId:[]:void",
            "com.google.javascript.jscomp.Compiler:maybeSanityCheck:[]:void",
            "com.google.javascript.jscomp.Compiler:areNodesEqualForInlining:[Node n1, Node n2]:boolean",
            "com.google.javascript.jscomp.Compiler:recordFunctionInformation:[]:void",
            "com.google.javascript.jscomp.Compiler:addChangeHandler:[CodeChangeHandler handler]:void",
            "com.google.javascript.jscomp.Compiler:hasRegExpGlobalReferences:[]:boolean"
          ],
          "num": 127
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "-1"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "35",
            "36",
            "37",
            "38",
            "39",
            "40",
            "41",
            "42",
            "43",
            "44",
            "45",
            "46",
            "47",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57",
            "58",
            "59",
            "60",
            "61",
            "62",
            "63",
            "64",
            "65",
            "66",
            "67",
            "68",
            "69",
            "70",
            "71",
            "72",
            "73",
            "74",
            "75",
            "76",
            "77",
            "78",
            "79",
            "80",
            "81",
            "82",
            "83",
            "84",
            "85",
            "86",
            "87",
            "88",
            "89",
            "90",
            "91",
            "92",
            "93",
            "94",
            "95",
            "96",
            "97",
            "98",
            "99",
            "100",
            "101",
            "102",
            "103",
            "104",
            "105",
            "106",
            "107",
            "108",
            "109",
            "110",
            "111",
            "112",
            "113",
            "114",
            "115",
            "116",
            "117",
            "118",
            "119",
            "120",
            "121",
            "122",
            "123",
            "124",
            "125",
            "126",
            "127",
            "128",
            "129",
            "130",
            "131",
            "132",
            "133",
            "134",
            "135",
            "136",
            "137",
            "138",
            "139",
            "140",
            "141",
            "142",
            "143",
            "144",
            "145",
            "146",
            "147",
            "148",
            "149",
            "150",
            "151",
            "152",
            "153",
            "154",
            "155",
            "156",
            "157",
            "158",
            "159",
            "160",
            "161",
            "162",
            "163",
            "164",
            "165",
            "166",
            "167",
            "168",
            "169",
            "170",
            "171",
            "172",
            "173",
            "174",
            "175",
            "176",
            "177",
            "178",
            "179",
            "180",
            "181",
            "182",
            "183",
            "184",
            "185",
            "186",
            "187",
            "188",
            "189",
            "190",
            "191",
            "192",
            "193",
            "194",
            "195",
            "196",
            "197",
            "198",
            "199",
            "200",
            "201",
            "202",
            "203",
            "204",
            "205",
            "206",
            "207",
            "208",
            "209",
            "210",
            "211",
            "212",
            "213",
            "214",
            "215",
            "216",
            "217",
            "218",
            "219",
            "220",
            "221",
            "222",
            "223",
            "224",
            "225",
            "226",
            "227",
            "228",
            "229",
            "230",
            "231",
            "232",
            "233",
            "234",
            "235",
            "236",
            "237",
            "238",
            "239",
            "240",
            "241",
            "242",
            "243",
            "244",
            "245",
            "246",
            "247",
            "248",
            "249",
            "250",
            "251",
            "252",
            "253",
            "254",
            "255",
            "256",
            "257",
            "258",
            "259",
            "260",
            "261",
            "262",
            "263",
            "264",
            "265",
            "266",
            "267",
            "268",
            "269",
            "270",
            "271",
            "272",
            "273",
            "274",
            "275",
            "276",
            "277",
            "278",
            "279",
            "280",
            "281",
            "282",
            "283",
            "284",
            "285",
            "286",
            "287",
            "288",
            "289",
            "290",
            "291",
            "292",
            "293",
            "294",
            "295",
            "296",
            "297",
            "298",
            "299",
            "300",
            "301",
            "302",
            "303",
            "304",
            "305",
            "306",
            "307",
            "308",
            "309",
            "310",
            "311",
            "312",
            "313",
            "314",
            "315",
            "316",
            "317",
            "318",
            "319",
            "320",
            "321",
            "322",
            "323",
            "324",
            "325",
            "326",
            "327",
            "328",
            "329",
            "330",
            "331",
            "332",
            "333",
            "334",
            "335",
            "336",
            "337",
            "338",
            "339",
            "340",
            "341",
            "342",
            "343",
            "344",
            "345",
            "346",
            "347",
            "348",
            "349",
            "350",
            "351",
            "352",
            "353",
            "354",
            "355",
            "356",
            "357",
            "358",
            "359",
            "360",
            "361",
            "362",
            "363",
            "364",
            "365",
            "366",
            "367",
            "368",
            "369",
            "370",
            "371",
            "372",
            "373",
            "374",
            "375",
            "376",
            "377",
            "378",
            "379",
            "380",
            "381",
            "382",
            "383",
            "384",
            "385",
            "386",
            "387",
            "388",
            "389",
            "390",
            "391",
            "392",
            "393",
            "394",
            "395",
            "396",
            "397",
            "398",
            "399",
            "400",
            "401",
            "402",
            "403",
            "404",
            "405",
            "406",
            "407",
            "408",
            "409",
            "410",
            "411",
            "412",
            "413",
            "414",
            "415",
            "416",
            "417",
            "418",
            "419",
            "420",
            "421",
            "422",
            "423",
            "424",
            "425",
            "426",
            "427",
            "428",
            "429",
            "430",
            "431",
            "432",
            "433",
            "434",
            "435",
            "436",
            "437",
            "438",
            "439",
            "440",
            "441",
            "442",
            "443",
            "444",
            "445",
            "446",
            "447",
            "448",
            "449",
            "450",
            "451",
            "452",
            "453",
            "454",
            "455",
            "456",
            "457",
            "458",
            "459",
            "460",
            "461",
            "462",
            "463",
            "464",
            "465",
            "466",
            "467",
            "468",
            "469",
            "470",
            "471",
            "472",
            "473",
            "474",
            "475",
            "476",
            "477",
            "478",
            "479",
            "480",
            "481",
            "482",
            "483",
            "484",
            "485",
            "486",
            "487",
            "488",
            "489",
            "490",
            "491",
            "492",
            "493",
            "494",
            "495",
            "496",
            "497",
            "498",
            "499",
            "500",
            "501",
            "502",
            "503",
            "504",
            "505",
            "506",
            "507",
            "508",
            "509",
            "510",
            "511",
            "512",
            "513",
            "514",
            "515",
            "516",
            "517",
            "518",
            "519",
            "520",
            "521",
            "522",
            "523",
            "524",
            "525",
            "526",
            "527",
            "528",
            "529",
            "530",
            "531",
            "532",
            "533",
            "534",
            "535",
            "536",
            "537",
            "538",
            "539",
            "540",
            "541",
            "542",
            "543",
            "544",
            "545",
            "546",
            "547",
            "548",
            "549",
            "550",
            "551",
            "552",
            "553",
            "554",
            "555",
            "556",
            "557",
            "558",
            "559",
            "560",
            "561",
            "562",
            "563",
            "564",
            "565",
            "566",
            "567",
            "568",
            "569",
            "570",
            "571",
            "572",
            "573",
            "574",
            "575",
            "576",
            "577",
            "578",
            "579",
            "580",
            "581",
            "582",
            "583",
            "584",
            "585",
            "586",
            "587",
            "588",
            "589",
            "590",
            "591",
            "592",
            "593",
            "594",
            "595",
            "596",
            "597",
            "598",
            "599",
            "600",
            "601",
            "602",
            "603",
            "604",
            "605",
            "606",
            "607",
            "608",
            "609",
            "610",
            "611",
            "612",
            "613",
            "614",
            "615",
            "616",
            "617",
            "618",
            "619",
            "620",
            "621",
            "622",
            "623",
            "624",
            "625",
            "626",
            "627",
            "628",
            "629",
            "630",
            "631",
            "632",
            "633",
            "634",
            "635",
            "636",
            "637",
            "638",
            "639",
            "640",
            "641",
            "642",
            "643",
            "644",
            "645",
            "646",
            "647",
            "648",
            "649",
            "650",
            "651",
            "652",
            "653",
            "654",
            "655",
            "656",
            "657",
            "658",
            "659",
            "660",
            "661",
            "662",
            "663",
            "664",
            "665",
            "666",
            "667",
            "668",
            "669",
            "670",
            "671",
            "672",
            "673",
            "674",
            "675",
            "676",
            "677",
            "678",
            "679",
            "680",
            "681",
            "682",
            "683",
            "684",
            "685",
            "686",
            "687",
            "688",
            "689",
            "690",
            "691",
            "692",
            "693",
            "694",
            "695",
            "696",
            "697",
            "698",
            "699",
            "700",
            "701",
            "702",
            "703",
            "704",
            "705",
            "706",
            "707",
            "708",
            "709",
            "710",
            "711",
            "712",
            "713",
            "714",
            "715",
            "716",
            "717",
            "718",
            "719",
            "720",
            "721",
            "722",
            "723",
            "724",
            "725",
            "726",
            "727",
            "728",
            "729",
            "730",
            "731",
            "732",
            "733",
            "734",
            "735",
            "736",
            "737",
            "738",
            "739",
            "740",
            "741",
            "742",
            "743",
            "744",
            "745",
            "746",
            "747",
            "748",
            "749",
            "750",
            "751",
            "752",
            "753",
            "754",
            "755",
            "756",
            "757",
            "758",
            "759",
            "760",
            "761",
            "762",
            "763",
            "764",
            "765",
            "766",
            "767",
            "768",
            "769",
            "770",
            "771",
            "772",
            "773",
            "774",
            "775",
            "776",
            "777",
            "778",
            "779",
            "780",
            "781",
            "782",
            "783",
            "784",
            "785",
            "786",
            "787",
            "788",
            "789",
            "790",
            "791",
            "792",
            "793",
            "794",
            "795",
            "796",
            "797",
            "798",
            "799",
            "800",
            "801",
            "802",
            "803",
            "804",
            "805",
            "806",
            "807",
            "808",
            "809",
            "810",
            "811",
            "812",
            "813",
            "814",
            "815",
            "816",
            "817",
            "818",
            "819",
            "820",
            "821",
            "822",
            "823",
            "824",
            "825",
            "826",
            "827",
            "828",
            "829",
            "830",
            "831",
            "832",
            "833",
            "834",
            "835",
            "836",
            "837",
            "838",
            "839",
            "840",
            "841",
            "842",
            "843",
            "844",
            "845",
            "846",
            "847",
            "848",
            "849",
            "850",
            "851",
            "852",
            "853",
            "854",
            "855",
            "856",
            "857",
            "858",
            "859",
            "860",
            "861",
            "862",
            "863",
            "864",
            "865",
            "866",
            "867",
            "868",
            "869",
            "870",
            "871",
            "872",
            "873",
            "874",
            "875",
            "876",
            "877",
            "878",
            "879",
            "880",
            "881",
            "882",
            "883",
            "884",
            "885",
            "886",
            "887",
            "888",
            "889",
            "890",
            "891",
            "892",
            "893",
            "894",
            "895",
            "896",
            "897",
            "898",
            "899",
            "900",
            "901",
            "902",
            "903",
            "904",
            "905",
            "906",
            "907",
            "908",
            "909",
            "910",
            "911",
            "912",
            "913",
            "914",
            "915",
            "916",
            "917",
            "918",
            "919",
            "920",
            "921",
            "922",
            "923",
            "924",
            "925",
            "926",
            "927",
            "928",
            "929",
            "930",
            "931",
            "932",
            "933",
            "934",
            "935",
            "936",
            "937",
            "938",
            "939",
            "940",
            "941",
            "942",
            "943",
            "944",
            "945",
            "946",
            "947",
            "948",
            "949",
            "950",
            "951",
            "952",
            "953",
            "954",
            "955",
            "956",
            "957",
            "958",
            "959",
            "960",
            "961",
            "962",
            "963",
            "964",
            "965",
            "966",
            "967",
            "968",
            "969",
            "970",
            "971",
            "972",
            "973",
            "974",
            "975",
            "976",
            "977",
            "978",
            "979",
            "980",
            "981",
            "982",
            "983",
            "984",
            "985",
            "986",
            "987",
            "988",
            "989",
            "990",
            "991",
            "992",
            "993",
            "994",
            "995",
            "996",
            "997",
            "998",
            "999",
            "1000",
            "1001",
            "1002",
            "1003",
            "1004",
            "1005",
            "1006",
            "1007",
            "1008",
            "1009",
            "1010",
            "1011",
            "1012",
            "1013",
            "1014",
            "1015",
            "1016",
            "1017",
            "1018",
            "1019",
            "1020",
            "1021",
            "1022",
            "1023",
            "1024",
            "1025",
            "1026",
            "1027",
            "1028",
            "1029",
            "1030",
            "1031",
            "1032",
            "1033",
            "1034",
            "1035",
            "1036",
            "1037",
            "1038",
            "1039",
            "1040",
            "1041",
            "1042",
            "1043",
            "1044",
            "1045",
            "1046",
            "1047",
            "1048",
            "1049",
            "1050",
            "1051",
            "1052",
            "1053",
            "1054",
            "1055",
            "1056",
            "1057",
            "1058",
            "1059",
            "1060",
            "1061",
            "1062",
            "1063",
            "1064",
            "1065",
            "1066",
            "1067",
            "1068",
            "1069",
            "1070",
            "1071",
            "1072",
            "1073",
            "1074",
            "1075",
            "1076",
            "1077",
            "1078",
            "1079",
            "1080",
            "1081",
            "1082",
            "1083",
            "1084",
            "1085",
            "1086",
            "1087",
            "1088",
            "1089",
            "1090",
            "1091",
            "1092",
            "1093",
            "1094",
            "1095",
            "1096",
            "1097",
            "1098",
            "1099",
            "1100",
            "1101",
            "1102",
            "1103",
            "1104",
            "1105",
            "1106",
            "1107",
            "1108",
            "1109",
            "1110",
            "1111",
            "1112",
            "1113",
            "1114",
            "1115",
            "1116",
            "1117",
            "1118",
            "1119",
            "1120",
            "1121",
            "1122",
            "1123",
            "1124",
            "1125",
            "1126",
            "1127",
            "1128",
            "1129",
            "1130",
            "1131",
            "1132",
            "1133",
            "1134",
            "1135",
            "1136",
            "1137",
            "1138",
            "1139",
            "1140",
            "1141",
            "1142",
            "1143",
            "1144",
            "1145",
            "1146",
            "1147",
            "1148",
            "1149",
            "1150",
            "1151",
            "1152",
            "1153",
            "1154",
            "1155",
            "1156",
            "1157",
            "1158",
            "1159",
            "1160",
            "1161",
            "1162",
            "1163",
            "1164",
            "1165",
            "1166",
            "1167",
            "1168",
            "1169",
            "1170",
            "1171",
            "1172",
            "1173",
            "1174",
            "1175",
            "1176",
            "1177",
            "1178",
            "1179",
            "1180",
            "1181",
            "1182",
            "1183",
            "1184",
            "1185",
            "1186",
            "1187",
            "1188",
            "1189",
            "1190",
            "1191",
            "1192",
            "1193",
            "1194",
            "1195",
            "1196",
            "1197",
            "1198",
            "1199",
            "1200",
            "1201",
            "1202",
            "1203",
            "1204",
            "1205",
            "1206",
            "1207",
            "1208",
            "1209",
            "1210",
            "1211",
            "1212",
            "1213",
            "1214",
            "1215",
            "1216",
            "1217",
            "1218",
            "1219",
            "1220",
            "1221",
            "1222",
            "1223",
            "1224",
            "1225",
            "1226",
            "1227",
            "1228",
            "1229",
            "1230",
            "1231",
            "1232",
            "1233",
            "1234",
            "1235",
            "1236",
            "1237",
            "1238",
            "1239",
            "1240",
            "1241",
            "1242",
            "1243",
            "1244",
            "1245",
            "1246",
            "1247",
            "1248",
            "1249",
            "1250",
            "1251",
            "1252",
            "1253",
            "1254",
            "1255",
            "1256",
            "1257",
            "1258",
            "1259",
            "1260",
            "1261",
            "1262",
            "1263",
            "1264",
            "1265",
            "1266",
            "1267",
            "1268",
            "1269",
            "1270",
            "1271",
            "1272",
            "1273",
            "1274",
            "1275",
            "1276",
            "1277",
            "1278",
            "1279",
            "1280",
            "1281",
            "1282",
            "1283",
            "1284",
            "1285",
            "1286",
            "1287",
            "1288",
            "1289",
            "1290",
            "1291",
            "1292",
            "1293",
            "1294",
            "1295",
            "1296",
            "1297",
            "1298",
            "1299",
            "1300",
            "1301",
            "1302",
            "1303",
            "1304",
            "1305",
            "1306",
            "1307",
            "1308",
            "1309",
            "1310",
            "1311",
            "1312",
            "1313",
            "1314",
            "1315",
            "1316",
            "1317",
            "1318",
            "1319",
            "1320",
            "1321",
            "1322",
            "1323",
            "1324",
            "1325",
            "1326",
            "1327",
            "1328",
            "1329",
            "1330",
            "1331",
            "1332",
            "1333",
            "1334",
            "1335",
            "1336",
            "1337",
            "1338",
            "1339",
            "1340",
            "1341",
            "1342",
            "1343",
            "1344",
            "1345",
            "1346",
            "1347",
            "1348",
            "1349",
            "1350",
            "1351",
            "1352",
            "1353",
            "1354",
            "1355",
            "1356",
            "1357",
            "1358",
            "1359",
            "1360",
            "1361",
            "1362",
            "1363",
            "1364",
            "1365",
            "1366",
            "1367",
            "1368",
            "1369",
            "1370",
            "1371",
            "1372",
            "1373",
            "1374",
            "1375",
            "1376",
            "1377",
            "1378",
            "1379",
            "1380",
            "1381",
            "1382",
            "1383",
            "1384",
            "1385",
            "1386",
            "1387",
            "1388",
            "1389",
            "1390",
            "1391",
            "1392",
            "1393",
            "1394",
            "1395",
            "1396",
            "1397",
            "1398",
            "1399",
            "1400",
            "1401",
            "1402",
            "1403",
            "1404",
            "1405",
            "1406",
            "1407",
            "1408",
            "1409",
            "1410",
            "1411",
            "1412",
            "1413",
            "1414",
            "1415",
            "1416",
            "1417",
            "1418",
            "1419",
            "1420",
            "1421",
            "1422",
            "1423",
            "1424",
            "1425",
            "1426",
            "1427",
            "1428",
            "1429",
            "1430",
            "1431",
            "1432",
            "1433",
            "1434",
            "1435",
            "1436",
            "1437",
            "1438",
            "1439",
            "1440",
            "1441",
            "1442",
            "1443",
            "1444",
            "1445",
            "1446",
            "1447",
            "1448",
            "1449",
            "1450",
            "1451",
            "1452",
            "1453",
            "1454",
            "1455",
            "1456",
            "1457",
            "1458",
            "1459",
            "1460",
            "1461",
            "1462",
            "1463",
            "1464",
            "1465",
            "1466",
            "1467",
            "1468",
            "1469",
            "1470",
            "1471",
            "1472",
            "1473",
            "1474",
            "1475",
            "1476",
            "1477",
            "1478",
            "1479",
            "1480",
            "1481",
            "1482",
            "1483",
            "1484",
            "1485",
            "1486",
            "1487",
            "1488",
            "1489",
            "1490",
            "1491",
            "1492",
            "1493",
            "1494",
            "1495",
            "1496",
            "1497",
            "1498",
            "1499",
            "1500",
            "1501",
            "1502",
            "1503",
            "1504",
            "1505",
            "1506",
            "1507",
            "1508",
            "1509",
            "1510",
            "1511",
            "1512",
            "1513",
            "1514",
            "1515",
            "1516",
            "1517",
            "1518",
            "1519",
            "1520",
            "1521",
            "1522",
            "1523",
            "1524",
            "1525",
            "1526",
            "1527",
            "1528",
            "1529",
            "1530",
            "1531",
            "1532",
            "1533",
            "1534",
            "1535",
            "1536",
            "1537",
            "1538",
            "1539",
            "1540",
            "1541",
            "1542",
            "1543",
            "1544",
            "1545",
            "1546",
            "1547",
            "1548",
            "1549",
            "1550",
            "1551",
            "1552",
            "1553",
            "1554",
            "1555",
            "1556",
            "1557",
            "1558",
            "1559",
            "1560",
            "1561",
            "1562",
            "1563",
            "1564",
            "1565",
            "1566",
            "1567",
            "1568",
            "1569",
            "1570",
            "1571",
            "1572",
            "1573",
            "1574",
            "1575",
            "1576",
            "1577",
            "1578",
            "1579",
            "1580",
            "1581",
            "1582",
            "1583",
            "1584",
            "1585",
            "1586",
            "1587",
            "1588",
            "1589",
            "1590",
            "1591",
            "1592",
            "1593",
            "1594",
            "1595",
            "1596",
            "1597",
            "1598",
            "1599",
            "1600",
            "1601",
            "1602",
            "1603",
            "1604",
            "1605",
            "1606",
            "1607",
            "1608",
            "1609",
            "1610",
            "1611",
            "1612",
            "1613",
            "1614",
            "1615",
            "1616",
            "1617",
            "1618",
            "1619",
            "1620",
            "1621",
            "1622",
            "1623",
            "1624",
            "1625",
            "1626",
            "1627",
            "1628",
            "1629",
            "1630",
            "1631",
            "1632",
            "1633",
            "1634",
            "1635",
            "1636",
            "1637",
            "1638",
            "1639",
            "1640",
            "1641",
            "1642",
            "1643",
            "1644",
            "1645",
            "1646",
            "1647",
            "1648",
            "1649",
            "1650",
            "1651",
            "1652",
            "1653",
            "1654",
            "1655",
            "1656",
            "1657",
            "1658",
            "1659",
            "1660",
            "1661",
            "1662",
            "1663",
            "1664",
            "1665",
            "1666",
            "1667",
            "1668",
            "1669",
            "1670",
            "1671",
            "1672",
            "1673",
            "1674",
            "1675",
            "1676",
            "1677",
            "1678",
            "1679",
            "1680",
            "1681",
            "1682",
            "1683",
            "1684",
            "1685",
            "1686",
            "1687",
            "1688",
            "1689",
            "1690",
            "1691",
            "1692",
            "1693",
            "1694",
            "1695",
            "1696",
            "1697",
            "1698",
            "1699",
            "1700",
            "1701",
            "1702",
            "1703",
            "1704",
            "1705",
            "1706",
            "1707",
            "1708",
            "1709",
            "1710",
            "1711",
            "1712",
            "1713",
            "1714",
            "1715",
            "1716",
            "1717",
            "1718",
            "1719",
            "1720",
            "1721",
            "1722",
            "1723",
            "1724",
            "1725",
            "1726",
            "1727",
            "1728",
            "1729",
            "1730",
            "1731",
            "1732",
            "1733",
            "1734",
            "1735",
            "1736",
            "1737",
            "1738",
            "1739",
            "1740",
            "1741",
            "1742",
            "1743",
            "1744",
            "1745",
            "1746",
            "1747",
            "1748",
            "1749",
            "1750",
            "1751",
            "1752",
            "1753",
            "1754"
          ],
          "num": 1754
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/jscomp/Compiler.java b/src/com/google/javascript/jscomp/Compiler.java\nnew file mode 100644\nindex 0000000..0104062\n--- /dev/null\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n@@ -0,0 +1,1754 @@\n+/*\n+ * Copyright 2004 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.javascript.jscomp;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Preconditions;\n+import com.google.common.base.Supplier;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.Lists;\n+import com.google.common.collect.Maps;\n+import com.google.javascript.jscomp.CompilerOptions.DevMode;\n+import com.google.javascript.jscomp.CompilerOptions.TracerMode;\n+import com.google.javascript.jscomp.mozilla.rhino.ErrorReporter;\n+import com.google.javascript.jscomp.parsing.Config;\n+import com.google.javascript.jscomp.parsing.ParserRunner;\n+import com.google.javascript.rhino.Node;\n+import com.google.javascript.rhino.Token;\n+import com.google.javascript.rhino.jstype.JSTypeRegistry;\n+\n+import java.io.IOException;\n+import java.io.PrintStream;\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.Callable;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+/**\n+ * Compiler (and the other classes in this package) does the following:\n+ * \u003cul\u003e\n+ * \u003cli\u003eparses JS code\n+ * \u003cli\u003echecks for undefined variables\n+ * \u003cli\u003eperforms optimizations such as constant folding and constants inlining\n+ * \u003cli\u003erenames variables (to short names)\n+ * \u003cli\u003eoutputs compact javascript code\n+ * \u003c/ul\u003e\n+ *\n+ * External variables are declared in \u0027externs\u0027 files. For instance, the file\n+ * may include definitions for global javascript/browser objects such as\n+ * window, document.\n+ *\n+*\n+*\n+ */\n+public class Compiler extends AbstractCompiler {\n+  CompilerOptions options \u003d null;\n+\n+  private PassConfig passes \u003d null;\n+\n+  // The externs inputs\n+  private List\u003cCompilerInput\u003e externs;\n+\n+  // The JS source modules\n+  private List\u003cJSModule\u003e modules;\n+\n+  // The graph of the JS source modules\n+  private JSModuleGraph moduleGraph;\n+\n+  // The JS source inputs\n+  private List\u003cCompilerInput\u003e inputs;\n+\n+  // error manager to which error management is delegated\n+  private ErrorManager errorManager;\n+\n+  // Cached data structures.\n+  private SymbolTable symbolTable \u003d null;\n+\n+  // Parse tree root nodes\n+  Node externsRoot;\n+  Node jsRoot;\n+  Node externAndJsRoot;\n+\n+  private Map\u003cString, CompilerInput\u003e inputsByName;\n+\n+  /** The source code map */\n+  private SourceMap sourceMap;\n+\n+  /** The externs created from the exports.  */\n+  private String externExports \u003d null;\n+\n+  /**\n+   * Ids for function inlining so that each declared name remains\n+   * unique.\n+   */\n+  private int uniqueNameId \u003d 0;\n+\n+  /**\n+   * Whether the optional \"normalization\" pass has been run.  Passes that\n+   * depend on the assumptions made there should check this value.\n+   */\n+  private boolean normalized \u003d false;\n+\n+  /** Whether to use threads. */\n+  private boolean useThreads \u003d true;\n+\n+  /** \n+   * Whether to assume there are references to the RegExp Global object\n+   * properties.\n+   */\n+  private boolean hasRegExpGlobalReferences \u003d true;\n+  \n+  /** The function information map */\n+  private FunctionInformationMap functionInformationMap;\n+\n+  /** Debugging information */\n+  private final StringBuilder debugLog \u003d new StringBuilder();\n+\n+  /** Detects Google-specific coding conventions. */\n+  CodingConvention defaultCodingConvention \u003d new GoogleCodingConvention();\n+\n+  private JSTypeRegistry typeRegistry;\n+  private Config parserConfig \u003d null;\n+\n+  private ReverseAbstractInterpreter abstractInterpreter;\n+  private final TypeValidator typeValidator;\n+\n+  public PerformanceTracker tracker;\n+\n+  // The oldErrorReporter exists so we can get errors from the JSTypeRegistry.\n+  private final com.google.javascript.rhino.ErrorReporter oldErrorReporter \u003d\n+      RhinoErrorReporter.forOldRhino(this);\n+\n+  // This error reporter gets the messages from the current Rhino parser.\n+  private final ErrorReporter defaultErrorReporter \u003d\n+      RhinoErrorReporter.forNewRhino(this);\n+\n+  /** Error strings used for reporting JSErrors */\n+  public static final DiagnosticType OPTIMIZE_LOOP_ERROR \u003d DiagnosticType.error(\n+      \"JSC_OPTIMIZE_LOOP_ERROR\",\n+      \"Exceeded max number of optimization iterations: {0}\");\n+  public static final DiagnosticType MOTION_ITERATIONS_ERROR \u003d\n+      DiagnosticType.error(\"JSC_OPTIMIZE_LOOP_ERROR\",\n+          \"Exceeded max number of code motion iterations: {0}\");\n+\n+  private static final long COMPILER_STACK_SIZE \u003d 1048576L;\n+\n+\n+  /**\n+   * Logger for the whole com.google.javascript.jscomp domain -\n+   * setting configuration for this logger affects all loggers\n+   *  in other classes within the compiler.\n+   */\n+  private static final Logger logger \u003d\n+      Logger.getLogger(\"com.google.javascript.jscomp\");\n+\n+  private final PrintStream outStream;\n+\n+  /**\n+   * Creates a Compiler that reports errors and warnings to its logger.\n+   */\n+  public Compiler() {\n+    this((PrintStream) null);\n+  }\n+\n+  /**\n+   * Creates n Compiler that reports errors and warnings to an output\n+   * stream.\n+   */\n+  public Compiler(PrintStream stream) {\n+    addChangeHandler(recentChange);\n+    this.typeValidator \u003d new TypeValidator(this);\n+    outStream \u003d stream;\n+  }\n+\n+  /**\n+   * Creates a Compiler that uses a custom error manager.\n+   */\n+  public Compiler(ErrorManager errorManager) {\n+    this();\n+    setErrorManager(errorManager);\n+  }\n+\n+  /**\n+   * Acquires the symbol table.\n+   */\n+  @Override\n+  SymbolTable acquireSymbolTable() {\n+    if (symbolTable \u003d\u003d null) {\n+      symbolTable \u003d new SymbolTable(this);\n+    }\n+    symbolTable.acquire();\n+    return symbolTable;\n+  }\n+\n+  /**\n+   * Sets the error manager.\n+   *\n+   * @param errorManager the error manager, it cannot be {@code null}\n+   */\n+  public void setErrorManager(ErrorManager errorManager) {\n+    Preconditions.checkNotNull(\n+        errorManager, \"the error manager cannot be null\");\n+    this.errorManager \u003d errorManager;\n+  }\n+\n+  /**\n+   * Creates a message formatter instance corresponding to the value of\n+   * {@link CompilerOptions}.\n+   */\n+  private MessageFormatter createMessageFormatter() {\n+    boolean colorize \u003d options.shouldColorizeErrorOutput();\n+    return options.errorFormat.toFormatter(this, colorize);\n+  }\n+\n+  /**\n+   * Initialize the compiler options. Only necessary if you\u0027re not doing\n+   * a normal compile() job.\n+   */\n+  public void initOptions(CompilerOptions options) {\n+    this.options \u003d options;\n+    if (errorManager \u003d\u003d null) {\n+      if (outStream \u003d\u003d null) {\n+        setErrorManager(\n+            new LoggerErrorManager(createMessageFormatter(), logger));\n+      } else {\n+        PrintStreamErrorManager printer \u003d\n+            new PrintStreamErrorManager(createMessageFormatter(), outStream);\n+        printer.setSummaryDetailLevel(options.summaryDetailLevel);\n+        setErrorManager(printer);\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Initializes the instance state needed for a compile job.\n+   */\n+  public void init(JSSourceFile[] externs, JSSourceFile[] inputs,\n+      CompilerOptions options) {\n+    init(Lists.\u003cJSSourceFile\u003enewArrayList(externs),\n+        Lists.\u003cJSSourceFile\u003enewArrayList(inputs), options);\n+  }\n+\n+  /**\n+   * Initializes the instance state needed for a compile job.\n+   */\n+  public void init(List\u003cJSSourceFile\u003e externs, List\u003cJSSourceFile\u003e inputs,\n+      CompilerOptions options) {\n+    initOptions(options);\n+    \n+    this.externs \u003d makeCompilerInput(externs, true);\n+    this.modules \u003d null;\n+    this.moduleGraph \u003d null;\n+    this.inputs \u003d makeCompilerInput(inputs, false);\n+    initBasedOnOptions();\n+\n+    initInputsByNameMap();\n+  }\n+\n+  static final DiagnosticType MODULE_DEPENDENCY_ERROR \u003d\n+      DiagnosticType.error(\"JSC_MODULE_DEPENDENCY_ERROR\",\n+          \"Bad dependency: {0} -\u003e {1}. \"\n+              + \"Modules must be listed in dependency order.\");\n+\n+  /**\n+   * Initializes the instance state needed for a compile job if the sources\n+   * are in modules.\n+   */\n+  public void init(JSSourceFile[] externs, JSModule[] modules,\n+      CompilerOptions options) {\n+    initModules(Lists.\u003cJSSourceFile\u003enewArrayList(externs),\n+         Lists.\u003cJSModule\u003enewArrayList(modules), options);\n+  }\n+  \n+  /**\n+   * Initializes the instance state needed for a compile job if the sources\n+   * are in modules.\n+   */\n+  public void initModules(\n+      List\u003cJSSourceFile\u003e externs, List\u003cJSModule\u003e modules,\n+      CompilerOptions options) {\n+    initOptions(options);\n+\n+    checkFirstModule(modules);\n+    fillEmptyModules(modules);\n+\n+    this.externs \u003d makeCompilerInput(externs, true);\n+    this.modules \u003d modules;\n+    // Generate the module graph, and report any errors in the module\n+    // specification as errors.\n+    try {\n+      this.moduleGraph \u003d new JSModuleGraph(modules);\n+    } catch (JSModuleGraph.ModuleDependenceException e) {\n+      // problems with the module format.  Report as an error.  The\n+      // message gives all details.\n+      report(JSError.make(MODULE_DEPENDENCY_ERROR,\n+          e.getModule().getName(), e.getDependentModule().getName()));\n+      return;\n+    }\n+    this.inputs \u003d getAllInputsFromModules();\n+    initBasedOnOptions();\n+\n+    initInputsByNameMap();\n+  }\n+\n+  /**\n+   * Do any initialization that is dependent on the compiler options.\n+   */\n+  private void initBasedOnOptions() {\n+    // Create the source map if necessary.\n+    if (options.sourceMapOutputPath !\u003d null) {\n+      sourceMap \u003d new SourceMap();\n+    }\n+  }\n+\n+  private List\u003cCompilerInput\u003e makeCompilerInput(\n+      List\u003cJSSourceFile\u003e files, boolean isExtern) {\n+    List\u003cCompilerInput\u003e inputs \u003d Lists.newArrayList();\n+    for (JSSourceFile file : files) {\n+      inputs.add(new CompilerInput(file, isExtern));\n+    }\n+    return inputs;\n+  }\n+\n+  private static final DiagnosticType EMPTY_MODULE_LIST_ERROR \u003d\n+      DiagnosticType.error(\"JSC_EMPTY_MODULE_LIST_ERROR\",\n+          \"At least one module must be provided\");\n+\n+  private static final DiagnosticType EMPTY_ROOT_MODULE_ERROR \u003d\n+      DiagnosticType.error(\"JSC_EMPTY_ROOT_MODULE_ERROR\",\n+          \"Root module \u0027{0}\u0027 must contain at least one source code input\");\n+\n+  /**\n+   * Verifies that at least one module has been provided and that the first one\n+   * has at least one source code input.\n+   */\n+  private void checkFirstModule(List\u003cJSModule\u003e modules) {\n+    if (modules.isEmpty()) {\n+      report(JSError.make(EMPTY_MODULE_LIST_ERROR));\n+    } else if (modules.get(0).getInputs().isEmpty()) {\n+      report(JSError.make(EMPTY_ROOT_MODULE_ERROR,\n+          modules.get(0).getName()));\n+    }\n+  }\n+  \n+  /**\n+   * Fill any empty modules with a place holder file. It makes any cross module\n+   * motion easier.\n+   */\n+  private void fillEmptyModules(List\u003cJSModule\u003e modules) {\n+    for (JSModule module : modules) {\n+      if (module.getInputs().isEmpty()) {\n+        module.add(JSSourceFile.fromCode(\"[\" + module.getName() + \"]\", \"\"));\n+      }\n+    }\n+  }\n+  \n+  static final DiagnosticType DUPLICATE_INPUT_IN_MODULES \u003d\n+      DiagnosticType.error(\"JSC_DUPLICATE_INPUT_IN_MODULES_ERROR\",\n+          \"Two modules cannot contain the same input, but module {0} and {1} \"\n+              + \"both include \\\"{2}\\\"\");\n+\n+  /**\n+   * Rebuilds the internal list of inputs by iterating over all modules.\n+   * This is necessary if inputs have been added to or removed from a module\n+   * after the {@link #init(JSSourceFile[], JSModule[], CompilerOptions)} call.\n+   */\n+  public void rebuildInputsFromModules() {\n+    inputs \u003d getAllInputsFromModules();\n+    initInputsByNameMap();\n+  }\n+\n+  /**\n+   * Builds a single list of all module inputs. Verifies that it contains no\n+   * duplicates.\n+   */\n+  private List\u003cCompilerInput\u003e getAllInputsFromModules() {\n+    List\u003cCompilerInput\u003e inputs \u003d Lists.newArrayList();\n+    Map\u003cString, JSModule\u003e inputMap \u003d Maps.newHashMap();\n+    for (JSModule module : modules) {\n+      for (CompilerInput input : module.getInputs()) {\n+        String inputName \u003d input.getName();\n+        JSModule firstModule \u003d inputMap.get(inputName);\n+        if (firstModule \u003d\u003d null) {\n+          inputs.add(input);\n+          inputMap.put(inputName, module);\n+        } else {\n+          report(JSError.make(DUPLICATE_INPUT_IN_MODULES,\n+              firstModule.getName(), module.getName(), inputName));\n+        }\n+      }\n+    }\n+    if (hasErrors()) {\n+\n+      // There\u0027s no reason to bother parsing the code.\n+      return ImmutableList.of();\n+    }\n+\n+    return inputs;\n+  }\n+\n+  static final DiagnosticType DUPLICATE_INPUT \u003d\n+      DiagnosticType.error(\"JSC_DUPLICATE_INPUT\", \"Duplicate input: {0}\");\n+  static final DiagnosticType DUPLICATE_EXTERN_INPUT \u003d\n+      DiagnosticType.error(\"JSC_DUPLICATE_EXTERN_INPUT\",\n+          \"Duplicate extern input: {0}\");\n+\n+  /**\n+   * Creates a map to make looking up an input by name fast. Also checks for\n+   * duplicate inputs.\n+   */\n+  void initInputsByNameMap() {\n+    inputsByName \u003d new HashMap\u003cString, CompilerInput\u003e();\n+    for (CompilerInput input : externs) {\n+      String name \u003d input.getName();\n+      if (!inputsByName.containsKey(name)) {\n+        inputsByName.put(name, input);\n+      } else {\n+        report(JSError.make(DUPLICATE_EXTERN_INPUT, name));\n+      }\n+    }\n+    for (CompilerInput input : inputs) {\n+      String name \u003d input.getName();\n+      if (!inputsByName.containsKey(name)) {\n+        inputsByName.put(name, input);\n+      } else {\n+        report(JSError.make(DUPLICATE_INPUT, name));\n+      }\n+    }\n+  }\n+\n+  public Result compile(\n+      JSSourceFile extern, JSSourceFile input, CompilerOptions options) {\n+     return compile(extern, new JSSourceFile[] { input }, options);\n+  }\n+\n+  public Result compile(\n+      JSSourceFile extern, JSSourceFile[] input, CompilerOptions options) {\n+     return compile(new JSSourceFile[] { extern }, input, options);\n+  }\n+\n+  public Result compile(\n+      JSSourceFile extern, JSModule[] modules, CompilerOptions options) {\n+     return compile(new JSSourceFile[] { extern }, modules, options);\n+  }\n+\n+  /**\n+   * Compiles a list of inputs.\n+   */\n+  public Result compile(JSSourceFile[] externs,\n+                        JSSourceFile[] inputs,\n+                        CompilerOptions options) {\n+    return compile(Lists.\u003cJSSourceFile\u003enewArrayList(externs),\n+        Lists.\u003cJSSourceFile\u003enewArrayList(inputs),\n+        options);\n+  }\n+  \n+  /**\n+   * Compiles a list of inputs.\n+   */\n+  public Result compile(List\u003cJSSourceFile\u003e externs,\n+      List\u003cJSSourceFile\u003e inputs, CompilerOptions options) {\n+    // The compile method should only be called once.\n+    Preconditions.checkState(jsRoot \u003d\u003d null);\n+\n+    try {\n+      init(externs, inputs, options);\n+      if (hasErrors()) {\n+        return getResult();\n+      }\n+      return compile();\n+    } finally {\n+      Tracer t \u003d newTracer(\"generateReport\");\n+      errorManager.generateReport();\n+      stopTracer(t, \"generateReport\");\n+    }\n+  }\n+\n+  /**\n+   * Compiles a list of modules.\n+   */\n+  public Result compile(JSSourceFile[] externs,\n+                        JSModule[] modules,\n+                        CompilerOptions options) {\n+    return compileModules(Lists.\u003cJSSourceFile\u003enewArrayList(externs),\n+        Lists.\u003cJSModule\u003enewArrayList(modules),\n+        options);\n+  }\n+\n+  /**\n+   * Compiles a list of modules.\n+   */\n+  public Result compileModules(List\u003cJSSourceFile\u003e externs,\n+      List\u003cJSModule\u003e modules, CompilerOptions options) {\n+    // The compile method should only be called once.\n+    Preconditions.checkState(jsRoot \u003d\u003d null);\n+\n+    try {\n+      initModules(externs, modules, options);\n+      if (hasErrors()) {\n+        return getResult();\n+      }\n+      return compile();\n+    } finally {\n+      Tracer t \u003d newTracer(\"generateReport\");\n+      errorManager.generateReport();\n+      stopTracer(t, \"generateReport\");\n+    }\n+  }\n+\n+  private Result compile() {\n+    return runInCompilerThread(new Callable\u003cResult\u003e() {\n+      public Result call() throws Exception {\n+        compileInternal();\n+        return getResult();\n+      }\n+    });\n+  }\n+\n+  /**\n+   * Disable threads. This is for clients that run on AppEngine and\n+   * don\u0027t have threads.\n+   */\n+  public void disableThreads() {\n+    useThreads \u003d false;\n+  }\n+\n+  @SuppressWarnings(\"unchecked\")\n+  private \u003cT\u003e T runInCompilerThread(final Callable\u003cT\u003e callable) {\n+\n+    // Under JRE 1.6, the jscompiler overflows the stack when running on some\n+    // large or complex js code. Here we start a new thread with a larger\n+    // stack in order to let the compiler do its thing, without having to\n+    // increase the stack size for *every* thread (which is what -Xss does).\n+    // Might want to add thread pool support for clients that compile a lot.\n+\n+    final boolean dumpTraceReport \u003d options.tracer.isOn();\n+    final Object[] result \u003d new Object[1];\n+    final Throwable[] exception \u003d new Throwable[1];\n+    Runnable runnable \u003d new Runnable() {\n+      public void run() {\n+        try {\n+          if (dumpTraceReport) {\n+            Tracer.initCurrentThreadTrace();\n+          }\n+          result[0] \u003d callable.call();\n+        } catch (Throwable e) {\n+          exception[0] \u003d e;\n+        } finally {\n+          if (dumpTraceReport) {\n+            Tracer.logAndClearCurrentThreadTrace();\n+          }\n+        }\n+      }\n+    };\n+\n+    if (useThreads) {\n+      Thread th \u003d new Thread(null, runnable, \"jscompiler\", COMPILER_STACK_SIZE);\n+      th.start();\n+      while (true) {\n+        try {\n+          th.join();\n+          break;\n+        } catch (InterruptedException ignore) {\n+          // ignore\n+        }\n+      }\n+    } else {\n+      runnable.run();\n+    }\n+\n+    // Pass on any exception caught by the runnable object.\n+    if (exception[0] !\u003d null) {\n+      throw new RuntimeException(exception[0]);\n+    }\n+\n+    return (T) result[0];\n+  }\n+\n+  private void compileInternal() {\n+    parse();\n+    if (hasErrors()) {\n+      return;\n+    }\n+\n+    if (!precheck()) {\n+      return;\n+    }\n+\n+    if (options.nameAnonymousFunctionsOnly) {\n+      // TODO(nicksantos): Move this into an instrument() phase maybe?\n+      check();\n+      return;\n+    }\n+\n+    if (!options.skipAllPasses) {\n+      check();\n+      if (hasErrors()) {\n+        return;\n+      }\n+\n+      if (options.externExportsPath !\u003d null) {\n+        externExports();\n+      }\n+\n+      // IDE-mode is defined to stop here, before the heavy rewriting begins.\n+      if (!options.ideMode) {\n+        optimize();\n+      }\n+    }\n+\n+    if (options.recordFunctionInformation) {\n+      recordFunctionInformation();\n+    }\n+\n+    if (options.devMode \u003d\u003d DevMode.START_AND_END) {\n+      runSanityCheck();\n+    }\n+  }\n+\n+  public void parse() {\n+    parseInputs();\n+  }\n+\n+  PassConfig getPassConfig() {\n+    if (passes \u003d\u003d null) {\n+      passes \u003d createPassConfigInternal();\n+    }\n+    return passes;\n+  }\n+\n+  /**\n+   * Create the passes object. Clients should use setPassConfig instead of\n+   * overriding this.\n+   */\n+  PassConfig createPassConfigInternal() {\n+    return new DefaultPassConfig(options);\n+  }\n+\n+  /**\n+   * @param passes The PassConfig to use with this Compiler.\n+   * @throws NullPointerException if passes is null\n+   * @throws IllegalStateException if this.passes has already been assigned\n+   */\n+  public void setPassConfig(PassConfig passes) {\n+    // Important to check for null because if setPassConfig(null) is\n+    // called before this.passes is set, getPassConfig() will create a\n+    // new PassConfig object and use that, which is probably not what\n+    // the client wanted since he or she probably meant to use their\n+    // own PassConfig object.\n+    Preconditions.checkNotNull(passes);\n+\n+    if (this.passes !\u003d null) {\n+      throw new IllegalStateException(\"this.passes has already been assigned\");\n+    }\n+    this.passes \u003d passes;\n+  }\n+\n+  /**\n+   * Carry out any special checks or procedures that need to be done before\n+   * proceeding with rest of the compilation process.\n+   *\n+   * @return true, to continue with compilation\n+   */\n+  boolean precheck() {\n+    return true;\n+  }\n+\n+  public void check() {\n+    runCustomPasses(CustomPassExecutionTime.BEFORE_CHECKS);\n+\n+    PhaseOptimizer phaseOptimizer \u003d new PhaseOptimizer(this, tracker);\n+    if (options.devMode \u003d\u003d DevMode.EVERY_PASS) {\n+      phaseOptimizer.setSanityCheck(sanityCheck);\n+    }\n+    phaseOptimizer.consume(getPassConfig().getChecks());\n+    phaseOptimizer.process(externsRoot, jsRoot);\n+    if (hasErrors()) {\n+      return;\n+    }\n+\n+    // TODO(nicksantos): clean this up. The flow here is too hard to follow.\n+    if (options.nameAnonymousFunctionsOnly) {\n+      return;\n+    }\n+\n+    if (options.removeTryCatchFinally) {\n+      removeTryCatchFinally();\n+    }\n+\n+    if (!options.stripTypes.isEmpty() ||\n+        !options.stripNameSuffixes.isEmpty() ||\n+        !options.stripTypePrefixes.isEmpty() ||\n+        !options.stripNamePrefixes.isEmpty()) {\n+      stripCode(options.stripTypes, options.stripNameSuffixes,\n+          options.stripTypePrefixes, options.stripNamePrefixes);\n+    }\n+\n+    runCustomPasses(CustomPassExecutionTime.BEFORE_OPTIMIZATIONS);\n+\n+    // Ideally, this pass should be the first pass run, however:\n+    // 1) VariableReferenceCheck reports unexpected warnings if Normalize\n+    // is done first.\n+    // 2) ReplaceMessages, stripCode, and potentially custom passes rely on\n+    // unmodified local names.\n+    normalize();\n+  }\n+\n+  private void externExports() {\n+    logger.info(\"Creating extern file for exports\");\n+    startPass(\"externExports\");\n+\n+    ExternExportsPass pass \u003d new ExternExportsPass(this);\n+    process(pass);\n+\n+    externExports \u003d pass.getGeneratedExterns();\n+\n+    endPass();\n+  }\n+\n+  void process(CompilerPass p) {\n+    p.process(externsRoot, jsRoot);\n+  }\n+\n+  private final PassFactory sanityCheck \u003d\n+      new PassFactory(\"sanityCheck\", false) {\n+    @Override\n+    protected CompilerPass createInternal(AbstractCompiler compiler) {\n+      return new SanityCheck(compiler);\n+    }\n+  };\n+\n+  private void maybeSanityCheck() {\n+    if (options.devMode \u003d\u003d DevMode.EVERY_PASS) {\n+      runSanityCheck();\n+    }\n+  }\n+\n+  private void runSanityCheck() {\n+    sanityCheck.create(this).process(externsRoot, jsRoot);\n+  }\n+\n+  /**\n+   * Removes try/catch/finally statements for easier debugging.\n+   */\n+  void removeTryCatchFinally() {\n+    logger.info(\"Remove try/catch/finally\");\n+    startPass(\"removeTryCatchFinally\");\n+    RemoveTryCatch r \u003d new RemoveTryCatch(this);\n+    process(r);\n+    endPass();\n+  }\n+\n+  /**\n+   * Strips code for smaller compiled code. This is useful for removing debug\n+   * statements to prevent leaking them publicly.\n+   */\n+  void stripCode(Set\u003cString\u003e stripTypes, Set\u003cString\u003e stripNameSuffixes,\n+      Set\u003cString\u003e stripTypePrefixes, Set\u003cString\u003e stripNamePrefixes) {\n+    logger.info(\"Strip code\");\n+    startPass(\"stripCode\");\n+    StripCode r \u003d new StripCode(this, stripTypes, stripNameSuffixes,\n+        stripTypePrefixes, stripNamePrefixes);\n+    process(r);\n+    endPass();\n+  }\n+\n+  /**\n+   * Runs custom passes that are designated to run at a particular time.\n+   */\n+  private void runCustomPasses(CustomPassExecutionTime executionTime) {\n+    if (options.customPasses !\u003d null) {\n+      Tracer t \u003d newTracer(\"runCustomPasses\");\n+      try {\n+        for (CompilerPass p : options.customPasses.get(executionTime)) {\n+          process(p);\n+        }\n+      } finally {\n+        stopTracer(t, \"runCustomPasses\");\n+      }\n+    }\n+  }\n+\n+  private Tracer currentTracer \u003d null;\n+  private String currentPassName \u003d null;\n+\n+  /**\n+   * Marks the beginning of a pass.\n+   */\n+  void startPass(String passName) {\n+    Preconditions.checkState(currentTracer \u003d\u003d null);\n+    currentPassName \u003d passName;\n+    currentTracer \u003d newTracer(passName);\n+  }\n+\n+  /**\n+   * Marks the end of a pass.\n+   */\n+  void endPass() {\n+    Preconditions.checkState(currentTracer !\u003d null,\n+        \"Tracer should not be null at the end of a pass.\");\n+    stopTracer(currentTracer, currentPassName);\n+    String passToCheck \u003d currentPassName;\n+    currentPassName \u003d null;\n+    currentTracer \u003d null;\n+\n+    maybeSanityCheck();\n+  }\n+\n+  /**\n+   * Returns a new tracer for the given pass name.\n+   */\n+  Tracer newTracer(String passName) {\n+    String comment \u003d passName\n+        + (recentChange.hasCodeChanged() ? \" on recently changed AST\" : \"\");\n+    if (options.tracer.isOn()) {\n+      tracker.recordPassStart(passName);\n+    }\n+    return new Tracer(\"Compiler\", comment);\n+  }\n+\n+  void stopTracer(Tracer t, String passName) {\n+    long result \u003d t.stop();\n+    if (options.tracer.isOn()) {\n+      tracker.recordPassStop(passName, result);\n+    }\n+  }\n+\n+  /**\n+   * Returns the result of the compilation.\n+   */\n+  public Result getResult() {\n+    PassConfig.State state \u003d getPassConfig().getIntermediateState();\n+    return new Result(getErrors(), getWarnings(), debugLog.toString(),\n+        state.variableMap, state.propertyMap,\n+        state.anonymousFunctionNameMap, functionInformationMap,\n+        sourceMap, externExports, state.cssNames);\n+  }\n+\n+  /**\n+   * Returns an array constructed from errors + temporary warnings.\n+   */\n+  public JSError[] getMessages() {\n+    return getErrors();\n+  }\n+\n+  /**\n+   * Returns the array of errors (never null).\n+   */\n+  public JSError[] getErrors() {\n+    return errorManager.getErrors();\n+  }\n+\n+  /**\n+   * Returns the array of warnings (never null).\n+   */\n+  public JSError[] getWarnings() {\n+    return errorManager.getWarnings();\n+  }\n+\n+  /**\n+   * Returns the root node of the AST, which includes both externs and source.\n+   */\n+  public Node getRoot() {\n+    return externAndJsRoot;\n+  }\n+\n+  /**\n+   * Creates a new id for making unique names.\n+   */\n+  private int nextUniqueNameId() {\n+    return uniqueNameId++;\n+  }\n+\n+  /**\n+   * Resets the unique name id counter\n+   */\n+  @VisibleForTesting\n+  void resetUniqueNameId() {\n+    uniqueNameId \u003d 0;\n+  }\n+\n+  @Override\n+  Supplier\u003cString\u003e getUniqueNameIdSupplier() {\n+    final Compiler self \u003d this;\n+    return new Supplier\u003cString\u003e() {\n+      public String get() {\n+        return String.valueOf(self.nextUniqueNameId());\n+      }\n+    };\n+  }\n+\n+  /**\n+   * Set if the normalization pass has been done.\n+   * Note: non-private to enable test cases that require the Normalize pass.\n+   */\n+  @Override\n+  void setNormalized() {\n+    normalized \u003d true;\n+  }\n+\n+  /**\n+   * Set once unnormalizing passes have been start.\n+   * Note: non-private to enable test cases that require the Normalize pass.\n+   */\n+  @Override\n+  void setUnnormalized() {\n+    normalized \u003d false;\n+  }\n+\n+  @Override\n+  boolean isNormalized() {\n+    return normalized;\n+  }\n+\n+  @Override\n+  boolean areNodesEqualForInlining(Node n1, Node n2) {\n+    if (options.ambiguateProperties ||\n+        options.disambiguateProperties) {\n+      // The type based optimizations require that type information is preserved\n+      // during other optimizations.\n+      return n1.checkTreeTypeAwareEqualsSilent(n2);\n+    } else {\n+      return n1.checkTreeEqualsSilent(n2);\n+    }\n+  }\n+\n+  //------------------------------------------------------------------------\n+  // Inputs\n+  //------------------------------------------------------------------------\n+\n+  // TODO(nicksantos): Decide which parts of these belong in an AbstractCompiler\n+  // interface, and which ones should always be injected.\n+\n+  @Override\n+  public CompilerInput getInput(String name) {\n+    return inputsByName.get(name);\n+  }\n+\n+  @Override\n+  public CompilerInput newExternInput(String name) {\n+    if (inputsByName.containsKey(name)) {\n+      throw new IllegalArgumentException(\"Conflicting externs name: \" + name);\n+    }\n+    SourceAst ast \u003d new SyntheticAst(name);\n+    CompilerInput input \u003d new CompilerInput(ast, name, true);\n+    inputsByName.put(name, input);\n+    externsRoot.addChildToFront(ast.getAstRoot(this));\n+    return input;\n+  }\n+\n+  /** Add a source input dynamically. Intended for incremental compilation. */\n+  void addIncrementalSourceAst(JsAst ast) {\n+    String sourceName \u003d ast.getSourceFile().getName();\n+    Preconditions.checkState(\n+        getInput(sourceName) \u003d\u003d null,\n+        \"Duplicate input of name \" + sourceName);\n+    inputsByName.put(sourceName, new CompilerInput(ast));\n+  }\n+\n+  @Override\n+  JSModuleGraph getModuleGraph() {\n+    return moduleGraph;\n+  }\n+\n+  @Override\n+  public JSTypeRegistry getTypeRegistry() {\n+    if (typeRegistry \u003d\u003d null) {\n+      typeRegistry \u003d new JSTypeRegistry(oldErrorReporter);\n+    }\n+    return typeRegistry;\n+  }\n+\n+  @Override\n+  ScopeCreator getScopeCreator() {\n+    return getPassConfig().getScopeCreator();\n+  }\n+\n+  @Override\n+  public Scope getTopScope() {\n+    return getPassConfig().getTopScope();\n+  }\n+\n+  @Override\n+  public ReverseAbstractInterpreter getReverseAbstractInterpreter() {\n+    if (abstractInterpreter \u003d\u003d null) {\n+      ChainableReverseAbstractInterpreter interpreter \u003d\n+          new SemanticReverseAbstractInterpreter(\n+              getCodingConvention(), getTypeRegistry());\n+      if (options.closurePass) {\n+        interpreter \u003d new ClosureReverseAbstractInterpreter(\n+            getCodingConvention(), getTypeRegistry())\n+            .append(interpreter).getFirst();\n+      }\n+      abstractInterpreter \u003d interpreter;\n+    }\n+    return abstractInterpreter;\n+  }\n+\n+  @Override\n+  TypeValidator getTypeValidator() {\n+    return typeValidator;\n+  }\n+\n+  //------------------------------------------------------------------------\n+  // Parsing\n+  //------------------------------------------------------------------------\n+\n+  /**\n+   * Parses the externs and main inputs.\n+   *\n+   * @return A synthetic root node whose two children are the externs root\n+   *     and the main root\n+   */\n+  Node parseInputs() {\n+    boolean devMode \u003d options.devMode !\u003d DevMode.OFF;\n+\n+    // If old roots exist (we are parsing a second time), detach each of the\n+    // individual file parse trees.\n+    if (externsRoot !\u003d null) {\n+      externsRoot.detachChildren();\n+    }\n+    if (jsRoot !\u003d null) {\n+      jsRoot.detachChildren();\n+    }\n+\n+    // Parse main js sources.\n+    jsRoot \u003d new Node(Token.BLOCK);\n+    jsRoot.setIsSyntheticBlock(true);\n+\n+    if (options.tracer.isOn()) {\n+      tracker \u003d new PerformanceTracker(jsRoot,\n+          options.tracer \u003d\u003d TracerMode.ALL);\n+      addChangeHandler(tracker.getCodeChangeHandler());\n+    }\n+\n+    Tracer tracer \u003d newTracer(\"parseInputs\");\n+\n+    try {\n+      // Parse externs sources.\n+      externsRoot \u003d new Node(Token.BLOCK);\n+      externsRoot.setIsSyntheticBlock(true);\n+      for (CompilerInput input : externs) {\n+        Node n \u003d input.getAstRoot(this);\n+        if (hasErrors()) {\n+          return null;\n+        }\n+        externsRoot.addChildToBack(n);\n+      }\n+\n+      for (CompilerInput input : inputs) {\n+        Node n \u003d input.getAstRoot(this);\n+        if (hasErrors()) {\n+          return null;\n+        }\n+\n+        // Inputs can have a null AST during initial parse.\n+        if (n \u003d\u003d null) {\n+          continue;\n+        }\n+\n+        if (devMode) {\n+          runSanityCheck();\n+          if (hasErrors()) {\n+            return null;\n+          }\n+        }\n+\n+        if (options.sourceMapOutputPath !\u003d null ||\n+            options.nameReferenceReportPath !\u003d null) {\n+\n+          // Annotate the nodes in the tree with information from the\n+          // input file. This information is used to construct the SourceMap.\n+          SourceInformationAnnotator sia \u003d\n+              new SourceInformationAnnotator(input.getName());\n+          NodeTraversal.traverse(this, n, sia);\n+        }\n+\n+        jsRoot.addChildToBack(n);\n+      }\n+\n+      externAndJsRoot \u003d new Node(Token.BLOCK, externsRoot, jsRoot);\n+      externAndJsRoot.setIsSyntheticBlock(true);\n+\n+      return externAndJsRoot;\n+    } finally {\n+      stopTracer(tracer, \"parseInputs\");\n+    }\n+  }\n+\n+  public Node parse(JSSourceFile file) {\n+    initCompilerOptionsIfTesting();\n+    addToDebugLog(\"Parsing: \" + file.getName());\n+    return new JsAst(file).getAstRoot(this);\n+  }\n+\n+  @Override\n+  Node parseSyntheticCode(String js) {\n+    CompilerInput input \u003d new CompilerInput(\n+        JSSourceFile.fromCode(\" [synthetic] \", js));\n+    inputsByName.put(input.getName(), input);\n+    return input.getAstRoot(this);\n+  }\n+\n+  void initCompilerOptionsIfTesting() {\n+    if (options \u003d\u003d null) {\n+      // initialization for tests that don\u0027t initialize the compiler\n+      // by the normal mechanisms.\n+      initOptions(new CompilerOptions());\n+    }\n+  }\n+\n+  @Override\n+  Node parseSyntheticCode(String fileName, String js) {\n+    initCompilerOptionsIfTesting();\n+    return parse(JSSourceFile.fromCode(fileName, js));\n+  }\n+\n+  Node parseTestCode(String js) {\n+    initCompilerOptionsIfTesting();\n+    CompilerInput input \u003d new CompilerInput(\n+        JSSourceFile.fromCode(\" [testcode] \", js));\n+    if (inputsByName \u003d\u003d null) {\n+      inputsByName \u003d Maps.newHashMap();\n+    }\n+    inputsByName.put(input.getName(), input);\n+    return input.getAstRoot(this);\n+  }\n+\n+  @Override\n+  ErrorReporter getDefaultErrorReporter() {\n+    return defaultErrorReporter;\n+  }\n+\n+  //------------------------------------------------------------------------\n+  // Convert back to source code\n+  //------------------------------------------------------------------------\n+\n+  /**\n+   * Converts the main parse tree back to js code.\n+   */\n+  public String toSource() {\n+    return runInCompilerThread(new Callable\u003cString\u003e() {\n+      public String call() throws Exception {\n+        Tracer tracer \u003d newTracer(\"toSource\");\n+        try {\n+          CodeBuilder cb \u003d new CodeBuilder();\n+          if (jsRoot !\u003d null) {\n+            int i \u003d 0;\n+            for (Node scriptNode \u003d jsRoot.getFirstChild();\n+                 scriptNode !\u003d null;\n+                 scriptNode \u003d scriptNode.getNext()) {\n+              toSource(cb, i++, scriptNode);\n+            }\n+          }\n+          return cb.toString();\n+        } finally {\n+          stopTracer(tracer, \"toSource\");\n+        }\n+      }\n+    });\n+  }\n+\n+  /**\n+   * Converts the parse tree for each input back to js code.\n+   */\n+  public String[] toSourceArray() {\n+    return runInCompilerThread(new Callable\u003cString[]\u003e() {\n+      public String[] call() throws Exception {\n+        Tracer tracer \u003d newTracer(\"toSourceArray\");\n+        try {\n+          int numInputs \u003d inputs.size();\n+          String[] sources \u003d new String[numInputs];\n+          CodeBuilder cb \u003d new CodeBuilder();\n+          for (int i \u003d 0; i \u003c numInputs; i++) {\n+            Node scriptNode \u003d inputs.get(i).getAstRoot(Compiler.this);\n+            cb.reset();\n+            toSource(cb, i, scriptNode);\n+            sources[i] \u003d cb.toString();\n+          }\n+          return sources;\n+        } finally {\n+          stopTracer(tracer, \"toSourceArray\");\n+        }\n+      }\n+    });\n+  }\n+\n+  /**\n+   * Converts the parse tree for a module back to js code.\n+   */\n+  public String toSource(final JSModule module) {\n+    return runInCompilerThread(new Callable\u003cString\u003e() {\n+      public String call() throws Exception {\n+        List\u003cCompilerInput\u003e inputs \u003d module.getInputs();\n+        int numInputs \u003d inputs.size();\n+        if (numInputs \u003d\u003d 0) {\n+          return \"\";\n+        }\n+        CodeBuilder cb \u003d new CodeBuilder();\n+        for (int i \u003d 0; i \u003c numInputs; i++) {\n+          Node scriptNode \u003d inputs.get(i).getAstRoot(Compiler.this);\n+          if (scriptNode \u003d\u003d null) {\n+            throw new IllegalArgumentException(\n+                \"Bad module: \" + module.getName());\n+          }\n+          toSource(cb, i, scriptNode);\n+        }\n+        return cb.toString();\n+      }\n+    });\n+  }\n+\n+\n+  /**\n+   * Converts the parse tree for each input in a module back to js code.\n+   */\n+  public String[] toSourceArray(final JSModule module) {\n+    return runInCompilerThread(new Callable\u003cString[]\u003e() {\n+      public String[] call() throws Exception {\n+        List\u003cCompilerInput\u003e inputs \u003d module.getInputs();\n+        int numInputs \u003d inputs.size();\n+        if (numInputs \u003d\u003d 0) {\n+          return new String[0];\n+        }\n+\n+        String[] sources \u003d new String[numInputs];\n+        CodeBuilder cb \u003d new CodeBuilder();\n+        for (int i \u003d 0; i \u003c numInputs; i++) {\n+          Node scriptNode \u003d inputs.get(i).getAstRoot(Compiler.this);\n+          if (scriptNode \u003d\u003d null) {\n+            throw new IllegalArgumentException(\n+                \"Bad module input: \" + inputs.get(i).getName());\n+          }\n+\n+          cb.reset();\n+          toSource(cb, i, scriptNode);\n+          sources[i] \u003d cb.toString();\n+        }\n+        return sources;\n+      }\n+    });\n+  }\n+\n+  /**\n+   * Writes out js code from a root node. If printing input delimiters, this\n+   * method will attach a comment to the start of the text indicating which\n+   * input the output derived from. If there were any preserve annotations\n+   * within the root\u0027s source, they will also be printed in a block comment\n+   * at the beginning of the output.\n+   */\n+  public void toSource(final CodeBuilder cb,\n+                       final int inputSeqNum,\n+                       final Node root) {\n+    runInCompilerThread(new Callable\u003cVoid\u003e() {\n+      public Void call() throws Exception {\n+        if (options.printInputDelimiter) {\n+          if ((cb.getLength() \u003e 0) \u0026\u0026 !cb.endsWith(\"\\n\")) {\n+            cb.append(\"\\n\");  // Make sure that the label starts on a new line\n+          }\n+          Preconditions.checkState(root.getType() \u003d\u003d Token.SCRIPT);\n+          \n+          String delimiter \u003d options.inputDelimiter;\n+          \n+          String sourceName \u003d (String)root.getProp(Node.SOURCENAME_PROP);\n+          Preconditions.checkState(sourceName !\u003d null);\n+          Preconditions.checkState(!sourceName.isEmpty());\n+          \n+          delimiter \u003d delimiter.replaceAll(\"%name%\", sourceName)\n+            .replaceAll(\"%num%\", String.valueOf(inputSeqNum));\n+\n+          cb.append(delimiter)\n+            .append(\"\\n\");\n+        }\n+        if (root.getJSDocInfo() !\u003d null \u0026\u0026\n+            root.getJSDocInfo().getLicense() !\u003d null) {\n+          cb.append(\"/*\\n\")\n+            .append(root.getJSDocInfo().getLicense())\n+            .append(\"*/\\n\");\n+        }\n+\n+        // If there is a valid source map, then indicate to it that the current\n+        // root node\u0027s mappings are offset by the given string builder buffer.\n+        if (options.sourceMapOutputPath !\u003d null) {\n+          sourceMap.setStartingPosition(\n+              cb.getLineIndex(), cb.getColumnIndex());\n+        }\n+\n+        String code \u003d toSource(root);\n+        if (!code.isEmpty()) {\n+          cb.append(code);\n+          if (!code.endsWith(\";\")) {\n+            cb.append(\";\");\n+          }\n+        }\n+        return null;\n+      }\n+    });\n+  }\n+\n+  /**\n+   * Generates JavaScript source code for an AST.\n+   */\n+  @Override\n+  String toSource(Node n) {\n+    initCompilerOptionsIfTesting();\n+    \n+    CodePrinter.Builder builder \u003d new CodePrinter.Builder(n);\n+    builder.setPrettyPrint(options.prettyPrint);\n+    builder.setLineBreak(options.lineBreak);\n+    builder.setSourceMap(sourceMap);\n+    builder.setOutputCharset(options.outputCharset);\n+    return builder.build();\n+  }\n+\n+  /**\n+   * Stores a buffer of text to which more can be appended.  This is just like a\n+   * StringBuilder except that we also track the number of lines.\n+   */\n+  public static class CodeBuilder {\n+    private final StringBuilder sb \u003d new StringBuilder();\n+    private int lineCount \u003d 0;\n+\n+    /** Removes all text, but leaves the line count unchanged. */\n+    void reset() {\n+      sb.setLength(0);\n+    }\n+\n+    /** Appends the given string to the text buffer. */\n+    CodeBuilder append(String str) {\n+      sb.append(str);\n+\n+      // Move the line count to the end of the new text.\n+      int index \u003d -1;\n+      while ((index \u003d str.indexOf(\u0027\\n\u0027, index + 1)) \u003e\u003d 0) {\n+        ++lineCount;\n+      }\n+\n+      return this;\n+    }\n+\n+    /** Returns all text in the text buffer. */\n+    @Override\n+    public String toString() {\n+      return sb.toString();\n+    }\n+\n+    /** Returns the length of the text buffer. */\n+    public int getLength() {\n+      return sb.length();\n+    }\n+\n+    /** Returns the (zero-based) index of the last line in the text buffer. */\n+    int getLineIndex() {\n+      return lineCount;\n+    }\n+\n+    /** Returns the (zero-based) index of the last column in the text buffer. */\n+    int getColumnIndex() {\n+      int index \u003d sb.lastIndexOf(\"\\n\");\n+      return (index \u003e\u003d 0) ? sb.length() - (index + 1) : sb.length();\n+    }\n+\n+    /** Determines whether the text ends with the given suffix. */\n+    boolean endsWith(String suffix) {\n+      return (sb.length() \u003e suffix.length())\n+          \u0026\u0026 suffix.equals(sb.substring(sb.length() - suffix.length()));\n+    }\n+  }\n+\n+  //------------------------------------------------------------------------\n+  // Optimizations\n+  //------------------------------------------------------------------------\n+\n+  public void optimize() {\n+    PhaseOptimizer phaseOptimizer \u003d new PhaseOptimizer(this, tracker);\n+    if (options.devMode \u003d\u003d DevMode.EVERY_PASS) {\n+      phaseOptimizer.setSanityCheck(sanityCheck);\n+    }\n+    phaseOptimizer.consume(getPassConfig().getOptimizations());\n+    phaseOptimizer.process(externsRoot, jsRoot);\n+    if (hasErrors()) {\n+      return;\n+    }\n+  }\n+\n+  @Override\n+  void setCssRenamingMap(CssRenamingMap map) {\n+    options.cssRenamingMap \u003d map;\n+  }\n+\n+  @Override\n+  CssRenamingMap getCssRenamingMap() {\n+    return options.cssRenamingMap;\n+  }\n+\n+  /**\n+   * Reprocesses the current defines over the AST.  This is used by GwtCompiler\n+   * to generate N outputs for different targets from the same (checked) AST.\n+   * For each target, we apply the target-specific defines by calling\n+   * {@code processDefines} and then {@code optimize} to optimize the AST\n+   * specifically for that target.\n+   */\n+  public void processDefines() {\n+    (new DefaultPassConfig(options)).processDefines.create(this)\n+        .process(externsRoot, jsRoot);\n+  }\n+\n+  boolean isInliningForbidden() {\n+    return options.propertyRenaming \u003d\u003d PropertyRenamingPolicy.HEURISTIC ||\n+        options.propertyRenaming \u003d\u003d\n+            PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC;\n+  }\n+\n+  /** Control Flow Analysis. */\n+  ControlFlowGraph\u003cNode\u003e computeCFG() {\n+    logger.info(\"Computing Control Flow Graph\");\n+    Tracer tracer \u003d newTracer(\"computeCFG\");\n+    ControlFlowAnalysis cfa \u003d new ControlFlowAnalysis(this, true);\n+    process(cfa);\n+    stopTracer(tracer, \"computeCFG\");\n+    return cfa.getCfg();\n+  }\n+\n+  public void normalize() {\n+    logger.info(\"Normalizing\");\n+    startPass(\"normalize\");\n+    process(new Normalize(this, false));\n+    setNormalized();\n+    endPass();\n+  }\n+\n+  @Override\n+  void prepareAst(Node root) {\n+    Tracer tracer \u003d newTracer(\"prepareAst\");\n+    CompilerPass pass \u003d new PrepareAst(this);\n+    pass.process(null, root);\n+    stopTracer(tracer, \"prepareAst\");\n+  }\n+\n+  void recordFunctionInformation() {\n+    logger.info(\"Recording function information\");\n+    startPass(\"recordFunctionInformation\");\n+    RecordFunctionInformation recordFunctionInfoPass \u003d\n+        new RecordFunctionInformation(\n+            this, getPassConfig().getIntermediateState().functionNames);\n+    process(recordFunctionInfoPass);\n+    functionInformationMap \u003d recordFunctionInfoPass.getMap();\n+    endPass();\n+  }\n+\n+  protected final CodeChangeHandler.RecentChange recentChange \u003d\n+      new CodeChangeHandler.RecentChange();\n+  private final List\u003cCodeChangeHandler\u003e codeChangeHandlers \u003d\n+      Lists.\u003cCodeChangeHandler\u003enewArrayList();\n+\n+  @Override\n+  void addChangeHandler(CodeChangeHandler handler) {\n+    codeChangeHandlers.add(handler);\n+  }\n+\n+  @Override\n+  void removeChangeHandler(CodeChangeHandler handler) {\n+    codeChangeHandlers.remove(handler);\n+  }\n+\n+  /**\n+   * All passes should call reportCodeChange() when they alter\n+   * the JS tree structure. This is verified by CompilerTestCase.\n+   * This allows us to optimize to a fixed point.\n+   */\n+  @Override\n+  public void reportCodeChange() {\n+    for (CodeChangeHandler handler : codeChangeHandlers) {\n+      handler.reportChange();\n+    }\n+  }\n+\n+  @Override\n+  public CodingConvention getCodingConvention() {\n+    CodingConvention convention \u003d options.getCodingConvention();\n+    convention \u003d convention !\u003d null ? convention : defaultCodingConvention;\n+    return convention;\n+  }\n+\n+  @Override\n+  public boolean isIdeMode() {\n+    return options.ideMode;\n+  }\n+\n+  @Override\n+  Config getParserConfig() {\n+    if (parserConfig \u003d\u003d null) {\n+      parserConfig \u003d ParserRunner.createConfig(\n+          getTypeRegistry(), isIdeMode());\n+    }\n+    return parserConfig;\n+  }\n+\n+  @Override\n+  public boolean isTypeCheckingEnabled() {\n+    return options.checkTypes;\n+  }\n+\n+\n+  //------------------------------------------------------------------------\n+  // Error reporting\n+  //------------------------------------------------------------------------\n+\n+  @Override\n+  public void report(JSError error) {\n+    CheckLevel level \u003d error.level;\n+    WarningsGuard guard \u003d options.getWarningsGuard();\n+    if (guard !\u003d null) {\n+      CheckLevel newLevel \u003d guard.level(error);\n+      if (newLevel !\u003d null) {\n+        level \u003d newLevel;\n+      }\n+    }\n+\n+    if (level.isOn()) {\n+      errorManager.report(level, error);\n+    }\n+  }\n+\n+  /**\n+   * Report an internal error.\n+   */\n+  @Override\n+  void throwInternalError(String message, Exception cause) {\n+    String finalMessage \u003d\n+      \"INTERNAL COMPILER ERROR.\\n\" +\n+      \"Please report this problem.\\n\" + message;\n+\n+    RuntimeException e \u003d new RuntimeException(finalMessage, cause);\n+    if (cause !\u003d null) {\n+      e.setStackTrace(cause.getStackTrace());\n+    }\n+    throw e;\n+  }\n+\n+\n+  /**\n+   * Gets the number of errors.\n+   */\n+  public int getErrorCount() {\n+    return errorManager.getErrorCount();\n+  }\n+\n+  /**\n+   * Gets the number of warnings.\n+   */\n+  public int getWarningCount() {\n+    return errorManager.getWarningCount();\n+  }\n+\n+  @Override\n+  boolean hasHaltingErrors() {\n+    return !isIdeMode() \u0026\u0026 getErrorCount() \u003e 0;\n+  }\n+\n+  /**\n+   * Consults the {@link ErrorManager} to see if we\u0027ve encountered errors\n+   * that should halt compilation. \u003cp\u003e\n+   *\n+   * If {@link CompilerOptions#ideMode} is {@code true}, this function\n+   * always returns {@code false} without consulting the error manager. The\n+   * error manager will continue to be told about new errors and warnings, but\n+   * the compiler will complete compilation of all inputs.\u003cp\u003e\n+   */\n+  public boolean hasErrors() {\n+    return hasHaltingErrors();\n+  }\n+\n+  /** Called from the compiler passes, adds debug info */\n+  @Override\n+  void addToDebugLog(String str) {\n+    debugLog.append(str);\n+    debugLog.append(\u0027\\n\u0027);\n+    logger.fine(str);\n+  }\n+\n+  private SourceFile getSourceFileByName(String sourceName) {\n+    if (inputsByName.containsKey(sourceName)) {\n+      return inputsByName.get(sourceName).getSourceFile();\n+    }\n+    return null;\n+  }\n+\n+  public String getSourceLine(String sourceName, int lineNumber) {\n+    if (lineNumber \u003c 1) {\n+      return null;\n+    }\n+    SourceFile input \u003d getSourceFileByName(sourceName);\n+    if (input !\u003d null) {\n+      return input.getLine(lineNumber);\n+    }\n+    return null;\n+  }\n+\n+  public Region getSourceRegion(String sourceName, int lineNumber) {\n+    if (lineNumber \u003c 1) {\n+      return null;\n+    }\n+    SourceFile input \u003d getSourceFileByName(sourceName);\n+    if (input !\u003d null) {\n+      return input.getRegion(lineNumber);\n+    }\n+    return null;\n+  }\n+\n+  //------------------------------------------------------------------------\n+  // Package-private helpers\n+  //------------------------------------------------------------------------\n+\n+  @Override\n+  Node getNodeForCodeInsertion(JSModule module) {\n+    if (module \u003d\u003d null) {\n+      if (inputs.isEmpty()) {\n+        throw new IllegalStateException(\"No inputs\");\n+      }\n+\n+      return inputs.get(0).getAstRoot(this);\n+    }\n+\n+    List\u003cCompilerInput\u003e moduleInputs \u003d module.getInputs();\n+    if (moduleInputs.size() \u003e 0) {\n+      return moduleInputs.get(0).getAstRoot(this);\n+    }\n+    throw new IllegalStateException(\"Root module has no inputs\");\n+  }\n+\n+  public SourceMap getSourceMap() {\n+    return sourceMap;\n+  }\n+\n+  VariableMap getVariableMap() {\n+    return getPassConfig().getIntermediateState().variableMap;\n+  }\n+\n+  VariableMap getPropertyMap() {\n+    return getPassConfig().getIntermediateState().propertyMap;\n+  }\n+\n+  CompilerOptions getOptions() {\n+    return options;\n+  }\n+\n+  FunctionInformationMap getFunctionalInformationMap() {\n+    return functionInformationMap;\n+  }\n+\n+  /**\n+   * Sets the logging level for the com.google.javascript.jscomp package.\n+   */\n+  public static void setLoggingLevel(Level level) {\n+    logger.setLevel(level);\n+  }\n+\n+  /** Gets the DOT graph of the AST generated at the end of compilation. */\n+  public String getAstDotGraph() throws IOException {\n+    if (jsRoot !\u003d null) {\n+      ControlFlowAnalysis cfa \u003d new ControlFlowAnalysis(this, true);\n+      cfa.process(null, jsRoot);\n+      return DotFormatter.toDot(jsRoot, cfa.getCfg());\n+    } else {\n+      return \"\";\n+    }\n+  }\n+\n+  @Override\n+  public ErrorManager getErrorManager() {\n+    if (options \u003d\u003d null) {\n+      initOptions(new CompilerOptions());\n+    }\n+    return errorManager;\n+  }\n+\n+  /**\n+   * Stores the internal compiler state just before optimization is performed.\n+   * This can be saved and restored in order to efficiently optimize multiple\n+   * different output targets without having to perform checking multiple times.\n+   *\n+   * NOTE: This does not include all parts of the compiler\u0027s internal state. In\n+   * particular, JSSourceFiles and CompilerOptions are not recorded. In\n+   * order to recreate a Compiler instance from scratch, you would need to\n+   * call {@code init} with the same arguments as in the initial creation before\n+   * restoring intermediate state.\n+   */\n+  public static class IntermediateState implements Serializable {\n+    private static final long serialVersionUID \u003d 1L;\n+\n+    Node externsRoot;\n+    private Node jsRoot;\n+    private List\u003cCompilerInput\u003e externs;\n+    private List\u003cCompilerInput\u003e inputs;\n+    private List\u003cJSModule\u003e modules;\n+    private PassConfig.State passConfigState;\n+    private JSTypeRegistry typeRegistry;\n+    private boolean normalized;\n+\n+    private IntermediateState() {}\n+  }\n+\n+  /**\n+   * Returns the current internal state, excluding the input files and modules.\n+   */\n+  public IntermediateState getState() {\n+    IntermediateState state \u003d new IntermediateState();\n+    state.externsRoot \u003d externsRoot;\n+    state.jsRoot \u003d jsRoot;\n+    state.externs \u003d externs;\n+    state.inputs \u003d inputs;\n+    state.modules \u003d modules;\n+    state.passConfigState \u003d getPassConfig().getIntermediateState();\n+    state.typeRegistry \u003d typeRegistry;\n+    state.normalized \u003d normalized;\n+\n+    return state;\n+  }\n+\n+  /**\n+   * Sets the internal state to the capture given.  Note that this assumes that\n+   * the input files are already set up.\n+   */\n+  public void setState(IntermediateState state) {\n+    externsRoot \u003d state.externsRoot;\n+    jsRoot \u003d state.jsRoot;\n+    externs \u003d state.externs;\n+    inputs \u003d state.inputs;\n+    modules \u003d state.modules;\n+    passes \u003d createPassConfigInternal();\n+    getPassConfig().setIntermediateState(state.passConfigState);\n+    typeRegistry \u003d state.typeRegistry;\n+    normalized \u003d state.normalized;\n+  }\n+\n+  @Override\n+  boolean hasRegExpGlobalReferences() {\n+    return hasRegExpGlobalReferences;\n+  }\n+\n+  @Override\n+  void setHasRegExpGlobalReferences(boolean references) {\n+    hasRegExpGlobalReferences \u003d references;\n+  }\n+}\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldDeclaration [3388,3539]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [50460,50551]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [50555,50670]"
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "src/com/google/javascript/jscomp/DefaultPassConfig.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [
            "com.google.javascript.jscomp.DefaultPassConfig:runInSerial:[final CompilerPass... passes]:CompilerPass",
            "com.google.javascript.jscomp.DefaultPassConfig\\$PureFunctionMarker:PureFunctionMarker:[AbstractCompiler compiler, String reportPath, boolean useNameReferenceGraph]:null",
            "com.google.javascript.jscomp.DefaultPassConfig\\$GlobalTypeResolver:process:[Node externs, Node root]:void",
            "com.google.javascript.jscomp.DefaultPassConfig:getCustomPasses:[final CustomPassExecutionTime executionTime]:PassFactory",
            "com.google.javascript.jscomp.DefaultPassConfig:createEmptyPass:[String name]:PassFactory",
            "com.google.javascript.jscomp.DefaultPassConfig:getOptimizations:[]:List\u003cPassFactory\u003e",
            "com.google.javascript.jscomp.DefaultPassConfig:getMainOptimizationLoop:[]:List\u003cPassFactory\u003e",
            "com.google.javascript.jscomp.DefaultPassConfig:getChecks:[]:List\u003cPassFactory\u003e",
            "com.google.javascript.jscomp.DefaultPassConfig:runVariableRenaming:[AbstractCompiler compiler, VariableMap prevVariableMap, Node externs, Node root]:VariableMap",
            "com.google.javascript.jscomp.DefaultPassConfig:runInSerial:[final Collection\u003cCompilerPass\u003e passes]:CompilerPass",
            "com.google.javascript.jscomp.DefaultPassConfig:getCodeRemovingPasses:[]:List\u003cPassFactory\u003e",
            "com.google.javascript.jscomp.DefaultPassConfig:isInliningForbidden:[]:boolean",
            "com.google.javascript.jscomp.DefaultPassConfig:getAdditionalReplacements:[CompilerOptions options]:Map\u003cString,Node\u003e",
            "com.google.javascript.jscomp.DefaultPassConfig:assertAllLoopablePasses:[List\u003cPassFactory\u003e passes]:void",
            "com.google.javascript.jscomp.DefaultPassConfig:combineChecks:[AbstractCompiler compiler, List\u003cCallback\u003e callbacks]:CompilerPass",
            "com.google.javascript.jscomp.DefaultPassConfig\\$PureFunctionMarker:process:[Node externs, Node root]:void",
            "com.google.javascript.jscomp.DefaultPassConfig:DefaultPassConfig:[CompilerOptions options]:null",
            "com.google.javascript.jscomp.DefaultPassConfig:setIntermediateState:[State state]:void",
            "com.google.javascript.jscomp.DefaultPassConfig:assertAllOneTimePasses:[List\u003cPassFactory\u003e passes]:void",
            "com.google.javascript.jscomp.DefaultPassConfig:getIntermediateState:[]:State",
            "com.google.javascript.jscomp.DefaultPassConfig:runPropertyRenaming:[AbstractCompiler compiler, VariableMap prevPropertyMap, Node externs, Node root]:VariableMap",
            "com.google.javascript.jscomp.DefaultPassConfig\\$GlobalTypeResolver:GlobalTypeResolver:[AbstractCompiler compiler]:null"
          ],
          "num": 22
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "-1"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "35",
            "36",
            "37",
            "38",
            "39",
            "40",
            "41",
            "42",
            "43",
            "44",
            "45",
            "46",
            "47",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57",
            "58",
            "59",
            "60",
            "61",
            "62",
            "63",
            "64",
            "65",
            "66",
            "67",
            "68",
            "69",
            "70",
            "71",
            "72",
            "73",
            "74",
            "75",
            "76",
            "77",
            "78",
            "79",
            "80",
            "81",
            "82",
            "83",
            "84",
            "85",
            "86",
            "87",
            "88",
            "89",
            "90",
            "91",
            "92",
            "93",
            "94",
            "95",
            "96",
            "97",
            "98",
            "99",
            "100",
            "101",
            "102",
            "103",
            "104",
            "105",
            "106",
            "107",
            "108",
            "109",
            "110",
            "111",
            "112",
            "113",
            "114",
            "115",
            "116",
            "117",
            "118",
            "119",
            "120",
            "121",
            "122",
            "123",
            "124",
            "125",
            "126",
            "127",
            "128",
            "129",
            "130",
            "131",
            "132",
            "133",
            "134",
            "135",
            "136",
            "137",
            "138",
            "139",
            "140",
            "141",
            "142",
            "143",
            "144",
            "145",
            "146",
            "147",
            "148",
            "149",
            "150",
            "151",
            "152",
            "153",
            "154",
            "155",
            "156",
            "157",
            "158",
            "159",
            "160",
            "161",
            "162",
            "163",
            "164",
            "165",
            "166",
            "167",
            "168",
            "169",
            "170",
            "171",
            "172",
            "173",
            "174",
            "175",
            "176",
            "177",
            "178",
            "179",
            "180",
            "181",
            "182",
            "183",
            "184",
            "185",
            "186",
            "187",
            "188",
            "189",
            "190",
            "191",
            "192",
            "193",
            "194",
            "195",
            "196",
            "197",
            "198",
            "199",
            "200",
            "201",
            "202",
            "203",
            "204",
            "205",
            "206",
            "207",
            "208",
            "209",
            "210",
            "211",
            "212",
            "213",
            "214",
            "215",
            "216",
            "217",
            "218",
            "219",
            "220",
            "221",
            "222",
            "223",
            "224",
            "225",
            "226",
            "227",
            "228",
            "229",
            "230",
            "231",
            "232",
            "233",
            "234",
            "235",
            "236",
            "237",
            "238",
            "239",
            "240",
            "241",
            "242",
            "243",
            "244",
            "245",
            "246",
            "247",
            "248",
            "249",
            "250",
            "251",
            "252",
            "253",
            "254",
            "255",
            "256",
            "257",
            "258",
            "259",
            "260",
            "261",
            "262",
            "263",
            "264",
            "265",
            "266",
            "267",
            "268",
            "269",
            "270",
            "271",
            "272",
            "273",
            "274",
            "275",
            "276",
            "277",
            "278",
            "279",
            "280",
            "281",
            "282",
            "283",
            "284",
            "285",
            "286",
            "287",
            "288",
            "289",
            "290",
            "291",
            "292",
            "293",
            "294",
            "295",
            "296",
            "297",
            "298",
            "299",
            "300",
            "301",
            "302",
            "303",
            "304",
            "305",
            "306",
            "307",
            "308",
            "309",
            "310",
            "311",
            "312",
            "313",
            "314",
            "315",
            "316",
            "317",
            "318",
            "319",
            "320",
            "321",
            "322",
            "323",
            "324",
            "325",
            "326",
            "327",
            "328",
            "329",
            "330",
            "331",
            "332",
            "333",
            "334",
            "335",
            "336",
            "337",
            "338",
            "339",
            "340",
            "341",
            "342",
            "343",
            "344",
            "345",
            "346",
            "347",
            "348",
            "349",
            "350",
            "351",
            "352",
            "353",
            "354",
            "355",
            "356",
            "357",
            "358",
            "359",
            "360",
            "361",
            "362",
            "363",
            "364",
            "365",
            "366",
            "367",
            "368",
            "369",
            "370",
            "371",
            "372",
            "373",
            "374",
            "375",
            "376",
            "377",
            "378",
            "379",
            "380",
            "381",
            "382",
            "383",
            "384",
            "385",
            "386",
            "387",
            "388",
            "389",
            "390",
            "391",
            "392",
            "393",
            "394",
            "395",
            "396",
            "397",
            "398",
            "399",
            "400",
            "401",
            "402",
            "403",
            "404",
            "405",
            "406",
            "407",
            "408",
            "409",
            "410",
            "411",
            "412",
            "413",
            "414",
            "415",
            "416",
            "417",
            "418",
            "419",
            "420",
            "421",
            "422",
            "423",
            "424",
            "425",
            "426",
            "427",
            "428",
            "429",
            "430",
            "431",
            "432",
            "433",
            "434",
            "435",
            "436",
            "437",
            "438",
            "439",
            "440",
            "441",
            "442",
            "443",
            "444",
            "445",
            "446",
            "447",
            "448",
            "449",
            "450",
            "451",
            "452",
            "453",
            "454",
            "455",
            "456",
            "457",
            "458",
            "459",
            "460",
            "461",
            "462",
            "463",
            "464",
            "465",
            "466",
            "467",
            "468",
            "469",
            "470",
            "471",
            "472",
            "473",
            "474",
            "475",
            "476",
            "477",
            "478",
            "479",
            "480",
            "481",
            "482",
            "483",
            "484",
            "485",
            "486",
            "487",
            "488",
            "489",
            "490",
            "491",
            "492",
            "493",
            "494",
            "495",
            "496",
            "497",
            "498",
            "499",
            "500",
            "501",
            "502",
            "503",
            "504",
            "505",
            "506",
            "507",
            "508",
            "509",
            "510",
            "511",
            "512",
            "513",
            "514",
            "515",
            "516",
            "517",
            "518",
            "519",
            "520",
            "521",
            "522",
            "523",
            "524",
            "525",
            "526",
            "527",
            "528",
            "529",
            "530",
            "531",
            "532",
            "533",
            "534",
            "535",
            "536",
            "537",
            "538",
            "539",
            "540",
            "541",
            "542",
            "543",
            "544",
            "545",
            "546",
            "547",
            "548",
            "549",
            "550",
            "551",
            "552",
            "553",
            "554",
            "555",
            "556",
            "557",
            "558",
            "559",
            "560",
            "561",
            "562",
            "563",
            "564",
            "565",
            "566",
            "567",
            "568",
            "569",
            "570",
            "571",
            "572",
            "573",
            "574",
            "575",
            "576",
            "577",
            "578",
            "579",
            "580",
            "581",
            "582",
            "583",
            "584",
            "585",
            "586",
            "587",
            "588",
            "589",
            "590",
            "591",
            "592",
            "593",
            "594",
            "595",
            "596",
            "597",
            "598",
            "599",
            "600",
            "601",
            "602",
            "603",
            "604",
            "605",
            "606",
            "607",
            "608",
            "609",
            "610",
            "611",
            "612",
            "613",
            "614",
            "615",
            "616",
            "617",
            "618",
            "619",
            "620",
            "621",
            "622",
            "623",
            "624",
            "625",
            "626",
            "627",
            "628",
            "629",
            "630",
            "631",
            "632",
            "633",
            "634",
            "635",
            "636",
            "637",
            "638",
            "639",
            "640",
            "641",
            "642",
            "643",
            "644",
            "645",
            "646",
            "647",
            "648",
            "649",
            "650",
            "651",
            "652",
            "653",
            "654",
            "655",
            "656",
            "657",
            "658",
            "659",
            "660",
            "661",
            "662",
            "663",
            "664",
            "665",
            "666",
            "667",
            "668",
            "669",
            "670",
            "671",
            "672",
            "673",
            "674",
            "675",
            "676",
            "677",
            "678",
            "679",
            "680",
            "681",
            "682",
            "683",
            "684",
            "685",
            "686",
            "687",
            "688",
            "689",
            "690",
            "691",
            "692",
            "693",
            "694",
            "695",
            "696",
            "697",
            "698",
            "699",
            "700",
            "701",
            "702",
            "703",
            "704",
            "705",
            "706",
            "707",
            "708",
            "709",
            "710",
            "711",
            "712",
            "713",
            "714",
            "715",
            "716",
            "717",
            "718",
            "719",
            "720",
            "721",
            "722",
            "723",
            "724",
            "725",
            "726",
            "727",
            "728",
            "729",
            "730",
            "731",
            "732",
            "733",
            "734",
            "735",
            "736",
            "737",
            "738",
            "739",
            "740",
            "741",
            "742",
            "743",
            "744",
            "745",
            "746",
            "747",
            "748",
            "749",
            "750",
            "751",
            "752",
            "753",
            "754",
            "755",
            "756",
            "757",
            "758",
            "759",
            "760",
            "761",
            "762",
            "763",
            "764",
            "765",
            "766",
            "767",
            "768",
            "769",
            "770",
            "771",
            "772",
            "773",
            "774",
            "775",
            "776",
            "777",
            "778",
            "779",
            "780",
            "781",
            "782",
            "783",
            "784",
            "785",
            "786",
            "787",
            "788",
            "789",
            "790",
            "791",
            "792",
            "793",
            "794",
            "795",
            "796",
            "797",
            "798",
            "799",
            "800",
            "801",
            "802",
            "803",
            "804",
            "805",
            "806",
            "807",
            "808",
            "809",
            "810",
            "811",
            "812",
            "813",
            "814",
            "815",
            "816",
            "817",
            "818",
            "819",
            "820",
            "821",
            "822",
            "823",
            "824",
            "825",
            "826",
            "827",
            "828",
            "829",
            "830",
            "831",
            "832",
            "833",
            "834",
            "835",
            "836",
            "837",
            "838",
            "839",
            "840",
            "841",
            "842",
            "843",
            "844",
            "845",
            "846",
            "847",
            "848",
            "849",
            "850",
            "851",
            "852",
            "853",
            "854",
            "855",
            "856",
            "857",
            "858",
            "859",
            "860",
            "861",
            "862",
            "863",
            "864",
            "865",
            "866",
            "867",
            "868",
            "869",
            "870",
            "871",
            "872",
            "873",
            "874",
            "875",
            "876",
            "877",
            "878",
            "879",
            "880",
            "881",
            "882",
            "883",
            "884",
            "885",
            "886",
            "887",
            "888",
            "889",
            "890",
            "891",
            "892",
            "893",
            "894",
            "895",
            "896",
            "897",
            "898",
            "899",
            "900",
            "901",
            "902",
            "903",
            "904",
            "905",
            "906",
            "907",
            "908",
            "909",
            "910",
            "911",
            "912",
            "913",
            "914",
            "915",
            "916",
            "917",
            "918",
            "919",
            "920",
            "921",
            "922",
            "923",
            "924",
            "925",
            "926",
            "927",
            "928",
            "929",
            "930",
            "931",
            "932",
            "933",
            "934",
            "935",
            "936",
            "937",
            "938",
            "939",
            "940",
            "941",
            "942",
            "943",
            "944",
            "945",
            "946",
            "947",
            "948",
            "949",
            "950",
            "951",
            "952",
            "953",
            "954",
            "955",
            "956",
            "957",
            "958",
            "959",
            "960",
            "961",
            "962",
            "963",
            "964",
            "965",
            "966",
            "967",
            "968",
            "969",
            "970",
            "971",
            "972",
            "973",
            "974",
            "975",
            "976",
            "977",
            "978",
            "979",
            "980",
            "981",
            "982",
            "983",
            "984",
            "985",
            "986",
            "987",
            "988",
            "989",
            "990",
            "991",
            "992",
            "993",
            "994",
            "995",
            "996",
            "997",
            "998",
            "999",
            "1000",
            "1001",
            "1002",
            "1003",
            "1004",
            "1005",
            "1006",
            "1007",
            "1008",
            "1009",
            "1010",
            "1011",
            "1012",
            "1013",
            "1014",
            "1015",
            "1016",
            "1017",
            "1018",
            "1019",
            "1020",
            "1021",
            "1022",
            "1023",
            "1024",
            "1025",
            "1026",
            "1027",
            "1028",
            "1029",
            "1030",
            "1031",
            "1032",
            "1033",
            "1034",
            "1035",
            "1036",
            "1037",
            "1038",
            "1039",
            "1040",
            "1041",
            "1042",
            "1043",
            "1044",
            "1045",
            "1046",
            "1047",
            "1048",
            "1049",
            "1050",
            "1051",
            "1052",
            "1053",
            "1054",
            "1055",
            "1056",
            "1057",
            "1058",
            "1059",
            "1060",
            "1061",
            "1062",
            "1063",
            "1064",
            "1065",
            "1066",
            "1067",
            "1068",
            "1069",
            "1070",
            "1071",
            "1072",
            "1073",
            "1074",
            "1075",
            "1076",
            "1077",
            "1078",
            "1079",
            "1080",
            "1081",
            "1082",
            "1083",
            "1084",
            "1085",
            "1086",
            "1087",
            "1088",
            "1089",
            "1090",
            "1091",
            "1092",
            "1093",
            "1094",
            "1095",
            "1096",
            "1097",
            "1098",
            "1099",
            "1100",
            "1101",
            "1102",
            "1103",
            "1104",
            "1105",
            "1106",
            "1107",
            "1108",
            "1109",
            "1110",
            "1111",
            "1112",
            "1113",
            "1114",
            "1115",
            "1116",
            "1117",
            "1118",
            "1119",
            "1120",
            "1121",
            "1122",
            "1123",
            "1124",
            "1125",
            "1126",
            "1127",
            "1128",
            "1129",
            "1130",
            "1131",
            "1132",
            "1133",
            "1134",
            "1135",
            "1136",
            "1137",
            "1138",
            "1139",
            "1140",
            "1141",
            "1142",
            "1143",
            "1144",
            "1145",
            "1146",
            "1147",
            "1148",
            "1149",
            "1150",
            "1151",
            "1152",
            "1153",
            "1154",
            "1155",
            "1156",
            "1157",
            "1158",
            "1159",
            "1160",
            "1161",
            "1162",
            "1163",
            "1164",
            "1165",
            "1166",
            "1167",
            "1168",
            "1169",
            "1170",
            "1171",
            "1172",
            "1173",
            "1174",
            "1175",
            "1176",
            "1177",
            "1178",
            "1179",
            "1180",
            "1181",
            "1182",
            "1183",
            "1184",
            "1185",
            "1186",
            "1187",
            "1188",
            "1189",
            "1190",
            "1191",
            "1192",
            "1193",
            "1194",
            "1195",
            "1196",
            "1197",
            "1198",
            "1199",
            "1200",
            "1201",
            "1202",
            "1203",
            "1204",
            "1205",
            "1206",
            "1207",
            "1208",
            "1209",
            "1210",
            "1211",
            "1212",
            "1213",
            "1214",
            "1215",
            "1216",
            "1217",
            "1218",
            "1219",
            "1220",
            "1221",
            "1222",
            "1223",
            "1224",
            "1225",
            "1226",
            "1227",
            "1228",
            "1229",
            "1230",
            "1231",
            "1232",
            "1233",
            "1234",
            "1235",
            "1236",
            "1237",
            "1238",
            "1239",
            "1240",
            "1241",
            "1242",
            "1243",
            "1244",
            "1245",
            "1246",
            "1247",
            "1248",
            "1249",
            "1250",
            "1251",
            "1252",
            "1253",
            "1254",
            "1255",
            "1256",
            "1257",
            "1258",
            "1259",
            "1260",
            "1261",
            "1262",
            "1263",
            "1264",
            "1265",
            "1266",
            "1267",
            "1268",
            "1269",
            "1270",
            "1271",
            "1272",
            "1273",
            "1274",
            "1275",
            "1276",
            "1277",
            "1278",
            "1279",
            "1280",
            "1281",
            "1282",
            "1283",
            "1284",
            "1285",
            "1286",
            "1287",
            "1288",
            "1289",
            "1290",
            "1291",
            "1292",
            "1293",
            "1294",
            "1295",
            "1296",
            "1297",
            "1298",
            "1299",
            "1300",
            "1301",
            "1302",
            "1303",
            "1304",
            "1305",
            "1306",
            "1307",
            "1308",
            "1309",
            "1310",
            "1311",
            "1312",
            "1313",
            "1314",
            "1315",
            "1316",
            "1317",
            "1318",
            "1319",
            "1320",
            "1321",
            "1322",
            "1323",
            "1324",
            "1325",
            "1326",
            "1327",
            "1328",
            "1329",
            "1330",
            "1331",
            "1332",
            "1333",
            "1334",
            "1335",
            "1336",
            "1337",
            "1338",
            "1339",
            "1340",
            "1341",
            "1342",
            "1343",
            "1344",
            "1345",
            "1346",
            "1347",
            "1348",
            "1349",
            "1350",
            "1351",
            "1352",
            "1353",
            "1354",
            "1355",
            "1356",
            "1357",
            "1358",
            "1359",
            "1360",
            "1361",
            "1362",
            "1363",
            "1364",
            "1365",
            "1366",
            "1367",
            "1368",
            "1369",
            "1370",
            "1371",
            "1372",
            "1373",
            "1374",
            "1375",
            "1376",
            "1377",
            "1378",
            "1379",
            "1380",
            "1381",
            "1382",
            "1383",
            "1384",
            "1385",
            "1386",
            "1387",
            "1388",
            "1389",
            "1390",
            "1391",
            "1392",
            "1393",
            "1394",
            "1395",
            "1396",
            "1397",
            "1398",
            "1399",
            "1400",
            "1401",
            "1402",
            "1403",
            "1404",
            "1405",
            "1406",
            "1407",
            "1408",
            "1409",
            "1410",
            "1411",
            "1412",
            "1413",
            "1414",
            "1415",
            "1416",
            "1417",
            "1418",
            "1419",
            "1420",
            "1421",
            "1422",
            "1423",
            "1424",
            "1425",
            "1426",
            "1427",
            "1428",
            "1429",
            "1430",
            "1431",
            "1432",
            "1433",
            "1434",
            "1435",
            "1436",
            "1437",
            "1438",
            "1439",
            "1440",
            "1441",
            "1442",
            "1443",
            "1444",
            "1445",
            "1446",
            "1447",
            "1448",
            "1449",
            "1450",
            "1451",
            "1452",
            "1453",
            "1454",
            "1455",
            "1456",
            "1457",
            "1458",
            "1459",
            "1460",
            "1461",
            "1462",
            "1463",
            "1464",
            "1465",
            "1466",
            "1467",
            "1468",
            "1469",
            "1470",
            "1471",
            "1472",
            "1473",
            "1474",
            "1475",
            "1476",
            "1477",
            "1478",
            "1479",
            "1480",
            "1481",
            "1482",
            "1483",
            "1484",
            "1485",
            "1486",
            "1487",
            "1488",
            "1489",
            "1490",
            "1491",
            "1492",
            "1493",
            "1494",
            "1495",
            "1496",
            "1497",
            "1498",
            "1499",
            "1500",
            "1501",
            "1502",
            "1503",
            "1504",
            "1505",
            "1506",
            "1507",
            "1508",
            "1509",
            "1510",
            "1511",
            "1512",
            "1513",
            "1514",
            "1515",
            "1516",
            "1517",
            "1518",
            "1519",
            "1520",
            "1521",
            "1522",
            "1523",
            "1524",
            "1525",
            "1526",
            "1527",
            "1528",
            "1529",
            "1530",
            "1531",
            "1532",
            "1533",
            "1534",
            "1535",
            "1536",
            "1537",
            "1538",
            "1539",
            "1540",
            "1541",
            "1542",
            "1543",
            "1544",
            "1545",
            "1546",
            "1547",
            "1548",
            "1549",
            "1550",
            "1551",
            "1552",
            "1553",
            "1554",
            "1555",
            "1556",
            "1557",
            "1558",
            "1559",
            "1560",
            "1561",
            "1562",
            "1563",
            "1564",
            "1565",
            "1566",
            "1567",
            "1568",
            "1569",
            "1570",
            "1571",
            "1572",
            "1573",
            "1574",
            "1575",
            "1576",
            "1577",
            "1578",
            "1579",
            "1580",
            "1581",
            "1582",
            "1583",
            "1584",
            "1585",
            "1586",
            "1587",
            "1588",
            "1589",
            "1590",
            "1591",
            "1592",
            "1593",
            "1594",
            "1595",
            "1596",
            "1597",
            "1598",
            "1599",
            "1600",
            "1601",
            "1602",
            "1603",
            "1604",
            "1605",
            "1606",
            "1607",
            "1608",
            "1609",
            "1610",
            "1611",
            "1612",
            "1613",
            "1614",
            "1615",
            "1616",
            "1617",
            "1618",
            "1619",
            "1620",
            "1621",
            "1622",
            "1623",
            "1624",
            "1625",
            "1626",
            "1627",
            "1628",
            "1629",
            "1630",
            "1631",
            "1632",
            "1633",
            "1634",
            "1635",
            "1636",
            "1637",
            "1638",
            "1639",
            "1640",
            "1641",
            "1642",
            "1643",
            "1644",
            "1645",
            "1646",
            "1647",
            "1648",
            "1649",
            "1650",
            "1651",
            "1652",
            "1653",
            "1654",
            "1655",
            "1656",
            "1657",
            "1658",
            "1659",
            "1660",
            "1661",
            "1662",
            "1663",
            "1664",
            "1665",
            "1666",
            "1667",
            "1668",
            "1669",
            "1670",
            "1671",
            "1672",
            "1673",
            "1674",
            "1675",
            "1676",
            "1677",
            "1678",
            "1679",
            "1680",
            "1681",
            "1682",
            "1683",
            "1684",
            "1685",
            "1686",
            "1687",
            "1688",
            "1689",
            "1690",
            "1691",
            "1692",
            "1693",
            "1694",
            "1695",
            "1696",
            "1697",
            "1698",
            "1699",
            "1700",
            "1701",
            "1702",
            "1703",
            "1704",
            "1705",
            "1706",
            "1707",
            "1708",
            "1709",
            "1710",
            "1711",
            "1712",
            "1713",
            "1714",
            "1715",
            "1716",
            "1717",
            "1718",
            "1719",
            "1720",
            "1721",
            "1722",
            "1723",
            "1724",
            "1725",
            "1726",
            "1727",
            "1728",
            "1729",
            "1730",
            "1731",
            "1732",
            "1733",
            "1734",
            "1735",
            "1736",
            "1737",
            "1738",
            "1739",
            "1740",
            "1741",
            "1742",
            "1743",
            "1744",
            "1745",
            "1746",
            "1747",
            "1748",
            "1749",
            "1750",
            "1751",
            "1752",
            "1753",
            "1754",
            "1755",
            "1756",
            "1757",
            "1758",
            "1759",
            "1760",
            "1761",
            "1762",
            "1763",
            "1764",
            "1765",
            "1766",
            "1767",
            "1768",
            "1769",
            "1770",
            "1771",
            "1772",
            "1773",
            "1774",
            "1775",
            "1776",
            "1777",
            "1778",
            "1779",
            "1780",
            "1781",
            "1782",
            "1783",
            "1784",
            "1785",
            "1786",
            "1787",
            "1788",
            "1789",
            "1790",
            "1791",
            "1792",
            "1793",
            "1794",
            "1795",
            "1796",
            "1797",
            "1798",
            "1799",
            "1800",
            "1801",
            "1802",
            "1803",
            "1804",
            "1805",
            "1806",
            "1807",
            "1808",
            "1809",
            "1810",
            "1811",
            "1812",
            "1813",
            "1814",
            "1815",
            "1816",
            "1817",
            "1818",
            "1819",
            "1820",
            "1821",
            "1822",
            "1823",
            "1824",
            "1825",
            "1826",
            "1827",
            "1828",
            "1829",
            "1830",
            "1831",
            "1832",
            "1833",
            "1834",
            "1835",
            "1836",
            "1837",
            "1838",
            "1839",
            "1840",
            "1841",
            "1842"
          ],
          "num": 1842
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/jscomp/DefaultPassConfig.java b/src/com/google/javascript/jscomp/DefaultPassConfig.java\nnew file mode 100644\nindex 0000000..d60ba48\n--- /dev/null\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n@@ -0,0 +1,1842 @@\n+/*\n+ * Copyright 2009 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.javascript.jscomp;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Charsets;\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.Lists;\n+import com.google.common.collect.Maps;\n+import com.google.common.collect.Sets;\n+import com.google.common.io.Files;\n+import com.google.javascript.jscomp.NodeTraversal.Callback;\n+import com.google.javascript.rhino.Node;\n+import com.google.javascript.rhino.Token;\n+\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.text.ParseException;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * Pass factories and meta-data for native JSCompiler passes.\n+ *\n+ * @author nicksantos@google.com (Nick Santos)\n+ */\n+// TODO(nicksantos): This needs state for a variety of reasons. Some of it\n+// is to satisfy the existing API. Some of it is because passes really do\n+// need to share state in non-trivial ways. This should be audited and\n+// cleaned up.\n+public class DefaultPassConfig extends PassConfig {\n+\n+  /* For the --mark-as-compiled pass */\n+  private static final String COMPILED_CONSTANT_NAME \u003d \"COMPILED\";\n+\n+  /* Constant name for Closure\u0027s locale */\n+  private static final String CLOSURE_LOCALE_CONSTANT_NAME \u003d \"goog.LOCALE\";\n+\n+  // Compiler errors when invalid combinations of passes are run.\n+  static final DiagnosticType TIGHTEN_TYPES_WITHOUT_TYPE_CHECK \u003d\n+      DiagnosticType.error(\"JSC_TIGHTEN_TYPES_WITHOUT_TYPE_CHECK\",\n+          \"TightenTypes requires type checking. Please use --check_types.\");\n+\n+  static final DiagnosticType CANNOT_USE_PROTOTYPE_AND_VAR \u003d\n+      DiagnosticType.error(\"JSC_CANNOT_USE_PROTOTYPE_AND_VAR\",\n+          \"Rename prototypes and inline variables cannot be used together\");\n+\n+  // Miscellaneous errors.\n+  static final DiagnosticType REPORT_PATH_IO_ERROR \u003d\n+      DiagnosticType.error(\"JSC_REPORT_PATH_IO_ERROR\",\n+          \"Error writing compiler report to {0}\");\n+\n+  private static final DiagnosticType INPUT_MAP_PROP_PARSE \u003d\n+      DiagnosticType.error(\"JSC_INPUT_MAP_PROP_PARSE\",\n+          \"Input property map parse error: {0}\");\n+\n+  private static final DiagnosticType INPUT_MAP_VAR_PARSE \u003d\n+      DiagnosticType.error(\"JSC_INPUT_MAP_VAR_PARSE\",\n+          \"Input variable map parse error: {0}\");\n+\n+  /**\n+   * A global namespace to share across checking passes.\n+   * TODO(nicksantos): This is a hack until I can get the namespace into\n+   * the symbol table.\n+   */\n+  private GlobalNamespace namespaceForChecks \u003d null;\n+\n+  /**\n+   * A type-tightener to share across optimization passes.\n+   */\n+  private TightenTypes tightenTypes \u003d null;\n+\n+  /** Names exported by goog.exportSymbol. */\n+  private Set\u003cString\u003e exportedNames \u003d null;\n+\n+  /**\n+   * Ids for cross-module method stubbing, so that each method has\n+   * a unique id.\n+   */\n+  private CrossModuleMethodMotion.IdGenerator crossModuleIdGenerator \u003d\n+      new CrossModuleMethodMotion.IdGenerator();\n+\n+  /**\n+   * Keys are arguments passed to getCssName() found during compilation; values\n+   * are the number of times the key appeared as an argument to getCssName().\n+   */\n+  private Map\u003cString, Integer\u003e cssNames \u003d null;\n+\n+  /** The variable renaming map */\n+  private VariableMap variableMap \u003d null;\n+\n+  /** The property renaming map */\n+  private VariableMap propertyMap \u003d null;\n+\n+  /** The naming map for anonymous functions */\n+  private VariableMap anonymousFunctionNameMap \u003d null;\n+\n+  /** Fully qualified function names and globally unique ids */\n+  private FunctionNames functionNames \u003d null;\n+\n+  public DefaultPassConfig(CompilerOptions options) {\n+    super(options);\n+  }\n+\n+  @Override\n+  State getIntermediateState() {\n+    return new State(\n+        cssNames \u003d\u003d null ? null : Maps.newHashMap(cssNames),\n+        exportedNames \u003d\u003d null ? null :\n+            Collections.unmodifiableSet(exportedNames),\n+        crossModuleIdGenerator, variableMap, propertyMap,\n+        anonymousFunctionNameMap, functionNames);\n+  }\n+\n+  @Override\n+  void setIntermediateState(State state) {\n+    this.cssNames \u003d state.cssNames \u003d\u003d null ? null :\n+        Maps.newHashMap(state.cssNames);\n+    this.exportedNames \u003d state.exportedNames \u003d\u003d null ? null :\n+        Sets.newHashSet(state.exportedNames);\n+    this.crossModuleIdGenerator \u003d state.crossModuleIdGenerator;\n+    this.variableMap \u003d state.variableMap;\n+    this.propertyMap \u003d state.propertyMap;\n+    this.anonymousFunctionNameMap \u003d state.anonymousFunctionNameMap;\n+    this.functionNames \u003d state.functionNames;\n+  }\n+\n+  @Override\n+  protected List\u003cPassFactory\u003e getChecks() {\n+    List\u003cPassFactory\u003e checks \u003d Lists.newArrayList();\n+\n+    if (options.nameAnonymousFunctionsOnly) {\n+      if (options.anonymousFunctionNaming \u003d\u003d\n+          AnonymousFunctionNamingPolicy.MAPPED) {\n+        checks.add(nameMappedAnonymousFunctions);\n+      } else if (options.anonymousFunctionNaming \u003d\u003d\n+          AnonymousFunctionNamingPolicy.UNMAPPED) {\n+        checks.add(nameUnmappedAnonymousFunctions);\n+      }\n+      return checks;\n+    }\n+\n+    if (options.checkSuspiciousCode) {\n+      checks.add(suspiciousCode);\n+    }\n+\n+    if (options.checkControlStructures)  {\n+      checks.add(checkControlStructures);\n+    }\n+\n+    if (options.checkRequires.isOn()) {\n+      checks.add(checkRequires);\n+    }\n+\n+    if (options.checkProvides.isOn()) {\n+      checks.add(checkProvides);\n+    }\n+\n+    // The following passes are more like \"preprocessor\" passes.\n+    // It\u0027s important that they run before most checking passes.\n+    // Perhaps this method should be renamed?\n+    if (options.generateExports) {\n+      checks.add(generateExports);\n+    }\n+\n+    if (options.exportTestFunctions) {\n+      checks.add(exportTestFunctions);\n+    }\n+\n+    if (options.closurePass) {\n+      checks.add(closurePrimitives.makeOneTimePass());\n+    }\n+\n+    if (options.closurePass \u0026\u0026 options.checkMissingGetCssNameLevel.isOn()) {\n+      checks.add(closureCheckGetCssName);\n+    }\n+\n+    if (options.closurePass) {\n+      checks.add(closureReplaceGetCssName);\n+    }\n+\n+    if (options.syntheticBlockStartMarker !\u003d null) {\n+      // This pass must run before the first fold constants pass.\n+      checks.add(createSyntheticBlocks);\n+    }\n+\n+    // All passes must run the variable check. This synthesizes\n+    // variables later so that the compiler doesn\u0027t crash. It also\n+    // checks the externs file for validity. If you don\u0027t want to warn\n+    // about missing variable declarations, we shut that specific\n+    // error off.\n+    WarningsGuard warningsGuard \u003d options.getWarningsGuard();\n+    if (!options.checkSymbols \u0026\u0026\n+        (warningsGuard \u003d\u003d null || !warningsGuard.disables(\n+            DiagnosticGroups.CHECK_VARIABLES))) {\n+      options.setWarningLevel(DiagnosticGroups.CHECK_VARIABLES,\n+          CheckLevel.OFF);\n+    }\n+\n+    checks.add(checkVars);\n+    if (options.computeFunctionSideEffects) {\n+      checks.add(checkRegExp);\n+    }\n+\n+    if (options.checkShadowVars.isOn()) {\n+      checks.add(checkShadowVars);\n+    }\n+\n+    if (options.aggressiveVarCheck.isOn()) {\n+      checks.add(checkVariableReferences);\n+    }\n+\n+    // This pass should run before types are assigned.\n+    if (options.processObjectPropertyString) {\n+      checks.add(objectPropertyStringPreprocess);\n+    }\n+\n+    // DiagnosticGroups override the plain checkTypes option.\n+    if (options.enables(DiagnosticGroups.CHECK_TYPES)) {\n+      options.checkTypes \u003d true;\n+    } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {\n+      options.checkTypes \u003d false;\n+    }\n+\n+    if (options.checkTypes) {\n+      checks.add(resolveTypes.makeOneTimePass());\n+      checks.add(inferTypes.makeOneTimePass());\n+      checks.add(checkTypes.makeOneTimePass());\n+    }\n+\n+    if (options.checkUnreachableCode.isOn() ||\n+        (options.checkTypes \u0026\u0026 options.checkMissingReturn.isOn())) {\n+      checks.add(checkControlFlow);\n+    }\n+\n+    // CheckAccessControls only works if check types is on.\n+    if (options.enables(DiagnosticGroups.ACCESS_CONTROLS)\n+        \u0026\u0026 options.checkTypes) {\n+      checks.add(checkAccessControls);\n+    }\n+\n+    if (options.checkGlobalNamesLevel.isOn()) {\n+      checks.add(checkGlobalNames);\n+    }\n+\n+    if (options.checkUndefinedProperties.isOn() ||\n+        options.checkUnusedPropertiesEarly) {\n+      checks.add(checkSuspiciousProperties);\n+    }\n+\n+    if (options.checkCaja || options.checkEs5Strict) {\n+      checks.add(checkStrictMode);\n+    }\n+\n+    // Defines in code always need to be processed.\n+    checks.add(processDefines);\n+\n+    if (options.instrumentationTemplate !\u003d null ||\n+        options.recordFunctionInformation) {\n+      checks.add(computeFunctionNames);\n+    }\n+\n+    assertAllOneTimePasses(checks);\n+    return checks;\n+  }\n+\n+  @Override\n+  protected List\u003cPassFactory\u003e getOptimizations() {\n+    List\u003cPassFactory\u003e passes \u003d Lists.newArrayList();\n+\n+    // TODO(nicksantos): The order of these passes makes no sense, and needs\n+    // to be re-arranged.\n+\n+    if (options.runtimeTypeCheck) {\n+      passes.add(runtimeTypeCheck);\n+    }\n+\n+    passes.add(createEmptyPass(\"beforeStandardOptimizations\"));\n+\n+    if (!options.idGenerators.isEmpty()) {\n+      passes.add(replaceIdGenerators);\n+    }\n+\n+    // Optimizes references to the arguments variable.\n+    if (options.optimizeArgumentsArray) {\n+      passes.add(optimizeArgumentsArray);\n+    }\n+\n+    // Remove all parameters that are constants or unused.\n+    if (options.optimizeParameters) {\n+      passes.add(removeUselessParameters);\n+    }\n+\n+    // Abstract method removal works best on minimally modified code, and also\n+    // only needs to run once.\n+    if (options.closurePass \u0026\u0026 options.removeAbstractMethods) {\n+      passes.add(removeAbstractMethods);\n+    }\n+\n+    // Collapsing properties can undo constant inlining, so we do this before\n+    // the main optimization loop.\n+    if (options.collapseProperties) {\n+      passes.add(collapseProperties);\n+    }\n+\n+    // Tighten types based on actual usage.\n+    if (options.tightenTypes) {\n+      passes.add(tightenTypesBuilder);\n+    }\n+\n+    // Property disambiguation should only run once and needs to be done\n+    // soon after type checking, both so that it can make use of type\n+    // information and so that other passes can take advantage of the renamed\n+    // properties.\n+    if (options.disambiguateProperties) {\n+      passes.add(disambiguateProperties);\n+    }\n+\n+    if (options.computeFunctionSideEffects) {\n+      passes.add(markPureFunctions);\n+    } else if (options.markNoSideEffectCalls) {\n+      // TODO(user) The properties that this pass adds to CALL and NEW\n+      // AST nodes increase the AST\u0027s in-memory size.  Given that we are\n+      // already running close to our memory limits, we could run into\n+      // trouble if we end up using the @nosideeffects annotation a lot\n+      // or compute @nosideeffects annotations by looking at function\n+      // bodies.  It should be easy to propagate @nosideeffects\n+      // annotations as part of passes that depend on this property and\n+      // store the result outside the AST (which would allow garbage\n+      // collection once the pass is done).\n+      passes.add(markNoSideEffectCalls);\n+    }\n+\n+    if (options.chainCalls) {\n+      passes.add(chainCalls);\n+    }\n+\n+    // Constant checking must be done after property collapsing because\n+    // property collapsing can introduce new constants (e.g. enum values).\n+    if (options.inlineConstantVars) {\n+      passes.add(checkConsts);\n+    }\n+\n+    // The Caja library adds properties to Object.prototype, which breaks\n+    // most for-in loops.  This adds a check to each loop that skips\n+    // any property matching /___$/.\n+    if (options.ignoreCajaProperties) {\n+      passes.add(ignoreCajaProperties);\n+    }\n+\n+    assertAllOneTimePasses(passes);\n+\n+    if (options.smartNameRemoval || options.reportPath !\u003d null) {\n+      passes.addAll(getCodeRemovingPasses());\n+      passes.add(smartNamePass);\n+    }\n+\n+    // TODO(user): This forces a first crack at crossModuleCodeMotion\n+    // before devirtualization. Once certain functions are devirtualized,\n+    // it confuses crossModuleCodeMotion ability to recognized that\n+    // it is recursive.\n+\n+    // TODO(user): This is meant for a temporary quick win.\n+    // In the future, we might want to improve our analysis in\n+    // CrossModuleCodeMotion so we don\u0027t need to do this.\n+    if (options.crossModuleCodeMotion) {\n+      passes.add(crossModuleCodeMotion);\n+    }\n+\n+    // Method devirtualization benefits from property disambiguiation so\n+    // it should run after that pass but before passes that do\n+    // optimizations based on global names (like cross module code motion\n+    // and inline functions).  Smart Name Removal does better if run before\n+    // this pass.\n+    if (options.devirtualizePrototypeMethods) {\n+      passes.add(devirtualizePrototypeMethods);\n+    }\n+\n+    if (options.customPasses !\u003d null) {\n+      passes.add(getCustomPasses(\n+          CustomPassExecutionTime.BEFORE_OPTIMIZATION_LOOP));\n+    }\n+\n+    passes.add(createEmptyPass(\"beforeMainOptimizations\"));\n+\n+    passes.addAll(getMainOptimizationLoop());\n+\n+    passes.add(createEmptyPass(\"beforeModuleMotion\"));\n+\n+    if (options.crossModuleCodeMotion) {\n+      passes.add(crossModuleCodeMotion);\n+    }\n+\n+    if (options.crossModuleMethodMotion) {\n+      passes.add(crossModuleMethodMotion);\n+    }\n+\n+    passes.add(createEmptyPass(\"afterModuleMotion\"));\n+\n+    // Some optimizations belong outside the loop because running them more\n+    // than once would either have no benefit or be incorrect.\n+    if (options.customPasses !\u003d null) {\n+      passes.add(getCustomPasses(\n+          CustomPassExecutionTime.AFTER_OPTIMIZATION_LOOP));\n+    }\n+\n+    if (options.flowSensitiveInlineVariables) {\n+      passes.add(flowSensitiveInlineVariables);\n+\n+      // After inlining some of the variable uses, some variables are unused.\n+      // Re-run remove unused vars to clean it up.\n+      if (options.removeUnusedVars) {\n+        passes.add(removeUnusedVars);\n+      }\n+    }\n+\n+    if (options.collapseAnonymousFunctions) {\n+      passes.add(collapseAnonymousFunctions);\n+    }\n+\n+    // Move functions before extracting prototype member declarations.\n+    if (options.moveFunctionDeclarations) {\n+      passes.add(moveFunctionDeclarations);\n+    }\n+\n+    if (options.anonymousFunctionNaming \u003d\u003d\n+        AnonymousFunctionNamingPolicy.MAPPED) {\n+      passes.add(nameMappedAnonymousFunctions);\n+    }\n+\n+    // The mapped name anonymous function pass makes use of information that\n+    // the extract prototype member declarations pass removes so the former\n+    // happens before the latter.\n+    //\n+    // Extracting prototype properties screws up the heuristic renaming\n+    // policies, so never run it when those policies are requested.\n+    if (options.extractPrototypeMemberDeclarations \u0026\u0026\n+        (options.propertyRenaming !\u003d PropertyRenamingPolicy.HEURISTIC \u0026\u0026\n+         options.propertyRenaming !\u003d\n+            PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC)) {\n+      passes.add(extractPrototypeMemberDeclarations);\n+    }\n+\n+    if (options.coalesceVariableNames) {\n+      passes.add(coalesceVariableNames);\n+    }\n+\n+    if (options.ambiguateProperties \u0026\u0026\n+        (options.propertyRenaming \u003d\u003d PropertyRenamingPolicy.ALL_UNQUOTED)) {\n+      passes.add(ambiguateProperties);\n+    }\n+\n+    if (options.propertyRenaming !\u003d PropertyRenamingPolicy.OFF) {\n+      passes.add(renameProperties);\n+    }\n+\n+    // Reserve global names added to the \"windows\" object.\n+    if (options.reserveRawExports) {\n+      passes.add(gatherRawExports);\n+    }\n+\n+    // This comes after property renaming because quoted property names must\n+    // not be renamed.\n+    if (options.convertToDottedProperties) {\n+      passes.add(convertToDottedProperties);\n+    }\n+\n+    // Property renaming must happen before this pass runs since this\n+    // pass may convert dotted properties into quoted properties.  It\n+    // is beneficial to run before alias strings, alias keywords and\n+    // variable renaming.\n+    if (options.rewriteFunctionExpressions) {\n+      passes.add(rewriteFunctionExpressions);\n+    }\n+\n+    // This comes after converting quoted property accesses to dotted property\n+    // accesses in order to avoid aliasing property names.\n+    if (!options.aliasableStrings.isEmpty() || options.aliasAllStrings) {\n+      passes.add(aliasStrings);\n+    }\n+\n+    if (options.aliasExternals) {\n+      passes.add(aliasExternals);\n+    }\n+\n+    if (options.aliasKeywords) {\n+      passes.add(aliasKeywords);\n+    }\n+\n+    if (options.collapseVariableDeclarations) {\n+      passes.add(collapseVariableDeclarations);\n+    }\n+\n+    passes.add(denormalize);\n+\n+    if (options.instrumentationTemplate !\u003d null) {\n+      passes.add(instrumentFunctions);\n+    }\n+\n+    if (options.variableRenaming !\u003d VariableRenamingPolicy.ALL) {\n+      // If we\u0027re leaving some (or all) variables with their old names,\n+      // then we need to undo any of the markers we added for distinguishing\n+      // local variables (\"$$1\").\n+      passes.add(invertContextualRenaming);\n+    }\n+\n+    if (options.variableRenaming !\u003d VariableRenamingPolicy.OFF) {\n+      passes.add(renameVars);\n+    }\n+\n+    if (options.groupVariableDeclarations) {\n+      passes.add(groupVariableDeclarations);\n+    }\n+\n+    // This pass should run after names stop changing.\n+    if (options.processObjectPropertyString) {\n+      passes.add(objectPropertyStringPostprocess);\n+    }\n+\n+    if (options.labelRenaming) {\n+      passes.add(renameLabels);\n+    }\n+\n+    if (options.anonymousFunctionNaming \u003d\u003d\n+        AnonymousFunctionNamingPolicy.UNMAPPED) {\n+      passes.add(nameUnmappedAnonymousFunctions);\n+    }\n+\n+    // Safety check\n+    if (options.checkSymbols) {\n+      passes.add(sanityCheckVars);\n+    }\n+\n+    return passes;\n+  }\n+\n+  /** Creates the passes for the main optimization loop. */\n+  private List\u003cPassFactory\u003e getMainOptimizationLoop() {\n+    List\u003cPassFactory\u003e passes \u003d Lists.newArrayList();\n+    if (options.inlineGetters) {\n+      passes.add(inlineGetters);\n+    }\n+\n+    passes.addAll(getCodeRemovingPasses());\n+\n+    if (options.inlineFunctions || options.inlineLocalFunctions) {\n+      passes.add(inlineFunctions);\n+    }\n+\n+    if (options.removeUnusedVars) {\n+      if (options.deadAssignmentElimination) {\n+        passes.add(deadAssignmentsElimination);\n+      }\n+      passes.add(removeUnusedVars);\n+    }\n+    assertAllLoopablePasses(passes);\n+    return passes;\n+  }\n+\n+  /** Creates several passes aimed at removing code. */\n+  private List\u003cPassFactory\u003e getCodeRemovingPasses() {\n+    List\u003cPassFactory\u003e passes \u003d Lists.newArrayList();\n+    if (options.inlineVariables || options.inlineLocalVariables) {\n+      passes.add(inlineVariables);\n+    } else if (options.inlineConstantVars) {\n+      passes.add(inlineConstants);\n+    }\n+\n+    if (options.removeConstantExpressions) {\n+      passes.add(removeConstantExpressions);\n+    }\n+\n+    if (options.foldConstants) {\n+      // These used to be one pass.\n+      passes.add(minimizeExitPoints);\n+      passes.add(foldConstants);\n+    }\n+\n+    if (options.removeDeadCode) {\n+      passes.add(removeUnreachableCode);\n+    }\n+\n+    if (options.removeUnusedPrototypeProperties) {\n+      passes.add(removeUnusedPrototypeProperties);\n+    }\n+\n+    assertAllLoopablePasses(passes);\n+    return passes;\n+  }\n+\n+  /**\n+   * Checks for code that is probably wrong (such as stray expressions).\n+   */\n+  // TODO(bolinfest): Write a CompilerPass for this.\n+  final PassFactory suspiciousCode \u003d\n+      new PassFactory(\"suspiciousCode\", true) {\n+\n+    @Override\n+    protected CompilerPass createInternal(final AbstractCompiler compiler) {\n+      List\u003cCallback\u003e sharedCallbacks \u003d Lists.newArrayList();\n+      sharedCallbacks.add(new CheckAccidentalSemicolon(CheckLevel.WARNING));\n+      sharedCallbacks.add(new CheckSideEffects(CheckLevel.WARNING));\n+      if (options.checkGlobalThisLevel.isOn()) {\n+        sharedCallbacks.add(\n+            new CheckGlobalThis(compiler, options.checkGlobalThisLevel));\n+      }\n+      return combineChecks(compiler, sharedCallbacks);\n+    }\n+\n+  };\n+\n+  /** Verify that all the passes are one-time passes. */\n+  private void assertAllOneTimePasses(List\u003cPassFactory\u003e passes) {\n+    for (PassFactory pass : passes) {\n+      Preconditions.checkState(pass.isOneTimePass());\n+    }\n+  }\n+\n+  /** Verify that all the passes are multi-run passes. */\n+  private void assertAllLoopablePasses(List\u003cPassFactory\u003e passes) {\n+    for (PassFactory pass : passes) {\n+      Preconditions.checkState(!pass.isOneTimePass());\n+    }\n+  }\n+\n+  /** Checks for validity of the control structures. */\n+  private final PassFactory checkControlStructures \u003d\n+      new PassFactory(\"checkControlStructures\", true) {\n+    @Override\n+    protected CompilerPass createInternal(AbstractCompiler compiler) {\n+      return new ControlStructureCheck(compiler);\n+    }\n+  };\n+\n+  /** Checks that all constructed classes are goog.require()d. */\n+  private final PassFactory checkRequires \u003d\n+      new PassFactory(\"checkRequires\", true) {\n+    @Override\n+    protected CompilerPass createInternal(AbstractCompiler compiler) {\n+      return new CheckRequiresForConstructors(compiler, options.checkRequires);\n+    }\n+  };\n+\n+  /** Makes sure @constructor is paired with goog.provides(). */\n+  private final PassFactory checkProvides \u003d\n+      new PassFactory(\"checkProvides\", true) {\n+    @Override\n+    protected CompilerPass createInternal(AbstractCompiler compiler) {\n+      return new CheckProvides(compiler, options.checkProvides);\n+    }\n+  };\n+\n+  private static final DiagnosticType GENERATE_EXPORTS_ERROR \u003d\n+      DiagnosticType.error(\n+          \"JSC_GENERATE_EXPORTS_ERROR\",\n+          \"Exports can only be generated if export symbol/property \" +\n+          \"functions are set.\");\n+\n+  /** Generates exports for @export annotations. */\n+  private final PassFactory generateExports \u003d\n+      new PassFactory(\"generateExports\", true) {\n+    @Override\n+    protected CompilerPass createInternal(AbstractCompiler compiler) {\n+      CodingConvention convention \u003d compiler.getCodingConvention();\n+      if (convention.getExportSymbolFunction() !\u003d null \u0026\u0026\n+          convention.getExportPropertyFunction() !\u003d null) {\n+        return new GenerateExports(compiler,\n+            convention.getExportSymbolFunction(),\n+            convention.getExportPropertyFunction());\n+      } else {\n+        return new ErrorPass(compiler, GENERATE_EXPORTS_ERROR);\n+      }\n+    }\n+  };\n+\n+  /** Generates exports for functions associated with JSUnit. */\n+  private final PassFactory exportTestFunctions \u003d\n+      new PassFactory(\"exportTestFunctions\", true) {\n+    @Override\n+    protected CompilerPass createInternal(AbstractCompiler compiler) {\n+      CodingConvention convention \u003d compiler.getCodingConvention();\n+      if (convention.getExportSymbolFunction() !\u003d null) {\n+        return new ExportTestFunctions(compiler,\n+            convention.getExportSymbolFunction());\n+      } else {\n+        return new ErrorPass(compiler, GENERATE_EXPORTS_ERROR);\n+      }\n+    }\n+  };\n+\n+  /** Raw exports processing pass. */\n+  final PassFactory gatherRawExports \u003d\n+      new PassFactory(\"gatherRawExports\", false) {\n+    @Override\n+    protected CompilerPass createInternal(AbstractCompiler compiler) {\n+      final GatherRawExports pass \u003d new GatherRawExports(\n+          compiler);\n+\n+      return new CompilerPass() {\n+        @Override\n+        public void process(Node externs, Node root) {\n+          pass.process(externs, root);\n+          if (exportedNames \u003d\u003d null) {\n+            exportedNames \u003d Sets.newHashSet();\n+          }\n+          exportedNames.addAll(pass.getExportedVariableNames());\n+        }\n+      };\n+    }\n+  };\n+\n+  /** Closure pre-processing pass. */\n+  @SuppressWarnings(\"deprecation\")\n+  final PassFactory closurePrimitives \u003d\n+      new PassFactory(\"processProvidesAndRequires\", false) {\n+    @Override\n+    protected CompilerPass createInternal(AbstractCompiler compiler) {\n+      final ProcessClosurePrimitives pass \u003d new ProcessClosurePrimitives(\n+          compiler,\n+          options.brokenClosureRequiresLevel,\n+          options.rewriteNewDateGoogNow);\n+\n+      return new CompilerPass() {\n+        @Override\n+        public void process(Node externs, Node root) {\n+          pass.process(externs, root);\n+          exportedNames \u003d pass.getExportedVariableNames();\n+        }\n+      };\n+    }\n+  };\n+\n+  /** Checks that CSS class names are wrapped in goog.getCssName */\n+  private final PassFactory closureCheckGetCssName \u003d\n+      new PassFactory(\"checkMissingGetCssName\", true) {\n+    @Override\n+    protected CompilerPass createInternal(AbstractCompiler compiler) {\n+      String blacklist \u003d options.checkMissingGetCssNameBlacklist;\n+      Preconditions.checkState(blacklist !\u003d null \u0026\u0026 !blacklist.isEmpty(),\n+          \"Not checking use of goog.getCssName because of empty blacklist.\");\n+      return new CheckMissingGetCssName(\n+          compiler, options.checkMissingGetCssNameLevel, blacklist);\n+    }\n+  };\n+\n+  /**\n+   * Processes goog.getCssName.  The cssRenamingMap is used to lookup\n+   * replacement values for the classnames.  If null, the raw class names are\n+   * inlined.\n+   */\n+  private final PassFactory closureReplaceGetCssName \u003d\n+      new PassFactory(\"renameCssNames\", true) {\n+    @Override\n+    protected CompilerPass createInternal(final AbstractCompiler compiler) {\n+      return new CompilerPass() {\n+        @Override\n+        public void process(Node externs, Node jsRoot) {\n+          Map\u003cString, Integer\u003e newCssNames \u003d null;\n+          if (options.gatherCssNames) {\n+            newCssNames \u003d Maps.newHashMap();\n+          }\n+          (new ReplaceCssNames(compiler, newCssNames)).process(\n+              externs, jsRoot);\n+          cssNames \u003d newCssNames;\n+        }\n+      };\n+    }\n+  };\n+\n+  /**\n+   * Creates synthetic blocks to prevent FoldConstants from moving code\n+   * past markers in the source.\n+   */\n+  private final PassFactory createSyntheticBlocks \u003d\n+      new PassFactory(\"createSyntheticBlocks\", true) {\n+    @Override\n+    protected CompilerPass createInternal(AbstractCompiler compiler) {\n+      return new CreateSyntheticBlocks(compiler,\n+          options.syntheticBlockStartMarker,\n+          options.syntheticBlockEndMarker);\n+    }\n+  };\n+\n+  /** Local constant folding */\n+  static final PassFactory foldConstants \u003d\n+      new PassFactory(\"foldConstants\", false) {\n+    @Override\n+    protected CompilerPass createInternal(AbstractCompiler compiler) {\n+      return new FoldConstants(compiler);\n+    }\n+  };\n+\n+  /** Checks that all variables are defined. */\n+  private final PassFactory checkVars \u003d\n+      new PassFactory(\"checkVars\", true) {\n+    @Override\n+    protected CompilerPass createInternal(AbstractCompiler compiler) {\n+      return new VarCheck(compiler);\n+    }\n+  };\n+\n+  /** Checks for RegExp references. */\n+  private final PassFactory checkRegExp \u003d\n+      new PassFactory(\"checkRegExp\", true) {\n+    @Override\n+    protected CompilerPass createInternal(final AbstractCompiler compiler) {\n+      final CheckRegExp pass \u003d new CheckRegExp(compiler);\n+\n+      return new CompilerPass() {\n+        @Override\n+        public void process(Node externs, Node root) {\n+          pass.process(externs, root);\n+          compiler.setHasRegExpGlobalReferences(\n+              pass.isGlobalRegExpPropertiesUsed());\n+        }\n+      };\n+    }\n+  };\n+\n+  /** Checks that no vars are illegally shadowed. */\n+  private final PassFactory checkShadowVars \u003d\n+      new PassFactory(\"variableShadowDeclarationCheck\", true) {\n+    @Override\n+    protected CompilerPass createInternal(AbstractCompiler compiler) {\n+      return new VariableShadowDeclarationCheck(\n+          compiler, options.checkShadowVars);\n+    }\n+  };\n+\n+  /** Checks that references to variables look reasonable. */\n+  private final PassFactory checkVariableReferences \u003d\n+      new PassFactory(\"checkVariableReferences\", true) {\n+    @Override\n+    protected CompilerPass createInternal(AbstractCompiler compiler) {\n+      return new VariableReferenceCheck(\n+          compiler, options.aggressiveVarCheck);\n+    }\n+  };\n+\n+  /** Pre-process goog.testing.ObjectPropertyString. */\n+  private final PassFactory objectPropertyStringPreprocess \u003d\n+      new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n+    @Override\n+    protected CompilerPass createInternal(AbstractCompiler compiler) {\n+      return new ObjectPropertyStringPreprocess(compiler);\n+    }\n+  };\n+\n+  /** Creates a typed scope and adds types to the type registry. */\n+  final PassFactory resolveTypes \u003d\n+      new PassFactory(\"resolveTypes\", false) {\n+    @Override\n+    protected CompilerPass createInternal(AbstractCompiler compiler) {\n+      return new GlobalTypeResolver(compiler);\n+    }\n+  };\n+\n+  /** Rusn type inference. */\n+  private final PassFactory inferTypes \u003d\n+      new PassFactory(\"inferTypes\", false) {\n+    @Override\n+    protected CompilerPass createInternal(final AbstractCompiler compiler) {\n+      return new CompilerPass() {\n+        @Override\n+        public void process(Node externs, Node root) {\n+          Preconditions.checkNotNull(topScope);\n+          Preconditions.checkNotNull(typedScopeCreator);\n+\n+          makeTypeInference(compiler).process(externs, root);\n+        }\n+      };\n+    }\n+  };\n+\n+  /** Checks type usage */\n+  private final PassFactory checkTypes \u003d\n+      new PassFactory(\"checkTypes\", false) {\n+    @Override\n+    protected CompilerPass createInternal(final AbstractCompiler compiler) {\n+      return new CompilerPass() {\n+        @Override\n+        public void process(Node externs, Node root) {\n+          Preconditions.checkNotNull(topScope);\n+          Preconditions.checkNotNull(typedScopeCreator);\n+\n+          TypeCheck check \u003d makeTypeCheck(compiler);\n+          check.process(externs, root);\n+          compiler.getErrorManager().setTypedPercent(check.getTypedPercent());\n+        }\n+      };\n+    }\n+  };\n+\n+  /**\n+   * Checks possible execution paths of the program for problems: missing return\n+   * statements and dead code.\n+   */\n+  private final PassFactory checkControlFlow \u003d\n+      new PassFactory(\"checkControlFlow\", true) {\n+    @Override\n+    protected CompilerPass createInternal(AbstractCompiler compiler) {\n+      List\u003cCallback\u003e callbacks \u003d Lists.newArrayList();\n+      if (options.checkUnreachableCode.isOn()) {\n+        callbacks.add(\n+            new CheckUnreachableCode(compiler, options.checkUnreachableCode));\n+      }\n+      if (options.checkMissingReturn.isOn() \u0026\u0026 options.checkTypes) {\n+        callbacks.add(\n+            new CheckMissingReturn(compiler, options.checkMissingReturn));\n+      }\n+      return combineChecks(compiler, callbacks);\n+    }\n+  };\n+\n+  /** Checks access controls. Depends on type-inference. */\n+  private final PassFactory checkAccessControls \u003d\n+      new PassFactory(\"checkAccessControls\", true) {\n+    @Override\n+    protected CompilerPass createInternal(AbstractCompiler compiler) {\n+      return new CheckAccessControls(compiler);\n+    }\n+  };\n+\n+  /** Executes the given callbacks with a {@link CombinedCompilerPass}. */\n+  private static CompilerPass combineChecks(AbstractCompiler compiler,\n+      List\u003cCallback\u003e callbacks) {\n+    Preconditions.checkArgument(callbacks.size() \u003e 0);\n+    Callback[] array \u003d callbacks.toArray(new Callback[callbacks.size()]);\n+    return new CombinedCompilerPass(compiler, array);\n+  }\n+\n+  /** A compiler pass that resolves types in the global scope. */\n+  private class GlobalTypeResolver implements CompilerPass {\n+    private final AbstractCompiler compiler;\n+\n+    GlobalTypeResolver(AbstractCompiler compiler) {\n+      this.compiler \u003d compiler;\n+    }\n+\n+    @Override\n+    public void process(Node externs, Node root) {\n+      if (topScope \u003d\u003d null) {\n+        typedScopeCreator \u003d\n+            new MemoizedScopeCreator(new TypedScopeCreator(compiler));\n+        topScope \u003d typedScopeCreator.createScope(root.getParent(), null);\n+      } else {\n+        compiler.getTypeRegistry().resolveTypesInScope(topScope);\n+      }\n+    }\n+  }\n+\n+  /** Checks global name usage. */\n+  private final PassFactory checkGlobalNames \u003d\n+      new PassFactory(\"Check names\", true) {\n+    @Override\n+    protected CompilerPass createInternal(final AbstractCompiler compiler) {\n+      return new CompilerPass() {\n+        @Override\n+        public void process(Node externs, Node jsRoot) {\n+          // Create a global namespace for analysis by check passes.\n+          // Note that this class does all heavy computation lazily,\n+          // so it\u0027s OK to create it here.\n+          namespaceForChecks \u003d new GlobalNamespace(compiler, jsRoot);\n+          new CheckGlobalNames(compiler, options.checkGlobalNamesLevel)\n+              .injectNamespace(namespaceForChecks).process(externs, jsRoot);\n+        }\n+      };\n+    }\n+  };\n+\n+  /** Checks for properties that are not read or written */\n+  private final PassFactory checkSuspiciousProperties \u003d\n+      new PassFactory(\"checkSuspiciousProperties\", true) {\n+    @Override\n+    protected CompilerPass createInternal(AbstractCompiler compiler) {\n+      return new SuspiciousPropertiesCheck(\n+          compiler,\n+          options.checkUndefinedProperties,\n+          options.checkUnusedPropertiesEarly ?\n+              CheckLevel.WARNING : CheckLevel.OFF);\n+    }\n+  };\n+\n+  /** Checks that the code is ES5 or Caja compliant. */\n+  private final PassFactory checkStrictMode \u003d\n+      new PassFactory(\"checkStrictMode\", true) {\n+    @Override\n+    protected CompilerPass createInternal(AbstractCompiler compiler) {\n+      return new StrictModeCheck(compiler,\n+          !options.checkSymbols,  // don\u0027t check variables twice\n+          !options.checkCaja);    // disable eval check if not Caja\n+    }\n+  };\n+\n+  /** Override @define-annotated constants. */\n+  final PassFactory processDefines \u003d\n+      new PassFactory(\"processDefines\", true) {\n+    @Override\n+    protected CompilerPass createInternal(final AbstractCompiler compiler) {\n+      return new CompilerPass() {\n+        @Override\n+        public void process(Node externs, Node jsRoot) {\n+          Map\u003cString, Node\u003e replacements \u003d getAdditionalReplacements(options);\n+          replacements.putAll(options.getDefineReplacements());\n+\n+          new ProcessDefines(compiler, replacements)\n+              .injectNamespace(namespaceForChecks).process(externs, jsRoot);\n+\n+          // Kill the namespace in the other class\n+          // so that it can be garbage collected after all passes\n+          // are through with it.\n+          namespaceForChecks \u003d null;\n+        }\n+      };\n+    }\n+  };\n+\n+  /** Checks that all constants are not modified */\n+  private final PassFactory checkConsts \u003d\n+      new PassFactory(\"checkConsts\", true) {\n+    @Override\n+    protected CompilerPass createInternal(AbstractCompiler compiler) {\n+      return new ConstCheck(compiler);\n+    }\n+  };\n+\n+  /** Computes the names of functions for later analysis. */\n+  private final PassFactory computeFunctionNames \u003d\n+      new PassFactory(\"computeFunctionNames\", true) {\n+    @Override\n+    protected CompilerPass createInternal(AbstractCompiler compiler) {\n+      return ((functionNames \u003d new FunctionNames(compiler)));\n+    }\n+  };\n+\n+  /** Skips Caja-private properties in for-in loops */\n+  private final PassFactory ignoreCajaProperties \u003d\n+      new PassFactory(\"ignoreCajaProperties\", true) {\n+    @Override\n+    protected CompilerPass createInternal(AbstractCompiler compiler) {\n+      return new IgnoreCajaProperties(compiler);\n+    }\n+  };\n+\n+  /** Inserts runtime type assertions for debugging. */\n+  private final PassFactory runtimeTypeCheck \u003d\n+      new PassFactory(\"runtimeTypeCheck\", true) {\n+    @Override\n+    protected CompilerPass createInternal(AbstractCompiler compiler) {\n+      return new RuntimeTypeCheck(compiler,\n+          options.runtimeTypeCheckLogFunction);\n+    }\n+  };\n+\n+  /** Generates unique ids. */\n+  private final PassFactory replaceIdGenerators \u003d\n+      new PassFactory(\"replaceIdGenerators\", true) {\n+    @Override\n+    protected CompilerPass createInternal(AbstractCompiler compiler) {\n+      return new ReplaceIdGenerators(compiler, options.idGenerators);\n+    }\n+  };\n+\n+  /** Optimizes the \"arguments\" array. */\n+  private final PassFactory optimizeArgumentsArray \u003d\n+      new PassFactory(\"optimizeArgumentsArray\", true) {\n+    @Override\n+    protected CompilerPass createInternal(AbstractCompiler compiler) {\n+      return new OptimizeArgumentsArray(compiler);\n+    }\n+  };\n+\n+  /** Removes unused or constant formal parameters. */\n+  private final PassFactory removeUselessParameters \u003d\n+      new PassFactory(\"optimizeParameters\", true) {\n+    @Override\n+    protected CompilerPass createInternal(final AbstractCompiler compiler) {\n+      return new CompilerPass() {\n+        @Override public void process(Node externs, Node root) {\n+          NameReferenceGraphConstruction c \u003d\n+              new NameReferenceGraphConstruction(compiler);\n+          c.process(externs, root);\n+\n+          (new OptimizeParameters(compiler, c.getNameReferenceGraph())).process(\n+              externs, root);\n+        }\n+      };\n+    }\n+  };\n+\n+  /** Remove variables set to goog.abstractMethod. */\n+  private final PassFactory removeAbstractMethods \u003d\n+      new PassFactory(\"removeAbstractMethods\", true) {\n+    @Override\n+    protected CompilerPass createInternal(final AbstractCompiler compiler) {\n+      return new GoogleCodeRemoval(compiler);\n+    }\n+  };\n+\n+  /** Collapses names in the global scope. */\n+  private final PassFactory collapseProperties \u003d\n+      new PassFactory(\"collapseProperties\", true) {\n+    @Override\n+    protected CompilerPass createInternal(AbstractCompiler compiler) {\n+      return new CollapseProperties(\n+          compiler, options.collapsePropertiesOnExternTypes,\n+          !isInliningForbidden());\n+    }\n+  };\n+\n+  /**\n+   * Try to infer the actual types, which may be narrower\n+   * than the declared types.\n+   */\n+  private final PassFactory tightenTypesBuilder \u003d\n+      new PassFactory(\"tightenTypes\", true) {\n+    @Override\n+    protected CompilerPass createInternal(AbstractCompiler compiler) {\n+      if (!options.checkTypes) {\n+        return new ErrorPass(compiler, TIGHTEN_TYPES_WITHOUT_TYPE_CHECK);\n+      }\n+      tightenTypes \u003d new TightenTypes(compiler);\n+      return tightenTypes;\n+    }\n+  };\n+\n+  /** Devirtualize property names based on type information. */\n+  private final PassFactory disambiguateProperties \u003d\n+      new PassFactory(\"disambiguateProperties\", true) {\n+    @Override\n+    protected CompilerPass createInternal(AbstractCompiler compiler) {\n+      if (tightenTypes \u003d\u003d null) {\n+        return DisambiguateProperties.forJSTypeSystem(compiler);\n+      } else {\n+        return DisambiguateProperties.forConcreteTypeSystem(\n+            compiler, tightenTypes);\n+      }\n+    }\n+  };\n+\n+  /**\n+   * Chain calls to functions that return this.\n+   */\n+  private final PassFactory chainCalls \u003d\n+      new PassFactory(\"chainCalls\", true) {\n+    @Override\n+    protected CompilerPass createInternal(AbstractCompiler compiler) {\n+      return new ChainCalls(compiler);\n+    }\n+  };\n+\n+  /**\n+   * Rewrite instance methods as static methods, to make them easier\n+   * to inline.\n+   */\n+  private final PassFactory devirtualizePrototypeMethods \u003d\n+      new PassFactory(\"devirtualizePrototypeMethods\", true) {\n+    @Override\n+    protected CompilerPass createInternal(AbstractCompiler compiler) {\n+      return new DevirtualizePrototypeMethods(compiler);\n+    }\n+  };\n+\n+  /**\n+   * Look for function calls that are pure, and annotate them\n+   * that way.\n+   */\n+  private final PassFactory markPureFunctions \u003d\n+      new PassFactory(\"markPureFunctions\", true) {\n+    @Override\n+    protected CompilerPass createInternal(AbstractCompiler compiler) {\n+      return new PureFunctionMarker(\n+          compiler, options.debugFunctionSideEffectsPath, false);\n+    }\n+  };\n+\n+  /**\n+   * Look for function calls that have no side effects, and annotate them\n+   * that way.\n+   */\n+  private final PassFactory markNoSideEffectCalls \u003d\n+      new PassFactory(\"markNoSideEffectCalls\", true) {\n+    @Override\n+    protected CompilerPass createInternal(AbstractCompiler compiler) {\n+      return new MarkNoSideEffectCalls(compiler);\n+    }\n+  };\n+\n+  /** Inlines variables heuristically. */\n+  private final PassFactory inlineVariables \u003d\n+      new PassFactory(\"inlineVariables\", false) {\n+    @Override\n+    protected CompilerPass createInternal(AbstractCompiler compiler) {\n+      if (isInliningForbidden()) {\n+        // In old renaming schemes, inlining a variable can change whether\n+        // or not a property is renamed. This is bad, and those old renaming\n+        // schemes need to die.\n+        return new ErrorPass(compiler, CANNOT_USE_PROTOTYPE_AND_VAR);\n+      } else {\n+        InlineVariables.Mode mode;\n+        if (options.inlineVariables) {\n+          mode \u003d InlineVariables.Mode.ALL;\n+        } else if (options.inlineLocalVariables) {\n+          mode \u003d InlineVariables.Mode.LOCALS_ONLY;\n+        } else {\n+          throw new IllegalStateException(\"No variable inlining option set.\");\n+        }\n+\n+        return new InlineVariables(compiler, mode, true);\n+      }\n+    }\n+  };\n+\n+  /** Inlines variables that are marked as constants. */\n+  private final PassFactory inlineConstants \u003d\n+      new PassFactory(\"inlineConstants\", false) {\n+    @Override\n+    protected CompilerPass createInternal(AbstractCompiler compiler) {\n+      return new InlineVariables(\n+          compiler, InlineVariables.Mode.CONSTANTS_ONLY, true);\n+    }\n+  };\n+\n+  /**\n+   * Simplify expressions by removing the parts that have no side effects.\n+   */\n+  private final PassFactory removeConstantExpressions \u003d\n+      new PassFactory(\"removeConstantExpressions\", false) {\n+    @Override\n+    protected CompilerPass createInternal(AbstractCompiler compiler) {\n+      return new RemoveConstantExpressions(compiler);\n+    }\n+  };\n+\n+  /**\n+   * Perform local control flow optimizations.\n+   */\n+  private final PassFactory minimizeExitPoints \u003d\n+      new PassFactory(\"minimizeExitPoints\", false) {\n+    @Override\n+    protected CompilerPass createInternal(AbstractCompiler compiler) {\n+      return new MinimizeExitPoints(compiler);\n+    }\n+  };\n+\n+  /**\n+   * Use data flow analysis to remove dead branches.\n+   */\n+  private final PassFactory removeUnreachableCode \u003d\n+      new PassFactory(\"removeUnreachableCode\", false) {\n+    @Override\n+    protected CompilerPass createInternal(AbstractCompiler compiler) {\n+      return new UnreachableCodeElimination(compiler, true);\n+    }\n+  };\n+\n+  /**\n+   * Remove prototype properties that do not appear to be used.\n+   */\n+  private final PassFactory removeUnusedPrototypeProperties \u003d\n+      new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n+    @Override\n+    protected CompilerPass createInternal(AbstractCompiler compiler) {\n+      return new RemoveUnusedPrototypeProperties(\n+          compiler, options.removeUnusedPrototypePropertiesInExterns,\n+          !options.removeUnusedVars);\n+    }\n+  };\n+\n+  /**\n+   * Process smart name processing - removes unused classes and does referencing\n+   * starting with minimum set of names.\n+   */\n+  private final PassFactory smartNamePass \u003d\n+      new PassFactory(\"smartNamePass\", true) {\n+    @Override\n+    protected CompilerPass createInternal(final AbstractCompiler compiler) {\n+      return new CompilerPass() {\n+        @Override\n+        public void process(Node externs, Node root) {\n+          NameAnalyzer na \u003d new NameAnalyzer(compiler, false);\n+          na.process(externs, root);\n+\n+          String reportPath \u003d options.reportPath;\n+          if (reportPath !\u003d null) {\n+            try {\n+              Files.write(na.getHtmlReport(), new File(reportPath),\n+                  Charsets.UTF_8);\n+            } catch (IOException e) {\n+              compiler.report(JSError.make(REPORT_PATH_IO_ERROR, reportPath));\n+            }\n+          }\n+\n+          if (options.smartNameRemoval) {\n+            na.removeUnreferenced();\n+          }\n+        }\n+      };\n+    }\n+  };\n+\n+  /** Inlines simple methods, like getters */\n+  private PassFactory inlineGetters \u003d\n+      new PassFactory(\"inlineGetters\", false) {\n+    @Override\n+    protected CompilerPass createInternal(AbstractCompiler compiler) {\n+      return new InlineGetters(compiler);\n+    }\n+  };\n+\n+  /** Kills dead assignments. */\n+  private PassFactory deadAssignmentsElimination \u003d\n+      new PassFactory(\"deadAssignmentsElimination\", false) {\n+    @Override\n+    protected CompilerPass createInternal(AbstractCompiler compiler) {\n+      return new DeadAssignmentsElimination(compiler);\n+    }\n+  };\n+\n+  /** Inlines function calls. */\n+  private PassFactory inlineFunctions \u003d\n+      new PassFactory(\"inlineFunctions\", false) {\n+    @Override\n+    protected CompilerPass createInternal(AbstractCompiler compiler) {\n+      boolean enableBlockInlining \u003d !isInliningForbidden();\n+      return new InlineFunctions(\n+          compiler,\n+          compiler.getUniqueNameIdSupplier(),\n+          options.inlineFunctions,\n+          options.inlineLocalFunctions,\n+          options.inlineAnonymousFunctionExpressions,\n+          enableBlockInlining,\n+          options.decomposeExpressions);\n+    }\n+  };\n+\n+  /** Removes variables that are never used. */\n+  private PassFactory removeUnusedVars \u003d\n+      new PassFactory(\"removeUnusedVars\", false) {\n+    @Override\n+    protected CompilerPass createInternal(AbstractCompiler compiler) {\n+      boolean preserveAnonymousFunctionNames \u003d\n+        options.anonymousFunctionNaming !\u003d AnonymousFunctionNamingPolicy.OFF;\n+      return new RemoveUnusedVars(\n+          compiler,\n+          options.removeUnusedVarsInGlobalScope,\n+          preserveAnonymousFunctionNames);\n+    }\n+  };\n+\n+  /**\n+   * Move global symbols to a deeper common module\n+   */\n+  private PassFactory crossModuleCodeMotion \u003d\n+      new PassFactory(\"crossModuleCodeMotion\", false) {\n+    @Override\n+    protected CompilerPass createInternal(AbstractCompiler compiler) {\n+      return new CrossModuleCodeMotion(compiler, compiler.getModuleGraph());\n+    }\n+  };\n+\n+  /**\n+   * Move methods to a deeper common module\n+   */\n+  private PassFactory crossModuleMethodMotion \u003d\n+      new PassFactory(\"crossModuleMethodMotion\", false) {\n+    @Override\n+    protected CompilerPass createInternal(AbstractCompiler compiler) {\n+      return new CrossModuleMethodMotion(\n+          compiler, crossModuleIdGenerator,\n+          // Only move properties in externs if we\u0027re not treating\n+          // them as exports.\n+          options.removeUnusedPrototypePropertiesInExterns);\n+    }\n+  };\n+\n+  /** A data-flow based variable inliner. */\n+  private final PassFactory flowSensitiveInlineVariables \u003d\n+      new PassFactory(\"flowSensitiveInlineVariables\", true) {\n+    @Override\n+    protected CompilerPass createInternal(AbstractCompiler compiler) {\n+      return new FlowSensitiveInlineVariables(compiler);\n+    }\n+  };\n+\n+  /** Uses register-allocation algorithms to use fewer variables. */\n+  private final PassFactory coalesceVariableNames \u003d\n+      new PassFactory(\"coalesceVariableNames\", true) {\n+    @Override\n+    protected CompilerPass createInternal(AbstractCompiler compiler) {\n+      return new CoalesceVariableNames(compiler, options.generatePseudoNames);\n+    }\n+  };\n+\n+  /**\n+   * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n+   * {@code var x,y;}.\n+   */\n+  private final PassFactory collapseVariableDeclarations \u003d\n+      new PassFactory(\"collapseVariableDeclarations\", true) {\n+    @Override\n+    protected CompilerPass createInternal(AbstractCompiler compiler) {\n+      compiler.setUnnormalized();\n+      return new CollapseVariableDeclarations(compiler);\n+    }\n+  };\n+\n+  /**\n+   * Simple global collapses of variable declarations.\n+   */\n+  private final PassFactory groupVariableDeclarations \u003d\n+      new PassFactory(\"groupVariableDeclarations\", true) {\n+    @Override\n+    protected CompilerPass createInternal(AbstractCompiler compiler) {\n+      compiler.setNormalized();\n+      return new GroupVariableDeclarations(compiler);\n+    }\n+  };\n+\n+  /**\n+   * Extracts common sub-expressions.\n+   */\n+  private final PassFactory extractPrototypeMemberDeclarations \u003d\n+      new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n+    @Override\n+    protected CompilerPass createInternal(AbstractCompiler compiler) {\n+      return new ExtractPrototypeMemberDeclarations(compiler);\n+    }\n+  };\n+\n+  /** Rewrites common function definitions to be more compact. */\n+  private final PassFactory rewriteFunctionExpressions \u003d\n+      new PassFactory(\"rewriteFunctionExpressions\", true) {\n+    @Override\n+    protected CompilerPass createInternal(AbstractCompiler compiler) {\n+      return new FunctionRewriter(compiler);\n+    }\n+  };\n+\n+  /** Collapses functions to not use the VAR keyword. */\n+  private final PassFactory collapseAnonymousFunctions \u003d\n+      new PassFactory(\"collapseAnonymousFunctions\", true) {\n+    @Override\n+    protected CompilerPass createInternal(AbstractCompiler compiler) {\n+      return new CollapseAnonymousFunctions(compiler);\n+    }\n+  };\n+\n+  /** Moves function declarations to the top, to simulate actual hoisting. */\n+  private final PassFactory moveFunctionDeclarations \u003d\n+      new PassFactory(\"moveFunctionDeclarations\", true) {\n+    @Override\n+    protected CompilerPass createInternal(AbstractCompiler compiler) {\n+      return new MoveFunctionDeclarations(compiler);\n+    }\n+  };\n+\n+  private final PassFactory nameUnmappedAnonymousFunctions \u003d\n+      new PassFactory(\"nameAnonymousFunctions\", true) {\n+    @Override\n+    protected CompilerPass createInternal(AbstractCompiler compiler) {\n+      return new NameAnonymousFunctions(compiler);\n+    }\n+  };\n+\n+  private final PassFactory nameMappedAnonymousFunctions \u003d\n+      new PassFactory(\"nameAnonymousFunctions\", true) {\n+    @Override\n+    protected CompilerPass createInternal(final AbstractCompiler compiler) {\n+      return new CompilerPass() {\n+        @Override public void process(Node externs, Node root) {\n+          NameAnonymousFunctionsMapped naf \u003d\n+              new NameAnonymousFunctionsMapped(compiler);\n+          naf.process(externs, root);\n+          anonymousFunctionNameMap \u003d naf.getFunctionMap();\n+        }\n+      };\n+    }\n+  };\n+\n+  /** Alias external symbols. */\n+  private final PassFactory aliasExternals \u003d\n+      new PassFactory(\"aliasExternals\", true) {\n+    @Override\n+    protected CompilerPass createInternal(AbstractCompiler compiler) {\n+      return new AliasExternals(compiler, compiler.getModuleGraph(),\n+          options.unaliasableGlobals, options.aliasableGlobals);\n+    }\n+  };\n+\n+  /**\n+   * Alias string literals with global variables, to avoid creating lots of\n+   * transient objects.\n+   */\n+  private final PassFactory aliasStrings \u003d\n+      new PassFactory(\"aliasStrings\", true) {\n+    @Override\n+    protected CompilerPass createInternal(AbstractCompiler compiler) {\n+      return new AliasStrings(\n+          compiler,\n+          compiler.getModuleGraph(),\n+          options.aliasAllStrings ? null : options.aliasableStrings,\n+          options.aliasStringsBlacklist,\n+          options.outputJsStringUsage);\n+    }\n+  };\n+\n+  /** Aliases common keywords (true, false) */\n+  private final PassFactory aliasKeywords \u003d\n+      new PassFactory(\"aliasKeywords\", true) {\n+    @Override\n+    protected CompilerPass createInternal(AbstractCompiler compiler) {\n+      return new AliasKeywords(compiler);\n+    }\n+  };\n+\n+  /** Handling for the ObjectPropertyString primitive. */\n+  private final PassFactory objectPropertyStringPostprocess \u003d\n+      new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n+    @Override\n+    protected CompilerPass createInternal(AbstractCompiler compiler) {\n+      return new ObjectPropertyStringPostprocess(compiler);\n+    }\n+  };\n+\n+  /**\n+   * Renames properties so that the two properties that never appear on\n+   * the same object get the same name.\n+   */\n+  private final PassFactory ambiguateProperties \u003d\n+      new PassFactory(\"ambiguateProperties\", true) {\n+    @Override\n+    protected CompilerPass createInternal(AbstractCompiler compiler) {\n+      return new AmbiguateProperties(\n+          compiler, options.anonymousFunctionNaming.getReservedCharacters());\n+    }\n+  };\n+\n+  /** Denormalize the AST for code generation. */\n+  private final PassFactory denormalize \u003d\n+      new PassFactory(\"denormalize\", true) {\n+    @Override\n+    protected CompilerPass createInternal(AbstractCompiler compiler) {\n+      compiler.setUnnormalized();\n+      return new Denormalize(compiler);\n+    }\n+  };\n+\n+  /** Inverting name normalization. */\n+  private final PassFactory invertContextualRenaming \u003d\n+      new PassFactory(\"invertNames\", true) {\n+    @Override\n+    protected CompilerPass createInternal(AbstractCompiler compiler) {\n+      return MakeDeclaredNamesUnique.getContextualRenameInverter(compiler);\n+    }\n+  };\n+\n+  /**\n+   * Renames properties.\n+   */\n+  private final PassFactory renameProperties \u003d\n+      new PassFactory(\"renameProperties\", true) {\n+    @Override\n+    protected CompilerPass createInternal(final AbstractCompiler compiler) {\n+      VariableMap map \u003d null;\n+      if (options.inputPropertyMapSerialized !\u003d null) {\n+        try {\n+          map \u003d VariableMap.fromBytes(options.inputPropertyMapSerialized);\n+        } catch (ParseException e) {\n+          return new ErrorPass(compiler,\n+              JSError.make(INPUT_MAP_PROP_PARSE, e.getMessage()));\n+        }\n+      }\n+\n+      final VariableMap prevPropertyMap \u003d map;\n+      return new CompilerPass() {\n+        @Override public void process(Node externs, Node root) {\n+          propertyMap \u003d runPropertyRenaming(\n+              compiler, prevPropertyMap, externs, root);\n+        }\n+      };\n+    }\n+  };\n+\n+  private VariableMap runPropertyRenaming(\n+      AbstractCompiler compiler, VariableMap prevPropertyMap,\n+      Node externs, Node root) {\n+    char[] reservedChars \u003d\n+        options.anonymousFunctionNaming.getReservedCharacters();\n+    switch (options.propertyRenaming) {\n+      case HEURISTIC:\n+        RenamePrototypes rproto \u003d new RenamePrototypes(compiler, false,\n+            reservedChars, prevPropertyMap);\n+        rproto.process(externs, root);\n+        return rproto.getPropertyMap();\n+\n+      case AGGRESSIVE_HEURISTIC:\n+        RenamePrototypes rproto2 \u003d new RenamePrototypes(compiler, true,\n+            reservedChars, prevPropertyMap);\n+        rproto2.process(externs, root);\n+        return rproto2.getPropertyMap();\n+\n+      case ALL_UNQUOTED:\n+        RenameProperties rprop \u003d new RenameProperties(\n+            compiler, options.generatePseudoNames, prevPropertyMap,\n+            reservedChars);\n+        rprop.process(externs, root);\n+        return rprop.getPropertyMap();\n+\n+      default:\n+        throw new IllegalStateException(\n+            \"Unrecognized property renaming policy\");\n+    }\n+  }\n+\n+  /** Renames variables. */\n+  private final PassFactory renameVars \u003d\n+      new PassFactory(\"renameVars\", true) {\n+    @Override\n+    protected CompilerPass createInternal(final AbstractCompiler compiler) {\n+      VariableMap map \u003d null;\n+      if (options.inputVariableMapSerialized !\u003d null) {\n+        try {\n+          map \u003d VariableMap.fromBytes(options.inputVariableMapSerialized);\n+        } catch (ParseException e) {\n+          return new ErrorPass(compiler,\n+              JSError.make(INPUT_MAP_VAR_PARSE, e.getMessage()));\n+        }\n+      }\n+\n+      final VariableMap prevVariableMap \u003d map;\n+      return new CompilerPass() {\n+        @Override public void process(Node externs, Node root) {\n+          variableMap \u003d runVariableRenaming(\n+              compiler, prevVariableMap, externs, root);\n+        }\n+      };\n+    }\n+  };\n+\n+  private VariableMap runVariableRenaming(\n+      AbstractCompiler compiler, VariableMap prevVariableMap,\n+      Node externs, Node root) {\n+    char[] reservedChars \u003d\n+        options.anonymousFunctionNaming.getReservedCharacters();\n+    boolean preserveAnonymousFunctionNames \u003d\n+        options.anonymousFunctionNaming !\u003d AnonymousFunctionNamingPolicy.OFF;\n+    RenameVars rn \u003d new RenameVars(\n+        compiler,\n+        options.renamePrefix,\n+        options.variableRenaming \u003d\u003d VariableRenamingPolicy.LOCAL,\n+        preserveAnonymousFunctionNames,\n+        options.generatePseudoNames,\n+        prevVariableMap,\n+        reservedChars,\n+        exportedNames);\n+    rn.process(externs, root);\n+    return rn.getVariableMap();\n+  }\n+\n+  /** Renames labels */\n+  private final PassFactory renameLabels \u003d\n+      new PassFactory(\"renameLabels\", true) {\n+    @Override\n+    protected CompilerPass createInternal(AbstractCompiler compiler) {\n+      return new RenameLabels(compiler);\n+    }\n+  };\n+\n+  /** Convert bracket access to dot access */\n+  private final PassFactory convertToDottedProperties \u003d\n+      new PassFactory(\"convertToDottedProperties\", true) {\n+    @Override\n+    protected CompilerPass createInternal(AbstractCompiler compiler) {\n+      return new ConvertToDottedProperties(compiler);\n+    }\n+  };\n+\n+  /** Checks that all variables are defined. */\n+  private final PassFactory sanityCheckVars \u003d\n+      new PassFactory(\"sanityCheckVars\", true) {\n+    @Override\n+    protected CompilerPass createInternal(AbstractCompiler compiler) {\n+      return new VarCheck(compiler, true);\n+    }\n+  };\n+\n+  /** Adds instrumentations according to an instrumentation template. */\n+  private final PassFactory instrumentFunctions \u003d\n+      new PassFactory(\"instrumentFunctions\", true) {\n+    @Override\n+    protected CompilerPass createInternal(final AbstractCompiler compiler) {\n+      return new CompilerPass() {\n+        @Override public void process(Node externs, Node root) {\n+          try {\n+            FileReader templateFile \u003d\n+                new FileReader(options.instrumentationTemplate);\n+            (new InstrumentFunctions(\n+                compiler, functionNames,\n+                options.instrumentationTemplate,\n+                options.appNameStr,\n+                templateFile)).process(externs, root);\n+          } catch (IOException e) {\n+            compiler.report(\n+                JSError.make(AbstractCompiler.READ_ERROR,\n+                    options.instrumentationTemplate));\n+          }\n+        }\n+      };\n+    }\n+  };\n+\n+  /**\n+   * Create a no-op pass that can only run once. Used to break up loops.\n+   */\n+  private static PassFactory createEmptyPass(String name) {\n+    return new PassFactory(name, true) {\n+      @Override\n+      protected CompilerPass createInternal(final AbstractCompiler compiler) {\n+        return runInSerial();\n+      }\n+    };\n+  }\n+\n+  /**\n+   * Runs custom passes that are designated to run at a particular time.\n+   */\n+  private PassFactory getCustomPasses(\n+      final CustomPassExecutionTime executionTime) {\n+    return new PassFactory(\"runCustomPasses\", true) {\n+      @Override\n+      protected CompilerPass createInternal(final AbstractCompiler compiler) {\n+        return runInSerial(options.customPasses.get(executionTime));\n+      }\n+    };\n+  }\n+\n+  /**\n+   * All inlining is forbidden in heuristic renaming mode, because inlining\n+   * will ruin the invariants that it depends on.\n+   */\n+  private boolean isInliningForbidden() {\n+    return options.propertyRenaming \u003d\u003d PropertyRenamingPolicy.HEURISTIC ||\n+        options.propertyRenaming \u003d\u003d\n+            PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC;\n+  }\n+\n+  /** Create a compiler pass that runs the given passes in serial. */\n+  private static CompilerPass runInSerial(final CompilerPass ... passes) {\n+    return runInSerial(Lists.newArrayList(passes));\n+  }\n+\n+  /** Create a compiler pass that runs the given passes in serial. */\n+  private static CompilerPass runInSerial(\n+      final Collection\u003cCompilerPass\u003e passes) {\n+    return new CompilerPass() {\n+      @Override public void process(Node externs, Node root) {\n+        for (CompilerPass pass : passes) {\n+          pass.process(externs, root);\n+        }\n+      }\n+    };\n+  }\n+\n+  @VisibleForTesting\n+  static Map\u003cString, Node\u003e getAdditionalReplacements(\n+      CompilerOptions options) {\n+    Map\u003cString, Node\u003e additionalReplacements \u003d Maps.newHashMap();\n+\n+    if (options.markAsCompiled || options.closurePass) {\n+      additionalReplacements.put(COMPILED_CONSTANT_NAME, new Node(Token.TRUE));\n+    }\n+\n+    if (options.closurePass \u0026\u0026 options.locale !\u003d null) {\n+      additionalReplacements.put(CLOSURE_LOCALE_CONSTANT_NAME,\n+          Node.newString(options.locale));\n+    }\n+\n+    return additionalReplacements;\n+  }\n+\n+  /** A compiler pass that marks pure functions. */\n+  private static class PureFunctionMarker implements CompilerPass {\n+    private final AbstractCompiler compiler;\n+    private final String reportPath;\n+    private final boolean useNameReferenceGraph;\n+\n+    PureFunctionMarker(AbstractCompiler compiler, String reportPath,\n+        boolean useNameReferenceGraph) {\n+      this.compiler \u003d compiler;\n+      this.reportPath \u003d reportPath;\n+      this.useNameReferenceGraph \u003d useNameReferenceGraph;\n+    }\n+\n+    @Override\n+    public void process(Node externs, Node root) {\n+      DefinitionProvider definitionProvider \u003d null;\n+      if (useNameReferenceGraph) {\n+        NameReferenceGraphConstruction graphBuilder \u003d\n+            new NameReferenceGraphConstruction(compiler);\n+        graphBuilder.process(externs, root);\n+        definitionProvider \u003d graphBuilder.getNameReferenceGraph();\n+      } else {\n+        SimpleDefinitionFinder defFinder \u003d new SimpleDefinitionFinder(compiler);\n+        defFinder.process(externs, root);\n+        definitionProvider \u003d defFinder;\n+      }\n+\n+      PureFunctionIdentifier pureFunctionIdentifier \u003d\n+          new PureFunctionIdentifier(compiler, definitionProvider);\n+      pureFunctionIdentifier.process(externs, root);\n+\n+      if (reportPath !\u003d null) {\n+        try {\n+          Files.write(pureFunctionIdentifier.getDebugReport(),\n+              new File(reportPath),\n+              Charsets.UTF_8);\n+        } catch (IOException e) {\n+          throw new RuntimeException(e);\n+        }\n+      }\n+    }\n+  }\n+}\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldDeclaration [26919,27469]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [7364,7442]"
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "src/com/google/javascript/jscomp/DiagnosticGroups.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [
            "com.google.javascript.jscomp.DiagnosticGroups:forName:[String name]:DiagnosticGroup",
            "com.google.javascript.jscomp.DiagnosticGroups:setWarningLevels:[CompilerOptions options, List\u003cString\u003e diagnosticGroups, CheckLevel level]:void",
            "com.google.javascript.jscomp.DiagnosticGroups:DiagnosticGroups:[]:null",
            "com.google.javascript.jscomp.DiagnosticGroups:registerGroup:[String name, DiagnosticGroup group]:DiagnosticGroup"
          ],
          "num": 4
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "-1"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "35",
            "36",
            "37",
            "38",
            "39",
            "40",
            "41",
            "42",
            "43",
            "44",
            "45",
            "46",
            "47",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57",
            "58",
            "59",
            "60",
            "61",
            "62",
            "63",
            "64",
            "65",
            "66",
            "67",
            "68",
            "69",
            "70",
            "71",
            "72",
            "73",
            "74",
            "75",
            "76",
            "77",
            "78",
            "79",
            "80",
            "81",
            "82",
            "83",
            "84",
            "85",
            "86",
            "87",
            "88",
            "89",
            "90",
            "91",
            "92",
            "93",
            "94",
            "95",
            "96",
            "97",
            "98",
            "99",
            "100",
            "101",
            "102",
            "103",
            "104",
            "105",
            "106",
            "107",
            "108",
            "109",
            "110",
            "111",
            "112",
            "113",
            "114",
            "115",
            "116",
            "117",
            "118",
            "119",
            "120",
            "121",
            "122",
            "123",
            "124",
            "125",
            "126",
            "127",
            "128",
            "129",
            "130",
            "131",
            "132",
            "133",
            "134",
            "135"
          ],
          "num": 135
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/jscomp/DiagnosticGroups.java b/src/com/google/javascript/jscomp/DiagnosticGroups.java\nnew file mode 100644\nindex 0000000..c29b417\n--- /dev/null\n+++ b/src/com/google/javascript/jscomp/DiagnosticGroups.java\n@@ -0,0 +1,135 @@\n+/*\n+ * Copyright 2008 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.javascript.jscomp;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.Maps;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Named groups of DiagnosticTypes exposed by Compiler.\n+ * @author nicksantos@google.com (Nick Santos)\n+ */\n+public class DiagnosticGroups {\n+\n+  public DiagnosticGroups() {}\n+\n+  private final static Map\u003cString, DiagnosticGroup\u003e groupsByName \u003d\n+      Maps.newHashMap();\n+\n+  static DiagnosticGroup registerGroup(String name,\n+      DiagnosticGroup group) {\n+    groupsByName.put(name, group);\n+    return group;\n+  }\n+\n+  /** Find the diagnostic group registered under the given name. */\n+  protected DiagnosticGroup forName(String name) {\n+    return groupsByName.get(name);\n+  }\n+\n+  // A bit a hack to display the available groups on the command-line.\n+  // New groups should be added to this list if they are public and should\n+  // be listed on the command-line as an available option.\n+  static final String DIAGNOSTIC_GROUP_NAMES \u003d \"accessControls, checkRegExp,\" +\n+      \"checkTypes, checkVars, deprecated, fileoverviewTags, invalidCasts, \" +\n+      \"missingProperties, nonStandardJsDocs, strictModuleDepCheck, \" +\n+      \"undefinedVars, unknownDefines, visibility\";\n+\n+  public static DiagnosticGroup DEPRECATED \u003d DiagnosticGroups\n+      .registerGroup(\"deprecated\",\n+          new DiagnosticGroup(\n+              CheckAccessControls.DEPRECATED_NAME,\n+              CheckAccessControls.DEPRECATED_NAME_REASON,\n+              CheckAccessControls.DEPRECATED_PROP,\n+              CheckAccessControls.DEPRECATED_PROP_REASON,\n+              CheckAccessControls.DEPRECATED_CLASS,\n+              CheckAccessControls.DEPRECATED_CLASS_REASON));\n+\n+  public static DiagnosticGroup VISIBILITY \u003d DiagnosticGroups\n+      .registerGroup(\"visibility\",\n+          new DiagnosticGroup(\n+              CheckAccessControls.BAD_PRIVATE_GLOBAL_ACCESS,\n+              CheckAccessControls.BAD_PRIVATE_PROPERTY_ACCESS,\n+              CheckAccessControls.BAD_PROTECTED_PROPERTY_ACCESS,\n+              CheckAccessControls.PRIVATE_OVERRIDE,\n+              CheckAccessControls.VISIBILITY_MISMATCH));\n+\n+  public static DiagnosticGroup NON_STANDARD_JSDOC \u003d\n+    DiagnosticGroups.registerGroup(\"nonStandardJsDocs\",\n+          new DiagnosticGroup(RhinoErrorReporter.BAD_JSDOC_ANNOTATION));\n+\n+  public static DiagnosticGroup ACCESS_CONTROLS \u003d\n+      DiagnosticGroups.registerGroup(\"accessControls\",\n+          new DiagnosticGroup(DEPRECATED, VISIBILITY));\n+\n+  public static DiagnosticGroup INVALID_CASTS \u003d DiagnosticGroups\n+      .registerGroup(\"invalidCasts\",\n+          new DiagnosticGroup(TypeValidator.INVALID_CAST));\n+\n+  public static DiagnosticGroup FILEOVERVIEW_JSDOC \u003d\n+    DiagnosticGroups.registerGroup(\"fileoverviewTags\",\n+          new DiagnosticGroup(RhinoErrorReporter.EXTRA_FILEOVERVIEW));\n+\n+  public static DiagnosticGroup STRICT_MODULE_DEP_CHECK \u003d\n+    DiagnosticGroups.registerGroup(\"strictModuleDepCheck\",\n+          new DiagnosticGroup(VarCheck.STRICT_MODULE_DEP_ERROR,\n+                              CheckGlobalNames.STRICT_MODULE_DEP_QNAME));\n+\n+  public static DiagnosticGroup UNKNOWN_DEFINES \u003d\n+    DiagnosticGroups.registerGroup(\"unknownDefines\",\n+          new DiagnosticGroup(ProcessDefines.UNKNOWN_DEFINE_WARNING));\n+\n+  public static DiagnosticGroup MISSING_PROPERTIES \u003d\n+    DiagnosticGroups.registerGroup(\"missingProperties\",\n+          new DiagnosticGroup(TypeCheck.INEXISTENT_PROPERTY));\n+\n+  public static DiagnosticGroup UNDEFINED_VARIABLES \u003d\n+      DiagnosticGroups.registerGroup(\"undefinedVars\",\n+          new DiagnosticGroup(VarCheck.UNDEFINED_VAR_ERROR));\n+\n+  public static DiagnosticGroup CHECK_REGEXP \u003d\n+    DiagnosticGroups.registerGroup(\"checkRegExp\",\n+        new DiagnosticGroup(\n+            CheckRegExp.REGEXP_REFERENCE));\n+\n+  public static DiagnosticGroup CHECK_TYPES \u003d\n+      DiagnosticGroups.registerGroup(\"checkTypes\",\n+          new DiagnosticGroup(\n+              TypeValidator.ALL_DIAGNOSTICS,\n+              TypeCheck.ALL_DIAGNOSTICS));\n+\n+  public static DiagnosticGroup CHECK_VARIABLES \u003d\n+    DiagnosticGroups.registerGroup(\"checkVars\",\n+        new DiagnosticGroup(\n+            VarCheck.UNDEFINED_VAR_ERROR,\n+            SyntacticScopeCreator.VAR_MULTIPLY_DECLARED_ERROR));\n+\n+  /**\n+   * Adds warning levels by name.\n+   */\n+  void setWarningLevels(CompilerOptions options,\n+      List\u003cString\u003e diagnosticGroups, CheckLevel level) {\n+    for (String name : diagnosticGroups) {\n+      DiagnosticGroup group \u003d forName(name);\n+      Preconditions.checkNotNull(group, \"No warning class for name: \" + name);\n+      options.setWarningLevel(group, level);\n+    }\n+  }\n+}\n",
      "operations": [
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldDeclaration [4173,4340]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [
            "com.google.javascript.jscomp.FlowSensitiveInlineVariables\\$GatherCandiates:visit:[NodeTraversal t, Node n, Node parent]:void",
            "com.google.javascript.jscomp.FlowSensitiveInlineVariables:process:[Node externs, Node root]:void",
            "com.google.javascript.jscomp.FlowSensitiveInlineVariables\\$Candidate:getDefinition:[Node n, Node parent]:void",
            "com.google.javascript.jscomp.FlowSensitiveInlineVariables\\$Candidate:Candidate:[String varName, Node defCfgNode, Node use, Node useCfgNode]:null",
            "com.google.javascript.jscomp.FlowSensitiveInlineVariables:enterScope:[NodeTraversal t]:void",
            "com.google.javascript.jscomp.FlowSensitiveInlineVariables:checkRightOf:[Node n, Node expressionRoot, Predicate\u003cNode\u003e predicate]:boolean",
            "com.google.javascript.jscomp.FlowSensitiveInlineVariables:FlowSensitiveInlineVariables:[AbstractCompiler compiler]:null",
            "com.google.javascript.jscomp.FlowSensitiveInlineVariables:exitScope:[NodeTraversal t]:void",
            "com.google.javascript.jscomp.FlowSensitiveInlineVariables\\$Candidate:inlineVariable:[]:void",
            "com.google.javascript.jscomp.FlowSensitiveInlineVariables\\$Candidate:getNumUseInUseCfgNode:[Node n, Node parant]:void",
            "com.google.javascript.jscomp.FlowSensitiveInlineVariables:visit:[NodeTraversal t, Node n, Node parent]:void",
            "com.google.javascript.jscomp.FlowSensitiveInlineVariables:checkLeftOf:[Node n, Node expressionRoot, Predicate\u003cNode\u003e predicate]:boolean",
            "com.google.javascript.jscomp.FlowSensitiveInlineVariables\\$Candidate:canInline:[]:boolean"
          ],
          "num": 13
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "-1"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "35",
            "36",
            "37",
            "38",
            "39",
            "40",
            "41",
            "42",
            "43",
            "44",
            "45",
            "46",
            "47",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57",
            "58",
            "59",
            "60",
            "61",
            "62",
            "63",
            "64",
            "65",
            "66",
            "67",
            "68",
            "69",
            "70",
            "71",
            "72",
            "73",
            "74",
            "75",
            "76",
            "77",
            "78",
            "79",
            "80",
            "81",
            "82",
            "83",
            "84",
            "85",
            "86",
            "87",
            "88",
            "89",
            "90",
            "91",
            "92",
            "93",
            "94",
            "95",
            "96",
            "97",
            "98",
            "99",
            "100",
            "101",
            "102",
            "103",
            "104",
            "105",
            "106",
            "107",
            "108",
            "109",
            "110",
            "111",
            "112",
            "113",
            "114",
            "115",
            "116",
            "117",
            "118",
            "119",
            "120",
            "121",
            "122",
            "123",
            "124",
            "125",
            "126",
            "127",
            "128",
            "129",
            "130",
            "131",
            "132",
            "133",
            "134",
            "135",
            "136",
            "137",
            "138",
            "139",
            "140",
            "141",
            "142",
            "143",
            "144",
            "145",
            "146",
            "147",
            "148",
            "149",
            "150",
            "151",
            "152",
            "153",
            "154",
            "155",
            "156",
            "157",
            "158",
            "159",
            "160",
            "161",
            "162",
            "163",
            "164",
            "165",
            "166",
            "167",
            "168",
            "169",
            "170",
            "171",
            "172",
            "173",
            "174",
            "175",
            "176",
            "177",
            "178",
            "179",
            "180",
            "181",
            "182",
            "183",
            "184",
            "185",
            "186",
            "187",
            "188",
            "189",
            "190",
            "191",
            "192",
            "193",
            "194",
            "195",
            "196",
            "197",
            "198",
            "199",
            "200",
            "201",
            "202",
            "203",
            "204",
            "205",
            "206",
            "207",
            "208",
            "209",
            "210",
            "211",
            "212",
            "213",
            "214",
            "215",
            "216",
            "217",
            "218",
            "219",
            "220",
            "221",
            "222",
            "223",
            "224",
            "225",
            "226",
            "227",
            "228",
            "229",
            "230",
            "231",
            "232",
            "233",
            "234",
            "235",
            "236",
            "237",
            "238",
            "239",
            "240",
            "241",
            "242",
            "243",
            "244",
            "245",
            "246",
            "247",
            "248",
            "249",
            "250",
            "251",
            "252",
            "253",
            "254",
            "255",
            "256",
            "257",
            "258",
            "259",
            "260",
            "261",
            "262",
            "263",
            "264",
            "265",
            "266",
            "267",
            "268",
            "269",
            "270",
            "271",
            "272",
            "273",
            "274",
            "275",
            "276",
            "277",
            "278",
            "279",
            "280",
            "281",
            "282",
            "283",
            "284",
            "285",
            "286",
            "287",
            "288",
            "289",
            "290",
            "291",
            "292",
            "293",
            "294",
            "295",
            "296",
            "297",
            "298",
            "299",
            "300",
            "301",
            "302",
            "303",
            "304",
            "305",
            "306",
            "307",
            "308",
            "309",
            "310",
            "311",
            "312",
            "313",
            "314",
            "315",
            "316",
            "317",
            "318",
            "319",
            "320",
            "321",
            "322",
            "323",
            "324",
            "325",
            "326",
            "327",
            "328",
            "329",
            "330",
            "331",
            "332",
            "333",
            "334",
            "335",
            "336",
            "337",
            "338",
            "339",
            "340",
            "341",
            "342",
            "343",
            "344",
            "345",
            "346",
            "347",
            "348",
            "349",
            "350",
            "351",
            "352",
            "353",
            "354",
            "355",
            "356",
            "357",
            "358",
            "359",
            "360",
            "361",
            "362",
            "363",
            "364",
            "365",
            "366",
            "367",
            "368",
            "369",
            "370",
            "371",
            "372",
            "373",
            "374",
            "375",
            "376",
            "377",
            "378",
            "379",
            "380",
            "381",
            "382",
            "383",
            "384",
            "385",
            "386",
            "387",
            "388",
            "389",
            "390",
            "391",
            "392",
            "393",
            "394",
            "395",
            "396",
            "397",
            "398",
            "399",
            "400",
            "401",
            "402",
            "403",
            "404",
            "405",
            "406",
            "407",
            "408",
            "409",
            "410",
            "411",
            "412",
            "413",
            "414",
            "415",
            "416",
            "417",
            "418",
            "419",
            "420",
            "421",
            "422",
            "423",
            "424",
            "425",
            "426",
            "427",
            "428",
            "429",
            "430",
            "431",
            "432",
            "433",
            "434",
            "435",
            "436",
            "437",
            "438",
            "439",
            "440",
            "441",
            "442",
            "443",
            "444",
            "445",
            "446",
            "447",
            "448",
            "449",
            "450",
            "451",
            "452",
            "453",
            "454",
            "455",
            "456",
            "457",
            "458",
            "459",
            "460",
            "461",
            "462",
            "463",
            "464",
            "465",
            "466",
            "467",
            "468",
            "469",
            "470"
          ],
          "num": 470
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\nnew file mode 100644\nindex 0000000..8ec85c1\n--- /dev/null\n+++ b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n@@ -0,0 +1,470 @@\n+/*\n+ * Copyright 2009 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.javascript.jscomp;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.common.base.Predicate;\n+import com.google.common.base.Predicates;\n+import com.google.common.collect.Lists;\n+import com.google.javascript.jscomp.ControlFlowGraph.AbstractCfgNodeTraversalCallback;\n+import com.google.javascript.jscomp.ControlFlowGraph.Branch;\n+import com.google.javascript.jscomp.DataFlowAnalysis.FlowState;\n+import com.google.javascript.jscomp.MustBeReachingVariableDef.MustDef;\n+import com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback;\n+import com.google.javascript.jscomp.NodeTraversal.AbstractShallowCallback;\n+import com.google.javascript.jscomp.NodeTraversal.ScopedCallback;\n+import com.google.javascript.jscomp.graph.DiGraph.DiGraphEdge;\n+import com.google.javascript.jscomp.graph.DiGraph.DiGraphNode;\n+import com.google.javascript.rhino.Node;\n+import com.google.javascript.rhino.Token;\n+\n+import java.util.Collection;\n+import java.util.List;\n+\n+/**\n+ * Inline variables when possible. Using the information from\n+ * {@link MaybeReachingVariableUse} and {@link MustBeReachingVariableDef},\n+ * this pass attempts to inline a variable by placing the value at the\n+ * definition where the variable is used. The basic requirements for inlining\n+ * are the following:\n+ *\n+ * \u003cul\u003e\n+ * \u003cli\u003e There is exactly one reaching definition at the use of that variable\n+ * \u003c/li\u003e\n+ * \u003cli\u003e There is exactly one use for that definition of the variable\n+ * \u003c/li\u003e\n+ * \u003c/ul\u003e\n+ *\n+ * \u003cp\u003eOther requirements can be found in {@link Candidate#canInline}. Currently\n+ * this pass does not operate on the global scope due to compilation time.\n+ *\n+*\n+ */\n+class FlowSensitiveInlineVariables extends AbstractPostOrderCallback\n+    implements CompilerPass, ScopedCallback {\n+\n+  /**\n+   * Implementation:\n+   *\n+   * This pass first perform a traversal to gather a list of Candidates that\n+   * could be inlined using {@link GatherCandiates}.\n+   *\n+   * The second step involves verifying that each candidate is actually safe\n+   * to inline with {@link Candidate#canInline()} and finally perform inlining\n+   * using {@link Candidate#inlineVariable()}.\n+   *\n+   * The reason for the delayed evaluation of the candidates is because we\n+   * need two separate dataflow result.\n+   */\n+  private final AbstractCompiler compiler;\n+\n+  // These two pieces of data is persistent in the whole execution of enter\n+  // scope.\n+  private ControlFlowGraph\u003cNode\u003e cfg;\n+  private List\u003cCandidate\u003e candidates;\n+  private MustBeReachingVariableDef reachingDef;\n+  private MaybeReachingVariableUse reachingUses;\n+\n+  private static final Predicate\u003cNode\u003e SIDE_EFFECT_PREDICATE \u003d\n+    new Predicate\u003cNode\u003e() {\n+      @Override\n+      public boolean apply(Node n) {\n+        // When the node is null it means, we reached the implicit return\n+        // where the function returns (possibly without an return statement)\n+        if (n \u003d\u003d null) {\n+          return false;\n+        }\n+\n+        // TODO(user): We only care about calls to functions that\n+        // passes one of the dependent variable to a non-sideeffect free\n+        // function.\n+        if (NodeUtil.isCall(n) \u0026\u0026 NodeUtil.functionCallHasSideEffects(n)) {\n+          return true;\n+        }\n+\n+        if (NodeUtil.isNew(n) \u0026\u0026 NodeUtil.constructorCallHasSideEffects(n)) {\n+          return true;\n+        }\n+\n+        for (Node c \u003d n.getFirstChild(); c !\u003d null; c \u003d c.getNext()) {\n+          if (!ControlFlowGraph.isEnteringNewCfgNode(c) \u0026\u0026 apply(c)) {\n+            return true;\n+          }\n+        }\n+        return false;\n+      }\n+  };\n+\n+  public FlowSensitiveInlineVariables(AbstractCompiler compiler) {\n+    this.compiler \u003d compiler;\n+  }\n+\n+  @Override\n+  public void enterScope(NodeTraversal t) {\n+\n+    if (t.inGlobalScope()) {\n+      return; // Don\u0027t even brother. All global variables are likely escaped.\n+    }\n+\n+    // Compute the forward reaching definition.\n+    ControlFlowAnalysis cfa \u003d new ControlFlowAnalysis(compiler, false);\n+    // Process the body of the function.\n+    Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));\n+    cfa.process(null, t.getScopeRoot().getLastChild());\n+    cfg \u003d cfa.getCfg();\n+    reachingDef \u003d new MustBeReachingVariableDef(cfg, t.getScope(), compiler);\n+    reachingDef.analyze();\n+    candidates \u003d Lists.newLinkedList();\n+\n+    // Using the forward reaching definition search to find all the inline\n+    // candiates\n+    new NodeTraversal(compiler, new GatherCandiates()).traverse(\n+        t.getScopeRoot().getLastChild());\n+\n+    // Compute the backward reaching use. The CFG can be reused.\n+    reachingUses \u003d new MaybeReachingVariableUse(cfg, t.getScope(), compiler);\n+    reachingUses.analyze();\n+    for (Candidate c : candidates) {\n+      if (c.canInline()) {\n+        c.inlineVariable();\n+      }\n+    }\n+  }\n+\n+  @Override\n+  public void exitScope(NodeTraversal t) {}\n+\n+  @Override\n+  public void process(Node externs, Node root) {\n+    (new NodeTraversal(compiler, this)).traverse(root);\n+  }\n+\n+  @Override\n+  public void visit(NodeTraversal t, Node n, Node parent) {\n+    // TODO(user): While the helpers do a subtree traversal on the AST, the\n+    // compiler pass itself only traverse the AST to look for function\n+    // declarations to perform dataflow analysis on. We could combine\n+    // the traversal in DataFlowAnalysis\u0027s computeEscaped later to save some\n+    // time.\n+  }\n+\n+  /**\n+   * Gathers a list of possible candidates for inlining based only on\n+   * information from {@link MustBeReachingVariableDef}. The list will be stored\n+   * in {@code candidiates} and the validity of each inlining Candidate should\n+   * be later verified with {@link Candidate#canInline()} when\n+   * {@link MaybeReachingVariableUse} has been performed.\n+   */\n+  private class GatherCandiates extends AbstractShallowCallback {\n+    @Override\n+    public void visit(NodeTraversal t, Node n, Node parent) {\n+      DiGraphNode\u003cNode, Branch\u003e graphNode \u003d cfg.getDirectedGraphNode(n);\n+      if (graphNode \u003d\u003d null) {\n+        // Not a CFG node.\n+        return;\n+      }\n+      FlowState\u003cMustDef\u003e state \u003d graphNode.getAnnotation();\n+      final MustDef defs \u003d state.getIn();\n+      final Node cfgNode \u003d n;\n+      AbstractCfgNodeTraversalCallback gatherCb \u003d\n+          new AbstractCfgNodeTraversalCallback() {\n+\n+        @Override\n+        public void visit(NodeTraversal t, Node n, Node parent) {\n+          if (NodeUtil.isName(n)) {\n+\n+            // Make sure that the name node is purely a read.\n+            if ((NodeUtil.isAssignmentOp(parent) \u0026\u0026 parent.getFirstChild() \u003d\u003d n)\n+                || NodeUtil.isVar(parent) || parent.getType() \u003d\u003d Token.INC ||\n+                parent.getType() \u003d\u003d Token.DEC || parent.getType() \u003d\u003d Token.LP ||\n+                parent.getType() \u003d\u003d Token.CATCH) {\n+              return;\n+            }\n+\n+            String name \u003d n.getString();\n+            if (compiler.getCodingConvention().isExported(name)) {\n+              return;\n+            }\n+\n+            Node defNode \u003d reachingDef.getDef(name, cfgNode);\n+            if (defNode !\u003d null) {\n+              candidates.add(new Candidate(name, defNode, n, cfgNode));\n+            }\n+          }\n+        }\n+      };\n+\n+      NodeTraversal.traverse(compiler, cfgNode, gatherCb);\n+    }\n+  }\n+\n+  /**\n+   * Models the connection between a definition and a use of that definition.\n+   */\n+  private class Candidate {\n+\n+    // Name of the variable.\n+    private final String varName;\n+\n+    // Nodes related to the definition.\n+    private Node def;\n+    private final Node defCfgNode;\n+\n+    // Nodes related to the use.\n+    private final Node use;\n+    private final Node useCfgNode;\n+\n+    // Number of uses of the variable within the CFG node that represented the\n+    // use in the CFG.\n+    private int numUseWithinUseCfgNode;\n+\n+    Candidate(String varName, Node defCfgNode, Node use, Node useCfgNode) {\n+      Preconditions.checkArgument(NodeUtil.isName(use));\n+      this.varName \u003d varName;\n+      this.defCfgNode \u003d defCfgNode;\n+      this.use \u003d use;\n+      this.useCfgNode \u003d useCfgNode;\n+    }\n+\n+    private boolean canInline() {\n+\n+      // Cannot inline a parameter.\n+      if (NodeUtil.isFunction(defCfgNode)) {\n+        return false;\n+      }\n+\n+      getDefinition(defCfgNode, null);\n+      getNumUseInUseCfgNode(useCfgNode, null);\n+\n+      // Definition was not found.\n+      if (def \u003d\u003d null) {\n+        return false;\n+      }\n+\n+      // Check that the assignment isn\u0027t used as a R-Value.\n+      // TODO(user): Certain cases we can still inline.\n+      if (NodeUtil.isAssign(def) \u0026\u0026 !NodeUtil.isExprAssign(def.getParent())) {\n+        return false;\n+      }\n+\n+\n+      // The right of the definition has side effect:\n+      // Example, for x:\n+      // x \u003d readProp(b), modifyProp(b); print(x);\n+      if (checkRightOf(def, defCfgNode, SIDE_EFFECT_PREDICATE)) {\n+        return false;\n+      }\n+\n+      // Similar check as the above but this time, all the sub-expressions\n+      // left of the use of the variable.\n+      // x \u003d readProp(b); modifyProp(b), print(x);\n+      if (checkLeftOf(use, useCfgNode, SIDE_EFFECT_PREDICATE)) {\n+        return false;\n+      }\n+\n+      // Similar side effect check as above but this time the side effect is\n+      // else where along the path.\n+      // x \u003d readProp(b); while(modifyProp(b)) {}; print(x);\n+      CheckPathsBetweenNodes\u003cNode, ControlFlowGraph.Branch\u003e\n+        pathCheck \u003d new CheckPathsBetweenNodes\u003cNode, ControlFlowGraph.Branch\u003e(\n+               cfg,\n+               cfg.getDirectedGraphNode(defCfgNode),\n+               cfg.getDirectedGraphNode(useCfgNode),\n+               SIDE_EFFECT_PREDICATE,\n+               Predicates.\n+                   \u003cDiGraphEdge\u003cNode, ControlFlowGraph.Branch\u003e\u003ealwaysTrue(),\n+               false);\n+      if (pathCheck.somePathsSatisfyPredicate()) {\n+        return false;\n+      }\n+\n+      // TODO(user): Side-effect is ok sometimes. As long as there are no\n+      // side-effect function down all paths to the use. Once we have all the\n+      // side-effect analysis tool.\n+      if (NodeUtil.mayHaveSideEffects(def.getLastChild())) {\n+        return false;\n+      }\n+\n+      // TODO(user): We could inline all the uses if the expression is short.\n+\n+      // Finally we have to make sure that there are no more than one use\n+      // in the program and in the CFG node. Even when it is semantically\n+      // correctly inlining twice increases code size.\n+      if (numUseWithinUseCfgNode !\u003d 1) {\n+        return false;\n+      }\n+\n+      // We give up inling stuff with R-Value that has GETPROP, GETELEM,\n+      // or anything that creates a new object.\n+      // Example:\n+      // var x \u003d a.b.c; j.c \u003d 1; print(x);\n+      // Inlining print(a.b.c) is not safe consider j and be alias to a.b.\n+      // TODO(user): We could get more accuracy by looking more in-detail\n+      // what j is and what x is trying to into to.\n+      if (NodeUtil.has(def.getLastChild(),\n+          new Predicate\u003cNode\u003e() {\n+              @Override\n+              public boolean apply(Node input) {\n+                switch (input.getType()) {\n+                  case Token.GETELEM:\n+                  case Token.GETPROP:\n+                  case Token.ARRAYLIT:\n+                  case Token.OBJECTLIT:\n+                  case Token.REGEXP:\n+                  case Token.NEW:\n+                    return true;\n+                }\n+                return false;\n+              }\n+          },\n+          new Predicate\u003cNode\u003e() {\n+              @Override\n+              public boolean apply(Node input) {\n+                // Recurse if the node is not a function.\n+                return !NodeUtil.isFunction(input);\n+              }\n+          })) {\n+        return false;\n+      }\n+\n+      Collection\u003cNode\u003e uses \u003d reachingUses.getUses(varName, defCfgNode);\n+\n+      if (uses.size() !\u003d 1) {\n+        return false;\n+      }\n+\n+      return true;\n+    }\n+\n+    /**\n+     * Actual transformation.\n+     */\n+    private void inlineVariable() {\n+      Node defParent \u003d def.getParent();\n+      Node useParent \u003d use.getParent();\n+      if (NodeUtil.isAssign(def)) {\n+        Node rhs \u003d def.getLastChild();\n+        rhs.detachFromParent();\n+        // Oh yes! I have grandparent to remove this.\n+        Preconditions.checkState(NodeUtil.isExpressionNode(defParent));\n+        while (defParent.getParent().getType() \u003d\u003d Token.LABEL) {\n+          defParent \u003d defParent.getParent();\n+        }\n+        defParent.detachFromParent();\n+        useParent.replaceChild(use, rhs);\n+      } else if (NodeUtil.isVar(defParent)) {\n+        Node rhs \u003d def.getLastChild();\n+        def.removeChild(rhs);\n+        useParent.replaceChild(use, rhs);\n+      } else {\n+        Preconditions.checkState(false, \"No other definitions can be inlined.\");\n+      }\n+      compiler.reportCodeChange();\n+    }\n+\n+    /**\n+     * Set the def node\n+     *\n+     * @param n A node that has a corresponding CFG node in the CFG.\n+     */\n+    private void getDefinition(Node n, Node parent) {\n+      AbstractCfgNodeTraversalCallback gatherCb \u003d\n+        new AbstractCfgNodeTraversalCallback() {\n+\n+        @Override\n+        public void visit(NodeTraversal t, Node n, Node parent) {\n+          switch (n.getType()) {\n+            case Token.NAME:\n+              if (n.getString().equals(varName) \u0026\u0026 n.hasChildren()) {\n+                def \u003d n;\n+              }\n+              return;\n+\n+            case Token.ASSIGN:\n+              Node lhs \u003d n.getFirstChild();\n+              if (NodeUtil.isName(lhs) \u0026\u0026 lhs.getString().equals(varName)) {\n+                def \u003d n;\n+              }\n+              return;\n+          }\n+        }\n+      };\n+      NodeTraversal.traverse(compiler, n, gatherCb);\n+    }\n+\n+    /**\n+     * Computes the number of uses of the variable varName and store it in\n+     * numUseWithinUseCfgNode.\n+     */\n+    private void getNumUseInUseCfgNode(Node n, Node parant) {\n+\n+      AbstractCfgNodeTraversalCallback gatherCb \u003d\n+          new AbstractCfgNodeTraversalCallback() {\n+\n+        @Override\n+        public void visit(NodeTraversal t, Node n, Node parent) {\n+          if (NodeUtil.isName(n) \u0026\u0026 n.getString().equals(varName)) {\n+            numUseWithinUseCfgNode++;\n+          }\n+        }\n+      };\n+\n+      NodeTraversal.traverse(compiler, n, gatherCb);\n+    }\n+  }\n+\n+  /**\n+   * Given an expression by its root and sub-expression n, return true if there\n+   * the predicate is true for some expression on the right of n.\n+   *\n+   * Example:\n+   *\n+   * NotChecked(), NotChecked(), n, Checked(), Checked();\n+   */\n+  private static boolean checkRightOf(\n+      Node n, Node expressionRoot, Predicate\u003cNode\u003e predicate) {\n+    for (Node p \u003d n; p !\u003d expressionRoot; p \u003d p.getParent()) {\n+      for (Node cur \u003d p.getNext(); cur !\u003d null; cur \u003d cur.getNext()) {\n+        if (predicate.apply(cur)) {\n+          return true;\n+        }\n+      }\n+    }\n+    return false;\n+  }\n+\n+  /**\n+   * Given an expression by its root and sub-expression n, return true if there\n+   * the predicate is true for some expression on the left of n.\n+   *\n+   * Example:\n+   *\n+   * Checked(), Checked(), n, NotChecked(), NotChecked();\n+   */\n+  private static boolean checkLeftOf(\n+      Node n, Node expressionRoot, Predicate\u003cNode\u003e predicate) {\n+    for (Node p \u003d n.getParent(); p !\u003d expressionRoot; p \u003d p.getParent()) {\n+      for (Node cur \u003d p.getParent().getFirstChild(); cur !\u003d p;\n+          cur \u003d cur.getNext()) {\n+        if (predicate.apply(cur)) {\n+          return true;\n+        }\n+      }\n+    }\n+    return false;\n+  }\n+}\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "ImportDeclaration [721,762]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ImportDeclaration [1304,1366]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldDeclaration [3151,4109]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [14551,15130]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [15134,15748]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [9193,9282]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [9458,9546]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [9728,10151]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [10158,10232]"
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/jscomp/TypedCodeGenerator.java",
        "src/com/google/javascript/jscomp/TypedCodeGenerator.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [
            "com.google.javascript.jscomp.TypedCodeGenerator:getFunctionAnnotation:[Node node]:String",
            "com.google.javascript.jscomp.TypedCodeGenerator:add:[Node n, Context context]:void",
            "com.google.javascript.jscomp.TypedCodeGenerator:TypedCodeGenerator:[CodeConsumer consumer, Charset outputCharset]:null",
            "com.google.javascript.jscomp.TypedCodeGenerator:getTypeAnnotation:[Node node]:String"
          ],
          "num": 4
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "-1"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "35",
            "36",
            "37",
            "38",
            "39",
            "40",
            "41",
            "42",
            "43",
            "44",
            "45",
            "46",
            "47",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57",
            "58",
            "59",
            "60",
            "61",
            "62",
            "63",
            "64",
            "65",
            "66",
            "67",
            "68",
            "69",
            "70",
            "71",
            "72",
            "73",
            "74",
            "75",
            "76",
            "77",
            "78",
            "79",
            "80",
            "81",
            "82",
            "83",
            "84",
            "85",
            "86",
            "87",
            "88",
            "89",
            "90",
            "91",
            "92",
            "93",
            "94",
            "95",
            "96",
            "97",
            "98",
            "99",
            "100",
            "101",
            "102",
            "103",
            "104",
            "105",
            "106",
            "107",
            "108",
            "109",
            "110",
            "111",
            "112",
            "113",
            "114",
            "115",
            "116",
            "117",
            "118",
            "119",
            "120",
            "121",
            "122",
            "123",
            "124",
            "125",
            "126",
            "127",
            "128",
            "129",
            "130",
            "131",
            "132",
            "133",
            "134",
            "135",
            "136",
            "137",
            "138",
            "139",
            "140"
          ],
          "num": 140
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/jscomp/TypedCodeGenerator.java b/src/com/google/javascript/jscomp/TypedCodeGenerator.java\nnew file mode 100644\nindex 0000000..167f75f\n--- /dev/null\n+++ b/src/com/google/javascript/jscomp/TypedCodeGenerator.java\n@@ -0,0 +1,140 @@\n+/*\n+ * Copyright 2009 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.javascript.jscomp;\n+\n+import com.google.javascript.rhino.Node;\n+import com.google.javascript.rhino.Token;\n+import com.google.javascript.rhino.jstype.FunctionType;\n+import com.google.javascript.rhino.jstype.JSType;\n+import com.google.javascript.rhino.jstype.ObjectType;\n+\n+import java.nio.charset.Charset;\n+\n+\n+/**\n+ * A code generator that outputs type annotations for functions and\n+ * constructors.\n+*\n+ */\n+class TypedCodeGenerator extends CodeGenerator {\n+  TypedCodeGenerator(CodeConsumer consumer, Charset outputCharset) {\n+    super(consumer, outputCharset, true);\n+  }\n+\n+  @Override\n+  void add(Node n, Context context) {\n+    Node parent \u003d n.getParent();\n+    if (parent !\u003d null \n+        \u0026\u0026 (parent.getType() \u003d\u003d Token.BLOCK\n+            || parent.getType() \u003d\u003d Token.SCRIPT)) {\n+      if (n.getType() \u003d\u003d Token.FUNCTION) {\n+        add(getFunctionAnnotation(n));\n+      } else if (n.getType() \u003d\u003d Token.EXPR_RESULT\n+          \u0026\u0026 n.getFirstChild().getType() \u003d\u003d Token.ASSIGN) {\n+        Node rhs \u003d n.getFirstChild().getFirstChild();\n+        add(getTypeAnnotation(rhs));\n+      } else if (n.getType() \u003d\u003d Token.VAR\n+          \u0026\u0026 n.getFirstChild().getFirstChild() !\u003d null\n+          \u0026\u0026 n.getFirstChild().getFirstChild().getType() \u003d\u003d Token.FUNCTION) {\n+        add(getFunctionAnnotation(n.getFirstChild().getFirstChild()));\n+      }\n+    }\n+\n+    super.add(n, context);\n+  }\n+\n+\n+  private String getTypeAnnotation(Node node) {\n+    JSType type \u003d node.getJSType();\n+    if (type instanceof FunctionType) {\n+      return getFunctionAnnotation(node);\n+    } else if (type !\u003d null \u0026\u0026 !type.isUnknownType()\n+        \u0026\u0026 !type.isEmptyType() \u0026\u0026 !type.isVoidType()) {\n+      return \"/** @type {\" + node.getJSType() + \"} */\\n\";\n+    } else {\n+      return \"\";\n+    }\n+  }\n+\n+  /**\n+   * @param node A node for a function for which to generate a type annotation\n+   */\n+  private String getFunctionAnnotation(Node node) {\n+    StringBuilder sb \u003d new StringBuilder(\"/**\\n\");\n+\n+    if (node.getJSType().isUnknownType()) {\n+      return \"\";\n+    }\n+    FunctionType funType \u003d (FunctionType) node.getJSType();\n+\n+    // We need to use the child nodes of the function as the nodes for the\n+    // parameters of the function type do not have the real parameter names.\n+    // FUNCTION\n+    //   NAME\n+    //   LP\n+    //     NAME param1\n+    //     NAME param2\n+    Node fnNode \u003d funType.getSource();\n+    if (fnNode !\u003d null) {\n+      Node paramNode \u003d NodeUtil.getFnParameters(fnNode).getFirstChild();\n+\n+      // Param types\n+      for (Node n : funType.getParameters()) {\n+        // Bail out if the paramNode is not there.\n+        if (paramNode \u003d\u003d null) {\n+          break;\n+        }\n+        sb.append(\" * @param {\" + n.getJSType() + \"} \");\n+        sb.append(paramNode.getString());\n+        sb.append(\"\\n\");\n+        paramNode \u003d paramNode.getNext();\n+      }\n+    }\n+\n+    // Return type\n+    JSType retType \u003d funType.getReturnType();\n+    if (retType !\u003d null \u0026\u0026 !retType.isUnknownType() \u0026\u0026 !retType.isEmptyType()) {\n+      sb.append(\" * @return {\" + retType + \"}\\n\");\n+    }\n+\n+    // Constructor/interface\n+    if (funType.isConstructor() || funType.isInterface()) {\n+      ObjectType superInstance \u003d\n+          funType.getSuperClassConstructor().getInstanceType();\n+      if (!superInstance.toString().equals(\"Object\")) {\n+        sb.append(\" * @extends {\"  + superInstance + \"}\\n\");\n+      }\n+\n+      for (ObjectType interfaze : funType.getImplementedInterfaces()) {\n+        sb.append(\" * @implements {\"  + interfaze + \"}\\n\");\n+      }\n+\n+      if (funType.isConstructor()) {\n+        sb.append(\" * @constructor\\n\");\n+      } else if (funType.isInterface()) {\n+        sb.append(\" * @interface\\n\");\n+      }\n+    }\n+\n+    if (fnNode !\u003d null \u0026\u0026 fnNode.getBooleanProp(Node.IS_DISPATCHER)) {\n+      sb.append(\" * @javadispatch\\n\");\n+    }\n+\n+    sb.append(\" */\\n\");\n+    return sb.toString();\n+  }\n+}\n",
      "operations": [
        {
          "type": "insert-node",
          "from": "",
          "to": "InfixExpression [1265,1373]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "InfixExpression [1265,1279]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "INFIX_EXPRESSION_OPERATOR: \u0026\u0026 [1289,1291]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "ParenthesizedExpression [1292,1373]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        }
      ]
    }
  ],
  "inducing_type": {
    "add_classes": {
      "qualified_names": [
        "gen/com/google/javascript/jscomp/FunctionInfo.java",
        "gen/com/google/javascript/jscomp/FunctionInformationMap.java",
        "gen/com/google/javascript/jscomp/Instrumentation.java",
        "gen/com/google/javascript/jscomp/InstrumentationTemplate.java",
        "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "src/com/google/javascript/jscomp/AbstractCompiler.java",
        "src/com/google/javascript/jscomp/AbstractMessageFormatter.java",
        "src/com/google/javascript/jscomp/AliasExternals.java",
        "src/com/google/javascript/jscomp/AliasKeywords.java",
        "src/com/google/javascript/jscomp/AliasStrings.java",
        "src/com/google/javascript/jscomp/AmbiguateProperties.java",
        "src/com/google/javascript/jscomp/AnalyzeNameReferences.java",
        "src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java",
        "src/com/google/javascript/jscomp/AnonymousFunctionNamingCallback.java",
        "src/com/google/javascript/jscomp/AnonymousFunctionNamingPolicy.java",
        "src/com/google/javascript/jscomp/AstChangeProxy.java",
        "src/com/google/javascript/jscomp/AstParallelizer.java",
        "src/com/google/javascript/jscomp/BasicErrorManager.java",
        "src/com/google/javascript/jscomp/ChainCalls.java",
        "src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java",
        "src/com/google/javascript/jscomp/CheckAccessControls.java",
        "src/com/google/javascript/jscomp/CheckAccidentalSemicolon.java",
        "src/com/google/javascript/jscomp/CheckGlobalNames.java",
        "src/com/google/javascript/jscomp/CheckGlobalThis.java",
        "src/com/google/javascript/jscomp/CheckLevel.java",
        "src/com/google/javascript/jscomp/CheckLevelLegacy.java",
        "src/com/google/javascript/jscomp/CheckMissingGetCssName.java",
        "src/com/google/javascript/jscomp/CheckMissingReturn.java",
        "src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java",
        "src/com/google/javascript/jscomp/CheckProvides.java",
        "src/com/google/javascript/jscomp/CheckRegExp.java",
        "src/com/google/javascript/jscomp/CheckRequiresForConstructors.java",
        "src/com/google/javascript/jscomp/CheckSideEffects.java",
        "src/com/google/javascript/jscomp/CheckUnreachableCode.java",
        "src/com/google/javascript/jscomp/ClosureCodingConvention.java",
        "src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java",
        "src/com/google/javascript/jscomp/CoalesceVariableNames.java",
        "src/com/google/javascript/jscomp/CodeChangeHandler.java",
        "src/com/google/javascript/jscomp/CodeConsumer.java",
        "src/com/google/javascript/jscomp/CodeGenerator.java",
        "src/com/google/javascript/jscomp/CodePrinter.java",
        "src/com/google/javascript/jscomp/CodingConvention.java",
        "src/com/google/javascript/jscomp/CollapseAnonymousFunctions.java",
        "src/com/google/javascript/jscomp/CollapseProperties.java",
        "src/com/google/javascript/jscomp/CollapseVariableDeclarations.java",
        "src/com/google/javascript/jscomp/CombinedCompilerPass.java",
        "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "src/com/google/javascript/jscomp/CompilationLevel.java",
        "src/com/google/javascript/jscomp/Compiler.java",
        "src/com/google/javascript/jscomp/CompilerInput.java",
        "src/com/google/javascript/jscomp/CompilerOptions.java",
        "src/com/google/javascript/jscomp/CompilerPass.java",
        "src/com/google/javascript/jscomp/ComposeWarningsGuard.java",
        "src/com/google/javascript/jscomp/ConcreteType.java",
        "src/com/google/javascript/jscomp/ConstCheck.java",
        "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "src/com/google/javascript/jscomp/ControlFlowGraph.java",
        "src/com/google/javascript/jscomp/ControlStructureCheck.java",
        "src/com/google/javascript/jscomp/ConvertToDottedProperties.java",
        "src/com/google/javascript/jscomp/CreateSyntheticBlocks.java",
        "src/com/google/javascript/jscomp/CrossModuleCodeMotion.java",
        "src/com/google/javascript/jscomp/CrossModuleMethodMotion.java",
        "src/com/google/javascript/jscomp/CssRenamingMap.java",
        "src/com/google/javascript/jscomp/CustomPassExecutionTime.java",
        "src/com/google/javascript/jscomp/DataFlowAnalysis.java",
        "src/com/google/javascript/jscomp/DeadAssignmentsElimination.java",
        "src/com/google/javascript/jscomp/DefaultCodingConvention.java",
        "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "src/com/google/javascript/jscomp/DefinitionProvider.java",
        "src/com/google/javascript/jscomp/DefinitionSite.java",
        "src/com/google/javascript/jscomp/DefinitionsRemover.java",
        "src/com/google/javascript/jscomp/Denormalize.java",
        "src/com/google/javascript/jscomp/DevirtualizePrototypeMethods.java",
        "src/com/google/javascript/jscomp/DiagnosticGroup.java",
        "src/com/google/javascript/jscomp/DiagnosticGroupWarningsGuard.java",
        "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "src/com/google/javascript/jscomp/DiagnosticType.java",
        "src/com/google/javascript/jscomp/DisambiguateProperties.java",
        "src/com/google/javascript/jscomp/DotFormatter.java",
        "src/com/google/javascript/jscomp/ErrorFormat.java",
        "src/com/google/javascript/jscomp/ErrorManager.java",
        "src/com/google/javascript/jscomp/ErrorPass.java",
        "src/com/google/javascript/jscomp/ExportTestFunctions.java",
        "src/com/google/javascript/jscomp/ExpressionDecomposer.java",
        "src/com/google/javascript/jscomp/ExternExportsPass.java",
        "src/com/google/javascript/jscomp/ExtractPrototypeMemberDeclarations.java",
        "src/com/google/javascript/jscomp/FindExportableNodes.java",
        "src/com/google/javascript/jscomp/FlowScope.java",
        "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "src/com/google/javascript/jscomp/FoldConstants.java",
        "src/com/google/javascript/jscomp/FunctionArgumentInjector.java",
        "src/com/google/javascript/jscomp/FunctionInjector.java",
        "src/com/google/javascript/jscomp/FunctionNames.java",
        "src/com/google/javascript/jscomp/FunctionRewriter.java",
        "src/com/google/javascript/jscomp/FunctionToBlockMutator.java",
        "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "src/com/google/javascript/jscomp/GatherRawExports.java",
        "src/com/google/javascript/jscomp/GatherSideEffectSubexpressionsCallback.java",
        "src/com/google/javascript/jscomp/GenerateExports.java",
        "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "src/com/google/javascript/jscomp/GoogleCodeRemoval.java",
        "src/com/google/javascript/jscomp/GoogleCodingConvention.java",
        "src/com/google/javascript/jscomp/GroupVariableDeclarations.java",
        "src/com/google/javascript/jscomp/IgnoreCajaProperties.java",
        "src/com/google/javascript/jscomp/InferJSDocInfo.java",
        "src/com/google/javascript/jscomp/InlineCostEstimator.java",
        "src/com/google/javascript/jscomp/InlineFunctions.java",
        "src/com/google/javascript/jscomp/InlineGetters.java",
        "src/com/google/javascript/jscomp/InlineVariables.java",
        "src/com/google/javascript/jscomp/InstrumentFunctions.java",
        "src/com/google/javascript/jscomp/InvocationsCallback.java",
        "src/com/google/javascript/jscomp/JSError.java",
        "src/com/google/javascript/jscomp/JSModule.java",
        "src/com/google/javascript/jscomp/JSModuleGraph.java",
        "src/com/google/javascript/jscomp/JSSourceFile.java",
        "src/com/google/javascript/jscomp/JsAst.java",
        "src/com/google/javascript/jscomp/LightweightMessageFormatter.java",
        "src/com/google/javascript/jscomp/LineNumberCheck.java",
        "src/com/google/javascript/jscomp/LinkedFlowScope.java",
        "src/com/google/javascript/jscomp/LiveVariablesAnalysis.java",
        "src/com/google/javascript/jscomp/LocaleUtil.java",
        "src/com/google/javascript/jscomp/LoggerErrorManager.java",
        "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "src/com/google/javascript/jscomp/MarkNoSideEffectCalls.java",
        "src/com/google/javascript/jscomp/MaybeReachingVariableUse.java",
        "src/com/google/javascript/jscomp/MemoizedScopeCreator.java",
        "src/com/google/javascript/jscomp/MessageFormatter.java",
        "src/com/google/javascript/jscomp/MethodCompilerPass.java",
        "src/com/google/javascript/jscomp/MinimizeExitPoints.java",
        "src/com/google/javascript/jscomp/MoveFunctionDeclarations.java",
        "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java",
        "src/com/google/javascript/jscomp/NameAnalyzer.java",
        "src/com/google/javascript/jscomp/NameAnonymousFunctions.java",
        "src/com/google/javascript/jscomp/NameAnonymousFunctionsMapped.java",
        "src/com/google/javascript/jscomp/NameGenerator.java",
        "src/com/google/javascript/jscomp/NameReferenceGraph.java",
        "src/com/google/javascript/jscomp/NameReferenceGraphConstruction.java",
        "src/com/google/javascript/jscomp/NodeIterators.java",
        "src/com/google/javascript/jscomp/NodeNameExtractor.java",
        "src/com/google/javascript/jscomp/NodeTraversal.java",
        "src/com/google/javascript/jscomp/NodeUtil.java",
        "src/com/google/javascript/jscomp/Normalize.java",
        "src/com/google/javascript/jscomp/ObjectPropertyStringPostprocess.java",
        "src/com/google/javascript/jscomp/ObjectPropertyStringPreprocess.java",
        "src/com/google/javascript/jscomp/OptimizeArgumentsArray.java",
        "src/com/google/javascript/jscomp/OptimizeParameters.java",
        "src/com/google/javascript/jscomp/ParallelCompilerPass.java",
        "src/com/google/javascript/jscomp/PassConfig.java",
        "src/com/google/javascript/jscomp/PassFactory.java",
        "src/com/google/javascript/jscomp/PerformanceTracker.java",
        "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "src/com/google/javascript/jscomp/Position.java",
        "src/com/google/javascript/jscomp/PotentialCheck.java",
        "src/com/google/javascript/jscomp/PotentialCheckManager.java",
        "src/com/google/javascript/jscomp/PrepareAst.java",
        "src/com/google/javascript/jscomp/PrintStreamErrorManager.java",
        "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "src/com/google/javascript/jscomp/ProcessDefines.java",
        "src/com/google/javascript/jscomp/PropertyRenamingPolicy.java",
        "src/com/google/javascript/jscomp/PureFunctionIdentifier.java",
        "src/com/google/javascript/jscomp/RecordFunctionInformation.java",
        "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java",
        "src/com/google/javascript/jscomp/Region.java",
        "src/com/google/javascript/jscomp/RemoveConstantExpressions.java",
        "src/com/google/javascript/jscomp/RemoveConstantExpressionsParallel.java",
        "src/com/google/javascript/jscomp/RemoveTryCatch.java",
        "src/com/google/javascript/jscomp/RemoveUnusedNames.java",
        "src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java",
        "src/com/google/javascript/jscomp/RemoveUnusedVars.java",
        "src/com/google/javascript/jscomp/RenameLabels.java",
        "src/com/google/javascript/jscomp/RenameProperties.java",
        "src/com/google/javascript/jscomp/RenamePrototypes.java",
        "src/com/google/javascript/jscomp/RenameVars.java",
        "src/com/google/javascript/jscomp/ReplaceCssNames.java",
        "src/com/google/javascript/jscomp/ReplaceIdGenerators.java",
        "src/com/google/javascript/jscomp/Result.java",
        "src/com/google/javascript/jscomp/ReverseAbstractInterpreter.java",
        "src/com/google/javascript/jscomp/RhinoErrorReporter.java",
        "src/com/google/javascript/jscomp/RuntimeTypeCheck.java",
        "src/com/google/javascript/jscomp/SanityCheck.java",
        "src/com/google/javascript/jscomp/Scope.java",
        "src/com/google/javascript/jscomp/ScopeCreator.java",
        "src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java",
        "src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java",
        "src/com/google/javascript/jscomp/SimpleDefinitionFinder.java",
        "src/com/google/javascript/jscomp/SimpleRegion.java",
        "src/com/google/javascript/jscomp/SourceAst.java",
        "src/com/google/javascript/jscomp/SourceExcerptProvider.java",
        "src/com/google/javascript/jscomp/SourceFile.java",
        "src/com/google/javascript/jscomp/SourceInformationAnnotator.java",
        "src/com/google/javascript/jscomp/SourceMap.java",
        "src/com/google/javascript/jscomp/StrictModeCheck.java",
        "src/com/google/javascript/jscomp/StrictWarningsGuard.java",
        "src/com/google/javascript/jscomp/Strings.java",
        "src/com/google/javascript/jscomp/StripCode.java",
        "src/com/google/javascript/jscomp/SuspiciousPropertiesCheck.java",
        "src/com/google/javascript/jscomp/SymbolTable.java",
        "src/com/google/javascript/jscomp/SyntacticScopeCreator.java",
        "src/com/google/javascript/jscomp/SyntheticAst.java",
        "src/com/google/javascript/jscomp/TightenTypes.java",
        "src/com/google/javascript/jscomp/Tracer.java",
        "src/com/google/javascript/jscomp/TypeCheck.java",
        "src/com/google/javascript/jscomp/TypeInference.java",
        "src/com/google/javascript/jscomp/TypeInferencePass.java",
        "src/com/google/javascript/jscomp/TypeValidator.java",
        "src/com/google/javascript/jscomp/TypedCodeGenerator.java",
        "src/com/google/javascript/jscomp/TypedScopeCreator.java",
        "src/com/google/javascript/jscomp/UnreachableCodeElimination.java",
        "src/com/google/javascript/jscomp/UseSite.java",
        "src/com/google/javascript/jscomp/VarCheck.java",
        "src/com/google/javascript/jscomp/VariableMap.java",
        "src/com/google/javascript/jscomp/VariableNameGenerator.java",
        "src/com/google/javascript/jscomp/VariableReferenceCheck.java",
        "src/com/google/javascript/jscomp/VariableRenamingPolicy.java",
        "src/com/google/javascript/jscomp/VariableShadowDeclarationCheck.java",
        "src/com/google/javascript/jscomp/VerboseMessageFormatter.java",
        "src/com/google/javascript/jscomp/WarningLevel.java",
        "src/com/google/javascript/jscomp/WarningsGuard.java",
        "src/com/google/javascript/jscomp/ant/AntErrorManager.java",
        "src/com/google/javascript/jscomp/ant/CompileTask.java",
        "src/com/google/javascript/jscomp/deps/DependencyInfo.java",
        "src/com/google/javascript/jscomp/deps/DepsFileParser.java",
        "src/com/google/javascript/jscomp/deps/JsFileLineParser.java",
        "src/com/google/javascript/jscomp/deps/JsFileParser.java",
        "src/com/google/javascript/jscomp/deps/SimpleDependencyInfo.java",
        "src/com/google/javascript/jscomp/graph/AdjacencyGraph.java",
        "src/com/google/javascript/jscomp/graph/Annotatable.java",
        "src/com/google/javascript/jscomp/graph/Annotation.java",
        "src/com/google/javascript/jscomp/graph/DiGraph.java",
        "src/com/google/javascript/jscomp/graph/FixedPointGraphTraversal.java",
        "src/com/google/javascript/jscomp/graph/Graph.java",
        "src/com/google/javascript/jscomp/graph/GraphColoring.java",
        "src/com/google/javascript/jscomp/graph/GraphNode.java",
        "src/com/google/javascript/jscomp/graph/GraphReachability.java",
        "src/com/google/javascript/jscomp/graph/GraphvizGraph.java",
        "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java",
        "src/com/google/javascript/jscomp/graph/StandardUnionFind.java",
        "src/com/google/javascript/jscomp/graph/SubGraph.java",
        "src/com/google/javascript/jscomp/graph/UndiGraph.java",
        "src/com/google/javascript/jscomp/graph/UnionFind.java",
        "src/com/google/javascript/jscomp/parsing/Annotation.java",
        "src/com/google/javascript/jscomp/parsing/Config.java",
        "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "src/com/google/javascript/jscomp/parsing/JsDocToken.java",
        "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "src/com/google/javascript/jscomp/parsing/NullErrorReporter.java",
        "src/com/google/javascript/jscomp/parsing/ParserRunner.java",
        "src/com/google/javascript/jscomp/parsing/TypeSafeDispatcher.java",
        "src/com/google/javascript/rhino/CompilerEnvirons.java",
        "src/com/google/javascript/rhino/Context.java",
        "src/com/google/javascript/rhino/DToA.java",
        "src/com/google/javascript/rhino/Decompiler.java",
        "src/com/google/javascript/rhino/EcmaError.java",
        "src/com/google/javascript/rhino/ErrorReporter.java",
        "src/com/google/javascript/rhino/EvaluatorException.java",
        "src/com/google/javascript/rhino/FunctionNode.java",
        "src/com/google/javascript/rhino/IRFactory.java",
        "src/com/google/javascript/rhino/JSDocInfo.java",
        "src/com/google/javascript/rhino/JSDocInfoBuilder.java",
        "src/com/google/javascript/rhino/JSTypeExpression.java",
        "src/com/google/javascript/rhino/JavaScriptException.java",
        "src/com/google/javascript/rhino/Kit.java",
        "src/com/google/javascript/rhino/Node.java",
        "src/com/google/javascript/rhino/ObjArray.java",
        "src/com/google/javascript/rhino/ObjToIntMap.java",
        "src/com/google/javascript/rhino/Parser.java",
        "src/com/google/javascript/rhino/RhinoException.java",
        "src/com/google/javascript/rhino/ScriptOrFnNode.java",
        "src/com/google/javascript/rhino/ScriptRuntime.java",
        "src/com/google/javascript/rhino/SimpleErrorReporter.java",
        "src/com/google/javascript/rhino/SourcePosition.java",
        "src/com/google/javascript/rhino/Token.java",
        "src/com/google/javascript/rhino/TokenStream.java",
        "src/com/google/javascript/rhino/UintMap.java",
        "src/com/google/javascript/rhino/UniqueTag.java",
        "src/com/google/javascript/rhino/jstype/AllType.java",
        "src/com/google/javascript/rhino/jstype/ArrowType.java",
        "src/com/google/javascript/rhino/jstype/BooleanLiteralSet.java",
        "src/com/google/javascript/rhino/jstype/BooleanType.java",
        "src/com/google/javascript/rhino/jstype/EnumElementType.java",
        "src/com/google/javascript/rhino/jstype/EnumType.java",
        "src/com/google/javascript/rhino/jstype/ErrorFunctionType.java",
        "src/com/google/javascript/rhino/jstype/FunctionParamBuilder.java",
        "src/com/google/javascript/rhino/jstype/FunctionPrototypeType.java",
        "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "src/com/google/javascript/rhino/jstype/IndexedType.java",
        "src/com/google/javascript/rhino/jstype/InstanceObjectType.java",
        "src/com/google/javascript/rhino/jstype/JSType.java",
        "src/com/google/javascript/rhino/jstype/JSTypeNative.java",
        "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "src/com/google/javascript/rhino/jstype/NamedType.java",
        "src/com/google/javascript/rhino/jstype/NoObjectType.java",
        "src/com/google/javascript/rhino/jstype/NoType.java",
        "src/com/google/javascript/rhino/jstype/NullType.java",
        "src/com/google/javascript/rhino/jstype/NumberType.java",
        "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "src/com/google/javascript/rhino/jstype/ParameterizedType.java",
        "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "src/com/google/javascript/rhino/jstype/ProxyObjectType.java",
        "src/com/google/javascript/rhino/jstype/RecordType.java",
        "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java",
        "src/com/google/javascript/rhino/jstype/SimpleSlot.java",
        "src/com/google/javascript/rhino/jstype/StaticScope.java",
        "src/com/google/javascript/rhino/jstype/StaticSlot.java",
        "src/com/google/javascript/rhino/jstype/StringType.java",
        "src/com/google/javascript/rhino/jstype/TemplateType.java",
        "src/com/google/javascript/rhino/jstype/TernaryValue.java",
        "src/com/google/javascript/rhino/jstype/UnionType.java",
        "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "src/com/google/javascript/rhino/jstype/UnknownType.java",
        "src/com/google/javascript/rhino/jstype/ValueType.java",
        "src/com/google/javascript/rhino/jstype/Visitor.java",
        "src/com/google/javascript/rhino/jstype/VoidType.java"
      ],
      "num": 315
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [
        "com.google.javascript.jscomp.Compiler:process:[CompilerPass p]:void",
        "com.google.javascript.jscomp.DefaultPassConfig:combineChecks:[AbstractCompiler compiler, List\u003cCallback\u003e callbacks]:CompilerPass",
        "com.google.javascript.jscomp.FlowSensitiveInlineVariables\\$Candidate:getDefinition:[Node n, Node parent]:void",
        "com.google.javascript.jscomp.AbstractCompiler:getErrorManager:[]:ErrorManager",
        "com.google.javascript.jscomp.DefaultPassConfig:getMainOptimizationLoop:[]:List\u003cPassFactory\u003e",
        "com.google.javascript.jscomp.AbstractCompiler:getReverseAbstractInterpreter:[]:ReverseAbstractInterpreter",
        "com.google.javascript.jscomp.Compiler:compile:[JSSourceFile[] externs, JSSourceFile[] inputs, CompilerOptions options]:Result",
        "com.google.javascript.jscomp.Compiler:hasRegExpGlobalReferences:[]:boolean",
        "com.google.javascript.jscomp.Compiler:rebuildInputsFromModules:[]:void",
        "com.google.javascript.jscomp.Compiler\\$CodeBuilder:getLength:[]:int",
        "com.google.javascript.jscomp.AbstractCompiler:newExternInput:[String name]:CompilerInput",
        "com.google.javascript.jscomp.Compiler:initInputsByNameMap:[]:void",
        "com.google.javascript.jscomp.Compiler:setHasRegExpGlobalReferences:[boolean references]:void",
        "com.google.javascript.jscomp.AbstractCompiler:reportCodeChange:[]:void",
        "com.google.javascript.jscomp.Compiler:compile:[JSSourceFile extern, JSModule[] modules, CompilerOptions options]:Result",
        "com.google.javascript.jscomp.DefaultPassConfig:runInSerial:[final CompilerPass... passes]:CompilerPass",
        "com.google.javascript.jscomp.Compiler:getUniqueNameIdSupplier:[]:Supplier\u003cString\u003e",
        "com.google.javascript.jscomp.Compiler:setState:[IntermediateState state]:void",
        "com.google.javascript.jscomp.Compiler:compile:[JSSourceFile extern, JSSourceFile[] input, CompilerOptions options]:Result",
        "com.google.javascript.jscomp.Compiler:parseInputs:[]:Node",
        "com.google.javascript.jscomp.AbstractCompiler:areNodesEqualForInlining:[Node n1, Node n2]:boolean",
        "com.google.javascript.jscomp.AbstractCompiler:report:[JSError error]:void",
        "com.google.javascript.jscomp.AbstractCompiler:toSource:[Node root]:String",
        "com.google.javascript.jscomp.Compiler:getDefaultErrorReporter:[]:ErrorReporter",
        "com.google.javascript.jscomp.Compiler:getState:[]:IntermediateState",
        "com.google.javascript.jscomp.Compiler:addChangeHandler:[CodeChangeHandler handler]:void",
        "com.google.javascript.jscomp.Compiler\\$CodeBuilder:getLineIndex:[]:int",
        "com.google.javascript.jscomp.DefaultPassConfig:getCodeRemovingPasses:[]:List\u003cPassFactory\u003e",
        "com.google.javascript.jscomp.Compiler:Compiler:[]:null",
        "com.google.javascript.jscomp.AbstractCompiler:prepareAst:[Node root]:void",
        "com.google.javascript.jscomp.AbstractCompiler:setCssRenamingMap:[CssRenamingMap map]:void",
        "com.google.javascript.jscomp.Compiler:recordFunctionInformation:[]:void",
        "com.google.javascript.jscomp.Compiler:parseTestCode:[String js]:Node",
        "com.google.javascript.jscomp.Compiler:setCssRenamingMap:[CssRenamingMap map]:void",
        "com.google.javascript.jscomp.Compiler:setUnnormalized:[]:void",
        "com.google.javascript.jscomp.Compiler:fillEmptyModules:[List\u003cJSModule\u003e modules]:void",
        "com.google.javascript.jscomp.Compiler:parseSyntheticCode:[String js]:Node",
        "com.google.javascript.jscomp.AbstractCompiler:getTypeValidator:[]:TypeValidator",
        "com.google.javascript.jscomp.AbstractCompiler:getInput:[String sourceName]:CompilerInput",
        "com.google.javascript.jscomp.Compiler:init:[JSSourceFile[] externs, JSSourceFile[] inputs, CompilerOptions options]:void",
        "com.google.javascript.jscomp.Compiler:compile:[JSSourceFile extern, JSSourceFile input, CompilerOptions options]:Result",
        "com.google.javascript.jscomp.Compiler:getTopScope:[]:Scope",
        "com.google.javascript.jscomp.DefaultPassConfig:runVariableRenaming:[AbstractCompiler compiler, VariableMap prevVariableMap, Node externs, Node root]:VariableMap",
        "com.google.javascript.jscomp.Compiler:initCompilerOptionsIfTesting:[]:void",
        "com.google.javascript.jscomp.AbstractCompiler:getModuleGraph:[]:JSModuleGraph",
        "com.google.javascript.jscomp.AbstractCompiler:addToDebugLog:[String message]:void",
        "com.google.javascript.jscomp.DiagnosticGroups:DiagnosticGroups:[]:null",
        "com.google.javascript.jscomp.DefaultPassConfig\\$GlobalTypeResolver:GlobalTypeResolver:[AbstractCompiler compiler]:null",
        "com.google.javascript.jscomp.Compiler:compileInternal:[]:void",
        "com.google.javascript.jscomp.FlowSensitiveInlineVariables\\$Candidate:Candidate:[String varName, Node defCfgNode, Node use, Node useCfgNode]:null",
        "com.google.javascript.jscomp.Compiler:parse:[]:void",
        "com.google.javascript.jscomp.FlowSensitiveInlineVariables\\$Candidate:getNumUseInUseCfgNode:[Node n, Node parant]:void",
        "com.google.javascript.jscomp.Compiler:getModuleGraph:[]:JSModuleGraph",
        "com.google.javascript.jscomp.Compiler:hasHaltingErrors:[]:boolean",
        "com.google.javascript.jscomp.Compiler:initModules:[List\u003cJSSourceFile\u003e externs, List\u003cJSModule\u003e modules, CompilerOptions options]:void",
        "com.google.javascript.jscomp.Compiler:runSanityCheck:[]:void",
        "com.google.javascript.jscomp.Compiler:hasErrors:[]:boolean",
        "com.google.javascript.jscomp.Compiler:disableThreads:[]:void",
        "com.google.javascript.jscomp.DefaultPassConfig\\$PureFunctionMarker:PureFunctionMarker:[AbstractCompiler compiler, String reportPath, boolean useNameReferenceGraph]:null",
        "com.google.javascript.jscomp.DefaultPassConfig:getIntermediateState:[]:State",
        "com.google.javascript.jscomp.DefaultPassConfig:runInSerial:[final Collection\u003cCompilerPass\u003e passes]:CompilerPass",
        "com.google.javascript.jscomp.FlowSensitiveInlineVariables\\$GatherCandiates:visit:[NodeTraversal t, Node n, Node parent]:void",
        "com.google.javascript.jscomp.Compiler:getPropertyMap:[]:VariableMap",
        "com.google.javascript.jscomp.Compiler:getAstDotGraph:[]:String",
        "com.google.javascript.jscomp.Compiler:report:[JSError error]:void",
        "com.google.javascript.jscomp.DefaultPassConfig:getOptimizations:[]:List\u003cPassFactory\u003e",
        "com.google.javascript.jscomp.Compiler:getErrors:[]:JSError[]",
        "com.google.javascript.jscomp.Compiler:newTracer:[String passName]:Tracer",
        "com.google.javascript.jscomp.Compiler:addIncrementalSourceAst:[JsAst ast]:void",
        "com.google.javascript.jscomp.DefaultPassConfig\\$GlobalTypeResolver:process:[Node externs, Node root]:void",
        "com.google.javascript.jscomp.DefaultPassConfig:getChecks:[]:List\u003cPassFactory\u003e",
        "com.google.javascript.jscomp.DefaultPassConfig:DefaultPassConfig:[CompilerOptions options]:null",
        "com.google.javascript.jscomp.FlowSensitiveInlineVariables:checkRightOf:[Node n, Node expressionRoot, Predicate\u003cNode\u003e predicate]:boolean",
        "com.google.javascript.jscomp.Compiler:prepareAst:[Node root]:void",
        "com.google.javascript.jscomp.Compiler:toSource:[final CodeBuilder cb, final int inputSeqNum, final Node root]:void",
        "com.google.javascript.jscomp.AbstractCompiler:isTypeCheckingEnabled:[]:boolean",
        "com.google.javascript.jscomp.Compiler:toSource:[Node n]:String",
        "com.google.javascript.jscomp.Compiler:isIdeMode:[]:boolean",
        "com.google.javascript.jscomp.Compiler:getInput:[String name]:CompilerInput",
        "com.google.javascript.jscomp.Compiler:getErrorManager:[]:ErrorManager",
        "com.google.javascript.jscomp.Compiler\\$CodeBuilder:toString:[]:String",
        "com.google.javascript.jscomp.AbstractCompiler:getCssRenamingMap:[]:CssRenamingMap",
        "com.google.javascript.jscomp.Compiler:getReverseAbstractInterpreter:[]:ReverseAbstractInterpreter",
        "com.google.javascript.jscomp.TypedCodeGenerator:TypedCodeGenerator:[CodeConsumer consumer, Charset outputCharset]:null",
        "com.google.javascript.jscomp.TypedCodeGenerator:getFunctionAnnotation:[Node node]:String",
        "com.google.javascript.jscomp.Compiler:addToDebugLog:[String str]:void",
        "com.google.javascript.jscomp.Compiler:Compiler:[PrintStream stream]:null",
        "com.google.javascript.jscomp.Compiler:initOptions:[CompilerOptions options]:void",
        "com.google.javascript.jscomp.Compiler:externExports:[]:void",
        "com.google.javascript.jscomp.AbstractCompiler:removeChangeHandler:[CodeChangeHandler handler]:void",
        "com.google.javascript.jscomp.AbstractCompiler:getUniqueNameIdSupplier:[]:Supplier\u003cString\u003e",
        "com.google.javascript.jscomp.Compiler:acquireSymbolTable:[]:SymbolTable",
        "com.google.javascript.jscomp.DefaultPassConfig:assertAllOneTimePasses:[List\u003cPassFactory\u003e passes]:void",
        "com.google.javascript.jscomp.DiagnosticGroups:forName:[String name]:DiagnosticGroup",
        "com.google.javascript.jscomp.Compiler:setNormalized:[]:void",
        "com.google.javascript.jscomp.Compiler:getResult:[]:Result",
        "com.google.javascript.jscomp.Compiler:compile:[JSSourceFile[] externs, JSModule[] modules, CompilerOptions options]:Result",
        "com.google.javascript.jscomp.Compiler:computeCFG:[]:ControlFlowGraph\u003cNode\u003e",
        "com.google.javascript.jscomp.Compiler:compileModules:[List\u003cJSSourceFile\u003e externs, List\u003cJSModule\u003e modules, CompilerOptions options]:Result",
        "com.google.javascript.jscomp.AbstractCompiler:getNodeForCodeInsertion:[JSModule module]:Node",
        "com.google.javascript.jscomp.AbstractCompiler:parseSyntheticCode:[String code]:Node",
        "com.google.javascript.jscomp.Compiler:getSourceLine:[String sourceName, int lineNumber]:String",
        "com.google.javascript.jscomp.Compiler:newExternInput:[String name]:CompilerInput",
        "com.google.javascript.jscomp.AbstractCompiler:acquireSymbolTable:[]:SymbolTable",
        "com.google.javascript.jscomp.Compiler:setErrorManager:[ErrorManager errorManager]:void",
        "com.google.javascript.jscomp.Compiler:removeTryCatchFinally:[]:void",
        "com.google.javascript.jscomp.Compiler:getSourceRegion:[String sourceName, int lineNumber]:Region",
        "com.google.javascript.jscomp.Compiler:getErrorCount:[]:int",
        "com.google.javascript.jscomp.Compiler:reportCodeChange:[]:void",
        "com.google.javascript.jscomp.Compiler:runCustomPasses:[CustomPassExecutionTime executionTime]:void",
        "com.google.javascript.jscomp.Compiler:areNodesEqualForInlining:[Node n1, Node n2]:boolean",
        "com.google.javascript.jscomp.Compiler:getSourceFileByName:[String sourceName]:SourceFile",
        "com.google.javascript.jscomp.Compiler:Compiler:[ErrorManager errorManager]:null",
        "com.google.javascript.jscomp.DefaultPassConfig:runPropertyRenaming:[AbstractCompiler compiler, VariableMap prevPropertyMap, Node externs, Node root]:VariableMap",
        "com.google.javascript.jscomp.AbstractCompiler:setHasRegExpGlobalReferences:[boolean references]:void",
        "com.google.javascript.jscomp.Compiler:getWarningCount:[]:int",
        "com.google.javascript.jscomp.FlowSensitiveInlineVariables:process:[Node externs, Node root]:void",
        "com.google.javascript.jscomp.DefaultPassConfig:setIntermediateState:[State state]:void",
        "com.google.javascript.jscomp.Compiler:parse:[JSSourceFile file]:Node",
        "com.google.javascript.jscomp.Compiler:endPass:[]:void",
        "com.google.javascript.jscomp.Compiler:resetUniqueNameId:[]:void",
        "com.google.javascript.jscomp.DefaultPassConfig:getCustomPasses:[final CustomPassExecutionTime executionTime]:PassFactory",
        "com.google.javascript.jscomp.Compiler\\$CodeBuilder:endsWith:[String suffix]:boolean",
        "com.google.javascript.jscomp.Compiler:stripCode:[Set\u003cString\u003e stripTypes, Set\u003cString\u003e stripNameSuffixes, Set\u003cString\u003e stripTypePrefixes, Set\u003cString\u003e stripNamePrefixes]:void",
        "com.google.javascript.jscomp.Compiler:getParserConfig:[]:Config",
        "com.google.javascript.jscomp.Compiler:startPass:[String passName]:void",
        "com.google.javascript.jscomp.Compiler\\$CodeBuilder:getColumnIndex:[]:int",
        "com.google.javascript.jscomp.DefaultPassConfig\\$PureFunctionMarker:process:[Node externs, Node root]:void",
        "com.google.javascript.jscomp.Compiler:createMessageFormatter:[]:MessageFormatter",
        "com.google.javascript.jscomp.DiagnosticGroups:registerGroup:[String name, DiagnosticGroup group]:DiagnosticGroup",
        "com.google.javascript.jscomp.Compiler:maybeSanityCheck:[]:void",
        "com.google.javascript.jscomp.DefaultPassConfig:isInliningForbidden:[]:boolean",
        "com.google.javascript.jscomp.Compiler:getCodingConvention:[]:CodingConvention",
        "com.google.javascript.jscomp.Compiler:toSourceArray:[final JSModule module]:String[]",
        "com.google.javascript.jscomp.Compiler:getRoot:[]:Node",
        "com.google.javascript.jscomp.AbstractCompiler:parseSyntheticCode:[String filename, String code]:Node",
        "com.google.javascript.jscomp.Compiler:getSourceMap:[]:SourceMap",
        "com.google.javascript.jscomp.Compiler:stopTracer:[Tracer t, String passName]:void",
        "com.google.javascript.jscomp.Compiler:setPassConfig:[PassConfig passes]:void",
        "com.google.javascript.jscomp.Compiler:toSource:[]:String",
        "com.google.javascript.jscomp.AbstractCompiler:hasHaltingErrors:[]:boolean",
        "com.google.javascript.jscomp.Compiler:normalize:[]:void",
        "com.google.javascript.jscomp.Compiler:isTypeCheckingEnabled:[]:boolean",
        "com.google.javascript.jscomp.Compiler\\$CodeBuilder:append:[String str]:CodeBuilder",
        "com.google.javascript.jscomp.Compiler:getOptions:[]:CompilerOptions",
        "com.google.javascript.jscomp.Compiler:isInliningForbidden:[]:boolean",
        "com.google.javascript.jscomp.Compiler:getVariableMap:[]:VariableMap",
        "com.google.javascript.jscomp.FlowSensitiveInlineVariables:visit:[NodeTraversal t, Node n, Node parent]:void",
        "com.google.javascript.jscomp.Compiler:isNormalized:[]:boolean",
        "com.google.javascript.jscomp.Compiler:getAllInputsFromModules:[]:List\u003cCompilerInput\u003e",
        "com.google.javascript.jscomp.Compiler:getTypeRegistry:[]:JSTypeRegistry",
        "com.google.javascript.jscomp.Compiler:processDefines:[]:void",
        "com.google.javascript.jscomp.Compiler:compile:[List\u003cJSSourceFile\u003e externs, List\u003cJSSourceFile\u003e inputs, CompilerOptions options]:Result",
        "com.google.javascript.jscomp.Compiler:checkFirstModule:[List\u003cJSModule\u003e modules]:void",
        "com.google.javascript.jscomp.DefaultPassConfig:createEmptyPass:[String name]:PassFactory",
        "com.google.javascript.jscomp.FlowSensitiveInlineVariables:enterScope:[NodeTraversal t]:void",
        "com.google.javascript.jscomp.AbstractCompiler:isIdeMode:[]:boolean",
        "com.google.javascript.jscomp.Compiler:toSourceArray:[]:String[]",
        "com.google.javascript.jscomp.AbstractCompiler:setNormalized:[]:void",
        "com.google.javascript.jscomp.Compiler:init:[List\u003cJSSourceFile\u003e externs, List\u003cJSSourceFile\u003e inputs, CompilerOptions options]:void",
        "com.google.javascript.jscomp.FlowSensitiveInlineVariables:exitScope:[NodeTraversal t]:void",
        "com.google.javascript.jscomp.FlowSensitiveInlineVariables\\$Candidate:canInline:[]:boolean",
        "com.google.javascript.jscomp.Compiler:removeChangeHandler:[CodeChangeHandler handler]:void",
        "com.google.javascript.jscomp.AbstractCompiler:getTopScope:[]:Scope",
        "com.google.javascript.jscomp.Compiler:precheck:[]:boolean",
        "com.google.javascript.jscomp.DiagnosticGroups:setWarningLevels:[CompilerOptions options, List\u003cString\u003e diagnosticGroups, CheckLevel level]:void",
        "com.google.javascript.jscomp.AbstractCompiler:getTypeRegistry:[]:JSTypeRegistry",
        "com.google.javascript.jscomp.Compiler:check:[]:void",
        "com.google.javascript.jscomp.Compiler:getCssRenamingMap:[]:CssRenamingMap",
        "com.google.javascript.jscomp.Compiler:getNodeForCodeInsertion:[JSModule module]:Node",
        "com.google.javascript.jscomp.FlowSensitiveInlineVariables\\$Candidate:inlineVariable:[]:void",
        "com.google.javascript.jscomp.Compiler:makeCompilerInput:[List\u003cJSSourceFile\u003e files, boolean isExtern]:List\u003cCompilerInput\u003e",
        "com.google.javascript.jscomp.Compiler:createPassConfigInternal:[]:PassConfig",
        "com.google.javascript.jscomp.Compiler:getPassConfig:[]:PassConfig",
        "com.google.javascript.jscomp.FlowSensitiveInlineVariables:checkLeftOf:[Node n, Node expressionRoot, Predicate\u003cNode\u003e predicate]:boolean",
        "com.google.javascript.jscomp.Compiler:getTypeValidator:[]:TypeValidator",
        "com.google.javascript.jscomp.Compiler\\$IntermediateState:IntermediateState:[]:null",
        "com.google.javascript.jscomp.TypedCodeGenerator:getTypeAnnotation:[Node node]:String",
        "com.google.javascript.jscomp.AbstractCompiler:hasRegExpGlobalReferences:[]:boolean",
        "com.google.javascript.jscomp.Compiler:optimize:[]:void",
        "com.google.javascript.jscomp.Compiler:getMessages:[]:JSError[]",
        "com.google.javascript.jscomp.Compiler\\$CodeBuilder:reset:[]:void",
        "com.google.javascript.jscomp.Compiler:init:[JSSourceFile[] externs, JSModule[] modules, CompilerOptions options]:void",
        "com.google.javascript.jscomp.AbstractCompiler:addChangeHandler:[CodeChangeHandler handler]:void",
        "com.google.javascript.jscomp.Compiler:parseSyntheticCode:[String fileName, String js]:Node",
        "com.google.javascript.jscomp.Compiler:getFunctionalInformationMap:[]:FunctionInformationMap",
        "com.google.javascript.jscomp.AbstractCompiler:throwInternalError:[String msg, Exception cause]:void",
        "com.google.javascript.jscomp.Compiler:runInCompilerThread:[final Callable\u003cT\u003e callable]:T",
        "com.google.javascript.jscomp.DefaultPassConfig:getAdditionalReplacements:[CompilerOptions options]:Map\u003cString,Node\u003e",
        "com.google.javascript.jscomp.DefaultPassConfig:assertAllLoopablePasses:[List\u003cPassFactory\u003e passes]:void",
        "com.google.javascript.jscomp.Compiler:setLoggingLevel:[Level level]:void",
        "com.google.javascript.jscomp.AbstractCompiler:getDefaultErrorReporter:[]:ErrorReporter",
        "com.google.javascript.jscomp.Compiler:getScopeCreator:[]:ScopeCreator",
        "com.google.javascript.jscomp.Compiler:toSource:[final JSModule module]:String",
        "com.google.javascript.jscomp.FlowSensitiveInlineVariables:FlowSensitiveInlineVariables:[AbstractCompiler compiler]:null",
        "com.google.javascript.jscomp.Compiler:throwInternalError:[String message, Exception cause]:void",
        "com.google.javascript.jscomp.AbstractCompiler:getCodingConvention:[]:CodingConvention",
        "com.google.javascript.jscomp.Compiler:nextUniqueNameId:[]:int",
        "com.google.javascript.jscomp.Compiler:getWarnings:[]:JSError[]",
        "com.google.javascript.jscomp.AbstractCompiler:getScopeCreator:[]:ScopeCreator",
        "com.google.javascript.jscomp.Compiler:compile:[]:Result",
        "com.google.javascript.jscomp.TypedCodeGenerator:add:[Node n, Context context]:void",
        "com.google.javascript.jscomp.AbstractCompiler:isNormalized:[]:boolean",
        "com.google.javascript.jscomp.AbstractCompiler:setUnnormalized:[]:void",
        "com.google.javascript.jscomp.AbstractCompiler:getParserConfig:[]:Config",
        "com.google.javascript.jscomp.Compiler:initBasedOnOptions:[]:void"
      ],
      "num": 206
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  },
  "trigger_tests": [
    {
      "test_class": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest",
      "test_function": "testInlineAcrossSideEffect1",
      "assertion_line": "329",
      "exception": "junit.framework.AssertionFailedError",
      "message": "Expected: function _func(){var y;var x\u003dnoSFX(y);print(x)}\nResult: function _func(){var y;var x;print(noSFX(y))}"
    },
    {
      "test_class": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest",
      "test_function": "testCanInlineAcrossNoSideEffect",
      "assertion_line": "443",
      "exception": "junit.framework.AssertionFailedError",
      "message": "Expected: function _func(){var y;var x\u003dnoSFX(y),z\u003dnoSFX();noSFX();noSFX(),print(x)}\nResult: function _func(){var y;var x,z\u003dnoSFX();noSFX();noSFX(),print(noSFX(y))}"
    },
    {
      "test_class": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest",
      "test_function": "testIssue698",
      "assertion_line": "443",
      "exception": "junit.framework.AssertionFailedError",
      "message": "Expected: function _func(){var x;unknown.length\u003c2\u0026\u0026(unknown\u003d\"0\"+unknown);x\u003d\"\"+unknown;unknown.length\u003c3\u0026\u0026(unknown\u003d\"0\"+unknown);x\u003dx+unknown;return x}\nResult: function _func(){var x;unknown.length\u003c2\u0026\u0026(unknown\u003d\"0\"+unknown);unknown.length\u003c3\u0026\u0026(unknown\u003d\"0\"+unknown);return\"\"+unknown+unknown}"
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "com.google.javascript.jscomp.FlowSensitiveInlineVariables:process:[Node externs, Node root]:void",
            "com.google.javascript.jscomp.FlowSensitiveInlineVariables\\$GatherCandiates:visit:[NodeTraversal t, Node n, Node parent]:void"
          ],
          "num": 2
        },
        {
          "qualified_names": [
            "com.google.javascript.jscomp.FlowSensitiveInlineVariables\\$GatherCandiates:visit:[NodeTraversal t, Node n, Node parent]:void",
            "com.google.javascript.jscomp.FlowSensitiveInlineVariables:process:[Node externs, Node root]:void"
          ],
          "num": 2
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "157",
            "207"
          ],
          "num": 2
        },
        {
          "qualified_names": [
            "157",
            "208",
            "209"
          ],
          "num": 3
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\nindex d31bdcd..3f39c07 100644\n--- a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n+++ b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n@@ -154,7 +154,7 @@\n \n   @Override\n   public void process(Node externs, Node root) {\n-    (new NodeTraversal(compiler, this)).traverse(root);\n+    (new NodeTraversal(compiler, this)).traverseRoots(externs, root);\n   }\n \n   @Override\n@@ -205,6 +205,8 @@\n             }\n \n             Node defNode \u003d reachingDef.getDef(name, cfgNode);\n+            // TODO(nicksantos): We need to add some notion of @const outer\n+            // scope vars. We can inline those just fine.\n             if (defNode !\u003d null \u0026\u0026\n                 !reachingDef.dependsOnOuterScopeVars(name, cfgNode)) {\n               candidates.add(new Candidate(name, defNode, n, cfgNode));\n",
      "operations": [
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: externs [5608,5615]"
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java",
        "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "com.google.javascript.jscomp.MustBeReachingVariableDef:dependsOnOuterScopeVars:[String name, Node useNode]:boolean",
            "com.google.javascript.jscomp.MustBeReachingVariableDef:computeDependence:[final Definition def, Node rValue]:void"
          ],
          "num": 2
        },
        {
          "qualified_names": [
            "com.google.javascript.jscomp.MustBeReachingVariableDef:dependsOnOuterScopeVars:[String name, Node useNode]:boolean",
            "com.google.javascript.jscomp.MustBeReachingVariableDef:computeDependence:[final Definition def, Node rValue]:void"
          ],
          "num": 2
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "70",
            "395",
            "396",
            "427"
          ],
          "num": 4
        },
        {
          "qualified_names": [
            "71",
            "72",
            "397",
            "398",
            "399",
            "400",
            "401",
            "402",
            "403",
            "435",
            "436",
            "437",
            "438"
          ],
          "num": 13
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java b/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\nindex cc7dd73..589f673 100644\n--- a/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\n+++ b/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\n@@ -68,6 +68,8 @@\n   private static class Definition {\n     final Node node;\n     final Set\u003cVar\u003e depends \u003d Sets.newHashSet();\n+    private boolean unknownDependencies \u003d false;\n+\n     Definition(Node node) {\n       this.node \u003d node;\n     }\n@@ -392,8 +394,13 @@\n         new AbstractCfgNodeTraversalCallback() {\n       @Override\n       public void visit(NodeTraversal t, Node n, Node parent) {\n-        if (n.isName() \u0026\u0026 jsScope.isDeclared(n.getString(), true)) {\n-          def.depends.add(jsScope.getVar(n.getString()));\n+        if (n.isName()) {\n+          Var dep \u003d jsScope.getVar(n.getString());\n+          if (dep \u003d\u003d null) {\n+            def.unknownDependencies \u003d true;\n+          } else {\n+            def.depends.add(dep);\n+          }\n         }\n       }\n     });\n@@ -425,6 +432,10 @@\n     GraphNode\u003cNode, Branch\u003e n \u003d getCfg().getNode(useNode);\n     FlowState\u003cMustDef\u003e state \u003d n.getAnnotation();\n     Definition def \u003d state.getIn().reachingDef.get(jsScope.getVar(name));\n+    if (def.unknownDependencies) {\n+      return true;\n+    }\n+\n     for (Var s : def.depends) {\n       if (s.scope !\u003d jsScope) {\n         return true;\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldDeclaration [2589,2633]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [14124,14179]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [12843,12883]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "IfStatement [12894,13021]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "InfixExpression [12898,12909]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Block [12911,12968]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Block [12974,13021]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: dep [13004,13007]"
        },
        {
          "type": "delete-node",
          "from": "INFIX_EXPRESSION_OPERATOR: \u0026\u0026 [12780,12782]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodInvocation [12783,12822]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "InfixExpression [12769,12822]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodInvocation [12852,12881]",
          "to": ""
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  },
  "patch_changed_mths": {
    "qualified_names": [
      "com.google.javascript.jscomp.FlowSensitiveInlineVariables:process(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V",
      "com.google.javascript.jscomp.FlowSensitiveInlineVariables\\$GatherCandiates:visit(Lcom/google/javascript/jscomp/NodeTraversal;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V",
      "com.google.javascript.jscomp.MustBeReachingVariableDef:dependsOnOuterScopeVars(Ljava/lang/String;Lcom/google/javascript/rhino/Node;)Z:regression"
    ],
    "num": 3
  }
}