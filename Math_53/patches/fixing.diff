diff --git a/src/main/java/org/apache/commons/math/complex/Complex.java b/src/main/java/org/apache/commons/math/complex/Complex.java
index e0a8e97..ab58c78 100644
--- a/src/main/java/org/apache/commons/math/complex/Complex.java
+++ b/src/main/java/org/apache/commons/math/complex/Complex.java
@@ -150,6 +150,9 @@
     public Complex add(Complex rhs)
         throws NullArgumentException {
         MathUtils.checkNotNull(rhs);
+        if (isNaN || rhs.isNaN) {
+            return NaN;
+        }
         return createComplex(real + rhs.getReal(),
             imaginary + rhs.getImaginary());
     }
diff --git a/src/site/xdoc/changes.xml b/src/site/xdoc/changes.xml
index 34c6369..b2299ad 100644
--- a/src/site/xdoc/changes.xml
+++ b/src/site/xdoc/changes.xml
@@ -52,6 +52,11 @@
     If the output is not quite correct, check for invisible trailing spaces!
      -->
     <release version="3.0" date="TBD" description="TBD">
+      <action dev="psteitz" type="fix" issue="MATH-618" due-to="Arne Plose">
+        Complex add javadoc says that if either addend has NaN parts, the result
+        should be Complex.NaN.  Prior to the fix for this issue, NaNs were propagated
+        only in real and imaginary parts individually.
+      </action>
       <action dev="erans" type="add" issue="MATH-581" due-to="SÃ©bastien Brisard">
         Framework for iterative linear solvers.
       </action>
diff --git a/src/test/java/org/apache/commons/math/complex/ComplexTest.java b/src/test/java/org/apache/commons/math/complex/ComplexTest.java
index 3eb6d3e..97b473d 100644
--- a/src/test/java/org/apache/commons/math/complex/ComplexTest.java
+++ b/src/test/java/org/apache/commons/math/complex/ComplexTest.java
@@ -113,7 +113,7 @@
         Assert.assertTrue(z.isNaN());
         z = new Complex(1, nan);
         Complex w = x.add(z);
-        Assert.assertEquals(w.getReal(), 4.0, 0);
+        Assert.assertTrue(Double.isNaN(w.getReal()));
         Assert.assertTrue(Double.isNaN(w.getImaginary()));
     }
 
