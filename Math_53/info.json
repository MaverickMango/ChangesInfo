{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "data/changesInfo/",
  "timeoutSecond": 300,
  "proj": "Math",
  "id": "53",
  "workingDir": "../bugs/Math_53_buggy",
  "inducingCommit": "6ef3b2932f4ca9219e41784bb0cd229dcabcdb11",
  "originalCommit": "bb22a04fd7e1ee5af3c8ec715cc4c1952d4bbeb7",
  "bug_name": "Math_53",
  "derive": "defects4j",
  "original_fixing_commit": "7707b0bb80be05bbf6533a36bb0c646cbfd1026d",
  "buildFiles_changed": false,
  "inducing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/math/ConvergenceException.java",
        "src/java/org/apache/commons/math/ConvergenceException.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [],
          "num": 0
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "29"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "29"
          ],
          "num": 1
        }
      ],
      "diff": "diff --git a/src/java/org/apache/commons/math/ConvergenceException.java b/src/java/org/apache/commons/math/ConvergenceException.java\nindex 2933e59..a352db0 100644\n--- a/src/java/org/apache/commons/math/ConvergenceException.java\n+++ b/src/java/org/apache/commons/math/ConvergenceException.java\n@@ -26,7 +26,7 @@\n public class ConvergenceException extends MathException implements Serializable{\n     \n     /** Serializable version identifier */\n-    static final long serialVersionUID \u003d -3657394299929217890L;\n+    private static final long serialVersionUID \u003d -3657394299929217890L;\n     \n     /**\n      * Default constructor.\n",
      "operations": [
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: private [995,1002]"
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/math/FunctionEvaluationException.java",
        "src/java/org/apache/commons/math/FunctionEvaluationException.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [],
          "num": 0
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "29"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "29"
          ],
          "num": 1
        }
      ],
      "diff": "diff --git a/src/java/org/apache/commons/math/FunctionEvaluationException.java b/src/java/org/apache/commons/math/FunctionEvaluationException.java\nindex 0510859..c20d0ba 100644\n--- a/src/java/org/apache/commons/math/FunctionEvaluationException.java\n+++ b/src/java/org/apache/commons/math/FunctionEvaluationException.java\n@@ -26,7 +26,7 @@\n public class FunctionEvaluationException extends MathException  {\n     \n     /** Serializable version identifier */\n-    static final long serialVersionUID \u003d -317289374378977972L;\n+    private static final long serialVersionUID \u003d -317289374378977972L;\n     \n     /** Argument causing function evaluation failure */\n     private double argument \u003d Double.NaN;\n",
      "operations": [
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: private [999,1006]"
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/math/MathConfigurationException.java",
        "src/java/org/apache/commons/math/MathConfigurationException.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [],
          "num": 0
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "27"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "27"
          ],
          "num": 1
        }
      ],
      "diff": "diff --git a/src/java/org/apache/commons/math/MathConfigurationException.java b/src/java/org/apache/commons/math/MathConfigurationException.java\nindex 53c1fc2..dd63dee 100644\n--- a/src/java/org/apache/commons/math/MathConfigurationException.java\n+++ b/src/java/org/apache/commons/math/MathConfigurationException.java\n@@ -24,7 +24,7 @@\n public class MathConfigurationException extends MathException implements Serializable {\n     \n     /** Serializable version identifier */\n-    static final long serialVersionUID \u003d -7958299004965931723L;\n+    private static final long serialVersionUID \u003d -7958299004965931723L;\n \n     /**\n      * Default constructor.\n",
      "operations": [
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: private [931,938]"
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/math/MathException.java",
        "src/java/org/apache/commons/math/MathException.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [],
          "num": 0
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "34"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "34"
          ],
          "num": 1
        }
      ],
      "diff": "diff --git a/src/java/org/apache/commons/math/MathException.java b/src/java/org/apache/commons/math/MathException.java\nindex 1c24528..07a6f94 100644\n--- a/src/java/org/apache/commons/math/MathException.java\n+++ b/src/java/org/apache/commons/math/MathException.java\n@@ -31,7 +31,7 @@\n public class MathException extends Exception {\n     \n     /** Serializable version identifier */\n-    static final long serialVersionUID \u003d -8594613561393443827L;\n+    private static final long serialVersionUID \u003d -8594613561393443827L;\n     \n     /**\n      * Does JDK support nested exceptions?\n",
      "operations": [
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: private [1048,1055]"
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/math/analysis/BisectionSolver.java",
        "src/java/org/apache/commons/math/analysis/BisectionSolver.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [],
          "num": 0
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "32"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "32"
          ],
          "num": 1
        }
      ],
      "diff": "diff --git a/src/java/org/apache/commons/math/analysis/BisectionSolver.java b/src/java/org/apache/commons/math/analysis/BisectionSolver.java\nindex 7ff28c3..dad06bd 100644\n--- a/src/java/org/apache/commons/math/analysis/BisectionSolver.java\n+++ b/src/java/org/apache/commons/math/analysis/BisectionSolver.java\n@@ -29,7 +29,7 @@\n public class BisectionSolver extends UnivariateRealSolverImpl {\n     \n     /** Serializable version identifier */\n-    static final long serialVersionUID \u003d 7137520585963699578L;\n+    private static final long serialVersionUID \u003d 7137520585963699578L;\n     \n     /**\n      * Construct a solver for the given function.\n",
      "operations": [
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: private [1157,1164]"
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/math/analysis/BrentSolver.java",
        "src/java/org/apache/commons/math/analysis/BrentSolver.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [],
          "num": 0
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "33"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "33"
          ],
          "num": 1
        }
      ],
      "diff": "diff --git a/src/java/org/apache/commons/math/analysis/BrentSolver.java b/src/java/org/apache/commons/math/analysis/BrentSolver.java\nindex 2becdbf..7e67370 100644\n--- a/src/java/org/apache/commons/math/analysis/BrentSolver.java\n+++ b/src/java/org/apache/commons/math/analysis/BrentSolver.java\n@@ -30,7 +30,7 @@\n public class BrentSolver extends UnivariateRealSolverImpl {\n     \n     /** Serializable version identifier */\n-    static final long serialVersionUID \u003d 3350616277306882875L;\n+    private static final long serialVersionUID \u003d 3350616277306882875L;\n \n     /**\n      * Construct a solver for the given function.\n",
      "operations": [
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: private [1154,1161]"
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/math/analysis/NewtonSolver.java",
        "src/java/org/apache/commons/math/analysis/NewtonSolver.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [
            "readObject"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "18",
            "33",
            "36",
            "100"
          ],
          "num": 4
        },
        {
          "qualified_names": [
            "19",
            "34",
            "37",
            "101",
            "102",
            "103",
            "104",
            "105",
            "106",
            "107",
            "108",
            "109",
            "110",
            "111",
            "112",
            "113"
          ],
          "num": 16
        }
      ],
      "diff": "diff --git a/src/java/org/apache/commons/math/analysis/NewtonSolver.java b/src/java/org/apache/commons/math/analysis/NewtonSolver.java\nindex 619417e..309f9e9 100644\n--- a/src/java/org/apache/commons/math/analysis/NewtonSolver.java\n+++ b/src/java/org/apache/commons/math/analysis/NewtonSolver.java\n@@ -16,6 +16,7 @@\n \n package org.apache.commons.math.analysis;\n \n+import java.io.IOException;\n import org.apache.commons.math.ConvergenceException;\n import org.apache.commons.math.FunctionEvaluationException; \n \n@@ -30,10 +31,10 @@\n public class NewtonSolver extends UnivariateRealSolverImpl {\n     \n     /** Serializable version identifier */\n-    static final long serialVersionUID \u003d 2606474895443431607L;\n+    private static final long serialVersionUID \u003d 2606474895443431607L;\n     \n     /** The first derivative of the target function. */\n-    private UnivariateRealFunction derivative;\n+    private transient UnivariateRealFunction derivative;\n     \n     /**\n      * Construct a solver for the given function.\n@@ -97,5 +98,17 @@\n         throw new ConvergenceException\n             (\"Maximum number of iterations exceeded \" + i);\n     }\n-\n+    \n+    /**\n+     * Custom deserialization to initialize transient deriviate field.\n+     * \n+     * @param in serialized object input stream\n+     * @throws IOException if IO error occurs \n+     * @throws ClassNotFoundException if instantiation error occurs\n+     */\n+    private void readObject(java.io.ObjectInputStream in)\n+    throws IOException, ClassNotFoundException {\n+        in.defaultReadObject();\n+        derivative \u003d ((DifferentiableUnivariateRealFunction) f).derivative();\n+    }    \n }\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "ImportDeclaration [660,687]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [3623,4099]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: private [1175,1182]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: transient [1315,1324]"
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/math/analysis/PolynomialFunction.java",
        "src/java/org/apache/commons/math/analysis/PolynomialFunction.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [],
          "num": 0
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "31"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "31"
          ],
          "num": 1
        }
      ],
      "diff": "diff --git a/src/java/org/apache/commons/math/analysis/PolynomialFunction.java b/src/java/org/apache/commons/math/analysis/PolynomialFunction.java\nindex 7184147..649ec18 100644\n--- a/src/java/org/apache/commons/math/analysis/PolynomialFunction.java\n+++ b/src/java/org/apache/commons/math/analysis/PolynomialFunction.java\n@@ -28,7 +28,7 @@\n public class PolynomialFunction implements DifferentiableUnivariateRealFunction, Serializable {\n \n     /** Serializable version identifier */\n-    static final long serialVersionUID \u003d 3322454535052136809L;\n+    private static final long serialVersionUID \u003d 3322454535052136809L;\n     \n     /**\n      * The coefficients of the polynomial, ordered by degree -- i.e.,  \n",
      "operations": [
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: private [1090,1097]"
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java",
        "src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [],
          "num": 0
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "55",
            "58"
          ],
          "num": 2
        },
        {
          "qualified_names": [
            "55",
            "56",
            "59"
          ],
          "num": 3
        }
      ],
      "diff": "diff --git a/src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java b/src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java\nindex d4f0547..e37b875 100644\n--- a/src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java\n+++ b/src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java\n@@ -52,10 +52,11 @@\n  *\n  * @version $Revision$ $Date$\n  */\n-public class PolynomialSplineFunction implements UnivariateRealFunction, Serializable {\n+public class PolynomialSplineFunction \n+    implements DifferentiableUnivariateRealFunction, Serializable {\n    \n     /** Serializable version identifier */\n-    static final long serialVersionUID \u003d 7011031166416885789L;\n+    private static final long serialVersionUID \u003d 7011031166416885789L;\n     \n     /** Spline segment interval delimiters (knots).   Size is n+1 for n segments. */\n     private double knots[];\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "SimpleType [2452,2488]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: private [2556,2563]"
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [2447,2469]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/math/analysis/SecantSolver.java",
        "src/java/org/apache/commons/math/analysis/SecantSolver.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [],
          "num": 0
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "43"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "43"
          ],
          "num": 1
        }
      ],
      "diff": "diff --git a/src/java/org/apache/commons/math/analysis/SecantSolver.java b/src/java/org/apache/commons/math/analysis/SecantSolver.java\nindex 030ce12..085dd9c 100644\n--- a/src/java/org/apache/commons/math/analysis/SecantSolver.java\n+++ b/src/java/org/apache/commons/math/analysis/SecantSolver.java\n@@ -40,7 +40,7 @@\n public class SecantSolver extends UnivariateRealSolverImpl implements Serializable {\n     \n     /** Serializable version identifier */\n-    static final long serialVersionUID \u003d 1984971194738974867L;\n+    private static final long serialVersionUID \u003d 1984971194738974867L;\n     \n     /**\n      * Construct a solver for the given function.\n",
      "operations": [
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: private [1613,1620]"
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java",
        "src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "isBracketing"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "isBracketing"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "33",
            "268",
            "269",
            "270"
          ],
          "num": 4
        },
        {
          "qualified_names": [
            "33",
            "268",
            "269",
            "270"
          ],
          "num": 4
        }
      ],
      "diff": "diff --git a/src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java b/src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java\nindex d0d24f3..ec27e1b 100644\n--- a/src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java\n+++ b/src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java\n@@ -30,7 +30,7 @@\n     Serializable {\n \n     /** Serializable version identifier */\n-    static final long serialVersionUID \u003d 1112491292565386596L;\n+    private static final long serialVersionUID \u003d 1112491292565386596L;\n     \n     /** Maximum absolute error. */\n     protected double absoluteAccuracy;\n@@ -265,9 +265,9 @@\n      */\n     protected boolean isBracketing(double lower, double upper, \n             UnivariateRealFunction f) throws FunctionEvaluationException {\n-    \tdouble f1 \u003d f.value(lower);\n-    \tdouble f2 \u003d f.value(upper);\n-    \treturn ((f1 \u003e 0 \u0026\u0026 f2 \u003c 0) || (f1 \u003c 0 \u0026\u0026 f2 \u003e 0));\n+        double f1 \u003d f.value(lower);\n+        double f2 \u003d f.value(upper);\n+        return ((f1 \u003e 0 \u0026\u0026 f2 \u003c 0) || (f1 \u003c 0 \u0026\u0026 f2 \u003e 0));\n     }\n     \n     /**\n",
      "operations": [
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: private [1034,1041]"
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/math/complex/Complex.java",
        "src/java/org/apache/commons/math/complex/Complex.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "equals",
            "getReal",
            "getImaginary",
            "subtract",
            "add",
            "Complex",
            "conjugate",
            "divide",
            "multiply",
            "negate",
            "abs",
            "isNaN"
          ],
          "num": 12
        },
        {
          "qualified_names": [
            "getImaginary",
            "abs",
            "negate",
            "add",
            "divide",
            "multiply",
            "equals",
            "isInfinite",
            "getReal",
            "conjugate",
            "isNaN",
            "Complex",
            "subtract"
          ],
          "num": 13
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "2",
            "24",
            "32",
            "34",
            "37",
            "43",
            "46",
            "52",
            "53",
            "64",
            "88",
            "89",
            "91",
            "92",
            "93",
            "94",
            "95",
            "101",
            "102",
            "103",
            "110",
            "111",
            "117",
            "118",
            "128",
            "159",
            "165",
            "213",
            "222",
            "229",
            "230",
            "232",
            "233",
            "241",
            "242",
            "243",
            "249",
            "250",
            "251",
            "252",
            "253",
            "259",
            "272",
            "273",
            "274"
          ],
          "num": 45
        },
        {
          "qualified_names": [
            "2",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "42",
            "44",
            "47",
            "53",
            "54",
            "55",
            "56",
            "59",
            "65",
            "66",
            "76",
            "77",
            "78",
            "79",
            "80",
            "82",
            "88",
            "89",
            "90",
            "91",
            "92",
            "110",
            "111",
            "112",
            "113",
            "114",
            "115",
            "116",
            "117",
            "118",
            "119",
            "121",
            "122",
            "123",
            "125",
            "131",
            "132",
            "133",
            "134",
            "135",
            "136",
            "137",
            "138",
            "139",
            "140",
            "147",
            "153",
            "154",
            "155",
            "156",
            "157",
            "158",
            "159",
            "160",
            "161",
            "162",
            "163",
            "164",
            "165",
            "166",
            "167",
            "168",
            "169",
            "170",
            "171",
            "172",
            "173",
            "174",
            "175",
            "176",
            "177",
            "178",
            "179",
            "180",
            "181",
            "182",
            "183",
            "184",
            "194",
            "195",
            "196",
            "197",
            "198",
            "229",
            "235",
            "283",
            "292",
            "299",
            "300",
            "302",
            "303",
            "310",
            "311",
            "312",
            "313",
            "314",
            "315",
            "316",
            "317",
            "318",
            "319",
            "320",
            "321",
            "322",
            "323",
            "325",
            "326",
            "327",
            "328",
            "329",
            "330",
            "331",
            "332",
            "333",
            "334",
            "335",
            "336",
            "337",
            "338",
            "339",
            "340",
            "341",
            "342",
            "343",
            "344",
            "345",
            "351",
            "352",
            "357",
            "358",
            "359",
            "361",
            "374",
            "375",
            "376",
            "377",
            "378",
            "379",
            "380",
            "381",
            "382",
            "383",
            "384",
            "385",
            "386",
            "387"
          ],
          "num": 157
        }
      ],
      "diff": "diff --git a/src/java/org/apache/commons/math/complex/Complex.java b/src/java/org/apache/commons/math/complex/Complex.java\nindex 83eb19d..a3bdb3a 100644\n--- a/src/java/org/apache/commons/math/complex/Complex.java\n+++ b/src/java/org/apache/commons/math/complex/Complex.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2003-2004 The Apache Software Foundation.\n+ * Copyright 2003-2005 The Apache Software Foundation.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -22,6 +22,16 @@\n /**\n  * Representation of a Complex number - a number which has both a \n  * real and imaginary part.\n+ * \u003cp\u003e\n+ * Implementations of arithmetic operations handle \u003ccode\u003eNaN\u003c/code\u003e and\n+ * infinite values according to the rules for {@link java.lang.Double}\n+ * arithmetic, applying definitional formulas and returning \u003ccode\u003eNaN\u003c/code\u003e or\n+ * infinite values in real or imaginary parts as these arise in computation. \n+ * See individual method javadocs for details.\n+ * \u003cp\u003e\n+ * {@link #equals} identifies all values with \u003ccode\u003eNaN\u003c/code\u003e in either real \n+ * or imaginary part - e.g., \u003cpre\u003e\n+ * \u003ccode\u003e1 + NaNi  \u003d\u003d NaN + i \u003d\u003d NaN + NaNi.\u003c/code\u003e\u003c/pre\u003e\n  *\n  * @author Apache Software Foundation\n  * @version $Revision$ $Date$\n@@ -29,28 +39,31 @@\n public class Complex implements Serializable  {\n \n     /** Serializable version identifier */\n-    static final long serialVersionUID \u003d -6530173849413811929L;\n+    private static final long serialVersionUID \u003d -6530173849413811929L;\n     \n-    /** The square root of -1. A number representing \"0.0 + 1.0i\".*/    \n+    /** The square root of -1. A number representing \"0.0 + 1.0i\" */    \n     public static final Complex I \u003d new Complex(0.0, 1.0);\n     \n-    /** A complex number analogous to {@link java.lang.Double#NaN} */\n+    /** A complex number representing \"NaN + NaNi\" */\n     public static final Complex NaN \u003d new Complex(Double.NaN, Double.NaN);\n \n     /** A complex number representing \"1.0 + 0.0i\" */    \n     public static final Complex ONE \u003d new Complex(1.0, 0.0);\n     \n-    /** The imaginary part. */\n+    /** A complex number representing \"0.0 + 0.0i\" */    \n+    public static final Complex ZERO \u003d new Complex(0.0, 0.0);\n+    \n+    /** The imaginary part */\n     protected double imaginary;\n     \n-    /** The real part. */\n+    /** The real part */\n     protected double real;\n     \n     /**\n      * Create a complex number given the real and imaginary parts.\n      *\n-     * @param real the real part.\n-     * @param imaginary the imaginary part.\n+     * @param real the real part\n+     * @param imaginary the imaginary part\n      */\n     public Complex(double real, double imaginary) {\n         super();\n@@ -60,13 +73,23 @@\n \n     /**\n      * Return the absolute value of this complex number.\n+     * \u003cp\u003e\n+     * Returns \u003ccode\u003eNaN\u003c/code\u003e if either real or imaginary part is\n+     * \u003ccode\u003eNaN\u003c/code\u003e and \u003ccode\u003eDouble.POSITIVE_INFINITY\u003c/code\u003e if\n+     * neither part is \u003ccode\u003eNaN\u003c/code\u003e, but at least one part takes an infinite\n+     * value.\n      *\n-     * @return the absolute value.\n+     * @return the absolute value\n      */\n     public double abs() {\n         if (isNaN()) {\n             return Double.NaN;\n         }\n+        \n+        if (isInfinite()) {\n+            return Double.POSITIVE_INFINITY;\n+        }\n+        \n         if (Math.abs(real) \u003c Math.abs(imaginary)) {\n             if (imaginary \u003d\u003d 0.0) {\n                 return Math.abs(real);\n@@ -84,38 +107,81 @@\n     \n     /**\n      * Return the sum of this complex number and the given complex number.\n+     * \u003cp\u003e\n+     * Uses the definitional formula \n+     * \u003cpre\u003e\n+     * (a + bi) + (c + di) \u003d (a+c) + (b+d)i\n+     * \u003c/pre\u003e\n+     * \u003cp\u003e\n+     * If either this or \u003ccode\u003erhs\u003c/code\u003e has a NaN value in either part,\n+     * {@link #NaN} is returned; otherwise Inifinite and NaN values are\n+     * returned in the parts of the result according to the rules for\n+     * {@link java.lang.Double} arithmetic. \n      *\n-     * @param rhs the other complex number.\n-     * @return the complex number sum.\n+     * @param rhs the other complex number\n+     * @return the complex number sum\n+     * @throws NullPointerException if \u003ccode\u003erhs\u003c/code\u003e is null\n      */\n-    public Complex add(Complex rhs) {\n-        if (isNaN() || rhs.isNaN()) {\n-            return NaN;\n-        }\n-        \n+    public Complex add(Complex rhs) {   \n         return new Complex(real + rhs.getReal(),\n             imaginary + rhs.getImaginary());\n     }\n     \n     /**\n-     * Return the conjugate of this complex number.  The conjugate of\n-     * \"A + Bi\" is \"A - Bi\".  Complex.NaN is returned if either the real or imaginary part of \n-     * this Complex number equals Double.NaN.\n+     * Return the conjugate of this complex number. The conjugate of\n+     * \"A + Bi\" is \"A - Bi\". \n+     * \u003cp\u003e\n+     * {@link #NaN} is returned if either the real or imaginary\n+     * part of this Complex number equals \u003ccode\u003eDouble.NaN\u003c/code\u003e.\n+     * \u003cp\u003e\n+     * If the imaginary part is infinite, and the real part is not NaN, \n+     * the returned value has infinite imaginary part of the opposite\n+     * sign - e.g. the conjugate of \u003ccode\u003e1 + POSITIVE_INFINITY i\u003c/code\u003e\n+     * is \u003ccode\u003e1 - NEGATIVE_INFINITY i\u003c/code\u003e\n      *\n      * @return the conjugate of this Complex object\n      */\n     public Complex conjugate() {\n         if (isNaN()) {\n             return NaN;\n-        }\n-        \n+        }   \n         return new Complex(real, -imaginary);\n     }\n     \n     /**\n      * Return the quotient of this complex number and the given complex number.\n-     * @param rhs the other complex number.\n-     * @return the complex number quotient.\n+     * \u003cp\u003e\n+     * Implements the definitional formula\n+     * \u003cpre\u003e\u003ccode\u003e\n+     *    a + bi          ac + bd + (bc - ad)i\n+     *    ----------- \u003d -------------------------\n+     *    c + di               c\u003csup\u003e2\u003c/sup\u003e + d\u003csup\u003e2\u003c/sup\u003e\n+     * \u003c/code\u003e\u003c/pre\u003e\n+     * but uses \n+     * \u003ca href\u003d\"http://doi.acm.org/10.1145/1039813.1039814\"\u003e\n+     * prescaling of operands\u003c/a\u003e to limit the effects of overflows and\n+     * underflows in the computation.\n+     * \u003cp\u003e\n+     * Infinite and NaN values are handled / returned according to the\n+     * following rules, applied in the order presented:\n+     * \u003cul\u003e\n+     * \u003cli\u003eIf either this or \u003ccode\u003erhs\u003c/code\u003e has a NaN value in either part,\n+     *  {@link #NaN} is returned.\u003c/li\u003e\n+     * \u003cli\u003eIf \u003ccode\u003erhs\u003c/code\u003e equals {@link #ZERO}, {@link #NaN} is returned.\n+     * \u003c/li\u003e\n+     * \u003cli\u003eIf this and \u003ccode\u003erhs\u003c/code\u003e are both infinite,\n+     * {@link #NaN} is returned.\u003c/li\u003e\n+     * \u003cli\u003eIf this is finite (i.e., has no infinite or NaN parts) and\n+     *  \u003ccode\u003erhs\u003c/code\u003e is infinite (one or both parts infinite), \n+     * {@link #ZERO} is returned.\u003c/li\u003e\n+     * \u003cli\u003eIf this is infinite and \u003ccode\u003erhs\u003c/code\u003e is finite, NaN values are\n+     * returned in the parts of the result if the {@link java.lang.Double}\n+     * rules applied to the definitional formula force NaN results.\u003c/li\u003e\n+     * \u003c/ul\u003e\n+     * \n+     * @param rhs the other complex number\n+     * @return the complex number quotient\n+     * @throws NullPointerException if \u003ccode\u003erhs\u003c/code\u003e is null\n      */\n     public Complex divide(Complex rhs) {\n         if (isNaN() || rhs.isNaN()) {\n@@ -125,7 +191,11 @@\n         double c \u003d rhs.getReal();\n         double d \u003d rhs.getImaginary();\n         if (c \u003d\u003d 0.0 \u0026\u0026 d \u003d\u003d 0.0) {\n-            throw new ArithmeticException(\"Error: division by zero.\");\n+            return NaN;\n+        }\n+        \n+        if (rhs.isInfinite() \u0026\u0026 !isInfinite()) {\n+            return ZERO;\n         }\n \n         if (Math.abs(c) \u003c Math.abs(d)) {\n@@ -156,13 +226,13 @@\n      * \u003cp\u003e\n      * All \u003ccode\u003eNaN\u003c/code\u003e values are considered to be equal - i.e, if either\n      * (or both) real and imaginary parts of the complex number are equal\n-     * to Double.NaN, the complex number is equal to \n+     * to \u003ccode\u003eDouble.NaN\u003c/code\u003e, the complex number is equal to \n      * \u003ccode\u003eComplex.NaN\u003c/code\u003e.\n      *\n      * @param other Object to test for equality to this\n      * @return true if two Complex objects are equal, false if\n      *         object is null, not an instance of Complex, or\n-     *         not equal to this Complex instance.\n+     *         not equal to this Complex instance\n      * \n      */\n     public boolean equals(Object other) {\n@@ -210,7 +280,7 @@\n     /**\n      * Access the imaginary part.\n      *\n-     * @return the imaginary part.\n+     * @return the imaginary part\n      */\n     public double getImaginary() {\n         return imaginary;\n@@ -219,44 +289,76 @@\n     /**\n      * Access the real part.\n      *\n-     * @return the real part.\n+     * @return the real part\n      */\n     public double getReal() {\n         return real;\n     }\n     \n     /**\n-     * Returns true if this complex number is the special Not-a-Number (NaN)\n-     * value.\n+     * Returns true if either or both parts of this complex number is NaN;\n+     * false otherwise\n      *\n-     * @return true if the value represented by this object is NaN; false\n-     *         otherwise.\n+     * @return  true if either or both parts of this complex number is NaN;\n+     * false otherwise\n      */\n     public boolean isNaN() {\n         return Double.isNaN(real) || Double.isNaN(imaginary);        \n     }\n     \n     /**\n+     * Returns true if either the real or imaginary part of this complex number\n+     * takes an infinite value (either \u003ccode\u003eDouble.POSITIVE_INFINITY\u003c/code\u003e or \n+     * \u003ccode\u003eDouble.NEGATIVE_INFINITY\u003c/code\u003e) and neither part\n+     * is \u003ccode\u003eNaN\u003c/code\u003e.\n+     * \n+     * @return true if one or both parts of this complex number are infinite\n+     * and neither part is \u003ccode\u003eNaN\u003c/code\u003e\n+     */\n+    public boolean isInfinite() {\n+        return !isNaN() \u0026\u0026 \n+        (Double.isInfinite(real) || Double.isInfinite(imaginary));        \n+    }\n+    \n+    /**\n      * Return the product of this complex number and the given complex number.\n-     *\n-     * @param rhs the other complex number.\n-     * @return the complex number product.\n+     * \u003cp\u003e\n+     * Implements the definitional formula:\n+     * \u003cpre\u003e\u003ccode\u003e\n+     * (a + bi)(c + di) \u003d (ac - bd) + (ad + bc)i\n+     * \u003c/code\u003e\u003c/pre\u003e\n+     * \u003cp\u003e\n+     * Returns {@link #NaN} if either this or \u003ccode\u003erhs\u003c/code\u003e has one or more\n+     * NaN parts.\n+     * \u003cp\u003e\n+     * Returns NaN or infinite values in components of the result per the\n+     * definitional formula and and the rules for {@link java.lang.Double}\n+     * arithmetic.  Examples:\n+     * \u003cpre\u003e\u003ccode\u003e\n+     *  (1 + i) (INF + i)  \u003d  INF + INFi\n+     *  (1 + INFi) (1 - INFi) \u003d INF + NaNi\n+     *  (-INF + -INFi)(1 + NaNi) \u003d NaN + NaNi\n+     *  \u003c/code\u003e\u003c/pre\u003e\n+     * \n+     * @param rhs the other complex number\n+     * @return the complex number product\n+     * @throws NullPointerException if \u003ccode\u003erhs\u003c/code\u003e is null\n      */\n     public Complex multiply(Complex rhs) {\n         if (isNaN() || rhs.isNaN()) {\n             return NaN;\n         }\n-        \n-        double p \u003d (real + imaginary) * (rhs.getReal() + rhs.getImaginary());\n-        double ac \u003d real * rhs.getReal();\n-        double bd \u003d imaginary * rhs.getImaginary();\n-        return new Complex(ac - bd, p - ac - bd);\n+        return new Complex(real * rhs.real - imaginary * rhs.imaginary,\n+                real * rhs.imaginary + imaginary * rhs.real);\n     }\n     \n     /**\n      * Return the additive inverse of this complex number.\n+     * \u003cp\u003e\n+     * Returns \u003ccode\u003eComplex.NaN\u003c/code\u003e if either real or imaginary\n+     * part of this Complex number equals \u003ccode\u003eDouble.NaN\u003c/code\u003e.\n      *\n-     * @return the negation of this complex number.\n+     * @return the negation of this complex number\n      */\n     public Complex negate() {\n         if (isNaN()) {\n@@ -269,9 +371,20 @@\n     /**\n      * Return the difference between this complex number and the given complex\n      * number.\n-     *\n-     * @param rhs the other complex number.\n-     * @return the complex number difference.\n+      * \u003cp\u003e\n+     * Uses the definitional formula \n+     * \u003cpre\u003e\n+     * (a + bi) - (c + di) \u003d (a-c) + (b-d)i\n+     * \u003c/pre\u003e\n+     * \u003cp\u003e\n+     * If either this or \u003ccode\u003erhs\u003c/code\u003e has a NaN value in either part,\n+     * {@link #NaN} is returned; otherwise inifinite and NaN values are\n+     * returned in the parts of the result according to the rules for\n+     * {@link java.lang.Double} arithmetic. \n+     * \n+     * @param rhs the other complex number\n+     * @return the complex number difference\n+     * @throws NullPointerException if \u003ccode\u003erhs\u003c/code\u003e is null\n      */\n     public Complex subtract(Complex rhs) {\n         if (isNaN() || rhs.isNaN()) {\n",
      "operations": [
        {
          "type": "insert-node",
          "from": "",
          "to": "Javadoc [741,1448]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldDeclaration [2013,2128]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [10297,10832]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TagElement [748,1373]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: private [1545,1552]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [1622,1686]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [1759,1808]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [2138,2163]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [2205,2225]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Javadoc [2566,2918]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Javadoc [3585,4215]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Javadoc [4366,4951]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Javadoc [5106,6667]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [9967,10182]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Javadoc [10842,11702]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Javadoc [11967,12241]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Javadoc [12400,13058]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003cp\u003e [843,846]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: Implementations of arithmetic operations handle \u003ccode\u003eNaN\u003c/code\u003e and [850,918]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: infinite values according to the rules for  [922,965]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [965,989]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: arithmetic, applying definitional formulas and returning \u003ccode\u003eNaN\u003c/code\u003e or [993,1069]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: infinite values in real or imaginary parts as these arise in computation.  [1073,1147]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: See individual method javadocs for details. [1151,1194]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003cp\u003e [1198,1201]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [1205,1220]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement:  identifies all values with \u003ccode\u003eNaN\u003c/code\u003e in either real  [1220,1280]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: or imaginary part - e.g., \u003cpre\u003e [1284,1315]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003ccode\u003e1 + NaNi  \u003d\u003d NaN + i \u003d\u003d NaN + NaNi.\u003c/code\u003e\u003c/pre\u003e [1319,1373]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TagElement [2577,2869]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [2884,2910]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [3026,3100]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TagElement [3596,4055]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [4113,4143]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [4151,4207]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [4377,4884]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TagElement [5117,6501]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [6560,6595]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [6603,6659]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [6942,7017]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TagElement [10853,11537]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [11596,11630]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [11638,11694]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ReturnStatement [11826,11951]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TagElement [11978,12175]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [12190,12233]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TagElement [12411,12890]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [12949,12986]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [12994,13050]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003cp\u003e [2634,2637]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: Returns \u003ccode\u003eNaN\u003c/code\u003e if either real or imaginary part is [2645,2705]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003ccode\u003eNaN\u003c/code\u003e and \u003ccode\u003eDouble.POSITIVE_INFINITY\u003c/code\u003e if [2713,2774]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: neither part is \u003ccode\u003eNaN\u003c/code\u003e, but at least one part takes an infinite [2782,2855]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: value. [2863,2869]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003cp\u003e [3671,3674]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: Uses the definitional formula  [3682,3712]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003cpre\u003e [3720,3725]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: (a + bi) + (c + di) \u003d (a+c) + (b+d)i [3733,3769]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003c/pre\u003e [3777,3783]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003cp\u003e [3791,3794]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: If either this or \u003ccode\u003erhs\u003c/code\u003e has a NaN value in either part, [3802,3868]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [3876,3888]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement:  is returned; otherwise Inifinite and NaN values are [3888,3940]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: returned in the parts of the result according to the rules for [3948,4010]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [4018,4042]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement:  arithmetic.  [4042,4055]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003cp\u003e [5197,5200]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: Implements the definitional formula [5208,5243]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003cpre\u003e\u003ccode\u003e [5251,5262]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: a + bi          ac + bd + (bc - ad)i [5273,5309]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: ----------- \u003d ------------------------- [5320,5359]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: c + di               c\u003csup\u003e2\u003c/sup\u003e + d\u003csup\u003e2\u003c/sup\u003e [5370,5420]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003c/code\u003e\u003c/pre\u003e [5428,5441]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: but uses  [5449,5458]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003ca href\u003d\"http://doi.acm.org/10.1145/1039813.1039814\"\u003e [5466,5519]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: prescaling of operands\u003c/a\u003e to limit the effects of overflows and [5527,5591]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: underflows in the computation. [5599,5629]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003cp\u003e [5637,5640]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: Infinite and NaN values are handled / returned according to the [5648,5711]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: following rules, applied in the order presented: [5719,5767]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003cul\u003e [5775,5779]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003cli\u003eIf either this or \u003ccode\u003erhs\u003c/code\u003e has a NaN value in either part, [5787,5857]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [5866,5878]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement:  is returned.\u003c/li\u003e [5878,5896]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003cli\u003eIf \u003ccode\u003erhs\u003c/code\u003e equals  [5904,5935]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [5935,5948]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: ,  [5948,5950]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [5950,5962]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement:  is returned. [5962,5975]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003c/li\u003e [5983,5988]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003cli\u003eIf this and \u003ccode\u003erhs\u003c/code\u003e are both infinite, [5996,6047]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [6055,6067]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement:  is returned.\u003c/li\u003e [6067,6085]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003cli\u003eIf this is finite (i.e., has no infinite or NaN parts) and [6093,6155]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003ccode\u003erhs\u003c/code\u003e is infinite (one or both parts infinite),  [6164,6223]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [6231,6244]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement:  is returned.\u003c/li\u003e [6244,6262]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003cli\u003eIf this is infinite and \u003ccode\u003erhs\u003c/code\u003e is finite, NaN values are [6270,6340]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: returned in the parts of the result if the  [6348,6391]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [6391,6415]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: rules applied to the definitional formula force NaN results.\u003c/li\u003e [6423,6488]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003c/ul\u003e [6496,6501]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003cp\u003e [10932,10935]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: Implements the definitional formula: [10943,10979]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003cpre\u003e\u003ccode\u003e [10987,10998]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: (a + bi)(c + di) \u003d (ac - bd) + (ad + bc)i [11006,11047]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003c/code\u003e\u003c/pre\u003e [11055,11068]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003cp\u003e [11076,11079]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: Returns  [11087,11095]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [11095,11107]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement:  if either this or \u003ccode\u003erhs\u003c/code\u003e has one or more [11107,11158]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: NaN parts. [11166,11176]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003cp\u003e [11184,11187]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: Returns NaN or infinite values in components of the result per the [11195,11261]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: definitional formula and and the rules for  [11269,11312]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [11312,11336]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: arithmetic.  Examples: [11344,11366]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003cpre\u003e\u003ccode\u003e [11374,11385]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: (1 + i) (INF + i)  \u003d  INF + INFi [11394,11426]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: (1 + INFi) (1 - INFi) \u003d INF + NaNi [11435,11469]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: (-INF + -INFi)(1 + NaNi) \u003d NaN + NaNi [11478,11515]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003c/code\u003e\u003c/pre\u003e [11524,11537]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003cp\u003e [12037,12040]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: Returns \u003ccode\u003eComplex.NaN\u003c/code\u003e if either real or imaginary [12048,12108]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: part of this Complex number equals \u003ccode\u003eDouble.NaN\u003c/code\u003e. [12116,12175]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003cp\u003e [12506,12509]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: Uses the definitional formula  [12517,12547]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003cpre\u003e [12555,12560]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: (a + bi) - (c + di) \u003d (a-c) + (b-d)i [12568,12604]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003c/pre\u003e [12612,12618]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003cp\u003e [12626,12629]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: If either this or \u003ccode\u003erhs\u003c/code\u003e has a NaN value in either part, [12637,12703]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [12711,12723]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement:  is returned; otherwise inifinite and NaN values are [12723,12775]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: returned in the parts of the result according to the rules for [12783,12845]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [12853,12877]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement:  arithmetic.  [12877,12890]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ReturnStatement [6903,6914]"
        },
        {
          "type": "delete-node",
          "from": "TagElement [748,839]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Javadoc [741,914]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "Javadoc [1080,1144]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "Javadoc [1217,1282]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "Javadoc [1487,1513]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "Javadoc [1555,1576]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TagElement [1930,1979]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [1994,2021]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Javadoc [1919,2029]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TagElement [2606,2673]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [2732,2763]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Javadoc [2595,2771]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [2818,2881]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [3011,3214]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Javadoc [3000,3281]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TagElement [3453,3525]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [3577,3613]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Javadoc [3442,3621]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ThrowStatement [3857,3915]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "Javadoc [6865,7074]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TagElement [7200,7271]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [7330,7365]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Javadoc [7189,7373]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [7506,7575]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [7584,7617]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [7626,7669]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ReturnStatement [7678,7719]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TagElement [7746,7797]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [7812,7856]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Javadoc [7735,7864]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TagElement [8034,8120]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [8179,8217]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Javadoc [8023,8225]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/math/complex/ComplexFormat.java",
        "src/java/org/apache/commons/math/complex/ComplexFormat.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [],
          "num": 0
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "38"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "38"
          ],
          "num": 1
        }
      ],
      "diff": "diff --git a/src/java/org/apache/commons/math/complex/ComplexFormat.java b/src/java/org/apache/commons/math/complex/ComplexFormat.java\nindex b28b391..af9d378 100644\n--- a/src/java/org/apache/commons/math/complex/ComplexFormat.java\n+++ b/src/java/org/apache/commons/math/complex/ComplexFormat.java\n@@ -35,7 +35,7 @@\n public class ComplexFormat extends Format implements Serializable {\n     \n     /** Serializable version identifier */\n-    static final long serialVersionUID \u003d -6337346779577272306L;\n+    private static final long serialVersionUID \u003d -6337346779577272306L;\n     \n     /** The default imaginary character. */\n     private static final String DEFAULT_IMAGINARY_CHARACTER \u003d \"i\";\n",
      "operations": [
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: private [1244,1251]"
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/math/complex/ComplexUtils.java",
        "src/java/org/apache/commons/math/complex/ComplexUtils.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "sqrt1z",
            "tanh",
            "asin",
            "atan",
            "log",
            "exp",
            "cosh",
            "pow",
            "sqrt",
            "acos",
            "sin",
            "tan",
            "cos",
            "sinh"
          ],
          "num": 14
        },
        {
          "qualified_names": [
            "polar2Complex",
            "sqrt1z",
            "sqrt",
            "asin",
            "sin",
            "log",
            "cos",
            "acos",
            "sinh",
            "tan",
            "exp",
            "pow",
            "tanh",
            "atan",
            "cosh"
          ],
          "num": 15
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "2",
            "22",
            "23",
            "24",
            "43",
            "45",
            "46",
            "58",
            "73",
            "75",
            "76",
            "83",
            "90",
            "92",
            "93",
            "108",
            "127",
            "129",
            "130",
            "139",
            "140",
            "141",
            "145",
            "164",
            "171",
            "189",
            "191",
            "192",
            "207",
            "208",
            "209",
            "210",
            "233",
            "234",
            "235",
            "236",
            "243",
            "245",
            "246",
            "262",
            "264",
            "265"
          ],
          "num": 42
        },
        {
          "qualified_names": [
            "2",
            "22",
            "23",
            "24",
            "25",
            "31",
            "32",
            "33",
            "34",
            "35",
            "49",
            "50",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57",
            "58",
            "59",
            "60",
            "61",
            "73",
            "74",
            "76",
            "77",
            "78",
            "79",
            "80",
            "81",
            "82",
            "85",
            "97",
            "98",
            "100",
            "101",
            "102",
            "103",
            "104",
            "105",
            "106",
            "107",
            "108",
            "109",
            "122",
            "123",
            "124",
            "126",
            "127",
            "128",
            "129",
            "130",
            "131",
            "132",
            "133",
            "134",
            "135",
            "136",
            "137",
            "138",
            "139",
            "140",
            "141",
            "142",
            "143",
            "144",
            "145",
            "146",
            "161",
            "162",
            "164",
            "165",
            "166",
            "167",
            "168",
            "169",
            "170",
            "171",
            "172",
            "173",
            "174",
            "175",
            "176",
            "177",
            "178",
            "179",
            "180",
            "181",
            "182",
            "183",
            "201",
            "203",
            "204",
            "205",
            "206",
            "207",
            "208",
            "209",
            "210",
            "211",
            "212",
            "213",
            "214",
            "215",
            "216",
            "217",
            "218",
            "219",
            "220",
            "221",
            "222",
            "223",
            "224",
            "225",
            "234",
            "238",
            "239",
            "241",
            "242",
            "243",
            "244",
            "245",
            "246",
            "247",
            "248",
            "249",
            "250",
            "251",
            "252",
            "253",
            "254",
            "255",
            "256",
            "257",
            "258",
            "259",
            "260",
            "261",
            "262",
            "263",
            "276",
            "277",
            "278",
            "279",
            "280",
            "281",
            "282",
            "283",
            "284",
            "285",
            "286",
            "287",
            "288",
            "289",
            "290",
            "291",
            "292",
            "293",
            "294",
            "295",
            "296",
            "297",
            "298",
            "299",
            "300",
            "301",
            "302",
            "303",
            "304",
            "305",
            "306",
            "307",
            "311",
            "312",
            "313",
            "314",
            "315",
            "316",
            "317",
            "318",
            "319",
            "320",
            "323",
            "324",
            "331",
            "332",
            "333",
            "335",
            "336",
            "337",
            "338",
            "339",
            "340",
            "341",
            "342",
            "343",
            "344",
            "345",
            "346",
            "347",
            "348",
            "349",
            "350",
            "351",
            "352",
            "353",
            "354",
            "371",
            "372",
            "374",
            "375",
            "376",
            "377",
            "378",
            "379",
            "380",
            "381",
            "382",
            "383",
            "384",
            "385",
            "386",
            "387",
            "388",
            "389",
            "390",
            "391",
            "392",
            "393",
            "394",
            "409",
            "410",
            "411",
            "412",
            "413",
            "414",
            "415",
            "416",
            "417",
            "418",
            "419",
            "420",
            "421",
            "422",
            "423",
            "424",
            "425",
            "426",
            "427",
            "428",
            "429",
            "430",
            "431",
            "432",
            "433",
            "434",
            "435",
            "436",
            "437",
            "438",
            "439",
            "440",
            "463",
            "464",
            "465",
            "466",
            "467",
            "468",
            "469",
            "470",
            "471",
            "472",
            "473",
            "474",
            "475",
            "476",
            "477",
            "478",
            "479",
            "486",
            "487",
            "489",
            "490",
            "491",
            "492",
            "493",
            "494",
            "495",
            "496",
            "497",
            "498",
            "499",
            "500",
            "501",
            "502",
            "503",
            "504",
            "505",
            "506",
            "507",
            "508",
            "509",
            "510",
            "526",
            "528",
            "529",
            "530",
            "531",
            "532",
            "533",
            "534",
            "535",
            "536",
            "537",
            "538",
            "539",
            "540",
            "541",
            "542",
            "543",
            "544",
            "545",
            "546",
            "547",
            "548",
            "549"
          ],
          "num": 326
        }
      ],
      "diff": "diff --git a/src/java/org/apache/commons/math/complex/ComplexUtils.java b/src/java/org/apache/commons/math/complex/ComplexUtils.java\nindex a736d36..1c6e6a5 100644\n--- a/src/java/org/apache/commons/math/complex/ComplexUtils.java\n+++ b/src/java/org/apache/commons/math/complex/ComplexUtils.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2003-2004 The Apache Software Foundation.\n+ * Copyright 2003-2005 The Apache Software Foundation.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -19,14 +19,20 @@\n import org.apache.commons.math.util.MathUtils;\n \n /**\n- * Implementations of various transcendental functions for\n- * {@link org.apache.commons.math.complex.Complex} arguments.\n- *\n+ * Static implementations of common \n+ * {@link org.apache.commons.math.complex.Complex}-valued functions.  Included\n+ * are trigonometric, exponential, log, power and square root functions.\n+ *\u003cp\u003e\n  * Reference:\n  * \u003cul\u003e\n  * \u003cli\u003e\u003ca href\u003d\"http://myweb.lmu.edu/dmsmith/ZMLIB.pdf\"\u003e\n  * Multiple Precision Complex Arithmetic and Functions\u003c/a\u003e\u003c/li\u003e\n  * \u003c/ul\u003e\n+ * See individual method javadocs for the computational formulas used.\n+ * In general, NaN values in either real or imaginary parts of input arguments\n+ * result in {@link Complex#NaN} returned.  Otherwise, infinite or NaN values\n+ * are returned as they arise in computing the real functions specified in the\n+ * computational formulas.  Null arguments result in NullPointerExceptions.\n  *\n  * @version $Revision$ $Date$\n  */\n@@ -40,10 +46,19 @@\n     }\n     \n     /**\n-     * Compute the \u003ca href\u003d\"http://mathworld.wolfram.com/InverseCosine.html\"\u003e\n+     * Compute the \n+     * \u003ca href\u003d\"http://mathworld.wolfram.com/InverseCosine.html\" TARGET\u003d\"_top\"\u003e\n      * inverse cosine\u003c/a\u003e for the given complex argument.\n-     * @param z the value whose inverse cosine is to be returned.\n-     * @return the inverse cosine of \u003ccode\u003ez\u003c/code\u003e.\n+     * \u003cp\u003e\n+     * Implements the formula: \u003cpre\u003e\n+     * \u003ccode\u003e acos(z) \u003d -i (log(z + i (sqrt(1 - z\u003csup\u003e2\u003c/sup\u003e))))\u003c/code\u003e\u003c/pre\u003e\n+     * \u003cp\u003e\n+     * Returns {@link Complex#NaN} if either real or imaginary part of the \n+     * input argument is \u003ccode\u003eNaN\u003c/code\u003e or infinite.\n+     * \n+     * @param z the value whose inverse cosine is to be returned\n+     * @return the inverse cosine of \u003ccode\u003ez\u003c/code\u003e\n+     * @throws NullPointerException if \u003ccode\u003ez\u003c/code\u003e is null\n      */\n     public static Complex acos(Complex z) {\n         if (z.isNaN()) {\n@@ -55,10 +70,19 @@\n     }\n     \n     /**\n-     * Compute the \u003ca href\u003d\"http://mathworld.wolfram.com/InverseSine.html\"\u003e\n+     * Compute the \n+     * \u003ca href\u003d\"http://mathworld.wolfram.com/InverseSine.html\" TARGET\u003d\"_top\"\u003e\n      * inverse sine\u003c/a\u003e for the given complex argument.\n+     * \u003cp\u003e\n+     * Implements the formula: \u003cpre\u003e\n+     * \u003ccode\u003e asin(z) \u003d -i (log(sqrt(1 - z\u003csup\u003e2\u003c/sup\u003e) + iz)) \u003c/code\u003e\u003c/pre\u003e\n+     * \u003cp\u003e\n+     * Returns {@link Complex#NaN} if either real or imaginary part of the \n+     * input argument is \u003ccode\u003eNaN\u003c/code\u003e or infinite.\n+     * \n      * @param z the value whose inverse sine is to be returned.\n      * @return the inverse sine of \u003ccode\u003ez\u003c/code\u003e.\n+     * @throws NullPointerException if \u003ccode\u003ez\u003c/code\u003e is null\n      */\n     public static Complex asin(Complex z) {\n         if (z.isNaN()) {\n@@ -70,27 +94,56 @@\n     }\n     \n     /**\n-     * Compute the \u003ca href\u003d\"http://mathworld.wolfram.com/InverseTangent.html\"\u003e\n+     * Compute the \n+     * \u003ca href\u003d\"http://mathworld.wolfram.com/InverseTangent.html\" TARGET\u003d\"_top\"\u003e\n      * inverse tangent\u003c/a\u003e for the given complex argument.\n-     * @param z the value whose inverse tangent is to be returned.\n-     * @return the inverse tangent of \u003ccode\u003ez\u003c/code\u003e.\n+     * \u003cp\u003e\n+     * Implements the formula: \u003cpre\u003e\n+     * \u003ccode\u003e atan(z) \u003d (i/2) log((i + z)/(i - z)) \u003c/code\u003e\u003c/pre\u003e\n+     * \u003cp\u003e\n+     * Returns {@link Complex#NaN} if either real or imaginary part of the \n+     * input argument is \u003ccode\u003eNaN\u003c/code\u003e or infinite. \n+     * \n+     * @param z the value whose inverse tangent is to be returned\n+     * @return the inverse tangent of \u003ccode\u003ez\u003c/code\u003e\n+     * @throws NullPointerException if \u003ccode\u003ez\u003c/code\u003e is null\n      */\n     public static Complex atan(Complex z) {\n         if (z.isNaN()) {\n             return Complex.NaN;\n         }\n         \n-        \n         return Complex.I.multiply(\n             log(Complex.I.add(z).divide(Complex.I.subtract(z))))\n             .divide(new Complex(2.0, 0.0));\n     }\n     \n     /**\n-     * Compute the \u003ca href\u003d\"http://mathworld.wolfram.com/Cosine.html\"\u003ecosine\u003c/a\u003e\n+     * Compute the \n+     * \u003ca href\u003d\"http://mathworld.wolfram.com/Cosine.html\" TARGET\u003d\"_top\"\u003e\n+     * cosine\u003c/a\u003e\n      * for the given complex argument.\n-     * @param z the value whose cosine is to be returned.\n-     * @return the cosine of \u003ccode\u003ez\u003c/code\u003e.\n+     * \u003cp\u003e\n+     * Implements the formula: \u003cpre\u003e\n+     * \u003ccode\u003e cos(a + bi) \u003d cos(a)cosh(b) - sin(a)sinh(b)i\u003c/code\u003e\u003c/pre\u003e\n+     * where the (real) functions on the right-hand side are\n+     * {@link java.lang.Math#sin}, {@link java.lang.Math#cos}, \n+     * {@link MathUtils#cosh} and {@link MathUtils#sinh}.\n+     * \u003cp\u003e\n+     * Returns {@link Complex#NaN} if either real or imaginary part of the \n+     * input argument is \u003ccode\u003eNaN\u003c/code\u003e.\n+     * \u003cp\u003e\n+     * Infinite values in real or imaginary parts of the input may result in\n+     * infinite or NaN values returned in parts of the result.\u003cpre\u003e\n+     * Examples: \n+     * \u003ccode\u003e\n+     * cos(1 \u0026plusmn; INFINITY i) \u003d 1 \u0026#x2213; INFINITY i\n+     * cos(\u0026plusmn;INFINITY + i) \u003d NaN + NaN i\n+     * cos(\u0026plusmn;INFINITY \u0026plusmn; INFINITY i) \u003d NaN + NaN i\u003c/code\u003e\u003c/pre\u003e\n+     * \n+     * @param z the value whose cosine is to be returned\n+     * @return the cosine of \u003ccode\u003ez\u003c/code\u003e\n+     * @throws NullPointerException if \u003ccode\u003ez\u003c/code\u003e is null\n      */\n     public static Complex cos(Complex z) {\n         if (z.isNaN()) {\n@@ -105,8 +158,29 @@\n     }\n     \n     /**\n-     * Compute the \u003ca href\u003d\"http://mathworld.wolfram.com/HyperbolicCosine.html\"\u003e\n+     * Compute the \n+     * \u003ca href\u003d\"http://mathworld.wolfram.com/HyperbolicCosine.html\" TARGET\u003d\"_top\"\u003e\n      * hyperbolic cosine\u003c/a\u003e for the given complex argument.\n+     * \u003cp\u003e\n+     * Implements the formula: \u003cpre\u003e\n+     * \u003ccode\u003e cosh(a + bi) \u003d cosh(a)cos(b) + sinh(a)sin(b)i\u003c/code\u003e\u003c/pre\u003e\n+     * where the (real) functions on the right-hand side are\n+     * {@link java.lang.Math#sin}, {@link java.lang.Math#cos}, \n+     * {@link MathUtils#cosh} and {@link MathUtils#sinh}.\n+     * \u003cp\u003e\n+     * Returns {@link Complex#NaN} if either real or imaginary part of the \n+     * input argument is \u003ccode\u003eNaN\u003c/code\u003e.\n+     * \u003cp\u003e\n+     * Infinite values in real or imaginary parts of the input may result in\n+     * infinite or NaN values returned in parts of the result.\u003cpre\u003e\n+     * Examples: \n+     * \u003ccode\u003e\n+     * cosh(1 \u0026plusmn; INFINITY i) \u003d NaN + NaN i\n+     * cosh(\u0026plusmn;INFINITY + i) \u003d INFINITY \u0026plusmn; INFINITY i\n+     * cosh(\u0026plusmn;INFINITY \u0026plusmn; INFINITY i) \u003d NaN + NaN i\u003c/code\u003e\u003c/pre\u003e\n+     * \u003cp\u003e\n+     * Throws \u003ccode\u003eNullPointerException\u003c/code\u003e if z is null.\n+     * \n      * @param z the value whose hyperbolic cosine is to be returned.\n      * @return the hyperbolic cosine of \u003ccode\u003ez\u003c/code\u003e.\n      */\n@@ -124,10 +198,31 @@\n     \n     /**\n      * Compute the\n-     * \u003ca href\u003d\"http://mathworld.wolfram.com/ExponentialFunction.html\"\u003e\n+     * \u003ca href\u003d\"http://mathworld.wolfram.com/ExponentialFunction.html\" TARGET\u003d\"_top\"\u003e\n      * exponential function\u003c/a\u003e for the given complex argument.\n-     * @param z the value.\n-     * @return \u003ci\u003ee\u003c/i\u003e\u003csup\u003e\u003ccode\u003ez\u003c/code\u003e\u003c/sup\u003e.\n+     * \u003cp\u003e\n+     * Implements the formula: \u003cpre\u003e\n+     * \u003ccode\u003e exp(a + bi) \u003d exp(a)cos(b) + exp(a)sin(b)i\u003c/code\u003e\u003c/pre\u003e\n+     * where the (real) functions on the right-hand side are\n+     * {@link java.lang.Math#exp}, {@link java.lang.Math#cos}, and\n+     * {@link java.lang.Math#sin}.\n+     * \u003cp\u003e\n+     * Returns {@link Complex#NaN} if either real or imaginary part of the \n+     * input argument is \u003ccode\u003eNaN\u003c/code\u003e.\n+     * \u003cp\u003e\n+     * Infinite values in real or imaginary parts of the input may result in\n+     * infinite or NaN values returned in parts of the result.\u003cpre\u003e\n+     * Examples: \n+     * \u003ccode\u003e\n+     * exp(1 \u0026plusmn; INFINITY i) \u003d NaN + NaN i\n+     * exp(INFINITY + i) \u003d INFINITY + INFINITY i\n+     * exp(-INFINITY + i) \u003d 0 + 0i\n+     * exp(\u0026plusmn;INFINITY \u0026plusmn; INFINITY i) \u003d NaN + NaN i\u003c/code\u003e\u003c/pre\u003e\n+     * \u003cp\u003e\n+     * Throws \u003ccode\u003eNullPointerException\u003c/code\u003e if z is null.\n+     * \n+     * @param z the value\n+     * @return \u003ci\u003ee\u003c/i\u003e\u003csup\u003e\u003ccode\u003ez\u003c/code\u003e\u003c/sup\u003e\n      */\n     public static Complex exp(Complex z) {\n         if (z.isNaN()) {\n@@ -136,14 +231,36 @@\n         \n         double b \u003d z.getImaginary();\n         double expA \u003d Math.exp(z.getReal());\n-        double sinB \u003d Math.sin(b);\n-        double cosB \u003d Math.cos(b);\n-        return new Complex(expA * cosB, expA * sinB);\n+        return new Complex(expA *  Math.cos(b), expA * Math.sin(b));\n     }\n     \n     /**\n-     * Compute the \u003ca href\u003d\"http://mathworld.wolfram.com/NaturalLogarithm.html\"\u003e\n+     * Compute the \n+     * \u003ca href\u003d\"http://mathworld.wolfram.com/NaturalLogarithm.html\" TARGET\u003d\"_top\"\u003e\n      * natural logarithm\u003c/a\u003e for the given complex argument.\n+     * \u003cp\u003e\n+     * Implements the formula: \u003cpre\u003e\n+     * \u003ccode\u003e log(a + bi) \u003d ln(|a + bi|) + arg(a + bi)i\u003c/code\u003e\u003c/pre\u003e\n+     * where ln on the right hand side is {@link java.lang.Math#log},\n+     * \u003ccode\u003e|a + bi|\u003c/code\u003e is the modulus, {@link Complex#abs},  and\n+     * \u003ccode\u003earg(a + bi) \u003d {@link java.lang.Math#atan2}(b, a)\u003c/code\u003e\n+     * \u003cp\u003e\n+     * Returns {@link Complex#NaN} if either real or imaginary part of the \n+     * input argument is \u003ccode\u003eNaN\u003c/code\u003e.\n+     * \u003cp\u003e\n+     * Infinite (or critical) values in real or imaginary parts of the input may\n+     * result in infinite or NaN values returned in parts of the result.\u003cpre\u003e\n+     * Examples: \n+     * \u003ccode\u003e\n+     * log(1 \u0026plusmn; INFINITY i) \u003d INFINITY \u0026plusmn; (\u0026pi;/2)i\n+     * log(INFINITY + i) \u003d INFINITY + 0i\n+     * log(-INFINITY + i) \u003d INFINITY + \u0026pi;i\n+     * log(INFINITY \u0026plusmn; INFINITY i) \u003d INFINITY \u0026plusmn; (\u0026pi;/4)i\n+     * log(-INFINITY \u0026plusmn; INFINITY i) \u003d INFINITY \u0026plusmn; (3\u0026pi;/4)i\n+     * log(0 + 0i) \u003d -INFINITY + 0i\n+     * \u003c/code\u003e\u003c/pre\u003e\n+     * Throws \u003ccode\u003eNullPointerException\u003c/code\u003e if z is null.\n+     * \n      * @param z the value.\n      * @return ln \u003ccode\u003ez\u003c/code\u003e.\n      */\n@@ -156,20 +273,85 @@\n             Math.atan2(z.getImaginary(), z.getReal()));        \n     }\n     \n+    /**\n+     * Creates a complex number from the given polar representation.\n+     * \u003cp\u003e\n+     * The value returned is \u003ccode\u003er\u0026middot;e\u003csup\u003ei\u0026middot;theta\u003c/sup\u003e\u003c/code\u003e,\n+     * computed as \u003ccode\u003er\u0026middot;cos(theta) + r\u0026middot;sin(theta)i\u003c/code\u003e\n+     * \u003cp\u003e\n+     * If either \u003ccode\u003er\u003c/code\u003e or \u003ccode\u003etheta\u003c/code\u003e is NaN, or \n+     * \u003ccode\u003etheta\u003c/code\u003e is infinite, {@link Complex#NaN} is returned.\n+     * \u003cp\u003e\n+     * If \u003ccode\u003er\u003c/code\u003e is infinite and \u003ccode\u003etheta\u003c/code\u003e is finite, \n+     * infinite or NaN values may be returned in parts of the result, following\n+     * the rules for double arithmetic.\u003cpre\u003e\n+     * Examples: \n+     * \u003ccode\u003e\n+     * polar2Complex(INFINITY, \u0026pi;/4) \u003d INFINITY + INFINITY i\n+     * polar2Complex(INFINITY, 0) \u003d INFINITY + NaN i\n+     * polar2Complex(INFINITY, -\u0026pi;/4) \u003d INFINITY - INFINITY i\n+     * polar2Complex(INFINITY, 5\u0026pi;/4) \u003d -INFINITY - INFINITY i \u003c/code\u003e\u003c/pre\u003e\n+     * \n+     * @param r the modulus of the complex number to create\n+     * @param theta  the argument of the complex number to create\n+     * @return \u003ccode\u003er\u0026middot;e\u003csup\u003ei\u0026middot;theta\u003c/sup\u003e\u003c/code\u003e\n+     * @throws IllegalArgumentException  if r is negative\n+     * @since 1.1\n+     */\n+    public static Complex polar2Complex(double r, double theta) {\n+        if (r \u003c 0) {\n+            throw new IllegalArgumentException\n+                (\"Complex modulus must not be negative\");\n+        }\n+        return new Complex(r * Math.cos(theta), r * Math.sin(theta));\n+    }\n     \n     /**\n      * Returns of value of \u003ccode\u003ey\u003c/code\u003e raised to the power of \u003ccode\u003ex\u003c/code\u003e.\n+     * \u003cp\u003e\n+     * Implements the formula: \u003cpre\u003e\n+     * \u003ccode\u003e y\u003csup\u003ex\u003c/sup\u003e \u003d exp(x\u0026middot;log(y))\u003c/code\u003e\u003c/pre\u003e \n+     * where \u003ccode\u003eexp\u003c/code\u003e and \u003ccode\u003elog\u003c/code\u003e are {@link #exp} and\n+     * {@link #log}, respectively.\n+     * \u003cp\u003e\n+     * Returns {@link Complex#NaN} if either real or imaginary part of the \n+     * input argument is \u003ccode\u003eNaN\u003c/code\u003e or infinite, or if \u003ccode\u003ey\u003c/code\u003e\n+     * equals {@link Complex#ZERO}.\n+     * \n      * @param y the base.\n      * @param x the exponent.\n-     * @return \u003ccode\u003ey\u003c/code\u003e\u003csup\u003e\u003ccode\u003ez\u003c/code\u003e\u003c/sup\u003e.\n+     * @return \u003ccode\u003ey\u003c/code\u003e\u003csup\u003e\u003ccode\u003ex\u003c/code\u003e\u003c/sup\u003e\n+     * @throws NullPointerException if either x or y is null\n      */\n     public static Complex pow(Complex y, Complex x) {\n         return exp(x.multiply(log(y)));\n     }\n     \n     /**\n-     * Compute the \u003ca href\u003d\"http://mathworld.wolfram.com/Sine.html\"\u003esine\u003c/a\u003e\n+     * Compute the \n+     * \u003ca href\u003d\"http://mathworld.wolfram.com/Sine.html\" TARGET\u003d\"_top\"\u003e\n+     * sine\u003c/a\u003e\n      * for the given complex argument.\n+     * \u003cp\u003e\n+      * Implements the formula: \u003cpre\u003e\n+     * \u003ccode\u003e sin(a + bi) \u003d sin(a)cosh(b) - cos(a)sinh(b)i\u003c/code\u003e\u003c/pre\u003e\n+     * where the (real) functions on the right-hand side are\n+     * {@link java.lang.Math#sin}, {@link java.lang.Math#cos}, \n+     * {@link MathUtils#cosh} and {@link MathUtils#sinh}.\n+     * \u003cp\u003e\n+     * Returns {@link Complex#NaN} if either real or imaginary part of the \n+     * input argument is \u003ccode\u003eNaN\u003c/code\u003e.\n+     * \u003cp\u003e\n+     * Infinite values in real or imaginary parts of the input may result in\n+     * infinite or NaN values returned in parts of the result.\u003cpre\u003e\n+     * Examples: \n+     * \u003ccode\u003e\n+     * sin(1 \u0026plusmn; INFINITY i) \u003d 1 \u0026plusmn; INFINITY i\n+     * sin(\u0026plusmn;INFINITY + i) \u003d NaN + NaN i\n+     * sin(\u0026plusmn;INFINITY \u0026plusmn; INFINITY i) \u003d NaN + NaN i\u003c/code\u003e\u003c/pre\u003e\n+     * \n+     * Throws \u003ccode\u003eNullPointerException\u003c/code\u003e if z is null. \n+     * \n      * @param z the value whose sine is to be returned.\n      * @return the sine of \u003ccode\u003ez\u003c/code\u003e.\n      */\n@@ -186,10 +368,30 @@\n     }\n     \n     /**\n-     * Compute the \u003ca href\u003d\"http://mathworld.wolfram.com/HyperbolicSine.html\"\u003e\n+     * Compute the \n+     * \u003ca href\u003d\"http://mathworld.wolfram.com/HyperbolicSine.html\" TARGET\u003d\"_top\"\u003e\n      * hyperbolic sine\u003c/a\u003e for the given complex argument.\n-     * @param z the value whose hyperbolic sine is to be returned.\n-     * @return the hyperbolic sine of \u003ccode\u003ez\u003c/code\u003e.\n+     * \u003cp\u003e\n+     * Implements the formula: \u003cpre\u003e\n+     * \u003ccode\u003e sinh(a + bi) \u003d sinh(a)cos(b)) + cosh(a)sin(b)i\u003c/code\u003e\u003c/pre\u003e\n+     * where the (real) functions on the right-hand side are\n+     * {@link java.lang.Math#sin}, {@link java.lang.Math#cos}, \n+     * {@link MathUtils#cosh} and {@link MathUtils#sinh}.\n+     * \u003cp\u003e\n+     * Returns {@link Complex#NaN} if either real or imaginary part of the \n+     * input argument is \u003ccode\u003eNaN\u003c/code\u003e.\n+     * \u003cp\u003e\n+     * Infinite values in real or imaginary parts of the input may result in\n+     * infinite or NaN values returned in parts of the result.\u003cpre\u003e\n+     * Examples: \n+     * \u003ccode\u003e\n+     * sinh(1 \u0026plusmn; INFINITY i) \u003d NaN + NaN i\n+     * sinh(\u0026plusmn;INFINITY + i) \u003d \u0026plusmn; INFINITY + INFINITY i\n+     * sinh(\u0026plusmn;INFINITY \u0026plusmn; INFINITY i) \u003d NaN + NaN i\u003c/code\u003e\u003c/pre\n+     * \n+     * @param z the value whose hyperbolic sine is to be returned\n+     * @return the hyperbolic sine of \u003ccode\u003ez\u003c/code\u003e\n+     * @throws NullPointerException if \u003ccode\u003ez\u003c/code\u003e is null\n      */\n     public static Complex sinh(Complex z) {\n         if (z.isNaN()) {\n@@ -204,10 +406,38 @@\n     }\n     \n     /**\n-     * Compute the \u003ca href\u003d\"http://mathworld.wolfram.com/SquareRoot.html\"\u003esqure\n-     * root\u003c/a\u003e for the given complex argument.\n-     * @param z the value whose square root is to be returned.\n-     * @return the square root of \u003ccode\u003ez\u003c/code\u003e.\n+     * Compute the \n+     * \u003ca href\u003d\"http://mathworld.wolfram.com/SquareRoot.html\" TARGET\u003d\"_top\"\u003e\n+     * square root\u003c/a\u003e for the given complex argument.\n+     * \u003cp\u003e\n+     * Implements the following algorithm to compute \u003ccode\u003esqrt(a + bi)\u003c/code\u003e: \n+     * \u003col\u003e\u003cli\u003eLet \u003ccode\u003et \u003d sqrt((|a| + |a + bi|) / 2)\u003c/code\u003e\u003c/li\u003e\n+     * \u003cli\u003e\u003cpre\u003eif \u003ccode\u003e a \u0026#8805; 0\u003c/code\u003e return \u003ccode\u003et + (b/2t)i\u003c/code\u003e\n+     *  else return \u003ccode\u003e|b|/2t + sign(b)t i \u003c/code\u003e\u003c/pre\u003e\u003c/li\u003e\n+     * \u003c/ol\u003e\n+     * where \u003cul\u003e\n+     * \u003cli\u003e\u003ccode\u003e|a| \u003d {@link Math#abs}(a)\u003c/code\u003e\u003c/li\u003e\n+     * \u003cli\u003e\u003ccode\u003e|a + bi| \u003d {@link Complex#abs}(a + bi) \u003c/code\u003e\u003c/li\u003e\n+     * \u003cli\u003e\u003ccode\u003esign(b) \u003d  {@link MathUtils#indicator}(b) \u003c/code\u003e\n+     * \u003c/ul\u003e\n+     * \u003cp\u003e\n+     * Returns {@link Complex#NaN} if either real or imaginary part of the \n+     * input argument is \u003ccode\u003eNaN\u003c/code\u003e.\n+     * \u003cp\u003e\n+     * Infinite values in real or imaginary parts of the input may result in\n+     * infinite or NaN values returned in parts of the result.\u003cpre\u003e\n+     * Examples: \n+     * \u003ccode\u003e\n+     * sqrt(1 \u0026plusmn; INFINITY i) \u003d INFINITY + NaN i\n+     * sqrt(INFINITY + i) \u003d INFINITY + 0i\n+     * sqrt(-INFINITY + i) \u003d 0 + INFINITY i\n+     * sqrt(INFINITY \u0026plusmn; INFINITY i) \u003d INFINITY + NaN i\n+     * sqrt(-INFINITY \u0026plusmn; INFINITY i) \u003d NaN \u0026plusmn; INFINITY i\n+     * \u003c/code\u003e\u003c/pre\u003e\n+     * \n+     * @param z the value whose square root is to be returned\n+     * @return the square root of \u003ccode\u003ez\u003c/code\u003e\n+     * @throws NullPointerException if \u003ccode\u003ez\u003c/code\u003e is null\n      */\n     public static Complex sqrt(Complex z) {\n         if (z.isNaN()) {\n@@ -230,20 +460,54 @@\n     }\n     \n     /**\n-     * Compute the \u003ca href\u003d\"http://mathworld.wolfram.com/SquareRoot.html\"\u003esqure\n-     * root of 1 - \u003ccode\u003ez\u003c/code\u003e\u003csup\u003e2\u003c/sup\u003e for the given complex argument.\n-     * @param z the value.\n-     * @return the square root of 1 - \u003ccode\u003ez\u003c/code\u003e\u003csup\u003e2\u003c/sup\u003e.\n+     * Compute the \n+     * \u003ca href\u003d\"http://mathworld.wolfram.com/SquareRoot.html\" TARGET\u003d\"_top\"\u003e\n+     * square root\u003c/a\u003e of 1 - \u003ccode\u003ez\u003c/code\u003e\u003csup\u003e2\u003c/sup\u003e for the given complex\n+     * argument.\n+     * \u003cp\u003e\n+     * Computes the result directly as \n+     * \u003ccode\u003esqrt(Complex.ONE.subtract(z.multiply(z)))\u003c/code\u003e.\n+     * \u003cp\u003e\n+     * Returns {@link Complex#NaN} if either real or imaginary part of the \n+     * input argument is \u003ccode\u003eNaN\u003c/code\u003e.\n+     * \u003cp\u003e\n+     * Infinite values in real or imaginary parts of the input may result in\n+     * infinite or NaN values returned in parts of the result. \n+     * \n+     * @param z the value\n+     * @return the square root of 1 - \u003ccode\u003ez\u003c/code\u003e\u003csup\u003e2\u003c/sup\u003e\n+     * @throws NullPointerException if \u003ccode\u003ez\u003c/code\u003e is null\n      */\n     public static Complex sqrt1z(Complex z) {\n         return sqrt(Complex.ONE.subtract(z.multiply(z)));\n     }\n     \n     /**\n-     * Compute the \u003ca href\u003d\"http://mathworld.wolfram.com/Tangent.html\"\u003e\n+     * Compute the \n+     * \u003ca href\u003d\"http://mathworld.wolfram.com/Tangent.html\" TARGET\u003d\"_top\"\u003e\n      * tangent\u003c/a\u003e for the given complex argument.\n-     * @param z the value whose tangent is to be returned.\n-     * @return the tangent of \u003ccode\u003ez\u003c/code\u003e.\n+     * \u003cp\u003e\n+     * Implements the formula: \u003cpre\u003e\n+     * \u003ccode\u003etan(a + bi) \u003d sin(2a)/(cos(2a)+cosh(2b)) + [sinh(2b)/(cos(2a)+cosh(2b))]i\u003c/code\u003e\u003c/pre\u003e\n+     * where the (real) functions on the right-hand side are\n+     * {@link java.lang.Math#sin}, {@link java.lang.Math#cos}, \n+     * {@link MathUtils#cosh} and {@link MathUtils#sinh}.\n+     * \u003cp\u003e\n+     * Returns {@link Complex#NaN} if either real or imaginary part of the \n+     * input argument is \u003ccode\u003eNaN\u003c/code\u003e.\n+     * \u003cp\u003e\n+     * Infinite (or critical) values in real or imaginary parts of the input may\n+     * result in infinite or NaN values returned in parts of the result.\u003cpre\u003e\n+     * Examples: \n+     * \u003ccode\u003e\n+     * tan(1 \u0026plusmn; INFINITY i) \u003d 0 + NaN i\n+     * tan(\u0026plusmn;INFINITY + i) \u003d NaN + NaN i\n+     * tan(\u0026plusmn;INFINITY \u0026plusmn; INFINITY i) \u003d NaN + NaN i\n+     * tan(\u0026plusmn;\u0026pi/2 + 0 i) \u003d \u0026plusmn;INFINITY + NaN i\u003c/code\u003e\u003c/pre\u003e\n+     * \n+     * @param z the value whose tangent is to be returned\n+     * @return the tangent of \u003ccode\u003ez\u003c/code\u003e\n+     * @throws NullPointerException if \u003ccode\u003ez\u003c/code\u003e is null\n      */\n     public static Complex tan(Complex z) {\n         if (z.isNaN()) {\n@@ -259,10 +523,30 @@\n     \n     /**\n      * Compute the\n-     * \u003ca href\u003d\"http://mathworld.wolfram.com/HyperbolicTangent.html\"\u003e\n+     * \u003ca href\u003d\"http://mathworld.wolfram.com/HyperbolicTangent.html\" TARGET\u003d\"_top\"\u003e\n      * hyperbolic tangent\u003c/a\u003e for the given complex argument.\n-     * @param z the value whose hyperbolic tangent is to be returned.\n-     * @return the hyperbolic tangent of \u003ccode\u003ez\u003c/code\u003e.\n+    * \u003cp\u003e\n+     * Implements the formula: \u003cpre\u003e\n+     * \u003ccode\u003etan(a + bi) \u003d sinh(2a)/(cosh(2a)+cos(2b)) + [sin(2b)/(cosh(2a)+cos(2b))]i\u003c/code\u003e\u003c/pre\u003e\n+     * where the (real) functions on the right-hand side are\n+     * {@link java.lang.Math#sin}, {@link java.lang.Math#cos}, \n+     * {@link MathUtils#cosh} and {@link MathUtils#sinh}.\n+     * \u003cp\u003e\n+     * Returns {@link Complex#NaN} if either real or imaginary part of the \n+     * input argument is \u003ccode\u003eNaN\u003c/code\u003e.\n+     * \u003cp\u003e\n+     * Infinite values in real or imaginary parts of the input may result in\n+     * infinite or NaN values returned in parts of the result.\u003cpre\u003e\n+     * Examples: \n+     * \u003ccode\u003e\n+     * tanh(1 \u0026plusmn; INFINITY i) \u003d NaN + NaN i\n+     * tanh(\u0026plusmn;INFINITY + i) \u003d NaN + 0 i\n+     * tanh(\u0026plusmn;INFINITY \u0026plusmn; INFINITY i) \u003d NaN + NaN i\n+     * tanh(0 + (\u0026pi/2)i) \u003d NaN + INFINITY i\u003c/code\u003e\u003c/pre\u003e\n+     *\n+     * @param z the value whose hyperbolic tangent is to be returned\n+     * @return the hyperbolic tangent of \u003ccode\u003ez\u003c/code\u003e\n+     * @throws NullPointerException if \u003ccode\u003ez\u003c/code\u003e is null\n      */\n     public static Complex tanh(Complex z) {\n         if (z.isNaN()) {\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [10179,11624]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Javadoc [1621,2246]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Javadoc [2481,3098]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Javadoc [3333,3949]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Javadoc [4229,5363]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Javadoc [5683,6877]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Javadoc [7197,8340]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Javadoc [8626,9942]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Javadoc [11634,12325]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Javadoc [12435,13573]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Javadoc [13892,15067]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Javadoc [15387,16877]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Javadoc [17442,18203]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Javadoc [18323,19543]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Javadoc [19894,21129]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: are trigonometric, exponential, log, power and square root functions. [835,904]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003cp\u003e [907,910]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: See individual method javadocs for the computational formulas used. [1066,1133]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: In general, NaN values in either real or imaginary parts of input arguments [1137,1212]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: result in  [1216,1226]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [1226,1245]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement:  returned.  Otherwise, infinite or NaN values [1245,1290]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: are returned as they arise in computing the real functions specified in the [1294,1369]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: computational formulas.  Null arguments result in NullPointerExceptions. [1373,1445]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TagElement [1632,2051]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [2132,2176]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [2184,2238]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TagElement [2492,2905]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [3036,3090]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TagElement [3344,3752]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [3834,3879]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [3887,3941]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TagElement [4240,5184]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [5257,5293]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [5301,5355]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TagElement [5694,6736]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TagElement [7208,8249]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [8291,8332]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TagElement [8637,9865]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TagElement [11645,12137]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [12209,12256]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [12264,12317]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TagElement [12446,13458]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TagElement [13903,14870]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [14952,14997]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [15005,15059]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [15398,16688]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [16766,16807]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [16815,16869]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [17453,18034]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [18076,18133]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [18141,18195]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TagElement [18334,19362]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [19436,19473]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [19481,19535]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TagElement [19905,20927]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [21011,21059]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [21067,21121]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: Compute the  [1632,1644]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003ca href\u003d\"http://mathworld.wolfram.com/InverseCosine.html\" TARGET\u003d\"_top\"\u003e [1652,1724]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003cp\u003e [1790,1793]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: Implements the formula: \u003cpre\u003e [1801,1830]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003ccode\u003e acos(z) \u003d -i (log(z + i (sqrt(1 - z\u003csup\u003e2\u003c/sup\u003e))))\u003c/code\u003e\u003c/pre\u003e [1838,1909]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003cp\u003e [1917,1920]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: Returns  [1928,1936]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [1936,1955]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement:  if either real or imaginary part of the  [1955,1996]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: input argument is \u003ccode\u003eNaN\u003c/code\u003e or infinite. [2004,2051]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: Compute the  [2492,2504]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003ca href\u003d\"http://mathworld.wolfram.com/InverseSine.html\" TARGET\u003d\"_top\"\u003e [2512,2582]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003cp\u003e [2646,2649]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: Implements the formula: \u003cpre\u003e [2657,2686]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003ccode\u003e asin(z) \u003d -i (log(sqrt(1 - z\u003csup\u003e2\u003c/sup\u003e) + iz)) \u003c/code\u003e\u003c/pre\u003e [2694,2763]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003cp\u003e [2771,2774]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: Returns  [2782,2790]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [2790,2809]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement:  if either real or imaginary part of the  [2809,2850]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: input argument is \u003ccode\u003eNaN\u003c/code\u003e or infinite. [2858,2905]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: Compute the  [3344,3356]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003ca href\u003d\"http://mathworld.wolfram.com/InverseTangent.html\" TARGET\u003d\"_top\"\u003e [3364,3437]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003cp\u003e [3504,3507]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: Implements the formula: \u003cpre\u003e [3515,3544]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003ccode\u003e atan(z) \u003d (i/2) log((i + z)/(i - z)) \u003c/code\u003e\u003c/pre\u003e [3552,3609]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003cp\u003e [3617,3620]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: Returns  [3628,3636]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [3636,3655]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement:  if either real or imaginary part of the  [3655,3696]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: input argument is \u003ccode\u003eNaN\u003c/code\u003e or infinite.  [3704,3752]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: Compute the  [4240,4252]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003ca href\u003d\"http://mathworld.wolfram.com/Cosine.html\" TARGET\u003d\"_top\"\u003e [4260,4325]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: cosine\u003c/a\u003e [4333,4343]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003cp\u003e [4390,4393]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: Implements the formula: \u003cpre\u003e [4401,4430]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003ccode\u003e cos(a + bi) \u003d cos(a)cosh(b) - sin(a)sinh(b)i\u003c/code\u003e\u003c/pre\u003e [4438,4502]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: where the (real) functions on the right-hand side are [4510,4563]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [4571,4597]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: ,  [4597,4599]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [4599,4625]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: ,  [4625,4627]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [4635,4657]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement:  and  [4657,4662]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [4662,4684]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: . [4684,4685]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003cp\u003e [4693,4696]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: Returns  [4704,4712]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [4712,4731]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement:  if either real or imaginary part of the  [4731,4772]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: input argument is \u003ccode\u003eNaN\u003c/code\u003e. [4780,4815]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003cp\u003e [4823,4826]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: Infinite values in real or imaginary parts of the input may result in [4834,4903]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: infinite or NaN values returned in parts of the result.\u003cpre\u003e [4911,4971]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: Examples:  [4979,4989]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003ccode\u003e [4997,5003]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: cos(1 \u0026plusmn; INFINITY i) \u003d 1 \u0026#x2213; INFINITY i [5011,5061]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: cos(\u0026plusmn;INFINITY + i) \u003d NaN + NaN i [5069,5108]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: cos(\u0026plusmn;INFINITY \u0026plusmn; INFINITY i) \u003d NaN + NaN i\u003c/code\u003e\u003c/pre\u003e [5116,5184]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: Compute the  [5694,5706]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003ca href\u003d\"http://mathworld.wolfram.com/HyperbolicCosine.html\" TARGET\u003d\"_top\"\u003e [5714,5789]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003cp\u003e [5858,5861]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: Implements the formula: \u003cpre\u003e [5869,5898]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003ccode\u003e cosh(a + bi) \u003d cosh(a)cos(b) + sinh(a)sin(b)i\u003c/code\u003e\u003c/pre\u003e [5906,5971]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: where the (real) functions on the right-hand side are [5979,6032]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [6040,6066]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: ,  [6066,6068]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [6068,6094]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: ,  [6094,6096]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [6104,6126]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement:  and  [6126,6131]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [6131,6153]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: . [6153,6154]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003cp\u003e [6162,6165]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: Returns  [6173,6181]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [6181,6200]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement:  if either real or imaginary part of the  [6200,6241]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: input argument is \u003ccode\u003eNaN\u003c/code\u003e. [6249,6284]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003cp\u003e [6292,6295]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: Infinite values in real or imaginary parts of the input may result in [6303,6372]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: infinite or NaN values returned in parts of the result.\u003cpre\u003e [6380,6440]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: Examples:  [6448,6458]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003ccode\u003e [6466,6472]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: cosh(1 \u0026plusmn; INFINITY i) \u003d NaN + NaN i [6480,6521]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: cosh(\u0026plusmn;INFINITY + i) \u003d INFINITY \u0026plusmn; INFINITY i [6529,6586]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: cosh(\u0026plusmn;INFINITY \u0026plusmn; INFINITY i) \u003d NaN + NaN i\u003c/code\u003e\u003c/pre\u003e [6594,6663]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003cp\u003e [6671,6674]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: Throws \u003ccode\u003eNullPointerException\u003c/code\u003e if z is null. [6682,6736]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003ca href\u003d\"http://mathworld.wolfram.com/ExponentialFunction.html\" TARGET\u003d\"_top\"\u003e [7227,7305]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003cp\u003e [7377,7380]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: Implements the formula: \u003cpre\u003e [7388,7417]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003ccode\u003e exp(a + bi) \u003d exp(a)cos(b) + exp(a)sin(b)i\u003c/code\u003e\u003c/pre\u003e [7425,7487]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: where the (real) functions on the right-hand side are [7495,7548]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [7556,7582]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: ,  [7582,7584]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [7584,7610]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: , and [7610,7615]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [7623,7649]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: . [7649,7650]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003cp\u003e [7658,7661]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: Returns  [7669,7677]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [7677,7696]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement:  if either real or imaginary part of the  [7696,7737]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: input argument is \u003ccode\u003eNaN\u003c/code\u003e. [7745,7780]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003cp\u003e [7788,7791]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: Infinite values in real or imaginary parts of the input may result in [7799,7868]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: infinite or NaN values returned in parts of the result.\u003cpre\u003e [7876,7936]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: Examples:  [7944,7954]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003ccode\u003e [7962,7968]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: exp(1 \u0026plusmn; INFINITY i) \u003d NaN + NaN i [7976,8016]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: exp(INFINITY + i) \u003d INFINITY + INFINITY i [8024,8065]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: exp(-INFINITY + i) \u003d 0 + 0i [8073,8100]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: exp(\u0026plusmn;INFINITY \u0026plusmn; INFINITY i) \u003d NaN + NaN i\u003c/code\u003e\u003c/pre\u003e [8108,8176]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003cp\u003e [8184,8187]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: Throws \u003ccode\u003eNullPointerException\u003c/code\u003e if z is null. [8195,8249]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: Compute the  [8637,8649]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003ca href\u003d\"http://mathworld.wolfram.com/NaturalLogarithm.html\" TARGET\u003d\"_top\"\u003e [8657,8732]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003cp\u003e [8801,8804]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: Implements the formula: \u003cpre\u003e [8812,8841]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003ccode\u003e log(a + bi) \u003d ln(|a + bi|) + arg(a + bi)i\u003c/code\u003e\u003c/pre\u003e [8849,8910]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: where ln on the right hand side is  [8918,8953]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [8953,8979]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: , [8979,8980]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003ccode\u003e|a + bi|\u003c/code\u003e is the modulus,  [8988,9026]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [9026,9045]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: ,  and [9045,9051]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003ccode\u003earg(a + bi) \u003d  [9059,9079]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [9079,9107]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: (b, a)\u003c/code\u003e [9107,9120]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003cp\u003e [9128,9131]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: Returns  [9139,9147]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [9147,9166]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement:  if either real or imaginary part of the  [9166,9207]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: input argument is \u003ccode\u003eNaN\u003c/code\u003e. [9215,9250]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003cp\u003e [9258,9261]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: Infinite (or critical) values in real or imaginary parts of the input may [9269,9342]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: result in infinite or NaN values returned in parts of the result.\u003cpre\u003e [9350,9420]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: Examples:  [9428,9438]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003ccode\u003e [9446,9452]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: log(1 \u0026plusmn; INFINITY i) \u003d INFINITY \u0026plusmn; (\u0026pi;/2)i [9460,9516]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: log(INFINITY + i) \u003d INFINITY + 0i [9524,9557]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: log(-INFINITY + i) \u003d INFINITY + \u0026pi;i [9565,9602]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: log(INFINITY \u0026plusmn; INFINITY i) \u003d INFINITY \u0026plusmn; (\u0026pi;/4)i [9610,9673]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: log(-INFINITY \u0026plusmn; INFINITY i) \u003d INFINITY \u0026plusmn; (3\u0026pi;/4)i [9681,9746]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: log(0 + 0i) \u003d -INFINITY + 0i [9754,9782]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003c/code\u003e\u003c/pre\u003e [9790,9803]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: Throws \u003ccode\u003eNullPointerException\u003c/code\u003e if z is null. [9811,9865]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003cp\u003e [11726,11729]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: Implements the formula: \u003cpre\u003e [11737,11766]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003ccode\u003e y\u003csup\u003ex\u003c/sup\u003e \u003d exp(x\u0026middot;log(y))\u003c/code\u003e\u003c/pre\u003e  [11774,11831]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: where \u003ccode\u003eexp\u003c/code\u003e and \u003ccode\u003elog\u003c/code\u003e are  [11839,11887]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [11887,11899]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement:  and [11899,11903]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [11911,11923]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: , respectively. [11923,11938]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003cp\u003e [11946,11949]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: Returns  [11957,11965]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [11965,11984]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement:  if either real or imaginary part of the  [11984,12025]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: input argument is \u003ccode\u003eNaN\u003c/code\u003e or infinite, or if \u003ccode\u003ey\u003c/code\u003e [12033,12101]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: equals  [12109,12116]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [12116,12136]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: . [12136,12137]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: Compute the  [12446,12458]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003ca href\u003d\"http://mathworld.wolfram.com/Sine.html\" TARGET\u003d\"_top\"\u003e [12466,12529]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: sine\u003c/a\u003e [12537,12545]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003cp\u003e [12592,12595]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: Implements the formula: \u003cpre\u003e [12604,12633]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003ccode\u003e sin(a + bi) \u003d sin(a)cosh(b) - cos(a)sinh(b)i\u003c/code\u003e\u003c/pre\u003e [12641,12705]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: where the (real) functions on the right-hand side are [12713,12766]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [12774,12800]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: ,  [12800,12802]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [12802,12828]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: ,  [12828,12830]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [12838,12860]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement:  and  [12860,12865]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [12865,12887]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: . [12887,12888]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003cp\u003e [12896,12899]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: Returns  [12907,12915]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [12915,12934]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement:  if either real or imaginary part of the  [12934,12975]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: input argument is \u003ccode\u003eNaN\u003c/code\u003e. [12983,13018]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003cp\u003e [13026,13029]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: Infinite values in real or imaginary parts of the input may result in [13037,13106]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: infinite or NaN values returned in parts of the result.\u003cpre\u003e [13114,13174]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: Examples:  [13182,13192]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003ccode\u003e [13200,13206]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: sin(1 \u0026plusmn; INFINITY i) \u003d 1 \u0026plusmn; INFINITY i [13214,13264]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: sin(\u0026plusmn;INFINITY + i) \u003d NaN + NaN i [13272,13311]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: sin(\u0026plusmn;INFINITY \u0026plusmn; INFINITY i) \u003d NaN + NaN i\u003c/code\u003e\u003c/pre\u003e [13319,13387]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: Throws \u003ccode\u003eNullPointerException\u003c/code\u003e if z is null.  [13403,13458]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: Compute the  [13903,13915]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003ca href\u003d\"http://mathworld.wolfram.com/HyperbolicSine.html\" TARGET\u003d\"_top\"\u003e [13923,13996]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003cp\u003e [14063,14066]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: Implements the formula: \u003cpre\u003e [14074,14103]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003ccode\u003e sinh(a + bi) \u003d sinh(a)cos(b)) + cosh(a)sin(b)i\u003c/code\u003e\u003c/pre\u003e [14111,14177]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: where the (real) functions on the right-hand side are [14185,14238]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [14246,14272]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: ,  [14272,14274]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [14274,14300]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: ,  [14300,14302]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [14310,14332]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement:  and  [14332,14337]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [14337,14359]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: . [14359,14360]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003cp\u003e [14368,14371]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: Returns  [14379,14387]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [14387,14406]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement:  if either real or imaginary part of the  [14406,14447]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: input argument is \u003ccode\u003eNaN\u003c/code\u003e. [14455,14490]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003cp\u003e [14498,14501]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: Infinite values in real or imaginary parts of the input may result in [14509,14578]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: infinite or NaN values returned in parts of the result.\u003cpre\u003e [14586,14646]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: Examples:  [14654,14664]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003ccode\u003e [14672,14678]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: sinh(1 \u0026plusmn; INFINITY i) \u003d NaN + NaN i [14686,14727]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: sinh(\u0026plusmn;INFINITY + i) \u003d \u0026plusmn; INFINITY + INFINITY i [14735,14794]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: sinh(\u0026plusmn;INFINITY \u0026plusmn; INFINITY i) \u003d NaN + NaN i\u003c/code\u003e\u003c/pre [14802,14870]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: Compute the  [18334,18346]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003ca href\u003d\"http://mathworld.wolfram.com/Tangent.html\" TARGET\u003d\"_top\"\u003e [18354,18420]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003cp\u003e [18479,18482]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: Implements the formula: \u003cpre\u003e [18490,18519]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003ccode\u003etan(a + bi) \u003d sin(2a)/(cos(2a)+cosh(2b)) + [sinh(2b)/(cos(2a)+cosh(2b))]i\u003c/code\u003e\u003c/pre\u003e [18527,18619]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: where the (real) functions on the right-hand side are [18627,18680]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [18688,18714]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: ,  [18714,18716]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [18716,18742]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: ,  [18742,18744]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [18752,18774]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement:  and  [18774,18779]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [18779,18801]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: . [18801,18802]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003cp\u003e [18810,18813]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: Returns  [18821,18829]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [18829,18848]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement:  if either real or imaginary part of the  [18848,18889]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: input argument is \u003ccode\u003eNaN\u003c/code\u003e. [18897,18932]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003cp\u003e [18940,18943]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: Infinite (or critical) values in real or imaginary parts of the input may [18951,19024]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: result in infinite or NaN values returned in parts of the result.\u003cpre\u003e [19032,19102]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: Examples:  [19110,19120]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003ccode\u003e [19128,19134]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: tan(1 \u0026plusmn; INFINITY i) \u003d 0 + NaN i [19142,19180]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: tan(\u0026plusmn;INFINITY + i) \u003d NaN + NaN i [19188,19227]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: tan(\u0026plusmn;INFINITY \u0026plusmn; INFINITY i) \u003d NaN + NaN i [19235,19290]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: tan(\u0026plusmn;\u0026pi/2 + 0 i) \u003d \u0026plusmn;INFINITY + NaN i\u003c/code\u003e\u003c/pre\u003e [19298,19362]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003ca href\u003d\"http://mathworld.wolfram.com/HyperbolicTangent.html\" TARGET\u003d\"_top\"\u003e [19924,20000]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003cp\u003e [20069,20072]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: Implements the formula: \u003cpre\u003e [20080,20109]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003ccode\u003etan(a + bi) \u003d sinh(2a)/(cosh(2a)+cos(2b)) + [sin(2b)/(cosh(2a)+cos(2b))]i\u003c/code\u003e\u003c/pre\u003e [20117,20209]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: where the (real) functions on the right-hand side are [20217,20270]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [20278,20304]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: ,  [20304,20306]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [20306,20332]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: ,  [20332,20334]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [20342,20364]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement:  and  [20364,20369]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [20369,20391]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: . [20391,20392]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003cp\u003e [20400,20403]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: Returns  [20411,20419]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [20419,20438]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement:  if either real or imaginary part of the  [20438,20479]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: input argument is \u003ccode\u003eNaN\u003c/code\u003e. [20487,20522]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003cp\u003e [20530,20533]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: Infinite values in real or imaginary parts of the input may result in [20541,20610]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: infinite or NaN values returned in parts of the result.\u003cpre\u003e [20618,20678]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: Examples:  [20686,20696]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003ccode\u003e [20704,20710]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: tanh(1 \u0026plusmn; INFINITY i) \u003d NaN + NaN i [20718,20759]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: tanh(\u0026plusmn;INFINITY + i) \u003d NaN + 0 i [20767,20805]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: tanh(\u0026plusmn;INFINITY \u0026plusmn; INFINITY i) \u003d NaN + NaN i [20813,20869]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: tanh(0 + (\u0026pi/2)i) \u003d NaN + INFINITY i\u003c/code\u003e\u003c/pre\u003e [20877,20927]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "InfixExpression [8569,8588]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "InfixExpression [8590,8608]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: Compute the \u003ca href\u003d\"http://mathworld.wolfram.com/InverseCosine.html\"\u003e [1178,1248]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TagElement [1178,1306]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [1380,1425]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Javadoc [1167,1433]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: Compute the \u003ca href\u003d\"http://mathworld.wolfram.com/InverseSine.html\"\u003e [1679,1747]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TagElement [1679,1803]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Javadoc [1668,1926]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: Compute the \u003ca href\u003d\"http://mathworld.wolfram.com/InverseTangent.html\"\u003e [2172,2243]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TagElement [2172,2302]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [2377,2423]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Javadoc [2161,2431]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: Compute the \u003ca href\u003d\"http://mathworld.wolfram.com/Cosine.html\"\u003ecosine\u003c/a\u003e [2731,2804]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TagElement [2731,2843]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [2909,2946]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Javadoc [2720,2954]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: Compute the \u003ca href\u003d\"http://mathworld.wolfram.com/HyperbolicCosine.html\"\u003e [3285,3358]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TagElement [3285,3419]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Javadoc [3274,3552]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: \u003ca href\u003d\"http://mathworld.wolfram.com/ExponentialFunction.html\"\u003e [3902,3966]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TagElement [3883,4030]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [4065,4107]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Javadoc [3872,4115]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "PrimitiveType: double [4325,4331]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: sinB [4332,4336]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "VariableDeclarationFragment [4332,4350]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "VariableDeclarationStatement [4325,4351]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "PrimitiveType: double [4360,4366]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: cosB [4367,4371]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "VariableDeclarationFragment [4367,4385]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "VariableDeclarationStatement [4360,4386]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: cosB [4421,4425]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "InfixExpression [4414,4425]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: sinB [4434,4438]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "InfixExpression [4427,4438]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: Compute the \u003ca href\u003d\"http://mathworld.wolfram.com/NaturalLogarithm.html\"\u003e [4467,4540]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TagElement [4467,4601]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Javadoc [4456,4670]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TagElement [4923,4996]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [5060,5108]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Javadoc [4912,5116]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: Compute the \u003ca href\u003d\"http://mathworld.wolfram.com/Sine.html\"\u003esine\u003c/a\u003e [5237,5306]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TagElement [5237,5345]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Javadoc [5226,5452]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: Compute the \u003ca href\u003d\"http://mathworld.wolfram.com/HyperbolicSine.html\"\u003e [5782,5853]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TagElement [5782,5912]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [5987,6033]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Javadoc [5771,6041]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [6372,6492]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [6563,6605]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Javadoc [6361,6613]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [7189,7339]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [7374,7432]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Javadoc [7178,7440]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: Compute the \u003ca href\u003d\"http://mathworld.wolfram.com/Tangent.html\"\u003e [7571,7635]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TagElement [7571,7686]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [7753,7791]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Javadoc [7560,7799]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: \u003ca href\u003d\"http://mathworld.wolfram.com/HyperbolicTangent.html\"\u003e [8180,8242]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TagElement [8161,8304]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [8382,8431]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Javadoc [8150,8439]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java",
        "src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [],
          "num": 0
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "38"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "38"
          ],
          "num": 1
        }
      ],
      "diff": "diff --git a/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java b/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\nindex da86854..33b5a69 100644\n--- a/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\n+++ b/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\n@@ -35,7 +35,7 @@\n     implements ContinuousDistribution, Serializable {\n \n     /** Serializable version identifier */\n-    static final long serialVersionUID \u003d -38038050983108802L;\n+    private static final long serialVersionUID \u003d -38038050983108802L;\n     \n     /**\n      * Default constructor.\n",
      "operations": [
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: private [1384,1391]"
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/math/distribution/AbstractDistribution.java",
        "src/java/org/apache/commons/math/distribution/AbstractDistribution.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [],
          "num": 0
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "31"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "31"
          ],
          "num": 1
        }
      ],
      "diff": "diff --git a/src/java/org/apache/commons/math/distribution/AbstractDistribution.java b/src/java/org/apache/commons/math/distribution/AbstractDistribution.java\nindex 04ff276..4e40401 100644\n--- a/src/java/org/apache/commons/math/distribution/AbstractDistribution.java\n+++ b/src/java/org/apache/commons/math/distribution/AbstractDistribution.java\n@@ -28,7 +28,7 @@\n     implements Distribution, Serializable {\n \n     /** Serializable version identifier */\n-    static final long serialVersionUID \u003d -38038050983108802L;\n+    private static final long serialVersionUID \u003d -38038050983108802L;\n     \n     /**\n      * Default constructor.\n",
      "operations": [
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: private [966,973]"
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java",
        "src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [],
          "num": 0
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "34"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "34"
          ],
          "num": 1
        }
      ],
      "diff": "diff --git a/src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java b/src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java\nindex eff49ae..02ce01f 100644\n--- a/src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java\n+++ b/src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java\n@@ -31,7 +31,7 @@\n     implements IntegerDistribution, Serializable {\n         \n     /** Serializable version identifier */\n-    static final long serialVersionUID \u003d -1146319659338487221L;\n+    private static final long serialVersionUID \u003d -1146319659338487221L;\n     \n     /**\n      * Default constructor.\n",
      "operations": [
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: private [1152,1159]"
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java",
        "src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [],
          "num": 0
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "34"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "34"
          ],
          "num": 1
        }
      ],
      "diff": "diff --git a/src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java b/src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java\nindex ce7f04b..db0c7f1 100644\n--- a/src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java\n@@ -31,7 +31,7 @@\n     implements BinomialDistribution, Serializable {\n \n     /** Serializable version identifier */\n-    static final long serialVersionUID \u003d 6751309484392813623L;\n+    private static final long serialVersionUID \u003d 6751309484392813623L;\n \n     /** The number of trials. */\n     private int numberOfTrials;\n",
      "operations": [
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: private [1119,1126]"
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java",
        "src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [],
          "num": 0
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "32"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "32"
          ],
          "num": 1
        }
      ],
      "diff": "diff --git a/src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java b/src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java\nindex 2633809..df04780 100644\n--- a/src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java\n@@ -29,7 +29,7 @@\n         implements CauchyDistribution, Serializable {\r\n     \r\n     /** Serializable version identifier */\r\n-    static final long serialVersionUID \u003d 8589540077390120676L;\r\n+    private static final long serialVersionUID \u003d 8589540077390120676L;\r\n \r\n     /** The median of this distribution. */\r\n     private double median \u003d 0;\r\n",
      "operations": [
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: private [1059,1066]"
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java",
        "src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [],
          "num": 0
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "32"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "32"
          ],
          "num": 1
        }
      ],
      "diff": "diff --git a/src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java b/src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java\nindex 0b1db5b..fa9dfc6 100644\n--- a/src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java\n@@ -29,7 +29,7 @@\n     implements ChiSquaredDistribution, Serializable  {\n     \n     /** Serializable version identifier */\n-    static final long serialVersionUID \u003d -8352658048349159782L;\n+    private static final long serialVersionUID \u003d -8352658048349159782L;\n \n     /** Internal Gamma distribution. */    \n     private GammaDistribution gamma;\n",
      "operations": [
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: private [1040,1047]"
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java",
        "src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [],
          "num": 0
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "23",
            "31"
          ],
          "num": 2
        },
        {
          "qualified_names": [
            "23",
            "31"
          ],
          "num": 2
        }
      ],
      "diff": "diff --git a/src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java b/src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java\nindex c8d1fa4..1b271bb 100644\n--- a/src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java\n@@ -20,7 +20,7 @@\n import org.apache.commons.math.MathException;\n \n /**\n- * The default implementation of {@link ExponentialDistribution}\n+ * The default implementation of {@link ExponentialDistribution}.\n  *\n  * @version $Revision$ $Date$\n  */\n@@ -28,7 +28,7 @@\n     implements ExponentialDistribution, Serializable {\n \n     /** Serializable version identifier */\n-    static final long serialVersionUID \u003d 2401296428283614780L;\n+    private static final long serialVersionUID \u003d 2401296428283614780L;\n     \n     /** The mean of this distribution. */\n     private double mean;\n",
      "operations": [
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: private [1035,1042]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: . [813,814]"
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/math/distribution/FDistributionImpl.java",
        "src/java/org/apache/commons/math/distribution/FDistributionImpl.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [],
          "num": 0
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "34"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "34"
          ],
          "num": 1
        }
      ],
      "diff": "diff --git a/src/java/org/apache/commons/math/distribution/FDistributionImpl.java b/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\nindex c47f954..a9a1de4 100644\n--- a/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\n@@ -31,7 +31,7 @@\n     implements FDistribution, Serializable  {\n \n     /** Serializable version identifier */\n-    static final long serialVersionUID \u003d -8516354193418641566L;\n+    private static final long serialVersionUID \u003d -8516354193418641566L;\n \n     /** The numerator degrees of freedom*/\n     private double numeratorDegreesOfFreedom;\n",
      "operations": [
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: private [1091,1098]"
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java",
        "src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [],
          "num": 0
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "24",
            "32"
          ],
          "num": 2
        },
        {
          "qualified_names": [
            "24",
            "32"
          ],
          "num": 2
        }
      ],
      "diff": "diff --git a/src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java b/src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java\nindex d635870..9fc7659 100644\n--- a/src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java\n@@ -21,7 +21,7 @@\n import org.apache.commons.math.special.Gamma;\n \n /**\n- * The default implementation of {@link GammaDistribution}\n+ * The default implementation of {@link GammaDistribution}.\n  *\n  * @version $Revision$ $Date$\n  */\n@@ -29,7 +29,7 @@\n     implements GammaDistribution, Serializable  {\n \n     /** Serializable version identifier */\n-    static final long serialVersionUID \u003d -3239549463135430361L;\n+    private static final long serialVersionUID \u003d -3239549463135430361L;\n \n     /** The shape parameter. */\n     private double alpha;\n",
      "operations": [
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: private [1064,1071]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: . [853,854]"
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java",
        "src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "setSampleSize",
            "upperCumulativeProbability",
            "HypergeometricDistributionImpl",
            "innerCumulativeProbability"
          ],
          "num": 4
        },
        {
          "qualified_names": [
            "upperCumulativeProbability",
            "innerCumulativeProbability",
            "setSampleSize",
            "HypergeometricDistributionImpl"
          ],
          "num": 4
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "33",
            "56",
            "57",
            "244",
            "263",
            "264",
            "265",
            "276",
            "281",
            "296",
            "298",
            "299",
            "300",
            "301",
            "302",
            "303",
            "304"
          ],
          "num": 17
        },
        {
          "qualified_names": [
            "33",
            "56",
            "57",
            "244",
            "263",
            "264",
            "265",
            "276",
            "281",
            "296",
            "298",
            "299",
            "300",
            "301",
            "302",
            "303",
            "304"
          ],
          "num": 17
        }
      ],
      "diff": "diff --git a/src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java b/src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java\nindex 822329f..4c27422 100644\n--- a/src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java\n@@ -30,7 +30,7 @@\n {\n \n     /** Serializable version identifier */\n-    static final long serialVersionUID \u003d -436928820673516179L;\n+    private static final long serialVersionUID \u003d -436928820673516179L;\n \n     /** The number of successes in the population. */\n     private int numberOfSuccesses;\n@@ -53,8 +53,8 @@\n         super();\n         if (numberOfSuccesses \u003e populationSize) {\n             throw new IllegalArgumentException(\n-            \t\"number of successes must be less than or equal to \" +\n-            \t\"population size\");\n+                \"number of successes must be less than or equal to \" +\n+                \"population size\");\n         }\n         if (sampleSize \u003e populationSize) {\n             throw new IllegalArgumentException(\n@@ -241,7 +241,7 @@\n         populationSize \u003d size;\n     }\n     \n-\t/**\n+    /**\n      * Modify the sample size.\n      * @param size the new sample size.\n      * @throws IllegalArgumentException if \u003ccode\u003esize\u003c/code\u003e is negative.\n@@ -260,9 +260,9 @@\n      * @return upper tail CDF for this distribution.\n      * @since 1.1\n      */\n-\tpublic double upperCumulativeProbability(int x) {\n-    \tdouble ret;\n-    \t\n+    public double upperCumulativeProbability(int x) {\n+        double ret;\n+        \n         int n \u003d getPopulationSize();\n         int m \u003d getNumberOfSuccesses();\n         int k \u003d getSampleSize();\n@@ -273,12 +273,12 @@\n         } else if(x \u003e domain[1]) {\n             ret \u003d 0.0;\n         } else {\n-        \tret \u003d innerCumulativeProbability(domain[1], x, -1, n, m, k);\n+            ret \u003d innerCumulativeProbability(domain[1], x, -1, n, m, k);\n         }\n         \n         return ret;\n     }\n-\t\n+    \n     /**\n      * For this disbution, X, this method returns P(x0 \u0026le; X \u0026le; x1).  This\n      * probability is computed by summing the point probabilities for the values\n@@ -293,13 +293,13 @@\n      * @return P(x0 \u0026le; X \u0026le; x1). \n      */\n     private double innerCumulativeProbability(\n-    \tint x0, int x1, int dx, int n, int m, int k)\n+        int x0, int x1, int dx, int n, int m, int k)\n     {\n-    \tdouble ret \u003d probability(n, m, k, x0);\n-    \twhile (x0 !\u003d x1) {\n-    \t\tx0 +\u003d dx;\n-    \t\tret +\u003d probability(n, m, k, x0);\n-    \t}\n-\t\treturn ret;\n-\t}\n+        double ret \u003d probability(n, m, k, x0);\n+        while (x0 !\u003d x1) {\n+            x0 +\u003d dx;\n+            ret +\u003d probability(n, m, k, x0);\n+        }\n+        return ret;\n+    }\n }\n",
      "operations": [
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: private [1044,1051]"
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java",
        "src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [],
          "num": 0
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "34"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "34"
          ],
          "num": 1
        }
      ],
      "diff": "diff --git a/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java b/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\nindex b5fec0b..2ccf813 100644\n--- a/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n@@ -31,7 +31,7 @@\n         implements NormalDistribution, Serializable {\n     \n     /** Serializable version identifier */\n-    static final long serialVersionUID \u003d 8589540077390120676L;\n+    private static final long serialVersionUID \u003d 8589540077390120676L;\n \n     /** The mean of this distribution. */\n     private double mean \u003d 0;\n",
      "operations": [
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: private [1105,1112]"
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java",
        "src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [],
          "num": 0
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "25",
            "33"
          ],
          "num": 2
        },
        {
          "qualified_names": [
            "25",
            "33"
          ],
          "num": 2
        }
      ],
      "diff": "diff --git a/src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java b/src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java\nindex 0756a7c..d3694d8 100644\n--- a/src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java\n@@ -22,7 +22,7 @@\n import org.apache.commons.math.util.MathUtils;\n \n /**\n- * Implementation for the {@link PoissonDistribution}\n+ * Implementation for the {@link PoissonDistribution}.\n  * \n  * @version $Revision$ $Date$\n  */\n@@ -30,7 +30,7 @@\n         implements PoissonDistribution, Serializable {\n \n     /** Serializable version identifier */\n-    static final long serialVersionUID \u003d -3349935121172596109L;\n+    private static final long serialVersionUID \u003d -3349935121172596109L;\n     \n     /**\n      * Holds the Poisson mean for the distribution.\n",
      "operations": [
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: private [1106,1113]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: . [890,891]"
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/math/distribution/TDistributionImpl.java",
        "src/java/org/apache/commons/math/distribution/TDistributionImpl.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [],
          "num": 0
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "34"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "34"
          ],
          "num": 1
        }
      ],
      "diff": "diff --git a/src/java/org/apache/commons/math/distribution/TDistributionImpl.java b/src/java/org/apache/commons/math/distribution/TDistributionImpl.java\nindex 2bc528c..62a2f51 100644\n--- a/src/java/org/apache/commons/math/distribution/TDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/TDistributionImpl.java\n@@ -31,7 +31,7 @@\n     implements TDistribution, Serializable  {\n \n     /** Serializable version identifier */\n-    static final long serialVersionUID \u003d -5852615386664158222L;\n+    private static final long serialVersionUID \u003d -5852615386664158222L;\n     \n     /** The degrees of freedom*/\n     private double degreesOfFreedom;\n",
      "operations": [
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: private [1091,1098]"
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java",
        "src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [],
          "num": 0
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "32"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "32"
          ],
          "num": 1
        }
      ],
      "diff": "diff --git a/src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java b/src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java\nindex 2d397be..46d3109 100644\n--- a/src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java\n@@ -29,7 +29,7 @@\n         implements WeibullDistribution, Serializable {\r\n     \r\n     /** Serializable version identifier */\r\n-    static final long serialVersionUID \u003d 8589540077390120676L;\r\n+    private static final long serialVersionUID \u003d 8589540077390120676L;\r\n     \r\n     /** The shape parameter. */\r\n     private double alpha;\r\n",
      "operations": [
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: private [1115,1122]"
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/math/fraction/Fraction.java",
        "src/java/org/apache/commons/math/fraction/Fraction.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [],
          "num": 0
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "37"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "37"
          ],
          "num": 1
        }
      ],
      "diff": "diff --git a/src/java/org/apache/commons/math/fraction/Fraction.java b/src/java/org/apache/commons/math/fraction/Fraction.java\nindex ab6e89d..351f1f3 100644\n--- a/src/java/org/apache/commons/math/fraction/Fraction.java\n+++ b/src/java/org/apache/commons/math/fraction/Fraction.java\n@@ -34,7 +34,7 @@\n     public static final Fraction ZERO \u003d new Fraction(0, 1);\r\n     \r\n     /** Serializable version identifier */\r\n-    static final long serialVersionUID \u003d 65382027393090L;\r\n+    private static final long serialVersionUID \u003d 65382027393090L;\r\n     \r\n     /** The denominator. */\r\n     private int denominator;\r\n",
      "operations": [
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: private [1242,1249]"
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/math/fraction/FractionFormat.java",
        "src/java/org/apache/commons/math/fraction/FractionFormat.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [],
          "num": 0
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "40"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "40"
          ],
          "num": 1
        }
      ],
      "diff": "diff --git a/src/java/org/apache/commons/math/fraction/FractionFormat.java b/src/java/org/apache/commons/math/fraction/FractionFormat.java\nindex 755b385..25fd71c 100644\n--- a/src/java/org/apache/commons/math/fraction/FractionFormat.java\n+++ b/src/java/org/apache/commons/math/fraction/FractionFormat.java\n@@ -37,7 +37,7 @@\n public class FractionFormat extends Format implements Serializable {\r\n     \r\n     /** Serializable version identifier */\r\n-    static final long serialVersionUID \u003d -6337346779577272306L;\r\n+    private static final long serialVersionUID \u003d -6337346779577272306L;\r\n \r\n     /** The format used for the denominator. */\r\n     private NumberFormat denominatorFormat;\r\n",
      "operations": [
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: private [1304,1311]"
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/math/fraction/ProperFractionFormat.java",
        "src/java/org/apache/commons/math/fraction/ProperFractionFormat.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [],
          "num": 0
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "34"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "34"
          ],
          "num": 1
        }
      ],
      "diff": "diff --git a/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java b/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java\nindex 0da7f82..5dfa386 100644\n--- a/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java\n+++ b/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java\n@@ -31,7 +31,7 @@\n public class ProperFractionFormat extends FractionFormat {\r\n     \r\n     /** Serializable version identifier */\r\n-    static final long serialVersionUID \u003d -6337346779577272307L;\r\n+    private static final long serialVersionUID \u003d -6337346779577272307L;\r\n     \r\n     /** The format used for the whole number. */\r\n     private NumberFormat wholeFormat;\r\n",
      "operations": [
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: private [1148,1155]"
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/math/linear/BigMatrixImpl.java",
        "src/java/org/apache/commons/math/linear/BigMatrixImpl.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [],
          "num": 0
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "22",
            "51"
          ],
          "num": 2
        },
        {
          "qualified_names": [
            "22",
            "51"
          ],
          "num": 2
        }
      ],
      "diff": "diff --git a/src/java/org/apache/commons/math/linear/BigMatrixImpl.java b/src/java/org/apache/commons/math/linear/BigMatrixImpl.java\nindex 8da271a..451dc3a 100644\n--- a/src/java/org/apache/commons/math/linear/BigMatrixImpl.java\n+++ b/src/java/org/apache/commons/math/linear/BigMatrixImpl.java\n@@ -19,7 +19,7 @@\n import java.math.BigDecimal;\n \n /**\n- * Implementation for {@link BigMatrix} using a BigDecimal[][] array to store entries\n+ * Implementation of {@link BigMatrix} using a BigDecimal[][] array to store entries\n  * and \u003ca href\u003d\"http://www.math.gatech.edu/~bourbaki/math2601/Web-notes/2num.pdf\"\u003e\n  * LU decompostion\u003c/a\u003e to support linear system \n  * solution and inverse.\n@@ -48,7 +48,7 @@\n public class BigMatrixImpl implements BigMatrix, Serializable {\n     \n     /** Serialization id */\n-    static final long serialVersionUID \u003d -1011428905656140431L;\n+    private static final long serialVersionUID \u003d -1011428905656140431L;\n     \n     /** Entries of the matrix */\n     private BigDecimal data[][] \u003d null;\n",
      "operations": [
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: private [2053,2060]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/math/linear/InvalidMatrixException.java",
        "src/java/org/apache/commons/math/linear/InvalidMatrixException.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [],
          "num": 0
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "28"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "28"
          ],
          "num": 1
        }
      ],
      "diff": "diff --git a/src/java/org/apache/commons/math/linear/InvalidMatrixException.java b/src/java/org/apache/commons/math/linear/InvalidMatrixException.java\nindex f02c6d8..ff538ae 100644\n--- a/src/java/org/apache/commons/math/linear/InvalidMatrixException.java\n+++ b/src/java/org/apache/commons/math/linear/InvalidMatrixException.java\n@@ -25,7 +25,7 @@\n public class InvalidMatrixException extends RuntimeException {\n \n     /** Serializable version identifier */\n-    static final long serialVersionUID \u003d 5318837237354354107L;\n+    private static final long serialVersionUID \u003d 5318837237354354107L;\n \n     /**\n      * Default constructor.\n",
      "operations": [
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: private [957,964]"
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/math/linear/MatrixIndexException.java",
        "src/java/org/apache/commons/math/linear/MatrixIndexException.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [],
          "num": 0
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "27"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "27"
          ],
          "num": 1
        }
      ],
      "diff": "diff --git a/src/java/org/apache/commons/math/linear/MatrixIndexException.java b/src/java/org/apache/commons/math/linear/MatrixIndexException.java\nindex 24732d0..74afb58 100644\n--- a/src/java/org/apache/commons/math/linear/MatrixIndexException.java\n+++ b/src/java/org/apache/commons/math/linear/MatrixIndexException.java\n@@ -24,7 +24,7 @@\n public class MatrixIndexException extends RuntimeException {\n \n     /** Serializable version identifier */\n-    static final long serialVersionUID \u003d -1341109412864309526L;\n+    private static final long serialVersionUID \u003d -1341109412864309526L;\n \n     /**\n      * Default constructor.\n",
      "operations": [
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: private [924,931]"
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/math/linear/RealMatrixImpl.java",
        "src/java/org/apache/commons/math/linear/RealMatrixImpl.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [],
          "num": 0
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "24",
            "53"
          ],
          "num": 2
        },
        {
          "qualified_names": [
            "24",
            "53"
          ],
          "num": 2
        }
      ],
      "diff": "diff --git a/src/java/org/apache/commons/math/linear/RealMatrixImpl.java b/src/java/org/apache/commons/math/linear/RealMatrixImpl.java\nindex b3c8f4d..b31ac66 100644\n--- a/src/java/org/apache/commons/math/linear/RealMatrixImpl.java\n+++ b/src/java/org/apache/commons/math/linear/RealMatrixImpl.java\n@@ -21,7 +21,7 @@\n \n \n /**\n- * Implementation for RealMatrix using a double[][] array to store entries and\n+ * Implementation of RealMatrix using a double[][] array to store entries and\n  * \u003ca href\u003d\"http://www.math.gatech.edu/~bourbaki/math2601/Web-notes/2num.pdf\"\u003e\n  * LU decompostion\u003c/a\u003e to support linear system\n  * solution and inverse.\n@@ -50,7 +50,7 @@\n public class RealMatrixImpl implements RealMatrix, Serializable {\n     \n     /** Serializable version identifier */\n-    static final long serialVersionUID \u003d 4237564493130426188L;\n+    private static final long serialVersionUID \u003d 4237564493130426188L;\n \n     /** Entries of the matrix */\n     private double data[][] \u003d null;\n",
      "operations": [
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: private [1981,1988]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java",
        "src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "findBin",
            "getUpperBounds"
          ],
          "num": 2
        },
        {
          "qualified_names": [
            "getUpperBounds",
            "findBin"
          ],
          "num": 2
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "62",
            "68",
            "228",
            "383",
            "456",
            "463"
          ],
          "num": 6
        },
        {
          "qualified_names": [
            "62",
            "68",
            "228",
            "383",
            "456",
            "457",
            "464",
            "465",
            "466",
            "467"
          ],
          "num": 10
        }
      ],
      "diff": "diff --git a/src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java b/src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java\nindex b375e6b..12eed6a 100644\n--- a/src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java\n@@ -59,13 +59,13 @@\n public class EmpiricalDistributionImpl implements Serializable, EmpiricalDistribution {\n \n     /** Serializable version identifier */\n-    static final long serialVersionUID \u003d -6773236347582113490L;\n+    private static final long serialVersionUID \u003d -6773236347582113490L;\n \n     /** List of SummaryStatistics objects characterizing the bins */\n     private ArrayList binStats \u003d null;\n \n     /** Sample statistics */\n-    SummaryStatistics sampleStats \u003d null;\n+    private SummaryStatistics sampleStats \u003d null;\n \n     /** number of bins */\n     private int binCount \u003d 1000;\n@@ -225,7 +225,7 @@\n     private class StreamDataAdapter extends DataAdapter{\n         \n         /** Input stream providng access to the data */\n-        BufferedReader inputStream;\n+        private BufferedReader inputStream;\n         \n         /**\n          * Create a StreamDataAdapter from a BufferedReader\n@@ -380,7 +380,7 @@\n      * @param min  the minimum value\n      * @param value  the value whose bin we are trying to find\n      * @param delta  the grid size\n-     * @return\n+     * @return the index of the bin containing the value\n      */\n     private int findBin(double min, double value, double delta) {\n         return Math.min(\n@@ -453,14 +453,18 @@\n     }\n \n     /**\n-     * Returns the array of upper bounds for the bins.  Bins are: \u003cbr/\u003e\n+     * Returns (a fresh copy of) the array of upper bounds for the bins.\n+       Bins are: \u003cbr/\u003e\n      * [min,upperBounds[0]],(upperBounds[0],upperBounds[1]],...,\n      *  (upperBounds[binCount-1],max]\n      * \n      * @return array of bin upper bounds\n      */\n     public double[] getUpperBounds() {\n-        return upperBounds;\n+        int len \u003d upperBounds.length;\n+        double[] out \u003d new double[len];\n+        System.arraycopy(upperBounds, 0, out, 0, len);\n+        return out;\n     }\n \n     /**\n",
      "operations": [
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: private [2620,2627]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: private [2831,2838]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: private [7822,7829]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [15661,15690]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [15699,15730]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [15739,15785]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement:  the index of the bin containing the value [13024,13066]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: Bins are: \u003cbr/\u003e [15438,15453]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/math/random/RandomDataImpl.java",
        "src/java/org/apache/commons/math/random/RandomDataImpl.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [],
          "num": 0
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "84"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "84"
          ],
          "num": 1
        }
      ],
      "diff": "diff --git a/src/java/org/apache/commons/math/random/RandomDataImpl.java b/src/java/org/apache/commons/math/random/RandomDataImpl.java\nindex 42d92f3..4c73248 100644\n--- a/src/java/org/apache/commons/math/random/RandomDataImpl.java\n+++ b/src/java/org/apache/commons/math/random/RandomDataImpl.java\n@@ -81,7 +81,7 @@\n public class RandomDataImpl implements RandomData, Serializable {\n \n     /** Serializable version identifier */\n-    static final long serialVersionUID \u003d -626730818244969716L;\n+    private static final long serialVersionUID \u003d -626730818244969716L;\n \n     /** underlying random number generator */\n     private RandomGenerator rand \u003d null;\n",
      "operations": [
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: private [3959,3966]"
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/math/stat/Frequency.java",
        "src/java/org/apache/commons/math/stat/Frequency.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [],
          "num": 0
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "43"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "43"
          ],
          "num": 1
        }
      ],
      "diff": "diff --git a/src/java/org/apache/commons/math/stat/Frequency.java b/src/java/org/apache/commons/math/stat/Frequency.java\nindex c9e1f6e..8a99b2c 100644\n--- a/src/java/org/apache/commons/math/stat/Frequency.java\n+++ b/src/java/org/apache/commons/math/stat/Frequency.java\n@@ -40,7 +40,7 @@\n public class Frequency implements Serializable {\n     \n     /** Serializable version identifier */\n-    static final long serialVersionUID \u003d -3845586908418844111L;\n+    private static final long serialVersionUID \u003d -3845586908418844111L;\n \n     /** underlying collection */\n     private TreeMap freqTable \u003d null;\n",
      "operations": [
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: private [1560,1567]"
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic.java",
        "src/java/org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [],
          "num": 0
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "23",
            "37"
          ],
          "num": 2
        },
        {
          "qualified_names": [
            "23",
            "37"
          ],
          "num": 2
        }
      ],
      "diff": "diff --git a/src/java/org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic.java b/src/java/org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic.java\nindex 31382d1..cb83f66 100644\n--- a/src/java/org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic.java\n@@ -20,7 +20,7 @@\n \n /**\n  *\n- * Abstract Implementation for the {@link StorelessUnivariateStatistic} interface.\n+ * Abstract implementation of the {@link StorelessUnivariateStatistic} interface.\n  * \u003cp\u003e\n  * Provides default \u003ccode\u003eevaluate()\u003c/code\u003e and \u003ccode\u003eincrementAll(double[])\u003ccode\u003e\n  * implementations. \n@@ -34,7 +34,7 @@\n     implements StorelessUnivariateStatistic, Serializable {\n \n     /** Serialization UID */\n-    static final long serialVersionUID \u003d -44915725420072521L;\n+    private static final long serialVersionUID \u003d -44915725420072521L;\n     \n     /**\n      * This default implementation calls {@link #clear}, then invokes \n",
      "operations": [
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: private [1260,1267]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java",
        "src/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [],
          "num": 0
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "37"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "37"
          ],
          "num": 1
        }
      ],
      "diff": "diff --git a/src/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java b/src/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java\nindex a2dd988..22b4d61 100644\n--- a/src/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java\n@@ -34,7 +34,7 @@\n     implements UnivariateStatistic, Serializable {\n     \n     /** Serialization UID */\n-    static final long serialVersionUID \u003d -8007759382851708045L;\n+    private static final long serialVersionUID \u003d -8007759382851708045L;\n \n     /**\n      * @see org.apache.commons.math.stat.descriptive.UnivariateStatistic#evaluate(double[])\n",
      "operations": [
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: private [1283,1290]"
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java",
        "src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [],
          "num": 0
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "42"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "42"
          ],
          "num": 1
        }
      ],
      "diff": "diff --git a/src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java b/src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java\nindex 3297f67..672eacc 100644\n--- a/src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java\n@@ -39,7 +39,7 @@\n public abstract class DescriptiveStatistics implements StatisticalSummary, Serializable {\n     \n     /** Serialization UID */\n-    static final long serialVersionUID \u003d 5188298269533339922L;\n+    private static final long serialVersionUID \u003d 5188298269533339922L;\n     \n     /**\n      * Create an instance of a \u003ccode\u003eDescriptiveStatistics\u003c/code\u003e\n",
      "operations": [
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: private [1657,1664]"
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java",
        "src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [],
          "num": 0
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "31"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "31"
          ],
          "num": 1
        }
      ],
      "diff": "diff --git a/src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java b/src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java\nindex bc1d4cc..c3649cf 100644\n--- a/src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java\n@@ -28,7 +28,7 @@\n public class DescriptiveStatisticsImpl extends DescriptiveStatistics implements Serializable {\n \n     /** Serializable version identifier */\n-    static final long serialVersionUID \u003d -1868088725461221010L;\n+    private static final long serialVersionUID \u003d -1868088725461221010L;\n     \n     /** hold the window size **/\n     protected int windowSize;\n",
      "operations": [
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: private [1049,1056]"
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValues.java",
        "src/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValues.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [],
          "num": 0
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "30"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "30"
          ],
          "num": 1
        }
      ],
      "diff": "diff --git a/src/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValues.java b/src/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValues.java\nindex e0239fa..c05f193 100644\n--- a/src/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValues.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValues.java\n@@ -27,7 +27,7 @@\n     StatisticalSummary {\n    \n     /** Serialization id */\n-    static final long serialVersionUID \u003d -5108854841843722536L;\n+    private static final long serialVersionUID \u003d -5108854841843722536L;\n \n     /** The sample mean */\n     private final double mean;\n",
      "operations": [
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: private [989,996]"
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java",
        "src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [],
          "num": 0
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "31"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "31"
          ],
          "num": 1
        }
      ],
      "diff": "diff --git a/src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java b/src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\nindex aac31da..d4ae8c8 100644\n--- a/src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n@@ -28,7 +28,7 @@\n public abstract class SummaryStatistics implements StatisticalSummary, Serializable {\n \n     /** Serialization UID */\n-    static final long serialVersionUID \u003d -6400596334135654825L;\n+    private static final long serialVersionUID \u003d -6400596334135654825L;\n      \n     /**\n      * Create an instance of a \u003ccode\u003eSummaryStatistics\u003c/code\u003e\n",
      "operations": [
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: private [1027,1034]"
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java",
        "src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [],
          "num": 0
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "37"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "37"
          ],
          "num": 1
        }
      ],
      "diff": "diff --git a/src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java b/src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java\nindex 3a9d41a..2c2b10c 100644\n--- a/src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java\n@@ -34,7 +34,7 @@\n public class SummaryStatisticsImpl extends SummaryStatistics implements Serializable {\n \n     /** Serializable version identifier */\n-    static final long serialVersionUID \u003d 8787174276883311692L;\n+    private static final long serialVersionUID \u003d 8787174276883311692L;\n \n     /** count of values that have been added */\n     protected long n \u003d 0;\n",
      "operations": [
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: private [1518,1525]"
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/math/stat/descriptive/moment/FirstMoment.java",
        "src/java/org/apache/commons/math/stat/descriptive/moment/FirstMoment.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [],
          "num": 0
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "51"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "51"
          ],
          "num": 1
        }
      ],
      "diff": "diff --git a/src/java/org/apache/commons/math/stat/descriptive/moment/FirstMoment.java b/src/java/org/apache/commons/math/stat/descriptive/moment/FirstMoment.java\nindex 090a584..e94d2ed 100644\n--- a/src/java/org/apache/commons/math/stat/descriptive/moment/FirstMoment.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/moment/FirstMoment.java\n@@ -48,7 +48,7 @@\n     implements Serializable {\n \n     /** Serializable version identifier */\n-    static final long serialVersionUID \u003d -803343206421984070L; \n+    private static final long serialVersionUID \u003d -803343206421984070L; \n     \n     /** Count of values that have been added */\n     protected long n;\n",
      "operations": [
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: private [1853,1860]"
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/math/stat/descriptive/moment/FourthMoment.java",
        "src/java/org/apache/commons/math/stat/descriptive/moment/FourthMoment.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [],
          "num": 0
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "55"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "55"
          ],
          "num": 1
        }
      ],
      "diff": "diff --git a/src/java/org/apache/commons/math/stat/descriptive/moment/FourthMoment.java b/src/java/org/apache/commons/math/stat/descriptive/moment/FourthMoment.java\nindex feb202d..cc9f8fc 100644\n--- a/src/java/org/apache/commons/math/stat/descriptive/moment/FourthMoment.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/moment/FourthMoment.java\n@@ -52,7 +52,7 @@\n public class FourthMoment extends ThirdMoment implements Serializable{\n \n     /** Serializable version identifier */\n-    static final long serialVersionUID \u003d 4763990447117157611L;\n+    private static final long serialVersionUID \u003d 4763990447117157611L;\n         \n     /** fourth moment of values that have been added */\n     protected double m4;\n",
      "operations": [
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: private [1986,1993]"
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/math/stat/descriptive/moment/GeometricMean.java",
        "src/java/org/apache/commons/math/stat/descriptive/moment/GeometricMean.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [],
          "num": 0
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "48"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "48"
          ],
          "num": 1
        }
      ],
      "diff": "diff --git a/src/java/org/apache/commons/math/stat/descriptive/moment/GeometricMean.java b/src/java/org/apache/commons/math/stat/descriptive/moment/GeometricMean.java\nindex c5aaa30..bf601f9 100644\n--- a/src/java/org/apache/commons/math/stat/descriptive/moment/GeometricMean.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/moment/GeometricMean.java\n@@ -45,7 +45,7 @@\n public class GeometricMean extends AbstractStorelessUnivariateStatistic {\n \n     /** Serializable version identifier */\n-    static final long serialVersionUID \u003d -8178734905303459453L;  \n+    private static final long serialVersionUID \u003d -8178734905303459453L;  \n     \n     /** Wrapped SumOfLogs instance */\n     private SumOfLogs sumOfLogs;\n",
      "operations": [
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: private [1955,1962]"
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java",
        "src/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [],
          "num": 0
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "43"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "43"
          ],
          "num": 1
        }
      ],
      "diff": "diff --git a/src/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java b/src/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java\nindex 3e46078..f027cb3 100644\n--- a/src/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java\n@@ -40,7 +40,7 @@\n public class Kurtosis extends AbstractStorelessUnivariateStatistic  {\n \n     /** Serializable version identifier */\n-    static final long serialVersionUID \u003d 2784465764798260919L;  \n+    private static final long serialVersionUID \u003d 2784465764798260919L;  \n       \n     /**Fourth Moment on which this statistic is based */\n     protected FourthMoment moment;\n",
      "operations": [
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: private [1725,1732]"
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/math/stat/descriptive/moment/Mean.java",
        "src/java/org/apache/commons/math/stat/descriptive/moment/Mean.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [],
          "num": 0
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "53"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "53"
          ],
          "num": 1
        }
      ],
      "diff": "diff --git a/src/java/org/apache/commons/math/stat/descriptive/moment/Mean.java b/src/java/org/apache/commons/math/stat/descriptive/moment/Mean.java\nindex a1ffeaa..792718a 100644\n--- a/src/java/org/apache/commons/math/stat/descriptive/moment/Mean.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/moment/Mean.java\n@@ -50,7 +50,7 @@\n     implements Serializable {\n \n     /** Serializable version identifier */\n-    static final long serialVersionUID \u003d -1296043746617791564L;    \n+    private static final long serialVersionUID \u003d -1296043746617791564L;    \n     \n     /** First moment on which this statistic is based. */\n     protected FirstMoment moment;\n",
      "operations": [
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: private [1894,1901]"
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/math/stat/descriptive/moment/SecondMoment.java",
        "src/java/org/apache/commons/math/stat/descriptive/moment/SecondMoment.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [],
          "num": 0
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "47"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "47"
          ],
          "num": 1
        }
      ],
      "diff": "diff --git a/src/java/org/apache/commons/math/stat/descriptive/moment/SecondMoment.java b/src/java/org/apache/commons/math/stat/descriptive/moment/SecondMoment.java\nindex e4e2407..dc1415e 100644\n--- a/src/java/org/apache/commons/math/stat/descriptive/moment/SecondMoment.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/moment/SecondMoment.java\n@@ -44,7 +44,7 @@\n public class SecondMoment extends FirstMoment implements Serializable {\n \n     /** Serializable version identifier */\n-    static final long serialVersionUID \u003d 3942403127395076445L;  \n+    private static final long serialVersionUID \u003d 3942403127395076445L;  \n       \n     /** second moment of values that have been added */\n     protected double m2;\n",
      "operations": [
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: private [1731,1738]"
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/math/stat/descriptive/moment/Skewness.java",
        "src/java/org/apache/commons/math/stat/descriptive/moment/Skewness.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [],
          "num": 0
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "42"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "42"
          ],
          "num": 1
        }
      ],
      "diff": "diff --git a/src/java/org/apache/commons/math/stat/descriptive/moment/Skewness.java b/src/java/org/apache/commons/math/stat/descriptive/moment/Skewness.java\nindex 67c00d1..f9b46fa 100644\n--- a/src/java/org/apache/commons/math/stat/descriptive/moment/Skewness.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/moment/Skewness.java\n@@ -39,7 +39,7 @@\n public class Skewness extends AbstractStorelessUnivariateStatistic implements Serializable {\n \n     /** Serializable version identifier */\n-    static final long serialVersionUID \u003d 7101857578996691352L;    \n+    private static final long serialVersionUID \u003d 7101857578996691352L;    \n     \n     /** Third moment on which this statistic is based */\n     protected ThirdMoment moment \u003d null;\n",
      "operations": [
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: private [1575,1582]"
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviation.java",
        "src/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviation.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [],
          "num": 0
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "43"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "43"
          ],
          "num": 1
        }
      ],
      "diff": "diff --git a/src/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviation.java b/src/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviation.java\nindex e9d8a43..420a06b 100644\n--- a/src/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviation.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviation.java\n@@ -40,7 +40,7 @@\n     implements Serializable {\n \n     /** Serializable version identifier */\n-    static final long serialVersionUID \u003d 5728716329662425188L;  \n+    private static final long serialVersionUID \u003d 5728716329662425188L;  \n     \n     /** Wrapped Variance instance */\n     private Variance variance \u003d null;\n",
      "operations": [
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: private [1852,1859]"
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/math/stat/descriptive/moment/ThirdMoment.java",
        "src/java/org/apache/commons/math/stat/descriptive/moment/ThirdMoment.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [],
          "num": 0
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "48"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "48"
          ],
          "num": 1
        }
      ],
      "diff": "diff --git a/src/java/org/apache/commons/math/stat/descriptive/moment/ThirdMoment.java b/src/java/org/apache/commons/math/stat/descriptive/moment/ThirdMoment.java\nindex 07472ef..acd90c7 100644\n--- a/src/java/org/apache/commons/math/stat/descriptive/moment/ThirdMoment.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/moment/ThirdMoment.java\n@@ -45,7 +45,7 @@\n public class ThirdMoment extends SecondMoment implements Serializable {\n \n     /** Serializable version identifier */\n-    static final long serialVersionUID \u003d -7818711964045118679L;  \n+    private static final long serialVersionUID \u003d -7818711964045118679L;  \n       \n     /** third moment of values that have been added */\n     protected double m3;\n",
      "operations": [
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: private [1814,1821]"
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/math/stat/descriptive/moment/Variance.java",
        "src/java/org/apache/commons/math/stat/descriptive/moment/Variance.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [],
          "num": 0
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "53"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "53"
          ],
          "num": 1
        }
      ],
      "diff": "diff --git a/src/java/org/apache/commons/math/stat/descriptive/moment/Variance.java b/src/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\nindex c7cf112..e549de9 100644\n--- a/src/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -50,7 +50,7 @@\n public class Variance extends AbstractStorelessUnivariateStatistic implements Serializable {\n \n     /** Serializable version identifier */\n-    static final long serialVersionUID \u003d -9111962718267217978L;  \n+    private static final long serialVersionUID \u003d -9111962718267217978L;  \n       \n     /** SecondMoment is used in incremental calculation of Variance*/\n     protected SecondMoment moment \u003d null;\n",
      "operations": [
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: private [2247,2254]"
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/math/stat/descriptive/rank/Max.java",
        "src/java/org/apache/commons/math/stat/descriptive/rank/Max.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [],
          "num": 0
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "40"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "40"
          ],
          "num": 1
        }
      ],
      "diff": "diff --git a/src/java/org/apache/commons/math/stat/descriptive/rank/Max.java b/src/java/org/apache/commons/math/stat/descriptive/rank/Max.java\nindex 5a6a6be..8f7b926 100644\n--- a/src/java/org/apache/commons/math/stat/descriptive/rank/Max.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/rank/Max.java\n@@ -37,7 +37,7 @@\n public class Max extends AbstractStorelessUnivariateStatistic {\n \n     /** Serializable version identifier */\n-    static final long serialVersionUID \u003d -5593383832225844641L;    \n+    private static final long serialVersionUID \u003d -5593383832225844641L;    \n     \n     /** Number of values that have been added */\n     private long n;\n",
      "operations": [
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: private [1578,1585]"
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/math/stat/descriptive/rank/Median.java",
        "src/java/org/apache/commons/math/stat/descriptive/rank/Median.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [],
          "num": 0
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "35"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "35"
          ],
          "num": 1
        }
      ],
      "diff": "diff --git a/src/java/org/apache/commons/math/stat/descriptive/rank/Median.java b/src/java/org/apache/commons/math/stat/descriptive/rank/Median.java\nindex b7cfa79..3bced2f 100644\n--- a/src/java/org/apache/commons/math/stat/descriptive/rank/Median.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/rank/Median.java\n@@ -32,7 +32,7 @@\n public class Median extends Percentile implements Serializable {\n \n     /** Serializable version identifier */\n-    static final long serialVersionUID \u003d -3961477041290915687L;    \n+    private static final long serialVersionUID \u003d -3961477041290915687L;    \n \n     /**\n      * Default constructor.\n",
      "operations": [
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: private [1312,1319]"
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/math/stat/descriptive/rank/Min.java",
        "src/java/org/apache/commons/math/stat/descriptive/rank/Min.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [],
          "num": 0
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "42"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "42"
          ],
          "num": 1
        }
      ],
      "diff": "diff --git a/src/java/org/apache/commons/math/stat/descriptive/rank/Min.java b/src/java/org/apache/commons/math/stat/descriptive/rank/Min.java\nindex 7ece3f5..fca1f60 100644\n--- a/src/java/org/apache/commons/math/stat/descriptive/rank/Min.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/rank/Min.java\n@@ -39,7 +39,7 @@\n public class Min extends AbstractStorelessUnivariateStatistic implements Serializable {\n \n     /** Serializable version identifier */\n-    static final long serialVersionUID \u003d -2941995784909003131L;  \n+    private static final long serialVersionUID \u003d -2941995784909003131L;  \n       \n     /**Number of values that have been added */\n     private long n;\n",
      "operations": [
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: private [1634,1641]"
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java",
        "src/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [],
          "num": 0
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "68"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "68"
          ],
          "num": 1
        }
      ],
      "diff": "diff --git a/src/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java b/src/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java\nindex 0c304de..496130e 100644\n--- a/src/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java\n@@ -65,7 +65,7 @@\n public class Percentile extends AbstractUnivariateStatistic implements Serializable {\n \n     /** Serializable version identifier */\n-    static final long serialVersionUID \u003d -8091216485095130416L; \n+    private static final long serialVersionUID \u003d -8091216485095130416L; \n        \n     /** Determines what percentile is computed when evaluate() is activated \n      * with no quantile argument */\n",
      "operations": [
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: private [3241,3248]"
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/math/stat/descriptive/summary/Product.java",
        "src/java/org/apache/commons/math/stat/descriptive/summary/Product.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [],
          "num": 0
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "38"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "38"
          ],
          "num": 1
        }
      ],
      "diff": "diff --git a/src/java/org/apache/commons/math/stat/descriptive/summary/Product.java b/src/java/org/apache/commons/math/stat/descriptive/summary/Product.java\nindex e7d14fb..5e6dc34 100644\n--- a/src/java/org/apache/commons/math/stat/descriptive/summary/Product.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/summary/Product.java\n@@ -35,7 +35,7 @@\n public class Product extends AbstractStorelessUnivariateStatistic implements Serializable {\n \n     /** Serializable version identifier */\n-    static final long serialVersionUID \u003d 2824226005990582538L;   \n+    private static final long serialVersionUID \u003d 2824226005990582538L;   \n      \n     /**The number of values that have been added */\n     private long n;\n",
      "operations": [
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: private [1452,1459]"
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/math/stat/descriptive/summary/Sum.java",
        "src/java/org/apache/commons/math/stat/descriptive/summary/Sum.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [],
          "num": 0
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "38"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "38"
          ],
          "num": 1
        }
      ],
      "diff": "diff --git a/src/java/org/apache/commons/math/stat/descriptive/summary/Sum.java b/src/java/org/apache/commons/math/stat/descriptive/summary/Sum.java\nindex 08e9019..19fdc38 100644\n--- a/src/java/org/apache/commons/math/stat/descriptive/summary/Sum.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/summary/Sum.java\n@@ -35,7 +35,7 @@\n public class Sum extends AbstractStorelessUnivariateStatistic implements Serializable {\n \n     /** Serializable version identifier */\n-    static final long serialVersionUID \u003d -8231831954703408316L;  \n+    private static final long serialVersionUID \u003d -8231831954703408316L;  \n       \n     /** */\n     private long n;\n",
      "operations": [
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: private [1446,1453]"
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/math/stat/descriptive/summary/SumOfLogs.java",
        "src/java/org/apache/commons/math/stat/descriptive/summary/SumOfLogs.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [],
          "num": 0
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "46"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "46"
          ],
          "num": 1
        }
      ],
      "diff": "diff --git a/src/java/org/apache/commons/math/stat/descriptive/summary/SumOfLogs.java b/src/java/org/apache/commons/math/stat/descriptive/summary/SumOfLogs.java\nindex 30cdd8a..50a813f 100644\n--- a/src/java/org/apache/commons/math/stat/descriptive/summary/SumOfLogs.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/summary/SumOfLogs.java\n@@ -43,7 +43,7 @@\n public class SumOfLogs extends AbstractStorelessUnivariateStatistic implements Serializable {\n \n     /** Serializable version identifier */\n-    static final long serialVersionUID \u003d -370076995648386763L;    \n+    private static final long serialVersionUID \u003d -370076995648386763L;    \n \n     /**Number of values that have been added */\n     private int n;\n",
      "operations": [
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: private [1863,1870]"
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/math/stat/descriptive/summary/SumOfSquares.java",
        "src/java/org/apache/commons/math/stat/descriptive/summary/SumOfSquares.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [],
          "num": 0
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "38"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "38"
          ],
          "num": 1
        }
      ],
      "diff": "diff --git a/src/java/org/apache/commons/math/stat/descriptive/summary/SumOfSquares.java b/src/java/org/apache/commons/math/stat/descriptive/summary/SumOfSquares.java\nindex f182eb2..ffe853b 100644\n--- a/src/java/org/apache/commons/math/stat/descriptive/summary/SumOfSquares.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/summary/SumOfSquares.java\n@@ -35,7 +35,7 @@\n public class SumOfSquares extends AbstractStorelessUnivariateStatistic implements Serializable {\n \n     /** Serializable version identifier */\n-    static final long serialVersionUID \u003d 1460986908574398008L;  \n+    private static final long serialVersionUID \u003d 1460986908574398008L;  \n       \n     /** */\n     private long n;\n",
      "operations": [
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: private [1469,1476]"
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/math/stat/regression/SimpleRegression.java",
        "src/java/org/apache/commons/math/stat/regression/SimpleRegression.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [],
          "num": 0
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "57"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "57"
          ],
          "num": 1
        }
      ],
      "diff": "diff --git a/src/java/org/apache/commons/math/stat/regression/SimpleRegression.java b/src/java/org/apache/commons/math/stat/regression/SimpleRegression.java\nindex 569fad2..552b300 100644\n--- a/src/java/org/apache/commons/math/stat/regression/SimpleRegression.java\n+++ b/src/java/org/apache/commons/math/stat/regression/SimpleRegression.java\n@@ -54,7 +54,7 @@\n public class SimpleRegression implements Serializable {\n \n     /** Serializable version identifier */\n-    static final long serialVersionUID \u003d -3004689053607543335L;\n+    private static final long serialVersionUID \u003d -3004689053607543335L;\n \n     /** sum of x values */\n     private double sumX \u003d 0d;\n",
      "operations": [
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: private [2317,2324]"
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/math/util/ContinuedFraction.java",
        "src/java/org/apache/commons/math/util/ContinuedFraction.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "evaluate"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "evaluate"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "40",
            "131",
            "132",
            "133",
            "134",
            "135",
            "136",
            "137",
            "138",
            "139",
            "140",
            "141",
            "142",
            "143",
            "144",
            "145",
            "146",
            "147",
            "148",
            "149",
            "150",
            "151",
            "152",
            "153",
            "154",
            "155",
            "156",
            "157",
            "158",
            "159",
            "160",
            "161",
            "162",
            "163",
            "164",
            "165",
            "166",
            "167",
            "168",
            "170"
          ],
          "num": 40
        },
        {
          "qualified_names": [
            "40",
            "131",
            "132",
            "133",
            "134",
            "135",
            "136",
            "137",
            "138",
            "139",
            "140",
            "141",
            "142",
            "143",
            "144",
            "145",
            "146",
            "147",
            "148",
            "149",
            "150",
            "151",
            "152",
            "153",
            "154",
            "155",
            "156",
            "157",
            "158",
            "159",
            "160",
            "161",
            "162",
            "163",
            "164",
            "165",
            "166",
            "167",
            "168",
            "170"
          ],
          "num": 40
        }
      ],
      "diff": "diff --git a/src/java/org/apache/commons/math/util/ContinuedFraction.java b/src/java/org/apache/commons/math/util/ContinuedFraction.java\nindex 5804d95..4e75927 100644\n--- a/src/java/org/apache/commons/math/util/ContinuedFraction.java\n+++ b/src/java/org/apache/commons/math/util/ContinuedFraction.java\n@@ -37,7 +37,7 @@\n public abstract class ContinuedFraction implements Serializable {\n     \n     /** Serialization UID */\n-    static final long serialVersionUID \u003d 1768555336266158242L;\n+    private static final long serialVersionUID \u003d 1768555336266158242L;\n     \n     /** Maximum allowed numerical error. */\n     private static final double DEFAULT_EPSILON \u003d 10e-9;\n@@ -128,46 +128,46 @@\n     public double evaluate(double x, double epsilon, int maxIterations)\n         throws MathException\n     {\n-    \tdouble p0 \u003d 1.0;\n-    \tdouble p1 \u003d getA(0, x);\n-    \tdouble q0 \u003d 0.0;\n-    \tdouble q1 \u003d 1.0;\n-    \tdouble c \u003d p1 / q1;\n-    \tint n \u003d 0;\n-    \tdouble relativeError \u003d Double.MAX_VALUE;\n-    \twhile (n \u003c maxIterations \u0026\u0026 relativeError \u003e epsilon) {\n-    \t\t++n;\n-    \t\tdouble a \u003d getA(n, x);\n-    \t\tdouble b \u003d getB(n, x);\n-  \t\t\tdouble p2 \u003d a * p1 + b * p0;\n-   \t\t\tdouble q2 \u003d a * q1 + b * q0;\n-   \t\t\tif (Double.isInfinite(p2) || Double.isInfinite(q2)) {\n-   \t\t\t\t// need to scale\n-   \t\t\t\tif (a !\u003d 0.0) {\n-   \t\t\t\t\tp2 \u003d p1 + (b / a * p0);\n-   \t\t\t\t\tq2 \u003d q1 + (b / a * q0);\n-   \t\t\t\t} else if (b !\u003d 0) {\n-   \t\t\t\t\tp2 \u003d (a / b * p1) + p0;\n-   \t\t\t\t\tq2 \u003d (a / b * q1) + q0;\n-   \t\t\t\t} else {\n-   \t\t\t\t\t// can not scale an convergent is unbounded.\n-   \t\t            throw new ConvergenceException(\n-   \t                \t\"Continued fraction convergents diverged to +/- \" +\n-   \t                \t\"infinity.\");\n-   \t\t\t\t}\n-   \t\t\t}\n-   \t\t\tdouble r \u003d p2 / q2;\n-   \t\t\trelativeError \u003d Math.abs(r / c - 1.0);\n-    \t\t\t\n-   \t\t\t// prepare for next iteration\n-   \t\t\tc \u003d p2 / q2;\n-   \t\t\tp0 \u003d p1;\n-   \t\t\tp1 \u003d p2;\n-   \t\t\tq0 \u003d q1;\n-   \t\t\tq1 \u003d q2;\n-    \t}\n+        double p0 \u003d 1.0;\n+        double p1 \u003d getA(0, x);\n+        double q0 \u003d 0.0;\n+        double q1 \u003d 1.0;\n+        double c \u003d p1 / q1;\n+        int n \u003d 0;\n+        double relativeError \u003d Double.MAX_VALUE;\n+        while (n \u003c maxIterations \u0026\u0026 relativeError \u003e epsilon) {\n+            ++n;\n+            double a \u003d getA(n, x);\n+            double b \u003d getB(n, x);\n+            double p2 \u003d a * p1 + b * p0;\n+            double q2 \u003d a * q1 + b * q0;\n+            if (Double.isInfinite(p2) || Double.isInfinite(q2)) {\n+                // need to scale\n+                if (a !\u003d 0.0) {\n+                    p2 \u003d p1 + (b / a * p0);\n+                    q2 \u003d q1 + (b / a * q0);\n+                } else if (b !\u003d 0) {\n+                    p2 \u003d (a / b * p1) + p0;\n+                    q2 \u003d (a / b * q1) + q0;\n+                } else {\n+                    // can not scale an convergent is unbounded.\n+                    throw new ConvergenceException(\n+                        \"Continued fraction convergents diverged to +/- \" +\n+                        \"infinity.\");\n+                }\n+            }\n+            double r \u003d p2 / q2;\n+            relativeError \u003d Math.abs(r / c - 1.0);\n+                \n+            // prepare for next iteration\n+            c \u003d p2 / q2;\n+            p0 \u003d p1;\n+            p1 \u003d p2;\n+            q0 \u003d q1;\n+            q1 \u003d q2;\n+        }\n \n-    \tif (n \u003e\u003d maxIterations) {\n+        if (n \u003e\u003d maxIterations) {\n             throw new ConvergenceException(\n                 \"Continued fraction convergents failed to converge.\");\n         }\n",
      "operations": [
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: private [1239,1246]"
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/math/util/DefaultTransformer.java",
        "src/java/org/apache/commons/math/util/DefaultTransformer.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [],
          "num": 0
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "34"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "34"
          ],
          "num": 1
        }
      ],
      "diff": "diff --git a/src/java/org/apache/commons/math/util/DefaultTransformer.java b/src/java/org/apache/commons/math/util/DefaultTransformer.java\nindex 040e2e7..5cf5e05 100644\n--- a/src/java/org/apache/commons/math/util/DefaultTransformer.java\n+++ b/src/java/org/apache/commons/math/util/DefaultTransformer.java\n@@ -31,7 +31,7 @@\n public class DefaultTransformer implements NumberTransformer, Serializable {\n     \n     /** Serializable version identifier */\n-    static final long serialVersionUID \u003d 4019938025047800455L;\n+    private static final long serialVersionUID \u003d 4019938025047800455L;\n     \n     /**\n      * @param o  the object that gets transformed.\n",
      "operations": [
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: private [1159,1166]"
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/math/util/ResizableDoubleArray.java",
        "src/java/org/apache/commons/math/util/ResizableDoubleArray.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [],
          "num": 0
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "74"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "74"
          ],
          "num": 1
        }
      ],
      "diff": "diff --git a/src/java/org/apache/commons/math/util/ResizableDoubleArray.java b/src/java/org/apache/commons/math/util/ResizableDoubleArray.java\nindex ed0f945..97da2f1 100644\n--- a/src/java/org/apache/commons/math/util/ResizableDoubleArray.java\n+++ b/src/java/org/apache/commons/math/util/ResizableDoubleArray.java\n@@ -71,7 +71,7 @@\n public class ResizableDoubleArray implements DoubleArray, Serializable {\n     \n     /** Serializable version identifier */\n-    static final long serialVersionUID \u003d -3485529955529426875L; \n+    private static final long serialVersionUID \u003d -3485529955529426875L; \n     \n     /** additive expansion mode */\n     public static final int ADDITIVE_MODE \u003d 1;\n",
      "operations": [
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: private [3612,3619]"
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/math/util/TransformerMap.java",
        "src/java/org/apache/commons/math/util/TransformerMap.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [],
          "num": 0
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "36"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "36"
          ],
          "num": 1
        }
      ],
      "diff": "diff --git a/src/java/org/apache/commons/math/util/TransformerMap.java b/src/java/org/apache/commons/math/util/TransformerMap.java\nindex 90d5d9a..0b1547d 100644\n--- a/src/java/org/apache/commons/math/util/TransformerMap.java\n+++ b/src/java/org/apache/commons/math/util/TransformerMap.java\n@@ -33,7 +33,7 @@\n public class TransformerMap implements NumberTransformer, Serializable {\n \n     /** Serializable version identifier */\n-    static final long serialVersionUID \u003d -942772950698439883L;\n+    private static final long serialVersionUID \u003d -942772950698439883L;\n     \n     /**\n      * A default Number Transformer for Numbers and numeric Strings.\n",
      "operations": [
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: private [1250,1257]"
        }
      ]
    }
  ],
  "inducing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [
        "polar2Complex",
        "isInfinite",
        "readObject"
      ],
      "num": 3
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  },
  "trigger_tests": [],
  "fixing_changes": [],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  }
}