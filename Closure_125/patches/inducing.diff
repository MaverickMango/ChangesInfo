diff --git a/src/com/google/javascript/rhino/jstype/ArrowType.java b/src/com/google/javascript/rhino/jstype/ArrowType.java
index 66893b6..7fc1537 100644
--- a/src/com/google/javascript/rhino/jstype/ArrowType.java
+++ b/src/com/google/javascript/rhino/jstype/ArrowType.java
@@ -240,4 +240,17 @@
     }
     return this;
   }
+
+  boolean hasUnknownParamsOrReturn() {
+    if (parameters != null) {
+      for (Node paramNode = parameters.getFirstChild();
+           paramNode != null; paramNode = paramNode.getNext()) {
+        JSType type = paramNode.getJSType();
+        if (type == null || type.isUnknownType()) {
+          return true;
+        }
+      }
+    }
+    return returnType == null || returnType.isUnknownType();
+  }
 }
diff --git a/src/com/google/javascript/rhino/jstype/FunctionType.java b/src/com/google/javascript/rhino/jstype/FunctionType.java
index 7e5ed80..f37e6fb 100644
--- a/src/com/google/javascript/rhino/jstype/FunctionType.java
+++ b/src/com/google/javascript/rhino/jstype/FunctionType.java
@@ -461,7 +461,7 @@
   private JSType supAndInfHelper(JSType that, boolean leastSuper) {
     // NOTE(nicksantos): When we remove the unknown type, the function types
     // form a lattice with the universal constructor at the top of the lattice,
-    // and the NoObject type at the bottom of the lattice.
+    // and the LEAST_FUNCTION_TYPE type at the bottom of the lattice.
     //
     // When we introduce the unknown type, it's much more difficult to make
     // heads or tails of the partial ordering of types, because there's no
@@ -470,30 +470,43 @@
     //
     // Rather than make the situation more complicated by introducing new
     // types (like unions of functions), we just fallback on the simpler
-    // approach of using the universal constructor and the AnyObject as
-    // the supremum and infinum of all function types.
+    // approach of getting things right at the top and the bottom of the
+    // lattice.
     if (isFunctionType() && that.isFunctionType()) {
       if (isEquivalentTo(that)) {
         return this;
       }
 
-      // If this is a normal function, look to see if the arguments are equal.
-      // If they are, we can just take the least supertype (or greatest
-      // subtype) of the return types.
-      if (isOrdinaryFunction() && that.isOrdinaryFunction() &&
-          that instanceof FunctionType) {
-        FunctionType other = (FunctionType) that;
-        if (call.hasEqualParameters(other.call) &&
-            isEquivalent(typeOfThis, other.typeOfThis)) {
-          JSType newReturnType = leastSuper ?
-              call.returnType.getLeastSupertype(other.call.returnType) :
-              call.returnType.getGreatestSubtype(other.call.returnType);
-          return cloneWithNewReturnType(
-              newReturnType,
-              call.returnTypeInferred || other.call.returnTypeInferred);
+      FunctionType other = null;
+      if (that instanceof FunctionType) {
+        other = (FunctionType) that;
+      }
+
+      // If these are ordinary functions, then merge them.
+      // Don't do this if any of the params/return
+      // values are unknown, because then there will be cycles in
+      // their local lattice and they will merge in weird ways.
+      if (other != null &&
+          isOrdinaryFunction() && that.isOrdinaryFunction() &&
+          !this.call.hasUnknownParamsOrReturn() &&
+          !other.call.hasUnknownParamsOrReturn()) {
+
+        // Check for the degenerate case.
+        if (this.isSubtype(that)) {
+          return leastSuper ? that : this;
+        } else if (that.isSubtype(this)) {
+          return leastSuper ? this : that;
+        }
+
+        // Merge the two functions component-wise.
+        FunctionType merged = tryMergeFunctionPiecewise(other, leastSuper);
+        if (merged != null) {
+          return merged;
         }
       }
 
+      // The function instance type is a special case
+      // that lives above the rest of the lattice.
       JSType functionInstance = registry.getNativeType(
           JSTypeNative.FUNCTION_INSTANCE_TYPE);
       if (functionInstance.isEquivalentTo(that)) {
@@ -502,9 +515,17 @@
         return leastSuper ? this : that;
       }
 
-      return leastSuper ?
-          registry.getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE) :
-          registry.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
+      // In theory, we should be using the GREATEST_FUNCTION_TYPE as the
+      // greatest function. In practice, we don't because it's way too
+      // broad. The greatest function takes var_args None parameters, which
+      // means that all parameters register a type warning.
+      //
+      // Instead, we use the U2U ctor type, which has unknown type args.
+      FunctionType greatestFn =
+          registry.getNativeFunctionType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
+      FunctionType leastFn =
+          registry.getNativeFunctionType(JSTypeNative.LEAST_FUNCTION_TYPE);
+      return leastSuper ? greatestFn : leastFn;
     }
 
     return leastSuper ?
@@ -512,12 +533,49 @@
         super.getGreatestSubtype(that);
   }
 
-  FunctionType cloneWithNewReturnType(JSType newReturnType, boolean inferred) {
+  /**
+   * Try to get the sup/inf of two functions by looking at the
+   * piecewise components.
+   */
+  private FunctionType tryMergeFunctionPiecewise(
+      FunctionType other, boolean leastSuper) {
+    Node newParamsNode = null;
+    if (call.hasEqualParameters(other.call)) {
+      newParamsNode = call.parameters;
+    } else {
+      // If the parameters are not equal, don't try to merge them.
+      // Someday, we should try to merge the individual params.
+      return null;
+    }
+
+    JSType newReturnType = leastSuper ?
+        call.returnType.getLeastSupertype(other.call.returnType) :
+        call.returnType.getGreatestSubtype(other.call.returnType);
+
+    ObjectType newTypeOfThis = null;
+    if (isEquivalent(typeOfThis, other.typeOfThis)) {
+      newTypeOfThis = typeOfThis;
+    } else {
+      JSType maybeNewTypeOfThis = leastSuper ?
+          typeOfThis.getLeastSupertype(other.typeOfThis) :
+          typeOfThis.getGreatestSubtype(other.typeOfThis);
+      if (maybeNewTypeOfThis instanceof ObjectType) {
+        newTypeOfThis = (ObjectType) maybeNewTypeOfThis;
+      } else {
+        newTypeOfThis = leastSuper ?
+            registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE) :
+            registry.getNativeObjectType(JSTypeNative.NO_OBJECT_TYPE);
+      }
+    }
+
+    boolean newReturnTypeInferred =
+        call.returnTypeInferred || other.call.returnTypeInferred;
+
     return new FunctionType(
-        registry, null, source,
+        registry, null, null,
         new ArrowType(
-            registry, call.parameters, newReturnType, inferred),
-        typeOfThis, null, false, false);
+            registry, newParamsNode, newReturnType, newReturnTypeInferred),
+        newTypeOfThis, null, false, false);
   }
 
   /**
diff --git a/src/com/google/javascript/rhino/jstype/JSTypeNative.java b/src/com/google/javascript/rhino/jstype/JSTypeNative.java
index 3ce06d7..eec52d2 100644
--- a/src/com/google/javascript/rhino/jstype/JSTypeNative.java
+++ b/src/com/google/javascript/rhino/jstype/JSTypeNative.java
@@ -139,8 +139,6 @@
   U2U_CONSTRUCTOR_TYPE,
   U2U_FUNCTION_TYPE,
 
-  // TODO(nicksantos): Fix up these types so that they fit into the
-  // type lattice properly. Right now, they're broken.
   LEAST_FUNCTION_TYPE,
   GREATEST_FUNCTION_TYPE,
 
diff --git a/src/com/google/javascript/rhino/testing/Asserts.java b/src/com/google/javascript/rhino/testing/Asserts.java
index 48edcd2..0dbbafc 100644
--- a/src/com/google/javascript/rhino/testing/Asserts.java
+++ b/src/com/google/javascript/rhino/testing/Asserts.java
@@ -82,8 +82,8 @@
     Assert.assertTrue(
         message +
         (message.isEmpty() ? "" : "\n") +
-        "Expected: " + b + "\n" +
-        "Actual  : " + a,
+        "Expected: " + a + "\n" +
+        "Actual  : " + b,
         a.isEquivalentTo(b));
   }
 }
diff --git a/test/com/google/javascript/rhino/AllTests.java b/test/com/google/javascript/rhino/AllTests.java
deleted file mode 100644
index dcf6202..0000000
--- a/test/com/google/javascript/rhino/AllTests.java
+++ /dev/null
@@ -1,77 +0,0 @@
-/*
- *
- * ***** BEGIN LICENSE BLOCK *****
- * Version: MPL 1.1/GPL 2.0
- *
- * The contents of this file are subject to the Mozilla Public License Version
- * 1.1 (the "License"); you may not use this file except in compliance with
- * the License. You may obtain a copy of the License at
- * http://www.mozilla.org/MPL/
- *
- * Software distributed under the License is distributed on an "AS IS" basis,
- * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
- * for the specific language governing rights and limitations under the
- * License.
- *
- * The Original Code is Rhino code, released
- * May 6, 1999.
- *
- * The Initial Developer of the Original Code is
- * Netscape Communications Corporation.
- * Portions created by the Initial Developer are Copyright (C) 1997-1999
- * the Initial Developer. All Rights Reserved.
- *
- * Contributor(s):
- *   Nick Santos
- *
- * Alternatively, the contents of this file may be used under the terms of
- * the GNU General Public License Version 2 or later (the "GPL"), in which
- * case the provisions of the GPL are applicable instead of those above. If
- * you wish to allow use of your version of this file only under the terms of
- * the GPL and not to allow others to use your version of this file under the
- * MPL, indicate your decision by deleting the provisions above and replacing
- * them with the notice and other provisions required by the GPL. If you do
- * not delete the provisions above, a recipient may use your version of this
- * file under either the MPL or the GPL.
- *
- * ***** END LICENSE BLOCK ***** */
-
-package com.google.javascript.rhino;
-
-import com.google.javascript.rhino.jstype.BooleanLiteralSetTest;
-import com.google.javascript.rhino.jstype.FunctionParamBuilderTest;
-import com.google.javascript.rhino.jstype.JSTypeRegistryTest;
-import com.google.javascript.rhino.jstype.JSTypeTest;
-import com.google.javascript.rhino.jstype.TernaryValueTest;
-import com.google.javascript.rhino.jstype.UnionTypeBuilderTest;
-
-import junit.framework.Test;
-import junit.framework.TestSuite;
-
-import java.util.logging.Level;
-import java.util.logging.Logger;
-
-public class AllTests {
-  public static Test suite() throws Exception {
-    // suspend logging
-    Logger.getLogger("com.google").setLevel(Level.OFF);
-
-    // The testing framework is lame and doesn't work in third_party.
-    // Manually load the classes.
-    TestSuite suite = new TestSuite();
-
-    suite.addTestSuite(JSDocInfoTest.class);
-    suite.addTestSuite(NodeTest.class);
-    suite.addTestSuite(ParserTest.class);
-    suite.addTestSuite(TokenStreamTest.class);
-
-    suite.addTestSuite(BooleanLiteralSetTest.class);
-    suite.addTestSuite(FunctionParamBuilderTest.class);
-    suite.addTestSuite(JSTypeRegistryTest.class);
-    suite.addTestSuite(JSTypeTest.class);
-    suite.addTestSuite(TernaryValueTest.class);
-    suite.addTestSuite(UnionTypeBuilderTest.class);
-
-    return suite;
-  }
-}
diff --git a/test/com/google/javascript/rhino/jstype/FunctionTypeTest.java b/test/com/google/javascript/rhino/jstype/FunctionTypeTest.java
index e58037d..aa50f75 100644
--- a/test/com/google/javascript/rhino/jstype/FunctionTypeTest.java
+++ b/test/com/google/javascript/rhino/jstype/FunctionTypeTest.java
@@ -74,6 +74,20 @@
         .isReturnTypeInferred());
   }
 
+  public void testSupAndInfOfReturnTypesWithDifferentParams() {
+    FunctionType retString = new FunctionBuilder(registry)
+        .withParamsNode(registry.createParameters(NUMBER_TYPE))
+        .withInferredReturnType(STRING_TYPE).build();
+    FunctionType retNumber = new FunctionBuilder(registry)
+        .withParamsNode(registry.createParameters())
+        .withReturnType(NUMBER_TYPE).build();
+
+    assertLeastSupertype(
+        "Function", retString, retNumber);
+    assertGreatestSubtype(
+        "function (...[*]): None", retString, retNumber);
+  }
+
   public void testSupAndInfWithDifferentParams() {
     FunctionType retString = new FunctionBuilder(registry)
         .withParamsNode(registry.createParameters(NUMBER_TYPE))
@@ -85,21 +99,39 @@
     assertLeastSupertype(
         "Function", retString, retNumber);
     assertGreatestSubtype(
-        "NoObject", retString, retNumber);
+        "function (...[*]): None", retString, retNumber);
   }
 
   public void testSupAndInfWithDifferentThisTypes() {
     FunctionType retString = new FunctionBuilder(registry)
+        .withParamsNode(registry.createParameters())
         .withTypeOfThis(OBJECT_TYPE)
         .withReturnType(STRING_TYPE).build();
     FunctionType retNumber = new FunctionBuilder(registry)
+        .withParamsNode(registry.createParameters())
         .withTypeOfThis(DATE_TYPE)
         .withReturnType(NUMBER_TYPE).build();
 
     assertLeastSupertype(
-        "Function", retString, retNumber);
+        "function (this:Object): (number|string)", retString, retNumber);
     assertGreatestSubtype(
-        "NoObject", retString, retNumber);
+        "function (this:Date): None", retString, retNumber);
+  }
+
+  public void testSupAndInfWithDifferentThisTypes2() {
+    FunctionType retString = new FunctionBuilder(registry)
+        .withParamsNode(registry.createParameters())
+        .withTypeOfThis(ARRAY_TYPE)
+        .withReturnType(STRING_TYPE).build();
+    FunctionType retNumber = new FunctionBuilder(registry)
+        .withParamsNode(registry.createParameters())
+        .withTypeOfThis(DATE_TYPE)
+        .withReturnType(NUMBER_TYPE).build();
+
+    assertLeastSupertype(
+        "function (this:Object): (number|string)", retString, retNumber);
+    assertGreatestSubtype(
+        "function (this:NoObject): None", retString, retNumber);
   }
 
   private void assertLeastSupertype(String s, JSType t1, JSType t2) {
diff --git a/test/com/google/javascript/rhino/jstype/JSTypeTest.java b/test/com/google/javascript/rhino/jstype/JSTypeTest.java
index 744eafe..32773f3 100644
--- a/test/com/google/javascript/rhino/jstype/JSTypeTest.java
+++ b/test/com/google/javascript/rhino/jstype/JSTypeTest.java
@@ -2796,7 +2796,7 @@
           assertTypeEquals(String.format("sup(%s, %s)", typeA, typeB),
               U2U_CONSTRUCTOR_TYPE, typeA.getLeastSupertype(typeB));
           assertTypeEquals(String.format("inf(%s, %s)", typeA, typeB),
-              NO_OBJECT_TYPE, typeA.getGreatestSubtype(typeB));
+              LEAST_FUNCTION_TYPE, typeA.getGreatestSubtype(typeB));
         }
       }
     }
@@ -2841,7 +2841,7 @@
           assertTypeEquals(String.format("sup(%s, %s)", typeA, typeB),
               U2U_CONSTRUCTOR_TYPE, typeA.getLeastSupertype(typeB));
           assertTypeEquals(String.format("inf(%s, %s)", typeA, typeB),
-              NO_OBJECT_TYPE, typeA.getGreatestSubtype(typeB));
+              LEAST_FUNCTION_TYPE, typeA.getGreatestSubtype(typeB));
         }
       }
     }
@@ -4269,6 +4269,8 @@
         BOOLEAN_TYPE,
         OBJECT_TYPE,
         U2U_CONSTRUCTOR_TYPE,
+        LEAST_FUNCTION_TYPE,
+        GREATEST_FUNCTION_TYPE,
         ALL_TYPE,
         NO_TYPE,
         NO_OBJECT_TYPE,
@@ -4657,7 +4659,9 @@
         registry.getNativeType(JSTypeNative.OBJECT_PROTOTYPE),
         registry.getNativeType(JSTypeNative.OBJECT_TYPE),
         registry.getNativeType(JSTypeNative.FUNCTION_PROTOTYPE),
+        registry.getNativeType(JSTypeNative.GREATEST_FUNCTION_TYPE),
         dateMethod,
+        registry.getNativeType(JSTypeNative.LEAST_FUNCTION_TYPE),
         registry.getNativeType(JSTypeNative.NO_OBJECT_TYPE),
         registry.getNativeType(JSTypeNative.NO_TYPE));
     verifySubtypeChain(typeChain);
