===
insert-node
---
MethodDeclaration [17506,19095]
to
TypeDeclaration [2139,27411]
at 46
===
insert-tree
---
Javadoc [17506,17605]
    TagElement [17515,17599]
        TextElement: Try to get the sup/inf of two functions by looking at the [17515,17572]
        TextElement: piecewise components. [17578,17599]
to
MethodDeclaration [17506,19095]
at 0
===
insert-node
---
Modifier: private [17608,17615]
to
MethodDeclaration [17506,19095]
at 1
===
insert-tree
---
SimpleType [17616,17628]
    SimpleName: FunctionType [17616,17628]
to
MethodDeclaration [17506,19095]
at 2
===
insert-node
---
SimpleName: tryMergeFunctionPiecewise [17629,17654]
to
MethodDeclaration [17506,19095]
at 3
===
insert-tree
---
SingleVariableDeclaration [17662,17680]
    SimpleType [17662,17674]
        SimpleName: FunctionType [17662,17674]
    SimpleName: other [17675,17680]
to
MethodDeclaration [17506,19095]
at 4
===
insert-tree
---
SingleVariableDeclaration [17682,17700]
    PrimitiveType: boolean [17682,17689]
    SimpleName: leastSuper [17690,17700]
to
MethodDeclaration [17506,19095]
at 5
===
insert-node
---
Block [17702,19095]
to
MethodDeclaration [17506,19095]
at 6
===
insert-tree
---
VariableDeclarationStatement [17708,17734]
    SimpleType [17708,17712]
        SimpleName: Node [17708,17712]
    VariableDeclarationFragment [17713,17733]
        SimpleName: newParamsNode [17713,17726]
        NullLiteral [17729,17733]
to
Block [17702,19095]
at 0
===
insert-tree
---
IfStatement [17739,17989]
    MethodInvocation [17743,17778]
        METHOD_INVOCATION_RECEIVER [17743,17747]
            SimpleName: call [17743,17747]
        SimpleName: hasEqualParameters [17748,17766]
        METHOD_INVOCATION_ARGUMENTS [17767,17777]
            QualifiedName: other.call [17767,17777]
    Block [17780,17826]
        ExpressionStatement [17788,17820]
            Assignment [17788,17819]
                SimpleName: newParamsNode [17788,17801]
                ASSIGNMENT_OPERATOR: = [17802,17803]
                QualifiedName: call.parameters [17804,17819]
    Block [17832,17989]
        ReturnStatement [17971,17983]
            NullLiteral [17978,17982]
to
Block [17702,19095]
at 1
===
move-tree
---
VariableDeclarationStatement [15872,16053]
    SimpleType [15872,15878]
        SimpleName: JSType [15872,15878]
    VariableDeclarationFragment [15879,16052]
        SimpleName: newReturnType [15879,15892]
        ConditionalExpression [15895,16052]
            SimpleName: leastSuper [15895,15905]
            MethodInvocation [15922,15978]
                METHOD_INVOCATION_RECEIVER [15922,15937]
                    QualifiedName: call.returnType [15922,15937]
                SimpleName: getLeastSupertype [15938,15955]
                METHOD_INVOCATION_ARGUMENTS [15956,15977]
                    QualifiedName: other.call.returnType [15956,15977]
            MethodInvocation [15995,16052]
                METHOD_INVOCATION_RECEIVER [15995,16010]
                    QualifiedName: call.returnType [15995,16010]
                SimpleName: getGreatestSubtype [16011,16029]
                METHOD_INVOCATION_ARGUMENTS [16030,16051]
                    QualifiedName: other.call.returnType [16030,16051]
to
Block [17702,19095]
at 2
===
insert-tree
---
VariableDeclarationStatement [18170,18202]
    SimpleType [18170,18180]
        SimpleName: ObjectType [18170,18180]
    VariableDeclarationFragment [18181,18201]
        SimpleName: newTypeOfThis [18181,18194]
        NullLiteral [18197,18201]
to
Block [17702,19095]
at 3
===
move-tree
---
IfStatement [15761,16206]
    InfixExpression [15765,15858]
        MethodInvocation [15765,15800]
            METHOD_INVOCATION_RECEIVER [15765,15769]
                SimpleName: call [15765,15769]
            SimpleName: hasEqualParameters [15770,15788]
            METHOD_INVOCATION_ARGUMENTS [15789,15799]
                QualifiedName: other.call [15789,15799]
        INFIX_EXPRESSION_OPERATOR: && [15801,15803]
        MethodInvocation [15816,15858]
            SimpleName: isEquivalent [15816,15828]
            METHOD_INVOCATION_ARGUMENTS [15829,15857]
                SimpleName: typeOfThis [15829,15839]
                QualifiedName: other.typeOfThis [15841,15857]
    Block [15860,16206]
        VariableDeclarationStatement [15872,16053]
            SimpleType [15872,15878]
                SimpleName: JSType [15872,15878]
            VariableDeclarationFragment [15879,16052]
                SimpleName: newReturnType [15879,15892]
                ConditionalExpression [15895,16052]
                    SimpleName: leastSuper [15895,15905]
                    MethodInvocation [15922,15978]
                        METHOD_INVOCATION_RECEIVER [15922,15937]
                            QualifiedName: call.returnType [15922,15937]
                        SimpleName: getLeastSupertype [15938,15955]
                        METHOD_INVOCATION_ARGUMENTS [15956,15977]
                            QualifiedName: other.call.returnType [15956,15977]
                    MethodInvocation [15995,16052]
                        METHOD_INVOCATION_RECEIVER [15995,16010]
                            QualifiedName: call.returnType [15995,16010]
                        SimpleName: getGreatestSubtype [16011,16029]
                        METHOD_INVOCATION_ARGUMENTS [16030,16051]
                            QualifiedName: other.call.returnType [16030,16051]
        ReturnStatement [16064,16196]
            MethodInvocation [16071,16195]
                SimpleName: cloneWithNewReturnType [16071,16093]
                METHOD_INVOCATION_ARGUMENTS [16109,16194]
                    SimpleName: newReturnType [16109,16122]
                    InfixExpression [16138,16194]
                        QualifiedName: call.returnTypeInferred [16138,16161]
                        INFIX_EXPRESSION_OPERATOR: || [16162,16164]
                        QualifiedName: other.call.returnTypeInferred [16165,16194]
to
Block [17702,19095]
at 4
===
insert-node
---
VariableDeclarationStatement [18791,18888]
to
Block [17702,19095]
at 5
===
insert-tree
---
ReturnStatement [18894,19091]
    ClassInstanceCreation [18901,19090]
        SimpleType [18905,18917]
            SimpleName: FunctionType [18905,18917]
        SimpleName: registry [18927,18935]
        NullLiteral [18937,18941]
        NullLiteral [18943,18947]
        ClassInstanceCreation [18957,19046]
            SimpleType [18961,18970]
                SimpleName: ArrowType [18961,18970]
            SimpleName: registry [18984,18992]
            SimpleName: newParamsNode [18994,19007]
            SimpleName: newReturnType [19009,19022]
            SimpleName: newReturnTypeInferred [19024,19045]
        SimpleName: newTypeOfThis [19056,19069]
        NullLiteral [19071,19075]
        BooleanLiteral: false [19077,19082]
        BooleanLiteral: false [19084,19089]
to
Block [17702,19095]
at 6
===
move-tree
---
MethodInvocation [15816,15858]
    SimpleName: isEquivalent [15816,15828]
    METHOD_INVOCATION_ARGUMENTS [15829,15857]
        SimpleName: typeOfThis [15829,15839]
        QualifiedName: other.typeOfThis [15841,15857]
to
IfStatement [15761,16206]
at 0
===
insert-tree
---
Block [18255,18296]
    ExpressionStatement [18263,18290]
        Assignment [18263,18289]
            SimpleName: newTypeOfThis [18263,18276]
            ASSIGNMENT_OPERATOR: = [18277,18278]
            SimpleName: typeOfThis [18279,18289]
to
IfStatement [15761,16206]
at 1
===
insert-node
---
PrimitiveType: boolean [18791,18798]
to
VariableDeclarationStatement [18791,18888]
at 0
===
insert-node
---
VariableDeclarationFragment [18799,18887]
to
VariableDeclarationStatement [18791,18888]
at 1
===
insert-tree
---
VariableDeclarationStatement [15387,15413]
    SimpleType [15387,15399]
        SimpleName: FunctionType [15387,15399]
    VariableDeclarationFragment [15400,15412]
        SimpleName: other [15400,15405]
        NullLiteral [15408,15412]
to
Block [15342,16684]
at 1
===
insert-node
---
IfStatement [15420,15500]
to
Block [15342,16684]
at 2
===
insert-tree
---
VariableDeclarationStatement [17132,17234]
    SimpleType [17132,17144]
        SimpleName: FunctionType [17132,17144]
    VariableDeclarationFragment [17145,17233]
        SimpleName: greatestFn [17145,17155]
        MethodInvocation [17168,17233]
            METHOD_INVOCATION_RECEIVER [17168,17176]
                SimpleName: registry [17168,17176]
            SimpleName: getNativeFunctionType [17177,17198]
            METHOD_INVOCATION_ARGUMENTS [17199,17232]
                QualifiedName: JSTypeNative.U2U_CONSTRUCTOR_TYPE [17199,17232]
to
Block [15342,16684]
at 6
===
insert-node
---
VariableDeclarationStatement [17241,17339]
to
Block [15342,16684]
at 7
===
insert-tree
---
ReturnStatement [17346,17387]
    ConditionalExpression [17353,17386]
        SimpleName: leastSuper [17353,17363]
        SimpleName: greatestFn [17366,17376]
        SimpleName: leastFn [17379,17386]
to
Block [15342,16684]
at 8
===
insert-tree
---
VariableDeclarationStatement [18310,18468]
    SimpleType [18310,18316]
        SimpleName: JSType [18310,18316]
    VariableDeclarationFragment [18317,18467]
        SimpleName: maybeNewTypeOfThis [18317,18335]
        ConditionalExpression [18338,18467]
            SimpleName: leastSuper [18338,18348]
            MethodInvocation [18361,18407]
                METHOD_INVOCATION_RECEIVER [18361,18371]
                    SimpleName: typeOfThis [18361,18371]
                SimpleName: getLeastSupertype [18372,18389]
                METHOD_INVOCATION_ARGUMENTS [18390,18406]
                    QualifiedName: other.typeOfThis [18390,18406]
            MethodInvocation [18420,18467]
                METHOD_INVOCATION_RECEIVER [18420,18430]
                    SimpleName: typeOfThis [18420,18430]
                SimpleName: getGreatestSubtype [18431,18449]
                METHOD_INVOCATION_ARGUMENTS [18450,18466]
                    QualifiedName: other.typeOfThis [18450,18466]
to
Block [15860,16206]
at 0
===
insert-tree
---
IfStatement [18475,18779]
    InstanceofExpression [18479,18519]
        SimpleName: maybeNewTypeOfThis [18479,18497]
        SimpleType [18509,18519]
            SimpleName: ObjectType [18509,18519]
    Block [18521,18587]
        ExpressionStatement [18531,18579]
            Assignment [18531,18578]
                SimpleName: newTypeOfThis [18531,18544]
                ASSIGNMENT_OPERATOR: = [18545,18546]
                CastExpression [18547,18578]
                    SimpleType [18548,18558]
                        SimpleName: ObjectType [18548,18558]
                    SimpleName: maybeNewTypeOfThis [18560,18578]
    Block [18593,18779]
        ExpressionStatement [18603,18771]
            Assignment [18603,18770]
                SimpleName: newTypeOfThis [18603,18616]
                ASSIGNMENT_OPERATOR: = [18617,18618]
                ConditionalExpression [18619,18770]
                    SimpleName: leastSuper [18619,18629]
                    MethodInvocation [18644,18698]
                        METHOD_INVOCATION_RECEIVER [18644,18652]
                            SimpleName: registry [18644,18652]
                        SimpleName: getNativeObjectType [18653,18672]
                        METHOD_INVOCATION_ARGUMENTS [18673,18697]
                            QualifiedName: JSTypeNative.OBJECT_TYPE [18673,18697]
                    MethodInvocation [18713,18770]
                        METHOD_INVOCATION_RECEIVER [18713,18721]
                            SimpleName: registry [18713,18721]
                        SimpleName: getNativeObjectType [18722,18741]
                        METHOD_INVOCATION_ARGUMENTS [18742,18769]
                            QualifiedName: JSTypeNative.NO_OBJECT_TYPE [18742,18769]
to
Block [15860,16206]
at 1
===
insert-node
---
SimpleName: newReturnTypeInferred [18799,18820]
to
VariableDeclarationFragment [18799,18887]
at 0
===
move-tree
---
InfixExpression [16138,16194]
    QualifiedName: call.returnTypeInferred [16138,16161]
    INFIX_EXPRESSION_OPERATOR: || [16162,16164]
    QualifiedName: other.call.returnTypeInferred [16165,16194]
to
VariableDeclarationFragment [18799,18887]
at 1
===
insert-tree
---
InstanceofExpression [15424,15452]
    SimpleName: that [15424,15428]
    SimpleType [15440,15452]
        SimpleName: FunctionType [15440,15452]
to
IfStatement [15420,15500]
at 0
===
insert-node
---
Block [15454,15500]
to
IfStatement [15420,15500]
at 1
===
insert-node
---
InfixExpression [15752,15931]
to
IfStatement [15604,16214]
at 0
===
insert-tree
---
SimpleType [17241,17253]
    SimpleName: FunctionType [17241,17253]
to
VariableDeclarationStatement [17241,17339]
at 0
===
insert-node
---
VariableDeclarationFragment [17254,17338]
to
VariableDeclarationStatement [17241,17339]
at 1
===
insert-node
---
ExpressionStatement [15464,15492]
to
Block [15454,15500]
at 0
===
insert-node
---
InfixExpression [15752,15879]
to
InfixExpression [15752,15931]
at 0
===
insert-node
---
INFIX_EXPRESSION_OPERATOR: && [15880,15882]
to
InfixExpression [15752,15931]
at 1
===
insert-tree
---
PrefixExpression [15893,15931]
    PREFIX_EXPRESSION_OPERATOR: ! [15893,15894]
    MethodInvocation [15894,15931]
        METHOD_INVOCATION_RECEIVER [15894,15904]
            QualifiedName: other.call [15894,15904]
        SimpleName: hasUnknownParamsOrReturn [15905,15929]
to
InfixExpression [15752,15931]
at 2
===
insert-tree
---
IfStatement [15986,16152]
    MethodInvocation [15990,16010]
        METHOD_INVOCATION_RECEIVER [15990,15994]
            ThisExpression [15990,15994]
        SimpleName: isSubtype [15995,16004]
        METHOD_INVOCATION_ARGUMENTS [16005,16009]
            SimpleName: that [16005,16009]
    Block [16012,16066]
        ReturnStatement [16024,16056]
            ConditionalExpression [16031,16055]
                SimpleName: leastSuper [16031,16041]
                SimpleName: that [16044,16048]
                ThisExpression [16051,16055]
    IfStatement [16072,16152]
        MethodInvocation [16076,16096]
            METHOD_INVOCATION_RECEIVER [16076,16080]
                SimpleName: that [16076,16080]
            SimpleName: isSubtype [16081,16090]
            METHOD_INVOCATION_ARGUMENTS [16091,16095]
                ThisExpression [16091,16095]
        Block [16098,16152]
            ReturnStatement [16110,16142]
                ConditionalExpression [16117,16141]
                    SimpleName: leastSuper [16117,16127]
                    ThisExpression [16130,16134]
                    SimpleName: that [16137,16141]
to
Block [15701,16214]
at 0
===
insert-tree
---
VariableDeclarationStatement [16213,16280]
    SimpleType [16213,16225]
        SimpleName: FunctionType [16213,16225]
    VariableDeclarationFragment [16226,16279]
        SimpleName: merged [16226,16232]
        MethodInvocation [16235,16279]
            SimpleName: tryMergeFunctionPiecewise [16235,16260]
            METHOD_INVOCATION_ARGUMENTS [16261,16278]
                SimpleName: other [16261,16266]
                SimpleName: leastSuper [16268,16278]
to
Block [15701,16214]
at 1
===
insert-tree
---
IfStatement [16289,16345]
    InfixExpression [16293,16307]
        SimpleName: merged [16293,16299]
        INFIX_EXPRESSION_OPERATOR: != [16300,16302]
        NullLiteral [16303,16307]
    Block [16309,16345]
        ReturnStatement [16321,16335]
            SimpleName: merged [16328,16334]
to
Block [15701,16214]
at 2
===
insert-node
---
SimpleName: leastFn [17254,17261]
to
VariableDeclarationFragment [17254,17338]
at 0
===
move-tree
---
MethodInvocation [16626,16677]
    METHOD_INVOCATION_RECEIVER [16626,16634]
        SimpleName: registry [16626,16634]
    SimpleName: getNativeType [16635,16648]
    METHOD_INVOCATION_ARGUMENTS [16649,16676]
        QualifiedName: JSTypeNative.NO_OBJECT_TYPE [16649,16676]
to
VariableDeclarationFragment [17254,17338]
at 1
===
insert-node
---
Assignment [15464,15491]
to
ExpressionStatement [15464,15492]
at 0
===
move-tree
---
InfixExpression [15608,15699]
    MethodInvocation [15608,15628]
        SimpleName: isOrdinaryFunction [15608,15626]
    INFIX_EXPRESSION_OPERATOR: && [15629,15631]
    MethodInvocation [15632,15657]
        METHOD_INVOCATION_RECEIVER [15632,15636]
            SimpleName: that [15632,15636]
        SimpleName: isOrdinaryFunction [15637,15655]
    InstanceofExpression [15671,15699]
        SimpleName: that [15671,15675]
        SimpleType [15687,15699]
            SimpleName: FunctionType [15687,15699]
to
InfixExpression [15752,15879]
at 0
===
insert-node
---
INFIX_EXPRESSION_OPERATOR: && [15829,15831]
to
InfixExpression [15752,15879]
at 1
===
insert-tree
---
PrefixExpression [15842,15879]
    PREFIX_EXPRESSION_OPERATOR: ! [15842,15843]
    MethodInvocation [15843,15879]
        METHOD_INVOCATION_RECEIVER [15843,15852]
            FieldAccess [15843,15852]
                ThisExpression [15843,15847]
                SimpleName: call [15848,15852]
        SimpleName: hasUnknownParamsOrReturn [15853,15877]
to
InfixExpression [15752,15879]
at 2
===
update-node
---
SimpleName: getNativeType [16635,16648]
replace getNativeType by getNativeFunctionType
===
move-tree
---
SimpleName: other [15724,15729]
to
Assignment [15464,15491]
at 0
===
insert-node
---
ASSIGNMENT_OPERATOR: = [15470,15471]
to
Assignment [15464,15491]
at 1
===
move-tree
---
CastExpression [15732,15751]
    SimpleType [15733,15745]
        SimpleName: FunctionType [15733,15745]
    SimpleName: that [15747,15751]
to
Assignment [15464,15491]
at 2
===
insert-node
---
InfixExpression [15752,15799]
to
InfixExpression [15608,15699]
at 0
===
update-node
---
QualifiedName: JSTypeNative.NO_OBJECT_TYPE [16649,16676]
replace JSTypeNative.NO_OBJECT_TYPE by JSTypeNative.LEAST_FUNCTION_TYPE
===
insert-tree
---
InfixExpression [15752,15765]
    SimpleName: other [15752,15757]
    INFIX_EXPRESSION_OPERATOR: != [15758,15760]
    NullLiteral [15761,15765]
to
InfixExpression [15752,15799]
at 0
===
insert-node
---
INFIX_EXPRESSION_OPERATOR: && [15766,15768]
to
InfixExpression [15752,15799]
at 1
===
move-tree
---
MethodInvocation [15608,15628]
    SimpleName: isOrdinaryFunction [15608,15626]
to
InfixExpression [15752,15799]
at 2
===
delete-tree
---
InstanceofExpression [15671,15699]
    SimpleName: that [15671,15675]
    SimpleType [15687,15699]
        SimpleName: FunctionType [15687,15699]
===
delete-tree
---
SimpleType [15711,15723]
    SimpleName: FunctionType [15711,15723]
===
delete-node
---
VariableDeclarationFragment [15724,15751]
===
===
delete-node
---
VariableDeclarationStatement [15711,15752]
===
===
delete-node
---
SimpleName: leastSuper [16533,16543]
===
===
delete-tree
---
MethodInvocation [16556,16613]
    METHOD_INVOCATION_RECEIVER [16556,16564]
        SimpleName: registry [16556,16564]
    SimpleName: getNativeType [16565,16578]
    METHOD_INVOCATION_ARGUMENTS [16579,16612]
        QualifiedName: JSTypeNative.U2U_CONSTRUCTOR_TYPE [16579,16612]
===
delete-node
---
ConditionalExpression [16533,16677]
===
===
delete-node
---
ReturnStatement [16526,16678]
===
===
delete-tree
---
MethodInvocation [15765,15800]
    METHOD_INVOCATION_RECEIVER [15765,15769]
        SimpleName: call [15765,15769]
    SimpleName: hasEqualParameters [15770,15788]
    METHOD_INVOCATION_ARGUMENTS [15789,15799]
        QualifiedName: other.call [15789,15799]
===
delete-node
---
INFIX_EXPRESSION_OPERATOR: && [15801,15803]
===
===
delete-node
---
InfixExpression [15765,15858]
===
===
delete-node
---
SimpleName: cloneWithNewReturnType [16071,16093]
===
===
delete-node
---
SimpleName: newReturnType [16109,16122]
===
===
delete-node
---
METHOD_INVOCATION_ARGUMENTS [16109,16194]
===
===
delete-node
---
MethodInvocation [16071,16195]
===
===
delete-node
---
ReturnStatement [16064,16196]
===
===
delete-tree
---
MethodDeclaration [16797,17068]
    SimpleType [16797,16809]
        SimpleName: FunctionType [16797,16809]
    SimpleName: cloneWithNewReturnType [16810,16832]
    SingleVariableDeclaration [16833,16853]
        SimpleType [16833,16839]
            SimpleName: JSType [16833,16839]
        SimpleName: newReturnType [16840,16853]
    SingleVariableDeclaration [16855,16871]
        PrimitiveType: boolean [16855,16862]
        SimpleName: inferred [16863,16871]
    Block [16873,17068]
        ReturnStatement [16879,17064]
            ClassInstanceCreation [16886,17063]
                SimpleType [16890,16902]
                    SimpleName: FunctionType [16890,16902]
                SimpleName: registry [16912,16920]
                NullLiteral [16922,16926]
                SimpleName: source [16928,16934]
                ClassInstanceCreation [16944,17022]
                    SimpleType [16948,16957]
                        SimpleName: ArrowType [16948,16957]
                    SimpleName: registry [16971,16979]
                    QualifiedName: call.parameters [16981,16996]
                    SimpleName: newReturnType [16998,17011]
                    SimpleName: inferred [17013,17021]
                SimpleName: typeOfThis [17032,17042]
                NullLiteral [17044,17048]
                BooleanLiteral: false [17050,17055]
                BooleanLiteral: false [17057,17062]
