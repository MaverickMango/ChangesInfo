{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "/home/liumengjiao/Desktop/CI/Benchmark/data/changesInfo/",
  "properties": {
    "trigger.tests": "org.joda.time.TestPartial_Basics::testWith_baseAndArgHaveNoRange",
    "test.dir": "src/test/java",
    "clz.modified": "org.joda.time.field.UnsupportedDurationField,org.joda.time.Partial",
    "src.dir": "src/main/java"
  },
  "timeoutSecond": 100,
  "proj": "Time",
  "id": "2",
  "workingDir": "../bugs/Time_2_buggy",
  "buggyCommit": "8d109fe1a999a11b4557536dd96f9210460a5936",
  "inducingCommit": "3ba9ba799b3261b7332a467a88be142c83b298fd",
  "originalCommit": "bcb044669b4d1f8d334861ccbd169924d6ef3b54",
  "bug_name": "Time_2",
  "derive": "defects4j",
  "original_fixing_commit": "8612f9e5b88c1bea933ef9ab1e431f5db3006b48",
  "buildFiles_changed": true,
  "regression": true,
  "inducing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/joda/time/Partial.java",
        "src/main/java/org/joda/time/Partial.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.joda.time.Partial:with:[DateTimeFieldType fieldType, int value]:Partial"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "org.joda.time.Partial:with:[DateTimeFieldType fieldType, int value]:Partial"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "2",
            "462",
            "463"
          ],
          "num": 3
        },
        {
          "qualified_names": [
            "2",
            "462",
            "463",
            "464"
          ],
          "num": 4
        }
      ],
      "diff": "diff --git a/src/main/java/org/joda/time/Partial.java b/src/main/java/org/joda/time/Partial.java\nindex aaf0a0f..8e8e603 100644\n--- a/src/main/java/org/joda/time/Partial.java\n+++ b/src/main/java/org/joda/time/Partial.java\n@@ -1,5 +1,5 @@\n /*\n- *  Copyright 2001-2009 Stephen Colebourne\n+ *  Copyright 2001-2013 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n@@ -459,8 +459,9 @@\n             newValues[i] \u003d value;\n             System.arraycopy(iTypes, i, newTypes, i + 1, newTypes.length - i - 1);\n             System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);\n-            \n-            Partial newPartial \u003d new Partial(iChronology, newTypes, newValues);\n+            // use public constructor to ensure full validation\n+            // this isn\u0027t overly efficient, but is safe\n+            Partial newPartial \u003d new Partial(newTypes, newValues, iChronology);\n             iChronology.validate(newPartial, newValues);\n             return newPartial;\n         }\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [18532,18599]"
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [18425,18492]",
          "to": ""
        }
      ]
    }
  ],
  "inducing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  },
  "trigger_tests": [
    {
      "test_class": "org.joda.time.TestPartial_Basics",
      "test_function": "testWith_baseAndArgHaveNoRange",
      "assertion_line": "469",
      "exception": "java.lang.IllegalArgumentException",
      "message": "Types array must not contain duplicate: era and year"
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/joda/time/Partial.java",
        "src/main/java/org/joda/time/Partial.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.joda.time.Partial:Partial:[DateTimeFieldType[] types, int[] values, Chronology chronology]:null",
            "org.joda.time.Partial:with:[DateTimeFieldType fieldType, int value]:Partial"
          ],
          "num": 2
        },
        {
          "qualified_names": [
            "org.joda.time.Partial:with:[DateTimeFieldType fieldType, int value]:Partial",
            "org.joda.time.Partial:Partial:[DateTimeFieldType[] types, int[] values, Chronology chronology]:null"
          ],
          "num": 2
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "218",
            "224",
            "238",
            "446"
          ],
          "num": 4
        },
        {
          "qualified_names": [
            "218",
            "224",
            "225",
            "239",
            "240",
            "449",
            "450",
            "451"
          ],
          "num": 8
        }
      ],
      "diff": "diff --git a/src/main/java/org/joda/time/Partial.java b/src/main/java/org/joda/time/Partial.java\nindex 8e8e603..3b84fdc 100644\n--- a/src/main/java/org/joda/time/Partial.java\n+++ b/src/main/java/org/joda/time/Partial.java\n@@ -215,13 +215,14 @@\n             DurationField loopUnitField \u003d loopType.getDurationType().getField(iChronology);\n             if (i \u003e 0) {\n                 int compare \u003d lastUnitField.compareTo(loopUnitField);\n-                if (compare \u003c 0 || (compare !\u003d 0 \u0026\u0026 loopUnitField.isSupported() \u003d\u003d false)) {\n+                if (compare \u003c 0) {\n                     throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" +\n                             types[i - 1].getName() + \" \u003c \" + loopType.getName());\n                 } else if (compare \u003d\u003d 0) {\n                     if (types[i - 1].getRangeDurationType() \u003d\u003d null) {\n                         if (loopType.getRangeDurationType() \u003d\u003d null) {\n-                            throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + loopType.getName());\n+                            throw new IllegalArgumentException(\"Types array must not contain duplicate: \" +\n+                                            types[i - 1].getName() + \" and \" + loopType.getName());\n                         }\n                     } else {\n                         if (loopType.getRangeDurationType() \u003d\u003d null) {\n@@ -235,7 +236,8 @@\n                                     types[i - 1].getName() + \" \u003c \" + loopType.getName());\n                         }\n                         if (lastRangeField.compareTo(loopRangeField) \u003d\u003d 0) {\n-                            throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + loopType.getName());\n+                            throw new IllegalArgumentException(\"Types array must not contain duplicate: \" +\n+                                            types[i - 1].getName() + \" and \" + loopType.getName());\n                         }\n                     }\n                 }\n@@ -444,6 +446,9 @@\n                         if (compare \u003e 0) {\n                             break;\n                         } else if (compare \u003d\u003d 0) {\n+                            if (fieldType.getRangeDurationType() \u003d\u003d null) {\n+                                break;\n+                            }\n                             DurationField rangeField \u003d fieldType.getRangeDurationType().getField(iChronology);\n                             DurationField loopRangeField \u003d loopType.getRangeDurationType().getField(iChronology);\n                             if (rangeField.compareTo(loopRangeField) \u003e 0) {\n",
      "operations": [
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [17722,17838]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodInvocation [8932,8954]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "StringLiteral: \" and \" [8957,8964]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodInvocation [10105,10127]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "StringLiteral: \" and \" [10130,10137]"
        },
        {
          "type": "delete-node",
          "from": "INFIX_EXPRESSION_OPERATOR: || [8403,8405]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ParenthesizedExpression [8406,8460]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "InfixExpression [8391,8460]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/joda/time/field/UnsupportedDurationField.java",
        "src/main/java/org/joda/time/field/UnsupportedDurationField.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.joda.time.field.UnsupportedDurationField:compareTo:[DurationField durationField]:int"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "org.joda.time.field.UnsupportedDurationField:compareTo:[DurationField durationField]:int"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "226"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "227",
            "228",
            "229"
          ],
          "num": 3
        }
      ],
      "diff": "diff --git a/src/main/java/org/joda/time/field/UnsupportedDurationField.java b/src/main/java/org/joda/time/field/UnsupportedDurationField.java\nindex bf44e01..7e0ce57 100644\n--- a/src/main/java/org/joda/time/field/UnsupportedDurationField.java\n+++ b/src/main/java/org/joda/time/field/UnsupportedDurationField.java\n@@ -224,6 +224,9 @@\n      * @return zero always\n      */\n     public int compareTo(DurationField durationField) {\n+        if (durationField.isSupported()) {\n+            return 1;\n+        }\n         return 0;\n     }\n \n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [5773,5839]"
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  },
  "patch_changed_mths": {
    "qualified_names": [
      "org.joda.time.Partial:Partial([Lorg/joda/time/DateTimeFieldType;[ILorg/joda/time/Chronology;)V:regression",
      "org.joda.time.Partial:with(Lorg/joda/time/DateTimeFieldType;I)Lorg/joda/time/Partial;:regression"
    ],
    "num": 2
  }
}