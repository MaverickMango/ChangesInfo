diff --git a/src/java/org/apache/commons/lang/text/translate/LookupTranslator.java b/src/java/org/apache/commons/lang/text/translate/LookupTranslator.java
index ea45ab6..5e707cd 100644
--- a/src/java/org/apache/commons/lang/text/translate/LookupTranslator.java
+++ b/src/java/org/apache/commons/lang/text/translate/LookupTranslator.java
@@ -18,14 +18,18 @@
 
 import java.io.IOException;
 import java.io.Writer;
+import java.util.HashMap;
 
 /**
  * Translates a value using a lookup table. 
  * @since 3.0
  */
+// TODO: Replace with a RegexLookup? Performance test.
 public class LookupTranslator extends CharSequenceTranslator {
 
-    protected CharSequence[][] lookup;
+    private HashMap<CharSequence, CharSequence> lookupMap;
+    private int shortest = Integer.MAX_VALUE;
+    private int longest = 0;
 
     /**
      * Define the lookup table to be used in translation
@@ -33,18 +37,34 @@
      * @param CharSequence[][] Lookup table of size [*][2]
      */
     public LookupTranslator(CharSequence[][] lookup) {
-        this.lookup = lookup;
+        lookupMap = new HashMap<CharSequence, CharSequence>();
+        for(CharSequence[] seq : lookup) {
+            this.lookupMap.put(seq[0], seq[1]);
+            int sz = seq[0].length();
+            if(sz < shortest) {
+                shortest = sz;
+            }
+            if(sz > longest) {
+                longest = sz;
+            }
+        }
     }
 
     /**
      * {@inheritDoc}
      */
     public int translate(CharSequence input, int index, Writer out) throws IOException {
-        CharSequence subsequence = input.subSequence(index, input.length());
-        for(CharSequence[] seq : lookup) {
-            if( subsequence.toString().startsWith(seq[0].toString()) ) {
-                out.write(seq[1].toString());
-                return seq[0].length();
+        int max = longest;
+        if(index + longest > input.length()) {
+            max = input.length() - index;
+        }
+        // descend so as to get a greedy algorithm
+        for(int i=max; i >= shortest; i--) {
+            CharSequence subSeq = input.subSequence(index, index + i);
+            CharSequence result = lookupMap.get(subSeq);
+            if(result != null) {
+                out.write(result.toString());
+                return i;
             }
         }
         return 0;
