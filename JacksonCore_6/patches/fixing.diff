diff --git a/release-notes/VERSION b/release-notes/VERSION
index d9f04f7..97ccc26 100644
--- a/release-notes/VERSION
+++ b/release-notes/VERSION
@@ -19,7 +19,8 @@
  (reported by Lars P, larsp@github)
 #173: An exception is thrown for a valid JsonPointer expression
  (reported by Alex S)
-
+#176: `JsonPointer` should not consider "00" to be valid index
+ (reported by fge@gitub)
 - Fix `JsonGenerator.setFeatureMask()` to better handle dynamic changes.
 
 2.4.3 (02-Oct-2014)
diff --git a/src/main/java/com/fasterxml/jackson/core/JsonPointer.java b/src/main/java/com/fasterxml/jackson/core/JsonPointer.java
index a802239..ff84f5e 100644
--- a/src/main/java/com/fasterxml/jackson/core/JsonPointer.java
+++ b/src/main/java/com/fasterxml/jackson/core/JsonPointer.java
@@ -184,13 +184,21 @@
 
     private final static int _parseIndex(String str) {
         final int len = str.length();
-        // [Issue#133]: beware of super long indexes; assume we never
+        // [core#133]: beware of super long indexes; assume we never
         // have arrays over 2 billion entries so ints are fine.
         if (len == 0 || len > 10) {
             return -1;
         }
-        for (int i = 0; i < len; ++i) {
-            char c = str.charAt(i);
+        // [core#176]: no leading zeroes allowed
+        char c = str.charAt(0);
+        if (c <= '0') {
+            return (len == 1 && c == '0') ? 0 : -1;
+        }
+        if (c > '9') {
+            return -1;
+        }
+        for (int i = 1; i < len; ++i) {
+            c = str.charAt(i);
             if (c > '9' || c < '0') {
                 return -1;
             }
diff --git a/src/test/java/com/fasterxml/jackson/core/TestJsonPointer.java b/src/test/java/com/fasterxml/jackson/core/TestJsonPointer.java
index 3140fb1..19e908f 100644
--- a/src/test/java/com/fasterxml/jackson/core/TestJsonPointer.java
+++ b/src/test/java/com/fasterxml/jackson/core/TestJsonPointer.java
@@ -41,7 +41,16 @@
         JsonPointer ptr = JsonPointer.compile("/1e0");
         assertFalse(ptr.matches());
     }
-    
+
+    // [core#176]: do not allow leading zeroes
+    public void testIZeroIndex() throws Exception
+    {
+        JsonPointer ptr = JsonPointer.compile("/0");
+        assertEquals(0, ptr.getMatchingIndex());
+        ptr = JsonPointer.compile("/00");
+        assertEquals(-1, ptr.getMatchingIndex());
+    }
+
     public void testQuotedPath() throws Exception
     {
         final String INPUT = "/w~1out/til~0de/a~1b";
