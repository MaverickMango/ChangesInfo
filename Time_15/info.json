{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "data/changesInfo/",
  "timeoutSecond": 300,
  "proj": "Time",
  "id": "15",
  "workingDir": "../bugs/Time_15_buggy",
  "inducingCommit": "f574d59dd322be0df10694c296bbdff9a7a2fba2",
  "originalCommit": "6f5522f58c1d2abdec37b5d22e5981716d4ec731",
  "bug_name": "Time_15",
  "derive": "defects4j",
  "original_fixing_commit": "0cefc4c212e92e5dccdfa658785c419483317558",
  "buildFiles_changed": true,
  "inducing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "JodaTime/src/java/org/joda/time/DateTimeZone.java",
        "JodaTime/src/java/org/joda/time/DateTimeZone.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "forOffsetHoursMinutes"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "forOffsetHoursMinutes"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "237",
            "243"
          ],
          "num": 2
        },
        {
          "qualified_names": [
            "237",
            "243"
          ],
          "num": 2
        }
      ],
      "diff": "diff --git a/JodaTime/src/java/org/joda/time/DateTimeZone.java b/JodaTime/src/java/org/joda/time/DateTimeZone.java\nindex c8aac17..f996f10 100644\n--- a/JodaTime/src/java/org/joda/time/DateTimeZone.java\n+++ b/JodaTime/src/java/org/joda/time/DateTimeZone.java\n@@ -234,13 +234,13 @@\n         }\n         int offset \u003d 0;\n         try {\n-            int hoursInMinutes \u003d FieldUtils.safeMultiplyToInt(hoursOffset, 60);\n+            int hoursInMinutes \u003d FieldUtils.safeMultiply(hoursOffset, 60);\n             if (hoursInMinutes \u003c 0) {\n                 minutesOffset \u003d FieldUtils.safeAdd(hoursInMinutes, -minutesOffset);\n             } else {\n                 minutesOffset \u003d FieldUtils.safeAdd(hoursInMinutes, minutesOffset);\n             }\n-            offset \u003d FieldUtils.safeMultiplyToInt(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);\n+            offset \u003d FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);\n         } catch (ArithmeticException ex) {\n             throw new IllegalArgumentException(\"Offset is too large\");\n         }\n",
      "operations": [
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "JodaTime/src/java/org/joda/time/Partial.java",
        "JodaTime/src/java/org/joda/time/Partial.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "withPeriodAdded"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "withPeriodAdded"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "597"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "597"
          ],
          "num": 1
        }
      ],
      "diff": "diff --git a/JodaTime/src/java/org/joda/time/Partial.java b/JodaTime/src/java/org/joda/time/Partial.java\nindex 0a808ff..095e88b 100644\n--- a/JodaTime/src/java/org/joda/time/Partial.java\n+++ b/JodaTime/src/java/org/joda/time/Partial.java\n@@ -594,7 +594,7 @@\n             int index \u003d indexOf(fieldType);\n             if (index \u003e\u003d 0) {\n                 newValues \u003d getField(index).add(this, index, newValues,\n-                        FieldUtils.safeMultiplyToInt(period.getValue(i), scalar));\n+                        FieldUtils.safeMultiply(period.getValue(i), scalar));\n             }\n         }\n         return new Partial(this, newValues);\n",
      "operations": [
        {
          "type": "update-node",
          "from": "",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "JodaTime/src/java/org/joda/time/TimeOfDay.java",
        "JodaTime/src/java/org/joda/time/TimeOfDay.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "withPeriodAdded"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "withPeriodAdded"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "513"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "513"
          ],
          "num": 1
        }
      ],
      "diff": "diff --git a/JodaTime/src/java/org/joda/time/TimeOfDay.java b/JodaTime/src/java/org/joda/time/TimeOfDay.java\nindex a130f21..47f6a5b 100644\n--- a/JodaTime/src/java/org/joda/time/TimeOfDay.java\n+++ b/JodaTime/src/java/org/joda/time/TimeOfDay.java\n@@ -510,7 +510,7 @@\n             int index \u003d indexOf(fieldType);\n             if (index \u003e\u003d 0) {\n                 newValues \u003d getField(index).addWrapPartial(this, index, newValues,\n-                        FieldUtils.safeMultiplyToInt(period.getValue(i), scalar));\n+                        FieldUtils.safeMultiply(period.getValue(i), scalar));\n             }\n         }\n         return new TimeOfDay(this, newValues);\n",
      "operations": [
        {
          "type": "update-node",
          "from": "",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "JodaTime/src/java/org/joda/time/YearMonthDay.java",
        "JodaTime/src/java/org/joda/time/YearMonthDay.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "withPeriodAdded"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "withPeriodAdded"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "399"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "399"
          ],
          "num": 1
        }
      ],
      "diff": "diff --git a/JodaTime/src/java/org/joda/time/YearMonthDay.java b/JodaTime/src/java/org/joda/time/YearMonthDay.java\nindex 6462ec9..96bd0e4 100644\n--- a/JodaTime/src/java/org/joda/time/YearMonthDay.java\n+++ b/JodaTime/src/java/org/joda/time/YearMonthDay.java\n@@ -396,7 +396,7 @@\n             int index \u003d indexOf(fieldType);\n             if (index \u003e\u003d 0) {\n                 newValues \u003d getField(index).add(this, index, newValues,\n-                        FieldUtils.safeMultiplyToInt(period.getValue(i), scalar));\n+                        FieldUtils.safeMultiply(period.getValue(i), scalar));\n             }\n         }\n         return new YearMonthDay(this, newValues);\n",
      "operations": [
        {
          "type": "update-node",
          "from": "",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "JodaTime/src/java/org/joda/time/field/FieldUtils.java",
        "JodaTime/src/java/org/joda/time/field/FieldUtils.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "safeMultiply"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "safeMultiply",
            "safeMultiply",
            "safeMultiply"
          ],
          "num": 3
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "118",
            "119"
          ],
          "num": 2
        },
        {
          "qualified_names": [
            "116",
            "117",
            "118",
            "119",
            "120",
            "121",
            "122",
            "123",
            "124",
            "125",
            "126",
            "127",
            "128",
            "129",
            "130",
            "131",
            "132",
            "133",
            "134",
            "135",
            "136",
            "137",
            "138",
            "139",
            "140",
            "141",
            "142",
            "143",
            "144",
            "145",
            "146",
            "147",
            "148",
            "149",
            "150",
            "151",
            "152",
            "153",
            "154",
            "155",
            "156",
            "157",
            "158",
            "159",
            "162",
            "163",
            "164",
            "165",
            "166"
          ],
          "num": 49
        }
      ],
      "diff": "diff --git a/JodaTime/src/java/org/joda/time/field/FieldUtils.java b/JodaTime/src/java/org/joda/time/field/FieldUtils.java\nindex 24ebf1e..8fd0be2 100644\n--- a/JodaTime/src/java/org/joda/time/field/FieldUtils.java\n+++ b/JodaTime/src/java/org/joda/time/field/FieldUtils.java\n@@ -113,10 +113,57 @@\n      * @param val2  the second value\n      * @return the new total\n      * @throws ArithmeticException if the value is too big or too small\n+     * @since 1.2\n+     */\n+    public static int safeMultiply(int val1, int val2) {\n+        long total \u003d (long) val1 * (long) val2;\n+        if (total \u003c Integer.MIN_VALUE || total \u003e Integer.MAX_VALUE) {\n+            throw new ArithmeticException\n+                (\"The calculation caused an overflow: \" + val1 + \" * \" + val2);\n+        }\n+        return (int) total;\n+    }\n+\n+    /**\n+     * Multiply two values throwing an exception if overflow occurs.\n+     * \n+     * @param val1  the first value\n+     * @param scalar  the second value\n+     * @return the new total\n+     * @throws ArithmeticException if the value is too big or too small\n+     * @since 1.2\n+     */\n+    public static long safeMultiply(long val1, int scalar) {\n+        switch (scalar) {\n+        case -1:\n+            return -val1;\n+        case 0:\n+            return 0L;\n+        case 1:\n+            return val1;\n+        }\n+        long total \u003d val1 * scalar;\n+        if (total / scalar !\u003d val1) {\n+            throw new ArithmeticException\n+                (\"The calculation caused an overflow: \" + val1 + \" * \" + scalar);\n+        }\n+        return total;\n+    }\n+\n+    /**\n+     * Multiply two values throwing an exception if overflow occurs.\n+     * \n+     * @param val1  the first value\n+     * @param val2  the second value\n+     * @return the new total\n+     * @throws ArithmeticException if the value is too big or too small\n      */\n     public static long safeMultiply(long val1, long val2) {\n-        if (val1 \u003d\u003d 0 || val2 \u003d\u003d 0) {\n-            return 0L;\n+        if (val2 \u003d\u003d 1) {\n+            return val1;\n+        }\n+        if (val2 \u003d\u003d 0) {\n+            return 0;\n         }\n         long total \u003d val1 * val2;\n         if (total / val2 !\u003d val1) {\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [3601,4222]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [4228,4966]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [5303,5354]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "InfixExpression [3936,3945]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "INFIX_EXPRESSION_OPERATOR: || [3946,3948]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "InfixExpression [3936,3958]",
          "to": ""
        }
      ]
    }
  ],
  "inducing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  },
  "trigger_tests": [],
  "fixing_changes": [],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  }
}