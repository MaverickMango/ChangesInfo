diff --git a/JodaTime/src/java/org/joda/time/DateTimeZone.java b/JodaTime/src/java/org/joda/time/DateTimeZone.java
index c8aac17..f996f10 100644
--- a/JodaTime/src/java/org/joda/time/DateTimeZone.java
+++ b/JodaTime/src/java/org/joda/time/DateTimeZone.java
@@ -234,13 +234,13 @@
         }
         int offset = 0;
         try {
-            int hoursInMinutes = FieldUtils.safeMultiplyToInt(hoursOffset, 60);
+            int hoursInMinutes = FieldUtils.safeMultiply(hoursOffset, 60);
             if (hoursInMinutes < 0) {
                 minutesOffset = FieldUtils.safeAdd(hoursInMinutes, -minutesOffset);
             } else {
                 minutesOffset = FieldUtils.safeAdd(hoursInMinutes, minutesOffset);
             }
-            offset = FieldUtils.safeMultiplyToInt(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);
+            offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);
         } catch (ArithmeticException ex) {
             throw new IllegalArgumentException("Offset is too large");
         }
diff --git a/JodaTime/src/java/org/joda/time/Partial.java b/JodaTime/src/java/org/joda/time/Partial.java
index 0a808ff..095e88b 100644
--- a/JodaTime/src/java/org/joda/time/Partial.java
+++ b/JodaTime/src/java/org/joda/time/Partial.java
@@ -594,7 +594,7 @@
             int index = indexOf(fieldType);
             if (index >= 0) {
                 newValues = getField(index).add(this, index, newValues,
-                        FieldUtils.safeMultiplyToInt(period.getValue(i), scalar));
+                        FieldUtils.safeMultiply(period.getValue(i), scalar));
             }
         }
         return new Partial(this, newValues);
diff --git a/JodaTime/src/java/org/joda/time/TimeOfDay.java b/JodaTime/src/java/org/joda/time/TimeOfDay.java
index a130f21..47f6a5b 100644
--- a/JodaTime/src/java/org/joda/time/TimeOfDay.java
+++ b/JodaTime/src/java/org/joda/time/TimeOfDay.java
@@ -510,7 +510,7 @@
             int index = indexOf(fieldType);
             if (index >= 0) {
                 newValues = getField(index).addWrapPartial(this, index, newValues,
-                        FieldUtils.safeMultiplyToInt(period.getValue(i), scalar));
+                        FieldUtils.safeMultiply(period.getValue(i), scalar));
             }
         }
         return new TimeOfDay(this, newValues);
diff --git a/JodaTime/src/java/org/joda/time/YearMonthDay.java b/JodaTime/src/java/org/joda/time/YearMonthDay.java
index 6462ec9..96bd0e4 100644
--- a/JodaTime/src/java/org/joda/time/YearMonthDay.java
+++ b/JodaTime/src/java/org/joda/time/YearMonthDay.java
@@ -396,7 +396,7 @@
             int index = indexOf(fieldType);
             if (index >= 0) {
                 newValues = getField(index).add(this, index, newValues,
-                        FieldUtils.safeMultiplyToInt(period.getValue(i), scalar));
+                        FieldUtils.safeMultiply(period.getValue(i), scalar));
             }
         }
         return new YearMonthDay(this, newValues);
diff --git a/JodaTime/src/java/org/joda/time/field/FieldUtils.java b/JodaTime/src/java/org/joda/time/field/FieldUtils.java
index 24ebf1e..8fd0be2 100644
--- a/JodaTime/src/java/org/joda/time/field/FieldUtils.java
+++ b/JodaTime/src/java/org/joda/time/field/FieldUtils.java
@@ -113,10 +113,57 @@
      * @param val2  the second value
      * @return the new total
      * @throws ArithmeticException if the value is too big or too small
+     * @since 1.2
+     */
+    public static int safeMultiply(int val1, int val2) {
+        long total = (long) val1 * (long) val2;
+        if (total < Integer.MIN_VALUE || total > Integer.MAX_VALUE) {
+            throw new ArithmeticException
+                ("The calculation caused an overflow: " + val1 + " * " + val2);
+        }
+        return (int) total;
+    }
+
+    /**
+     * Multiply two values throwing an exception if overflow occurs.
+     * 
+     * @param val1  the first value
+     * @param scalar  the second value
+     * @return the new total
+     * @throws ArithmeticException if the value is too big or too small
+     * @since 1.2
+     */
+    public static long safeMultiply(long val1, int scalar) {
+        switch (scalar) {
+        case -1:
+            return -val1;
+        case 0:
+            return 0L;
+        case 1:
+            return val1;
+        }
+        long total = val1 * scalar;
+        if (total / scalar != val1) {
+            throw new ArithmeticException
+                ("The calculation caused an overflow: " + val1 + " * " + scalar);
+        }
+        return total;
+    }
+
+    /**
+     * Multiply two values throwing an exception if overflow occurs.
+     * 
+     * @param val1  the first value
+     * @param val2  the second value
+     * @return the new total
+     * @throws ArithmeticException if the value is too big or too small
      */
     public static long safeMultiply(long val1, long val2) {
-        if (val1 == 0 || val2 == 0) {
-            return 0L;
+        if (val2 == 1) {
+            return val1;
+        }
+        if (val2 == 0) {
+            return 0;
         }
         long total = val1 * val2;
         if (total / val2 != val1) {
