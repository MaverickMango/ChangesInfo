{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "data/changesInfo/",
  "timeoutSecond": 300,
  "proj": "Math",
  "id": "45",
  "workingDir": "../bugs/Math_45_buggy",
  "inducingCommit": "8742126f8f6117d90401f8d3ca1f40cd72b489aa",
  "originalCommit": "36b2203cd9b5f017abde4e4e85f72584ed9284cd",
  "bug_name": "Math_45",
  "derive": "defects4j",
  "original_fixing_commit": "bc4e9db01c2a03062965fa4bac65782376ab2287",
  "buildFiles_changed": false,
  "inducing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java",
        "src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [],
          "num": 0
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "118",
            "119"
          ],
          "num": 2
        },
        {
          "qualified_names": [
            "115",
            "119",
            "120"
          ],
          "num": 3
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java b/src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java\nindex 53d6fdc..ac7f1a9 100644\n--- a/src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java\n+++ b/src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java\n@@ -112,11 +112,12 @@\n     INDEX_LARGER_THAN_MAX(\"the index specified: {0} is larger than the current maximal index {1}\"),\n     INDEX_NOT_POSITIVE(\"index ({0}) is not positive\"),\n     INDEX_OUT_OF_RANGE(\"index {0} out of allowed range [{1}, {2}]\"),\n+    INDEX(\"index ({0})\"), /* keep */\n     INFINITE_ARRAY_ELEMENT(\"Array contains an infinite element, {0} at index {1}\"),\n     INFINITE_VALUE_CONVERSION(\"cannot convert infinite value\"),\n     INITIAL_CAPACITY_NOT_POSITIVE(\"initial capacity ({0}) is not positive\"),\n-    INITIAL_COLUMN_AFTER_FINAL_COLUMN(\"initial column {0} after final column {1}\"),\n-    INITIAL_ROW_AFTER_FINAL_ROW(\"initial row {0} after final row {1}\"),\n+    INITIAL_COLUMN_AFTER_FINAL_COLUMN(\"initial column {1} after final column {0}\"),\n+    INITIAL_ROW_AFTER_FINAL_ROW(\"initial row {1} after final row {0}\"),\n     INPUT_DATA_FROM_UNSUPPORTED_DATASOURCE(\"input data comes from unsupported datasource: {0}, supported sources: {1}, {2}\"),\n     INSTANCES_NOT_COMPARABLE_TO_EXISTING_VALUES(\"instance of class {0} not comparable to existing values\"),\n     INSUFFICIENT_DATA_FOR_T_STATISTIC(\"insufficient data for t statistic, needs at least 2, got {0}\"),\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "EnumConstantDeclaration [8222,8242]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java",
        "src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "getRowMatrix",
            "walkInRowOrder",
            "walkInColumnOrder",
            "walkInOptimizedOrder",
            "getColumn",
            "getSubMatrix",
            "walkInColumnOrder",
            "getRowVector",
            "setSubMatrix",
            "transpose",
            "getRow",
            "setEntry",
            "multiplyEntry",
            "walkInOptimizedOrder",
            "getColumnVector",
            "scalarMultiply",
            "add",
            "walkInRowOrder",
            "subtract",
            "multiply",
            "getSubMatrix",
            "addToEntry",
            "scalarAdd",
            "getData",
            "copySubMatrix",
            "getColumnMatrix",
            "preMultiply",
            "getEntry"
          ],
          "num": 28
        },
        {
          "qualified_names": [
            "walkInOptimizedOrder",
            "setSubMatrix",
            "scalarAdd",
            "walkInColumnOrder",
            "walkInColumnOrder",
            "getColumnVector",
            "subtract",
            "getSubMatrix",
            "getRowMatrix",
            "addToEntry",
            "walkInRowOrder",
            "scalarMultiply",
            "setEntry",
            "copySubMatrix",
            "add",
            "getSubMatrix",
            "walkInRowOrder",
            "getEntry",
            "getRowVector",
            "preMultiply",
            "multiply",
            "getRow",
            "walkInOptimizedOrder",
            "multiplyEntry",
            "getColumn",
            "getColumnMatrix"
          ],
          "num": 26
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "77",
            "78",
            "79",
            "95",
            "96",
            "97",
            "114",
            "129",
            "143",
            "144",
            "145",
            "146",
            "167",
            "168",
            "174",
            "253",
            "254",
            "255",
            "270",
            "271",
            "272",
            "295",
            "296",
            "355",
            "356",
            "357",
            "389",
            "390",
            "391",
            "418",
            "419",
            "420",
            "447",
            "448",
            "466",
            "467",
            "485",
            "486",
            "487",
            "511",
            "512",
            "513",
            "537",
            "538",
            "541",
            "542",
            "545",
            "546",
            "549",
            "550",
            "554",
            "753",
            "772",
            "819",
            "838",
            "866",
            "874"
          ],
          "num": 57
        },
        {
          "qualified_names": [
            "77",
            "78",
            "94",
            "95",
            "115",
            "131",
            "139",
            "140",
            "161",
            "245",
            "260",
            "283",
            "342",
            "374",
            "401",
            "428",
            "446",
            "464",
            "488",
            "512",
            "515",
            "518",
            "521",
            "723",
            "742",
            "789",
            "808",
            "836",
            "844"
          ],
          "num": 29
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java b/src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java\nindex c1472b8..53adb3b 100644\n--- a/src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java\n+++ b/src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java\n@@ -74,9 +74,8 @@\n     public abstract RealMatrix copy();\n \n     /** {@inheritDoc} */\n-    public RealMatrix add(RealMatrix m) throws IllegalArgumentException {\n-\n-        // safety check\n+    public RealMatrix add(RealMatrix m) {\n+        // Safety check.\n         MatrixUtils.checkAdditionCompatible(this, m);\n \n         final int rowCount    \u003d getRowDimension();\n@@ -92,9 +91,8 @@\n     }\n \n     /** {@inheritDoc} */\n-    public RealMatrix subtract(final RealMatrix m) throws IllegalArgumentException {\n-\n-        // safety check\n+    public RealMatrix subtract(final RealMatrix m) {\n+        // Safety check.\n         MatrixUtils.checkSubtractionCompatible(this, m);\n \n         final int rowCount    \u003d getRowDimension();\n@@ -111,7 +109,6 @@\n \n     /** {@inheritDoc} */\n     public RealMatrix scalarAdd(final double d) {\n-\n         final int rowCount    \u003d getRowDimension();\n         final int columnCount \u003d getColumnDimension();\n         final RealMatrix out \u003d createMatrix(rowCount, columnCount);\n@@ -126,7 +123,6 @@\n \n     /** {@inheritDoc} */\n     public RealMatrix scalarMultiply(final double d) {\n-\n         final int rowCount    \u003d getRowDimension();\n         final int columnCount \u003d getColumnDimension();\n         final RealMatrix out \u003d createMatrix(rowCount, columnCount);\n@@ -140,10 +136,8 @@\n     }\n \n     /** {@inheritDoc} */\n-    public RealMatrix multiply(final RealMatrix m)\n-        throws IllegalArgumentException {\n-\n-        // safety check\n+    public RealMatrix multiply(final RealMatrix m) {\n+        // Safety check.\n         MatrixUtils.checkMultiplicationCompatible(this, m);\n \n         final int nRows \u003d getRowDimension();\n@@ -164,14 +158,12 @@\n     }\n \n     /** {@inheritDoc} */\n-    public RealMatrix preMultiply(final RealMatrix m)\n-        throws IllegalArgumentException {\n+    public RealMatrix preMultiply(final RealMatrix m) {\n         return m.multiply(this);\n     }\n \n     /** {@inheritDoc} */\n     public double[][] getData() {\n-\n         final double[][] data \u003d new double[getRowDimension()][getColumnDimension()];\n \n         for (int i \u003d 0; i \u003c data.length; ++i) {\n@@ -250,9 +242,7 @@\n \n     /** {@inheritDoc} */\n     public RealMatrix getSubMatrix(final int startRow, final int endRow,\n-                                   final int startColumn, final int endColumn)\n-        throws MatrixIndexException {\n-\n+                                   final int startColumn, final int endColumn) {\n         MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);\n \n         final RealMatrix subMatrix \u003d\n@@ -267,9 +257,7 @@\n     }\n \n     /** {@inheritDoc} */\n-    public RealMatrix getSubMatrix(final int[] selectedRows, final int[] selectedColumns)\n-        throws MatrixIndexException {\n-\n+    public RealMatrix getSubMatrix(final int[] selectedRows, final int[] selectedColumns) {\n         // safety checks\n         MatrixUtils.checkSubMatrixIndex(this, selectedRows, selectedColumns);\n \n@@ -292,8 +280,7 @@\n     /** {@inheritDoc} */\n     public void copySubMatrix(final int startRow, final int endRow,\n                               final int startColumn, final int endColumn,\n-                              final double[][] destination)\n-        throws MatrixIndexException, IllegalArgumentException {\n+                              final double[][] destination) {\n \n         // safety checks\n         MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);\n@@ -352,9 +339,7 @@\n     }\n \n     /** {@inheritDoc} */\n-    public void setSubMatrix(final double[][] subMatrix, final int row, final int column)\n-        throws MatrixIndexException {\n-\n+    public void setSubMatrix(final double[][] subMatrix, final int row, final int column) {\n         final int nRows \u003d subMatrix.length;\n         if (nRows \u003d\u003d 0) {\n             throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);\n@@ -386,9 +371,7 @@\n     }\n \n     /** {@inheritDoc} */\n-    public RealMatrix getRowMatrix(final int row)\n-        throws MatrixIndexException {\n-\n+    public RealMatrix getRowMatrix(final int row) {\n         MatrixUtils.checkRowIndex(this, row);\n         final int nCols \u003d getColumnDimension();\n         final RealMatrix out \u003d createMatrix(1, nCols);\n@@ -415,9 +398,7 @@\n     }\n \n     /** {@inheritDoc} */\n-    public RealMatrix getColumnMatrix(final int column)\n-        throws MatrixIndexException {\n-\n+    public RealMatrix getColumnMatrix(final int column) {\n         MatrixUtils.checkColumnIndex(this, column);\n         final int nRows \u003d getRowDimension();\n         final RealMatrix out \u003d createMatrix(nRows, 1);\n@@ -444,8 +425,7 @@\n     }\n \n     /** {@inheritDoc} */\n-    public RealVector getRowVector(final int row)\n-        throws MatrixIndexException {\n+    public RealVector getRowVector(final int row) {\n         return new ArrayRealVector(getRow(row), false);\n     }\n \n@@ -463,8 +443,7 @@\n     }\n \n     /** {@inheritDoc} */\n-    public RealVector getColumnVector(final int column)\n-        throws MatrixIndexException {\n+    public RealVector getColumnVector(final int column) {\n         return new ArrayRealVector(getColumn(column), false);\n     }\n \n@@ -482,9 +461,7 @@\n     }\n \n     /** {@inheritDoc} */\n-    public double[] getRow(final int row)\n-        throws MatrixIndexException {\n-\n+    public double[] getRow(final int row) {\n         MatrixUtils.checkRowIndex(this, row);\n         final int nCols \u003d getColumnDimension();\n         final double[] out \u003d new double[nCols];\n@@ -508,9 +485,7 @@\n     }\n \n     /** {@inheritDoc} */\n-    public double[] getColumn(final int column)\n-        throws MatrixIndexException {\n-\n+    public double[] getColumn(final int column) {\n         MatrixUtils.checkColumnIndex(this, column);\n         final int nRows \u003d getRowDimension();\n         final double[] out \u003d new double[nRows];\n@@ -534,24 +509,19 @@\n     }\n \n     /** {@inheritDoc} */\n-    public abstract double getEntry(int row, int column)\n-        throws MatrixIndexException;\n+    public abstract double getEntry(int row, int column);\n \n     /** {@inheritDoc} */\n-    public abstract void setEntry(int row, int column, double value)\n-        throws MatrixIndexException;\n+    public abstract void setEntry(int row, int column, double value);\n \n     /** {@inheritDoc} */\n-    public abstract void addToEntry(int row, int column, double increment)\n-        throws MatrixIndexException;\n+    public abstract void addToEntry(int row, int column, double increment);\n \n     /** {@inheritDoc} */\n-    public abstract void multiplyEntry(int row, int column, double factor)\n-        throws MatrixIndexException;\n+    public abstract void multiplyEntry(int row, int column, double factor);\n \n     /** {@inheritDoc} */\n     public RealMatrix transpose() {\n-\n         final int nRows \u003d getRowDimension();\n         final int nCols \u003d getColumnDimension();\n         final RealMatrix out \u003d createMatrix(nCols, nRows);\n@@ -750,7 +720,7 @@\n     public double walkInRowOrder(final RealMatrixChangingVisitor visitor,\n                                  final int startRow, final int endRow,\n                                  final int startColumn, final int endColumn)\n-        throws MatrixIndexException, MatrixVisitorException {\n+        throws MatrixVisitorException {\n         MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);\n         visitor.start(getRowDimension(), getColumnDimension(),\n                       startRow, endRow, startColumn, endColumn);\n@@ -769,7 +739,7 @@\n     public double walkInRowOrder(final RealMatrixPreservingVisitor visitor,\n                                  final int startRow, final int endRow,\n                                  final int startColumn, final int endColumn)\n-        throws MatrixIndexException, MatrixVisitorException {\n+        throws MatrixVisitorException {\n         MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);\n         visitor.start(getRowDimension(), getColumnDimension(),\n                       startRow, endRow, startColumn, endColumn);\n@@ -816,7 +786,7 @@\n     public double walkInColumnOrder(final RealMatrixChangingVisitor visitor,\n                                     final int startRow, final int endRow,\n                                     final int startColumn, final int endColumn)\n-    throws MatrixIndexException, MatrixVisitorException {\n+    throws MatrixVisitorException {\n         MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);\n         visitor.start(getRowDimension(), getColumnDimension(),\n                       startRow, endRow, startColumn, endColumn);\n@@ -835,7 +805,7 @@\n     public double walkInColumnOrder(final RealMatrixPreservingVisitor visitor,\n                                     final int startRow, final int endRow,\n                                     final int startColumn, final int endColumn)\n-    throws MatrixIndexException, MatrixVisitorException {\n+    throws MatrixVisitorException {\n         MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);\n         visitor.start(getRowDimension(), getColumnDimension(),\n                       startRow, endRow, startColumn, endColumn);\n@@ -863,7 +833,7 @@\n     public double walkInOptimizedOrder(final RealMatrixChangingVisitor visitor,\n                                        final int startRow, final int endRow,\n                                        final int startColumn, final int endColumn)\n-        throws MatrixIndexException, MatrixVisitorException {\n+        throws MatrixVisitorException {\n         return walkInRowOrder(visitor, startRow, endRow, startColumn, endColumn);\n     }\n \n@@ -871,7 +841,7 @@\n     public double walkInOptimizedOrder(final RealMatrixPreservingVisitor visitor,\n                                        final int startRow, final int endRow,\n                                        final int startColumn, final int endColumn)\n-        throws MatrixIndexException, MatrixVisitorException {\n+        throws MatrixVisitorException {\n         return walkInRowOrder(visitor, startRow, endRow, startColumn, endColumn);\n     }\n \n",
      "operations": [
        {
          "type": "delete-tree",
          "from": "SimpleType [2878,2902]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [3485,3509]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [5056,5080]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [5827,5851]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [8500,8520]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [9112,9132]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [9975,9995]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [9997,10021]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [12452,12472]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [13503,13523]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [14546,14566]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [15601,15621]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [16285,16305]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [16973,16993]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [17756,17776]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [18566,18586]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [18698,18718]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [18836,18856]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [18974,18994]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [25433,25453]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [26364,26384]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [28388,28408]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [29324,29344]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [30515,30535]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [30933,30953]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/math/linear/AbstractRealVector.java",
        "src/main/java/org/apache/commons/math/linear/AbstractRealVector.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "ebeDivide",
            "getL1Distance",
            "checkIndex",
            "dotProduct",
            "setSubVector",
            "outerProduct",
            "subtract",
            "getDistance",
            "add",
            "subtract",
            "getDistance",
            "setSubVector",
            "ebeMultiply",
            "outerProduct",
            "projection",
            "getLInfDistance",
            "add",
            "getL1Distance",
            "getLInfDistance",
            "dotProduct"
          ],
          "num": 20
        },
        {
          "qualified_names": [
            "setSubVector",
            "outerProduct",
            "getLInfDistance",
            "setSubVector",
            "add",
            "subtract",
            "getLInfDistance",
            "add",
            "getL1Distance",
            "ebeDivide",
            "getDistance",
            "subtract",
            "getDistance",
            "checkIndex",
            "getL1Distance",
            "outerProduct",
            "ebeMultiply",
            "projection",
            "dotProduct",
            "dotProduct"
          ],
          "num": 20
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "25",
            "67",
            "68",
            "70",
            "71",
            "72",
            "73",
            "74",
            "79",
            "86",
            "95",
            "106",
            "122",
            "134",
            "170",
            "175",
            "187",
            "192",
            "197",
            "244",
            "249",
            "261",
            "273",
            "285",
            "723",
            "726",
            "728",
            "746",
            "751"
          ],
          "num": 29
        },
        {
          "qualified_names": [
            "26",
            "68",
            "69",
            "70",
            "72",
            "73",
            "74",
            "75",
            "76",
            "81",
            "88",
            "97",
            "108",
            "124",
            "136",
            "172",
            "177",
            "189",
            "194",
            "199",
            "246",
            "251",
            "263",
            "275",
            "287",
            "725",
            "728",
            "729",
            "731",
            "732",
            "750",
            "755"
          ],
          "num": 32
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/math/linear/AbstractRealVector.java b/src/main/java/org/apache/commons/math/linear/AbstractRealVector.java\nindex ff6252a..386e2f1 100644\n--- a/src/main/java/org/apache/commons/math/linear/AbstractRealVector.java\n+++ b/src/main/java/org/apache/commons/math/linear/AbstractRealVector.java\n@@ -23,6 +23,7 @@\n import org.apache.commons.math.FunctionEvaluationException;\n import org.apache.commons.math.exception.MathUnsupportedOperationException;\n import org.apache.commons.math.exception.DimensionMismatchException;\n+import org.apache.commons.math.exception.OutOfRangeException;\n import org.apache.commons.math.analysis.BinaryFunction;\n import org.apache.commons.math.analysis.ComposableFunction;\n import org.apache.commons.math.analysis.UnivariateRealFunction;\n@@ -64,26 +65,27 @@\n \n     /**\n      * Check if an index is valid.\n-     * @param index index to check\n-     * @exception MatrixIndexException if index is not valid\n+     *\n+     * @param index Index to check.\n+     * @exception OutOfRangeException if {@code index} is not valid.\n      */\n-    protected void checkIndex(final int index)\n-        throws MatrixIndexException {\n-        if (index \u003c 0 || index \u003e\u003d getDimension()) {\n-            throw new MatrixIndexException(LocalizedFormats.INDEX_OUT_OF_RANGE,\n-                                           index, 0, getDimension() - 1);\n+    protected void checkIndex(final int index) {\n+        if (index \u003c 0 ||\n+            index \u003e\u003d getDimension()) {\n+            throw new OutOfRangeException(LocalizedFormats.INDEX,\n+                                          index, 0, getDimension() - 1);\n         }\n     }\n \n     /** {@inheritDoc} */\n-    public void setSubVector(int index, RealVector v) throws MatrixIndexException {\n+    public void setSubVector(int index, RealVector v) {\n         checkIndex(index);\n         checkIndex(index + v.getDimension() - 1);\n         setSubVector(index, v.getData());\n     }\n \n     /** {@inheritDoc} */\n-    public void setSubVector(int index, double[] v) throws MatrixIndexException {\n+    public void setSubVector(int index, double[] v) {\n         checkIndex(index);\n         checkIndex(index + v.length - 1);\n         for (int i \u003d 0; i \u003c v.length; i++) {\n@@ -92,7 +94,7 @@\n     }\n \n     /** {@inheritDoc} */\n-    public RealVector add(double[] v) throws IllegalArgumentException {\n+    public RealVector add(double[] v) {\n         double[] result \u003d v.clone();\n         Iterator\u003cEntry\u003e it \u003d sparseIterator();\n         Entry e;\n@@ -103,7 +105,7 @@\n     }\n \n     /** {@inheritDoc} */\n-    public RealVector add(RealVector v) throws IllegalArgumentException {\n+    public RealVector add(RealVector v) {\n         if (v instanceof ArrayRealVector) {\n             double[] values \u003d ((ArrayRealVector)v).getDataRef();\n             return add(values);\n@@ -119,7 +121,7 @@\n     }\n \n     /** {@inheritDoc} */\n-    public RealVector subtract(double[] v) throws IllegalArgumentException {\n+    public RealVector subtract(double[] v) {\n         double[] result \u003d v.clone();\n         Iterator\u003cEntry\u003e it \u003d sparseIterator();\n         Entry e;\n@@ -131,7 +133,7 @@\n     }\n \n     /** {@inheritDoc} */\n-    public RealVector subtract(RealVector v) throws IllegalArgumentException {\n+    public RealVector subtract(RealVector v) {\n         if (v instanceof ArrayRealVector) {\n             double[] values \u003d ((ArrayRealVector)v).getDataRef();\n             return add(values);\n@@ -167,12 +169,12 @@\n     public abstract AbstractRealVector copy();\n \n     /** {@inheritDoc} */\n-    public double dotProduct(double[] v) throws IllegalArgumentException {\n+    public double dotProduct(double[] v) {\n         return dotProduct(new ArrayRealVector(v, false));\n     }\n \n     /** {@inheritDoc} */\n-    public double dotProduct(RealVector v) throws IllegalArgumentException {\n+    public double dotProduct(RealVector v) {\n         checkVectorDimensions(v);\n         double d \u003d 0;\n         Iterator\u003cEntry\u003e it \u003d sparseIterator();\n@@ -184,17 +186,17 @@\n     }\n \n     /** {@inheritDoc} */\n-    public RealVector ebeDivide(double[] v) throws IllegalArgumentException {\n+    public RealVector ebeDivide(double[] v) {\n         return ebeDivide(new ArrayRealVector(v, false));\n     }\n \n     /** {@inheritDoc} */\n-    public RealVector ebeMultiply(double[] v) throws IllegalArgumentException {\n+    public RealVector ebeMultiply(double[] v) {\n         return ebeMultiply(new ArrayRealVector(v, false));\n     }\n \n     /** {@inheritDoc} */\n-    public double getDistance(RealVector v) throws IllegalArgumentException {\n+    public double getDistance(RealVector v) {\n         checkVectorDimensions(v);\n         double d \u003d 0;\n         Iterator\u003cEntry\u003e it \u003d iterator();\n@@ -241,12 +243,12 @@\n     }\n \n     /** {@inheritDoc} */\n-    public double getDistance(double[] v) throws IllegalArgumentException {\n+    public double getDistance(double[] v) {\n         return getDistance(new ArrayRealVector(v,false));\n     }\n \n     /** {@inheritDoc} */\n-    public double getL1Distance(RealVector v) throws IllegalArgumentException {\n+    public double getL1Distance(RealVector v) {\n         checkVectorDimensions(v);\n         double d \u003d 0;\n         Iterator\u003cEntry\u003e it \u003d iterator();\n@@ -258,7 +260,7 @@\n     }\n \n     /** {@inheritDoc} */\n-    public double getL1Distance(double[] v) throws IllegalArgumentException {\n+    public double getL1Distance(double[] v) {\n         checkVectorDimensions(v.length);\n         double d \u003d 0;\n         Iterator\u003cEntry\u003e it \u003d iterator();\n@@ -270,7 +272,7 @@\n     }\n \n     /** {@inheritDoc} */\n-    public double getLInfDistance(RealVector v) throws IllegalArgumentException {\n+    public double getLInfDistance(RealVector v) {\n         checkVectorDimensions(v);\n         double d \u003d 0;\n         Iterator\u003cEntry\u003e it \u003d iterator();\n@@ -282,7 +284,7 @@\n     }\n \n     /** {@inheritDoc} */\n-    public double getLInfDistance(double[] v) throws IllegalArgumentException {\n+    public double getLInfDistance(double[] v) {\n         checkVectorDimensions(v.length);\n         double d \u003d 0;\n         Iterator\u003cEntry\u003e it \u003d iterator();\n@@ -720,12 +722,14 @@\n     }\n \n     /** {@inheritDoc} */\n-    public RealMatrix outerProduct(RealVector v) throws IllegalArgumentException {\n+    public RealMatrix outerProduct(RealVector v) {\n         RealMatrix product;\n         if (v instanceof SparseRealVector || this instanceof SparseRealVector) {\n-            product \u003d new OpenMapRealMatrix(this.getDimension(), v.getDimension());\n+            product \u003d new OpenMapRealMatrix(this.getDimension(),\n+                                            v.getDimension());\n         } else {\n-            product \u003d new Array2DRowRealMatrix(this.getDimension(), v.getDimension());\n+            product \u003d new Array2DRowRealMatrix(this.getDimension(),\n+                                               v.getDimension());\n         }\n         Iterator\u003cEntry\u003e thisIt \u003d sparseIterator();\n         Entry thisE \u003d null;\n@@ -743,12 +747,12 @@\n     }\n \n     /** {@inheritDoc} */\n-    public RealMatrix outerProduct(double[] v) throws IllegalArgumentException {\n+    public RealMatrix outerProduct(double[] v) {\n         return outerProduct(new ArrayRealVector(v, false));\n     }\n \n     /** {@inheritDoc} */\n-    public RealVector projection(double[] v) throws IllegalArgumentException {\n+    public RealVector projection(double[] v) {\n         return projection(new ArrayRealVector(v, false));\n     }\n \n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "ImportDeclaration [1119,1180]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [2617,2630]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement:  is not valid. [2630,2644]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [2637,2657]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [2969,2989]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [3202,3222]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [3465,3489]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [3841,3865]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [4413,4437]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [4846,4870]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [5941,5965]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [6108,6132]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [6482,6506]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [6651,6675]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [6820,6844]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [8181,8205]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [8351,8375]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [8733,8757]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [9117,9141]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [9517,9541]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [21271,21295]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [22200,22224]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [22371,22395]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java",
        "src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "add",
            "multiplyEntry",
            "addToEntry",
            "walkInRowOrder",
            "walkInColumnOrder",
            "Array2DRowRealMatrix",
            "subtract",
            "preMultiply",
            "setEntry",
            "multiply",
            "walkInRowOrder",
            "operate",
            "add",
            "getEntry",
            "setSubMatrix",
            "walkInColumnOrder",
            "getRowDimension",
            "multiply",
            "Array2DRowRealMatrix",
            "createMatrix",
            "Array2DRowRealMatrix",
            "subtract",
            "getDataRef"
          ],
          "num": 23
        },
        {
          "qualified_names": [
            "createMatrix",
            "operate",
            "walkInRowOrder",
            "walkInColumnOrder",
            "getRowDimension",
            "Array2DRowRealMatrix",
            "walkInColumnOrder",
            "add",
            "addToEntry",
            "preMultiply",
            "Array2DRowRealMatrix",
            "setEntry",
            "setSubMatrix",
            "getDataRef",
            "getEntry",
            "multiplyEntry",
            "Array2DRowRealMatrix",
            "walkInRowOrder",
            "subtract",
            "multiply"
          ],
          "num": 20
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "22",
            "54",
            "55",
            "57",
            "58",
            "64",
            "65",
            "102",
            "103",
            "104",
            "105",
            "106",
            "107",
            "108",
            "109",
            "110",
            "111",
            "114",
            "115",
            "120",
            "124",
            "125",
            "129",
            "130",
            "134",
            "135",
            "143",
            "144",
            "146",
            "148",
            "160",
            "161",
            "171",
            "172",
            "173",
            "174",
            "175",
            "176",
            "177",
            "178",
            "179",
            "180",
            "181",
            "183",
            "185",
            "186",
            "187",
            "189",
            "190",
            "191",
            "192",
            "208",
            "209",
            "210",
            "211",
            "212",
            "213",
            "214",
            "215",
            "216",
            "217",
            "218",
            "219",
            "223",
            "225",
            "226",
            "227",
            "229",
            "230",
            "231",
            "232",
            "248",
            "249",
            "250",
            "251",
            "252",
            "253",
            "254",
            "255",
            "256",
            "257",
            "258",
            "259",
            "263",
            "264",
            "265",
            "266",
            "267",
            "269",
            "270",
            "271",
            "272",
            "302",
            "303",
            "304",
            "306",
            "314",
            "315",
            "318",
            "319",
            "322",
            "323",
            "327",
            "328",
            "333",
            "334",
            "339",
            "340",
            "352",
            "353",
            "354",
            "355",
            "356",
            "357",
            "358",
            "359",
            "364",
            "365",
            "366",
            "367",
            "368",
            "369",
            "370",
            "371",
            "376",
            "377",
            "378",
            "379",
            "380",
            "381",
            "382",
            "383",
            "388",
            "389",
            "390",
            "391",
            "392",
            "393",
            "394",
            "395",
            "400",
            "412",
            "413",
            "417",
            "418",
            "434",
            "435",
            "436",
            "440",
            "441",
            "494",
            "512",
            "561",
            "579"
          ],
          "num": 154
        },
        {
          "qualified_names": [
            "22",
            "23",
            "24",
            "25",
            "57",
            "59",
            "65",
            "102",
            "103",
            "104",
            "105",
            "106",
            "107",
            "108",
            "109",
            "110",
            "111",
            "112",
            "113",
            "116",
            "121",
            "125",
            "129",
            "133",
            "141",
            "142",
            "144",
            "146",
            "158",
            "159",
            "170",
            "172",
            "173",
            "174",
            "175",
            "177",
            "178",
            "197",
            "199",
            "200",
            "201",
            "202",
            "204",
            "205",
            "224",
            "225",
            "226",
            "227",
            "228",
            "229",
            "230",
            "232",
            "233",
            "263",
            "265",
            "273",
            "274",
            "277",
            "280",
            "284",
            "289",
            "294",
            "306",
            "307",
            "308",
            "313",
            "314",
            "315",
            "320",
            "321",
            "322",
            "327",
            "328",
            "329",
            "334",
            "346",
            "350",
            "366",
            "370",
            "423",
            "441",
            "490",
            "508"
          ],
          "num": 83
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java b/src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java\nindex 4ce49e8..c605acc 100644\n--- a/src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java\n+++ b/src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java\n@@ -19,7 +19,10 @@\n \n import java.io.Serializable;\n \n-import org.apache.commons.math.MathRuntimeException;\n+import org.apache.commons.math.exception.DimensionMismatchException;\n+import org.apache.commons.math.exception.NullArgumentException;\n+import org.apache.commons.math.exception.ZeroException;\n+import org.apache.commons.math.exception.MathIllegalStateException;\n import org.apache.commons.math.exception.util.LocalizedFormats;\n \n /**\n@@ -51,18 +54,15 @@\n  * @version $Revision$ $Date$\n  */\n public class Array2DRowRealMatrix extends AbstractRealMatrix implements Serializable {\n-\n-    /** Serializable version identifier */\n+    /** Serializable version identifier. */\n     private static final long serialVersionUID \u003d -1067294169172445528L;\n-\n-    /** Entries of the matrix */\n+    /** Entries of the matrix. */\n     protected double data[][];\n \n     /**\n      * Creates a matrix with no data\n      */\n-    public Array2DRowRealMatrix() {\n-    }\n+    public Array2DRowRealMatrix() {}\n \n     /**\n      * Create a new RealMatrix with the supplied row and column dimensions.\n@@ -99,40 +99,38 @@\n     /**\n      * Create a new RealMatrix using the input array as the underlying\n      * data array.\n-     * \u003cp\u003eIf an array is built specially in order to be embedded in a\n-     * RealMatrix and not used directly, the \u003ccode\u003ecopyArray\u003c/code\u003e may be\n-     * set to \u003ccode\u003efalse\u003c/code. This will prevent the copying and improve\n-     * performance as no new array will be built and no data will be copied.\u003c/p\u003e\n-     * @param d data for new matrix\n-     * @param copyArray if true, the input array will be copied, otherwise\n-     * it will be referenced\n-     * @throws IllegalArgumentException if \u003ccode\u003ed\u003c/code\u003e is not rectangular\n-     *  (not all rows have the same length) or empty\n-     * @throws NullPointerException if \u003ccode\u003ed\u003c/code\u003e is null\n+     * If an array is built specially in order to be embedded in a\n+     * RealMatrix and not used directly, the {@code copyArray} may be\n+     * set to {@code false}. This will prevent the copying and improve\n+     * performance as no new array will be built and no data will be copied.\n+     *\n+     * @param d Data for new matrix.\n+     * @param copyArray if {@code true}, the input array will be copied,\n+     * otherwise it will be referenced.\n+     * @throws DimensionMismatchException if {@code d} is not rectangular\n+     * (not all rows have the same length) or empty.\n+     * @throws NullArgumentException if {@code d} is {@code null}.\n+     * @throws ZeroException if there are not at least one row and one column.\n      * @see #Array2DRowRealMatrix(double[][])\n      */\n-    public Array2DRowRealMatrix(final double[][] d, final boolean copyArray)\n-        throws IllegalArgumentException, NullPointerException {\n+    public Array2DRowRealMatrix(final double[][] d, final boolean copyArray) {\n         if (copyArray) {\n             copyIn(d);\n         } else {\n             if (d \u003d\u003d null) {\n-                throw new NullPointerException();\n+                throw new NullArgumentException();\n             }\n             final int nRows \u003d d.length;\n             if (nRows \u003d\u003d 0) {\n-                throw MathRuntimeException.createIllegalArgumentException(\n-                      LocalizedFormats.AT_LEAST_ONE_ROW);\n+                throw new ZeroException(LocalizedFormats.AT_LEAST_ONE_ROW);\n             }\n             final int nCols \u003d d[0].length;\n             if (nCols \u003d\u003d 0) {\n-                throw MathRuntimeException.createIllegalArgumentException(\n-                      LocalizedFormats.AT_LEAST_ONE_COLUMN);\n+                throw new ZeroException(LocalizedFormats.AT_LEAST_ONE_COLUMN);\n             }\n             for (int r \u003d 1; r \u003c nRows; r++) {\n                 if (d[r].length !\u003d nCols) {\n-                    throw MathRuntimeException.createIllegalArgumentException(\n-                          LocalizedFormats.DIFFERENT_ROWS_LENGTHS, nCols, d[r].length);\n+                    throw new DimensionMismatchException(d[r].length, nCols);\n                 }\n             }\n             data \u003d d;\n@@ -140,12 +138,12 @@\n     }\n \n     /**\n-     * Create a new (column) RealMatrix using \u003ccode\u003ev\u003c/code\u003e as the\n-     * data for the unique column of the \u003ccode\u003ev.length x 1\u003c/code\u003e matrix\n+     * Create a new (column) RealMatrix using {@code v} as the\n+     * data for the unique column of the {@code v.length x 1} matrix\n      * created.\n-     * \u003cp\u003eThe input array is copied, not referenced.\u003c/p\u003e\n+     * The input array is copied, not referenced.\n      *\n-     * @param v column vector holding data for new matrix\n+     * @param v Column vector holding data for new matrix.\n      */\n     public Array2DRowRealMatrix(final double[] v) {\n         final int nRows \u003d v.length;\n@@ -157,8 +155,8 @@\n \n     /** {@inheritDoc} */\n     @Override\n-    public RealMatrix createMatrix(final int rowDimension, final int columnDimension)\n-        throws IllegalArgumentException {\n+    public RealMatrix createMatrix(final int rowDimension,\n+                                   final int columnDimension) {\n         return new Array2DRowRealMatrix(rowDimension, columnDimension);\n     }\n \n@@ -168,28 +166,16 @@\n         return new Array2DRowRealMatrix(copyOut(), false);\n     }\n \n-    /** {@inheritDoc} */\n-    @Override\n-    public RealMatrix add(final RealMatrix m)\n-        throws IllegalArgumentException {\n-        try {\n-            return add((Array2DRowRealMatrix) m);\n-        } catch (ClassCastException cce) {\n-            return super.add(m);\n-        }\n-    }\n-\n     /**\n-     * Compute the sum of this and \u003ccode\u003em\u003c/code\u003e.\n+     * Compute the sum of this matrix with {@code m}.\n      *\n-     * @param m    matrix to be added\n-     * @return     this + m\n-     * @throws  IllegalArgumentException if m is not the same size as this\n+     * @param m Matrix to be added.\n+     * @return {@code this} + m.\n+     * @throws org.apache.commons.math.exception.MatrixDimensionMismatchException\n+     * if {@code m} is not the same size as this matrix.\n      */\n-    public Array2DRowRealMatrix add(final Array2DRowRealMatrix m)\n-        throws IllegalArgumentException {\n-\n-        // safety check\n+    public Array2DRowRealMatrix add(final Array2DRowRealMatrix m) {\n+        // Safety check.\n         MatrixUtils.checkAdditionCompatible(this, m);\n \n         final int rowCount    \u003d getRowDimension();\n@@ -205,31 +191,18 @@\n         }\n \n         return new Array2DRowRealMatrix(outData, false);\n-\n-    }\n-\n-    /** {@inheritDoc} */\n-    @Override\n-    public RealMatrix subtract(final RealMatrix m)\n-        throws IllegalArgumentException {\n-        try {\n-            return subtract((Array2DRowRealMatrix) m);\n-        } catch (ClassCastException cce) {\n-            return super.subtract(m);\n-        }\n     }\n \n     /**\n-     * Compute  this minus \u003ccode\u003em\u003c/code\u003e.\n+     * Subtract {@code m} from this matrix.\n      *\n-     * @param m    matrix to be subtracted\n-     * @return     this + m\n-     * @throws  IllegalArgumentException if m is not the same size as this\n+     * @param m Matrix to be subtracted.\n+     * @return {@code this} - m.\n+     * @throws org.apache.commons.math.exception.MatrixDimensionMismatchException\n+     * if {@code m} is not the same size as this matrix.\n      */\n-    public Array2DRowRealMatrix subtract(final Array2DRowRealMatrix m)\n-        throws IllegalArgumentException {\n-\n-        // safety check\n+    public Array2DRowRealMatrix subtract(final Array2DRowRealMatrix m) {\n+        // Safety check.\n         MatrixUtils.checkSubtractionCompatible(this, m);\n \n         final int rowCount    \u003d getRowDimension();\n@@ -245,31 +218,19 @@\n         }\n \n         return new Array2DRowRealMatrix(outData, false);\n-\n-    }\n-\n-    /** {@inheritDoc} */\n-    @Override\n-    public RealMatrix multiply(final RealMatrix m)\n-        throws IllegalArgumentException {\n-        try {\n-            return multiply((Array2DRowRealMatrix) m);\n-        } catch (ClassCastException cce) {\n-            return super.multiply(m);\n-        }\n     }\n \n     /**\n-     * Returns the result of postmultiplying this by \u003ccode\u003em\u003c/code\u003e.\n-     * @param m    matrix to postmultiply by\n-     * @return     this*m\n-     * @throws     IllegalArgumentException\n-     *             if columnDimension(this) !\u003d rowDimension(m)\n+     * Returns the result of postmultiplying this matrix with {@code m}.\n+     *\n+     * @param m Matrix to postmultiply by.\n+     * @return {@code this} * m.\n+     * @throws org.apache.commons.math.exception.MatrixDimensionMismatchException\n+     * if the column dimension of this matrix is different from the row\n+     * dimension of {@code m}.\n      */\n-    public Array2DRowRealMatrix multiply(final Array2DRowRealMatrix m)\n-        throws IllegalArgumentException {\n-\n-        // safety check\n+    public Array2DRowRealMatrix multiply(final Array2DRowRealMatrix m) {\n+        // Safety check.\n         MatrixUtils.checkMultiplicationCompatible(this, m);\n \n         final int nRows \u003d this.getRowDimension();\n@@ -299,11 +260,9 @@\n     }\n \n     /**\n-     * Returns a reference to the underlying data array.\n-     * \u003cp\u003e\n-     * Does \u003cstrong\u003enot\u003c/strong\u003e make a fresh copy of the underlying data.\u003c/p\u003e\n+     * Return a reference to the underlying data array.\n      *\n-     * @return 2-dimensional array of entries\n+     * @return 2-dimensional array of entries.\n      */\n     public double[][] getDataRef() {\n         return data;\n@@ -311,33 +270,28 @@\n \n     /** {@inheritDoc} */\n     @Override\n-    public void setSubMatrix(final double[][] subMatrix, final int row, final int column)\n-    throws MatrixIndexException {\n+    public void setSubMatrix(final double[][] subMatrix,\n+                             final int row, final int column) {\n         if (data \u003d\u003d null) {\n             if (row \u003e 0) {\n-                throw MathRuntimeException.createIllegalStateException(\n-                      LocalizedFormats.FIRST_ROWS_NOT_INITIALIZED_YET, row);\n+                throw new MathIllegalStateException(LocalizedFormats.FIRST_ROWS_NOT_INITIALIZED_YET, row);\n             }\n             if (column \u003e 0) {\n-                throw MathRuntimeException.createIllegalStateException(\n-                      LocalizedFormats.FIRST_COLUMNS_NOT_INITIALIZED_YET, column);\n+                throw new MathIllegalStateException(LocalizedFormats.FIRST_COLUMNS_NOT_INITIALIZED_YET, column);\n             }\n             final int nRows \u003d subMatrix.length;\n             if (nRows \u003d\u003d 0) {\n-                throw MathRuntimeException.createIllegalArgumentException(\n-                      LocalizedFormats.AT_LEAST_ONE_ROW);\n+                throw new ZeroException(LocalizedFormats.AT_LEAST_ONE_ROW);\n             }\n \n             final int nCols \u003d subMatrix[0].length;\n             if (nCols \u003d\u003d 0) {\n-                throw MathRuntimeException.createIllegalArgumentException(\n-                      LocalizedFormats.AT_LEAST_ONE_COLUMN);\n+                throw new ZeroException(LocalizedFormats.AT_LEAST_ONE_COLUMN);\n             }\n             data \u003d new double[subMatrix.length][nCols];\n             for (int i \u003d 0; i \u003c data.length; ++i) {\n                 if (subMatrix[i].length !\u003d nCols) {\n-                    throw MathRuntimeException.createIllegalArgumentException(\n-                          LocalizedFormats.DIFFERENT_ROWS_LENGTHS, nCols, subMatrix[i].length);\n+                    throw new DimensionMismatchException(subMatrix[i].length, nCols);\n                 }\n                 System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);\n             }\n@@ -349,55 +303,35 @@\n \n     /** {@inheritDoc} */\n     @Override\n-    public double getEntry(final int row, final int column)\n-        throws MatrixIndexException {\n-        try {\n-            return data[row][column];\n-        } catch (ArrayIndexOutOfBoundsException e) {\n-            throw new MatrixIndexException(\n-                      LocalizedFormats.NO_SUCH_MATRIX_ENTRY, row, column, getRowDimension(), getColumnDimension());\n-        }\n+    public double getEntry(final int row, final int column) {\n+        MatrixUtils.checkMatrixIndex(this, row, column);\n+        return data[row][column];\n     }\n \n     /** {@inheritDoc} */\n     @Override\n-    public void setEntry(final int row, final int column, final double value)\n-        throws MatrixIndexException {\n-        try {\n-            data[row][column] \u003d value;\n-        } catch (ArrayIndexOutOfBoundsException e) {\n-            throw new MatrixIndexException(\n-                      LocalizedFormats.NO_SUCH_MATRIX_ENTRY, row, column, getRowDimension(), getColumnDimension());\n-        }\n+    public void setEntry(final int row, final int column, final double value) {\n+        MatrixUtils.checkMatrixIndex(this, row, column);\n+        data[row][column] \u003d value;\n     }\n \n     /** {@inheritDoc} */\n     @Override\n-    public void addToEntry(final int row, final int column, final double increment)\n-        throws MatrixIndexException {\n-        try {\n-            data[row][column] +\u003d increment;\n-        } catch (ArrayIndexOutOfBoundsException e) {\n-            throw new MatrixIndexException(\n-                      LocalizedFormats.NO_SUCH_MATRIX_ENTRY, row, column, getRowDimension(), getColumnDimension());\n-        }\n+    public void addToEntry(final int row, final int column, final double increment) {\n+        MatrixUtils.checkMatrixIndex(this, row, column);\n+        data[row][column] +\u003d increment;\n     }\n \n     /** {@inheritDoc} */\n     @Override\n-    public void multiplyEntry(final int row, final int column, final double factor)\n-        throws MatrixIndexException {\n-        try {\n-            data[row][column] *\u003d factor;\n-        } catch (ArrayIndexOutOfBoundsException e) {\n-            throw new MatrixIndexException(\n-                      LocalizedFormats.NO_SUCH_MATRIX_ENTRY, row, column, getRowDimension(), getColumnDimension());\n-        }\n+    public void multiplyEntry(final int row, final int column, final double factor) {\n+        MatrixUtils.checkMatrixIndex(this, row, column);\n+        data[row][column] *\u003d factor;\n     }\n \n     /** {@inheritDoc} */\n     @Override\n-    public int getRowDimension() {\n+        public int getRowDimension() {\n         return (data \u003d\u003d null) ? 0 : data.length;\n     }\n \n@@ -409,13 +343,11 @@\n \n     /** {@inheritDoc} */\n     @Override\n-    public double[] operate(final double[] v)\n-        throws IllegalArgumentException {\n+    public double[] operate(final double[] v) {\n         final int nRows \u003d this.getRowDimension();\n         final int nCols \u003d this.getColumnDimension();\n         if (v.length !\u003d nCols) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                  LocalizedFormats.VECTOR_LENGTH_MISMATCH, v.length, nCols);\n+            throw new DimensionMismatchException(v.length, nCols);\n         }\n         final double[] out \u003d new double[nRows];\n         for (int row \u003d 0; row \u003c nRows; row++) {\n@@ -431,14 +363,11 @@\n \n     /** {@inheritDoc} */\n     @Override\n-    public double[] preMultiply(final double[] v)\n-        throws IllegalArgumentException {\n-\n+    public double[] preMultiply(final double[] v) {\n         final int nRows \u003d getRowDimension();\n         final int nCols \u003d getColumnDimension();\n         if (v.length !\u003d nRows) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                  LocalizedFormats.VECTOR_LENGTH_MISMATCH, v.length, nRows);\n+            throw new DimensionMismatchException(v.length, nRows);\n         }\n \n         final double[] out \u003d new double[nCols];\n@@ -491,7 +420,7 @@\n     public double walkInRowOrder(final RealMatrixChangingVisitor visitor,\n                                  final int startRow, final int endRow,\n                                  final int startColumn, final int endColumn)\n-        throws MatrixIndexException, MatrixVisitorException {\n+        throws MatrixVisitorException {\n         MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);\n         visitor.start(getRowDimension(), getColumnDimension(),\n                       startRow, endRow, startColumn, endColumn);\n@@ -509,7 +438,7 @@\n     public double walkInRowOrder(final RealMatrixPreservingVisitor visitor,\n                                  final int startRow, final int endRow,\n                                  final int startColumn, final int endColumn)\n-        throws MatrixIndexException, MatrixVisitorException {\n+        throws MatrixVisitorException {\n         MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);\n         visitor.start(getRowDimension(), getColumnDimension(),\n                       startRow, endRow, startColumn, endColumn);\n@@ -558,7 +487,7 @@\n     public double walkInColumnOrder(final RealMatrixChangingVisitor visitor,\n                                     final int startRow, final int endRow,\n                                     final int startColumn, final int endColumn)\n-        throws MatrixIndexException, MatrixVisitorException {\n+        throws MatrixVisitorException {\n         MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);\n         visitor.start(getRowDimension(), getColumnDimension(),\n                       startRow, endRow, startColumn, endColumn);\n@@ -576,7 +505,7 @@\n     public double walkInColumnOrder(final RealMatrixPreservingVisitor visitor,\n                                     final int startRow, final int endRow,\n                                     final int startColumn, final int endColumn)\n-        throws MatrixIndexException, MatrixVisitorException {\n+        throws MatrixVisitorException {\n         MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);\n         visitor.start(getRowDimension(), getColumnDimension(),\n                       startRow, endRow, startColumn, endColumn);\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "ImportDeclaration [875,943]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ImportDeclaration [944,1007]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ImportDeclaration [1008,1063]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ImportDeclaration [1064,1131]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [2420,2459]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [2536,2565]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Javadoc [4014,4876]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Javadoc [5684,5959]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Javadoc [6566,6846]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Javadoc [7590,7865]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Javadoc [8617,8969]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [9941,10062]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TagElement [4025,4392]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TagElement [4444,4549]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [4557,4676]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [4684,4743]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [4751,4822]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TagElement [5695,5885]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [6577,6623]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [6674,6699]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [6707,6838]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [7601,7637]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [7693,7718]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [7726,7857]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [8628,8693]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [8751,8776]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [8784,8961]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [11523,11571]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [11740,11788]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [11964,12012]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [12193,12241]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: If an array is built specially in order to be embedded in a [4115,4174]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: RealMatrix and not used directly, the  [4182,4220]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [4220,4237]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement:  may be [4237,4244]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: set to  [4252,4259]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [4259,4272]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: . This will prevent the copying and improve [4272,4315]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: performance as no new array will be built and no data will be copied. [4323,4392]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement:  if  [4460,4464]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [4464,4476]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: , the input array will be copied, [4476,4509]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: otherwise it will be referenced. [4517,4549]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: Create a new (column) RealMatrix using  [5695,5734]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [5734,5743]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement:  as the [5743,5750]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: data for the unique column of the  [5758,5792]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [5792,5812]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement:  matrix [5812,5819]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: The input array is copied, not referenced. [5843,5885]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ThrowStatement [12814,12868]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ThrowStatement [13447,13501]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ThrowStatement [5201,5260]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ThrowStatement [5364,5426]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ThrowStatement [10359,10449]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ThrowStatement [10510,10606]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ThrowStatement [10715,10774]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ThrowStatement [10887,10949]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ThrowStatement [5551,5608]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ThrowStatement [11144,11209]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ImportDeclaration [875,927]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "Javadoc [2217,2255]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "Javadoc [2333,2361]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: \u003cp\u003eIf an array is built specially in order to be embedded in a [3916,3978]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: RealMatrix and not used directly, the \u003ccode\u003ecopyArray\u003c/code\u003e may be [3986,4053]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: set to \u003ccode\u003efalse\u003c/code. This will prevent the copying and improve [4061,4128]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: performance as no new array will be built and no data will be copied.\u003c/p\u003e [4136,4209]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TagElement [3826,4209]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement:  if true, the input array will be copied, otherwise [4269,4320]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: it will be referenced [4328,4349]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TagElement [4253,4349]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [4357,4479]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [4487,4541]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Javadoc [3815,4595]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [4688,4712]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [4714,4734]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ThrowStatement [4981,5097]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ThrowStatement [5201,5320]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ThrowStatement [5445,5591]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: Create a new (column) RealMatrix using \u003ccode\u003ev\u003c/code\u003e as the [5678,5738]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: data for the unique column of the \u003ccode\u003ev.length x 1\u003c/code\u003e matrix [5746,5812]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: \u003cp\u003eThe input array is copied, not referenced.\u003c/p\u003e [5836,5885]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TagElement [5678,5885]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Javadoc [5667,5958]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [6324,6348]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [6570,6848]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [6865,6908]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [6961,6981]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [6989,7056]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Javadoc [6854,7064]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [7146,7170]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [7849,8142]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [8159,8194]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [8252,8272]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [8280,8347]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Javadoc [8148,8355]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [8442,8466]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [9148,9441]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [9458,9519]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [9572,9590]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [9598,9697]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Javadoc [9447,9705]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [9792,9816]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "Javadoc [10717,10928]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [11134,11154]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ThrowStatement [11228,11360]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ThrowStatement [11421,11559]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ThrowStatement [11668,11784]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ThrowStatement [11897,12016]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ThrowStatement [12211,12365]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [12684,12704]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Block [12719,12768]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "CatchClause [12769,12981]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TryStatement [12715,12981]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [13121,13141]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Block [13156,13206]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "CatchClause [13207,13419]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TryStatement [13152,13419]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [13565,13585]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Block [13600,13655]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "CatchClause [13656,13868]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TryStatement [13596,13868]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [14014,14034]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Block [14049,14101]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "CatchClause [14102,14314]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TryStatement [14045,14314]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [14711,14735]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ThrowStatement [14886,15021]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [15475,15499]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ThrowStatement [15641,15776]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [17483,17503]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [18297,18317]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [20202,20222]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [21029,21049]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java",
        "src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "ArrayFieldVector",
            "subtract",
            "buildArray",
            "ArrayFieldVector",
            "ebeMultiply",
            "ArrayFieldVector",
            "outerProduct",
            "subtract",
            "outerProduct",
            "dotProduct",
            "dotProduct",
            "checkVectorDimensions",
            "add",
            "ArrayFieldVector",
            "add",
            "ArrayFieldVector",
            "subtract",
            "ebeDivide",
            "getEntry",
            "ArrayFieldVector",
            "ArrayFieldVector",
            "ArrayFieldVector",
            "add",
            "ebeMultiply",
            "set",
            "ArrayFieldVector",
            "ArrayFieldVector",
            "ArrayFieldVector",
            "checkVectorDimensions",
            "ebeMultiply",
            "ebeDivide",
            "ebeDivide",
            "ArrayFieldVector",
            "checkIndex",
            "dotProduct",
            "ArrayFieldVector",
            "ArrayFieldVector",
            "ArrayFieldVector",
            "outerProduct",
            "ArrayFieldVector",
            "equals"
          ],
          "num": 41
        },
        {
          "qualified_names": [
            "ArrayFieldVector",
            "ArrayFieldVector",
            "subtract",
            "ArrayFieldVector",
            "subtract",
            "outerProduct",
            "ArrayFieldVector",
            "ArrayFieldVector",
            "buildArray",
            "dotProduct",
            "outerProduct",
            "equals",
            "ArrayFieldVector",
            "ebeMultiply",
            "ebeMultiply",
            "checkVectorDimensions",
            "dotProduct",
            "ebeDivide",
            "checkIndex",
            "ebeDivide",
            "ArrayFieldVector",
            "add",
            "ArrayFieldVector",
            "outerProduct",
            "ebeMultiply",
            "checkVectorDimensions",
            "ArrayFieldVector",
            "set",
            "ArrayFieldVector",
            "ArrayFieldVector",
            "add",
            "add",
            "ArrayFieldVector",
            "ArrayFieldVector",
            "ArrayFieldVector",
            "subtract",
            "getEntry",
            "ArrayFieldVector",
            "ebeDivide",
            "dotProduct",
            "ArrayFieldVector"
          ],
          "num": 41
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "25",
            "35",
            "38",
            "41",
            "47",
            "50",
            "52",
            "60",
            "61",
            "62",
            "71",
            "72",
            "73",
            "82",
            "87",
            "88",
            "89",
            "92",
            "93",
            "98",
            "99",
            "105",
            "106",
            "117",
            "118",
            "119",
            "120",
            "121",
            "125",
            "126",
            "127",
            "128",
            "129",
            "130",
            "131",
            "135",
            "136",
            "138",
            "139",
            "148",
            "149",
            "150",
            "151",
            "152",
            "153",
            "154",
            "155",
            "165",
            "166",
            "167",
            "171",
            "172",
            "173",
            "182",
            "194",
            "203",
            "204",
            "213",
            "214",
            "225",
            "226",
            "237",
            "238",
            "249",
            "253",
            "254",
            "255",
            "256",
            "257",
            "261",
            "262",
            "263",
            "264",
            "265",
            "266",
            "267",
            "268",
            "274",
            "275",
            "276",
            "281",
            "282",
            "290",
            "291",
            "292",
            "310",
            "324",
            "339",
            "340",
            "345",
            "359",
            "374",
            "375",
            "467",
            "468",
            "482",
            "483",
            "498",
            "499",
            "504",
            "505",
            "519",
            "520",
            "535",
            "536",
            "555",
            "556",
            "570",
            "571",
            "586",
            "587",
            "611",
            "612",
            "634",
            "635",
            "640",
            "641",
            "654",
            "746",
            "749",
            "750",
            "770",
            "771",
            "778",
            "779",
            "780",
            "782",
            "783",
            "785",
            "786",
            "787",
            "792",
            "793",
            "794",
            "795",
            "796",
            "797",
            "798",
            "799",
            "800",
            "801",
            "802",
            "804",
            "805",
            "806",
            "807",
            "808",
            "813",
            "814",
            "815",
            "817",
            "818",
            "819",
            "820",
            "821",
            "822",
            "823",
            "824",
            "825",
            "826",
            "827",
            "828",
            "829",
            "830",
            "831",
            "832",
            "833",
            "834",
            "835",
            "836",
            "837",
            "838",
            "839",
            "858",
            "859",
            "861",
            "862",
            "864",
            "865",
            "868"
          ],
          "num": 180
        },
        {
          "qualified_names": [
            "25",
            "26",
            "27",
            "28",
            "29",
            "48",
            "51",
            "53",
            "54",
            "62",
            "63",
            "64",
            "65",
            "74",
            "75",
            "76",
            "77",
            "90",
            "91",
            "92",
            "93",
            "96",
            "97",
            "98",
            "99",
            "104",
            "110",
            "111",
            "112",
            "113",
            "117",
            "118",
            "119",
            "127",
            "128",
            "129",
            "130",
            "134",
            "135",
            "136",
            "137",
            "138",
            "139",
            "140",
            "141",
            "145",
            "146",
            "147",
            "148",
            "150",
            "159",
            "160",
            "161",
            "162",
            "163",
            "164",
            "165",
            "166",
            "167",
            "168",
            "172",
            "173",
            "174",
            "181",
            "182",
            "183",
            "184",
            "185",
            "186",
            "187",
            "190",
            "191",
            "192",
            "194",
            "203",
            "204",
            "205",
            "208",
            "209",
            "210",
            "220",
            "221",
            "222",
            "225",
            "226",
            "227",
            "234",
            "235",
            "236",
            "237",
            "238",
            "241",
            "242",
            "243",
            "250",
            "251",
            "252",
            "253",
            "254",
            "257",
            "258",
            "259",
            "260",
            "269",
            "270",
            "271",
            "272",
            "273",
            "276",
            "277",
            "278",
            "279",
            "288",
            "289",
            "290",
            "291",
            "292",
            "295",
            "296",
            "297",
            "298",
            "310",
            "311",
            "312",
            "313",
            "314",
            "315",
            "316",
            "317",
            "321",
            "322",
            "323",
            "325",
            "326",
            "327",
            "328",
            "329",
            "330",
            "331",
            "336",
            "337",
            "338",
            "339",
            "340",
            "341",
            "342",
            "347",
            "355",
            "356",
            "357",
            "358",
            "359",
            "377",
            "391",
            "406",
            "411",
            "425",
            "440",
            "532",
            "546",
            "561",
            "566",
            "580",
            "595",
            "614",
            "628",
            "643",
            "667",
            "689",
            "694",
            "707",
            "799",
            "802",
            "822",
            "829",
            "830",
            "831",
            "833",
            "835",
            "840",
            "842",
            "843",
            "844",
            "848",
            "849",
            "850",
            "851",
            "852",
            "853",
            "855",
            "856",
            "857",
            "858",
            "859",
            "860",
            "862",
            "863",
            "864",
            "865",
            "866",
            "867",
            "868",
            "869",
            "870",
            "871",
            "890",
            "891",
            "892",
            "894",
            "896",
            "897"
          ],
          "num": 211
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java b/src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java\nindex 69cf176..e081931 100644\n--- a/src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java\n+++ b/src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java\n@@ -22,7 +22,11 @@\n \n import org.apache.commons.math.Field;\n import org.apache.commons.math.FieldElement;\n-import org.apache.commons.math.MathRuntimeException;\n+import org.apache.commons.math.exception.ZeroException;\n+import org.apache.commons.math.exception.NullArgumentException;\n+import org.apache.commons.math.exception.OutOfRangeException;\n+import org.apache.commons.math.exception.DimensionMismatchException;\n+import org.apache.commons.math.exception.NumberIsTooLargeException;\n import org.apache.commons.math.exception.util.LocalizedFormats;\n \n /**\n@@ -32,24 +36,22 @@\n  * @since 2.0\n  */\n public class ArrayFieldVector\u003cT extends FieldElement\u003cT\u003e\u003e implements FieldVector\u003cT\u003e, Serializable {\n-\n     /** Serializable version identifier. */\n     private static final long serialVersionUID \u003d 7648186910365927050L;\n-\n     /** Entries of the vector. */\n     protected T[] data;\n-\n     /** Field to which the elements belong. */\n     private final Field\u003cT\u003e field;\n \n     /**\n      * Build a 0-length vector.\n-     * \u003cp\u003eZero-length vectors may be used to initialized construction of vectors\n+     * Zero-length vectors may be used to initialized construction of vectors\n      * by data gathering. We start with zero-length and use either the {@link\n      * #ArrayFieldVector(ArrayFieldVector, ArrayFieldVector)} constructor\n-     * or one of the \u003ccode\u003eappend\u003c/code\u003e methods ({@link #append(FieldElement[])},\n+     * or one of the {@code append} methods ({@link #append(FieldElement[])},\n      * {@link #add(FieldVector)}, {@link #append(ArrayFieldVector)}) to gather data\n-     * into this vector.\u003c/p\u003e\n+     * into this vector.\n+     *\n      * @param field field to which the elements belong\n      */\n     public ArrayFieldVector(final Field\u003cT\u003e field) {\n@@ -57,9 +59,10 @@\n     }\n \n     /**\n-     * Construct a (size)-length vector of zeros.\n-     * @param field field to which the elements belong\n-     * @param size size of the vector\n+     * Construct a vector of zeroes.\n+     *\n+     * @param field Field to which the elements belong.\n+     * @param size Size of the vector.\n      */\n     public ArrayFieldVector(Field\u003cT\u003e field, int size) {\n         this.field \u003d field;\n@@ -68,9 +71,10 @@\n     }\n \n     /**\n-     * Construct an (size)-length vector with preset values.\n-     * @param size size of the vector\n-     * @param preset fill the vector with this scalar value\n+     * Construct a vector with preset values.\n+     *\n+     * @param size Size of the vector.\n+     * @param preset All entries will be set with this value.\n      */\n     public ArrayFieldVector(int size, T preset) {\n         this(preset.getField(), size);\n@@ -79,34 +83,40 @@\n \n     /**\n      * Construct a vector from an array, copying the input array.\n-     * \u003cp\u003e\n      * This constructor needs a non-empty {@code d} array to retrieve\n      * the field from its first element. This implies it cannot build\n      * 0 length vectors. To build vectors from any size, one should\n      * use the {@link #ArrayFieldVector(Field, FieldElement[])} constructor.\n-     * \u003c/p\u003e\n-     * @param d array of Ts.\n-     * @throws IllegalArgumentException if \u003ccode\u003ed\u003c/code\u003e is empty\n+     *\n+     * @param d Array.\n+     * @throws NullArgumentException if {@code d} is {@code null}.\n+     * @throws ZeroException if {@code d} is empty.\n      * @see #ArrayFieldVector(Field, FieldElement[])\n      */\n-    public ArrayFieldVector(T[] d)\n-        throws IllegalArgumentException {\n+    public ArrayFieldVector(T[] d) {\n+        if (d \u003d\u003d null) {\n+            throw new NullArgumentException();\n+        }\n         try {\n             field \u003d d[0].getField();\n             data \u003d d.clone();\n         } catch (ArrayIndexOutOfBoundsException e) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                      LocalizedFormats.VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT);\n+            throw new ZeroException(LocalizedFormats.VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT);\n         }\n     }\n \n     /**\n      * Construct a vector from an array, copying the input array.\n-     * @param field field to which the elements belong\n-     * @param d array of Ts.\n+     *\n+     * @param field Field to which the elements belong.\n+     * @param d Array.\n+     * @throws NullArgumentException if {@code d} is {@code null}.\n      * @see #ArrayFieldVector(FieldElement[])\n      */\n     public ArrayFieldVector(Field\u003cT\u003e field, T[] d) {\n+        if (d \u003d\u003d null) {\n+            throw new NullArgumentException();\n+        }\n         this.field \u003d field;\n         data \u003d d.clone();\n     }\n@@ -114,29 +124,30 @@\n     /**\n      * Create a new ArrayFieldVector using the input array as the underlying\n      * data array.\n-     * \u003cp\u003eIf an array is built specially in order to be embedded in a\n-     * ArrayFieldVector and not used directly, the \u003ccode\u003ecopyArray\u003c/code\u003e may be\n-     * set to \u003ccode\u003efalse\u003c/code. This will prevent the copying and improve\n-     * performance as no new array will be built and no data will be copied.\u003c/p\u003e\n-     * \u003cp\u003e\n+     * If an array is built specially in order to be embedded in a\n+     * ArrayFieldVector and not used directly, the {@code copyArray} may be\n+     * set to {@code false}. This will prevent the copying and improve\n+     * performance as no new array will be built and no data will be copied.\n      * This constructor needs a non-empty {@code d} array to retrieve\n      * the field from its first element. This implies it cannot build\n      * 0 length vectors. To build vectors from any size, one should\n-     * use the {@link #ArrayFieldVector(Field, FieldElement[], boolean)} constructor.\n-     * \u003c/p\u003e\n-     * @param d data for new vector\n-     * @param copyArray if true, the input array will be copied, otherwise\n-     * it will be referenced\n-     * @throws IllegalArgumentException if \u003ccode\u003ed\u003c/code\u003e is empty\n-     * @throws NullPointerException if \u003ccode\u003ed\u003c/code\u003e is null\n+     * use the {@link #ArrayFieldVector(Field, FieldElement[], boolean)}\n+     * constructor.\n+     *\n+     * @param d Data for the new vector.\n+     * @param copyArray If {@code true}, the input array will be copied,\n+     * otherwise it will be referenced.\n+     * @throws NullArgumentException if {@code d} is {@code null}.\n+     * @throws ZeroException if {@code d} is empty.\n      * @see #ArrayFieldVector(FieldElement[])\n      * @see #ArrayFieldVector(Field, FieldElement[], boolean)\n      */\n-    public ArrayFieldVector(T[] d, boolean copyArray)\n-        throws NullPointerException, IllegalArgumentException {\n+    public ArrayFieldVector(T[] d, boolean copyArray) {\n+        if (d \u003d\u003d null) {\n+            throw new NullArgumentException();\n+        }\n         if (d.length \u003d\u003d 0) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                  LocalizedFormats.VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT);\n+            throw new ZeroException(LocalizedFormats.VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT);\n         }\n         field \u003d d[0].getField();\n         data \u003d copyArray ? d.clone() :  d;\n@@ -145,32 +156,42 @@\n     /**\n      * Create a new ArrayFieldVector using the input array as the underlying\n      * data array.\n-     * \u003cp\u003eIf an array is built specially in order to be embedded in a\n-     * ArrayFieldVector and not used directly, the \u003ccode\u003ecopyArray\u003c/code\u003e may be\n-     * set to \u003ccode\u003efalse\u003c/code. This will prevent the copying and improve\n-     * performance as no new array will be built and no data will be copied.\u003c/p\u003e\n-     * @param field field to which the elements belong\n-     * @param d data for new vector\n-     * @param copyArray if true, the input array will be copied, otherwise\n-     * it will be referenced\n+     * If an array is built specially in order to be embedded in a\n+     * ArrayFieldVector and not used directly, the {@code copyArray} may be\n+     * set to {@code false}. This will prevent the copying and improve\n+     * performance as no new array will be built and no data will be copied.\n+     *\n+     * @param field Field to which the elements belong.\n+     * @param d Data for the new vector.\n+     * @param copyArray If {@code true}, the input array will be copied,\n+     * otherwise it will be referenced.\n+     * @throws NullArgumentException if {@code d} is {@code null}.\n      * @see #ArrayFieldVector(FieldElement[], boolean)\n      */\n     public ArrayFieldVector(Field\u003cT\u003e field, T[] d, boolean copyArray) {\n+        if (d \u003d\u003d null) {\n+            throw new NullArgumentException();\n+        }\n         this.field \u003d field;\n         data \u003d copyArray ? d.clone() :  d;\n     }\n \n     /**\n      * Construct a vector from part of a array.\n-     * @param d array of Ts.\n-     * @param pos position of first entry\n-     * @param size number of entries to copy\n+     *\n+     * @param d Array.\n+     * @param pos Position of the first entry.\n+     * @param size Number of entries to copy.\n+     * @throws NullArgumentException if {@code d} is {@code null}.\n+     * @throws NumberIsTooLargeException if the size of {@code d} is less\n+     * than {@code pos + size}.\n      */\n     public ArrayFieldVector(T[] d, int pos, int size) {\n+        if (d \u003d\u003d null) {\n+            throw new NullArgumentException();\n+        }\n         if (d.length \u003c pos + size) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    LocalizedFormats.POSITION_SIZE_MISMATCH_INPUT_ARRAY,\n-                    pos, size, d.length);\n+            throw new NumberIsTooLargeException(pos + size, d.length, true);\n         }\n         field \u003d d[0].getField();\n         data \u003d buildArray(size);\n@@ -179,9 +200,14 @@\n \n     /**\n      * Construct a vector from another vector, using a deep copy.\n-     * @param v vector to copy\n+     *\n+     * @param v Vector to copy.\n+     * @throws NullArgumentException if {@code v} is {@code null}.\n      */\n     public ArrayFieldVector(FieldVector\u003cT\u003e v) {\n+        if (v \u003d\u003d null) {\n+            throw new NullArgumentException();\n+        }\n         field \u003d v.getField();\n         data \u003d buildArray(v.getDimension());\n         for (int i \u003d 0; i \u003c data.length; ++i) {\n@@ -191,29 +217,47 @@\n \n     /**\n      * Construct a vector from another vector, using a deep copy.\n-     * @param v vector to copy\n+     *\n+     * @param v Vector to copy.\n+     * @throws NullArgumentException if {@code v} is {@code null}.\n      */\n     public ArrayFieldVector(ArrayFieldVector\u003cT\u003e v) {\n+        if (v \u003d\u003d null) {\n+            throw new NullArgumentException();\n+        }\n         field \u003d v.getField();\n         data \u003d v.data.clone();\n     }\n \n     /**\n      * Construct a vector from another vector.\n-     * @param v vector to copy\n-     * @param deep if true perform a deep copy otherwise perform a shallow copy\n+     *\n+     * @param v Vector to copy.\n+     * @param deep If {@code true} perform a deep copy, otherwise perform\n+     * a shallow copy\n+     * @throws NullArgumentException if {@code v} is {@code null}.\n      */\n     public ArrayFieldVector(ArrayFieldVector\u003cT\u003e v, boolean deep) {\n+        if (v \u003d\u003d null) {\n+            throw new NullArgumentException();\n+        }\n         field \u003d v.getField();\n         data \u003d deep ? v.data.clone() : v.data;\n     }\n \n     /**\n      * Construct a vector by appending one vector to another vector.\n-     * @param v1 first vector (will be put in front of the new vector)\n-     * @param v2 second vector (will be put at back of the new vector)\n+     *\n+     * @param v1 First vector (will be put in front of the new vector).\n+     * @param v2 Second vector (will be put at back of the new vector).\n+     * @throws NullArgumentException if {@code v1} or {@code v2} is\n+     * {@code null}.\n      */\n     public ArrayFieldVector(ArrayFieldVector\u003cT\u003e v1, ArrayFieldVector\u003cT\u003e v2) {\n+        if (v1 \u003d\u003d null ||\n+            v2 \u003d\u003d null) {\n+            throw new NullArgumentException();\n+        }\n         field \u003d v1.getField();\n         data \u003d buildArray(v1.data.length + v2.data.length);\n         System.arraycopy(v1.data, 0, data, 0, v1.data.length);\n@@ -222,10 +266,17 @@\n \n     /**\n      * Construct a vector by appending one vector to another vector.\n-     * @param v1 first vector (will be put in front of the new vector)\n-     * @param v2 second vector (will be put at back of the new vector)\n+     *\n+     * @param v1 First vector (will be put in front of the new vector).\n+     * @param v2 Second vector (will be put at back of the new vector).\n+     * @throws NullArgumentException if {@code v1} or {@code v2} is\n+     * {@code null}.\n      */\n     public ArrayFieldVector(ArrayFieldVector\u003cT\u003e v1, T[] v2) {\n+        if (v1 \u003d\u003d null ||\n+            v2 \u003d\u003d null) {\n+            throw new NullArgumentException();\n+        }\n         field \u003d v1.getField();\n         data \u003d buildArray(v1.data.length + v2.length);\n         System.arraycopy(v1.data, 0, data, 0, v1.data.length);\n@@ -234,10 +285,17 @@\n \n     /**\n      * Construct a vector by appending one vector to another vector.\n-     * @param v1 first vector (will be put in front of the new vector)\n-     * @param v2 second vector (will be put at back of the new vector)\n+     *\n+     * @param v1 First vector (will be put in front of the new vector).\n+     * @param v2 Second vector (will be put at back of the new vector).\n+     * @throws NullArgumentException if {@code v1} or {@code v2} is\n+     * {@code null}.\n      */\n     public ArrayFieldVector(T[] v1, ArrayFieldVector\u003cT\u003e v2) {\n+        if (v1 \u003d\u003d null ||\n+            v2 \u003d\u003d null) {\n+            throw new NullArgumentException();\n+        }\n         field \u003d v2.getField();\n         data \u003d buildArray(v1.length + v2.data.length);\n         System.arraycopy(v1, 0, data, 0, v1.length);\n@@ -246,40 +304,47 @@\n \n     /**\n      * Construct a vector by appending one vector to another vector.\n-     * \u003cp\u003e\n      * This constructor needs at least one non-empty array to retrieve\n      * the field from its first element. This implies it cannot build\n      * 0 length vectors. To build vectors from any size, one should\n-     * use the {@link #ArrayFieldVector(Field, FieldElement[], FieldElement[])} constructor.\n-     * \u003c/p\u003e\n-     * @param v1 first vector (will be put in front of the new vector)\n-     * @param v2 second vector (will be put at back of the new vector)\n-     * @exception IllegalArgumentException if both vectors are empty\n+     * use the {@link #ArrayFieldVector(Field, FieldElement[], FieldElement[])}\n+     * constructor.\n+     *\n+     * @param v1 First vector (will be put in front of the new vector).\n+     * @param v2 Second vector (will be put at back of the new vector).\n+     * @throws NullArgumentException if {@code v1} or {@code v2} is\n+     * {@code null}.\n+     * @throws ZeroException if both arrays are empty.\n      * @see #ArrayFieldVector(Field, FieldElement[], FieldElement[])\n      */\n     public ArrayFieldVector(T[] v1, T[] v2) {\n-        try {\n-            data \u003d buildArray(v1.length + v2.length);\n-            System.arraycopy(v1, 0, data, 0, v1.length);\n-            System.arraycopy(v2, 0, data, v1.length, v2.length);\n-            field \u003d data[0].getField();\n-        } catch (ArrayIndexOutOfBoundsException e) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                      LocalizedFormats.VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT);\n+        if (v1 \u003d\u003d null ||\n+            v2 \u003d\u003d null) {\n+            throw new NullArgumentException();\n         }\n+        if (v1.length + v2.length \u003d\u003d 0) {\n+            throw new ZeroException(LocalizedFormats.VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT);\n+        }\n+        data \u003d buildArray(v1.length + v2.length);\n+        System.arraycopy(v1, 0, data, 0, v1.length);\n+        System.arraycopy(v2, 0, data, v1.length, v2.length);\n+        field \u003d data[0].getField();\n     }\n \n     /**\n      * Construct a vector by appending one vector to another vector.\n-     * @param field field to which the elements belong\n-     * @param v1 first vector (will be put in front of the new vector)\n-     * @param v2 second vector (will be put at back of the new vector)\n+     *\n+     * @param field Field to which the elements belong.\n+     * @param v1 First vector (will be put in front of the new vector).\n+     * @param v2 Second vector (will be put at back of the new vector).\n+     * @throws NullArgumentException if {@code v1} or {@code v2} is\n+     * {@code null}.\n+     * @throws ZeroException if both arrays are empty.\n      * @see #ArrayFieldVector(FieldElement[], FieldElement[])\n      */\n     public ArrayFieldVector(Field\u003cT\u003e field, T[] v1, T[] v2) {\n         if (v1.length + v2.length \u003d\u003d 0) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                  LocalizedFormats.VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT);\n+            throw new ZeroException(LocalizedFormats.VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT);\n         }\n         data \u003d buildArray(v1.length + v2.length);\n         System.arraycopy(v1, 0, data, 0, v1.length);\n@@ -287,9 +352,11 @@\n         this.field \u003d data[0].getField();\n     }\n \n-    /** Build an array of elements.\n-     * @param length size of the array to build\n-     * @return a new array\n+    /**\n+     * Build an array of elements.\n+     *\n+     * @param length Size of the array to build.\n+     * @return a new array.\n      */\n     @SuppressWarnings(\"unchecked\") // field is of type T\n     private T[] buildArray(final int length) {\n@@ -307,7 +374,7 @@\n     }\n \n     /** {@inheritDoc} */\n-    public FieldVector\u003cT\u003e add(FieldVector\u003cT\u003e v) throws IllegalArgumentException {\n+    public FieldVector\u003cT\u003e add(FieldVector\u003cT\u003e v) {\n         try {\n             return add((ArrayFieldVector\u003cT\u003e) v);\n         } catch (ClassCastException cce) {\n@@ -321,7 +388,7 @@\n     }\n \n     /** {@inheritDoc} */\n-    public FieldVector\u003cT\u003e add(T[] v) throws IllegalArgumentException {\n+    public FieldVector\u003cT\u003e add(T[] v) {\n         checkVectorDimensions(v.length);\n         T[] out \u003d buildArray(data.length);\n         for (int i \u003d 0; i \u003c data.length; i++) {\n@@ -336,13 +403,12 @@\n      * @return this + v\n      * @throws IllegalArgumentException if v is not the same size as this\n      */\n-    public ArrayFieldVector\u003cT\u003e add(ArrayFieldVector\u003cT\u003e v)\n-        throws IllegalArgumentException {\n+    public ArrayFieldVector\u003cT\u003e add(ArrayFieldVector\u003cT\u003e v) {\n         return (ArrayFieldVector\u003cT\u003e) add(v.data);\n     }\n \n     /** {@inheritDoc} */\n-    public FieldVector\u003cT\u003e subtract(FieldVector\u003cT\u003e v) throws IllegalArgumentException {\n+    public FieldVector\u003cT\u003e subtract(FieldVector\u003cT\u003e v) {\n         try {\n             return subtract((ArrayFieldVector\u003cT\u003e) v);\n         } catch (ClassCastException cce) {\n@@ -356,7 +422,7 @@\n     }\n \n     /** {@inheritDoc} */\n-    public FieldVector\u003cT\u003e subtract(T[] v) throws IllegalArgumentException {\n+    public FieldVector\u003cT\u003e subtract(T[] v) {\n         checkVectorDimensions(v.length);\n         T[] out \u003d buildArray(data.length);\n         for (int i \u003d 0; i \u003c data.length; i++) {\n@@ -371,8 +437,7 @@\n      * @return this + v\n      * @throws IllegalArgumentException if v is not the same size as this\n      */\n-    public ArrayFieldVector\u003cT\u003e subtract(ArrayFieldVector\u003cT\u003e v)\n-        throws IllegalArgumentException {\n+    public ArrayFieldVector\u003cT\u003e subtract(ArrayFieldVector\u003cT\u003e v) {\n         return (ArrayFieldVector\u003cT\u003e) subtract(v.data);\n     }\n \n@@ -464,8 +529,7 @@\n     }\n \n     /** {@inheritDoc} */\n-    public FieldVector\u003cT\u003e ebeMultiply(FieldVector\u003cT\u003e v)\n-        throws IllegalArgumentException {\n+    public FieldVector\u003cT\u003e ebeMultiply(FieldVector\u003cT\u003e v) {\n         try {\n             return ebeMultiply((ArrayFieldVector\u003cT\u003e) v);\n         } catch (ClassCastException cce) {\n@@ -479,8 +543,7 @@\n     }\n \n     /** {@inheritDoc} */\n-    public FieldVector\u003cT\u003e ebeMultiply(T[] v)\n-        throws IllegalArgumentException {\n+    public FieldVector\u003cT\u003e ebeMultiply(T[] v) {\n         checkVectorDimensions(v.length);\n         T[] out \u003d buildArray(data.length);\n         for (int i \u003d 0; i \u003c data.length; i++) {\n@@ -495,14 +558,12 @@\n      * @return a vector containing this[i] * v[i] for all i\n      * @exception IllegalArgumentException if v is not the same size as this\n      */\n-    public ArrayFieldVector\u003cT\u003e ebeMultiply(ArrayFieldVector\u003cT\u003e v)\n-        throws IllegalArgumentException {\n+    public ArrayFieldVector\u003cT\u003e ebeMultiply(ArrayFieldVector\u003cT\u003e v) {\n         return (ArrayFieldVector\u003cT\u003e) ebeMultiply(v.data);\n     }\n \n     /** {@inheritDoc} */\n-    public FieldVector\u003cT\u003e ebeDivide(FieldVector\u003cT\u003e v)\n-        throws IllegalArgumentException {\n+    public FieldVector\u003cT\u003e ebeDivide(FieldVector\u003cT\u003e v) {\n         try {\n             return ebeDivide((ArrayFieldVector\u003cT\u003e) v);\n         } catch (ClassCastException cce) {\n@@ -516,8 +577,7 @@\n     }\n \n     /** {@inheritDoc} */\n-    public FieldVector\u003cT\u003e ebeDivide(T[] v)\n-        throws IllegalArgumentException {\n+    public FieldVector\u003cT\u003e ebeDivide(T[] v) {\n         checkVectorDimensions(v.length);\n         T[] out \u003d buildArray(data.length);\n         for (int i \u003d 0; i \u003c data.length; i++) {\n@@ -532,8 +592,7 @@\n      * @return a vector containing this[i] / v[i] for all i\n      * @throws IllegalArgumentException if v is not the same size as this\n      */\n-    public ArrayFieldVector\u003cT\u003e ebeDivide(ArrayFieldVector\u003cT\u003e v)\n-        throws IllegalArgumentException {\n+    public ArrayFieldVector\u003cT\u003e ebeDivide(ArrayFieldVector\u003cT\u003e v) {\n         return (ArrayFieldVector\u003cT\u003e) ebeDivide(v.data);\n     }\n \n@@ -552,8 +611,7 @@\n     }\n \n     /** {@inheritDoc} */\n-    public T dotProduct(FieldVector\u003cT\u003e v)\n-        throws IllegalArgumentException {\n+    public T dotProduct(FieldVector\u003cT\u003e v) {\n         try {\n             return dotProduct((ArrayFieldVector\u003cT\u003e) v);\n         } catch (ClassCastException cce) {\n@@ -567,8 +625,7 @@\n     }\n \n     /** {@inheritDoc} */\n-    public T dotProduct(T[] v)\n-        throws IllegalArgumentException {\n+    public T dotProduct(T[] v) {\n         checkVectorDimensions(v.length);\n         T dot \u003d field.getZero();\n         for (int i \u003d 0; i \u003c data.length; i++) {\n@@ -583,8 +640,7 @@\n      * @return the scalar dot product between instance and v\n      * @exception IllegalArgumentException if v is not the same size as this\n      */\n-    public T dotProduct(ArrayFieldVector\u003cT\u003e v)\n-        throws IllegalArgumentException {\n+    public T dotProduct(ArrayFieldVector\u003cT\u003e v) {\n         return dotProduct(v.data);\n     }\n \n@@ -608,8 +664,7 @@\n     }\n \n     /** {@inheritDoc} */\n-    public FieldMatrix\u003cT\u003e outerProduct(FieldVector\u003cT\u003e v)\n-        throws IllegalArgumentException {\n+    public FieldMatrix\u003cT\u003e outerProduct(FieldVector\u003cT\u003e v) {\n         try {\n             return outerProduct((ArrayFieldVector\u003cT\u003e) v);\n         } catch (ClassCastException cce) {\n@@ -631,14 +686,12 @@\n      * @return the square matrix outer product between instance and v\n      * @exception IllegalArgumentException if v is not the same size as this\n      */\n-    public FieldMatrix\u003cT\u003e outerProduct(ArrayFieldVector\u003cT\u003e v)\n-        throws IllegalArgumentException {\n+    public FieldMatrix\u003cT\u003e outerProduct(ArrayFieldVector\u003cT\u003e v) {\n         return outerProduct(v.data);\n     }\n \n     /** {@inheritDoc} */\n-    public FieldMatrix\u003cT\u003e outerProduct(T[] v)\n-        throws IllegalArgumentException {\n+    public FieldMatrix\u003cT\u003e outerProduct(T[] v) {\n         checkVectorDimensions(v.length);\n         final int m \u003d data.length;\n         final FieldMatrix\u003cT\u003e out \u003d new Array2DRowFieldMatrix\u003cT\u003e(field, m, m);\n@@ -651,7 +704,7 @@\n     }\n \n     /** {@inheritDoc} */\n-    public T getEntry(int index) throws MatrixIndexException {\n+    public T getEntry(int index) {\n         return data[index];\n     }\n \n@@ -743,11 +796,10 @@\n      *\n      * @param index index of first element to be set.\n      * @param v vector containing the values to set.\n-     * @exception MatrixIndexException if the index is\n+     * @throws OutOfRangeException if the index is\n      * inconsistent with vector size\n      */\n-    public void set(int index, ArrayFieldVector\u003cT\u003e v)\n-        throws MatrixIndexException {\n+    public void set(int index, ArrayFieldVector\u003cT\u003e v) {\n         setSubVector(index, v.data);\n     }\n \n@@ -767,76 +819,56 @@\n      * @exception IllegalArgumentException if the vectors do not\n      * have the same dimension\n      */\n-    protected void checkVectorDimensions(FieldVector\u003cT\u003e v)\n-        throws IllegalArgumentException {\n+    protected void checkVectorDimensions(FieldVector\u003cT\u003e v) {\n         checkVectorDimensions(v.getDimension());\n     }\n \n     /**\n      * Check if instance dimension is equal to some expected value.\n      *\n-     * @param n expected dimension.\n-     * @exception IllegalArgumentException if the dimension is\n-     * inconsistent with vector size\n+     * @param n Expected dimension.\n+     * @throws OutOfRangeException if the dimension is\n+     * inconsistent with this vector size.\n      */\n-    protected void checkVectorDimensions(int n)\n-        throws IllegalArgumentException {\n+    protected void checkVectorDimensions(int n) {\n         if (data.length !\u003d n) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    LocalizedFormats.VECTOR_LENGTH_MISMATCH,\n-                    data.length, n);\n+            throw new DimensionMismatchException(data.length, n);\n         }\n     }\n \n     /**\n-     * Test for the equality of two real vectors.\n-     * \u003cp\u003e\n-     * If all coordinates of two real vectors are exactly the same, and none are\n-     * \u003ccode\u003eDouble.NaN\u003c/code\u003e, the two real vectors are considered to be equal.\n-     * \u003c/p\u003e\n-     * \u003cp\u003e\n-     * \u003ccode\u003eNaN\u003c/code\u003e coordinates are considered to affect globally the vector\n-     * and be equals to each other - i.e, if either (or all) coordinates of the\n-     * real vector are equal to \u003ccode\u003eDouble.NaN\u003c/code\u003e, the real vector is equal to\n-     * a vector with all \u003ccode\u003eDouble.NaN\u003c/code\u003e coordinates.\n-     * \u003c/p\u003e\n+     * Test for the equality of two vectors.\n      *\n-     * @param other Object to test for equality to this\n-     * @return true if two 3D vector objects are equal, false if\n-     *         object is null, not an instance of Vector3D, or\n-     *         not equal to this Vector3D instance\n-     *\n+     * @param other Object to test for equality.\n+     * @return {@code true} if two vector objects are equal, {@code false}\n+     * otherwise.\n      */\n     @Override\n     public boolean equals(Object other) {\n+        if (this \u003d\u003d other) {\n+            return true;\n+        }\n+        if (other \u003d\u003d null) {\n+            return false;\n+        }\n \n-      if (this \u003d\u003d other) {\n-        return true;\n-      }\n+        try {\n+            @SuppressWarnings(\"unchecked\") // May fail, but we ignore ClassCastException\n+                FieldVector\u003cT\u003e rhs \u003d (FieldVector\u003cT\u003e) other;\n+            if (data.length !\u003d rhs.getDimension()) {\n+                return false;\n+            }\n \n-      if (other \u003d\u003d null) {\n-        return false;\n-      }\n-\n-      try {\n-          @SuppressWarnings(\"unchecked\") // May fail, but we ignore ClassCastException\n-          FieldVector\u003cT\u003e rhs \u003d (FieldVector\u003cT\u003e) other;\n-          if (data.length !\u003d rhs.getDimension()) {\n-              return false;\n-          }\n-\n-          for (int i \u003d 0; i \u003c data.length; ++i) {\n-              if (!data[i].equals(rhs.getEntry(i))) {\n-                  return false;\n-              }\n-          }\n-          return true;\n-\n-      } catch (ClassCastException ex) {\n-          // ignore exception\n-          return false;\n-      }\n-\n+            for (int i \u003d 0; i \u003c data.length; ++i) {\n+                if (!data[i].equals(rhs.getEntry(i))) {\n+                    return false;\n+                }\n+            }\n+            return true;\n+        } catch (ClassCastException ex) {\n+            // ignore exception\n+            return false;\n+        }\n     }\n \n     /**\n@@ -855,15 +887,14 @@\n \n     /**\n      * Check if an index is valid.\n-     * @param index index to check\n-     * @exception MatrixIndexException if index is not valid\n+     *\n+     * @param index Index to check.\n+     * @exception OutOfRangeException if the index is not valid.\n      */\n-    private void checkIndex(final int index)\n-        throws MatrixIndexException {\n+    private void checkIndex(final int index) {\n         if (index \u003c 0 || index \u003e\u003d getDimension()) {\n-            throw new MatrixIndexException(LocalizedFormats.INDEX_OUT_OF_RANGE,\n-                                           index, 0, getDimension() - 1);\n+            throw new OutOfRangeException(LocalizedFormats.INDEX,\n+                                          index, 0, getDimension() - 1);\n         }\n     }\n-\n }\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "ImportDeclaration [1014,1069]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ImportDeclaration [1070,1133]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ImportDeclaration [1134,1195]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ImportDeclaration [1196,1264]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ImportDeclaration [1265,1332]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Javadoc [8639,8899]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Javadoc [28204,28409]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [3573,3632]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [3640,3684]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [3791,3864]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [4276,4335]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [4451,4524]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TagElement [5337,5442]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [5450,5509]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [5517,5561]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [5742,5815]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TagElement [6046,6425]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TagElement [6537,6642]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [6650,6709]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [6853,6926]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [7191,7250]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [7258,7356]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [7429,7502]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [7869,7928]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [7993,8066]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [8364,8423]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [8493,8566]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TagElement [8736,8824]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [8832,8891]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [8975,9048]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [9368,9449]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [9544,9644]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [10117,10198]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [10277,10377]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [10835,10916]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [10995,11095]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [11857,11938]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [12125,12225]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [12234,12370]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [12869,12950]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [12958,13005]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [28215,28252]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [28316,28401]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [2234,2248]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: into this vector. [2382,2399]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [4808,4825]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [4847,4860]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement:  If  [5353,5357]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [5357,5369]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: , the input array will be copied, [5369,5402]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: otherwise it will be referenced. [5410,5442]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: If an array is built specially in order to be embedded in a [6142,6201]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: ArrayFieldVector and not used directly, the  [6209,6253]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [6253,6270]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement:  may be [6270,6277]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: set to  [6285,6292]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [6292,6305]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: . This will prevent the copying and improve [6305,6348]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: performance as no new array will be built and no data will be copied. [6356,6425]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement:  If  [6553,6557]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [6557,6569]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: , the input array will be copied, [6569,6602]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: otherwise it will be referenced. [6610,6642]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement:  If  [8747,8751]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [8751,8763]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement:  perform a deep copy, otherwise perform [8763,8802]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: a shallow copy [8810,8824]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ThrowStatement [5857,5937]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ThrowStatement [7552,7616]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ThrowStatement [13192,13272]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ThrowStatement [28129,28182]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ThrowStatement [4011,4091]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ImportDeclaration [1014,1066]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: \u003cp\u003e [3009,3012]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: \u003c/p\u003e [3305,3309]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [3346,3405]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [3517,3541]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ThrowStatement [3690,3827]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement:  if true, the input array will be copied, otherwise [4958,5009]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: it will be referenced [5017,5038]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TagElement [4942,5038]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [5046,5105]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [5113,5167]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [5353,5373]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [5375,5399]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ThrowStatement [5443,5576]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: \u003cp\u003eIf an array is built specially in order to be embedded in a [5781,5843]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: ArrayFieldVector and not used directly, the \u003ccode\u003ecopyArray\u003c/code\u003e may be [5851,5924]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: set to \u003ccode\u003efalse\u003c/code. This will prevent the copying and improve [5932,5999]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: performance as no new array will be built and no data will be copied.\u003c/p\u003e [6007,6080]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TagElement [5685,6080]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement:  if true, the input array will be copied, otherwise [6195,6246]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: it will be referenced [6254,6275]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TagElement [6179,6275]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ThrowStatement [6774,6947]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement:  if true perform a deep copy otherwise perform a shallow copy [7756,7817]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TagElement [7745,7817]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Javadoc [7656,7825]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement:  constructor. [9912,9925]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: \u003c/p\u003e [9933,9937]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Block [10284,10511]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "CatchClause [10512,10714]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TryStatement [10280,10714]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ThrowStatement [11182,11315]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [12130,12154]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [12602,12626]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [13123,13147]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [13292,13316]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [13779,13803]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [14306,14330]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [16873,16897]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [17374,17398]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [17985,18009]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [18171,18195]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [18666,18690]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [19265,19289]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [19753,19777]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [20210,20234]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [20760,20784]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [21655,21679]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [22551,22575]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [22708,22732]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [23165,23185]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [25993,26013]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [26550,26574]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [26923,26947]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ThrowStatement [26994,27150]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [27183,27741]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [27812,27983]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Javadoc [27172,27998]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [29250,29270]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/math/linear/ArrayRealVector.java",
        "src/main/java/org/apache/commons/math/linear/ArrayRealVector.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "checkVectorDimensions",
            "getLInfDistance",
            "ArrayRealVector",
            "ArrayRealVector",
            "getDistance",
            "isInfinite",
            "ArrayRealVector",
            "hashCode",
            "getL1Distance",
            "ArrayRealVector",
            "ArrayRealVector",
            "ArrayRealVector",
            "getEntry",
            "append",
            "ArrayRealVector",
            "isNaN",
            "getL1Distance",
            "unitize",
            "unitVector",
            "set",
            "checkVectorDimensions",
            "ArrayRealVector",
            "ArrayRealVector",
            "getLInfDistance",
            "ArrayRealVector",
            "equals",
            "projection",
            "dotProduct"
          ],
          "num": 28
        },
        {
          "qualified_names": [
            "ArrayRealVector",
            "getEntry",
            "projection",
            "getLInfDistance",
            "ArrayRealVector",
            "checkVectorDimensions",
            "equals",
            "getLInfDistance",
            "unitVector",
            "append",
            "getDistance",
            "ArrayRealVector",
            "getL1Distance",
            "ArrayRealVector",
            "ArrayRealVector",
            "hashCode",
            "dotProduct",
            "checkVectorDimensions",
            "isNaN",
            "ArrayRealVector",
            "getL1Distance",
            "ArrayRealVector",
            "unitize",
            "ArrayRealVector",
            "set",
            "isInfinite",
            "ArrayRealVector",
            "ArrayRealVector"
          ],
          "num": 28
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "23",
            "34",
            "37",
            "41",
            "47",
            "50",
            "52",
            "59",
            "60",
            "67",
            "68",
            "69",
            "78",
            "87",
            "88",
            "89",
            "90",
            "91",
            "92",
            "93",
            "102",
            "103",
            "104",
            "108",
            "109",
            "127",
            "128",
            "129",
            "130",
            "134",
            "135",
            "139",
            "145",
            "156",
            "164",
            "165",
            "714",
            "715",
            "716",
            "718",
            "719",
            "785",
            "787",
            "789",
            "790",
            "796",
            "797",
            "803",
            "804",
            "833",
            "835",
            "836",
            "837",
            "838",
            "844",
            "845",
            "851",
            "852",
            "881",
            "883",
            "884",
            "885",
            "886",
            "892",
            "893",
            "899",
            "902",
            "909",
            "912",
            "928",
            "929",
            "930",
            "931",
            "983",
            "1003",
            "1004",
            "1075",
            "1076",
            "1077",
            "1078",
            "1080",
            "1081",
            "1105",
            "1106",
            "1107",
            "1110",
            "1111",
            "1118",
            "1119",
            "1120",
            "1123",
            "1124",
            "1126",
            "1127",
            "1128",
            "1133",
            "1134",
            "1146",
            "1147",
            "1148",
            "1149",
            "1152",
            "1164",
            "1169",
            "1171",
            "1172",
            "1173",
            "1174",
            "1176",
            "1177",
            "1178",
            "1180",
            "1181",
            "1182",
            "1183",
            "1184",
            "1188",
            "1189",
            "1190",
            "1191",
            "1192",
            "1193",
            "1194",
            "1195",
            "1196",
            "1197",
            "1198",
            "1199",
            "1200",
            "1201",
            "1202",
            "1203",
            "1204",
            "1205",
            "1206",
            "1207",
            "1208",
            "1209",
            "1211",
            "1212",
            "1217",
            "1218",
            "1227"
          ],
          "num": 143
        },
        {
          "qualified_names": [
            "23",
            "24",
            "25",
            "26",
            "47",
            "50",
            "52",
            "59",
            "60",
            "61",
            "68",
            "69",
            "70",
            "71",
            "80",
            "81",
            "82",
            "91",
            "92",
            "93",
            "94",
            "95",
            "96",
            "97",
            "98",
            "99",
            "103",
            "104",
            "105",
            "111",
            "112",
            "113",
            "114",
            "115",
            "116",
            "117",
            "120",
            "121",
            "122",
            "124",
            "142",
            "143",
            "144",
            "145",
            "146",
            "147",
            "148",
            "149",
            "152",
            "153",
            "154",
            "156",
            "160",
            "166",
            "167",
            "168",
            "171",
            "172",
            "173",
            "182",
            "183",
            "184",
            "192",
            "193",
            "194",
            "195",
            "744",
            "745",
            "746",
            "747",
            "748",
            "750",
            "816",
            "818",
            "819",
            "821",
            "822",
            "823",
            "829",
            "835",
            "864",
            "866",
            "867",
            "868",
            "869",
            "870",
            "871",
            "877",
            "883",
            "912",
            "914",
            "915",
            "916",
            "917",
            "918",
            "924",
            "930",
            "933",
            "940",
            "943",
            "959",
            "960",
            "961",
            "962",
            "963",
            "964",
            "965",
            "1017",
            "1037",
            "1038",
            "1039",
            "1110",
            "1111",
            "1112",
            "1113",
            "1115",
            "1139",
            "1140",
            "1141",
            "1142",
            "1145",
            "1152",
            "1153",
            "1154",
            "1157",
            "1159",
            "1164",
            "1165",
            "1166",
            "1167",
            "1179",
            "1180",
            "1181",
            "1182",
            "1183",
            "1200",
            "1202",
            "1203",
            "1205",
            "1206",
            "1208",
            "1209",
            "1210",
            "1211",
            "1215",
            "1216",
            "1218",
            "1219",
            "1220",
            "1221",
            "1222",
            "1223",
            "1224",
            "1225",
            "1226",
            "1227",
            "1228",
            "1229",
            "1230",
            "1231",
            "1232",
            "1233",
            "1234",
            "1235",
            "1236",
            "1237",
            "1242",
            "1243",
            "1244"
          ],
          "num": 169
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/math/linear/ArrayRealVector.java b/src/main/java/org/apache/commons/math/linear/ArrayRealVector.java\nindex 903fc42..18f8da0 100644\n--- a/src/main/java/org/apache/commons/math/linear/ArrayRealVector.java\n+++ b/src/main/java/org/apache/commons/math/linear/ArrayRealVector.java\n@@ -20,7 +20,10 @@\n import java.util.Arrays;\n import java.util.Iterator;\n \n-import org.apache.commons.math.MathRuntimeException;\n+import org.apache.commons.math.exception.NullArgumentException;\n+import org.apache.commons.math.exception.DimensionMismatchException;\n+import org.apache.commons.math.exception.NumberIsTooLargeException;\n+import org.apache.commons.math.exception.MathArithmeticException;\n import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.util.MathUtils;\n import org.apache.commons.math.util.FastMath;\n@@ -31,42 +34,41 @@\n  * @since 2.0\n  */\n public class ArrayRealVector extends AbstractRealVector implements Serializable {\n-\n     /** Serializable version identifier. */\n     private static final long serialVersionUID \u003d -1097961340710804027L;\n-\n     /** Default format. */\n     private static final RealVectorFormat DEFAULT_FORMAT \u003d\n         RealVectorFormat.getInstance();\n-\n     /** Entries of the vector. */\n     protected double data[];\n \n     /**\n      * Build a 0-length vector.\n-     * \u003cp\u003eZero-length vectors may be used to initialized construction of vectors\n+     * Zero-length vectors may be used to initialized construction of vectors\n      * by data gathering. We start with zero-length and use either the {@link\n      * #ArrayRealVector(ArrayRealVector, ArrayRealVector)} constructor\n-     * or one of the \u003ccode\u003eappend\u003c/code\u003e method ({@link #append(double)}, {@link\n+     * or one of the {@code append} method ({@link #append(double)}, {@link\n      * #append(double[])}, {@link #append(ArrayRealVector)}) to gather data\n-     * into this vector.\u003c/p\u003e\n+     * into this vector.\n      */\n     public ArrayRealVector() {\n         data \u003d new double[0];\n     }\n \n     /**\n-     * Construct a (size)-length vector of zeros.\n-     * @param size size of the vector\n+     * Construct a vector of zeroes.\n+     *\n+     * @param size Size of the vector.\n      */\n     public ArrayRealVector(int size) {\n         data \u003d new double[size];\n     }\n \n     /**\n-     * Construct an (size)-length vector with preset values.\n-     * @param size size of the vector\n-     * @param preset fill the vector with this scalar value\n+     * Construct a vector with preset values.\n+     *\n+     * @param size Size of the vector\n+     * @param preset All entries will be set with this value.\n      */\n     public ArrayRealVector(int size, double preset) {\n         data \u003d new double[size];\n@@ -75,7 +77,9 @@\n \n     /**\n      * Construct a vector from an array, copying the input array.\n-     * @param d array of doubles.\n+     *\n+     * @param d Array.\n+     * @throws NullArgumentException if {@code d} is {@code null}.\n      */\n     public ArrayRealVector(double[] d) {\n         data \u003d d.clone();\n@@ -84,29 +88,40 @@\n     /**\n      * Create a new ArrayRealVector using the input array as the underlying\n      * data array.\n-     * \u003cp\u003eIf an array is built specially in order to be embedded in a\n-     * ArrayRealVector and not used directly, the \u003ccode\u003ecopyArray\u003c/code\u003e may be\n-     * set to \u003ccode\u003efalse\u003c/code. This will prevent the copying and improve\n-     * performance as no new array will be built and no data will be copied.\u003c/p\u003e\n-     * @param d data for new vector\n-     * @param copyArray if true, the input array will be copied, otherwise\n-     * it will be referenced\n+     * If an array is built specially in order to be embedded in a\n+     * ArrayRealVector and not used directly, the {@code copyArray} may be\n+     * set to {@code false}. This will prevent the copying and improve\n+     * performance as no new array will be built and no data will be copied.\n+     *\n+     * @param d Data for the new vector.\n+     * @param copyArray if {@code true}, the input array will be copied,\n+     * otherwise it will be referenced.\n+     * @throws NullArgumentException if {@code d} is {@code null}.\n      * @see #ArrayRealVector(double[])\n      */\n     public ArrayRealVector(double[] d, boolean copyArray) {\n+        if (d \u003d\u003d null) {\n+            throw new NullArgumentException();\n+        }\n         data \u003d copyArray ? d.clone() :  d;\n     }\n \n     /**\n      * Construct a vector from part of a array.\n-     * @param d array of doubles.\n-     * @param pos position of first entry\n-     * @param size number of entries to copy\n+     *\n+     * @param d Array.\n+     * @param pos Position of first entry.\n+     * @param size Number of entries to copy.\n+     * @throws NullArgumentException if {@code d} is {@code null}.\n+     * @throws NumberIsTooLargeException if the size of {@code d} is less\n+     * than {@code pos + size}.\n      */\n     public ArrayRealVector(double[] d, int pos, int size) {\n+        if (d \u003d\u003d null) {\n+            throw new NullArgumentException();\n+        }\n         if (d.length \u003c pos + size) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                  LocalizedFormats.POSITION_SIZE_MISMATCH_INPUT_ARRAY, pos, size, d.length);\n+            throw new NumberIsTooLargeException(pos + size, d.length, true);\n         }\n         data \u003d new double[size];\n         System.arraycopy(d, pos, data, 0, size);\n@@ -124,27 +139,38 @@\n     }\n \n     /**\n-     * Construct a vector from part of a Double array\n-     * @param d array of Doubles.\n-     * @param pos position of first entry\n-     * @param size number of entries to copy\n+     * Construct a vector from part of an array.\n+     *\n+     * @param d Array.\n+     * @param pos Position of first entry.\n+     * @param size Number of entries to copy.\n+     * @throws NullArgumentException if {@code d} is {@code null}.\n+     * @throws NumberIsTooLargeException if the size of {@code d} is less\n+     * than {@code pos + size}.\n      */\n     public ArrayRealVector(Double[] d, int pos, int size) {\n+        if (d \u003d\u003d null) {\n+            throw new NullArgumentException();\n+        }\n         if (d.length \u003c pos + size) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                  LocalizedFormats.POSITION_SIZE_MISMATCH_INPUT_ARRAY, pos, size, d.length);\n+            throw new NumberIsTooLargeException(pos + size, d.length, true);\n         }\n         data \u003d new double[size];\n         for (int i \u003d pos; i \u003c pos + size; i++) {\n-            data[i-pos] \u003d d[i].doubleValue();\n+            data[i - pos] \u003d d[i].doubleValue();\n         }\n     }\n \n     /**\n      * Construct a vector from another vector, using a deep copy.\n-     * @param v vector to copy\n+     *\n+     * @param v vector to copy.\n+     * @throws NullArgumentException if {@code v} is {@code null}.\n      */\n     public ArrayRealVector(RealVector v) {\n+        if (v \u003d\u003d null) {\n+            throw new NullArgumentException();\n+        }\n         data \u003d new double[v.getDimension()];\n         for (int i \u003d 0; i \u003c data.length; ++i) {\n             data[i] \u003d v.getEntry(i);\n@@ -153,7 +179,9 @@\n \n     /**\n      * Construct a vector from another vector, using a deep copy.\n-     * @param v vector to copy\n+     *\n+     * @param v Vector to copy.\n+     * @throws NullArgumentException if {@code v} is {@code null}.\n      */\n     public ArrayRealVector(ArrayRealVector v) {\n         this(v, true);\n@@ -161,8 +189,10 @@\n \n     /**\n      * Construct a vector from another vector.\n-     * @param v vector to copy\n-     * @param deep if true perform a deep copy otherwise perform a shallow copy\n+     *\n+     * @param v Vector to copy.\n+     * @param deep If {@code true} perform a deep copy, otherwise perform a\n+     * shallow copy.\n      */\n     public ArrayRealVector(ArrayRealVector v, boolean deep) {\n         data \u003d deep ? v.data.clone() : v.data;\n@@ -711,12 +741,13 @@\n \n     /**\n      * Compute the dot product.\n-     * @param v vector with which dot product should be computed\n-     * @return the scalar dot product between instance and v\n-     * @exception IllegalArgumentException if v is not the same size as this\n+     *\n+     * @param v Vector with which dot product should be computed\n+     * @return the scalar dot product between instance and {@code v}.\n+     * @throws DimensionMismatchException if {@code v} is not the same\n+     * size as this vector.\n      */\n-    public double dotProduct(ArrayRealVector v)\n-        throws IllegalArgumentException {\n+    public double dotProduct(ArrayRealVector v) {\n         return dotProduct(v.data);\n     }\n \n@@ -782,26 +813,26 @@\n \n    /**\n      * Distance between two vectors.\n-     * \u003cp\u003eThis method computes the distance consistent with the\n+     * This method computes the distance consistent with the\n      * L\u003csub\u003e2\u003c/sub\u003e norm, i.e. the square root of the sum of\n-     * elements differences, or euclidian distance.\u003c/p\u003e\n+     * elements differences, or euclidian distance.\n+     *\n      * @param v vector to which distance is requested\n-     * @return distance between two vectors.\n-     * @exception IllegalArgumentException if v is not the same size as this\n+     * @return the distance between two vectors.\n+     * @throws DimensionMismatchException if {@code v} is not the same size as\n+     * this vector.\n      * @see #getDistance(RealVector)\n      * @see #getL1Distance(ArrayRealVector)\n      * @see #getLInfDistance(ArrayRealVector)\n      * @see #getNorm()\n      */\n-    public double getDistance(ArrayRealVector v)\n-        throws IllegalArgumentException {\n+    public double getDistance(ArrayRealVector v) {\n         return getDistance(v.data);\n     }\n \n     /** {@inheritDoc} */\n     @Override\n-    public double getL1Distance(RealVector v)\n-        throws IllegalArgumentException {\n+    public double getL1Distance(RealVector v) {\n         if (v instanceof ArrayRealVector) {\n             return getL1Distance((ArrayRealVector) v);\n         } else {\n@@ -830,26 +861,26 @@\n \n     /**\n      * Distance between two vectors.\n-     * \u003cp\u003eThis method computes the distance consistent with\n+     * This method computes the distance consistent with\n      * L\u003csub\u003e1\u003c/sub\u003e norm, i.e. the sum of the absolute values of\n-     * elements differences.\u003c/p\u003e\n-     * @param v vector to which distance is requested\n-     * @return distance between two vectors.\n-     * @exception IllegalArgumentException if v is not the same size as this\n+     * elements differences.\n+     *\n+     * @param v Vector to which distance is requested.\n+     * @return the distance between two vectors.\n+     * @throws DimensionMismatchException if {@code v} is not the same size\n+     * as this vector.\n      * @see #getDistance(RealVector)\n      * @see #getL1Distance(ArrayRealVector)\n      * @see #getLInfDistance(ArrayRealVector)\n      * @see #getNorm()\n      */\n-    public double getL1Distance(ArrayRealVector v)\n-        throws IllegalArgumentException {\n+    public double getL1Distance(ArrayRealVector v) {\n         return getL1Distance(v.data);\n     }\n \n     /** {@inheritDoc} */\n     @Override\n-    public double getLInfDistance(RealVector v)\n-        throws IllegalArgumentException {\n+    public double getLInfDistance(RealVector v) {\n         if (v instanceof ArrayRealVector) {\n             return getLInfDistance((ArrayRealVector) v);\n         } else {\n@@ -878,38 +909,38 @@\n \n     /**\n      * Distance between two vectors.\n-     * \u003cp\u003eThis method computes the distance consistent with\n+     * This method computes the distance consistent with\n      * L\u003csub\u003e\u0026infin;\u003c/sub\u003e norm, i.e. the max of the absolute values of\n-     * elements differences.\u003c/p\u003e\n-     * @param v vector to which distance is requested\n-     * @return distance between two vectors.\n-     * @exception IllegalArgumentException if v is not the same size as this\n+     * elements differences.\n+     *\n+     * @param v Vector to which distance is requested.\n+     * @return the distance between two vectors.\n+     * @exception IllegalArgumentException if {@code v} is not the same size as this\n      * @see #getDistance(RealVector)\n      * @see #getL1Distance(ArrayRealVector)\n      * @see #getLInfDistance(ArrayRealVector)\n      * @see #getNorm()\n      */\n-    public double getLInfDistance(ArrayRealVector v)\n-        throws IllegalArgumentException {\n+    public double getLInfDistance(ArrayRealVector v) {\n         return getLInfDistance(v.data);\n     }\n \n     /** {@inheritDoc} */\n     @Override\n-    public RealVector unitVector() throws ArithmeticException {\n+    public RealVector unitVector() {\n         final double norm \u003d getNorm();\n         if (norm \u003d\u003d 0) {\n-            throw MathRuntimeException.createArithmeticException(LocalizedFormats.ZERO_NORM);\n+            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);\n         }\n         return mapDivide(norm);\n     }\n \n     /** {@inheritDoc} */\n     @Override\n-    public void unitize() throws ArithmeticException {\n+    public void unitize() {\n         final double norm \u003d getNorm();\n         if (norm \u003d\u003d 0) {\n-            throw MathRuntimeException.createArithmeticException(LocalizedFormats.CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR);\n+            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);\n         }\n         mapDivideToSelf(norm);\n     }\n@@ -925,10 +956,13 @@\n         return projection(new ArrayRealVector(v, false));\n     }\n \n-   /** Find the orthogonal projection of this vector onto another vector.\n-     * @param v vector onto which instance must be projected\n-     * @return projection of the instance onto v\n-     * @throws IllegalArgumentException if v is not the same size as this\n+    /**\n+     * Find the orthogonal projection of this vector onto another vector.\n+     *\n+     * @param v Vector onto which instance must be projected.\n+     * @return Projection of this instance onto {@code v}.\n+     * @throws DimensionMismatchException if {@code v} is not the same size as\n+     * this vector.\n      */\n     public ArrayRealVector projection(ArrayRealVector v) {\n         return (ArrayRealVector) v.mapMultiply(dotProduct(v) / v.dotProduct(v));\n@@ -980,7 +1014,7 @@\n     }\n \n     /** {@inheritDoc} */\n-    public double getEntry(int index) throws MatrixIndexException {\n+    public double getEntry(int index) {\n         return data[index];\n     }\n \n@@ -1000,8 +1034,9 @@\n \n     /**\n      * Construct a vector by appending a vector to this vector.\n-     * @param v vector to append to this one.\n-     * @return a new vector\n+     *\n+     * @param v Vector to append to this one.\n+     * @return a new vector.\n      */\n     public ArrayRealVector append(ArrayRealVector v) {\n         return new ArrayRealVector(this, v);\n@@ -1072,13 +1107,12 @@\n     /**\n      * Set a set of consecutive elements.\n      *\n-     * @param index index of first element to be set.\n-     * @param v vector containing the values to set.\n-     * @exception MatrixIndexException if the index is\n-     * inconsistent with vector size\n+     * @param index Index of first element to be set.\n+     * @param v Vector containing the values to set.\n+     * @throws org.apache.commons.math.exception.OutOfRangeException\n+     * if the index is inconsistent with vector size.\n      */\n-    public void set(int index, ArrayRealVector v)\n-        throws MatrixIndexException {\n+    public void set(int index, ArrayRealVector v) {\n         setSubVector(index, v.data);\n     }\n \n@@ -1102,36 +1136,35 @@\n \n     /**\n      * Check if instance and specified vectors have the same dimension.\n-     * @param v vector to compare instance with\n-     * @exception IllegalArgumentException if the vectors do not\n-     * have the same dimension\n+     *\n+     * @param v Vector to compare instance with.\n+     * @throws DimensionMismatchException if the vectors do not\n+     * have the same dimension.\n      */\n     @Override\n-    protected void checkVectorDimensions(RealVector v)\n-        throws IllegalArgumentException {\n+    protected void checkVectorDimensions(RealVector v) {\n         checkVectorDimensions(v.getDimension());\n     }\n \n     /**\n      * Check if instance dimension is equal to some expected value.\n      *\n-     * @param n expected dimension.\n-     * @exception IllegalArgumentException if the dimension is\n-     * inconsistent with vector size\n+     * @param n Expected dimension.\n+     * @throws DimensionMismatchException if the dimension is\n+     * inconsistent with vector size.\n      */\n     @Override\n-    protected void checkVectorDimensions(int n)\n-        throws IllegalArgumentException {\n+    protected void checkVectorDimensions(int n) {\n         if (data.length !\u003d n) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    LocalizedFormats.VECTOR_LENGTH_MISMATCH,\n-                    data.length, n);\n+            throw new DimensionMismatchException(data.length, n);\n         }\n     }\n \n     /**\n-     * Returns true if any coordinate of this vector is NaN; false otherwise\n-     * @return  true if any coordinate of this vector is NaN; false otherwise\n+     * Check if any coordinate of this vector is {@code NaN}.\n+     *\n+     * @return {@code true} if any coordinate of this vector is {@code NaN},\n+     * {@code false} otherwise.\n      */\n     public boolean isNaN() {\n         for (double v : data) {\n@@ -1143,13 +1176,13 @@\n     }\n \n     /**\n-     * Returns true if any coordinate of this vector is infinite and none are NaN;\n-     * false otherwise\n-     * @return  true if any coordinate of this vector is infinite and none are NaN;\n-     * false otherwise\n+     * Check whether any coordinate of this vector is infinite and none\n+     * are {@code NaN}.\n+     *\n+     * @return {@code true} if any coordinate of this vector is infinite and\n+     * none are {@code NaN}, {@code false} otherwise.\n      */\n     public boolean isInfinite() {\n-\n         if (isNaN()) {\n             return false;\n         }\n@@ -1161,61 +1194,54 @@\n         }\n \n         return false;\n-\n     }\n \n     /**\n      * Test for the equality of two real vectors.\n-     * \u003cp\u003e\n      * If all coordinates of two real vectors are exactly the same, and none are\n-     * \u003ccode\u003eDouble.NaN\u003c/code\u003e, the two real vectors are considered to be equal.\n-     * \u003c/p\u003e\n-     * \u003cp\u003e\n-     * \u003ccode\u003eNaN\u003c/code\u003e coordinates are considered to affect globally the vector\n+     * {@code NaN}, the two real vectors are considered to be equal.\n+     * {@code NaN} coordinates are considered to affect globally the vector\n      * and be equals to each other - i.e, if either (or all) coordinates of the\n-     * real vector are equal to \u003ccode\u003eDouble.NaN\u003c/code\u003e, the real vector is equal to\n-     * a vector with all \u003ccode\u003eDouble.NaN\u003c/code\u003e coordinates.\n-     * \u003c/p\u003e\n+     * real vector are equal to {@code NaN}, the real vector is equal to\n+     * a vector with all {@code NaN} coordinates.\n      *\n-     * @param other Object to test for equality to this\n-     * @return true if two vector objects are equal, false if\n-     *         object is null, not an instance of RealVector, or\n-     *         not equal to this RealVector instance\n-     *\n+     * @param other Object to test for equality.\n+     * @return {@code true} if two vector objects are equal, {@code false} if\n+     * {@code other} is null, not an instance of {@code RealVector}, or\n+     * not equal to this {@code RealVector} instance.\n      */\n     @Override\n     public boolean equals(Object other) {\n-\n-      if (this \u003d\u003d other) {\n-        return true;\n-      }\n-\n-      if (other \u003d\u003d null || !(other instanceof RealVector)) {\n-        return false;\n-      }\n-\n-\n-      RealVector rhs \u003d (RealVector) other;\n-      if (data.length !\u003d rhs.getDimension()) {\n-        return false;\n-      }\n-\n-      if (rhs.isNaN()) {\n-        return this.isNaN();\n-      }\n-\n-      for (int i \u003d 0; i \u003c data.length; ++i) {\n-        if (data[i] !\u003d rhs.getEntry(i)) {\n-          return false;\n+        if (this \u003d\u003d other) {\n+            return true;\n         }\n-      }\n-      return true;\n+\n+        if (other \u003d\u003d null || !(other instanceof RealVector)) {\n+            return false;\n+        }\n+\n+        RealVector rhs \u003d (RealVector) other;\n+        if (data.length !\u003d rhs.getDimension()) {\n+            return false;\n+        }\n+\n+        if (rhs.isNaN()) {\n+            return this.isNaN();\n+        }\n+\n+        for (int i \u003d 0; i \u003c data.length; ++i) {\n+            if (data[i] !\u003d rhs.getEntry(i)) {\n+                return false;\n+            }\n+        }\n+        return true;\n     }\n \n     /**\n      * Get a hashCode for the real vector.\n-     * \u003cp\u003eAll NaN values have the same hash code.\u003c/p\u003e\n-     * @return a hash code value for this object\n+     * All {@code NaN} values have the same hash code.\n+     *\n+     * @return a hash code.\n      */\n     @Override\n     public int hashCode() {\n@@ -1224,5 +1250,4 @@\n         }\n         return MathUtils.hash(data);\n     }\n-\n }\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "ImportDeclaration [926,989]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ImportDeclaration [990,1058]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ImportDeclaration [1059,1126]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ImportDeclaration [1127,1192]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Javadoc [3123,3786]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Javadoc [4967,5319]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Javadoc [22127,22411]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Javadoc [28578,28890]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [34594,34783]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [34966,35211]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Javadoc [35465,36215]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Javadoc [36819,36963]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [2977,3036]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TagElement [3134,3511]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TagElement [3567,3672]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [3680,3739]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [3855,3928]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [4161,4220]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [4228,4326]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [4403,4476]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [4978,5019]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [5146,5205]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [5213,5311]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [5388,5461]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [5853,5912]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [5972,6045]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [6313,6372]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [22242,22304]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [22312,22403]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [28732,28783]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [28791,28882]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TagElement [35476,35947]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [36011,36207]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TagElement [36830,36920]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [36935,36955]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [2158,2172]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: into this vector. [2296,2313]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: If an array is built specially in order to be embedded in a [3229,3288]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: ArrayRealVector and not used directly, the  [3296,3339]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [3339,3356]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement:  may be [3356,3363]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: set to  [3371,3378]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [3378,3391]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: . This will prevent the copying and improve [3391,3434]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: performance as no new array will be built and no data will be copied. [3442,3511]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement:  if  [3583,3587]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [3587,3599]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: , the input array will be copied, [3599,3632]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: otherwise it will be referenced. [3640,3672]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [6575,6587]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement:  perform a deep copy, otherwise perform a [6587,6628]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: shallow copy. [6636,6649]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [24399,24408]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement:  is not the same size as [24408,24432]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: this vector. [24440,24452]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [25904,25913]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement:  is not the same size [25913,25934]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: as this vector. [25942,25957]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [27462,27471]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement:  is not the same size as this [27471,27500]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "QualifiedName: org.apache.commons.math.exception.OutOfRangeException [33263,33316]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [35607,35618]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: , the two real vectors are considered to be equal. [35618,35668]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [35676,35687]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement:  coordinates are considered to affect globally the vector [35687,35744]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: real vector are equal to  [35832,35857]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [35857,35868]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: , the real vector is equal to [35868,35897]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: a vector with all  [35905,35923]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [35923,35934]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement:  coordinates. [35934,35947]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: All  [36873,36877]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [36877,36888]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement:  values have the same hash code. [36888,36920]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ThrowStatement [4526,4590]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ThrowStatement [5511,5575]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ThrowStatement [27913,27975]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ThrowStatement [28168,28230]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ThrowStatement [34519,34572]"
        },
        {
          "type": "delete-tree",
          "from": "ImportDeclaration [926,978]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: \u003cp\u003eIf an array is built specially in order to be embedded in a [2978,3040]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: ArrayRealVector and not used directly, the \u003ccode\u003ecopyArray\u003c/code\u003e may be [3048,3120]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: set to \u003ccode\u003efalse\u003c/code. This will prevent the copying and improve [3128,3195]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: performance as no new array will be built and no data will be copied.\u003c/p\u003e [3203,3276]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TagElement [2883,3276]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement:  if true, the input array will be copied, otherwise [3336,3387]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: it will be referenced [3395,3416]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TagElement [3320,3416]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Javadoc [2872,3463]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ThrowStatement [3868,4019]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [4407,4453]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Javadoc [4396,4582]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ThrowStatement [4692,4843]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [21244,21297]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [21305,21374]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Javadoc [21136,21382]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [21446,21470]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [23660,23684]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [23830,23854]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [25220,25244]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [25394,25418]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [26832,26856]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [26987,27006]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ThrowStatement [27085,27166]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [27288,27307]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ThrowStatement [27386,27493]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [27979,28020]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [28028,28094]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Javadoc [27840,28102]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [29837,29857]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: MatrixIndexException [32498,32518]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: inconsistent with vector size [32542,32571]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [32645,32665]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [33370,33394]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [33757,33781]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ThrowStatement [33828,33984]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "Javadoc [34006,34172]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "Javadoc [34355,34579]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: \u003cp\u003e [34896,34899]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: \u003ccode\u003eDouble.NaN\u003c/code\u003e, the two real vectors are considered to be equal. [34988,35061]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: \u003c/p\u003e [35069,35073]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: \u003cp\u003e [35081,35084]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: \u003ccode\u003eNaN\u003c/code\u003e coordinates are considered to affect globally the vector [35092,35165]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: real vector are equal to \u003ccode\u003eDouble.NaN\u003c/code\u003e, the real vector is equal to [35253,35330]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: a vector with all \u003ccode\u003eDouble.NaN\u003c/code\u003e coordinates. [35338,35392]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: \u003c/p\u003e [35400,35404]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TagElement [34846,35404]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [35475,35647]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Javadoc [34835,35662]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: \u003cp\u003eAll NaN values have the same hash code.\u003c/p\u003e [36268,36314]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TagElement [36225,36314]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [36322,36363]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Javadoc [36214,36371]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java",
        "src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "subtract",
            "getSubMatrix",
            "setRow",
            "getColumnVector",
            "scalarAdd",
            "walkInRowOrder",
            "scalarMultiply",
            "multiply",
            "walkInRowOrder",
            "multiply",
            "setColumnMatrix",
            "transpose",
            "operate",
            "BlockRealMatrix",
            "createMatrix",
            "add",
            "getData",
            "subtract",
            "walkInRowOrder",
            "setEntry",
            "walkInOptimizedOrder",
            "toBlocksLayout",
            "add",
            "getColumnMatrix",
            "walkInOptimizedOrder",
            "walkInOptimizedOrder",
            "BlockRealMatrix",
            "copy",
            "createBlocksLayout",
            "setRowMatrix",
            "walkInRowOrder",
            "setSubMatrix",
            "multiplyEntry",
            "setColumn",
            "preMultiply",
            "getRowMatrix",
            "getRowVector",
            "walkInOptimizedOrder",
            "addToEntry",
            "getColumn",
            "getEntry",
            "getRow"
          ],
          "num": 42
        },
        {
          "qualified_names": [
            "scalarAdd",
            "setColumn",
            "walkInOptimizedOrder",
            "subtract",
            "BlockRealMatrix",
            "getData",
            "setSubMatrix",
            "multiply",
            "setEntry",
            "walkInRowOrder",
            "getSubMatrix",
            "getColumn",
            "multiplyEntry",
            "add",
            "walkInRowOrder",
            "getRow",
            "operate",
            "getEntry",
            "walkInOptimizedOrder",
            "createBlocksLayout",
            "transpose",
            "setColumnMatrix",
            "preMultiply",
            "addToEntry",
            "BlockRealMatrix",
            "getColumnMatrix",
            "getRowVector",
            "getRowMatrix",
            "createMatrix",
            "walkInRowOrder",
            "walkInOptimizedOrder",
            "getColumnVector",
            "toBlocksLayout",
            "walkInRowOrder",
            "walkInOptimizedOrder",
            "add",
            "multiply",
            "setRowMatrix",
            "scalarMultiply",
            "setRow",
            "subtract"
          ],
          "num": 41
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "69",
            "72",
            "75",
            "78",
            "81",
            "84",
            "87",
            "97",
            "99",
            "100",
            "101",
            "103",
            "107",
            "112",
            "149",
            "150",
            "151",
            "153",
            "157",
            "205",
            "206",
            "207",
            "208",
            "209",
            "210",
            "225",
            "226",
            "230",
            "243",
            "245",
            "265",
            "266",
            "272",
            "273",
            "277",
            "289",
            "290",
            "297",
            "311",
            "312",
            "316",
            "330",
            "331",
            "332",
            "333",
            "341",
            "344",
            "353",
            "355",
            "356",
            "357",
            "359",
            "360",
            "361",
            "370",
            "371",
            "382",
            "383",
            "387",
            "400",
            "401",
            "402",
            "403",
            "404",
            "412",
            "415",
            "424",
            "426",
            "427",
            "428",
            "430",
            "431",
            "432",
            "441",
            "442",
            "453",
            "454",
            "461",
            "472",
            "473",
            "474",
            "480",
            "491",
            "492",
            "496",
            "505",
            "507",
            "510",
            "512",
            "519",
            "521",
            "525",
            "538",
            "541",
            "550",
            "552",
            "553",
            "554",
            "555",
            "557",
            "558",
            "569",
            "588",
            "610",
            "613",
            "623",
            "629",
            "630",
            "631",
            "635",
            "690",
            "691",
            "692",
            "701",
            "702",
            "704",
            "715",
            "717",
            "718",
            "721",
            "775",
            "777",
            "779",
            "781",
            "819",
            "820",
            "821",
            "827",
            "837",
            "838",
            "840",
            "844",
            "846",
            "847",
            "850",
            "852",
            "853",
            "854",
            "870",
            "871",
            "872",
            "877",
            "878",
            "880",
            "883",
            "885",
            "917",
            "918",
            "919",
            "933",
            "934",
            "935",
            "936",
            "938",
            "955",
            "956",
            "957",
            "962",
            "964",
            "966",
            "1000",
            "1001",
            "1002",
            "1015",
            "1017",
            "1019",
            "1036",
            "1037",
            "1038",
            "1043",
            "1044",
            "1045",
            "1047",
            "1068",
            "1069",
            "1070",
            "1075",
            "1077",
            "1078",
            "1102",
            "1103",
            "1104",
            "1109",
            "1110",
            "1111",
            "1132",
            "1133",
            "1134",
            "1145",
            "1146",
            "1147",
            "1155",
            "1179",
            "1180",
            "1192",
            "1193",
            "1194",
            "1195",
            "1196",
            "1197",
            "1198",
            "1199",
            "1200",
            "1201",
            "1202",
            "1203",
            "1204",
            "1209",
            "1210",
            "1211",
            "1212",
            "1213",
            "1214",
            "1215",
            "1216",
            "1217",
            "1218",
            "1219",
            "1220",
            "1221",
            "1226",
            "1227",
            "1228",
            "1229",
            "1230",
            "1231",
            "1232",
            "1233",
            "1234",
            "1235",
            "1236",
            "1237",
            "1238",
            "1243",
            "1244",
            "1245",
            "1246",
            "1247",
            "1248",
            "1249",
            "1250",
            "1251",
            "1252",
            "1253",
            "1254",
            "1255",
            "1261",
            "1270",
            "1273",
            "1274",
            "1275",
            "1276",
            "1277",
            "1288",
            "1291",
            "1312",
            "1313",
            "1314",
            "1323",
            "1326",
            "1327",
            "1353",
            "1354",
            "1355",
            "1368",
            "1371",
            "1372",
            "1404",
            "1409",
            "1429",
            "1434",
            "1452",
            "1456",
            "1458",
            "1462",
            "1464",
            "1482",
            "1486",
            "1488",
            "1492",
            "1494",
            "1515",
            "1518",
            "1541",
            "1544",
            "1564",
            "1568",
            "1570",
            "1573",
            "1575",
            "1594",
            "1598",
            "1600",
            "1603",
            "1605"
          ],
          "num": 295
        },
        {
          "qualified_names": [
            "68",
            "90",
            "92",
            "94",
            "98",
            "139",
            "141",
            "145",
            "193",
            "194",
            "195",
            "196",
            "211",
            "212",
            "216",
            "249",
            "255",
            "256",
            "260",
            "272",
            "292",
            "309",
            "310",
            "311",
            "312",
            "330",
            "332",
            "333",
            "334",
            "335",
            "337",
            "346",
            "347",
            "358",
            "361",
            "374",
            "375",
            "376",
            "377",
            "378",
            "396",
            "398",
            "399",
            "400",
            "401",
            "403",
            "412",
            "413",
            "424",
            "431",
            "437",
            "442",
            "448",
            "459",
            "472",
            "476",
            "483",
            "485",
            "489",
            "512",
            "514",
            "515",
            "516",
            "517",
            "519",
            "530",
            "549",
            "573",
            "587",
            "588",
            "589",
            "593",
            "648",
            "657",
            "658",
            "660",
            "671",
            "673",
            "674",
            "677",
            "771",
            "777",
            "787",
            "788",
            "790",
            "794",
            "796",
            "797",
            "800",
            "802",
            "803",
            "804",
            "818",
            "820",
            "825",
            "826",
            "828",
            "831",
            "833",
            "865",
            "866",
            "867",
            "868",
            "882",
            "883",
            "884",
            "885",
            "887",
            "904",
            "909",
            "911",
            "913",
            "947",
            "948",
            "949",
            "950",
            "963",
            "965",
            "967",
            "984",
            "989",
            "990",
            "991",
            "993",
            "1014",
            "1019",
            "1021",
            "1022",
            "1046",
            "1051",
            "1052",
            "1053",
            "1074",
            "1075",
            "1076",
            "1087",
            "1095",
            "1119",
            "1120",
            "1132",
            "1133",
            "1134",
            "1135",
            "1136",
            "1137",
            "1138",
            "1143",
            "1144",
            "1145",
            "1146",
            "1147",
            "1148",
            "1149",
            "1154",
            "1155",
            "1156",
            "1157",
            "1158",
            "1159",
            "1160",
            "1165",
            "1166",
            "1167",
            "1168",
            "1169",
            "1170",
            "1171",
            "1187",
            "1188",
            "1189",
            "1190",
            "1191",
            "1224",
            "1233",
            "1236",
            "1237",
            "1263",
            "1276",
            "1279",
            "1280",
            "1312",
            "1317",
            "1337",
            "1342",
            "1360",
            "1364",
            "1366",
            "1370",
            "1372",
            "1373",
            "1390",
            "1394",
            "1396",
            "1400",
            "1402",
            "1423",
            "1426",
            "1449",
            "1452",
            "1472",
            "1476",
            "1478",
            "1481",
            "1483",
            "1502",
            "1506",
            "1508",
            "1511",
            "1513"
          ],
          "num": 209
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java b/src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java\nindex 882d9e4..7d97358 100644\n--- a/src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java\n+++ b/src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java\n@@ -66,25 +66,18 @@\n  * @since 2.0\n  */\n public class BlockRealMatrix extends AbstractRealMatrix implements Serializable {\n-\n     /** Block size. */\n     public static final int BLOCK_SIZE \u003d 52;\n-\n     /** Serializable version identifier */\n     private static final long serialVersionUID \u003d 4991895511313664478L;\n-\n     /** Blocks of matrix entries. */\n     private final double blocks[][];\n-\n     /** Number of rows of the matrix. */\n     private final int rows;\n-\n     /** Number of columns of the matrix. */\n     private final int columns;\n-\n     /** Number of block rows of the matrix. */\n     private final int blockRows;\n-\n     /** Number of block columns of the matrix. */\n     private final int blockColumns;\n \n@@ -94,22 +87,19 @@\n      * @param rows  the number of rows in the new matrix\n      * @param columns  the number of columns in the new matrix\n      * @throws IllegalArgumentException if row or column dimension is not\n-     *  positive\n+     * positive.\n      */\n-    public BlockRealMatrix(final int rows, final int columns)\n-        throws IllegalArgumentException {\n-\n+    public BlockRealMatrix(final int rows, final int columns) {\n         super(rows, columns);\n-        this.rows    \u003d rows;\n+        this.rows \u003d rows;\n         this.columns \u003d columns;\n \n         // number of blocks\n-        blockRows    \u003d (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;\n+        blockRows \u003d (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;\n         blockColumns \u003d (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;\n \n         // allocate storage blocks, taking care of smaller ones at right and bottom\n         blocks \u003d createBlocksLayout(rows, columns);\n-\n     }\n \n     /**\n@@ -146,15 +136,13 @@\n      * @see #BlockRealMatrix(double[][])\n      */\n     public BlockRealMatrix(final int rows, final int columns,\n-                           final double[][] blockData, final boolean copyArray)\n-        throws IllegalArgumentException {\n-\n+                           final double[][] blockData, final boolean copyArray) {\n         super(rows, columns);\n-        this.rows    \u003d rows;\n+        this.rows \u003d rows;\n         this.columns \u003d columns;\n \n         // number of blocks\n-        blockRows    \u003d (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;\n+        blockRows \u003d (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;\n         blockColumns \u003d (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;\n \n         if (copyArray) {\n@@ -202,12 +190,10 @@\n      * @see #createBlocksLayout(int, int)\n      * @see #BlockRealMatrix(int, int, double[][], boolean)\n      */\n-    public static double[][] toBlocksLayout(final double[][] rawData)\n-        throws IllegalArgumentException {\n-\n-        final int rows         \u003d rawData.length;\n-        final int columns      \u003d rawData[0].length;\n-        final int blockRows    \u003d (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;\n+    public static double[][] toBlocksLayout(final double[][] rawData) {\n+        final int rows \u003d rawData.length;\n+        final int columns \u003d rawData[0].length;\n+        final int blockRows \u003d (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;\n         final int blockColumns \u003d (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;\n \n         // safety checks\n@@ -222,12 +208,12 @@\n         final double[][] blocks \u003d new double[blockRows * blockColumns][];\n         int blockIndex \u003d 0;\n         for (int iBlock \u003d 0; iBlock \u003c blockRows; ++iBlock) {\n-            final int pStart  \u003d iBlock * BLOCK_SIZE;\n-            final int pEnd    \u003d FastMath.min(pStart + BLOCK_SIZE, rows);\n+            final int pStart \u003d iBlock * BLOCK_SIZE;\n+            final int pEnd \u003d FastMath.min(pStart + BLOCK_SIZE, rows);\n             final int iHeight \u003d pEnd - pStart;\n             for (int jBlock \u003d 0; jBlock \u003c blockColumns; ++jBlock) {\n                 final int qStart \u003d jBlock * BLOCK_SIZE;\n-                final int qEnd   \u003d FastMath.min(qStart + BLOCK_SIZE, columns);\n+                final int qEnd \u003d FastMath.min(qStart + BLOCK_SIZE, columns);\n                 final int jWidth \u003d qEnd - qStart;\n \n                 // allocate new block\n@@ -240,9 +226,7 @@\n                     System.arraycopy(rawData[p], qStart, block, index, jWidth);\n                     index +\u003d jWidth;\n                 }\n-\n                 ++blockIndex;\n-\n             }\n         }\n \n@@ -262,19 +246,18 @@\n      * @see #BlockRealMatrix(int, int, double[][], boolean)\n      */\n     public static double[][] createBlocksLayout(final int rows, final int columns) {\n-\n-        final int blockRows    \u003d (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;\n+        final int blockRows \u003d (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;\n         final int blockColumns \u003d (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;\n \n         final double[][] blocks \u003d new double[blockRows * blockColumns][];\n         int blockIndex \u003d 0;\n         for (int iBlock \u003d 0; iBlock \u003c blockRows; ++iBlock) {\n-            final int pStart  \u003d iBlock * BLOCK_SIZE;\n-            final int pEnd    \u003d FastMath.min(pStart + BLOCK_SIZE, rows);\n+            final int pStart \u003d iBlock * BLOCK_SIZE;\n+            final int pEnd \u003d FastMath.min(pStart + BLOCK_SIZE, rows);\n             final int iHeight \u003d pEnd - pStart;\n             for (int jBlock \u003d 0; jBlock \u003c blockColumns; ++jBlock) {\n                 final int qStart \u003d jBlock * BLOCK_SIZE;\n-                final int qEnd   \u003d FastMath.min(qStart + BLOCK_SIZE, columns);\n+                final int qEnd \u003d FastMath.min(qStart + BLOCK_SIZE, columns);\n                 final int jWidth \u003d qEnd - qStart;\n                 blocks[blockIndex] \u003d new double[iHeight * jWidth];\n                 ++blockIndex;\n@@ -286,15 +269,13 @@\n \n     /** {@inheritDoc} */\n     @Override\n-    public BlockRealMatrix createMatrix(final int rowDimension, final int columnDimension)\n-        throws IllegalArgumentException {\n+    public BlockRealMatrix createMatrix(final int rowDimension, final int columnDimension) {\n         return new BlockRealMatrix(rowDimension, columnDimension);\n     }\n \n     /** {@inheritDoc} */\n     @Override\n     public BlockRealMatrix copy() {\n-\n         // create an empty matrix\n         BlockRealMatrix copied \u003d new BlockRealMatrix(rows, columns);\n \n@@ -308,12 +289,10 @@\n \n     /** {@inheritDoc} */\n     @Override\n-    public BlockRealMatrix add(final RealMatrix m)\n-        throws IllegalArgumentException {\n+    public BlockRealMatrix add(final RealMatrix m) {\n         try {\n             return add((BlockRealMatrix) m);\n         } catch (ClassCastException cce) {\n-\n             // safety check\n             MatrixUtils.checkAdditionCompatible(this, m);\n \n@@ -327,10 +306,10 @@\n                     // perform addition on the current block\n                     final double[] outBlock \u003d out.blocks[blockIndex];\n                     final double[] tBlock   \u003d blocks[blockIndex];\n-                    final int      pStart   \u003d iBlock * BLOCK_SIZE;\n-                    final int      pEnd     \u003d FastMath.min(pStart + BLOCK_SIZE, rows);\n-                    final int      qStart   \u003d jBlock * BLOCK_SIZE;\n-                    final int      qEnd     \u003d FastMath.min(qStart + BLOCK_SIZE, columns);\n+                    final int pStart \u003d iBlock * BLOCK_SIZE;\n+                    final int pEnd \u003d FastMath.min(pStart + BLOCK_SIZE, rows);\n+                    final int qStart \u003d jBlock * BLOCK_SIZE;\n+                    final int qEnd \u003d FastMath.min(qStart + BLOCK_SIZE, columns);\n                     int k \u003d 0;\n                     for (int p \u003d pStart; p \u003c pEnd; ++p) {\n                         for (int q \u003d qStart; q \u003c qEnd; ++q) {\n@@ -338,10 +317,8 @@\n                             ++k;\n                         }\n                     }\n-\n                     // go to next block\n                     ++blockIndex;\n-\n                 }\n             }\n \n@@ -350,15 +327,14 @@\n     }\n \n     /**\n-     * Compute the sum of this and \u003ccode\u003em\u003c/code\u003e.\n+     * Compute the sum of this matrix and {@code m}.\n      *\n-     * @param m    matrix to be added\n-     * @return     this + m\n-     * @throws  IllegalArgumentException if m is not the same size as this\n+     * @param m Matrix to be added.\n+     * @return {@code this} + m.\n+     * @throws MatrixDimensionMismatchException if {@code m} is not the same\n+     * size as this matrix.\n      */\n-    public BlockRealMatrix add(final BlockRealMatrix m)\n-        throws IllegalArgumentException {\n-\n+    public BlockRealMatrix add(final BlockRealMatrix m) {\n         // safety check\n         MatrixUtils.checkAdditionCompatible(this, m);\n \n@@ -367,8 +343,8 @@\n         // perform addition block-wise, to ensure good cache behavior\n         for (int blockIndex \u003d 0; blockIndex \u003c out.blocks.length; ++blockIndex) {\n             final double[] outBlock \u003d out.blocks[blockIndex];\n-            final double[] tBlock   \u003d blocks[blockIndex];\n-            final double[] mBlock   \u003d m.blocks[blockIndex];\n+            final double[] tBlock \u003d blocks[blockIndex];\n+            final double[] mBlock \u003d m.blocks[blockIndex];\n             for (int k \u003d 0; k \u003c outBlock.length; ++k) {\n                 outBlock[k] \u003d tBlock[k] + mBlock[k];\n             }\n@@ -379,12 +355,10 @@\n \n     /** {@inheritDoc} */\n     @Override\n-    public BlockRealMatrix subtract(final RealMatrix m)\n-        throws IllegalArgumentException {\n+    public BlockRealMatrix subtract(final RealMatrix m) {\n         try {\n             return subtract((BlockRealMatrix) m);\n         } catch (ClassCastException cce) {\n-\n             // safety check\n             MatrixUtils.checkSubtractionCompatible(this, m);\n \n@@ -397,11 +371,11 @@\n \n                     // perform subtraction on the current block\n                     final double[] outBlock \u003d out.blocks[blockIndex];\n-                    final double[] tBlock   \u003d blocks[blockIndex];\n-                    final int      pStart   \u003d iBlock * BLOCK_SIZE;\n-                    final int      pEnd     \u003d FastMath.min(pStart + BLOCK_SIZE, rows);\n-                    final int      qStart   \u003d jBlock * BLOCK_SIZE;\n-                    final int      qEnd     \u003d FastMath.min(qStart + BLOCK_SIZE, columns);\n+                    final double[] tBlock \u003d blocks[blockIndex];\n+                    final int pStart \u003d iBlock * BLOCK_SIZE;\n+                    final int pEnd \u003d FastMath.min(pStart + BLOCK_SIZE, rows);\n+                    final int qStart \u003d jBlock * BLOCK_SIZE;\n+                    final int qEnd \u003d FastMath.min(qStart + BLOCK_SIZE, columns);\n                     int k \u003d 0;\n                     for (int p \u003d pStart; p \u003c pEnd; ++p) {\n                         for (int q \u003d qStart; q \u003c qEnd; ++q) {\n@@ -409,10 +383,8 @@\n                             ++k;\n                         }\n                     }\n-\n                     // go to next block\n                     ++blockIndex;\n-\n                 }\n             }\n \n@@ -421,15 +393,14 @@\n     }\n \n     /**\n-     * Compute this minus \u003ccode\u003em\u003c/code\u003e.\n+     * Subtract {@code m} from this matrix.\n      *\n-     * @param m    matrix to be subtracted\n-     * @return     this - m\n-     * @throws  IllegalArgumentException if m is not the same size as this\n+     * @param m Matrix to be subtracted.\n+     * @return {@code this} - m.\n+     * @throws MatrixDimensionMismatchException if {@code m} is not the\n+     * same size as this matrix.\n      */\n-    public BlockRealMatrix subtract(final BlockRealMatrix m)\n-        throws IllegalArgumentException {\n-\n+    public BlockRealMatrix subtract(final BlockRealMatrix m) {\n         // safety check\n         MatrixUtils.checkSubtractionCompatible(this, m);\n \n@@ -438,8 +409,8 @@\n         // perform subtraction block-wise, to ensure good cache behavior\n         for (int blockIndex \u003d 0; blockIndex \u003c out.blocks.length; ++blockIndex) {\n             final double[] outBlock \u003d out.blocks[blockIndex];\n-            final double[] tBlock   \u003d blocks[blockIndex];\n-            final double[] mBlock   \u003d m.blocks[blockIndex];\n+            final double[] tBlock \u003d blocks[blockIndex];\n+            final double[] mBlock \u003d m.blocks[blockIndex];\n             for (int k \u003d 0; k \u003c outBlock.length; ++k) {\n                 outBlock[k] \u003d tBlock[k] - mBlock[k];\n             }\n@@ -450,15 +421,14 @@\n \n     /** {@inheritDoc} */\n     @Override\n-    public BlockRealMatrix scalarAdd(final double d)\n-        throws IllegalArgumentException {\n+    public BlockRealMatrix scalarAdd(final double d) {\n \n         final BlockRealMatrix out \u003d new BlockRealMatrix(rows, columns);\n \n         // perform subtraction block-wise, to ensure good cache behavior\n         for (int blockIndex \u003d 0; blockIndex \u003c out.blocks.length; ++blockIndex) {\n             final double[] outBlock \u003d out.blocks[blockIndex];\n-            final double[] tBlock   \u003d blocks[blockIndex];\n+            final double[] tBlock \u003d blocks[blockIndex];\n             for (int k \u003d 0; k \u003c outBlock.length; ++k) {\n                 outBlock[k] \u003d tBlock[k] + d;\n             }\n@@ -469,15 +439,13 @@\n \n     /** {@inheritDoc} */\n     @Override\n-    public RealMatrix scalarMultiply(final double d)\n-        throws IllegalArgumentException {\n-\n+    public RealMatrix scalarMultiply(final double d) {\n         final BlockRealMatrix out \u003d new BlockRealMatrix(rows, columns);\n \n         // perform subtraction block-wise, to ensure good cache behavior\n         for (int blockIndex \u003d 0; blockIndex \u003c out.blocks.length; ++blockIndex) {\n             final double[] outBlock \u003d out.blocks[blockIndex];\n-            final double[] tBlock   \u003d blocks[blockIndex];\n+            final double[] tBlock \u003d blocks[blockIndex];\n             for (int k \u003d 0; k \u003c outBlock.length; ++k) {\n                 outBlock[k] \u003d tBlock[k] * d;\n             }\n@@ -488,12 +456,10 @@\n \n     /** {@inheritDoc} */\n     @Override\n-    public BlockRealMatrix multiply(final RealMatrix m)\n-        throws IllegalArgumentException {\n+    public BlockRealMatrix multiply(final RealMatrix m) {\n         try {\n             return multiply((BlockRealMatrix) m);\n         } catch (ClassCastException cce) {\n-\n             // safety check\n             MatrixUtils.checkMultiplicationCompatible(this, m);\n \n@@ -502,27 +468,25 @@\n             // perform multiplication block-wise, to ensure good cache behavior\n             int blockIndex \u003d 0;\n             for (int iBlock \u003d 0; iBlock \u003c out.blockRows; ++iBlock) {\n-\n                 final int pStart \u003d iBlock * BLOCK_SIZE;\n-                final int pEnd   \u003d FastMath.min(pStart + BLOCK_SIZE, rows);\n+                final int pEnd \u003d FastMath.min(pStart + BLOCK_SIZE, rows);\n \n                 for (int jBlock \u003d 0; jBlock \u003c out.blockColumns; ++jBlock) {\n-\n                     final int qStart \u003d jBlock * BLOCK_SIZE;\n-                    final int qEnd   \u003d FastMath.min(qStart + BLOCK_SIZE, m.getColumnDimension());\n+                    final int qEnd \u003d FastMath.min(qStart + BLOCK_SIZE, m.getColumnDimension());\n \n                     // select current block\n                     final double[] outBlock \u003d out.blocks[blockIndex];\n \n                     // perform multiplication on current block\n                     for (int kBlock \u003d 0; kBlock \u003c blockColumns; ++kBlock) {\n-                        final int kWidth      \u003d blockWidth(kBlock);\n+                        final int kWidth \u003d blockWidth(kBlock);\n                         final double[] tBlock \u003d blocks[iBlock * blockColumns + kBlock];\n-                        final int rStart      \u003d kBlock * BLOCK_SIZE;\n+                        final int rStart \u003d kBlock * BLOCK_SIZE;\n                         int k \u003d 0;\n                         for (int p \u003d pStart; p \u003c pEnd; ++p) {\n                             final int lStart \u003d (p - pStart) * kWidth;\n-                            final int lEnd   \u003d lStart + kWidth;\n+                            final int lEnd \u003d lStart + kWidth;\n                             for (int q \u003d qStart; q \u003c qEnd; ++q) {\n                                 double sum \u003d 0;\n                                 int r \u003d rStart;\n@@ -535,10 +499,8 @@\n                             }\n                         }\n                     }\n-\n                     // go to next block\n                     ++blockIndex;\n-\n                 }\n             }\n \n@@ -547,15 +509,14 @@\n     }\n \n     /**\n-     * Returns the result of postmultiplying this by m.\n+     * Returns the result of postmultiplying this by {@code m}.\n      *\n-     * @param m    matrix to postmultiply by\n-     * @return     this * m\n-     * @throws     IllegalArgumentException\n-     *             if columnDimension(this) !\u003d rowDimension(m)\n+     * @param m Matrix to postmultiply by.\n+     * @return {@code this} * m.\n+     * @throws MatrixDimensionMismatchException if the matrices are not\n+     * compatible.\n      */\n-    public BlockRealMatrix multiply(BlockRealMatrix m) throws IllegalArgumentException {\n-\n+    public BlockRealMatrix multiply(BlockRealMatrix m) {\n         // safety check\n         MatrixUtils.checkMultiplicationCompatible(this, m);\n \n@@ -566,7 +527,7 @@\n         for (int iBlock \u003d 0; iBlock \u003c out.blockRows; ++iBlock) {\n \n             final int pStart \u003d iBlock * BLOCK_SIZE;\n-            final int pEnd   \u003d FastMath.min(pStart + BLOCK_SIZE, rows);\n+            final int pEnd \u003d FastMath.min(pStart + BLOCK_SIZE, rows);\n \n             for (int jBlock \u003d 0; jBlock \u003c out.blockColumns; ++jBlock) {\n                 final int jWidth \u003d out.blockWidth(jBlock);\n@@ -585,7 +546,7 @@\n                     int k \u003d 0;\n                     for (int p \u003d pStart; p \u003c pEnd; ++p) {\n                         final int lStart \u003d (p - pStart) * kWidth;\n-                        final int lEnd   \u003d lStart + kWidth;\n+                        final int lEnd \u003d lStart + kWidth;\n                         for (int nStart \u003d 0; nStart \u003c jWidth; ++nStart) {\n                             double sum \u003d 0;\n                             int l \u003d lStart;\n@@ -607,10 +568,8 @@\n                         }\n                     }\n                 }\n-\n                 // go to next block\n                 ++blockIndex;\n-\n             }\n         }\n \n@@ -620,19 +579,18 @@\n     /** {@inheritDoc} */\n     @Override\n     public double[][] getData() {\n-\n         final double[][] data \u003d new double[getRowDimension()][getColumnDimension()];\n         final int lastColumns \u003d columns - (blockColumns - 1) * BLOCK_SIZE;\n \n         for (int iBlock \u003d 0; iBlock \u003c blockRows; ++iBlock) {\n             final int pStart \u003d iBlock * BLOCK_SIZE;\n-            final int pEnd   \u003d FastMath.min(pStart + BLOCK_SIZE, rows);\n-            int regularPos   \u003d 0;\n-            int lastPos      \u003d 0;\n+            final int pEnd \u003d FastMath.min(pStart + BLOCK_SIZE, rows);\n+            int regularPos \u003d 0;\n+            int lastPos \u003d 0;\n             for (int p \u003d pStart; p \u003c pEnd; ++p) {\n                 final double[] dataP \u003d data[p];\n                 int blockIndex \u003d iBlock * blockColumns;\n-                int dataPos    \u003d 0;\n+                int dataPos \u003d 0;\n                 for (int jBlock \u003d 0; jBlock \u003c blockColumns - 1; ++jBlock) {\n                     System.arraycopy(blocks[blockIndex++], regularPos, dataP, dataPos, BLOCK_SIZE);\n                     dataPos +\u003d BLOCK_SIZE;\n@@ -687,9 +645,7 @@\n     /** {@inheritDoc} */\n     @Override\n     public BlockRealMatrix getSubMatrix(final int startRow, final int endRow,\n-                                   final int startColumn, final int endColumn)\n-        throws MatrixIndexException {\n-\n+                                        final int startColumn, final int endColumn) {\n         // safety checks\n         MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);\n \n@@ -698,10 +654,10 @@\n             new BlockRealMatrix(endRow - startRow + 1, endColumn - startColumn + 1);\n \n         // compute blocks shifts\n-        final int blockStartRow    \u003d startRow    / BLOCK_SIZE;\n-        final int rowsShift        \u003d startRow    % BLOCK_SIZE;\n+        final int blockStartRow \u003d startRow / BLOCK_SIZE;\n+        final int rowsShift \u003d startRow % BLOCK_SIZE;\n         final int blockStartColumn \u003d startColumn / BLOCK_SIZE;\n-        final int columnsShift     \u003d startColumn % BLOCK_SIZE;\n+        final int columnsShift \u003d startColumn % BLOCK_SIZE;\n \n         // perform extraction block-wise, to ensure good cache behavior\n         int pBlock \u003d blockStartRow;\n@@ -712,13 +668,13 @@\n                 final int jWidth \u003d out.blockWidth(jBlock);\n \n                 // handle one block of the output matrix\n-                final int      outIndex \u003d iBlock * out.blockColumns + jBlock;\n+                final int outIndex \u003d iBlock * out.blockColumns + jBlock;\n                 final double[] outBlock \u003d out.blocks[outIndex];\n-                final int      index    \u003d pBlock * blockColumns + qBlock;\n-                final int      width    \u003d blockWidth(qBlock);\n+                final int index \u003d pBlock * blockColumns + qBlock;\n+                final int width \u003d blockWidth(qBlock);\n \n                 final int heightExcess \u003d iHeight + rowsShift - BLOCK_SIZE;\n-                final int widthExcess  \u003d jWidth + columnsShift - BLOCK_SIZE;\n+                final int widthExcess \u003d jWidth + columnsShift - BLOCK_SIZE;\n                 if (heightExcess \u003e 0) {\n                     // the submatrix block spans on two blocks rows from the original matrix\n                     if (widthExcess \u003e 0) {\n@@ -772,13 +728,9 @@\n                                       outBlock, jWidth, 0, 0);\n                     }\n                }\n-\n                 ++qBlock;\n-\n             }\n-\n             ++pBlock;\n-\n         }\n \n         return out;\n@@ -816,15 +768,13 @@\n \n     /** {@inheritDoc} */\n     @Override\n-    public void setSubMatrix(final double[][] subMatrix, final int row, final int column)\n-        throws MatrixIndexException {\n-\n+    public void setSubMatrix(final double[][] subMatrix, final int row, final int column) {\n         // safety checks\n         final int refLength \u003d subMatrix[0].length;\n         if (refLength \u003d\u003d 0) {\n             throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);\n         }\n-        final int endRow    \u003d row + subMatrix.length - 1;\n+        final int endRow \u003d row + subMatrix.length - 1;\n         final int endColumn \u003d column + refLength - 1;\n         MatrixUtils.checkSubMatrixIndex(this, row, endRow, column, endColumn);\n         for (final double[] subRow : subMatrix) {\n@@ -834,24 +784,24 @@\n         }\n \n         // compute blocks bounds\n-        final int blockStartRow    \u003d row / BLOCK_SIZE;\n-        final int blockEndRow      \u003d (endRow + BLOCK_SIZE) / BLOCK_SIZE;\n+        final int blockStartRow \u003d row / BLOCK_SIZE;\n+        final int blockEndRow \u003d (endRow + BLOCK_SIZE) / BLOCK_SIZE;\n         final int blockStartColumn \u003d column / BLOCK_SIZE;\n-        final int blockEndColumn   \u003d (endColumn + BLOCK_SIZE) / BLOCK_SIZE;\n+        final int blockEndColumn \u003d (endColumn + BLOCK_SIZE) / BLOCK_SIZE;\n \n         // perform copy block-wise, to ensure good cache behavior\n         for (int iBlock \u003d blockStartRow; iBlock \u003c blockEndRow; ++iBlock) {\n-            final int iHeight  \u003d blockHeight(iBlock);\n+            final int iHeight \u003d blockHeight(iBlock);\n             final int firstRow \u003d iBlock * BLOCK_SIZE;\n-            final int iStart   \u003d FastMath.max(row,    firstRow);\n-            final int iEnd     \u003d FastMath.min(endRow + 1, firstRow + iHeight);\n+            final int iStart \u003d FastMath.max(row,    firstRow);\n+            final int iEnd \u003d FastMath.min(endRow + 1, firstRow + iHeight);\n \n             for (int jBlock \u003d blockStartColumn; jBlock \u003c blockEndColumn; ++jBlock) {\n-                final int jWidth      \u003d blockWidth(jBlock);\n+                final int jWidth \u003d blockWidth(jBlock);\n                 final int firstColumn \u003d jBlock * BLOCK_SIZE;\n-                final int jStart      \u003d FastMath.max(column,    firstColumn);\n-                final int jEnd        \u003d FastMath.min(endColumn + 1, firstColumn + jWidth);\n-                final int jLength     \u003d jEnd - jStart;\n+                final int jStart \u003d FastMath.max(column,    firstColumn);\n+                final int jEnd \u003d FastMath.min(endColumn + 1, firstColumn + jWidth);\n+                final int jLength \u003d jEnd - jStart;\n \n                 // handle one block, row by row\n                 final double[] block \u003d blocks[iBlock * blockColumns + jBlock];\n@@ -867,22 +817,20 @@\n \n     /** {@inheritDoc} */\n     @Override\n-    public BlockRealMatrix getRowMatrix(final int row)\n-        throws MatrixIndexException {\n-\n+    public BlockRealMatrix getRowMatrix(final int row) {\n         MatrixUtils.checkRowIndex(this, row);\n         final BlockRealMatrix out \u003d new BlockRealMatrix(1, columns);\n \n         // perform copy block-wise, to ensure good cache behavior\n-        final int iBlock  \u003d row / BLOCK_SIZE;\n-        final int iRow    \u003d row - iBlock * BLOCK_SIZE;\n+        final int iBlock \u003d row / BLOCK_SIZE;\n+        final int iRow \u003d row - iBlock * BLOCK_SIZE;\n         int outBlockIndex \u003d 0;\n-        int outIndex      \u003d 0;\n+        int outIndex \u003d 0;\n         double[] outBlock \u003d out.blocks[outBlockIndex];\n         for (int jBlock \u003d 0; jBlock \u003c blockColumns; ++jBlock) {\n-            final int jWidth     \u003d blockWidth(jBlock);\n+            final int jWidth \u003d blockWidth(jBlock);\n             final double[] block \u003d blocks[iBlock * blockColumns + jBlock];\n-            final int available  \u003d outBlock.length - outIndex;\n+            final int available \u003d outBlock.length - outIndex;\n             if (jWidth \u003e available) {\n                 System.arraycopy(block, iRow * jWidth, outBlock, outIndex, available);\n                 outBlock \u003d out.blocks[++outBlockIndex];\n@@ -914,9 +862,10 @@\n      * @param row the row to be set\n      * @param matrix row matrix (must have one row and the same number of columns\n      * as the instance)\n-     * @throws MatrixIndexException if the specified row index is invalid\n-     * @throws MatrixDimensionMismatchException if the matrix dimensions do not match one\n-     * instance row\n+     * @throws org.apache.commons.math.exception.OutOfRangeException\n+     * if the specified row index is invalid.\n+     * @throws MatrixDimensionMismatchException if the matrix dimensions do\n+     * not match one instance row.\n      */\n     public void setRowMatrix(final int row, final BlockRealMatrix matrix) {\n         MatrixUtils.checkRowIndex(this, row);\n@@ -930,12 +879,12 @@\n \n         // perform copy block-wise, to ensure good cache behavior\n         final int iBlock \u003d row / BLOCK_SIZE;\n-        final int iRow   \u003d row - iBlock * BLOCK_SIZE;\n-        int mBlockIndex  \u003d 0;\n-        int mIndex       \u003d 0;\n-        double[] mBlock  \u003d matrix.blocks[mBlockIndex];\n+        final int iRow \u003d row - iBlock * BLOCK_SIZE;\n+        int mBlockIndex \u003d 0;\n+        int mIndex \u003d 0;\n+        double[] mBlock \u003d matrix.blocks[mBlockIndex];\n         for (int jBlock \u003d 0; jBlock \u003c blockColumns; ++jBlock) {\n-            final int jWidth     \u003d blockWidth(jBlock);\n+            final int jWidth \u003d blockWidth(jBlock);\n             final double[] block \u003d blocks[iBlock * blockColumns + jBlock];\n             final int available  \u003d mBlock.length - mIndex;\n             if (jWidth \u003e available) {\n@@ -952,18 +901,16 @@\n \n     /** {@inheritDoc} */\n     @Override\n-    public BlockRealMatrix getColumnMatrix(final int column)\n-        throws MatrixIndexException {\n-\n+    public BlockRealMatrix getColumnMatrix(final int column) {\n         MatrixUtils.checkColumnIndex(this, column);\n         final BlockRealMatrix out \u003d new BlockRealMatrix(rows, 1);\n \n         // perform copy block-wise, to ensure good cache behavior\n-        final int jBlock  \u003d column / BLOCK_SIZE;\n+        final int jBlock \u003d column / BLOCK_SIZE;\n         final int jColumn \u003d column - jBlock * BLOCK_SIZE;\n-        final int jWidth  \u003d blockWidth(jBlock);\n+        final int jWidth \u003d blockWidth(jBlock);\n         int outBlockIndex \u003d 0;\n-        int outIndex      \u003d 0;\n+        int outIndex \u003d 0;\n         double[] outBlock \u003d out.blocks[outBlockIndex];\n         for (int iBlock \u003d 0; iBlock \u003c blockRows; ++iBlock) {\n             final int iHeight \u003d blockHeight(iBlock);\n@@ -997,9 +944,10 @@\n      * @param column the column to be set\n      * @param matrix column matrix (must have one column and the same number of rows\n      * as the instance)\n-     * @throws MatrixIndexException if the specified column index is invalid\n-     * @throws MatrixDimensionMismatchException if the matrix dimensions do not match one\n-     * instance column\n+     * @throws org.apache.commons.math.exception.OutOfRangeException\n+     * if the specified column index is invalid.\n+     * @throws MatrixDimensionMismatchException if the matrix dimensions do\n+     * not match one instance column.\n      */\n     void setColumnMatrix(final int column, final BlockRealMatrix matrix) {\n         MatrixUtils.checkColumnIndex(this, column);\n@@ -1012,11 +960,11 @@\n         }\n \n         // perform copy block-wise, to ensure good cache behavior\n-        final int jBlock  \u003d column / BLOCK_SIZE;\n+        final int jBlock \u003d column / BLOCK_SIZE;\n         final int jColumn \u003d column - jBlock * BLOCK_SIZE;\n-        final int jWidth  \u003d blockWidth(jBlock);\n+        final int jWidth \u003d blockWidth(jBlock);\n         int mBlockIndex \u003d 0;\n-        int mIndex      \u003d 0;\n+        int mIndex \u003d 0;\n         double[] mBlock \u003d matrix.blocks[mBlockIndex];\n         for (int iBlock \u003d 0; iBlock \u003c blockRows; ++iBlock) {\n             final int iHeight \u003d blockHeight(iBlock);\n@@ -1033,18 +981,16 @@\n \n     /** {@inheritDoc} */\n     @Override\n-    public RealVector getRowVector(final int row)\n-        throws MatrixIndexException {\n-\n+    public RealVector getRowVector(final int row) {\n         MatrixUtils.checkRowIndex(this, row);\n         final double[] outData \u003d new double[columns];\n \n         // perform copy block-wise, to ensure good cache behavior\n-        final int iBlock  \u003d row / BLOCK_SIZE;\n-        final int iRow    \u003d row - iBlock * BLOCK_SIZE;\n-        int outIndex      \u003d 0;\n+        final int iBlock \u003d row / BLOCK_SIZE;\n+        final int iRow \u003d row - iBlock * BLOCK_SIZE;\n+        int outIndex \u003d 0;\n         for (int jBlock \u003d 0; jBlock \u003c blockColumns; ++jBlock) {\n-            final int jWidth     \u003d blockWidth(jBlock);\n+            final int jWidth \u003d blockWidth(jBlock);\n             final double[] block \u003d blocks[iBlock * blockColumns + jBlock];\n             System.arraycopy(block, iRow * jWidth, outData, outIndex, jWidth);\n             outIndex +\u003d jWidth;\n@@ -1065,17 +1011,15 @@\n \n     /** {@inheritDoc} */\n     @Override\n-    public RealVector getColumnVector(final int column)\n-        throws MatrixIndexException {\n-\n+    public RealVector getColumnVector(final int column) {\n         MatrixUtils.checkColumnIndex(this, column);\n         final double[] outData \u003d new double[rows];\n \n         // perform copy block-wise, to ensure good cache behavior\n-        final int jBlock  \u003d column / BLOCK_SIZE;\n+        final int jBlock \u003d column / BLOCK_SIZE;\n         final int jColumn \u003d column - jBlock * BLOCK_SIZE;\n-        final int jWidth  \u003d blockWidth(jBlock);\n-        int outIndex      \u003d 0;\n+        final int jWidth \u003d blockWidth(jBlock);\n+        int outIndex \u003d 0;\n         for (int iBlock \u003d 0; iBlock \u003c blockRows; ++iBlock) {\n             final int iHeight \u003d blockHeight(iBlock);\n             final double[] block \u003d blocks[iBlock * blockColumns + jBlock];\n@@ -1099,16 +1043,14 @@\n \n     /** {@inheritDoc} */\n     @Override\n-    public double[] getRow(final int row)\n-        throws MatrixIndexException {\n-\n+    public double[] getRow(final int row) {\n         MatrixUtils.checkRowIndex(this, row);\n         final double[] out \u003d new double[columns];\n \n         // perform copy block-wise, to ensure good cache behavior\n-        final int iBlock  \u003d row / BLOCK_SIZE;\n-        final int iRow    \u003d row - iBlock * BLOCK_SIZE;\n-        int outIndex      \u003d 0;\n+        final int iBlock \u003d row / BLOCK_SIZE;\n+        final int iRow \u003d row - iBlock * BLOCK_SIZE;\n+        int outIndex \u003d 0;\n         for (int jBlock \u003d 0; jBlock \u003c blockColumns; ++jBlock) {\n             final int jWidth     \u003d blockWidth(jBlock);\n             final double[] block \u003d blocks[iBlock * blockColumns + jBlock];\n@@ -1129,9 +1071,9 @@\n         }\n \n         // perform copy block-wise, to ensure good cache behavior\n-        final int iBlock  \u003d row / BLOCK_SIZE;\n-        final int iRow    \u003d row - iBlock * BLOCK_SIZE;\n-        int outIndex      \u003d 0;\n+        final int iBlock \u003d row / BLOCK_SIZE;\n+        final int iRow \u003d row - iBlock * BLOCK_SIZE;\n+        int outIndex \u003d 0;\n         for (int jBlock \u003d 0; jBlock \u003c blockColumns; ++jBlock) {\n             final int jWidth     \u003d blockWidth(jBlock);\n             final double[] block \u003d blocks[iBlock * blockColumns + jBlock];\n@@ -1142,9 +1084,7 @@\n \n     /** {@inheritDoc} */\n     @Override\n-    public double[] getColumn(final int column)\n-        throws MatrixIndexException {\n-\n+    public double[] getColumn(final int column) {\n         MatrixUtils.checkColumnIndex(this, column);\n         final double[] out \u003d new double[rows];\n \n@@ -1152,7 +1092,7 @@\n         final int jBlock  \u003d column / BLOCK_SIZE;\n         final int jColumn \u003d column - jBlock * BLOCK_SIZE;\n         final int jWidth  \u003d blockWidth(jBlock);\n-        int outIndex      \u003d 0;\n+        int outIndex \u003d 0;\n         for (int iBlock \u003d 0; iBlock \u003c blockRows; ++iBlock) {\n             final int iHeight \u003d blockHeight(iBlock);\n             final double[] block \u003d blocks[iBlock * blockColumns + jBlock];\n@@ -1176,8 +1116,8 @@\n         // perform copy block-wise, to ensure good cache behavior\n         final int jBlock  \u003d column / BLOCK_SIZE;\n         final int jColumn \u003d column - jBlock * BLOCK_SIZE;\n-        final int jWidth  \u003d blockWidth(jBlock);\n-        int outIndex      \u003d 0;\n+        final int jWidth \u003d blockWidth(jBlock);\n+        int outIndex \u003d 0;\n         for (int iBlock \u003d 0; iBlock \u003c blockRows; ++iBlock) {\n             final int iHeight \u003d blockHeight(iBlock);\n             final double[] block \u003d blocks[iBlock * blockColumns + jBlock];\n@@ -1189,76 +1129,51 @@\n \n     /** {@inheritDoc} */\n     @Override\n-    public double getEntry(final int row, final int column)\n-        throws MatrixIndexException {\n-        try {\n-            final int iBlock \u003d row    / BLOCK_SIZE;\n-            final int jBlock \u003d column / BLOCK_SIZE;\n-            final int k      \u003d (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +\n-                               (column - jBlock * BLOCK_SIZE);\n-            return blocks[iBlock * blockColumns + jBlock][k];\n-        } catch (ArrayIndexOutOfBoundsException e) {\n-            throw new MatrixIndexException(\n-                    LocalizedFormats.NO_SUCH_MATRIX_ENTRY,\n-                    row, column, getRowDimension(), getColumnDimension());\n-        }\n+    public double getEntry(final int row, final int column) {\n+        MatrixUtils.checkMatrixIndex(this, row, column);\n+        final int iBlock \u003d row / BLOCK_SIZE;\n+        final int jBlock \u003d column / BLOCK_SIZE;\n+        final int k \u003d (row - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +\n+            (column - jBlock * BLOCK_SIZE);\n+        return blocks[iBlock * blockColumns + jBlock][k];\n     }\n \n     /** {@inheritDoc} */\n     @Override\n-    public void setEntry(final int row, final int column, final double value)\n-        throws MatrixIndexException {\n-        try {\n-            final int iBlock \u003d row    / BLOCK_SIZE;\n-            final int jBlock \u003d column / BLOCK_SIZE;\n-            final int k      \u003d (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +\n-                               (column - jBlock * BLOCK_SIZE);\n-            blocks[iBlock * blockColumns + jBlock][k] \u003d value;\n-        } catch (ArrayIndexOutOfBoundsException e) {\n-            throw new MatrixIndexException(\n-                    LocalizedFormats.NO_SUCH_MATRIX_ENTRY,\n-                    row, column, getRowDimension(), getColumnDimension());\n-        }\n+    public void setEntry(final int row, final int column, final double value) {\n+        MatrixUtils.checkMatrixIndex(this, row, column);\n+        final int iBlock \u003d row / BLOCK_SIZE;\n+        final int jBlock \u003d column / BLOCK_SIZE;\n+        final int k \u003d (row - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +\n+            (column - jBlock * BLOCK_SIZE);\n+        blocks[iBlock * blockColumns + jBlock][k] \u003d value;\n     }\n \n     /** {@inheritDoc} */\n     @Override\n-    public void addToEntry(final int row, final int column, final double increment)\n-        throws MatrixIndexException {\n-        try {\n-            final int iBlock \u003d row    / BLOCK_SIZE;\n-            final int jBlock \u003d column / BLOCK_SIZE;\n-            final int k      \u003d (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +\n-                               (column - jBlock * BLOCK_SIZE);\n-            blocks[iBlock * blockColumns + jBlock][k] +\u003d increment;\n-        } catch (ArrayIndexOutOfBoundsException e) {\n-            throw new MatrixIndexException(\n-                    LocalizedFormats.NO_SUCH_MATRIX_ENTRY,\n-                    row, column, getRowDimension(), getColumnDimension());\n-        }\n+    public void addToEntry(final int row, final int column, final double increment) {\n+        MatrixUtils.checkMatrixIndex(this, row, column);\n+        final int iBlock \u003d row    / BLOCK_SIZE;\n+        final int jBlock \u003d column / BLOCK_SIZE;\n+        final int k \u003d (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +\n+            (column - jBlock * BLOCK_SIZE);\n+        blocks[iBlock * blockColumns + jBlock][k] +\u003d increment;\n     }\n \n     /** {@inheritDoc} */\n     @Override\n-    public void multiplyEntry(final int row, final int column, final double factor)\n-        throws MatrixIndexException {\n-        try {\n-            final int iBlock \u003d row    / BLOCK_SIZE;\n-            final int jBlock \u003d column / BLOCK_SIZE;\n-            final int k      \u003d (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +\n-                               (column - jBlock * BLOCK_SIZE);\n-            blocks[iBlock * blockColumns + jBlock][k] *\u003d factor;\n-        } catch (ArrayIndexOutOfBoundsException e) {\n-            throw new MatrixIndexException(\n-                    LocalizedFormats.NO_SUCH_MATRIX_ENTRY,\n-                    row, column, getRowDimension(), getColumnDimension());\n-        }\n+    public void multiplyEntry(final int row, final int column, final double factor) {\n+        MatrixUtils.checkMatrixIndex(this, row, column);\n+        final int iBlock \u003d row / BLOCK_SIZE;\n+        final int jBlock \u003d column / BLOCK_SIZE;\n+        final int k \u003d (row - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +\n+            (column - jBlock * BLOCK_SIZE);\n+        blocks[iBlock * blockColumns + jBlock][k] *\u003d factor;\n     }\n \n     /** {@inheritDoc} */\n     @Override\n     public BlockRealMatrix transpose() {\n-\n         final int nRows \u003d getRowDimension();\n         final int nCols \u003d getColumnDimension();\n         final BlockRealMatrix out \u003d new BlockRealMatrix(nCols, nRows);\n@@ -1267,14 +1182,13 @@\n         int blockIndex \u003d 0;\n         for (int iBlock \u003d 0; iBlock \u003c blockColumns; ++iBlock) {\n             for (int jBlock \u003d 0; jBlock \u003c blockRows; ++jBlock) {\n-\n                 // transpose current block\n                 final double[] outBlock \u003d out.blocks[blockIndex];\n-                final double[] tBlock   \u003d blocks[jBlock * blockColumns + iBlock];\n-                final int      pStart   \u003d iBlock * BLOCK_SIZE;\n-                final int      pEnd     \u003d FastMath.min(pStart + BLOCK_SIZE, columns);\n-                final int      qStart   \u003d jBlock * BLOCK_SIZE;\n-                final int      qEnd     \u003d FastMath.min(qStart + BLOCK_SIZE, rows);\n+                final double[] tBlock \u003d blocks[jBlock * blockColumns + iBlock];\n+                final int pStart \u003d iBlock * BLOCK_SIZE;\n+                final int pEnd \u003d FastMath.min(pStart + BLOCK_SIZE, columns);\n+                final int qStart \u003d jBlock * BLOCK_SIZE;\n+                final int qEnd \u003d FastMath.min(qStart + BLOCK_SIZE, rows);\n                 int k \u003d 0;\n                 for (int p \u003d pStart; p \u003c pEnd; ++p) {\n                     final int lInc \u003d pEnd - pStart;\n@@ -1285,10 +1199,8 @@\n                         l+\u003d lInc;\n                     }\n                 }\n-\n                 // go to next block\n                 ++blockIndex;\n-\n             }\n         }\n \n@@ -1309,9 +1221,7 @@\n \n     /** {@inheritDoc} */\n     @Override\n-    public double[] operate(final double[] v)\n-        throws IllegalArgumentException {\n-\n+    public double[] operate(final double[] v) {\n         if (v.length !\u003d columns) {\n             throw new DimensionMismatchException(v.length, columns);\n         }\n@@ -1320,11 +1230,11 @@\n         // perform multiplication block-wise, to ensure good cache behavior\n         for (int iBlock \u003d 0; iBlock \u003c blockRows; ++iBlock) {\n             final int pStart \u003d iBlock * BLOCK_SIZE;\n-            final int pEnd   \u003d FastMath.min(pStart + BLOCK_SIZE, rows);\n+            final int pEnd \u003d FastMath.min(pStart + BLOCK_SIZE, rows);\n             for (int jBlock \u003d 0; jBlock \u003c blockColumns; ++jBlock) {\n                 final double[] block  \u003d blocks[iBlock * blockColumns + jBlock];\n-                final int      qStart \u003d jBlock * BLOCK_SIZE;\n-                final int      qEnd   \u003d FastMath.min(qStart + BLOCK_SIZE, columns);\n+                final int qStart \u003d jBlock * BLOCK_SIZE;\n+                final int qEnd \u003d FastMath.min(qStart + BLOCK_SIZE, columns);\n                 int k \u003d 0;\n                 for (int p \u003d pStart; p \u003c pEnd; ++p) {\n                     double sum \u003d 0;\n@@ -1350,9 +1260,7 @@\n \n     /** {@inheritDoc} */\n     @Override\n-    public double[] preMultiply(final double[] v)\n-        throws IllegalArgumentException {\n-\n+    public double[] preMultiply(final double[] v) {\n         if (v.length !\u003d rows) {\n             throw new DimensionMismatchException(v.length, rows);\n         }\n@@ -1365,11 +1273,11 @@\n             final int jWidth3 \u003d jWidth2 + jWidth;\n             final int jWidth4 \u003d jWidth3 + jWidth;\n             final int qStart \u003d jBlock * BLOCK_SIZE;\n-            final int qEnd   \u003d FastMath.min(qStart + BLOCK_SIZE, columns);\n+            final int qEnd \u003d FastMath.min(qStart + BLOCK_SIZE, columns);\n             for (int iBlock \u003d 0; iBlock \u003c blockRows; ++iBlock) {\n                 final double[] block  \u003d blocks[iBlock * blockColumns + jBlock];\n-                final int      pStart \u003d iBlock * BLOCK_SIZE;\n-                final int      pEnd   \u003d FastMath.min(pStart + BLOCK_SIZE, rows);\n+                final int pStart \u003d iBlock * BLOCK_SIZE;\n+                final int pEnd \u003d FastMath.min(pStart + BLOCK_SIZE, rows);\n                 for (int q \u003d qStart; q \u003c qEnd; ++q) {\n                     int k \u003d q - qStart;\n                     double sum \u003d 0;\n@@ -1401,12 +1309,12 @@\n         visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);\n         for (int iBlock \u003d 0; iBlock \u003c blockRows; ++iBlock) {\n             final int pStart \u003d iBlock * BLOCK_SIZE;\n-            final int pEnd   \u003d FastMath.min(pStart + BLOCK_SIZE, rows);\n+            final int pEnd \u003d FastMath.min(pStart + BLOCK_SIZE, rows);\n             for (int p \u003d pStart; p \u003c pEnd; ++p) {\n                 for (int jBlock \u003d 0; jBlock \u003c blockColumns; ++jBlock) {\n                     final int jWidth \u003d blockWidth(jBlock);\n                     final int qStart \u003d jBlock * BLOCK_SIZE;\n-                    final int qEnd   \u003d FastMath.min(qStart + BLOCK_SIZE, columns);\n+                    final int qEnd \u003d FastMath.min(qStart + BLOCK_SIZE, columns);\n                     final double[] block \u003d blocks[iBlock * blockColumns + jBlock];\n                     int k \u003d (p - pStart) * jWidth;\n                     for (int q \u003d qStart; q \u003c qEnd; ++q) {\n@@ -1426,12 +1334,12 @@\n         visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);\n         for (int iBlock \u003d 0; iBlock \u003c blockRows; ++iBlock) {\n             final int pStart \u003d iBlock * BLOCK_SIZE;\n-            final int pEnd   \u003d FastMath.min(pStart + BLOCK_SIZE, rows);\n+            final int pEnd \u003d FastMath.min(pStart + BLOCK_SIZE, rows);\n             for (int p \u003d pStart; p \u003c pEnd; ++p) {\n                 for (int jBlock \u003d 0; jBlock \u003c blockColumns; ++jBlock) {\n                     final int jWidth \u003d blockWidth(jBlock);\n                     final int qStart \u003d jBlock * BLOCK_SIZE;\n-                    final int qEnd   \u003d FastMath.min(qStart + BLOCK_SIZE, columns);\n+                    final int qEnd \u003d FastMath.min(qStart + BLOCK_SIZE, columns);\n                     final double[] block \u003d blocks[iBlock * blockColumns + jBlock];\n                     int k \u003d (p - pStart) * jWidth;\n                     for (int q \u003d qStart; q \u003c qEnd; ++q) {\n@@ -1449,19 +1357,19 @@\n     public double walkInRowOrder(final RealMatrixChangingVisitor visitor,\n                                  final int startRow, final int endRow,\n                                  final int startColumn, final int endColumn)\n-        throws MatrixIndexException, MatrixVisitorException {\n+        throws MatrixVisitorException {\n         MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);\n         visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);\n         for (int iBlock \u003d startRow / BLOCK_SIZE; iBlock \u003c 1 + endRow / BLOCK_SIZE; ++iBlock) {\n-            final int p0     \u003d iBlock * BLOCK_SIZE;\n+            final int p0 \u003d iBlock * BLOCK_SIZE;\n             final int pStart \u003d FastMath.max(startRow, p0);\n-            final int pEnd   \u003d FastMath.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);\n+            final int pEnd \u003d FastMath.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);\n             for (int p \u003d pStart; p \u003c pEnd; ++p) {\n                 for (int jBlock \u003d startColumn / BLOCK_SIZE; jBlock \u003c 1 + endColumn / BLOCK_SIZE; ++jBlock) {\n                     final int jWidth \u003d blockWidth(jBlock);\n-                    final int q0     \u003d jBlock * BLOCK_SIZE;\n+                    final int q0 \u003d jBlock * BLOCK_SIZE;\n                     final int qStart \u003d FastMath.max(startColumn, q0);\n-                    final int qEnd   \u003d FastMath.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);\n+                    final int qEnd \u003d FastMath.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);\n                     final double[] block \u003d blocks[iBlock * blockColumns + jBlock];\n                     int k \u003d (p - p0) * jWidth + qStart - q0;\n                     for (int q \u003d qStart; q \u003c qEnd; ++q) {\n@@ -1479,19 +1387,19 @@\n     public double walkInRowOrder(final RealMatrixPreservingVisitor visitor,\n                                  final int startRow, final int endRow,\n                                  final int startColumn, final int endColumn)\n-        throws MatrixIndexException, MatrixVisitorException {\n+        throws MatrixVisitorException {\n         MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);\n         visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);\n         for (int iBlock \u003d startRow / BLOCK_SIZE; iBlock \u003c 1 + endRow / BLOCK_SIZE; ++iBlock) {\n-            final int p0     \u003d iBlock * BLOCK_SIZE;\n+            final int p0 \u003d iBlock * BLOCK_SIZE;\n             final int pStart \u003d FastMath.max(startRow, p0);\n-            final int pEnd   \u003d FastMath.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);\n+            final int pEnd \u003d FastMath.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);\n             for (int p \u003d pStart; p \u003c pEnd; ++p) {\n                 for (int jBlock \u003d startColumn / BLOCK_SIZE; jBlock \u003c 1 + endColumn / BLOCK_SIZE; ++jBlock) {\n                     final int jWidth \u003d blockWidth(jBlock);\n-                    final int q0     \u003d jBlock * BLOCK_SIZE;\n+                    final int q0 \u003d jBlock * BLOCK_SIZE;\n                     final int qStart \u003d FastMath.max(startColumn, q0);\n-                    final int qEnd   \u003d FastMath.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);\n+                    final int qEnd \u003d FastMath.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);\n                     final double[] block \u003d blocks[iBlock * blockColumns + jBlock];\n                     int k \u003d (p - p0) * jWidth + qStart - q0;\n                     for (int q \u003d qStart; q \u003c qEnd; ++q) {\n@@ -1512,10 +1420,10 @@\n         int blockIndex \u003d 0;\n         for (int iBlock \u003d 0; iBlock \u003c blockRows; ++iBlock) {\n             final int pStart \u003d iBlock * BLOCK_SIZE;\n-            final int pEnd   \u003d FastMath.min(pStart + BLOCK_SIZE, rows);\n+            final int pEnd \u003d FastMath.min(pStart + BLOCK_SIZE, rows);\n             for (int jBlock \u003d 0; jBlock \u003c blockColumns; ++jBlock) {\n                 final int qStart \u003d jBlock * BLOCK_SIZE;\n-                final int qEnd   \u003d FastMath.min(qStart + BLOCK_SIZE, columns);\n+                final int qEnd \u003d FastMath.min(qStart + BLOCK_SIZE, columns);\n                 final double[] block \u003d blocks[blockIndex];\n                 int k \u003d 0;\n                 for (int p \u003d pStart; p \u003c pEnd; ++p) {\n@@ -1538,10 +1446,10 @@\n         int blockIndex \u003d 0;\n         for (int iBlock \u003d 0; iBlock \u003c blockRows; ++iBlock) {\n             final int pStart \u003d iBlock * BLOCK_SIZE;\n-            final int pEnd   \u003d FastMath.min(pStart + BLOCK_SIZE, rows);\n+            final int pEnd \u003d FastMath.min(pStart + BLOCK_SIZE, rows);\n             for (int jBlock \u003d 0; jBlock \u003c blockColumns; ++jBlock) {\n                 final int qStart \u003d jBlock * BLOCK_SIZE;\n-                final int qEnd   \u003d FastMath.min(qStart + BLOCK_SIZE, columns);\n+                final int qEnd \u003d FastMath.min(qStart + BLOCK_SIZE, columns);\n                 final double[] block \u003d blocks[blockIndex];\n                 int k \u003d 0;\n                 for (int p \u003d pStart; p \u003c pEnd; ++p) {\n@@ -1561,18 +1469,18 @@\n     public double walkInOptimizedOrder(final RealMatrixChangingVisitor visitor,\n                                        final int startRow, final int endRow,\n                                        final int startColumn, final int endColumn)\n-        throws MatrixIndexException, MatrixVisitorException {\n+        throws MatrixVisitorException {\n         MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);\n         visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);\n         for (int iBlock \u003d startRow / BLOCK_SIZE; iBlock \u003c 1 + endRow / BLOCK_SIZE; ++iBlock) {\n-            final int p0     \u003d iBlock * BLOCK_SIZE;\n+            final int p0 \u003d iBlock * BLOCK_SIZE;\n             final int pStart \u003d FastMath.max(startRow, p0);\n-            final int pEnd   \u003d FastMath.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);\n+            final int pEnd \u003d FastMath.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);\n             for (int jBlock \u003d startColumn / BLOCK_SIZE; jBlock \u003c 1 + endColumn / BLOCK_SIZE; ++jBlock) {\n                 final int jWidth \u003d blockWidth(jBlock);\n-                final int q0     \u003d jBlock * BLOCK_SIZE;\n+                final int q0 \u003d jBlock * BLOCK_SIZE;\n                 final int qStart \u003d FastMath.max(startColumn, q0);\n-                final int qEnd   \u003d FastMath.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);\n+                final int qEnd \u003d FastMath.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);\n                 final double[] block \u003d blocks[iBlock * blockColumns + jBlock];\n                 for (int p \u003d pStart; p \u003c pEnd; ++p) {\n                     int k \u003d (p - p0) * jWidth + qStart - q0;\n@@ -1591,18 +1499,18 @@\n     public double walkInOptimizedOrder(final RealMatrixPreservingVisitor visitor,\n                                        final int startRow, final int endRow,\n                                        final int startColumn, final int endColumn)\n-        throws MatrixIndexException, MatrixVisitorException {\n+        throws MatrixVisitorException {\n         MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);\n         visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);\n         for (int iBlock \u003d startRow / BLOCK_SIZE; iBlock \u003c 1 + endRow / BLOCK_SIZE; ++iBlock) {\n-            final int p0     \u003d iBlock * BLOCK_SIZE;\n+            final int p0 \u003d iBlock * BLOCK_SIZE;\n             final int pStart \u003d FastMath.max(startRow, p0);\n-            final int pEnd   \u003d FastMath.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);\n+            final int pEnd \u003d FastMath.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);\n             for (int jBlock \u003d startColumn / BLOCK_SIZE; jBlock \u003c 1 + endColumn / BLOCK_SIZE; ++jBlock) {\n                 final int jWidth \u003d blockWidth(jBlock);\n-                final int q0     \u003d jBlock * BLOCK_SIZE;\n+                final int q0 \u003d jBlock * BLOCK_SIZE;\n                 final int qStart \u003d FastMath.max(startColumn, q0);\n-                final int qEnd   \u003d FastMath.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);\n+                final int qEnd \u003d FastMath.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);\n                 final double[] block \u003d blocks[iBlock * blockColumns + jBlock];\n                 for (int p \u003d pStart; p \u003c pEnd; ++p) {\n                     int k \u003d (p - p0) * jWidth + qStart - q0;\n",
      "operations": [
        {
          "type": "insert-node",
          "from": "",
          "to": "Javadoc [13934,14179]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Javadoc [16437,16678]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Javadoc [20904,21153]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [13945,13990]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [14041,14066]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [14074,14171]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [16448,16484]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [16540,16565]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [16573,16670]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [20915,20971]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [21029,21054]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [21062,21145]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [36995,37102]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TagElement [37110,37213]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [40392,40502]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TagElement [40510,40616]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [47502,47550]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [47953,48001]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [48411,48459]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [48880,48928]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement:  if the matrix dimensions do [37150,37178]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: not match one instance row. [37186,37213]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement:  if the matrix dimensions do [40550,40578]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: not match one instance column. [40586,40616]"
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [4420,4444]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [6480,6504]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [8877,8901]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [12134,12158]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [12721,12745]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [14244,14287]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [14340,14360]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [14368,14435]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Javadoc [14233,14443]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [14515,14539]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [15297,15321]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [16834,16868]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [16926,16946]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [16954,17021]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Javadoc [16823,17029]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [17106,17130]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [17891,17915]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [18526,18550]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [19164,19188]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [21457,21505]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [21565,21585]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [21593,21692]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Javadoc [21446,21700]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [21763,21787]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [27039,27059]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [33771,33791]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [36056,36076]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [37801,37867]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement:  if the matrix dimensions do not match one [37915,37957]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: instance row [37965,37977]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TagElement [37875,37977]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [39620,39640]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [41214,41283]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement:  if the matrix dimensions do not match one [41331,41373]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: instance column [41381,41396]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TagElement [41291,41396]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [42845,42865]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [43948,43968]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [45125,45145]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [46729,46749]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [48491,48511]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Block [48526,48851]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "CatchClause [48852,49082]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TryStatement [48522,49082]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [49222,49242]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Block [49257,49583]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "CatchClause [49584,49814]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TryStatement [49253,49814]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [49960,49980]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Block [49995,50326]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "CatchClause [50327,50557]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TryStatement [49991,50557]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [50703,50723]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Block [50738,51066]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "CatchClause [51067,51297]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TryStatement [50734,51297]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [53079,53103]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [54654,54678]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [58905,58925]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [60531,60551]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [64285,64305]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [65908,65928]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/math/linear/FieldMatrix.java",
        "src/main/java/org/apache/commons/math/linear/FieldMatrix.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "walkInRowOrder",
            "walkInColumnOrder",
            "getField",
            "walkInOptimizedOrder",
            "setEntry",
            "getColumnMatrix",
            "getRow",
            "scalarMultiply",
            "setRowVector",
            "preMultiply",
            "getData",
            "getSubMatrix",
            "getRowMatrix",
            "multiply",
            "setRowMatrix",
            "scalarAdd",
            "addToEntry",
            "add",
            "setColumnMatrix",
            "walkInOptimizedOrder",
            "copySubMatrix",
            "getEntry",
            "copy",
            "getColumn",
            "getSubMatrix",
            "setSubMatrix",
            "copySubMatrix",
            "setColumn",
            "walkInColumnOrder",
            "getRowVector",
            "multiplyEntry",
            "createMatrix",
            "subtract",
            "setColumnVector",
            "walkInRowOrder",
            "setRow",
            "getColumnVector"
          ],
          "num": 37
        },
        {
          "qualified_names": [
            "getSubMatrix",
            "multiply",
            "addToEntry",
            "walkInRowOrder",
            "getColumnMatrix",
            "walkInRowOrder",
            "getField",
            "copy",
            "getRowMatrix",
            "walkInOptimizedOrder",
            "setColumnVector",
            "subtract",
            "setRowMatrix",
            "copySubMatrix",
            "add",
            "setColumnMatrix",
            "copySubMatrix",
            "walkInOptimizedOrder",
            "setColumn",
            "setRow",
            "getSubMatrix",
            "setRowVector",
            "getRow",
            "getRowVector",
            "setSubMatrix",
            "preMultiply",
            "getColumnVector",
            "scalarAdd",
            "multiplyEntry",
            "getEntry",
            "createMatrix",
            "getData",
            "walkInColumnOrder",
            "walkInColumnOrder",
            "getColumn",
            "setEntry",
            "scalarMultiply"
          ],
          "num": 37
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "37",
            "42",
            "43",
            "48",
            "54",
            "56",
            "63",
            "64",
            "65",
            "70",
            "72",
            "73",
            "74",
            "79",
            "81",
            "82",
            "87",
            "89",
            "90",
            "95",
            "97",
            "98",
            "99",
            "105",
            "106",
            "107",
            "108",
            "109",
            "116",
            "121",
            "122",
            "128",
            "129",
            "130",
            "135",
            "136",
            "140",
            "141",
            "142",
            "150",
            "151",
            "152",
            "153",
            "155",
            "156",
            "157",
            "164",
            "166",
            "167",
            "168",
            "170",
            "176",
            "177",
            "192",
            "193",
            "194",
            "195",
            "196",
            "197",
            "198",
            "199",
            "205",
            "206",
            "208",
            "209",
            "210",
            "215",
            "216",
            "218",
            "219",
            "220",
            "221",
            "228",
            "229",
            "231",
            "232",
            "233",
            "238",
            "239",
            "241",
            "242",
            "243",
            "244",
            "251",
            "252",
            "254",
            "255",
            "256",
            "261",
            "262",
            "264",
            "266",
            "267",
            "274",
            "275",
            "277",
            "278",
            "279",
            "284",
            "285",
            "287",
            "288",
            "289",
            "296",
            "297",
            "298",
            "299",
            "301",
            "302",
            "303",
            "308",
            "309",
            "311",
            "312",
            "313",
            "320",
            "321",
            "322",
            "323",
            "327",
            "332",
            "333",
            "337",
            "345",
            "346",
            "347",
            "348",
            "349",
            "350",
            "351",
            "356",
            "362",
            "363",
            "364",
            "365",
            "366",
            "367",
            "368",
            "373",
            "380",
            "381",
            "382",
            "383",
            "384",
            "385",
            "386",
            "388",
            "389",
            "390",
            "391",
            "394",
            "398",
            "399",
            "400",
            "401",
            "402",
            "403",
            "404",
            "406",
            "407",
            "408",
            "409",
            "523",
            "552",
            "627",
            "656",
            "728",
            "756"
          ],
          "num": 168
        },
        {
          "qualified_names": [
            "37",
            "38",
            "43",
            "44",
            "49",
            "50",
            "56",
            "58",
            "65",
            "66",
            "67",
            "68",
            "73",
            "75",
            "76",
            "77",
            "78",
            "83",
            "85",
            "86",
            "91",
            "93",
            "94",
            "99",
            "101",
            "102",
            "103",
            "109",
            "110",
            "111",
            "112",
            "113",
            "114",
            "115",
            "122",
            "127",
            "128",
            "134",
            "135",
            "136",
            "137",
            "142",
            "143",
            "147",
            "148",
            "149",
            "150",
            "158",
            "159",
            "160",
            "161",
            "163",
            "164",
            "165",
            "166",
            "173",
            "175",
            "176",
            "177",
            "179",
            "180",
            "186",
            "187",
            "202",
            "203",
            "204",
            "205",
            "206",
            "207",
            "208",
            "209",
            "210",
            "211",
            "212",
            "213",
            "214",
            "220",
            "221",
            "223",
            "224",
            "225",
            "226",
            "231",
            "232",
            "234",
            "235",
            "236",
            "237",
            "238",
            "245",
            "246",
            "248",
            "249",
            "250",
            "251",
            "256",
            "257",
            "259",
            "260",
            "261",
            "262",
            "263",
            "270",
            "271",
            "273",
            "274",
            "275",
            "276",
            "281",
            "282",
            "284",
            "286",
            "287",
            "288",
            "295",
            "296",
            "298",
            "299",
            "300",
            "301",
            "306",
            "307",
            "309",
            "310",
            "311",
            "312",
            "313",
            "320",
            "322",
            "323",
            "324",
            "325",
            "330",
            "331",
            "333",
            "334",
            "335",
            "336",
            "337",
            "344",
            "348",
            "349",
            "354",
            "355",
            "359",
            "360",
            "372",
            "373",
            "383",
            "384",
            "392",
            "393",
            "394",
            "395",
            "396",
            "397",
            "400",
            "405",
            "406",
            "407",
            "408",
            "409",
            "410",
            "524",
            "525",
            "554",
            "555",
            "630",
            "631",
            "660",
            "661",
            "733",
            "734",
            "762",
            "763"
          ],
          "num": 175
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/math/linear/FieldMatrix.java b/src/main/java/org/apache/commons/math/linear/FieldMatrix.java\nindex 4721c87..3f19162 100644\n--- a/src/main/java/org/apache/commons/math/linear/FieldMatrix.java\n+++ b/src/main/java/org/apache/commons/math/linear/FieldMatrix.java\n@@ -34,112 +34,120 @@\n \n     /**\n      * Get the type of field elements of the matrix.\n-     * @return type of field elements of the matrix\n+     *\n+     * @return the type of field elements of the matrix.\n      */\n     Field\u003cT\u003e getField();\n \n     /**\n-     * Create a new FieldMatrix\u003cT\u003e of the same type as the instance with the supplied\n-     * row and column dimensions.\n+     * Create a new FieldMatrix\u003cT\u003e of the same type as the instance with\n+     * the supplied row and column dimensions.\n      *\n      * @param rowDimension  the number of rows in the new matrix\n      * @param columnDimension  the number of columns in the new matrix\n      * @return a new matrix of the same type as the instance\n-     * @throws IllegalArgumentException if row or column dimension is not positive\n+     * @throws org.apache.commons.math.exception.NotStrictlyPositiveException\n+     * if row or column dimension is not positive.\n      * @since 2.0\n      */\n     FieldMatrix\u003cT\u003e createMatrix(final int rowDimension, final int columnDimension);\n \n     /**\n-     * Returns a (deep) copy of this.\n+     * Make a (deep) copy of this.\n      *\n-     * @return matrix copy\n+     * @return a copy of this matrix.\n      */\n     FieldMatrix\u003cT\u003e copy();\n \n     /**\n      * Compute the sum of this and m.\n      *\n-     * @param m    matrix to be added\n-     * @return     this + m\n-     * @throws  IllegalArgumentException if m is not the same size as this\n+     * @param m Matrix to be added.\n+     * @return {@code this} + {@code m}.\n+     * @throws org.apache.commons.math.exception.MatrixDimensionMismatchException\n+     * if {@code m} is not the same size as this matrix.\n      */\n     FieldMatrix\u003cT\u003e add(FieldMatrix\u003cT\u003e m);\n \n     /**\n-     * Compute this minus m.\n+     * Subtract {@code m} from this matrix.\n      *\n-     * @param m    matrix to be subtracted\n-     * @return     this + m\n-     * @throws  IllegalArgumentException if m is not the same size as this\n+     * @param m Matrix to be subtracted.\n+     * @return {@code this} - {@code m}.\n+     * @throws org.apache.commons.math.exception.MatrixDimensionMismatchException\n+     * if {@code m} is not the same size as this matrix.\n      */\n     FieldMatrix\u003cT\u003e subtract(FieldMatrix\u003cT\u003e m);\n \n      /**\n-     * Returns the result of adding d to each entry of this.\n+     * Increment each entry of this matrix.\n      *\n-     * @param d    value to be added to each entry\n-     * @return     d + this\n+     * @param d Value to be added to each entry.\n+     * @return {@code d} + {@code this}.\n      */\n     FieldMatrix\u003cT\u003e scalarAdd(T d);\n \n     /**\n-     * Returns the result multiplying each entry of this by d.\n+     * Multiply each entry by {@code d}.\n      *\n-     * @param d    value to multiply all entries by\n-     * @return     d * this\n+     * @param d Value to multiply all entries by.\n+     * @return {@code d} * {@code this}.\n      */\n     FieldMatrix\u003cT\u003e scalarMultiply(T d);\n \n     /**\n-     * Returns the result of postmultiplying this by m.\n+     * Postmultiply this matrix by {@code m}.\n      *\n-     * @param m    matrix to postmultiply by\n-     * @return     this * m\n-     * @throws     IllegalArgumentException\n+     * @param m  Matrix to postmultiply by.\n+     * @return {@code this} * {@code m}.\n+     * @throws IllegalArgumentException\n      *             if columnDimension(this) !\u003d rowDimension(m)\n      */\n     FieldMatrix\u003cT\u003e multiply(FieldMatrix\u003cT\u003e m);\n \n     /**\n-     * Returns the result premultiplying this by \u003ccode\u003em\u003c/code\u003e.\n-     * @param m    matrix to premultiply by\n-     * @return     m * this\n-     * @throws     IllegalArgumentException\n-     *             if rowDimension(this) !\u003d columnDimension(m)\n+     * Premultiply this matrix by {@code m}.\n+     *\n+     * @param m Matrix to premultiply by.\n+     * @return {@code m} * {@code this}.\n+     * @throws org.apache.commons.math.exception.DimensionMismatchException\n+     * if the number of columns of {@code m} differ from the number of rows\n+     * of this matrix.\n      */\n     FieldMatrix\u003cT\u003e preMultiply(FieldMatrix\u003cT\u003e m);\n \n     /**\n      * Returns matrix entries as a two-dimensional array.\n      *\n-     * @return    2-dimensional array of entries\n+     * @return a 2-dimensional array of entries.\n      */\n     T[][] getData();\n \n     /**\n-     * Gets a submatrix. Rows and columns are indicated\n-     * counting from 0 to n-1.\n+     * Get a submatrix. Rows and columns are indicated\n+     * counting from 0 to n - 1.\n      *\n      * @param startRow Initial row index\n      * @param endRow Final row index (inclusive)\n      * @param startColumn Initial column index\n      * @param endColumn Final column index (inclusive)\n-     * @return The subMatrix containing the data of the\n-     *         specified rows and columns\n-     * @exception MatrixIndexException  if the indices are not valid\n+     * @return the matrix containing the data of the\n+     * specified rows and columns.\n+     * @throws org.apache.commons.math.exception.OutOfRangeException\n+     * if the indices are not valid.\n      */\n    FieldMatrix\u003cT\u003e getSubMatrix(int startRow, int endRow, int startColumn, int endColumn);\n \n    /**\n-    * Gets a submatrix. Rows and columns are indicated\n-    * counting from 0 to n-1.\n+    * Get a submatrix. Rows and columns are indicated\n+    * counting from 0 to n - 1.\n     *\n     * @param selectedRows Array of row indices.\n     * @param selectedColumns Array of column indices.\n-    * @return The subMatrix containing the data in the\n-    *         specified rows and columns\n-    * @exception MatrixIndexException if row or column selections are not valid\n+    * @return the matrix containing the data in the\n+    * specified rows and columns.\n+    * @throws org.apache.commons.math.exception.OutOfRangeException\n+    * if row or column selections are not valid.\n     */\n    FieldMatrix\u003cT\u003e getSubMatrix(int[] selectedRows, int[] selectedColumns);\n \n@@ -147,34 +155,36 @@\n     * Copy a submatrix. Rows and columns are indicated\n     * counting from 0 to n-1.\n     *\n-    * @param startRow Initial row index\n-    * @param endRow Final row index (inclusive)\n-    * @param startColumn Initial column index\n-    * @param endColumn Final column index (inclusive)\n+    * @param startRow Initial row index.\n+    * @param endRow Final row index (inclusive).\n+    * @param startColumn Initial column index.\n+    * @param endColumn Final column index (inclusive).\n     * @param destination The arrays where the submatrix data should be copied\n-    * (if larger than rows/columns counts, only the upper-left part will be used)\n-    * @exception MatrixIndexException if the indices are not valid\n-    * @exception IllegalArgumentException if the destination array is too small\n+    * (if larger than rows/columns counts, only the upper-left part will be used).\n+    * @throws org.apache.commons.math.exception.OutOfRangeException\n+    * if the indices are not valid.\n+    * @exception IllegalArgumentException if the destination array is too small.\n     */\n   void copySubMatrix(int startRow, int endRow, int startColumn, int endColumn,\n                      T[][] destination);\n \n   /**\n    * Copy a submatrix. Rows and columns are indicated\n-   * counting from 0 to n-1.\n+   * counting from 0 to n - 1.\n    *\n-    * @param selectedRows Array of row indices.\n-    * @param selectedColumns Array of column indices.\n-   * @param destination The arrays where the submatrix data should be copied\n+   * @param selectedRows Array of row indices.\n+   * @param selectedColumns Array of column indices.\n+   * @param destination Arrays where the submatrix data should be copied\n    * (if larger than rows/columns counts, only the upper-left part will be used)\n-   * @exception MatrixIndexException if the indices are not valid\n+   * @throws org.apache.commons.math.exception.OutOfRangeException\n+   * if the indices are not valid.\n    * @exception IllegalArgumentException if the destination array is too small\n    */\n   void copySubMatrix(int[] selectedRows, int[] selectedColumns, T[][] destination);\n \n    /**\n-    * Replace the submatrix starting at \u003ccode\u003erow, column\u003c/code\u003e using data in\n-    * the input \u003ccode\u003esubMatrix\u003c/code\u003e array. Indexes are 0-based.\n+    * Replace the submatrix starting at {@code (row, column)} using data in\n+    * the input {@code subMatrix} array. Indexes are 0-based.\n     * \u003cp\u003e\n     * Example:\u003cbr\u003e\n     * Starting with \u003cpre\u003e\n@@ -189,152 +199,165 @@\n     * 9  5  6  2\n     * \u003c/pre\u003e\u003c/p\u003e\n     *\n-    * @param subMatrix  array containing the submatrix replacement data\n-    * @param row  row coordinate of the top, left element to be replaced\n-    * @param column  column coordinate of the top, left element to be replaced\n-    * @throws MatrixIndexException  if subMatrix does not fit into this\n-    *    matrix from element in (row, column)\n-    * @throws IllegalArgumentException if \u003ccode\u003esubMatrix\u003c/code\u003e is not rectangular\n-    *  (not all rows have the same length) or empty\n-    * @throws NullPointerException if \u003ccode\u003esubMatrix\u003c/code\u003e is null\n+    * @param subMatrix Array containing the submatrix replacement data.\n+    * @param row Row coordinate of the top-left element to be replaced.\n+    * @param column Column coordinate of the top-left element to be replaced.\n+    * @throws org.apache.commons.math.exception.MatrixDimensionMismatchException\n+    * if {@code subMatrix} does not fit into this matrix from element in\n+    * {@code (row, column)}.\n+    * @throws org.apache.commons.math.exception.ZeroException if a row or column\n+    * of {@code subMatrix} is empty.\n+    * @throws org.apache.commons.math.exception.DimensionMismatchException\n+    * if {@code subMatrix} is not rectangular (not all rows have the same\n+    * length).\n+    * @throws org.apache.commons.math.exception.NullArgumentException\n+    * if {@code subMatrix} is {@code null}.\n     * @since 2.0\n     */\n   void setSubMatrix(T[][] subMatrix, int row, int column);\n \n    /**\n-    * Returns the entries in row number \u003ccode\u003erow\u003c/code\u003e\n-    * as a row matrix.  Row indices start at 0.\n+    * Get the entries in row number {@code row}\n+    * as a row matrix.\n     *\n-    * @param row the row to be fetched\n-    * @return row matrix\n-    * @throws MatrixIndexException if the specified row index is invalid\n+    * @param row Row to be fetched.\n+    * @return a row matrix.\n+    * @throws org.apache.commons.math.exception.OutOfRangeException\n+    * if the specified row index is invalid.\n     */\n    FieldMatrix\u003cT\u003e getRowMatrix(int row);\n \n    /**\n-    * Sets the entries in row number \u003ccode\u003erow\u003c/code\u003e\n-    * as a row matrix.  Row indices start at 0.\n+    * Set the entries in row number {@code row}\n+    * as a row matrix.\n     *\n-    * @param row the row to be set\n-    * @param matrix row matrix (must have one row and the same number of columns\n-    * as the instance)\n-    * @throws MatrixIndexException if the specified row index is invalid\n+    * @param row Row to be set.\n+    * @param matrix Row matrix (must have one row and the same number\n+    * of columns as the instance).\n+    * @throws org.apache.commons.math.exception.OutOfRangeException\n+    * if the specified row index is invalid.\n     * @throws org.apache.commons.math.exception.MatrixDimensionMismatchException\n     * if the matrix dimensions do not match one instance row.\n     */\n    void setRowMatrix(int row, FieldMatrix\u003cT\u003e matrix);\n \n    /**\n-    * Returns the entries in column number \u003ccode\u003ecolumn\u003c/code\u003e\n-    * as a column matrix.  Column indices start at 0.\n+    * Get the entries in column number {@code column}\n+    * as a column matrix.\n     *\n-    * @param column the column to be fetched\n-    * @return column matrix\n-    * @throws MatrixIndexException if the specified column index is invalid\n+    * @param column Column to be fetched.\n+    * @return a column matrix.\n+    * @throws org.apache.commons.math.exception.OutOfRangeException\n+    * if the specified column index is invalid.\n     */\n    FieldMatrix\u003cT\u003e getColumnMatrix(int column);\n \n    /**\n-    * Sets the entries in column number \u003ccode\u003ecolumn\u003c/code\u003e\n-    * as a column matrix.  Column indices start at 0.\n+    * Set the entries in column number {@code column}\n+    * as a column matrix.\n     *\n-    * @param column the column to be set\n-    * @param matrix column matrix (must have one column and the same number of rows\n-    * as the instance)\n-    * @throws MatrixIndexException if the specified column index is invalid\n+    * @param column Column to be set.\n+    * @param matrix column matrix (must have one column and the same\n+    * number of rows as the instance).\n+    * @throws org.apache.commons.math.exception.OutOfRangeException\n+    * if the specified column index is invalid.\n     * @throws org.apache.commons.math.exception.MatrixDimensionMismatchException\n     * if the matrix dimensions do not match one instance column.\n     */\n    void setColumnMatrix(int column, FieldMatrix\u003cT\u003e matrix);\n \n    /**\n-    * Returns the entries in row number \u003ccode\u003erow\u003c/code\u003e\n-    * as a vector.  Row indices start at 0.\n+    * Get the entries in row number {@code row}\n+    * as a vector.\n     *\n-    * @param row the row to be fetched\n-    * @return row vector\n-    * @throws MatrixIndexException if the specified row index is invalid\n+    * @param row Row to be fetched\n+    * @return a row vector.\n+    * @throws org.apache.commons.math.exception.OutOfRangeException\n+    * if the specified row index is invalid.\n     */\n    FieldVector\u003cT\u003e getRowVector(int row);\n \n    /**\n-    * Sets the entries in row number \u003ccode\u003erow\u003c/code\u003e\n-    * as a vector.  Row indices start at 0.\n+    * Set the entries in row number {@code row}\n+    * as a vector.\n     *\n-    * @param row the row to be set\n+    * @param row Row to be set.\n     * @param vector row vector (must have the same number of columns\n-    * as the instance)\n-    * @throws MatrixIndexException if the specified row index is invalid\n+    * as the instance).\n+    * @throws org.apache.commons.math.exception.OutOfRangeException\n+    * if the specified row index is invalid.\n     * @throws org.apache.commons.math.exception.MatrixDimensionMismatchException\n     * if the vector dimension does not match one instance row.\n     */\n    void setRowVector(int row, FieldVector\u003cT\u003e vector);\n \n    /**\n-    * Returns the entries in column number \u003ccode\u003ecolumn\u003c/code\u003e\n-    * as a vector.  Column indices start at 0.\n+    * Returns the entries in column number {@code column}\n+    * as a vector.\n     *\n-    * @param column the column to be fetched\n-    * @return column vector\n-    * @throws MatrixIndexException if the specified column index is invalid\n+    * @param column Column to be fetched.\n+    * @return a column vector.\n+    * @throws org.apache.commons.math.exception.OutOfRangeException\n+    * if the specified column index is invalid.\n     */\n    FieldVector\u003cT\u003e getColumnVector(int column);\n \n    /**\n-    * Sets the entries in column number \u003ccode\u003ecolumn\u003c/code\u003e\n-    * as a vector.  Column indices start at 0.\n+    * Set the entries in column number {@code column}\n+    * as a vector.\n     *\n-    * @param column the column to be set\n-    * @param vector column vector (must have the same number of rows as the instance)\n-    * @throws MatrixIndexException if the specified column index is invalid\n+    * @param column Column to be set.\n+    * @param vector Column vector (must have the same number of rows\n+    * as the instance).\n+    * @throws org.apache.commons.math.exception.OutOfRangeException\n+    * if the specified column index is invalid.\n     * @throws org.apache.commons.math.exception.MatrixDimensionMismatchException\n     * if the vector dimension does not match one instance column.\n     */\n    void setColumnVector(int column, FieldVector\u003cT\u003e vector);\n \n     /**\n-     * Returns the entries in row number \u003ccode\u003erow\u003c/code\u003e as an array.\n-     * \u003cp\u003e\n-     * Row indices start at 0.  A \u003ccode\u003eMatrixIndexException\u003c/code\u003e is thrown\n-     * unless {@code 0 \u003c\u003d row \u003c rowDimension}.\u003c/p\u003e\n+     * Get the entries in row number {@code row} as an array.\n      *\n-     * @param row the row to be fetched\n-     * @return array of entries in the row\n-     * @throws MatrixIndexException if the specified row index is not valid\n+     * @param row Row to be fetched.\n+     * @return array of entries in the row.\n+     * @throws org.apache.commons.math.exception.OutOfRangeException\n+     * if the specified row index is not valid.\n      */\n     T[] getRow(int row);\n \n     /**\n-     * Sets the entries in row number \u003ccode\u003erow\u003c/code\u003e\n-     * as a row matrix.  Row indices start at 0.\n+     * Set the entries in row number {@code row}\n+     * as a row matrix.\n      *\n-     * @param row the row to be set\n-     * @param array row matrix (must have the same number of columns as the instance)\n-     * @throws MatrixIndexException if the specified row index is invalid\n+     * @param row Row to be set.\n+     * @param array Row matrix (must have the same number of columns as\n+     * the instance).\n+     * @throws org.apache.commons.math.exception.OutOfRangeException\n+     * if the specified row index is invalid.\n      * @throws org.apache.commons.math.exception.MatrixDimensionMismatchException\n      * if the array size does not match one instance row.\n      */\n     void setRow(int row, T[] array);\n \n     /**\n-     * Returns the entries in column number \u003ccode\u003ecol\u003c/code\u003e as an array.\n-     * \u003cp\u003e\n-     * Column indices start at 0.  A \u003ccode\u003eMatrixIndexException\u003c/code\u003e is thrown\n-     * unless {@code 0 \u003c\u003d column \u003c columnDimension}.\u003c/p\u003e\n+     * Get the entries in column number {@code col} as an array.\n      *\n      * @param column the column to be fetched\n      * @return array of entries in the column\n-     * @throws MatrixIndexException if the specified column index is not valid\n+     * @throws org.apache.commons.math.exception.OutOfRangeException\n+     * if the specified column index is not valid.\n      */\n     T[] getColumn(int column);\n \n     /**\n-     * Sets the entries in column number \u003ccode\u003ecolumn\u003c/code\u003e\n-     * as a column matrix.  Column indices start at 0.\n+     * Set the entries in column number {@code column}\n+     * as a column matrix.\n      *\n      * @param column the column to be set\n      * @param array column array (must have the same number of rows as the instance)\n-     * @throws MatrixIndexException if the specified column index is invalid\n+     * @throws org.apache.commons.math.exception.OutOfRangeException\n+     * if the specified column index is invalid.\n      * @throws org.apache.commons.math.exception.MatrixDimensionMismatchException\n      * if the array size does not match one instance column.\n      */\n@@ -342,71 +365,49 @@\n \n     /**\n      * Returns the entry in the specified row and column.\n-     * \u003cp\u003e\n-     * Row and column indices start at 0 and must satisfy\n-     * \u003cul\u003e\n-     * \u003cli\u003e{@code 0 \u003c\u003d row \u003c rowDimension}\u003c/li\u003e\n-     * \u003cli\u003e{@code 0 \u003c\u003d column \u003c columnDimension}\u003c/li\u003e\n-     * \u003c/ul\u003e\n-     * otherwise a \u003ccode\u003eMatrixIndexException\u003c/code\u003e is thrown.\u003c/p\u003e\n      *\n      * @param row  row location of entry to be fetched\n      * @param column  column location of entry to be fetched\n      * @return matrix entry in row,column\n-     * @throws MatrixIndexException if the row or column index is not valid\n+     * @throws org.apache.commons.math.exception.OutOfRangeException\n+     * if the row or column index is not valid.\n      */\n     T getEntry(int row, int column);\n \n     /**\n      * Set the entry in the specified row and column.\n-     * \u003cp\u003e\n-     * Row and column indices start at 0 and must satisfy\n-     * \u003cul\u003e\n-     * \u003cli\u003e{@code 0 \u003c\u003d row \u003c rowDimension}\u003c/li\u003e\n-     * \u003cli\u003e{@code 0 \u003c\u003d column \u003c columnDimension}\u003c/li\u003e\n-     * \u003c/ul\u003e\n-     * otherwise a \u003ccode\u003eMatrixIndexException\u003c/code\u003e is thrown.\u003c/p\u003e\n      *\n      * @param row  row location of entry to be set\n      * @param column  column location of entry to be set\n      * @param value matrix entry to be set in row,column\n-     * @throws MatrixIndexException if the row or column index is not valid\n+     * @throws org.apache.commons.math.exception.OutOfRangeException\n+     * if the row or column index is not valid.\n      * @since 2.0\n      */\n     void setEntry(int row, int column, T value);\n \n     /**\n      * Change an entry in the specified row and column.\n-     * \u003cp\u003e\n-     * Row and column indices start at 0 and must satisfy\n-     * \u003cul\u003e\n-     * \u003cli\u003e{@code 0 \u003c\u003d row \u003c rowDimension}\u003c/li\u003e\n-     * \u003cli\u003e{@code 0 \u003c\u003d column \u003c columnDimension}\u003c/li\u003e\n-     * \u003c/ul\u003e\n-     * otherwise a \u003ccode\u003eMatrixIndexException\u003c/code\u003e is thrown.\u003c/p\u003e\n      *\n-     * @param row  row location of entry to be set\n-     * @param column  column location of entry to be set\n-     * @param increment value to add to the current matrix entry in row,column\n-     * @throws MatrixIndexException if the row or column index is not valid\n+     * @param row Row location of entry to be set.\n+     * @param column Column location of entry to be set.\n+     * @param increment Value to add to the current matrix entry in\n+     * {@code (row, column)}.\n+     * @throws org.apache.commons.math.exception.OutOfRangeException\n+     * if the row or column index is not valid.\n      * @since 2.0\n      */\n-    void addToEntry(int row, int column, T increment) throws MatrixIndexException;\n+    void addToEntry(int row, int column, T increment);\n \n     /**\n      * Change an entry in the specified row and column.\n-     * \u003cp\u003e\n-     * Row and column indices start at 0 and must satisfy\n-     * \u003cul\u003e\n-     * \u003cli\u003e{@code 0 \u003c\u003d row \u003c rowDimension}\u003c/li\u003e\n-     * \u003cli\u003e{@code 0 \u003c\u003d column \u003c columnDimension}\u003c/li\u003e\n-     * \u003c/ul\u003e\n-     * otherwise a \u003ccode\u003eMatrixIndexException\u003c/code\u003e is thrown.\u003c/p\u003e\n      *\n-     * @param row  row location of entry to be set\n-     * @param column  column location of entry to be set\n-     * @param factor multiplication factor for the current matrix entry in row,column\n-     * @throws MatrixIndexException if the row or column index is not valid\n+     * @param row Row location of entry to be set.\n+     * @param column Column location of entry to be set.\n+     * @param factor Multiplication factor for the current matrix entry\n+     * in {@code (row,column)}\n+     * @throws org.apache.commons.math.exception.OutOfRangeException\n+     * if the row or column index is not valid.\n      * @since 2.0\n      */\n     void multiplyEntry(int row, int column, T factor);\n@@ -520,7 +521,8 @@\n      * @param startColumn Initial column index\n      * @param endColumn Final column index\n      * @exception  MatrixVisitorException if the visitor cannot process an entry\n-     * @exception MatrixIndexException  if the indices are not valid\n+     * @throws org.apache.commons.math.exception.OutOfRangeException\n+     * if the indices are not valid.\n      * @see #walkInRowOrder(FieldMatrixChangingVisitor)\n      * @see #walkInRowOrder(FieldMatrixPreservingVisitor)\n      * @see #walkInRowOrder(FieldMatrixPreservingVisitor, int, int, int, int)\n@@ -549,7 +551,8 @@\n      * @param startColumn Initial column index\n      * @param endColumn Final column index\n      * @exception  MatrixVisitorException if the visitor cannot process an entry\n-     * @exception MatrixIndexException  if the indices are not valid\n+     * @throws org.apache.commons.math.exception.OutOfRangeException\n+     * if the indices are not valid.\n      * @see #walkInRowOrder(FieldMatrixChangingVisitor)\n      * @see #walkInRowOrder(FieldMatrixPreservingVisitor)\n      * @see #walkInRowOrder(FieldMatrixChangingVisitor, int, int, int, int)\n@@ -624,7 +627,8 @@\n      * @param startColumn Initial column index\n      * @param endColumn Final column index\n      * @exception  MatrixVisitorException if the visitor cannot process an entry\n-     * @exception MatrixIndexException  if the indices are not valid\n+     * @throws org.apache.commons.math.exception.OutOfRangeException\n+     * if the indices are not valid.\n      * @see #walkInRowOrder(FieldMatrixChangingVisitor)\n      * @see #walkInRowOrder(FieldMatrixPreservingVisitor)\n      * @see #walkInRowOrder(FieldMatrixChangingVisitor, int, int, int, int)\n@@ -653,7 +657,8 @@\n      * @param startColumn Initial column index\n      * @param endColumn Final column index\n      * @exception  MatrixVisitorException if the visitor cannot process an entry\n-     * @exception MatrixIndexException  if the indices are not valid\n+     * @throws org.apache.commons.math.exception.OutOfRangeException\n+     * if the indices are not valid.\n      * @see #walkInRowOrder(FieldMatrixChangingVisitor)\n      * @see #walkInRowOrder(FieldMatrixPreservingVisitor)\n      * @see #walkInRowOrder(FieldMatrixChangingVisitor, int, int, int, int)\n@@ -725,7 +730,8 @@\n      * @param startColumn Initial column index\n      * @param endColumn Final column index (inclusive)\n      * @exception  MatrixVisitorException if the visitor cannot process an entry\n-     * @exception MatrixIndexException  if the indices are not valid\n+     * @throws org.apache.commons.math.exception.OutOfRangeException\n+     * if the indices are not valid.\n      * @see #walkInRowOrder(FieldMatrixChangingVisitor)\n      * @see #walkInRowOrder(FieldMatrixPreservingVisitor)\n      * @see #walkInRowOrder(FieldMatrixChangingVisitor, int, int, int, int)\n@@ -753,7 +759,8 @@\n      * @param startColumn Initial column index\n      * @param endColumn Final column index (inclusive)\n      * @exception  MatrixVisitorException if the visitor cannot process an entry\n-     * @exception MatrixIndexException  if the indices are not valid\n+     * @throws org.apache.commons.math.exception.OutOfRangeException\n+     * if the indices are not valid.\n      * @see #walkInRowOrder(FieldMatrixChangingVisitor)\n      * @see #walkInRowOrder(FieldMatrixPreservingVisitor)\n      * @see #walkInRowOrder(FieldMatrixChangingVisitor, int, int, int, int)\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [2058,2149]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Javadoc [2182,2454]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Javadoc [2502,2785]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Javadoc [2839,2991]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Javadoc [3032,3182]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Javadoc [3228,3480]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Javadoc [3533,3854]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Javadoc [4649,5056]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Javadoc [7874,8138]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Javadoc [8184,8664]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Javadoc [8723,9008]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Javadoc [9060,9564]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Javadoc [9629,9888]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Javadoc [10458,10740]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Javadoc [10792,11275]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Javadoc [11341,11619]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Javadoc [11650,12123]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Javadoc [12166,12461]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Javadoc [13035,13386]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Javadoc [13856,14271]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Javadoc [14332,14752]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [2274,2307]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [2315,2446]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [2513,2549]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [2605,2638]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [2646,2777]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [2850,2886]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [2950,2983]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [3043,3076]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [3141,3174]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [3239,3277]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [3336,3369]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [3544,3581]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [3638,3671]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [3679,3846]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [4659,4738]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [4853,4932]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [4939,5049]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [7214,7390]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [7397,7508]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [7515,7672]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [7679,7786]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [7884,7948]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [7997,8018]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [8025,8131]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [8194,8258]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TagElement [8303,8401]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [8408,8514]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [8733,8806]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [8861,8885]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [8892,9001]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [9070,9143]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TagElement [9194,9295]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [9302,9411]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [9639,9699]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [9747,9768]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [9775,9881]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [9944,10004]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [10142,10248]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [10468,10538]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [10593,10617]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [10624,10733]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [10802,10868]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TagElement [10919,11005]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [11012,11121]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [11352,11406]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [11458,11494]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [11502,11611]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [11661,11726]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TagElement [11774,11860]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [11868,11975]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [12177,12234]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [12341,12453]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [12509,12583]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [12725,12835]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TagElement [13046,13096]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [13269,13378]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TagElement [13440,13486]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [13666,13775]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TagElement [13867,13915]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TagElement [14038,14128]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [14136,14245]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TagElement [14343,14391]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TagElement [14514,14609]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [14617,14726]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "QualifiedName: org.apache.commons.math.exception.NotStrictlyPositiveException [1829,1891]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "QualifiedName: org.apache.commons.math.exception.OutOfRangeException [4456,4509]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "QualifiedName: org.apache.commons.math.exception.OutOfRangeException [5598,5651]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "QualifiedName: org.apache.commons.math.exception.OutOfRangeException [6260,6313]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [6566,6587]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: the input  [6608,6618]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [6618,6635]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement:  array. Indexes are 0-based. [6635,6663]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement:  Row matrix (must have one row and the same number [8316,8366]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: of columns as the instance). [8373,8401]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement:  column matrix (must have one column and the same [9207,9256]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: number of rows as the instance). [9263,9295]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement:  Column vector (must have the same number of rows [10932,10981]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: as the instance). [10988,11005]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement:  Row matrix (must have the same number of columns as [11786,11838]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: the instance). [11846,11860]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement:  Value to add to the current matrix entry in [14054,14098]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [14106,14127]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: . [14127,14128]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement:  Multiplication factor for the current matrix entry [14527,14578]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: in  [14586,14589]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [14589,14609]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "QualifiedName: org.apache.commons.math.exception.OutOfRangeException [19667,19720]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "QualifiedName: org.apache.commons.math.exception.OutOfRangeException [21370,21423]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "QualifiedName: org.apache.commons.math.exception.OutOfRangeException [25830,25883]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "QualifiedName: org.apache.commons.math.exception.OutOfRangeException [27547,27600]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "QualifiedName: org.apache.commons.math.exception.OutOfRangeException [31944,31997]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "QualifiedName: org.apache.commons.math.exception.OutOfRangeException [33650,33703]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: IllegalArgumentException [1817,1841]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "Javadoc [2000,2083]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [2210,2230]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [2238,2305]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Javadoc [2116,2313]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [2372,2393]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [2451,2471]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [2479,2546]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Javadoc [2361,2554]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [2619,2672]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [2738,2758]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Javadoc [2608,2766]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [2818,2873]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [2940,2960]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Javadoc [2807,2968]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [3025,3073]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [3133,3153]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Javadoc [3014,3268]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [3332,3389]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [3441,3461]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [3469,3568]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Javadoc [3321,3576]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: MatrixIndexException [4190,4210]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [4353,4431]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [4546,4635]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [4642,4715]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Javadoc [4343,4722]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: MatrixIndexException [5262,5282]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: MatrixIndexException [5890,5910]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [6815,6926]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [6933,7062]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [7069,7131]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [7229,7327]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [7379,7397]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [7404,7470]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Javadoc [7219,7477]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [7533,7628]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement:  row matrix (must have one row and the same number of columns [7689,7750]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: as the instance) [7757,7773]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TagElement [7676,7773]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [7780,7846]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Javadoc [7523,7996]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [8065,8175]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [8233,8254]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [8261,8330]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Javadoc [8055,8337]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [8399,8506]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement:  column matrix (must have one column and the same number of rows [8573,8637]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: as the instance) [8644,8660]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TagElement [8560,8660]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [8667,8736]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Javadoc [8389,8889]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [8964,9058]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [9110,9128]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [9135,9201]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Javadoc [8954,9208]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [9264,9355]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [9495,9561]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [9781,9884]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [9942,9963]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [9970,10039]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Javadoc [9771,10046]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [10108,10208]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement:  column vector (must have the same number of rows as the instance) [10275,10341]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TagElement [10262,10341]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [10348,10417]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Javadoc [10098,10571]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [10648,10851]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [10906,10941]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [10949,11017]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Javadoc [10637,11025]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [11067,11163]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement:  row matrix (must have the same number of columns as the instance) [11226,11292]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TagElement [11214,11292]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [11300,11366]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Javadoc [11056,11514]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [11568,11783]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [11890,11961]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Javadoc [11557,11969]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [12017,12125]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [12267,12336]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: \u003cp\u003e [12605,12608]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: Row and column indices start at 0 and must satisfy [12616,12666]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: \u003cul\u003e [12674,12678]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: \u003cli\u003e [12686,12690]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [12690,12721]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: \u003c/li\u003e [12721,12726]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: \u003cli\u003e [12734,12738]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [12738,12775]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: \u003c/li\u003e [12775,12780]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: \u003c/ul\u003e [12788,12793]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: otherwise a \u003ccode\u003eMatrixIndexException\u003c/code\u003e is thrown.\u003c/p\u003e [12801,12861]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TagElement [12547,12861]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [13034,13102]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Javadoc [12536,13110]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: \u003cp\u003e [13218,13221]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: Row and column indices start at 0 and must satisfy [13229,13279]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: \u003cul\u003e [13287,13291]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: \u003cli\u003e [13299,13303]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [13303,13334]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: \u003c/li\u003e [13334,13339]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: \u003cli\u003e [13347,13351]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [13351,13388]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: \u003c/li\u003e [13388,13393]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: \u003c/ul\u003e [13401,13406]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: otherwise a \u003ccode\u003eMatrixIndexException\u003c/code\u003e is thrown.\u003c/p\u003e [13414,13474]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TagElement [13164,13474]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [13654,13722]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: \u003cp\u003e [13870,13873]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: Row and column indices start at 0 and must satisfy [13881,13931]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: \u003cul\u003e [13939,13943]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: \u003cli\u003e [13951,13955]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [13955,13986]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: \u003c/li\u003e [13986,13991]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: \u003cli\u003e [13999,14003]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [14003,14040]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: \u003c/li\u003e [14040,14045]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: \u003c/ul\u003e [14053,14058]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: otherwise a \u003ccode\u003eMatrixIndexException\u003c/code\u003e is thrown.\u003c/p\u003e [14066,14126]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TagElement [13814,14126]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement:  value to add to the current matrix entry in row,column [14265,14320]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TagElement [14249,14320]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [14328,14396]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Javadoc [13803,14422]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [14484,14504]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: \u003cp\u003e [14578,14581]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: Row and column indices start at 0 and must satisfy [14589,14639]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: \u003cul\u003e [14647,14651]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: \u003cli\u003e [14659,14663]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [14663,14694]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: \u003c/li\u003e [14694,14699]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: \u003cli\u003e [14707,14711]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [14711,14748]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: \u003c/li\u003e [14748,14753]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: \u003c/ul\u003e [14761,14766]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: otherwise a \u003ccode\u003eMatrixIndexException\u003c/code\u003e is thrown.\u003c/p\u003e [14774,14834]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TagElement [14522,14834]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement:  multiplication factor for the current matrix entry in row,column [14970,15035]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TagElement [14957,15035]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [15043,15111]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Javadoc [14511,15137]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: MatrixIndexException [20055,20075]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: MatrixIndexException [21721,21741]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: MatrixIndexException [26144,26164]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: MatrixIndexException [27824,27844]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: MatrixIndexException [32184,32204]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: MatrixIndexException [33853,33873]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/math/linear/FieldVector.java",
        "src/main/java/org/apache/commons/math/linear/FieldVector.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "getEntry",
            "setEntry",
            "setSubVector",
            "getSubVector",
            "setSubVector"
          ],
          "num": 5
        },
        {
          "qualified_names": [
            "getEntry",
            "setSubVector",
            "getSubVector",
            "setEntry",
            "setSubVector"
          ],
          "num": 5
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "261",
            "262",
            "263",
            "264",
            "265",
            "266",
            "267",
            "270",
            "271",
            "277",
            "278",
            "281",
            "282",
            "316",
            "317",
            "319",
            "320",
            "326",
            "327",
            "330",
            "331",
            "337",
            "338",
            "341",
            "342"
          ],
          "num": 25
        },
        {
          "qualified_names": [
            "261",
            "262",
            "263",
            "264",
            "265",
            "268",
            "274",
            "275",
            "278",
            "312",
            "313",
            "315",
            "321",
            "322",
            "325",
            "331",
            "332",
            "335"
          ],
          "num": 18
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/math/linear/FieldVector.java b/src/main/java/org/apache/commons/math/linear/FieldVector.java\nindex 2622157..90fc29c 100644\n--- a/src/main/java/org/apache/commons/math/linear/FieldVector.java\n+++ b/src/main/java/org/apache/commons/math/linear/FieldVector.java\n@@ -258,28 +258,24 @@\n \n     /**\n      * Returns the entry in the specified index.\n-     * \u003cp\u003e\n-     * The index start at 0 and must be lesser than the size,\n-     * otherwise a {@link MatrixIndexException} is thrown.\n-     * \u003c/p\u003e\n-     * @param index  index location of entry to be fetched\n-     * @return vector entry at index\n-     * @throws MatrixIndexException if the index is not valid\n+     *\n+     * @param index Index location of entry to be fetched.\n+     * @return the vector entry at {@code index}.\n+     * @throws org.apache.commons.math.exception.OutOfRangeException if the\n+     * index is not valid.\n      * @see #setEntry(int, FieldElement)\n      */\n-    T getEntry(int index)\n-        throws MatrixIndexException;\n+    T getEntry(int index);\n \n     /**\n      * Set a single element.\n      * @param index element index.\n      * @param value new value for the element.\n-     * @exception MatrixIndexException if the index is\n-     * inconsistent with vector size\n+     * @throws org.apache.commons.math.exception.OutOfRangeException\n+     * if the index is inconsistent with vector size.\n      * @see #getEntry(int)\n      */\n-    void setEntry(int index, T value)\n-        throws MatrixIndexException;\n+    void setEntry(int index, T value);\n \n     /**\n      * Returns the size of the vector.\n@@ -313,33 +309,30 @@\n      * @param index index of first element.\n      * @param n number of elements to be retrieved.\n      * @return a vector containing n elements.\n-     * @exception MatrixIndexException if the index is\n-     * inconsistent with vector size\n+     * @throws org.apache.commons.math.exception.OutOfRangeException\n+     * if the index is inconsistent with vector size.\n      */\n-    FieldVector\u003cT\u003e getSubVector(int index, int n)\n-        throws MatrixIndexException;\n+    FieldVector\u003cT\u003e getSubVector(int index, int n);\n \n     /**\n      * Set a set of consecutive elements.\n      * @param index index of first element to be set.\n      * @param v vector containing the values to set.\n-     * @exception MatrixIndexException if the index is\n-     * inconsistent with vector size\n+     * @throws org.apache.commons.math.exception.OutOfRangeException\n+     * if the index is inconsistent with vector size.\n      * @see #setSubVector(int, FieldElement[])\n      */\n-    void setSubVector(int index, FieldVector\u003cT\u003e v)\n-        throws MatrixIndexException;\n+    void setSubVector(int index, FieldVector\u003cT\u003e v);\n \n     /**\n      * Set a set of consecutive elements.\n      * @param index index of first element to be set.\n      * @param v vector containing the values to set.\n-     * @exception MatrixIndexException if the index is\n-     * inconsistent with vector size\n+     * @throws org.apache.commons.math.exception.OutOfRangeException\n+     * if the index is inconsistent with vector size.\n      * @see #setSubVector(int, FieldVector)\n      */\n-    void setSubVector(int index, T[] v)\n-        throws MatrixIndexException;\n+    void setSubVector(int index, T[] v);\n \n     /**\n      * Set all elements to a single value.\n",
      "operations": [
        {
          "type": "insert-node",
          "from": "",
          "to": "TagElement [8994,9035]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [9109,9151]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [9159,9254]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "QualifiedName: org.apache.commons.math.exception.OutOfRangeException [9466,9519]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "QualifiedName: org.apache.commons.math.exception.OutOfRangeException [10509,10562]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "QualifiedName: org.apache.commons.math.exception.OutOfRangeException [10849,10902]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "QualifiedName: org.apache.commons.math.exception.OutOfRangeException [11237,11290]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: \u003cp\u003e [9043,9046]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: The index start at 0 and must be lesser than the size, [9054,9108]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: otherwise a  [9116,9128]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [9128,9156]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement:  is thrown. [9156,9167]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: \u003c/p\u003e [9175,9179]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TagElement [8994,9179]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [9246,9275]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [9283,9337]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [9428,9448]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: MatrixIndexException [9588,9608]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: inconsistent with vector size [9632,9661]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [9750,9770]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: MatrixIndexException [10636,10656]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: inconsistent with vector size [10680,10709]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [10783,10803]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: MatrixIndexException [10981,11001]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: inconsistent with vector size [11025,11054]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [11176,11196]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: MatrixIndexException [11374,11394]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: inconsistent with vector size [11418,11447]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [11555,11575]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/math/linear/MatrixIndexException.java",
        "src/main/java/org/apache/commons/math/linear/MatrixIndexException.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [],
          "num": 0
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "27"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "28",
            "29"
          ],
          "num": 2
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/math/linear/MatrixIndexException.java b/src/main/java/org/apache/commons/math/linear/MatrixIndexException.java\nindex 1fca8d8..e1e18c8 100644\n--- a/src/main/java/org/apache/commons/math/linear/MatrixIndexException.java\n+++ b/src/main/java/org/apache/commons/math/linear/MatrixIndexException.java\n@@ -25,6 +25,8 @@\n  * Thrown when an operation addresses a matrix coordinate (row, col)\n  * which is outside of the dimensions of a matrix.\n  * @version $Revision$ $Date$\n+ * @deprecated in 2.2 (to be removed in 3.0). Please use the exceptions in package\n+ * {@link org.apache.commons.math.exception}.\n  */\n public class MatrixIndexException extends MathRuntimeException {\n \n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [1179,1304]"
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/math/linear/MatrixUtils.java",
        "src/main/java/org/apache/commons/math/linear/MatrixUtils.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "createBigIdentityMatrix",
            "createRowBigMatrix",
            "createRowBigMatrix",
            "createRowBigMatrix",
            "createRealVector",
            "createFieldMatrix",
            "createRowFieldMatrix",
            "createRealDiagonalMatrix",
            "createColumnFieldMatrix",
            "createColumnBigMatrix",
            "checkSubMatrixIndex",
            "createColumnRealMatrix",
            "checkSubMatrixIndex",
            "createRowRealMatrix",
            "createBigMatrix",
            "createFieldVector",
            "createColumnBigMatrix",
            "createColumnBigMatrix",
            "createBigMatrix",
            "createRealMatrix",
            "checkColumnIndex",
            "checkRowIndex",
            "createBigMatrix",
            "createBigMatrix"
          ],
          "num": 24
        },
        {
          "qualified_names": [
            "createFieldVector",
            "createColumnFieldMatrix",
            "checkMatrixIndex",
            "checkSubMatrixIndex",
            "createRealMatrix",
            "createColumnRealMatrix",
            "checkSubMatrixIndex",
            "checkColumnIndex",
            "createRealVector",
            "createRowRealMatrix",
            "createRowFieldMatrix",
            "checkRowIndex",
            "createFieldMatrix",
            "createRealIdentityMatrix"
          ],
          "num": 14
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "24",
            "100",
            "101",
            "102",
            "103",
            "121",
            "122",
            "123",
            "124",
            "125",
            "175",
            "176",
            "177",
            "178",
            "179",
            "180",
            "181",
            "182",
            "183",
            "184",
            "185",
            "186",
            "187",
            "188",
            "189",
            "190",
            "191",
            "192",
            "193",
            "194",
            "230",
            "231",
            "232",
            "233",
            "234",
            "235",
            "236",
            "237",
            "238",
            "239",
            "240",
            "241",
            "242",
            "243",
            "244",
            "245",
            "246",
            "247",
            "248",
            "249",
            "250",
            "251",
            "252",
            "253",
            "254",
            "255",
            "256",
            "257",
            "258",
            "259",
            "260",
            "261",
            "262",
            "263",
            "264",
            "265",
            "266",
            "267",
            "268",
            "269",
            "270",
            "271",
            "272",
            "273",
            "274",
            "275",
            "276",
            "277",
            "278",
            "279",
            "280",
            "281",
            "282",
            "283",
            "284",
            "285",
            "286",
            "287",
            "288",
            "289",
            "290",
            "291",
            "292",
            "293",
            "294",
            "295",
            "296",
            "297",
            "298",
            "299",
            "304",
            "305",
            "317",
            "318",
            "325",
            "330",
            "331",
            "343",
            "349",
            "350",
            "356",
            "366",
            "367",
            "368",
            "369",
            "370",
            "371",
            "372",
            "373",
            "374",
            "375",
            "376",
            "377",
            "378",
            "379",
            "380",
            "381",
            "382",
            "383",
            "384",
            "385",
            "386",
            "387",
            "388",
            "389",
            "390",
            "391",
            "392",
            "393",
            "394",
            "395",
            "396",
            "397",
            "398",
            "399",
            "400",
            "401",
            "402",
            "403",
            "404",
            "405",
            "406",
            "407",
            "408",
            "409",
            "410",
            "411",
            "412",
            "413",
            "414",
            "415",
            "416",
            "417",
            "418",
            "419",
            "420",
            "421",
            "422",
            "423",
            "429",
            "430",
            "448",
            "449",
            "465",
            "466",
            "468",
            "469",
            "470",
            "471",
            "472",
            "474",
            "475",
            "476",
            "477",
            "478",
            "479",
            "480",
            "481",
            "482",
            "483",
            "484",
            "485",
            "486",
            "487",
            "488",
            "489",
            "490",
            "491",
            "492",
            "493",
            "494",
            "495",
            "496",
            "497",
            "498",
            "499",
            "500",
            "501",
            "502",
            "503",
            "504",
            "505",
            "506",
            "507",
            "508",
            "509",
            "510",
            "511",
            "512",
            "513",
            "514",
            "515",
            "516",
            "517",
            "518",
            "519",
            "520",
            "521",
            "526",
            "527",
            "528",
            "531",
            "532",
            "533",
            "539",
            "540",
            "541",
            "543",
            "544",
            "546",
            "553",
            "555",
            "556",
            "557",
            "558",
            "559",
            "560",
            "567",
            "568",
            "569",
            "574",
            "575",
            "576",
            "586",
            "589",
            "592",
            "593",
            "594",
            "595",
            "596",
            "597",
            "598"
          ],
          "num": 262
        },
        {
          "qualified_names": [
            "29",
            "30",
            "31",
            "32",
            "103",
            "104",
            "105",
            "106",
            "107",
            "111",
            "112",
            "113",
            "114",
            "129",
            "130",
            "131",
            "132",
            "133",
            "134",
            "139",
            "140",
            "141",
            "142",
            "161",
            "227",
            "228",
            "231",
            "232",
            "233",
            "243",
            "244",
            "247",
            "248",
            "249",
            "254",
            "259",
            "260",
            "263",
            "264",
            "265",
            "275",
            "281",
            "282",
            "286",
            "287",
            "288",
            "291",
            "306",
            "307",
            "310",
            "311",
            "312",
            "328",
            "329",
            "333",
            "334",
            "335",
            "348",
            "350",
            "351",
            "352",
            "353",
            "354",
            "356",
            "357",
            "358",
            "359",
            "364",
            "365",
            "366",
            "367",
            "370",
            "371",
            "372",
            "373",
            "379",
            "380",
            "381",
            "382",
            "384",
            "386",
            "393",
            "395",
            "396",
            "397",
            "398",
            "399",
            "400",
            "401",
            "402",
            "409",
            "410",
            "411",
            "416",
            "417",
            "418",
            "428",
            "431",
            "432",
            "433",
            "434",
            "435",
            "438",
            "439",
            "440",
            "441",
            "442",
            "443",
            "444",
            "445",
            "446",
            "447",
            "448",
            "449",
            "450"
          ],
          "num": 115
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/math/linear/MatrixUtils.java b/src/main/java/org/apache/commons/math/linear/MatrixUtils.java\nindex 7cf7466..200de15 100644\n--- a/src/main/java/org/apache/commons/math/linear/MatrixUtils.java\n+++ b/src/main/java/org/apache/commons/math/linear/MatrixUtils.java\n@@ -21,12 +21,15 @@\n import java.io.ObjectInputStream;\n import java.io.ObjectOutputStream;\n import java.lang.reflect.Array;\n-import java.math.BigDecimal;\n import java.util.Arrays;\n \n import org.apache.commons.math.Field;\n import org.apache.commons.math.FieldElement;\n import org.apache.commons.math.MathRuntimeException;\n+import org.apache.commons.math.exception.OutOfRangeException;\n+import org.apache.commons.math.exception.ZeroException;\n+import org.apache.commons.math.exception.NumberIsTooSmallException;\n+import org.apache.commons.math.exception.NullArgumentException;\n import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.fraction.BigFraction;\n import org.apache.commons.math.fraction.Fraction;\n@@ -97,13 +100,18 @@\n      *\n      * @param data input array\n      * @return  RealMatrix containing the values of the array\n-     * @throws IllegalArgumentException if \u003ccode\u003edata\u003c/code\u003e is not rectangular\n-     *  (not all rows have the same length) or empty\n-     * @throws NullPointerException if either \u003ccode\u003edata\u003c/code\u003e or\n-     * \u003ccode\u003edata[0]\u003c/code\u003e is null\n+     * @throws org.apache.commons.math.exception.DimensionMismatchException\n+     * if {@code data} is not rectangular (not all rows have the same length).\n+     * @throws ZeroException if a row or column is empty.\n+     * @throws NullArgumentException if either {@code data} or {@code data[0]}\n+     * is {@code null}.\n      * @see #createRealMatrix(int, int)\n      */\n     public static RealMatrix createRealMatrix(double[][] data) {\n+        if (data \u003d\u003d null ||\n+            data[0] \u003d\u003d null) {\n+            throw new NullArgumentException();\n+        }\n         return (data.length * data[0].length \u003c\u003d 4096) ?\n                 new Array2DRowRealMatrix(data) : new BlockRealMatrix(data);\n     }\n@@ -118,15 +126,20 @@\n      * \u003cp\u003eThe input array is copied, not referenced.\u003c/p\u003e\n      * @param \u003cT\u003e the type of the field elements\n      * @param data input array\n-     * @return  RealMatrix containing the values of the array\n-     * @throws IllegalArgumentException if \u003ccode\u003edata\u003c/code\u003e is not rectangular\n-     *  (not all rows have the same length) or empty\n-     * @throws NullPointerException if either \u003ccode\u003edata\u003c/code\u003e or\n-     * \u003ccode\u003edata[0]\u003c/code\u003e is null\n+     * @return a matrix containing the values of the array.\n+     * @throws org.apache.commons.math.exception.DimensionMismatchException\n+     * if {@code data} is not rectangular (not all rows have the same length).\n+     * @throws ZeroException if a row or column is empty.\n+     * @throws NullArgumentException if either {@code data} or {@code data[0]}\n+     * is {@code null}.\n      * @see #createFieldMatrix(Field, int, int)\n      * @since 2.0\n      */\n     public static \u003cT extends FieldElement\u003cT\u003e\u003e FieldMatrix\u003cT\u003e createFieldMatrix(T[][] data) {\n+        if (data \u003d\u003d null ||\n+            data[0] \u003d\u003d null) {\n+            throw new NullArgumentException();\n+        }\n         return (data.length * data[0].length \u003c\u003d 4096) ?\n                 new Array2DRowFieldMatrix\u003cT\u003e(data) : new BlockFieldMatrix\u003cT\u003e(data);\n     }\n@@ -172,26 +185,6 @@\n     }\n \n     /**\n-     * Returns \u003ccode\u003edimension x dimension\u003c/code\u003e identity matrix.\n-     *\n-     * @param dimension dimension of identity matrix to generate\n-     * @return identity matrix\n-     * @throws IllegalArgumentException if dimension is not positive\n-     * @since 1.1\n-     * @deprecated since 2.0, replaced by {@link #createFieldIdentityMatrix(Field, int)}\n-     */\n-    @Deprecated\n-    public static BigMatrix createBigIdentityMatrix(int dimension) {\n-        final BigDecimal[][] d \u003d new BigDecimal[dimension][dimension];\n-        for (int row \u003d 0; row \u003c dimension; row++) {\n-            final BigDecimal[] dRow \u003d d[row];\n-            Arrays.fill(dRow, BigMatrixImpl.ZERO);\n-            dRow[row] \u003d BigMatrixImpl.ONE;\n-        }\n-        return new BigMatrixImpl(d, false);\n-    }\n-\n-    /**\n      * Returns a diagonal matrix with specified elements.\n      *\n      * @param diagonal diagonal elements of the matrix (the array elements\n@@ -227,84 +220,17 @@\n     }\n \n     /**\n-     * Returns a {@link BigMatrix} whose entries are the the values in the\n-     * the input array.  The input array is copied, not referenced.\n-     *\n-     * @param data input array\n-     * @return  RealMatrix containing the values of the array\n-     * @throws IllegalArgumentException if \u003ccode\u003edata\u003c/code\u003e is not rectangular\n-     *  (not all rows have the same length) or empty\n-     * @throws NullPointerException if data is null\n-     * @deprecated since 2.0 replaced by {@link #createFieldMatrix(FieldElement[][])}\n-     */\n-    @Deprecated\n-    public static BigMatrix createBigMatrix(double[][] data) {\n-        return new BigMatrixImpl(data);\n-    }\n-\n-    /**\n-     * Returns a {@link BigMatrix} whose entries are the the values in the\n-     * the input array.  The input array is copied, not referenced.\n-     *\n-     * @param data input array\n-     * @return  RealMatrix containing the values of the array\n-     * @throws IllegalArgumentException if \u003ccode\u003edata\u003c/code\u003e is not rectangular\n-     *  (not all rows have the same length) or empty\n-     * @throws NullPointerException if data is null\n-     * @deprecated since 2.0 replaced by {@link #createFieldMatrix(FieldElement[][])}\n-     */\n-    @Deprecated\n-    public static BigMatrix createBigMatrix(BigDecimal[][] data) {\n-        return new BigMatrixImpl(data);\n-    }\n-\n-    /**\n-     * Returns a {@link BigMatrix} whose entries are the the values in the\n-     * the input array.\n-     * \u003cp\u003eIf an array is built specially in order to be embedded in a\n-     * BigMatrix and not used directly, the \u003ccode\u003ecopyArray\u003c/code\u003e may be\n-     * set to \u003ccode\u003efalse\u003c/code. This will prevent the copying and improve\n-     * performance as no new array will be built and no data will be copied.\u003c/p\u003e\n-     * @param data data for new matrix\n-     * @param copyArray if true, the input array will be copied, otherwise\n-     * it will be referenced\n-     * @return  BigMatrix containing the values of the array\n-     * @throws IllegalArgumentException if \u003ccode\u003edata\u003c/code\u003e is not rectangular\n-     *  (not all rows have the same length) or empty\n-     * @throws NullPointerException if \u003ccode\u003edata\u003c/code\u003e is null\n-     * @see #createRealMatrix(double[][])\n-     * @deprecated since 2.0 replaced by {@link #createFieldMatrix(FieldElement[][])}\n-     */\n-    @Deprecated\n-    public static BigMatrix createBigMatrix(BigDecimal[][] data, boolean copyArray) {\n-        return new BigMatrixImpl(data, copyArray);\n-    }\n-\n-    /**\n-     * Returns a {@link BigMatrix} whose entries are the the values in the\n-     * the input array.  The input array is copied, not referenced.\n-     *\n-     * @param data input array\n-     * @return  RealMatrix containing the values of the array\n-     * @throws IllegalArgumentException if \u003ccode\u003edata\u003c/code\u003e is not rectangular\n-     *  (not all rows have the same length) or empty\n-     * @throws NullPointerException if data is null\n-     * @deprecated since 2.0 replaced by {@link #createFieldMatrix(FieldElement[][])}\n-     */\n-    @Deprecated\n-    public static BigMatrix createBigMatrix(String[][] data) {\n-        return new BigMatrixImpl(data);\n-    }\n-\n-    /**\n      * Creates a {@link RealVector} using the data from the input array.\n      *\n      * @param data the input data\n      * @return a data.length RealVector\n-     * @throws IllegalArgumentException if \u003ccode\u003edata\u003c/code\u003e is empty\n-     * @throws NullPointerException if \u003ccode\u003edata\u003c/code\u003eis null\n+     * @throws ZeroException if {@code data} is empty.\n+     * @throws NullArgumentException if {@code data} is {@code null}.\n      */\n     public static RealVector createRealVector(double[] data) {\n+        if (data \u003d\u003d null) {\n+            throw new NullArgumentException();\n+        }\n         return new ArrayRealVector(data, true);\n     }\n \n@@ -314,23 +240,29 @@\n      * @param \u003cT\u003e the type of the field elements\n      * @param data the input data\n      * @return a data.length FieldVector\n-     * @throws IllegalArgumentException if \u003ccode\u003edata\u003c/code\u003e is empty\n-     * @throws NullPointerException if \u003ccode\u003edata\u003c/code\u003eis null\n+     * @throws ZeroException if {@code data} is empty.\n+     * @throws NullArgumentException if {@code data} is {@code null}.\n      */\n     public static \u003cT extends FieldElement\u003cT\u003e\u003e FieldVector\u003cT\u003e createFieldVector(final T[] data) {\n+        if (data \u003d\u003d null) {\n+            throw new NullArgumentException();\n+        }\n         return new ArrayFieldVector\u003cT\u003e(data, true);\n     }\n \n     /**\n-     * Creates a row {@link RealMatrix} using the data from the input\n+     * Create a row {@link RealMatrix} using the data from the input\n      * array.\n      *\n      * @param rowData the input row data\n      * @return a 1 x rowData.length RealMatrix\n-     * @throws IllegalArgumentException if \u003ccode\u003erowData\u003c/code\u003e is empty\n-     * @throws NullPointerException if \u003ccode\u003erowData\u003c/code\u003eis null\n+     * @throws ZeroException if {@code rowData} is empty.\n+     * @throws NullArgumentException if {@code rowData} is {@code null}.\n      */\n     public static RealMatrix createRowRealMatrix(double[] rowData) {\n+        if (rowData \u003d\u003d null) {\n+            throw new NullArgumentException();\n+        }\n         final int nCols \u003d rowData.length;\n         final RealMatrix m \u003d createRealMatrix(1, nCols);\n         for (int i \u003d 0; i \u003c nCols; ++i) {\n@@ -340,20 +272,23 @@\n     }\n \n     /**\n-     * Creates a row {@link FieldMatrix} using the data from the input\n+     * Create a row {@link FieldMatrix} using the data from the input\n      * array.\n      *\n      * @param \u003cT\u003e the type of the field elements\n      * @param rowData the input row data\n      * @return a 1 x rowData.length FieldMatrix\n-     * @throws IllegalArgumentException if \u003ccode\u003erowData\u003c/code\u003e is empty\n-     * @throws NullPointerException if \u003ccode\u003erowData\u003c/code\u003eis null\n+     * @throws ZeroException if {@code rowData} is empty.\n+     * @throws NullArgumentException if {@code rowData} is {@code null}.\n      */\n     public static \u003cT extends FieldElement\u003cT\u003e\u003e FieldMatrix\u003cT\u003e\n         createRowFieldMatrix(final T[] rowData) {\n+        if (rowData \u003d\u003d null) {\n+            throw new NullArgumentException();\n+        }\n         final int nCols \u003d rowData.length;\n         if (nCols \u003d\u003d 0) {\n-            throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.AT_LEAST_ONE_COLUMN);\n+            throw new ZeroException(LocalizedFormats.AT_LEAST_ONE_COLUMN);\n         }\n         final FieldMatrix\u003cT\u003e m \u003d createFieldMatrix(rowData[0].getField(), 1, nCols);\n         for (int i \u003d 0; i \u003c nCols; ++i) {\n@@ -363,73 +298,18 @@\n     }\n \n     /**\n-     * Creates a row {@link BigMatrix} using the data from the input\n-     * array.\n-     *\n-     * @param rowData the input row data\n-     * @return a 1 x rowData.length BigMatrix\n-     * @throws IllegalArgumentException if \u003ccode\u003erowData\u003c/code\u003e is empty\n-     * @throws NullPointerException if \u003ccode\u003erowData\u003c/code\u003eis null\n-     * @deprecated since 2.0 replaced by {@link #createRowFieldMatrix(FieldElement[])}\n-     */\n-    @Deprecated\n-    public static BigMatrix createRowBigMatrix(double[] rowData) {\n-        final int nCols \u003d rowData.length;\n-        final BigDecimal[][] data \u003d new BigDecimal[1][nCols];\n-        for (int i \u003d 0; i \u003c nCols; ++i) {\n-            data[0][i] \u003d new BigDecimal(rowData[i]);\n-        }\n-        return new BigMatrixImpl(data, false);\n-    }\n-\n-    /**\n-     * Creates a row {@link BigMatrix} using the data from the input\n-     * array.\n-     *\n-     * @param rowData the input row data\n-     * @return a 1 x rowData.length BigMatrix\n-     * @throws IllegalArgumentException if \u003ccode\u003erowData\u003c/code\u003e is empty\n-     * @throws NullPointerException if \u003ccode\u003erowData\u003c/code\u003eis null\n-     * @deprecated since 2.0 replaced by {@link #createRowFieldMatrix(FieldElement[])}\n-     */\n-    @Deprecated\n-    public static BigMatrix createRowBigMatrix(BigDecimal[] rowData) {\n-        final int nCols \u003d rowData.length;\n-        final BigDecimal[][] data \u003d new BigDecimal[1][nCols];\n-        System.arraycopy(rowData, 0, data[0], 0, nCols);\n-        return new BigMatrixImpl(data, false);\n-    }\n-\n-    /**\n-     * Creates a row {@link BigMatrix} using the data from the input\n-     * array.\n-     *\n-     * @param rowData the input row data\n-     * @return a 1 x rowData.length BigMatrix\n-     * @throws IllegalArgumentException if \u003ccode\u003erowData\u003c/code\u003e is empty\n-     * @throws NullPointerException if \u003ccode\u003erowData\u003c/code\u003eis null\n-     * @deprecated since 2.0 replaced by {@link #createRowFieldMatrix(FieldElement[])}\n-     */\n-    @Deprecated\n-    public static BigMatrix createRowBigMatrix(String[] rowData) {\n-        final int nCols \u003d rowData.length;\n-        final BigDecimal[][] data \u003d new BigDecimal[1][nCols];\n-        for (int i \u003d 0; i \u003c nCols; ++i) {\n-            data[0][i] \u003d new BigDecimal(rowData[i]);\n-        }\n-        return new BigMatrixImpl(data, false);\n-    }\n-\n-    /**\n      * Creates a column {@link RealMatrix} using the data from the input\n      * array.\n      *\n      * @param columnData  the input column data\n      * @return a columnData x 1 RealMatrix\n-     * @throws IllegalArgumentException if \u003ccode\u003ecolumnData\u003c/code\u003e is empty\n-     * @throws NullPointerException if \u003ccode\u003ecolumnData\u003c/code\u003eis null\n+     * @throws ZeroException if {@code columnData} is empty.\n+     * @throws NullArgumentException if {@code columnData} is {@code null}.\n      */\n     public static RealMatrix createColumnRealMatrix(double[] columnData) {\n+        if (columnData \u003d\u003d null) {\n+            throw new NullArgumentException();\n+        }\n         final int nRows \u003d columnData.length;\n         final RealMatrix m \u003d createRealMatrix(nRows, 1);\n         for (int i \u003d 0; i \u003c nRows; ++i) {\n@@ -445,11 +325,14 @@\n      * @param \u003cT\u003e the type of the field elements\n      * @param columnData  the input column data\n      * @return a columnData x 1 FieldMatrix\n-     * @throws IllegalArgumentException if \u003ccode\u003ecolumnData\u003c/code\u003e is empty\n-     * @throws NullPointerException if \u003ccode\u003ecolumnData\u003c/code\u003eis null\n+     * @throws ZeroException if {@code data} is empty.\n+     * @throws NullArgumentException if {@code columnData} is {@code null}.\n      */\n     public static \u003cT extends FieldElement\u003cT\u003e\u003e FieldMatrix\u003cT\u003e\n         createColumnFieldMatrix(final T[] columnData) {\n+        if (columnData \u003d\u003d null) {\n+            throw new NullArgumentException();\n+        }\n         final int nRows \u003d columnData.length;\n         if (nRows \u003d\u003d 0) {\n             throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.AT_LEAST_ONE_ROW);\n@@ -462,118 +345,77 @@\n     }\n \n     /**\n-     * Creates a column {@link BigMatrix} using the data from the input\n-     * array.\n+     * Check if matrix indices are valid.\n      *\n-     * @param columnData  the input column data\n-     * @return a columnData x 1 BigMatrix\n-     * @throws IllegalArgumentException if \u003ccode\u003ecolumnData\u003c/code\u003e is empty\n-     * @throws NullPointerException if \u003ccode\u003ecolumnData\u003c/code\u003eis null\n-     * @deprecated since 2.0 replaced by {@link #createColumnFieldMatrix(FieldElement[])}\n+     * @param m Matrix.\n+     * @param row Row index to check.\n+     * @param column Column index to check.\n+     * @throws OutOfRangeException if {@code row} or {@code column} is not\n+     * a valid index.\n      */\n-    @Deprecated\n-    public static BigMatrix createColumnBigMatrix(double[] columnData) {\n-        final int nRows \u003d columnData.length;\n-        final BigDecimal[][] data \u003d new BigDecimal[nRows][1];\n-        for (int row \u003d 0; row \u003c nRows; row++) {\n-            data[row][0] \u003d new BigDecimal(columnData[row]);\n-        }\n-        return new BigMatrixImpl(data, false);\n-    }\n-\n-    /**\n-     * Creates a column {@link BigMatrix} using the data from the input\n-     * array.\n-     *\n-     * @param columnData  the input column data\n-     * @return a columnData x 1 BigMatrix\n-     * @throws IllegalArgumentException if \u003ccode\u003ecolumnData\u003c/code\u003e is empty\n-     * @throws NullPointerException if \u003ccode\u003ecolumnData\u003c/code\u003eis null\n-     * @deprecated since 2.0 replaced by {@link #createColumnFieldMatrix(FieldElement[])}\n-     */\n-    @Deprecated\n-    public static BigMatrix createColumnBigMatrix(BigDecimal[] columnData) {\n-        final int nRows \u003d columnData.length;\n-        final BigDecimal[][] data \u003d new BigDecimal[nRows][1];\n-        for (int row \u003d 0; row \u003c nRows; row++) {\n-            data[row][0] \u003d columnData[row];\n-        }\n-        return new BigMatrixImpl(data, false);\n-    }\n-\n-    /**\n-     * Creates a column {@link BigMatrix} using the data from the input\n-     * array.\n-     *\n-     * @param columnData  the input column data\n-     * @return a columnData x 1 BigMatrix\n-     * @throws IllegalArgumentException if \u003ccode\u003ecolumnData\u003c/code\u003e is empty\n-     * @throws NullPointerException if \u003ccode\u003ecolumnData\u003c/code\u003eis null\n-     * @deprecated since 2.0 replaced by {@link #createColumnFieldMatrix(FieldElement[])}\n-     */\n-    @Deprecated\n-    public static BigMatrix createColumnBigMatrix(String[] columnData) {\n-        int nRows \u003d columnData.length;\n-        final BigDecimal[][] data \u003d new BigDecimal[nRows][1];\n-        for (int row \u003d 0; row \u003c nRows; row++) {\n-            data[row][0] \u003d new BigDecimal(columnData[row]);\n-        }\n-        return new BigMatrixImpl(data, false);\n+    public static void checkMatrixIndex(final AnyMatrix m,\n+                                        final int row, final int column) {\n+        checkRowIndex(m, row);\n+        checkColumnIndex(m, column);\n     }\n \n     /**\n      * Check if a row index is valid.\n-     * @param m matrix containing the submatrix\n-     * @param row row index to check\n-     * @exception MatrixIndexException if index is not valid\n+     *\n+     * @param m Matrix.\n+     * @param row Row index to check.\n+     * @throws OutOfRangeException if {@code row} is not a valid index.\n      */\n     public static void checkRowIndex(final AnyMatrix m, final int row) {\n-        if (row \u003c 0 || row \u003e\u003d m.getRowDimension()) {\n-            throw new MatrixIndexException(LocalizedFormats.ROW_INDEX_OUT_OF_RANGE,\n-                                           row, 0, m.getRowDimension() - 1);\n+        if (row \u003c 0 ||\n+            row \u003e\u003d m.getRowDimension()) {\n+            throw new OutOfRangeException(LocalizedFormats.ROW_INDEX,\n+                                          row, 0, m.getRowDimension() - 1);\n         }\n     }\n \n     /**\n      * Check if a column index is valid.\n-     * @param m matrix containing the submatrix\n-     * @param column column index to check\n-     * @exception MatrixIndexException if index is not valid\n+     *\n+     * @param m Matrix.\n+     * @param column Column index to check.\n+     * @throws OutOfRangeException if {@code column} is not a valid index.\n      */\n-    public static void checkColumnIndex(final AnyMatrix m, final int column)\n-        throws MatrixIndexException {\n+    public static void checkColumnIndex(final AnyMatrix m, final int column) {\n         if (column \u003c 0 || column \u003e\u003d m.getColumnDimension()) {\n-            throw new MatrixIndexException(LocalizedFormats.COLUMN_INDEX_OUT_OF_RANGE,\n+            throw new OutOfRangeException(LocalizedFormats.COLUMN_INDEX,\n                                            column, 0, m.getColumnDimension() - 1);\n         }\n     }\n \n     /**\n      * Check if submatrix ranges indices are valid.\n-     * Rows and columns are indicated counting from 0 to n-1.\n+     * Rows and columns are indicated counting from 0 to {@code n - 1}.\n      *\n-     * @param m matrix containing the submatrix\n-     * @param startRow Initial row index\n-     * @param endRow Final row index\n-     * @param startColumn Initial column index\n-     * @param endColumn Final column index\n-     * @exception MatrixIndexException  if the indices are not valid\n+     * @param m Matrix.\n+     * @param startRow Initial row index.\n+     * @param endRow Final row index.\n+     * @param startColumn Initial column index.\n+     * @param endColumn Final column index.\n+     * @throws OutOfRangeException if the indices are invalid.\n+     * @throws NumberIsTooSmallException if {@code endRow \u003c startRow} or\n+     * {@code endColumn \u003c startColumn}.\n      */\n     public static void checkSubMatrixIndex(final AnyMatrix m,\n                                            final int startRow, final int endRow,\n                                            final int startColumn, final int endColumn) {\n         checkRowIndex(m, startRow);\n         checkRowIndex(m, endRow);\n-        if (startRow \u003e endRow) {\n-            throw new MatrixIndexException(LocalizedFormats.INITIAL_ROW_AFTER_FINAL_ROW,\n-                                           startRow, endRow);\n+        if (endRow \u003c startRow) {\n+            throw new NumberIsTooSmallException(LocalizedFormats.INITIAL_ROW_AFTER_FINAL_ROW,\n+                                                endRow, startRow, false);\n         }\n \n         checkColumnIndex(m, startColumn);\n         checkColumnIndex(m, endColumn);\n-        if (startColumn \u003e endColumn) {\n-            throw new MatrixIndexException(LocalizedFormats.INITIAL_COLUMN_AFTER_FINAL_COLUMN,\n-                                           startColumn, endColumn);\n+        if (endColumn \u003c startColumn) {\n+            throw new NumberIsTooSmallException(LocalizedFormats.INITIAL_COLUMN_AFTER_FINAL_COLUMN,\n+                                                endColumn, startColumn, false);\n         }\n \n \n@@ -583,19 +425,29 @@\n      * Check if submatrix ranges indices are valid.\n      * Rows and columns are indicated counting from 0 to n-1.\n      *\n-     * @param m matrix containing the submatrix\n+     * @param m Matrix.\n      * @param selectedRows Array of row indices.\n      * @param selectedColumns Array of column indices.\n-     * @exception MatrixIndexException if row or column selections are not valid\n+     * @throws NullArgumentException if {@code selectedRows} or\n+     * {@code selectedColumns} are {@code null}.\n+     * @throws ZeroException if the row or column selections are empty (zero\n+     * length).\n+     * @throws OutOfRangeException if row or column selections are not valid.\n      */\n     public static void checkSubMatrixIndex(final AnyMatrix m,\n-                                           final int[] selectedRows, final int[] selectedColumns)\n-        throws MatrixIndexException {\n-        if (selectedRows.length * selectedColumns.length \u003d\u003d 0) {\n-            if (selectedRows.length \u003d\u003d 0) {\n-                throw new MatrixIndexException(LocalizedFormats.EMPTY_SELECTED_ROW_INDEX_ARRAY);\n-            }\n-            throw new MatrixIndexException(LocalizedFormats.EMPTY_SELECTED_COLUMN_INDEX_ARRAY);\n+                                           final int[] selectedRows,\n+                                           final int[] selectedColumns) {\n+        if (selectedRows \u003d\u003d null) {\n+            throw new NullArgumentException();\n+        }\n+        if (selectedColumns \u003d\u003d null) {\n+            throw new NullArgumentException();\n+        }\n+        if (selectedRows.length \u003d\u003d 0) {\n+            throw new ZeroException(LocalizedFormats.EMPTY_SELECTED_ROW_INDEX_ARRAY);\n+        }\n+        if (selectedColumns.length \u003d\u003d 0) {\n+            throw new ZeroException(LocalizedFormats.EMPTY_SELECTED_COLUMN_INDEX_ARRAY);\n         }\n \n         for (final int row : selectedRows) {\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "ImportDeclaration [1136,1197]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ImportDeclaration [1198,1253]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ImportDeclaration [1254,1321]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ImportDeclaration [1322,1385]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [13641,14112]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Javadoc [9208,9498]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [4512,4659]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [4667,4717]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [4725,4820]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [4942,5049]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [5786,5933]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [5941,5991]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [5999,6094]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [6270,6377]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [9373,9420]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [9428,9490]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [9570,9646]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [9922,9969]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [9977,10039]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [10153,10229]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [10482,10532]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [10540,10605]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [10691,10770]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [11233,11283]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [11291,11356]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [11484,11563]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [12121,12174]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [12182,12250]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [12342,12424]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [12900,12947]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [12955,13023]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [13157,13239]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TagElement [15146,15262]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [15536,15641]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [16748,16853]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [16861,16946]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [17246,17330]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [17339,17426]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "IfStatement [17571,17704]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [14267,14278]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement:  is not a valid index. [14278,14300]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [14772,14786]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement:  is not a valid index. [14786,14808]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: Rows and columns are indicated counting from 0 to  [15198,15248]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [15248,15261]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: . [15261,15262]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "InfixExpression [17575,17602]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ThrowStatement [11644,11706]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "BooleanLiteral: false [16145,16150]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "BooleanLiteral: false [16457,16462]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ImportDeclaration [974,1002]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [4291,4416]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [4424,4519]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [5371,5496]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [5504,5599]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [7431,8196]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [9368,10018]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [10024,10678]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [10684,11783]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [11789,12439]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [12610,12672]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [12680,12736]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Javadoc [12445,12744]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [13083,13145]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [13153,13209]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [13568,13633]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [13641,13700]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [14241,14306]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [14314,14373]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ThrowStatement [14573,14669]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [14888,15648]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [15654,16370]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [16376,17136]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [17338,17406]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [17414,17476]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [18035,18103]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [18111,18173]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [18700,19497]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [19503,20288]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [20294,21085]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [21892,21912]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: Rows and columns are indicated counting from 0 to n-1. [22231,22285]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TagElement [22179,22285]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [23931,23951]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "InfixExpression [23966,24015]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "IfStatement [23962,24279]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java",
        "src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "addToEntry",
            "OpenMapRealMatrix",
            "createMatrix",
            "add",
            "add",
            "getEntry",
            "multiplyEntry",
            "subtract",
            "OpenMapRealMatrix",
            "setEntry",
            "multiply",
            "multiply"
          ],
          "num": 12
        },
        {
          "qualified_names": [
            "multiply",
            "OpenMapRealMatrix",
            "multiplyEntry",
            "subtract",
            "setEntry",
            "add",
            "multiply",
            "getEntry",
            "addToEntry",
            "OpenMapRealMatrix",
            "createMatrix"
          ],
          "num": 11
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "30",
            "31",
            "34",
            "37",
            "40",
            "46",
            "47",
            "51",
            "58",
            "61",
            "74",
            "75",
            "85",
            "86",
            "87",
            "88",
            "89",
            "90",
            "91",
            "92",
            "93",
            "94",
            "95",
            "97",
            "99",
            "100",
            "101",
            "103",
            "132",
            "134",
            "135",
            "136",
            "138",
            "139",
            "140",
            "152",
            "180",
            "185",
            "187",
            "188",
            "189",
            "190",
            "192",
            "193",
            "194",
            "221",
            "226",
            "240",
            "241",
            "253",
            "254",
            "268",
            "269"
          ],
          "num": 53
        },
        {
          "qualified_names": [
            "30",
            "31",
            "43",
            "44",
            "45",
            "49",
            "56",
            "57",
            "60",
            "73",
            "84",
            "86",
            "87",
            "88",
            "89",
            "91",
            "120",
            "122",
            "123",
            "124",
            "125",
            "127",
            "128",
            "163",
            "171",
            "173",
            "174",
            "175",
            "176",
            "177",
            "179",
            "180",
            "211",
            "225",
            "237",
            "251"
          ],
          "num": 36
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java b/src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java\nindex cf11f2a..2f362ee 100644\n--- a/src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java\n+++ b/src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java\n@@ -27,38 +27,37 @@\n  * @version $Revision$ $Date$\n  * @since 2.0\n  */\n-public class OpenMapRealMatrix extends AbstractRealMatrix implements SparseRealMatrix, Serializable {\n-\n+public class OpenMapRealMatrix extends AbstractRealMatrix\n+    implements SparseRealMatrix, Serializable {\n     /** Serializable version identifier. */\n     private static final long serialVersionUID \u003d -5962461716457143437L;\n-\n     /** Number of rows of the matrix. */\n     private final int rows;\n-\n     /** Number of columns of the matrix. */\n     private final int columns;\n-\n     /** Storage for (sparse) matrix elements. */\n     private final OpenIntToDoubleHashMap entries;\n \n     /**\n      * Build a sparse matrix with the supplied row and column dimensions.\n-     * @param rowDimension number of rows of the matrix\n-     * @param columnDimension number of columns of the matrix\n+     *\n+     * @param rowDimension Number of rows of the matrix.\n+     * @param columnDimension Number of columns of the matrix.\n      */\n     public OpenMapRealMatrix(int rowDimension, int columnDimension) {\n         super(rowDimension, columnDimension);\n-        this.rows    \u003d rowDimension;\n+        this.rows \u003d rowDimension;\n         this.columns \u003d columnDimension;\n         this.entries \u003d new OpenIntToDoubleHashMap(0.0);\n     }\n \n     /**\n      * Build a matrix by copying another one.\n-     * @param matrix matrix to copy\n+     *\n+     * @param matrix matrix to copy.\n      */\n     public OpenMapRealMatrix(OpenMapRealMatrix matrix) {\n-        this.rows    \u003d matrix.rows;\n+        this.rows \u003d matrix.rows;\n         this.columns \u003d matrix.columns;\n         this.entries \u003d new OpenIntToDoubleHashMap(matrix.entries);\n     }\n@@ -71,8 +70,7 @@\n \n     /** {@inheritDoc} */\n     @Override\n-    public OpenMapRealMatrix createMatrix(int rowDimension, int columnDimension)\n-            throws IllegalArgumentException {\n+    public OpenMapRealMatrix createMatrix(int rowDimension, int columnDimension) {\n         return new OpenMapRealMatrix(rowDimension, columnDimension);\n     }\n \n@@ -82,25 +80,15 @@\n         return columns;\n     }\n \n-    /** {@inheritDoc} */\n-    @Override\n-    public OpenMapRealMatrix add(final RealMatrix m)\n-        throws IllegalArgumentException {\n-        try {\n-            return add((OpenMapRealMatrix) m);\n-        } catch (ClassCastException cce) {\n-            return (OpenMapRealMatrix) super.add(m);\n-        }\n-    }\n-\n     /**\n-     * Compute the sum of this and \u003ccode\u003em\u003c/code\u003e.\n+     * Compute the sum of this matrix and {@code m}.\n      *\n-     * @param m    matrix to be added\n-     * @return     this + m\n-     * @throws  IllegalArgumentException if m is not the same size as this\n+     * @param m Matrix to be added.\n+     * @return {@code this} + {@code m}.\n+     * @throws org.apache.commons.math.exception.DimensionMismatchException\n+     * if {@code m} is not the same size as this matrix.\n      */\n-    public OpenMapRealMatrix add(OpenMapRealMatrix m) throws IllegalArgumentException {\n+    public OpenMapRealMatrix add(OpenMapRealMatrix m) {\n \n         // safety check\n         MatrixUtils.checkAdditionCompatible(this, m);\n@@ -129,15 +117,15 @@\n     }\n \n     /**\n-     * Compute this minus \u003ccode\u003em\u003c/code\u003e.\n+     * Subtract {@code m} from this matrix.\n      *\n-     * @param m    matrix to be subtracted\n-     * @return     this - m\n-     * @throws  IllegalArgumentException if m is not the same size as this\n+     * @param m Matrix to be subtracted.\n+     * @return {@code this} - {@code m}.\n+     * @throws org.apache.commons.math.exception.DimensionMismatchException\n+     * if {@code m} is not the same size as this matrix.\n      */\n-    public OpenMapRealMatrix subtract(OpenMapRealMatrix m) throws IllegalArgumentException {\n-\n-        // safety check\n+    public OpenMapRealMatrix subtract(OpenMapRealMatrix m) {\n+        // Safety check.\n         MatrixUtils.checkAdditionCompatible(this, m);\n \n         final OpenMapRealMatrix out \u003d new OpenMapRealMatrix(this);\n@@ -149,7 +137,6 @@\n         }\n \n         return out;\n-\n     }\n \n     /** {@inheritDoc} */\n@@ -177,21 +164,20 @@\n             }\n \n             return out;\n-\n         }\n     }\n \n     /**\n-     * Returns the result of postmultiplying this by m.\n+     * Postmultiply this matrix by {@code m}.\n      *\n-     * @param m    matrix to postmultiply by\n-     * @return     this * m\n-     * @throws     IllegalArgumentException\n-     *             if columnDimension(this) !\u003d rowDimension(m)\n+     * @param m Matrix to postmultiply by.\n+     * @return {@code this} * {@code m}.\n+     * @throws org.apache.commons.math.exception.MatrixDimensionMismatchException\n+     * if the number of rows of {@code m} differ from the number of columns\n+     * of this matrix.\n      */\n-    public OpenMapRealMatrix multiply(OpenMapRealMatrix m) throws IllegalArgumentException {\n-\n-        // safety check\n+    public OpenMapRealMatrix multiply(OpenMapRealMatrix m) {\n+        // Safety check.\n         MatrixUtils.checkMultiplicationCompatible(this, m);\n \n         final int outCols \u003d m.getColumnDimension();\n@@ -218,12 +204,11 @@\n         }\n \n         return out;\n-\n     }\n \n     /** {@inheritDoc} */\n     @Override\n-    public double getEntry(int row, int column) throws MatrixIndexException {\n+    public double getEntry(int row, int column) {\n         MatrixUtils.checkRowIndex(this, row);\n         MatrixUtils.checkColumnIndex(this, column);\n         return entries.get(computeKey(row, column));\n@@ -237,8 +222,7 @@\n \n     /** {@inheritDoc} */\n     @Override\n-    public void setEntry(int row, int column, double value)\n-            throws MatrixIndexException {\n+    public void setEntry(int row, int column, double value) {\n         MatrixUtils.checkRowIndex(this, row);\n         MatrixUtils.checkColumnIndex(this, column);\n         if (value \u003d\u003d 0.0) {\n@@ -250,8 +234,7 @@\n \n     /** {@inheritDoc} */\n     @Override\n-    public void addToEntry(int row, int column, double increment)\n-            throws MatrixIndexException {\n+    public void addToEntry(int row, int column, double increment) {\n         MatrixUtils.checkRowIndex(this, row);\n         MatrixUtils.checkColumnIndex(this, column);\n         final int key \u003d computeKey(row, column);\n@@ -265,8 +248,7 @@\n \n     /** {@inheritDoc} */\n     @Override\n-    public void multiplyEntry(int row, int column, double factor)\n-            throws MatrixIndexException {\n+    public void multiplyEntry(int row, int column, double factor) {\n         MatrixUtils.checkRowIndex(this, row);\n         MatrixUtils.checkColumnIndex(this, column);\n         final int key \u003d computeKey(row, column);\n",
      "operations": [
        {
          "type": "insert-node",
          "from": "",
          "to": "Javadoc [2738,3019]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Javadoc [3911,4188]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Javadoc [5773,6102]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [2749,2794]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [2845,2878]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [2886,3011]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [3922,3958]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [4014,4047]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [4055,4180]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [5784,5822]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [5880,5913]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [5921,6094]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [2556,2580]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [2771,3073]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [3090,3133]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [3186,3206]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [3214,3281]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Javadoc [3079,3289]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [3351,3375]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [4224,4258]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [4316,4336]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [4344,4411]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Javadoc [4213,4419]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [4486,4510]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [6049,6097]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [6157,6177]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [6185,6284]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Javadoc [6038,6292]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [6359,6383]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [7639,7659]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [8040,8060]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [8457,8477]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [8942,8962]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java",
        "src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "OpenMapRealVector",
            "OpenMapRealVector",
            "OpenMapRealVector",
            "OpenMapRealVector",
            "getDistance",
            "getLInfDistance",
            "ebeDivide",
            "getL1Distance",
            "dotProduct",
            "setEntry",
            "subtract",
            "getSparcity",
            "isDefaultValue",
            "subtract",
            "OpenMapRealVector",
            "getL1Distance",
            "OpenMapRealVector",
            "OpenMapRealVector",
            "OpenMapRealVector",
            "subtract",
            "ebeMultiply",
            "getSubVector",
            "getEntries",
            "outerProduct",
            "OpenMapRealVector",
            "OpenMapRealVector",
            "OpenMapEntry",
            "getLInfDistance",
            "getSparsity",
            "projection",
            "remove",
            "add",
            "unitize",
            "getLInfDistance",
            "setSubVector",
            "add",
            "getDistance",
            "getDistance",
            "ebeMultiply",
            "OpenMapRealVector",
            "dotProduct",
            "getL1Distance",
            "getEntry",
            "equals",
            "setSubVector",
            "hashCode",
            "projection",
            "OpenMapRealVector",
            "ebeDivide",
            "append"
          ],
          "num": 50
        },
        {
          "qualified_names": [
            "getLInfDistance",
            "getLInfDistance",
            "OpenMapRealVector",
            "OpenMapRealVector",
            "OpenMapRealVector",
            "projection",
            "ebeMultiply",
            "outerProduct",
            "getEntries",
            "getLInfDistance",
            "append",
            "add",
            "getL1Distance",
            "getSubVector",
            "unitize",
            "add",
            "OpenMapRealVector",
            "setSubVector",
            "ebeDivide",
            "getL1Distance",
            "subtract",
            "isDefaultValue",
            "dotProduct",
            "OpenMapRealVector",
            "OpenMapRealVector",
            "getEntry",
            "subtract",
            "dotProduct",
            "projection",
            "getDistance",
            "setSubVector",
            "OpenMapEntry",
            "OpenMapRealVector",
            "OpenMapRealVector",
            "OpenMapRealVector",
            "ebeMultiply",
            "ebeDivide",
            "OpenMapRealVector",
            "getDistance",
            "subtract",
            "hashCode",
            "remove",
            "OpenMapRealVector",
            "getSparsity",
            "OpenMapRealVector",
            "getL1Distance",
            "getDistance",
            "setEntry",
            "equals"
          ],
          "num": 49
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "21",
            "28",
            "32",
            "33",
            "36",
            "39",
            "42",
            "45",
            "51",
            "54",
            "56",
            "63",
            "64",
            "71",
            "72",
            "73",
            "83",
            "84",
            "94",
            "95",
            "102",
            "103",
            "104",
            "105",
            "114",
            "115",
            "116",
            "123",
            "124",
            "125",
            "126",
            "141",
            "142",
            "150",
            "151",
            "152",
            "153",
            "169",
            "179",
            "195",
            "203",
            "204",
            "213",
            "223",
            "224",
            "225",
            "226",
            "228",
            "249",
            "296",
            "297",
            "298",
            "299",
            "301",
            "316",
            "325",
            "338",
            "350",
            "363",
            "375",
            "410",
            "411",
            "412",
            "414",
            "438",
            "448",
            "459",
            "466",
            "468",
            "469",
            "470",
            "494",
            "504",
            "516",
            "517",
            "544",
            "554",
            "612",
            "628",
            "635",
            "641",
            "652",
            "660",
            "678",
            "679",
            "680",
            "682",
            "700",
            "710",
            "737",
            "744",
            "747",
            "754",
            "755",
            "757",
            "777",
            "778",
            "779",
            "820",
            "822",
            "823",
            "824",
            "825",
            "826",
            "827",
            "828",
            "829",
            "830",
            "831",
            "842",
            "843",
            "844",
            "847",
            "851",
            "852",
            "879",
            "880",
            "881",
            "884",
            "887",
            "911",
            "912"
          ],
          "num": 122
        },
        {
          "qualified_names": [
            "21",
            "28",
            "29",
            "33",
            "34",
            "48",
            "51",
            "53",
            "60",
            "61",
            "62",
            "69",
            "70",
            "71",
            "72",
            "82",
            "83",
            "84",
            "94",
            "95",
            "96",
            "103",
            "104",
            "105",
            "106",
            "107",
            "108",
            "117",
            "118",
            "119",
            "120",
            "127",
            "128",
            "129",
            "130",
            "131",
            "146",
            "147",
            "148",
            "156",
            "157",
            "158",
            "159",
            "160",
            "176",
            "177",
            "187",
            "188",
            "204",
            "205",
            "213",
            "214",
            "215",
            "216",
            "225",
            "235",
            "236",
            "237",
            "238",
            "239",
            "240",
            "241",
            "243",
            "264",
            "311",
            "312",
            "313",
            "314",
            "315",
            "316",
            "318",
            "333",
            "342",
            "355",
            "367",
            "380",
            "392",
            "427",
            "428",
            "429",
            "430",
            "431",
            "433",
            "457",
            "467",
            "478",
            "485",
            "487",
            "488",
            "489",
            "490",
            "514",
            "524",
            "536",
            "537",
            "538",
            "565",
            "575",
            "633",
            "649",
            "656",
            "662",
            "673",
            "681",
            "699",
            "700",
            "701",
            "702",
            "703",
            "705",
            "723",
            "733",
            "760",
            "775",
            "776",
            "777",
            "779",
            "800",
            "801",
            "802",
            "843",
            "854",
            "855",
            "856",
            "862",
            "863",
            "864",
            "865",
            "892",
            "893",
            "894",
            "922"
          ],
          "num": 132
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java b/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java\nindex f098bfb..e14d061 100644\n--- a/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java\n+++ b/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java\n@@ -18,59 +18,58 @@\n \n import java.io.Serializable;\n \n-import org.apache.commons.math.MathRuntimeException;\n+import org.apache.commons.math.exception.MathArithmeticException;\n import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.util.OpenIntToDoubleHashMap;\n import org.apache.commons.math.util.OpenIntToDoubleHashMap.Iterator;\n import org.apache.commons.math.util.FastMath;\n \n /**\n- * This class implements the {@link RealVector} interface with a {@link OpenIntToDoubleHashMap} backing store.\n+ * This class implements the {@link RealVector} interface with a\n+ * {@link OpenIntToDoubleHashMap} backing store.\n  * @version $Revision$ $Date$\n  * @since 2.0\n */\n-public class OpenMapRealVector extends AbstractRealVector implements SparseRealVector, Serializable {\n-\n+public class OpenMapRealVector extends AbstractRealVector\n+    implements SparseRealVector, Serializable {\n     /** Default Tolerance for having a value considered zero. */\n     public static final double DEFAULT_ZERO_TOLERANCE \u003d 1.0e-12;\n-\n     /** Serializable version identifier. */\n     private static final long serialVersionUID \u003d 8772222695580707260L;\n-\n     /** Entries of the vector. */\n     private final OpenIntToDoubleHashMap entries;\n-\n     /** Dimension of the vector. */\n     private final int virtualSize;\n-\n     /** Tolerance for having a value considered zero. */\n     private final double epsilon;\n \n     /**\n      * Build a 0-length vector.\n-     * \u003cp\u003eZero-length vectors may be used to initialized construction of vectors\n+     * Zero-length vectors may be used to initialized construction of vectors\n      * by data gathering. We start with zero-length and use either the {@link\n      * #OpenMapRealVector(OpenMapRealVector, int)} constructor\n-     * or one of the \u003ccode\u003eappend\u003c/code\u003e method ({@link #append(double)}, {@link\n+     * or one of the {@code append} method ({@link #append(double)}, {@link\n      * #append(double[])}, {@link #append(RealVector)}) to gather data\n-     * into this vector.\u003c/p\u003e\n+     * into this vector.\n      */\n     public OpenMapRealVector() {\n         this(0, DEFAULT_ZERO_TOLERANCE);\n     }\n \n     /**\n-     * Construct a (dimension)-length vector of zeros.\n-     * @param dimension size of the vector\n+     * Construct a vector of zeroes.\n+     *\n+     * @param dimension Size of the vector.\n      */\n     public OpenMapRealVector(int dimension) {\n         this(dimension, DEFAULT_ZERO_TOLERANCE);\n     }\n \n     /**\n-     * Construct a (dimension)-length vector of zeros, specifying zero tolerance.\n-     * @param dimension Size of the vector\n-     * @param epsilon The tolerance for having a value considered zero\n+     * Construct a vector of zeroes, specifying zero tolerance.\n+     *\n+     * @param dimension Size of the vector.\n+     * @param epsilon Tolerance below which a value considered zero.\n      */\n     public OpenMapRealVector(int dimension, double epsilon) {\n         virtualSize \u003d dimension;\n@@ -80,8 +79,9 @@\n \n     /**\n      * Build a resized vector, for use with append.\n-     * @param v The original vector\n-     * @param resize The amount to resize it\n+     *\n+     * @param v Original vector.\n+     * @param resize Amount to add.\n      */\n     protected OpenMapRealVector(OpenMapRealVector v, int resize) {\n         virtualSize \u003d v.getDimension() + resize;\n@@ -91,18 +91,21 @@\n \n     /**\n      * Build a vector with known the sparseness (for advanced use only).\n-     * @param dimension The size of the vector\n-     * @param expectedSize The expected number of non-zero entries\n+     *\n+     * @param dimension Size of the vector.\n+     * @param expectedSize The expected number of non-zero entries.\n      */\n     public OpenMapRealVector(int dimension, int expectedSize) {\n         this(dimension, expectedSize, DEFAULT_ZERO_TOLERANCE);\n     }\n \n     /**\n-     * Build a vector with known the sparseness and zero tolerance setting (for advanced use only).\n-     * @param dimension The size of the vector\n-     * @param expectedSize The expected number of non-zero entries\n-     * @param epsilon The tolerance for having a value considered zero\n+     * Build a vector with known the sparseness and zero tolerance\n+     * setting (for advanced use only).\n+     *\n+     * @param dimension Size of the vector.\n+     * @param expectedSize Expected number of non-zero entries.\n+     * @param epsilon Tolerance below which a value is considered zero.\n      */\n     public OpenMapRealVector(int dimension, int expectedSize, double epsilon) {\n         virtualSize \u003d dimension;\n@@ -111,19 +114,21 @@\n     }\n \n     /**\n-     * Create from a double array.\n-     * Only non-zero entries will be stored\n-     * @param values The set of values to create from\n+     * Create from an array.\n+     * Only non-zero entries will be stored.\n+     *\n+     * @param values Set of values to create from.\n      */\n     public OpenMapRealVector(double[] values) {\n         this(values, DEFAULT_ZERO_TOLERANCE);\n     }\n \n     /**\n-     * Create from a double array, specifying zero tolerance.\n-     * Only non-zero entries will be stored\n-     * @param values The set of values to create from\n-     * @param epsilon The tolerance for having a value considered zero\n+     * Create from an array, specifying zero tolerance.\n+     * Only non-zero entries will be stored.\n+     *\n+     * @param values Set of values to create from.\n+     * @param epsilon Tolerance below which a value is considered zero.\n      */\n     public OpenMapRealVector(double[] values, double epsilon) {\n         virtualSize \u003d values.length;\n@@ -138,8 +143,9 @@\n     }\n \n     /**\n-     * Create from a Double array.\n-     * Only non-zero entries will be stored\n+     * Create from an array.\n+     * Only non-zero entries will be stored.\n+     *\n      * @param values The set of values to create from\n      */\n     public OpenMapRealVector(Double[] values) {\n@@ -147,10 +153,11 @@\n     }\n \n     /**\n-     * Create from a Double array.\n-     * Only non-zero entries will be stored\n-     * @param values The set of values to create from\n-     * @param epsilon The tolerance for having a value considered zero\n+     * Create from an array.\n+     * Only non-zero entries will be stored.\n+     *\n+     * @param values Set of values to create from.\n+     * @param epsilon Tolerance below which a value is considered zero.\n      */\n     public OpenMapRealVector(Double[] values, double epsilon) {\n         virtualSize \u003d values.length;\n@@ -166,7 +173,8 @@\n \n     /**\n      * Copy constructor.\n-     * @param v The instance to copy from\n+     *\n+     * @param v Instance to copy from.\n      */\n     public OpenMapRealVector(OpenMapRealVector v) {\n         virtualSize \u003d v.getDimension();\n@@ -176,7 +184,8 @@\n \n     /**\n      * Generic copy constructor.\n-     * @param v The instance to copy from\n+     *\n+     * @param v Instance to copy from.\n      */\n     public OpenMapRealVector(RealVector v) {\n         virtualSize \u003d v.getDimension();\n@@ -192,7 +201,8 @@\n \n     /**\n      * Get the entries of this instance.\n-     * @return entries of this instance\n+     *\n+     * @return the entries of this instance.\n      */\n     private OpenIntToDoubleHashMap getEntries() {\n         return entries;\n@@ -200,8 +210,10 @@\n \n     /**\n      * Determine if this value is within epsilon of zero.\n-     * @param value The value to test\n-     * @return \u003ccode\u003etrue\u003c/code\u003e if this value is within epsilon to zero, \u003ccode\u003efalse\u003c/code\u003e otherwise\n+     *\n+     * @param value Value to test\n+     * @return {@code true} if this value is within epsilon to zero,\n+     * {@code false} otherwise.\n      * @since 2.1\n      */\n     protected boolean isDefaultValue(double value) {\n@@ -210,7 +222,7 @@\n \n     /** {@inheritDoc} */\n     @Override\n-    public RealVector add(RealVector v) throws IllegalArgumentException {\n+        public RealVector add(RealVector v) {\n         checkVectorDimensions(v.getDimension());\n         if (v instanceof OpenMapRealVector) {\n             return add((OpenMapRealVector) v);\n@@ -220,12 +232,15 @@\n     }\n \n     /**\n-     * Optimized method to add two OpenMapRealVectors.  Copies the larger vector, iterates over the smaller.\n-     * @param v Vector to add with\n-     * @return The sum of \u003ccode\u003ethis\u003c/code\u003e with \u003ccode\u003ev\u003c/code\u003e\n-     * @throws IllegalArgumentException If the dimensions don\u0027t match\n+     * Optimized method to add two OpenMapRealVectors.\n+     * It copies the larger vector, then iterates over the smaller.\n+     *\n+     * @param v Vector to add.\n+     * @return the sum of {@code this} and {@code v}.\n+     * @throws org.apache.commons.math.exception.DimensionMismatchException\n+     * if the dimensions do not match.\n      */\n-    public OpenMapRealVector add(OpenMapRealVector v) throws IllegalArgumentException{\n+    public OpenMapRealVector add(OpenMapRealVector v) {\n         checkVectorDimensions(v.getDimension());\n         boolean copyThis \u003d entries.size() \u003e v.entries.size();\n         OpenMapRealVector res \u003d copyThis ? this.copy() : v.copy();\n@@ -246,7 +261,7 @@\n     /**\n      * Optimized method to append a OpenMapRealVector.\n      * @param v vector to append\n-     * @return The result of appending \u003ccode\u003ev\u003c/code\u003e to self\n+     * @return The result of appending {@code v} to self\n      */\n     public OpenMapRealVector append(OpenMapRealVector v) {\n         OpenMapRealVector res \u003d new OpenMapRealVector(this, v.getDimension());\n@@ -293,12 +308,14 @@\n \n     /**\n      * Optimized method to compute the dot product with an OpenMapRealVector.\n-     * Iterates over the smaller of the two.\n-     * @param v The vector to compute the dot product with\n-     * @return The dot product of \u003ccode\u003ethis\u003c/code\u003e and \u003ccode\u003ev\u003c/code\u003e\n-     * @throws IllegalArgumentException If the dimensions don\u0027t match\n+     * It iterates over the smallest of the two.\n+     *\n+     * @param v Cector to compute the dot product with.\n+     * @return the dot product of {@code this} and {@code v}.\n+     * @throws org.apache.commons.math.exception.DimensionMismatchException\n+     * if the dimensions do not match.\n      */\n-    public double dotProduct(OpenMapRealVector v) throws IllegalArgumentException {\n+    public double dotProduct(OpenMapRealVector v) {\n         checkVectorDimensions(v.getDimension());\n         boolean thisIsSmaller  \u003d entries.size() \u003c v.entries.size();\n         Iterator iter \u003d thisIsSmaller  ? entries.iterator() : v.entries.iterator();\n@@ -313,7 +330,7 @@\n \n     /** {@inheritDoc} */\n     @Override\n-    public double dotProduct(RealVector v) throws IllegalArgumentException {\n+    public double dotProduct(RealVector v) {\n         if(v instanceof OpenMapRealVector) {\n             return dotProduct((OpenMapRealVector)v);\n         } else {\n@@ -322,7 +339,7 @@\n     }\n \n     /** {@inheritDoc} */\n-    public OpenMapRealVector ebeDivide(RealVector v) throws IllegalArgumentException {\n+    public OpenMapRealVector ebeDivide(RealVector v) {\n         checkVectorDimensions(v.getDimension());\n         OpenMapRealVector res \u003d new OpenMapRealVector(this);\n         Iterator iter \u003d res.entries.iterator();\n@@ -335,7 +352,7 @@\n \n     /** {@inheritDoc} */\n     @Override\n-    public OpenMapRealVector ebeDivide(double[] v) throws IllegalArgumentException {\n+    public OpenMapRealVector ebeDivide(double[] v) {\n         checkVectorDimensions(v.length);\n         OpenMapRealVector res \u003d new OpenMapRealVector(this);\n         Iterator iter \u003d res.entries.iterator();\n@@ -347,7 +364,7 @@\n     }\n \n     /** {@inheritDoc} */\n-    public OpenMapRealVector ebeMultiply(RealVector v) throws IllegalArgumentException {\n+    public OpenMapRealVector ebeMultiply(RealVector v) {\n         checkVectorDimensions(v.getDimension());\n         OpenMapRealVector res \u003d new OpenMapRealVector(this);\n         Iterator iter \u003d res.entries.iterator();\n@@ -360,7 +377,7 @@\n \n     /** {@inheritDoc} */\n     @Override\n-    public OpenMapRealVector ebeMultiply(double[] v) throws IllegalArgumentException {\n+    public OpenMapRealVector ebeMultiply(double[] v) {\n         checkVectorDimensions(v.length);\n         OpenMapRealVector res \u003d new OpenMapRealVector(this);\n         Iterator iter \u003d res.entries.iterator();\n@@ -372,7 +389,7 @@\n     }\n \n     /** {@inheritDoc} */\n-    public OpenMapRealVector getSubVector(int index, int n) throws MatrixIndexException {\n+    public OpenMapRealVector getSubVector(int index, int n) {\n         checkIndex(index);\n         checkIndex(index + n - 1);\n         OpenMapRealVector res \u003d new OpenMapRealVector(n);\n@@ -407,11 +424,13 @@\n \n     /**\n      * Optimized method to compute distance.\n-     * @param v The vector to compute distance to\n-     * @return The distance from \u003ccode\u003ethis\u003c/code\u003e and \u003ccode\u003ev\u003c/code\u003e\n-     * @throws IllegalArgumentException If the dimensions don\u0027t match\n+     *\n+     * @param v Vector to compute distance to.\n+     * @return the distance from {@code this} and {@code v}.\n+     * @throws org.apache.commons.math.exception.DimensionMismatchException\n+     * if the dimensions do not match.\n      */\n-    public double getDistance(OpenMapRealVector v) throws IllegalArgumentException {\n+    public double getDistance(OpenMapRealVector v) {\n         Iterator iter \u003d entries.iterator();\n         double res \u003d 0;\n         while (iter.hasNext()) {\n@@ -435,7 +454,7 @@\n \n     /** {@inheritDoc} */\n     @Override\n-    public double getDistance(RealVector v) throws IllegalArgumentException {\n+    public double getDistance(RealVector v) {\n         checkVectorDimensions(v.getDimension());\n         if (v instanceof OpenMapRealVector) {\n             return getDistance((OpenMapRealVector) v);\n@@ -445,7 +464,7 @@\n \n     /** {@inheritDoc} */\n     @Override\n-    public double getDistance(double[] v) throws IllegalArgumentException {\n+    public double getDistance(double[] v) {\n         checkVectorDimensions(v.length);\n         double res \u003d 0;\n         for (int i \u003d 0; i \u003c v.length; i++) {\n@@ -456,18 +475,19 @@\n     }\n \n     /** {@inheritDoc} */\n-    public double getEntry(int index) throws MatrixIndexException {\n+    public double getEntry(int index) {\n         checkIndex(index);\n         return entries.get(index);\n     }\n \n     /**\n      * Distance between two vectors.\n-     * \u003cp\u003eThis method computes the distance consistent with\n+     * This method computes the distance consistent with\n      * L\u003csub\u003e1\u003c/sub\u003e norm, i.e. the sum of the absolute values of\n-     * elements differences.\u003c/p\u003e\n-     * @param v vector to which distance is requested\n-     * @return distance between two vectors.\n+     * elements differences.\n+     *\n+     * @param v Vector to which distance is requested.\n+     * @return distance between this vector and {@code v}.\n      */\n     public double getL1Distance(OpenMapRealVector v) {\n         double max \u003d 0;\n@@ -491,7 +511,7 @@\n \n     /** {@inheritDoc} */\n     @Override\n-    public double getL1Distance(RealVector v) throws IllegalArgumentException {\n+    public double getL1Distance(RealVector v) {\n         checkVectorDimensions(v.getDimension());\n         if (v instanceof OpenMapRealVector) {\n             return getL1Distance((OpenMapRealVector) v);\n@@ -501,7 +521,7 @@\n \n     /** {@inheritDoc} */\n     @Override\n-    public double getL1Distance(double[] v) throws IllegalArgumentException {\n+    public double getL1Distance(double[] v) {\n         checkVectorDimensions(v.length);\n         double max \u003d 0;\n         for (int i \u003d 0; i \u003c v.length; i++) {\n@@ -513,8 +533,9 @@\n \n     /**\n      * Optimized method to compute LInfDistance.\n-     * @param v The vector to compute from\n-     * @return the LInfDistance\n+     *\n+     * @param v Vector to compute distance from.\n+     * @return the LInfDistance.\n      */\n     private double getLInfDistance(OpenMapRealVector v) {\n         double max \u003d 0;\n@@ -541,7 +562,7 @@\n \n     /** {@inheritDoc} */\n     @Override\n-    public double getLInfDistance(RealVector v) throws IllegalArgumentException {\n+    public double getLInfDistance(RealVector v) {\n         checkVectorDimensions(v.getDimension());\n         if (v instanceof OpenMapRealVector) {\n             return getLInfDistance((OpenMapRealVector) v);\n@@ -551,7 +572,7 @@\n \n     /** {@inheritDoc} */\n     @Override\n-    public double getLInfDistance(double[] v) throws IllegalArgumentException {\n+    public double getLInfDistance(double[] v) {\n         checkVectorDimensions(v.length);\n         double max \u003d 0;\n         for (int i \u003d 0; i \u003c v.length; i++) {\n@@ -609,7 +630,7 @@\n \n      /** {@inheritDoc} */\n     @Override\n-    public RealMatrix outerProduct(double[] v) throws IllegalArgumentException {\n+    public RealMatrix outerProduct(double[] v) {\n         checkVectorDimensions(v.length);\n         RealMatrix res \u003d new OpenMapRealMatrix(virtualSize, virtualSize);\n         Iterator iter \u003d entries.iterator();\n@@ -625,20 +646,20 @@\n     }\n \n     /** {@inheritDoc} */\n-    public RealVector projection(RealVector v) throws IllegalArgumentException {\n+    public RealVector projection(RealVector v) {\n         checkVectorDimensions(v.getDimension());\n         return v.mapMultiply(dotProduct(v) / v.dotProduct(v));\n     }\n \n     /** {@inheritDoc} */\n     @Override\n-    public OpenMapRealVector projection(double[] v) throws IllegalArgumentException {\n+    public OpenMapRealVector projection(double[] v) {\n         checkVectorDimensions(v.length);\n         return (OpenMapRealVector) projection(new OpenMapRealVector(v));\n     }\n \n     /** {@inheritDoc} */\n-    public void setEntry(int index, double value) throws MatrixIndexException {\n+    public void setEntry(int index, double value) {\n         checkIndex(index);\n         if (!isDefaultValue(value)) {\n             entries.put(index, value);\n@@ -649,7 +670,7 @@\n \n     /** {@inheritDoc} */\n     @Override\n-    public void setSubVector(int index, RealVector v) throws MatrixIndexException {\n+    public void setSubVector(int index, RealVector v) {\n         checkIndex(index);\n         checkIndex(index + v.getDimension() - 1);\n         setSubVector(index, v.getData());\n@@ -657,7 +678,7 @@\n \n     /** {@inheritDoc} */\n     @Override\n-    public void setSubVector(int index, double[] v) throws MatrixIndexException {\n+    public void setSubVector(int index, double[] v) {\n         checkIndex(index);\n         checkIndex(index + v.length - 1);\n         for (int i \u003d 0; i \u003c v.length; i++) {\n@@ -675,11 +696,13 @@\n \n     /**\n      * Optimized method to subtract OpenMapRealVectors.\n-     * @param v The vector to subtract from \u003ccode\u003ethis\u003c/code\u003e\n-     * @return The difference of \u003ccode\u003ethis\u003c/code\u003e and \u003ccode\u003ev\u003c/code\u003e\n-     * @throws IllegalArgumentException If the dimensions don\u0027t match\n+     *\n+     * @param v Vector to subtract from {@code this}.\n+     * @return the difference of {@code this} and {@code v}.\n+     * @throws org.apache.commons.math.exception.DimensionMismatchException\n+     * if the dimensions do not match.\n      */\n-    public OpenMapRealVector subtract(OpenMapRealVector v) throws IllegalArgumentException{\n+    public OpenMapRealVector subtract(OpenMapRealVector v) {\n         checkVectorDimensions(v.getDimension());\n         OpenMapRealVector res \u003d copy();\n         Iterator iter \u003d v.getEntries().iterator();\n@@ -697,7 +720,7 @@\n \n     /** {@inheritDoc} */\n     @Override\n-    public OpenMapRealVector subtract(RealVector v) throws IllegalArgumentException {\n+    public OpenMapRealVector subtract(RealVector v) {\n         checkVectorDimensions(v.getDimension());\n         if (v instanceof OpenMapRealVector) {\n             return subtract((OpenMapRealVector) v);\n@@ -707,7 +730,7 @@\n \n     /** {@inheritDoc} */\n     @Override\n-    public OpenMapRealVector subtract(double[] v) throws IllegalArgumentException {\n+    public OpenMapRealVector subtract(double[] v) {\n         checkVectorDimensions(v.length);\n         OpenMapRealVector res \u003d new OpenMapRealVector(this);\n         for (int i \u003d 0; i \u003c v.length; i++) {\n@@ -734,27 +757,26 @@\n     public void unitize() {\n         double norm \u003d getNorm();\n         if (isDefaultValue(norm)) {\n-            throw  MathRuntimeException.createArithmeticException(LocalizedFormats.CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR);\n+            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);\n         }\n         Iterator iter \u003d entries.iterator();\n         while (iter.hasNext()) {\n             iter.advance();\n             entries.put(iter.key(), iter.value() / norm);\n         }\n-\n     }\n \n-\n     /** {@inheritDoc} */\n     @Override\n     public double[] toArray() {\n         return getData();\n     }\n \n-    /** {@inheritDoc}\n-     * \u003cp\u003e Implementation Note: This works on exact values, and as a result\n+    /**\n+     * {@inheritDoc}\n+     * Implementation Note: This works on exact values, and as a result\n      * it is possible for {@code a.subtract(b)} to be the zero vector, while\n-     * {@code a.hashCode() !\u003d b.hashCode()}.\u003c/p\u003e\n+     * {@code a.hashCode() !\u003d b.hashCode()}.\n      */\n     @Override\n     public int hashCode() {\n@@ -774,10 +796,10 @@\n     }\n \n     /**\n-     * \u003cp\u003e Implementation Note: This performs an exact comparison, and as a result\n-     * it is possible for {@code a.subtract(b}} to be the zero vector, while\n-     * {@code  a.equals(b) \u003d\u003d false}.\u003c/p\u003e\n      * {@inheritDoc}\n+     * Implementation Note: This performs an exact comparison, and as a result\n+     * it is possible for {@code a.subtract(b}} to be the zero vector, while\n+     * {@code  a.equals(b) \u003d\u003d false}.\n      */\n     @Override\n     public boolean equals(Object obj) {\n@@ -817,18 +839,8 @@\n     /**\n      *\n      * @return the percentage of none zero elements as a decimal percent.\n-     * @deprecated Use the correctly spelled {@link #getSparsity()}\n      */\n-    @Deprecated\n-    public double getSparcity() {\n-        return getSparsity();\n-    }\n-\n-    /**\n-    *\n-    * @return the percentage of none zero elements as a decimal percent.\n-    */\n-   public double getSparsity() {\n+    public double getSparsity() {\n         return (double)entries.size()/(double)getDimension();\n     }\n \n@@ -839,17 +851,18 @@\n     }\n \n     /**\n-     *  Implementation of \u003ccode\u003eEntry\u003c/code\u003e optimized for OpenMap.\n-     * \u003cp\u003eThis implementation does not allow arbitrary calls to \u003ccode\u003esetIndex\u003c/code\u003e\n-     * since the order that entries are returned is undefined.\n+     * Implementation of {@code Entry} optimized for OpenMap.\n+     * This implementation does not allow arbitrary calls to {@code setIndex}\n+     * since the order in which entries are returned is undefined.\n      */\n     protected class OpenMapEntry extends Entry {\n-\n         /** Iterator pointing to the entry. */\n         private final Iterator iter;\n \n-        /** Build an entry from an iterator point to an element.\n-         * @param iter iterator pointing to the entry\n+        /**\n+         * Build an entry from an iterator point to an element.\n+         *\n+         * @param iter Iterator pointing to the entry.\n          */\n         protected OpenMapEntry(Iterator iter) {\n             this.iter \u003d iter;\n@@ -876,15 +889,13 @@\n     }\n \n     /**\n-     *  Iterator class to do iteration over just the non-zero elements.\n-     *  \u003cp\u003eThis implementation is fail-fast, so cannot be used to modify any zero element.\n-     *\n+     * Iterator class to do iteration over just the non-zero elements.\n+     * This implementation is fail-fast, so cannot be used to modify\n+     * any zero element.\n      */\n     protected class OpenMapSparseIterator implements java.util.Iterator\u003cEntry\u003e {\n-\n         /** Underlying iterator. */\n         private final Iterator iter;\n-\n         /** Current entry. */\n         private final Entry current;\n \n@@ -908,7 +919,6 @@\n         /** {@inheritDoc} */\n         public void remove() {\n             throw new UnsupportedOperationException(\"Not supported\");\n-       }\n-\n+        }\n     }\n }\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "ImportDeclaration [874,939]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Javadoc [7636,7977]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Javadoc [10082,10460]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Javadoc [13796,14082]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Javadoc [21622,21926]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [26349,26567]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Javadoc [27350,27526]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [7647,7762]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [7808,7854]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [7862,7969]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [10283,10337]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [10345,10452]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [13906,13959]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [13967,14074]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TagElement [21696,21742]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [21750,21803]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [21811,21918]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TagElement [27361,27518]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [2223,2237]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: into this vector. [2356,2373]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: setting (for advanced use only). [3831,3863]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [7120,7132]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement:  if this value is within epsilon to zero, [7132,7173]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [7181,7194]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement:  otherwise. [7194,7205]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [8841,8850]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement:  to self [8850,8858]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [15821,15830]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: . [15830,15831]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement:  Vector to subtract from  [21704,21729]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [21729,21741]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: . [21741,21742]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: This implementation is fail-fast, so cannot be used to modify [27432,27493]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: any zero element. [27501,27518]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ThrowStatement [23522,23584]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ImportDeclaration [874,926]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [7412,7436]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [7663,7764]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [7807,7863]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [7871,7933]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Javadoc [7652,7941]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [8003,8027]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [10275,10338]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [10346,10408]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Javadoc [10082,10416]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [10474,10498]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [11042,11066]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [11326,11350]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [11783,11807]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [12213,12237]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [12672,12696]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [13107,13127]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [14078,14140]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [14148,14210]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Javadoc [13972,14218]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [14277,14301]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [15016,15040]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [15339,15363]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [15682,15702]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [16814,16838]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [17143,17167]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [18322,18346]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [18657,18681]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [20177,20201]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [20743,20767]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [20987,21011]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [21217,21237]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [21545,21565]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [21792,21812]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement:  The vector to subtract from \u003ccode\u003ethis\u003c/code\u003e [22236,22282]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TagElement [22228,22282]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [22290,22352]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [22360,22422]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Javadoc [22161,22430]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [22497,22521]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [23090,23114]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [23415,23439]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ThrowStatement [24121,24229]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [26659,26905]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "Javadoc [27253,27481]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: \u003cp\u003eThis implementation is fail-fast, so cannot be used to modify any zero element. [28326,28408]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TagElement [28254,28408]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Javadoc [28242,28423]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/math/linear/RealMatrix.java",
        "src/main/java/org/apache/commons/math/linear/RealMatrix.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "multiplyEntry",
            "copySubMatrix",
            "setRowVector",
            "setColumnVector",
            "walkInColumnOrder",
            "walkInOptimizedOrder",
            "getRow",
            "walkInRowOrder",
            "setColumnMatrix",
            "walkInColumnOrder",
            "walkInColumnOrder",
            "walkInOptimizedOrder",
            "setSubMatrix",
            "walkInOptimizedOrder",
            "setColumn",
            "walkInRowOrder",
            "walkInRowOrder",
            "getRowVector",
            "walkInOptimizedOrder",
            "getSubMatrix",
            "getEntry",
            "copySubMatrix",
            "getColumnMatrix",
            "getColumnVector",
            "addToEntry",
            "setRow",
            "walkInColumnOrder",
            "walkInRowOrder",
            "getSubMatrix",
            "setRowMatrix",
            "getColumn",
            "getRowMatrix",
            "setEntry"
          ],
          "num": 33
        },
        {
          "qualified_names": [
            "walkInColumnOrder",
            "getSubMatrix",
            "getRow",
            "multiplyEntry",
            "walkInColumnOrder",
            "getEntry",
            "walkInColumnOrder",
            "setSubMatrix",
            "walkInOptimizedOrder",
            "setRowVector",
            "getColumn",
            "walkInOptimizedOrder",
            "getRowVector",
            "getColumnVector",
            "walkInOptimizedOrder",
            "getColumnMatrix",
            "walkInOptimizedOrder",
            "walkInRowOrder",
            "getRowMatrix",
            "setEntry",
            "setColumnVector",
            "walkInColumnOrder",
            "setRow",
            "copySubMatrix",
            "getSubMatrix",
            "walkInRowOrder",
            "setRowMatrix",
            "setColumnMatrix",
            "addToEntry",
            "walkInRowOrder",
            "copySubMatrix",
            "setColumn",
            "walkInRowOrder"
          ],
          "num": 33
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "137",
            "149",
            "163",
            "166",
            "167",
            "168",
            "169",
            "170",
            "171",
            "172",
            "173",
            "174",
            "175",
            "176",
            "177",
            "178",
            "201",
            "202",
            "203",
            "204",
            "205",
            "211",
            "214",
            "215",
            "216",
            "221",
            "224",
            "225",
            "226",
            "227",
            "234",
            "237",
            "238",
            "239",
            "244",
            "247",
            "248",
            "249",
            "250",
            "252",
            "260",
            "261",
            "262",
            "267",
            "270",
            "272",
            "273",
            "280",
            "283",
            "284",
            "285",
            "290",
            "293",
            "294",
            "295",
            "302",
            "303",
            "304",
            "305",
            "307",
            "308",
            "309",
            "314",
            "317",
            "318",
            "319",
            "326",
            "327",
            "328",
            "329",
            "331",
            "332",
            "333",
            "338",
            "339",
            "341",
            "342",
            "343",
            "350",
            "351",
            "352",
            "353",
            "354",
            "355",
            "356",
            "357",
            "359",
            "360",
            "361",
            "362",
            "368",
            "369",
            "370",
            "371",
            "372",
            "373",
            "374",
            "376",
            "377",
            "378",
            "379",
            "386",
            "387",
            "388",
            "389",
            "390",
            "391",
            "392",
            "394",
            "395",
            "396",
            "397",
            "404",
            "405",
            "406",
            "407",
            "408",
            "409",
            "410",
            "412",
            "413",
            "414",
            "415",
            "516",
            "539",
            "566",
            "567",
            "595",
            "596",
            "620",
            "643",
            "670",
            "671",
            "699",
            "700",
            "723",
            "745",
            "771",
            "772",
            "799",
            "800"
          ],
          "num": 141
        },
        {
          "qualified_names": [
            "137",
            "138",
            "150",
            "151",
            "165",
            "166",
            "169",
            "170",
            "171",
            "172",
            "173",
            "174",
            "175",
            "176",
            "177",
            "178",
            "179",
            "180",
            "181",
            "182",
            "205",
            "206",
            "207",
            "208",
            "209",
            "210",
            "211",
            "212",
            "213",
            "214",
            "220",
            "223",
            "224",
            "225",
            "226",
            "231",
            "234",
            "235",
            "236",
            "237",
            "238",
            "245",
            "248",
            "249",
            "250",
            "251",
            "256",
            "259",
            "260",
            "261",
            "262",
            "263",
            "265",
            "273",
            "274",
            "275",
            "276",
            "281",
            "284",
            "286",
            "287",
            "288",
            "295",
            "298",
            "299",
            "300",
            "301",
            "306",
            "309",
            "310",
            "311",
            "312",
            "313",
            "320",
            "321",
            "323",
            "324",
            "325",
            "326",
            "331",
            "334",
            "335",
            "336",
            "337",
            "338",
            "345",
            "346",
            "348",
            "349",
            "350",
            "351",
            "356",
            "357",
            "359",
            "360",
            "361",
            "362",
            "363",
            "370",
            "371",
            "373",
            "374",
            "375",
            "376",
            "377",
            "383",
            "385",
            "386",
            "387",
            "388",
            "389",
            "396",
            "398",
            "399",
            "400",
            "401",
            "402",
            "409",
            "411",
            "412",
            "413",
            "414",
            "415",
            "516",
            "539",
            "566",
            "567",
            "568",
            "596",
            "597",
            "598",
            "622",
            "645",
            "672",
            "673",
            "674",
            "702",
            "703",
            "704",
            "727",
            "749",
            "775",
            "776",
            "777",
            "804",
            "805",
            "806"
          ],
          "num": 147
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/math/linear/RealMatrix.java b/src/main/java/org/apache/commons/math/linear/RealMatrix.java\nindex 31a3148..1e048f1 100644\n--- a/src/main/java/org/apache/commons/math/linear/RealMatrix.java\n+++ b/src/main/java/org/apache/commons/math/linear/RealMatrix.java\n@@ -134,7 +134,8 @@\n      * @param endColumn Final column index (inclusive)\n      * @return The subMatrix containing the data of the\n      *         specified rows and columns\n-     * @exception MatrixIndexException  if the indices are not valid\n+     * @throws org.apache.commons.math.exception.OutOfRangeException if\n+     * the indices are not valid.\n      */\n     RealMatrix getSubMatrix(int startRow, int endRow, int startColumn, int endColumn);\n \n@@ -146,7 +147,8 @@\n     * @param selectedColumns Array of column indices.\n     * @return The subMatrix containing the data in the\n     *         specified rows and columns\n-    * @exception MatrixIndexException if row or column selections are not valid\n+    * @throws org.apache.commons.math.exception.OutOfRangeException if\n+    * the indices are not valid.\n     */\n     RealMatrix getSubMatrix(int[] selectedRows, int[] selectedColumns);\n \n@@ -160,22 +162,24 @@\n     * @param endColumn Final column index (inclusive)\n     * @param destination The arrays where the submatrix data should be copied\n     * (if larger than rows/columns counts, only the upper-left part will be used)\n-    * @exception MatrixIndexException if the indices are not valid\n+    * @throws org.apache.commons.math.exception.OutOfRangeException if the\n+    * indices are not valid.\n     * @exception IllegalArgumentException if the destination array is too small\n     */\n-  void copySubMatrix(int startRow, int endRow, int startColumn, int endColumn,\n-                     double[][] destination);\n-  /**\n-   * Copy a submatrix. Rows and columns are indicated\n-   * counting from 0 to n-1.\n-   *\n-    * @param selectedRows Array of row indices.\n-    * @param selectedColumns Array of column indices.\n-   * @param destination The arrays where the submatrix data should be copied\n-   * (if larger than rows/columns counts, only the upper-left part will be used)\n-   * @exception MatrixIndexException if the indices are not valid\n-   * @exception IllegalArgumentException if the destination array is too small\n-   */\n+    void copySubMatrix(int startRow, int endRow, int startColumn, int endColumn,\n+                       double[][] destination);\n+    /**\n+     * Copy a submatrix. Rows and columns are indicated\n+     * counting from 0 to n-1.\n+     *\n+     * @param selectedRows Array of row indices.\n+     * @param selectedColumns Array of column indices.\n+     * @param destination The arrays where the submatrix data should be copied\n+     * (if larger than rows/columns counts, only the upper-left part will be used)\n+     * @throws org.apache.commons.math.exception.OutOfRangeException if the\n+     * indices are not valid.\n+     * @exception IllegalArgumentException if the destination array is too small\n+     */\n     void copySubMatrix(int[] selectedRows, int[] selectedColumns, double[][] destination);\n \n    /**\n@@ -198,58 +202,67 @@\n     * @param subMatrix  array containing the submatrix replacement data\n     * @param row  row coordinate of the top, left element to be replaced\n     * @param column  column coordinate of the top, left element to be replaced\n-    * @throws MatrixIndexException  if subMatrix does not fit into this\n-    *    matrix from element in (row, column)\n-    * @throws IllegalArgumentException if \u003ccode\u003esubMatrix\u003c/code\u003e is not rectangular\n-    *  (not all rows have the same length) or empty\n-    * @throws NullPointerException if \u003ccode\u003esubMatrix\u003c/code\u003e is null\n+    * @throws org.apache.commons.math.exception.ZeroException if\n+    * {@code subMatrix} does not contain at least one column.\n+    * @throws org.apache.commons.math.exception.OutOfRangeException if\n+    * {@code subMatrix} does not fit into this matrix from element in\n+    * {@code (row, column)}.\n+    * @throws org.apache.commons.math.exception.DimensionMismatchException\n+    * if {@code subMatrix} is not rectangular.\n+    * (not all rows have the same length) or empty.\n+    * @throws org.apache.commons.math.exception.NullArgumentException if\n+    * {@code subMatrix} is {@code null}.\n     * @since 2.0\n     */\n     void setSubMatrix(double[][] subMatrix, int row, int column);\n \n    /**\n-    * Returns the entries in row number \u003ccode\u003erow\u003c/code\u003e\n+    * Geet the entries at the given row index\n     * as a row matrix.  Row indices start at 0.\n     *\n-    * @param row the row to be fetched\n-    * @return row matrix\n-    * @throws MatrixIndexException if the specified row index is invalid\n+    * @param row Row to be fetched.\n+    * @return row Matrix.\n+    * @throws org.apache.commons.math.exception.OutOfRangeException if\n+    * the specified row index is invalid.\n     */\n    RealMatrix getRowMatrix(int row);\n \n    /**\n-    * Sets the entries in row number \u003ccode\u003erow\u003c/code\u003e\n+    * Set the entries at the given row index\n     * as a row matrix.  Row indices start at 0.\n     *\n-    * @param row the row to be set\n-    * @param matrix row matrix (must have one row and the same number of columns\n-    * as the instance)\n-    * @throws MatrixIndexException if the specified row index is invalid\n+    * @param row Row to be set.\n+    * @param matrix Row matrix (must have one row and the same number of\n+    * columns as the instance).\n+    * @throws org.apache.commons.math.exception.OutOfRangeException if the\n+    * specified row index is invalid.\n     * @throws org.apache.commons.math.exception.MatrixDimensionMismatchException\n     * if the matrix dimensions do not match one instance row.\n     */\n     void setRowMatrix(int row, RealMatrix matrix);\n \n    /**\n-    * Returns the entries in column number \u003ccode\u003ecolumn\u003c/code\u003e\n+    * Get the entries at the given column index\n     * as a column matrix.  Column indices start at 0.\n     *\n-    * @param column the column to be fetched\n-    * @return column matrix\n-    * @throws MatrixIndexException if the specified column index is invalid\n+    * @param column Column to be fetched.\n+    * @return column Matrix.\n+    * @throws org.apache.commons.math.exception.OutOfRangeException if\n+    * the specified column index is invalid.\n     */\n    RealMatrix getColumnMatrix(int column);\n \n    /**\n-    * Sets the entries in column number \u003ccode\u003ecolumn\u003c/code\u003e\n+    * Set the entries at the given column index\n     * as a column matrix.  Column indices start at 0.\n     *\n-    * @param column the column to be set\n-    * @param matrix column matrix (must have one column and the same number of rows\n-    * as the instance)\n-    * @throws MatrixIndexException if the specified column index is invalid\n+    * @param column Column to be set.\n+    * @param matrix Column matrix (must have one column and the same number\n+    * of rows as the instance).\n+    * @throws org.apache.commons.math.exception.OutOfRangeException if\n+    * the specified column index is invalid.\n     * @throws org.apache.commons.math.exception.MatrixDimensionMismatchException\n-    * if the matrix dimensions do not match one instance column.\n+    * if the {@code matrix} dimensions do not match one instance column.\n     */\n     void setColumnMatrix(int column, RealMatrix matrix);\n \n@@ -257,162 +270,149 @@\n     * Returns the entries in row number \u003ccode\u003erow\u003c/code\u003e\n     * as a vector.  Row indices start at 0.\n     *\n-    * @param row the row to be fetched\n-    * @return row vector\n-    * @throws MatrixIndexException if the specified row index is invalid\n+    * @param row Row to be fetched.\n+    * @return a row vector.\n+    * @throws org.apache.commons.math.exception.OutOfRangeException if\n+    * the specified row index is invalid.\n     */\n    RealVector getRowVector(int row);\n \n    /**\n-    * Sets the entries in row number \u003ccode\u003erow\u003c/code\u003e\n+    * Set the entries at the given row index.\n     * as a vector.  Row indices start at 0.\n     *\n-    * @param row the row to be set\n+    * @param row Row to be set.\n     * @param vector row vector (must have the same number of columns\n-    * as the instance)\n-    * @throws MatrixIndexException if the specified row index is invalid\n+    * as the instance).\n+    * @throws org.apache.commons.math.exception.OutOfRangeException if\n+    * the specified row index is invalid.\n     * @throws org.apache.commons.math.exception.MatrixDimensionMismatchException\n     * if the vector dimension does not match one instance row.\n     */\n     void setRowVector(int row, RealVector vector);\n \n    /**\n-    * Returns the entries in column number \u003ccode\u003ecolumn\u003c/code\u003e\n+    * Get the entries at the given column index\n     * as a vector.  Column indices start at 0.\n     *\n-    * @param column the column to be fetched\n-    * @return column vector\n-    * @throws MatrixIndexException if the specified column index is invalid\n+    * @param column Column to be fetched.\n+    * @return a column vector.\n+    * @throws org.apache.commons.math.exception.OutOfRangeException if\n+    * the specified column index is invalid\n     */\n    RealVector getColumnVector(int column);\n \n    /**\n-    * Sets the entries in column number \u003ccode\u003ecolumn\u003c/code\u003e\n+    * Set the entries at the given column index\n     * as a vector.  Column indices start at 0.\n     *\n-    * @param column the column to be set\n-    * @param vector column vector (must have the same number of rows as the instance)\n-    * @throws MatrixIndexException if the specified column index is invalid\n+    * @param column Column to be set.\n+    * @param vector column vector (must have the same number of rows as\n+    * the instance).\n+    * @throws org.apache.commons.math.exception.OutOfRangeException if the\n+    * specified column index is invalid.\n     * @throws org.apache.commons.math.exception.MatrixDimensionMismatchException\n     * if the vector dimension does not match one instance column.\n     */\n     void setColumnVector(int column, RealVector vector);\n \n     /**\n-     * Returns the entries in row number \u003ccode\u003erow\u003c/code\u003e as an array.\n-     * \u003cp\u003e\n-     * Row indices start at 0.  A \u003ccode\u003eMatrixIndexException\u003c/code\u003e is thrown\n-     * unless {@code 0 \u003c\u003d row \u003c rowDimension}.\u003c/p\u003e\n+     * Get the entries at the given row index.\n+     * Row indices start at 0.\n      *\n-     * @param row the row to be fetched\n-     * @return array of entries in the row\n-     * @throws MatrixIndexException if the specified row index is not valid\n+     * @param row Row to be fetched.\n+     * @return the array of entries in the row.\n+     * @throws org.apache.commons.math.exception.OutOfRangeException if the\n+     * specified row index is not valid.\n      */\n     double[] getRow(int row);\n \n     /**\n-     * Sets the entries in row number \u003ccode\u003erow\u003c/code\u003e\n+     * Set the entries at the given row index\n      * as a row matrix.  Row indices start at 0.\n      *\n-     * @param row the row to be set\n-     * @param array row matrix (must have the same number of columns as the instance)\n-     * @throws MatrixIndexException if the specified row index is invalid\n+     * @param row Row to be set.\n+     * @param array Row matrix (must have the same number of columns as\n+     * the instance)\n+     * @throws org.apache.commons.math.exception.OutOfRangeException if the\n+     * specified row index is invalid.\n      * @throws org.apache.commons.math.exception.MatrixDimensionMismatchException\n      * if the array size does not match one instance row.\n      */\n     void setRow(int row, double[] array);\n \n     /**\n-     * Returns the entries in column number \u003ccode\u003ecol\u003c/code\u003e as an array.\n-     * \u003cp\u003e\n-     * Column indices start at 0.  A \u003ccode\u003eMatrixIndexException\u003c/code\u003e is thrown\n-     * unless {@code 0 \u003c\u003d column \u003c columnDimension}.\u003c/p\u003e\n+     * Get the entries at the given column index as an array.\n+     * Column indices start at 0.\n      *\n-     * @param column the column to be fetched\n-     * @return array of entries in the column\n-     * @throws MatrixIndexException if the specified column index is not valid\n+     * @param column Column to be fetched.\n+     * @return the array of entries in the column.\n+     * @throws org.apache.commons.math.exception.OutOfRangeException if the\n+     * specified column index is not valid.\n      */\n     double[] getColumn(int column);\n \n     /**\n-     * Sets the entries in column number \u003ccode\u003ecolumn\u003c/code\u003e\n-     * as a column matrix.  Column indices start at 0.\n+     * Set the entries at the given column index\n+     * as a column matrix array.  Column indices start at 0.\n      *\n-     * @param column the column to be set\n-     * @param array column array (must have the same number of rows as the instance)\n-     * @throws MatrixIndexException if the specified column index is invalid\n+     * @param column Column to be set.\n+     * @param array Column array (must have the same number of rows as\n+     * the instance).\n+     * @throws org.apache.commons.math.exception.OutOfRangeException if the\n+     * specified column index is invalid.\n      * @throws org.apache.commons.math.exception.MatrixDimensionMismatchException\n      * if the array size does not match one instance column.\n      */\n     void setColumn(int column, double[] array);\n \n     /**\n-     * Returns the entry in the specified row and column.\n-     * \u003cp\u003e\n-     * Row and column indices start at 0 and must satisfy\n-     * \u003cul\u003e\n-     * \u003cli\u003e{@code 0 \u003c\u003d row \u003c rowDimension}\u003c/li\u003e\n-     * \u003cli\u003e{@code 0 \u003c\u003d column \u003c columnDimension}\u003c/li\u003e\n-     * \u003c/ul\u003e\n-     * otherwise a \u003ccode\u003eMatrixIndexException\u003c/code\u003e is thrown.\u003c/p\u003e\n+     * Get the entry in the specified row and column.\n+     * Row and column indices start at 0.\n      *\n-     * @param row  row location of entry to be fetched\n-     * @param column  column location of entry to be fetched\n-     * @return matrix entry in row,column\n-     * @throws MatrixIndexException if the row or column index is not valid\n+     * @param row Row location of entry to be fetched.\n+     * @param column Column location of entry to be fetched.\n+     * @return the matrix entry at {@code (row, column)}.\n+     * @throws org.apache.commons.math.exception.OutOfRangeException if the\n+     * row or column index is not valid.\n      */\n     double getEntry(int row, int column);\n \n     /**\n      * Set the entry in the specified row and column.\n-     * \u003cp\u003e\n-     * Row and column indices start at 0 and must satisfy\n-     * \u003cul\u003e\n-     * \u003cli\u003e{@code 0 \u003c\u003d row \u003c rowDimension}\u003c/li\u003e\n-     * \u003cli\u003e{@code 0 \u003c\u003d column \u003c columnDimension}\u003c/li\u003e\n-     * \u003c/ul\u003e\n-     * otherwise a \u003ccode\u003eMatrixIndexException\u003c/code\u003e is thrown.\u003c/p\u003e\n+     * Row and column indices start at 0.\n      *\n-     * @param row  row location of entry to be set\n-     * @param column  column location of entry to be set\n-     * @param value matrix entry to be set in row,column\n-     * @throws MatrixIndexException if the row or column index is not valid\n+     * @param row Row location of entry to be set.\n+     * @param column Column location of entry to be set.\n+     * @param value matrix entry to be set.\n+     * @throws org.apache.commons.math.exception.OutOfRangeException if\n+     * the row or column index is not valid\n      * @since 2.0\n      */\n     void setEntry(int row, int column, double value);\n \n     /**\n      * Change an entry in the specified row and column.\n-     * \u003cp\u003e\n-     * Row and column indices start at 0 and must satisfy\n-     * \u003cul\u003e\n-     * \u003cli\u003e{@code 0 \u003c\u003d row \u003c rowDimension}\u003c/li\u003e\n-     * \u003cli\u003e{@code 0 \u003c\u003d column \u003c columnDimension}\u003c/li\u003e\n-     * \u003c/ul\u003e\n-     * otherwise a \u003ccode\u003eMatrixIndexException\u003c/code\u003e is thrown.\u003c/p\u003e\n+     * Row and column indices start at 0.\n      *\n-     * @param row  row location of entry to be set\n-     * @param column  column location of entry to be set\n-     * @param increment value to add to the current matrix entry in row,column\n-     * @throws MatrixIndexException if the row or column index is not valid\n+     * @param row Row location of entry to be set.\n+     * @param column Column location of entry to be set.\n+     * @param increment value to add to the matrix entry.\n+     * @throws org.apache.commons.math.exception.OutOfRangeException if\n+     * the row or column index is not valid.\n      * @since 2.0\n      */\n     void addToEntry(int row, int column, double increment);\n \n     /**\n      * Change an entry in the specified row and column.\n-     * \u003cp\u003e\n-     * Row and column indices start at 0 and must satisfy\n-     * \u003cul\u003e\n-     * \u003cli\u003e{@code 0 \u003c\u003d row \u003c rowDimension}\u003c/li\u003e\n-     * \u003cli\u003e{@code 0 \u003c\u003d column \u003c columnDimension}\u003c/li\u003e\n-     * \u003c/ul\u003e\n-     * otherwise a \u003ccode\u003eMatrixIndexException\u003c/code\u003e is thrown.\u003c/p\u003e\n+     * Row and column indices start at 0.\n      *\n-     * @param row  row location of entry to be set\n-     * @param column  column location of entry to be set\n-     * @param factor multiplication factor for the current matrix entry in row,column\n-     * @throws MatrixIndexException if the row or column index is not valid\n+     * @param row Row location of entry to be set.\n+     * @param column Column location of entry to be set.\n+     * @param factor Multiplication factor for the matrix entry.\n+     * @throws org.apache.commons.math.exception.OutOfRangeException if\n+     * the row or column index is not valid.\n      * @since 2.0\n      */\n     void multiplyEntry(int row, int column, double factor);\n@@ -513,7 +513,7 @@\n      * of a row from left to right before going to the leftmost element\n      * of the next row.\u003c/p\u003e\n      * @param visitor visitor used to process all matrix entries\n-     * @exception  MatrixVisitorException if the visitor cannot process an entry\n+     * @throws MatrixVisitorException if the visitor cannot process an entry\n      * @see #walkInRowOrder(RealMatrixPreservingVisitor)\n      * @see #walkInRowOrder(RealMatrixChangingVisitor, int, int, int, int)\n      * @see #walkInRowOrder(RealMatrixPreservingVisitor, int, int, int, int)\n@@ -536,7 +536,7 @@\n      * of a row from left to right before going to the leftmost element\n      * of the next row.\u003c/p\u003e\n      * @param visitor visitor used to process all matrix entries\n-     * @exception  MatrixVisitorException if the visitor cannot process an entry\n+     * @throws MatrixVisitorException if the visitor cannot process an entry\n      * @see #walkInRowOrder(RealMatrixChangingVisitor)\n      * @see #walkInRowOrder(RealMatrixChangingVisitor, int, int, int, int)\n      * @see #walkInRowOrder(RealMatrixPreservingVisitor, int, int, int, int)\n@@ -563,8 +563,9 @@\n      * @param endRow Final row index (inclusive)\n      * @param startColumn Initial column index\n      * @param endColumn Final column index\n-     * @exception  MatrixVisitorException if the visitor cannot process an entry\n-     * @exception MatrixIndexException  if the indices are not valid\n+     * @throws MatrixVisitorException if the visitor cannot process an entry\n+     * @throws org.apache.commons.math.exception.OutOfRangeException if\n+     * the indices are not valid.\n      * @see #walkInRowOrder(RealMatrixChangingVisitor)\n      * @see #walkInRowOrder(RealMatrixPreservingVisitor)\n      * @see #walkInRowOrder(RealMatrixPreservingVisitor, int, int, int, int)\n@@ -592,8 +593,9 @@\n      * @param endRow Final row index (inclusive)\n      * @param startColumn Initial column index\n      * @param endColumn Final column index\n-     * @exception  MatrixVisitorException if the visitor cannot process an entry\n-     * @exception MatrixIndexException  if the indices are not valid\n+     * @throws MatrixVisitorException if the visitor cannot process an entry\n+     * @throws org.apache.commons.math.exception.OutOfRangeException if\n+     * the indices are not valid.\n      * @see #walkInRowOrder(RealMatrixChangingVisitor)\n      * @see #walkInRowOrder(RealMatrixPreservingVisitor)\n      * @see #walkInRowOrder(RealMatrixChangingVisitor, int, int, int, int)\n@@ -617,7 +619,7 @@\n      * of a column from top to bottom before going to the topmost element\n      * of the next column.\u003c/p\u003e\n      * @param visitor visitor used to process all matrix entries\n-     * @exception  MatrixVisitorException if the visitor cannot process an entry\n+     * @throws MatrixVisitorException if the visitor cannot process an entry\n      * @see #walkInRowOrder(RealMatrixChangingVisitor)\n      * @see #walkInRowOrder(RealMatrixPreservingVisitor)\n      * @see #walkInRowOrder(RealMatrixChangingVisitor, int, int, int, int)\n@@ -640,7 +642,7 @@\n      * of a column from top to bottom before going to the topmost element\n      * of the next column.\u003c/p\u003e\n      * @param visitor visitor used to process all matrix entries\n-     * @exception  MatrixVisitorException if the visitor cannot process an entry\n+     * @throws MatrixVisitorException if the visitor cannot process an entry\n      * @see #walkInRowOrder(RealMatrixChangingVisitor)\n      * @see #walkInRowOrder(RealMatrixPreservingVisitor)\n      * @see #walkInRowOrder(RealMatrixChangingVisitor, int, int, int, int)\n@@ -667,8 +669,9 @@\n      * @param endRow Final row index (inclusive)\n      * @param startColumn Initial column index\n      * @param endColumn Final column index\n-     * @exception  MatrixVisitorException if the visitor cannot process an entry\n-     * @exception MatrixIndexException  if the indices are not valid\n+     * @throws MatrixVisitorException if the visitor cannot process an entry\n+     * @throws org.apache.commons.math.exception.OutOfRangeException if\n+     * the indices are not valid.\n      * @see #walkInRowOrder(RealMatrixChangingVisitor)\n      * @see #walkInRowOrder(RealMatrixPreservingVisitor)\n      * @see #walkInRowOrder(RealMatrixChangingVisitor, int, int, int, int)\n@@ -696,8 +699,9 @@\n      * @param endRow Final row index (inclusive)\n      * @param startColumn Initial column index\n      * @param endColumn Final column index\n-     * @exception  MatrixVisitorException if the visitor cannot process an entry\n-     * @exception MatrixIndexException  if the indices are not valid\n+     * @throws MatrixVisitorException if the visitor cannot process an entry\n+     * @throws org.apache.commons.math.exception.OutOfRangeException if\n+     * the indices are not valid.\n      * @see #walkInRowOrder(RealMatrixChangingVisitor)\n      * @see #walkInRowOrder(RealMatrixPreservingVisitor)\n      * @see #walkInRowOrder(RealMatrixChangingVisitor, int, int, int, int)\n@@ -720,7 +724,7 @@\n      * \u003cp\u003eThe fastest walking order depends on the exact matrix class. It may be\n      * different from traditional row or column orders.\u003c/p\u003e\n      * @param visitor visitor used to process all matrix entries\n-     * @exception  MatrixVisitorException if the visitor cannot process an entry\n+     * @throws MatrixVisitorException if the visitor cannot process an entry\n      * @see #walkInRowOrder(RealMatrixChangingVisitor)\n      * @see #walkInRowOrder(RealMatrixPreservingVisitor)\n      * @see #walkInRowOrder(RealMatrixChangingVisitor, int, int, int, int)\n@@ -742,7 +746,7 @@\n      * \u003cp\u003eThe fastest walking order depends on the exact matrix class. It may be\n      * different from traditional row or column orders.\u003c/p\u003e\n      * @param visitor visitor used to process all matrix entries\n-     * @exception  MatrixVisitorException if the visitor cannot process an entry\n+     * @throws MatrixVisitorException if the visitor cannot process an entry\n      * @see #walkInRowOrder(RealMatrixChangingVisitor)\n      * @see #walkInRowOrder(RealMatrixPreservingVisitor)\n      * @see #walkInRowOrder(RealMatrixChangingVisitor, int, int, int, int)\n@@ -768,8 +772,9 @@\n      * @param endRow Final row index (inclusive)\n      * @param startColumn Initial column index\n      * @param endColumn Final column index (inclusive)\n-     * @exception  MatrixVisitorException if the visitor cannot process an entry\n-     * @exception MatrixIndexException  if the indices are not valid\n+     * @throws MatrixVisitorException if the visitor cannot process an entry\n+     * @throws org.apache.commons.math.exception.OutOfRangeException if\n+     * the indices are not valid.\n      * @see #walkInRowOrder(RealMatrixChangingVisitor)\n      * @see #walkInRowOrder(RealMatrixPreservingVisitor)\n      * @see #walkInRowOrder(RealMatrixChangingVisitor, int, int, int, int)\n@@ -796,8 +801,9 @@\n      * @param endRow Final row index (inclusive)\n      * @param startColumn Initial column index\n      * @param endColumn Final column index (inclusive)\n-     * @exception  MatrixVisitorException if the visitor cannot process an entry\n-     * @exception MatrixIndexException  if the indices are not valid\n+     * @throws MatrixVisitorException if the visitor cannot process an entry\n+     * @throws org.apache.commons.math.exception.OutOfRangeException if the\n+     * indices are not valid.\n      * @see #walkInRowOrder(RealMatrixChangingVisitor)\n      * @see #walkInRowOrder(RealMatrixPreservingVisitor)\n      * @see #walkInRowOrder(RealMatrixChangingVisitor, int, int, int, int)\n",
      "operations": [
        {
          "type": "insert-node",
          "from": "",
          "to": "Javadoc [9003,9537]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Javadoc [11394,11692]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Javadoc [12270,12598]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Javadoc [12640,13161]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Javadoc [13215,13620]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [7092,7212]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [7219,7382]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [7389,7556]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [7563,7670]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TagElement [8233,8331]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [8338,8444]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TagElement [9159,9260]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [9267,9376]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TagElement [9383,9530]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TagElement [10975,11061]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [11068,11177]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [11405,11475]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [11527,11567]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [11575,11684]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TagElement [11874,11959]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [11967,12074]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [12281,12369]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [12427,12470]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [12478,12590]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [12651,12753]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TagElement [12807,12892]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [12900,13010]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [13226,13314]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [13445,13495]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [13503,13612]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TagElement [13679,13767]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [13934,14042]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TagElement [14139,14229]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [14410,14519]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TagElement [14622,14712]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [14900,15009]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "QualifiedName: org.apache.commons.math.exception.OutOfRangeException [4299,4352]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: the indices are not valid. [4363,4389]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "QualifiedName: org.apache.commons.math.exception.OutOfRangeException [4796,4849]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: the indices are not valid. [4859,4885]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "QualifiedName: org.apache.commons.math.exception.OutOfRangeException [5426,5479]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: indices are not valid. [5493,5515]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "QualifiedName: org.apache.commons.math.exception.OutOfRangeException [6115,6168]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: indices are not valid. [6183,6205]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "QualifiedName: org.apache.commons.math.exception.OutOfRangeException [7945,7998]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: the specified row index is invalid. [8008,8043]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement:  Row matrix (must have one row and the same number of [8246,8299]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: columns as the instance). [8306,8331]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "QualifiedName: org.apache.commons.math.exception.OutOfRangeException [8847,8900]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: the specified column index is invalid. [8910,8948]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement:  Column matrix (must have one column and the same number [9172,9228]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: of rows as the instance). [9235,9260]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: if the  [9464,9471]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [9471,9485]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement:  dimensions do not match one instance column. [9485,9530]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "QualifiedName: org.apache.commons.math.exception.OutOfRangeException [9788,9841]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: the specified row index is invalid. [9851,9886]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "QualifiedName: org.apache.commons.math.exception.OutOfRangeException [10174,10227]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: the specified row index is invalid. [10237,10272]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "QualifiedName: org.apache.commons.math.exception.OutOfRangeException [10671,10724]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: the specified column index is invalid [10734,10771]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement:  column vector (must have the same number of rows as [10988,11040]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: the instance). [11047,11061]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement:  Row matrix (must have the same number of columns as [11886,11938]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: the instance) [11946,11959]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement:  Column array (must have the same number of rows as [12819,12870]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: the instance). [12878,12892]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: Row and column indices start at 0. [13733,13767]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: Row and column indices start at 0. [14195,14229]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: Row and column indices start at 0. [14678,14712]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "QualifiedName: org.apache.commons.math.exception.OutOfRangeException [21236,21289]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: the indices are not valid. [21300,21326]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "QualifiedName: org.apache.commons.math.exception.OutOfRangeException [22929,22982]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: the indices are not valid. [22993,23019]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "QualifiedName: org.apache.commons.math.exception.OutOfRangeException [27349,27402]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: the indices are not valid. [27413,27439]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "QualifiedName: org.apache.commons.math.exception.OutOfRangeException [29056,29109]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: the indices are not valid. [29120,29146]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "QualifiedName: org.apache.commons.math.exception.OutOfRangeException [33413,33466]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: the indices are not valid. [33477,33503]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "QualifiedName: org.apache.commons.math.exception.OutOfRangeException [35109,35162]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: indices are not valid. [35177,35199]"
        },
        {
          "type": "delete-node",
          "from": "SimpleName: MatrixIndexException [4302,4322]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: MatrixIndexException [4762,4782]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: MatrixIndexException [5368,5388]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: MatrixIndexException [6000,6020]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [6932,7043]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [7050,7179]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [7186,7248]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: MatrixIndexException [7536,7556]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement:  row matrix (must have one row and the same number of columns [7809,7870]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: as the instance) [7877,7893]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TagElement [7796,7893]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [7900,7966]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: MatrixIndexException [8386,8406]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement:  column matrix (must have one column and the same number of rows [8686,8750]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: as the instance) [8757,8773]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TagElement [8673,8773]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [8780,8849]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: if the matrix dimensions do not match one instance column. [8937,8995]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TagElement [8856,8995]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Javadoc [8502,9002]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: MatrixIndexException [9253,9273]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: MatrixIndexException [9609,9629]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: MatrixIndexException [10081,10101]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement:  column vector (must have the same number of rows as the instance) [10374,10440]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TagElement [10361,10440]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [10447,10516]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [10744,10947]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [11002,11037]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [11045,11113]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Javadoc [10733,11121]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement:  row matrix (must have the same number of columns as the instance) [11327,11393]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TagElement [11315,11393]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [11401,11467]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [11674,11889]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [11950,11988]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [11996,12067]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Javadoc [11663,12075]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [12128,12236]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement:  column array (must have the same number of rows as the instance) [12305,12370]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TagElement [12293,12370]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [12378,12447]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Javadoc [12117,12598]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [12663,12977]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [13108,13142]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [13150,13218]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Javadoc [12652,13226]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: \u003cp\u003e [13339,13342]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: Row and column indices start at 0 and must satisfy [13350,13400]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: \u003cul\u003e [13408,13412]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: \u003cli\u003e [13420,13424]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [13424,13455]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: \u003c/li\u003e [13455,13460]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: \u003cli\u003e [13468,13472]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [13472,13509]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: \u003c/li\u003e [13509,13514]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: \u003c/ul\u003e [13522,13527]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: otherwise a \u003ccode\u003eMatrixIndexException\u003c/code\u003e is thrown.\u003c/p\u003e [13535,13595]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TagElement [13285,13595]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [13775,13843]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: \u003cp\u003e [13996,13999]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: Row and column indices start at 0 and must satisfy [14007,14057]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: \u003cul\u003e [14065,14069]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: \u003cli\u003e [14077,14081]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [14081,14112]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: \u003c/li\u003e [14112,14117]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: \u003cli\u003e [14125,14129]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [14129,14166]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: \u003c/li\u003e [14166,14171]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: \u003c/ul\u003e [14179,14184]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: otherwise a \u003ccode\u003eMatrixIndexException\u003c/code\u003e is thrown.\u003c/p\u003e [14192,14252]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TagElement [13940,14252]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [14454,14522]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: \u003cp\u003e [14681,14684]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: Row and column indices start at 0 and must satisfy [14692,14742]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: \u003cul\u003e [14750,14754]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: \u003cli\u003e [14762,14766]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [14766,14797]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: \u003c/li\u003e [14797,14802]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: \u003cli\u003e [14810,14814]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [14814,14851]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: \u003c/li\u003e [14851,14856]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: \u003c/ul\u003e [14864,14869]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: otherwise a \u003ccode\u003eMatrixIndexException\u003c/code\u003e is thrown.\u003c/p\u003e [14877,14937]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TagElement [14625,14937]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [15146,15214]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: MatrixIndexException [21456,21476]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: MatrixIndexException [23116,23136]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: MatrixIndexException [27511,27531]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: MatrixIndexException [29185,29205]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: MatrixIndexException [33517,33537]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: MatrixIndexException [35180,35200]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/math/linear/RealVector.java",
        "src/main/java/org/apache/commons/math/linear/RealVector.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "isNaN",
            "subtract",
            "mapDivideToSelf",
            "mapExpToSelf",
            "dotProduct",
            "setSubVector",
            "mapSubtract",
            "mapAdd",
            "setValue",
            "isInfinite",
            "mapPowToSelf",
            "setIndex",
            "add",
            "getSubVector",
            "mapExp",
            "getLInfDistance",
            "getDistance",
            "getL1Distance",
            "getDistance",
            "projection",
            "unitize",
            "ebeDivide",
            "mapSubtractToSelf",
            "setSubVector",
            "ebeMultiply",
            "setEntry",
            "mapAddToSelf",
            "projection",
            "copy",
            "getL1Distance",
            "map",
            "subtract",
            "mapPow",
            "getIndex",
            "iterator",
            "add",
            "outerProduct",
            "getLInfDistance",
            "mapMultiplyToSelf",
            "getEntry",
            "mapMultiply",
            "mapToSelf",
            "sparseIterator",
            "outerProduct",
            "mapDivide",
            "dotProduct",
            "getValue",
            "ebeMultiply",
            "ebeDivide"
          ],
          "num": 49
        },
        {
          "qualified_names": [
            "projection",
            "getDistance",
            "subtract",
            "mapToSelf",
            "setIndex",
            "mapSubtract",
            "getL1Distance",
            "ebeDivide",
            "setEntry",
            "mapDivide",
            "ebeMultiply",
            "getValue",
            "isNaN",
            "mapSubtractToSelf",
            "mapExp",
            "mapPowToSelf",
            "projection",
            "subtract",
            "mapDivideToSelf",
            "getIndex",
            "mapExpToSelf",
            "getEntry",
            "getSubVector",
            "mapPow",
            "mapAddToSelf",
            "getL1Distance",
            "mapMultiply",
            "setSubVector",
            "map",
            "isInfinite",
            "add",
            "outerProduct",
            "getLInfDistance",
            "add",
            "getDistance",
            "mapAdd",
            "iterator",
            "outerProduct",
            "mapMultiplyToSelf",
            "ebeDivide",
            "unitize",
            "dotProduct",
            "setValue",
            "setSubVector",
            "dotProduct",
            "copy",
            "getLInfDistance",
            "ebeMultiply",
            "sparseIterator"
          ],
          "num": 49
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "49",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57",
            "58",
            "64",
            "65",
            "66",
            "67",
            "73",
            "77",
            "78",
            "81",
            "82",
            "83",
            "86",
            "87",
            "88",
            "93",
            "94",
            "95",
            "100",
            "104",
            "110",
            "111",
            "113",
            "119",
            "120",
            "125",
            "126",
            "127",
            "128",
            "130",
            "131",
            "134",
            "135",
            "136",
            "137",
            "139",
            "140",
            "143",
            "144",
            "145",
            "146",
            "148",
            "149",
            "152",
            "153",
            "154",
            "155",
            "157",
            "158",
            "161",
            "162",
            "163",
            "168",
            "169",
            "170",
            "171",
            "176",
            "177",
            "178",
            "183",
            "184",
            "185",
            "186",
            "191",
            "192",
            "193",
            "198",
            "199",
            "200",
            "201",
            "206",
            "207",
            "208",
            "213",
            "214",
            "215",
            "216",
            "222",
            "223",
            "229",
            "230",
            "231",
            "237",
            "242",
            "243",
            "244",
            "538",
            "540",
            "546",
            "548",
            "554",
            "556",
            "562",
            "564",
            "576",
            "578",
            "579",
            "585",
            "587",
            "588",
            "630",
            "635",
            "636",
            "645",
            "650",
            "651",
            "660",
            "665",
            "666",
            "675",
            "680",
            "681",
            "690",
            "695",
            "696",
            "705",
            "710",
            "711",
            "722",
            "729",
            "731",
            "732",
            "737",
            "739",
            "740",
            "746",
            "748",
            "749",
            "755",
            "757",
            "758",
            "762",
            "763",
            "764",
            "765",
            "766",
            "767",
            "768",
            "771",
            "772",
            "778",
            "779",
            "782",
            "783",
            "817",
            "818",
            "820",
            "821",
            "827",
            "828",
            "831",
            "832",
            "838",
            "839",
            "842",
            "843",
            "860",
            "861",
            "866",
            "867",
            "868",
            "869",
            "872"
          ],
          "num": 169
        },
        {
          "qualified_names": [
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57",
            "58",
            "59",
            "60",
            "66",
            "67",
            "68",
            "69",
            "70",
            "71",
            "72",
            "81",
            "82",
            "83",
            "84",
            "87",
            "88",
            "89",
            "90",
            "93",
            "94",
            "95",
            "96",
            "101",
            "102",
            "103",
            "104",
            "112",
            "113",
            "114",
            "120",
            "121",
            "122",
            "123",
            "125",
            "126",
            "127",
            "133",
            "134",
            "135",
            "140",
            "141",
            "142",
            "143",
            "144",
            "145",
            "147",
            "150",
            "151",
            "152",
            "153",
            "154",
            "155",
            "157",
            "158",
            "161",
            "162",
            "163",
            "164",
            "165",
            "166",
            "168",
            "171",
            "172",
            "173",
            "174",
            "175",
            "176",
            "178",
            "181",
            "182",
            "183",
            "184",
            "189",
            "190",
            "191",
            "192",
            "193",
            "198",
            "199",
            "200",
            "201",
            "206",
            "207",
            "208",
            "209",
            "210",
            "215",
            "216",
            "217",
            "218",
            "223",
            "224",
            "225",
            "226",
            "227",
            "232",
            "233",
            "234",
            "235",
            "240",
            "241",
            "242",
            "243",
            "244",
            "250",
            "251",
            "252",
            "258",
            "259",
            "260",
            "261",
            "267",
            "268",
            "273",
            "274",
            "275",
            "276",
            "570",
            "571",
            "573",
            "579",
            "580",
            "582",
            "588",
            "589",
            "591",
            "597",
            "598",
            "600",
            "612",
            "613",
            "615",
            "621",
            "622",
            "624",
            "666",
            "667",
            "672",
            "681",
            "682",
            "687",
            "696",
            "697",
            "702",
            "711",
            "712",
            "717",
            "726",
            "727",
            "732",
            "741",
            "742",
            "747",
            "758",
            "759",
            "766",
            "767",
            "769",
            "774",
            "775",
            "777",
            "783",
            "784",
            "786",
            "792",
            "793",
            "795",
            "799",
            "800",
            "801",
            "802",
            "803",
            "806",
            "812",
            "813",
            "816",
            "850",
            "851",
            "853",
            "859",
            "860",
            "863",
            "869",
            "870",
            "873",
            "890",
            "891",
            "892",
            "897",
            "898",
            "899",
            "900"
          ],
          "num": 199
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/math/linear/RealVector.java b/src/main/java/org/apache/commons/math/linear/RealVector.java\nindex d2d47d8..3abdcdd 100644\n--- a/src/main/java/org/apache/commons/math/linear/RealVector.java\n+++ b/src/main/java/org/apache/commons/math/linear/RealVector.java\n@@ -46,202 +46,234 @@\n  * @since 2.0\n  */\n public interface RealVector {\n-\n     /**\n      * Acts as if it is implemented as:\n-     * Entry e \u003d null;\n-     * for(Iterator\u003cEntry\u003e it \u003d iterator(); it.hasNext(); e \u003d it.next()) {\n-     *   e.setValue(function.value(e.getValue()));\n-     * }\n-     * @param function to apply to each successive entry\n-     * @return this vector\n-     * @throws FunctionEvaluationException if function throws it on application to any entry\n+     * \u003cpre\u003e\n+     *  Entry e \u003d null;\n+     *  for(Iterator\u003cEntry\u003e it \u003d iterator(); it.hasNext(); e \u003d it.next()) {\n+     *      e.setValue(function.value(e.getValue()));\n+     *  }\n+     * \u003c/pre\u003e\n+     *\n+     * @param function Function to apply to each entry.\n+     * @return this vector.\n+     * @throws FunctionEvaluationException if the function throws it.\n      */\n     RealVector mapToSelf(UnivariateRealFunction function) throws FunctionEvaluationException;\n \n     /**\n      * Acts as if implemented as:\n-     * return copy().map(function);\n-     * @param function to apply to each successive entry\n-     * @return a new vector\n-     * @throws FunctionEvaluationException if function throws it on application to any entry\n+     * \u003cpre\u003e\n+     *  return copy().map(function);\n+     * \u003c/pre\u003e\n+     *\n+     * @param function Functin to apply to each entry.\n+     * @return a new vector.\n+     * @throws FunctionEvaluationException if the function throws it.\n      */\n     RealVector map(UnivariateRealFunction function) throws FunctionEvaluationException;\n \n     /** Class representing a modifiable entry in the vector. */\n     public abstract class Entry {\n-\n         /** Index of the entry. */\n         private int index;\n \n-        /** Get the value of the entry.\n-         * @return value of the entry\n+        /**\n+         * Get the value of the entry.\n+         *\n+         * @return the value of the entry.\n          */\n         public abstract double getValue();\n-\n-        /** Set the value of the entry.\n-         * @param value new value for the entry\n+        /**\n+         * Set the value of the entry.\n+         *\n+         * @param value New value for the entry.\n          */\n         public abstract void setValue(double value);\n-\n-        /** Get the index of the entry.\n-         * @return index of the entry\n+        /**\n+         * Get the index of the entry.\n+         *\n+         * @return the index of the entry.\n          */\n         public int getIndex() {\n             return index;\n         }\n-\n-        /** Set the index of the entry.\n-         * @param index new index for the entry\n+        /**\n+         * Set the index of the entry.\n+         *\n+         * @param index New index for the entry.\n          */\n         public void setIndex(int index) {\n             this.index \u003d index;\n         }\n-\n     }\n \n     /**\n-     * Generic dense iterator - starts with index \u003d\u003d zero, and hasNext() \u003d\u003d true until index \u003d\u003d getDimension();\n+     * Generic dense iterator.\n+     * It iterates in increasing order of the vector index.\n+     *\n      * @return a dense iterator\n      */\n     Iterator\u003cEntry\u003e iterator();\n \n     /**\n-     * Specialized implementations may choose to not iterate over all dimensions, either because those values are\n-     * unset, or are equal to defaultValue(), or are small enough to be ignored for the purposes of iteration.\n+     * Specialized implementations may choose to not iterate over all\n+     * dimensions, either because those values are unset, or are equal\n+     * to defaultValue(), or are small enough to be ignored for the\n+     * purposes of iteration.\n      * No guarantees are made about order of iteration.\n-     * In dense implementations, this method will often delegate to {@link #iterator()}\n+     * In dense implementations, this method will often delegate to\n+     * {@link #iterator()}.\n+     *\n      * @return a sparse iterator\n      */\n     Iterator\u003cEntry\u003e sparseIterator();\n \n     /**\n-     * Returns a (deep) copy of this.\n-     * @return vector copy\n+     * Returns a (deep) copy of this vector.\n+     *\n+     * @return a vector copy.\n      */\n     RealVector copy();\n \n     /**\n-     * Compute the sum of this and v.\n-     * @param v vector to be added\n-     * @return this + v\n-     * @throws IllegalArgumentException if v is not the same size as this\n+     * Compute the sum of this vector and {@code v}.\n+     *\n+     * @param v Vector to be added.\n+     * @return {@code this} + {@code v}.\n+     * @throws org.apache.commons.math.exception.DimensionMismatchException\n+     * if {@code v} is not the same size as this vector.\n      */\n-    RealVector add(RealVector v)\n-        throws IllegalArgumentException;\n+    RealVector add(RealVector v);\n \n     /**\n-     * Compute the sum of this and v.\n-     * @param v vector to be added\n-     * @return this + v\n-     * @throws IllegalArgumentException if v is not the same size as this\n+     * Compute the sum of this vector and {@code v}.\n+     *\n+     * @param v Vector to be added.\n+     * @return {@code this} + {@code v}.\n+     * @throws org.apache.commons.math.exception.DimensionMismatchException\n+     * if {@code v} is not the same size as this vector.\n      */\n-    RealVector add(double[] v)\n-        throws IllegalArgumentException;\n+    RealVector add(double[] v);\n+\n \n     /**\n-     * Compute this minus v.\n-     * @param v vector to be subtracted\n-     * @return this + v\n-     * @throws IllegalArgumentException if v is not the same size as this\n+     * Subtract {@code v} from this vector.\n+     *\n+     * @param v Vector to be subtracted.\n+     * @return {@code this} - {@code v}.\n+     * @throws org.apache.commons.math.exception.DimensionMismatchException\n+     * if {@code v} is not the same size as this vector.\n      */\n-    RealVector subtract(RealVector v)\n-        throws IllegalArgumentException;\n+    RealVector subtract(RealVector v);\n \n     /**\n-     * Compute this minus v.\n-     * @param v vector to be subtracted\n-     * @return this - v\n-     * @throws IllegalArgumentException if v is not the same size as this\n+     * Subtract {@code v} from this vector.\n+     *\n+     * @param v Vector to be subtracted.\n+     * @return {@code this} - {@code v}.\n+     * @throws org.apache.commons.math.exception.DimensionMismatchException\n+     * if {@code v} is not the same size as this vector.\n      */\n-    RealVector subtract(double[] v)\n-        throws IllegalArgumentException;\n+    RealVector subtract(double[] v);\n \n     /**\n-     * Map an addition operation to each entry.\n-     * @param d value to be added to each entry\n-     * @return this + d\n+     * Add a value to each entry.\n+     *\n+     * @param d Value to be added to each entry.\n+     * @return {@code this} + {@code d}.\n      */\n     RealVector mapAdd(double d);\n \n     /**\n-     * Map an addition operation to each entry.\n-     * \u003cp\u003eThe instance \u003cstrong\u003eis\u003c/strong\u003e changed by this method.\u003c/p\u003e\n-     * @param d value to be added to each entry\n-     * @return for convenience, return this\n+     * Add a value to each entry.\n+     * The instance is changed in-place.\n+     *\n+     * @param d Value to be added to each entry.\n+     * @return {@code this}.\n      */\n     RealVector mapAddToSelf(double d);\n \n     /**\n-     * Map a subtraction operation to each entry.\n-     * @param d value to be subtracted to each entry\n-     * @return this - d\n+     * Subtract a value from each entry.\n+     *\n+     * @param d Value to be subtracted.\n+     * @return {@code this} - {@code d}.\n      */\n     RealVector mapSubtract(double d);\n \n     /**\n-     * Map a subtraction operation to each entry.\n-     * \u003cp\u003eThe instance \u003cstrong\u003eis\u003c/strong\u003e changed by this method.\u003c/p\u003e\n-     * @param d value to be subtracted to each entry\n-     * @return for convenience, return this\n+     * Subtract a value from each entry.\n+     * The instance is changed in-place.\n+     *\n+     * @param d Value to be subtracted.\n+     * @return {@code this}.\n      */\n     RealVector mapSubtractToSelf(double d);\n \n     /**\n-     * Map a multiplication operation to each entry.\n-     * @param d value to multiply all entries by\n-     * @return this * d\n+     * Multiply each entry.\n+     *\n+     * @param d Multiplication factor.\n+     * @return {@code this} * {@code d}.\n      */\n     RealVector mapMultiply(double d);\n \n     /**\n-     * Map a multiplication operation to each entry.\n-     * \u003cp\u003eThe instance \u003cstrong\u003eis\u003c/strong\u003e changed by this method.\u003c/p\u003e\n-     * @param d value to multiply all entries by\n-     * @return for convenience, return this\n+     * Multiply each entry.\n+     * The instance is changed in-place.\n+     *\n+     * @param d Multiplication factor.\n+     * @return {@code this}.\n      */\n     RealVector mapMultiplyToSelf(double d);\n \n     /**\n-     * Map a division operation to each entry.\n-     * @param d value to divide all entries by\n-     * @return this / d\n+     * Divide each entry.\n+     *\n+     * @param d Value to divide by.\n+     * @return {@code this} / {@code d}.\n      */\n     RealVector mapDivide(double d);\n \n     /**\n-     * Map a division operation to each entry.\n-     * \u003cp\u003eThe instance \u003cstrong\u003eis\u003c/strong\u003e changed by this method.\u003c/p\u003e\n-     * @param d value to divide all entries by\n-     * @return for convenience, return this\n+     * Divide each entry.\n+     * The instance is changed in-place.\n+     *\n+     * @param d Value to divide by.\n+     * @return {@code this}.\n      */\n     RealVector mapDivideToSelf(double d);\n \n     /**\n      * Map a power operation to each entry.\n-     * @param d value to raise all entries to\n-     * @return this ^ d\n+     *\n+     * @param d Operator value.\n+     * @return a mapped copy of the vector.\n      */\n     RealVector mapPow(double d);\n \n     /**\n      * Map a power operation to each entry.\n-     * \u003cp\u003eThe instance \u003cstrong\u003eis\u003c/strong\u003e changed by this method.\u003c/p\u003e\n-     * @param d value to raise all entries to\n-     * @return for convenience, return this\n+     * The instance is changed in-place.\n+     *\n+     * @param d Operator value.\n+     * @return the mapped vector.\n      */\n     RealVector mapPowToSelf(double d);\n \n     /**\n      * Map the {@link Math#exp(double)} function to each entry.\n-     * @return a vector containing the result of applying the function to each entry\n+     *\n+     * @return a mapped copy of the vector.\n      */\n     RealVector mapExp();\n \n     /**\n-     * Map the {@link Math#exp(double)} function to each entry.\n-     * \u003cp\u003eThe instance \u003cstrong\u003eis\u003c/strong\u003e changed by this method.\u003c/p\u003e\n-     * @return for convenience, return this\n+     * Map {@link Math#exp(double)} operation to each entry.\n+     * The instance is changed in-place.\n+     *\n+     * @return the mapped vector.\n      */\n     RealVector mapExpToSelf();\n \n@@ -535,33 +567,37 @@\n      * Element-by-element multiplication.\n      * @param v vector by which instance elements must be multiplied\n      * @return a vector containing this[i] * v[i] for all i\n-     * @throws IllegalArgumentException if v is not the same size as this\n+     * @throws org.apache.commons.math.exception.DimensionMismatchException\n+     * if {@code v} is not the same size as this vector.\n      */\n-    RealVector ebeMultiply(RealVector v) throws IllegalArgumentException;\n+    RealVector ebeMultiply(RealVector v);\n \n     /**\n      * Element-by-element multiplication.\n      * @param v vector by which instance elements must be multiplied\n      * @return a vector containing this[i] * v[i] for all i\n-     * @throws IllegalArgumentException if v is not the same size as this\n+     * @throws org.apache.commons.math.exception.DimensionMismatchException\n+     * if {@code v} is not the same size as this vector.\n      */\n-    RealVector ebeMultiply(double[] v) throws IllegalArgumentException;\n+    RealVector ebeMultiply(double[] v);\n \n     /**\n      * Element-by-element division.\n      * @param v vector by which instance elements must be divided\n      * @return a vector containing this[i] / v[i] for all i\n-     * @throws IllegalArgumentException if v is not the same size as this\n+     * @throws org.apache.commons.math.exception.DimensionMismatchException\n+     * if {@code v} is not the same size as this vector.\n      */\n-    RealVector ebeDivide(RealVector v) throws IllegalArgumentException;\n+    RealVector ebeDivide(RealVector v);\n \n     /**\n      * Element-by-element division.\n      * @param v vector by which instance elements must be divided\n      * @return a vector containing this[i] / v[i] for all i\n-     * @throws IllegalArgumentException if v is not the same size as this\n+     * @throws org.apache.commons.math.exception.DimensionMismatchException\n+     * if {@code v} is not the same size as this vector.\n      */\n-    RealVector ebeDivide(double[] v) throws IllegalArgumentException;\n+    RealVector ebeDivide(double[] v);\n \n     /**\n      * Returns vector entries as a double array.\n@@ -573,19 +609,19 @@\n      * Compute the dot product.\n      * @param v vector with which dot product should be computed\n      * @return the scalar dot product between instance and v\n-     * @exception IllegalArgumentException if v is not the same size as this\n+     * @throws org.apache.commons.math.exception.DimensionMismatchException\n+     * if {@code v} is not the same size as this vector.\n      */\n-    double dotProduct(RealVector v)\n-        throws IllegalArgumentException;\n+    double dotProduct(RealVector v);\n \n     /**\n      * Compute the dot product.\n      * @param v vector with which dot product should be computed\n      * @return the scalar dot product between instance and v\n-     * @exception IllegalArgumentException if v is not the same size as this\n+     * @throws org.apache.commons.math.exception.DimensionMismatchException\n+     * if {@code v} is not the same size as this vector.\n      */\n-    double dotProduct(double[] v)\n-        throws IllegalArgumentException;\n+    double dotProduct(double[] v);\n \n     /**\n      * Returns the L\u003csub\u003e2\u003c/sub\u003e norm of the vector.\n@@ -627,13 +663,13 @@\n      * elements differences, or euclidian distance.\u003c/p\u003e\n      * @param v vector to which distance is requested\n      * @return distance between two vectors.\n-     * @exception IllegalArgumentException if v is not the same size as this\n+     * @throws org.apache.commons.math.exception.DimensionMismatchException\n+     * if {@code v} is not the same size as this vector.\n      * @see #getL1Distance(RealVector)\n      * @see #getLInfDistance(RealVector)\n      * @see #getNorm()\n      */\n-    double getDistance(RealVector v)\n-        throws IllegalArgumentException;\n+    double getDistance(RealVector v);\n \n     /**\n      * Distance between two vectors.\n@@ -642,13 +678,13 @@\n      * elements differences, or euclidian distance.\u003c/p\u003e\n      * @param v vector to which distance is requested\n      * @return distance between two vectors.\n-     * @exception IllegalArgumentException if v is not the same size as this\n+     * @throws org.apache.commons.math.exception.DimensionMismatchException\n+     * if {@code v} is not the same size as this vector.\n      * @see #getL1Distance(double[])\n      * @see #getLInfDistance(double[])\n      * @see #getNorm()\n      */\n-    double getDistance(double[] v)\n-        throws IllegalArgumentException;\n+    double getDistance(double[] v);\n \n     /**\n      * Distance between two vectors.\n@@ -657,13 +693,13 @@\n      * elements differences.\u003c/p\u003e\n      * @param v vector to which distance is requested\n      * @return distance between two vectors.\n-     * @exception IllegalArgumentException if v is not the same size as this\n+     * @throws org.apache.commons.math.exception.DimensionMismatchException\n+     * if {@code v} is not the same size as this vector.\n      * @see #getDistance(RealVector)\n      * @see #getLInfDistance(RealVector)\n      * @see #getL1Norm()\n      */\n-    double getL1Distance(RealVector v)\n-        throws IllegalArgumentException;\n+    double getL1Distance(RealVector v);\n \n     /**\n      * Distance between two vectors.\n@@ -672,13 +708,13 @@\n      * elements differences.\u003c/p\u003e\n      * @param v vector to which distance is requested\n      * @return distance between two vectors.\n-     * @exception IllegalArgumentException if v is not the same size as this\n+     * @throws org.apache.commons.math.exception.DimensionMismatchException\n+     * if {@code v} is not the same size as this vector.\n      * @see #getDistance(double[])\n      * @see #getLInfDistance(double[])\n      * @see #getL1Norm()\n      */\n-    double getL1Distance(double[] v)\n-        throws IllegalArgumentException;\n+    double getL1Distance(double[] v);\n \n     /**\n      * Distance between two vectors.\n@@ -687,13 +723,13 @@\n      * elements differences.\u003c/p\u003e\n      * @param v vector to which distance is requested\n      * @return distance between two vectors.\n-     * @exception IllegalArgumentException if v is not the same size as this\n+     * @throws org.apache.commons.math.exception.DimensionMismatchException\n+     * if {@code v} is not the same size as this vector.\n      * @see #getDistance(RealVector)\n      * @see #getL1Distance(RealVector)\n      * @see #getLInfNorm()\n      */\n-    double getLInfDistance(RealVector v)\n-        throws IllegalArgumentException;\n+    double getLInfDistance(RealVector v);\n \n     /**\n      * Distance between two vectors.\n@@ -702,13 +738,13 @@\n      * elements differences.\u003c/p\u003e\n      * @param v vector to which distance is requested\n      * @return distance between two vectors.\n-     * @exception IllegalArgumentException if v is not the same size as this\n+     * @throws org.apache.commons.math.exception.DimensionMismatchException\n+     * if {@code v} is not the same size as this vector.\n      * @see #getDistance(double[])\n      * @see #getL1Distance(double[])\n      * @see #getLInfNorm()\n      */\n-    double getLInfDistance(double[] v)\n-        throws IllegalArgumentException;\n+    double getLInfDistance(double[] v);\n \n     /** Creates a unit vector pointing in the direction of this vector.\n      * \u003cp\u003eThe instance is not changed by this method.\u003c/p\u003e\n@@ -719,68 +755,65 @@\n \n     /** Converts this vector into a unit vector.\n      * \u003cp\u003eThe instance itself is changed by this method.\u003c/p\u003e\n-     * @exception ArithmeticException if the norm is null\n+     * @throws  org.apache.commons.math.exception.MathArithmeticException\n+     * if the norm is zero.\n      */\n     void unitize();\n \n     /** Find the orthogonal projection of this vector onto another vector.\n      * @param v vector onto which instance must be projected\n      * @return projection of the instance onto v\n-     * @throws IllegalArgumentException if v is not the same size as this\n+     * @throws org.apache.commons.math.exception.DimensionMismatchException\n+     * if {@code v} is not the same size as this vector.\n      */\n-    RealVector projection(RealVector v)\n-        throws IllegalArgumentException;\n+    RealVector projection(RealVector v);\n \n     /** Find the orthogonal projection of this vector onto another vector.\n      * @param v vector onto which instance must be projected\n      * @return projection of the instance onto v\n-     * @throws IllegalArgumentException if v is not the same size as this\n+     * @throws org.apache.commons.math.exception.DimensionMismatchException\n+     * if {@code v} is not the same size as this vector.\n      */\n-    RealVector projection(double[] v)\n-        throws IllegalArgumentException;\n+    RealVector projection(double[] v);\n \n     /**\n      * Compute the outer product.\n      * @param v vector with which outer product should be computed\n      * @return the square matrix outer product between instance and v\n-     * @exception IllegalArgumentException if v is not the same size as this\n+     * @throws org.apache.commons.math.exception.DimensionMismatchException\n+     * if {@code v} is not the same size as this vector.\n      */\n-    RealMatrix outerProduct(RealVector v)\n-        throws IllegalArgumentException;\n+    RealMatrix outerProduct(RealVector v);\n \n     /**\n      * Compute the outer product.\n      * @param v vector with which outer product should be computed\n      * @return the square matrix outer product between instance and v\n-     * @exception IllegalArgumentException if v is not the same size as this\n+     * @throws org.apache.commons.math.exception.DimensionMismatchException\n+     * if {@code v} is not the same size as this vector.\n      */\n-    RealMatrix outerProduct(double[] v)\n-        throws IllegalArgumentException;\n+    RealMatrix outerProduct(double[] v);\n \n     /**\n      * Returns the entry in the specified index.\n-     * \u003cp\u003e\n-     * The index start at 0 and must be lesser than the size,\n-     * otherwise a {@link MatrixIndexException} is thrown.\n-     * \u003c/p\u003e\n-     * @param index  index location of entry to be fetched\n-     * @return vector entry at index\n-     * @throws MatrixIndexException if the index is not valid\n+     *\n+     * @param index Index location of entry to be fetched.\n+     * @return the vector entry at {@code index}.\n+     * @throws org.apache.commons.math.exception.OutOfRangeException\n+     * if the index is not valid.\n      * @see #setEntry(int, double)\n      */\n-    double getEntry(int index)\n-        throws MatrixIndexException;\n+    double getEntry(int index);\n \n     /**\n      * Set a single element.\n      * @param index element index.\n      * @param value new value for the element.\n-     * @exception MatrixIndexException if the index is\n-     * inconsistent with vector size\n+     * @throws org.apache.commons.math.exception.OutOfRangeException\n+     * if the index is not valid.\n      * @see #getEntry(int)\n      */\n-    void setEntry(int index, double value)\n-        throws MatrixIndexException;\n+    void setEntry(int index, double value);\n \n     /**\n      * Returns the size of the vector.\n@@ -814,33 +847,30 @@\n      * @param index index of first element.\n      * @param n number of elements to be retrieved.\n      * @return a vector containing n elements.\n-     * @exception MatrixIndexException if the index is\n-     * inconsistent with vector size\n+     * @throws org.apache.commons.math.exception.OutOfRangeException\n+     * if the index is not valid.\n      */\n-    RealVector getSubVector(int index, int n)\n-        throws MatrixIndexException;\n+    RealVector getSubVector(int index, int n);\n \n     /**\n      * Set a set of consecutive elements.\n      * @param index index of first element to be set.\n      * @param v vector containing the values to set.\n-     * @exception MatrixIndexException if the index is\n-     * inconsistent with vector size\n+     * @throws org.apache.commons.math.exception.OutOfRangeException\n+     * if the index is not valid.\n      * @see #setSubVector(int, double[])\n      */\n-    void setSubVector(int index, RealVector v)\n-        throws MatrixIndexException;\n+    void setSubVector(int index, RealVector v);\n \n     /**\n      * Set a set of consecutive elements.\n      * @param index index of first element to be set.\n      * @param v vector containing the values to set.\n-     * @exception MatrixIndexException if the index is\n-     * inconsistent with vector size\n+     * @throws org.apache.commons.math.exception.OutOfRangeException\n+     * if the index is not valid.\n      * @see #setSubVector(int, RealVector)\n      */\n-    void setSubVector(int index, double[] v)\n-        throws MatrixIndexException;\n+    void setSubVector(int index, double[] v);\n \n     /**\n      * Set all elements to a single value.\n@@ -857,17 +887,17 @@\n     double[] toArray();\n \n     /**\n-     * Returns true if any coordinate of this vector is NaN; false otherwise\n-     * @return  true if any coordinate of this vector is NaN; false otherwise\n+     * Check whether any coordinate of this vector is {@code NaN}.\n+     * @return {@code true} if any coordinate of this vector is {@code NaN},\n+     * {@code false} otherwise.\n      */\n     boolean isNaN();\n \n     /**\n-     * Returns true if any coordinate of this vector is infinite and none are NaN;\n-     * false otherwise\n-     * @return  true if any coordinate of this vector is infinite and none are NaN;\n-     * false otherwise\n+     * Check whether any coordinate of this vector is infinite and none are {@code NaN}.\n+     *\n+     * @return {@code true} if any coordinate of this vector is infinite and\n+     * none are {@code NaN}, {@code false} otherwise.\n      */\n     boolean isInfinite();\n-\n }\n",
      "operations": [
        {
          "type": "insert-node",
          "from": "",
          "to": "Javadoc [3756,3897]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [4421,4514]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Javadoc [4543,4824]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Javadoc [4864,5145]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Javadoc [5184,5461]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Javadoc [5506,5783]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Javadoc [5826,5968]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Javadoc [6007,6178]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Javadoc [6223,6363]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Javadoc [6407,6576]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Javadoc [6626,6752]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Javadoc [6796,6951]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Javadoc [7001,7122]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Javadoc [7164,7314]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [28806,28993]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [29020,29258]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [3767,3850]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [4554,4599]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [4650,4683]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [4691,4816]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [4875,4920]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [4971,5004]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [5012,5137]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [5195,5231]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [5287,5320]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [5328,5453]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [5517,5553]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [5609,5642]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [5650,5775]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [5837,5863]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [5927,5960]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [6018,6085]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [6149,6170]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [6234,6267]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [6322,6355]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [6418,6492]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [6547,6568]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [6637,6657]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [6711,6744]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [6807,6868]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [6922,6943]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [7012,7030]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [7081,7114]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [7175,7234]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [7285,7306]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TagElement [26050,26091]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [26165,26207]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [26215,26310]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003cpre\u003e [2044,2049]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003c/pre\u003e [2221,2227]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003cpre\u003e [2541,2546]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003c/pre\u003e [2591,2597]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: purposes of iteration. [4155,4177]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: In dense implementations, this method will often delegate to [4241,4301]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: . [4328,4329]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "QualifiedName: org.apache.commons.math.exception.DimensionMismatchException [17529,17589]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [17600,17609]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement:  is not the same size as this vector. [17609,17646]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "QualifiedName: org.apache.commons.math.exception.DimensionMismatchException [17892,17952]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [17963,17972]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement:  is not the same size as this vector. [17972,18009]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "QualifiedName: org.apache.commons.math.exception.DimensionMismatchException [18244,18304]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [18315,18324]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement:  is not the same size as this vector. [18324,18361]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "QualifiedName: org.apache.commons.math.exception.DimensionMismatchException [18596,18656]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [18667,18676]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement:  is not the same size as this vector. [18676,18713]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "QualifiedName: org.apache.commons.math.exception.DimensionMismatchException [19072,19132]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [19143,19152]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement:  is not the same size as this vector. [19152,19189]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "QualifiedName: org.apache.commons.math.exception.DimensionMismatchException [19417,19477]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [19488,19497]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement:  is not the same size as this vector. [19497,19534]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "QualifiedName: org.apache.commons.math.exception.DimensionMismatchException [20815,20875]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [20886,20895]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement:  is not the same size as this vector. [20895,20932]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "QualifiedName: org.apache.commons.math.exception.DimensionMismatchException [21424,21484]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [21495,21504]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement:  is not the same size as this vector. [21504,21541]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "QualifiedName: org.apache.commons.math.exception.DimensionMismatchException [22004,22064]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [22075,22084]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement:  is not the same size as this vector. [22084,22121]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "QualifiedName: org.apache.commons.math.exception.DimensionMismatchException [22592,22652]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [22663,22672]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement:  is not the same size as this vector. [22672,22709]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "QualifiedName: org.apache.commons.math.exception.DimensionMismatchException [23180,23240]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [23251,23260]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement:  is not the same size as this vector. [23260,23297]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "QualifiedName: org.apache.commons.math.exception.DimensionMismatchException [23776,23836]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [23847,23856]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement:  is not the same size as this vector. [23856,23893]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "QualifiedName: org.apache.commons.math.exception.MathArithmeticException [24460,24517]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "QualifiedName: org.apache.commons.math.exception.DimensionMismatchException [24775,24835]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [24846,24855]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement:  is not the same size as this vector. [24855,24892]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "QualifiedName: org.apache.commons.math.exception.DimensionMismatchException [25143,25203]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [25214,25223]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement:  is not the same size as this vector. [25223,25260]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "QualifiedName: org.apache.commons.math.exception.DimensionMismatchException [25503,25563]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [25574,25583]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement:  is not the same size as this vector. [25583,25620]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "QualifiedName: org.apache.commons.math.exception.DimensionMismatchException [25867,25927]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [25938,25947]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement:  is not the same size as this vector. [25947,25984]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "QualifiedName: org.apache.commons.math.exception.OutOfRangeException [26521,26574]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "QualifiedName: org.apache.commons.math.exception.OutOfRangeException [27563,27616]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "QualifiedName: org.apache.commons.math.exception.OutOfRangeException [27879,27932]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "QualifiedName: org.apache.commons.math.exception.OutOfRangeException [28237,28290]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [3645,3749]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Javadoc [3634,3789]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "Javadoc [4284,4360]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [4400,4430]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [4473,4489]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [4497,4563]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Javadoc [4389,4571]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [4620,4644]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [4662,4692]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [4735,4751]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [4759,4825]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Javadoc [4651,4833]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [4880,4904]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [4922,4943]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [4991,5007]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [5015,5081]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Javadoc [4911,5089]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [5143,5167]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [5185,5206]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [5254,5270]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [5278,5344]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Javadoc [5174,5352]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [5404,5428]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [5446,5486]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [5542,5558]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Javadoc [5435,5566]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [5616,5727]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [5783,5819]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Javadoc [5605,5827]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [5883,5925]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [5986,6002]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Javadoc [5872,6010]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [6065,6178]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [6239,6275]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Javadoc [6054,6283]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [6344,6389]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [6446,6462]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Javadoc [6333,6470]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [6525,6641]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [6698,6734]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Javadoc [6514,6742]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [6803,6842]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [6897,6913]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Javadoc [6792,6921]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [6974,7084]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [7139,7175]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Javadoc [6963,7183]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: IllegalArgumentException [17502,17526]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [17617,17641]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: IllegalArgumentException [17838,17862]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [17951,17975]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: IllegalArgumentException [18163,18187]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [18276,18300]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: IllegalArgumentException [18488,18512]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [18599,18623]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: IllegalArgumentException [18940,18964]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [19058,19082]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: IllegalArgumentException [19269,19293]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [19385,19409]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: IllegalArgumentException [20651,20675]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [20873,20897]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: IllegalArgumentException [21244,21268]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [21460,21484]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: IllegalArgumentException [21808,21832]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [22032,22056]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: IllegalArgumentException [22380,22404]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [22598,22622]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: IllegalArgumentException [22952,22976]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [23178,23202]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: IllegalArgumentException [23532,23556]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [23752,23776]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: ArithmeticException [24199,24218]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: IllegalArgumentException [24468,24492]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [24590,24614]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: IllegalArgumentException [24817,24841]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [24937,24961]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: IllegalArgumentException [25161,25185]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [25285,25309]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: IllegalArgumentException [25509,25533]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [25631,25655]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: \u003cp\u003e [25722,25725]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: The index start at 0 and must be lesser than the size, [25733,25787]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: otherwise a  [25795,25807]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [25807,25835]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement:  is thrown. [25835,25846]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: \u003c/p\u003e [25854,25858]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TagElement [25673,25858]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [25925,25954]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [25962,26016]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [26106,26126]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: MatrixIndexException [26266,26286]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: inconsistent with vector size [26310,26339]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [26433,26453]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: MatrixIndexException [27333,27353]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: inconsistent with vector size [27377,27406]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [27476,27496]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: MatrixIndexException [27674,27694]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: inconsistent with vector size [27718,27747]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [27859,27879]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: MatrixIndexException [28057,28077]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: inconsistent with vector size [28101,28130]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [28242,28262]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "Javadoc [28648,28814]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "Javadoc [28841,29065]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java",
        "src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "SparseFieldMatrix",
            "createMatrix",
            "getEntry",
            "SparseFieldMatrix",
            "SparseFieldMatrix",
            "SparseFieldMatrix",
            "multiplyEntry",
            "setEntry",
            "addToEntry",
            "computeKey"
          ],
          "num": 10
        },
        {
          "qualified_names": [
            "setEntry",
            "multiplyEntry",
            "SparseFieldMatrix",
            "createMatrix",
            "SparseFieldMatrix",
            "computeKey",
            "addToEntry",
            "SparseFieldMatrix",
            "SparseFieldMatrix",
            "getEntry"
          ],
          "num": 10
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "31",
            "32",
            "33",
            "37",
            "38",
            "39",
            "41",
            "42",
            "43",
            "46",
            "48",
            "49",
            "59",
            "61",
            "62",
            "63",
            "64",
            "67",
            "68",
            "77",
            "88",
            "104",
            "105",
            "115",
            "126",
            "127",
            "139",
            "153",
            "154",
            "169",
            "170",
            "178",
            "181",
            "182",
            "183",
            "184",
            "189"
          ],
          "num": 37
        },
        {
          "qualified_names": [
            "31",
            "35",
            "37",
            "41",
            "42",
            "43",
            "53",
            "54",
            "56",
            "57",
            "58",
            "59",
            "60",
            "63",
            "72",
            "73",
            "84",
            "85",
            "101",
            "118",
            "121",
            "133",
            "147",
            "162",
            "171",
            "173",
            "174",
            "175",
            "176",
            "177"
          ],
          "num": 30
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java b/src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java\nindex ca90a2b..d19c9ec 100644\n--- a/src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java\n+++ b/src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java\n@@ -28,25 +28,19 @@\n  * @since 2.0\n  */\n public class SparseFieldMatrix\u003cT extends FieldElement\u003cT\u003e\u003e extends AbstractFieldMatrix\u003cT\u003e {\n-    /**\n-     *  Serial id\n-     */\n+    /** Serialization identifier. */\n     private static final long serialVersionUID \u003d 9078068119297757342L;\n     /** Storage for (sparse) matrix elements. */\n     private final OpenIntToFieldHashMap\u003cT\u003e entries;\n-    /**\n-     * row dimension\n-     */\n+    /** Row dimension. */\n     private final int rows;\n-    /**\n-     * column dimension\n-     */\n+    /** Column dimension. */\n     private final int columns;\n \n-\n     /**\n-     * Creates a matrix with no data.\n-     * @param field field to which the elements belong\n+     * Create a matrix with no data.\n+     *\n+     * @param field Field to which the elements belong.\n      */\n     public SparseFieldMatrix(final Field\u003cT\u003e field) {\n         super(field);\n@@ -56,16 +50,17 @@\n     }\n \n     /**\n-     * Create a new SparseFieldMatrix\u003cT\u003e with the supplied row and column dimensions.\n+     * Create a new SparseFieldMatrix\u003cT\u003e with the supplied row and column\n+     * dimensions.\n      *\n-     * @param field field to which the elements belong\n-     * @param rowDimension  the number of rows in the new matrix\n-     * @param columnDimension  the number of columns in the new matrix\n-     * @throws IllegalArgumentException if row or column dimension is not positive\n+     * @param field Field to which the elements belong.\n+     * @param rowDimension Number of rows in the new matrix.\n+     * @param columnDimension Number of columns in the new matrix.\n+     * @throws org.apache.commons.math.exception.NotStrictlyPositiveException\n+     * if row or column dimension is not positive.\n      */\n     public SparseFieldMatrix(final Field\u003cT\u003e field,\n-                             final int rowDimension, final int columnDimension)\n-        throws IllegalArgumentException {\n+                             final int rowDimension, final int columnDimension) {\n         super(field, rowDimension, columnDimension);\n         this.rows \u003d rowDimension;\n         this.columns \u003d columnDimension;\n@@ -74,7 +69,8 @@\n \n     /**\n      * Copy constructor.\n-     * @param other The instance to copy\n+     *\n+     * @param other Instance to copy.\n      */\n     public SparseFieldMatrix(SparseFieldMatrix\u003cT\u003e other) {\n         super(other.getField(), other.getRowDimension(), other.getColumnDimension());\n@@ -85,7 +81,8 @@\n \n     /**\n      * Generic copy constructor.\n-     * @param other The instance to copy\n+     *\n+     * @param other Instance to copy.\n      */\n     public SparseFieldMatrix(FieldMatrix\u003cT\u003e other){\n         super(other.getField(), other.getRowDimension(), other.getColumnDimension());\n@@ -101,8 +98,7 @@\n \n     /** {@inheritDoc} */\n     @Override\n-    public void addToEntry(int row, int column, T increment)\n-            throws MatrixIndexException {\n+    public void addToEntry(int row, int column, T increment) {\n         checkRowIndex(row);\n         checkColumnIndex(column);\n         final int key \u003d computeKey(row, column);\n@@ -112,7 +108,6 @@\n         } else {\n             entries.put(key, value);\n         }\n-\n     }\n \n     /** {@inheritDoc} */\n@@ -123,8 +118,7 @@\n \n     /** {@inheritDoc} */\n     @Override\n-    public FieldMatrix\u003cT\u003e createMatrix(int rowDimension, int columnDimension)\n-            throws IllegalArgumentException {\n+    public FieldMatrix\u003cT\u003e createMatrix(int rowDimension, int columnDimension) {\n         return new SparseFieldMatrix\u003cT\u003e(getField(), rowDimension, columnDimension);\n     }\n \n@@ -136,7 +130,7 @@\n \n     /** {@inheritDoc} */\n     @Override\n-    public T getEntry(int row, int column) throws MatrixIndexException {\n+    public T getEntry(int row, int column) {\n         checkRowIndex(row);\n         checkColumnIndex(column);\n         return entries.get(computeKey(row, column));\n@@ -150,8 +144,7 @@\n \n     /** {@inheritDoc} */\n     @Override\n-    public void multiplyEntry(int row, int column, T factor)\n-            throws MatrixIndexException {\n+    public void multiplyEntry(int row, int column, T factor) {\n         checkRowIndex(row);\n         checkColumnIndex(column);\n         final int key \u003d computeKey(row, column);\n@@ -166,8 +159,7 @@\n \n     /** {@inheritDoc} */\n     @Override\n-    public void setEntry(int row, int column, T value)\n-            throws MatrixIndexException {\n+    public void setEntry(int row, int column, T value) {\n         checkRowIndex(row);\n         checkColumnIndex(column);\n         if (getField().getZero().equals(value)) {\n@@ -175,16 +167,16 @@\n         } else {\n             entries.put(computeKey(row, column), value);\n         }\n-\n     }\n+\n     /**\n-     * Compute the key to access a matrix element\n-     * @param row row index of the matrix element\n-     * @param column column index of the matrix element\n-     * @return key within the map to access the matrix element\n+     * Compute the key to access a matrix element.\n+     *\n+     * @param row Row index of the matrix element.\n+     * @param column Column index of the matrix element.\n+     * @return the key within the map to access the matrix element.\n      */\n     private int computeKey(int row, int column) {\n         return row * columns + column;\n     }\n-\n }\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [1246,1278]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [1455,1476]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [1509,1533]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [1872,1957]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [2156,2277]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "Javadoc [1246,1275]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "Javadoc [1452,1484]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "Javadoc [1517,1552]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [1885,1963]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [2169,2244]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [2399,2423]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [3665,3685]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [4275,4299]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [4590,4610]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [4956,4976]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [5417,5437]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/math/linear/SparseFieldVector.java",
        "src/main/java/org/apache/commons/math/linear/SparseFieldVector.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "SparseFieldVector",
            "dotProduct",
            "outerProduct",
            "subtract",
            "subtract",
            "SparseFieldVector",
            "SparseFieldVector",
            "subtract",
            "dotProduct",
            "append",
            "setEntry",
            "add",
            "getEntries",
            "add",
            "SparseFieldVector",
            "checkIndex",
            "SparseFieldVector",
            "projection",
            "setSubVector",
            "buildArray",
            "ebeDivide",
            "ebeMultiply",
            "projection",
            "outerProduct",
            "SparseFieldVector",
            "checkVectorDimensions",
            "getSubVector",
            "add",
            "ebeMultiply",
            "setSubVector",
            "outerProduct",
            "ebeDivide",
            "getEntry"
          ],
          "num": 33
        },
        {
          "qualified_names": [
            "append",
            "buildArray",
            "SparseFieldVector",
            "dotProduct",
            "ebeMultiply",
            "setEntry",
            "outerProduct",
            "ebeDivide",
            "getSubVector",
            "SparseFieldVector",
            "subtract",
            "setSubVector",
            "getEntries",
            "ebeMultiply",
            "ebeDivide",
            "setSubVector",
            "subtract",
            "checkVectorDimensions",
            "projection",
            "SparseFieldVector",
            "add",
            "outerProduct",
            "getEntry",
            "outerProduct",
            "subtract",
            "SparseFieldVector",
            "SparseFieldVector",
            "add",
            "checkIndex",
            "SparseFieldVector",
            "add",
            "projection",
            "dotProduct"
          ],
          "num": 33
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "24",
            "25",
            "35",
            "36",
            "37",
            "38",
            "49",
            "52",
            "54",
            "55",
            "63",
            "64",
            "65",
            "75",
            "76",
            "87",
            "88",
            "89",
            "99",
            "100",
            "101",
            "113",
            "114",
            "117",
            "127",
            "135",
            "136",
            "137",
            "139",
            "159",
            "170",
            "171",
            "214",
            "226",
            "242",
            "243",
            "255",
            "267",
            "279",
            "307",
            "318",
            "319",
            "401",
            "402",
            "403",
            "404",
            "405",
            "406",
            "407",
            "408",
            "424",
            "440",
            "441",
            "449",
            "450",
            "456",
            "469",
            "475",
            "476",
            "483",
            "494",
            "495",
            "496",
            "498",
            "515",
            "516",
            "524",
            "543",
            "545",
            "546",
            "547",
            "548",
            "550",
            "552",
            "553",
            "560",
            "561",
            "562",
            "563",
            "565",
            "567",
            "568",
            "569",
            "573",
            "575",
            "583",
            "584",
            "585",
            "654",
            "655",
            "656"
          ],
          "num": 91
        },
        {
          "qualified_names": [
            "24",
            "25",
            "35",
            "46",
            "49",
            "51",
            "52",
            "53",
            "61",
            "62",
            "63",
            "64",
            "74",
            "75",
            "76",
            "87",
            "88",
            "89",
            "90",
            "100",
            "101",
            "102",
            "103",
            "117",
            "118",
            "128",
            "129",
            "137",
            "138",
            "139",
            "140",
            "141",
            "143",
            "163",
            "174",
            "175",
            "176",
            "219",
            "231",
            "247",
            "259",
            "271",
            "283",
            "311",
            "322",
            "404",
            "405",
            "406",
            "407",
            "408",
            "409",
            "410",
            "411",
            "427",
            "443",
            "451",
            "457",
            "470",
            "476",
            "483",
            "494",
            "495",
            "496",
            "497",
            "498",
            "500",
            "517",
            "525",
            "544",
            "546",
            "547",
            "549",
            "551",
            "558",
            "559",
            "561",
            "563",
            "568",
            "576",
            "577",
            "578",
            "579",
            "580",
            "658"
          ],
          "num": 84
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/math/linear/SparseFieldVector.java b/src/main/java/org/apache/commons/math/linear/SparseFieldVector.java\nindex ee5a98a..b9f0d22 100644\n--- a/src/main/java/org/apache/commons/math/linear/SparseFieldVector.java\n+++ b/src/main/java/org/apache/commons/math/linear/SparseFieldVector.java\n@@ -21,8 +21,8 @@\n \n import org.apache.commons.math.Field;\n import org.apache.commons.math.FieldElement;\n-import org.apache.commons.math.MathRuntimeException;\n-import org.apache.commons.math.exception.util.LocalizedFormats;\n+import org.apache.commons.math.exception.OutOfRangeException;\n+import org.apache.commons.math.exception.DimensionMismatchException;\n import org.apache.commons.math.util.OpenIntToFieldHashMap;\n \n /**\n@@ -32,10 +32,7 @@\n  * @since 2.0\n  */\n public class SparseFieldVector\u003cT extends FieldElement\u003cT\u003e\u003e implements FieldVector\u003cT\u003e, Serializable {\n-\n-    /**\n-     *  Serial version id\n-     */\n+    /**  Serialization identifier. */\n     private static final long serialVersionUID \u003d 7841233292190413362L;\n     /** Field to which the elements belong. */\n     private final Field\u003cT\u003e field;\n@@ -46,13 +43,14 @@\n \n     /**\n      * Build a 0-length vector.\n-     * \u003cp\u003eZero-length vectors may be used to initialize construction of vectors\n+     * Zero-length vectors may be used to initialize construction of vectors\n      * by data gathering. We start with zero-length and use either the {@link\n      * #SparseFieldVector(SparseFieldVector, int)} constructor\n-     * or one of the \u003ccode\u003eappend\u003c/code\u003e method ({@link #append(FieldElement)},\n+     * or one of the {@code append} method ({@link #append(FieldElement)},\n      * {@link #append(FieldElement[])}, {@link #append(FieldVector)},\n-     * {@link #append(SparseFieldVector)}) to gather data into this vector.\u003c/p\u003e\n-     * @param field field to which the elements belong\n+     * {@link #append(SparseFieldVector)}) to gather data into this vector.\n+     *\n+     * @param field Field to which the elements belong.\n      */\n     public SparseFieldVector(Field\u003cT\u003e field) {\n         this(field, 0);\n@@ -60,9 +58,10 @@\n \n \n     /**\n-     * Construct a (dimension)-length vector of zeros.\n-     * @param field field to which the elements belong\n-     * @param dimension Size of the vector\n+     * Construct a vector of zeroes.\n+     *\n+     * @param field Field to which the elements belong.\n+     * @param dimension Size of the vector.\n      */\n     public SparseFieldVector(Field\u003cT\u003e field, int dimension) {\n         this.field \u003d field;\n@@ -72,8 +71,9 @@\n \n     /**\n      * Build a resized vector, for use with append.\n-     * @param v The original vector\n-     * @param resize The amount to resize it\n+     *\n+     * @param v Original vector\n+     * @param resize Amount to add.\n      */\n     protected SparseFieldVector(SparseFieldVector\u003cT\u003e v, int resize) {\n         field \u003d v.field;\n@@ -84,9 +84,10 @@\n \n     /**\n      * Build a vector with known the sparseness (for advanced use only).\n-     * @param field field to which the elements belong\n-     * @param dimension The size of the vector\n-     * @param expectedSize The expected number of non-zero entries\n+     *\n+     * @param field Field to which the elements belong.\n+     * @param dimension Size of the vector.\n+     * @param expectedSize Expected number of non-zero entries.\n      */\n     public SparseFieldVector(Field\u003cT\u003e field, int dimension, int expectedSize) {\n         this.field \u003d field;\n@@ -96,9 +97,10 @@\n \n     /**\n      * Create from a Field array.\n-     * Only non-zero entries will be stored\n-     * @param field field to which the elements belong\n-     * @param values The set of values to create from\n+     * Only non-zero entries will be stored.\n+     *\n+     * @param field Field to which the elements belong.\n+     * @param values Set of values to create from.\n      */\n     public SparseFieldVector(Field\u003cT\u003e field, T[] values) {\n         this.field \u003d field;\n@@ -110,11 +112,10 @@\n         }\n     }\n \n-\n-\n     /**\n      * Copy constructor.\n-     * @param v The instance to copy from\n+     *\n+     * @param v Instance to copy.\n      */\n     public SparseFieldVector(SparseFieldVector\u003cT\u003e v) {\n         field \u003d v.field;\n@@ -124,7 +125,8 @@\n \n     /**\n      * Get the entries of this instance.\n-     * @return entries of this instance\n+     *\n+     * @return the entries of this instance\n      */\n     private OpenIntToFieldHashMap\u003cT\u003e getEntries() {\n         return entries;\n@@ -132,11 +134,13 @@\n \n     /**\n      * Optimized method to add sparse vectors.\n-     * @param v vector to add\n-     * @return The sum of \u003ccode\u003ethis\u003c/code\u003e and \u003ccode\u003ev\u003c/code\u003e\n-     * @throws IllegalArgumentException If the dimensions don\u0027t match\n+     *\n+     * @param v Vector to add.\n+     * @return the sum of {@code this} and {@code v}.\n+     * @throws DimensionMismatchException\n+     * if the dimensions do not match.\n      */\n-    public FieldVector\u003cT\u003e add(SparseFieldVector\u003cT\u003e v) throws IllegalArgumentException {\n+    public FieldVector\u003cT\u003e add(SparseFieldVector\u003cT\u003e v) {\n         checkVectorDimensions(v.getDimension());\n         SparseFieldVector\u003cT\u003e res \u003d (SparseFieldVector\u003cT\u003e)copy();\n         OpenIntToFieldHashMap\u003cT\u003e.Iterator iter \u003d v.getEntries().iterator();\n@@ -156,7 +160,7 @@\n \n \n     /** {@inheritDoc} */\n-    public FieldVector\u003cT\u003e add(T[] v) throws IllegalArgumentException {\n+    public FieldVector\u003cT\u003e add(T[] v) {\n         checkVectorDimensions(v.length);\n         SparseFieldVector\u003cT\u003e res \u003d new SparseFieldVector\u003cT\u003e(field,getDimension());\n         for (int i \u003d 0; i \u003c v.length; i++) {\n@@ -167,8 +171,9 @@\n \n     /**\n      * Construct a vector by appending a vector to this vector.\n-     * @param v vector to append to this one.\n-     * @return a new vector\n+     *\n+     * @param v Vector to append to this one.\n+     * @return a new vector.\n      */\n     public FieldVector\u003cT\u003e append(SparseFieldVector\u003cT\u003e v) {\n         SparseFieldVector\u003cT\u003e res \u003d new SparseFieldVector\u003cT\u003e(this, v.getDimension());\n@@ -211,7 +216,7 @@\n    }\n \n     /** {@inheritDoc} */\n-    public T dotProduct(FieldVector\u003cT\u003e v) throws IllegalArgumentException {\n+    public T dotProduct(FieldVector\u003cT\u003e v) {\n         checkVectorDimensions(v.getDimension());\n         T res \u003d field.getZero();\n         OpenIntToFieldHashMap\u003cT\u003e.Iterator iter \u003d entries.iterator();\n@@ -223,7 +228,7 @@\n     }\n \n     /** {@inheritDoc} */\n-    public T dotProduct(T[] v) throws IllegalArgumentException {\n+    public T dotProduct(T[] v) {\n         checkVectorDimensions(v.length);\n         T res \u003d field.getZero();\n         OpenIntToFieldHashMap\u003cT\u003e.Iterator iter \u003d entries.iterator();\n@@ -239,8 +244,7 @@\n      }\n \n     /** {@inheritDoc} */\n-    public FieldVector\u003cT\u003e ebeDivide(FieldVector\u003cT\u003e v)\n-        throws IllegalArgumentException {\n+    public FieldVector\u003cT\u003e ebeDivide(FieldVector\u003cT\u003e v) {\n         checkVectorDimensions(v.getDimension());\n         SparseFieldVector\u003cT\u003e res \u003d new SparseFieldVector\u003cT\u003e(this);\n         OpenIntToFieldHashMap\u003cT\u003e.Iterator iter \u003d res.entries.iterator();\n@@ -252,7 +256,7 @@\n     }\n \n     /** {@inheritDoc} */\n-    public FieldVector\u003cT\u003e ebeDivide(T[] v) throws IllegalArgumentException {\n+    public FieldVector\u003cT\u003e ebeDivide(T[] v) {\n         checkVectorDimensions(v.length);\n         SparseFieldVector\u003cT\u003e res \u003d new SparseFieldVector\u003cT\u003e(this);\n         OpenIntToFieldHashMap\u003cT\u003e.Iterator iter \u003d res.entries.iterator();\n@@ -264,7 +268,7 @@\n     }\n \n     /** {@inheritDoc} */\n-    public FieldVector\u003cT\u003e ebeMultiply(FieldVector\u003cT\u003e v)throws IllegalArgumentException {\n+    public FieldVector\u003cT\u003e ebeMultiply(FieldVector\u003cT\u003e v) {\n         checkVectorDimensions(v.getDimension());\n         SparseFieldVector\u003cT\u003e res \u003d new SparseFieldVector\u003cT\u003e(this);\n         OpenIntToFieldHashMap\u003cT\u003e.Iterator iter \u003d res.entries.iterator();\n@@ -276,7 +280,7 @@\n     }\n \n     /** {@inheritDoc} */\n-     public FieldVector\u003cT\u003e ebeMultiply(T[] v) throws IllegalArgumentException {\n+     public FieldVector\u003cT\u003e ebeMultiply(T[] v) {\n         checkVectorDimensions(v.length);\n         SparseFieldVector\u003cT\u003e res \u003d new SparseFieldVector\u003cT\u003e(this);\n         OpenIntToFieldHashMap\u003cT\u003e.Iterator iter \u003d res.entries.iterator();\n@@ -304,7 +308,7 @@\n     }\n \n      /** {@inheritDoc} */\n-     public T getEntry(int index) throws MatrixIndexException {\n+     public T getEntry(int index) {\n         checkIndex(index);\n         return entries.get(index);\n    }\n@@ -315,8 +319,7 @@\n     }\n \n      /** {@inheritDoc} */\n-     public FieldVector\u003cT\u003e getSubVector(int index, int n)\n-            throws MatrixIndexException {\n+     public FieldVector\u003cT\u003e getSubVector(int index, int n) {\n         checkIndex(index);\n         checkIndex(index + n - 1);\n         SparseFieldVector\u003cT\u003e res \u003d new SparseFieldVector\u003cT\u003e(field,n);\n@@ -398,14 +401,14 @@\n         return mapAddToSelf(field.getZero().subtract(d));\n     }\n \n-     /**\n-      * Optimized method to compute outer product when both vectors are sparse.\n-      * @param v vector with which outer product should be computed\n-      * @return the square matrix outer product between instance and v\n-      * @throws IllegalArgumentException if v is not the same size as {@code this}\n-      */\n-    public FieldMatrix\u003cT\u003e outerProduct(SparseFieldVector\u003cT\u003e v)\n-            throws IllegalArgumentException {\n+    /**\n+     * Optimized method to compute outer product when both vectors are sparse.\n+     * @param v vector with which outer product should be computed\n+     * @return the square matrix outer product between instance and v\n+     * @throws DimensionMismatchException\n+     * if the dimensions do not match.\n+     */\n+    public FieldMatrix\u003cT\u003e outerProduct(SparseFieldVector\u003cT\u003e v) {\n         checkVectorDimensions(v.getDimension());\n         SparseFieldMatrix\u003cT\u003e res \u003d new SparseFieldMatrix\u003cT\u003e(field, virtualSize, virtualSize);\n         OpenIntToFieldHashMap\u003cT\u003e.Iterator iter \u003d entries.iterator();\n@@ -421,7 +424,7 @@\n     }\n \n     /** {@inheritDoc} */\n-    public FieldMatrix\u003cT\u003e outerProduct(T[] v) throws IllegalArgumentException {\n+    public FieldMatrix\u003cT\u003e outerProduct(T[] v) {\n         checkVectorDimensions(v.length);\n         FieldMatrix\u003cT\u003e res \u003d new SparseFieldMatrix\u003cT\u003e(field, virtualSize, virtualSize);\n         OpenIntToFieldHashMap\u003cT\u003e.Iterator iter \u003d entries.iterator();\n@@ -437,8 +440,7 @@\n      }\n \n     /** {@inheritDoc} */\n-    public FieldMatrix\u003cT\u003e outerProduct(FieldVector\u003cT\u003e v)\n-    throws IllegalArgumentException {\n+    public FieldMatrix\u003cT\u003e outerProduct(FieldVector\u003cT\u003e v) {\n         if(v instanceof SparseFieldVector\u003c?\u003e)\n             return outerProduct((SparseFieldVector\u003cT\u003e)v);\n         else\n@@ -446,14 +448,13 @@\n     }\n \n     /** {@inheritDoc} */\n-    public FieldVector\u003cT\u003e projection(FieldVector\u003cT\u003e v)\n-    throws IllegalArgumentException {\n+    public FieldVector\u003cT\u003e projection(FieldVector\u003cT\u003e v) {\n         checkVectorDimensions(v.getDimension());\n         return v.mapMultiply(dotProduct(v).divide(v.dotProduct(v)));\n     }\n \n     /** {@inheritDoc} */\n-    public FieldVector\u003cT\u003e projection(T[] v) throws IllegalArgumentException {\n+    public FieldVector\u003cT\u003e projection(T[] v) {\n         checkVectorDimensions(v.length);\n         return projection(new SparseFieldVector\u003cT\u003e(field,v));\n     }\n@@ -466,21 +467,20 @@\n     }\n \n     /** {@inheritDoc} */\n-    public void setEntry(int index, T value) throws MatrixIndexException {\n+    public void setEntry(int index, T value) {\n         checkIndex(index);\n         entries.put(index, value);\n    }\n \n     /** {@inheritDoc} */\n-    public void setSubVector(int index, FieldVector\u003cT\u003e v)\n-            throws MatrixIndexException {\n+    public void setSubVector(int index, FieldVector\u003cT\u003e v) {\n         checkIndex(index);\n         checkIndex(index + v.getDimension() - 1);\n         setSubVector(index, v.getData());\n     }\n \n     /** {@inheritDoc} */\n-    public void setSubVector(int index, T[] v) throws MatrixIndexException {\n+    public void setSubVector(int index, T[] v) {\n         checkIndex(index);\n         checkIndex(index + v.length - 1);\n         for (int i \u003d 0; i \u003c v.length; i++) {\n@@ -491,11 +491,13 @@\n \n     /**\n      * Optimized method to subtract SparseRealVectors.\n-     * @param v The vector to subtract from \u003ccode\u003ethis\u003c/code\u003e\n-     * @return The difference of \u003ccode\u003ethis\u003c/code\u003e and \u003ccode\u003ev\u003c/code\u003e\n-     * @throws IllegalArgumentException If the dimensions don\u0027t match\n+     *\n+     * @param v Vector to subtract.\n+     * @return the difference between {@code this} and {@code v}.\n+     * @throws DimensionMismatchException\n+     * if the dimensions do not match.\n      */\n-    public SparseFieldVector\u003cT\u003e subtract(SparseFieldVector\u003cT\u003e v) throws IllegalArgumentException{\n+    public SparseFieldVector\u003cT\u003e subtract(SparseFieldVector\u003cT\u003e v){\n         checkVectorDimensions(v.getDimension());\n         SparseFieldVector\u003cT\u003e res \u003d (SparseFieldVector\u003cT\u003e)copy();\n         OpenIntToFieldHashMap\u003cT\u003e.Iterator iter \u003d v.getEntries().iterator();\n@@ -512,8 +514,7 @@\n     }\n \n     /** {@inheritDoc} */\n-    public FieldVector\u003cT\u003e subtract(FieldVector\u003cT\u003e v)\n-           throws IllegalArgumentException {\n+    public FieldVector\u003cT\u003e subtract(FieldVector\u003cT\u003e v) {\n         if(v instanceof SparseFieldVector\u003c?\u003e)\n             return subtract((SparseFieldVector\u003cT\u003e)v);\n         else\n@@ -521,7 +522,7 @@\n     }\n \n     /** {@inheritDoc} */\n-    public FieldVector\u003cT\u003e subtract(T[] v) throws IllegalArgumentException {\n+    public FieldVector\u003cT\u003e subtract(T[] v) {\n         checkVectorDimensions(v.length);\n         SparseFieldVector\u003cT\u003e res \u003d new SparseFieldVector\u003cT\u003e(this);\n         for (int i \u003d 0; i \u003c v.length; i++) {\n@@ -540,39 +541,31 @@\n     }\n \n     /**\n-     * Check if an index is valid.\n+     * Check whether an index is valid.\n      *\n-     * @param index\n-     *            index to check\n-     * @exception MatrixIndexException\n-     *                if index is not valid\n+     * @param index Index to check.\n+     * @throws OutOfRangeException if the dimensions do not match.\n      */\n-    private void checkIndex(final int index) throws MatrixIndexException {\n+    private void checkIndex(final int index) {\n         if (index \u003c 0 || index \u003e\u003d getDimension()) {\n-            throw new MatrixIndexException(LocalizedFormats.INDEX_OUT_OF_RANGE,\n-                                           index, 0, getDimension() - 1);\n+            throw new OutOfRangeException(index, 0, getDimension() - 1);\n         }\n     }\n \n     /**\n      * Check if instance dimension is equal to some expected value.\n      *\n-     * @param n\n-     *            expected dimension.\n-     * @exception IllegalArgumentException\n-     *                if the dimension is inconsistent with vector size\n+     * @param n Expected dimension.\n+     * @throws DimensionMismatchException if the dimensions do not match.\n      */\n-    protected void checkVectorDimensions(int n) throws IllegalArgumentException {\n+    protected void checkVectorDimensions(int n) {\n         if (getDimension() !\u003d n) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    LocalizedFormats.VECTOR_LENGTH_MISMATCH,\n-                    getDimension(), n);\n+            throw new DimensionMismatchException(getDimension(), n);\n         }\n     }\n \n-\n     /** {@inheritDoc} */\n-    public FieldVector\u003cT\u003e add(FieldVector\u003cT\u003e v) throws IllegalArgumentException {\n+    public FieldVector\u003cT\u003e add(FieldVector\u003cT\u003e v) {\n         if (v instanceof SparseFieldVector\u003c?\u003e) {\n             return add((SparseFieldVector\u003cT\u003e)v);\n         } else {\n@@ -580,9 +573,11 @@\n         }\n     }\n \n-    /** Build an array of elements.\n-     * @param length size of the array to build\n-     * @return a new array\n+    /**\n+     * Build an array of elements.\n+     *\n+     * @param length Size of the array to build.\n+     * @return a new array.\n      */\n     @SuppressWarnings(\"unchecked\") // field is type T\n     private T[] buildArray(final int length) {\n@@ -651,7 +646,4 @@\n         }\n         return true;\n     }\n-\n-\n-\n }\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "ImportDeclaration [989,1050]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ImportDeclaration [1051,1119]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [1492,1525]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Javadoc [4641,4872]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Javadoc [15672,15928]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Javadoc [17343,17504]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [4737,4783]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [4791,4864]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [15781,15839]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [15847,15920]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [17354,17386]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [17437,17496]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [2115,2129]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: ) to gather data into this vector. [2280,2314]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ThrowStatement [17992,18048]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ImportDeclaration [989,1041]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ImportDeclaration [1042,1105]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "Javadoc [1479,1516]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [4723,4778]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [4786,4848]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Javadoc [4635,4856]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [4918,4942]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [5559,5583]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [7283,7307]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [7696,7720]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [8241,8265]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [8713,8737]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [9180,9204]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [9657,9681]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [10509,10529]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [10792,10812]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [13351,13363]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [13455,13479]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [14124,14148]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [14760,14784]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [15048,15072]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [15276,15300]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [15643,15663]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [15836,15856]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [16064,16084]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [16390,16452]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [16460,16522]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Javadoc [16262,16530]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [16603,16627]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [17277,17301]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [17540,17564]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [18063,18090]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [18158,18233]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Javadoc [18052,18241]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [18294,18314]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "QualifiedName: LocalizedFormats.INDEX_OUT_OF_RANGE [18412,18447]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [18855,18879]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ThrowStatement [18929,19088]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [19187,19211]",
          "to": ""
        }
      ]
    }
  ],
  "inducing_type": {
    "add_classes": {
      "qualified_names": [
        "src/main/java/org/apache/commons/math/exception/MathArithmeticException.java"
      ],
      "num": 1
    },
    "delete_classes": {
      "qualified_names": [
        "src/main/java/org/apache/commons/math/linear/BigMatrix.java",
        "src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java",
        "src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java"
      ],
      "num": 3
    },
    "add_functions": {
      "qualified_names": [
        "createRealIdentityMatrix",
        "checkMatrixIndex"
      ],
      "num": 2
    },
    "delete_functions": {
      "qualified_names": [
        "createColumnBigMatrix",
        "getSparcity",
        "createRealDiagonalMatrix",
        "createBigMatrix",
        "createRowBigMatrix",
        "createBigIdentityMatrix"
      ],
      "num": 6
    }
  },
  "trigger_tests": [
    {
      "test_class": "org.apache.commons.math.linear.OpenMapRealMatrixTest",
      "test_function": "testMath679",
      "exception": "junit.framework.AssertionFailedError",
      "message": "Expected exception: org.apache.commons.math.exception.NumberIsTooLargeException"
    }
  ],
  "fixing_changes": [],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  }
}