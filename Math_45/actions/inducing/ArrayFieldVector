===
insert-tree
---
ImportDeclaration [1014,1069]
    QualifiedName: org.apache.commons.math.exception.ZeroException [1021,1068]
to
CompilationUnit [0,29498]
at 6
===
insert-tree
---
ImportDeclaration [1070,1133]
    QualifiedName: org.apache.commons.math.exception.NullArgumentException [1077,1132]
to
CompilationUnit [0,29498]
at 7
===
insert-tree
---
ImportDeclaration [1134,1195]
    QualifiedName: org.apache.commons.math.exception.OutOfRangeException [1141,1194]
to
CompilationUnit [0,29498]
at 8
===
insert-tree
---
ImportDeclaration [1196,1264]
    QualifiedName: org.apache.commons.math.exception.DimensionMismatchException [1203,1263]
to
CompilationUnit [0,29498]
at 9
===
insert-tree
---
ImportDeclaration [1265,1332]
    QualifiedName: org.apache.commons.math.exception.NumberIsTooLargeException [1272,1331]
to
CompilationUnit [0,29498]
at 10
===
insert-node
---
Javadoc [8639,8899]
to
MethodDeclaration [7656,7975]
at 0
===
insert-node
---
Javadoc [28204,28409]
to
MethodDeclaration [27172,28713]
at 0
===
move-tree
---
TextElement: into this vector.</p> [2127,2148]
to
TagElement [1695,2148]
at 6
===
insert-tree
---
TagElement [3573,3632]
    SimpleName: NullArgumentException [3581,3602]
    TextElement:  if  [3602,3606]
    TagElement [3606,3615]
        TextElement:  d [3612,3614]
    TextElement:  is  [3615,3619]
    TagElement [3619,3631]
        TextElement:  null [3625,3630]
    TextElement: . [3631,3632]
to
Javadoc [2932,3466]
at 2
===
insert-tree
---
TagElement [3640,3684]
    SimpleName: ZeroException [3648,3661]
    TextElement:  if  [3661,3665]
    TagElement [3665,3674]
        TextElement:  d [3671,3673]
    TextElement:  is empty. [3674,3684]
to
Javadoc [2932,3466]
at 3
===
insert-tree
---
IfStatement [3791,3864]
    InfixExpression [3795,3804]
        SimpleName: d [3795,3796]
        INFIX_EXPRESSION_OPERATOR: == [3797,3799]
        NullLiteral [3800,3804]
    Block [3806,3864]
        ThrowStatement [3820,3854]
            ClassInstanceCreation [3826,3853]
                SimpleType [3830,3851]
                    SimpleName: NullArgumentException [3830,3851]
to
Block [3542,3843]
at 0
===
insert-tree
---
TagElement [4276,4335]
    SimpleName: NullArgumentException [4284,4305]
    TextElement:  if  [4305,4309]
    TagElement [4309,4318]
        TextElement:  d [4315,4317]
    TextElement:  is  [4318,4322]
    TagElement [4322,4334]
        TextElement:  null [4328,4333]
    TextElement: . [4334,4335]
to
Javadoc [3849,4056]
at 3
===
insert-tree
---
IfStatement [4451,4524]
    InfixExpression [4455,4464]
        SimpleName: d [4455,4456]
        INFIX_EXPRESSION_OPERATOR: == [4457,4459]
        NullLiteral [4460,4464]
    Block [4466,4524]
        ThrowStatement [4480,4514]
            ClassInstanceCreation [4486,4513]
                SimpleType [4490,4511]
                    SimpleName: NullArgumentException [4490,4511]
to
Block [4108,4169]
at 0
===
move-tree
---
TextElement:  constructor. [4873,4886]
to
TagElement [4186,4898]
at 7
===
insert-node
---
TagElement [5337,5442]
to
Javadoc [4175,5283]
at 2
===
insert-tree
---
TagElement [5450,5509]
    SimpleName: NullArgumentException [5458,5479]
    TextElement:  if  [5479,5483]
    TagElement [5483,5492]
        TextElement:  d [5489,5491]
    TextElement:  is  [5492,5496]
    TagElement [5496,5508]
        TextElement:  null [5502,5507]
    TextElement: . [5508,5509]
to
Javadoc [4175,5283]
at 3
===
insert-tree
---
TagElement [5517,5561]
    SimpleName: ZeroException [5525,5538]
    TextElement:  if  [5538,5542]
    TagElement [5542,5551]
        TextElement:  d [5548,5550]
    TextElement:  is empty. [5551,5561]
to
Javadoc [4175,5283]
at 4
===
insert-tree
---
IfStatement [5742,5815]
    InfixExpression [5746,5755]
        SimpleName: d [5746,5747]
        INFIX_EXPRESSION_OPERATOR: == [5748,5750]
        NullLiteral [5751,5755]
    Block [5757,5815]
        ThrowStatement [5771,5805]
            ClassInstanceCreation [5777,5804]
                SimpleType [5781,5802]
                    SimpleName: NullArgumentException [5781,5802]
to
Block [5400,5668]
at 0
===
insert-node
---
TagElement [6046,6425]
to
Javadoc [5674,6338]
at 0
===
insert-node
---
TagElement [6537,6642]
to
Javadoc [5674,6338]
at 4
===
insert-tree
---
TagElement [6650,6709]
    SimpleName: NullArgumentException [6658,6679]
    TextElement:  if  [6679,6683]
    TagElement [6683,6692]
        TextElement:  d [6689,6691]
    TextElement:  is  [6692,6696]
    TagElement [6696,6708]
        TextElement:  null [6702,6707]
    TextElement: . [6708,6709]
to
Javadoc [5674,6338]
at 5
===
insert-tree
---
IfStatement [6853,6926]
    InfixExpression [6857,6866]
        SimpleName: d [6857,6858]
        INFIX_EXPRESSION_OPERATOR: == [6859,6861]
        NullLiteral [6862,6866]
    Block [6868,6926]
        ThrowStatement [6882,6916]
            ClassInstanceCreation [6888,6915]
                SimpleType [6892,6913]
                    SimpleName: NullArgumentException [6892,6913]
to
Block [6409,6487]
at 0
===
insert-tree
---
TagElement [7191,7250]
    SimpleName: NullArgumentException [7199,7220]
    TextElement:  if  [7220,7224]
    TagElement [7224,7233]
        TextElement:  d [7230,7232]
    TextElement:  is  [7233,7237]
    TagElement [7237,7249]
        TextElement:  null [7243,7248]
    TextElement: . [7249,7250]
to
Javadoc [6493,6668]
at 4
===
insert-tree
---
TagElement [7258,7356]
    SimpleName: NumberIsTooLargeException [7266,7291]
    TextElement:  if the size of  [7291,7307]
    TagElement [7307,7316]
        TextElement:  d [7313,7315]
    TextElement:  is less [7316,7324]
    TextElement: than  [7332,7337]
    TagElement [7337,7355]
        TextElement:  pos + size [7343,7354]
    TextElement: . [7355,7356]
to
Javadoc [6493,6668]
at 5
===
insert-tree
---
IfStatement [7429,7502]
    InfixExpression [7433,7442]
        SimpleName: d [7433,7434]
        INFIX_EXPRESSION_OPERATOR: == [7435,7437]
        NullLiteral [7438,7442]
    Block [7444,7502]
        ThrowStatement [7458,7492]
            ClassInstanceCreation [7464,7491]
                SimpleType [7468,7489]
                    SimpleName: NullArgumentException [7468,7489]
to
Block [6723,7078]
at 0
===
insert-tree
---
TagElement [7869,7928]
    SimpleName: NullArgumentException [7877,7898]
    TextElement:  if  [7898,7902]
    TagElement [7902,7911]
        TextElement:  v [7908,7910]
    TextElement:  is  [7911,7915]
    TagElement [7915,7927]
        TextElement:  null [7921,7926]
    TextElement: . [7927,7928]
to
Javadoc [7084,7192]
at 2
===
insert-tree
---
IfStatement [7993,8066]
    InfixExpression [7997,8006]
        SimpleName: v [7997,7998]
        INFIX_EXPRESSION_OPERATOR: == [7999,8001]
        NullLiteral [8002,8006]
    Block [8008,8066]
        ThrowStatement [8022,8056]
            ClassInstanceCreation [8028,8055]
                SimpleType [8032,8053]
                    SimpleName: NullArgumentException [8032,8053]
to
Block [7239,7416]
at 0
===
insert-tree
---
TagElement [8364,8423]
    SimpleName: NullArgumentException [8372,8393]
    TextElement:  if  [8393,8397]
    TagElement [8397,8406]
        TextElement:  v [8403,8405]
    TextElement:  is  [8406,8410]
    TagElement [8410,8422]
        TextElement:  null [8416,8421]
    TextElement: . [8422,8423]
to
Javadoc [7422,7530]
at 2
===
insert-tree
---
IfStatement [8493,8566]
    InfixExpression [8497,8506]
        SimpleName: v [8497,8498]
        INFIX_EXPRESSION_OPERATOR: == [8499,8501]
        NullLiteral [8502,8506]
    Block [8508,8566]
        ThrowStatement [8522,8556]
            ClassInstanceCreation [8528,8555]
                SimpleType [8532,8553]
                    SimpleName: NullArgumentException [8532,8553]
to
Block [7582,7650]
at 0
===
move-tree
---
TagElement [7667,7706]
    TextElement: Construct a vector from another vector. [7667,7706]
to
Javadoc [8639,8899]
at 0
===
move-tree
---
TagElement [7714,7737]
    SimpleName: v [7721,7722]
    TextElement:  vector to copy [7722,7737]
to
Javadoc [8639,8899]
at 1
===
insert-node
---
TagElement [8736,8824]
to
Javadoc [8639,8899]
at 2
===
insert-tree
---
TagElement [8832,8891]
    SimpleName: NullArgumentException [8840,8861]
    TextElement:  if  [8861,8865]
    TagElement [8865,8874]
        TextElement:  v [8871,8873]
    TextElement:  is  [8874,8878]
    TagElement [8878,8890]
        TextElement:  null [8884,8889]
    TextElement: . [8890,8891]
to
Javadoc [8639,8899]
at 3
===
insert-tree
---
IfStatement [8975,9048]
    InfixExpression [8979,8988]
        SimpleName: v [8979,8980]
        INFIX_EXPRESSION_OPERATOR: == [8981,8983]
        NullLiteral [8984,8988]
    Block [8990,9048]
        ThrowStatement [9004,9038]
            ClassInstanceCreation [9010,9037]
                SimpleType [9014,9035]
                    SimpleName: NullArgumentException [9014,9035]
to
Block [7891,7975]
at 0
===
insert-tree
---
TagElement [9368,9449]
    SimpleName: NullArgumentException [9376,9397]
    TextElement:  if  [9397,9401]
    TagElement [9401,9411]
        TextElement:  v1 [9407,9410]
    TextElement:  or  [9411,9415]
    TagElement [9415,9425]
        TextElement:  v2 [9421,9424]
    TextElement:  is [9425,9428]
    TagElement [9436,9448]
        TextElement:  null [9442,9447]
    TextElement: . [9448,9449]
to
Javadoc [7981,8203]
at 3
===
insert-tree
---
IfStatement [9544,9644]
    InfixExpression [9548,9584]
        InfixExpression [9548,9558]
            SimpleName: v1 [9548,9550]
            INFIX_EXPRESSION_OPERATOR: == [9551,9553]
            NullLiteral [9554,9558]
        INFIX_EXPRESSION_OPERATOR: || [9559,9561]
        InfixExpression [9574,9584]
            SimpleName: v2 [9574,9576]
            INFIX_EXPRESSION_OPERATOR: == [9577,9579]
            NullLiteral [9580,9584]
    Block [9586,9644]
        ThrowStatement [9600,9634]
            ClassInstanceCreation [9606,9633]
                SimpleType [9610,9631]
                    SimpleName: NullArgumentException [9610,9631]
to
Block [8280,8517]
at 0
===
insert-tree
---
TagElement [10117,10198]
    SimpleName: NullArgumentException [10125,10146]
    TextElement:  if  [10146,10150]
    TagElement [10150,10160]
        TextElement:  v1 [10156,10159]
    TextElement:  or  [10160,10164]
    TagElement [10164,10174]
        TextElement:  v2 [10170,10173]
    TextElement:  is [10174,10177]
    TagElement [10185,10197]
        TextElement:  null [10191,10196]
    TextElement: . [10197,10198]
to
Javadoc [8523,8745]
at 3
===
insert-tree
---
IfStatement [10277,10377]
    InfixExpression [10281,10317]
        InfixExpression [10281,10291]
            SimpleName: v1 [10281,10283]
            INFIX_EXPRESSION_OPERATOR: == [10284,10286]
            NullLiteral [10287,10291]
        INFIX_EXPRESSION_OPERATOR: || [10292,10294]
        InfixExpression [10307,10317]
            SimpleName: v2 [10307,10309]
            INFIX_EXPRESSION_OPERATOR: == [10310,10312]
            NullLiteral [10313,10317]
    Block [10319,10377]
        ThrowStatement [10333,10367]
            ClassInstanceCreation [10339,10366]
                SimpleType [10343,10364]
                    SimpleName: NullArgumentException [10343,10364]
to
Block [8806,9028]
at 0
===
insert-tree
---
TagElement [10835,10916]
    SimpleName: NullArgumentException [10843,10864]
    TextElement:  if  [10864,10868]
    TagElement [10868,10878]
        TextElement:  v1 [10874,10877]
    TextElement:  or  [10878,10882]
    TagElement [10882,10892]
        TextElement:  v2 [10888,10891]
    TextElement:  is [10892,10895]
    TagElement [10903,10915]
        TextElement:  null [10909,10914]
    TextElement: . [10915,10916]
to
Javadoc [9034,9256]
at 3
===
insert-tree
---
IfStatement [10995,11095]
    InfixExpression [10999,11035]
        InfixExpression [10999,11009]
            SimpleName: v1 [10999,11001]
            INFIX_EXPRESSION_OPERATOR: == [11002,11004]
            NullLiteral [11005,11009]
        INFIX_EXPRESSION_OPERATOR: || [11010,11012]
        InfixExpression [11025,11035]
            SimpleName: v2 [11025,11027]
            INFIX_EXPRESSION_OPERATOR: == [11028,11030]
            NullLiteral [11031,11035]
    Block [11037,11095]
        ThrowStatement [11051,11085]
            ClassInstanceCreation [11057,11084]
                SimpleType [11061,11082]
                    SimpleName: NullArgumentException [11061,11082]
to
Block [9317,9534]
at 0
===
move-tree
---
TextElement: <p> [9620,9623]
to
TagElement [9551,9937]
at 6
===
insert-tree
---
TagElement [11857,11938]
    SimpleName: NullArgumentException [11865,11886]
    TextElement:  if  [11886,11890]
    TagElement [11890,11900]
        TextElement:  v1 [11896,11899]
    TextElement:  or  [11900,11904]
    TagElement [11904,11914]
        TextElement:  v2 [11910,11913]
    TextElement:  is [11914,11917]
    TagElement [11925,11937]
        TextElement:  null [11931,11936]
    TextElement: . [11937,11938]
to
Javadoc [9540,10225]
at 3
===
insert-tree
---
IfStatement [12125,12225]
    InfixExpression [12129,12165]
        InfixExpression [12129,12139]
            SimpleName: v1 [12129,12131]
            INFIX_EXPRESSION_OPERATOR: == [12132,12134]
            NullLiteral [12135,12139]
        INFIX_EXPRESSION_OPERATOR: || [12140,12142]
        InfixExpression [12155,12165]
            SimpleName: v2 [12155,12157]
            INFIX_EXPRESSION_OPERATOR: == [12158,12160]
            NullLiteral [12161,12165]
    Block [12167,12225]
        ThrowStatement [12181,12215]
            ClassInstanceCreation [12187,12214]
                SimpleType [12191,12212]
                    SimpleName: NullArgumentException [12191,12212]
to
Block [10270,10720]
at 0
===
insert-tree
---
IfStatement [12234,12370]
    InfixExpression [12238,12264]
        InfixExpression [12238,12259]
            QualifiedName: v1.length [12238,12247]
            INFIX_EXPRESSION_OPERATOR: + [12248,12249]
            QualifiedName: v2.length [12250,12259]
        INFIX_EXPRESSION_OPERATOR: == [12260,12262]
        NumberLiteral: 0 [12263,12264]
    Block [12266,12370]
        ThrowStatement [12280,12360]
            ClassInstanceCreation [12286,12359]
                SimpleType [12290,12303]
                    SimpleName: ZeroException [12290,12303]
                QualifiedName: LocalizedFormats.VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT [12304,12358]
to
Block [10270,10720]
at 1
===
move-tree
---
ExpressionStatement [10298,10339]
    Assignment [10298,10338]
        SimpleName: data [10298,10302]
        ASSIGNMENT_OPERATOR: = [10303,10304]
        MethodInvocation [10305,10338]
            SimpleName: buildArray [10305,10315]
            METHOD_INVOCATION_ARGUMENTS [10316,10337]
                InfixExpression [10316,10337]
                    QualifiedName: v1.length [10316,10325]
                    INFIX_EXPRESSION_OPERATOR: + [10326,10327]
                    QualifiedName: v2.length [10328,10337]
to
Block [10270,10720]
at 2
===
move-tree
---
ExpressionStatement [10352,10396]
    MethodInvocation [10352,10395]
        METHOD_INVOCATION_RECEIVER [10352,10358]
            SimpleName: System [10352,10358]
        SimpleName: arraycopy [10359,10368]
        METHOD_INVOCATION_ARGUMENTS [10369,10394]
            SimpleName: v1 [10369,10371]
            NumberLiteral: 0 [10373,10374]
            SimpleName: data [10376,10380]
            NumberLiteral: 0 [10382,10383]
            QualifiedName: v1.length [10385,10394]
to
Block [10270,10720]
at 3
===
move-tree
---
ExpressionStatement [10409,10461]
    MethodInvocation [10409,10460]
        METHOD_INVOCATION_RECEIVER [10409,10415]
            SimpleName: System [10409,10415]
        SimpleName: arraycopy [10416,10425]
        METHOD_INVOCATION_ARGUMENTS [10426,10459]
            SimpleName: v2 [10426,10428]
            NumberLiteral: 0 [10430,10431]
            SimpleName: data [10433,10437]
            QualifiedName: v1.length [10439,10448]
            QualifiedName: v2.length [10450,10459]
to
Block [10270,10720]
at 4
===
move-tree
---
ExpressionStatement [10474,10501]
    Assignment [10474,10500]
        SimpleName: field [10474,10479]
        ASSIGNMENT_OPERATOR: = [10480,10481]
        MethodInvocation [10482,10500]
            METHOD_INVOCATION_RECEIVER [10482,10489]
                ArrayAccess [10482,10489]
                    SimpleName: data [10482,10486]
                    NumberLiteral: 0 [10487,10488]
            SimpleName: getField [10490,10498]
to
Block [10270,10720]
at 5
===
insert-tree
---
TagElement [12869,12950]
    SimpleName: NullArgumentException [12877,12898]
    TextElement:  if  [12898,12902]
    TagElement [12902,12912]
        TextElement:  v1 [12908,12911]
    TextElement:  or  [12912,12916]
    TagElement [12916,12926]
        TextElement:  v2 [12922,12925]
    TextElement:  is [12926,12929]
    TagElement [12937,12949]
        TextElement:  null [12943,12948]
    TextElement: . [12949,12950]
to
Javadoc [10726,11065]
at 4
===
insert-tree
---
TagElement [12958,13005]
    SimpleName: ZeroException [12966,12979]
    TextElement:  if both arrays are empty. [12979,13005]
to
Javadoc [10726,11065]
at 5
===
insert-tree
---
TagElement [28215,28252]
    TextElement: Test for the equality of two vectors. [28215,28252]
to
Javadoc [28204,28409]
at 0
===
move-tree
---
TagElement [27756,27804]
    SimpleName: other [27763,27768]
    TextElement:  Object to test for equality to this [27768,27804]
to
Javadoc [28204,28409]
at 1
===
insert-tree
---
TagElement [28316,28401]
    TextElement:   [28323,28324]
    TagElement [28324,28336]
        TextElement:  true [28330,28335]
    TextElement:  if two vector objects are equal,  [28336,28370]
    TagElement [28370,28383]
        TextElement:  false [28376,28382]
    TextElement: otherwise. [28391,28401]
to
Javadoc [28204,28409]
at 2
===
update-node
---
TextElement: <p>Zero-length vectors may be used to initialized construction of vectors [1727,1800]
replace <p>Zero-length vectors may be used to initialized construction of vectors by Zero-length vectors may be used to initialized construction of vectors
===
update-node
---
TextElement: or one of the <code>append</code> methods ( [1960,2003]
replace or one of the <code>append</code> methods ( by or one of the 
===
insert-tree
---
TagElement [2234,2248]
    TextElement:  append [2240,2247]
to
TagElement [1695,2148]
at 6
===
update-node
---
TextElement: into this vector.</p> [2127,2148]
replace into this vector.</p> by  methods (
===
insert-node
---
TextElement: into this vector. [2382,2399]
to
TagElement [1695,2148]
at 14
===
update-node
---
TextElement: Construct a (size)-length vector of zeros. [2310,2352]
replace Construct a (size)-length vector of zeros. by Construct a vector of zeroes.
===
update-node
---
TextElement:  field to which the elements belong [2372,2407]
replace  field to which the elements belong by  Field to which the elements belong.
===
update-node
---
TextElement:  size of the vector [2426,2445]
replace  size of the vector by  Size of the vector.
===
update-node
---
TextElement: Construct an (size)-length vector with preset values. [2637,2690]
replace Construct an (size)-length vector with preset values. by Construct a vector with preset values.
===
update-node
---
TextElement:  size of the vector [2709,2728]
replace  size of the vector by  Size of the vector.
===
update-node
---
TextElement:  fill the vector with this scalar value [2749,2788]
replace  fill the vector with this scalar value by  All entries will be set with this value.
===
update-node
---
TextElement:  array of Ts. [3325,3338]
replace  array of Ts. by  Array.
===
update-node
---
TextElement:  field to which the elements belong [3938,3973]
replace  field to which the elements belong by  Field to which the elements belong.
===
update-node
---
TextElement:  array of Ts. [3989,4002]
replace  array of Ts. by  Array.
===
update-node
---
TextElement: <p>If an array is built specially in order to be embedded in a [4282,4344]
replace <p>If an array is built specially in order to be embedded in a by If an array is built specially in order to be embedded in a
===
update-node
---
TextElement: ArrayFieldVector and not used directly, the <code>copyArray</code> may be [4352,4425]
replace ArrayFieldVector and not used directly, the <code>copyArray</code> may be by ArrayFieldVector and not used directly, the 
===
insert-tree
---
TagElement [4808,4825]
    TextElement:  copyArray [4814,4824]
to
TagElement [4186,4898]
at 4
===
update-node
---
TextElement: set to <code>false</code. This will prevent the copying and improve [4433,4500]
replace set to <code>false</code. This will prevent the copying and improve by  may be
===
update-node
---
TextElement: performance as no new array will be built and no data will be copied.</p> [4508,4581]
replace performance as no new array will be built and no data will be copied.</p> by set to 
===
insert-tree
---
TagElement [4847,4860]
    TextElement:  false [4853,4859]
to
TagElement [4186,4898]
at 7
===
update-node
---
TextElement: <p> [4589,4592]
replace <p> by . This will prevent the copying and improve
===
update-node
---
TextElement:  constructor. [4873,4886]
replace  constructor. by performance as no new array will be built and no data will be copied.
===
update-node
---
TextElement: </p> [4894,4898]
replace </p> by constructor.
===
update-node
---
TextElement:  data for new vector [4914,4934]
replace  data for new vector by  Data for the new vector.
===
move-tree
---
SimpleName: copyArray [4949,4958]
to
TagElement [5337,5442]
at 0
===
insert-node
---
TextElement:  If  [5353,5357]
to
TagElement [5337,5442]
at 1
===
insert-tree
---
TagElement [5357,5369]
    TextElement:  true [5363,5368]
to
TagElement [5337,5442]
at 2
===
insert-node
---
TextElement: , the input array will be copied, [5369,5402]
to
TagElement [5337,5442]
at 3
===
insert-node
---
TextElement: otherwise it will be referenced. [5410,5442]
to
TagElement [5337,5442]
at 4
===
move-tree
---
TextElement: Create a new ArrayFieldVector using the input array as the underlying [5685,5754]
to
TagElement [6046,6425]
at 0
===
move-tree
---
TextElement: data array. [5762,5773]
to
TagElement [6046,6425]
at 1
===
insert-node
---
TextElement: If an array is built specially in order to be embedded in a [6142,6201]
to
TagElement [6046,6425]
at 2
===
insert-node
---
TextElement: ArrayFieldVector and not used directly, the  [6209,6253]
to
TagElement [6046,6425]
at 3
===
insert-tree
---
TagElement [6253,6270]
    TextElement:  copyArray [6259,6269]
to
TagElement [6046,6425]
at 4
===
insert-node
---
TextElement:  may be [6270,6277]
to
TagElement [6046,6425]
at 5
===
insert-node
---
TextElement: set to  [6285,6292]
to
TagElement [6046,6425]
at 6
===
insert-tree
---
TagElement [6292,6305]
    TextElement:  false [6298,6304]
to
TagElement [6046,6425]
at 7
===
insert-node
---
TextElement: . This will prevent the copying and improve [6305,6348]
to
TagElement [6046,6425]
at 8
===
insert-node
---
TextElement: performance as no new array will be built and no data will be copied. [6356,6425]
to
TagElement [6046,6425]
at 9
===
update-node
---
TextElement:  field to which the elements belong [6100,6135]
replace  field to which the elements belong by  Field to which the elements belong.
===
update-node
---
TextElement:  data for new vector [6151,6171]
replace  data for new vector by  Data for the new vector.
===
move-tree
---
SimpleName: copyArray [6186,6195]
to
TagElement [6537,6642]
at 0
===
insert-node
---
TextElement:  If  [6553,6557]
to
TagElement [6537,6642]
at 1
===
insert-tree
---
TagElement [6557,6569]
    TextElement:  true [6563,6568]
to
TagElement [6537,6642]
at 2
===
insert-node
---
TextElement: , the input array will be copied, [6569,6602]
to
TagElement [6537,6642]
at 3
===
insert-node
---
TextElement: otherwise it will be referenced. [6610,6642]
to
TagElement [6537,6642]
at 4
===
update-node
---
TextElement:  array of Ts. [6560,6573]
replace  array of Ts. by  Array.
===
update-node
---
TextElement:  position of first entry [6591,6615]
replace  position of first entry by  Position of the first entry.
===
update-node
---
TextElement:  number of entries to copy [6634,6660]
replace  number of entries to copy by  Number of entries to copy.
===
update-node
---
TextElement:  vector to copy [7169,7184]
replace  vector to copy by  Vector to copy.
===
update-node
---
TextElement:  vector to copy [7507,7522]
replace  vector to copy by  Vector to copy.
===
update-node
---
TextElement:  vector to copy [7722,7737]
replace  vector to copy by  Vector to copy.
===
move-tree
---
SimpleName: deep [7752,7756]
to
TagElement [8736,8824]
at 0
===
insert-node
---
TextElement:  If  [8747,8751]
to
TagElement [8736,8824]
at 1
===
insert-tree
---
TagElement [8751,8763]
    TextElement:  true [8757,8762]
to
TagElement [8736,8824]
at 2
===
insert-node
---
TextElement:  perform a deep copy, otherwise perform [8763,8802]
to
TagElement [8736,8824]
at 3
===
insert-node
---
TextElement: a shallow copy [8810,8824]
to
TagElement [8736,8824]
at 4
===
update-node
---
TextElement:  first vector (will be put in front of the new vector) [8070,8124]
replace  first vector (will be put in front of the new vector) by  First vector (will be put in front of the new vector).
===
update-node
---
TextElement:  second vector (will be put at back of the new vector) [8141,8195]
replace  second vector (will be put at back of the new vector) by  Second vector (will be put at back of the new vector).
===
update-node
---
TextElement:  first vector (will be put in front of the new vector) [8612,8666]
replace  first vector (will be put in front of the new vector) by  First vector (will be put in front of the new vector).
===
update-node
---
TextElement:  second vector (will be put at back of the new vector) [8683,8737]
replace  second vector (will be put at back of the new vector) by  Second vector (will be put at back of the new vector).
===
update-node
---
TextElement:  first vector (will be put in front of the new vector) [9123,9177]
replace  first vector (will be put in front of the new vector) by  First vector (will be put in front of the new vector).
===
update-node
---
TextElement:  second vector (will be put at back of the new vector) [9194,9248]
replace  second vector (will be put at back of the new vector) by  Second vector (will be put at back of the new vector).
===
update-node
---
TextElement: <p> [9620,9623]
replace <p> by constructor.
===
update-node
---
TextElement:  first vector (will be put in front of the new vector) [9954,10008]
replace  first vector (will be put in front of the new vector) by  First vector (will be put in front of the new vector).
===
update-node
---
TextElement:  second vector (will be put at back of the new vector) [10025,10079]
replace  second vector (will be put at back of the new vector) by  Second vector (will be put at back of the new vector).
===
update-node
---
SimpleName: IllegalArgumentException [10098,10122]
replace IllegalArgumentException by ZeroException
===
update-node
---
TextElement:  if both vectors are empty [10122,10148]
replace  if both vectors are empty by  if both arrays are empty.
===
update-node
---
TextElement:  field to which the elements belong [10818,10853]
replace  field to which the elements belong by  Field to which the elements belong.
===
update-node
---
TextElement:  first vector (will be put in front of the new vector) [10870,10924]
replace  first vector (will be put in front of the new vector) by  First vector (will be put in front of the new vector).
===
update-node
---
TextElement:  second vector (will be put at back of the new vector) [10941,10995]
replace  second vector (will be put at back of the new vector) by  Second vector (will be put at back of the new vector).
===
update-node
---
TextElement:  size of the array to build [11594,11621]
replace  size of the array to build by  Size of the array to build.
===
update-node
---
TextElement:  a new array [11636,11648]
replace  a new array by  a new array.
===
update-node
---
SimpleName: MatrixIndexException [25842,25862]
replace MatrixIndexException by OutOfRangeException
===
update-node
---
TextElement:  expected dimension. [26731,26751]
replace  expected dimension. by  Expected dimension.
===
update-node
---
SimpleName: IllegalArgumentException [26770,26794]
replace IllegalArgumentException by OutOfRangeException
===
update-node
---
TextElement: inconsistent with vector size [26822,26851]
replace inconsistent with vector size by inconsistent with this vector size.
===
update-node
---
TextElement:  Object to test for equality to this [27768,27804]
replace  Object to test for equality to this by  Object to test for equality.
===
update-node
---
TextElement:  index to check [29105,29120]
replace  index to check by  Index to check.
===
update-node
---
SimpleName: MatrixIndexException [29139,29159]
replace MatrixIndexException by OutOfRangeException
===
update-node
---
TextElement:  if index is not valid [29159,29181]
replace  if index is not valid by  if the index is not valid.
===
insert-tree
---
ThrowStatement [5857,5937]
    ClassInstanceCreation [5863,5936]
        SimpleType [5867,5880]
            SimpleName: ZeroException [5867,5880]
        QualifiedName: LocalizedFormats.VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT [5881,5935]
to
Block [5429,5586]
at 0
===
insert-tree
---
ThrowStatement [7552,7616]
    ClassInstanceCreation [7558,7615]
        SimpleType [7562,7587]
            SimpleName: NumberIsTooLargeException [7562,7587]
        InfixExpression [7588,7598]
            SimpleName: pos [7588,7591]
            INFIX_EXPRESSION_OPERATOR: + [7592,7593]
            SimpleName: size [7594,7598]
        QualifiedName: d.length [7600,7608]
        BooleanLiteral: true [7610,7614]
to
Block [6760,6957]
at 0
===
insert-tree
---
ThrowStatement [13192,13272]
    ClassInstanceCreation [13198,13271]
        SimpleType [13202,13215]
            SimpleName: ZeroException [13202,13215]
        QualifiedName: LocalizedFormats.VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT [13216,13270]
to
Block [11168,11325]
at 0
===
insert-tree
---
ThrowStatement [28129,28182]
    ClassInstanceCreation [28135,28181]
        SimpleType [28139,28165]
            SimpleName: DimensionMismatchException [28139,28165]
        QualifiedName: data.length [28166,28177]
        SimpleName: n [28179,28180]
to
Block [26980,27160]
at 0
===
insert-tree
---
ThrowStatement [4011,4091]
    ClassInstanceCreation [4017,4090]
        SimpleType [4021,4034]
            SimpleName: ZeroException [4021,4034]
        QualifiedName: LocalizedFormats.VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT [4035,4089]
to
Block [3676,3837]
at 0
===
update-node
---
QualifiedName: LocalizedFormats.INDEX_OUT_OF_RANGE [29368,29403]
replace LocalizedFormats.INDEX_OUT_OF_RANGE by LocalizedFormats.INDEX
===
update-node
---
SimpleName: MatrixIndexException [29347,29367]
replace MatrixIndexException by OutOfRangeException
===
delete-tree
---
ImportDeclaration [1014,1066]
    QualifiedName: org.apache.commons.math.MathRuntimeException [1021,1065]
===
delete-node
---
TextElement: <p> [3009,3012]
===
===
delete-node
---
TextElement: </p> [3305,3309]
===
===
delete-tree
---
TagElement [3346,3405]
    SimpleName: IllegalArgumentException [3354,3378]
    TextElement:  if <code>d</code> is empty [3378,3405]
===
delete-tree
---
SimpleType [3517,3541]
    SimpleName: IllegalArgumentException [3517,3541]
===
delete-tree
---
ThrowStatement [3690,3827]
    MethodInvocation [3696,3826]
        METHOD_INVOCATION_RECEIVER [3696,3716]
            SimpleName: MathRuntimeException [3696,3716]
        SimpleName: createIllegalArgumentException [3717,3747]
        METHOD_INVOCATION_ARGUMENTS [3771,3825]
            QualifiedName: LocalizedFormats.VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT [3771,3825]
===
delete-node
---
TextElement:  if true, the input array will be copied, otherwise [4958,5009]
===
===
delete-node
---
TextElement: it will be referenced [5017,5038]
===
===
delete-node
---
TagElement [4942,5038]
===
===
delete-tree
---
TagElement [5046,5105]
    SimpleName: IllegalArgumentException [5054,5078]
    TextElement:  if <code>d</code> is empty [5078,5105]
===
delete-tree
---
TagElement [5113,5167]
    SimpleName: NullPointerException [5121,5141]
    TextElement:  if <code>d</code> is null [5141,5167]
===
delete-tree
---
SimpleType [5353,5373]
    SimpleName: NullPointerException [5353,5373]
===
delete-tree
---
SimpleType [5375,5399]
    SimpleName: IllegalArgumentException [5375,5399]
===
delete-tree
---
ThrowStatement [5443,5576]
    MethodInvocation [5449,5575]
        METHOD_INVOCATION_RECEIVER [5449,5469]
            SimpleName: MathRuntimeException [5449,5469]
        SimpleName: createIllegalArgumentException [5470,5500]
        METHOD_INVOCATION_ARGUMENTS [5520,5574]
            QualifiedName: LocalizedFormats.VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT [5520,5574]
===
delete-node
---
TextElement: <p>If an array is built specially in order to be embedded in a [5781,5843]
===
===
delete-node
---
TextElement: ArrayFieldVector and not used directly, the <code>copyArray</code> may be [5851,5924]
===
===
delete-node
---
TextElement: set to <code>false</code. This will prevent the copying and improve [5932,5999]
===
===
delete-node
---
TextElement: performance as no new array will be built and no data will be copied.</p> [6007,6080]
===
===
delete-node
---
TagElement [5685,6080]
===
===
delete-node
---
TextElement:  if true, the input array will be copied, otherwise [6195,6246]
===
===
delete-node
---
TextElement: it will be referenced [6254,6275]
===
===
delete-node
---
TagElement [6179,6275]
===
===
delete-tree
---
ThrowStatement [6774,6947]
    MethodInvocation [6780,6946]
        METHOD_INVOCATION_RECEIVER [6780,6800]
            SimpleName: MathRuntimeException [6780,6800]
        SimpleName: createIllegalArgumentException [6801,6831]
        METHOD_INVOCATION_ARGUMENTS [6853,6945]
            QualifiedName: LocalizedFormats.POSITION_SIZE_MISMATCH_INPUT_ARRAY [6853,6904]
            SimpleName: pos [6926,6929]
            SimpleName: size [6931,6935]
            QualifiedName: d.length [6937,6945]
===
delete-node
---
TextElement:  if true perform a deep copy otherwise perform a shallow copy [7756,7817]
===
===
delete-node
---
TagElement [7745,7817]
===
===
delete-node
---
Javadoc [7656,7825]
===
===
delete-node
---
TextElement:  constructor. [9912,9925]
===
===
delete-node
---
TextElement: </p> [9933,9937]
===
===
delete-node
---
Block [10284,10511]
===
===
delete-tree
---
CatchClause [10512,10714]
    SingleVariableDeclaration [10519,10551]
        SimpleType [10519,10549]
            SimpleName: ArrayIndexOutOfBoundsException [10519,10549]
        SimpleName: e [10550,10551]
    Block [10553,10714]
        ThrowStatement [10567,10704]
            MethodInvocation [10573,10703]
                METHOD_INVOCATION_RECEIVER [10573,10593]
                    SimpleName: MathRuntimeException [10573,10593]
                SimpleName: createIllegalArgumentException [10594,10624]
                METHOD_INVOCATION_ARGUMENTS [10648,10702]
                    QualifiedName: LocalizedFormats.VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT [10648,10702]
===
delete-node
---
TryStatement [10280,10714]
===
===
delete-tree
---
ThrowStatement [11182,11315]
    MethodInvocation [11188,11314]
        METHOD_INVOCATION_RECEIVER [11188,11208]
            SimpleName: MathRuntimeException [11188,11208]
        SimpleName: createIllegalArgumentException [11209,11239]
        METHOD_INVOCATION_ARGUMENTS [11259,11313]
            QualifiedName: LocalizedFormats.VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT [11259,11313]
===
delete-tree
---
SimpleType [12130,12154]
    SimpleName: IllegalArgumentException [12130,12154]
===
delete-tree
---
SimpleType [12602,12626]
    SimpleName: IllegalArgumentException [12602,12626]
===
delete-tree
---
SimpleType [13123,13147]
    SimpleName: IllegalArgumentException [13123,13147]
===
delete-tree
---
SimpleType [13292,13316]
    SimpleName: IllegalArgumentException [13292,13316]
===
delete-tree
---
SimpleType [13779,13803]
    SimpleName: IllegalArgumentException [13779,13803]
===
delete-tree
---
SimpleType [14306,14330]
    SimpleName: IllegalArgumentException [14306,14330]
===
delete-tree
---
SimpleType [16873,16897]
    SimpleName: IllegalArgumentException [16873,16897]
===
delete-tree
---
SimpleType [17374,17398]
    SimpleName: IllegalArgumentException [17374,17398]
===
delete-tree
---
SimpleType [17985,18009]
    SimpleName: IllegalArgumentException [17985,18009]
===
delete-tree
---
SimpleType [18171,18195]
    SimpleName: IllegalArgumentException [18171,18195]
===
delete-tree
---
SimpleType [18666,18690]
    SimpleName: IllegalArgumentException [18666,18690]
===
delete-tree
---
SimpleType [19265,19289]
    SimpleName: IllegalArgumentException [19265,19289]
===
delete-tree
---
SimpleType [19753,19777]
    SimpleName: IllegalArgumentException [19753,19777]
===
delete-tree
---
SimpleType [20210,20234]
    SimpleName: IllegalArgumentException [20210,20234]
===
delete-tree
---
SimpleType [20760,20784]
    SimpleName: IllegalArgumentException [20760,20784]
===
delete-tree
---
SimpleType [21655,21679]
    SimpleName: IllegalArgumentException [21655,21679]
===
delete-tree
---
SimpleType [22551,22575]
    SimpleName: IllegalArgumentException [22551,22575]
===
delete-tree
---
SimpleType [22708,22732]
    SimpleName: IllegalArgumentException [22708,22732]
===
delete-tree
---
SimpleType [23165,23185]
    SimpleName: MatrixIndexException [23165,23185]
===
delete-tree
---
SimpleType [25993,26013]
    SimpleName: MatrixIndexException [25993,26013]
===
delete-tree
---
SimpleType [26550,26574]
    SimpleName: IllegalArgumentException [26550,26574]
===
delete-tree
---
SimpleType [26923,26947]
    SimpleName: IllegalArgumentException [26923,26947]
===
delete-tree
---
ThrowStatement [26994,27150]
    MethodInvocation [27000,27149]
        METHOD_INVOCATION_RECEIVER [27000,27020]
            SimpleName: MathRuntimeException [27000,27020]
        SimpleName: createIllegalArgumentException [27021,27051]
        METHOD_INVOCATION_ARGUMENTS [27073,27148]
            QualifiedName: LocalizedFormats.VECTOR_LENGTH_MISMATCH [27073,27112]
            QualifiedName: data.length [27134,27145]
            SimpleName: n [27147,27148]
===
delete-tree
---
TagElement [27183,27741]
    TextElement: Test for the equality of two real vectors. [27183,27225]
    TextElement: <p> [27233,27236]
    TextElement: If all coordinates of two real vectors are exactly the same, and none are [27244,27317]
    TextElement: <code>Double.NaN</code>, the two real vectors are considered to be equal. [27325,27398]
    TextElement: </p> [27406,27410]
    TextElement: <p> [27418,27421]
    TextElement: <code>NaN</code> coordinates are considered to affect globally the vector [27429,27502]
    TextElement: and be equals to each other - i.e, if either (or all) coordinates of the [27510,27582]
    TextElement: real vector are equal to <code>Double.NaN</code>, the real vector is equal to [27590,27667]
    TextElement: a vector with all <code>Double.NaN</code> coordinates. [27675,27729]
    TextElement: </p> [27737,27741]
===
delete-tree
---
TagElement [27812,27983]
    TextElement:  true if two 3D vector objects are equal, false if [27819,27869]
    TextElement: object is null, not an instance of Vector3D, or [27885,27932]
    TextElement: not equal to this Vector3D instance [27948,27983]
===
delete-node
---
Javadoc [27172,27998]
===
===
delete-tree
---
SimpleType [29250,29270]
    SimpleName: MatrixIndexException [29250,29270]
