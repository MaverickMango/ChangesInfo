{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "/home/liumengjiao/Desktop/CI/Benchmark/data/changesInfo/",
  "properties": {
    "trigger.tests": "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest::testCompatibilityWithOriginalVersion",
    "test.dir": "src/test/java",
    "clz.modified": "org.apache.commons.codec.language.bm.Lang,org.apache.commons.codec.language.bm.PhoneticEngine,org.apache.commons.codec.language.bm.Rule,src.main.resources.org.apache.commons.codec.language.bm.ash_lang.txt,src.main.resources.org.apache.commons.codec.language.bm.gen_lang.txt,src.main.resources.org.apache.commons.codec.language.bm.sep_lang.txt",
    "src.dir": "src/main/java"
  },
  "timeoutSecond": 100,
  "proj": "Codec",
  "id": "14",
  "workingDir": "../bugs/Codec_14_buggy",
  "buggyCommit": "50a1d17b5402accbdd59e62e68fa96172c9e3764",
  "inducingCommit": "1573a121c4fa7b39f4f49691cc5fde3cccf4c7a1",
  "originalCommit": "5d72a46abc9bfc8f8ed146b5f598106802761e21",
  "bug_name": "Codec_14",
  "derive": "defects4j",
  "original_fixing_commit": "39d5df29fb768fd257f9d328b99f00bc69ec864a",
  "buildFiles_changed": false,
  "regression": true,
  "inducing_changes": [],
  "inducing_type": {
    "add_classes": {
      "qualified_names": [
        "src/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java",
        "src/java/org/apache/commons/codec/language/bm/Lang.java",
        "src/java/org/apache/commons/codec/language/bm/Languages.java",
        "src/java/org/apache/commons/codec/language/bm/NameType.java",
        "src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java",
        "src/java/org/apache/commons/codec/language/bm/ResourceConstants.java",
        "src/java/org/apache/commons/codec/language/bm/Rule.java",
        "src/java/org/apache/commons/codec/language/bm/RuleType.java"
      ],
      "num": 8
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  },
  "trigger_tests": [
    {
      "test_class": "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest",
      "test_function": "testCompatibilityWithOriginalVersion",
      "assertion_line": "190",
      "exception": "junit.framework.AssertionFailedError",
      "message": "expected:\u003c...dzn|bntsn|bnzn|vndzn[]\u003e but was:\u003c...dzn|bntsn|bnzn|vndzn[|vntsn]\u003e"
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java",
        "src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [],
          "num": 0
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "66"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "67",
            "68",
            "72"
          ],
          "num": 3
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java b/src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java\nindex 13f28ab..2e5886b 100644\n--- a/src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java\n+++ b/src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java\n@@ -64,9 +64,12 @@\n  * encodings as they consider a wider range of possible, approximate phonetic interpretations of the original word.\n  * Down-stream applications may wish to further process the encoding for indexing or lookup purposes, for example, by\n  * splitting on pipe (\u003ccode\u003e|\u003c/code\u003e) and indexing under each of these alternatives.\n+ * \u003cp\u003e\n+ * \u003cb\u003eNote\u003c/b\u003e: this version of the Beider-Morse encoding is equivalent with v3.3 of the reference implementation.\n  *\n  * @see \u003ca href\u003d\"http://stevemorse.org/phonetics/bmpm.htm\"\u003eBeider-Morse Phonetic Matching\u003c/a\u003e\n  * @see \u003ca href\u003d\"http://stevemorse.org/phoneticinfo.htm\"\u003eReference implementation\u003c/a\u003e\n+ *\n  * @since 1.6\n  * @version $Id$\n  */\n",
      "operations": [
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003cp\u003e [4529,4532]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003cb\u003eNote\u003c/b\u003e: this version of the Beider-Morse encoding is equivalent with v3.3 of the reference implementation. [4536,4647]"
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/codec/language/bm/Lang.java",
        "src/main/java/org/apache/commons/codec/language/bm/Lang.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [],
          "num": 0
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "98",
            "102"
          ],
          "num": 2
        },
        {
          "qualified_names": [
            "98",
            "102"
          ],
          "num": 2
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/codec/language/bm/Lang.java b/src/main/java/org/apache/commons/codec/language/bm/Lang.java\nindex e9c2e72..a7ebba6 100644\n--- a/src/main/java/org/apache/commons/codec/language/bm/Lang.java\n+++ b/src/main/java/org/apache/commons/codec/language/bm/Lang.java\n@@ -95,11 +95,11 @@\n \n     private static final Map\u003cNameType, Lang\u003e Langs \u003d new EnumMap\u003cNameType, Lang\u003e(NameType.class);\n \n-    private static final String LANGUAGE_RULES_RN \u003d \"org/apache/commons/codec/language/bm/lang.txt\";\n+    private static final String LANGUAGE_RULES_RN \u003d \"org/apache/commons/codec/language/bm/%s_lang.txt\";\n \n     static {\n         for (final NameType s : NameType.values()) {\n-            Langs.put(s, loadFromResource(LANGUAGE_RULES_RN, Languages.getInstance(s)));\n+            Langs.put(s, loadFromResource(String.format(LANGUAGE_RULES_RN, s.getName()), Languages.getInstance(s)));\n         }\n     }\n \n",
      "operations": [
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "MethodInvocation [4395,4440]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "METHOD_INVOCATION_RECEIVER [4395,4401]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: format [4402,4408]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "METHOD_INVOCATION_ARGUMENTS [4409,4439]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodInvocation [4428,4439]"
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/codec/language/bm/Languages.java",
        "src/main/java/org/apache/commons/codec/language/bm/Languages.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.codec.language.bm.Languages\\$LanguageSet:restrictTo:[LanguageSet other]:LanguageSet",
            "org.apache.commons.codec.language.bm.Languages\\$SomeLanguages:toString:[]:String"
          ],
          "num": 2
        },
        {
          "qualified_names": [
            "org.apache.commons.codec.language.bm.Languages\\$SomeLanguages:toString:[]:String",
            "org.apache.commons.codec.language.bm.Languages\\$LanguageSet:merge:[LanguageSet other]:LanguageSet",
            "org.apache.commons.codec.language.bm.Languages\\$SomeLanguages:merge:[final LanguageSet other]:LanguageSet"
          ],
          "num": 3
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "75",
            "130",
            "219",
            "254"
          ],
          "num": 4
        },
        {
          "qualified_names": [
            "76",
            "77",
            "133",
            "134",
            "135",
            "136",
            "137",
            "138",
            "139",
            "140",
            "141",
            "142",
            "143",
            "144",
            "145",
            "146",
            "147",
            "148",
            "238",
            "239",
            "240",
            "241",
            "242",
            "278",
            "279",
            "280",
            "281",
            "282"
          ],
          "num": 28
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/codec/language/bm/Languages.java b/src/main/java/org/apache/commons/codec/language/bm/Languages.java\nindex fd8ddf6..a791a2a 100644\n--- a/src/main/java/org/apache/commons/codec/language/bm/Languages.java\n+++ b/src/main/java/org/apache/commons/codec/language/bm/Languages.java\n@@ -73,6 +73,8 @@\n         public abstract boolean isSingleton();\n \n         public abstract LanguageSet restrictTo(LanguageSet other);\n+\n+        public abstract LanguageSet merge(LanguageSet other);\n     }\n \n     /**\n@@ -128,6 +130,22 @@\n         }\n \n         @Override\n+        public LanguageSet merge(final LanguageSet other) {\n+            if (other \u003d\u003d NO_LANGUAGES) {\n+                return this;\n+            } else if (other \u003d\u003d ANY_LANGUAGE) {\n+                return other;\n+            } else {\n+                final SomeLanguages sl \u003d (SomeLanguages) other;\n+                final Set\u003cString\u003e ls \u003d new HashSet\u003cString\u003e(languages);\n+                for (String lang : sl.languages) {\n+                  ls.add(lang);\n+                }\n+                return from(ls);\n+            }\n+        }\n+\n+        @Override\n         public String toString() {\n             return \"Languages(\" + languages.toString() + \")\";\n         }\n@@ -217,6 +235,11 @@\n         }\n \n         @Override\n+        public LanguageSet merge(final LanguageSet other) {\n+            return other;\n+        }\n+\n+        @Override\n         public String toString() {\n             return \"NO_LANGUAGES\";\n         }\n@@ -252,6 +275,11 @@\n         }\n \n         @Override\n+        public LanguageSet merge(final LanguageSet other) {\n+            return other;\n+        }\n+\n+        @Override\n         public String toString() {\n             return \"ANY_LANGUAGE\";\n         }\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [2908,2961]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [4525,5056]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [7836,7941]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [8748,8853]"
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java",
        "src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.codec.language.bm.PhoneticEngine:applyFinalRules:[final PhonemeBuilder phonemeBuilder, final Map\u003cString,List\u003cRule\u003e\u003e finalRules]:PhonemeBuilder"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "org.apache.commons.codec.language.bm.PhoneticEngine:applyFinalRules:[final PhonemeBuilder phonemeBuilder, final Map\u003cString,List\u003cRule\u003e\u003e finalRules]:PhonemeBuilder"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "31",
            "338",
            "358",
            "361"
          ],
          "num": 4
        },
        {
          "qualified_names": [
            "31",
            "338",
            "339",
            "359",
            "360",
            "361",
            "362",
            "363",
            "364",
            "365",
            "366",
            "367",
            "368",
            "369",
            "370",
            "373"
          ],
          "num": 16
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java b/src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java\nindex 7119a4f..44a3f03 100644\n--- a/src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java\n+++ b/src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java\n@@ -28,7 +28,7 @@\n import java.util.Locale;\n import java.util.Map;\n import java.util.Set;\n-import java.util.TreeSet;\n+import java.util.TreeMap;\n \n import org.apache.commons.codec.language.bm.Languages.LanguageSet;\n import org.apache.commons.codec.language.bm.Rule.Phoneme;\n@@ -335,7 +335,8 @@\n             return phonemeBuilder;\n         }\n \n-        final Set\u003cRule.Phoneme\u003e phonemes \u003d new TreeSet\u003cRule.Phoneme\u003e(Rule.Phoneme.COMPARATOR);\n+        final Map\u003cRule.Phoneme, Rule.Phoneme\u003e phonemes \u003d\n+            new TreeMap\u003cRule.Phoneme, Rule.Phoneme\u003e(Rule.Phoneme.COMPARATOR);\n \n         for (final Rule.Phoneme phoneme : phonemeBuilder.getPhonemes()) {\n             PhonemeBuilder subBuilder \u003d PhonemeBuilder.empty(phoneme.getLanguages());\n@@ -355,10 +356,21 @@\n                 i \u003d rulesApplication.getI();\n             }\n \n-            phonemes.addAll(subBuilder.getPhonemes());\n+            // the phonemes map orders the phonemes only based on their text, but ignores the language set\n+            // when adding new phonemes, check for equal phonemes and merge their language set, otherwise\n+            // phonemes with the same text but different language set get lost\n+            for (final Rule.Phoneme newPhoneme : subBuilder.getPhonemes()) {\n+                if (phonemes.containsKey(newPhoneme)) {\n+                    final Rule.Phoneme oldPhoneme \u003d phonemes.remove(newPhoneme);\n+                    final Rule.Phoneme mergedPhoneme \u003d oldPhoneme.mergeWithLanguage(newPhoneme.getLanguages());\n+                    phonemes.put(mergedPhoneme, mergedPhoneme);\n+                } else {\n+                    phonemes.put(newPhoneme, newPhoneme);\n+                }\n+            }\n         }\n \n-        return new PhonemeBuilder(phonemes);\n+        return new PhonemeBuilder(phonemes.keySet());\n     }\n \n     /**\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "ImportDeclaration [1137,1162]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SimpleType [13025,13037]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "EnhancedForStatement [14274,14766]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "MethodInvocation [14812,14829]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "METHOD_INVOCATION_RECEIVER [14812,14820]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: keySet [14821,14827]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SimpleType [13088,13100]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ImportDeclaration [1137,1162]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [13942,13984]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/codec/language/bm/Rule.java",
        "src/main/java/org/apache/commons/codec/language/bm/Rule.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.codec.language.bm.Rule\\$Phoneme:join:[final Phoneme right]:Phoneme",
            "org.apache.commons.codec.language.bm.Rule:parseRules:[final Scanner scanner, final String location]:Map\u003cString,List\u003cRule\u003e\u003e"
          ],
          "num": 2
        },
        {
          "qualified_names": [
            "org.apache.commons.codec.language.bm.Rule\\$Phoneme:toString:[]:String",
            "org.apache.commons.codec.language.bm.Rule\\$Phoneme:mergeWithLanguage:[final LanguageSet lang]:Phoneme",
            "org.apache.commons.codec.language.bm.Rule:parseRules:[final Scanner scanner, final String location]:Map\u003cString,List\u003cRule\u003e\u003e"
          ],
          "num": 3
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "149",
            "444"
          ],
          "num": 2
        },
        {
          "qualified_names": [
            "150",
            "151",
            "152",
            "153",
            "154",
            "155",
            "156",
            "157",
            "158",
            "159",
            "160",
            "161",
            "162",
            "163",
            "164",
            "165",
            "461",
            "462",
            "463"
          ],
          "num": 19
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/codec/language/bm/Rule.java b/src/main/java/org/apache/commons/codec/language/bm/Rule.java\nindex 5fdbb0e..659d2df 100644\n--- a/src/main/java/org/apache/commons/codec/language/bm/Rule.java\n+++ b/src/main/java/org/apache/commons/codec/language/bm/Rule.java\n@@ -147,6 +147,22 @@\n             return new Phoneme(this.phonemeText.toString() + right.phonemeText.toString(),\n                                this.languages.restrictTo(right.languages));\n         }\n+\n+        /**\n+         * Returns a new Phoneme with the same text but a union of its\n+         * current language set and the given one.\n+         *\n+         * @param lang the language set to merge\n+         * @return a new Phoneme\n+         */\n+        public Phoneme mergeWithLanguage(final LanguageSet lang) {\n+          return new Phoneme(this.phonemeText.toString(), this.languages.merge(lang));\n+        }\n+\n+        @Override\n+        public String toString() {\n+          return phonemeText.toString() + \"[\" + languages + \"]\";\n+        }\n     }\n \n     public interface PhonemeExpr {\n@@ -442,6 +458,9 @@\n                                         sb.append(\"Rule\");\n                                         sb.append(\"{line\u003d\").append(myLine);\n                                         sb.append(\", loc\u003d\u0027\").append(loc).append(\u0027\\\u0027\u0027);\n+                                        sb.append(\", pat\u003d\u0027\").append(pat).append(\u0027\\\u0027\u0027);\n+                                        sb.append(\", lcon\u003d\u0027\").append(lCon).append(\u0027\\\u0027\u0027);\n+                                        sb.append(\", rcon\u003d\u0027\").append(rCon).append(\u0027\\\u0027\u0027);\n                                         sb.append(\u0027}\u0027);\n                                         return sb.toString();\n                                     }\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [5527,5921]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [5931,6050]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [18199,18245]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [18286,18334]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [18375,18423]"
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [
        "org.apache.commons.codec.language.bm.Languages\\$SomeLanguages:merge:[final LanguageSet other]:LanguageSet",
        "org.apache.commons.codec.language.bm.Rule\\$Phoneme:toString:[]:String",
        "org.apache.commons.codec.language.bm.Languages\\$LanguageSet:merge:[LanguageSet other]:LanguageSet",
        "org.apache.commons.codec.language.bm.Rule\\$Phoneme:mergeWithLanguage:[final LanguageSet lang]:Phoneme"
      ],
      "num": 4
    },
    "delete_functions": {
      "qualified_names": [
        "org.apache.commons.codec.language.bm.Rule\\$Phoneme:join:[final Phoneme right]:Phoneme",
        "org.apache.commons.codec.language.bm.Languages\\$LanguageSet:restrictTo:[LanguageSet other]:LanguageSet"
      ],
      "num": 2
    }
  },
  "patch_changed_mths": {
    "qualified_names": [
      "org.apache.commons.codec.language.bm.Languages\\$SomeLanguages:toString()Ljava/lang/String;:regression"
    ],
    "num": 1
  }
}