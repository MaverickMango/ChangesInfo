{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "/home/liumengjiao/Desktop/CI/Benchmark/data/changesInfo/",
  "properties": {
    "trigger.tests": "org.jsoup.nodes.ElementTest::testElementSiblingIndexSameContent,org.jsoup.nodes.ElementTest::testGetSiblingsWithDuplicateContent",
    "test.dir": "src/test/java",
    "clz.modified": "org.jsoup.nodes.Element",
    "src.dir": "src/main/java"
  },
  "timeoutSecond": 100,
  "proj": "Jsoup",
  "id": "43",
  "workingDir": "../bugs/Jsoup_43_buggy",
  "buggyCommit": "373ea35b2cb227b56694aa50589c853b68caa03a",
  "inducingCommit": "8391b7231a2519557d41209d728acc4f422af381",
  "originalCommit": "b8c259cfaf668e4237de09a0327b82080cfd37ba",
  "bug_name": "Jsoup_43",
  "derive": "defects4j",
  "original_fixing_commit": "11f7c1bd7a2d12f0b1150aa246c61afefd11991f",
  "buildFiles_changed": true,
  "regression": true,
  "inducing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/jsoup/nodes/Attributes.java",
        "src/main/java/org/jsoup/nodes/Attributes.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [
            "org.jsoup.nodes.Attributes:hashCode:[]:int",
            "org.jsoup.nodes.Attributes:equals:[Object o]:boolean"
          ],
          "num": 2
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "159",
            "169"
          ],
          "num": 2
        },
        {
          "qualified_names": [
            "159",
            "160",
            "161",
            "162",
            "163",
            "164",
            "174",
            "175",
            "176",
            "177",
            "178"
          ],
          "num": 11
        }
      ],
      "diff": "diff --git a/src/main/java/org/jsoup/nodes/Attributes.java b/src/main/java/org/jsoup/nodes/Attributes.java\nindex 7f4e3df..6c1fb6c 100644\n--- a/src/main/java/org/jsoup/nodes/Attributes.java\n+++ b/src/main/java/org/jsoup/nodes/Attributes.java\n@@ -156,7 +156,12 @@\n     public String toString() {\n         return html();\n     }\n-    \n+\n+    /**\n+     * Checks if these attributes are equal to another set of attributes, by comparing the two sets\n+     * @param o attributes to compare with\n+     * @return if both sets of attributes have the same content\n+     */\n     @Override\n     public boolean equals(Object o) {\n         if (this \u003d\u003d o) return true;\n@@ -166,7 +171,11 @@\n         \n         return !(attributes !\u003d null ? !attributes.equals(that.attributes) : that.attributes !\u003d null);\n     }\n-    \n+\n+    /**\n+     * Calculates the hashcode of these attributes, by iterating all attributes and summing their hashcodes.\n+     * @return calculated hashcode\n+     */\n     @Override\n     public int hashCode() {\n         return attributes !\u003d null ? attributes.hashCode() : 0;\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [4710,4928]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [5244,5399]"
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/jsoup/nodes/Element.java",
        "src/main/java/org/jsoup/nodes/Element.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.jsoup.nodes.Element:equals:[Object o]:boolean",
            "org.jsoup.nodes.Element:hashCode:[]:int",
            "org.jsoup.nodes.Element:clone:[]:Element",
            "org.jsoup.nodes.Element:appendChild:[Node child]:Element"
          ],
          "num": 4
        },
        {
          "qualified_names": [
            "org.jsoup.nodes.Element:appendChild:[Node child]:Element",
            "org.jsoup.nodes.Element:equals:[Object o]:boolean",
            "org.jsoup.nodes.Element:clone:[]:Element"
          ],
          "num": 3
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "270",
            "1169",
            "1174",
            "1182",
            "1183"
          ],
          "num": 5
        },
        {
          "qualified_names": [
            "270",
            "1169",
            "1170",
            "1171",
            "1172",
            "1173",
            "1174",
            "1175",
            "1187"
          ],
          "num": 9
        }
      ],
      "diff": "diff --git a/src/main/java/org/jsoup/nodes/Element.java b/src/main/java/org/jsoup/nodes/Element.java\nindex 3dfc0ff..c07018e 100644\n--- a/src/main/java/org/jsoup/nodes/Element.java\n+++ b/src/main/java/org/jsoup/nodes/Element.java\n@@ -267,7 +267,7 @@\n         // was - Node#addChildren(child). short-circuits an array create and a loop.\n         reparentChild(child);\n         childNodes.add(child);\n-        child.setSiblingIndex(childNodes.size()-1);\n+        child.setSiblingIndex(childNodes.size() - 1);\n         return this;\n     }\n \n@@ -1166,12 +1166,17 @@\n \n     @Override\n     public boolean equals(Object o) {\n-        return this \u003d\u003d o;\n+        if (this \u003d\u003d o) return true;\n+        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) return false;\n+        if (!super.equals(o)) return false;\n+\n+        Element element \u003d (Element) o;\n+\n+        return tag.equals(element.tag);\n     }\n \n     @Override\n     public int hashCode() {\n-        // todo: fixup, not very useful\n         int result \u003d super.hashCode();\n         result \u003d 31 * result + (tag !\u003d null ? tag.hashCode() : 0);\n         return result;\n@@ -1179,7 +1184,6 @@\n \n     @Override\n     public Element clone() {\n-        Element clone \u003d (Element) super.clone();\n-        return clone;\n+        return (Element) super.clone();\n     }\n }\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [42109,42136]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [42145,42203]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [42212,42247]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [42257,42287]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ReturnStatement [42297,42328]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "ReturnStatement [42565,42596]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ReturnStatement [42107,42124]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [42401,42408]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: clone [42409,42414]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "VariableDeclarationFragment [42409,42440]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "VariableDeclarationStatement [42401,42441]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ReturnStatement [42450,42463]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/jsoup/nodes/Node.java",
        "src/main/java/org/jsoup/nodes/Node.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.jsoup.nodes.Node:after:[Node node]:Node",
            "org.jsoup.nodes.Node:after:[String html]:Node",
            "org.jsoup.nodes.Node:equals:[Object o]:boolean",
            "org.jsoup.nodes.Node:hashCode:[]:int"
          ],
          "num": 4
        },
        {
          "qualified_names": [
            "org.jsoup.nodes.Node:after:[String html]:Node",
            "org.jsoup.nodes.Node:equals:[Object o]:boolean",
            "org.jsoup.nodes.Node:hashCode:[]:int",
            "org.jsoup.nodes.Node:after:[Node node]:Node"
          ],
          "num": 4
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "317",
            "331",
            "591",
            "593",
            "598",
            "599"
          ],
          "num": 6
        },
        {
          "qualified_names": [
            "317",
            "331",
            "589",
            "590",
            "591",
            "592",
            "593",
            "594",
            "597",
            "598",
            "600",
            "601",
            "602",
            "603",
            "606",
            "607",
            "608",
            "609",
            "610",
            "611",
            "612",
            "615"
          ],
          "num": 22
        }
      ],
      "diff": "diff --git a/src/main/java/org/jsoup/nodes/Node.java b/src/main/java/org/jsoup/nodes/Node.java\nindex ecb3f15..58fa0f7 100644\n--- a/src/main/java/org/jsoup/nodes/Node.java\n+++ b/src/main/java/org/jsoup/nodes/Node.java\n@@ -314,7 +314,7 @@\n      * @see #before(String)\n      */\n     public Node after(String html) {\n-        addSiblingHtml(siblingIndex()+1, html);\n+        addSiblingHtml(siblingIndex() + 1, html);\n         return this;\n     }\n \n@@ -328,7 +328,7 @@\n         Validate.notNull(node);\n         Validate.notNull(parentNode);\n \n-        parentNode.addChildren(siblingIndex()+1, node);\n+        parentNode.addChildren(siblingIndex() + 1, node);\n         return this;\n     }\n \n@@ -586,17 +586,33 @@\n         accum.append(\"\\n\").append(StringUtil.padding(depth * out.indentAmount()));\n     }\n \n+    /**\n+     * Check if this node is equal to another node. A node is considered equal if its attributes and content equal the\n+     * other node; particularly its position in the tree does not influence its equality.\n+     * @param o other object to compare to\n+     * @return true if the content of this node is the same as the other\n+     */\n     @Override\n     public boolean equals(Object o) {\n-        // todo: have nodes hold a child index, compare against that and parent (not children)\n+        if (this \u003d\u003d o) return true;\n+        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) return false;\n \n-        return this \u003d\u003d o;\n+        Node node \u003d (Node) o;\n+\n+        if (childNodes !\u003d null ? !childNodes.equals(node.childNodes) : node.childNodes !\u003d null) return false;\n+        return !(attributes !\u003d null ? !attributes.equals(node.attributes) : node.attributes !\u003d null);\n     }\n \n+    /**\n+     * Calculates a hash code for this node, which includes iterating all its attributes, and recursing into any child\n+     * nodes. This means that a node\u0027s hashcode is based on it and its child content, and not its parent or place in the\n+     * tree. So two nodes with the same content, regardless of their position in the tree, will have the same hashcode.\n+     * @return the calculated hashcode\n+     * @see Node#equals(Object)\n+     */\n     @Override\n     public int hashCode() {\n-        int result \u003d parentNode !\u003d null ? parentNode.hashCode() : 0;\n-        // not children, or will block stack as they go back up to parent)\n+        int result \u003d childNodes !\u003d null ? childNodes.hashCode() : 0;\n         result \u003d 31 * result + (attributes !\u003d null ? attributes.hashCode() : 0);\n         return result;\n     }\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [19093,19429]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [19840,20282]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [19490,19517]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [19526,19584]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [19594,19615]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [19625,19726]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ReturnStatement [19735,19828]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [20333,20393]"
        },
        {
          "type": "delete-tree",
          "from": "ReturnStatement [19241,19258]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [19316,19376]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/jsoup/nodes/TextNode.java",
        "src/main/java/org/jsoup/nodes/TextNode.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.jsoup.nodes.TextNode:absUrl:[String attributeKey]:String"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "org.jsoup.nodes.TextNode:hashCode:[]:int",
            "org.jsoup.nodes.TextNode:equals:[Object o]:boolean"
          ],
          "num": 2
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "174"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "175",
            "176",
            "177",
            "178",
            "179",
            "180",
            "181",
            "182",
            "183",
            "184",
            "185",
            "186",
            "187",
            "188",
            "189",
            "190",
            "191",
            "192"
          ],
          "num": 18
        }
      ],
      "diff": "diff --git a/src/main/java/org/jsoup/nodes/TextNode.java b/src/main/java/org/jsoup/nodes/TextNode.java\nindex 2eebe31..e9055d4 100644\n--- a/src/main/java/org/jsoup/nodes/TextNode.java\n+++ b/src/main/java/org/jsoup/nodes/TextNode.java\n@@ -172,4 +172,22 @@\n         ensureAttributes();\n         return super.absUrl(attributeKey);\n     }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this \u003d\u003d o) return true;\n+        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) return false;\n+        if (!super.equals(o)) return false;\n+\n+        TextNode textNode \u003d (TextNode) o;\n+\n+        return !(text !\u003d null ? !text.equals(textNode.text) : textNode.text !\u003d null);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        int result \u003d super.hashCode();\n+        result \u003d 31 * result + (text !\u003d null ? text.hashCode() : 0);\n+        return result;\n+    }\n }\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [5605,5935]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [5941,6115]"
        }
      ]
    }
  ],
  "inducing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [
        "org.jsoup.nodes.TextNode:equals:[Object o]:boolean",
        "org.jsoup.nodes.Attributes:equals:[Object o]:boolean",
        "org.jsoup.nodes.Attributes:hashCode:[]:int",
        "org.jsoup.nodes.TextNode:hashCode:[]:int"
      ],
      "num": 4
    },
    "delete_functions": {
      "qualified_names": [
        "org.jsoup.nodes.Element:hashCode:[]:int",
        "org.jsoup.nodes.TextNode:absUrl:[String attributeKey]:String"
      ],
      "num": 2
    }
  },
  "trigger_tests": [
    {
      "test_class": "org.jsoup.nodes.ElementTest",
      "test_function": "testElementSiblingIndexSameContent",
      "assertion_line": "156",
      "exception": "junit.framework.AssertionFailedError",
      "message": ""
    },
    {
      "test_class": "org.jsoup.nodes.ElementTest",
      "test_function": "testGetSiblingsWithDuplicateContent",
      "exception": "junit.framework.AssertionFailedError",
      "message": "expected:\u003c[]is\u003e but was:\u003c[th]is\u003e"
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/jsoup/nodes/Element.java",
        "src/main/java/org/jsoup/nodes/Element.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.jsoup.nodes.Element:indexInList:[Element search, List\u003cE\u003e elements]:Integer"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "org.jsoup.nodes.Element:indexInList:[Element search, List\u003cE\u003e elements]:Integer"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "574"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "574"
          ],
          "num": 1
        }
      ],
      "diff": "diff --git a/src/main/java/org/jsoup/nodes/Element.java b/src/main/java/org/jsoup/nodes/Element.java\nindex f1ae8dd..1575fd0 100644\n--- a/src/main/java/org/jsoup/nodes/Element.java\n+++ b/src/main/java/org/jsoup/nodes/Element.java\n@@ -571,7 +571,7 @@\n \n         for (int i \u003d 0; i \u003c elements.size(); i++) {\n             E element \u003d elements.get(i);\n-            if (element.equals(search))\n+            if (element \u003d\u003d search)\n                 return i;\n         }\n         return null;\n",
      "operations": [
        {
          "type": "insert-node",
          "from": "",
          "to": "InfixExpression [19694,19711]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "INFIX_EXPRESSION_OPERATOR: \u003d\u003d [19702,19704]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "METHOD_INVOCATION_RECEIVER [19694,19701]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: equals [19702,19708]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "METHOD_INVOCATION_ARGUMENTS [19709,19715]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "MethodInvocation [19694,19716]",
          "to": ""
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  },
  "patch_changed_mths": {
    "qualified_names": [
      "org.jsoup.nodes.Element:indexInList(Lorg/jsoup/nodes/Element;Ljava/util/List;)Ljava/lang/Integer;:regression"
    ],
    "num": 1
  }
}