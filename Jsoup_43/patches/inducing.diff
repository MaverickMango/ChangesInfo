diff --git a/CHANGES b/CHANGES
index 4281f8d..5aba2c0 100644
--- a/CHANGES
+++ b/CHANGES
@@ -62,6 +62,9 @@
  * Fixed an issue where Jsoup.Connection would throw an IO Exception when reading a page with zero content-length.
    <https://github.com/jhy/jsoup/issues/538>
 
+ * Improved the equals() and hashcode() methods in Node, to consider all their child content, for DOM tree comparisons.
+   <https://github.com/jhy/jsoup/issues/537>
+
 *** Release 1.8.1 [2014-Sep-27]
  * Introduced the ability to chose between HTML and XML output, and made HTML the default. This means img tags are
    output as <img>, not <img />. XML is the default when using the XmlTreeBuilder. Control this with the
diff --git a/src/main/java/org/jsoup/nodes/Attributes.java b/src/main/java/org/jsoup/nodes/Attributes.java
index 7f4e3df..6c1fb6c 100644
--- a/src/main/java/org/jsoup/nodes/Attributes.java
+++ b/src/main/java/org/jsoup/nodes/Attributes.java
@@ -156,7 +156,12 @@
     public String toString() {
         return html();
     }
-    
+
+    /**
+     * Checks if these attributes are equal to another set of attributes, by comparing the two sets
+     * @param o attributes to compare with
+     * @return if both sets of attributes have the same content
+     */
     @Override
     public boolean equals(Object o) {
         if (this == o) return true;
@@ -166,7 +171,11 @@
         
         return !(attributes != null ? !attributes.equals(that.attributes) : that.attributes != null);
     }
-    
+
+    /**
+     * Calculates the hashcode of these attributes, by iterating all attributes and summing their hashcodes.
+     * @return calculated hashcode
+     */
     @Override
     public int hashCode() {
         return attributes != null ? attributes.hashCode() : 0;
diff --git a/src/main/java/org/jsoup/nodes/Element.java b/src/main/java/org/jsoup/nodes/Element.java
index 3dfc0ff..c07018e 100644
--- a/src/main/java/org/jsoup/nodes/Element.java
+++ b/src/main/java/org/jsoup/nodes/Element.java
@@ -267,7 +267,7 @@
         // was - Node#addChildren(child). short-circuits an array create and a loop.
         reparentChild(child);
         childNodes.add(child);
-        child.setSiblingIndex(childNodes.size()-1);
+        child.setSiblingIndex(childNodes.size() - 1);
         return this;
     }
 
@@ -1166,12 +1166,17 @@
 
     @Override
     public boolean equals(Object o) {
-        return this == o;
+        if (this == o) return true;
+        if (o == null || getClass() != o.getClass()) return false;
+        if (!super.equals(o)) return false;
+
+        Element element = (Element) o;
+
+        return tag.equals(element.tag);
     }
 
     @Override
     public int hashCode() {
-        // todo: fixup, not very useful
         int result = super.hashCode();
         result = 31 * result + (tag != null ? tag.hashCode() : 0);
         return result;
@@ -1179,7 +1184,6 @@
 
     @Override
     public Element clone() {
-        Element clone = (Element) super.clone();
-        return clone;
+        return (Element) super.clone();
     }
 }
diff --git a/src/main/java/org/jsoup/nodes/Node.java b/src/main/java/org/jsoup/nodes/Node.java
index ecb3f15..58fa0f7 100644
--- a/src/main/java/org/jsoup/nodes/Node.java
+++ b/src/main/java/org/jsoup/nodes/Node.java
@@ -314,7 +314,7 @@
      * @see #before(String)
      */
     public Node after(String html) {
-        addSiblingHtml(siblingIndex()+1, html);
+        addSiblingHtml(siblingIndex() + 1, html);
         return this;
     }
 
@@ -328,7 +328,7 @@
         Validate.notNull(node);
         Validate.notNull(parentNode);
 
-        parentNode.addChildren(siblingIndex()+1, node);
+        parentNode.addChildren(siblingIndex() + 1, node);
         return this;
     }
 
@@ -586,17 +586,33 @@
         accum.append("\n").append(StringUtil.padding(depth * out.indentAmount()));
     }
 
+    /**
+     * Check if this node is equal to another node. A node is considered equal if its attributes and content equal the
+     * other node; particularly its position in the tree does not influence its equality.
+     * @param o other object to compare to
+     * @return true if the content of this node is the same as the other
+     */
     @Override
     public boolean equals(Object o) {
-        // todo: have nodes hold a child index, compare against that and parent (not children)
+        if (this == o) return true;
+        if (o == null || getClass() != o.getClass()) return false;
 
-        return this == o;
+        Node node = (Node) o;
+
+        if (childNodes != null ? !childNodes.equals(node.childNodes) : node.childNodes != null) return false;
+        return !(attributes != null ? !attributes.equals(node.attributes) : node.attributes != null);
     }
 
+    /**
+     * Calculates a hash code for this node, which includes iterating all its attributes, and recursing into any child
+     * nodes. This means that a node's hashcode is based on it and its child content, and not its parent or place in the
+     * tree. So two nodes with the same content, regardless of their position in the tree, will have the same hashcode.
+     * @return the calculated hashcode
+     * @see Node#equals(Object)
+     */
     @Override
     public int hashCode() {
-        int result = parentNode != null ? parentNode.hashCode() : 0;
-        // not children, or will block stack as they go back up to parent)
+        int result = childNodes != null ? childNodes.hashCode() : 0;
         result = 31 * result + (attributes != null ? attributes.hashCode() : 0);
         return result;
     }
diff --git a/src/main/java/org/jsoup/nodes/TextNode.java b/src/main/java/org/jsoup/nodes/TextNode.java
index 2eebe31..e9055d4 100644
--- a/src/main/java/org/jsoup/nodes/TextNode.java
+++ b/src/main/java/org/jsoup/nodes/TextNode.java
@@ -172,4 +172,22 @@
         ensureAttributes();
         return super.absUrl(attributeKey);
     }
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) return true;
+        if (o == null || getClass() != o.getClass()) return false;
+        if (!super.equals(o)) return false;
+
+        TextNode textNode = (TextNode) o;
+
+        return !(text != null ? !text.equals(textNode.text) : textNode.text != null);
+    }
+
+    @Override
+    public int hashCode() {
+        int result = super.hashCode();
+        result = 31 * result + (text != null ? text.hashCode() : 0);
+        return result;
+    }
 }
diff --git a/src/test/java/org/jsoup/nodes/ElementTest.java b/src/test/java/org/jsoup/nodes/ElementTest.java
index d74f660..69dc6ad 100644
--- a/src/test/java/org/jsoup/nodes/ElementTest.java
+++ b/src/test/java/org/jsoup/nodes/ElementTest.java
@@ -394,7 +394,7 @@
         assertEquals("<div><div class=\"head\"><p>Hello</p></div><p>There</p></div>", TextUtil.stripNewlines(doc.body().html()));
 
         Element ret = p.wrap("<div><div class=foo></div><p>What?</p></div>");
-        assertEquals("<div><div class=\"head\"><div><div class=\"foo\"><p>Hello</p></div><p>What?</p></div></div><p>There</p></div>", 
+        assertEquals("<div><div class=\"head\"><div><div class=\"foo\"><p>Hello</p></div><p>What?</p></div></div><p>There</p></div>",
                 TextUtil.stripNewlines(doc.body().html()));
 
         assertEquals(ret, p);
@@ -749,4 +749,53 @@
         assertEquals("c2", arr2[1]);
         assertEquals("c3", arr2[2]);
     }
+
+    @Test
+    public void testHashAndEquals() {
+        String doc1 = "<div id=1><p class=one>One</p><p class=one>One</p><p class=one>Two</p><p class=two>One</p></div>" +
+                "<div id=2><p class=one>One</p><p class=one>One</p><p class=one>Two</p><p class=two>One</p></div>";
+
+        Document doc = Jsoup.parse(doc1);
+        Elements els = doc.select("p");
+
+        /*
+        for (Element el : els) {
+            System.out.println(el.hashCode() + " - " + el.outerHtml());
+        }
+
+        0 1534787905 - <p class="one">One</p>
+        1 1534787905 - <p class="one">One</p>
+        2 1539683239 - <p class="one">Two</p>
+        3 1535455211 - <p class="two">One</p>
+        4 1534787905 - <p class="one">One</p>
+        5 1534787905 - <p class="one">One</p>
+        6 1539683239 - <p class="one">Two</p>
+        7 1535455211 - <p class="two">One</p>
+        */
+        assertEquals(8, els.size());
+        Element e0 = els.get(0);
+        Element e1 = els.get(1);
+        Element e2 = els.get(2);
+        Element e3 = els.get(3);
+        Element e4 = els.get(4);
+        Element e5 = els.get(5);
+        Element e6 = els.get(6);
+        Element e7 = els.get(7);
+
+        assertEquals(e0, e1);
+        assertEquals(e0, e4);
+        assertEquals(e0, e5);
+        assertFalse(e0.equals(e2));
+        assertFalse(e0.equals(e3));
+        assertFalse(e0.equals(e6));
+        assertFalse(e0.equals(e7));
+
+        assertEquals(e0.hashCode(), e1.hashCode());
+        assertEquals(e0.hashCode(), e4.hashCode());
+        assertEquals(e0.hashCode(), e5.hashCode());
+        assertFalse(e0.hashCode() == (e2.hashCode()));
+        assertFalse(e0.hashCode() == (e3).hashCode());
+        assertFalse(e0.hashCode() == (e6).hashCode());
+        assertFalse(e0.hashCode() == (e7).hashCode());
+    }
 }
