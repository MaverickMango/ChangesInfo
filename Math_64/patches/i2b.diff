diff -r -u inducing/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java buggy/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java
--- inducing/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	2023-06-12 11:40:46.745801329 +0800
+++ buggy/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	2023-06-12 11:40:46.673804501 +0800
@@ -19,8 +19,10 @@
 import java.util.Arrays;
 
 import org.apache.commons.math.FunctionEvaluationException;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 import org.apache.commons.math.optimization.OptimizationException;
 import org.apache.commons.math.optimization.VectorialPointValuePair;
+import org.apache.commons.math.util.MathUtils;
 
 
 /**
@@ -140,16 +142,20 @@
      * and the columns of the jacobian. */
     private double orthoTolerance;
 
+    /** Threshold for QR ranking. */
+    private double qrRankingThreshold;
+
     /**
      * Build an optimizer for least squares problems.
      * <p>The default values for the algorithm settings are:
      *   <ul>
-     *    <li>{@link #setConvergenceChecker vectorial convergence checker}: null</li>
-     *    <li>{@link #setInitialStepBoundFactor initial step bound factor}: 100.0</li>
-     *    <li>{@link #setMaxIterations maximal iterations}: 1000</li>
-     *    <li>{@link #setCostRelativeTolerance cost relative tolerance}: 1.0e-10</li>
-     *    <li>{@link #setParRelativeTolerance parameters relative tolerance}: 1.0e-10</li>
-     *    <li>{@link #setOrthoTolerance orthogonality tolerance}: 1.0e-10</li>
+     *    <li>{@link #setConvergenceChecker(VectorialConvergenceChecker) vectorial convergence checker}: null</li>
+     *    <li>{@link #setInitialStepBoundFactor(double) initial step bound factor}: 100.0</li>
+     *    <li>{@link #setMaxIterations(int) maximal iterations}: 1000</li>
+     *    <li>{@link #setCostRelativeTolerance(double) cost relative tolerance}: 1.0e-10</li>
+     *    <li>{@link #setParRelativeTolerance(double) parameters relative tolerance}: 1.0e-10</li>
+     *    <li>{@link #setOrthoTolerance(double) orthogonality tolerance}: 1.0e-10</li>
+     *    <li>{@link #setQRRankingThreshold(double) QR ranking threshold}: {@link MathUtils#SAFE_MIN}</li>
      *   </ul>
      * </p>
      * <p>These default values may be overridden after construction. If the {@link
@@ -168,6 +174,7 @@
         setCostRelativeTolerance(1.0e-10);
         setParRelativeTolerance(1.0e-10);
         setOrthoTolerance(1.0e-10);
+        setQRRankingThreshold(MathUtils.SAFE_MIN);
 
     }
 
@@ -216,6 +223,19 @@
         this.orthoTolerance = orthoTolerance;
     }
 
+    /**
+     * Set the desired threshold for QR ranking.
+     * <p>
+     * If the squared norm of a column vector is smaller or equal to this threshold
+     * during QR decomposition, it is considered to be a zero vector and hence the
+     * rank of the matrix is reduced.
+     * </p>
+     * @param threshold threshold for QR ranking
+     */
+    public void setQRRankingThreshold(final double threshold) {
+        this.qrRankingThreshold = threshold;
+    }
+
     /** {@inheritDoc} */
     @Override
     protected VectorialPointValuePair doOptimize()
@@ -417,7 +437,7 @@
                 if (checker != null) {
                     // we use the vectorial convergence checker
                     if (checker.converged(getIterations(), previous, current)) {
-                        return current;                        
+                        return current;
                     }
                 } else {
                     // we use the Levenberg-Marquardt specific convergence parameters
@@ -432,18 +452,13 @@
                 // tests for termination and stringent tolerances
                 // (2.2204e-16 is the machine epsilon for IEEE754)
                 if ((Math.abs(actRed) <= 2.2204e-16) && (preRed <= 2.2204e-16) && (ratio <= 2.0)) {
-                    throw new OptimizationException("cost relative tolerance is too small ({0})," +
-                            " no further reduction in the" +
-                            " sum of squares is possible",
+                    throw new OptimizationException(LocalizedFormats.TOO_SMALL_COST_RELATIVE_TOLERANCE,
                             costRelativeTolerance);
                 } else if (delta <= 2.2204e-16 * xNorm) {
-                    throw new OptimizationException("parameters relative tolerance is too small" +
-                            " ({0}), no further improvement in" +
-                            " the approximate solution is possible",
+                    throw new OptimizationException(LocalizedFormats.TOO_SMALL_PARAMETERS_RELATIVE_TOLERANCE,
                             parRelativeTolerance);
                 } else if (maxCosine <= 2.2204e-16)  {
-                    throw new OptimizationException("orthogonality tolerance is too small ({0})," +
-                            " solution is orthogonal to the jacobian",
+                    throw new OptimizationException(LocalizedFormats.TOO_SMALL_ORTHOGONALITY_TOLERANCE,
                             orthoTolerance);
                 }
 
@@ -796,8 +811,7 @@
                     norm2 += aki * aki;
                 }
                 if (Double.isInfinite(norm2) || Double.isNaN(norm2)) {
-                    throw new OptimizationException(
-                            "unable to perform Q.R decomposition on the {0}x{1} jacobian matrix",
+                    throw new OptimizationException(LocalizedFormats.UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN,
                             rows, cols);
                 }
                 if (norm2 > ak2) {
@@ -805,7 +819,7 @@
                     ak2        = norm2;
                 }
             }
-            if (ak2 == 0) {
+            if (ak2 <= qrRankingThreshold) {
                 rank = k;
                 return;
             }
