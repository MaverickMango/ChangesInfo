diff -u -r data/changesInfo//Math_64/properties/modified_classes/inducing/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java data/changesInfo//Math_64/cleaned/fixing/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java
--- data/changesInfo//Math_64/properties/modified_classes/inducing/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	2023-12-27 22:47:55.261503129 -0800
+++ data/changesInfo//Math_64/cleaned/fixing/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	2023-08-02 07:13:36.061428072 -0700
@@ -345,7 +345,6 @@
 
                 // evaluate the function at x + p and calculate its norm
                 updateResidualsAndCost();
-                current = new VectorialPointValuePair(point, objective);
 
                 // compute the scaled actual reduction
                 double actRed = -1.0;
@@ -401,6 +400,14 @@
                         xNorm    += xK * xK;
                     }
                     xNorm = Math.sqrt(xNorm);
+                    current = new VectorialPointValuePair(point, objective);
+                    // tests for convergence.
+                    if (checker != null) {
+                        // we use the vectorial convergence checker
+                        if (checker.converged(getIterations(), previous, current)) {
+                            return current;
+                        }
+                    }
                 } else {
                     // failed iteration, reset the previous values
                     cost = previousCost;
@@ -414,12 +421,7 @@
                 }
 
                 // tests for convergence.
-                if (checker != null) {
-                    // we use the vectorial convergence checker
-                    if (checker.converged(getIterations(), previous, current)) {
-                        return current;                        
-                    }
-                } else {
+                if (checker == null)  {
                     // we use the Levenberg-Marquardt specific convergence parameters
                     if (((Math.abs(actRed) <= costRelativeTolerance) &&
                          (preRed <= costRelativeTolerance) &&
Only in data/changesInfo//Math_64/properties/modified_classes/inducing/src: test
