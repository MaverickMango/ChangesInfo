diff --git a/src/main/java/org/apache/commons/math/dfp/Dfp.java b/src/main/java/org/apache/commons/math/dfp/Dfp.java
new file mode 100644
index 0000000..c36428c
--- /dev/null
+++ b/src/main/java/org/apache/commons/math/dfp/Dfp.java
@@ -0,0 +1,2400 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.commons.math.dfp;
+
+import java.util.Arrays;
+
+import org.apache.commons.math.FieldElement;
+
+/**
+ *  Decimal floating point library for Java
+ *
+ *  <p>Another floating point class.  This one is built using radix 10000
+ *  which is 10<sup>4</sup>, so its almost decimal.</p>
+ *
+ *  <p>The design goals here are:
+ *  <ol>
+ *    <li>Decimal math, or close to it</li>
+ *    <li>Settable precision (but no mix between numbers using different settings)</li>
+ *    <li>Portability.  Code should be keep as portable as possible.</li>
+ *    <li>Performance</li>
+ *    <li>Accuracy  - Results should always be +/- 1 ULP for basic
+ *         algebraic operation</li>
+ *    <li>Comply with IEEE 854-1987 as much as possible.
+ *         (See IEEE 854-1987 notes below)</li>
+ *  </ol></p>
+ *
+ *  <p>Trade offs:
+ *  <ol>
+ *    <li>Memory foot print.  I'm using more memory than necessary to
+ *         represent numbers to get better performance.</li>
+ *    <li>Digits are bigger, so rounding is a greater loss.  So, if you
+ *         really need 12 decimal digits, better use 4 base 10000 digits
+ *         there can be one partially filled.</li>
+ *  </ol></p>
+ *
+ *  <p>Numbers are represented  in the following form:
+ *  <pre>
+ *  n  =  sign &times; mant &times; (radix)<sup>exp</sup>;</p>
+ *  </pre>
+ *  where sign is &plusmn;1, mantissa represents a fractional number between
+ *  zero and one.  mant[0] is the least significant digit.
+ *  exp is in the range of -32767 to 32768</p>
+ *
+ *  <p>IEEE 854-1987  Notes and differences</p>
+ *
+ *  <p>IEEE 854 requires the radix to be either 2 or 10.  The radix here is
+ *  10000, so that requirement is not met, but  it is possible that a
+ *  subclassed can be made to make it behave as a radix 10
+ *  number.  It is my opinion that if it looks and behaves as a radix
+ *  10 number then it is one and that requirement would be met.</p>
+ *
+ *  <p>The radix of 10000 was chosen because it should be faster to operate
+ *  on 4 decimal digits at once instead of one at a time.  Radix 10 behavior
+ *  can be realized by add an additional rounding step to ensure that
+ *  the number of decimal digits represented is constant.</p>
+ *
+ *  <p>The IEEE standard specifically leaves out internal data encoding,
+ *  so it is reasonable to conclude that such a subclass of this radix
+ *  10000 system is merely an encoding of a radix 10 system.</p>
+ *
+ *  <p>IEEE 854 also specifies the existence of "sub-normal" numbers.  This
+ *  class does not contain any such entities.  The most significant radix
+ *  10000 digit is always non-zero.  Instead, we support "gradual underflow"
+ *  by raising the underflow flag for numbers less with exponent less than
+ *  expMin, but don't flush to zero until the exponent reaches MIN_EXP-digits.
+ *  Thus the smallest number we can represent would be:
+ *  1E(-(MIN_EXP-digits-1)*4),  eg, for digits=5, MIN_EXP=-32767, that would
+ *  be 1e-131092.</p>
+ *
+ *  <p>IEEE 854 defines that the implied radix point lies just to the right
+ *  of the most significant digit and to the left of the remaining digits.
+ *  This implementation puts the implied radix point to the left of all
+ *  digits including the most significant one.  The most significant digit
+ *  here is the one just to the right of the radix point.  This is a fine
+ *  detail and is really only a matter of definition.  Any side effects of
+ *  this can be rendered invisible by a subclass.</p>
+ * @see DfpField
+ * @version $Revision$ $Date$
+ * @since 2.2
+ */
+public class Dfp implements FieldElement<Dfp> {
+
+    /** The radix, or base of this system.  Set to 10000 */
+    public static final int RADIX = 10000;
+
+    /** The minimum exponent before underflow is signaled.  Flush to zero
+     *  occurs at minExp-DIGITS */
+    public static final int MIN_EXP = -32767;
+
+    /** The maximum exponent before overflow is signaled and results flushed
+     *  to infinity */
+    public static final int MAX_EXP =  32768;
+
+    /** The amount under/overflows are scaled by before going to trap handler */
+    public static final int ERR_SCALE = 32760;
+
+    /** Indicator value for normal finite numbers. */
+    public static final byte FINITE = 0;
+
+    /** Indicator value for Infinity. */
+    public static final byte INFINITE = 1;
+
+    /** Indicator value for signaling NaN. */
+    public static final byte SNAN = 2;
+
+    /** Indicator value for quiet NaN. */
+    public static final byte QNAN = 3;
+
+    /** String for NaN representation. */
+    private static final String NAN_STRING = "NaN";
+
+    /** String for positive infinity representation. */
+    private static final String POS_INFINITY_STRING = "Infinity";
+
+    /** String for negative infinity representation. */
+    private static final String NEG_INFINITY_STRING = "-Infinity";
+
+    /** Name for traps triggered by addition. */
+    private static final String ADD_TRAP = "add";
+
+    /** Name for traps triggered by multiplication. */
+    private static final String MULTIPLY_TRAP = "multiply";
+
+    /** Name for traps triggered by division. */
+    private static final String DIVIDE_TRAP = "divide";
+
+    /** Name for traps triggered by square root. */
+    private static final String SQRT_TRAP = "sqrt";
+
+    /** Name for traps triggered by alignment. */
+    private static final String ALIGN_TRAP = "align";
+
+    /** Name for traps triggered by truncation. */
+    private static final String TRUNC_TRAP = "trunc";
+
+    /** Name for traps triggered by nextAfter. */
+    private static final String NEXT_AFTER_TRAP = "nextAfter";
+
+    /** Name for traps triggered by lessThan. */
+    private static final String LESS_THAN_TRAP = "lessThan";
+
+    /** Name for traps triggered by greaterThan. */
+    private static final String GREATER_THAN_TRAP = "greaterThan";
+
+    /** Name for traps triggered by newInstance. */
+    private static final String NEW_INSTANCE_TRAP = "newInstance";
+
+    /** Mantissa. */
+    protected int[] mant;
+
+    /** Sign bit: & for positive, -1 for negative. */
+    protected byte sign;
+
+    /** Exponent. */
+    protected int exp;
+
+    /** Indicator for non-finite / non-number values. */
+    protected byte nans;
+
+    /** Factory building similar Dfp's. */
+    private final DfpField field;
+
+    /** Makes an instance with a value of zero.
+     * @param field field to which this instance belongs
+     */
+    protected Dfp(final DfpField field) {
+        mant = new int[field.getRadixDigits()];
+        sign = 1;
+        exp = 0;
+        nans = FINITE;
+        this.field = field;
+    }
+
+    /** Create an instance from a byte value.
+     * @param field field to which this instance belongs
+     * @param x value to convert to an instance
+     */
+    protected Dfp(final DfpField field, byte x) {
+        this(field, (long) x);
+    }
+
+    /** Create an instance from an int value.
+     * @param field field to which this instance belongs
+     * @param x value to convert to an instance
+     */
+    protected Dfp(final DfpField field, int x) {
+        this(field, (long) x);
+    }
+
+    /** Create an instance from a long value.
+     * @param field field to which this instance belongs
+     * @param x value to convert to an instance
+     */
+    protected Dfp(final DfpField field, long x) {
+
+        // initialize as if 0
+        mant = new int[field.getRadixDigits()];
+        nans = FINITE;
+        this.field = field;
+
+        boolean isLongMin = false;
+        if (x == Long.MIN_VALUE) {
+            // special case for Long.MIN_VALUE (-9223372036854775808)
+            // we must shift it before taking its absolute value
+            isLongMin = true;
+            ++x;
+        }
+
+        // set the sign
+        if (x < 0) {
+            sign = -1;
+            x = -x;
+        } else {
+            sign = 1;
+        }
+
+        exp = 0;
+        while (x != 0) {
+            System.arraycopy(mant, mant.length - exp, mant, mant.length - 1 - exp, exp);
+            mant[mant.length - 1] = (int) (x % RADIX);
+            x /= RADIX;
+            exp++;
+        }
+
+        if (isLongMin) {
+            // remove the shift added for Long.MIN_VALUE
+            // we know in this case that fixing the last digit is sufficient
+            for (int i = 0; i < mant.length - 1; i++) {
+                if (mant[i] != 0) {
+                    mant[i]++;
+                    break;
+                }
+            }
+        }
+    }
+
+    /** Create an instance from a double value.
+     * @param field field to which this instance belongs
+     * @param x value to convert to an instance
+     */
+    protected Dfp(final DfpField field, double x) {
+
+        // initialize as if 0
+        mant = new int[field.getRadixDigits()];
+        sign = 1;
+        exp = 0;
+        nans = FINITE;
+        this.field = field;
+
+        long bits = Double.doubleToLongBits(x);
+        long mantissa = bits & 0x000fffffffffffffL;
+        int exponent = (int) ((bits & 0x7ff0000000000000L) >> 52) - 1023;
+
+        if (exponent == -1023) {
+            // Zero or sub-normal
+            if (x == 0) {
+                return;
+            }
+
+            exponent++;
+
+            // Normalize the subnormal number
+            while ( (mantissa & 0x0010000000000000L) == 0) {
+                exponent--;
+                mantissa <<= 1;
+            }
+            mantissa &= 0x000fffffffffffffL;
+        }
+
+        if (exponent == 1024) {
+            // infinity or NAN
+            if (x != x) {
+                sign = (byte) 1;
+                nans = QNAN;
+            } else if (x < 0) {
+                sign = (byte) -1;
+                nans = INFINITE;
+            } else {
+                sign = (byte) 1;
+                nans = INFINITE;
+            }
+            return;
+        }
+
+        Dfp xdfp = new Dfp(field, mantissa);
+        xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne());  // Divide by 2^52, then add one
+        xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent));
+
+        if ((bits & 0x8000000000000000L) != 0) {
+            xdfp = xdfp.negate();
+        }
+
+        System.arraycopy(xdfp.mant, 0, mant, 0, mant.length);
+        sign = xdfp.sign;
+        exp  = xdfp.exp;
+        nans = xdfp.nans;
+
+    }
+
+    /** Copy constructor.
+     * @param d instance to copy
+     */
+    public Dfp(final Dfp d) {
+        mant  = d.mant.clone();
+        sign  = d.sign;
+        exp   = d.exp;
+        nans  = d.nans;
+        field = d.field;
+    }
+
+    /** Create an instance from a String representation.
+     * @param field field to which this instance belongs
+     * @param s string representation of the instance
+     */
+    protected Dfp(final DfpField field, final String s) {
+
+        // initialize as if 0
+        mant = new int[field.getRadixDigits()];
+        sign = 1;
+        exp = 0;
+        nans = FINITE;
+        this.field = field;
+
+        boolean decimalFound = false;
+        final int rsize = 4;   // size of radix in decimal digits
+        final int offset = 4;  // Starting offset into Striped
+        final char[] striped = new char[getRadixDigits() * rsize + offset * 2];
+
+        // Check some special cases
+        if (s.equals(POS_INFINITY_STRING)) {
+            sign = (byte) 1;
+            nans = (byte) INFINITE;
+            return;
+        }
+
+        if (s.equals(NEG_INFINITY_STRING)) {
+            sign = (byte) -1;
+            nans = (byte) INFINITE;
+            return;
+        }
+
+        if (s.equals(NAN_STRING)) {
+            sign = (byte) 1;
+            nans = (byte) QNAN;
+            return;
+        }
+
+        // Check for scientific notation
+        int p = s.indexOf("e");
+        if (p == -1) { // try upper case?
+            p = s.indexOf("E");
+        }
+
+        final String fpdecimal;
+        int sciexp = 0;
+        if (p != -1) {
+            // scientific notation
+            fpdecimal = s.substring(0, p);
+            String fpexp = s.substring(p+1);
+            boolean negative = false;
+
+            for (int i=0; i<fpexp.length(); i++)
+            {
+                if (fpexp.charAt(i) == '-')
+                {
+                    negative = true;
+                    continue;
+                }
+                if (fpexp.charAt(i) >= '0' && fpexp.charAt(i) <= '9')
+                    sciexp = sciexp * 10 + fpexp.charAt(i) - '0';
+            }
+
+            if (negative) {
+                sciexp = -sciexp;
+            }
+        } else {
+            // normal case
+            fpdecimal = s;
+        }
+
+        // If there is a minus sign in the number then it is negative
+        if (fpdecimal.indexOf("-") !=  -1) {
+            sign = -1;
+        }
+
+        // First off, find all of the leading zeros, trailing zeros, and significant digits
+        p = 0;
+
+        // Move p to first significant digit
+        int decimalPos = 0;
+        for (;;) {
+            if (fpdecimal.charAt(p) >= '1' && fpdecimal.charAt(p) <= '9') {
+                break;
+            }
+
+            if (decimalFound && fpdecimal.charAt(p) == '0') {
+                decimalPos--;
+            }
+
+            if (fpdecimal.charAt(p) == '.') {
+                decimalFound = true;
+            }
+
+            p++;
+
+            if (p == fpdecimal.length()) {
+                break;
+            }
+        }
+
+        // Copy the string onto Stripped
+        int q = offset;
+        striped[0] = '0';
+        striped[1] = '0';
+        striped[2] = '0';
+        striped[3] = '0';
+        int significantDigits=0;
+        for(;;) {
+            if (p == (fpdecimal.length())) {
+                break;
+            }
+
+            // Don't want to run pass the end of the array
+            if (q == mant.length*rsize+offset+1) {
+                break;
+            }
+
+            if (fpdecimal.charAt(p) == '.') {
+                decimalFound = true;
+                decimalPos = significantDigits;
+                p++;
+                continue;
+            }
+
+            if (fpdecimal.charAt(p) < '0' || fpdecimal.charAt(p) > '9') {
+                p++;
+                continue;
+            }
+
+            striped[q] = fpdecimal.charAt(p);
+            q++;
+            p++;
+            significantDigits++;
+        }
+
+
+        // If the decimal point has been found then get rid of trailing zeros.
+        if (decimalFound && q != offset) {
+            for (;;) {
+                q--;
+                if (q == offset) {
+                    break;
+                }
+                if (striped[q] == '0') {
+                    significantDigits--;
+                } else {
+                    break;
+                }
+            }
+        }
+
+        // special case of numbers like "0.00000"
+        if (decimalFound && significantDigits == 0) {
+            decimalPos = 0;
+        }
+
+        // Implicit decimal point at end of number if not present
+        if (!decimalFound) {
+            decimalPos = q-offset;
+        }
+
+        // Find the number of significant trailing zeros
+        q = offset;  // set q to point to first sig digit
+        p = significantDigits-1+offset;
+
+        int trailingZeros = 0;
+        while (p > q) {
+            if (striped[p] != '0') {
+                break;
+            }
+            trailingZeros++;
+            p--;
+        }
+
+        // Make sure the decimal is on a mod 10000 boundary
+        int i = ((rsize * 100) - decimalPos - sciexp % rsize) % rsize;
+        q -= i;
+        decimalPos += i;
+
+        // Make the mantissa length right by adding zeros at the end if necessary
+        while ((p - q) < (mant.length * rsize)) {
+            for (i = 0; i < rsize; i++) {
+                striped[++p] = '0';
+            }
+        }
+
+        // Ok, now we know how many trailing zeros there are,
+        // and where the least significant digit is
+        for (i = mant.length - 1; i >= 0; i--) {
+            mant[i] = (striped[q]   - '0') * 1000 +
+                      (striped[q+1] - '0') * 100  +
+                      (striped[q+2] - '0') * 10   +
+                      (striped[q+3] - '0');
+            q += 4;
+        }
+
+
+        exp = (decimalPos+sciexp) / rsize;
+
+        if (q < striped.length) {
+            // Is there possible another digit?
+            round((striped[q] - '0')*1000);
+        }
+
+    }
+
+    /** Creates an instance with a non-finite value.
+     * @param field field to which this instance belongs
+     * @param sign sign of the Dfp to create
+     * @param nans code of the value, must be one of {@link #INFINITE},
+     * {@link #SNAN},  {@link #QNAN}
+     */
+    protected Dfp(final DfpField field, final byte sign, final byte nans) {
+        this.field = field;
+        this.mant    = new int[field.getRadixDigits()];
+        this.sign    = sign;
+        this.exp     = 0;
+        this.nans    = nans;
+    }
+
+    /** Create an instance with a value of 0.
+     * Use this internally in preference to constructors to facilitate subclasses
+     * @return a new instance with a value of 0
+     */
+    public Dfp newInstance() {
+        return new Dfp(getField());
+    }
+
+    /** Create an instance from a byte value.
+     * @param x value to convert to an instance
+     * @return a new instance with value x
+     */
+    public Dfp newInstance(final byte x) {
+        return new Dfp(getField(), x);
+    }
+
+    /** Create an instance from an int value.
+     * @param x value to convert to an instance
+     * @return a new instance with value x
+     */
+    public Dfp newInstance(final int x) {
+        return new Dfp(getField(), x);
+    }
+
+    /** Create an instance from a long value.
+     * @param x value to convert to an instance
+     * @return a new instance with value x
+     */
+    public Dfp newInstance(final long x) {
+        return new Dfp(getField(), x);
+    }
+
+    /** Create an instance from a double value.
+     * @param x value to convert to an instance
+     * @return a new instance with value x
+     */
+    public Dfp newInstance(final double x) {
+        return new Dfp(getField(), x);
+    }
+
+    /** Create an instance by copying an existing one.
+     * Use this internally in preference to constructors to facilitate subclasses.
+     * @param d instance to copy
+     * @return a new instance with the same value as d
+     */
+    public Dfp newInstance(final Dfp d) {
+
+        // make sure we don't mix number with different precision
+        if (field.getRadixDigits() != d.field.getRadixDigits()) {
+            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);
+            final Dfp result = newInstance(getZero());
+            result.nans = QNAN;
+            return dotrap(DfpField.FLAG_INVALID, NEW_INSTANCE_TRAP, d, result);
+        }
+
+        return new Dfp(d);
+
+    }
+
+    /** Create an instance from a String representation.
+     * Use this internally in preference to constructors to facilitate subclasses.
+     * @param s string representation of the instance
+     * @return a new instance parsed from specified string
+     */
+    public Dfp newInstance(final String s) {
+        return new Dfp(field, s);
+    }
+
+    /** Creates an instance with a non-finite value.
+     * @param sig sign of the Dfp to create
+     * @param code code of the value, must be one of {@link #INFINITE},
+     * {@link #SNAN},  {@link #QNAN}
+     * @return a new instance with a non-finite value
+     */
+    public Dfp newInstance(final byte sig, final byte code) {
+        return field.newDfp(sig, code);
+    }
+
+    /** Get the {@link org.apache.commons.math.Field Field} (really a {@link DfpField}) to which the instance belongs.
+     * <p>
+     * The field is linked to the number of digits and acts as a factory
+     * for {@link Dfp} instances.
+     * </p>
+     * @return {@link org.apache.commons.math.Field Field} (really a {@link DfpField}) to which the instance belongs
+     */
+    public DfpField getField() {
+        return field;
+    }
+
+    /** Get the number of radix digits of the instance.
+     * @return number of radix digits
+     */
+    public int getRadixDigits() {
+        return field.getRadixDigits();
+    }
+
+    /** Get the constant 0.
+     * @return a Dfp with value zero
+     */
+    public Dfp getZero() {
+        return field.getZero();
+    }
+
+    /** Get the constant 1.
+     * @return a Dfp with value one
+     */
+    public Dfp getOne() {
+        return field.getOne();
+    }
+
+    /** Get the constant 2.
+     * @return a Dfp with value two
+     */
+    public Dfp getTwo() {
+        return field.getTwo();
+    }
+
+    /** Shift the mantissa left, and adjust the exponent to compensate.
+     */
+    protected void shiftLeft() {
+        for (int i = mant.length - 1; i > 0; i--) {
+            mant[i] = mant[i-1];
+        }
+        mant[0] = 0;
+        exp--;
+    }
+
+    /* Note that shiftRight() does not call round() as that round() itself
+     uses shiftRight() */
+    /** Shift the mantissa right, and adjust the exponent to compensate.
+     */
+    protected void shiftRight() {
+        for (int i = 0; i < mant.length - 1; i++) {
+            mant[i] = mant[i+1];
+        }
+        mant[mant.length - 1] = 0;
+        exp++;
+    }
+
+    /** Make our exp equal to the supplied one, this may cause rounding.
+     *  Also causes de-normalized numbers.  These numbers are generally
+     *  dangerous because most routines assume normalized numbers.
+     *  Align doesn't round, so it will return the last digit destroyed
+     *  by shifting right.
+     *  @param e desired exponent
+     *  @return last digit destroyed by shifting right
+     */
+    protected int align(int e) {
+        int lostdigit = 0;
+        boolean inexact = false;
+
+        int diff = exp - e;
+
+        int adiff = diff;
+        if (adiff < 0) {
+            adiff = -adiff;
+        }
+
+        if (diff == 0) {
+            return 0;
+        }
+
+        if (adiff > (mant.length + 1)) {
+            // Special case
+            Arrays.fill(mant, 0);
+            exp = e;
+
+            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);
+            dotrap(DfpField.FLAG_INEXACT, ALIGN_TRAP, this, this);
+
+            return 0;
+        }
+
+        for (int i = 0; i < adiff; i++) {
+            if (diff < 0) {
+                /* Keep track of loss -- only signal inexact after losing 2 digits.
+                 * the first lost digit is returned to add() and may be incorporated
+                 * into the result.
+                 */
+                if (lostdigit != 0) {
+                    inexact = true;
+                }
+
+                lostdigit = mant[0];
+
+                shiftRight();
+            } else {
+                shiftLeft();
+            }
+        }
+
+        if (inexact) {
+            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);
+            dotrap(DfpField.FLAG_INEXACT, ALIGN_TRAP, this, this);
+        }
+
+        return lostdigit;
+
+    }
+
+    /** Check if instance is less than x.
+     * @param x number to check instance against
+     * @return true if instance is less than x and neither are NaN, false otherwise
+     */
+    public boolean lessThan(final Dfp x) {
+
+        // make sure we don't mix number with different precision
+        if (field.getRadixDigits() != x.field.getRadixDigits()) {
+            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);
+            final Dfp result = newInstance(getZero());
+            result.nans = QNAN;
+            dotrap(DfpField.FLAG_INVALID, LESS_THAN_TRAP, x, result);
+            return false;
+        }
+
+        /* if a nan is involved, signal invalid and return false */
+        if (isNaN() || x.isNaN()) {
+            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);
+            dotrap(DfpField.FLAG_INVALID, LESS_THAN_TRAP, x, newInstance(getZero()));
+            return false;
+        }
+
+        return compare(this, x) < 0;
+    }
+
+    /** Check if instance is greater than x.
+     * @param x number to check instance against
+     * @return true if instance is greater than x and neither are NaN, false otherwise
+     */
+    public boolean greaterThan(final Dfp x) {
+
+        // make sure we don't mix number with different precision
+        if (field.getRadixDigits() != x.field.getRadixDigits()) {
+            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);
+            final Dfp result = newInstance(getZero());
+            result.nans = QNAN;
+            dotrap(DfpField.FLAG_INVALID, GREATER_THAN_TRAP, x, result);
+            return false;
+        }
+
+        /* if a nan is involved, signal invalid and return false */
+        if (isNaN() || x.isNaN()) {
+            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);
+            dotrap(DfpField.FLAG_INVALID, GREATER_THAN_TRAP, x, newInstance(getZero()));
+            return false;
+        }
+
+        return compare(this, x) > 0;
+    }
+
+    /** Check if instance is infinite.
+     * @return true if instance is infinite
+     */
+    public boolean isInfinite() {
+        return nans == INFINITE;
+    }
+
+    /** Check if instance is not a number.
+     * @return true if instance is not a number
+     */
+    public boolean isNaN() {
+        return (nans == QNAN) || (nans == SNAN);
+    }
+
+    /** Check if instance is equal to x.
+     * @param other object to check instance against
+     * @return true if instance is equal to x and neither are NaN, false otherwise
+     */
+    @Override
+    public boolean equals(final Object other) {
+
+        if (other instanceof Dfp) {
+            final Dfp x = (Dfp) other;
+            if (isNaN() || x.isNaN() || field.getRadixDigits() != x.field.getRadixDigits()) {
+                return false;
+            }
+
+            return compare(this, x) == 0;
+        }
+
+        return false;
+
+    }
+
+    /**
+     * Gets a hashCode for the instance.
+     * @return a hash code value for this object
+     */
+    @Override
+    public int hashCode() {
+        return 17 + (sign << 8) + (nans << 16) + exp + mant.hashCode();
+    }
+
+    /** Check if instance is not equal to x.
+     * @param x number to check instance against
+     * @return true if instance is not equal to x and neither are NaN, false otherwise
+     */
+    public boolean unequal(final Dfp x) {
+        if (isNaN() || x.isNaN() || field.getRadixDigits() != x.field.getRadixDigits()) {
+            return false;
+        }
+
+        return greaterThan(x) || lessThan(x);
+    }
+
+    /** Compare two instances.
+     * @param a first instance in comparison
+     * @param b second instance in comparison
+     * @return -1 if a<b, 1 if a>b and 0 if a==b
+     *  Note this method does not properly handle NaNs or numbers with different precision.
+     */
+    private static int compare(final Dfp a, final Dfp b) {
+        // Ignore the sign of zero
+        if (a.mant[a.mant.length - 1] == 0 && b.mant[b.mant.length - 1] == 0 &&
+            a.nans == FINITE && b.nans == FINITE) {
+            return 0;
+        }
+
+        if (a.sign != b.sign) {
+            if (a.sign == -1) {
+                return -1;
+            } else {
+                return 1;
+            }
+        }
+
+        // deal with the infinities
+        if (a.nans == INFINITE && b.nans == FINITE) {
+            return a.sign;
+        }
+
+        if (a.nans == FINITE && b.nans == INFINITE) {
+            return -b.sign;
+        }
+
+        if (a.nans == INFINITE && b.nans == INFINITE) {
+            return 0;
+        }
+
+        // Handle special case when a or b is zero, by ignoring the exponents
+        if (b.mant[b.mant.length-1] != 0 && a.mant[b.mant.length-1] != 0) {
+            if (a.exp < b.exp) {
+                return -a.sign;
+            }
+
+            if (a.exp > b.exp) {
+                return a.sign;
+            }
+        }
+
+        // compare the mantissas
+        for (int i = a.mant.length - 1; i >= 0; i--) {
+            if (a.mant[i] > b.mant[i]) {
+                return a.sign;
+            }
+
+            if (a.mant[i] < b.mant[i]) {
+                return -a.sign;
+            }
+        }
+
+        return 0;
+
+    }
+
+    /** Round to nearest integer using the round-half-even method.
+     *  That is round to nearest integer unless both are equidistant.
+     *  In which case round to the even one.
+     *  @return rounded value
+     */
+    public Dfp rint() {
+        return trunc(DfpField.RoundingMode.ROUND_HALF_EVEN);
+    }
+
+    /** Round to an integer using the round floor mode.
+     * That is, round toward -Infinity
+     *  @return rounded value
+     */
+    public Dfp floor() {
+        return trunc(DfpField.RoundingMode.ROUND_FLOOR);
+    }
+
+    /** Round to an integer using the round ceil mode.
+     * That is, round toward +Infinity
+     *  @return rounded value
+     */
+    public Dfp ceil() {
+        return trunc(DfpField.RoundingMode.ROUND_CEIL);
+    }
+
+    /** Returns the IEEE remainder.
+     * @param d divisor
+     * @return this less n &times; d, where n is the integer closest to this/d
+     */
+    public Dfp remainder(final Dfp d) {
+
+        final Dfp result = this.subtract(this.divide(d).rint().multiply(d));
+
+        // IEEE 854-1987 says that if the result is zero, then it carries the sign of this
+        if (result.mant[mant.length-1] == 0) {
+            result.sign = sign;
+        }
+
+        return result;
+
+    }
+
+    /** Does the integer conversions with the specified rounding.
+     * @param rmode rounding mode to use
+     * @return truncated value
+     */
+    protected Dfp trunc(final DfpField.RoundingMode rmode) {
+        boolean changed = false;
+
+        if (isNaN()) {
+            return newInstance(this);
+        }
+
+        if (nans == INFINITE) {
+            return newInstance(this);
+        }
+
+        if (mant[mant.length-1] == 0) {
+            // a is zero
+            return newInstance(this);
+        }
+
+        /* If the exponent is less than zero then we can certainly
+         * return zero */
+        if (exp < 0) {
+            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);
+            Dfp result = newInstance(getZero());
+            result = dotrap(DfpField.FLAG_INEXACT, TRUNC_TRAP, this, result);
+            return result;
+        }
+
+        /* If the exponent is greater than or equal to digits, then it
+         * must already be an integer since there is no precision left
+         * for any fractional part */
+
+        if (exp >= mant.length) {
+            return newInstance(this);
+        }
+
+        /* General case:  create another dfp, result, that contains the
+         * a with the fractional part lopped off.  */
+
+        Dfp result = newInstance(this);
+        for (int i = 0; i < mant.length-result.exp; i++) {
+            changed |= result.mant[i] != 0;
+            result.mant[i] = 0;
+        }
+
+        if (changed) {
+            switch (rmode) {
+                case ROUND_FLOOR:
+                    if (result.sign == -1) {
+                        // then we must increment the mantissa by one
+                        result = result.add(newInstance(-1));
+                    }
+                    break;
+
+                case ROUND_CEIL:
+                    if (result.sign == 1) {
+                        // then we must increment the mantissa by one
+                        result = result.add(getOne());
+                    }
+                    break;
+
+                case ROUND_HALF_EVEN:
+                default:
+                    final Dfp half = newInstance("0.5");
+                    Dfp a = subtract(result);  // difference between this and result
+                    a.sign = 1;            // force positive (take abs)
+                    if (a.greaterThan(half)) {
+                        a = newInstance(getOne());
+                        a.sign = sign;
+                        result = result.add(a);
+                    }
+
+                    /** If exactly equal to 1/2 and odd then increment */
+                    if (a.equals(half) && result.exp > 0 && (result.mant[mant.length-result.exp]&1) != 0) {
+                        a = newInstance(getOne());
+                        a.sign = sign;
+                        result = result.add(a);
+                    }
+                    break;
+            }
+
+            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);  // signal inexact
+            result = dotrap(DfpField.FLAG_INEXACT, TRUNC_TRAP, this, result);
+            return result;
+        }
+
+        return result;
+    }
+
+    /** Convert this to an integer.
+     * If greater than 2147483647, it returns 2147483647. If less than -2147483648 it returns -2147483648.
+     * @return converted number
+     */
+    public int intValue() {
+        Dfp rounded;
+        int result = 0;
+
+        rounded = rint();
+
+        if (rounded.greaterThan(newInstance(2147483647))) {
+            return 2147483647;
+        }
+
+        if (rounded.lessThan(newInstance(-2147483648))) {
+            return -2147483648;
+        }
+
+        for (int i = mant.length - 1; i >= mant.length - rounded.exp; i--) {
+            result = result * RADIX + rounded.mant[i];
+        }
+
+        if (rounded.sign == -1) {
+            result = -result;
+        }
+
+        return result;
+    }
+
+    /** Get the exponent of the greatest power of 10000 that is
+     *  less than or equal to the absolute value of this.  I.E.  if
+     *  this is 10<sup>6</sup> then log10K would return 1.
+     *  @return integer base 10000 logarithm
+     */
+    public int log10K() {
+        return exp - 1;
+    }
+
+    /** Get the specified  power of 10000.
+     * @param e desired power
+     * @return 10000<sup>e</sup>
+     */
+    public Dfp power10K(final int e) {
+        Dfp d = newInstance(getOne());
+        d.exp = e + 1;
+        return d;
+    }
+
+    /** Get the exponent of the greatest power of 10 that is less than or equal to abs(this).
+     *  @return integer base 10 logarithm
+     */
+    public int log10()  {
+        if (mant[mant.length-1] > 1000) {
+            return exp * 4 - 1;
+        }
+        if (mant[mant.length-1] > 100) {
+            return exp * 4 - 2;
+        }
+        if (mant[mant.length-1] > 10) {
+            return exp * 4 - 3;
+        }
+        return exp * 4 - 4;
+    }
+
+    /** Return the specified  power of 10.
+     * @param e desired power
+     * @return 10<sup>e</sup>
+     */
+    public Dfp power10(final int e) {
+        Dfp d = newInstance(getOne());
+
+        if (e >= 0) {
+            d.exp = e / 4 + 1;
+        } else {
+            d.exp = (e + 1) / 4;
+        }
+
+        switch ((e % 4 + 4) % 4) {
+            case 0:
+                break;
+            case 1:
+                d = d.multiply(10);
+                break;
+            case 2:
+                d = d.multiply(100);
+                break;
+            default:
+                d = d.multiply(1000);
+        }
+
+        return d;
+    }
+
+    /** Negate the mantissa of this by computing the complement.
+     *  Leaves the sign bit unchanged, used internally by add.
+     *  Denormalized numbers are handled properly here.
+     *  @param extra ???
+     *  @return ???
+     */
+    protected int complement(int extra) {
+
+        extra = RADIX-extra;
+        for (int i = 0; i < mant.length; i++) {
+            mant[i] = RADIX-mant[i]-1;
+        }
+
+        int rh = extra / RADIX;
+        extra = extra - rh * RADIX;
+        for (int i = 0; i < mant.length; i++) {
+            final int r = mant[i] + rh;
+            rh = r / RADIX;
+            mant[i] = r - rh * RADIX;
+        }
+
+        return extra;
+    }
+
+    /** Add x to this.
+     * @param x number to add
+     * @return sum of this and x
+     */
+    public Dfp add(final Dfp x) {
+
+        // make sure we don't mix number with different precision
+        if (field.getRadixDigits() != x.field.getRadixDigits()) {
+            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);
+            final Dfp result = newInstance(getZero());
+            result.nans = QNAN;
+            return dotrap(DfpField.FLAG_INVALID, ADD_TRAP, x, result);
+        }
+
+        /* handle special cases */
+        if (nans != FINITE || x.nans != FINITE) {
+            if (isNaN()) {
+                return this;
+            }
+
+            if (x.isNaN()) {
+                return x;
+            }
+
+            if (nans == INFINITE && x.nans == FINITE) {
+                return this;
+            }
+
+            if (x.nans == INFINITE && nans == FINITE) {
+                return x;
+            }
+
+            if (x.nans == INFINITE && nans == INFINITE && sign == x.sign) {
+                return x;
+            }
+
+            if (x.nans == INFINITE && nans == INFINITE && sign != x.sign) {
+                field.setIEEEFlagsBits(DfpField.FLAG_INVALID);
+                Dfp result = newInstance(getZero());
+                result.nans = QNAN;
+                result = dotrap(DfpField.FLAG_INVALID, ADD_TRAP, x, result);
+                return result;
+            }
+        }
+
+        /* copy this and the arg */
+        Dfp a = newInstance(this);
+        Dfp b = newInstance(x);
+
+        /* initialize the result object */
+        Dfp result = newInstance(getZero());
+
+        /* Make all numbers positive, but remember their sign */
+        final byte asign = a.sign;
+        final byte bsign = b.sign;
+
+        a.sign = 1;
+        b.sign = 1;
+
+        /* The result will be signed like the arg with greatest magnitude */
+        byte rsign = bsign;
+        if (compare(a, b) > 0) {
+            rsign = asign;
+        }
+
+        /* Handle special case when a or b is zero, by setting the exponent
+       of the zero number equal to the other one.  This avoids an alignment
+       which would cause catastropic loss of precision */
+        if (b.mant[mant.length-1] == 0) {
+            b.exp = a.exp;
+        }
+
+        if (a.mant[mant.length-1] == 0) {
+            a.exp = b.exp;
+        }
+
+        /* align number with the smaller exponent */
+        int aextradigit = 0;
+        int bextradigit = 0;
+        if (a.exp < b.exp) {
+            aextradigit = a.align(b.exp);
+        } else {
+            bextradigit = b.align(a.exp);
+        }
+
+        /* complement the smaller of the two if the signs are different */
+        if (asign != bsign) {
+            if (asign == rsign) {
+                bextradigit = b.complement(bextradigit);
+            } else {
+                aextradigit = a.complement(aextradigit);
+            }
+        }
+
+        /* add the mantissas */
+        int rh = 0; /* acts as a carry */
+        for (int i = 0; i < mant.length; i++) {
+            final int r = a.mant[i]+b.mant[i]+rh;
+            rh = r / RADIX;
+            result.mant[i] = r - rh * RADIX;
+        }
+        result.exp = a.exp;
+        result.sign = rsign;
+
+        /* handle overflow -- note, when asign!=bsign an overflow is
+         * normal and should be ignored.  */
+
+        if (rh != 0 && (asign == bsign)) {
+            final int lostdigit = result.mant[0];
+            result.shiftRight();
+            result.mant[mant.length-1] = rh;
+            final int excp = result.round(lostdigit);
+            if (excp != 0) {
+                result = dotrap(excp, ADD_TRAP, x, result);
+            }
+        }
+
+        /* normalize the result */
+        for (int i = 0; i < mant.length; i++) {
+            if (result.mant[mant.length-1] != 0) {
+                break;
+            }
+            result.shiftLeft();
+            if (i == 0) {
+                result.mant[0] = aextradigit+bextradigit;
+                aextradigit = 0;
+                bextradigit = 0;
+            }
+        }
+
+        /* result is zero if after normalization the most sig. digit is zero */
+        if (result.mant[mant.length-1] == 0) {
+            result.exp = 0;
+
+            if (asign != bsign) {
+                // Unless adding 2 negative zeros, sign is positive
+                result.sign = 1;  // Per IEEE 854-1987 Section 6.3
+            }
+        }
+
+        /* Call round to test for over/under flows */
+        final int excp = result.round(aextradigit + bextradigit);
+        if (excp != 0) {
+            result = dotrap(excp, ADD_TRAP, x, result);
+        }
+
+        return result;
+    }
+
+    /** Returns a number that is this number with the sign bit reversed.
+     * @return the opposite of this
+     */
+    public Dfp negate() {
+        Dfp result = newInstance(this);
+        result.sign = (byte) - result.sign;
+        return result;
+    }
+
+    /** Subtract x from this.
+     * @param x number to subtract
+     * @return difference of this and a
+     */
+    public Dfp subtract(final Dfp x) {
+        return add(x.negate());
+    }
+
+    /** Round this given the next digit n using the current rounding mode.
+     * @param n ???
+     * @return the IEEE flag if an exception occurred
+     */
+    protected int round(int n) {
+        boolean inc = false;
+        switch (field.getRoundingMode()) {
+            case ROUND_DOWN:
+                inc = false;
+                break;
+
+            case ROUND_UP:
+                inc = n != 0;       // round up if n!=0
+                break;
+
+            case ROUND_HALF_UP:
+                inc = n >= 5000;  // round half up
+                break;
+
+            case ROUND_HALF_DOWN:
+                inc = n > 5000;  // round half down
+                break;
+
+            case ROUND_HALF_EVEN:
+                inc = n > 5000 || (n == 5000 && (mant[0] & 1) == 1);  // round half-even
+                break;
+
+            case ROUND_HALF_ODD:
+                inc = n > 5000 || (n == 5000 && (mant[0] & 1) == 0);  // round half-odd
+                break;
+
+            case ROUND_CEIL:
+                inc = sign == 1 && n != 0;  // round ceil
+                break;
+
+            case ROUND_FLOOR:
+            default:
+                inc = sign == -1 && n != 0;  // round floor
+                break;
+        }
+
+        if (inc) {
+            // increment if necessary
+            int rh = 1;
+            for (int i = 0; i < mant.length; i++) {
+                final int r = mant[i] + rh;
+                rh = r / RADIX;
+                mant[i] = r - rh * RADIX;
+            }
+
+            if (rh != 0) {
+                shiftRight();
+                mant[mant.length-1] = rh;
+            }
+        }
+
+        // check for exceptional cases and raise signals if necessary
+        if (exp < MIN_EXP) {
+            // Gradual Underflow
+            field.setIEEEFlagsBits(DfpField.FLAG_UNDERFLOW);
+            return DfpField.FLAG_UNDERFLOW;
+        }
+
+        if (exp > MAX_EXP) {
+            // Overflow
+            field.setIEEEFlagsBits(DfpField.FLAG_OVERFLOW);
+            return DfpField.FLAG_OVERFLOW;
+        }
+
+        if (n != 0) {
+            // Inexact
+            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);
+            return DfpField.FLAG_INEXACT;
+        }
+
+        return 0;
+
+    }
+
+    /** Multiply this by x.
+     * @param x multiplicand
+     * @return product of this and x
+     */
+    public Dfp multiply(final Dfp x) {
+
+        // make sure we don't mix number with different precision
+        if (field.getRadixDigits() != x.field.getRadixDigits()) {
+            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);
+            final Dfp result = newInstance(getZero());
+            result.nans = QNAN;
+            return dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, x, result);
+        }
+
+        Dfp result = newInstance(getZero());
+
+        /* handle special cases */
+        if (nans != FINITE || x.nans != FINITE) {
+            if (isNaN()) {
+                return this;
+            }
+
+            if (x.isNaN()) {
+                return x;
+            }
+
+            if (nans == INFINITE && x.nans == FINITE && x.mant[mant.length-1] != 0) {
+                result = newInstance(this);
+                result.sign = (byte) (sign * x.sign);
+                return result;
+            }
+
+            if (x.nans == INFINITE && nans == FINITE && mant[mant.length-1] != 0) {
+                result = newInstance(x);
+                result.sign = (byte) (sign * x.sign);
+                return result;
+            }
+
+            if (x.nans == INFINITE && nans == INFINITE) {
+                result = newInstance(this);
+                result.sign = (byte) (sign * x.sign);
+                return result;
+            }
+
+            if ( (x.nans == INFINITE && nans == FINITE && mant[mant.length-1] == 0) ||
+                    (nans == INFINITE && x.nans == FINITE && x.mant[mant.length-1] == 0) ) {
+                field.setIEEEFlagsBits(DfpField.FLAG_INVALID);
+                result = newInstance(getZero());
+                result.nans = QNAN;
+                result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, x, result);
+                return result;
+            }
+        }
+
+        int[] product = new int[mant.length*2];  // Big enough to hold even the largest result
+
+        for (int i = 0; i < mant.length; i++) {
+            int rh = 0;  // acts as a carry
+            for (int j=0; j<mant.length; j++) {
+                int r = mant[i] * x.mant[j];    // multiply the 2 digits
+                r = r + product[i+j] + rh;  // add to the product digit with carry in
+
+                rh = r / RADIX;
+                product[i+j] = r - rh * RADIX;
+            }
+            product[i+mant.length] = rh;
+        }
+
+        // Find the most sig digit
+        int md = mant.length * 2 - 1;  // default, in case result is zero
+        for (int i = mant.length * 2 - 1; i >= 0; i--) {
+            if (product[i] != 0) {
+                md = i;
+                break;
+            }
+        }
+
+        // Copy the digits into the result
+        for (int i = 0; i < mant.length; i++) {
+            result.mant[mant.length - i - 1] = product[md - i];
+        }
+
+        // Fixup the exponent.
+        result.exp = exp + x.exp + md - 2 * mant.length + 1;
+        result.sign = (byte)((sign == x.sign)?1:-1);
+
+        if (result.mant[mant.length-1] == 0) {
+            // if result is zero, set exp to zero
+            result.exp = 0;
+        }
+
+        final int excp;
+        if (md > (mant.length-1)) {
+            excp = result.round(product[md-mant.length]);
+        } else {
+            excp = result.round(0); // has no effect except to check status
+        }
+
+        if (excp != 0) {
+            result = dotrap(excp, MULTIPLY_TRAP, x, result);
+        }
+
+        return result;
+
+    }
+
+    /** Multiply this by a single digit 0&lt;=x&lt;radix.
+     * There are speed advantages in this special case
+     * @param x multiplicand
+     * @return product of this and x
+     */
+    public Dfp multiply(final int x) {
+        Dfp result = newInstance(this);
+
+        /* handle special cases */
+        if (nans != FINITE) {
+            if (isNaN()) {
+                return this;
+            }
+
+            if (nans == INFINITE && x != 0) {
+                result = newInstance(this);
+                return result;
+            }
+
+            if (nans == INFINITE && x == 0) {
+                field.setIEEEFlagsBits(DfpField.FLAG_INVALID);
+                result = newInstance(getZero());
+                result.nans = QNAN;
+                result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, newInstance(getZero()), result);
+                return result;
+            }
+        }
+
+        /* range check x */
+        if (x < 0 || x >= RADIX) {
+            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);
+            result = newInstance(getZero());
+            result.nans = QNAN;
+            result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, result, result);
+            return result;
+        }
+
+        int rh = 0;
+        for (int i = 0; i < mant.length; i++) {
+            final int r = mant[i] * x + rh;
+            rh = r / RADIX;
+            result.mant[i] = r - rh * RADIX;
+        }
+
+        int lostdigit = 0;
+        if (rh != 0) {
+            lostdigit = result.mant[0];
+            result.shiftRight();
+            result.mant[mant.length-1] = rh;
+        }
+
+        if (result.mant[mant.length-1] == 0) { // if result is zero, set exp to zero
+            result.exp = 0;
+        }
+
+        final int excp = result.round(lostdigit);
+        if (excp != 0) {
+            result = dotrap(excp, MULTIPLY_TRAP, result, result);
+        }
+
+        return result;
+    }
+
+    /** Divide this by divisor.
+     * @param divisor divisor
+     * @return quotient of this by divisor
+     */
+    public Dfp divide(Dfp divisor) {
+        int dividend[]; // current status of the dividend
+        int quotient[]; // quotient
+        int remainder[];// remainder
+        int qd;         // current quotient digit we're working with
+        int nsqd;       // number of significant quotient digits we have
+        int trial=0;    // trial quotient digit
+        int minadj;     // minimum adjustment
+        boolean trialgood; // Flag to indicate a good trail digit
+        int md=0;       // most sig digit in result
+        int excp;       // exceptions
+
+        // make sure we don't mix number with different precision
+        if (field.getRadixDigits() != divisor.field.getRadixDigits()) {
+            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);
+            final Dfp result = newInstance(getZero());
+            result.nans = QNAN;
+            return dotrap(DfpField.FLAG_INVALID, DIVIDE_TRAP, divisor, result);
+        }
+
+        Dfp result = newInstance(getZero());
+
+        /* handle special cases */
+        if (nans != FINITE || divisor.nans != FINITE) {
+            if (isNaN()) {
+                return this;
+            }
+
+            if (divisor.isNaN()) {
+                return divisor;
+            }
+
+            if (nans == INFINITE && divisor.nans == FINITE) {
+                result = newInstance(this);
+                result.sign = (byte) (sign * divisor.sign);
+                return result;
+            }
+
+            if (divisor.nans == INFINITE && nans == FINITE) {
+                result = newInstance(getZero());
+                result.sign = (byte) (sign * divisor.sign);
+                return result;
+            }
+
+            if (divisor.nans == INFINITE && nans == INFINITE) {
+                field.setIEEEFlagsBits(DfpField.FLAG_INVALID);
+                result = newInstance(getZero());
+                result.nans = QNAN;
+                result = dotrap(DfpField.FLAG_INVALID, DIVIDE_TRAP, divisor, result);
+                return result;
+            }
+        }
+
+        /* Test for divide by zero */
+        if (divisor.mant[mant.length-1] == 0) {
+            field.setIEEEFlagsBits(DfpField.FLAG_DIV_ZERO);
+            result = newInstance(getZero());
+            result.sign = (byte) (sign * divisor.sign);
+            result.nans = INFINITE;
+            result = dotrap(DfpField.FLAG_DIV_ZERO, DIVIDE_TRAP, divisor, result);
+            return result;
+        }
+
+        dividend = new int[mant.length+1];  // one extra digit needed
+        quotient = new int[mant.length+2];  // two extra digits needed 1 for overflow, 1 for rounding
+        remainder = new int[mant.length+1]; // one extra digit needed
+
+        /* Initialize our most significant digits to zero */
+
+        dividend[mant.length] = 0;
+        quotient[mant.length] = 0;
+        quotient[mant.length+1] = 0;
+        remainder[mant.length] = 0;
+
+        /* copy our mantissa into the dividend, initialize the
+       quotient while we are at it */
+
+        for (int i = 0; i < mant.length; i++) {
+            dividend[i] = mant[i];
+            quotient[i] = 0;
+            remainder[i] = 0;
+        }
+
+        /* outer loop.  Once per quotient digit */
+        nsqd = 0;
+        for (qd = mant.length+1; qd >= 0; qd--) {
+            /* Determine outer limits of our quotient digit */
+
+            // r =  most sig 2 digits of dividend
+            final int divMsb = dividend[mant.length]*RADIX+dividend[mant.length-1];
+            int min = divMsb       / (divisor.mant[mant.length-1]+1);
+            int max = (divMsb + 1) / divisor.mant[mant.length-1];
+
+            trialgood = false;
+            while (!trialgood) {
+                // try the mean
+                trial = (min+max)/2;
+
+                /* Multiply by divisor and store as remainder */
+                int rh = 0;
+                for (int i = 0; i < mant.length + 1; i++) {
+                    int dm = (i<mant.length)?divisor.mant[i]:0;
+                    final int r = (dm * trial) + rh;
+                    rh = r / RADIX;
+                    remainder[i] = r - rh * RADIX;
+                }
+
+                /* subtract the remainder from the dividend */
+                rh = 1;  // carry in to aid the subtraction
+                for (int i = 0; i < mant.length + 1; i++) {
+                    final int r = ((RADIX-1) - remainder[i]) + dividend[i] + rh;
+                    rh = r / RADIX;
+                    remainder[i] = r - rh * RADIX;
+                }
+
+                /* Lets analyze what we have here */
+                if (rh == 0) {
+                    // trial is too big -- negative remainder
+                    max = trial-1;
+                    continue;
+                }
+
+                /* find out how far off the remainder is telling us we are */
+                minadj = (remainder[mant.length] * RADIX)+remainder[mant.length-1];
+                minadj = minadj / (divisor.mant[mant.length-1]+1);
+
+                if (minadj >= 2) {
+                    min = trial+minadj;  // update the minimum
+                    continue;
+                }
+
+                /* May have a good one here, check more thoroughly.  Basically
+           its a good one if it is less than the divisor */
+                trialgood = false;  // assume false
+                for (int i = mant.length - 1; i >= 0; i--) {
+                    if (divisor.mant[i] > remainder[i]) {
+                        trialgood = true;
+                    }
+                    if (divisor.mant[i] < remainder[i]) {
+                        break;
+                    }
+                }
+
+                if (remainder[mant.length] != 0) {
+                    trialgood = false;
+                }
+
+                if (trialgood == false) {
+                    min = trial+1;
+                }
+            }
+
+            /* Great we have a digit! */
+            quotient[qd] = trial;
+            if (trial != 0 || nsqd != 0) {
+                nsqd++;
+            }
+
+            if (field.getRoundingMode() == DfpField.RoundingMode.ROUND_DOWN && nsqd == mant.length) {
+                // We have enough for this mode
+                break;
+            }
+
+            if (nsqd > mant.length) {
+                // We have enough digits
+                break;
+            }
+
+            /* move the remainder into the dividend while left shifting */
+            dividend[0] = 0;
+            for (int i = 0; i < mant.length; i++) {
+                dividend[i + 1] = remainder[i];
+            }
+        }
+
+        /* Find the most sig digit */
+        md = mant.length;  // default
+        for (int i = mant.length + 1; i >= 0; i--) {
+            if (quotient[i] != 0) {
+                md = i;
+                break;
+            }
+        }
+
+        /* Copy the digits into the result */
+        for (int i=0; i<mant.length; i++) {
+            result.mant[mant.length-i-1] = quotient[md-i];
+        }
+
+        /* Fixup the exponent. */
+        result.exp = exp - divisor.exp + md - mant.length;
+        result.sign = (byte) ((sign == divisor.sign) ? 1 : -1);
+
+        if (result.mant[mant.length-1] == 0) { // if result is zero, set exp to zero
+            result.exp = 0;
+        }
+
+        if (md > (mant.length-1)) {
+            excp = result.round(quotient[md-mant.length]);
+        } else {
+            excp = result.round(0);
+        }
+
+        if (excp != 0) {
+            result = dotrap(excp, DIVIDE_TRAP, divisor, result);
+        }
+
+        return result;
+    }
+
+    /** Divide by a single digit less than radix.
+     *  Special case, so there are speed advantages. 0 &lt;= divisor &lt; radix
+     * @param divisor divisor
+     * @return quotient of this by divisor
+     */
+    public Dfp divide(int divisor) {
+
+        // Handle special cases
+        if (nans != FINITE) {
+            if (isNaN()) {
+                return this;
+            }
+
+            if (nans == INFINITE) {
+                return newInstance(this);
+            }
+        }
+
+        // Test for divide by zero
+        if (divisor == 0) {
+            field.setIEEEFlagsBits(DfpField.FLAG_DIV_ZERO);
+            Dfp result = newInstance(getZero());
+            result.sign = sign;
+            result.nans = INFINITE;
+            result = dotrap(DfpField.FLAG_DIV_ZERO, DIVIDE_TRAP, getZero(), result);
+            return result;
+        }
+
+        // range check divisor
+        if (divisor < 0 || divisor >= RADIX) {
+            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);
+            Dfp result = newInstance(getZero());
+            result.nans = QNAN;
+            result = dotrap(DfpField.FLAG_INVALID, DIVIDE_TRAP, result, result);
+            return result;
+        }
+
+        Dfp result = newInstance(this);
+
+        int rl = 0;
+        for (int i = mant.length-1; i >= 0; i--) {
+            final int r = rl*RADIX + result.mant[i];
+            final int rh = r / divisor;
+            rl = r - rh * divisor;
+            result.mant[i] = rh;
+        }
+
+        if (result.mant[mant.length-1] == 0) {
+            // normalize
+            result.shiftLeft();
+            final int r = rl * RADIX;        // compute the next digit and put it in
+            final int rh = r / divisor;
+            rl = r - rh * divisor;
+            result.mant[0] = rh;
+        }
+
+        final int excp = result.round(rl * RADIX / divisor);  // do the rounding
+        if (excp != 0) {
+            result = dotrap(excp, DIVIDE_TRAP, result, result);
+        }
+
+        return result;
+
+    }
+
+    /** Compute the square root.
+     * @return square root of the instance
+     */
+    public Dfp sqrt() {
+
+        // check for unusual cases
+        if (nans == FINITE && mant[mant.length-1] == 0) {
+            // if zero
+            return newInstance(this);
+        }
+
+        if (nans != FINITE) {
+            if (nans == INFINITE && sign == 1) {
+                // if positive infinity
+                return newInstance(this);
+            }
+
+            if (nans == QNAN) {
+                return newInstance(this);
+            }
+
+            if (nans == SNAN) {
+                Dfp result;
+
+                field.setIEEEFlagsBits(DfpField.FLAG_INVALID);
+                result = newInstance(this);
+                result = dotrap(DfpField.FLAG_INVALID, SQRT_TRAP, null, result);
+                return result;
+            }
+        }
+
+        if (sign == -1) {
+            // if negative
+            Dfp result;
+
+            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);
+            result = newInstance(this);
+            result.nans = QNAN;
+            result = dotrap(DfpField.FLAG_INVALID, SQRT_TRAP, null, result);
+            return result;
+        }
+
+        Dfp x = newInstance(this);
+
+        /* Lets make a reasonable guess as to the size of the square root */
+        if (x.exp < -1 || x.exp > 1) {
+            x.exp = this.exp / 2;
+        }
+
+        /* Coarsely estimate the mantissa */
+        switch (x.mant[mant.length-1] / 2000) {
+            case 0:
+                x.mant[mant.length-1] = x.mant[mant.length-1]/2+1;
+                break;
+            case 2:
+                x.mant[mant.length-1] = 1500;
+                break;
+            case 3:
+                x.mant[mant.length-1] = 2200;
+                break;
+            default:
+                x.mant[mant.length-1] = 3000;
+        }
+
+        Dfp dx = newInstance(x);
+
+        /* Now that we have the first pass estimate, compute the rest
+       by the formula dx = (y - x*x) / (2x); */
+
+        Dfp px  = getZero();
+        Dfp ppx = getZero();
+        while (x.unequal(px)) {
+            dx = newInstance(x);
+            dx.sign = -1;
+            dx = dx.add(this.divide(x));
+            dx = dx.divide(2);
+            ppx = px;
+            px = x;
+            x = x.add(dx);
+
+            if (x.equals(ppx)) {
+                // alternating between two values
+                break;
+            }
+
+            // if dx is zero, break.  Note testing the most sig digit
+            // is a sufficient test since dx is normalized
+            if (dx.mant[mant.length-1] == 0) {
+                break;
+            }
+        }
+
+        return x;
+
+    }
+
+    /** Get a string representation of the instance.
+     * @return string representation of the instance
+     */
+    public String toString() {
+        if (nans != FINITE) {
+            // if non-finite exceptional cases
+            if (nans == INFINITE) {
+                return (sign < 0) ? NEG_INFINITY_STRING : POS_INFINITY_STRING;
+            } else {
+                return NAN_STRING;
+            }
+        }
+
+        if (exp > mant.length || exp < -1) {
+            return dfp2sci();
+        }
+
+        return dfp2string();
+
+    }
+
+    /** Convert an instance to a string using scientific notation.
+     * @param a instance to convert
+     * @return string representation of the instance in scientific notation
+     */
+    protected String dfp2sci() {
+        char rawdigits[]    = new char[mant.length * 4];
+        char outputbuffer[] = new char[mant.length * 4 + 20];
+        int p;
+        int q;
+        int e;
+        int ae;
+        int shf;
+
+        // Get all the digits
+        p = 0;
+        for (int i = mant.length - 1; i >= 0; i--) {
+            rawdigits[p++] = (char) ((mant[i] / 1000) + '0');
+            rawdigits[p++] = (char) (((mant[i] / 100) %10) + '0');
+            rawdigits[p++] = (char) (((mant[i] / 10) % 10) + '0');
+            rawdigits[p++] = (char) (((mant[i]) % 10) + '0');
+        }
+
+        // Find the first non-zero one
+        for (p = 0; p < rawdigits.length; p++) {
+            if (rawdigits[p] != '0') {
+                break;
+            }
+        }
+        shf = p;
+
+        // Now do the conversion
+        q = 0;
+        if (sign == -1) {
+            outputbuffer[q++] = '-';
+        }
+
+        if (p != rawdigits.length) {
+            // there are non zero digits...
+            outputbuffer[q++] = rawdigits[p++];
+            outputbuffer[q++] = '.';
+
+            while (p<rawdigits.length) {
+                outputbuffer[q++] = rawdigits[p++];
+            }
+        } else {
+            outputbuffer[q++] = '0';
+            outputbuffer[q++] = '.';
+            outputbuffer[q++] = '0';
+            outputbuffer[q++] = 'e';
+            outputbuffer[q++] = '0';
+            return new String(outputbuffer, 0, 5);
+        }
+
+        outputbuffer[q++] = 'e';
+
+        // Find the msd of the exponent
+
+        e = exp * 4 - shf - 1;
+        ae = e;
+        if (e < 0) {
+            ae = -e;
+        }
+
+        // Find the largest p such that p < e
+        for (p = 1000000000; p > ae; p /= 10) {
+            // nothing to do
+        }
+
+        if (e < 0) {
+            outputbuffer[q++] = '-';
+        }
+
+        while (p > 0) {
+            outputbuffer[q++] = (char)(ae / p + '0');
+            ae = ae % p;
+            p = p / 10;
+        }
+
+        return new String(outputbuffer, 0, q);
+
+    }
+
+    /** Convert an instance to a string using normal notation.
+     * @param a instance to convert
+     * @return string representation of the instance in normal notation
+     */
+    protected String dfp2string() {
+        char buffer[] = new char[mant.length*4 + 20];
+        int p = 1;
+        int q;
+        int e = exp;
+        boolean pointInserted = false;
+
+        buffer[0] = ' ';
+
+        if (e <= 0) {
+            buffer[p++] = '0';
+            buffer[p++] = '.';
+            pointInserted = true;
+        }
+
+        while (e < 0) {
+            buffer[p++] = '0';
+            buffer[p++] = '0';
+            buffer[p++] = '0';
+            buffer[p++] = '0';
+            e++;
+        }
+
+        for (int i = mant.length - 1; i >= 0; i--) {
+            buffer[p++] = (char) ((mant[i] / 1000) + '0');
+            buffer[p++] = (char) (((mant[i] / 100) % 10) + '0');
+            buffer[p++] = (char) (((mant[i] / 10) % 10) + '0');
+            buffer[p++] = (char) (((mant[i]) % 10) + '0');
+            if (--e == 0) {
+                buffer[p++] = '.';
+                pointInserted = true;
+            }
+        }
+
+        while (e > 0) {
+            buffer[p++] = '0';
+            buffer[p++] = '0';
+            buffer[p++] = '0';
+            buffer[p++] = '0';
+            e--;
+        }
+
+        if (!pointInserted) {
+            // Ensure we have a radix point!
+            buffer[p++] = '.';
+        }
+
+        // Suppress leading zeros
+        q = 1;
+        while (buffer[q] == '0') {
+            q++;
+        }
+        if (buffer[q] == '.') {
+            q--;
+        }
+
+        // Suppress trailing zeros
+        while (buffer[p-1] == '0') {
+            p--;
+        }
+
+        // Insert sign
+        if (sign < 0) {
+            buffer[--q] = '-';
+        }
+
+        return new String(buffer, q, p - q);
+
+    }
+
+    /** Raises a trap.  This does not set the corresponding flag however.
+     *  @param type the trap type
+     *  @param what - name of routine trap occurred in
+     *  @param oper - input operator to function
+     *  @param result - the result computed prior to the trap
+     *  @return The suggested return value from the trap handler
+     */
+    public Dfp dotrap(int type, String what, Dfp oper, Dfp result) {
+        Dfp def = result;
+
+        switch (type) {
+            case DfpField.FLAG_INVALID:
+                def = newInstance(getZero());
+                def.sign = result.sign;
+                def.nans = QNAN;
+                break;
+
+            case DfpField.FLAG_DIV_ZERO:
+                if (nans == FINITE && mant[mant.length-1] != 0) {
+                    // normal case, we are finite, non-zero
+                    def = newInstance(getZero());
+                    def.sign = (byte)(sign*oper.sign);
+                    def.nans = INFINITE;
+                }
+
+                if (nans == FINITE && mant[mant.length-1] == 0) {
+                    //  0/0
+                    def = newInstance(getZero());
+                    def.nans = QNAN;
+                }
+
+                if (nans == INFINITE || nans == QNAN) {
+                    def = newInstance(getZero());
+                    def.nans = QNAN;
+                }
+
+                if (nans == INFINITE || nans == SNAN) {
+                    def = newInstance(getZero());
+                    def.nans = QNAN;
+                }
+                break;
+
+            case DfpField.FLAG_UNDERFLOW:
+                if ( (result.exp+mant.length) < MIN_EXP) {
+                    def = newInstance(getZero());
+                    def.sign = result.sign;
+                } else {
+                    def = newInstance(result);  // gradual underflow
+                }
+                result.exp = result.exp + ERR_SCALE;
+                break;
+
+            case DfpField.FLAG_OVERFLOW:
+                result.exp = result.exp - ERR_SCALE;
+                def = newInstance(getZero());
+                def.sign = result.sign;
+                def.nans = INFINITE;
+                break;
+
+            default: def = result; break;
+        }
+
+        return trap(type, what, oper, def, result);
+
+    }
+
+    /** Trap handler.  Subclasses may override this to provide trap
+     *  functionality per IEEE 854-1987.
+     *
+     *  @param type  The exception type - e.g. FLAG_OVERFLOW
+     *  @param what  The name of the routine we were in e.g. divide()
+     *  @param oper  An operand to this function if any
+     *  @param def   The default return value if trap not enabled
+     *  @param result    The result that is specified to be delivered per
+     *                   IEEE 854, if any
+     *  @return the value that should be return by the operation triggering the trap
+     */
+    protected Dfp trap(int type, String what, Dfp oper, Dfp def, Dfp result) {
+        return def;
+    }
+
+    /** Returns the type - one of FINITE, INFINITE, SNAN, QNAN.
+     * @return type of the number
+     */
+    public int classify() {
+        return nans;
+    }
+
+    /** Creates an instance that is the same as x except that it has the sign of y.
+     * abs(x) = dfp.copysign(x, dfp.one)
+     * @param x number to get the value from
+     * @param y number to get the sign from
+     * @return a number with the value of x and the sign of y
+     */
+    public static Dfp copysign(final Dfp x, final Dfp y) {
+        Dfp result = x.newInstance(x);
+        result.sign = y.sign;
+        return result;
+    }
+
+    /** Returns the next number greater than this one in the direction of x.
+     * If this==x then simply returns this.
+     * @param x direction where to look at
+     * @return closest number next to instance in the direction of x
+     */
+    public Dfp nextAfter(final Dfp x) {
+
+        // make sure we don't mix number with different precision
+        if (field.getRadixDigits() != x.field.getRadixDigits()) {
+            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);
+            final Dfp result = newInstance(getZero());
+            result.nans = QNAN;
+            return dotrap(DfpField.FLAG_INVALID, NEXT_AFTER_TRAP, x, result);
+        }
+
+        // if this is greater than x
+        boolean up = false;
+        if (this.lessThan(x)) {
+            up = true;
+        }
+
+        if (compare(this, x) == 0) {
+            return newInstance(x);
+        }
+
+        if (lessThan(getZero())) {
+            up = !up;
+        }
+
+        final Dfp inc;
+        Dfp result;
+        if (up) {
+            inc = newInstance(getOne());
+            inc.exp = this.exp-mant.length+1;
+            inc.sign = this.sign;
+
+            if (this.equals(getZero())) {
+                inc.exp = MIN_EXP-mant.length;
+            }
+
+            result = add(inc);
+        } else {
+            inc = newInstance(getOne());
+            inc.exp = this.exp;
+            inc.sign = this.sign;
+
+            if (this.equals(inc)) {
+                inc.exp = this.exp-mant.length;
+            } else {
+                inc.exp = this.exp-mant.length+1;
+            }
+
+            if (this.equals(getZero())) {
+                inc.exp = MIN_EXP-mant.length;
+            }
+
+            result = this.subtract(inc);
+        }
+
+        if (result.classify() == INFINITE && this.classify() != INFINITE) {
+            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);
+            result = dotrap(DfpField.FLAG_INEXACT, NEXT_AFTER_TRAP, x, result);
+        }
+
+        if (result.equals(getZero()) && this.equals(getZero()) == false) {
+            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);
+            result = dotrap(DfpField.FLAG_INEXACT, NEXT_AFTER_TRAP, x, result);
+        }
+
+        return result;
+
+    }
+
+    /** Convert the instance into a double.
+     * @return a double approximating the instance
+     * @see #toSplitDouble()
+     */
+    public double toDouble() {
+
+        if (isInfinite()) {
+            if (lessThan(getZero())) {
+                return Double.NEGATIVE_INFINITY;
+            } else {
+                return Double.POSITIVE_INFINITY;
+            }
+        }
+
+        if (isNaN()) {
+            return Double.NaN;
+        }
+
+        Dfp y = this;
+        boolean negate = false;
+        if (lessThan(getZero())) {
+            y = negate();
+            negate = true;
+        }
+
+        /* Find the exponent, first estimate by integer log10, then adjust.
+         Should be faster than doing a natural logarithm.  */
+        int exponent = (int)(y.log10() * 3.32);
+        if (exponent < 0) {
+            exponent--;
+        }
+
+        Dfp tempDfp = DfpMath.pow(getTwo(), exponent);
+        while (tempDfp.lessThan(y) || tempDfp.equals(y)) {
+            tempDfp = tempDfp.multiply(2);
+            exponent++;
+        }
+        exponent--;
+
+        /* We have the exponent, now work on the mantissa */
+
+        y = y.divide(DfpMath.pow(getTwo(), exponent));
+        if (exponent > -1023) {
+            y = y.subtract(getOne());
+        }
+
+        if (exponent < -1074) {
+            return 0;
+        }
+
+        if (exponent > 1023) {
+            return negate ? Double.NEGATIVE_INFINITY : Double.POSITIVE_INFINITY;
+        }
+
+
+        y = y.multiply(newInstance(4503599627370496l)).rint();
+        String str = y.toString();
+        str = str.substring(0, str.length()-1);
+        long mantissa = Long.parseLong(str);
+
+        if (mantissa == 4503599627370496L) {
+            // Handle special case where we round up to next power of two
+            mantissa = 0;
+            exponent++;
+        }
+
+        /* Its going to be subnormal, so make adjustments */
+        if (exponent <= -1023) {
+            exponent--;
+        }
+
+        while (exponent < -1023) {
+            exponent++;
+            mantissa >>>= 1;
+        }
+
+        long bits = mantissa | ((exponent + 1023L) << 52);
+        double x = Double.longBitsToDouble(bits);
+
+        if (negate) {
+            x = -x;
+        }
+
+        return x;
+
+    }
+
+    /** Convert the instance into a split double.
+     * @return an array of two doubles which sum represent the instance
+     * @see #toDouble()
+     */
+    public double[] toSplitDouble() {
+        double split[] = new double[2];
+        long mask = 0xffffffffc0000000L;
+
+        split[0] = Double.longBitsToDouble(Double.doubleToLongBits(toDouble()) & mask);
+        split[1] = subtract(newInstance(split[0])).toDouble();
+
+        return split;
+    }
+
+}
diff --git a/src/main/java/org/apache/commons/math/dfp/DfpDec.java b/src/main/java/org/apache/commons/math/dfp/DfpDec.java
new file mode 100644
index 0000000..1639dcb
--- /dev/null
+++ b/src/main/java/org/apache/commons/math/dfp/DfpDec.java
@@ -0,0 +1,359 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.commons.math.dfp;
+
+/** Subclass of {@link Dfp} which hides the radix-10000 artifacts of the superclass.
+ * This should give outward appearances of being a decimal number with DIGITS*4-3
+ * decimal digits. This class can be subclassed to appear to be an arbitrary number
+ * of decimal digits less than DIGITS*4-3.
+ * @version $Revision$ $Date$
+ * @since 2.2
+ */
+public class DfpDec extends Dfp {
+
+    /** Makes an instance with a value of zero.
+     * @param factory factory linked to this instance
+     */
+    protected DfpDec(final DfpField factory) {
+        super(factory);
+    }
+
+    /** Create an instance from a byte value.
+     * @param factory factory linked to this instance
+     * @param x value to convert to an instance
+     */
+    protected DfpDec(final DfpField factory, byte x) {
+        super(factory, x);
+    }
+
+    /** Create an instance from an int value.
+     * @param factory factory linked to this instance
+     * @param x value to convert to an instance
+     */
+    protected DfpDec(final DfpField factory, int x) {
+        super(factory, x);
+    }
+
+    /** Create an instance from a long value.
+     * @param factory factory linked to this instance
+     * @param x value to convert to an instance
+     */
+    protected DfpDec(final DfpField factory, long x) {
+        super(factory, x);
+    }
+
+    /** Create an instance from a double value.
+     * @param factory factory linked to this instance
+     * @param x value to convert to an instance
+     */
+    protected DfpDec(final DfpField factory, double x) {
+        super(factory, x);
+        round(0);
+    }
+
+    /** Copy constructor.
+     * @param d instance to copy
+     */
+    public DfpDec(final Dfp d) {
+        super(d);
+        round(0);
+    }
+
+    /** Create an instance from a String representation.
+     * @param factory factory linked to this instance
+     * @param s string representation of the instance
+     */
+    protected DfpDec(final DfpField factory, final String s) {
+        super(factory, s);
+        round(0);
+    }
+
+    /** Creates an instance with a non-finite value.
+     * @param factory factory linked to this instance
+     * @param sign sign of the Dfp to create
+     * @param nans code of the value, must be one of {@link #INFINITE},
+     * {@link #SNAN},  {@link #QNAN}
+     */
+    protected DfpDec(final DfpField factory, final byte sign, final byte nans) {
+        super(factory, sign, nans);
+    }
+
+    /** {@inheritDoc} */
+    public Dfp newInstance() {
+        return new DfpDec(getField());
+    }
+
+    /** {@inheritDoc} */
+    public Dfp newInstance(final byte x) {
+        return new DfpDec(getField(), x);
+    }
+
+    /** {@inheritDoc} */
+    public Dfp newInstance(final int x) {
+        return new DfpDec(getField(), x);
+    }
+
+    /** {@inheritDoc} */
+    public Dfp newInstance(final long x) {
+        return new DfpDec(getField(), x);
+    }
+
+    /** {@inheritDoc} */
+    public Dfp newInstance(final double x) {
+        return new DfpDec(getField(), x);
+    }
+
+    /** {@inheritDoc} */
+    public Dfp newInstance(final Dfp d) {
+
+        // make sure we don't mix number with different precision
+        if (getField().getRadixDigits() != d.getField().getRadixDigits()) {
+            getField().setIEEEFlagsBits(DfpField.FLAG_INVALID);
+            final Dfp result = newInstance(getZero());
+            result.nans = QNAN;
+            return dotrap(DfpField.FLAG_INVALID, "newInstance", d, result);
+        }
+
+        return new DfpDec(d);
+
+    }
+
+    /** {@inheritDoc} */
+    public Dfp newInstance(final String s) {
+        return new DfpDec(getField(), s);
+    }
+
+    /** {@inheritDoc} */
+    public Dfp newInstance(final byte sign, final byte nans) {
+        return new DfpDec(getField(), sign, nans);
+    }
+
+    /** Get the number of decimal digits this class is going to represent.
+     * Default implementation returns {@link #getRadixDigits()}*4-3. Subclasses can
+     * override this to return something less.
+     * @return number of decimal digits this class is going to represent
+     */
+    protected int getDecimalDigits() {
+        return getRadixDigits() * 4 - 3;
+    }
+
+    /** {@inheritDoc} */
+    protected int round(int in) {
+
+        int msb = mant[mant.length-1];
+        if (msb == 0) {
+            // special case -- this == zero
+            return 0;
+        }
+
+        int cmaxdigits = mant.length * 4;
+        int lsbthreshold = 1000;
+        while (lsbthreshold > msb) {
+            lsbthreshold /= 10;
+            cmaxdigits --;
+        }
+
+
+        final int digits = getDecimalDigits();
+        final int lsbshift = cmaxdigits - digits;
+        final int lsd = lsbshift / 4;
+
+        lsbthreshold = 1;
+        for (int i = 0; i < lsbshift % 4; i++) {
+            lsbthreshold *= 10;
+        }
+
+        final int lsb = mant[lsd];
+
+        if (lsbthreshold <= 1 && digits == 4 * mant.length - 3) {
+            return super.round(in);
+        }
+
+        int discarded = in;  // not looking at this after this point
+        final int n;
+        if (lsbthreshold == 1) {
+            // look to the next digit for rounding
+            n = (mant[lsd-1] / 1000) % 10;
+            mant[lsd-1] %= 1000;
+            discarded |= mant[lsd-1];
+        } else {
+            n = (lsb * 10 / lsbthreshold) % 10;
+            discarded |= lsb % (lsbthreshold/10);
+        }
+
+        for (int i = 0; i < lsd; i++) {
+            discarded |= mant[i];    // need to know if there are any discarded bits
+            mant[i] = 0;
+        }
+
+        mant[lsd] = lsb / lsbthreshold * lsbthreshold;
+
+        final boolean inc;
+        switch (getField().getRoundingMode()) {
+            case ROUND_DOWN:
+                inc = false;
+                break;
+
+            case ROUND_UP:
+                inc = (n != 0) || (discarded != 0); // round up if n!=0
+                break;
+
+            case ROUND_HALF_UP:
+                inc = n >= 5;  // round half up
+                break;
+
+            case ROUND_HALF_DOWN:
+                inc = n > 5;  // round half down
+                break;
+
+            case ROUND_HALF_EVEN:
+                inc = (n > 5) ||
+                      (n == 5 && discarded != 0) ||
+                      (n == 5 && discarded == 0 && ((lsb / lsbthreshold) & 1) == 1);  // round half-even
+                break;
+
+            case ROUND_HALF_ODD:
+                inc = (n > 5) ||
+                      (n == 5 && discarded != 0) ||
+                      (n == 5 && discarded == 0 && ((lsb / lsbthreshold) & 1) == 0);  // round half-odd
+                break;
+
+            case ROUND_CEIL:
+                inc = (sign == 1) && (n != 0 || discarded != 0);  // round ceil
+                break;
+
+            case ROUND_FLOOR:
+            default:
+                inc = (sign == -1) && (n != 0 || discarded != 0);  // round floor
+                break;
+        }
+
+        if (inc) {
+            // increment if necessary
+            int rh = lsbthreshold;
+            for (int i = lsd; i < mant.length; i++) {
+                final int r = mant[i] + rh;
+                rh = r / RADIX;
+                mant[i] = r % RADIX;
+            }
+
+            if (rh != 0) {
+                shiftRight();
+                mant[mant.length-1]=rh;
+            }
+        }
+
+        // Check for exceptional cases and raise signals if necessary
+        if (exp < MIN_EXP) {
+            // Gradual Underflow
+            getField().setIEEEFlagsBits(DfpField.FLAG_UNDERFLOW);
+            return DfpField.FLAG_UNDERFLOW;
+        }
+
+        if (exp > MAX_EXP) {
+            // Overflow
+            getField().setIEEEFlagsBits(DfpField.FLAG_OVERFLOW);
+            return DfpField.FLAG_OVERFLOW;
+        }
+
+        if (n != 0 || discarded != 0) {
+            // Inexact
+            getField().setIEEEFlagsBits(DfpField.FLAG_INEXACT);
+            return DfpField.FLAG_INEXACT;
+        }
+        return 0;
+    }
+
+    /** {@inheritDoc} */
+    public Dfp nextAfter(Dfp x) {
+
+        final String trapName = "nextAfter";
+
+        // make sure we don't mix number with different precision
+        if (getField().getRadixDigits() != x.getField().getRadixDigits()) {
+            getField().setIEEEFlagsBits(DfpField.FLAG_INVALID);
+            final Dfp result = newInstance(getZero());
+            result.nans = QNAN;
+            return dotrap(DfpField.FLAG_INVALID, trapName, x, result);
+        }
+
+        boolean up = false;
+        Dfp result;
+        Dfp inc;
+
+        // if this is greater than x
+        if (this.lessThan(x)) {
+            up = true;
+        }
+
+        if (equals(x)) {
+            return newInstance(x);
+        }
+
+        if (lessThan(getZero())) {
+            up = !up;
+        }
+
+        if (up) {
+            inc = power10(log10() - getDecimalDigits() + 1);
+            inc = copysign(inc, this);
+
+            if (this.equals(getZero())) {
+                inc = power10K(MIN_EXP-mant.length-1);
+            }
+
+            if (inc.equals(getZero())) {
+                result = copysign(newInstance(getZero()), this);
+            } else {
+                result = add(inc);
+            }
+        } else {
+            inc = power10(log10());
+            inc = copysign(inc, this);
+
+            if (this.equals(inc)) {
+                inc = inc.divide(power10(getDecimalDigits()));
+            } else {
+                inc = inc.divide(power10(getDecimalDigits() - 1));
+            }
+
+            if (this.equals(getZero())) {
+                inc = power10K(MIN_EXP-mant.length-1);
+            }
+
+            if (inc.equals(getZero())) {
+                result = copysign(newInstance(getZero()), this);
+            } else {
+                result = subtract(inc);
+            }
+        }
+
+        if (result.classify() == INFINITE && this.classify() != INFINITE) {
+            getField().setIEEEFlagsBits(DfpField.FLAG_INEXACT);
+            result = dotrap(DfpField.FLAG_INEXACT, trapName, x, result);
+        }
+
+        if (result.equals(getZero()) && this.equals(getZero()) == false) {
+            getField().setIEEEFlagsBits(DfpField.FLAG_INEXACT);
+            result = dotrap(DfpField.FLAG_INEXACT, trapName, x, result);
+        }
+
+        return result;
+    }
+
+}
diff --git a/src/main/java/org/apache/commons/math/dfp/DfpField.java b/src/main/java/org/apache/commons/math/dfp/DfpField.java
new file mode 100644
index 0000000..158a151
--- /dev/null
+++ b/src/main/java/org/apache/commons/math/dfp/DfpField.java
@@ -0,0 +1,742 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.commons.math.dfp;
+
+import org.apache.commons.math.Field;
+
+/** Field for Decimal floating point instances.
+ * @version $Revision$ $Date$
+ * @since 2.2
+ */
+public class DfpField implements Field<Dfp> {
+
+    /** Enumerate for rounding modes. */
+    public enum RoundingMode {
+
+        /** Rounds toward zero (truncation). */
+        ROUND_DOWN,
+
+        /** Rounds away from zero if discarded digit is non-zero. */
+        ROUND_UP,
+
+        /** Rounds towards nearest unless both are equidistant in which case it rounds away from zero. */
+        ROUND_HALF_UP,
+
+        /** Rounds towards nearest unless both are equidistant in which case it rounds toward zero. */
+        ROUND_HALF_DOWN,
+
+        /** Rounds towards nearest unless both are equidistant in which case it rounds toward the even neighbor.
+         * This is the default as  specified by IEEE 854-1987
+         */
+        ROUND_HALF_EVEN,
+
+        /** Rounds towards nearest unless both are equidistant in which case it rounds toward the odd neighbor.  */
+        ROUND_HALF_ODD,
+
+        /** Rounds towards positive infinity. */
+        ROUND_CEIL,
+
+        /** Rounds towards negative infinity. */
+        ROUND_FLOOR;
+
+    }
+
+    /** IEEE 854-1987 flag for invalid operation. */
+    public static final int FLAG_INVALID   =  1;
+
+    /** IEEE 854-1987 flag for division by zero. */
+    public static final int FLAG_DIV_ZERO  =  2;
+
+    /** IEEE 854-1987 flag for overflow. */
+    public static final int FLAG_OVERFLOW  =  4;
+
+    /** IEEE 854-1987 flag for underflow. */
+    public static final int FLAG_UNDERFLOW =  8;
+
+    /** IEEE 854-1987 flag for inexact result. */
+    public static final int FLAG_INEXACT   = 16;
+
+    /** High precision string representation of &radic;2. */
+    private static String sqr2String;
+
+    /** High precision string representation of &radic;2 / 2. */
+    private static String sqr2ReciprocalString;
+
+    /** High precision string representation of &radic;3. */
+    private static String sqr3String;
+
+    /** High precision string representation of &radic;3 / 3. */
+    private static String sqr3ReciprocalString;
+
+    /** High precision string representation of &pi;. */
+    private static String piString;
+
+    /** High precision string representation of e. */
+    private static String eString;
+
+    /** High precision string representation of ln(2). */
+    private static String ln2String;
+
+    /** High precision string representation of ln(5). */
+    private static String ln5String;
+
+    /** High precision string representation of ln(10). */
+    private static String ln10String;
+
+    /** The number of radix digits.
+     * Note these depend on the radix which is 10000 digits,
+     * so each one is equivalent to 4 decimal digits.
+     */
+    private final int radixDigits;
+
+    /** A {@link Dfp} with value 0. */
+    private final Dfp zero;
+
+    /** A {@link Dfp} with value 1. */
+    private final Dfp one;
+
+    /** A {@link Dfp} with value 2. */
+    private final Dfp two;
+
+    /** A {@link Dfp} with value &radic;2. */
+    private final Dfp sqr2;
+
+    /** A two elements {@link Dfp} array with value &radic;2 split in two pieces. */
+    private final Dfp[] sqr2Split;
+
+    /** A {@link Dfp} with value &radic;2 / 2. */
+    private final Dfp sqr2Reciprocal;
+
+    /** A {@link Dfp} with value &radic;3. */
+    private final Dfp sqr3;
+
+    /** A {@link Dfp} with value &radic;3 / 3. */
+    private final Dfp sqr3Reciprocal;
+
+    /** A {@link Dfp} with value &pi;. */
+    private final Dfp pi;
+
+    /** A two elements {@link Dfp} array with value &pi; split in two pieces. */
+    private final Dfp[] piSplit;
+
+    /** A {@link Dfp} with value e. */
+    private final Dfp e;
+
+    /** A two elements {@link Dfp} array with value e split in two pieces. */
+    private final Dfp[] eSplit;
+
+    /** A {@link Dfp} with value ln(2). */
+    private final Dfp ln2;
+
+    /** A two elements {@link Dfp} array with value ln(2) split in two pieces. */
+    private final Dfp[] ln2Split;
+
+    /** A {@link Dfp} with value ln(5). */
+    private final Dfp ln5;
+
+    /** A two elements {@link Dfp} array with value ln(5) split in two pieces. */
+    private final Dfp[] ln5Split;
+
+    /** A {@link Dfp} with value ln(10). */
+    private final Dfp ln10;
+
+    /** Current rounding mode. */
+    private RoundingMode rMode;
+
+    /** IEEE 854-1987 signals. */
+    private int ieeeFlags;
+
+    /** Create a factory for the specified number of radix digits.
+     * <p>
+     * Note that since the {@link Dfp} class uses 10000 as its radix, each radix
+     * digit is equivalent to 4 decimal digits. This implies that asking for
+     * 13, 14, 15 or 16 decimal digits will really lead to a 4 radix 10000 digits in
+     * all cases.
+     * </p>
+     * @param decimalDigits minimal number of decimal digits.
+     */
+    public DfpField(final int decimalDigits) {
+        this(decimalDigits, true);
+    }
+
+    /** Create a factory for the specified number of radix digits.
+     * <p>
+     * Note that since the {@link Dfp} class uses 10000 as its radix, each radix
+     * digit is equivalent to 4 decimal digits. This implies that asking for
+     * 13, 14, 15 or 16 decimal digits will really lead to a 4 radix 10000 digits in
+     * all cases.
+     * </p>
+     * @param decimalDigits minimal number of decimal digits
+     * @param computeConstants if true, the transcendental constants for the given precision
+     * must be computed (setting this flag to false is RESERVED for the internal recursive call)
+     */
+    public DfpField(final int decimalDigits, final boolean computeConstants) {
+
+        this.radixDigits = (decimalDigits + 3) / 4;
+        this.rMode       = RoundingMode.ROUND_HALF_EVEN;
+        this.ieeeFlags   = 0;
+        this.zero        = new Dfp(this, 0);
+        this.one         = new Dfp(this, 1);
+        this.two         = new Dfp(this, 2);
+
+        if (computeConstants) {
+            // set up transcendental constants
+            synchronized (DfpField.class) {
+
+                // as a heuristic to circumvent Table-Maker's Dilemma, we set the string
+                // representation of the constants to be at least 3 times larger than the
+                // number of decimal digits, also as an attempt to really compute these
+                // constants only once, we set a minimum number of digits
+                computeStringConstants((decimalDigits < 67) ? 200 : (3 * decimalDigits));
+
+                // set up the constants at current field accuracy
+                sqr2           = new Dfp(this, sqr2String);
+                sqr2Split      = split(sqr2String);
+                sqr2Reciprocal = new Dfp(this, sqr2ReciprocalString);
+                sqr3           = new Dfp(this, sqr3String);
+                sqr3Reciprocal = new Dfp(this, sqr3ReciprocalString);
+                pi             = new Dfp(this, piString);
+                piSplit        = split(piString);
+                e              = new Dfp(this, eString);
+                eSplit         = split(eString);
+                ln2            = new Dfp(this, ln2String);
+                ln2Split       = split(ln2String);
+                ln5            = new Dfp(this, ln5String);
+                ln5Split       = split(ln5String);
+                ln10           = new Dfp(this, ln10String);
+
+            }
+        } else {
+            // dummy settings for unused constants
+            sqr2           = null;
+            sqr2Split      = null;
+            sqr2Reciprocal = null;
+            sqr3           = null;
+            sqr3Reciprocal = null;
+            pi             = null;
+            piSplit        = null;
+            e              = null;
+            eSplit         = null;
+            ln2            = null;
+            ln2Split       = null;
+            ln5            = null;
+            ln5Split       = null;
+            ln10           = null;
+        }
+
+    }
+
+    /** Get the number of radix digits of the {@link Dfp} instances built by this factory.
+     * @return number of radix digits
+     */
+    public int getRadixDigits() {
+        return radixDigits;
+    }
+
+    /** Set the rounding mode.
+     *  If not set, the default value is {@link RoundingMode#ROUND_HALF_EVEN}.
+     * @param mode desired rounding mode
+     * Note that the rounding mode is common to all {@link Dfp} instances
+     * belonging to the current {@link DfpField} in the system and will
+     * affect all future calculations.
+     */
+    public void setRoundingMode(final RoundingMode mode) {
+        rMode = mode;
+    }
+
+    /** Get the current rounding mode.
+     * @return current rounding mode
+     */
+    public RoundingMode getRoundingMode() {
+        return rMode;
+    }
+
+    /** Get the IEEE 854 status flags.
+     * @return IEEE 854 status flags
+     * @see #clearIEEEFlags()
+     * @see #setIEEEFlags(int)
+     * @see #setIEEEFlagsBits(int)
+     * @see #FLAG_INVALID
+     * @see #FLAG_DIV_ZERO
+     * @see #FLAG_OVERFLOW
+     * @see #FLAG_UNDERFLOW
+     * @see #FLAG_INEXACT
+     */
+    public int getIEEEFlags() {
+        return ieeeFlags;
+    }
+
+    /** Clears the IEEE 854 status flags.
+     * @see #getIEEEFlags()
+     * @see #setIEEEFlags(int)
+     * @see #setIEEEFlagsBits(int)
+     * @see #FLAG_INVALID
+     * @see #FLAG_DIV_ZERO
+     * @see #FLAG_OVERFLOW
+     * @see #FLAG_UNDERFLOW
+     * @see #FLAG_INEXACT
+     */
+    public void clearIEEEFlags() {
+        ieeeFlags = 0;
+    }
+
+    /** Sets the IEEE 854 status flags.
+     * @param flags desired value for the flags
+     * @see #getIEEEFlags()
+     * @see #clearIEEEFlags()
+     * @see #setIEEEFlagsBits(int)
+     * @see #FLAG_INVALID
+     * @see #FLAG_DIV_ZERO
+     * @see #FLAG_OVERFLOW
+     * @see #FLAG_UNDERFLOW
+     * @see #FLAG_INEXACT
+     */
+    public void setIEEEFlags(final int flags) {
+        ieeeFlags = flags & (FLAG_INVALID | FLAG_DIV_ZERO | FLAG_OVERFLOW | FLAG_UNDERFLOW | FLAG_INEXACT);
+    }
+
+    /** Sets some bits in the IEEE 854 status flags, without changing the already set bits.
+     * <p>
+     * Calling this method is equivalent to call {@code setIEEEFlags(getIEEEFlags() | bits)}
+     * </p>
+     * @param bits bits to set
+     * @see #getIEEEFlags()
+     * @see #clearIEEEFlags()
+     * @see #setIEEEFlags(int)
+     * @see #FLAG_INVALID
+     * @see #FLAG_DIV_ZERO
+     * @see #FLAG_OVERFLOW
+     * @see #FLAG_UNDERFLOW
+     * @see #FLAG_INEXACT
+     */
+    public void setIEEEFlagsBits(final int bits) {
+        ieeeFlags |= bits & (FLAG_INVALID | FLAG_DIV_ZERO | FLAG_OVERFLOW | FLAG_UNDERFLOW | FLAG_INEXACT);
+    }
+
+    /** Makes a {@link Dfp} with a value of 0.
+     * @return a new {@link Dfp} with a value of 0
+     */
+    public Dfp newDfp() {
+        return new Dfp(this);
+    }
+
+    /** Create an instance from a byte value.
+     * @param x value to convert to an instance
+     * @return a new {@link Dfp} with the same value as x
+     */
+    public Dfp newDfp(final byte x) {
+        return new Dfp(this, x);
+    }
+
+    /** Create an instance from an int value.
+     * @param x value to convert to an instance
+     * @return a new {@link Dfp} with the same value as x
+     */
+    public Dfp newDfp(final int x) {
+        return new Dfp(this, x);
+    }
+
+    /** Create an instance from a long value.
+     * @param x value to convert to an instance
+     * @return a new {@link Dfp} with the same value as x
+     */
+    public Dfp newDfp(final long x) {
+        return new Dfp(this, x);
+    }
+
+    /** Create an instance from a double value.
+     * @param x value to convert to an instance
+     * @return a new {@link Dfp} with the same value as x
+     */
+    public Dfp newDfp(final double x) {
+        return new Dfp(this, x);
+    }
+
+    /** Copy constructor.
+     * @param d instance to copy
+     * @return a new {@link Dfp} with the same value as d
+     */
+    public Dfp newDfp(Dfp d) {
+        return new Dfp(d);
+    }
+
+    /** Create a {@link Dfp} given a String representation.
+     * @param s string representation of the instance
+     * @return a new {@link Dfp} parsed from specified string
+     */
+    public Dfp newDfp(final String s) {
+        return new Dfp(this, s);
+    }
+
+    /** Creates a {@link Dfp} with a non-finite value.
+     * @param sign sign of the Dfp to create
+     * @param nans code of the value, must be one of {@link Dfp#INFINITE},
+     * {@link Dfp#SNAN},  {@link Dfp#QNAN}
+     * @return a new {@link Dfp} with a non-finite value
+     */
+    public Dfp newDfp(final byte sign, final byte nans) {
+        return new Dfp(this, sign, nans);
+    }
+
+    /** Get the constant 0.
+     * @return a {@link Dfp} with value 0
+     */
+    public Dfp getZero() {
+        return zero;
+    }
+
+    /** Get the constant 1.
+     * @return a {@link Dfp} with value 1
+     */
+    public Dfp getOne() {
+        return one;
+    }
+
+    /** Get the constant 2.
+     * @return a {@link Dfp} with value 2
+     */
+    public Dfp getTwo() {
+        return two;
+    }
+
+    /** Get the constant &radic;2.
+     * @return a {@link Dfp} with value &radic;2
+     */
+    public Dfp getSqr2() {
+        return sqr2;
+    }
+
+    /** Get the constant &radic;2 split in two pieces.
+     * @return a {@link Dfp} with value &radic;2 split in two pieces
+     */
+    public Dfp[] getSqr2Split() {
+        return sqr2Split.clone();
+    }
+
+    /** Get the constant &radic;2 / 2.
+     * @return a {@link Dfp} with value &radic;2 / 2
+     */
+    public Dfp getSqr2Reciprocal() {
+        return sqr2Reciprocal;
+    }
+
+    /** Get the constant &radic;3.
+     * @return a {@link Dfp} with value &radic;3
+     */
+    public Dfp getSqr3() {
+        return sqr3;
+    }
+
+    /** Get the constant &radic;3 / 3.
+     * @return a {@link Dfp} with value &radic;3 / 3
+     */
+    public Dfp getSqr3Reciprocal() {
+        return sqr3Reciprocal;
+    }
+
+    /** Get the constant &pi;.
+     * @return a {@link Dfp} with value &pi;
+     */
+    public Dfp getPi() {
+        return pi;
+    }
+
+    /** Get the constant &pi; split in two pieces.
+     * @return a {@link Dfp} with value &pi; split in two pieces
+     */
+    public Dfp[] getPiSplit() {
+        return piSplit.clone();
+    }
+
+    /** Get the constant e.
+     * @return a {@link Dfp} with value e
+     */
+    public Dfp getE() {
+        return e;
+    }
+
+    /** Get the constant e split in two pieces.
+     * @return a {@link Dfp} with value e split in two pieces
+     */
+    public Dfp[] getESplit() {
+        return eSplit.clone();
+    }
+
+    /** Get the constant ln(2).
+     * @return a {@link Dfp} with value ln(2)
+     */
+    public Dfp getLn2() {
+        return ln2;
+    }
+
+    /** Get the constant ln(2) split in two pieces.
+     * @return a {@link Dfp} with value ln(2) split in two pieces
+     */
+    public Dfp[] getLn2Split() {
+        return ln2Split.clone();
+    }
+
+    /** Get the constant ln(5).
+     * @return a {@link Dfp} with value ln(5)
+     */
+    public Dfp getLn5() {
+        return ln5;
+    }
+
+    /** Get the constant ln(5) split in two pieces.
+     * @return a {@link Dfp} with value ln(5) split in two pieces
+     */
+    public Dfp[] getLn5Split() {
+        return ln5Split.clone();
+    }
+
+    /** Get the constant ln(10).
+     * @return a {@link Dfp} with value ln(10)
+     */
+    public Dfp getLn10() {
+        return ln10;
+    }
+
+    /** Breaks a string representation up into two {@link Dfp}'s.
+     * The split is such that the sum of them is equivalent to the input string,
+     * but has higher precision than using a single Dfp.
+     * @param a string representation of the number to split
+     * @return an array of two {@link Dfp Dfp} instances which sum equals a
+     */
+    private Dfp[] split(final String a) {
+      Dfp result[] = new Dfp[2];
+      boolean leading = true;
+      int sp = 0;
+      int sig = 0;
+
+      char[] buf = new char[a.length()];
+
+      for (int i = 0; i < buf.length; i++) {
+        buf[i] = a.charAt(i);
+
+        if (buf[i] >= '1' && buf[i] <= '9') {
+            leading = false;
+        }
+
+        if (buf[i] == '.') {
+          sig += (400 - sig) % 4;
+          leading = false;
+        }
+
+        if (sig == (radixDigits / 2) * 4) {
+          sp = i;
+          break;
+        }
+
+        if (buf[i] >= '0' && buf[i] <= '9' && !leading) {
+            sig ++;
+        }
+      }
+
+      result[0] = new Dfp(this, new String(buf, 0, sp));
+
+      for (int i = 0; i < buf.length; i++) {
+        buf[i] = a.charAt(i);
+        if (buf[i] >= '0' && buf[i] <= '9' && i < sp) {
+            buf[i] = '0';
+        }
+      }
+
+      result[1] = new Dfp(this, new String(buf));
+
+      return result;
+
+    }
+
+    /** Recompute the high precision string constants.
+     * @param highPrecisionDecimalDigits precision at which the string constants mus be computed
+     */
+    private static void computeStringConstants(final int highPrecisionDecimalDigits) {
+        if (sqr2String == null || sqr2String.length() < highPrecisionDecimalDigits - 3) {
+
+            // recompute the string representation of the transcendental constants
+            final DfpField highPrecisionField = new DfpField(highPrecisionDecimalDigits, false);
+            final Dfp highPrecisionOne        = new Dfp(highPrecisionField, 1);
+            final Dfp highPrecisionTwo        = new Dfp(highPrecisionField, 2);
+            final Dfp highPrecisionThree      = new Dfp(highPrecisionField, 3);
+
+            final Dfp highPrecisionSqr2 = highPrecisionTwo.sqrt();
+            sqr2String           = highPrecisionSqr2.toString();
+            sqr2ReciprocalString = highPrecisionOne.divide(highPrecisionSqr2).toString();
+
+            final Dfp highPrecisionSqr3 = highPrecisionThree.sqrt();
+            sqr3String           = highPrecisionSqr3.toString();
+            sqr3ReciprocalString = highPrecisionOne.divide(highPrecisionSqr3).toString();
+
+            piString   = computePi(highPrecisionOne, highPrecisionTwo, highPrecisionThree).toString();
+            eString    = computeExp(highPrecisionOne, highPrecisionOne).toString();
+            ln2String  = computeLn(highPrecisionTwo, highPrecisionOne, highPrecisionTwo).toString();
+            ln5String  = computeLn(new Dfp(highPrecisionField, 5),  highPrecisionOne, highPrecisionTwo).toString();
+            ln10String = computeLn(new Dfp(highPrecisionField, 10), highPrecisionOne, highPrecisionTwo).toString();
+
+        }
+    }
+
+    /** Compute &pi; by atan(1/&radic;(3)) = &pi;/6.
+     * @param one constant with value 1 at desired precision
+     * @param two constant with value 2 at desired precision
+     * @param three constant with value 3 at desired precision
+     * @return &pi;
+     */
+    private static Dfp computePi(final Dfp one, final Dfp two, final Dfp three) {
+
+        Dfp x = three;
+        x = x.sqrt();
+        x = one.divide(x);
+
+        Dfp denom = one;
+
+        Dfp py = new Dfp(x);
+        Dfp y  = new Dfp(x);
+
+        for (int i = 1; i < 10000; i++) {
+            x = x.divide(three);
+            denom = denom.add(two);
+            if ((i&1) != 0) {
+                y = y.subtract(x.divide(denom));
+            } else {
+                y = y.add(x.divide(denom));
+            }
+            if (y.equals(py)) {
+                break;
+            }
+            py = new Dfp(y);
+        }
+
+        return y.multiply(new Dfp(one.getField(), 6));
+
+    }
+
+    /** Compute exp(a).
+     * @param a number for which we want the exponential
+     * @param one constant with value 1 at desired precision
+     * @return exp(a)
+     */
+    public static Dfp computeExp(final Dfp a, final Dfp one) {
+
+        Dfp y  = new Dfp(one);
+        Dfp py = new Dfp(one);
+        Dfp f  = new Dfp(one);
+        Dfp fi = new Dfp(one);
+        Dfp x  = new Dfp(one);
+
+        for (int i = 0; i < 10000; i++) {
+            x = x.multiply(a);
+            y = y.add(x.divide(f));
+            fi = fi.add(one);
+            f = f.multiply(fi);
+            if (y.equals(py)) {
+                break;
+            }
+            py = new Dfp(y);
+        }
+
+        return y;
+
+    }
+
+
+    /** Compute ln(a).
+     *
+     *  Let f(x) = ln(x),
+     *
+     *  We know that f'(x) = 1/x, thus from Taylor's theorem we have:
+     *
+     *           -----          n+1         n
+     *  f(x) =   \           (-1)    (x - 1)
+     *           /          ----------------    for 1 <= n <= infinity
+     *           -----             n
+     *
+     *  or
+     *                       2        3       4
+     *                   (x-1)   (x-1)    (x-1)
+     *  ln(x) =  (x-1) - ----- + ------ - ------ + ...
+     *                     2       3        4
+     *
+     *  alternatively,
+     *
+     *                  2    3   4
+     *                 x    x   x
+     *  ln(x+1) =  x - -  + - - - + ...
+     *                 2    3   4
+     *
+     *  This series can be used to compute ln(x), but it converges too slowly.
+     *
+     *  If we substitute -x for x above, we get
+     *
+     *                   2    3    4
+     *                  x    x    x
+     *  ln(1-x) =  -x - -  - -  - - + ...
+     *                  2    3    4
+     *
+     *  Note that all terms are now negative.  Because the even powered ones
+     *  absorbed the sign.  Now, subtract the series above from the previous
+     *  one to get ln(x+1) - ln(1-x).  Note the even terms cancel out leaving
+     *  only the odd ones
+     *
+     *                             3     5      7
+     *                           2x    2x     2x
+     *  ln(x+1) - ln(x-1) = 2x + --- + --- + ---- + ...
+     *                            3     5      7
+     *
+     *  By the property of logarithms that ln(a) - ln(b) = ln (a/b) we have:
+     *
+     *                                3        5        7
+     *      x+1           /          x        x        x          \
+     *  ln ----- =   2 *  |  x  +   ----  +  ----  +  ---- + ...  |
+     *      x-1           \          3        5        7          /
+     *
+     *  But now we want to find ln(a), so we need to find the value of x
+     *  such that a = (x+1)/(x-1).   This is easily solved to find that
+     *  x = (a-1)/(a+1).
+     * @param a number for which we want the exponential
+     * @param one constant with value 1 at desired precision
+     * @param two constant with value 2 at desired precision
+     * @return ln(a)
+     */
+
+    public static Dfp computeLn(final Dfp a, final Dfp one, final Dfp two) {
+
+        int den = 1;
+        Dfp x = a.add(new Dfp(a.getField(), -1)).divide(a.add(one));
+
+        Dfp y = new Dfp(x);
+        Dfp num = new Dfp(x);
+        Dfp py = new Dfp(y);
+        for (int i = 0; i < 10000; i++) {
+            num = num.multiply(x);
+            num = num.multiply(x);
+            den = den + 2;
+            Dfp t = num.divide(den);
+            y = y.add(t);
+            if (y.equals(py)) {
+                break;
+            }
+            py = new Dfp(y);
+        }
+
+        return y.multiply(two);
+
+    }
+
+}
diff --git a/src/main/java/org/apache/commons/math/dfp/DfpMath.java b/src/main/java/org/apache/commons/math/dfp/DfpMath.java
new file mode 100644
index 0000000..bcf71f2
--- /dev/null
+++ b/src/main/java/org/apache/commons/math/dfp/DfpMath.java
@@ -0,0 +1,969 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.commons.math.dfp;
+
+/** Mathematical routines for use with {@link Dfp}.
+ * The constants are defined in {@link DfpField}
+ * @version $Revision$ $Date$
+ * @since 2.2
+ */
+public class DfpMath {
+
+    /** Name for traps triggered by pow. */
+    private static final String POW_TRAP = "pow";
+
+    /**
+     * Private Constructor.
+     */
+    private DfpMath() {
+    }
+
+    /** Breaks a string representation up into two dfp's.
+     * <p>The two dfp are such that the sum of them is equivalent
+     * to the input string, but has higher precision than using a
+     * single dfp. This is useful for improving accuracy of
+     * exponentiation and critical multiplies.
+     * @param field field to which the Dfp must belong
+     * @param a string representation to split
+     * @return an array of two {@link Dfp} which sum is a
+     */
+    protected static Dfp[] split(final DfpField field, final String a) {
+        Dfp result[] = new Dfp[2];
+        char[] buf;
+        boolean leading = true;
+        int sp = 0;
+        int sig = 0;
+
+        buf = new char[a.length()];
+
+        for (int i = 0; i < buf.length; i++) {
+            buf[i] = a.charAt(i);
+
+            if (buf[i] >= '1' && buf[i] <= '9') {
+                leading = false;
+            }
+
+            if (buf[i] == '.') {
+                sig += (400 - sig) % 4;
+                leading = false;
+            }
+
+            if (sig == (field.getRadixDigits() / 2) * 4) {
+                sp = i;
+                break;
+            }
+
+            if (buf[i] >= '0' && buf[i] <= '9' && !leading) {
+                sig ++;
+            }
+        }
+
+        result[0] = field.newDfp(new String(buf, 0, sp));
+
+        for (int i = 0; i < buf.length; i++) {
+            buf[i] = a.charAt(i);
+            if (buf[i] >= '0' && buf[i] <= '9' && i < sp) {
+                buf[i] = '0';
+            }
+        }
+
+        result[1] = field.newDfp(new String(buf));
+
+        return result;
+    }
+
+    /** Splits a {@link Dfp} into 2 {@link Dfp}'s such that their sum is equal to the input {@link Dfp}.
+     * @param a number to split
+     * @return two elements array containing the split number
+     */
+    protected static Dfp[] split(final Dfp a) {
+        final Dfp[] result = new Dfp[2];
+        final Dfp shift = a.multiply(a.power10K(a.getRadixDigits() / 2));
+        result[0] = a.add(shift).subtract(shift);
+        result[1] = a.subtract(result[0]);
+        return result;
+    }
+
+    /** Multiply two numbers that are split in to two pieces that are
+     *  meant to be added together.
+     *  Use binomial multiplication so ab = a0 b0 + a0 b1 + a1 b0 + a1 b1
+     *  Store the first term in result0, the rest in result1
+     *  @param a first factor of the multiplication, in split form
+     *  @param b second factor of the multiplication, in split form
+     *  @return a &times; b, in split form
+     */
+    protected static Dfp[] splitMult(final Dfp[] a, final Dfp[] b) {
+        final Dfp[] result = new Dfp[2];
+
+        result[1] = a[0].getZero();
+        result[0] = a[0].multiply(b[0]);
+
+        /* If result[0] is infinite or zero, don't compute result[1].
+         * Attempting to do so may produce NaNs.
+         */
+
+        if (result[0].classify() == Dfp.INFINITE || result[0].equals(result[1])) {
+            return result;
+        }
+
+        result[1] = a[0].multiply(b[1]).add(a[1].multiply(b[0])).add(a[1].multiply(b[1]));
+
+        return result;
+    }
+
+    /** Divide two numbers that are split in to two pieces that are meant to be added together.
+     * Inverse of split multiply above:
+     *  (a+b) / (c+d) = (a/c) + ( (bc-ad)/(c**2+cd) )
+     *  @param a dividend, in split form
+     *  @param b divisor, in split form
+     *  @return a / b, in split form
+     */
+    protected static Dfp[] splitDiv(final Dfp[] a, final Dfp[] b) {
+        final Dfp[] result;
+
+        result = new Dfp[2];
+
+        result[0] = a[0].divide(b[0]);
+        result[1] = a[1].multiply(b[0]).subtract(a[0].multiply(b[1]));
+        result[1] = result[1].divide(b[0].multiply(b[0]).add(b[0].multiply(b[1])));
+
+        return result;
+    }
+
+    /** Raise a split base to the a power.
+     * @param base number to raise
+     * @param a power
+     * @return base<sup>a</sup>
+     */
+    protected static Dfp splitPow(final Dfp[] base, int a) {
+        boolean invert = false;
+
+        Dfp[] r = new Dfp[2];
+
+        Dfp[] result = new Dfp[2];
+        result[0] = base[0].getOne();
+        result[1] = base[0].getZero();
+
+        if (a == 0) {
+            // Special case a = 0
+            return result[0].add(result[1]);
+        }
+
+        if (a < 0) {
+            // If a is less than zero
+            invert = true;
+            a = -a;
+        }
+
+        // Exponentiate by successive squaring
+        do {
+            r[0] = new Dfp(base[0]);
+            r[1] = new Dfp(base[1]);
+            int trial = 1;
+
+            int prevtrial;
+            while (true) {
+                prevtrial = trial;
+                trial = trial * 2;
+                if (trial > a) {
+                    break;
+                }
+                r = splitMult(r, r);
+            }
+
+            trial = prevtrial;
+
+            a -= trial;
+            result = splitMult(result, r);
+
+        } while (a >= 1);
+
+        result[0] = result[0].add(result[1]);
+
+        if (invert) {
+            result[0] = base[0].getOne().divide(result[0]);
+        }
+
+        return result[0];
+
+    }
+
+    /** Raises base to the power a by successive squaring.
+     * @param base number to raise
+     * @param a power
+     * @return base<sup>a</sup>
+     */
+    public static Dfp pow(Dfp base, int a)
+    {
+        boolean invert = false;
+
+        Dfp result = base.getOne();
+
+        if (a == 0) {
+            // Special case
+            return result;
+        }
+
+        if (a < 0) {
+            invert = true;
+            a = -a;
+        }
+
+        // Exponentiate by successive squaring
+        do {
+            Dfp r = new Dfp(base);
+            Dfp prevr;
+            int trial = 1;
+            int prevtrial;
+
+            do {
+                prevr = new Dfp(r);
+                prevtrial = trial;
+                r = r.multiply(r);
+                trial = trial * 2;
+            } while (a>trial);
+
+            r = prevr;
+            trial = prevtrial;
+
+            a = a - trial;
+            result = result.multiply(r);
+
+        } while (a >= 1);
+
+        if (invert) {
+            result = base.getOne().divide(result);
+        }
+
+        return base.newInstance(result);
+
+    }
+
+    /** Computes e to the given power.
+     * a is broken into two parts, such that a = n+m  where n is an integer.
+     * We use pow() to compute e<sup>n</sup> and a Taylor series to compute
+     * e<sup>m</sup>.  We return e*<sup>n</sup> &times; e<sup>m</sup>
+     * @param a power at which e should be raised
+     * @return e<sup>a</sup>
+     */
+    public static Dfp exp(final Dfp a) {
+
+        final Dfp inta = a.rint();
+        final Dfp fraca = a.subtract(inta);
+
+        final int ia = inta.intValue();
+        if (ia > 2147483646) {
+            // return +Infinity
+            return a.newInstance((byte)1, (byte) Dfp.INFINITE);
+        }
+
+        if (ia < -2147483646) {
+            // return 0;
+            return a.newInstance();
+        }
+
+        final Dfp einta = splitPow(a.getField().getESplit(), ia);
+        final Dfp efraca = expInternal(fraca);
+
+        return einta.multiply(efraca);
+    }
+
+    /** Computes e to the given power.
+     * Where -1 < a < 1.  Use the classic Taylor series.  1 + x**2/2! + x**3/3! + x**4/4!  ...
+     * @param a power at which e should be raised
+     * @return e<sup>a</sup>
+     */
+    protected static Dfp expInternal(final Dfp a) {
+        Dfp y = a.getOne();
+        Dfp x = a.getOne();
+        Dfp fact = a.getOne();
+        Dfp py = new Dfp(y);
+
+        for (int i = 1; i < 90; i++) {
+            x = x.multiply(a);
+            fact = fact.divide(i);
+            y = y.add(x.multiply(fact));
+            if (y.equals(py)) {
+                break;
+            }
+            py = new Dfp(y);
+        }
+
+        return y;
+    }
+
+    /** Returns the natural logarithm of a.
+     * a is first split into three parts such that  a = (10000^h)(2^j)k.
+     * ln(a) is computed by ln(a) = ln(5)*h + ln(2)*(h+j) + ln(k)
+     * k is in the range 2/3 < k <4/3 and is passed on to a series expansion.
+     * @param a number from which logarithm is requested
+     * @return log(a)
+     */
+    public static Dfp log(Dfp a) {
+        int lr;
+        Dfp x;
+        int ix;
+        int p2 = 0;
+
+        // Check the arguments somewhat here
+        if (a.equals(a.getZero()) || a.lessThan(a.getZero()) || (a.equals(a) == false)) {
+            // negative, zero or NaN
+            a.getField().setIEEEFlagsBits(DfpField.FLAG_INVALID);
+            return a.dotrap(DfpField.FLAG_INVALID, "ln", a, a.newInstance((byte)1, (byte) Dfp.QNAN));
+        }
+
+        if (a.classify() == Dfp.INFINITE) {
+            return a;
+        }
+
+        x = new Dfp(a);
+        lr = x.log10K();
+
+        x = x.divide(pow(a.newInstance(10000), lr));  /* This puts x in the range 0-10000 */
+        ix = x.floor().intValue();
+
+        while (ix > 2) {
+            ix >>= 1;
+            p2++;
+        }
+
+
+        Dfp[] spx = split(x);
+        Dfp[] spy = new Dfp[2];
+        spy[0] = pow(a.getTwo(), p2);          // use spy[0] temporarily as a divisor
+        spx[0] = spx[0].divide(spy[0]);
+        spx[1] = spx[1].divide(spy[0]);
+
+        spy[0] = a.newInstance("1.33333");    // Use spy[0] for comparison
+        while (spx[0].add(spx[1]).greaterThan(spy[0])) {
+            spx[0] = spx[0].divide(2);
+            spx[1] = spx[1].divide(2);
+            p2++;
+        }
+
+        // X is now in the range of 2/3 < x < 4/3
+        Dfp[] spz = logInternal(spx);
+
+        spx[0] = a.newInstance(new StringBuffer().append(p2+4*lr).toString());
+        spx[1] = a.getZero();
+        spy = splitMult(a.getField().getLn2Split(), spx);
+
+        spz[0] = spz[0].add(spy[0]);
+        spz[1] = spz[1].add(spy[1]);
+
+        spx[0] = a.newInstance(new StringBuffer().append(4*lr).toString());
+        spx[1] = a.getZero();
+        spy = splitMult(a.getField().getLn5Split(), spx);
+
+        spz[0] = spz[0].add(spy[0]);
+        spz[1] = spz[1].add(spy[1]);
+
+        return a.newInstance(spz[0].add(spz[1]));
+
+    }
+
+    /** Computes the natural log of a number between 0 and 2.
+     *  Let f(x) = ln(x),
+     *
+     *  We know that f'(x) = 1/x, thus from Taylor's theorum we have:
+     *
+     *           -----          n+1         n
+     *  f(x) =   \           (-1)    (x - 1)
+     *           /          ----------------    for 1 <= n <= infinity
+     *           -----             n
+     *
+     *  or
+     *                       2        3       4
+     *                   (x-1)   (x-1)    (x-1)
+     *  ln(x) =  (x-1) - ----- + ------ - ------ + ...
+     *                     2       3        4
+     *
+     *  alternatively,
+     *
+     *                  2    3   4
+     *                 x    x   x
+     *  ln(x+1) =  x - -  + - - - + ...
+     *                 2    3   4
+     *
+     *  This series can be used to compute ln(x), but it converges too slowly.
+     *
+     *  If we substitute -x for x above, we get
+     *
+     *                   2    3    4
+     *                  x    x    x
+     *  ln(1-x) =  -x - -  - -  - - + ...
+     *                  2    3    4
+     *
+     *  Note that all terms are now negative.  Because the even powered ones
+     *  absorbed the sign.  Now, subtract the series above from the previous
+     *  one to get ln(x+1) - ln(1-x).  Note the even terms cancel out leaving
+     *  only the odd ones
+     *
+     *                             3     5      7
+     *                           2x    2x     2x
+     *  ln(x+1) - ln(x-1) = 2x + --- + --- + ---- + ...
+     *                            3     5      7
+     *
+     *  By the property of logarithms that ln(a) - ln(b) = ln (a/b) we have:
+     *
+     *                                3        5        7
+     *      x+1           /          x        x        x          \
+     *  ln ----- =   2 *  |  x  +   ----  +  ----  +  ---- + ...  |
+     *      x-1           \          3        5        7          /
+     *
+     *  But now we want to find ln(a), so we need to find the value of x
+     *  such that a = (x+1)/(x-1).   This is easily solved to find that
+     *  x = (a-1)/(a+1).
+     * @param a number from which logarithm is requested, in split form
+     * @return log(a)
+     */
+    protected static Dfp[] logInternal(final Dfp a[]) {
+
+        /* Now we want to compute x = (a-1)/(a+1) but this is prone to
+         * loss of precision.  So instead, compute x = (a/4 - 1/4) / (a/4 + 1/4)
+         */
+        Dfp t = a[0].divide(4).add(a[1].divide(4));
+        Dfp x = t.add(a[0].newInstance("-0.25")).divide(t.add(a[0].newInstance("0.25")));
+
+        Dfp y = new Dfp(x);
+        Dfp num = new Dfp(x);
+        Dfp py = new Dfp(y);
+        int den = 1;
+        for (int i = 0; i < 10000; i++) {
+            num = num.multiply(x);
+            num = num.multiply(x);
+            den = den + 2;
+            t = num.divide(den);
+            y = y.add(t);
+            if (y.equals(py)) {
+                break;
+            }
+            py = new Dfp(y);
+        }
+
+        y = y.multiply(a[0].getTwo());
+
+        return split(y);
+
+    }
+
+    /** Computes x to the y power.<p>
+     *
+     *  Uses the following method:<p>
+     *
+     *  <ol>
+     *  <li> Set u = rint(y), v = y-u
+     *  <li> Compute a = v * ln(x)
+     *  <li> Compute b = rint( a/ln(2) )
+     *  <li> Compute c = a - b*ln(2)
+     *  <li> x<sup>y</sup> = x<sup>u</sup>  *   2<sup>b</sup> * e<sup>c</sup>
+     *  </ol>
+     *  if |y| > 1e8, then we compute by exp(y*ln(x))   <p>
+     *
+     *  <b>Special Cases</b><p>
+     *  <ul>
+     *  <li>  if y is 0.0 or -0.0 then result is 1.0
+     *  <li>  if y is 1.0 then result is x
+     *  <li>  if y is NaN then result is NaN
+     *  <li>  if x is NaN and y is not zero then result is NaN
+     *  <li>  if |x| > 1.0 and y is +Infinity then result is +Infinity
+     *  <li>  if |x| < 1.0 and y is -Infinity then result is +Infinity
+     *  <li>  if |x| > 1.0 and y is -Infinity then result is +0
+     *  <li>  if |x| < 1.0 and y is +Infinity then result is +0
+     *  <li>  if |x| = 1.0 and y is +/-Infinity then result is NaN
+     *  <li>  if x = +0 and y > 0 then result is +0
+     *  <li>  if x = +Inf and y < 0 then result is +0
+     *  <li>  if x = +0 and y < 0 then result is +Inf
+     *  <li>  if x = +Inf and y > 0 then result is +Inf
+     *  <li>  if x = -0 and y > 0, finite, not odd integer then result is +0
+     *  <li>  if x = -0 and y < 0, finite, and odd integer then result is -Inf
+     *  <li>  if x = -Inf and y > 0, finite, and odd integer then result is -Inf
+     *  <li>  if x = -0 and y < 0, not finite odd integer then result is +Inf
+     *  <li>  if x = -Inf and y > 0, not finite odd integer then result is +Inf
+     *  <li>  if x < 0 and y > 0, finite, and odd integer then result is -(|x|<sup>y</sup>)
+     *  <li>  if x < 0 and y > 0, finite, and not integer then result is NaN
+     *  </ul>
+     *  @param x base to be raised
+     *  @param y power to which base should be raised
+     *  @return x<sup>y</sup>
+     */
+    public static Dfp pow(Dfp x, final Dfp y) {
+
+        // make sure we don't mix number with different precision
+        if (x.getField().getRadixDigits() != y.getField().getRadixDigits()) {
+            x.getField().setIEEEFlagsBits(DfpField.FLAG_INVALID);
+            final Dfp result = x.newInstance(x.getZero());
+            result.nans = Dfp.QNAN;
+            return x.dotrap(DfpField.FLAG_INVALID, POW_TRAP, x, result);
+        }
+
+        final Dfp zero = x.getZero();
+        final Dfp one  = x.getOne();
+        final Dfp two  = x.getTwo();
+        boolean invert = false;
+        int ui;
+
+        /* Check for special cases */
+        if (y.equals(zero)) {
+            return x.newInstance(one);
+        }
+
+        if (y.equals(one)) {
+            if (!x.equals(x)) {
+                // Test for NaNs
+                x.getField().setIEEEFlagsBits(DfpField.FLAG_INVALID);
+                return x.dotrap(DfpField.FLAG_INVALID, POW_TRAP, x, x);
+            }
+            return x;
+        }
+
+        if (!x.equals(x) || !y.equals(y)) {
+            // Test for NaNs
+            x.getField().setIEEEFlagsBits(DfpField.FLAG_INVALID);
+            return x.dotrap(DfpField.FLAG_INVALID, POW_TRAP, x, x.newInstance((byte)1, (byte) Dfp.QNAN));
+        }
+
+        // X == 0
+        if (x.equals(zero)) {
+            if (Dfp.copysign(one, x).greaterThan(zero)) {
+                // X == +0
+                if (y.greaterThan(zero)) {
+                    return x.newInstance(zero);
+                } else {
+                    return x.newInstance(x.newInstance((byte)1, (byte)Dfp.INFINITE));
+                }
+            } else {
+                // X == -0
+                if (y.classify() == Dfp.FINITE && y.rint().equals(y) && !y.remainder(two).equals(zero)) {
+                    // If y is odd integer
+                    if (y.greaterThan(zero)) {
+                        return x.newInstance(zero.negate());
+                    } else {
+                        return x.newInstance(x.newInstance((byte)-1, (byte)Dfp.INFINITE));
+                    }
+                } else {
+                    // Y is not odd integer
+                    if (y.greaterThan(zero)) {
+                        return x.newInstance(zero);
+                    } else {
+                        return x.newInstance(x.newInstance((byte)1, (byte)Dfp.INFINITE));
+                    }
+                }
+            }
+        }
+
+        if (x.lessThan(zero)) {
+            // Make x positive, but keep track of it
+            x = x.negate();
+            invert = true;
+        }
+
+        if (x.greaterThan(one) && y.classify() == Dfp.INFINITE) {
+            if (y.greaterThan(zero)) {
+                return y;
+            } else {
+                return x.newInstance(zero);
+            }
+        }
+
+        if (x.lessThan(one) && y.classify() == Dfp.INFINITE) {
+            if (y.greaterThan(zero)) {
+                return x.newInstance(zero);
+            } else {
+                return x.newInstance(Dfp.copysign(y, one));
+            }
+        }
+
+        if (x.equals(one) && y.classify() == Dfp.INFINITE) {
+            x.getField().setIEEEFlagsBits(DfpField.FLAG_INVALID);
+            return x.dotrap(DfpField.FLAG_INVALID, POW_TRAP, x, x.newInstance((byte)1, (byte) Dfp.QNAN));
+        }
+
+        if (x.classify() == Dfp.INFINITE) {
+            // x = +/- inf
+            if (invert) {
+                // negative infinity
+                if (y.classify() == Dfp.FINITE && y.rint().equals(y) && !y.remainder(two).equals(zero)) {
+                    // If y is odd integer
+                    if (y.greaterThan(zero)) {
+                        return x.newInstance(x.newInstance((byte)-1, (byte)Dfp.INFINITE));
+                    } else {
+                        return x.newInstance(zero.negate());
+                    }
+                } else {
+                    // Y is not odd integer
+                    if (y.greaterThan(zero)) {
+                        return x.newInstance(x.newInstance((byte)1, (byte)Dfp.INFINITE));
+                    } else {
+                        return x.newInstance(zero);
+                    }
+                }
+            } else {
+                // positive infinity
+                if (y.greaterThan(zero)) {
+                    return x;
+                } else {
+                    return x.newInstance(zero);
+                }
+            }
+        }
+
+        if (invert && !y.rint().equals(y)) {
+            x.getField().setIEEEFlagsBits(DfpField.FLAG_INVALID);
+            return x.dotrap(DfpField.FLAG_INVALID, POW_TRAP, x, x.newInstance((byte)1, (byte) Dfp.QNAN));
+        }
+
+        // End special cases
+
+        Dfp r;
+        if (y.lessThan(x.newInstance(100000000)) && y.greaterThan(x.newInstance(-100000000))) {
+            final Dfp u = y.rint();
+            ui = u.intValue();
+
+            final Dfp v = y.subtract(u);
+
+            if (v.unequal(zero)) {
+                final Dfp a = v.multiply(log(x));
+                final Dfp b = a.divide(x.getField().getLn2()).rint();
+
+                final Dfp c = a.subtract(b.multiply(x.getField().getLn2()));
+                r = splitPow(split(x), ui);
+                r = r.multiply(pow(two, b.intValue()));
+                r = r.multiply(exp(c));
+            } else {
+                r = splitPow(split(x), ui);
+            }
+        } else {
+            // very large exponent.  |y| > 1e8
+            r = exp(log(x).multiply(y));
+        }
+
+        if (invert) {
+            // if y is odd integer
+            if (y.rint().equals(y) && !y.remainder(two).equals(zero)) {
+                r = r.negate();
+            }
+        }
+
+        return x.newInstance(r);
+
+    }
+
+    /** Computes sin(a)  Used when 0 < a < pi/4.
+     * Uses the classic Taylor series.  x - x**3/3! + x**5/5!  ...
+     * @param a number from which sine is desired, in split form
+     * @return sin(a)
+     */
+    protected static Dfp sinInternal(Dfp a[]) {
+
+        Dfp c = a[0].add(a[1]);
+        Dfp y = c;
+        c = c.multiply(c);
+        Dfp x = y;
+        Dfp fact = a[0].getOne();
+        Dfp py = new Dfp(y);
+
+        for (int i = 3; i < 90; i += 2) {
+            x = x.multiply(c);
+            x = x.negate();
+
+            fact = fact.divide((i-1)*i);  // 1 over fact
+            y = y.add(x.multiply(fact));
+            if (y.equals(py))
+                break;
+            py = new Dfp(y);
+        }
+
+        return y;
+
+    }
+
+    /** Computes cos(a)  Used when 0 < a < pi/4.
+     * Uses the classic Taylor series for cosine.  1 - x**2/2! + x**4/4!  ...
+     * @param a number from which cosine is desired, in split form
+     * @return cos(a)
+     */
+    protected static Dfp cosInternal(Dfp a[]) {
+        final Dfp one = a[0].getOne();
+
+
+        Dfp x = one;
+        Dfp y = one;
+        Dfp c = a[0].add(a[1]);
+        c = c.multiply(c);
+
+        Dfp fact = one;
+        Dfp py = new Dfp(y);
+
+        for (int i = 2; i < 90; i += 2) {
+            x = x.multiply(c);
+            x = x.negate();
+
+            fact = fact.divide((i - 1) * i);  // 1 over fact
+
+            y = y.add(x.multiply(fact));
+            if (y.equals(py)) {
+                break;
+            }
+            py = new Dfp(y);
+        }
+
+        return y;
+
+    }
+
+    /** computes the sine of the argument.
+     * @param a number from which sine is desired
+     * @return sin(a)
+     */
+    public static Dfp sin(final Dfp a) {
+        final Dfp pi = a.getField().getPi();
+        final Dfp zero = a.getField().getZero();
+        boolean neg = false;
+
+        /* First reduce the argument to the range of +/- PI */
+        Dfp x = a.remainder(pi.multiply(2));
+
+        /* if x < 0 then apply identity sin(-x) = -sin(x) */
+        /* This puts x in the range 0 < x < PI            */
+        if (x.lessThan(zero)) {
+            x = x.negate();
+            neg = true;
+        }
+
+        /* Since sine(x) = sine(pi - x) we can reduce the range to
+         * 0 < x < pi/2
+         */
+
+        if (x.greaterThan(pi.divide(2))) {
+            x = pi.subtract(x);
+        }
+
+        Dfp y;
+        if (x.lessThan(pi.divide(4))) {
+            Dfp c[] = new Dfp[2];
+            c[0] = x;
+            c[1] = zero;
+
+            //y = sinInternal(c);
+            y = sinInternal(split(x));
+        } else {
+            final Dfp c[] = new Dfp[2];
+            final Dfp[] piSplit = a.getField().getPiSplit();
+            c[0] = piSplit[0].divide(2).subtract(x);
+            c[1] = piSplit[1].divide(2);
+            y = cosInternal(c);
+        }
+
+        if (neg) {
+            y = y.negate();
+        }
+
+        return a.newInstance(y);
+
+    }
+
+    /** computes the cosine of the argument.
+     * @param a number from which cosine is desired
+     * @return cos(a)
+     */
+    public static Dfp cos(Dfp a) {
+        final Dfp pi = a.getField().getPi();
+        final Dfp zero = a.getField().getZero();
+        boolean neg = false;
+
+        /* First reduce the argument to the range of +/- PI */
+        Dfp x = a.remainder(pi.multiply(2));
+
+        /* if x < 0 then apply identity cos(-x) = cos(x) */
+        /* This puts x in the range 0 < x < PI           */
+        if (x.lessThan(zero)) {
+            x = x.negate();
+        }
+
+        /* Since cos(x) = -cos(pi - x) we can reduce the range to
+         * 0 < x < pi/2
+         */
+
+        if (x.greaterThan(pi.divide(2))) {
+            x = pi.subtract(x);
+            neg = true;
+        }
+
+        Dfp y;
+        if (x.lessThan(pi.divide(4))) {
+            Dfp c[] = new Dfp[2];
+            c[0] = x;
+            c[1] = zero;
+
+            y = cosInternal(c);
+        } else {
+            final Dfp c[] = new Dfp[2];
+            final Dfp[] piSplit = a.getField().getPiSplit();
+            c[0] = piSplit[0].divide(2).subtract(x);
+            c[1] = piSplit[1].divide(2);
+            y = sinInternal(c);
+        }
+
+        if (neg) {
+            y = y.negate();
+        }
+
+        return a.newInstance(y);
+
+    }
+
+    /** computes the tangent of the argument.
+     * @param a number from which tangent is desired
+     * @return tan(a)
+     */
+    public static Dfp tan(final Dfp a) {
+        return sin(a).divide(cos(a));
+    }
+
+    /** computes the arc-tangent of the argument.
+     * @param a number from which arc-tangent is desired
+     * @return atan(a)
+     */
+    protected static Dfp atanInternal(final Dfp a) {
+
+        Dfp y = new Dfp(a);
+        Dfp x = new Dfp(y);
+        Dfp py = new Dfp(y);
+
+        for (int i = 3; i < 90; i += 2) {
+            x = x.multiply(a);
+            x = x.multiply(a);
+            x = x.negate();
+            y = y.add(x.divide(i));
+            if (y.equals(py)) {
+                break;
+            }
+            py = new Dfp(y);
+        }
+
+        return y;
+
+    }
+
+    /** computes the arc tangent of the argument
+     *
+     *  Uses the typical taylor series
+     *
+     *  but may reduce arguments using the following identity
+     * tan(x+y) = (tan(x) + tan(y)) / (1 - tan(x)*tan(y))
+     *
+     * since tan(PI/8) = sqrt(2)-1,
+     *
+     * atan(x) = atan( (x - sqrt(2) + 1) / (1+x*sqrt(2) - x) + PI/8.0
+     * @param a number from which arc-tangent is desired
+     * @return atan(a)
+     */
+    public static Dfp atan(final Dfp a) {
+        final Dfp   zero      = a.getField().getZero();
+        final Dfp   one       = a.getField().getOne();
+        final Dfp[] sqr2Split = a.getField().getSqr2Split();
+        final Dfp[] piSplit   = a.getField().getPiSplit();
+        boolean recp = false;
+        boolean neg = false;
+        boolean sub = false;
+
+        final Dfp ty = sqr2Split[0].subtract(one).add(sqr2Split[1]);
+
+        Dfp x = new Dfp(a);
+        if (x.lessThan(zero)) {
+            neg = true;
+            x = x.negate();
+        }
+
+        if (x.greaterThan(one)) {
+            recp = true;
+            x = one.divide(x);
+        }
+
+        if (x.greaterThan(ty)) {
+            Dfp sty[] = new Dfp[2];
+            sub = true;
+
+            sty[0] = sqr2Split[0].subtract(one);
+            sty[1] = sqr2Split[1];
+
+            Dfp[] xs = split(x);
+
+            Dfp[] ds = splitMult(xs, sty);
+            ds[0] = ds[0].add(one);
+
+            xs[0] = xs[0].subtract(sty[0]);
+            xs[1] = xs[1].subtract(sty[1]);
+
+            xs = splitDiv(xs, ds);
+            x = xs[0].add(xs[1]);
+
+            //x = x.subtract(ty).divide(dfp.one.add(x.multiply(ty)));
+        }
+
+        Dfp y = atanInternal(x);
+
+        if (sub) {
+            y = y.add(piSplit[0].divide(8)).add(piSplit[1].divide(8));
+        }
+
+        if (recp) {
+            y = piSplit[0].divide(2).subtract(y).add(piSplit[1].divide(2));
+        }
+
+        if (neg) {
+            y = y.negate();
+        }
+
+        return a.newInstance(y);
+
+    }
+
+    /** computes the arc-sine of the argument.
+     * @param a number from which arc-sine is desired
+     * @return asin(a)
+     */
+    public static Dfp asin(final Dfp a) {
+        return atan(a.divide(a.getOne().subtract(a.multiply(a)).sqrt()));
+    }
+
+    /** computes the arc-cosine of the argument.
+     * @param a number from which arc-cosine is desired
+     * @return acos(a)
+     */
+    public static Dfp acos(Dfp a) {
+        Dfp result;
+        boolean negative = false;
+
+        if (a.lessThan(a.getZero())) {
+            negative = true;
+        }
+
+        a = Dfp.copysign(a, a.getOne());  // absolute value
+
+        result = atan(a.getOne().subtract(a.multiply(a)).sqrt().divide(a));
+
+        if (negative) {
+            result = a.getField().getPi().subtract(result);
+        }
+
+        return a.newInstance(result);
+    }
+
+}
diff --git a/src/main/java/org/apache/commons/math/dfp/package.html b/src/main/java/org/apache/commons/math/dfp/package.html
new file mode 100644
index 0000000..767e7e3
--- /dev/null
+++ b/src/main/java/org/apache/commons/math/dfp/package.html
@@ -0,0 +1,88 @@
+<html>
+<!--
+   Licensed to the Apache Software Foundation (ASF) under one or more
+  contributor license agreements.  See the NOTICE file distributed with
+  this work for additional information regarding copyright ownership.
+  The ASF licenses this file to You under the Apache License, Version 2.0
+  (the "License"); you may not use this file except in compliance with
+  the License.  You may obtain a copy of the License at
+
+       http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+  -->
+    <!-- $Revision$ $Date$ -->
+    <body>
+Decimal floating point library for Java
+
+<p>Another floating point class.  This one is built using radix 10000
+which is 10<sup>4</sup>, so its almost decimal.</p>
+
+<p>The design goals here are:
+<ol>
+  <li>Decimal math, or close to it</li>
+  <li>Settable precision (but no mix between numbers using different settings)</li>
+  <li>Portability.  Code should be keep as portable as possible.</li>
+  <li>Performance</li>
+  <li>Accuracy  - Results should always be +/- 1 ULP for basic
+       algebraic operation</li>
+  <li>Comply with IEEE 854-1987 as much as possible.
+       (See IEEE 854-1987 notes below)</li>
+</ol></p>
+
+<p>Trade offs:
+<ol>
+  <li>Memory foot print.  I'm using more memory than necessary to
+       represent numbers to get better performance.</li>
+  <li>Digits are bigger, so rounding is a greater loss.  So, if you
+       really need 12 decimal digits, better use 4 base 10000 digits
+       there can be one partially filled.</li>
+</ol></p>
+
+<p>Numbers are represented  in the following form:
+<pre>
+n  =  sign &times; mant &times; (radix)<sup>exp</sup>;</p>
+</pre>
+where sign is &plusmn;1, mantissa represents a fractional number between
+zero and one.  mant[0] is the least significant digit.
+exp is in the range of -32767 to 32768</p>
+
+<p>IEEE 854-1987  Notes and differences</p>
+
+<p>IEEE 854 requires the radix to be either 2 or 10.  The radix here is
+10000, so that requirement is not met, but  it is possible that a
+subclassed can be made to make it behave as a radix 10
+number.  It is my opinion that if it looks and behaves as a radix
+10 number then it is one and that requirement would be met.</p>
+
+<p>The radix of 10000 was chosen because it should be faster to operate
+on 4 decimal digits at once instead of one at a time.  Radix 10 behavior
+can be realized by add an additional rounding step to ensure that
+the number of decimal digits represented is constant.</p>
+
+<p>The IEEE standard specifically leaves out internal data encoding,
+so it is reasonable to conclude that such a subclass of this radix
+10000 system is merely an encoding of a radix 10 system.</p>
+
+<p>IEEE 854 also specifies the existence of "sub-normal" numbers.  This
+class does not contain any such entities.  The most significant radix
+10000 digit is always non-zero.  Instead, we support "gradual underflow"
+by raising the underflow flag for numbers less with exponent less than
+expMin, but don't flush to zero until the exponent reaches MIN_EXP-digits.
+Thus the smallest number we can represent would be:
+1E(-(MIN_EXP-digits-1)*4),  eg, for digits=5, MIN_EXP=-32767, that would
+be 1e-131092.</p>
+
+<p>IEEE 854 defines that the implied radix point lies just to the right
+of the most significant digit and to the left of the remaining digits.
+This implementation puts the implied radix point to the left of all
+digits including the most significant one.  The most significant digit
+here is the one just to the right of the radix point.  This is a fine
+detail and is really only a matter of definition.  Any side effects of
+this can be rendered invisible by a subclass.</p>
+    </body>
+</html>
diff --git a/src/site/xdoc/changes.xml b/src/site/xdoc/changes.xml
index bf6d411..e710753 100644
--- a/src/site/xdoc/changes.xml
+++ b/src/site/xdoc/changes.xml
@@ -71,6 +71,13 @@
       </action>
     </release>
     <release version="2.2" date="TBD" description="TBD">
+      <action dev="luc" type="fix" issue="MATH-412" due-to="Bill Rossi">
+        Added the dfp library providing arbitrary precision floating point computation in the spirit of
+        IEEE 854-1987 (not exactly as it uses base 1000 instead of base 10). In addition to finite numbers,
+        infinities and NaNs are available (but there are no subnormals). All IEEE 854-1987 rounding modes and
+        signaling flags are supported. The available operations are +, -, *, / and the available functions
+        are sqrt, sin, cos, tan, asin, acos, atan, exp, log.
+      </action>
       <action dev="luc" type="fix" issue="MATH-375" due-to="Bill Rossi">
         Added faster and more accurate version of traditional mathematical functions in a FastMath
         class intended to be a drop-in replacement for java.util.Math at source-level. Some functions
diff --git a/src/test/java/org/apache/commons/math/dfp/Decimal10.java b/src/test/java/org/apache/commons/math/dfp/Decimal10.java
new file mode 100644
index 0000000..68cb19e
--- /dev/null
+++ b/src/test/java/org/apache/commons/math/dfp/Decimal10.java
@@ -0,0 +1,90 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.commons.math.dfp;
+
+public class Decimal10 extends DfpDec {
+
+    Decimal10(final DfpField factory) {
+        super(factory);
+    }
+
+    Decimal10(final DfpField factory, final byte x) {
+        super(factory, x);
+    }
+
+    Decimal10(final DfpField factory, final int x) {
+        super(factory, x);
+    }
+
+    Decimal10(final DfpField factory, final long x) {
+        super(factory, x);
+    }
+
+    Decimal10(final DfpField factory, final double x) {
+        super(factory, x);
+    }
+
+    public Decimal10(final Dfp d) {
+        super(d);
+    }
+
+    public Decimal10(final DfpField factory, final String s) {
+        super(factory, s);
+    }
+
+    protected Decimal10(final DfpField factory, final byte sign, final byte nans) {
+        super(factory, sign, nans);
+    }
+
+    public Dfp newInstance() {
+        return new Decimal10(getField());
+    }
+
+    public Dfp newInstance(final byte x) {
+        return new Decimal10(getField(), x);
+    }
+
+    public Dfp newInstance(final int x) {
+        return new Decimal10(getField(), x);
+    }
+
+    public Dfp newInstance(final long x) {
+        return new Decimal10(getField(), x);
+    }
+
+    public Dfp newInstance(final double x) {
+        return new Decimal10(getField(), x);
+    }
+
+    public Dfp newInstance(final Dfp d) {
+        return new Decimal10(d);
+    }
+
+    public Dfp newInstance(final String s) {
+        return new Decimal10(getField(), s);
+    }
+
+    public Dfp newInstance(final byte sign, final byte nans) {
+        return new Decimal10(getField(), sign, nans);
+    }
+
+    protected int getDecimalDigits() {
+        return 10;
+    }
+
+}
diff --git a/src/test/java/org/apache/commons/math/dfp/DfpDecTest.java b/src/test/java/org/apache/commons/math/dfp/DfpDecTest.java
new file mode 100644
index 0000000..90f299a
--- /dev/null
+++ b/src/test/java/org/apache/commons/math/dfp/DfpDecTest.java
@@ -0,0 +1,574 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.commons.math.dfp;
+
+import org.junit.After;
+import org.junit.Assert;
+import org.junit.Before;
+import org.junit.Test;
+
+public class DfpDecTest {
+
+    private DfpField field;
+    private Dfp pinf;
+    private Dfp ninf;
+    private Dfp nan;
+    private Dfp snan;
+    private Dfp qnan;
+
+    @Before
+    public void setUp() {
+        // Some basic setup.  Define some constants and clear the status flags
+        field = new DfpField(20);
+        pinf = new DfpDec(field, 1).divide(new DfpDec(field, 0));
+        ninf = new DfpDec(field, -1).divide(new DfpDec(field, 0));
+        nan = new DfpDec(field, 0).divide(new DfpDec(field, 0));
+        snan = field.newDfp((byte)1, Dfp.SNAN);
+        qnan = field.newDfp((byte)1, Dfp.QNAN);
+        ninf.getField().clearIEEEFlags();
+    }
+
+    @After
+    public void tearDown() {
+        field = null;
+        pinf    = null;
+        ninf    = null;
+        nan     = null;
+        snan    = null;
+        qnan    = null;
+    }
+
+    // Generic test function.  Takes params x and y and tests them for 
+    // equality.  Then checks the status flags against the flags argument.
+    // If the test fail, it prints the desc string
+    private void test(Dfp x, Dfp y, int flags, String desc) {
+        boolean b = x.equals(y);
+
+        if (!x.equals(y) && !x.unequal(y))  // NaNs involved 
+            b = (x.toString().equals(y.toString()));
+
+        if (x.equals(new DfpDec(field, 0)))  // distinguish +/- zero
+            b = (b && (x.toString().equals(y.toString())));
+
+        b = (b && x.getField().getIEEEFlags() == flags);
+
+        if (!b)
+            Assert.assertTrue("assersion failed "+desc+" x = "+x.toString()+" flags = "+x.getField().getIEEEFlags(), b);
+
+        x.getField().clearIEEEFlags();
+    }
+
+    @Test
+    public void testRound()
+    {
+        field.setRoundingMode(DfpField.RoundingMode.ROUND_HALF_EVEN);
+
+        test(new DfpDec(field, "12345678901234567890"),
+             new DfpDec(field, "12345678901234568000"),
+             DfpField.FLAG_INEXACT, "Round #1");
+
+        test(new DfpDec(field, "0.12345678901234567890"),
+             new DfpDec(field, "0.12345678901234568"),
+             DfpField.FLAG_INEXACT, "Round #2");
+
+        test(new DfpDec(field, "0.12345678901234567500"),
+             new DfpDec(field, "0.12345678901234568"),
+             DfpField.FLAG_INEXACT, "Round #3");
+
+        test(new DfpDec(field, "0.12345678901234568500"),
+             new DfpDec(field, "0.12345678901234568"),
+             DfpField.FLAG_INEXACT, "Round #4");
+
+        test(new DfpDec(field, "0.12345678901234568501"),
+             new DfpDec(field, "0.12345678901234569"),
+             DfpField.FLAG_INEXACT, "Round #5");
+
+        test(new DfpDec(field, "0.12345678901234568499"),
+             new DfpDec(field, "0.12345678901234568"),
+             DfpField.FLAG_INEXACT, "Round #6");
+
+        test(new DfpDec(field, "1.2345678901234567890"),
+             new DfpDec(field, "1.2345678901234568"),
+             DfpField.FLAG_INEXACT, "Round #7");
+
+        test(new DfpDec(field, "1.2345678901234567500"),
+             new DfpDec(field, "1.2345678901234568"),
+             DfpField.FLAG_INEXACT, "Round #8");
+
+        test(new DfpDec(field, "1.2345678901234568500"),
+             new DfpDec(field, "1.2345678901234568"),
+             DfpField.FLAG_INEXACT, "Round #9");
+
+        test(new DfpDec(field, "1.2345678901234568000").add(new DfpDec(field, ".0000000000000000501")),
+             new DfpDec(field, "1.2345678901234569"),
+             DfpField.FLAG_INEXACT, "Round #10");
+
+        test(new DfpDec(field, "1.2345678901234568499"),
+             new DfpDec(field, "1.2345678901234568"),
+             DfpField.FLAG_INEXACT, "Round #11");
+
+        test(new DfpDec(field, "12.345678901234567890"),
+             new DfpDec(field, "12.345678901234568"),
+             DfpField.FLAG_INEXACT, "Round #12");
+
+        test(new DfpDec(field, "12.345678901234567500"),
+             new DfpDec(field, "12.345678901234568"),
+             DfpField.FLAG_INEXACT, "Round #13");
+
+        test(new DfpDec(field, "12.345678901234568500"),
+             new DfpDec(field, "12.345678901234568"),
+             DfpField.FLAG_INEXACT, "Round #14");
+
+        test(new DfpDec(field, "12.345678901234568").add(new DfpDec(field, ".000000000000000501")),
+             new DfpDec(field, "12.345678901234569"),
+             DfpField.FLAG_INEXACT, "Round #15");
+
+        test(new DfpDec(field, "12.345678901234568499"),
+             new DfpDec(field, "12.345678901234568"),
+             DfpField.FLAG_INEXACT, "Round #16");
+
+        test(new DfpDec(field, "123.45678901234567890"),
+             new DfpDec(field, "123.45678901234568"),
+             DfpField.FLAG_INEXACT, "Round #17");
+
+        test(new DfpDec(field, "123.45678901234567500"),
+             new DfpDec(field, "123.45678901234568"),
+             DfpField.FLAG_INEXACT, "Round #18");
+
+        test(new DfpDec(field, "123.45678901234568500"),
+             new DfpDec(field, "123.45678901234568"),
+             DfpField.FLAG_INEXACT, "Round #19");
+
+        test(new DfpDec(field, "123.456789012345685").add(new DfpDec(field, ".00000000000000501")),
+             new DfpDec(field, "123.45678901234569"),
+             DfpField.FLAG_INEXACT, "Round #20");
+
+        test(new DfpDec(field, "123.45678901234568499"),
+             new DfpDec(field, "123.45678901234568"),
+             DfpField.FLAG_INEXACT, "Round #21");
+
+        field.setRoundingMode(DfpField.RoundingMode.ROUND_DOWN);
+
+        // Round down
+        test(new DfpDec(field, "12345678901234567").add(new DfpDec(field, "0.9")),
+             new DfpDec(field, "12345678901234567"),
+             DfpField.FLAG_INEXACT, "Round #22");
+
+        test(new DfpDec(field, "12345678901234567").add(new DfpDec(field, "0.99999999")),
+             new DfpDec(field, "12345678901234567"),
+             DfpField.FLAG_INEXACT, "Round #23");
+
+        test(new DfpDec(field, "-12345678901234567").add(new DfpDec(field, "-0.99999999")),
+             new DfpDec(field, "-12345678901234567"),
+             DfpField.FLAG_INEXACT, "Round #24");
+
+        field.setRoundingMode(DfpField.RoundingMode.ROUND_UP);
+
+        // Round up
+        test(new DfpDec(field, "12345678901234567").add(new DfpDec(field, "0.1")),
+             new DfpDec(field, "12345678901234568"),
+             DfpField.FLAG_INEXACT, "Round #25");
+
+        test(new DfpDec(field, "12345678901234567").add(new DfpDec(field, "0.0001")),
+             new DfpDec(field, "12345678901234568"),
+             DfpField.FLAG_INEXACT, "Round #26");
+
+        test(new DfpDec(field, "-12345678901234567").add(new DfpDec(field, "-0.1")),
+             new DfpDec(field, "-12345678901234568"),
+             DfpField.FLAG_INEXACT, "Round #27");
+
+        test(new DfpDec(field, "-12345678901234567").add(new DfpDec(field, "-0.0001")),
+             new DfpDec(field, "-12345678901234568"),
+             DfpField.FLAG_INEXACT, "Round #28");
+
+        test(new DfpDec(field, "-12345678901234567").add(new DfpDec(field, "0")),
+             new DfpDec(field, "-12345678901234567"),
+             0, "Round #28.5");
+
+        field.setRoundingMode(DfpField.RoundingMode.ROUND_HALF_UP);
+
+        // Round half up
+        test(new DfpDec(field, "12345678901234567").add(new DfpDec(field, "0.499999999999")),
+             new DfpDec(field, "12345678901234567"),
+             DfpField.FLAG_INEXACT, "Round #29");
+
+        test(new DfpDec(field, "12345678901234567").add(new DfpDec(field, "0.50000001")),
+             new DfpDec(field, "12345678901234568"),
+             DfpField.FLAG_INEXACT, "Round #30");
+
+        test(new DfpDec(field, "12345678901234567").add(new DfpDec(field, "0.5")),
+             new DfpDec(field, "12345678901234568"),
+             DfpField.FLAG_INEXACT, "Round #30.5");
+
+        test(new DfpDec(field, "-12345678901234567").add(new DfpDec(field, "-0.499999999999")),
+             new DfpDec(field, "-12345678901234567"),
+             DfpField.FLAG_INEXACT, "Round #31");
+
+        test(new DfpDec(field, "-12345678901234567").add(new DfpDec(field, "-0.50000001")),
+             new DfpDec(field, "-12345678901234568"),
+             DfpField.FLAG_INEXACT, "Round #32");
+
+        field.setRoundingMode(DfpField.RoundingMode.ROUND_HALF_DOWN);
+
+        // Round half down
+        test(new DfpDec(field, "12345678901234567").add(new DfpDec(field, "0.5001")),
+             new DfpDec(field, "12345678901234568"),
+             DfpField.FLAG_INEXACT, "Round #33");
+
+        test(new DfpDec(field, "12345678901234567").add(new DfpDec(field, "0.5000")),
+             new DfpDec(field, "12345678901234567"),
+             DfpField.FLAG_INEXACT, "Round #34");
+
+        test(new DfpDec(field, "-12345678901234567").add(new DfpDec(field, "-0.5001")),
+             new DfpDec(field, "-12345678901234568"),
+             DfpField.FLAG_INEXACT, "Round #35");
+
+        test(new DfpDec(field, "-12345678901234567").add(new DfpDec(field, "-0.6")),
+             new DfpDec(field, "-12345678901234568"),
+             DfpField.FLAG_INEXACT, "Round #35.5");
+
+        test(new DfpDec(field, "-12345678901234567").add(new DfpDec(field, "-0.5000")),
+             new DfpDec(field, "-12345678901234567"),
+             DfpField.FLAG_INEXACT, "Round #36");
+
+        field.setRoundingMode(DfpField.RoundingMode.ROUND_HALF_ODD);
+
+        // Round half odd
+        test(new DfpDec(field, "12345678901234568").add(new DfpDec(field, "0.5000")),
+             new DfpDec(field, "12345678901234569"),
+             DfpField.FLAG_INEXACT, "Round #37");
+
+        test(new DfpDec(field, "12345678901234567").add(new DfpDec(field, "0.5000")),
+             new DfpDec(field, "12345678901234567"),
+             DfpField.FLAG_INEXACT, "Round #38");
+
+        test(new DfpDec(field, "-12345678901234568").add(new DfpDec(field, "-0.5000")),
+             new DfpDec(field, "-12345678901234569"),
+             DfpField.FLAG_INEXACT, "Round #39");
+
+        test(new DfpDec(field, "-12345678901234567").add(new DfpDec(field, "-0.5000")),
+             new DfpDec(field, "-12345678901234567"),
+             DfpField.FLAG_INEXACT, "Round #40");
+
+        field.setRoundingMode(DfpField.RoundingMode.ROUND_CEIL);
+
+        // Round ceil
+        test(new DfpDec(field, "12345678901234567").add(new DfpDec(field, "0.0001")),
+             new DfpDec(field, "12345678901234568"),
+             DfpField.FLAG_INEXACT, "Round #41");
+
+        test(new DfpDec(field, "-12345678901234567").add(new DfpDec(field, "-0.9999")),
+             new DfpDec(field, "-12345678901234567"),
+             DfpField.FLAG_INEXACT, "Round #42");
+
+        field.setRoundingMode(DfpField.RoundingMode.ROUND_FLOOR);
+
+        // Round floor
+        test(new DfpDec(field, "12345678901234567").add(new DfpDec(field, "0.9999")),
+             new DfpDec(field, "12345678901234567"),
+             DfpField.FLAG_INEXACT, "Round #43");
+
+        test(new DfpDec(field, "-12345678901234567").add(new DfpDec(field, "-0.0001")),
+             new DfpDec(field, "-12345678901234568"),
+             DfpField.FLAG_INEXACT, "Round #44");
+
+        field.setRoundingMode(DfpField.RoundingMode.ROUND_HALF_EVEN);  // reset
+    }
+
+    @Test
+    public void testRoundDecimal10()
+    {
+        field.setRoundingMode(DfpField.RoundingMode.ROUND_HALF_EVEN);
+
+        test(new Decimal10(field, "1234567891234567890"),
+             new Decimal10(field, "1234567891000000000"),
+             DfpField.FLAG_INEXACT, "RoundDecimal10 #1");
+
+        test(new Decimal10(field, "0.1234567891634567890"),
+             new Decimal10(field, "0.1234567892"),
+             DfpField.FLAG_INEXACT, "RoundDecimal10 #2");
+
+        test(new Decimal10(field, "0.1234567891500000000"),
+             new Decimal10(field, "0.1234567892"),
+             DfpField.FLAG_INEXACT, "RoundDecimal10 #3");
+
+        test(new Decimal10(field, "0.1234567890500"),
+             new Decimal10(field, "0.1234567890"),
+             DfpField.FLAG_INEXACT, "RoundDecimal10 #4");
+
+        test(new Decimal10(field, "0.1234567890501"),
+             new Decimal10(field, "0.1234567891"),
+             DfpField.FLAG_INEXACT, "RoundDecimal10 #5");
+
+        test(new Decimal10(field, "0.1234567890499"),
+             new Decimal10(field, "0.1234567890"),
+             DfpField.FLAG_INEXACT, "RoundDecimal10 #6");
+
+        test(new Decimal10(field, "1.234567890890"),
+             new Decimal10(field, "1.234567891"),
+             DfpField.FLAG_INEXACT, "RoundDecimal10 #7");
+
+        test(new Decimal10(field, "1.234567891500"),
+             new Decimal10(field, "1.234567892"),
+             DfpField.FLAG_INEXACT, "RoundDecimal10 #8");
+
+        test(new Decimal10(field, "1.234567890500"),
+             new Decimal10(field, "1.234567890"),
+             DfpField.FLAG_INEXACT, "RoundDecimal10 #9");
+
+        test(new Decimal10(field, "1.234567890000").add(new Decimal10(field, ".000000000501")),
+             new Decimal10(field, "1.234567891"),
+             DfpField.FLAG_INEXACT, "RoundDecimal10 #10");
+
+        test(new Decimal10(field, "1.234567890499"),
+             new Decimal10(field, "1.234567890"),
+             DfpField.FLAG_INEXACT, "RoundDecimal10 #11");
+
+        test(new Decimal10(field, "12.34567890890"),
+             new Decimal10(field, "12.34567891"),
+             DfpField.FLAG_INEXACT, "RoundDecimal10 #12");
+
+        test(new Decimal10(field, "12.34567891500"),
+             new Decimal10(field, "12.34567892"),
+             DfpField.FLAG_INEXACT, "RoundDecimal10 #13");
+
+        test(new Decimal10(field, "12.34567890500"),
+             new Decimal10(field, "12.34567890"),
+             DfpField.FLAG_INEXACT, "RoundDecimal10 #14");
+
+        test(new Decimal10(field, "12.34567890").add(new Decimal10(field, ".00000000501")),
+             new Decimal10(field, "12.34567891"),
+             DfpField.FLAG_INEXACT, "RoundDecimal10 #15");
+
+        test(new Decimal10(field, "12.34567890499"),
+             new Decimal10(field, "12.34567890"),
+             DfpField.FLAG_INEXACT, "RoundDecimal10 #16");
+
+        test(new Decimal10(field, "123.4567890890"),
+             new Decimal10(field, "123.4567891"),
+             DfpField.FLAG_INEXACT, "RoundDecimal10 #17");
+
+        test(new Decimal10(field, "123.4567891500"),
+             new Decimal10(field, "123.4567892"),
+             DfpField.FLAG_INEXACT, "RoundDecimal10 #18");
+
+        test(new Decimal10(field, "123.4567890500"),
+             new Decimal10(field, "123.4567890"),
+             DfpField.FLAG_INEXACT, "RoundDecimal10 #19");
+
+        test(new Decimal10(field, "123.4567890").add(new Decimal10(field, ".0000000501")),
+             new Decimal10(field, "123.4567891"),
+             DfpField.FLAG_INEXACT, "RoundDecimal10 #20");
+
+        test(new Decimal10(field, "123.4567890499"),
+             new Decimal10(field, "123.4567890"),
+             DfpField.FLAG_INEXACT, "RoundDecimal10 #21");
+
+        field.setRoundingMode(DfpField.RoundingMode.ROUND_DOWN);
+
+        // RoundDecimal10 down
+        test(new Decimal10(field, "1234567890").add(new Decimal10(field, "0.9")),
+             new Decimal10(field, "1234567890"),
+             DfpField.FLAG_INEXACT, "RoundDecimal10 #22");
+
+        test(new Decimal10(field, "1234567890").add(new Decimal10(field, "0.99999999")),
+             new Decimal10(field, "1234567890"),
+             DfpField.FLAG_INEXACT, "RoundDecimal10 #23");
+
+        test(new Decimal10(field, "-1234567890").add(new Decimal10(field, "-0.99999999")),
+             new Decimal10(field, "-1234567890"),
+             DfpField.FLAG_INEXACT, "RoundDecimal10 #24");
+
+        field.setRoundingMode(DfpField.RoundingMode.ROUND_UP);
+
+        // RoundDecimal10 up
+        test(new Decimal10(field, 1234567890).add(new Decimal10(field, "0.1")),
+             new Decimal10(field, 1234567891l),
+             DfpField.FLAG_INEXACT, "RoundDecimal10 #25");
+
+        test(new Decimal10(field, "1234567890").add(new Decimal10(field, "0.0001")),
+             new Decimal10(field, "1234567891"),
+             DfpField.FLAG_INEXACT, "RoundDecimal10 #26");
+
+        test(new Decimal10(field, "-1234567890").add(new Decimal10(field, "-0.1")),
+             new Decimal10(field, "-1234567891"),
+             DfpField.FLAG_INEXACT, "RoundDecimal10 #27");
+
+        test(new Decimal10(field, "-1234567890").add(new Decimal10(field, "-0.0001")),
+             new Decimal10(field, "-1234567891"),
+             DfpField.FLAG_INEXACT, "RoundDecimal10 #28");
+
+        test(new Decimal10(field, "-1234567890").add(new Decimal10(field, "0")),
+             new Decimal10(field, "-1234567890"),
+             0, "RoundDecimal10 #28.5");
+
+        field.setRoundingMode(DfpField.RoundingMode.ROUND_HALF_UP);
+
+        // RoundDecimal10 half up
+        test(new Decimal10(field, "1234567890").add(new Decimal10(field, "0.4999999999")),
+             new Decimal10(field, "1234567890"),
+             DfpField.FLAG_INEXACT, "RoundDecimal10 #29");
+
+        test(new Decimal10(field, "1234567890").add(new Decimal10(field, "0.50000001")),
+             new Decimal10(field, "1234567891"),
+             DfpField.FLAG_INEXACT, "RoundDecimal10 #30");
+
+        test(new Decimal10(field, "1234567890").add(new Decimal10(field, "0.5")),
+             new Decimal10(field, "1234567891"),
+             DfpField.FLAG_INEXACT, "RoundDecimal10 #30.5");
+
+        test(new Decimal10(field, "-1234567890").add(new Decimal10(field, "-0.4999999999")),
+             new Decimal10(field, "-1234567890"),
+             DfpField.FLAG_INEXACT, "RoundDecimal10 #31");
+
+        test(new Decimal10(field, "-1234567890").add(new Decimal10(field, "-0.50000001")),
+             new Decimal10(field, "-1234567891"),
+             DfpField.FLAG_INEXACT, "RoundDecimal10 #32");
+
+        field.setRoundingMode(DfpField.RoundingMode.ROUND_HALF_DOWN);
+
+        // RoundDecimal10 half down
+        test(new Decimal10(field, "1234567890").add(new Decimal10(field, "0.5001")),
+             new Decimal10(field, "1234567890"),
+             DfpField.FLAG_INEXACT, "RoundDecimal10 #33");
+
+        test(new Decimal10(field, "1234567890").add(new Decimal10(field, "0.5000")),
+             new Decimal10(field, "1234567890"),
+             DfpField.FLAG_INEXACT, "RoundDecimal10 #34");
+
+        test(new Decimal10(field, "-1234567890").add(new Decimal10(field, "-0.5001")),
+             new Decimal10(field, "-1234567890"),
+             DfpField.FLAG_INEXACT, "RoundDecimal10 #35");
+
+        test(new Decimal10(field, "-1234567890").add(new Decimal10(field, "-0.6")),
+             new Decimal10(field, "-1234567891"),
+             DfpField.FLAG_INEXACT, "RoundDecimal10 #35.5");
+
+        test(new Decimal10(field, "-1234567890").add(new Decimal10(field, "-0.5000")),
+             new Decimal10(field, "-1234567890"),
+             DfpField.FLAG_INEXACT, "RoundDecimal10 #36");
+
+        field.setRoundingMode(DfpField.RoundingMode.ROUND_HALF_ODD);
+
+        // RoundDecimal10 half odd
+        test(new Decimal10(field, "1234567890").add(new Decimal10(field, "0.5000")),
+             new Decimal10(field, "1234567891"),
+             DfpField.FLAG_INEXACT, "RoundDecimal10 #37");
+
+        test(new Decimal10(field, "1234567891").add(new Decimal10(field, "0.5000")),
+             new Decimal10(field, "1234567891"),
+             DfpField.FLAG_INEXACT, "RoundDecimal10 #38");
+
+        test(new Decimal10(field, "-1234567890").add(new Decimal10(field, "-0.5000")),
+             new Decimal10(field, "-1234567891"),
+             DfpField.FLAG_INEXACT, "RoundDecimal10 #39");
+
+        test(new Decimal10(field, "-1234567891").add(new Decimal10(field, "-0.5000")),
+             new Decimal10(field, "-1234567891"),
+             DfpField.FLAG_INEXACT, "RoundDecimal10 #40");
+
+        field.setRoundingMode(DfpField.RoundingMode.ROUND_CEIL);
+
+        // RoundDecimal10 ceil
+        test(new Decimal10(field, "1234567890").add(new Decimal10(field, "0.0001")),
+             new Decimal10(field, "1234567891"),
+             DfpField.FLAG_INEXACT, "RoundDecimal10 #41");
+
+        test(new Decimal10(field, "-1234567890").add(new Decimal10(field, "-0.9999")),
+             new Decimal10(field, "-1234567890"),
+             DfpField.FLAG_INEXACT, "RoundDecimal10 #42");
+
+        field.setRoundingMode(DfpField.RoundingMode.ROUND_FLOOR);
+
+        // RoundDecimal10 floor
+        test(new Decimal10(field, "1234567890").add(new Decimal10(field, "0.9999")),
+             new Decimal10(field, "1234567890"),
+             DfpField.FLAG_INEXACT, "RoundDecimal10 #43");
+
+        test(new Decimal10(field, "-1234567890").add(new Decimal10(field, "-0.0001")),
+             new Decimal10(field, "-1234567891"),
+             DfpField.FLAG_INEXACT, "RoundDecimal10 #44");
+
+        field.setRoundingMode(DfpField.RoundingMode.ROUND_HALF_EVEN);  // reset
+    }
+
+    @Test
+    public void testNextAfter()
+    {
+        test(new DfpDec(field, 1).nextAfter(pinf),
+             new DfpDec(field, "1.0000000000000001"),
+             0, "NextAfter #1");
+
+        test(new DfpDec(field, "1.0000000000000001").nextAfter(ninf),
+             new DfpDec(field, 1),
+             0, "NextAfter #1.5");
+
+        test(new DfpDec(field, 1).nextAfter(ninf),
+             new DfpDec(field, "0.99999999999999999"),
+             0, "NextAfter #2");
+
+        test(new DfpDec(field, "0.99999999999999999").nextAfter(new DfpDec(field, 2)),
+             new DfpDec(field, 1),
+             0, "NextAfter #3");
+
+        test(new DfpDec(field, -1).nextAfter(ninf),
+             new DfpDec(field, "-1.0000000000000001"),
+             0, "NextAfter #4");
+
+        test(new DfpDec(field, -1).nextAfter(pinf),
+             new DfpDec(field, "-0.99999999999999999"),
+             0, "NextAfter #5");
+
+        test(new DfpDec(field, "-0.99999999999999999").nextAfter(new DfpDec(field, -2)),
+             new DfpDec(field, (byte) -1),
+             0, "NextAfter #6");
+
+        test(new DfpDec(field, (byte) 2).nextAfter(new DfpDec(field, 2)),
+             new DfpDec(field, 2l),
+             0, "NextAfter #7");
+
+        test(new DfpDec(field, 0).nextAfter(new DfpDec(field, 0)),
+             new DfpDec(field, 0),
+             0, "NextAfter #8");
+
+        test(new DfpDec(field, -2).nextAfter(new DfpDec(field, -2)),
+             new DfpDec(field, -2),
+             0, "NextAfter #9");
+
+        test(new DfpDec(field, 0).nextAfter(new DfpDec(field, 1)),
+             new DfpDec(field, "1e-131092"),
+             DfpField.FLAG_UNDERFLOW, "NextAfter #10");
+
+        test(new DfpDec(field, 0).nextAfter(new DfpDec(field, -1)),
+             new DfpDec(field, "-1e-131092"),
+             DfpField.FLAG_UNDERFLOW, "NextAfter #11");
+
+        test(new DfpDec(field, "-1e-131092").nextAfter(pinf),
+             new DfpDec(field, "-0"),
+             DfpField.FLAG_UNDERFLOW|DfpField.FLAG_INEXACT, "Next After #12");
+
+        test(new DfpDec(field, "1e-131092").nextAfter(ninf), 
+             new DfpDec(field, "0"),
+             DfpField.FLAG_UNDERFLOW|DfpField.FLAG_INEXACT, "Next After #13");
+
+        test(new DfpDec(field, "9.9999999999999999e131078").nextAfter(pinf),
+             pinf,
+             DfpField.FLAG_OVERFLOW|DfpField.FLAG_INEXACT, "Next After #14");
+    }
+
+}
diff --git a/src/test/java/org/apache/commons/math/dfp/DfpMathTest.java b/src/test/java/org/apache/commons/math/dfp/DfpMathTest.java
new file mode 100644
index 0000000..d138051
--- /dev/null
+++ b/src/test/java/org/apache/commons/math/dfp/DfpMathTest.java
@@ -0,0 +1,587 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.commons.math.dfp;
+
+import org.junit.After;
+import org.junit.Assert;
+import org.junit.Before;
+
+public class DfpMathTest {
+
+    private DfpField factory;
+    private Dfp pinf;
+    private Dfp ninf;
+    private Dfp nan;
+    private Dfp snan;
+    private Dfp qnan;
+
+    @Before
+    public void setUp() {
+        // Some basic setup.  Define some constants and clear the status flags
+        factory = new DfpField(20);
+        pinf = factory.newDfp("1").divide(factory.newDfp("0"));
+        ninf = factory.newDfp("-1").divide(factory.newDfp("0"));
+        nan = factory.newDfp("0").divide(factory.newDfp("0"));
+        snan = factory.newDfp((byte)1, Dfp.SNAN);
+        qnan = factory.newDfp((byte)1, Dfp.QNAN);
+        ninf.getField().clearIEEEFlags();
+
+        // force loading of dfpmath
+        Dfp pi = factory.getPi();
+        pi.getField().clearIEEEFlags();
+    }
+
+    @After
+    public void tearDown() {
+        pinf = null;
+        ninf = null;
+        nan  = null;
+        snan = null;
+        qnan = null;
+    }
+
+    // Generic test function.  Takes params x and y and tests them for 
+    // equality.  Then checks the status flags against the flags argument.
+    // If the test fail, it prints the desc string
+    private void test(Dfp x, Dfp y, int flags, String desc)
+    {
+        boolean b = x.equals(y);
+
+        if (!x.equals(y) && !x.unequal(y))  // NaNs involved 
+            b = (x.toString().equals(y.toString()));
+
+        if (x.equals(factory.newDfp("0")))  // distinguish +/- zero
+            b = (b && (x.toString().equals(y.toString())));
+
+        b = (b && x.getField().getIEEEFlags() == flags);
+
+        if (!b)
+            Assert.assertTrue("assersion failed "+desc+" x = "+x.toString()+" flags = "+x.getField().getIEEEFlags(), b);
+
+        x.getField().clearIEEEFlags();
+    }
+
+    public void testPow()  
+    {
+        // Test special cases  exponent of zero
+        test(DfpMath.pow(factory.newDfp("0"), factory.newDfp("0")),      
+             factory.newDfp("1"), 
+             0, "pow #1");
+
+        test(DfpMath.pow(factory.newDfp("0"), factory.newDfp("-0")),      
+             factory.newDfp("1"), 
+             0, "pow #2");
+
+        test(DfpMath.pow(factory.newDfp("2"), factory.newDfp("0")),      
+             factory.newDfp("1"), 
+             0, "pow #3");
+
+        test(DfpMath.pow(factory.newDfp("-2"), factory.newDfp("-0")),      
+             factory.newDfp("1"), 
+             0, "pow #4");
+
+        test(DfpMath.pow(pinf, factory.newDfp("-0")),      
+             factory.newDfp("1"), 
+             0, "pow #5");
+
+        test(DfpMath.pow(pinf, factory.newDfp("0")),
+             factory.newDfp("1"), 
+             0, "pow #6");
+
+        test(DfpMath.pow(ninf, factory.newDfp("-0")),      
+             factory.newDfp("1"), 
+             0, "pow #7");
+
+        test(DfpMath.pow(ninf, factory.newDfp("0")),
+             factory.newDfp("1"), 
+             0, "pow #8");
+
+        test(DfpMath.pow(qnan, factory.newDfp("0")),
+             factory.newDfp("1"), 
+             0, "pow #8");
+
+        // exponent of one
+        test(DfpMath.pow(factory.newDfp("0"), factory.newDfp("1")),
+             factory.newDfp("0"), 
+             0, "pow #9");
+
+        test(DfpMath.pow(factory.newDfp("-0"), factory.newDfp("1")),      
+             factory.newDfp("-0"), 
+             0, "pow #10");
+
+        test(DfpMath.pow(factory.newDfp("2"), factory.newDfp("1")),
+             factory.newDfp("2"), 
+             0, "pow #11");
+
+        test(DfpMath.pow(factory.newDfp("-2"), factory.newDfp("1")),
+             factory.newDfp("-2"), 
+             0, "pow #12");
+
+        test(DfpMath.pow(pinf, factory.newDfp("1")),      
+             pinf, 
+             0, "pow #13");
+
+        test(DfpMath.pow(ninf, factory.newDfp("1")),
+             ninf, 
+             0, "pow #14");
+
+        test(DfpMath.pow(qnan, factory.newDfp("1")),
+             qnan, 
+             DfpField.FLAG_INVALID, "pow #14.1");
+
+        // exponent of NaN
+        test(DfpMath.pow(factory.newDfp("0"), qnan),
+             qnan, 
+             DfpField.FLAG_INVALID, "pow #15");
+
+        test(DfpMath.pow(factory.newDfp("-0"), qnan),      
+             qnan, 
+             DfpField.FLAG_INVALID, "pow #16");
+
+        test(DfpMath.pow(factory.newDfp("2"), qnan),
+             qnan, 
+             DfpField.FLAG_INVALID, "pow #17");
+
+        test(DfpMath.pow(factory.newDfp("-2"), qnan),
+             qnan, 
+             DfpField.FLAG_INVALID, "pow #18");
+
+        test(DfpMath.pow(pinf, qnan),      
+             qnan, 
+             DfpField.FLAG_INVALID, "pow #19");
+
+        test(DfpMath.pow(ninf, qnan),
+             qnan, 
+             DfpField.FLAG_INVALID, "pow #20");
+
+        test(DfpMath.pow(qnan, qnan),
+             qnan, 
+             DfpField.FLAG_INVALID, "pow #21");
+
+        // radix of NaN
+        test(DfpMath.pow(qnan, factory.newDfp("1")),
+             qnan, 
+             DfpField.FLAG_INVALID, "pow #22");
+
+        test(DfpMath.pow(qnan, factory.newDfp("-1")),      
+             qnan,
+             DfpField.FLAG_INVALID, "pow #23");
+
+        test(DfpMath.pow(qnan, pinf),
+             qnan,
+             DfpField.FLAG_INVALID, "pow #24");
+
+        test(DfpMath.pow(qnan, ninf),
+             qnan, 
+             DfpField.FLAG_INVALID, "pow #25");
+
+        test(DfpMath.pow(qnan, qnan),
+             qnan, 
+             DfpField.FLAG_INVALID, "pow #26");
+
+        // (x > 1) ^ pinf = pinf,    (x < -1) ^ pinf = pinf
+        test(DfpMath.pow(factory.newDfp("2"), pinf),
+             pinf, 
+             0, "pow #27");
+
+        test(DfpMath.pow(factory.newDfp("-2"), pinf),      
+             pinf,
+             0, "pow #28");
+
+        test(DfpMath.pow(pinf, pinf),
+             pinf,
+             0, "pow #29");
+
+        test(DfpMath.pow(ninf, pinf),
+             pinf, 
+             0, "pow #30");
+
+        // (x > 1) ^ ninf = +0,    (x < -1) ^ ninf = +0
+        test(DfpMath.pow(factory.newDfp("2"), ninf),
+             factory.getZero(), 
+             0, "pow #31");
+
+        test(DfpMath.pow(factory.newDfp("-2"), ninf),      
+             factory.getZero(),
+             0, "pow #32");
+
+        test(DfpMath.pow(pinf, ninf),
+             factory.getZero(),
+             0, "pow #33");
+
+        test(DfpMath.pow(ninf, ninf),
+             factory.getZero(), 
+             0, "pow #34");
+
+        // (-1 < x < 1) ^ pinf = 0
+        test(DfpMath.pow(factory.newDfp("0.5"), pinf),
+             factory.getZero(), 
+             0, "pow #35");
+
+        test(DfpMath.pow(factory.newDfp("-0.5"), pinf),      
+             factory.getZero(),
+             0, "pow #36");
+
+        // (-1 < x < 1) ^ ninf = pinf 
+        test(DfpMath.pow(factory.newDfp("0.5"), ninf),
+             pinf, 
+             0, "pow #37");
+
+        test(DfpMath.pow(factory.newDfp("-0.5"), ninf),      
+             pinf,
+             0, "pow #38");
+
+        // +/- 1  ^ +/-inf  = NaN
+        test(DfpMath.pow(factory.getOne(), pinf),
+             qnan, 
+             DfpField.FLAG_INVALID, "pow #39");
+
+        test(DfpMath.pow(factory.getOne(), ninf),      
+             qnan,
+             DfpField.FLAG_INVALID, "pow #40");
+
+        test(DfpMath.pow(factory.newDfp("-1"), pinf),
+             qnan, 
+             DfpField.FLAG_INVALID, "pow #41");
+
+        test(DfpMath.pow(factory.getOne().negate(), ninf),      
+             qnan,
+             DfpField.FLAG_INVALID, "pow #42");
+
+        // +0  ^ +anything except 0, NAN  = +0
+
+        test(DfpMath.pow(factory.newDfp("0"), factory.newDfp("1")),
+             factory.newDfp("0"),
+             0, "pow #43");
+
+        test(DfpMath.pow(factory.newDfp("0"), factory.newDfp("1e30")),
+             factory.newDfp("0"),
+             0, "pow #44");
+
+        test(DfpMath.pow(factory.newDfp("0"), factory.newDfp("1e-30")),
+             factory.newDfp("0"),
+             0, "pow #45");
+
+        test(DfpMath.pow(factory.newDfp("0"), pinf),
+             factory.newDfp("0"),
+             0, "pow #46");
+
+        // -0  ^ +anything except 0, NAN, odd integer  = +0
+
+        test(DfpMath.pow(factory.newDfp("-0"), factory.newDfp("2")),
+             factory.newDfp("0"),
+             0, "pow #47");
+
+        test(DfpMath.pow(factory.newDfp("-0"), factory.newDfp("1e30")),
+             factory.newDfp("0"),
+             0, "pow #48");
+
+        test(DfpMath.pow(factory.newDfp("-0"), factory.newDfp("1e-30")),
+             factory.newDfp("0"),
+             DfpField.FLAG_INEXACT, "pow #49");
+
+        test(DfpMath.pow(factory.newDfp("-0"), pinf),
+             factory.newDfp("0"),
+             0, "pow #50");
+
+        // +0  ^ -anything except 0, NAN  = +INF
+
+        test(DfpMath.pow(factory.newDfp("0"), factory.newDfp("-1")),
+             pinf,
+             0, "pow #51");
+
+        test(DfpMath.pow(factory.newDfp("0"), factory.newDfp("-1e30")),
+             pinf,
+             0, "pow #52");
+
+        test(DfpMath.pow(factory.newDfp("0"), factory.newDfp("-1e-30")),
+             pinf,
+             0, "pow #53");
+
+        test(DfpMath.pow(factory.newDfp("0"), ninf),
+             pinf,
+             0, "pow #54");
+
+        // -0  ^ -anything except 0, NAN, odd integer  = +INF
+
+        test(DfpMath.pow(factory.newDfp("-0"), factory.newDfp("-2")),
+             pinf,
+             0, "pow #55");
+
+        test(DfpMath.pow(factory.newDfp("-0"), factory.newDfp("-1e30")),
+             pinf,
+             0, "pow #56");
+
+        test(DfpMath.pow(factory.newDfp("-0"), factory.newDfp("-1e-30")),
+             pinf,
+             DfpField.FLAG_INEXACT, "pow #57");
+
+        test(DfpMath.pow(factory.newDfp("-0"), ninf),
+             pinf,
+             0, "pow #58");
+
+        // -0  ^ -odd integer   =  -INF
+        test(DfpMath.pow(factory.newDfp("-0"), factory.newDfp("-1")),
+             ninf,
+             DfpField.FLAG_INEXACT, "pow #59");
+
+        test(DfpMath.pow(factory.newDfp("-0"), factory.newDfp("-12345")),
+             ninf,
+             DfpField.FLAG_INEXACT, "pow #60");
+
+        // -0  ^ +odd integer   =  -0
+        test(DfpMath.pow(factory.newDfp("-0"), factory.newDfp("3")),
+             factory.newDfp("-0"),
+             DfpField.FLAG_INEXACT, "pow #61");
+
+        test(DfpMath.pow(factory.newDfp("-0"), factory.newDfp("12345")),
+             factory.newDfp("-0"),
+             DfpField.FLAG_INEXACT, "pow #62");
+
+        // pinf  ^ +anything   = pinf 
+        test(DfpMath.pow(pinf, factory.newDfp("3")),
+             pinf,
+             0, "pow #63");
+
+        test(DfpMath.pow(pinf, factory.newDfp("1e30")),
+             pinf,
+             0, "pow #64");
+
+        test(DfpMath.pow(pinf, factory.newDfp("1e-30")),
+             pinf,
+             0, "pow #65");
+
+        test(DfpMath.pow(pinf, pinf),
+             pinf,
+             0, "pow #66");
+
+        // pinf  ^ -anything   = +0 
+
+        test(DfpMath.pow(pinf, factory.newDfp("-3")),
+             factory.getZero(),
+             0, "pow #67");
+
+        test(DfpMath.pow(pinf, factory.newDfp("-1e30")),
+             factory.getZero(),
+             0, "pow #68");
+
+        test(DfpMath.pow(pinf, factory.newDfp("-1e-30")),
+             factory.getZero(),
+             0, "pow #69");
+
+        test(DfpMath.pow(pinf, ninf),
+             factory.getZero(),
+             0, "pow #70");
+
+        // ninf  ^ anything   = -0 ^ -anything
+        // ninf  ^ -anything except 0, NAN, odd integer  = +0
+
+        test(DfpMath.pow(ninf, factory.newDfp("-2")),
+             factory.newDfp("0"),
+             0, "pow #71");
+
+        test(DfpMath.pow(ninf, factory.newDfp("-1e30")),
+             factory.newDfp("0"),
+             0, "pow #72");
+
+        test(DfpMath.pow(ninf, factory.newDfp("-1e-30")),
+             factory.newDfp("0"),
+             DfpField.FLAG_INEXACT, "pow #73");
+
+        test(DfpMath.pow(ninf, ninf),
+             factory.newDfp("0"),
+             0, "pow #74");
+
+        // ninf  ^ +anything except 0, NAN, odd integer  = +INF
+
+        test(DfpMath.pow(ninf, factory.newDfp("2")),
+             pinf,
+             0, "pow #75");
+
+        test(DfpMath.pow(ninf, factory.newDfp("1e30")),
+             pinf,
+             0, "pow #76");
+
+        test(DfpMath.pow(ninf, factory.newDfp("1e-30")),
+             pinf,
+             DfpField.FLAG_INEXACT, "pow #77");
+
+        test(DfpMath.pow(ninf, pinf),
+             pinf,
+             0, "pow #78");
+
+        // ninf  ^ +odd integer   =  -INF
+        test(DfpMath.pow(ninf, factory.newDfp("3")),
+             ninf,
+             DfpField.FLAG_INEXACT, "pow #79");
+
+        test(DfpMath.pow(ninf, factory.newDfp("12345")),
+             ninf,
+             DfpField.FLAG_INEXACT, "pow #80");
+
+        // ninf  ^ -odd integer   =  -0
+        test(DfpMath.pow(ninf, factory.newDfp("-3")),
+             factory.newDfp("-0"),
+             DfpField.FLAG_INEXACT, "pow #81");
+
+        test(DfpMath.pow(ninf, factory.newDfp("-12345")),
+             factory.newDfp("-0"),
+             DfpField.FLAG_INEXACT, "pow #82");
+
+        // -anything ^ integer 
+        test(DfpMath.pow(factory.newDfp("-2"), factory.newDfp("3")),
+             factory.newDfp("-8"),
+             DfpField.FLAG_INEXACT, "pow #83");
+
+        test(DfpMath.pow(factory.newDfp("-2"), factory.newDfp("16")),
+             factory.newDfp("65536"),
+             0, "pow #84");
+
+        test(DfpMath.pow(factory.newDfp("-2"), factory.newDfp("-3")),
+             factory.newDfp("-0.125"),
+             DfpField.FLAG_INEXACT, "pow #85");
+
+        test(DfpMath.pow(factory.newDfp("-2"), factory.newDfp("-4")),
+             factory.newDfp("0.0625"),
+             0, "pow #86");
+
+        // -anything ^ noninteger = NaN
+
+        test(DfpMath.pow(factory.newDfp("-2"), factory.newDfp("-4.1")),
+             qnan,
+             DfpField.FLAG_INVALID|DfpField.FLAG_INEXACT, "pow #87");
+
+        // Some fractional cases.
+        test(DfpMath.pow(factory.newDfp("2"),factory.newDfp("1.5")),
+             factory.newDfp("2.8284271247461901"), 
+             DfpField.FLAG_INEXACT, "pow #88");
+    }
+
+    public void testSin()
+    {
+        test(DfpMath.sin(pinf),
+             nan,
+             DfpField.FLAG_INVALID|DfpField.FLAG_INEXACT, "sin #1");
+
+        test(DfpMath.sin(nan),
+             nan,
+             DfpField.FLAG_INVALID|DfpField.FLAG_INEXACT, "sin #2");
+
+        test(DfpMath.sin(factory.getZero()),
+             factory.getZero(),
+             DfpField.FLAG_INEXACT, "sin #3");
+
+        test(DfpMath.sin(factory.getPi()),
+             factory.getZero(),
+             DfpField.FLAG_INEXACT, "sin #4");
+
+        test(DfpMath.sin(factory.getPi().negate()),
+             factory.newDfp("-0"),
+             DfpField.FLAG_INEXACT, "sin #5");
+
+        test(DfpMath.sin(factory.getPi().multiply(2)),
+             factory.getZero(),
+             DfpField.FLAG_INEXACT, "sin #6");
+
+        test(DfpMath.sin(factory.getPi().divide(2)),
+             factory.getOne(),
+             DfpField.FLAG_INEXACT, "sin #7");
+
+        test(DfpMath.sin(factory.getPi().divide(2).negate()),
+             factory.getOne().negate(),
+             DfpField.FLAG_INEXACT, "sin #8");
+
+        test(DfpMath.sin(DfpMath.atan(factory.getOne())),  // pi/4
+             factory.newDfp("0.5").sqrt(),
+             DfpField.FLAG_INEXACT, "sin #9");
+
+        test(DfpMath.sin(DfpMath.atan(factory.getOne())).negate(),  // -pi/4
+             factory.newDfp("0.5").sqrt().negate(),
+             DfpField.FLAG_INEXACT, "sin #10");
+
+        test(DfpMath.sin(DfpMath.atan(factory.getOne())).negate(),  // -pi/4
+             factory.newDfp("0.5").sqrt().negate(),
+             DfpField.FLAG_INEXACT, "sin #11");
+
+        test(DfpMath.sin(factory.newDfp("0.1")),
+             factory.newDfp("0.0998334166468281523"),
+             DfpField.FLAG_INEXACT, "sin #12");
+
+        test(DfpMath.sin(factory.newDfp("0.2")),
+             factory.newDfp("0.19866933079506121546"),
+             DfpField.FLAG_INEXACT, "sin #13");
+
+        test(DfpMath.sin(factory.newDfp("0.3")),
+             factory.newDfp("0.2955202066613395751"),
+             DfpField.FLAG_INEXACT, "sin #14");
+
+        test(DfpMath.sin(factory.newDfp("0.4")),
+             factory.newDfp("0.38941834230865049166"),
+             DfpField.FLAG_INEXACT, "sin #15");
+
+        test(DfpMath.sin(factory.newDfp("0.5")),
+             factory.newDfp("0.47942553860420300026"),  // off by one ULP
+             DfpField.FLAG_INEXACT, "sin #16");
+
+        test(DfpMath.sin(factory.newDfp("0.6")),
+             factory.newDfp("0.56464247339503535721"),  // off by one ULP
+             DfpField.FLAG_INEXACT, "sin #17");
+
+        test(DfpMath.sin(factory.newDfp("0.7")),
+             factory.newDfp("0.64421768723769105367"),  
+             DfpField.FLAG_INEXACT, "sin #18");
+
+        test(DfpMath.sin(factory.newDfp("0.8")),        
+             factory.newDfp("0.71735609089952276163"),
+             DfpField.FLAG_INEXACT, "sin #19");
+
+        test(DfpMath.sin(factory.newDfp("0.9")),        // off by one ULP
+             factory.newDfp("0.78332690962748338847"),
+             DfpField.FLAG_INEXACT, "sin #20");
+
+        test(DfpMath.sin(factory.newDfp("1.0")),
+             factory.newDfp("0.84147098480789650666"),
+             DfpField.FLAG_INEXACT, "sin #21");
+
+        test(DfpMath.sin(factory.newDfp("1.1")),
+             factory.newDfp("0.89120736006143533995"),
+             DfpField.FLAG_INEXACT, "sin #22");
+
+        test(DfpMath.sin(factory.newDfp("1.2")),
+             factory.newDfp("0.93203908596722634968"),
+             DfpField.FLAG_INEXACT, "sin #23");
+
+        test(DfpMath.sin(factory.newDfp("1.3")),
+             factory.newDfp("0.9635581854171929647"),
+             DfpField.FLAG_INEXACT, "sin #24");
+
+        test(DfpMath.sin(factory.newDfp("1.4")),
+             factory.newDfp("0.98544972998846018066"),
+             DfpField.FLAG_INEXACT, "sin #25");
+
+        test(DfpMath.sin(factory.newDfp("1.5")),
+             factory.newDfp("0.99749498660405443096"),
+             DfpField.FLAG_INEXACT, "sin #26");
+
+        test(DfpMath.sin(factory.newDfp("1.6")),
+             factory.newDfp("0.99957360304150516323"),
+             DfpField.FLAG_INEXACT, "sin #27");
+    }
+
+
+}
diff --git a/src/test/java/org/apache/commons/math/dfp/DfpTest.java b/src/test/java/org/apache/commons/math/dfp/DfpTest.java
new file mode 100644
index 0000000..dc56483
--- /dev/null
+++ b/src/test/java/org/apache/commons/math/dfp/DfpTest.java
@@ -0,0 +1,1507 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.commons.math.dfp;
+
+import org.junit.After;
+import org.junit.Assert;
+import org.junit.Before;
+import org.junit.Test;
+
+public class DfpTest {
+
+    private DfpField field;
+    private Dfp pinf;
+    private Dfp ninf;
+    private Dfp nan;
+    private Dfp snan;
+    private Dfp qnan;
+
+    @Before
+    public void setUp() {
+        // Some basic setup.  Define some constants and clear the status flags
+        field = new DfpField(20);
+        pinf = field.newDfp("1").divide(field.newDfp("0"));
+        ninf = field.newDfp("-1").divide(field.newDfp("0"));
+        nan = field.newDfp("0").divide(field.newDfp("0"));
+        snan = field.newDfp((byte)1, Dfp.SNAN);
+        qnan = field.newDfp((byte)1, Dfp.QNAN);
+        ninf.getField().clearIEEEFlags();
+    }
+
+    @After
+    public void tearDown() {
+        field = null;
+        pinf    = null;
+        ninf    = null;
+        nan     = null;
+        snan    = null;
+        qnan    = null;
+    }
+
+    // Generic test function.  Takes params x and y and tests them for 
+    // equality.  Then checks the status flags against the flags argument.
+    // If the test fail, it prints the desc string
+    private void test(Dfp x, Dfp y, int flags, String desc)
+    {
+        boolean b = x.equals(y);
+
+        if (!x.equals(y) && !x.unequal(y))  // NaNs involved 
+            b = (x.toString().equals(y.toString()));
+
+        if (x.equals(field.newDfp("0")))  // distinguish +/- zero
+            b = (b && (x.toString().equals(y.toString())));
+
+        b = (b && x.getField().getIEEEFlags() == flags);
+
+        if (!b)
+            Assert.assertTrue("assersion failed "+desc+" x = "+x.toString()+" flags = "+x.getField().getIEEEFlags(), b);
+
+        x.getField().clearIEEEFlags();
+    }
+
+    @Test
+    public void testByteConstructor() {
+        Assert.assertEquals("0.", new Dfp(field, (byte) 0).toString());
+        Assert.assertEquals("1.", new Dfp(field, (byte) 1).toString());
+        Assert.assertEquals("-1.", new Dfp(field, (byte) -1).toString());
+        Assert.assertEquals("-128.", new Dfp(field, Byte.MIN_VALUE).toString());
+        Assert.assertEquals("127.", new Dfp(field, Byte.MAX_VALUE).toString());
+    }
+
+    @Test
+    public void testIntConstructor() {
+        Assert.assertEquals("0.", new Dfp(field, 0).toString());
+        Assert.assertEquals("1.", new Dfp(field, 1).toString());
+        Assert.assertEquals("-1.", new Dfp(field, -1).toString());
+        Assert.assertEquals("1234567890.", new Dfp(field, 1234567890).toString());
+        Assert.assertEquals("-1234567890.", new Dfp(field, -1234567890).toString());
+        Assert.assertEquals("-2147483648.", new Dfp(field, Integer.MIN_VALUE).toString());
+        Assert.assertEquals("2147483647.", new Dfp(field, Integer.MAX_VALUE).toString());
+    }
+
+    @Test
+    public void testLongConstructor() {
+        Assert.assertEquals("0.", new Dfp(field, 0l).toString());
+        Assert.assertEquals("1.", new Dfp(field, 1l).toString());
+        Assert.assertEquals("-1.", new Dfp(field, -1l).toString());
+        Assert.assertEquals("1234567890.", new Dfp(field, 1234567890l).toString());
+        Assert.assertEquals("-1234567890.", new Dfp(field, -1234567890l).toString());
+        Assert.assertEquals("-9223372036854775808.", new Dfp(field, Long.MIN_VALUE).toString());
+        Assert.assertEquals("9223372036854775807.", new Dfp(field, Long.MAX_VALUE).toString());
+    }
+
+    /*
+     *  Test addition
+     */
+    @Test
+    public void testAdd()
+    {
+        test(field.newDfp("1").add(field.newDfp("1")),      // Basic tests   1+1 = 2
+             field.newDfp("2"), 
+             0, "Add #1");
+
+        test(field.newDfp("1").add(field.newDfp("-1")),     // 1 + (-1) = 0
+             field.newDfp("0"), 
+             0, "Add #2");
+
+        test(field.newDfp("-1").add(field.newDfp("1")),     // (-1) + 1 = 0
+             field.newDfp("0"), 
+             0, "Add #3");
+
+        test(field.newDfp("-1").add(field.newDfp("-1")),     // (-1) + (-1) = -2
+             field.newDfp("-2"), 
+             0, "Add #4");
+
+        // rounding mode is round half even
+
+        test(field.newDfp("1").add(field.newDfp("1e-16")),     // rounding on add
+             field.newDfp("1.0000000000000001"), 
+             0, "Add #5");
+
+        test(field.newDfp("1").add(field.newDfp("1e-17")),     // rounding on add
+             field.newDfp("1"), 
+             DfpField.FLAG_INEXACT, "Add #6");
+
+        test(field.newDfp("0.90999999999999999999").add(field.newDfp("0.1")),     // rounding on add
+             field.newDfp("1.01"), 
+             DfpField.FLAG_INEXACT, "Add #7");
+
+        test(field.newDfp(".10000000000000005000").add(field.newDfp(".9")),     // rounding on add
+             field.newDfp("1."), 
+             DfpField.FLAG_INEXACT, "Add #8");
+
+        test(field.newDfp(".10000000000000015000").add(field.newDfp(".9")),     // rounding on add
+             field.newDfp("1.0000000000000002"), 
+             DfpField.FLAG_INEXACT, "Add #9");
+
+        test(field.newDfp(".10000000000000014999").add(field.newDfp(".9")),     // rounding on add
+             field.newDfp("1.0000000000000001"), 
+             DfpField.FLAG_INEXACT, "Add #10");
+
+        test(field.newDfp(".10000000000000015001").add(field.newDfp(".9")),     // rounding on add
+             field.newDfp("1.0000000000000002"), 
+             DfpField.FLAG_INEXACT, "Add #11");
+
+        test(field.newDfp(".11111111111111111111").add(field.newDfp("11.1111111111111111")), // rounding on add
+             field.newDfp("11.22222222222222222222"), 
+             DfpField.FLAG_INEXACT, "Add #12");
+
+        test(field.newDfp(".11111111111111111111").add(field.newDfp("1111111111111111.1111")), // rounding on add
+             field.newDfp("1111111111111111.2222"), 
+             DfpField.FLAG_INEXACT, "Add #13");
+
+        test(field.newDfp(".11111111111111111111").add(field.newDfp("11111111111111111111")), // rounding on add
+             field.newDfp("11111111111111111111"), 
+             DfpField.FLAG_INEXACT, "Add #14");
+
+        test(field.newDfp("9.9999999999999999999e131071").add(field.newDfp("-1e131052")), // overflow on add
+             field.newDfp("9.9999999999999999998e131071"), 
+             0, "Add #15");
+
+        test(field.newDfp("9.9999999999999999999e131071").add(field.newDfp("1e131052")), // overflow on add
+             pinf, 
+             DfpField.FLAG_OVERFLOW, "Add #16");
+
+        test(field.newDfp("-9.9999999999999999999e131071").add(field.newDfp("-1e131052")), // overflow on add
+             ninf, 
+             DfpField.FLAG_OVERFLOW, "Add #17");
+
+        test(field.newDfp("-9.9999999999999999999e131071").add(field.newDfp("1e131052")), // overflow on add
+             field.newDfp("-9.9999999999999999998e131071"), 
+             0, "Add #18");
+
+        test(field.newDfp("1e-131072").add(field.newDfp("1e-131072")), // underflow on add
+             field.newDfp("2e-131072"), 
+             0, "Add #19");
+
+        test(field.newDfp("1.0000000000000001e-131057").add(field.newDfp("-1e-131057")), // underflow on add
+             field.newDfp("1e-131073"), 
+             DfpField.FLAG_UNDERFLOW, "Add #20");
+
+        test(field.newDfp("1.1e-131072").add(field.newDfp("-1e-131072")), // underflow on add
+             field.newDfp("1e-131073"), 
+             DfpField.FLAG_UNDERFLOW, "Add #21");
+
+        test(field.newDfp("1.0000000000000001e-131072").add(field.newDfp("-1e-131072")), // underflow on add
+             field.newDfp("1e-131088"), 
+             DfpField.FLAG_UNDERFLOW, "Add #22");
+
+        test(field.newDfp("1.0000000000000001e-131078").add(field.newDfp("-1e-131078")), // underflow on add
+             field.newDfp("0"), 
+             DfpField.FLAG_UNDERFLOW, "Add #23");
+
+        test(field.newDfp("1.0").add(field.newDfp("-1e-20")), // loss of precision on alignment?
+             field.newDfp("0.99999999999999999999"), 
+             0, "Add #23.1");
+
+        test(field.newDfp("-0.99999999999999999999").add(field.newDfp("1")), // proper normalization?
+             field.newDfp("0.00000000000000000001"), 
+             0, "Add #23.2");
+
+        test(field.newDfp("1").add(field.newDfp("0")), // adding zeros
+             field.newDfp("1"), 
+             0, "Add #24");
+
+        test(field.newDfp("0").add(field.newDfp("0")), // adding zeros
+             field.newDfp("0"), 
+             0, "Add #25");
+
+        test(field.newDfp("-0").add(field.newDfp("0")), // adding zeros
+             field.newDfp("0"), 
+             0, "Add #26");
+
+        test(field.newDfp("0").add(field.newDfp("-0")), // adding zeros
+             field.newDfp("0"), 
+             0, "Add #27");
+
+        test(field.newDfp("-0").add(field.newDfp("-0")), // adding zeros
+             field.newDfp("-0"), 
+             0, "Add #28");
+
+        test(field.newDfp("1e-20").add(field.newDfp("0")), // adding zeros
+             field.newDfp("1e-20"), 
+             0, "Add #29");
+
+        test(field.newDfp("1e-40").add(field.newDfp("0")), // adding zeros
+             field.newDfp("1e-40"), 
+             0, "Add #30");
+
+        test(pinf.add(ninf), // adding infinities
+             nan, 
+             DfpField.FLAG_INVALID, "Add #31");
+
+        test(ninf.add(pinf), // adding infinities
+             nan, 
+             DfpField.FLAG_INVALID, "Add #32");
+
+        test(ninf.add(ninf), // adding infinities
+             ninf, 
+             0, "Add #33");
+
+        test(pinf.add(pinf), // adding infinities
+             pinf, 
+             0, "Add #34");
+
+        test(pinf.add(field.newDfp("0")), // adding infinities
+             pinf, 
+             0, "Add #35");
+
+        test(pinf.add(field.newDfp("-1e131071")), // adding infinities
+             pinf, 
+             0, "Add #36");
+
+        test(pinf.add(field.newDfp("1e131071")), // adding infinities
+             pinf, 
+             0, "Add #37");
+
+        test(field.newDfp("0").add(pinf), // adding infinities
+             pinf, 
+             0, "Add #38");
+
+        test(field.newDfp("-1e131071").add(pinf), // adding infinities
+             pinf, 
+             0, "Add #39");
+
+        test(field.newDfp("1e131071").add(pinf), // adding infinities
+             pinf, 
+             0, "Add #40");
+
+        test(ninf.add(field.newDfp("0")), // adding infinities
+             ninf, 
+             0, "Add #41");
+
+        test(ninf.add(field.newDfp("-1e131071")), // adding infinities
+             ninf, 
+             0, "Add #42");
+
+        test(ninf.add(field.newDfp("1e131071")), // adding infinities
+             ninf, 
+             0, "Add #43");
+
+        test(field.newDfp("0").add(ninf), // adding infinities
+             ninf, 
+             0, "Add #44");
+
+        test(field.newDfp("-1e131071").add(ninf), // adding infinities
+             ninf, 
+             0, "Add #45");
+
+        test(field.newDfp("1e131071").add(ninf), // adding infinities
+             ninf, 
+             0, "Add #46");
+
+        test(field.newDfp("9.9999999999999999999e131071").add(field.newDfp("5e131051")),  // overflow
+             pinf,
+             DfpField.FLAG_OVERFLOW, "Add #47");
+
+        test(field.newDfp("9.9999999999999999999e131071").add(field.newDfp("4.9999999999999999999e131051")),  // overflow
+             field.newDfp("9.9999999999999999999e131071"),
+             DfpField.FLAG_INEXACT, "Add #48");
+
+        test(nan.add(field.newDfp("1")),
+             nan,
+             0, "Add #49");
+
+        test(field.newDfp("1").add(nan),
+             nan,
+             0, "Add #50");
+
+        test(field.newDfp("12345678123456781234").add(field.newDfp("0.12345678123456781234")),
+             field.newDfp("12345678123456781234"),
+             DfpField.FLAG_INEXACT, "Add #51");
+
+        test(field.newDfp("12345678123456781234").add(field.newDfp("123.45678123456781234")),
+             field.newDfp("12345678123456781357"),
+             DfpField.FLAG_INEXACT, "Add #52");
+
+        test(field.newDfp("123.45678123456781234").add(field.newDfp("12345678123456781234")),
+             field.newDfp("12345678123456781357"),
+             DfpField.FLAG_INEXACT, "Add #53");
+
+        test(field.newDfp("12345678123456781234").add(field.newDfp(".00001234567812345678")),
+             field.newDfp("12345678123456781234"),
+             DfpField.FLAG_INEXACT, "Add #54");
+
+        test(field.newDfp("12345678123456781234").add(field.newDfp(".00000000123456781234")),
+             field.newDfp("12345678123456781234"),
+             DfpField.FLAG_INEXACT, "Add #55");
+
+        test(field.newDfp("-0").add(field.newDfp("-0")),
+             field.newDfp("-0"),
+             0, "Add #56"); 
+
+        test(field.newDfp("0").add(field.newDfp("-0")),
+             field.newDfp("0"),
+             0, "Add #57"); 
+
+        test(field.newDfp("-0").add(field.newDfp("0")),
+             field.newDfp("0"),
+             0, "Add #58"); 
+
+        test(field.newDfp("0").add(field.newDfp("0")),
+             field.newDfp("0"),
+             0, "Add #59"); 
+    }
+
+    ////////////////////////////////////////////////////////////////////////////////////////////////////////
+
+    // Test comparisons
+
+    // utility function to help test comparisons
+    private void cmptst(Dfp a, Dfp b, String op, boolean result, double num)
+    {
+        if (op == "equal")
+            if (a.equals(b) != result)
+                Assert.fail("assersion failed.  "+op+" compare #"+num);
+
+        if (op == "unequal")
+            if (a.unequal(b) != result)
+                Assert.fail("assersion failed.  "+op+" compare #"+num);
+
+        if (op == "lessThan")
+            if (a.lessThan(b) != result)
+                Assert.fail("assersion failed.  "+op+" compare #"+num);
+
+        if (op == "greaterThan")
+            if (a.greaterThan(b) != result)
+                Assert.fail("assersion failed.  "+op+" compare #"+num);
+    }
+
+    @Test
+    public void  testCompare()
+    {
+        // test equal() comparison
+        // check zero vs. zero
+        field.clearIEEEFlags();
+
+        cmptst(field.newDfp("0"), field.newDfp("0"), "equal", true, 1);         // 0 == 0
+        cmptst(field.newDfp("0"), field.newDfp("-0"), "equal", true, 2);        // 0 == -0
+        cmptst(field.newDfp("-0"), field.newDfp("-0"), "equal", true, 3);       // -0 == -0
+        cmptst(field.newDfp("-0"), field.newDfp("0"), "equal", true, 4);        // -0 == 0
+
+        // check zero vs normal numbers
+
+        cmptst(field.newDfp("0"), field.newDfp("1"), "equal", false, 5);         // 0 == 1
+        cmptst(field.newDfp("1"), field.newDfp("0"), "equal", false, 6);         // 1 == 0
+        cmptst(field.newDfp("-1"), field.newDfp("0"), "equal", false, 7);        // -1 == 0
+        cmptst(field.newDfp("0"), field.newDfp("-1"), "equal", false, 8);        // 0 == -1
+        cmptst(field.newDfp("0"), field.newDfp("1e-131072"), "equal", false, 9); // 0 == 1e-131072
+        // check flags 
+        if (field.getIEEEFlags() != 0)
+            Assert.fail("assersion failed.  compare flags = "+field.getIEEEFlags());
+
+        cmptst(field.newDfp("0"), field.newDfp("1e-131078"), "equal", false, 10); // 0 == 1e-131078
+
+        // check flags  -- underflow should be set
+        if (field.getIEEEFlags() != DfpField.FLAG_UNDERFLOW)
+            Assert.fail("assersion failed.  compare flags = "+field.getIEEEFlags());
+
+        field.clearIEEEFlags();
+
+        cmptst(field.newDfp("0"), field.newDfp("1e+131071"), "equal", false, 11); // 0 == 1e+131071
+
+        // check zero vs infinities
+
+        cmptst(field.newDfp("0"), pinf, "equal", false, 12);    // 0 == pinf
+        cmptst(field.newDfp("0"), ninf, "equal", false, 13);    // 0 == ninf
+        cmptst(field.newDfp("-0"), pinf, "equal", false, 14);   // -0 == pinf
+        cmptst(field.newDfp("-0"), ninf, "equal", false, 15);   // -0 == ninf
+        cmptst(pinf, field.newDfp("0"), "equal", false, 16);    // pinf == 0
+        cmptst(ninf, field.newDfp("0"), "equal", false, 17);    // ninf == 0
+        cmptst(pinf, field.newDfp("-0"), "equal", false, 18);   // pinf == -0
+        cmptst(ninf, field.newDfp("-0"), "equal", false, 19);   // ninf == -0
+        cmptst(ninf, pinf, "equal", false, 19.10);     // ninf == pinf
+        cmptst(pinf, ninf, "equal", false, 19.11);     // pinf == ninf
+        cmptst(pinf, pinf, "equal", true, 19.12);     // pinf == pinf
+        cmptst(ninf, ninf, "equal", true, 19.13);     // ninf == ninf
+
+        // check some normal numbers
+        cmptst(field.newDfp("1"), field.newDfp("1"), "equal", true, 20);   // 1 == 1
+        cmptst(field.newDfp("1"), field.newDfp("-1"), "equal", false, 21);   // 1 == -1
+        cmptst(field.newDfp("-1"), field.newDfp("-1"), "equal", true, 22);   // -1 == -1
+        cmptst(field.newDfp("1"), field.newDfp("1.0000000000000001"), "equal", false, 23);   // 1 == 1.0000000000000001
+
+        // The tests below checks to ensure that comparisons don't set FLAG_INEXACT
+        // 100000 == 1.0000000000000001
+        cmptst(field.newDfp("1e20"), field.newDfp("1.0000000000000001"), "equal", false, 24);
+        if (field.getIEEEFlags() != 0)
+            Assert.fail("assersion failed.  compare flags = "+field.getIEEEFlags());
+
+        cmptst(field.newDfp("0.000001"), field.newDfp("1e-6"), "equal", true, 25);
+
+        // check some nans -- nans shouldnt equal anything
+
+        cmptst(snan, snan, "equal", false, 27);
+        cmptst(qnan, qnan, "equal", false, 28);
+        cmptst(snan, qnan, "equal", false, 29);
+        cmptst(qnan, snan, "equal", false, 30);
+        cmptst(qnan, field.newDfp("0"), "equal", false, 31);
+        cmptst(snan, field.newDfp("0"), "equal", false, 32);
+        cmptst(field.newDfp("0"), snan, "equal", false, 33);
+        cmptst(field.newDfp("0"), qnan, "equal", false, 34);
+        cmptst(qnan, pinf, "equal", false, 35);
+        cmptst(snan, pinf, "equal", false, 36);
+        cmptst(pinf, snan, "equal", false, 37);
+        cmptst(pinf, qnan, "equal", false, 38);
+        cmptst(qnan, ninf, "equal", false, 39);
+        cmptst(snan, ninf, "equal", false, 40);
+        cmptst(ninf, snan, "equal", false, 41);
+        cmptst(ninf, qnan, "equal", false, 42);
+        cmptst(qnan, field.newDfp("-1"), "equal", false, 43);
+        cmptst(snan, field.newDfp("-1"), "equal", false, 44);
+        cmptst(field.newDfp("-1"), snan, "equal", false, 45);
+        cmptst(field.newDfp("-1"), qnan, "equal", false, 46);
+        cmptst(qnan, field.newDfp("1"), "equal", false, 47);
+        cmptst(snan, field.newDfp("1"), "equal", false, 48);
+        cmptst(field.newDfp("1"), snan, "equal", false, 49);
+        cmptst(field.newDfp("1"), qnan, "equal", false, 50);
+        cmptst(snan.negate(), snan, "equal", false, 51);
+        cmptst(qnan.negate(), qnan, "equal", false, 52);
+
+        //
+        // Tests for un equal  -- do it all over again
+        //
+
+        cmptst(field.newDfp("0"), field.newDfp("0"), "unequal", false, 1);         // 0 == 0
+        cmptst(field.newDfp("0"), field.newDfp("-0"), "unequal", false, 2);        // 0 == -0
+        cmptst(field.newDfp("-0"), field.newDfp("-0"), "unequal", false, 3);       // -0 == -0
+        cmptst(field.newDfp("-0"), field.newDfp("0"), "unequal", false, 4);        // -0 == 0
+
+        // check zero vs normal numbers
+
+        cmptst(field.newDfp("0"), field.newDfp("1"), "unequal", true, 5);         // 0 == 1
+        cmptst(field.newDfp("1"), field.newDfp("0"), "unequal", true, 6);         // 1 == 0
+        cmptst(field.newDfp("-1"), field.newDfp("0"), "unequal", true, 7);        // -1 == 0
+        cmptst(field.newDfp("0"), field.newDfp("-1"), "unequal", true, 8);        // 0 == -1
+        cmptst(field.newDfp("0"), field.newDfp("1e-131072"), "unequal", true, 9); // 0 == 1e-131072
+        // check flags 
+        if (field.getIEEEFlags() != 0)
+            Assert.fail("assersion failed.  compare flags = "+field.getIEEEFlags());
+
+        cmptst(field.newDfp("0"), field.newDfp("1e-131078"), "unequal", true, 10); // 0 == 1e-131078
+
+        // check flags  -- underflow should be set
+        if (field.getIEEEFlags() != DfpField.FLAG_UNDERFLOW)
+            Assert.fail("assersion failed.  compare flags = "+field.getIEEEFlags());
+
+        field.clearIEEEFlags();
+
+        cmptst(field.newDfp("0"), field.newDfp("1e+131071"), "unequal", true, 11); // 0 == 1e+131071
+
+        // check zero vs infinities
+
+        cmptst(field.newDfp("0"), pinf, "unequal", true, 12);    // 0 == pinf
+        cmptst(field.newDfp("0"), ninf, "unequal", true, 13);    // 0 == ninf
+        cmptst(field.newDfp("-0"), pinf, "unequal", true, 14);   // -0 == pinf
+        cmptst(field.newDfp("-0"), ninf, "unequal", true, 15);   // -0 == ninf
+        cmptst(pinf, field.newDfp("0"), "unequal", true, 16);    // pinf == 0
+        cmptst(ninf, field.newDfp("0"), "unequal", true, 17);    // ninf == 0
+        cmptst(pinf, field.newDfp("-0"), "unequal", true, 18);   // pinf == -0
+        cmptst(ninf, field.newDfp("-0"), "unequal", true, 19);   // ninf == -0
+        cmptst(ninf, pinf, "unequal", true, 19.10);     // ninf == pinf
+        cmptst(pinf, ninf, "unequal", true, 19.11);     // pinf == ninf
+        cmptst(pinf, pinf, "unequal", false, 19.12);     // pinf == pinf
+        cmptst(ninf, ninf, "unequal", false, 19.13);     // ninf == ninf
+
+        // check some normal numbers
+        cmptst(field.newDfp("1"), field.newDfp("1"), "unequal", false, 20);   // 1 == 1
+        cmptst(field.newDfp("1"), field.newDfp("-1"), "unequal", true, 21);   // 1 == -1
+        cmptst(field.newDfp("-1"), field.newDfp("-1"), "unequal", false, 22);   // -1 == -1
+        cmptst(field.newDfp("1"), field.newDfp("1.0000000000000001"), "unequal", true, 23);   // 1 == 1.0000000000000001
+
+        // The tests below checks to ensure that comparisons don't set FLAG_INEXACT
+        // 100000 == 1.0000000000000001
+        cmptst(field.newDfp("1e20"), field.newDfp("1.0000000000000001"), "unequal", true, 24);
+        if (field.getIEEEFlags() != 0)
+            Assert.fail("assersion failed.  compare flags = "+field.getIEEEFlags());
+
+        cmptst(field.newDfp("0.000001"), field.newDfp("1e-6"), "unequal", false, 25);
+
+        // check some nans -- nans shouldnt be unequal to anything
+
+        cmptst(snan, snan, "unequal", false, 27);
+        cmptst(qnan, qnan, "unequal", false, 28);
+        cmptst(snan, qnan, "unequal", false, 29);
+        cmptst(qnan, snan, "unequal", false, 30);
+        cmptst(qnan, field.newDfp("0"), "unequal", false, 31);
+        cmptst(snan, field.newDfp("0"), "unequal", false, 32);
+        cmptst(field.newDfp("0"), snan, "unequal", false, 33);
+        cmptst(field.newDfp("0"), qnan, "unequal", false, 34);
+        cmptst(qnan, pinf, "unequal", false, 35);
+        cmptst(snan, pinf, "unequal", false, 36);
+        cmptst(pinf, snan, "unequal", false, 37);
+        cmptst(pinf, qnan, "unequal", false, 38);
+        cmptst(qnan, ninf, "unequal", false, 39);
+        cmptst(snan, ninf, "unequal", false, 40);
+        cmptst(ninf, snan, "unequal", false, 41);
+        cmptst(ninf, qnan, "unequal", false, 42);
+        cmptst(qnan, field.newDfp("-1"), "unequal", false, 43);
+        cmptst(snan, field.newDfp("-1"), "unequal", false, 44);
+        cmptst(field.newDfp("-1"), snan, "unequal", false, 45);
+        cmptst(field.newDfp("-1"), qnan, "unequal", false, 46);
+        cmptst(qnan, field.newDfp("1"), "unequal", false, 47);
+        cmptst(snan, field.newDfp("1"), "unequal", false, 48);
+        cmptst(field.newDfp("1"), snan, "unequal", false, 49);
+        cmptst(field.newDfp("1"), qnan, "unequal", false, 50);
+        cmptst(snan.negate(), snan, "unequal", false, 51);
+        cmptst(qnan.negate(), qnan, "unequal", false, 52);
+
+        if (field.getIEEEFlags() != 0)
+            Assert.fail("assersion failed.  compare unequal flags = "+field.getIEEEFlags());
+
+        //
+        // Tests for lessThan  -- do it all over again
+        //
+
+        cmptst(field.newDfp("0"), field.newDfp("0"), "lessThan", false, 1);         // 0 < 0
+        cmptst(field.newDfp("0"), field.newDfp("-0"), "lessThan", false, 2);        // 0 < -0
+        cmptst(field.newDfp("-0"), field.newDfp("-0"), "lessThan", false, 3);       // -0 < -0
+        cmptst(field.newDfp("-0"), field.newDfp("0"), "lessThan", false, 4);        // -0 < 0
+
+        // check zero vs normal numbers
+
+        cmptst(field.newDfp("0"), field.newDfp("1"), "lessThan", true, 5);         // 0 < 1
+        cmptst(field.newDfp("1"), field.newDfp("0"), "lessThan", false, 6);         // 1 < 0
+        cmptst(field.newDfp("-1"), field.newDfp("0"), "lessThan", true, 7);        // -1 < 0
+        cmptst(field.newDfp("0"), field.newDfp("-1"), "lessThan", false, 8);        // 0 < -1
+        cmptst(field.newDfp("0"), field.newDfp("1e-131072"), "lessThan", true, 9); // 0 < 1e-131072
+        // check flags 
+        if (field.getIEEEFlags() != 0)
+            Assert.fail("assersion failed.  compare flags = "+field.getIEEEFlags());
+
+        cmptst(field.newDfp("0"), field.newDfp("1e-131078"), "lessThan", true, 10); // 0 < 1e-131078
+
+        // check flags  -- underflow should be set
+        if (field.getIEEEFlags() != DfpField.FLAG_UNDERFLOW)
+            Assert.fail("assersion failed.  compare flags = "+field.getIEEEFlags());
+        field.clearIEEEFlags();
+
+        cmptst(field.newDfp("0"), field.newDfp("1e+131071"), "lessThan", true, 11); // 0 < 1e+131071
+
+        // check zero vs infinities
+
+        cmptst(field.newDfp("0"), pinf, "lessThan", true, 12);    // 0 < pinf
+        cmptst(field.newDfp("0"), ninf, "lessThan", false, 13);    // 0 < ninf
+        cmptst(field.newDfp("-0"), pinf, "lessThan", true, 14);   // -0 < pinf
+        cmptst(field.newDfp("-0"), ninf, "lessThan", false, 15);   // -0 < ninf
+        cmptst(pinf, field.newDfp("0"), "lessThan", false, 16);    // pinf < 0
+        cmptst(ninf, field.newDfp("0"), "lessThan", true, 17);    // ninf < 0
+        cmptst(pinf, field.newDfp("-0"), "lessThan", false, 18);   // pinf < -0
+        cmptst(ninf, field.newDfp("-0"), "lessThan", true, 19);   // ninf < -0
+        cmptst(ninf, pinf, "lessThan", true, 19.10);     // ninf < pinf
+        cmptst(pinf, ninf, "lessThan", false, 19.11);     // pinf < ninf
+        cmptst(pinf, pinf, "lessThan", false, 19.12);     // pinf < pinf
+        cmptst(ninf, ninf, "lessThan", false, 19.13);     // ninf < ninf
+
+        // check some normal numbers
+        cmptst(field.newDfp("1"), field.newDfp("1"), "lessThan", false, 20);   // 1 < 1
+        cmptst(field.newDfp("1"), field.newDfp("-1"), "lessThan", false, 21);   // 1 < -1
+        cmptst(field.newDfp("-1"), field.newDfp("-1"), "lessThan", false, 22);   // -1 < -1
+        cmptst(field.newDfp("1"), field.newDfp("1.0000000000000001"), "lessThan", true, 23);   // 1 < 1.0000000000000001
+
+        // The tests below checks to ensure that comparisons don't set FLAG_INEXACT
+        // 100000 < 1.0000000000000001
+        cmptst(field.newDfp("1e20"), field.newDfp("1.0000000000000001"), "lessThan", false, 24);
+        if (field.getIEEEFlags() != 0)
+            Assert.fail("assersion failed.  compare flags = "+field.getIEEEFlags());
+
+        cmptst(field.newDfp("0.000001"), field.newDfp("1e-6"), "lessThan", false, 25);
+
+        // check some nans -- nans shouldnt be lessThan to anything
+        cmptst(snan, snan, "lessThan", false, 27);
+        cmptst(qnan, qnan, "lessThan", false, 28);
+        cmptst(snan, qnan, "lessThan", false, 29);
+        cmptst(qnan, snan, "lessThan", false, 30);
+        cmptst(qnan, field.newDfp("0"), "lessThan", false, 31);
+        cmptst(snan, field.newDfp("0"), "lessThan", false, 32);
+        cmptst(field.newDfp("0"), snan, "lessThan", false, 33);
+        cmptst(field.newDfp("0"), qnan, "lessThan", false, 34);
+        cmptst(qnan, pinf, "lessThan", false, 35);
+        cmptst(snan, pinf, "lessThan", false, 36);
+        cmptst(pinf, snan, "lessThan", false, 37);
+        cmptst(pinf, qnan, "lessThan", false, 38);
+        cmptst(qnan, ninf, "lessThan", false, 39);
+        cmptst(snan, ninf, "lessThan", false, 40);
+        cmptst(ninf, snan, "lessThan", false, 41);
+        cmptst(ninf, qnan, "lessThan", false, 42);
+        cmptst(qnan, field.newDfp("-1"), "lessThan", false, 43);
+        cmptst(snan, field.newDfp("-1"), "lessThan", false, 44);
+        cmptst(field.newDfp("-1"), snan, "lessThan", false, 45);
+        cmptst(field.newDfp("-1"), qnan, "lessThan", false, 46);
+        cmptst(qnan, field.newDfp("1"), "lessThan", false, 47);
+        cmptst(snan, field.newDfp("1"), "lessThan", false, 48);
+        cmptst(field.newDfp("1"), snan, "lessThan", false, 49);
+        cmptst(field.newDfp("1"), qnan, "lessThan", false, 50);
+        cmptst(snan.negate(), snan, "lessThan", false, 51);
+        cmptst(qnan.negate(), qnan, "lessThan", false, 52);
+
+        //lessThan compares with nans should raise FLAG_INVALID
+        if (field.getIEEEFlags() != DfpField.FLAG_INVALID)
+            Assert.fail("assersion failed.  compare lessThan flags = "+field.getIEEEFlags());
+        field.clearIEEEFlags();
+
+        //
+        // Tests for greaterThan  -- do it all over again
+        //
+
+        cmptst(field.newDfp("0"), field.newDfp("0"), "greaterThan", false, 1);         // 0 > 0
+        cmptst(field.newDfp("0"), field.newDfp("-0"), "greaterThan", false, 2);        // 0 > -0
+        cmptst(field.newDfp("-0"), field.newDfp("-0"), "greaterThan", false, 3);       // -0 > -0
+        cmptst(field.newDfp("-0"), field.newDfp("0"), "greaterThan", false, 4);        // -0 > 0
+
+        // check zero vs normal numbers
+
+        cmptst(field.newDfp("0"), field.newDfp("1"), "greaterThan", false, 5);         // 0 > 1
+        cmptst(field.newDfp("1"), field.newDfp("0"), "greaterThan", true, 6);         // 1 > 0
+        cmptst(field.newDfp("-1"), field.newDfp("0"), "greaterThan", false, 7);        // -1 > 0
+        cmptst(field.newDfp("0"), field.newDfp("-1"), "greaterThan", true, 8);        // 0 > -1
+        cmptst(field.newDfp("0"), field.newDfp("1e-131072"), "greaterThan", false, 9); // 0 > 1e-131072
+        // check flags 
+        if (field.getIEEEFlags() != 0)
+            Assert.fail("assersion failed.  compare flags = "+field.getIEEEFlags());
+
+        cmptst(field.newDfp("0"), field.newDfp("1e-131078"), "greaterThan", false, 10); // 0 > 1e-131078
+
+        // check flags  -- underflow should be set
+        if (field.getIEEEFlags() != DfpField.FLAG_UNDERFLOW)
+            Assert.fail("assersion failed.  compare flags = "+field.getIEEEFlags());
+        field.clearIEEEFlags();
+
+        cmptst(field.newDfp("0"), field.newDfp("1e+131071"), "greaterThan", false, 11); // 0 > 1e+131071
+
+        // check zero vs infinities
+
+        cmptst(field.newDfp("0"), pinf, "greaterThan", false, 12);    // 0 > pinf
+        cmptst(field.newDfp("0"), ninf, "greaterThan", true, 13);    // 0 > ninf
+        cmptst(field.newDfp("-0"), pinf, "greaterThan", false, 14);   // -0 > pinf
+        cmptst(field.newDfp("-0"), ninf, "greaterThan", true, 15);   // -0 > ninf
+        cmptst(pinf, field.newDfp("0"), "greaterThan", true, 16);    // pinf > 0
+        cmptst(ninf, field.newDfp("0"), "greaterThan", false, 17);    // ninf > 0
+        cmptst(pinf, field.newDfp("-0"), "greaterThan", true, 18);   // pinf > -0
+        cmptst(ninf, field.newDfp("-0"), "greaterThan", false, 19);   // ninf > -0
+        cmptst(ninf, pinf, "greaterThan", false, 19.10);     // ninf > pinf
+        cmptst(pinf, ninf, "greaterThan", true, 19.11);     // pinf > ninf
+        cmptst(pinf, pinf, "greaterThan", false, 19.12);     // pinf > pinf
+        cmptst(ninf, ninf, "greaterThan", false, 19.13);     // ninf > ninf
+
+        // check some normal numbers
+        cmptst(field.newDfp("1"), field.newDfp("1"), "greaterThan", false, 20);   // 1 > 1
+        cmptst(field.newDfp("1"), field.newDfp("-1"), "greaterThan", true, 21);   // 1 > -1
+        cmptst(field.newDfp("-1"), field.newDfp("-1"), "greaterThan", false, 22);   // -1 > -1
+        cmptst(field.newDfp("1"), field.newDfp("1.0000000000000001"), "greaterThan", false, 23);   // 1 > 1.0000000000000001
+
+        // The tests below checks to ensure that comparisons don't set FLAG_INEXACT
+        // 100000 > 1.0000000000000001
+        cmptst(field.newDfp("1e20"), field.newDfp("1.0000000000000001"), "greaterThan", true, 24);
+        if (field.getIEEEFlags() != 0)
+            Assert.fail("assersion failed.  compare flags = "+field.getIEEEFlags());
+
+        cmptst(field.newDfp("0.000001"), field.newDfp("1e-6"), "greaterThan", false, 25);
+
+        // check some nans -- nans shouldnt be greaterThan to anything
+        cmptst(snan, snan, "greaterThan", false, 27);
+        cmptst(qnan, qnan, "greaterThan", false, 28);
+        cmptst(snan, qnan, "greaterThan", false, 29);
+        cmptst(qnan, snan, "greaterThan", false, 30);
+        cmptst(qnan, field.newDfp("0"), "greaterThan", false, 31);
+        cmptst(snan, field.newDfp("0"), "greaterThan", false, 32);
+        cmptst(field.newDfp("0"), snan, "greaterThan", false, 33);
+        cmptst(field.newDfp("0"), qnan, "greaterThan", false, 34);
+        cmptst(qnan, pinf, "greaterThan", false, 35);
+        cmptst(snan, pinf, "greaterThan", false, 36);
+        cmptst(pinf, snan, "greaterThan", false, 37);
+        cmptst(pinf, qnan, "greaterThan", false, 38);
+        cmptst(qnan, ninf, "greaterThan", false, 39);
+        cmptst(snan, ninf, "greaterThan", false, 40);
+        cmptst(ninf, snan, "greaterThan", false, 41);
+        cmptst(ninf, qnan, "greaterThan", false, 42);
+        cmptst(qnan, field.newDfp("-1"), "greaterThan", false, 43);
+        cmptst(snan, field.newDfp("-1"), "greaterThan", false, 44);
+        cmptst(field.newDfp("-1"), snan, "greaterThan", false, 45);
+        cmptst(field.newDfp("-1"), qnan, "greaterThan", false, 46);
+        cmptst(qnan, field.newDfp("1"), "greaterThan", false, 47);
+        cmptst(snan, field.newDfp("1"), "greaterThan", false, 48);
+        cmptst(field.newDfp("1"), snan, "greaterThan", false, 49);
+        cmptst(field.newDfp("1"), qnan, "greaterThan", false, 50);
+        cmptst(snan.negate(), snan, "greaterThan", false, 51);
+        cmptst(qnan.negate(), qnan, "greaterThan", false, 52);
+
+        //greaterThan compares with nans should raise FLAG_INVALID
+        if (field.getIEEEFlags() != DfpField.FLAG_INVALID)
+            Assert.fail("assersion failed.  compare greaterThan flags = "+field.getIEEEFlags());
+        field.clearIEEEFlags();
+    }
+
+    //
+    // Test multiplication
+    //
+    @Test
+    public void testMultiply()
+    {
+        test(field.newDfp("1").multiply(field.newDfp("1")),      // Basic tests   1*1 = 1
+             field.newDfp("1"), 
+             0, "Multiply #1");
+
+        test(field.newDfp("1").multiply(1),             // Basic tests   1*1 = 1
+             field.newDfp("1"), 
+             0, "Multiply #2");
+
+        test(field.newDfp("-1").multiply(field.newDfp("1")),     // Basic tests   -1*1 = -1
+             field.newDfp("-1"), 
+             0, "Multiply #3");
+
+        test(field.newDfp("-1").multiply(1),            // Basic tests   -1*1 = -1
+             field.newDfp("-1"), 
+             0, "Multiply #4");
+
+        // basic tests with integers
+        test(field.newDfp("2").multiply(field.newDfp("3")),
+             field.newDfp("6"), 
+             0, "Multiply #5");
+
+        test(field.newDfp("2").multiply(3),
+             field.newDfp("6"), 
+             0, "Multiply #6");
+
+        test(field.newDfp("-2").multiply(field.newDfp("3")),
+             field.newDfp("-6"), 
+             0, "Multiply #7");
+
+        test(field.newDfp("-2").multiply(3),
+             field.newDfp("-6"), 
+             0, "Multiply #8");
+
+        test(field.newDfp("2").multiply(field.newDfp("-3")),
+             field.newDfp("-6"), 
+             0, "Multiply #9");
+
+        test(field.newDfp("-2").multiply(field.newDfp("-3")),
+             field.newDfp("6"), 
+             0, "Multiply #10");
+
+        //multiply by zero
+
+        test(field.newDfp("-2").multiply(field.newDfp("0")),
+             field.newDfp("-0"), 
+             0, "Multiply #11");
+
+        test(field.newDfp("-2").multiply(0),
+             field.newDfp("-0"), 
+             0, "Multiply #12");
+
+        test(field.newDfp("2").multiply(field.newDfp("0")),
+             field.newDfp("0"), 
+             0, "Multiply #13");
+
+        test(field.newDfp("2").multiply(0),
+             field.newDfp("0"), 
+             0, "Multiply #14");
+
+        test(field.newDfp("2").multiply(pinf),
+             pinf,
+             0, "Multiply #15");
+
+        test(field.newDfp("2").multiply(ninf),
+             ninf,
+             0, "Multiply #16");
+
+        test(field.newDfp("-2").multiply(pinf),
+             ninf,
+             0, "Multiply #17");
+
+        test(field.newDfp("-2").multiply(ninf),
+             pinf,
+             0, "Multiply #18");
+
+        test(ninf.multiply(field.newDfp("-2")),
+             pinf,
+             0, "Multiply #18.1");
+
+        test(field.newDfp("5e131071").multiply(2),
+             pinf,
+             DfpField.FLAG_OVERFLOW, "Multiply #19");        
+
+        test(field.newDfp("5e131071").multiply(field.newDfp("1.999999999999999")),
+             field.newDfp("9.9999999999999950000e131071"),
+             0, "Multiply #20");        
+
+        test(field.newDfp("-5e131071").multiply(2),
+             ninf,
+             DfpField.FLAG_OVERFLOW, "Multiply #22");        
+
+        test(field.newDfp("-5e131071").multiply(field.newDfp("1.999999999999999")),
+             field.newDfp("-9.9999999999999950000e131071"),
+             0, "Multiply #23");        
+
+        test(field.newDfp("1e-65539").multiply(field.newDfp("1e-65539")),
+             field.newDfp("1e-131078"),
+             DfpField.FLAG_UNDERFLOW, "Multiply #24");
+
+        test(field.newDfp("1").multiply(nan),
+             nan,
+             0, "Multiply #25");
+
+        test(nan.multiply(field.newDfp("1")),
+             nan,
+             0, "Multiply #26");
+
+        test(nan.multiply(pinf),
+             nan,
+             0, "Multiply #27");
+
+        test(pinf.multiply(nan),
+             nan,
+             0, "Multiply #27");
+
+        test(pinf.multiply(field.newDfp("0")),
+             nan,
+             DfpField.FLAG_INVALID, "Multiply #28");
+
+        test(field.newDfp("0").multiply(pinf),
+             nan,
+             DfpField.FLAG_INVALID, "Multiply #29");
+
+        test(pinf.multiply(pinf),
+             pinf,
+             0, "Multiply #30");
+
+        test(ninf.multiply(pinf),
+             ninf,
+             0, "Multiply #31");
+
+        test(pinf.multiply(ninf),
+             ninf,
+             0, "Multiply #32");
+
+        test(ninf.multiply(ninf),
+             pinf,
+             0, "Multiply #33");
+
+        test(pinf.multiply(1),
+             pinf,
+             0, "Multiply #34");
+
+        test(pinf.multiply(0),
+             nan,
+             DfpField.FLAG_INVALID, "Multiply #35");
+
+        test(nan.multiply(1),
+             nan,
+             0, "Multiply #36");
+
+        test(field.newDfp("1").multiply(10000),  // out of range
+             nan,
+             DfpField.FLAG_INVALID, "Multiply #37");
+
+        test(field.newDfp("1").multiply(-1),  // out of range
+             nan,
+             DfpField.FLAG_INVALID, "Multiply #38");
+    }
+
+    @Test
+    public void testDivide()
+    {
+        test(field.newDfp("1").divide(nan),      // divide by NaN = NaN
+             nan, 
+             0, "Divide #1");
+
+        test(nan.divide(field.newDfp("1")),      // NaN / number = NaN
+             nan, 
+             0, "Divide #2");
+
+        test(pinf.divide(field.newDfp("1")),
+             pinf,
+             0, "Divide #3");
+
+        test(pinf.divide(field.newDfp("-1")),
+             ninf,
+             0, "Divide #4");
+
+        test(pinf.divide(pinf),
+             nan,
+             DfpField.FLAG_INVALID, "Divide #5");
+
+        test(ninf.divide(pinf),
+             nan,
+             DfpField.FLAG_INVALID, "Divide #6");
+
+        test(pinf.divide(ninf),
+             nan,
+             DfpField.FLAG_INVALID, "Divide #7");
+
+        test(ninf.divide(ninf),
+             nan,
+             DfpField.FLAG_INVALID, "Divide #8");
+
+        test(field.newDfp("0").divide(field.newDfp("0")),
+             nan,
+             DfpField.FLAG_DIV_ZERO, "Divide #9");
+
+        test(field.newDfp("1").divide(field.newDfp("0")),
+             pinf,
+             DfpField.FLAG_DIV_ZERO, "Divide #10");
+
+        test(field.newDfp("1").divide(field.newDfp("-0")),
+             ninf,
+             DfpField.FLAG_DIV_ZERO, "Divide #11");
+
+        test(field.newDfp("-1").divide(field.newDfp("0")),
+             ninf,
+             DfpField.FLAG_DIV_ZERO, "Divide #12");
+
+        test(field.newDfp("-1").divide(field.newDfp("-0")),
+             pinf,
+             DfpField.FLAG_DIV_ZERO, "Divide #13");
+
+        test(field.newDfp("1").divide(field.newDfp("3")),
+             field.newDfp("0.33333333333333333333"),
+             DfpField.FLAG_INEXACT, "Divide #14");
+
+        test(field.newDfp("1").divide(field.newDfp("6")),
+             field.newDfp("0.16666666666666666667"),
+             DfpField.FLAG_INEXACT, "Divide #15");
+
+        test(field.newDfp("10").divide(field.newDfp("6")),
+             field.newDfp("1.6666666666666667"),
+             DfpField.FLAG_INEXACT, "Divide #16");
+
+        test(field.newDfp("100").divide(field.newDfp("6")),
+             field.newDfp("16.6666666666666667"),
+             DfpField.FLAG_INEXACT, "Divide #17");
+
+        test(field.newDfp("1000").divide(field.newDfp("6")),
+             field.newDfp("166.6666666666666667"),
+             DfpField.FLAG_INEXACT, "Divide #18");
+
+        test(field.newDfp("10000").divide(field.newDfp("6")),
+             field.newDfp("1666.6666666666666667"),
+             DfpField.FLAG_INEXACT, "Divide #19");
+
+        test(field.newDfp("1").divide(field.newDfp("1")),
+             field.newDfp("1"),
+             0, "Divide #20");
+
+        test(field.newDfp("1").divide(field.newDfp("-1")),
+             field.newDfp("-1"),
+             0, "Divide #21");
+
+        test(field.newDfp("-1").divide(field.newDfp("1")),
+             field.newDfp("-1"),
+             0, "Divide #22");
+
+        test(field.newDfp("-1").divide(field.newDfp("-1")),
+             field.newDfp("1"),
+             0, "Divide #23");
+
+        test(field.newDfp("1e-65539").divide(field.newDfp("1e65539")),
+             field.newDfp("1e-131078"),
+             DfpField.FLAG_UNDERFLOW, "Divide #24");
+
+        test(field.newDfp("1e65539").divide(field.newDfp("1e-65539")),
+             pinf,
+             DfpField.FLAG_OVERFLOW, "Divide #24");
+
+        test(field.newDfp("2").divide(field.newDfp("1.5")),     // test trial-divisor too high
+             field.newDfp("1.3333333333333333"),
+             DfpField.FLAG_INEXACT, "Divide #25");
+
+        test(field.newDfp("2").divide(pinf),
+             field.newDfp("0"),
+             0, "Divide #26");
+
+        test(field.newDfp("2").divide(ninf),
+             field.newDfp("-0"),
+             0, "Divide #27");
+
+        test(field.newDfp("0").divide(field.newDfp("1")),
+             field.newDfp("0"),
+             0, "Divide #28");
+    }
+
+    @Test
+    public void testDivideInt()
+    {
+        test(nan.divide(1),      // NaN / number = NaN
+             nan, 
+             0, "DivideInt #1");
+
+        test(pinf.divide(1),
+             pinf,
+             0, "DivideInt #2");
+
+        test(field.newDfp("0").divide(0),
+             nan,
+             DfpField.FLAG_DIV_ZERO, "DivideInt #3");
+
+        test(field.newDfp("1").divide(0),
+             pinf,
+             DfpField.FLAG_DIV_ZERO, "DivideInt #4");
+
+        test(field.newDfp("-1").divide(0),
+             ninf,
+             DfpField.FLAG_DIV_ZERO, "DivideInt #5");
+
+        test(field.newDfp("1").divide(3),
+             field.newDfp("0.33333333333333333333"),
+             DfpField.FLAG_INEXACT, "DivideInt #6");
+
+        test(field.newDfp("1").divide(6),
+             field.newDfp("0.16666666666666666667"),
+             DfpField.FLAG_INEXACT, "DivideInt #7");
+
+        test(field.newDfp("10").divide(6),
+             field.newDfp("1.6666666666666667"),
+             DfpField.FLAG_INEXACT, "DivideInt #8");
+
+        test(field.newDfp("100").divide(6),
+             field.newDfp("16.6666666666666667"),
+             DfpField.FLAG_INEXACT, "DivideInt #9");
+
+        test(field.newDfp("1000").divide(6),
+             field.newDfp("166.6666666666666667"),
+             DfpField.FLAG_INEXACT, "DivideInt #10");
+
+        test(field.newDfp("10000").divide(6),
+             field.newDfp("1666.6666666666666667"),
+             DfpField.FLAG_INEXACT, "DivideInt #20");
+
+        test(field.newDfp("1").divide(1),
+             field.newDfp("1"),
+             0, "DivideInt #21");
+
+        test(field.newDfp("1e-131077").divide(10),
+             field.newDfp("1e-131078"),
+             DfpField.FLAG_UNDERFLOW, "DivideInt #22");
+
+        test(field.newDfp("0").divide(1),
+             field.newDfp("0"),
+             0, "DivideInt #23");
+
+        test(field.newDfp("1").divide(10000),
+             nan,
+             DfpField.FLAG_INVALID, "DivideInt #24");
+
+        test(field.newDfp("1").divide(-1),
+             nan,
+             DfpField.FLAG_INVALID, "DivideInt #25");
+    }
+
+    @Test
+    public void testNextAfter()
+    {
+        test(field.newDfp("1").nextAfter(pinf),
+             field.newDfp("1.0000000000000001"),
+             0, "NextAfter #1");
+
+        test(field.newDfp("1.0000000000000001").nextAfter(ninf),
+             field.newDfp("1"),
+             0, "NextAfter #1.5");
+
+        test(field.newDfp("1").nextAfter(ninf),
+             field.newDfp("0.99999999999999999999"),
+             0, "NextAfter #2");
+
+        test(field.newDfp("0.99999999999999999999").nextAfter(field.newDfp("2")),
+             field.newDfp("1"),
+             0, "NextAfter #3");
+
+        test(field.newDfp("-1").nextAfter(ninf),
+             field.newDfp("-1.0000000000000001"),
+             0, "NextAfter #4");
+
+        test(field.newDfp("-1").nextAfter(pinf),
+             field.newDfp("-0.99999999999999999999"),
+             0, "NextAfter #5");
+
+        test(field.newDfp("-0.99999999999999999999").nextAfter(field.newDfp("-2")),
+             field.newDfp("-1"),
+             0, "NextAfter #6");
+
+        test(field.newDfp("2").nextAfter(field.newDfp("2")),
+             field.newDfp("2"),
+             0, "NextAfter #7");
+
+        test(field.newDfp("0").nextAfter(field.newDfp("0")),
+             field.newDfp("0"),
+             0, "NextAfter #8");
+
+        test(field.newDfp("-2").nextAfter(field.newDfp("-2")),
+             field.newDfp("-2"),
+             0, "NextAfter #9");
+
+        test(field.newDfp("0").nextAfter(field.newDfp("1")),
+             field.newDfp("1e-131092"),
+             DfpField.FLAG_UNDERFLOW, "NextAfter #10");
+
+        test(field.newDfp("0").nextAfter(field.newDfp("-1")),
+             field.newDfp("-1e-131092"),
+             DfpField.FLAG_UNDERFLOW, "NextAfter #11");
+
+        test(field.newDfp("-1e-131092").nextAfter(pinf),
+             field.newDfp("-0"),
+             DfpField.FLAG_UNDERFLOW|DfpField.FLAG_INEXACT, "Next After #12");
+
+        test(field.newDfp("1e-131092").nextAfter(ninf), 
+             field.newDfp("0"),
+             DfpField.FLAG_UNDERFLOW|DfpField.FLAG_INEXACT, "Next After #13");
+
+        test(field.newDfp("9.9999999999999999999e131078").nextAfter(pinf),
+             pinf,
+             DfpField.FLAG_OVERFLOW|DfpField.FLAG_INEXACT, "Next After #14");
+    }
+
+    @Test
+    public void testToString()
+    {
+        Assert.assertEquals("toString #1", "Infinity", pinf.toString());
+        Assert.assertEquals("toString #2", "-Infinity", ninf.toString());
+        Assert.assertEquals("toString #3", "NaN", nan.toString());
+        Assert.assertEquals("toString #4", "NaN", field.newDfp((byte) 1, (byte) Dfp.QNAN).toString());
+        Assert.assertEquals("toString #5", "NaN", field.newDfp((byte) 1, (byte) Dfp.SNAN).toString());
+        Assert.assertEquals("toString #6", "1.2300000000000000e100", field.newDfp("1.23e100").toString());
+        Assert.assertEquals("toString #7", "-1.2300000000000000e100", field.newDfp("-1.23e100").toString());
+        Assert.assertEquals("toString #8", "12345678.1234", field.newDfp("12345678.1234").toString());
+        Assert.assertEquals("toString #9", "0.00001234", field.newDfp("0.00001234").toString());
+    }
+
+    @Test
+    public void testRound()
+    {
+        field.setRoundingMode(DfpField.RoundingMode.ROUND_DOWN);
+
+        // Round down
+        test(field.newDfp("12345678901234567890").add(field.newDfp("0.9")),
+             field.newDfp("12345678901234567890"),
+             DfpField.FLAG_INEXACT, "Round #1");
+
+        test(field.newDfp("12345678901234567890").add(field.newDfp("0.99999999")),
+             field.newDfp("12345678901234567890"),
+             DfpField.FLAG_INEXACT, "Round #2");
+
+        test(field.newDfp("-12345678901234567890").add(field.newDfp("-0.99999999")),
+             field.newDfp("-12345678901234567890"),
+             DfpField.FLAG_INEXACT, "Round #3");
+
+        field.setRoundingMode(DfpField.RoundingMode.ROUND_UP);
+
+        // Round up
+        test(field.newDfp("12345678901234567890").add(field.newDfp("0.1")),
+             field.newDfp("12345678901234567891"),
+             DfpField.FLAG_INEXACT, "Round #4");
+
+        test(field.newDfp("12345678901234567890").add(field.newDfp("0.0001")),
+             field.newDfp("12345678901234567891"),
+             DfpField.FLAG_INEXACT, "Round #5");
+
+        test(field.newDfp("-12345678901234567890").add(field.newDfp("-0.1")),
+             field.newDfp("-12345678901234567891"),
+             DfpField.FLAG_INEXACT, "Round #6");
+
+        test(field.newDfp("-12345678901234567890").add(field.newDfp("-0.0001")),
+             field.newDfp("-12345678901234567891"),
+             DfpField.FLAG_INEXACT, "Round #7");
+
+        field.setRoundingMode(DfpField.RoundingMode.ROUND_HALF_UP);
+
+        // Round half up
+        test(field.newDfp("12345678901234567890").add(field.newDfp("0.4999")),
+             field.newDfp("12345678901234567890"),
+             DfpField.FLAG_INEXACT, "Round #8");
+
+        test(field.newDfp("12345678901234567890").add(field.newDfp("0.5000")),
+             field.newDfp("12345678901234567891"),
+             DfpField.FLAG_INEXACT, "Round #9");
+
+        test(field.newDfp("-12345678901234567890").add(field.newDfp("-0.4999")),
+             field.newDfp("-12345678901234567890"),
+             DfpField.FLAG_INEXACT, "Round #10");
+
+        test(field.newDfp("-12345678901234567890").add(field.newDfp("-0.5000")),
+             field.newDfp("-12345678901234567891"),
+             DfpField.FLAG_INEXACT, "Round #11");
+
+        field.setRoundingMode(DfpField.RoundingMode.ROUND_HALF_DOWN);
+
+        // Round half down
+        test(field.newDfp("12345678901234567890").add(field.newDfp("0.5001")),
+             field.newDfp("12345678901234567891"),
+             DfpField.FLAG_INEXACT, "Round #12");
+
+        test(field.newDfp("12345678901234567890").add(field.newDfp("0.5000")),
+             field.newDfp("12345678901234567890"),
+             DfpField.FLAG_INEXACT, "Round #13");
+
+        test(field.newDfp("-12345678901234567890").add(field.newDfp("-0.5001")),
+             field.newDfp("-12345678901234567891"),
+             DfpField.FLAG_INEXACT, "Round #14");
+
+        test(field.newDfp("-12345678901234567890").add(field.newDfp("-0.5000")),
+             field.newDfp("-12345678901234567890"),
+             DfpField.FLAG_INEXACT, "Round #15");
+
+        field.setRoundingMode(DfpField.RoundingMode.ROUND_HALF_ODD);
+
+        // Round half odd
+        test(field.newDfp("12345678901234567890").add(field.newDfp("0.5000")),
+             field.newDfp("12345678901234567891"),
+             DfpField.FLAG_INEXACT, "Round #16");
+
+        test(field.newDfp("12345678901234567891").add(field.newDfp("0.5000")),
+             field.newDfp("12345678901234567891"),
+             DfpField.FLAG_INEXACT, "Round #17");
+
+        test(field.newDfp("-12345678901234567890").add(field.newDfp("-0.5000")),
+             field.newDfp("-12345678901234567891"),
+             DfpField.FLAG_INEXACT, "Round #18");
+
+        test(field.newDfp("-12345678901234567891").add(field.newDfp("-0.5000")),
+             field.newDfp("-12345678901234567891"),
+             DfpField.FLAG_INEXACT, "Round #19");
+
+        field.setRoundingMode(DfpField.RoundingMode.ROUND_CEIL);
+
+        // Round ceil
+        test(field.newDfp("12345678901234567890").add(field.newDfp("0.0001")),
+             field.newDfp("12345678901234567891"),
+             DfpField.FLAG_INEXACT, "Round #20");
+
+        test(field.newDfp("-12345678901234567890").add(field.newDfp("-0.9999")),
+             field.newDfp("-12345678901234567890"),
+             DfpField.FLAG_INEXACT, "Round #21");
+
+        field.setRoundingMode(DfpField.RoundingMode.ROUND_FLOOR);
+
+        // Round floor
+        test(field.newDfp("12345678901234567890").add(field.newDfp("0.9999")),
+             field.newDfp("12345678901234567890"),
+             DfpField.FLAG_INEXACT, "Round #22");
+
+        test(field.newDfp("-12345678901234567890").add(field.newDfp("-0.0001")),
+             field.newDfp("-12345678901234567891"),
+             DfpField.FLAG_INEXACT, "Round #23");
+
+        field.setRoundingMode(DfpField.RoundingMode.ROUND_HALF_EVEN);  // reset
+    }
+
+    @Test
+    public void testCeil()
+    {
+        test(field.newDfp("1234.0000000000000001").ceil(),
+             field.newDfp("1235"),
+             DfpField.FLAG_INEXACT, "Ceil #1");
+    }
+
+    @Test
+    public void testFloor()
+    {
+        test(field.newDfp("1234.9999999999999999").floor(),
+             field.newDfp("1234"),
+             DfpField.FLAG_INEXACT, "Floor #1");
+    }
+
+    @Test
+    public void testRint()
+    {
+        test(field.newDfp("1234.50000000001").rint(),
+             field.newDfp("1235"),
+             DfpField.FLAG_INEXACT, "Rint #1");
+
+        test(field.newDfp("1234.5000").rint(),
+             field.newDfp("1234"),
+             DfpField.FLAG_INEXACT, "Rint #2");
+
+        test(field.newDfp("1235.5000").rint(),
+             field.newDfp("1236"),
+             DfpField.FLAG_INEXACT, "Rint #3");
+    }
+
+    @Test
+    public void testCopySign()
+    {
+        test(Dfp.copysign(field.newDfp("1234."), field.newDfp("-1")),
+             field.newDfp("-1234"),
+             0, "CopySign #1");
+
+        test(Dfp.copysign(field.newDfp("-1234."), field.newDfp("-1")),
+             field.newDfp("-1234"),
+             0, "CopySign #2");
+
+        test(Dfp.copysign(field.newDfp("-1234."), field.newDfp("1")),
+             field.newDfp("1234"),
+             0, "CopySign #3");
+
+        test(Dfp.copysign(field.newDfp("1234."), field.newDfp("1")),
+             field.newDfp("1234"),
+             0, "CopySign #4");
+    }
+
+    @Test
+    public void testIntValue()
+    {
+        Assert.assertEquals("intValue #1", 1234, field.newDfp("1234").intValue());
+        Assert.assertEquals("intValue #2", -1234, field.newDfp("-1234").intValue());
+        Assert.assertEquals("intValue #3", 1234, field.newDfp("1234.5").intValue());
+        Assert.assertEquals("intValue #4", 1235, field.newDfp("1234.500001").intValue());
+        Assert.assertEquals("intValue #5", 2147483647, field.newDfp("1e1000").intValue());
+        Assert.assertEquals("intValue #6", -2147483648, field.newDfp("-1e1000").intValue());
+    }
+
+    @Test
+    public void testLog10K()
+    {
+        Assert.assertEquals("log10K #1", 1, field.newDfp("123456").log10K());
+        Assert.assertEquals("log10K #2", 2, field.newDfp("123456789").log10K());
+        Assert.assertEquals("log10K #3", 0, field.newDfp("2").log10K());
+        Assert.assertEquals("log10K #3", 0, field.newDfp("1").log10K());
+        Assert.assertEquals("log10K #4", -1, field.newDfp("0.1").log10K());
+    }
+
+    @Test
+    public void testPower10K()
+    {
+        Dfp d = field.newDfp();
+
+        test(d.power10K(0), field.newDfp("1"), 0, "Power10 #1");
+        test(d.power10K(1), field.newDfp("10000"), 0, "Power10 #2");
+        test(d.power10K(2), field.newDfp("100000000"), 0, "Power10 #3");
+
+        test(d.power10K(-1), field.newDfp("0.0001"), 0, "Power10 #4");
+        test(d.power10K(-2), field.newDfp("0.00000001"), 0, "Power10 #5");
+        test(d.power10K(-3), field.newDfp("0.000000000001"), 0, "Power10 #6");
+    }
+
+    @Test
+    public void testLog10()
+    {
+
+        Assert.assertEquals("log10 #1", 1, field.newDfp("12").log10());
+        Assert.assertEquals("log10 #2", 2, field.newDfp("123").log10());
+        Assert.assertEquals("log10 #3", 3, field.newDfp("1234").log10());
+        Assert.assertEquals("log10 #4", 4, field.newDfp("12345").log10());
+        Assert.assertEquals("log10 #5", 5, field.newDfp("123456").log10());
+        Assert.assertEquals("log10 #6", 6, field.newDfp("1234567").log10());
+        Assert.assertEquals("log10 #6", 7, field.newDfp("12345678").log10());
+        Assert.assertEquals("log10 #7", 8, field.newDfp("123456789").log10());
+        Assert.assertEquals("log10 #8", 9, field.newDfp("1234567890").log10());
+        Assert.assertEquals("log10 #9", 10, field.newDfp("12345678901").log10());
+        Assert.assertEquals("log10 #10", 11, field.newDfp("123456789012").log10());
+        Assert.assertEquals("log10 #11", 12, field.newDfp("1234567890123").log10());
+
+        Assert.assertEquals("log10 #12", 0, field.newDfp("2").log10());
+        Assert.assertEquals("log10 #13", 0, field.newDfp("1").log10());
+        Assert.assertEquals("log10 #14", -1, field.newDfp("0.12").log10());
+        Assert.assertEquals("log10 #15", -2, field.newDfp("0.012").log10());
+    }
+
+    @Test
+    public void testPower10()
+    {
+        Dfp d = field.newDfp();
+
+        test(d.power10(0), field.newDfp("1"), 0, "Power10 #1");
+        test(d.power10(1), field.newDfp("10"), 0, "Power10 #2");
+        test(d.power10(2), field.newDfp("100"), 0, "Power10 #3");
+        test(d.power10(3), field.newDfp("1000"), 0, "Power10 #4");
+        test(d.power10(4), field.newDfp("10000"), 0, "Power10 #5");
+        test(d.power10(5), field.newDfp("100000"), 0, "Power10 #6");
+        test(d.power10(6), field.newDfp("1000000"), 0, "Power10 #7");
+        test(d.power10(7), field.newDfp("10000000"), 0, "Power10 #8");
+        test(d.power10(8), field.newDfp("100000000"), 0, "Power10 #9");
+        test(d.power10(9), field.newDfp("1000000000"), 0, "Power10 #10");
+
+        test(d.power10(-1), field.newDfp(".1"), 0, "Power10 #11");
+        test(d.power10(-2), field.newDfp(".01"), 0, "Power10 #12");
+        test(d.power10(-3), field.newDfp(".001"), 0, "Power10 #13");
+        test(d.power10(-4), field.newDfp(".0001"), 0, "Power10 #14");
+        test(d.power10(-5), field.newDfp(".00001"), 0, "Power10 #15");
+        test(d.power10(-6), field.newDfp(".000001"), 0, "Power10 #16");
+        test(d.power10(-7), field.newDfp(".0000001"), 0, "Power10 #17");
+        test(d.power10(-8), field.newDfp(".00000001"), 0, "Power10 #18");
+        test(d.power10(-9), field.newDfp(".000000001"), 0, "Power10 #19");
+        test(d.power10(-10), field.newDfp(".0000000001"), 0, "Power10 #20");
+    }
+
+    @Test
+    public void testRemainder()
+    {
+        test(field.newDfp("10").remainder(field.newDfp("3")),
+             field.newDfp("1"),
+             DfpField.FLAG_INEXACT, "Remainder #1");
+
+        test(field.newDfp("9").remainder(field.newDfp("3")),
+             field.newDfp("0"),
+             0, "Remainder #2");
+
+        test(field.newDfp("-9").remainder(field.newDfp("3")),
+             field.newDfp("-0"),
+             0, "Remainder #3");
+    }
+
+    @Test
+    public void testSqrt()
+    {
+        test(field.newDfp("0").sqrt(),
+             field.newDfp("0"),
+             0, "Sqrt #1");
+
+        test(field.newDfp("-0").sqrt(),
+             field.newDfp("-0"),
+             0, "Sqrt #2");
+
+        test(field.newDfp("1").sqrt(),
+             field.newDfp("1"),
+             0, "Sqrt #3");
+
+        test(field.newDfp("2").sqrt(),
+             field.newDfp("1.4142135623730950"),
+             DfpField.FLAG_INEXACT, "Sqrt #4");
+
+        test(field.newDfp("3").sqrt(),
+             field.newDfp("1.7320508075688773"),
+             DfpField.FLAG_INEXACT, "Sqrt #5");
+
+        test(field.newDfp("5").sqrt(),
+             field.newDfp("2.2360679774997897"),
+             DfpField.FLAG_INEXACT, "Sqrt #6");
+
+        test(field.newDfp("500").sqrt(),
+             field.newDfp("22.3606797749978970"),
+             DfpField.FLAG_INEXACT, "Sqrt #6.2");
+
+        test(field.newDfp("50000").sqrt(),
+             field.newDfp("223.6067977499789696"),
+             DfpField.FLAG_INEXACT, "Sqrt #6.3");
+
+        test(field.newDfp("-1").sqrt(),
+             nan,
+             DfpField.FLAG_INVALID, "Sqrt #7");
+
+        test(pinf.sqrt(),
+             pinf,
+             0, "Sqrt #8");
+
+        test(field.newDfp((byte) 1, (byte) Dfp.QNAN).sqrt(),
+             nan,
+             0, "Sqrt #9");
+
+        test(field.newDfp((byte) 1, (byte) Dfp.SNAN).sqrt(),
+             nan,
+             DfpField.FLAG_INVALID, "Sqrt #9");
+    }
+
+}
