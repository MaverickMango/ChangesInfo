diff --git a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java
index 69d78e2..ecc1509 100644
--- a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java
+++ b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java
@@ -422,7 +422,10 @@
 
         @Override
         public void visit(NodeTraversal t, Node n, Node parent) {
-          if (NodeUtil.isName(n) && n.getString().equals(varName)) {
+          if (NodeUtil.isName(n) && n.getString().equals(varName) &&
+              // do not count in if it is left child of an assignment operator
+              !(NodeUtil.isAssign(parent) &&
+               (parent.getFirstChild() == n))) {
             numUseWithinUseCfgNode++;
           }
         }
diff --git a/test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java b/test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java
index cf27dc3..c8a1312 100644
--- a/test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java
+++ b/test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java
@@ -50,12 +50,14 @@
     inline("var x; x = 1; print(x)", "var x; print(1)");
     inline("var x; x = 1; x", "var x; 1");
     inline("var x; x = 1; var a = x", "var x; var a = 1");
+    inline("var x; x = 1; x = x + 1", "var x; x = 1 + 1");
   }
 
   public void testSimpleVar() {
     inline("var x = 1; print(x)", "var x; print(1)");
     inline("var x = 1; x", "var x; 1");
     inline("var x = 1; var a = x", "var x; var a = 1");
+    inline("var x = 1; x = x + 1", "var x; x = 1 + 1");
   }
 
   public void testExported() {
@@ -355,6 +357,17 @@
     noInline("var x; function foo() { var y = x; print(y) }");
   }
 
+  public void testInlineIfNameIsLeftSideOfAssign() {
+    inline("var x = 1; x = print(x) + 1", "var x; x = print(1) + 1");
+    inline("var x = 1; L: x = x + 2", "var x; L: x = 1 + 2");
+    inline("var x = 1; x = (x = x + 1)", "var x; x = (x = 1 + 1)");
+
+    noInline("var x = 1; x = (x = (x = 10) + x)");
+    noInline("var x = 1; x = (f(x) = (x = 10) + x);");
+    noInline("var x = 1; x=-1,foo(x)");
+    noInline("var x = 1; x-=1,foo(x)");
+  }
+
   public void testInlineArguments() {
     testSame("function _func(x) { print(x) }");
     testSame("function _func(x,y) { if(y) { x = 1 }; print(x) }");
