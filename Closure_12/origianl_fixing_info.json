{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "/home/liumengjiao/Desktop/CI/Benchmark/data/changesInfo/",
  "properties": {
    "trigger.tests": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest::testIssue794b",
    "test.dir": "test",
    "clz.modified": "com.google.javascript.jscomp.MaybeReachingVariableUse",
    "src.dir": "src"
  },
  "timeoutSecond": 100,
  "proj": "Closure",
  "id": "12",
  "workingDir": "../bugs/Closure_12_buggy",
  "buggyCommit": "919fda930ca242e2d1490e6413b601c8bad701b4",
  "inducingCommit": "209cd96451c4c5bf1f4c5fee6453c481946aa596",
  "originalCommit": "a486b8345202c35efe3a2b63f16259e1933c359c",
  "bug_name": "Closure_12",
  "derive": "defects4j",
  "original_fixing_commit": "d06ac163013a3779fcec7c2f544ba99d08f69f58",
  "buildFiles_changed": false,
  "regression": true,
  "inducing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "com.google.javascript.jscomp.FlowSensitiveInlineVariables\\$Candidate:getNumUseInUseCfgNode:[Node n, Node parant]:void"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "com.google.javascript.jscomp.FlowSensitiveInlineVariables\\$Candidate:getNumUseInUseCfgNode:[Node n, Node parant]:void"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "425"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "425",
            "426",
            "427",
            "428"
          ],
          "num": 4
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\nindex 69d78e2..ecc1509 100644\n--- a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n+++ b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n@@ -422,7 +422,10 @@\n \n         @Override\n         public void visit(NodeTraversal t, Node n, Node parent) {\n-          if (NodeUtil.isName(n) \u0026\u0026 n.getString().equals(varName)) {\n+          if (NodeUtil.isName(n) \u0026\u0026 n.getString().equals(varName) \u0026\u0026\n+              // do not count in if it is left child of an assignment operator\n+              !(NodeUtil.isAssign(parent) \u0026\u0026\n+               (parent.getFirstChild() \u003d\u003d n))) {\n             numUseWithinUseCfgNode++;\n           }\n         }\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "PrefixExpression [14702,14778]"
        }
      ]
    }
  ],
  "inducing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  },
  "trigger_tests": [
    {
      "test_class": "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest",
      "test_function": "testIssue794b",
      "assertion_line": "513",
      "exception": "junit.framework.AssertionFailedError",
      "message": "Expected: function _func(){var x\u003d1;try{x\u003dx+someFunction()}catch(e){}x\u003dx+1;try{x\u003dx+someFunction()}catch(e$$1){}return x}\nResult: function _func(){var x;try{x\u003d1+someFunction()}catch(e){}try{x\u003dx+1+someFunction()}catch(e$$1){}return x}"
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/jscomp/MaybeReachingVariableUse.java",
        "src/com/google/javascript/jscomp/MaybeReachingVariableUse.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "com.google.javascript.jscomp.MaybeReachingVariableUse:flowThrough:[Node n, ReachingUses input]:ReachingUses"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "com.google.javascript.jscomp.MaybeReachingVariableUse:hasExceptionHandler:[Node cfgNode]:boolean",
            "com.google.javascript.jscomp.MaybeReachingVariableUse:flowThrough:[Node n, ReachingUses input]:ReachingUses"
          ],
          "num": 2
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "24",
            "148"
          ],
          "num": 2
        },
        {
          "qualified_names": [
            "25",
            "149",
            "150",
            "151",
            "152",
            "153",
            "154",
            "155",
            "159",
            "160",
            "161",
            "162",
            "163",
            "164",
            "165",
            "166",
            "167",
            "168"
          ],
          "num": 18
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java b/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\nindex 9867a14..8361ac9 100644\n--- a/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\n+++ b/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\n@@ -22,6 +22,7 @@\n import com.google.common.collect.Sets;\n import com.google.javascript.jscomp.ControlFlowGraph.Branch;\n import com.google.javascript.jscomp.Scope.Var;\n+import com.google.javascript.jscomp.graph.DiGraph.DiGraphEdge;\n import com.google.javascript.jscomp.graph.GraphNode;\n import com.google.javascript.jscomp.graph.LatticeElement;\n import com.google.javascript.rhino.Node;\n@@ -145,10 +146,26 @@\n   @Override\n   ReachingUses flowThrough(Node n, ReachingUses input) {\n     ReachingUses output \u003d new ReachingUses(input);\n-    computeMayUse(n, n, output, false);\n+\n+    // If there\u0027s an ON_EX edge, this cfgNode may or may not get executed.\n+    // We can express this concisely by just pretending this happens in\n+    // a conditional.\n+    boolean conditional \u003d hasExceptionHandler(n);\n+    computeMayUse(n, n, output, conditional);\n+\n     return output;\n   }\n \n+  private boolean hasExceptionHandler(Node cfgNode) {\n+    List\u003cDiGraphEdge\u003cNode, Branch\u003e\u003e branchEdges \u003d getCfg().getOutEdges(cfgNode);\n+    for (DiGraphEdge\u003cNode, Branch\u003e edge : branchEdges) {\n+      if (edge.getValue() \u003d\u003d Branch.ON_EX) {\n+        return true;\n+      }\n+    }\n+    return false;\n+  }\n+\n   private void computeMayUse(\n       Node n, Node cfgNode, ReachingUses output, boolean conditional) {\n     switch (n.getType()) {\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "ImportDeclaration [935,997]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [4828,5119]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [4709,4754]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: conditional [4787,4798]"
        },
        {
          "type": "delete-node",
          "from": "BooleanLiteral: false [4504,4509]",
          "to": ""
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [
        "com.google.javascript.jscomp.MaybeReachingVariableUse:hasExceptionHandler:[Node cfgNode]:boolean"
      ],
      "num": 1
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  },
  "patch_changed_mths": {
    "qualified_names": [
      "com.google.javascript.jscomp.MaybeReachingVariableUse:flowThrough(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/jscomp/MaybeReachingVariableUse$ReachingUses;)Lcom/google/javascript/jscomp/MaybeReachingVariableUse$ReachingUses;:regression"
    ],
    "num": 1
  }
}