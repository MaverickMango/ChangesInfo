diff -r -u original/src/com/google/javascript/jscomp/Compiler.java buggy/src/com/google/javascript/jscomp/Compiler.java
--- original/src/com/google/javascript/jscomp/Compiler.java	2023-06-13 15:31:40.639087485 +0800
+++ buggy/src/com/google/javascript/jscomp/Compiler.java	2023-06-12 11:40:21.990922167 +0800
@@ -24,6 +24,9 @@
 import com.google.javascript.jscomp.CompilerOptions.DevMode;
 import com.google.javascript.jscomp.CompilerOptions.LanguageMode;
 import com.google.javascript.jscomp.CompilerOptions.TracerMode;
+import com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection;
+import com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceMap;
+import com.google.javascript.jscomp.Scope.Var;
 import com.google.javascript.jscomp.deps.SortedDependencies.CircularDependencyException;
 import com.google.javascript.jscomp.deps.SortedDependencies.MissingProvideException;
 import com.google.javascript.jscomp.mozilla.rhino.ErrorReporter;
@@ -170,6 +173,8 @@
 
   private final PrintStream outStream;
 
+  private GlobalVarReferenceMap globalRefMap = null;
+
   /**
    * Creates a Compiler that reports errors and warnings to its logger.
    */
@@ -232,15 +237,41 @@
       }
     }
 
+    // DiagnosticGroups override the plain checkTypes option.
+    if (options.enables(DiagnosticGroups.CHECK_TYPES)) {
+      options.checkTypes = true;
+    } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {
+      options.checkTypes = false;
+    } else if (!options.checkTypes) {
+      // If DiagnosticGroups did not override the plain checkTypes
+      // option, and checkTypes is enabled, then turn off the
+      // parser type warnings.
+      options.setWarningLevel(
+          DiagnosticGroup.forType(
+              RhinoErrorReporter.TYPE_PARSE_ERROR),
+          CheckLevel.OFF);
+    }
+
+    if (options.checkGlobalThisLevel.isOn()) {
+      options.setWarningLevel(
+          DiagnosticGroups.GLOBAL_THIS,
+          options.checkGlobalThisLevel);
+    }
+
+    if (options.getLanguageIn() == LanguageMode.ECMASCRIPT5_STRICT) {
+      options.setWarningLevel(
+          DiagnosticGroups.ES5_STRICT,
+          CheckLevel.ERROR);
+    }
+
     // Initialize the warnings guard.
     List<WarningsGuard> guards = Lists.newArrayList();
     guards.add(
         new SuppressDocWarningsGuard(
             getDiagnosticGroups().getRegisteredGroups()));
-    WarningsGuard warningsGuard = options.getWarningsGuard();
-    if (warningsGuard != null) {
-      guards.add(options.getWarningsGuard());
-    }
+    guards.add(options.getWarningsGuard());
+
+    ComposeWarningsGuard composedGuards = new ComposeWarningsGuard(guards);
 
     // All passes must run the variable check. This synthesizes
     // variables later so that the compiler doesn't crash. It also
@@ -248,28 +279,12 @@
     // about missing variable declarations, we shut that specific
     // error off.
     if (!options.checkSymbols &&
-        (warningsGuard == null || !warningsGuard.disables(
-            DiagnosticGroups.CHECK_VARIABLES))) {
-      guards.add(new DiagnosticGroupWarningsGuard(
+        !composedGuards.enables(DiagnosticGroups.CHECK_VARIABLES)) {
+      composedGuards.addGuard(new DiagnosticGroupWarningsGuard(
           DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));
     }
 
-    // DiagnosticGroups override the plain checkTypes option.
-    if (options.enables(DiagnosticGroups.CHECK_TYPES)) {
-      options.checkTypes = true;
-    } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {
-      options.checkTypes = false;
-    } else if (!options.checkTypes) {
-      // If DiagnosticGroups did not override the plain checkTypes
-      // option, and checkTypes is enabled, then turn off the
-      // parser type warnings.
-      guards.add(
-          new DiagnosticGroupWarningsGuard(
-              DiagnosticGroup.forType(
-                  RhinoErrorReporter.TYPE_PARSE_ERROR),
-              CheckLevel.OFF));
-    }
-    this.warningsGuard = new ComposeWarningsGuard(guards);
+    this.warningsGuard = composedGuards;
   }
 
   /**
@@ -348,6 +363,7 @@
     // Create the source map if necessary.
     if (options.sourceMapOutputPath != null) {
       sourceMap = options.sourceMapFormat.getInstance();
+      sourceMap.setPrefixMappings(options.sourceMapLocationMappings);
     }
   }
 
@@ -749,6 +765,7 @@
     endPass();
   }
 
+  @Override
   void process(CompilerPass p) {
     p.process(externsRoot, jsRoot);
   }
@@ -892,9 +909,7 @@
     return errorManager.getWarnings();
   }
 
-  /**
-   * Returns the root node of the AST, which includes both externs and source.
-   */
+  @Override
   public Node getRoot() {
     return externAndJsRoot;
   }
@@ -948,6 +963,25 @@
     return inputsByName.get(name);
   }
 
+  /**
+   * Removes an input file from AST.
+   * @param name The name of the file to be removed.
+   */
+  protected void removeExternInput(String name) {
+    CompilerInput input = getInput(name);
+    if (input == null) {
+      return;
+    }
+    Preconditions.checkState(input.isExtern(), "Not an extern input: "
+        + input.getName());
+    inputsByName.remove(name);
+    externs.remove(input);
+    Node root = input.getAstRoot(this);
+    if (root != null) {
+      root.detachFromParent();
+    }
+  }
+
   @Override
   public CompilerInput newExternInput(String name) {
     if (inputsByName.containsKey(name)) {
@@ -957,16 +991,17 @@
     CompilerInput input = new CompilerInput(ast, name, true);
     inputsByName.put(name, input);
     externsRoot.addChildToFront(ast.getAstRoot(this));
+    externs.add(0, input);
     return input;
   }
 
   /** Add a source input dynamically. Intended for incremental compilation. */
   void addIncrementalSourceAst(JsAst ast) {
-    String sourceName = ast.getSourceFile().getName();
+    String intputName = ast.getSourceFile().getName();
     Preconditions.checkState(
-        getInput(sourceName) == null,
-        "Duplicate input of name " + sourceName);
-    inputsByName.put(sourceName, new CompilerInput(ast));
+        getInput(intputName) == null,
+        "Duplicate input of name " + intputName);
+    inputsByName.put(intputName, new CompilerInput(ast));
   }
 
   /**
@@ -979,11 +1014,11 @@
    * @return Whether the new AST was attached successfully.
    */
   boolean replaceIncrementalSourceAst(JsAst ast) {
-    String sourceName = ast.getSourceFile().getName();
+    String inputName = ast.getSourceFile().getName();
     CompilerInput oldInput =
         Preconditions.checkNotNull(
-            getInput(sourceName),
-            "No input to replace: " + sourceName);
+            getInput(inputName),
+            "No input to replace: " + inputName);
     Node newRoot = ast.getAstRoot(this);
     if (newRoot == null) {
       return false;
@@ -997,7 +1032,7 @@
     }
 
     CompilerInput newInput = new CompilerInput(ast);
-    inputsByName.put(sourceName, newInput);
+    inputsByName.put(inputName, newInput);
 
     JSModule module = oldInput.getModule();
     if (module != null) {
@@ -1021,10 +1056,35 @@
   }
 
   @Override
-  ScopeCreator getTypedScopeCreator() {
+  MemoizedScopeCreator getTypedScopeCreator() {
     return getPassConfig().getTypedScopeCreator();
   }
 
+  @SuppressWarnings("unchecked")
+  DefaultPassConfig ensureDefaultPassConfig() {
+    PassConfig passes = getPassConfig().getBasePassConfig();
+    Preconditions.checkState(passes instanceof DefaultPassConfig,
+        "PassConfigs must eventually delegate to the DefaultPassConfig");
+    return (DefaultPassConfig) passes;
+  }
+
+  SymbolTable buildKnownSymbolTable() {
+    SymbolTable symbolTable = new SymbolTable();
+
+    MemoizedScopeCreator typedScopeCreator = getTypedScopeCreator();
+    if (typedScopeCreator != null) {
+      symbolTable.addSymbolsFrom(typedScopeCreator);
+    }
+
+    GlobalNamespace globalNamespace =
+        ensureDefaultPassConfig().getGlobalNamespace();
+    if (globalNamespace != null) {
+      symbolTable.addSymbolsFrom(globalNamespace);
+    }
+
+    return symbolTable;
+  }
+
   @Override
   public Scope getTopScope() {
     return getPassConfig().getTopScope();
@@ -1080,6 +1140,12 @@
     jsRoot = new Node(Token.BLOCK);
     jsRoot.setIsSyntheticBlock(true);
 
+    externsRoot = new Node(Token.BLOCK);
+    externsRoot.setIsSyntheticBlock(true);
+
+    externAndJsRoot = new Node(Token.BLOCK, externsRoot, jsRoot);
+    externAndJsRoot.setIsSyntheticBlock(true);
+
     if (options.tracer.isOn()) {
       tracker = new PerformanceTracker(jsRoot,
           options.tracer == TracerMode.ALL);
@@ -1090,8 +1156,6 @@
 
     try {
       // Parse externs sources.
-      externsRoot = new Node(Token.BLOCK);
-      externsRoot.setIsSyntheticBlock(true);
       for (CompilerInput input : externs) {
         Node n = input.getAstRoot(this);
         if (hasErrors()) {
@@ -1132,9 +1196,6 @@
       boolean staleInputs = false;
       for (CompilerInput input : inputs) {
         Node n = input.getAstRoot(this);
-        if (hasErrors()) {
-          return null;
-        }
 
         // Inputs can have a null AST during initial parse.
         if (n == null) {
@@ -1194,9 +1255,9 @@
         jsRoot.addChildToBack(n);
       }
 
-      externAndJsRoot = new Node(Token.BLOCK, externsRoot, jsRoot);
-      externAndJsRoot.setIsSyntheticBlock(true);
-
+      if (hasErrors()) {
+        return null;
+      }
       return externAndJsRoot;
     } finally {
       stopTracer(tracer, "parseInputs");
@@ -1378,7 +1439,7 @@
 
           String delimiter = options.inputDelimiter;
 
-          String sourceName = (String)root.getProp(Node.SOURCENAME_PROP);
+          String sourceName = root.getSourceFileName();
           Preconditions.checkState(sourceName != null);
           Preconditions.checkState(!sourceName.isEmpty());
 
@@ -1402,7 +1463,9 @@
               cb.getLineIndex(), cb.getColumnIndex());
         }
 
-        String code = toSource(root, sourceMap);
+        // if LanguageMode is ECMASCRIPT5_STRICT, only print 'use strict'
+        // for the first input file
+        String code = toSource(root, sourceMap, inputSeqNum == 0);
         if (!code.isEmpty()) {
           cb.append(code);
 
@@ -1431,19 +1494,19 @@
   @Override
   String toSource(Node n) {
     initCompilerOptionsIfTesting();
-    return toSource(n, null);
+    return toSource(n, null, true);
   }
 
   /**
    * Generates JavaScript source code for an AST.
    */
-  private String toSource(Node n, SourceMap sourceMap) {
+  private String toSource(Node n, SourceMap sourceMap, boolean firstOutput) {
     CodePrinter.Builder builder = new CodePrinter.Builder(n);
     builder.setPrettyPrint(options.prettyPrint);
     builder.setLineBreak(options.lineBreak);
     builder.setSourceMap(sourceMap);
     builder.setSourceMapDetailLevel(options.sourceMapDetailLevel);
-    builder.setTagAsStrict(
+    builder.setTagAsStrict(firstOutput &&
         options.getLanguageOut() == LanguageMode.ECMASCRIPT5_STRICT);
     builder.setLineLengthThreshold(options.lineLengthThreshold);
 
@@ -1646,7 +1709,12 @@
 
   @Override
   public boolean acceptEcmaScript5() {
-    return options.getLanguageIn() == LanguageMode.ECMASCRIPT5;
+    switch (options.getLanguageIn()) {
+      case ECMASCRIPT5:
+      case ECMASCRIPT5_STRICT:
+        return true;
+    }
+    return false;
   }
 
   public LanguageMode languageMode() {
@@ -1679,7 +1747,8 @@
       parserConfig = ParserRunner.createConfig(
         isIdeMode(),
         mode,
-        acceptConstKeyword());
+        acceptConstKeyword(),
+        options.extraAnnotationNames);
     }
     return parserConfig;
   }
@@ -1720,12 +1789,7 @@
   @Override
   public CheckLevel getErrorLevel(JSError error) {
     Preconditions.checkNotNull(options);
-    WarningsGuard guards = options.getWarningsGuard();
-    if (guards == null) {
-      return error.level;
-    } else {
-      return guards.level(error);
-    }
+    return warningsGuard.level(error);
   }
 
   /**
@@ -1887,6 +1951,13 @@
   }
 
   /**
+   * Gets the externs in the order in which they are being processed.
+   */
+  List<CompilerInput> getExternsInOrder() {
+    return Collections.<CompilerInput>unmodifiableList(externs);
+  }
+
+  /**
    * Stores the internal compiler state just before optimization is performed.
    * This can be saved and restored in order to efficiently optimize multiple
    * different output targets without having to perform checking multiple times.
@@ -1964,4 +2035,22 @@
   void setHasRegExpGlobalReferences(boolean references) {
     hasRegExpGlobalReferences = references;
   }
+
+  @Override
+  void updateGlobalVarReferences(Map<Var, ReferenceCollection> refMapPatch,
+      Node collectionRoot) {
+    Preconditions.checkState(collectionRoot.getType() == Token.SCRIPT
+        || collectionRoot.getType() == Token.BLOCK);
+    if (globalRefMap == null) {
+      globalRefMap = new GlobalVarReferenceMap(getInputsInOrder(),
+          getExternsInOrder());
+    }
+    globalRefMap.updateGlobalVarReferences(refMapPatch, collectionRoot);
+  }
+
+  @Override
+  ReferenceMap getGlobalVarReferences() {
+    return globalRefMap;
+  }
+
 }
diff -r -u original/test/com/google/javascript/jscomp/CommandLineRunnerTest.java buggy/test/com/google/javascript/jscomp/CommandLineRunnerTest.java
--- original/test/com/google/javascript/jscomp/CommandLineRunnerTest.java	2023-06-13 15:31:40.639087485 +0800
+++ buggy/test/com/google/javascript/jscomp/CommandLineRunnerTest.java	2023-06-12 11:40:21.990922167 +0800
@@ -18,10 +18,12 @@
 
 import com.google.common.base.Function;
 import com.google.common.base.Joiner;
+import com.google.common.base.Preconditions;
 import com.google.common.base.Supplier;
 import com.google.common.base.Suppliers;
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.Lists;
+import com.google.javascript.jscomp.CompilerOptions.LanguageMode;
 import com.google.javascript.rhino.Node;
 
 import junit.framework.TestCase;
@@ -114,11 +116,65 @@
     super.tearDown();
   }
 
+  public void testWarningGuardOrdering1() {
+    args.add("--jscomp_error=globalThis");
+    args.add("--jscomp_off=globalThis");
+    testSame("function f() { this.a = 3; }");
+  }
+
+  public void testWarningGuardOrdering2() {
+    args.add("--jscomp_off=globalThis");
+    args.add("--jscomp_error=globalThis");
+    test("function f() { this.a = 3; }", CheckGlobalThis.GLOBAL_THIS);
+  }
+
+  public void testWarningGuardOrdering3() {
+    args.add("--jscomp_warning=globalThis");
+    args.add("--jscomp_off=globalThis");
+    testSame("function f() { this.a = 3; }");
+  }
+
+  public void testWarningGuardOrdering4() {
+    args.add("--jscomp_off=globalThis");
+    args.add("--jscomp_warning=globalThis");
+    test("function f() { this.a = 3; }", CheckGlobalThis.GLOBAL_THIS);
+  }
+
+  public void testCheckGlobalThisOffByDefault() {
+    testSame("function f() { this.a = 3; }");
+  }
+
+  public void testCheckGlobalThisOnWithAdvancedMode() {
+    args.add("--compilation_level=ADVANCED_OPTIMIZATIONS");
+    test("function f() { this.a = 3; }", CheckGlobalThis.GLOBAL_THIS);
+  }
+
+  public void testCheckGlobalThisOnWithErrorFlag() {
+    args.add("--jscomp_error=globalThis");
+    test("function f() { this.a = 3; }", CheckGlobalThis.GLOBAL_THIS);
+  }
+
   public void testTypeCheckingOffByDefault() {
     test("function f(x) { return x; } f();",
          "function f(a) { return a; } f();");
   }
 
+  public void testReflectedMethods() {
+    args.add("--compilation_level=ADVANCED_OPTIMIZATIONS");
+    test(
+        "/** @constructor */" +
+        "function Foo() {}" +
+        "Foo.prototype.handle = function(x, y) { alert(y); };" +
+        "var x = goog.reflect.object(Foo, {handle: 1});" +
+        "for (var i in x) { x[i].call(x); }" +
+        "window['Foo'] = Foo;",
+        "function a() {}" +
+        "a.prototype.a = function(e, d) { alert(d); };" +
+        "var b = goog.c.b(a, {a: 1}),c;" +
+        "for (c in b) { b[c].call(b); }" +
+        "window.Foo = a;");
+  }
+
   public void testTypeCheckingOnWithVerbose() {
     args.add("--warning_level=VERBOSE");
     test("function f(x) { return x; } f();", TypeCheck.WRONG_ARGUMENT_COUNT);
@@ -168,6 +224,12 @@
     testSame("x = 3;");
   }
 
+  public void testCheckSymbolsOverrideForQuiet() {
+    args.add("--warning_level=QUIET");
+    args.add("--jscomp_error=undefinedVars");
+    test("x = 3;", VarCheck.UNDEFINED_VAR_ERROR);
+  }
+
   public void testCheckUndefinedProperties1() {
     args.add("--warning_level=VERBOSE");
     args.add("--jscomp_error=missingProperties");
@@ -236,22 +298,22 @@
 
   public void testProcessClosurePrimitives() {
     test("var goog = {}; goog.provide('goog.dom');",
-         "var goog = {}; goog.dom = {};");
+         "var goog = {dom:{}};");
     args.add("--process_closure_primitives=false");
     testSame("var goog = {}; goog.provide('goog.dom');");
   }
 
   public void testCssNameWiring() throws Exception {
-    String prefix =
-        "var goog = {}; goog.getCssName = function() {};" +
-         "goog.setCssNameMapping = function() {};";
-    test(prefix + "goog.setCssNameMapping({'goog': 'a', 'button': 'b'});" +
+    test("var goog = {}; goog.getCssName = function() {};" +
+         "goog.setCssNameMapping = function() {};" +
+         "goog.setCssNameMapping({'goog': 'a', 'button': 'b'});" +
          "var a = goog.getCssName('goog-button');" +
          "var b = goog.getCssName('css-button');" +
          "var c = goog.getCssName('goog-menu');" +
          "var d = goog.getCssName('css-menu');",
-         prefix +
-         "var a = 'a-b'," +
+         "var goog = { getCssName: function() {}," +
+         "             setCssNameMapping: function() {} }," +
+         "    a = 'a-b'," +
          "    b = 'css-b'," +
          "    c = 'a-menu'," +
          "    d = 'css-menu';");
@@ -274,6 +336,7 @@
 
   public void testIssue115() {
     args.add("--compilation_level=SIMPLE_OPTIMIZATIONS");
+    args.add("--jscomp_off=es5Strict");
     args.add("--warning_level=VERBOSE");
     test("function f() { " +
          "  var arguments = Array.prototype.slice.call(arguments, 0);" +
@@ -297,6 +360,12 @@
          "}");
   }
 
+  public void testIssue504() {
+    args.add("--compilation_level=ADVANCED_OPTIMIZATIONS");
+    test("void function() { alert('hi'); }();",
+         "alert('hi');", CheckSideEffects.USELESS_CODE_ERROR);
+  }
+
   public void testDebugFlag1() {
     args.add("--compilation_level=SIMPLE_OPTIMIZATIONS");
     args.add("--debug=false");
@@ -558,7 +627,16 @@
     args.add("--js_output_file");
     args.add("/path/to/out.js");
     testSame("var x = 3;");
-    assertEquals(SourceMap.Format.LEGACY,
+    assertEquals(SourceMap.Format.DEFAULT,
+        lastCompiler.getOptions().sourceMapFormat);
+  }
+
+  public void testSourceMapFormat2() {
+    args.add("--js_output_file");
+    args.add("/path/to/out.js");
+    args.add("--source_map_format=V3");
+    testSame("var x = 3;");
+    assertEquals(SourceMap.Format.V3,
         lastCompiler.getOptions().sourceMapFormat);
   }
 
@@ -576,8 +654,8 @@
           "var x = 3;", "var y = 5;", "var z = 7;", "var a = 9;"});
 
     StringBuilder builder = new StringBuilder();
-    lastCommandLineRunner.printModuleGraphManifestTo(
-        lastCompiler.getModuleGraph(), builder);
+    lastCommandLineRunner.printModuleGraphManifestOrBundleTo(
+        lastCompiler.getModuleGraph(), builder, true);
     assertEquals(
         "{m0}\n" +
         "i0\n" +
@@ -599,8 +677,8 @@
           "var x = 3;", "var y = 5;", "var z = 7;", "var a = 9;"});
 
     StringBuilder builder = new StringBuilder();
-    lastCommandLineRunner.printModuleGraphManifestTo(
-        lastCompiler.getModuleGraph(), builder);
+    lastCommandLineRunner.printModuleGraphManifestOrBundleTo(
+        lastCompiler.getModuleGraph(), builder, true);
     assertEquals(
         "{m0}\n" +
         "i0\n" +
@@ -699,6 +777,48 @@
        CheckAccessControls.DEPRECATED_NAME);
   }
 
+  public void testTwoParseErrors() {
+    // If parse errors are reported in different files, make
+    // sure all of them are reported.
+    Compiler compiler = compile(new String[] {
+      "var a b;",
+      "var b c;"
+    });
+    assertEquals(2, compiler.getErrors().length);
+  }
+
+  public void testES3ByDefault() {
+    test("var x = f.function", RhinoErrorReporter.PARSE_ERROR);
+  }
+
+  public void testES5() {
+    args.add("--language_in=ECMASCRIPT5");
+    test("var x = f.function", "var x = f.function");
+    test("var let", "var let");
+  }
+
+  public void testES5Strict() {
+    args.add("--language_in=ECMASCRIPT5_STRICT");
+    test("var x = f.function", "'use strict';var x = f.function");
+    test("var let", RhinoErrorReporter.PARSE_ERROR);
+  }
+
+  public void testES5StrictUseStrict() {
+    args.add("--language_in=ECMASCRIPT5_STRICT");
+    Compiler compiler = compile(new String[] {"var x = f.function"});
+    String outputSource = compiler.toSource();
+    assertEquals("'use strict'", outputSource.substring(0, 12));
+  }
+
+  public void testES5StrictUseStrictMultipleInputs() {
+    args.add("--language_in=ECMASCRIPT5_STRICT");
+    Compiler compiler = compile(new String[] {"var x = f.function",
+        "var y = f.function", "var z = f.function"});
+    String outputSource = compiler.toSource();
+    assertEquals("'use strict'", outputSource.substring(0, 12));
+    assertEquals(outputSource.substring(13).indexOf("'use strict'"), -1);
+  }
+
   /* Helper functions */
 
   private void testSame(String original) {
@@ -760,6 +880,10 @@
     test(new String[] { original }, warning);
   }
 
+  private void test(String original, String expected, DiagnosticType warning) {
+    test(new String[] { original }, new String[] { expected }, warning);
+  }
+
   /**
    * Asserts that when compiling, there is an error or warning.
    */
@@ -856,8 +980,13 @@
     for (int i = 0; i < original.length; i++) {
       inputs.add(JSSourceFile.fromCode("input" + i, original[i]));
     }
-    compiler.init(externs, inputs, new CompilerOptions());
+    CompilerOptions options = new CompilerOptions();
+    // ECMASCRIPT5 is the most forgiving.
+    options.setLanguageIn(LanguageMode.ECMASCRIPT5);
+    compiler.init(externs, inputs, options);
     Node all = compiler.parseInputs();
+    Preconditions.checkState(compiler.getErrorCount() == 0);
+    Preconditions.checkNotNull(all);
     Node n = all.getLastChild();
     return n;
   }
