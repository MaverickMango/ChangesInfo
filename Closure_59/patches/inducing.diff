diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java
index b20820d..3e381f8 100644
--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java
+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java
@@ -16,7 +16,6 @@
 
 package com.google.javascript.jscomp;
 
-import com.google.javascript.jscomp.CheckLevel;
 import com.google.javascript.jscomp.NodeTraversal.Callback;
 import com.google.javascript.rhino.JSDocInfo;
 import com.google.javascript.rhino.Node;
@@ -61,7 +60,6 @@
       "dangerous use of the global 'this' object");
 
   private final AbstractCompiler compiler;
-  private final CheckLevel level;
 
   /**
    * If {@code assignLhsChild != null}, then the node being traversed is
@@ -70,9 +68,8 @@
    */
   private Node assignLhsChild = null;
 
-  CheckGlobalThis(AbstractCompiler compiler, CheckLevel level) {
+  CheckGlobalThis(AbstractCompiler compiler) {
     this.compiler = compiler;
-    this.level = level;
   }
 
   /**
@@ -156,7 +153,7 @@
 
   public void visit(NodeTraversal t, Node n, Node parent) {
     if (n.getType() == Token.THIS && shouldReportThis(n, parent)) {
-      compiler.report(t.makeError(n, level, GLOBAL_THIS));
+      compiler.report(t.makeError(n, GLOBAL_THIS));
     }
     if (n == assignLhsChild) {
       assignLhsChild = null;
diff --git a/src/com/google/javascript/jscomp/Compiler.java b/src/com/google/javascript/jscomp/Compiler.java
index f71b079..533ddac 100644
--- a/src/com/google/javascript/jscomp/Compiler.java
+++ b/src/com/google/javascript/jscomp/Compiler.java
@@ -232,6 +232,27 @@
       }
     }
 
+    // DiagnosticGroups override the plain checkTypes option.
+    if (options.enables(DiagnosticGroups.CHECK_TYPES)) {
+      options.checkTypes = true;
+    } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {
+      options.checkTypes = false;
+    } else if (!options.checkTypes) {
+      // If DiagnosticGroups did not override the plain checkTypes
+      // option, and checkTypes is enabled, then turn off the
+      // parser type warnings.
+      options.setWarningLevel(
+          DiagnosticGroup.forType(
+              RhinoErrorReporter.TYPE_PARSE_ERROR),
+          CheckLevel.OFF);
+    }
+
+    if (options.checkGlobalThisLevel.isOn()) {
+      options.setWarningLevel(
+          DiagnosticGroups.GLOBAL_THIS,
+          options.checkGlobalThisLevel);
+    }
+
     // Initialize the warnings guard.
     List<WarningsGuard> guards = Lists.newArrayList();
     guards.add(
@@ -254,21 +275,6 @@
           DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));
     }
 
-    // DiagnosticGroups override the plain checkTypes option.
-    if (options.enables(DiagnosticGroups.CHECK_TYPES)) {
-      options.checkTypes = true;
-    } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {
-      options.checkTypes = false;
-    } else if (!options.checkTypes) {
-      // If DiagnosticGroups did not override the plain checkTypes
-      // option, and checkTypes is enabled, then turn off the
-      // parser type warnings.
-      guards.add(
-          new DiagnosticGroupWarningsGuard(
-              DiagnosticGroup.forType(
-                  RhinoErrorReporter.TYPE_PARSE_ERROR),
-              CheckLevel.OFF));
-    }
     this.warningsGuard = new ComposeWarningsGuard(guards);
   }
 
diff --git a/src/com/google/javascript/jscomp/DefaultPassConfig.java b/src/com/google/javascript/jscomp/DefaultPassConfig.java
index d325c5a..ca5ae36 100644
--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java
+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java
@@ -181,7 +181,7 @@
     }
 
     if (options.checkSuspiciousCode ||
-        options.checkGlobalThisLevel.isOn()) {
+        options.enables(DiagnosticGroups.GLOBAL_THIS)) {
       checks.add(suspiciousCode);
     }
 
@@ -699,10 +699,8 @@
         sharedCallbacks.add(new CheckSideEffects(CheckLevel.WARNING));
       }
 
-      CheckLevel checkGlobalThisLevel = options.checkGlobalThisLevel;
-      if (checkGlobalThisLevel.isOn()) {
-        sharedCallbacks.add(
-            new CheckGlobalThis(compiler, checkGlobalThisLevel));
+      if (options.enables(DiagnosticGroups.GLOBAL_THIS)) {
+        sharedCallbacks.add(new CheckGlobalThis(compiler));
       }
       return combineChecks(compiler, sharedCallbacks);
     }
diff --git a/src/com/google/javascript/jscomp/DiagnosticGroups.java b/src/com/google/javascript/jscomp/DiagnosticGroups.java
index bd9c174..a66b67a 100644
--- a/src/com/google/javascript/jscomp/DiagnosticGroups.java
+++ b/src/com/google/javascript/jscomp/DiagnosticGroups.java
@@ -53,15 +53,23 @@
   // A bit of a hack to display the available groups on the command-line.
   // New groups should be added to this list if they are public and should
   // be listed on the command-line as an available option.
+  //
+  // If a group is suppressable on a per-file basis, it should be added
+  // to parser/ParserConfig.properties
   static final String DIAGNOSTIC_GROUP_NAMES =
       "accessControls, ambiguousFunctionDecl, checkRegExp," +
       "checkTypes, checkVars, constantProperty, deprecated, " +
-      "externsValidation, fileoverviewTags, internetExplorerChecks, " +
-      "invalidCasts, missingProperties, nonStandardJsDocs, " +
-      "strictModuleDepCheck, typeInvalidation, " +
+      "externsValidation, fileoverviewTags, globalThis, " +
+      "internetExplorerChecks, nvalidCasts, missingProperties, " +
+      "nonStandardJsDocs, strictModuleDepCheck, typeInvalidation, " +
       "undefinedVars, unknownDefines, uselessCode, " +
       "visibility";
 
+  public static DiagnosticGroup GLOBAL_THIS = DiagnosticGroups
+      .registerGroup("globalThis",
+          new DiagnosticGroup(
+              CheckGlobalThis.GLOBAL_THIS));
+
   public static DiagnosticGroup DEPRECATED = DiagnosticGroups
       .registerGroup("deprecated",
           new DiagnosticGroup(
diff --git a/src/com/google/javascript/jscomp/TypeValidator.java b/src/com/google/javascript/jscomp/TypeValidator.java
index 24bf792..3d45a5c 100644
--- a/src/com/google/javascript/jscomp/TypeValidator.java
+++ b/src/com/google/javascript/jscomp/TypeValidator.java
@@ -506,7 +506,8 @@
   void expectUndeclaredVariable(String sourceName, Node n, Node parent, Var var,
       String variableName, JSType newType) {
     boolean allowDupe = false;
-    if (n.getType() == Token.GETPROP) {
+    if (n.getType() == Token.GETPROP ||
+        NodeUtil.isObjectLitKey(n, parent)) {
       JSDocInfo info = n.getJSDocInfo();
       if (info == null) {
         info = parent.getJSDocInfo();
diff --git a/src/com/google/javascript/jscomp/parsing/ParserConfig.properties b/src/com/google/javascript/jscomp/parsing/ParserConfig.properties
index e05af9b..a69fab7 100644
--- a/src/com/google/javascript/jscomp/parsing/ParserConfig.properties
+++ b/src/com/google/javascript/jscomp/parsing/ParserConfig.properties
@@ -82,6 +82,7 @@
     duplicate,\
     extraRequire,\
     fileoverviewTags,\
+    globalThis,\
     invalidCasts,\
     missingProperties,\
     missingRequire,\
diff --git a/test/com/google/javascript/jscomp/CheckGlobalThisTest.java b/test/com/google/javascript/jscomp/CheckGlobalThisTest.java
index 33bd023..4232649 100644
--- a/test/com/google/javascript/jscomp/CheckGlobalThisTest.java
+++ b/test/com/google/javascript/jscomp/CheckGlobalThisTest.java
@@ -16,8 +16,6 @@
 
 package com.google.javascript.jscomp;
 
-import com.google.javascript.jscomp.CheckLevel;
-
 /**
  * Tests {@link CheckGlobalThis}.
  */
@@ -29,11 +27,11 @@
   @Override
   protected CompilerPass getProcessor(Compiler compiler) {
     return new CombinedCompilerPass(
-        compiler, new CheckGlobalThis(compiler, CheckLevel.ERROR));
+        compiler, new CheckGlobalThis(compiler));
   }
 
   private void testFailure(String js) {
-    test(js, null, CheckGlobalThis.GLOBAL_THIS);
+    testSame(js, CheckGlobalThis.GLOBAL_THIS);
   }
 
   public void testGlobalThis1() throws Exception {
@@ -237,4 +235,10 @@
         "dojo.declare(F, /** @lends {F.prototype} */ (" +
         "    {foo: function() { return this.foo; }}));");
   }
+
+  public void testSuppressWarning() {
+    testFailure("var x = function() { this.complex = 5; };");
+    testSame("/** @suppress {globalThis} */" +
+        "var x = function() { this.complex = 5; };");
+  }
 }
diff --git a/test/com/google/javascript/jscomp/CommandLineRunnerTest.java b/test/com/google/javascript/jscomp/CommandLineRunnerTest.java
index 2d2dbca..800fb2e 100644
--- a/test/com/google/javascript/jscomp/CommandLineRunnerTest.java
+++ b/test/com/google/javascript/jscomp/CommandLineRunnerTest.java
@@ -114,6 +114,20 @@
     super.tearDown();
   }
 
+  public void testCheckGlobalThisOffByDefault() {
+    testSame("function f() { this.a = 3; }");
+  }
+
+  public void testCheckGlobalThisOnWithAdvancedMode() {
+    args.add("--compilation_level=ADVANCED_OPTIMIZATIONS");
+    test("function f() { this.a = 3; }", CheckGlobalThis.GLOBAL_THIS);
+  }
+
+  public void testCheckGlobalThisOnWithErrorFlag() {
+    args.add("--jscomp_error=globalThis");
+    test("function f() { this.a = 3; }", CheckGlobalThis.GLOBAL_THIS);
+  }
+
   public void testTypeCheckingOffByDefault() {
     test("function f(x) { return x; } f();",
          "function f(a) { return a; } f();");
diff --git a/test/com/google/javascript/jscomp/TypeCheckTest.java b/test/com/google/javascript/jscomp/TypeCheckTest.java
index f05ad1c..55f393a 100644
--- a/test/com/google/javascript/jscomp/TypeCheckTest.java
+++ b/test/com/google/javascript/jscomp/TypeCheckTest.java
@@ -6879,6 +6879,52 @@
         "f({foo: function() {}});");
   }
 
+  public void testObjectLiteralDeclaration4() throws Exception {
+    testClosureTypesMultipleWarnings(
+        "var x = {" +
+        "  /** @param {boolean} x */ abc: function(x) {}" +
+        "};" +
+        "/**\n" +
+        " * @param {string} x\n" +
+        " * @suppress {duplicate}\n" +
+        " */ x.abc = function(x) {};",
+        Lists.newArrayList(
+            "variable x.abc redefined with type " +
+            "function (string): undefined, " +
+            "original definition at  [testcode] :1 with type " +
+            "function (boolean): undefined",
+            "assignment to property abc of x\n" +
+            "found   : function (string): undefined\n" +
+            "required: function (boolean): undefined"));
+  }
+
+  public void testObjectLiteralDeclaration5() throws Exception {
+    testTypes(
+        "var x = {" +
+        "  /** @param {boolean} x */ abc: function(x) {}" +
+        "};" +
+        "/**\n" +
+        " * @param {boolean} x\n" +
+        " * @suppress {duplicate}\n" +
+        " */ x.abc = function(x) {};");
+  }
+
+  public void testObjectLiteralDeclaration6() throws Exception {
+    testTypes(
+        "var x = {};" +
+        "/**\n" +
+        " * @param {boolean} x\n" +
+        " * @suppress {duplicate}\n" +
+        " */ x.abc = function(x) {};" +
+        "x = {" +
+        "  /**\n" +
+        "   * @param {boolean} x\n" +
+        "   * @suppress {duplicate}\n" +
+        "   */" +
+        "  abc: function(x) {}" +
+        "};");
+  }
+
   public void testCallDateConstructorAsFunction() throws Exception {
     // ECMA-262 15.9.2: When Date is called as a function rather than as a
     // constructor, it returns a string.
