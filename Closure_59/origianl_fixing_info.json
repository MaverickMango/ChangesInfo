{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "/home/liumengjiao/Desktop/CI/Benchmark/data/changesInfo/",
  "properties": {
    "trigger.tests": "com.google.javascript.jscomp.CommandLineRunnerTest::testCheckGlobalThisOff",
    "test.dir": "test",
    "clz.modified": "com.google.javascript.jscomp.Compiler",
    "src.dir": "src"
  },
  "timeoutSecond": 100,
  "proj": "Closure",
  "id": "59",
  "workingDir": "../bugs/Closure_59_buggy",
  "buggyCommit": "5331b915cf55e8d5f030b6cc62487757cfe50cd6",
  "inducingCommit": "8bf67e65c7ee2a202ac2dbf252727ae656642350",
  "originalCommit": "0c56a467ca0fa7169172cfc4ee2d45834454ef0b",
  "bug_name": "Closure_59",
  "derive": "defects4j",
  "original_fixing_commit": "49b4ef31c850611a5c85d95140b4cedda7f4c59a",
  "buildFiles_changed": false,
  "regression": false,
  "inducing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/jscomp/CheckGlobalThis.java",
        "src/com/google/javascript/jscomp/CheckGlobalThis.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "com.google.javascript.jscomp.CheckGlobalThis:visit:[NodeTraversal t, Node n, Node parent]:void",
            "com.google.javascript.jscomp.CheckGlobalThis:CheckGlobalThis:[AbstractCompiler compiler, CheckLevel level]:null"
          ],
          "num": 2
        },
        {
          "qualified_names": [
            "com.google.javascript.jscomp.CheckGlobalThis:CheckGlobalThis:[AbstractCompiler compiler]:null",
            "com.google.javascript.jscomp.CheckGlobalThis:visit:[NodeTraversal t, Node n, Node parent]:void"
          ],
          "num": 2
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "19",
            "64",
            "73",
            "75",
            "159"
          ],
          "num": 5
        },
        {
          "qualified_names": [
            "18",
            "64",
            "71",
            "156"
          ],
          "num": 4
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex b20820d..3e381f8 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -16,7 +16,6 @@\n \n package com.google.javascript.jscomp;\n \n-import com.google.javascript.jscomp.CheckLevel;\n import com.google.javascript.jscomp.NodeTraversal.Callback;\n import com.google.javascript.rhino.JSDocInfo;\n import com.google.javascript.rhino.Node;\n@@ -61,7 +60,6 @@\n       \"dangerous use of the global \u0027this\u0027 object\");\n \n   private final AbstractCompiler compiler;\n-  private final CheckLevel level;\n \n   /**\n    * If {@code assignLhsChild !\u003d null}, then the node being traversed is\n@@ -70,9 +68,8 @@\n    */\n   private Node assignLhsChild \u003d null;\n \n-  CheckGlobalThis(AbstractCompiler compiler, CheckLevel level) {\n+  CheckGlobalThis(AbstractCompiler compiler) {\n     this.compiler \u003d compiler;\n-    this.level \u003d level;\n   }\n \n   /**\n@@ -156,7 +153,7 @@\n \n   public void visit(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() \u003d\u003d Token.THIS \u0026\u0026 shouldReportThis(n, parent)) {\n-      compiler.report(t.makeError(n, level, GLOBAL_THIS));\n+      compiler.report(t.makeError(n, GLOBAL_THIS));\n     }\n     if (n \u003d\u003d assignLhsChild) {\n       assignLhsChild \u003d null;\n",
      "operations": [
        {
          "type": "delete-tree",
          "from": "ImportDeclaration [653,700]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "FieldDeclaration [2087,2118]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SingleVariableDeclaration [2395,2411]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [2449,2468]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: level [5281,5286]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/jscomp/Compiler.java",
        "src/com/google/javascript/jscomp/Compiler.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "com.google.javascript.jscomp.Compiler:isIdeMode:[]:boolean",
            "com.google.javascript.jscomp.Compiler:reportCodeChange:[]:void",
            "com.google.javascript.jscomp.Compiler:toSource:[Node n]:String",
            "com.google.javascript.jscomp.Compiler:initOptions:[CompilerOptions options]:void"
          ],
          "num": 4
        },
        {
          "qualified_names": [
            "com.google.javascript.jscomp.Compiler:acceptEcmaScript5:[]:boolean",
            "com.google.javascript.jscomp.Compiler:getParserConfig:[]:Config",
            "com.google.javascript.jscomp.Compiler:languageMode:[]:LanguageMode",
            "com.google.javascript.jscomp.Compiler:initOptions:[CompilerOptions options]:void",
            "com.google.javascript.jscomp.Compiler:toSource:[Node n, SourceMap sourceMap]:String"
          ],
          "num": 5
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "234",
            "255",
            "1429",
            "1630",
            "1642"
          ],
          "num": 5
        },
        {
          "qualified_names": [
            "235",
            "236",
            "237",
            "238",
            "239",
            "240",
            "241",
            "242",
            "243",
            "244",
            "245",
            "246",
            "247",
            "248",
            "249",
            "250",
            "251",
            "252",
            "253",
            "254",
            "255",
            "277",
            "1452",
            "1453",
            "1454",
            "1655",
            "1656",
            "1657",
            "1658",
            "1659",
            "1671",
            "1678",
            "1679",
            "1680"
          ],
          "num": 34
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/jscomp/Compiler.java b/src/com/google/javascript/jscomp/Compiler.java\nindex 30215f4..533ddac 100644\n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n@@ -232,6 +232,27 @@\n       }\n     }\n \n+    // DiagnosticGroups override the plain checkTypes option.\n+    if (options.enables(DiagnosticGroups.CHECK_TYPES)) {\n+      options.checkTypes \u003d true;\n+    } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {\n+      options.checkTypes \u003d false;\n+    } else if (!options.checkTypes) {\n+      // If DiagnosticGroups did not override the plain checkTypes\n+      // option, and checkTypes is enabled, then turn off the\n+      // parser type warnings.\n+      options.setWarningLevel(\n+          DiagnosticGroup.forType(\n+              RhinoErrorReporter.TYPE_PARSE_ERROR),\n+          CheckLevel.OFF);\n+    }\n+\n+    if (options.checkGlobalThisLevel.isOn()) {\n+      options.setWarningLevel(\n+          DiagnosticGroups.GLOBAL_THIS,\n+          options.checkGlobalThisLevel);\n+    }\n+\n     // Initialize the warnings guard.\n     List\u003cWarningsGuard\u003e guards \u003d Lists.newArrayList();\n     guards.add(\n@@ -253,6 +274,7 @@\n       guards.add(new DiagnosticGroupWarningsGuard(\n           DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));\n     }\n+\n     this.warningsGuard \u003d new ComposeWarningsGuard(guards);\n   }\n \n@@ -1427,6 +1449,9 @@\n     builder.setLineBreak(options.lineBreak);\n     builder.setSourceMap(sourceMap);\n     builder.setSourceMapDetailLevel(options.sourceMapDetailLevel);\n+    builder.setTagAsStrict(\n+        options.getLanguageOut() \u003d\u003d LanguageMode.ECMASCRIPT5_STRICT);\n+    builder.setLineLengthThreshold(options.lineLengthThreshold);\n \n     Charset charset \u003d options.outputCharset !\u003d null ?\n         Charset.forName(options.outputCharset) : null;\n@@ -1627,7 +1652,11 @@\n \n   @Override\n   public boolean acceptEcmaScript5() {\n-    return options.languageIn \u003d\u003d LanguageMode.ECMASCRIPT5;\n+    return options.getLanguageIn() \u003d\u003d LanguageMode.ECMASCRIPT5;\n+  }\n+\n+  public LanguageMode languageMode() {\n+    return options.getLanguageIn();\n   }\n \n   @Override\n@@ -1639,13 +1668,16 @@\n   Config getParserConfig() {\n     if (parserConfig \u003d\u003d null) {\n       Config.LanguageMode mode;\n-      switch (options.languageIn) {\n+      switch (options.getLanguageIn()) {\n         case ECMASCRIPT3:\n           mode \u003d Config.LanguageMode.ECMASCRIPT3;\n           break;\n         case ECMASCRIPT5:\n           mode \u003d Config.LanguageMode.ECMASCRIPT5;\n           break;\n+        case ECMASCRIPT5_STRICT:\n+          mode \u003d Config.LanguageMode.ECMASCRIPT5_STRICT;\n+          break;\n         default:\n           throw new IllegalStateException(\"unexpected language mode\");\n       }\n",
      "operations": [
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [8160,8320]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [8010,8148]"
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [8912,9094]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "src/com/google/javascript/jscomp/DefaultPassConfig.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "com.google.javascript.jscomp.DefaultPassConfig:getChecks:[]:List\u003cPassFactory\u003e",
            "com.google.javascript.jscomp.DefaultPassConfig:getMainOptimizationLoop:[]:List\u003cPassFactory\u003e",
            "com.google.javascript.jscomp.DefaultPassConfig:getOptimizations:[]:List\u003cPassFactory\u003e"
          ],
          "num": 3
        },
        {
          "qualified_names": [
            "com.google.javascript.jscomp.DefaultPassConfig:getMainOptimizationLoop:[]:List\u003cPassFactory\u003e",
            "com.google.javascript.jscomp.DefaultPassConfig:getOptimizations:[]:List\u003cPassFactory\u003e",
            "com.google.javascript.jscomp.DefaultPassConfig:getChecks:[]:List\u003cPassFactory\u003e"
          ],
          "num": 3
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "26",
            "183",
            "241",
            "242",
            "243",
            "244",
            "245",
            "246",
            "247",
            "275",
            "432",
            "433",
            "434",
            "435",
            "436",
            "437",
            "438",
            "439",
            "587",
            "621",
            "652",
            "700",
            "701",
            "702",
            "703",
            "917",
            "1318",
            "1319",
            "1321",
            "1322",
            "1337",
            "1598"
          ],
          "num": 32
        },
        {
          "qualified_names": [
            "27",
            "184",
            "239",
            "269",
            "270",
            "271",
            "435",
            "576",
            "611",
            "612",
            "613",
            "614",
            "641",
            "642",
            "643",
            "644",
            "649",
            "650",
            "651",
            "652",
            "653",
            "654",
            "702",
            "703",
            "917",
            "923",
            "924",
            "925",
            "926",
            "927",
            "928",
            "929",
            "930",
            "931",
            "932",
            "933",
            "934",
            "935",
            "1331",
            "1332",
            "1334",
            "1335",
            "1350",
            "1351",
            "1352",
            "1353",
            "1354",
            "1355",
            "1356",
            "1357",
            "1619",
            "1620",
            "1621",
            "1622",
            "1623",
            "1624",
            "1625",
            "1626",
            "1627",
            "1628",
            "1629",
            "1630",
            "1631"
          ],
          "num": 63
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/jscomp/DefaultPassConfig.java b/src/com/google/javascript/jscomp/DefaultPassConfig.java\nindex 3d065d4..ca5ae36 100644\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n@@ -24,6 +24,7 @@\n import com.google.common.collect.Sets;\n import com.google.common.io.Files;\n import com.google.javascript.jscomp.AbstractCompiler.LifeCycleStage;\n+import com.google.javascript.jscomp.CompilerOptions.LanguageMode;\n import com.google.javascript.jscomp.NodeTraversal.Callback;\n import com.google.javascript.rhino.Node;\n import com.google.javascript.rhino.Token;\n@@ -180,7 +181,7 @@\n     }\n \n     if (options.checkSuspiciousCode ||\n-        options.checkGlobalThisLevel.isOn()) {\n+        options.enables(DiagnosticGroups.GLOBAL_THIS)) {\n       checks.add(suspiciousCode);\n     }\n \n@@ -238,13 +239,6 @@\n       checks.add(objectPropertyStringPreprocess);\n     }\n \n-    // DiagnosticGroups override the plain checkTypes option.\n-    if (options.enables(DiagnosticGroups.CHECK_TYPES)) {\n-      options.checkTypes \u003d true;\n-    } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {\n-      options.checkTypes \u003d false;\n-    }\n-\n     if (options.checkTypes) {\n       checks.add(resolveTypes.makeOneTimePass());\n       checks.add(inferTypes.makeOneTimePass());\n@@ -272,7 +266,9 @@\n       checks.add(checkSuspiciousProperties);\n     }\n \n-    if (options.checkCaja || options.checkEs5Strict) {\n+    if (options.getLanguageIn() \u003d\u003d LanguageMode.ECMASCRIPT5_STRICT\n+        || options.checkCaja\n+        || options.checkEs5Strict) {\n       checks.add(checkStrictMode);\n     }\n \n@@ -429,14 +425,6 @@\n       passes.add(devirtualizePrototypeMethods);\n     }\n \n-    // Running \"optimizeCalls\" after devirtualization is useful for removing\n-    // unneeded \"this\" values.\n-    if (options.optimizeCalls\n-        || options.optimizeParameters\n-        || options.optimizeReturns) {\n-      passes.add(optimizeCalls);\n-    }\n-\n     if (options.customPasses !\u003d null) {\n       passes.add(getCustomPasses(\n           CustomPassExecutionTime.BEFORE_OPTIMIZATION_LOOP));\n@@ -585,6 +573,7 @@\n     }\n \n     if (options.collapseVariableDeclarations) {\n+      passes.add(exploitAssign);\n       passes.add(collapseVariableDeclarations);\n     }\n \n@@ -619,6 +608,10 @@\n       passes.add(renameLabels);\n     }\n \n+    if (options.foldConstants) {\n+      passes.add(latePeepholeOptimizations);\n+    }\n+\n     if (options.anonymousFunctionNaming \u003d\u003d\n         AnonymousFunctionNamingPolicy.UNMAPPED) {\n       passes.add(nameUnmappedAnonymousFunctions);\n@@ -645,11 +638,20 @@\n       passes.add(inlineFunctions);\n     }\n \n+    boolean runOptimizeCalls \u003d options.optimizeCalls\n+        || options.optimizeParameters\n+        || options.optimizeReturns;\n+\n     if (options.removeUnusedVars || options.removeUnusedLocalVars) {\n       if (options.deadAssignmentElimination) {\n         passes.add(deadAssignmentsElimination);\n       }\n-      passes.add(removeUnusedVars);\n+      if (!runOptimizeCalls) {\n+        passes.add(removeUnusedVars);\n+      }\n+    }\n+    if (runOptimizeCalls) {\n+      passes.add(optimizeCallsAndRemoveUnusedVars);\n     }\n     assertAllLoopablePasses(passes);\n     return passes;\n@@ -697,10 +699,8 @@\n         sharedCallbacks.add(new CheckSideEffects(CheckLevel.WARNING));\n       }\n \n-      CheckLevel checkGlobalThisLevel \u003d options.checkGlobalThisLevel;\n-      if (checkGlobalThisLevel.isOn()) {\n-        sharedCallbacks.add(\n-            new CheckGlobalThis(compiler, checkGlobalThisLevel));\n+      if (options.enables(DiagnosticGroups.GLOBAL_THIS)) {\n+        sharedCallbacks.add(new CheckGlobalThis(compiler));\n       }\n       return combineChecks(compiler, sharedCallbacks);\n     }\n@@ -914,12 +914,25 @@\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n       return new PeepholeOptimizationsPass(compiler,\n-            new PeepholeSubstituteAlternateSyntax(),\n+            new PeepholeSubstituteAlternateSyntax(true),\n             new PeepholeRemoveDeadCode(),\n             new PeepholeFoldConstants());\n     }\n   };\n \n+  /** Same as peepholeOptimizations but aggreesively merges code together */\n+  private final PassFactory latePeepholeOptimizations \u003d\n+      new PassFactory(\"peepholeOptimizations\", false) {\n+    @Override\n+    protected CompilerPass createInternal(AbstractCompiler compiler) {\n+      return new PeepholeOptimizationsPass(compiler,\n+            new StatementFusion(),\n+            new PeepholeRemoveDeadCode(),\n+            new PeepholeSubstituteAlternateSyntax(false),\n+            new PeepholeFoldConstants());\n+    }\n+  };\n+\n   /** Checks that all variables are defined. */\n   private final PassFactory checkVars \u003d\n       new PassFactory(\"checkVars\", true) {\n@@ -1315,11 +1328,11 @@\n   };\n \n   /**\n-   * Rewrite instance methods as static methods, to make them easier\n-   * to inline.\n+   * Optimizes unused function arguments, unused return values, and inlines\n+   * constant parameters. Also runs RemoveUnusedVars.\n    */\n-  private final PassFactory optimizeCalls \u003d\n-      new PassFactory(\"optimizeCalls\", true) {\n+  private final PassFactory optimizeCallsAndRemoveUnusedVars \u003d\n+      new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n       OptimizeCalls passes \u003d new OptimizeCalls(compiler);\n@@ -1334,7 +1347,14 @@\n       }\n \n       if (options.optimizeCalls) {\n-        passes.addPass(new RemoveUnusedVars(compiler, false, true, true));\n+        boolean removeOnlyLocals \u003d options.removeUnusedLocalVars\n+            \u0026\u0026 !options.removeUnusedVars;\n+        boolean preserveAnonymousFunctionNames \u003d\n+            options.anonymousFunctionNaming !\u003d\n+            AnonymousFunctionNamingPolicy.OFF;\n+        passes.addPass(\n+            new RemoveUnusedVars(compiler, !removeOnlyLocals,\n+                preserveAnonymousFunctionNames, true));\n       }\n       return passes;\n     }\n@@ -1596,6 +1616,19 @@\n    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n+  private final PassFactory exploitAssign \u003d\n+      new PassFactory(\"expointAssign\", true) {\n+    @Override\n+    protected CompilerPass createInternal(AbstractCompiler compiler) {\n+      return new PeepholeOptimizationsPass(compiler,\n+          new ExploitAssigns());\n+    }\n+  };\n+\n+  /**\n+   * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n+   * {@code var x,y;}.\n+   */\n   private final PassFactory collapseVariableDeclarations \u003d\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n",
      "operations": [
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "METHOD_INVOCATION_ARGUMENTS [6552,6580]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: options [6536,6543]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "METHOD_INVOCATION_ARGUMENTS [22935,22963]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "QualifiedName: options.checkGlobalThisLevel [6536,6564]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [22905,22968]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: checkGlobalThisLevel [23081,23101]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "src/com/google/javascript/jscomp/DiagnosticGroups.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [],
          "num": 0
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "59",
            "60",
            "61"
          ],
          "num": 3
        },
        {
          "qualified_names": [
            "56",
            "57",
            "58",
            "62",
            "63",
            "64",
            "68",
            "69",
            "70",
            "71",
            "72"
          ],
          "num": 11
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/jscomp/DiagnosticGroups.java b/src/com/google/javascript/jscomp/DiagnosticGroups.java\nindex bd9c174..a66b67a 100644\n--- a/src/com/google/javascript/jscomp/DiagnosticGroups.java\n+++ b/src/com/google/javascript/jscomp/DiagnosticGroups.java\n@@ -53,15 +53,23 @@\n   // A bit of a hack to display the available groups on the command-line.\n   // New groups should be added to this list if they are public and should\n   // be listed on the command-line as an available option.\n+  //\n+  // If a group is suppressable on a per-file basis, it should be added\n+  // to parser/ParserConfig.properties\n   static final String DIAGNOSTIC_GROUP_NAMES \u003d\n       \"accessControls, ambiguousFunctionDecl, checkRegExp,\" +\n       \"checkTypes, checkVars, constantProperty, deprecated, \" +\n-      \"externsValidation, fileoverviewTags, internetExplorerChecks, \" +\n-      \"invalidCasts, missingProperties, nonStandardJsDocs, \" +\n-      \"strictModuleDepCheck, typeInvalidation, \" +\n+      \"externsValidation, fileoverviewTags, globalThis, \" +\n+      \"internetExplorerChecks, nvalidCasts, missingProperties, \" +\n+      \"nonStandardJsDocs, strictModuleDepCheck, typeInvalidation, \" +\n       \"undefinedVars, unknownDefines, uselessCode, \" +\n       \"visibility\";\n \n+  public static DiagnosticGroup GLOBAL_THIS \u003d DiagnosticGroups\n+      .registerGroup(\"globalThis\",\n+          new DiagnosticGroup(\n+              CheckGlobalThis.GLOBAL_THIS));\n+\n   public static DiagnosticGroup DEPRECATED \u003d DiagnosticGroups\n       .registerGroup(\"deprecated\",\n           new DiagnosticGroup(\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldDeclaration [2352,2523]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/jscomp/TypeValidator.java",
        "src/com/google/javascript/jscomp/TypeValidator.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "com.google.javascript.jscomp.TypeValidator:expectUndeclaredVariable:[String sourceName, Node n, Node parent, Var var, String variableName, JSType newType]:void"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "com.google.javascript.jscomp.TypeValidator:expectUndeclaredVariable:[String sourceName, Node n, Node parent, Var var, String variableName, JSType newType]:void"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "509"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "509",
            "510"
          ],
          "num": 2
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/jscomp/TypeValidator.java b/src/com/google/javascript/jscomp/TypeValidator.java\nindex 24bf792..3d45a5c 100644\n--- a/src/com/google/javascript/jscomp/TypeValidator.java\n+++ b/src/com/google/javascript/jscomp/TypeValidator.java\n@@ -506,7 +506,8 @@\n   void expectUndeclaredVariable(String sourceName, Node n, Node parent, Var var,\n       String variableName, JSType newType) {\n     boolean allowDupe \u003d false;\n-    if (n.getType() \u003d\u003d Token.GETPROP) {\n+    if (n.getType() \u003d\u003d Token.GETPROP ||\n+        NodeUtil.isObjectLitKey(n, parent)) {\n       JSDocInfo info \u003d n.getJSDocInfo();\n       if (info \u003d\u003d null) {\n         info \u003d parent.getJSDocInfo();\n",
      "operations": [
        {
          "type": "insert-node",
          "from": "",
          "to": "InfixExpression [18904,18978]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "INFIX_EXPRESSION_OPERATOR: || [18933,18935]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodInvocation [18944,18978]"
        }
      ]
    }
  ],
  "inducing_type": {
    "add_classes": {
      "qualified_names": [
        "src/com/google/javascript/jscomp/ExploitAssigns.java"
      ],
      "num": 1
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [
        "com.google.javascript.jscomp.Compiler:toSource:[Node n, SourceMap sourceMap]:String",
        "com.google.javascript.jscomp.Compiler:languageMode:[]:LanguageMode",
        "com.google.javascript.jscomp.Compiler:acceptEcmaScript5:[]:boolean",
        "com.google.javascript.jscomp.Compiler:getParserConfig:[]:Config",
        "com.google.javascript.jscomp.CheckGlobalThis:CheckGlobalThis:[AbstractCompiler compiler]:null"
      ],
      "num": 5
    },
    "delete_functions": {
      "qualified_names": [
        "com.google.javascript.jscomp.CheckGlobalThis:CheckGlobalThis:[AbstractCompiler compiler, CheckLevel level]:null",
        "com.google.javascript.jscomp.Compiler:isIdeMode:[]:boolean",
        "com.google.javascript.jscomp.Compiler:reportCodeChange:[]:void",
        "com.google.javascript.jscomp.Compiler:toSource:[Node n]:String"
      ],
      "num": 4
    }
  },
  "trigger_tests": [
    {
      "test_class": "com.google.javascript.jscomp.CommandLineRunnerTest",
      "test_function": "testCheckGlobalThisOff",
      "assertion_line": "160",
      "exception": "junit.framework.AssertionFailedError",
      "message": "Expected no warnings or errors"
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/jscomp/Compiler.java",
        "src/com/google/javascript/jscomp/Compiler.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "com.google.javascript.jscomp.Compiler:initOptions:[CompilerOptions options]:void"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "com.google.javascript.jscomp.Compiler:initOptions:[CompilerOptions options]:void"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "255"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "255",
            "256"
          ],
          "num": 2
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/jscomp/Compiler.java b/src/com/google/javascript/jscomp/Compiler.java\nindex b3ca246..1d6e494 100644\n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n@@ -252,7 +252,8 @@\n           CheckLevel.OFF);\n     }\n \n-    if (options.checkGlobalThisLevel.isOn()) {\n+    if (options.checkGlobalThisLevel.isOn() \u0026\u0026\n+        !options.disables(DiagnosticGroups.GLOBAL_THIS)) {\n       options.setWarningLevel(\n           DiagnosticGroups.GLOBAL_THIS,\n           options.checkGlobalThisLevel);\n",
      "operations": [
        {
          "type": "insert-node",
          "from": "",
          "to": "InfixExpression [8428,8522]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "INFIX_EXPRESSION_OPERATOR: \u0026\u0026 [8464,8466]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "PrefixExpression [8475,8522]"
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  },
  "patch_changed_mths": {
    "qualified_names": [],
    "num": 0
  }
}