===
insert-tree
---
ImportDeclaration [1124,1146]
    QualifiedName: java.util.List [1131,1145]
to
CompilationUnit [0,263307]
at 12
===
insert-tree
---
MethodDeclaration [93178,93526]
    Modifier: public [93178,93184]
    PrimitiveType: void [93185,93189]
    SimpleName: testGoodExtends12 [93190,93207]
    SimpleType [93217,93226]
        SimpleName: Exception [93217,93226]
    Block [93227,93526]
        ExpressionStatement [93233,93522]
            MethodInvocation [93233,93521]
                SimpleName: testTypes [93233,93242]
                METHOD_INVOCATION_ARGUMENTS [93252,93520]
                    InfixExpression [93252,93520]
                        StringLiteral: "/** @constructor \n * @extends {Super} */ function Sub() {}" [93252,93313]
                        INFIX_EXPRESSION_OPERATOR: + [93314,93315]
                        StringLiteral: "/** @constructor \n * @extends {Sub} */ function Sub2() {}" [93324,93384]
                        StringLiteral: "/** @constructor */ function Super() {}" [93395,93436]
                        StringLiteral: "/** @param {Super} x */ function foo(x) {}" [93447,93491]
                        StringLiteral: "foo(new Sub2());" [93502,93520]
to
TypeDeclaration [1125,263306]
at 348
===
insert-tree
---
MethodDeclaration [94535,94975]
    Modifier: public [94535,94541]
    PrimitiveType: void [94542,94546]
    SimpleName: testBadExtends4 [94547,94562]
    SimpleType [94572,94581]
        SimpleName: Exception [94572,94581]
    Block [94582,94975]
        ExpressionStatement [94697,94971]
            MethodInvocation [94697,94970]
                SimpleName: testTypes [94697,94706]
                METHOD_INVOCATION_ARGUMENTS [94716,94969]
                    InfixExpression [94716,94928]
                        StringLiteral: "/** @constructor \n * @extends {bad} */ function Sub() {}" [94716,94775]
                        INFIX_EXPRESSION_OPERATOR: + [94776,94777]
                        StringLiteral: "/** @constructor \n * @extends {Sub} */ function Sub2() {}" [94786,94846]
                        StringLiteral: "/** @param {Sub} x */ function foo(x) {}" [94857,94899]
                        StringLiteral: "foo(new Sub2());" [94910,94928]
                    StringLiteral: "Parse error. Unknown type bad" [94938,94969]
to
TypeDeclaration [1125,263306]
at 352
===
insert-tree
---
MethodDeclaration [236019,236331]
    Modifier: public [236019,236025]
    PrimitiveType: void [236026,236030]
    SimpleName: testForwardTypeDeclaration4 [236031,236058]
    SimpleType [236068,236077]
        SimpleName: Exception [236068,236077]
    Block [236078,236331]
        ExpressionStatement [236084,236327]
            MethodInvocation [236084,236326]
                SimpleName: testClosureTypes [236084,236100]
                METHOD_INVOCATION_ARGUMENTS [236110,236325]
                    InfixExpression [236110,236311]
                        StringLiteral: "goog.addDependency('zzz.js', ['MyType'], []);" [236110,236157]
                        INFIX_EXPRESSION_OPERATOR: + [236158,236159]
                        StringLiteral: "/** @param {MyType} x */ function f(x) { return x; }" [236168,236222]
                        StringLiteral: "/** @constructor */ var MyType = function() {};" [236233,236282]
                        StringLiteral: "f(new MyType());" [236293,236311]
                    NullLiteral [236321,236325]
to
TypeDeclaration [1125,263306]
at 778
===
insert-tree
---
MethodDeclaration [236335,236742]
    Modifier: public [236335,236341]
    PrimitiveType: void [236342,236346]
    SimpleName: testForwardTypeDeclaration5 [236347,236374]
    SimpleType [236384,236393]
        SimpleName: Exception [236384,236393]
    Block [236394,236742]
        ExpressionStatement [236400,236738]
            MethodInvocation [236400,236737]
                SimpleName: testClosureTypes [236400,236416]
                METHOD_INVOCATION_ARGUMENTS [236426,236736]
                    InfixExpression [236426,236674]
                        StringLiteral: "goog.addDependency('zzz.js', ['MyType'], []);" [236426,236473]
                        INFIX_EXPRESSION_OPERATOR: + [236474,236475]
                        StringLiteral: "/**\n" [236484,236491]
                        StringLiteral: " * @constructor\n" [236502,236521]
                        StringLiteral: " * @extends {MyType}\n" [236532,236556]
                        StringLiteral: " */ var YourType = function() {};" [236567,236602]
                        StringLiteral: "/** @override */ YourType.prototype.method = function() {};" [236613,236674]
                    StringLiteral: "Could not resolve type in @extends tag of YourType" [236684,236736]
to
TypeDeclaration [1125,263306]
at 779
===
insert-tree
---
MethodDeclaration [236746,237281]
    Modifier: public [236746,236752]
    PrimitiveType: void [236753,236757]
    SimpleName: testForwardTypeDeclaration6 [236758,236785]
    SimpleType [236795,236804]
        SimpleName: Exception [236795,236804]
    Block [236805,237281]
        ExpressionStatement [236811,237277]
            MethodInvocation [236811,237276]
                SimpleName: testClosureTypesMultipleWarnings [236811,236843]
                METHOD_INVOCATION_ARGUMENTS [236853,237275]
                    InfixExpression [236853,237104]
                        StringLiteral: "goog.addDependency('zzz.js', ['MyType'], []);" [236853,236900]
                        INFIX_EXPRESSION_OPERATOR: + [236901,236902]
                        StringLiteral: "/**\n" [236911,236918]
                        StringLiteral: " * @constructor\n" [236929,236948]
                        StringLiteral: " * @implements {MyType}\n" [236959,236986]
                        StringLiteral: " */ var YourType = function() {};" [236997,237032]
                        StringLiteral: "/** @override */ YourType.prototype.method = function() {};" [237043,237104]
                    MethodInvocation [237114,237275]
                        METHOD_INVOCATION_RECEIVER [237114,237119]
                            SimpleName: Lists [237114,237119]
                        SimpleName: newArrayList [237120,237132]
                        METHOD_INVOCATION_ARGUMENTS [237146,237274]
                            StringLiteral: "Could not resolve type in @implements tag of YourType" [237146,237201]
                            StringLiteral: "property method not defined on any superclass of YourType" [237215,237274]
to
TypeDeclaration [1125,263306]
at 780
===
insert-node
---
MethodDeclaration [260219,261655]
to
TypeDeclaration [1125,263306]
at 856
===
insert-node
---
Modifier: private [260219,260226]
to
MethodDeclaration [260219,261655]
at 0
===
insert-node
---
PrimitiveType: void [260227,260231]
to
MethodDeclaration [260219,261655]
at 1
===
insert-node
---
SimpleName: testClosureTypesMultipleWarnings [260232,260264]
to
MethodDeclaration [260219,261655]
at 2
===
insert-tree
---
SingleVariableDeclaration [260272,260281]
    SimpleType [260272,260278]
        SimpleName: String [260272,260278]
    SimpleName: js [260279,260281]
to
MethodDeclaration [260219,261655]
at 3
===
insert-tree
---
SingleVariableDeclaration [260283,260308]
    ParameterizedType [260283,260295]
        SimpleType [260283,260287]
            SimpleName: List [260283,260287]
        SimpleType [260288,260294]
            SimpleName: String [260288,260294]
    SimpleName: descriptions [260296,260308]
to
MethodDeclaration [260219,261655]
at 4
===
insert-tree
---
SimpleType [260317,260326]
    SimpleName: Exception [260317,260326]
to
MethodDeclaration [260219,261655]
at 5
===
insert-node
---
Block [260327,261655]
to
MethodDeclaration [260219,261655]
at 6
===
insert-tree
---
ExpressionStatement [223650,223990]
    MethodInvocation [223650,223989]
        SimpleName: testClosureTypesMultipleWarnings [223650,223682]
        METHOD_INVOCATION_ARGUMENTS [223692,223988]
            InfixExpression [223692,223826]
                MethodInvocation [223692,223722]
                    SimpleName: suppressMissingProperty [223692,223715]
                    METHOD_INVOCATION_ARGUMENTS [223716,223721]
                        StringLiteral: "foo" [223716,223721]
                INFIX_EXPRESSION_OPERATOR: + [223723,223724]
                StringLiteral: "/** @constructor \n * @extends {T} */var T = function() {};" [223733,223794]
                StringLiteral: "alert((new T).foo);" [223805,223826]
            MethodInvocation [223836,223988]
                METHOD_INVOCATION_RECEIVER [223836,223841]
                    SimpleName: Lists [223836,223841]
                SimpleName: newArrayList [223842,223854]
                METHOD_INVOCATION_ARGUMENTS [223868,223987]
                    StringLiteral: "Parse error. Cycle detected in inheritance chain of type T" [223868,223928]
                    StringLiteral: "Could not resolve type in @extends tag of T" [223942,223987]
to
Block [222818,223053]
at 0
===
insert-node
---
ExpressionStatement [260104,260211]
to
Block [257891,259116]
at 0
===
move-tree
---
VariableDeclarationStatement [257897,257933]
    SimpleType [257897,257901]
        SimpleName: Node [257897,257901]
    VariableDeclarationFragment [257902,257932]
        SimpleName: n [257902,257903]
        MethodInvocation [257906,257932]
            METHOD_INVOCATION_RECEIVER [257906,257914]
                SimpleName: compiler [257906,257914]
            SimpleName: parseTestCode [257915,257928]
            METHOD_INVOCATION_ARGUMENTS [257929,257931]
                SimpleName: js [257929,257931]
to
Block [260327,261655]
at 0
===
move-tree
---
VariableDeclarationStatement [257938,257975]
    SimpleType [257938,257942]
        SimpleName: Node [257938,257942]
    VariableDeclarationFragment [257943,257974]
        SimpleName: externs [257943,257950]
        ClassInstanceCreation [257953,257974]
            SimpleType [257957,257961]
                SimpleName: Node [257957,257961]
            QualifiedName: Token.BLOCK [257962,257973]
to
Block [260327,261655]
at 1
===
move-tree
---
VariableDeclarationStatement [257980,258037]
    SimpleType [257980,257984]
        SimpleName: Node [257980,257984]
    VariableDeclarationFragment [257985,258036]
        SimpleName: externAndJsRoot [257985,258000]
        ClassInstanceCreation [258003,258036]
            SimpleType [258007,258011]
                SimpleName: Node [258007,258011]
            QualifiedName: Token.BLOCK [258012,258023]
            SimpleName: externs [258025,258032]
            SimpleName: n [258034,258035]
to
Block [260327,261655]
at 2
===
move-tree
---
ExpressionStatement [258042,258084]
    MethodInvocation [258042,258083]
        METHOD_INVOCATION_RECEIVER [258042,258057]
            SimpleName: externAndJsRoot [258042,258057]
        SimpleName: setIsSyntheticBlock [258058,258077]
        METHOD_INVOCATION_ARGUMENTS [258078,258082]
            BooleanLiteral: true [258078,258082]
to
Block [260327,261655]
at 3
===
move-tree
---
ExpressionStatement [258090,258212]
    MethodInvocation [258090,258211]
        SimpleName: assertEquals [258090,258102]
        METHOD_INVOCATION_ARGUMENTS [258103,258210]
            InfixExpression [258103,258173]
                StringLiteral: "parsing error: " [258103,258120]
                INFIX_EXPRESSION_OPERATOR: + [258121,258122]
                MethodInvocation [258131,258173]
                    METHOD_INVOCATION_RECEIVER [258131,258146]
                        MethodInvocation [258131,258146]
                            METHOD_INVOCATION_RECEIVER [258131,258137]
                                SimpleName: Joiner [258131,258137]
                            SimpleName: on [258138,258140]
                            METHOD_INVOCATION_ARGUMENTS [258141,258145]
                                StringLiteral: ", " [258141,258145]
                    SimpleName: join [258147,258151]
                    METHOD_INVOCATION_ARGUMENTS [258152,258172]
                        MethodInvocation [258152,258172]
                            METHOD_INVOCATION_RECEIVER [258152,258160]
                                SimpleName: compiler [258152,258160]
                            SimpleName: getErrors [258161,258170]
            NumberLiteral: 0 [258183,258184]
            MethodInvocation [258186,258210]
                METHOD_INVOCATION_RECEIVER [258186,258194]
                    SimpleName: compiler [258186,258194]
                SimpleName: getErrorCount [258195,258208]
to
Block [260327,261655]
at 4
===
move-tree
---
ExpressionStatement [258281,258370]
    MethodInvocation [258281,258369]
        METHOD_INVOCATION_RECEIVER [258281,258343]
            ClassInstanceCreation [258281,258343]
                SimpleType [258285,258309]
                    SimpleName: ProcessClosurePrimitives [258285,258309]
                SimpleName: compiler [258310,258318]
                QualifiedName: CheckLevel.ERROR [258320,258336]
                BooleanLiteral: true [258338,258342]
        SimpleName: process [258353,258360]
        METHOD_INVOCATION_ARGUMENTS [258361,258368]
            NullLiteral [258361,258365]
            SimpleName: n [258367,258368]
to
Block [260327,261655]
at 5
===
move-tree
---
VariableDeclarationStatement [258376,258437]
    SimpleType [258376,258392]
        SimpleName: CodingConvention [258376,258392]
    VariableDeclarationFragment [258393,258436]
        SimpleName: convention [258393,258403]
        MethodInvocation [258406,258436]
            METHOD_INVOCATION_RECEIVER [258406,258414]
                SimpleName: compiler [258406,258414]
            SimpleName: getCodingConvention [258415,258434]
to
Block [260327,261655]
at 6
===
move-tree
---
ExpressionStatement [258442,258733]
    MethodInvocation [258442,258732]
        METHOD_INVOCATION_RECEIVER [258442,258696]
            ClassInstanceCreation [258442,258696]
                SimpleType [258446,258455]
                    SimpleName: TypeCheck [258446,258455]
                SimpleName: compiler [258456,258464]
                MethodInvocation [258474,258677]
                    METHOD_INVOCATION_RECEIVER [258474,258653]
                        MethodInvocation [258474,258653]
                            METHOD_INVOCATION_RECEIVER [258474,258546]
                                ClassInstanceCreation [258474,258546]
                                    SimpleType [258478,258511]
                                        SimpleName: ClosureReverseAbstractInterpreter [258478,258511]
                                    SimpleName: convention [258525,258535]
                                    SimpleName: registry [258537,258545]
                            SimpleName: append [258547,258553]
                            METHOD_INVOCATION_ARGUMENTS [258571,258652]
                                ClassInstanceCreation [258571,258652]
                                    SimpleType [258575,258609]
                                        SimpleName: SemanticReverseAbstractInterpreter [258575,258609]
                                    SimpleName: convention [258631,258641]
                                    SimpleName: registry [258643,258651]
                    SimpleName: getFirst [258667,258675]
                SimpleName: registry [258687,258695]
        SimpleName: processForTesting [258706,258723]
        METHOD_INVOCATION_ARGUMENTS [258724,258731]
            NullLiteral [258724,258728]
            SimpleName: n [258730,258731]
to
Block [260327,261655]
at 7
===
move-tree
---
ExpressionStatement [258739,258781]
    MethodInvocation [258739,258780]
        SimpleName: assertEquals [258739,258751]
        METHOD_INVOCATION_ARGUMENTS [258752,258779]
            NumberLiteral: 0 [258752,258753]
            MethodInvocation [258755,258779]
                METHOD_INVOCATION_RECEIVER [258755,258763]
                    SimpleName: compiler [258755,258763]
                SimpleName: getErrorCount [258764,258777]
to
Block [260327,261655]
at 8
===
move-tree
---
IfStatement [258787,259112]
    InfixExpression [258791,258810]
        SimpleName: description [258791,258802]
        INFIX_EXPRESSION_OPERATOR: == [258803,258805]
        NullLiteral [258806,258810]
    Block [258812,258976]
        ExpressionStatement [258820,258970]
            MethodInvocation [258820,258969]
                SimpleName: assertEquals [258820,258832]
                METHOD_INVOCATION_ARGUMENTS [258844,258968]
                    InfixExpression [258844,258927]
                        StringLiteral: "unexpected warning(s) : " [258844,258870]
                        INFIX_EXPRESSION_OPERATOR: + [258871,258872]
                        MethodInvocation [258883,258927]
                            METHOD_INVOCATION_RECEIVER [258883,258898]
                                MethodInvocation [258883,258898]
                                    METHOD_INVOCATION_RECEIVER [258883,258889]
                                        SimpleName: Joiner [258883,258889]
                                    SimpleName: on [258890,258892]
                                    METHOD_INVOCATION_ARGUMENTS [258893,258897]
                                        StringLiteral: ", " [258893,258897]
                            SimpleName: join [258899,258903]
                            METHOD_INVOCATION_ARGUMENTS [258904,258926]
                                MethodInvocation [258904,258926]
                                    METHOD_INVOCATION_RECEIVER [258904,258912]
                                        SimpleName: compiler [258904,258912]
                                    SimpleName: getWarnings [258913,258924]
                    NumberLiteral: 0 [258939,258940]
                    MethodInvocation [258942,258968]
                        METHOD_INVOCATION_RECEIVER [258942,258950]
                            SimpleName: compiler [258942,258950]
                        SimpleName: getWarningCount [258951,258966]
    Block [258982,259112]
        ExpressionStatement [258990,259034]
            MethodInvocation [258990,259033]
                SimpleName: assertEquals [258990,259002]
                METHOD_INVOCATION_ARGUMENTS [259003,259032]
                    NumberLiteral: 1 [259003,259004]
                    MethodInvocation [259006,259032]
                        METHOD_INVOCATION_RECEIVER [259006,259014]
                            SimpleName: compiler [259006,259014]
                        SimpleName: getWarningCount [259015,259030]
        ExpressionStatement [259041,259106]
            MethodInvocation [259041,259105]
                SimpleName: assertEquals [259041,259053]
                METHOD_INVOCATION_ARGUMENTS [259054,259104]
                    SimpleName: description [259054,259065]
                    FieldAccess [259067,259104]
                        ArrayAccess [259067,259092]
                            MethodInvocation [259067,259089]
                                METHOD_INVOCATION_RECEIVER [259067,259075]
                                    SimpleName: compiler [259067,259075]
                                SimpleName: getWarnings [259076,259087]
                            NumberLiteral: 0 [259090,259091]
                        SimpleName: description [259093,259104]
to
Block [260327,261655]
at 9
===
insert-node
---
MethodInvocation [260104,260210]
to
ExpressionStatement [260104,260211]
at 0
===
update-node
---
SimpleName: testTypes [205938,205947]
replace testTypes by testClosureTypes
===
insert-node
---
SimpleName: testClosureTypesMultipleWarnings [260104,260136]
to
MethodInvocation [260104,260210]
at 0
===
insert-node
---
METHOD_INVOCATION_ARGUMENTS [260137,260209]
to
MethodInvocation [260104,260210]
at 1
===
insert-node
---
SimpleName: descriptions [261227,261239]
to
InfixExpression [258791,258810]
at 0
===
insert-node
---
ForStatement [261496,261645]
to
Block [258982,259112]
at 1
===
insert-node
---
SimpleName: js [260137,260139]
to
METHOD_INVOCATION_ARGUMENTS [260137,260209]
at 0
===
insert-node
---
ConditionalExpression [260149,260209]
to
METHOD_INVOCATION_ARGUMENTS [260137,260209]
at 1
===
insert-tree
---
VariableDeclarationExpression [261501,261510]
    PrimitiveType: int [261501,261504]
    VariableDeclarationFragment [261505,261510]
        SimpleName: i [261505,261506]
        NumberLiteral: 0 [261509,261510]
to
ForStatement [261496,261645]
at 0
===
insert-tree
---
InfixExpression [261512,261535]
    SimpleName: i [261512,261513]
    INFIX_EXPRESSION_OPERATOR: < [261514,261515]
    MethodInvocation [261516,261535]
        METHOD_INVOCATION_RECEIVER [261516,261528]
            SimpleName: descriptions [261516,261528]
        SimpleName: size [261529,261533]
to
ForStatement [261496,261645]
at 1
===
insert-tree
---
PostfixExpression [261537,261540]
    SimpleName: i [261537,261538]
    POSTFIX_EXPRESSION_OPERATOR: ++ [261538,261540]
to
ForStatement [261496,261645]
at 2
===
insert-node
---
Block [261542,261645]
to
ForStatement [261496,261645]
at 3
===
update-node
---
StringLiteral: "function f(x) { return x; }" [234379,234408]
replace "function f(x) { return x; }" by "function f(x) { return 3; }"
===
insert-node
---
InfixExpression [260149,260168]
to
ConditionalExpression [260149,260209]
at 0
===
insert-node
---
NullLiteral [260171,260175]
to
ConditionalExpression [260149,260209]
at 1
===
insert-tree
---
MethodInvocation [260178,260209]
    METHOD_INVOCATION_RECEIVER [260178,260183]
        SimpleName: Lists [260178,260183]
    SimpleName: newArrayList [260184,260196]
    METHOD_INVOCATION_ARGUMENTS [260197,260208]
        SimpleName: description [260197,260208]
to
ConditionalExpression [260149,260209]
at 2
===
move-tree
---
ExpressionStatement [259041,259106]
    MethodInvocation [259041,259105]
        SimpleName: assertEquals [259041,259053]
        METHOD_INVOCATION_ARGUMENTS [259054,259104]
            SimpleName: description [259054,259065]
            FieldAccess [259067,259104]
                ArrayAccess [259067,259092]
                    MethodInvocation [259067,259089]
                        METHOD_INVOCATION_RECEIVER [259067,259075]
                            SimpleName: compiler [259067,259075]
                        SimpleName: getWarnings [259076,259087]
                    NumberLiteral: 0 [259090,259091]
                SimpleName: description [259093,259104]
to
Block [261542,261645]
at 0
===
move-tree
---
SimpleName: description [258791,258802]
to
InfixExpression [260149,260168]
at 0
===
insert-node
---
INFIX_EXPRESSION_OPERATOR: == [260161,260163]
to
InfixExpression [260149,260168]
at 1
===
insert-node
---
NullLiteral [260164,260168]
to
InfixExpression [260149,260168]
at 2
===
insert-tree
---
MethodInvocation [261440,261459]
    METHOD_INVOCATION_RECEIVER [261440,261452]
        SimpleName: descriptions [261440,261452]
    SimpleName: size [261453,261457]
to
METHOD_INVOCATION_ARGUMENTS [259003,259032]
at 0
===
insert-tree
---
MethodInvocation [261565,261584]
    METHOD_INVOCATION_RECEIVER [261565,261577]
        SimpleName: descriptions [261565,261577]
    SimpleName: get [261578,261581]
    METHOD_INVOCATION_ARGUMENTS [261582,261583]
        SimpleName: i [261582,261583]
to
METHOD_INVOCATION_ARGUMENTS [259054,259104]
at 0
===
insert-node
---
SimpleName: i [261621,261622]
to
ArrayAccess [259067,259092]
at 1
===
delete-tree
---
ExpressionStatement [222824,223049]
    MethodInvocation [222824,223048]
        SimpleName: testTypes [222824,222833]
        METHOD_INVOCATION_ARGUMENTS [222843,223047]
            InfixExpression [222843,222977]
                MethodInvocation [222843,222873]
                    SimpleName: suppressMissingProperty [222843,222866]
                    METHOD_INVOCATION_ARGUMENTS [222867,222872]
                        StringLiteral: "foo" [222867,222872]
                INFIX_EXPRESSION_OPERATOR: + [222874,222875]
                StringLiteral: "/** @constructor \n * @extends {T} */var T = function() {};" [222884,222945]
                StringLiteral: "alert((new T).foo);" [222956,222977]
            StringLiteral: "Parse error. Cycle detected in inheritance chain of type T" [222987,223047]
===
delete-node
---
NumberLiteral: 1 [259003,259004]
===
===
delete-node
---
SimpleName: description [259054,259065]
===
===
delete-node
---
NumberLiteral: 0 [259090,259091]
===
