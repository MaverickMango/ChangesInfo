===
update-node
---
TextElement: Translate XML numeric entities of the form &#[xX]?\d+; to  [914,972]
replace Translate XML numeric entities of the form &#[xX]?\d+; to  by Translate XML numeric entities of the form &#[xX]?\d+;? to 
===
insert-node
---
TextElement: Note that the semi-colon is optional. [1007,1044]
to
TagElement [914,999]
at 2
===
insert-tree
---
VariableDeclarationStatement [1302,1330]
    PrimitiveType: int [1302,1305]
    VariableDeclarationFragment [1306,1329]
        SimpleName: seqEnd [1306,1312]
        MethodInvocation [1315,1329]
            METHOD_INVOCATION_RECEIVER [1315,1320]
                SimpleName: input [1315,1320]
            SimpleName: length [1321,1327]
to
Block [1247,2460]
at 0
===
insert-tree
---
VariableDeclarationStatement [3099,3164]
    PrimitiveType: boolean [3099,3106]
    VariableDeclarationFragment [3107,3163]
        SimpleName: semiNext [3107,3115]
        InfixExpression [3118,3163]
            ParenthesizedExpression [3118,3133]
                InfixExpression [3119,3132]
                    SimpleName: end [3119,3122]
                    INFIX_EXPRESSION_OPERATOR: != [3123,3125]
                    SimpleName: seqEnd [3126,3132]
            INFIX_EXPRESSION_OPERATOR: && [3134,3136]
            ParenthesizedExpression [3137,3163]
                InfixExpression [3138,3162]
                    MethodInvocation [3138,3155]
                        METHOD_INVOCATION_RECEIVER [3138,3143]
                            SimpleName: input [3138,3143]
                        SimpleName: charAt [3144,3150]
                        METHOD_INVOCATION_ARGUMENTS [3151,3154]
                            SimpleName: end [3151,3154]
                    INFIX_EXPRESSION_OPERATOR: == [3156,3158]
                    CharacterLiteral: ';' [3159,3162]
to
Block [1354,2436]
at 9
===
insert-tree
---
ReturnStatement [3178,3242]
    InfixExpression [3185,3241]
        NumberLiteral: 2 [3185,3186]
        INFIX_EXPRESSION_OPERATOR: + [3187,3188]
        ParenthesizedExpression [3189,3202]
            InfixExpression [3190,3201]
                SimpleName: end [3190,3193]
                INFIX_EXPRESSION_OPERATOR: - [3194,3195]
                SimpleName: start [3196,3201]
        ParenthesizedExpression [3205,3220]
            ConditionalExpression [3206,3219]
                SimpleName: isHex [3206,3211]
                NumberLiteral: 1 [3214,3215]
                NumberLiteral: 0 [3218,3219]
        ParenthesizedExpression [3223,3241]
            ConditionalExpression [3224,3240]
                SimpleName: semiNext [3224,3232]
                NumberLiteral: 1 [3235,3236]
                NumberLiteral: 0 [3239,3240]
to
Block [1354,2436]
at 10
===
insert-node
---
InfixExpression [2013,2275]
to
WhileStatement [1643,1713]
at 0
===
insert-node
---
InfixExpression [1441,1451]
to
InfixExpression [1290,1318]
at 2
===
insert-node
---
IfStatement [1803,1872]
to
Block [1530,1600]
at 2
===
insert-tree
---
InfixExpression [2013,2025]
    SimpleName: end [2013,2016]
    INFIX_EXPRESSION_OPERATOR: < [2017,2018]
    SimpleName: seqEnd [2019,2025]
to
InfixExpression [2013,2275]
at 0
===
insert-node
---
INFIX_EXPRESSION_OPERATOR: && [2026,2028]
to
InfixExpression [2013,2275]
at 1
===
insert-node
---
ParenthesizedExpression [2029,2275]
to
InfixExpression [2013,2275]
at 2
===
insert-node
---
SimpleName: seqEnd [1441,1447]
to
InfixExpression [1441,1451]
at 0
===
move-tree
---
INFIX_EXPRESSION_OPERATOR: - [1314,1315]
to
InfixExpression [1441,1451]
at 1
===
insert-node
---
NumberLiteral: 2 [1450,1451]
to
InfixExpression [1441,1451]
at 2
===
insert-tree
---
InfixExpression [1806,1821]
    SimpleName: start [1806,1811]
    INFIX_EXPRESSION_OPERATOR: == [1812,1814]
    SimpleName: seqEnd [1815,1821]
to
IfStatement [1803,1872]
at 0
===
insert-node
---
Block [1823,1872]
to
IfStatement [1803,1872]
at 1
===
insert-node
---
InfixExpression [2031,2273]
to
ParenthesizedExpression [2029,2275]
at 0
===
insert-tree
---
ExpressionStatement [2705,2796]
    MethodInvocation [2705,2795]
        METHOD_INVOCATION_RECEIVER [2705,2715]
            QualifiedName: System.err [2705,2715]
        SimpleName: println [2716,2723]
        METHOD_INVOCATION_ARGUMENTS [2724,2794]
            InfixExpression [2724,2794]
                StringLiteral: "FAIL: " [2724,2732]
                INFIX_EXPRESSION_OPERATOR: + [2733,2734]
                MethodInvocation [2735,2764]
                    METHOD_INVOCATION_RECEIVER [2735,2740]
                        SimpleName: input [2735,2740]
                    SimpleName: subSequence [2741,2752]
                    METHOD_INVOCATION_ARGUMENTS [2753,2763]
                        SimpleName: start [2753,2758]
                        SimpleName: end [2760,2763]
                StringLiteral: "[" [2767,2770]
                SimpleName: start [2773,2778]
                StringLiteral: "][" [2780,2784]
                SimpleName: end [2786,2789]
                StringLiteral: "]" [2791,2794]
to
Block [2076,2117]
at 0
===
move-tree
---
ReturnStatement [2379,2426]
    InfixExpression [2386,2425]
        NumberLiteral: 2 [2386,2387]
        INFIX_EXPRESSION_OPERATOR: + [2388,2389]
        ParenthesizedExpression [2390,2403]
            InfixExpression [2391,2402]
                SimpleName: end [2391,2394]
                INFIX_EXPRESSION_OPERATOR: - [2395,2396]
                SimpleName: start [2397,2402]
        ParenthesizedExpression [2406,2421]
            ConditionalExpression [2407,2420]
                SimpleName: isHex [2407,2412]
                NumberLiteral: 1 [2415,2416]
                NumberLiteral: 0 [2419,2420]
        NumberLiteral: 1 [2424,2425]
to
Block [1823,1872]
at 0
===
insert-node
---
ParenthesizedExpression [2031,2085]
to
InfixExpression [2031,2273]
at 0
===
insert-node
---
INFIX_EXPRESSION_OPERATOR: || [2086,2088]
to
InfixExpression [2031,2273]
at 1
===
insert-tree
---
ParenthesizedExpression [2125,2179]
    InfixExpression [2126,2178]
        InfixExpression [2126,2150]
            MethodInvocation [2126,2143]
                METHOD_INVOCATION_RECEIVER [2126,2131]
                    SimpleName: input [2126,2131]
                SimpleName: charAt [2132,2138]
                METHOD_INVOCATION_ARGUMENTS [2139,2142]
                    SimpleName: end [2139,2142]
            INFIX_EXPRESSION_OPERATOR: >= [2144,2146]
            CharacterLiteral: 'a' [2147,2150]
        INFIX_EXPRESSION_OPERATOR: && [2151,2153]
        InfixExpression [2154,2178]
            MethodInvocation [2154,2171]
                METHOD_INVOCATION_RECEIVER [2154,2159]
                    SimpleName: input [2154,2159]
                SimpleName: charAt [2160,2166]
                METHOD_INVOCATION_ARGUMENTS [2167,2170]
                    SimpleName: end [2167,2170]
            INFIX_EXPRESSION_OPERATOR: <= [2172,2174]
            CharacterLiteral: 'f' [2175,2178]
to
InfixExpression [2031,2273]
at 2
===
insert-tree
---
ParenthesizedExpression [2219,2273]
    InfixExpression [2220,2272]
        InfixExpression [2220,2244]
            MethodInvocation [2220,2237]
                METHOD_INVOCATION_RECEIVER [2220,2225]
                    SimpleName: input [2220,2225]
                SimpleName: charAt [2226,2232]
                METHOD_INVOCATION_ARGUMENTS [2233,2236]
                    SimpleName: end [2233,2236]
            INFIX_EXPRESSION_OPERATOR: >= [2238,2240]
            CharacterLiteral: 'A' [2241,2244]
        INFIX_EXPRESSION_OPERATOR: && [2245,2247]
        InfixExpression [2248,2272]
            MethodInvocation [2248,2265]
                METHOD_INVOCATION_RECEIVER [2248,2253]
                    SimpleName: input [2248,2253]
                SimpleName: charAt [2254,2260]
                METHOD_INVOCATION_ARGUMENTS [2261,2264]
                    SimpleName: end [2261,2264]
            INFIX_EXPRESSION_OPERATOR: <= [2266,2268]
            CharacterLiteral: 'F' [2269,2272]
to
InfixExpression [2031,2273]
at 3
===
move-tree
---
NumberLiteral: 0 [2419,2420]
to
ReturnStatement [2379,2426]
at 0
===
insert-node
---
InfixExpression [2032,2084]
to
ParenthesizedExpression [2031,2085]
at 0
===
move-tree
---
InfixExpression [1649,1673]
    MethodInvocation [1649,1666]
        METHOD_INVOCATION_RECEIVER [1649,1654]
            SimpleName: input [1649,1654]
        SimpleName: charAt [1655,1661]
        METHOD_INVOCATION_ARGUMENTS [1662,1665]
            SimpleName: end [1662,1665]
    INFIX_EXPRESSION_OPERATOR: != [1667,1669]
    CharacterLiteral: ';' [1670,1673]
to
InfixExpression [2032,2084]
at 0
===
insert-node
---
INFIX_EXPRESSION_OPERATOR: && [2057,2059]
to
InfixExpression [2032,2084]
at 1
===
insert-tree
---
InfixExpression [2060,2084]
    MethodInvocation [2060,2077]
        METHOD_INVOCATION_RECEIVER [2060,2065]
            SimpleName: input [2060,2065]
        SimpleName: charAt [2066,2072]
        METHOD_INVOCATION_ARGUMENTS [2073,2076]
            SimpleName: end [2073,2076]
    INFIX_EXPRESSION_OPERATOR: <= [2078,2080]
    CharacterLiteral: '9' [2081,2084]
to
InfixExpression [2032,2084]
at 2
===
update-node
---
INFIX_EXPRESSION_OPERATOR: != [1667,1669]
replace != by >=
===
update-node
---
CharacterLiteral: ';' [1670,1673]
replace ';' by '0'
===
delete-tree
---
MethodInvocation [1299,1313]
    METHOD_INVOCATION_RECEIVER [1299,1304]
        SimpleName: input [1299,1304]
    SimpleName: length [1305,1311]
===
delete-node
---
NumberLiteral: 1 [1316,1317]
===
===
delete-node
---
InfixExpression [1299,1317]
===
===
delete-node
---
ParenthesizedExpression [1298,1318]
===
===
delete-node
---
NumberLiteral: 2 [2386,2387]
===
===
delete-node
---
INFIX_EXPRESSION_OPERATOR: + [2388,2389]
===
===
delete-tree
---
ParenthesizedExpression [2390,2403]
    InfixExpression [2391,2402]
        SimpleName: end [2391,2394]
        INFIX_EXPRESSION_OPERATOR: - [2395,2396]
        SimpleName: start [2397,2402]
===
delete-node
---
SimpleName: isHex [2407,2412]
===
===
delete-node
---
NumberLiteral: 1 [2415,2416]
===
===
delete-node
---
ConditionalExpression [2407,2420]
===
===
delete-node
---
ParenthesizedExpression [2406,2421]
===
===
delete-node
---
NumberLiteral: 1 [2424,2425]
===
===
delete-node
---
InfixExpression [2386,2425]
===
