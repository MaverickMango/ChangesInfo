{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "/home/liumengjiao/Desktop/CI/Benchmark/data/changesInfo/",
  "properties": {
    "trigger.tests": "org.apache.commons.math.stat.regression.SimpleRegressionTest::testSSENonNegative",
    "test.dir": "src/test",
    "clz.modified": "org.apache.commons.math.stat.regression.SimpleRegression",
    "src.dir": "src/java"
  },
  "timeoutSecond": 100,
  "proj": "Math",
  "id": "105",
  "workingDir": "../bugs/Math_105_buggy",
  "buggyCommit": "ab1b9500fd4b6898757e9c74dc2eeae692b25146",
  "inducingCommit": "2b57d6595c2c9095dc09bd42ba40fe1c69df0735",
  "originalCommit": "edbc57991142918547aa64e921408d1883cd670c",
  "bug_name": "Math_105",
  "derive": "defects4j",
  "original_fixing_commit": "fc21b26f84312e4f75e8b144238618c73a8b091f",
  "regression": true,
  "inducing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/math/stat/BivariateRegression.java",
        "src/java/org/apache/commons/math/stat/BivariateRegression.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.math.stat.BivariateRegression:getSumSquaredErrors:[double b1]:double",
            "org.apache.commons.math.stat.BivariateRegression:getMeanSquareError:[]:double",
            "org.apache.commons.math.stat.BivariateRegression:getInterceptStdErr:[]:double",
            "org.apache.commons.math.stat.BivariateRegression:getSumSquaresX:[]:double",
            "org.apache.commons.math.stat.BivariateRegression:getTDistribution:[]:TDistribution",
            "org.apache.commons.math.stat.BivariateRegression:addData:[double x, double y]:void",
            "org.apache.commons.math.stat.BivariateRegression:clear:[]:void",
            "org.apache.commons.math.stat.BivariateRegression:getSlope:[]:double",
            "org.apache.commons.math.stat.BivariateRegression:getSlopeStdErr:[]:double",
            "org.apache.commons.math.stat.BivariateRegression:getTotalSumSquares:[]:double",
            "org.apache.commons.math.stat.BivariateRegression:getRegressionSumSquares:[]:double"
          ],
          "num": 11
        },
        {
          "qualified_names": [
            "org.apache.commons.math.stat.BivariateRegression:getInterceptStdErr:[]:double",
            "org.apache.commons.math.stat.BivariateRegression:getSlope:[]:double",
            "org.apache.commons.math.stat.BivariateRegression:getRegressionSumSquares:[]:double",
            "org.apache.commons.math.stat.BivariateRegression:getRegressionSumSquares:[double slope]:double",
            "org.apache.commons.math.stat.BivariateRegression:getTotalSumSquares:[]:double",
            "org.apache.commons.math.stat.BivariateRegression:addData:[double x, double y]:void",
            "org.apache.commons.math.stat.BivariateRegression:clear:[]:void",
            "org.apache.commons.math.stat.BivariateRegression:getSlopeStdErr:[]:double",
            "org.apache.commons.math.stat.BivariateRegression:getTDistribution:[]:TDistribution",
            "org.apache.commons.math.stat.BivariateRegression:getMeanSquareError:[]:double",
            "org.apache.commons.math.stat.BivariateRegression:getSumSquaredErrors:[double b1]:double"
          ],
          "num": 11
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "88",
            "95",
            "96",
            "101",
            "102",
            "113",
            "120",
            "122",
            "123",
            "151",
            "153",
            "218",
            "228",
            "229",
            "230",
            "233",
            "268",
            "285",
            "288",
            "289",
            "306",
            "307",
            "364",
            "365",
            "379",
            "380",
            "495",
            "496",
            "499",
            "500",
            "501",
            "502",
            "503",
            "504",
            "505",
            "506",
            "507",
            "508",
            "509",
            "510",
            "511",
            "512",
            "526"
          ],
          "num": 43
        },
        {
          "qualified_names": [
            "88",
            "95",
            "96",
            "101",
            "102",
            "110",
            "111",
            "112",
            "113",
            "114",
            "115",
            "116",
            "120",
            "121",
            "122",
            "123",
            "124",
            "125",
            "126",
            "127",
            "133",
            "134",
            "135",
            "136",
            "137",
            "138",
            "139",
            "140",
            "141",
            "142",
            "172",
            "174",
            "239",
            "249",
            "252",
            "287",
            "304",
            "307",
            "324",
            "381",
            "382",
            "396",
            "511",
            "528",
            "529",
            "530",
            "531",
            "532",
            "533",
            "534",
            "535",
            "536",
            "537"
          ],
          "num": 53
        }
      ],
      "diff": "diff --git a/src/java/org/apache/commons/math/stat/BivariateRegression.java b/src/java/org/apache/commons/math/stat/BivariateRegression.java\nindex 6197018..865cff5 100644\n--- a/src/java/org/apache/commons/math/stat/BivariateRegression.java\n+++ b/src/java/org/apache/commons/math/stat/BivariateRegression.java\n@@ -85,21 +85,21 @@\n  * \u003c/ul\u003e\n  *\n  * @author  Phil Steitz\n- * @version $Revision: 1.2 $ $Date: 2003/06/11 03:33:05 $\n+ * @version $Revision: 1.3 $ $Date: 2003/06/21 02:13:41 $\n  */\n public class BivariateRegression {\n     \n     /** sum of x values */\n     private double sumX \u003d 0d;\n     \n-    /** sum of squared x values */\n-    private double sumSqX \u003d 0d;\n+    /** total variation in x (sum of squared deviations from xbar) */\n+    private double sumXX \u003d 0d;\n     \n     /** sum of y values */\n     private double sumY \u003d 0d;\n     \n-    /** sum of squared y values */\n-    private double sumSqY \u003d 0d;\n+    /** total variation in y (sum of squared deviations from ybar) */\n+    private double sumYY \u003d 0d;\n     \n     /** sum of products */\n     private double sumXY \u003d 0d;\n@@ -107,20 +107,41 @@\n     /** number of observations */\n     private long n \u003d 0;\n     \n+    /** mean of accumulated x values, used in updating formulas */\n+    private double xbar \u003d 0;\n+    \n+    /** mean of accumulated y values, used in updating formulas */\n+    private double ybar \u003d 0;\n+    \n+    \n     // ---------------------Public methods--------------------------------------\n     \n     /**\n-     * Adds the observation (x,y) to the regression data set\n+     * Adds the observation (x,y) to the regression data set.\n+     * \u003cp\u003e\n+     * Uses updating formulas for means and sums of squares defined in \n+     * \"Algorithms for Computing the Sample Variance: Analysis and\n+     * Recommendations\", Chan, T.F., Golub, G.H., and LeVeque, R.J. \n+     * 1983, American Statistician, vol. 37, pp. 242-247, referenced in\n+     * Weisberg, S. \"Applied Linear Regression\". 2nd Ed. 1985\n+     *\n      *\n      * @param x independent variable value\n      * @param y dependent variable value\n      */\n     public void addData(double x, double y) {\n+        if (n \u003d\u003d 0) {\n+            xbar \u003d x;\n+            ybar \u003d y;\n+        } else {\n+            sumXX +\u003d ((double) n / (double) (n + 1)) * (x - xbar) * (x - xbar);\n+            sumYY +\u003d ((double) n / (double) (n + 1)) * (y - ybar) * (y - ybar);\n+            sumXY +\u003d ((double) n / (double) (n + 1)) * (x - xbar) * (y - ybar);\n+            xbar +\u003d (1d / (double) (n + 1)) * (x - xbar);\n+            ybar +\u003d (1d / (double) (n + 1)) * (y - ybar);\n+        }\n         sumX +\u003d x;\n-        sumSqX +\u003d x * x;\n         sumY +\u003d y;\n-        sumSqY +\u003d y * y;\n-        sumXY +\u003d x * y;\n         n++;\n     } \n     \n@@ -148,9 +169,9 @@\n      */\n     public void clear() {\n         sumX \u003d 0d;\n-        sumSqX \u003d 0d;\n+        sumXX \u003d 0d;\n         sumY \u003d 0d;\n-        sumSqY \u003d 0d;\n+        sumYY \u003d 0d;\n         sumXY \u003d 0d;\n         n \u003d 0;\n     }\n@@ -215,7 +236,7 @@\n      * \u003cstrong\u003ePreconditions\u003c/strong\u003e: \u003cul\u003e\n      * \u003cli\u003eAt least two observations (with at least two different x values)\n      * must have been added before invoking this method. If this method is \n-     * invoked before a model can be estimated, \u003ccode\u003eDouble,NaN\u003c/code\u003e is\n+     * invoked before a model can be estimated, \u003ccode\u003eDouble.NaN\u003c/code\u003e is\n      * returned.\n      * \u003c/li\u003e\u003c/ul\u003e\n      *\n@@ -225,12 +246,10 @@\n          if (n \u003c 2) {\n              return Double.NaN;  //not enough data \n          }\n-         double dn \u003d (double) n;\n-         double denom \u003d sumSqX - (sumX * sumX / dn);\n-         if (Math.abs(denom) \u003c 10 * Double.MIN_VALUE) { \n+         if (Math.abs(sumXX) \u003c 10 * Double.MIN_VALUE) { \n              return Double.NaN; //not enough variation in x\n          }\n-         return (sumXY - (sumX * sumY / dn)) / denom;\n+         return sumXY / sumXX;\n      }\n      \n      /**\n@@ -265,7 +284,7 @@\n          if (n \u003c 2) {\n              return Double.NaN;\n          }\n-         return sumSqY - sumY * sumY / (double) n;\n+         return sumYY;\n      }\n          \n      /**\n@@ -282,11 +301,10 @@\n       * returned.\n       * \u003c/li\u003e\u003c/ul\u003e\n       *\n-      * @return sum of squared deviations of y values\n+      * @return sum of squared deviations of predicted y values\n       */\n      public double getRegressionSumSquares() {\n-         double b1 \u003d getSlope();\n-         return b1 * (sumXY - sumX * sumY / (double) n);\n+         return getRegressionSumSquares(getSlope());\n      }\n      \n      /**\n@@ -303,8 +321,7 @@\n          if (n \u003c 3) {\n              return Double.NaN;\n          }\n-         double sse \u003d getSumSquaredErrors();\n-         return sse / (double) (n - 2);\n+         return getSumSquaredErrors() / (double) (n - 2);\n      }\n      \n      /**\n@@ -361,8 +378,8 @@\n       * @return standard error associated with intercept estimate\n       */\n      public double getInterceptStdErr() {\n-         double ssx \u003d getSumSquaresX();\n-         return Math.sqrt(getMeanSquareError() * sumSqX / (((double) n) * ssx));\n+         return Math.sqrt(getMeanSquareError() * ((1d / (double) n) +\n+            (xbar * xbar) / sumXX));\n      }\n              \n      /**\n@@ -376,8 +393,7 @@\n       * @return standard error associated with slope estimate\n       */\n      public double getSlopeStdErr() {\n-         double ssx \u003d getSumSquaresX();\n-         return Math.sqrt(getMeanSquareError() / ssx);\n+         return Math.sqrt(getMeanSquareError() / sumXX);\n      }\n      \n      /**\n@@ -492,24 +508,9 @@\n       * @return sum of squared errors associated with the regression model\n       */\n      private double getSumSquaredErrors(double b1) {\n-         double b0 \u003d getIntercept(b1);\n-         return sumSqY - b0 * sumY - b1 * sumXY;\n+         return sumYY - sumXY * sumXY / sumXX;\n      } \n      \n-     /**\n-      * Returns the sum of squared deviations of the x values about their mean.\n-      * \u003cp\u003e\n-      * If n \u003c 2, this returns NaN.\n-      *\n-      * @return sum of squared deviations of x values\n-      */\n-     private double getSumSquaresX() {\n-         if (n \u003c 2) {\n-             return Double.NaN;\n-         }\n-         return sumSqX - sumX * sumX / (double) n;\n-     }\n-     \n      /** \n       * Computes r-square from the slope.\n       * \u003cp\u003e\n@@ -524,6 +525,16 @@\n      }\n      \n      /**\n+      * Computes SSR from b1.\n+      * \n+      * @param slope regression slope estimate\n+      * @return sum of squared deviations of predicted y values\n+      */\n+     private double getRegressionSumSquares(double slope) {\n+         return slope * slope * sumXX;\n+     }\n+     \n+     /**\n       * Uses distribution framework to get a t distribution instance \n       * with df \u003d n - 2\n       *\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldDeclaration [4730,4821]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldDeclaration [4831,4922]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [19595,19863]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [4330,4395]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [4498,4563]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [5602,6042]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ReturnStatement [9558,9579]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ReturnStatement [10749,10762]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "ReturnStatement [11527,11570]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ReturnStatement [19200,19237]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003cp\u003e [5096,5099]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: Uses updating formulas for means and sums of squares defined in  [5107,5171]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \"Algorithms for Computing the Sample Variance: Analysis and [5179,5238]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: Recommendations\", Chan, T.F., Golub, G.H., and LeVeque, R.J.  [5246,5307]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: 1983, American Statistician, vol. 37, pp. 242-247, referenced in [5315,5379]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: Weisberg, S. \"Applied Linear Regression\". 2nd Ed. 1985 [5387,5441]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "MethodInvocation [11534,11569]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: getRegressionSumSquares [11534,11557]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "METHOD_INVOCATION_ARGUMENTS [11558,11568]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "InfixExpression [14067,14120]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "INFIX_EXPRESSION_OPERATOR: + [14085,14086]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "InfixExpression [14099,14120]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "ParenthesizedExpression [14099,14112]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "INFIX_EXPRESSION_OPERATOR: / [14113,14114]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: sumXX [14115,14120]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "NumberLiteral: 1d [14068,14070]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "InfixExpression [14100,14111]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: xbar [14100,14104]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: xbar [14107,14111]"
        },
        {
          "type": "delete-tree",
          "from": "Javadoc [4330,4360]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "Javadoc [4464,4494]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [4985,5001]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [5029,5045]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [5054,5069]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [8421,8444]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "InfixExpression [8469,8496]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "VariableDeclarationStatement [8454,8497]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ReturnStatement [8635,8679]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ReturnStatement [9849,9890]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "PrimitiveType: double [10645,10651]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: b1 [10652,10654]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "VariableDeclarationFragment [10652,10667]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "VariableDeclarationStatement [10645,10668]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ReturnStatement [10678,10725]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "PrimitiveType: double [11240,11246]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: sse [11247,11250]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "VariableDeclarationFragment [11247,11274]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "VariableDeclarationStatement [11240,11275]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: sse [11292,11295]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodInvocation [13221,13237]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "VariableDeclarationStatement [13208,13238]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: sumSqX [13288,13294]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "InfixExpression [13265,13294]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: ssx [13313,13316]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodInvocation [13814,13830]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "VariableDeclarationStatement [13801,13831]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [18434,18463]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ReturnStatement [18473,18512]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [18532,18896]",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        }
      ]
    }
  ],
  "inducing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [
        "org.apache.commons.math.stat.BivariateRegression:getRegressionSumSquares:[double slope]:double"
      ],
      "num": 1
    },
    "delete_functions": {
      "qualified_names": [
        "org.apache.commons.math.stat.BivariateRegression:getSumSquaresX:[]:double"
      ],
      "num": 1
    }
  },
  "trigger_tests": [
    {
      "test_class": "org.apache.commons.math.stat.regression.SimpleRegressionTest",
      "test_function": "testSSENonNegative",
      "assertion_line": "275",
      "exception": "junit.framework.AssertionFailedError",
      "message": ""
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/math/stat/regression/SimpleRegression.java",
        "src/java/org/apache/commons/math/stat/regression/SimpleRegression.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.math.stat.regression.SimpleRegression:getSumSquaredErrors:[]:double"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "org.apache.commons.math.stat.regression.SimpleRegression:getSumSquaredErrors:[]:double"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "238",
            "249"
          ],
          "num": 2
        },
        {
          "qualified_names": [
            "239",
            "240",
            "241",
            "242",
            "243",
            "244",
            "245",
            "246",
            "247",
            "248",
            "249",
            "250",
            "251",
            "252",
            "253",
            "264"
          ],
          "num": 16
        }
      ],
      "diff": "diff --git a/src/java/org/apache/commons/math/stat/regression/SimpleRegression.java b/src/java/org/apache/commons/math/stat/regression/SimpleRegression.java\nindex c105a41..d9fa592 100644\n--- a/src/java/org/apache/commons/math/stat/regression/SimpleRegression.java\n+++ b/src/java/org/apache/commons/math/stat/regression/SimpleRegression.java\n@@ -236,6 +236,21 @@\n      * sum of squared errors\u003c/a\u003e (SSE) associated with the regression \n      * model.\n      * \u003cp\u003e\n+     * The sum is computed using the computational formula\n+     * \u003cp\u003e\n+     * \u003ccode\u003eSSE \u003d SYY - (SXY * SXY / SXX)\u003c/code\u003e\n+     * \u003cp\u003e\n+     * where \u003ccode\u003eSYY\u003c/code\u003e is the sum of the squared deviations of the y\n+     * values about their mean, \u003ccode\u003eSXX\u003c/code\u003e is similarly defined and\n+     * \u003ccode\u003eSXY\u003c/code\u003e is the sum of the products of x and y mean deviations.\n+     * \u003cp\u003e\n+     * The sums are accumulated using the updating algorithm referenced in \n+     * {@link #addData}.  \n+     * \u003cp\u003e\n+     * The return value is constrained to be non-negative - i.e., if due to \n+     * rounding errors the computational formula returns a negative result, \n+     * 0 is returned.\n+     * \u003cp\u003e\n      * \u003cstrong\u003ePreconditions\u003c/strong\u003e: \u003cul\u003e\n      * \u003cli\u003eAt least two observations (with at least two different x values)\n      * must have been added before invoking this method. If this method is \n@@ -246,7 +261,7 @@\n      * @return sum of squared errors associated with the regression model\n      */\n     public double getSumSquaredErrors() {\n-        return sumYY - sumXY * sumXY / sumXX;\n+        return Math.max(0d, sumYY - sumXY * sumXY / sumXX);\n     }\n \n     /**\n",
      "operations": [
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003cp\u003e [8097,8100]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: The sum is computed using the computational formula [8108,8159]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003cp\u003e [8167,8170]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003ccode\u003eSSE \u003d SYY - (SXY * SXY / SXX)\u003c/code\u003e [8178,8220]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: where \u003ccode\u003eSYY\u003c/code\u003e is the sum of the squared deviations of the y [8239,8307]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: values about their mean, \u003ccode\u003eSXX\u003c/code\u003e is similarly defined and [8315,8381]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003ccode\u003eSXY\u003c/code\u003e is the sum of the products of x and y mean deviations. [8389,8460]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003cp\u003e [8468,8471]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: The sums are accumulated using the updating algorithm referenced in  [8479,8547]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [8555,8571]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: .   [8571,8574]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003cp\u003e [8582,8585]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: The return value is constrained to be non-negative - i.e., if due to  [8593,8662]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: rounding errors the computational formula returns a negative result,  [8670,8739]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: 0 is returned. [8747,8761]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003cp\u003e [8769,8772]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "MethodInvocation [9225,9268]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "METHOD_INVOCATION_RECEIVER [9225,9229]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: max [9230,9233]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "METHOD_INVOCATION_ARGUMENTS [9234,9267]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "NumberLiteral: 0d [9234,9236]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  },
  "patch_changed_mths": {
    "qualified_names": [
      "org.apache.commons.math.stat.regression.SimpleRegression:getSumSquaredErrors()D:regression"
    ],
    "num": 1
  }
}