diff --git a/RELEASE-NOTES.txt b/RELEASE-NOTES.txt
index 5a458c5..e079425 100644
--- a/RELEASE-NOTES.txt
+++ b/RELEASE-NOTES.txt
@@ -61,6 +61,10 @@
   This used to fail before 1970 when the input had a milli-of-second field
   Fixed to not throw an exception
 
+- LocalDateTime.fromCalendarFields()/LocalDateTime.fromDateFields()
+  This used to fail before year 1 as the era was ignored
+  Fixed to return the correct year
+
 - MutableDateTime.setDate(ReadableInstant)  [163]
   Fixed to handle cross-time-zone issues properly rather than always using UTC
 
diff --git a/src/main/java/org/joda/time/LocalDate.java b/src/main/java/org/joda/time/LocalDate.java
index 7bb7a08..c86b9d7 100644
--- a/src/main/java/org/joda/time/LocalDate.java
+++ b/src/main/java/org/joda/time/LocalDate.java
@@ -21,6 +21,7 @@
 import java.io.Serializable;
 import java.util.Calendar;
 import java.util.Date;
+import java.util.GregorianCalendar;
 import java.util.HashSet;
 import java.util.Locale;
 import java.util.Set;
@@ -197,8 +198,8 @@
      * will only pass in instances of <code>GregorianCalendar</code> however
      * this is not validated.
      *
-     * @param calendar  the Calendar to extract fields from
-     * @return the created LocalDate
+     * @param calendar  the Calendar to extract fields from, not null
+     * @return the created local date, not null
      * @throws IllegalArgumentException if the calendar is null
      * @throws IllegalArgumentException if the date is invalid for the ISO chronology
      */
@@ -206,8 +207,10 @@
         if (calendar == null) {
             throw new IllegalArgumentException("The calendar must not be null");
         }
+        int era = calendar.get(Calendar.ERA);
+        int yearOfEra = calendar.get(Calendar.YEAR);
         return new LocalDate(
-            calendar.get(Calendar.YEAR),
+            (era == GregorianCalendar.AD ? yearOfEra : 1 - yearOfEra),
             calendar.get(Calendar.MONTH) + 1,
             calendar.get(Calendar.DAY_OF_MONTH)
         );
@@ -228,8 +231,8 @@
      * <p>
      * This factory method always creates a LocalDate with ISO chronology.
      *
-     * @param date  the Date to extract fields from
-     * @return the created LocalDate
+     * @param date  the Date to extract fields from, not null
+     * @return the created local date, not null
      * @throws IllegalArgumentException if the calendar is null
      * @throws IllegalArgumentException if the date is invalid for the ISO chronology
      */
@@ -238,6 +241,12 @@
         if (date == null) {
             throw new IllegalArgumentException("The date must not be null");
         }
+        if (date.getTime() < 0) {
+            // handle years in era BC
+            GregorianCalendar cal = new GregorianCalendar();
+            cal.setTime(date);
+            return fromCalendarFields(cal);
+        }
         return new LocalDate(
             date.getYear() + 1900,
             date.getMonth() + 1,
diff --git a/src/main/java/org/joda/time/LocalDateTime.java b/src/main/java/org/joda/time/LocalDateTime.java
index 325192b..e75deca 100644
--- a/src/main/java/org/joda/time/LocalDateTime.java
+++ b/src/main/java/org/joda/time/LocalDateTime.java
@@ -21,6 +21,7 @@
 import java.io.Serializable;
 import java.util.Calendar;
 import java.util.Date;
+import java.util.GregorianCalendar;
 import java.util.Locale;
 import java.util.TimeZone;
 
@@ -186,8 +187,8 @@
      * will only pass in instances of <code>GregorianCalendar</code> however
      * this is not validated.
      *
-     * @param calendar  the Calendar to extract fields from
-     * @return the created LocalDateTime
+     * @param calendar  the Calendar to extract fields from, not null
+     * @return the created local date-time, not null
      * @throws IllegalArgumentException if the calendar is null
      * @throws IllegalArgumentException if the date is invalid for the ISO chronology
      */
@@ -195,8 +196,10 @@
         if (calendar == null) {
             throw new IllegalArgumentException("The calendar must not be null");
         }
+        int era = calendar.get(Calendar.ERA);
+        int yearOfEra = calendar.get(Calendar.YEAR);
         return new LocalDateTime(
-            calendar.get(Calendar.YEAR),
+            (era == GregorianCalendar.AD ? yearOfEra : 1 - yearOfEra),
             calendar.get(Calendar.MONTH) + 1,
             calendar.get(Calendar.DAY_OF_MONTH),
             calendar.get(Calendar.HOUR_OF_DAY),
@@ -221,8 +224,8 @@
      * <p>
      * This factory method always creates a LocalDateTime with ISO chronology.
      *
-     * @param date  the Date to extract fields from
-     * @return the created LocalDateTime
+     * @param date  the Date to extract fields from, not null
+     * @return the created local date-time, not null
      * @throws IllegalArgumentException if the calendar is null
      * @throws IllegalArgumentException if the date is invalid for the ISO chronology
      */
@@ -231,6 +234,12 @@
         if (date == null) {
             throw new IllegalArgumentException("The date must not be null");
         }
+        if (date.getTime() < 0) {
+            // handle years in era BC
+            GregorianCalendar cal = new GregorianCalendar();
+            cal.setTime(date);
+            return fromCalendarFields(cal);
+        }
         return new LocalDateTime(
             date.getYear() + 1900,
             date.getMonth() + 1,
diff --git a/src/test/java/org/joda/time/TestLocalDateTime_Constructors.java b/src/test/java/org/joda/time/TestLocalDateTime_Constructors.java
index 1dbb381..e00ce5d 100644
--- a/src/test/java/org/joda/time/TestLocalDateTime_Constructors.java
+++ b/src/test/java/org/joda/time/TestLocalDateTime_Constructors.java
@@ -102,11 +102,30 @@
     }
 
     //-----------------------------------------------------------------------
-    public void testFactory_FromCalendarFields() throws Exception {
+    public void testFactory_fromCalendarFields() throws Exception {
         GregorianCalendar cal = new GregorianCalendar(1970, 1, 3, 4, 5, 6);
         cal.set(Calendar.MILLISECOND, 7);
         LocalDateTime expected = new LocalDateTime(1970, 2, 3, 4, 5, 6, 7);
         assertEquals(expected, LocalDateTime.fromCalendarFields(cal));
+    }
+
+    public void testFactory_fromCalendarFields_beforeYearZero1() throws Exception {
+        GregorianCalendar cal = new GregorianCalendar(1, 1, 3, 4, 5, 6);
+        cal.set(Calendar.ERA, GregorianCalendar.BC);
+        cal.set(Calendar.MILLISECOND, 7);
+        LocalDateTime expected = new LocalDateTime(0, 2, 3, 4, 5, 6, 7);
+        assertEquals(expected, LocalDateTime.fromCalendarFields(cal));
+    }
+
+    public void testFactory_fromCalendarFields_beforeYearZero3() throws Exception {
+        GregorianCalendar cal = new GregorianCalendar(3, 1, 3, 4, 5, 6);
+        cal.set(Calendar.ERA, GregorianCalendar.BC);
+        cal.set(Calendar.MILLISECOND, 7);
+        LocalDateTime expected = new LocalDateTime(-2, 2, 3, 4, 5, 6, 7);
+        assertEquals(expected, LocalDateTime.fromCalendarFields(cal));
+    }
+
+    public void testFactory_fromCalendarFields_null() throws Exception {
         try {
             LocalDateTime.fromCalendarFields((Calendar) null);
             fail();
@@ -114,22 +133,37 @@
     }
 
     //-----------------------------------------------------------------------
-    public void testFactory_FromDateFields_after1970() throws Exception {
+    public void testFactory_fromDateFields_after1970() throws Exception {
         GregorianCalendar cal = new GregorianCalendar(1970, 1, 3, 4, 5, 6);
         cal.set(Calendar.MILLISECOND, 7);
         LocalDateTime expected = new LocalDateTime(1970, 2, 3, 4, 5 ,6, 7);
         assertEquals(expected, LocalDateTime.fromDateFields(cal.getTime()));
-        try {
-            LocalDateTime.fromDateFields((Date) null);
-            fail();
-        } catch (IllegalArgumentException ex) {}
     }
 
-    public void testFactory_FromDateFields_before1970() throws Exception {
+    public void testFactory_fromDateFields_before1970() throws Exception {
         GregorianCalendar cal = new GregorianCalendar(1969, 1, 3, 4, 5, 6);
         cal.set(Calendar.MILLISECOND, 7);
         LocalDateTime expected = new LocalDateTime(1969, 2, 3, 4, 5 ,6, 7);
         assertEquals(expected, LocalDateTime.fromDateFields(cal.getTime()));
+    }
+
+    public void testFactory_fromDateFields_beforeYearZero1() throws Exception {
+        GregorianCalendar cal = new GregorianCalendar(1, 1, 3, 4, 5, 6);
+        cal.set(Calendar.ERA, GregorianCalendar.BC);
+        cal.set(Calendar.MILLISECOND, 7);
+        LocalDateTime expected = new LocalDateTime(0, 2, 3, 4, 5, 6, 7);
+        assertEquals(expected, LocalDateTime.fromDateFields(cal.getTime()));
+    }
+
+    public void testFactory_fromDateFields_beforeYearZero3() throws Exception {
+        GregorianCalendar cal = new GregorianCalendar(3, 1, 3, 4, 5, 6);
+        cal.set(Calendar.ERA, GregorianCalendar.BC);
+        cal.set(Calendar.MILLISECOND, 7);
+        LocalDateTime expected = new LocalDateTime(-2, 2, 3, 4, 5, 6, 7);
+        assertEquals(expected, LocalDateTime.fromDateFields(cal.getTime()));
+    }
+
+    public void testFactory_fromDateFields_null() throws Exception {
         try {
             LocalDateTime.fromDateFields((Date) null);
             fail();
diff --git a/src/test/java/org/joda/time/TestLocalDate_Constructors.java b/src/test/java/org/joda/time/TestLocalDate_Constructors.java
index acd703c..ee5fa9d 100644
--- a/src/test/java/org/joda/time/TestLocalDate_Constructors.java
+++ b/src/test/java/org/joda/time/TestLocalDate_Constructors.java
@@ -94,11 +94,30 @@
     }
 
     //-----------------------------------------------------------------------
-    public void testFactory_FromCalendarFields() throws Exception {
+    public void testFactory_fromCalendarFields() throws Exception {
         GregorianCalendar cal = new GregorianCalendar(1970, 1, 3, 4, 5, 6);
         cal.set(Calendar.MILLISECOND, 7);
         LocalDate expected = new LocalDate(1970, 2, 3);
         assertEquals(expected, LocalDate.fromCalendarFields(cal));
+    }
+
+    public void testFactory_fromCalendarFields_beforeYearZero1() throws Exception {
+        GregorianCalendar cal = new GregorianCalendar(1, 1, 3, 4, 5, 6);
+        cal.set(Calendar.ERA, GregorianCalendar.BC);
+        cal.set(Calendar.MILLISECOND, 7);
+        LocalDate expected = new LocalDate(0, 2, 3);
+        assertEquals(expected, LocalDate.fromCalendarFields(cal));
+    }
+
+    public void testFactory_fromCalendarFields_beforeYearZero3() throws Exception {
+        GregorianCalendar cal = new GregorianCalendar(3, 1, 3, 4, 5, 6);
+        cal.set(Calendar.ERA, GregorianCalendar.BC);
+        cal.set(Calendar.MILLISECOND, 7);
+        LocalDate expected = new LocalDate(-2, 2, 3);
+        assertEquals(expected, LocalDate.fromCalendarFields(cal));
+    }
+
+    public void testFactory_fromCalendarFields_null() throws Exception {
         try {
             LocalDate.fromCalendarFields((Calendar) null);
             fail();
@@ -106,11 +125,37 @@
     }
 
     //-----------------------------------------------------------------------
-    public void testFactory_FromDateFields() throws Exception {
+    public void testFactory_fromDateFields_after1970() throws Exception {
         GregorianCalendar cal = new GregorianCalendar(1970, 1, 3, 4, 5, 6);
         cal.set(Calendar.MILLISECOND, 7);
         LocalDate expected = new LocalDate(1970, 2, 3);
         assertEquals(expected, LocalDate.fromDateFields(cal.getTime()));
+    }
+
+    public void testFactory_fromDateFields_before1970() throws Exception {
+        GregorianCalendar cal = new GregorianCalendar(1969, 1, 3, 4, 5, 6);
+        cal.set(Calendar.MILLISECOND, 7);
+        LocalDate expected = new LocalDate(1969, 2, 3);
+        assertEquals(expected, LocalDate.fromDateFields(cal.getTime()));
+    }
+
+    public void testFactory_fromDateFields_beforeYearZero1() throws Exception {
+        GregorianCalendar cal = new GregorianCalendar(1, 1, 3, 4, 5, 6);
+        cal.set(Calendar.ERA, GregorianCalendar.BC);
+        cal.set(Calendar.MILLISECOND, 7);
+        LocalDate expected = new LocalDate(0, 2, 3);
+        assertEquals(expected, LocalDate.fromDateFields(cal.getTime()));
+    }
+
+    public void testFactory_fromDateFields_beforeYearZero3() throws Exception {
+        GregorianCalendar cal = new GregorianCalendar(3, 1, 3, 4, 5, 6);
+        cal.set(Calendar.ERA, GregorianCalendar.BC);
+        cal.set(Calendar.MILLISECOND, 7);
+        LocalDate expected = new LocalDate(-2, 2, 3);
+        assertEquals(expected, LocalDate.fromDateFields(cal.getTime()));
+    }
+
+    public void testFactory_fromDateFields_null() throws Exception {
         try {
             LocalDate.fromDateFields((Date) null);
             fail();
@@ -383,6 +428,7 @@
         assertEquals(6, test.getDayOfMonth());
     }
 
+    @SuppressWarnings("deprecation")
     public void testConstructor_ObjectYearMonthDay() throws Throwable {
         YearMonthDay date = new YearMonthDay(1970, 4, 6, BUDDHIST_UTC);
         LocalDate test = new LocalDate(date);
