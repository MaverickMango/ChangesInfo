{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "data/changesInfo/",
  "timeoutSecond": 300,
  "proj": "Jsoup",
  "id": "85",
  "workingDir": "../bugs/Jsoup_85_buggy",
  "inducingCommit": "a623db776696c0e03f68e849147f6a0c57063c02",
  "originalCommit": "d8eb9bd63c861132e5307a65e8f2f234fab2416b",
  "bug_name": "Jsoup_85",
  "derive": "defects4j",
  "original_fixing_commit": "25ba713e1d1a97ebfee38c0df3e7e6d4d9615f97",
  "buildFiles_changed": false,
  "inducing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/jsoup/nodes/Attribute.java",
        "src/main/java/org/jsoup/nodes/Attribute.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "Attribute"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "Attribute"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "32"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "32",
            "35"
          ],
          "num": 2
        }
      ],
      "diff": "diff --git a/src/main/java/org/jsoup/nodes/Attribute.java b/src/main/java/org/jsoup/nodes/Attribute.java\nindex 8a879ea..38be823 100644\n--- a/src/main/java/org/jsoup/nodes/Attribute.java\n+++ b/src/main/java/org/jsoup/nodes/Attribute.java\n@@ -29,9 +29,10 @@\n      * @see #createFromEncoded\n      */\n     public Attribute(String key, String value) {\n-        Validate.notEmpty(key);\n+        Validate.notNull(key);\n         Validate.notNull(value);\n         this.key \u003d key.trim();\n+        Validate.notEmpty(key); // trimming could potentially make empty, so validate here\n         this.value \u003d value;\n     }\n \n",
      "operations": [
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [1159,1181]"
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/jsoup/parser/Token.java",
        "src/main/java/org/jsoup/parser/Token.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "newAttribute"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "newAttribute"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "105",
            "106",
            "107",
            "108",
            "109",
            "110",
            "111",
            "112",
            "113"
          ],
          "num": 9
        },
        {
          "qualified_names": [
            "105",
            "106",
            "107",
            "108",
            "109",
            "110",
            "111",
            "112",
            "113",
            "114",
            "115",
            "116",
            "117"
          ],
          "num": 13
        }
      ],
      "diff": "diff --git a/src/main/java/org/jsoup/parser/Token.java b/src/main/java/org/jsoup/parser/Token.java\nindex 34baf19..af51432 100644\n--- a/src/main/java/org/jsoup/parser/Token.java\n+++ b/src/main/java/org/jsoup/parser/Token.java\n@@ -102,15 +102,19 @@\n                 attributes \u003d new Attributes();\n \n             if (pendingAttributeName !\u003d null) {\n-                Attribute attribute;\n-                if (hasPendingAttributeValue)\n-                    attribute \u003d new Attribute(pendingAttributeName,\n-                        pendingAttributeValue.length() \u003e 0 ? pendingAttributeValue.toString() : pendingAttributeValueS);\n-                else if (hasEmptyAttributeValue)\n-                    attribute \u003d new Attribute(pendingAttributeName, \"\");\n-                else\n-                    attribute \u003d new BooleanAttribute(pendingAttributeName);\n-                attributes.put(attribute);\n+                // the tokeniser has skipped whitespace control chars, but trimming could collapse to empty for other control codes, so verify here\n+                pendingAttributeName \u003d pendingAttributeName.trim();\n+                if (pendingAttributeName.length() \u003e 0) {\n+                    Attribute attribute;\n+                    if (hasPendingAttributeValue)\n+                        attribute \u003d new Attribute(pendingAttributeName,\n+                            pendingAttributeValue.length() \u003e 0 ? pendingAttributeValue.toString() : pendingAttributeValueS);\n+                    else if (hasEmptyAttributeValue)\n+                        attribute \u003d new Attribute(pendingAttributeName, \"\");\n+                    else\n+                        attribute \u003d new BooleanAttribute(pendingAttributeName);\n+                    attributes.put(attribute);\n+                }\n             }\n             pendingAttributeName \u003d null;\n             hasEmptyAttributeValue \u003d false;\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [3399,3450]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "IfStatement [3467,4095]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "InfixExpression [3471,3504]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Block [3506,4095]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        }
      ]
    }
  ],
  "inducing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  },
  "trigger_tests": [],
  "fixing_changes": [],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  }
}