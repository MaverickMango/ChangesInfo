{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "/home/liumengjiao/Desktop/CI/Benchmark/data/changesInfo/",
  "properties": {
    "trigger.tests": "org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray",
    "test.dir": "src/test/java",
    "clz.modified": "org.apache.commons.math3.util.MathArrays",
    "src.dir": "src/main/java"
  },
  "timeoutSecond": 100,
  "proj": "Math",
  "id": "3",
  "workingDir": "../bugs/Math_3_buggy",
  "buggyCommit": "de4209544270def43e39db0d214d1564939f8e40",
  "inducingCommit": "dd4efa43349e74832b092ba33a92275b68cab9d3",
  "originalCommit": "b59e97464fc8d910c06b90c06598d7176ce1924a",
  "bug_name": "Math_3",
  "derive": "defects4j",
  "original_fixing_commit": "92c4697300e8ddf06152bc0838c738d50673c1d2",
  "buildFiles_changed": false,
  "regression": false,
  "inducing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/math/analysis/function/StepFunction.java",
        "src/main/java/org/apache/commons/math/analysis/function/StepFunction.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.math.analysis.function.StepFunction:StepFunction:[double[] x, double[] y]:null"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "org.apache.commons.math.analysis.function.StepFunction:StepFunction:[double[] x, double[] y]:null"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "25",
            "71",
            "73",
            "74"
          ],
          "num": 4
        },
        {
          "qualified_names": [
            "25",
            "71",
            "73",
            "74"
          ],
          "num": 4
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/function/StepFunction.java b/src/main/java/org/apache/commons/math/analysis/function/StepFunction.java\nindex 8bec853..ad61080 100644\n--- a/src/main/java/org/apache/commons/math/analysis/function/StepFunction.java\n+++ b/src/main/java/org/apache/commons/math/analysis/function/StepFunction.java\n@@ -22,7 +22,7 @@\n import org.apache.commons.math.exception.DimensionMismatchException;\n import org.apache.commons.math.exception.NullArgumentException;\n import org.apache.commons.math.exception.NoDataException;\n-import org.apache.commons.math.util.MathUtils;\n+import org.apache.commons.math.util.MathArrays;\n \n /**\n  * \u003ca href\u003d\"http://en.wikipedia.org/wiki/Step_function\"\u003e\n@@ -68,10 +68,10 @@\n         if (y.length !\u003d x.length) {\n             throw new DimensionMismatchException(y.length, x.length);\n         }\n-        MathUtils.checkOrder(x);\n+        MathArrays.checkOrder(x);\n \n-        abscissa \u003d MathUtils.copyOf(x);\n-        ordinate \u003d MathUtils.copyOf(y);\n+        abscissa \u003d MathArrays.copyOf(x);\n+        ordinate \u003d MathArrays.copyOf(y);\n     }\n \n     /** {@inheritDoc} */\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "ImportDeclaration [1136,1183]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ImportDeclaration [1136,1182]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java",
        "src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.math.analysis.interpolation.BicubicSplineInterpolatingFunction:BicubicSplineInterpolatingFunction:[double[] x, double[] y, double[][] f, double[][] dFdX, double[][] dFdY, double[][] d2FdXdY]:null"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "org.apache.commons.math.analysis.interpolation.BicubicSplineInterpolatingFunction:BicubicSplineInterpolatingFunction:[double[] x, double[] y, double[][] f, double[][] dFdX, double[][] dFdY, double[][] d2FdXdY]:null"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "23",
            "117",
            "118"
          ],
          "num": 3
        },
        {
          "qualified_names": [
            "23",
            "117",
            "118"
          ],
          "num": 3
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java b/src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java\nindex ec5c018..219f397 100644\n--- a/src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java\n+++ b/src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java\n@@ -20,7 +20,7 @@\n import org.apache.commons.math.exception.DimensionMismatchException;\n import org.apache.commons.math.exception.NoDataException;\n import org.apache.commons.math.exception.OutOfRangeException;\n-import org.apache.commons.math.util.MathUtils;\n+import org.apache.commons.math.util.MathArrays;\n \n /**\n  * Function that implements the\n@@ -114,8 +114,8 @@\n             throw new DimensionMismatchException(xLen, d2FdXdY.length);\n         }\n \n-        MathUtils.checkOrder(x);\n-        MathUtils.checkOrder(y);\n+        MathArrays.checkOrder(x);\n+        MathArrays.checkOrder(y);\n \n         xval \u003d x.clone();\n         yval \u003d y.clone();\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "ImportDeclaration [1112,1159]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ImportDeclaration [1112,1158]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java",
        "src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.math.analysis.interpolation.BicubicSplineInterpolator:interpolate:[final double[] xval, final double[] yval, final double[][] fval]:BicubicSplineInterpolatingFunction"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "org.apache.commons.math.analysis.interpolation.BicubicSplineInterpolator:interpolate:[final double[] xval, final double[] yval, final double[][] fval]:BicubicSplineInterpolatingFunction"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "23",
            "46",
            "47"
          ],
          "num": 3
        },
        {
          "qualified_names": [
            "23",
            "46",
            "47"
          ],
          "num": 3
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java b/src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java\nindex d427ecf..b0d683c 100644\n--- a/src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java\n+++ b/src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java\n@@ -20,7 +20,7 @@\n import org.apache.commons.math.analysis.polynomials.PolynomialSplineFunction;\n import org.apache.commons.math.exception.DimensionMismatchException;\n import org.apache.commons.math.exception.NoDataException;\n-import org.apache.commons.math.util.MathUtils;\n+import org.apache.commons.math.util.MathArrays;\n \n /**\n  * Generates a bicubic interpolating function.\n@@ -43,8 +43,8 @@\n             throw new DimensionMismatchException(xval.length, fval.length);\n         }\n \n-        MathUtils.checkOrder(xval);\n-        MathUtils.checkOrder(yval);\n+        MathArrays.checkOrder(xval);\n+        MathArrays.checkOrder(yval);\n \n         final int xLen \u003d xval.length;\n         final int yLen \u003d yval.length;\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "ImportDeclaration [1129,1176]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ImportDeclaration [1129,1175]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java",
        "src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.math.analysis.interpolation.LinearInterpolator:interpolate:[double x[], double y[]]:PolynomialSplineFunction"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "org.apache.commons.math.analysis.interpolation.LinearInterpolator:interpolate:[double x[], double y[]]:PolynomialSplineFunction"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "24",
            "56"
          ],
          "num": 2
        },
        {
          "qualified_names": [
            "24",
            "56"
          ],
          "num": 2
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java b/src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java\nindex aeb4ddf..0106d9d 100644\n--- a/src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java\n+++ b/src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java\n@@ -21,7 +21,7 @@\n import org.apache.commons.math.exception.NumberIsTooSmallException;\n import org.apache.commons.math.analysis.polynomials.PolynomialFunction;\n import org.apache.commons.math.analysis.polynomials.PolynomialSplineFunction;\n-import org.apache.commons.math.util.MathUtils;\n+import org.apache.commons.math.util.MathArrays;\n \n /**\n  * Implements a linear function for interpolation of real univariate functions.\n@@ -53,7 +53,7 @@\n         // Number of intervals.  The number of data points is n + 1.\n         int n \u003d x.length - 1;\n \n-        MathUtils.checkOrder(x);\n+        MathArrays.checkOrder(x);\n \n         // Slope of the lines between the datapoints.\n         final double m[] \u003d new double[n];\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "ImportDeclaration [1211,1258]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ImportDeclaration [1211,1257]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java",
        "src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.math.analysis.interpolation.LoessInterpolator:smooth:[final double[] xval, final double[] yval, final double[] weights]:double[]"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "org.apache.commons.math.analysis.interpolation.LoessInterpolator:smooth:[final double[] xval, final double[] yval, final double[] weights]:double[]"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "30",
            "219"
          ],
          "num": 2
        },
        {
          "qualified_names": [
            "31",
            "220"
          ],
          "num": 2
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java b/src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java\nindex 58303dd..b87fae6 100644\n--- a/src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java\n+++ b/src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java\n@@ -28,6 +28,7 @@\n import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.util.FastMath;\n import org.apache.commons.math.util.MathUtils;\n+import org.apache.commons.math.util.MathArrays;\n \n /**\n  * Implements the \u003ca href\u003d\"http://en.wikipedia.org/wiki/Local_regression\"\u003e\n@@ -216,7 +217,7 @@\n         checkAllFiniteReal(yval);\n         checkAllFiniteReal(weights);\n \n-        MathUtils.checkOrder(xval);\n+        MathArrays.checkOrder(xval);\n \n         if (n \u003d\u003d 1) {\n             return new double[]{yval[0]};\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "ImportDeclaration [1470,1517]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java",
        "src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.math.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolator:interpolate:[final double[] xval, final double[] yval, final double[][] fval]:BicubicSplineInterpolatingFunction"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "org.apache.commons.math.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolator:interpolate:[final double[] xval, final double[] yval, final double[][] fval]:BicubicSplineInterpolatingFunction"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "21",
            "90",
            "91"
          ],
          "num": 3
        },
        {
          "qualified_names": [
            "21",
            "90",
            "91"
          ],
          "num": 3
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java b/src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java\nindex 84090ed..87e88b6 100644\n--- a/src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java\n+++ b/src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java\n@@ -18,7 +18,7 @@\n \n import org.apache.commons.math.exception.DimensionMismatchException;\n import org.apache.commons.math.exception.NoDataException;\n-import org.apache.commons.math.util.MathUtils;\n+import org.apache.commons.math.util.MathArrays;\n import org.apache.commons.math.optimization.general.GaussNewtonOptimizer;\n import org.apache.commons.math.optimization.fitting.PolynomialFitter;\n import org.apache.commons.math.analysis.polynomials.PolynomialFunction;\n@@ -87,8 +87,8 @@\n             }\n         }\n \n-        MathUtils.checkOrder(xval);\n-        MathUtils.checkOrder(yval);\n+        MathArrays.checkOrder(xval);\n+        MathArrays.checkOrder(yval);\n \n         // For each line y[j] (0 \u003c\u003d j \u003c yLen), construct a polynomial, with\n         // respect to variable x, fitting array fval[][j]\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "ImportDeclaration [987,1034]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ImportDeclaration [987,1033]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/math/analysis/interpolation/SplineInterpolator.java",
        "src/main/java/org/apache/commons/math/analysis/interpolation/SplineInterpolator.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.math.analysis.interpolation.SplineInterpolator:interpolate:[double x[], double y[]]:PolynomialSplineFunction"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "org.apache.commons.math.analysis.interpolation.SplineInterpolator:interpolate:[double x[], double y[]]:PolynomialSplineFunction"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "24",
            "80"
          ],
          "num": 2
        },
        {
          "qualified_names": [
            "24",
            "80"
          ],
          "num": 2
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/interpolation/SplineInterpolator.java b/src/main/java/org/apache/commons/math/analysis/interpolation/SplineInterpolator.java\nindex 4d9de83..18142e6 100644\n--- a/src/main/java/org/apache/commons/math/analysis/interpolation/SplineInterpolator.java\n+++ b/src/main/java/org/apache/commons/math/analysis/interpolation/SplineInterpolator.java\n@@ -21,7 +21,7 @@\n import org.apache.commons.math.exception.NumberIsTooSmallException;\n import org.apache.commons.math.analysis.polynomials.PolynomialFunction;\n import org.apache.commons.math.analysis.polynomials.PolynomialSplineFunction;\n-import org.apache.commons.math.util.MathUtils;\n+import org.apache.commons.math.util.MathArrays;\n \n /**\n  * Computes a natural (also known as \"free\", \"unclamped\") cubic spline interpolation for the data set.\n@@ -77,7 +77,7 @@\n         // Number of intervals.  The number of data points is n + 1.\n         int n \u003d x.length - 1;\n \n-        MathUtils.checkOrder(x);\n+        MathArrays.checkOrder(x);\n \n         // Differences between knot points\n         double h[] \u003d new double[n];\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "ImportDeclaration [1211,1258]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ImportDeclaration [1211,1257]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java",
        "src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.math.analysis.interpolation.TricubicSplineInterpolatingFunction:TricubicSplineInterpolatingFunction:[double[] x, double[] y, double[] z, double[][][] f, double[][][] dFdX, double[][][] dFdY, double[][][] dFdZ, double[][][] d2FdXdY, double[][][] d2FdXdZ, double[][][] d2FdYdZ, double[][][] d3FdXdYdZ]:null"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "org.apache.commons.math.analysis.interpolation.TricubicSplineInterpolatingFunction:TricubicSplineInterpolatingFunction:[double[] x, double[] y, double[] z, double[][][] f, double[][][] dFdX, double[][][] dFdY, double[][][] dFdZ, double[][][] d2FdXdY, double[][][] d2FdXdZ, double[][][] d2FdYdZ, double[][][] d3FdXdYdZ]:null"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "23",
            "188",
            "189",
            "190"
          ],
          "num": 4
        },
        {
          "qualified_names": [
            "23",
            "188",
            "189",
            "190"
          ],
          "num": 4
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java b/src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java\nindex fd6a4eb..84e1583 100644\n--- a/src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java\n+++ b/src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java\n@@ -20,7 +20,7 @@\n import org.apache.commons.math.exception.DimensionMismatchException;\n import org.apache.commons.math.exception.NoDataException;\n import org.apache.commons.math.exception.OutOfRangeException;\n-import org.apache.commons.math.util.MathUtils;\n+import org.apache.commons.math.util.MathArrays;\n \n /**\n  * Function that implements the\n@@ -185,9 +185,9 @@\n             throw new DimensionMismatchException(xLen, d3FdXdYdZ.length);\n         }\n \n-        MathUtils.checkOrder(x);\n-        MathUtils.checkOrder(y);\n-        MathUtils.checkOrder(z);\n+        MathArrays.checkOrder(x);\n+        MathArrays.checkOrder(y);\n+        MathArrays.checkOrder(z);\n \n         xval \u003d x.clone();\n         yval \u003d y.clone();\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "ImportDeclaration [1113,1160]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ImportDeclaration [1113,1159]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolator.java",
        "src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolator.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.math.analysis.interpolation.TricubicSplineInterpolator:interpolate:[final double[] xval, final double[] yval, final double[] zval, final double[][][] fval]:TricubicSplineInterpolatingFunction"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "org.apache.commons.math.analysis.interpolation.TricubicSplineInterpolator:interpolate:[final double[] xval, final double[] yval, final double[] zval, final double[][][] fval]:TricubicSplineInterpolatingFunction"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "21",
            "45",
            "46",
            "47"
          ],
          "num": 4
        },
        {
          "qualified_names": [
            "21",
            "45",
            "46",
            "47"
          ],
          "num": 4
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolator.java b/src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolator.java\nindex 0debe28..7577ade 100644\n--- a/src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolator.java\n+++ b/src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolator.java\n@@ -18,7 +18,7 @@\n \n import org.apache.commons.math.exception.DimensionMismatchException;\n import org.apache.commons.math.exception.NoDataException;\n-import org.apache.commons.math.util.MathUtils;\n+import org.apache.commons.math.util.MathArrays;\n \n /**\n  * Generates a tricubic interpolating function.\n@@ -42,9 +42,9 @@\n             throw new DimensionMismatchException(xval.length, fval.length);\n         }\n \n-        MathUtils.checkOrder(xval);\n-        MathUtils.checkOrder(yval);\n-        MathUtils.checkOrder(zval);\n+        MathArrays.checkOrder(xval);\n+        MathArrays.checkOrder(yval);\n+        MathArrays.checkOrder(zval);\n \n         final int xLen \u003d xval.length;\n         final int yLen \u003d yval.length;\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "ImportDeclaration [987,1034]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ImportDeclaration [987,1033]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/math/analysis/interpolation/UnivariateRealPeriodicInterpolator.java",
        "src/main/java/org/apache/commons/math/analysis/interpolation/UnivariateRealPeriodicInterpolator.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.math.analysis.interpolation.UnivariateRealPeriodicInterpolator:interpolate:[double[] xval, double[] yval]:UnivariateRealFunction"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "org.apache.commons.math.analysis.interpolation.UnivariateRealPeriodicInterpolator:interpolate:[double[] xval, double[] yval]:UnivariateRealFunction"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "20",
            "88",
            "111"
          ],
          "num": 3
        },
        {
          "qualified_names": [
            "21",
            "89",
            "112"
          ],
          "num": 3
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/interpolation/UnivariateRealPeriodicInterpolator.java b/src/main/java/org/apache/commons/math/analysis/interpolation/UnivariateRealPeriodicInterpolator.java\nindex 9e61411..49800e1 100644\n--- a/src/main/java/org/apache/commons/math/analysis/interpolation/UnivariateRealPeriodicInterpolator.java\n+++ b/src/main/java/org/apache/commons/math/analysis/interpolation/UnivariateRealPeriodicInterpolator.java\n@@ -18,6 +18,7 @@\n \n import org.apache.commons.math.analysis.UnivariateRealFunction;\n import org.apache.commons.math.util.MathUtils;\n+import org.apache.commons.math.util.MathArrays;\n import org.apache.commons.math.exception.NumberIsTooSmallException;\n \n /**\n@@ -85,7 +86,7 @@\n             throw new NumberIsTooSmallException(xval.length, extend, true);\n         }\n \n-        MathUtils.checkOrder(xval);\n+        MathArrays.checkOrder(xval);\n         final double offset \u003d xval[0];\n \n         final int len \u003d xval.length + extend * 2;\n@@ -108,7 +109,7 @@\n             y[index] \u003d yval[i];\n         }\n \n-        MathUtils.sortInPlace(x, y);\n+        MathArrays.sortInPlace(x, y);\n \n         final UnivariateRealFunction f \u003d interpolator.interpolate(x, y);\n         return new UnivariateRealFunction() {\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "ImportDeclaration [971,1018]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java",
        "src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeForm:verifyInterpolationArray:[double x[], double y[], boolean abort]:boolean",
            "org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeForm:PolynomialFunctionLagrangeForm:[double x[], double y[]]:null",
            "org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeForm:evaluate:[double x[], double y[], double z]:double"
          ],
          "num": 3
        },
        {
          "qualified_names": [
            "org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeForm:evaluate:[double x[], double y[], double z]:double",
            "org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeForm:PolynomialFunctionLagrangeForm:[double x[], double y[]]:null",
            "org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeForm:verifyInterpolationArray:[double x[], double y[], boolean abort]:boolean"
          ],
          "num": 3
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "21",
            "79",
            "182",
            "321"
          ],
          "num": 4
        },
        {
          "qualified_names": [
            "21",
            "79",
            "182",
            "321"
          ],
          "num": 4
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java b/src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java\nindex ab1d3ef..b97319c 100644\n--- a/src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java\n+++ b/src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java\n@@ -18,7 +18,7 @@\n \n import org.apache.commons.math.analysis.UnivariateRealFunction;\n import org.apache.commons.math.util.FastMath;\n-import org.apache.commons.math.util.MathUtils;\n+import org.apache.commons.math.util.MathArrays;\n import org.apache.commons.math.exception.DimensionMismatchException;\n import org.apache.commons.math.exception.NumberIsTooSmallException;\n import org.apache.commons.math.exception.util.LocalizedFormats;\n@@ -76,7 +76,7 @@\n         coefficientsComputed \u003d false;\n \n         if (!verifyInterpolationArray(x, y, false)) {\n-            MathUtils.sortInPlace(this.x, this.y);\n+            MathArrays.sortInPlace(this.x, this.y);\n             // Second check in case some abscissa is duplicated.\n             verifyInterpolationArray(this.x, this.y, true);\n         }\n@@ -179,7 +179,7 @@\n         System.arraycopy(x, 0, xNew, 0, x.length);\n         System.arraycopy(y, 0, yNew, 0, y.length);\n \n-        MathUtils.sortInPlace(xNew, yNew);\n+        MathArrays.sortInPlace(xNew, yNew);\n         // Second check in case some abscissa is duplicated.\n         verifyInterpolationArray(xNew, yNew, true);\n         return evaluateInternal(xNew, yNew, z);\n@@ -318,6 +318,6 @@\n             throw new NumberIsTooSmallException(LocalizedFormats.WRONG_NUMBER_OF_POINTS, 2, x.length, true);\n         }\n \n-        return MathUtils.checkOrder(x, MathUtils.OrderDirection.INCREASING, true, abort);\n+        return MathArrays.checkOrder(x, MathArrays.OrderDirection.INCREASING, true, abort);\n     }\n }\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "ImportDeclaration [968,1015]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ImportDeclaration [968,1014]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java",
        "src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.math.analysis.polynomials.PolynomialSplineFunction:PolynomialSplineFunction:[double knots[], PolynomialFunction polynomials[]]:null"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "org.apache.commons.math.analysis.polynomials.PolynomialSplineFunction:PolynomialSplineFunction:[double knots[], PolynomialFunction polynomials[]]:null"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "21",
            "112"
          ],
          "num": 2
        },
        {
          "qualified_names": [
            "21",
            "112"
          ],
          "num": 2
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java b/src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java\nindex f4548c2..e6c59a5 100644\n--- a/src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java\n+++ b/src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java\n@@ -18,7 +18,7 @@\n \n import java.util.Arrays;\n \n-import org.apache.commons.math.util.MathUtils;\n+import org.apache.commons.math.util.MathArrays;\n import org.apache.commons.math.analysis.DifferentiableUnivariateRealFunction;\n import org.apache.commons.math.analysis.UnivariateRealFunction;\n import org.apache.commons.math.exception.OutOfRangeException;\n@@ -109,7 +109,7 @@\n         if (knots.length - 1 !\u003d polynomials.length) {\n             throw new DimensionMismatchException(polynomials.length, knots.length);\n         }\n-        MathUtils.checkOrder(knots);\n+        MathArrays.checkOrder(knots);\n \n         this.n \u003d knots.length -1;\n         this.knots \u003d new double[n + 1];\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "ImportDeclaration [884,931]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ImportDeclaration [884,930]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/math/exception/NonMonotonicSequenceException.java",
        "src/main/java/org/apache/commons/math/exception/NonMonotonicSequenceException.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.math.exception.NonMonotonicSequenceException:NonMonotonicSequenceException:[Number wrong, Number previous, int index, MathUtils.OrderDirection direction, boolean strict]:null",
            "org.apache.commons.math.exception.NonMonotonicSequenceException:getDirection:[]:MathUtils.OrderDirection",
            "org.apache.commons.math.exception.NonMonotonicSequenceException:NonMonotonicSequenceException:[Number wrong, Number previous, int index]:null"
          ],
          "num": 3
        },
        {
          "qualified_names": [
            "org.apache.commons.math.exception.NonMonotonicSequenceException:NonMonotonicSequenceException:[Number wrong, Number previous, int index]:null",
            "org.apache.commons.math.exception.NonMonotonicSequenceException:NonMonotonicSequenceException:[Number wrong, Number previous, int index, MathArrays.OrderDirection direction, boolean strict]:null",
            "org.apache.commons.math.exception.NonMonotonicSequenceException:getDirection:[]:MathArrays.OrderDirection"
          ],
          "num": 3
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "19",
            "35",
            "61",
            "78",
            "80",
            "98"
          ],
          "num": 6
        },
        {
          "qualified_names": [
            "19",
            "35",
            "61",
            "78",
            "80",
            "98"
          ],
          "num": 6
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/math/exception/NonMonotonicSequenceException.java b/src/main/java/org/apache/commons/math/exception/NonMonotonicSequenceException.java\nindex 7140a8d..3f27698 100644\n--- a/src/main/java/org/apache/commons/math/exception/NonMonotonicSequenceException.java\n+++ b/src/main/java/org/apache/commons/math/exception/NonMonotonicSequenceException.java\n@@ -16,7 +16,7 @@\n  */\n package org.apache.commons.math.exception;\n \n-import org.apache.commons.math.util.MathUtils;\n+import org.apache.commons.math.util.MathArrays;\n import org.apache.commons.math.exception.util.LocalizedFormats;\n \n /**\n@@ -32,7 +32,7 @@\n     /**\n      * Direction (positive for increasing, negative for decreasing).\n      */\n-    private final MathUtils.OrderDirection direction;\n+    private final MathArrays.OrderDirection direction;\n     /**\n      * Whether the sequence must be strictly increasing or decreasing.\n      */\n@@ -58,7 +58,7 @@\n     public NonMonotonicSequenceException(Number wrong,\n                                          Number previous,\n                                          int index) {\n-        this(wrong, previous, index, MathUtils.OrderDirection.INCREASING, true);\n+        this(wrong, previous, index, MathArrays.OrderDirection.INCREASING, true);\n     }\n \n     /**\n@@ -75,9 +75,9 @@\n     public NonMonotonicSequenceException(Number wrong,\n                                          Number previous,\n                                          int index,\n-                                         MathUtils.OrderDirection direction,\n+                                         MathArrays.OrderDirection direction,\n                                          boolean strict) {\n-        super(direction \u003d\u003d MathUtils.OrderDirection.INCREASING ?\n+        super(direction \u003d\u003d MathArrays.OrderDirection.INCREASING ?\n               (strict ?\n                LocalizedFormats.NOT_STRICTLY_INCREASING_SEQUENCE :\n                LocalizedFormats.NOT_INCREASING_SEQUENCE) :\n@@ -95,7 +95,7 @@\n     /**\n      * @return the order direction.\n      **/\n-    public MathUtils.OrderDirection getDirection() {\n+    public MathArrays.OrderDirection getDirection() {\n         return direction;\n     }\n     /**\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "ImportDeclaration [847,894]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ImportDeclaration [847,893]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java",
        "src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.math.geometry.euclidean.threed.Vector3D:Vector3D:[double a1, Vector3D u1, double a2, Vector3D u2, double a3, Vector3D u3]:null",
            "org.apache.commons.math.geometry.euclidean.threed.Vector3D:dotProduct:[final Vector\u003cEuclidean3D\u003e v]:double",
            "org.apache.commons.math.geometry.euclidean.threed.Vector3D:Vector3D:[double a1, Vector3D u1, double a2, Vector3D u2, double a3, Vector3D u3, double a4, Vector3D u4]:null",
            "org.apache.commons.math.geometry.euclidean.threed.Vector3D:Vector3D:[double a1, Vector3D u1, double a2, Vector3D u2]:null",
            "org.apache.commons.math.geometry.euclidean.threed.Vector3D:crossProduct:[final Vector\u003cEuclidean3D\u003e v]:Vector3D"
          ],
          "num": 5
        },
        {
          "qualified_names": [
            "org.apache.commons.math.geometry.euclidean.threed.Vector3D:dotProduct:[final Vector\u003cEuclidean3D\u003e v]:double",
            "org.apache.commons.math.geometry.euclidean.threed.Vector3D:Vector3D:[double a1, Vector3D u1, double a2, Vector3D u2, double a3, Vector3D u3]:null",
            "org.apache.commons.math.geometry.euclidean.threed.Vector3D:Vector3D:[double a1, Vector3D u1, double a2, Vector3D u2]:null",
            "org.apache.commons.math.geometry.euclidean.threed.Vector3D:crossProduct:[final Vector\u003cEuclidean3D\u003e v]:Vector3D",
            "org.apache.commons.math.geometry.euclidean.threed.Vector3D:Vector3D:[double a1, Vector3D u1, double a2, Vector3D u2, double a3, Vector3D u3, double a4, Vector3D u4]:null"
          ],
          "num": 5
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "28",
            "135",
            "136",
            "137",
            "152",
            "153",
            "154",
            "171",
            "172",
            "173",
            "425",
            "429",
            "438",
            "439",
            "440"
          ],
          "num": 15
        },
        {
          "qualified_names": [
            "29",
            "136",
            "137",
            "138",
            "153",
            "154",
            "155",
            "172",
            "173",
            "174",
            "426",
            "430",
            "439",
            "440",
            "441"
          ],
          "num": 15
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java b/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java\nindex ac46539..e69d648 100644\n--- a/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java\n+++ b/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java\n@@ -26,6 +26,7 @@\n import org.apache.commons.math.geometry.Space;\n import org.apache.commons.math.util.FastMath;\n import org.apache.commons.math.util.MathUtils;\n+import org.apache.commons.math.util.MathArrays;\n \n /**\n  * This class implements vectors in a three-dimensional space.\n@@ -132,9 +133,9 @@\n      * @param u2 second base (unscaled) vector\n      */\n     public Vector3D(double a1, Vector3D u1, double a2, Vector3D u2) {\n-        this.x \u003d MathUtils.linearCombination(a1, u1.x, a2, u2.x);\n-        this.y \u003d MathUtils.linearCombination(a1, u1.y, a2, u2.y);\n-        this.z \u003d MathUtils.linearCombination(a1, u1.z, a2, u2.z);\n+        this.x \u003d MathArrays.linearCombination(a1, u1.x, a2, u2.x);\n+        this.y \u003d MathArrays.linearCombination(a1, u1.y, a2, u2.y);\n+        this.z \u003d MathArrays.linearCombination(a1, u1.z, a2, u2.z);\n     }\n \n     /** Linear constructor\n@@ -149,9 +150,9 @@\n      */\n     public Vector3D(double a1, Vector3D u1, double a2, Vector3D u2,\n                     double a3, Vector3D u3) {\n-        this.x \u003d MathUtils.linearCombination(a1, u1.x, a2, u2.x, a3, u3.x);\n-        this.y \u003d MathUtils.linearCombination(a1, u1.y, a2, u2.y, a3, u3.y);\n-        this.z \u003d MathUtils.linearCombination(a1, u1.z, a2, u2.z, a3, u3.z);\n+        this.x \u003d MathArrays.linearCombination(a1, u1.x, a2, u2.x, a3, u3.x);\n+        this.y \u003d MathArrays.linearCombination(a1, u1.y, a2, u2.y, a3, u3.y);\n+        this.z \u003d MathArrays.linearCombination(a1, u1.z, a2, u2.z, a3, u3.z);\n     }\n \n     /** Linear constructor\n@@ -168,9 +169,9 @@\n      */\n     public Vector3D(double a1, Vector3D u1, double a2, Vector3D u2,\n                     double a3, Vector3D u3, double a4, Vector3D u4) {\n-        this.x \u003d MathUtils.linearCombination(a1, u1.x, a2, u2.x, a3, u3.x, a4, u4.x);\n-        this.y \u003d MathUtils.linearCombination(a1, u1.y, a2, u2.y, a3, u3.y, a4, u4.y);\n-        this.z \u003d MathUtils.linearCombination(a1, u1.z, a2, u2.z, a3, u3.z, a4, u4.z);\n+        this.x \u003d MathArrays.linearCombination(a1, u1.x, a2, u2.x, a3, u3.x, a4, u4.x);\n+        this.y \u003d MathArrays.linearCombination(a1, u1.y, a2, u2.y, a3, u3.y, a4, u4.y);\n+        this.z \u003d MathArrays.linearCombination(a1, u1.z, a2, u2.z, a3, u3.z, a4, u4.z);\n     }\n \n     /** Get the abscissa of the vector.\n@@ -422,11 +423,11 @@\n      * algorithms to preserve accuracy and reduce cancellation effects.\n      * It should be very accurate even for nearly orthogonal vectors.\n      * \u003c/p\u003e\n-     * @see MathUtils#linearCombination(double, double, double, double, double, double)\n+     * @see MathArrays#linearCombination(double, double, double, double, double, double)\n      */\n     public double dotProduct(final Vector\u003cEuclidean3D\u003e v) {\n         final Vector3D v3 \u003d (Vector3D) v;\n-        return MathUtils.linearCombination(x, v3.x, y, v3.y, z, v3.z);\n+        return MathArrays.linearCombination(x, v3.x, y, v3.y, z, v3.z);\n     }\n \n     /** Compute the cross-product of the instance with another vector.\n@@ -435,9 +436,9 @@\n      */\n     public Vector3D crossProduct(final Vector\u003cEuclidean3D\u003e v) {\n         final Vector3D v3 \u003d (Vector3D) v;\n-        return new Vector3D(MathUtils.linearCombination(y, v3.z, -z, v3.y),\n-                            MathUtils.linearCombination(z, v3.x, -x, v3.z),\n-                            MathUtils.linearCombination(x, v3.y, -y, v3.x));\n+        return new Vector3D(MathArrays.linearCombination(y, v3.z, -z, v3.y),\n+                            MathArrays.linearCombination(z, v3.x, -x, v3.z),\n+                            MathArrays.linearCombination(x, v3.y, -y, v3.x));\n     }\n \n     /** {@inheritDoc} */\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "ImportDeclaration [1243,1290]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/math/linear/PivotingQRDecomposition.java",
        "src/main/java/org/apache/commons/math/linear/PivotingQRDecomposition.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.math.linear.PivotingQRDecomposition:getOrder:[]:int[]"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "org.apache.commons.math.linear.PivotingQRDecomposition:getOrder:[]:int[]"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "19",
            "58"
          ],
          "num": 2
        },
        {
          "qualified_names": [
            "19",
            "58"
          ],
          "num": 2
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/math/linear/PivotingQRDecomposition.java b/src/main/java/org/apache/commons/math/linear/PivotingQRDecomposition.java\nindex 31f5b7e..dfa4fbb 100644\n--- a/src/main/java/org/apache/commons/math/linear/PivotingQRDecomposition.java\n+++ b/src/main/java/org/apache/commons/math/linear/PivotingQRDecomposition.java\n@@ -16,7 +16,7 @@\n package org.apache.commons.math.linear;\n \n import java.util.Arrays;\n-import org.apache.commons.math.util.MathUtils;\n+import org.apache.commons.math.util.MathArrays;\n import org.apache.commons.math.exception.ConvergenceException;\n import org.apache.commons.math.exception.DimensionMismatchException;\n import org.apache.commons.math.exception.util.LocalizedFormats;\n@@ -55,7 +55,7 @@\n     }\n \n     public int[] getOrder() {\n-        return MathUtils.copyOf(permutation);\n+        return MathArrays.copyOf(permutation);\n     }\n \n     public PivotingQRDecomposition(RealMatrix matrix) throws ConvergenceException {\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "ImportDeclaration [682,729]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ImportDeclaration [682,728]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java",
        "src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.math.optimization.direct.BOBYQAOptimizer:BOBYQAOptimizer:[int numberOfInterpolationPoints, double[] lowerBound, double[] upperBound, double initialTrustRegionRadius, double stoppingTrustRegionRadius]:null"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "org.apache.commons.math.optimization.direct.BOBYQAOptimizer:BOBYQAOptimizer:[int numberOfInterpolationPoints, double[] lowerBound, double[] upperBound, double initialTrustRegionRadius, double stoppingTrustRegionRadius]:null"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "34",
            "160",
            "161"
          ],
          "num": 3
        },
        {
          "qualified_names": [
            "34",
            "160",
            "161"
          ],
          "num": 3
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java b/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java\nindex e31e01a..874b9a1 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java\n@@ -31,7 +31,7 @@\n import org.apache.commons.math.optimization.GoalType;\n import org.apache.commons.math.optimization.MultivariateRealOptimizer;\n import org.apache.commons.math.optimization.RealPointValuePair;\n-import org.apache.commons.math.util.MathUtils;\n+import org.apache.commons.math.util.MathArrays;\n \n /**\n  * Powell\u0027s BOBYQA algorithm. This implementation is translated and\n@@ -157,8 +157,8 @@\n                            double[] upperBound,\n                            double initialTrustRegionRadius,\n                            double stoppingTrustRegionRadius) {\n-        this.lowerBound \u003d lowerBound \u003d\u003d null ? null : MathUtils.copyOf(lowerBound);\n-        this.upperBound \u003d upperBound \u003d\u003d null ? null : MathUtils.copyOf(upperBound);\n+        this.lowerBound \u003d lowerBound \u003d\u003d null ? null : MathArrays.copyOf(lowerBound);\n+        this.upperBound \u003d upperBound \u003d\u003d null ? null : MathArrays.copyOf(upperBound);\n         this.numberOfInterpolationPoints \u003d numberOfInterpolationPoints;\n         this.initialTrustRegionRadius \u003d initialTrustRegionRadius;\n         this.stoppingTrustRegionRadius \u003d stoppingTrustRegionRadius;\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "ImportDeclaration [1635,1682]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ImportDeclaration [1635,1681]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java",
        "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.math.optimization.direct.CMAESOptimizer:updateCovariance:[boolean hsig, final RealMatrix bestArx, final RealMatrix arz, final int[] arindex, final RealMatrix xold]:void",
            "org.apache.commons.math.optimization.direct.CMAESOptimizer:doOptimize:[]:RealPointValuePair"
          ],
          "num": 2
        },
        {
          "qualified_names": [
            "org.apache.commons.math.optimization.direct.CMAESOptimizer:doOptimize:[]:RealPointValuePair",
            "org.apache.commons.math.optimization.direct.CMAESOptimizer:updateCovariance:[boolean hsig, final RealMatrix bestArx, final RealMatrix arz, final int[] arindex, final RealMatrix xold]:void"
          ],
          "num": 2
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "39",
            "398",
            "400",
            "714"
          ],
          "num": 4
        },
        {
          "qualified_names": [
            "39",
            "398",
            "400",
            "714"
          ],
          "num": 4
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java b/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\nindex 57930df..0d1f3c9 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\n@@ -36,7 +36,7 @@\n import org.apache.commons.math.optimization.RealPointValuePair;\n import org.apache.commons.math.random.MersenneTwister;\n import org.apache.commons.math.random.RandomGenerator;\n-import org.apache.commons.math.util.MathUtils;\n+import org.apache.commons.math.util.MathArrays;\n \n /**\n  * \u003cp\u003eAn implementation of the active Covariance Matrix Adaptation Evolution Strategy (CMA-ES)\n@@ -395,9 +395,9 @@\n                 int[] arindex \u003d sortedIndices(fitness);\n                 // Calculate new xmean, this is selection and recombination\n                 RealMatrix xold \u003d xmean; // for speed up of Eq. (2) and (3)\n-                RealMatrix bestArx \u003d selectColumns(arx, MathUtils.copyOf(arindex, mu));\n+                RealMatrix bestArx \u003d selectColumns(arx, MathArrays.copyOf(arindex, mu));\n                 xmean \u003d bestArx.multiply(weights);\n-                RealMatrix bestArz \u003d selectColumns(arz, MathUtils.copyOf(arindex, mu));\n+                RealMatrix bestArz \u003d selectColumns(arz, MathArrays.copyOf(arindex, mu));\n                 RealMatrix zmean \u003d bestArz.multiply(weights);\n                 boolean hsig \u003d updateEvolutionPaths(zmean, xold);\n                 if (diagonalOnly \u003c\u003d 0) {\n@@ -711,7 +711,7 @@\n                 // prepare vectors, compute negative updating matrix Cneg\n                 int[] arReverseIndex \u003d reverse(arindex);\n                 RealMatrix arzneg\n-                    \u003d selectColumns(arz, MathUtils.copyOf(arReverseIndex, mu));\n+                    \u003d selectColumns(arz, MathArrays.copyOf(arReverseIndex, mu));\n                 RealMatrix arnorms \u003d sqrt(sumRows(square(arzneg)));\n                 int[] idxnorms \u003d sortedIndices(arnorms.getRow(0));\n                 RealMatrix arnormsSorted \u003d selectColumns(arnorms, idxnorms);\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "ImportDeclaration [1846,1893]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ImportDeclaration [1846,1892]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/math/optimization/direct/PowellOptimizer.java",
        "src/main/java/org/apache/commons/math/optimization/direct/PowellOptimizer.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.math.optimization.direct.PowellOptimizer:doOptimize:[]:RealPointValuePair"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "org.apache.commons.math.optimization.direct.PowellOptimizer:doOptimize:[]:RealPointValuePair"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "21",
            "144"
          ],
          "num": 2
        },
        {
          "qualified_names": [
            "21",
            "144"
          ],
          "num": 2
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/PowellOptimizer.java b/src/main/java/org/apache/commons/math/optimization/direct/PowellOptimizer.java\nindex 22c2f2a..2bea9bc 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/PowellOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/PowellOptimizer.java\n@@ -18,7 +18,7 @@\n package org.apache.commons.math.optimization.direct;\n \n import org.apache.commons.math.util.FastMath;\n-import org.apache.commons.math.util.MathUtils;\n+import org.apache.commons.math.util.MathArrays;\n import org.apache.commons.math.analysis.UnivariateRealFunction;\n import org.apache.commons.math.analysis.MultivariateRealFunction;\n import org.apache.commons.math.exception.NumberIsTooSmallException;\n@@ -141,7 +141,7 @@\n             double alphaMin \u003d 0;\n \n             for (int i \u003d 0; i \u003c n; i++) {\n-                final double[] d \u003d MathUtils.copyOf(direc[i]);\n+                final double[] d \u003d MathArrays.copyOf(direc[i]);\n \n                 fX2 \u003d fVal;\n \n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "ImportDeclaration [904,951]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ImportDeclaration [904,950]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java",
        "src/main/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.math.stat.clustering.EuclideanIntegerPoint:distanceFrom:[final EuclideanIntegerPoint p]:double"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "org.apache.commons.math.stat.clustering.EuclideanIntegerPoint:distanceFrom:[final EuclideanIntegerPoint p]:double"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "23",
            "57"
          ],
          "num": 2
        },
        {
          "qualified_names": [
            "23",
            "57"
          ],
          "num": 2
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java b/src/main/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java\nindex aac761d..c6111c0 100644\n--- a/src/main/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java\n+++ b/src/main/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java\n@@ -20,7 +20,7 @@\n import java.io.Serializable;\n import java.util.Collection;\n \n-import org.apache.commons.math.util.MathUtils;\n+import org.apache.commons.math.util.MathArrays;\n \n /**\n  * A simple implementation of {@link Clusterable} for points with integer coordinates.\n@@ -54,7 +54,7 @@\n \n     /** {@inheritDoc} */\n     public double distanceFrom(final EuclideanIntegerPoint p) {\n-        return MathUtils.distance(point, p.getPoint());\n+        return MathArrays.distance(point, p.getPoint());\n     }\n \n     /** {@inheritDoc} */\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "ImportDeclaration [913,960]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ImportDeclaration [913,959]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java",
        "src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.math.stat.regression.MillerUpdatingRegression:addObservation:[final double[] x, final double y]:void",
            "org.apache.commons.math.stat.regression.MillerUpdatingRegression:getOrderOfRegressors:[]:int[]"
          ],
          "num": 2
        },
        {
          "qualified_names": [
            "org.apache.commons.math.stat.regression.MillerUpdatingRegression:addObservation:[final double[] x, final double y]:void",
            "org.apache.commons.math.stat.regression.MillerUpdatingRegression:getOrderOfRegressors:[]:int[]"
          ],
          "num": 2
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "22",
            "189",
            "921"
          ],
          "num": 3
        },
        {
          "qualified_names": [
            "23",
            "190",
            "922"
          ],
          "num": 3
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java b/src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java\nindex f41d62f..d0f9036 100644\n--- a/src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java\n+++ b/src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java\n@@ -20,6 +20,7 @@\n import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.util.FastMath;\n import org.apache.commons.math.util.MathUtils;\n+import org.apache.commons.math.util.MathArrays;\n \n /**\n  * \u003cp\u003eThis class is a concrete implementation of the {@link UpdatingMultipleLinearRegression} interface.\u003c/p\u003e\n@@ -186,7 +187,7 @@\n                     x.length, nvars);\n         }\n         if (!this.hasIntercept) {\n-            include(MathUtils.copyOf(x, x.length), 1.0, y);\n+            include(MathArrays.copyOf(x, x.length), 1.0, y);\n         } else {\n             double[] tmp \u003d new double[x.length + 1];\n             System.arraycopy(x, 0, tmp, 1, x.length);\n@@ -918,7 +919,7 @@\n      * @return int[] with the current order of the regressors\n      */\n     public int[] getOrderOfRegressors(){\n-        return MathUtils.copyOf(vorder);\n+        return MathArrays.copyOf(vorder);\n     }\n \n     /**\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "ImportDeclaration [1035,1082]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/math/stat/regression/RegressionResults.java",
        "src/main/java/org/apache/commons/math/stat/regression/RegressionResults.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.math.stat.regression.RegressionResults:RegressionResults:[final double[] parameters, final double[][] varcov, final boolean isSymmetricCompressed, final long nobs, final int rank, final double sumy, final double sumysq, final double sse, final boolean containsConstant, final boolean copyData]:null",
            "org.apache.commons.math.stat.regression.RegressionResults:getParameterEstimates:[]:double[]"
          ],
          "num": 2
        },
        {
          "qualified_names": [
            "org.apache.commons.math.stat.regression.RegressionResults:RegressionResults:[final double[] parameters, final double[][] varcov, final boolean isSymmetricCompressed, final long nobs, final int rank, final double sumy, final double sumysq, final double sse, final boolean containsConstant, final boolean copyData]:null",
            "org.apache.commons.math.stat.regression.RegressionResults:getParameterEstimates:[]:double[]"
          ],
          "num": 2
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "22",
            "101",
            "104",
            "173"
          ],
          "num": 4
        },
        {
          "qualified_names": [
            "22",
            "101",
            "104",
            "173"
          ],
          "num": 4
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/math/stat/regression/RegressionResults.java b/src/main/java/org/apache/commons/math/stat/regression/RegressionResults.java\nindex 536a99c..90041a3 100644\n--- a/src/main/java/org/apache/commons/math/stat/regression/RegressionResults.java\n+++ b/src/main/java/org/apache/commons/math/stat/regression/RegressionResults.java\n@@ -19,7 +19,7 @@\n import java.io.Serializable;\n import java.util.Arrays;\n import org.apache.commons.math.util.FastMath;\n-import org.apache.commons.math.util.MathUtils;\n+import org.apache.commons.math.util.MathArrays;\n \n /**\n  * Results of a Multiple Linear Regression model fit.\n@@ -98,10 +98,10 @@\n             final boolean containsConstant,\n             final boolean copyData) {\n         if (copyData) {\n-            this.parameters \u003d MathUtils.copyOf(parameters);\n+            this.parameters \u003d MathArrays.copyOf(parameters);\n             this.varCovData \u003d new double[varcov.length][];\n             for (int i \u003d 0; i \u003c varcov.length; i++) {\n-                this.varCovData[i] \u003d MathUtils.copyOf(varcov[i]);\n+                this.varCovData[i] \u003d MathArrays.copyOf(varcov[i]);\n             }\n         } else {\n             this.parameters \u003d parameters;\n@@ -170,7 +170,7 @@\n         if (this.parameters \u003d\u003d null) {\n             return null;\n         }\n-        return MathUtils.copyOf(parameters);\n+        return MathArrays.copyOf(parameters);\n     }\n \n     /**\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "ImportDeclaration [953,1000]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ImportDeclaration [953,999]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/math/util/MathUtils.java",
        "src/main/java/org/apache/commons/math/util/MathUtils.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.math.util.MathUtils:distance1:[int[] p1, int[] p2]:int",
            "org.apache.commons.math.util.MathUtils:distanceInf:[double[] p1, double[] p2]:double",
            "org.apache.commons.math.util.MathUtils:checkFinite:[final double x]:void",
            "org.apache.commons.math.util.MathUtils:linearCombination:[final double a1, final double b1, final double a2, final double b2]:double",
            "org.apache.commons.math.util.MathUtils:distanceInf:[int[] p1, int[] p2]:int",
            "org.apache.commons.math.util.MathUtils:sortInPlace:[double[] x, double[]... yList]:void",
            "org.apache.commons.math.util.MathUtils:isMonotone:[double[] val, OrderDirection dir, boolean strict]:boolean",
            "org.apache.commons.math.util.MathUtils:linearCombination:[final double[] a, final double[] b]:double",
            "org.apache.commons.math.util.MathUtils:distance:[int[] p1, int[] p2]:double",
            "org.apache.commons.math.util.MathUtils:sortInPlace:[double[] x, final OrderDirection dir, double[]... yList]:void",
            "org.apache.commons.math.util.MathUtils:checkOrder:[double[] val]:void",
            "org.apache.commons.math.util.MathUtils:linearCombination:[final double a1, final double b1, final double a2, final double b2, final double a3, final double b3, final double a4, final double b4]:double",
            "org.apache.commons.math.util.MathUtils:isMonotone:[Comparable[] val, OrderDirection dir, boolean strict]:boolean",
            "org.apache.commons.math.util.MathUtils:linearCombination:[final double a1, final double b1, final double a2, final double b2, final double a3, final double b3]:double",
            "org.apache.commons.math.util.MathUtils:copyOf:[int[] source]:int[]",
            "org.apache.commons.math.util.MathUtils:copyOf:[double[] source, int len]:double[]",
            "org.apache.commons.math.util.MathUtils:checkNotNull:[Object o, Localizable pattern, Object... args]:void",
            "org.apache.commons.math.util.MathUtils:distance:[double[] p1, double[] p2]:double",
            "org.apache.commons.math.util.MathUtils:checkOrder:[double[] val, OrderDirection dir, boolean strict]:void",
            "org.apache.commons.math.util.MathUtils:safeNorm:[double[] v]:double",
            "org.apache.commons.math.util.MathUtils:copyOf:[double[] source]:double[]",
            "org.apache.commons.math.util.MathUtils:copyOf:[int[] source, int len]:int[]",
            "org.apache.commons.math.util.MathUtils:distance1:[double[] p1, double[] p2]:double",
            "org.apache.commons.math.util.MathUtils:checkOrder:[double[] val, OrderDirection dir, boolean strict, boolean abort]:boolean"
          ],
          "num": 24
        },
        {
          "qualified_names": [
            "org.apache.commons.math.util.MathUtils:checkFinite:[final double[] val]:void",
            "org.apache.commons.math.util.MathUtils:addAndCheck:[int x, int y]:int"
          ],
          "num": 2
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "22",
            "24",
            "25",
            "26",
            "28",
            "31",
            "32",
            "89",
            "90",
            "91",
            "1592",
            "1593",
            "1594",
            "1595",
            "1596",
            "1597",
            "1598",
            "1599",
            "1600",
            "1601",
            "1602",
            "1603",
            "1604",
            "1605",
            "1606",
            "1607",
            "1608",
            "1609",
            "1610",
            "1611",
            "1612",
            "1613",
            "1614",
            "1615",
            "1616",
            "1617",
            "1618",
            "1619",
            "1620",
            "1621",
            "1622",
            "1623",
            "1624",
            "1625",
            "1626",
            "1627",
            "1628",
            "1629",
            "1630",
            "1631",
            "1632",
            "1633",
            "1634",
            "1635",
            "1636",
            "1637",
            "1638",
            "1639",
            "1640",
            "1641",
            "1642",
            "1643",
            "1644",
            "1645",
            "1646",
            "1647",
            "1648",
            "1649",
            "1650",
            "1651",
            "1652",
            "1653",
            "1654",
            "1655",
            "1656",
            "1657",
            "1658",
            "1659",
            "1660",
            "1661",
            "1662",
            "1663",
            "1664",
            "1665",
            "1666",
            "1667",
            "1668",
            "1669",
            "1670",
            "1671",
            "1672",
            "1673",
            "1674",
            "1675",
            "1676",
            "1677",
            "1678",
            "1679",
            "1680",
            "1681",
            "1682",
            "1683",
            "1684",
            "1685",
            "1686",
            "1687",
            "1688",
            "1689",
            "1690",
            "1691",
            "1692",
            "1693",
            "1694",
            "1695",
            "1696",
            "1697",
            "1698",
            "1699",
            "1700",
            "1701",
            "1702",
            "1703",
            "1704",
            "1705",
            "1706",
            "1707",
            "1708",
            "1709",
            "1710",
            "1711",
            "1712",
            "1713",
            "1714",
            "1715",
            "1716",
            "1717",
            "1718",
            "1719",
            "1720",
            "1721",
            "1722",
            "1723",
            "1724",
            "1725",
            "1726",
            "1727",
            "1728",
            "1729",
            "1730",
            "1731",
            "1732",
            "1733",
            "1734",
            "1735",
            "1736",
            "1737",
            "1738",
            "1739",
            "1740",
            "1741",
            "1742",
            "1743",
            "1744",
            "1745",
            "1746",
            "1747",
            "1748",
            "1749",
            "1750",
            "1751",
            "1752",
            "1753",
            "1754",
            "1755",
            "1756",
            "1757",
            "1758",
            "1759",
            "1760",
            "1761",
            "1762",
            "1763",
            "1764",
            "1765",
            "1766",
            "1767",
            "1768",
            "1769",
            "1770",
            "1771",
            "1772",
            "1773",
            "1774",
            "1775",
            "1776",
            "1777",
            "1778",
            "1779",
            "1780",
            "1781",
            "1782",
            "1783",
            "1784",
            "1785",
            "1786",
            "1787",
            "1788",
            "1789",
            "1790",
            "1791",
            "1792",
            "1793",
            "1794",
            "1795",
            "1796",
            "1797",
            "1798",
            "1799",
            "1800",
            "1801",
            "1802",
            "1803",
            "1804",
            "1805",
            "1806",
            "1807",
            "1808",
            "1809",
            "1810",
            "1811",
            "1812",
            "1813",
            "1814",
            "1815",
            "1816",
            "1817",
            "1818",
            "1819",
            "1820",
            "1821",
            "1822",
            "1823",
            "1824",
            "1825",
            "1826",
            "1827",
            "1828",
            "1829",
            "1830",
            "1831",
            "1832",
            "1833",
            "1834",
            "1835",
            "1836",
            "1837",
            "1838",
            "1839",
            "1840",
            "1841",
            "1842",
            "1843",
            "1844",
            "1845",
            "1846",
            "1847",
            "1848",
            "1849",
            "1850",
            "1851",
            "1852",
            "1853",
            "1854",
            "1855",
            "1856",
            "1857",
            "1858",
            "1859",
            "1860",
            "1861",
            "1862",
            "1863",
            "1864",
            "1865",
            "1866",
            "1867",
            "1868",
            "1869",
            "1870",
            "1871",
            "1872",
            "1873",
            "1874",
            "1875",
            "1876",
            "1877",
            "1907",
            "1908",
            "1909",
            "1910",
            "1911",
            "1912",
            "1913",
            "1914",
            "1915",
            "1916",
            "1917",
            "1918",
            "1919",
            "1920",
            "1921",
            "1922",
            "1923",
            "1924",
            "1925",
            "1926",
            "1927",
            "1928",
            "1929",
            "1930",
            "1931",
            "1932",
            "1933",
            "1934",
            "1935",
            "1936",
            "1937",
            "1938",
            "1939",
            "1940",
            "1941",
            "1942",
            "1943",
            "1944",
            "1945",
            "1946",
            "1947",
            "1948",
            "1949",
            "1950",
            "1951",
            "1952",
            "1953",
            "1954",
            "1955",
            "1956",
            "1957",
            "1958",
            "1959",
            "1960",
            "1961",
            "1962",
            "1963",
            "1964",
            "1965",
            "1966",
            "1967",
            "1968",
            "1969",
            "1970",
            "1971",
            "1972",
            "1973",
            "1974",
            "1975",
            "1976",
            "1977",
            "1978",
            "1979",
            "1980",
            "1981",
            "1982",
            "1983",
            "1984",
            "1985",
            "1986",
            "1987",
            "1988",
            "1989",
            "1990",
            "1991",
            "1992",
            "1993",
            "1994",
            "1995",
            "1996",
            "1997",
            "1998",
            "1999",
            "2000",
            "2001",
            "2002",
            "2003",
            "2004",
            "2005",
            "2006",
            "2007",
            "2008",
            "2009",
            "2010",
            "2011",
            "2012",
            "2013",
            "2014",
            "2015",
            "2016",
            "2017",
            "2018",
            "2019",
            "2020",
            "2021",
            "2022",
            "2023",
            "2024",
            "2025",
            "2026",
            "2027",
            "2028",
            "2029",
            "2030",
            "2031",
            "2032",
            "2033",
            "2034",
            "2035",
            "2036",
            "2037",
            "2038",
            "2039",
            "2040",
            "2041",
            "2042",
            "2043",
            "2044",
            "2045",
            "2046",
            "2047",
            "2048",
            "2049",
            "2050",
            "2051",
            "2052",
            "2053",
            "2054",
            "2055",
            "2056",
            "2057",
            "2058",
            "2059",
            "2060",
            "2061",
            "2062",
            "2063",
            "2064",
            "2065",
            "2066",
            "2067",
            "2068",
            "2069",
            "2070",
            "2071",
            "2072",
            "2073",
            "2074",
            "2075",
            "2076",
            "2077",
            "2078",
            "2079",
            "2080",
            "2081",
            "2082",
            "2083",
            "2084",
            "2085",
            "2086",
            "2087",
            "2088",
            "2089",
            "2090",
            "2091",
            "2092",
            "2093",
            "2094",
            "2095",
            "2096",
            "2097",
            "2098",
            "2099",
            "2100",
            "2101",
            "2102",
            "2103",
            "2104",
            "2105",
            "2106",
            "2107",
            "2108",
            "2109",
            "2110",
            "2111",
            "2112",
            "2113",
            "2114",
            "2115",
            "2116",
            "2117",
            "2118",
            "2119",
            "2120",
            "2121",
            "2122",
            "2123",
            "2124",
            "2125",
            "2126",
            "2127",
            "2128",
            "2129",
            "2130",
            "2131",
            "2132",
            "2133",
            "2134",
            "2135",
            "2136",
            "2137",
            "2138",
            "2139",
            "2140",
            "2141",
            "2142",
            "2143",
            "2144",
            "2145",
            "2146",
            "2147",
            "2148",
            "2149",
            "2150",
            "2151",
            "2152",
            "2153",
            "2154",
            "2155",
            "2156",
            "2157",
            "2158",
            "2159",
            "2160",
            "2161",
            "2162",
            "2163",
            "2164",
            "2165",
            "2166",
            "2167",
            "2195",
            "2196",
            "2197",
            "2198",
            "2199",
            "2200",
            "2201",
            "2202",
            "2203",
            "2204",
            "2205",
            "2206",
            "2207",
            "2208",
            "2209",
            "2210",
            "2211",
            "2212",
            "2213",
            "2214",
            "2215",
            "2216",
            "2217",
            "2218",
            "2219",
            "2220",
            "2221",
            "2222",
            "2223",
            "2224",
            "2225",
            "2226",
            "2227",
            "2228",
            "2229",
            "2230",
            "2231",
            "2232",
            "2233",
            "2234",
            "2235",
            "2236",
            "2237",
            "2238",
            "2239",
            "2240",
            "2241",
            "2242",
            "2243",
            "2244",
            "2245",
            "2246",
            "2247",
            "2248",
            "2249",
            "2250",
            "2251",
            "2252",
            "2253",
            "2254",
            "2255",
            "2256",
            "2257",
            "2258",
            "2259",
            "2260",
            "2261",
            "2262",
            "2263",
            "2264",
            "2265",
            "2266",
            "2267",
            "2268",
            "2269",
            "2270",
            "2271",
            "2272",
            "2273",
            "2274",
            "2275",
            "2276",
            "2277",
            "2278",
            "2279",
            "2280",
            "2281",
            "2282",
            "2283",
            "2284",
            "2285",
            "2286",
            "2287",
            "2288",
            "2289",
            "2290",
            "2291",
            "2292",
            "2293",
            "2294",
            "2295",
            "2296",
            "2297",
            "2298",
            "2299",
            "2300",
            "2301",
            "2302",
            "2303",
            "2304",
            "2305",
            "2306",
            "2307",
            "2308",
            "2309",
            "2310",
            "2311",
            "2312",
            "2313",
            "2314",
            "2315",
            "2316",
            "2317",
            "2318",
            "2319",
            "2320",
            "2321",
            "2322",
            "2323",
            "2324",
            "2325",
            "2326",
            "2327",
            "2328",
            "2329",
            "2330",
            "2331",
            "2332",
            "2333",
            "2334",
            "2335",
            "2336",
            "2337",
            "2338",
            "2339",
            "2340",
            "2341",
            "2342",
            "2343",
            "2344",
            "2345",
            "2346",
            "2347",
            "2348",
            "2349",
            "2350",
            "2351",
            "2352",
            "2353",
            "2354",
            "2355",
            "2356",
            "2357",
            "2358",
            "2359",
            "2360",
            "2361",
            "2362",
            "2363",
            "2364",
            "2365",
            "2366",
            "2367",
            "2368",
            "2369",
            "2370",
            "2371",
            "2372",
            "2373",
            "2374",
            "2375",
            "2376",
            "2377",
            "2378",
            "2379",
            "2380",
            "2381",
            "2382",
            "2383",
            "2384",
            "2385",
            "2386",
            "2387",
            "2388",
            "2389",
            "2390",
            "2391",
            "2392",
            "2393",
            "2394",
            "2395",
            "2396",
            "2397",
            "2398",
            "2399",
            "2400",
            "2401",
            "2402",
            "2403",
            "2404",
            "2405",
            "2406",
            "2407",
            "2408",
            "2409",
            "2410",
            "2411",
            "2412",
            "2413",
            "2414",
            "2415",
            "2416",
            "2417",
            "2418",
            "2419",
            "2420",
            "2421",
            "2422",
            "2423",
            "2424",
            "2425",
            "2426",
            "2427",
            "2428",
            "2429",
            "2430",
            "2431",
            "2432",
            "2433",
            "2434",
            "2435",
            "2436",
            "2437",
            "2438",
            "2439",
            "2440",
            "2441",
            "2442",
            "2443",
            "2444",
            "2445",
            "2446",
            "2447",
            "2448",
            "2449",
            "2450",
            "2451",
            "2452",
            "2453",
            "2454",
            "2455",
            "2456",
            "2457",
            "2458",
            "2459",
            "2460",
            "2461",
            "2462",
            "2463",
            "2464",
            "2465",
            "2466",
            "2467",
            "2468",
            "2469",
            "2470",
            "2471",
            "2472",
            "2473",
            "2474",
            "2475",
            "2476",
            "2477",
            "2478",
            "2479",
            "2480",
            "2481",
            "2482",
            "2483",
            "2484",
            "2485",
            "2486",
            "2487",
            "2488",
            "2489",
            "2490",
            "2491",
            "2492",
            "2493",
            "2494",
            "2495",
            "2496",
            "2497",
            "2498",
            "2499",
            "2500",
            "2501",
            "2502",
            "2503",
            "2504",
            "2505",
            "2506",
            "2507",
            "2508",
            "2509",
            "2510",
            "2511",
            "2512",
            "2513",
            "2514",
            "2515",
            "2516",
            "2517",
            "2518",
            "2519",
            "2520",
            "2521",
            "2522",
            "2523",
            "2524",
            "2525",
            "2526",
            "2527",
            "2528",
            "2529",
            "2530",
            "2531",
            "2532",
            "2533",
            "2534",
            "2535",
            "2536",
            "2537",
            "2538",
            "2539",
            "2540",
            "2541",
            "2542",
            "2543",
            "2544",
            "2545",
            "2546",
            "2547",
            "2548",
            "2549",
            "2550",
            "2551",
            "2552",
            "2553",
            "2554",
            "2555",
            "2556",
            "2557",
            "2558",
            "2559",
            "2560",
            "2561",
            "2562",
            "2563",
            "2564",
            "2565"
          ],
          "num": 928
        },
        {
          "qualified_names": [
            "21",
            "95",
            "1601",
            "2202",
            "2751"
          ],
          "num": 5
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/math/util/MathUtils.java b/src/main/java/org/apache/commons/math/util/MathUtils.java\nindex 76e5f75..863df4c 100644\n--- a/src/main/java/org/apache/commons/math/util/MathUtils.java\n+++ b/src/main/java/org/apache/commons/math/util/MathUtils.java\n@@ -19,17 +19,10 @@\n \n import java.math.BigDecimal;\n import java.math.BigInteger;\n-import java.util.ArrayList;\n import java.util.Arrays;\n-import java.util.Collections;\n-import java.util.Comparator;\n-import java.util.List;\n \n-import org.apache.commons.math.exception.DimensionMismatchException;\n import org.apache.commons.math.exception.MathArithmeticException;\n import org.apache.commons.math.exception.MathIllegalArgumentException;\n-import org.apache.commons.math.exception.MathInternalError;\n-import org.apache.commons.math.exception.NonMonotonicSequenceException;\n import org.apache.commons.math.exception.NotFiniteNumberException;\n import org.apache.commons.math.exception.NotPositiveException;\n import org.apache.commons.math.exception.NullArgumentException;\n@@ -86,9 +79,6 @@\n            1307674368000l,     20922789888000l,     355687428096000l,\n         6402373705728000l, 121645100408832000l, 2432902008176640000l };\n \n-    /** Factor used for splitting double numbers: n \u003d 2^27 + 1. */\n-    private static final int SPLIT_FACTOR \u003d 0x8000001;\n-\n     /**\n      * Private Constructor\n      */\n@@ -1589,292 +1579,6 @@\n     }\n \n     /**\n-     * Calculates the L\u003csub\u003e1\u003c/sub\u003e (sum of abs) distance between two points.\n-     *\n-     * @param p1 the first point\n-     * @param p2 the second point\n-     * @return the L\u003csub\u003e1\u003c/sub\u003e distance between the two points\n-     */\n-    public static double distance1(double[] p1, double[] p2) {\n-        double sum \u003d 0;\n-        for (int i \u003d 0; i \u003c p1.length; i++) {\n-            sum +\u003d FastMath.abs(p1[i] - p2[i]);\n-        }\n-        return sum;\n-    }\n-\n-    /**\n-     * Calculates the L\u003csub\u003e1\u003c/sub\u003e (sum of abs) distance between two points.\n-     *\n-     * @param p1 the first point\n-     * @param p2 the second point\n-     * @return the L\u003csub\u003e1\u003c/sub\u003e distance between the two points\n-     */\n-    public static int distance1(int[] p1, int[] p2) {\n-      int sum \u003d 0;\n-      for (int i \u003d 0; i \u003c p1.length; i++) {\n-          sum +\u003d FastMath.abs(p1[i] - p2[i]);\n-      }\n-      return sum;\n-    }\n-\n-    /**\n-     * Calculates the L\u003csub\u003e2\u003c/sub\u003e (Euclidean) distance between two points.\n-     *\n-     * @param p1 the first point\n-     * @param p2 the second point\n-     * @return the L\u003csub\u003e2\u003c/sub\u003e distance between the two points\n-     */\n-    public static double distance(double[] p1, double[] p2) {\n-        double sum \u003d 0;\n-        for (int i \u003d 0; i \u003c p1.length; i++) {\n-            final double dp \u003d p1[i] - p2[i];\n-            sum +\u003d dp * dp;\n-        }\n-        return FastMath.sqrt(sum);\n-    }\n-\n-    /**\n-     * Calculates the L\u003csub\u003e2\u003c/sub\u003e (Euclidean) distance between two points.\n-     *\n-     * @param p1 the first point\n-     * @param p2 the second point\n-     * @return the L\u003csub\u003e2\u003c/sub\u003e distance between the two points\n-     */\n-    public static double distance(int[] p1, int[] p2) {\n-      double sum \u003d 0;\n-      for (int i \u003d 0; i \u003c p1.length; i++) {\n-          final double dp \u003d p1[i] - p2[i];\n-          sum +\u003d dp * dp;\n-      }\n-      return FastMath.sqrt(sum);\n-    }\n-\n-    /**\n-     * Calculates the L\u003csub\u003e\u0026infin;\u003c/sub\u003e (max of abs) distance between two points.\n-     *\n-     * @param p1 the first point\n-     * @param p2 the second point\n-     * @return the L\u003csub\u003e\u0026infin;\u003c/sub\u003e distance between the two points\n-     */\n-    public static double distanceInf(double[] p1, double[] p2) {\n-        double max \u003d 0;\n-        for (int i \u003d 0; i \u003c p1.length; i++) {\n-            max \u003d FastMath.max(max, FastMath.abs(p1[i] - p2[i]));\n-        }\n-        return max;\n-    }\n-\n-    /**\n-     * Calculates the L\u003csub\u003e\u0026infin;\u003c/sub\u003e (max of abs) distance between two points.\n-     *\n-     * @param p1 the first point\n-     * @param p2 the second point\n-     * @return the L\u003csub\u003e\u0026infin;\u003c/sub\u003e distance between the two points\n-     */\n-    public static int distanceInf(int[] p1, int[] p2) {\n-        int max \u003d 0;\n-        for (int i \u003d 0; i \u003c p1.length; i++) {\n-            max \u003d FastMath.max(max, FastMath.abs(p1[i] - p2[i]));\n-        }\n-        return max;\n-    }\n-\n-    /**\n-     * Specification of ordering direction.\n-     */\n-    public static enum OrderDirection {\n-        /** Constant for increasing direction. */\n-        INCREASING,\n-        /** Constant for decreasing direction. */\n-        DECREASING\n-    }\n-\n-    /**\n-     * Check that an array is monotone increasing or decreasing.\n-     *\n-     * @param val Values.\n-     * @param dir Ordering direction.\n-     * @param strict Whether the order should be strict.\n-     * @return {@code true} if sorted, {@code false} otherwise.\n-     */\n-    public static boolean isMonotone(Comparable[] val,\n-                                     OrderDirection dir,\n-                                     boolean strict){\n-        Comparable previous \u003d val[0];\n-        final int max \u003d val.length;\n-        int comp;\n-        for (int i \u003d 1; i \u003c max; i++) {\n-            switch (dir) {\n-            case INCREASING:\n-                comp \u003d -val[i].compareTo(previous);\n-                if (strict) {\n-                    if (0 \u003c\u003d comp) {\n-                        return false;\n-                    }\n-                } else {\n-                    if ( comp \u003e 0) {\n-                        return false;\n-                    }\n-                }\n-                break;\n-            case DECREASING:\n-                comp \u003d val[i].compareTo(previous);\n-                if (strict) {\n-                    if (comp \u003e\u003d 0) {\n-                        return false;\n-                    }\n-                } else {\n-                    if (comp \u003e 0) {\n-                       return false;\n-                    }\n-                }\n-                break;\n-            default:\n-                // Should never happen.\n-                throw new MathInternalError();\n-            }\n-\n-            previous \u003d val[i];\n-        }\n-        return true;\n-    }\n-\n-    /**\n-     * Check that an array is monotone increasing or decreasing.\n-     *\n-     * @param val Values.\n-     * @param dir Ordering direction.\n-     * @param strict Whether the order should be strict.\n-     * @return {@code true} if sorted, {@code false} otherwise.\n-     */\n-    public static boolean isMonotone(double[] val,\n-                                     OrderDirection dir,\n-                                     boolean strict){\n-        double previous \u003d val[0];\n-        final int max \u003d val.length;\n-        for (int i \u003d 1; i \u003c max; i++) {\n-            switch (dir) {\n-            case INCREASING:\n-                if (strict) {\n-                    if (val[i] \u003c\u003d previous) {\n-                        return false;\n-                    }\n-                } else {\n-                    if (val[i] \u003c previous) {\n-                        return false;\n-                    }\n-                }\n-                break;\n-            case DECREASING:\n-                if (strict) {\n-                    if (val[i] \u003e\u003d previous) {\n-                        return false;\n-                    }\n-                } else {\n-                    if (val[i] \u003e previous) {\n-                        return false;\n-                    }\n-                }\n-                break;\n-            default:\n-                // Should never happen.\n-                throw new MathInternalError();\n-            }\n-            previous \u003d val[i];\n-        }\n-\n-        return true;\n-    }\n-\n-    /**\n-     * Check that the given array is sorted.\n-     *\n-     * @param val Values.\n-     * @param dir Ordering direction.\n-     * @param strict Whether the order should be strict.\n-     * @param abort Whether to throw an exception if the check fails.\n-     * @return {@code true} if the array is sorted.\n-     * @throws NonMonotonicSequenceException if the array is not sorted\n-     * and {@code abort} is {@code true}.\n-     */\n-    public static boolean checkOrder(double[] val, OrderDirection dir,\n-                                     boolean strict, boolean abort) {\n-        double previous \u003d val[0];\n-        final int max \u003d val.length;\n-\n-        int index;\n-        ITEM:\n-        for (index \u003d 1; index \u003c max; index++) {\n-            switch (dir) {\n-            case INCREASING:\n-                if (strict) {\n-                    if (val[index] \u003c\u003d previous) {\n-                        break ITEM;\n-                    }\n-                } else {\n-                    if (val[index] \u003c previous) {\n-                        break ITEM;\n-                    }\n-                }\n-                break;\n-            case DECREASING:\n-                if (strict) {\n-                    if (val[index] \u003e\u003d previous) {\n-                        break ITEM;\n-                    }\n-                } else {\n-                    if (val[index] \u003e previous) {\n-                        break ITEM;\n-                    }\n-                }\n-                break;\n-            default:\n-                // Should never happen.\n-                throw new MathInternalError();\n-            }\n-            previous \u003d val[index];\n-        }\n-\n-        if (index \u003d\u003d max) {\n-            // Loop completed.\n-            return true;\n-        }\n-\n-        // Loop early exit means wrong ordering.\n-        if (abort) {\n-            throw new NonMonotonicSequenceException(val[index], previous, index, dir, strict);\n-        } else {\n-            return false;\n-        }\n-    }\n-\n-    /**\n-     * Check that the given array is sorted.\n-     *\n-     * @param val Values.\n-     * @param dir Ordering direction.\n-     * @param strict Whether the order should be strict.\n-     * @throws NonMonotonicSequenceException if the array is not sorted.\n-     * @since 2.2\n-     */\n-    public static void checkOrder(double[] val, OrderDirection dir,\n-                                  boolean strict) {\n-        checkOrder(val, dir, strict, true);\n-    }\n-\n-    /**\n-     * Check that the given array is sorted in strictly increasing order.\n-     *\n-     * @param val Values.\n-     * @throws NonMonotonicSequenceException if the array is not sorted.\n-     * @since 2.2\n-     */\n-    public static void checkOrder(double[] val) {\n-        checkOrder(val, OrderDirection.INCREASING, true);\n-    }\n-\n-    /**\n      * Check that the argument is a real number.\n      *\n      * @param x Argument.\n@@ -1904,267 +1608,6 @@\n     }\n \n     /**\n-     * Returns the Cartesian norm (2-norm), handling both overflow and underflow.\n-     * Translation of the minpack enorm subroutine.\n-     *\n-     * The redistribution policy for MINPACK is available \u003ca\n-     * href\u003d\"http://www.netlib.org/minpack/disclaimer\"\u003ehere\u003c/a\u003e, for convenience, it\n-     * is reproduced below.\u003c/p\u003e\n-     *\n-     * \u003ctable border\u003d\"0\" width\u003d\"80%\" cellpadding\u003d\"10\" align\u003d\"center\" bgcolor\u003d\"#E0E0E0\"\u003e\n-     * \u003ctr\u003e\u003ctd\u003e\n-     *    Minpack Copyright Notice (1999) University of Chicago.\n-     *    All rights reserved\n-     * \u003c/td\u003e\u003c/tr\u003e\n-     * \u003ctr\u003e\u003ctd\u003e\n-     * Redistribution and use in source and binary forms, with or without\n-     * modification, are permitted provided that the following conditions\n-     * are met:\n-     * \u003col\u003e\n-     *  \u003cli\u003eRedistributions of source code must retain the above copyright\n-     *      notice, this list of conditions and the following disclaimer.\u003c/li\u003e\n-     * \u003cli\u003eRedistributions in binary form must reproduce the above\n-     *     copyright notice, this list of conditions and the following\n-     *     disclaimer in the documentation and/or other materials provided\n-     *     with the distribution.\u003c/li\u003e\n-     * \u003cli\u003eThe end-user documentation included with the redistribution, if any,\n-     *     must include the following acknowledgment:\n-     *     {@code This product includes software developed by the University of\n-     *           Chicago, as Operator of Argonne National Laboratory.}\n-     *     Alternately, this acknowledgment may appear in the software itself,\n-     *     if and wherever such third-party acknowledgments normally appear.\u003c/li\u003e\n-     * \u003cli\u003e\u003cstrong\u003eWARRANTY DISCLAIMER. THE SOFTWARE IS SUPPLIED \"AS IS\"\n-     *     WITHOUT WARRANTY OF ANY KIND. THE COPYRIGHT HOLDER, THE\n-     *     UNITED STATES, THE UNITED STATES DEPARTMENT OF ENERGY, AND\n-     *     THEIR EMPLOYEES: (1) DISCLAIM ANY WARRANTIES, EXPRESS OR\n-     *     IMPLIED, INCLUDING BUT NOT LIMITED TO ANY IMPLIED WARRANTIES\n-     *     OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE\n-     *     OR NON-INFRINGEMENT, (2) DO NOT ASSUME ANY LEGAL LIABILITY\n-     *     OR RESPONSIBILITY FOR THE ACCURACY, COMPLETENESS, OR\n-     *     USEFULNESS OF THE SOFTWARE, (3) DO NOT REPRESENT THAT USE OF\n-     *     THE SOFTWARE WOULD NOT INFRINGE PRIVATELY OWNED RIGHTS, (4)\n-     *     DO NOT WARRANT THAT THE SOFTWARE WILL FUNCTION\n-     *     UNINTERRUPTED, THAT IT IS ERROR-FREE OR THAT ANY ERRORS WILL\n-     *     BE CORRECTED.\u003c/strong\u003e\u003c/li\u003e\n-     * \u003cli\u003e\u003cstrong\u003eLIMITATION OF LIABILITY. IN NO EVENT WILL THE COPYRIGHT\n-     *     HOLDER, THE UNITED STATES, THE UNITED STATES DEPARTMENT OF\n-     *     ENERGY, OR THEIR EMPLOYEES: BE LIABLE FOR ANY INDIRECT,\n-     *     INCIDENTAL, CONSEQUENTIAL, SPECIAL OR PUNITIVE DAMAGES OF\n-     *     ANY KIND OR NATURE, INCLUDING BUT NOT LIMITED TO LOSS OF\n-     *     PROFITS OR LOSS OF DATA, FOR ANY REASON WHATSOEVER, WHETHER\n-     *     SUCH LIABILITY IS ASSERTED ON THE BASIS OF CONTRACT, TORT\n-     *     (INCLUDING NEGLIGENCE OR STRICT LIABILITY), OR OTHERWISE,\n-     *     EVEN IF ANY OF SAID PARTIES HAS BEEN WARNED OF THE\n-     *     POSSIBILITY OF SUCH LOSS OR DAMAGES.\u003c/strong\u003e\u003c/li\u003e\n-     * \u003col\u003e\u003c/td\u003e\u003c/tr\u003e\n-     * \u003c/table\u003e\n-     *\n-     * @param v vector of doubles\n-     * @return the 2-norm of the vector\n-     * @since 2.2\n-     */\n-    public static double safeNorm(double[] v) {\n-        double rdwarf \u003d 3.834e-20;\n-        double rgiant \u003d 1.304e+19;\n-        double s1 \u003d 0;\n-        double s2 \u003d 0;\n-        double s3 \u003d 0;\n-        double x1max \u003d 0;\n-        double x3max \u003d 0;\n-        double floatn \u003d (double) v.length;\n-        double agiant \u003d rgiant / floatn;\n-        for (int i \u003d 0; i \u003c v.length; i++) {\n-            double xabs \u003d Math.abs(v[i]);\n-            if (xabs \u003c rdwarf || xabs \u003e agiant) {\n-                if (xabs \u003e rdwarf) {\n-                    if (xabs \u003e x1max) {\n-                        double r \u003d x1max / xabs;\n-                        s1\u003d 1 + s1 * r * r;\n-                        x1max \u003d xabs;\n-                    } else {\n-                        double r \u003d xabs / x1max;\n-                        s1 +\u003d r * r;\n-                    }\n-                } else {\n-                    if (xabs \u003e x3max) {\n-                        double r \u003d x3max / xabs;\n-                        s3\u003d 1 + s3 * r * r;\n-                        x3max \u003d xabs;\n-                    } else {\n-                        if (xabs !\u003d 0) {\n-                            double r \u003d xabs / x3max;\n-                            s3 +\u003d r * r;\n-                        }\n-                    }\n-                }\n-            } else {\n-                s2 +\u003d xabs * xabs;\n-            }\n-        }\n-        double norm;\n-        if (s1 !\u003d 0) {\n-            norm \u003d x1max * Math.sqrt(s1 + (s2 / x1max) / x1max);\n-        } else {\n-            if (s2 \u003d\u003d 0) {\n-                norm \u003d x3max * Math.sqrt(s3);\n-            } else {\n-                if (s2 \u003e\u003d x3max) {\n-                    norm \u003d Math.sqrt(s2 * (1 + (x3max / s2) * (x3max * s3)));\n-                } else {\n-                    norm \u003d Math.sqrt(x3max * ((s2 / x3max) + (x3max * s3)));\n-                }\n-            }\n-        }\n-        return norm;\n-    }\n-\n-    /**\n-     * Sort an array in ascending order in place and perform the same reordering\n-     * of entries on other arrays. For example, if\n-     * {@code x \u003d [3, 1, 2], y \u003d [1, 2, 3]} and {@code z \u003d [0, 5, 7]}, then \n-     * {@code sortInPlace(x, y, z)} will update {@code x} to {@code [1, 2, 3]},\n-     * {@code y} to {@code [2, 3, 1]} and {@code z} to {@code [5, 7, 0]}.\n-     *\n-     * @param x Array to be sorted and used as a pattern for permutation\n-     * of the other arrays.\n-     * @param yList Set of arrays whose permutations of entries will follow\n-     * those performed on {@code x}.\n-     * @throws DimensionMismatchException if any {@code y} is not the same\n-     * size as {@code x}.\n-     * @throws NullArgumentException if {@code x} or any {@code y} is null.\n-     * @since 3.0\n-     */\n-    public static void sortInPlace(double[] x,\n-                                   double[] ... yList) {\n-        sortInPlace(x, OrderDirection.INCREASING, yList);\n-    }\n-\n-    /**\n-     * Sort an array in place and perform the same reordering of entries on\n-     * other arrays.  This method works the same as\n-     * {@link #sortInPlace(double[], double[]...)}, but allows the order of the\n-     * sort to be provided in the {@code dir} parameter.\n-     * \n-     * @param x Array to be sorted and used as a pattern for permutation\n-     * of the other arrays.\n-     * @param dir Order direction.\n-     * @param yList Set of arrays whose permutations of entries will follow\n-     * those performed on {@code x}.\n-     * @throws DimensionMismatchException if any {@code y} is not the same\n-     * size as {@code x}.\n-     * @throws NullArgumentException if {@code x} or any {@code y} is null\n-     * @since 3.0\n-     */\n-    public static void sortInPlace(double[] x,\n-                                   final OrderDirection dir,\n-                                   double[] ... yList) {\n-        if (x \u003d\u003d null) {\n-            throw new NullArgumentException();\n-        }\n-\n-        final int len \u003d x.length;\n-        final List\u003cPair\u003cDouble, double[]\u003e\u003e list\n-            \u003d new ArrayList\u003cPair\u003cDouble, double[]\u003e\u003e(len);\n-\n-        final int yListLen \u003d yList.length;\n-        for (int i \u003d 0; i \u003c len; i++) {\n-            final double[] yValues \u003d new double[yListLen];\n-            for (int j \u003d 0; j \u003c yListLen; j++) {\n-                double[] y \u003d yList[j];\n-                if (y \u003d\u003d null) {\n-                    throw new NullArgumentException();\n-                }\n-                if (y.length !\u003d len) {\n-                    throw new DimensionMismatchException(y.length, len);\n-                }\n-                yValues[j] \u003d y[i];\n-            }\n-            list.add(new Pair\u003cDouble, double[]\u003e(x[i], yValues));\n-        }\n-\n-        final Comparator\u003cPair\u003cDouble, double[]\u003e\u003e comp\n-            \u003d new Comparator\u003cPair\u003cDouble, double[]\u003e\u003e() {\n-            public int compare(Pair\u003cDouble, double[]\u003e o1,\n-                               Pair\u003cDouble, double[]\u003e o2) {\n-                int val;\n-                switch (dir) {\n-                case INCREASING:\n-                    val \u003d o1.getKey().compareTo(o2.getKey());\n-                break;\n-                case DECREASING:\n-                    val \u003d o2.getKey().compareTo(o1.getKey());\n-                break;\n-                default:\n-                    // Should never happen.\n-                    throw new MathInternalError();\n-                }\n-                return val;\n-            }\n-        };\n-\n-        Collections.sort(list, comp);\n-\n-        for (int i \u003d 0; i \u003c len; i++) {\n-            final Pair\u003cDouble, double[]\u003e e \u003d list.get(i);\n-            x[i] \u003d e.getKey();\n-            final double[] yValues \u003d e.getValue();\n-            for (int j \u003d 0; j \u003c yListLen; j++) {\n-                yList[j][i] \u003d yValues[j];\n-            }\n-        }\n-    }\n-\n-    /**\n-     * Creates a copy of the {@code source} array.\n-     *\n-     * @param source Array to be copied.\n-     * @return the copied array.\n-     */\n-     public static int[] copyOf(int[] source) {\n-         return copyOf(source, source.length);\n-     }\n-\n-    /**\n-     * Creates a copy of the {@code source} array.\n-     *\n-     * @param source Array to be copied.\n-     * @return the copied array.\n-     */\n-     public static double[] copyOf(double[] source) {\n-         return copyOf(source, source.length);\n-     }\n-\n-    /**\n-     * Creates a copy of the {@code source} array.\n-     *\n-     * @param source Array to be copied.\n-     * @param len Number of entries to copy. If smaller then the source\n-     * length, the copy will be truncated, if larger it will padded with\n-     * zeroes.\n-     * @return the copied array.\n-     */\n-    public static int[] copyOf(int[] source, int len) {\n-         final int[] output \u003d new int[len];\n-         System.arraycopy(source, 0, output, 0, FastMath.min(len, source.length));\n-         return output;\n-     }\n-\n-    /**\n-     * Creates a copy of the {@code source} array.\n-     *\n-     * @param source Array to be copied.\n-     * @param len Number of entries to copy. If smaller then the source\n-     * length, the copy will be truncated, if larger it will padded with\n-     * zeroes.\n-     * @return the copied array.\n-     */\n-    public static double[] copyOf(double[] source, int len) {\n-         final double[] output \u003d new double[len];\n-         System.arraycopy(source, 0, output, 0, FastMath.min(len, source.length));\n-         return output;\n-     }\n-\n-    /**\n      * Checks that an object is not null.\n      *\n      * @param o Object to be checked.\n@@ -2192,375 +1635,4 @@\n             throw new NullArgumentException();\n         }\n     }\n-\n-    /**\n-     * Compute a linear combination accurately.\n-     * \u003cp\u003e\n-     * This method computes a\u003csub\u003e1\u003c/sub\u003e\u0026times;b\u003csub\u003e1\u003c/sub\u003e +\n-     * a\u003csub\u003e2\u003c/sub\u003e\u0026times;b\u003csub\u003e2\u003c/sub\u003e to high accuracy. It does\n-     * so by using specific multiplication and addition algorithms to\n-     * preserve accuracy and reduce cancellation effects. It is based\n-     * on the 2005 paper \u003ca\n-     * href\u003d\"http://citeseerx.ist.psu.edu/viewdoc/summary?doi\u003d10.1.1.2.1547\"\u003e\n-     * Accurate Sum and Dot Product\u003c/a\u003e by Takeshi Ogita,\n-     * Siegfried M. Rump, and Shin\u0027ichi Oishi published in SIAM J. Sci. Comput.\n-     * \u003c/p\u003e\n-     * @param a1 first factor of the first term\n-     * @param b1 second factor of the first term\n-     * @param a2 first factor of the second term\n-     * @param b2 second factor of the second term\n-     * @return a\u003csub\u003e1\u003c/sub\u003e\u0026times;b\u003csub\u003e1\u003c/sub\u003e +\n-     * a\u003csub\u003e2\u003c/sub\u003e\u0026times;b\u003csub\u003e2\u003c/sub\u003e\n-     * @see #linearCombination(double, double, double, double, double, double)\n-     * @see #linearCombination(double, double, double, double, double, double, double, double)\n-     */\n-    public static double linearCombination(final double a1, final double b1,\n-                                           final double a2, final double b2) {\n-\n-        // the code below is split in many additions/subtractions that may\n-        // appear redundant. However, they should NOT be simplified, as they\n-        // use IEEE754 floating point arithmetic rounding properties.\n-        // as an example, the expression \"ca1 - (ca1 - a1)\" is NOT the same as \"a1\"\n-        // The variable naming conventions are that xyzHigh contains the most significant\n-        // bits of xyz and xyzLow contains its least significant bits. So theoretically\n-        // xyz is the sum xyzHigh + xyzLow, but in many cases below, this sum cannot\n-        // be represented in only one double precision number so we preserve two numbers\n-        // to hold it as long as we can, combining the high and low order bits together\n-        // only at the end, after cancellation may have occurred on high order bits\n-\n-        // split a1 and b1 as two 26 bits numbers\n-        final double ca1        \u003d SPLIT_FACTOR * a1;\n-        final double a1High     \u003d ca1 - (ca1 - a1);\n-        final double a1Low      \u003d a1 - a1High;\n-        final double cb1        \u003d SPLIT_FACTOR * b1;\n-        final double b1High     \u003d cb1 - (cb1 - b1);\n-        final double b1Low      \u003d b1 - b1High;\n-\n-        // accurate multiplication a1 * b1\n-        final double prod1High  \u003d a1 * b1;\n-        final double prod1Low   \u003d a1Low * b1Low - (((prod1High - a1High * b1High) - a1Low * b1High) - a1High * b1Low);\n-\n-        // split a2 and b2 as two 26 bits numbers\n-        final double ca2        \u003d SPLIT_FACTOR * a2;\n-        final double a2High     \u003d ca2 - (ca2 - a2);\n-        final double a2Low      \u003d a2 - a2High;\n-        final double cb2        \u003d SPLIT_FACTOR * b2;\n-        final double b2High     \u003d cb2 - (cb2 - b2);\n-        final double b2Low      \u003d b2 - b2High;\n-\n-        // accurate multiplication a2 * b2\n-        final double prod2High  \u003d a2 * b2;\n-        final double prod2Low   \u003d a2Low * b2Low - (((prod2High - a2High * b2High) - a2Low * b2High) - a2High * b2Low);\n-\n-        // accurate addition a1 * b1 + a2 * b2\n-        final double s12High    \u003d prod1High + prod2High;\n-        final double s12Prime   \u003d s12High - prod2High;\n-        final double s12Low     \u003d (prod2High - (s12High - s12Prime)) + (prod1High - s12Prime);\n-\n-        // final rounding, s12 may have suffered many cancellations, we try\n-        // to recover some bits from the extra words we have saved up to now\n-        double result \u003d s12High + (prod1Low + prod2Low + s12Low);\n-\n-        if (Double.isNaN(result)) {\n-            // either we have split infinite numbers or some coefficients were NaNs,\n-            // just rely on the naive implementation and let IEEE754 handle this\n-            result \u003d a1 * b1 + a2 * b2;\n-        }\n-\n-        return result;\n-\n-    }\n-\n-    /**\n-     * Compute a linear combination accurately.\n-     * \u003cp\u003e\n-     * This method computes a\u003csub\u003e1\u003c/sub\u003e\u0026times;b\u003csub\u003e1\u003c/sub\u003e +\n-     * a\u003csub\u003e2\u003c/sub\u003e\u0026times;b\u003csub\u003e2\u003c/sub\u003e + a\u003csub\u003e3\u003c/sub\u003e\u0026times;b\u003csub\u003e3\u003c/sub\u003e\n-     * to high accuracy. It does so by using specific multiplication and\n-     * addition algorithms to preserve accuracy and reduce cancellation effects.\n-     * It is based on the 2005 paper \u003ca\n-     * href\u003d\"http://citeseerx.ist.psu.edu/viewdoc/summary?doi\u003d10.1.1.2.1547\"\u003e\n-     * Accurate Sum and Dot Product\u003c/a\u003e by Takeshi Ogita,\n-     * Siegfried M. Rump, and Shin\u0027ichi Oishi published in SIAM J. Sci. Comput.\n-     * \u003c/p\u003e\n-     * @param a1 first factor of the first term\n-     * @param b1 second factor of the first term\n-     * @param a2 first factor of the second term\n-     * @param b2 second factor of the second term\n-     * @param a3 first factor of the third term\n-     * @param b3 second factor of the third term\n-     * @return a\u003csub\u003e1\u003c/sub\u003e\u0026times;b\u003csub\u003e1\u003c/sub\u003e +\n-     * a\u003csub\u003e2\u003c/sub\u003e\u0026times;b\u003csub\u003e2\u003c/sub\u003e + a\u003csub\u003e3\u003c/sub\u003e\u0026times;b\u003csub\u003e3\u003c/sub\u003e\n-     * @see #linearCombination(double, double, double, double)\n-     * @see #linearCombination(double, double, double, double, double, double, double, double)\n-     */\n-    public static double linearCombination(final double a1, final double b1,\n-                                           final double a2, final double b2,\n-                                           final double a3, final double b3) {\n-\n-        // the code below is split in many additions/subtractions that may\n-        // appear redundant. However, they should NOT be simplified, as they\n-        // do use IEEE754 floating point arithmetic rounding properties.\n-        // as an example, the expression \"ca1 - (ca1 - a1)\" is NOT the same as \"a1\"\n-        // The variables naming conventions are that xyzHigh contains the most significant\n-        // bits of xyz and xyzLow contains its least significant bits. So theoretically\n-        // xyz is the sum xyzHigh + xyzLow, but in many cases below, this sum cannot\n-        // be represented in only one double precision number so we preserve two numbers\n-        // to hold it as long as we can, combining the high and low order bits together\n-        // only at the end, after cancellation may have occurred on high order bits\n-\n-        // split a1 and b1 as two 26 bits numbers\n-        final double ca1        \u003d SPLIT_FACTOR * a1;\n-        final double a1High     \u003d ca1 - (ca1 - a1);\n-        final double a1Low      \u003d a1 - a1High;\n-        final double cb1        \u003d SPLIT_FACTOR * b1;\n-        final double b1High     \u003d cb1 - (cb1 - b1);\n-        final double b1Low      \u003d b1 - b1High;\n-\n-        // accurate multiplication a1 * b1\n-        final double prod1High  \u003d a1 * b1;\n-        final double prod1Low   \u003d a1Low * b1Low - (((prod1High - a1High * b1High) - a1Low * b1High) - a1High * b1Low);\n-\n-        // split a2 and b2 as two 26 bits numbers\n-        final double ca2        \u003d SPLIT_FACTOR * a2;\n-        final double a2High     \u003d ca2 - (ca2 - a2);\n-        final double a2Low      \u003d a2 - a2High;\n-        final double cb2        \u003d SPLIT_FACTOR * b2;\n-        final double b2High     \u003d cb2 - (cb2 - b2);\n-        final double b2Low      \u003d b2 - b2High;\n-\n-        // accurate multiplication a2 * b2\n-        final double prod2High  \u003d a2 * b2;\n-        final double prod2Low   \u003d a2Low * b2Low - (((prod2High - a2High * b2High) - a2Low * b2High) - a2High * b2Low);\n-\n-        // split a3 and b3 as two 26 bits numbers\n-        final double ca3        \u003d SPLIT_FACTOR * a3;\n-        final double a3High     \u003d ca3 - (ca3 - a3);\n-        final double a3Low      \u003d a3 - a3High;\n-        final double cb3        \u003d SPLIT_FACTOR * b3;\n-        final double b3High     \u003d cb3 - (cb3 - b3);\n-        final double b3Low      \u003d b3 - b3High;\n-\n-        // accurate multiplication a3 * b3\n-        final double prod3High  \u003d a3 * b3;\n-        final double prod3Low   \u003d a3Low * b3Low - (((prod3High - a3High * b3High) - a3Low * b3High) - a3High * b3Low);\n-\n-        // accurate addition a1 * b1 + a2 * b2\n-        final double s12High    \u003d prod1High + prod2High;\n-        final double s12Prime   \u003d s12High - prod2High;\n-        final double s12Low     \u003d (prod2High - (s12High - s12Prime)) + (prod1High - s12Prime);\n-\n-        // accurate addition a1 * b1 + a2 * b2 + a3 * b3\n-        final double s123High   \u003d s12High + prod3High;\n-        final double s123Prime  \u003d s123High - prod3High;\n-        final double s123Low    \u003d (prod3High - (s123High - s123Prime)) + (s12High - s123Prime);\n-\n-        // final rounding, s123 may have suffered many cancellations, we try\n-        // to recover some bits from the extra words we have saved up to now\n-        double result \u003d s123High + (prod1Low + prod2Low + prod3Low + s12Low + s123Low);\n-\n-        if (Double.isNaN(result)) {\n-            // either we have split infinite numbers or some coefficients were NaNs,\n-            // just rely on the naive implementation and let IEEE754 handle this\n-            result \u003d a1 * b1 + a2 * b2 + a3 * b3;\n-        }\n-\n-        return result;\n-\n-    }\n-\n-    /**\n-     * Compute a linear combination accurately.\n-     * \u003cp\u003e\n-     * This method computes a\u003csub\u003e1\u003c/sub\u003e\u0026times;b\u003csub\u003e1\u003c/sub\u003e +\n-     * a\u003csub\u003e2\u003c/sub\u003e\u0026times;b\u003csub\u003e2\u003c/sub\u003e + a\u003csub\u003e3\u003c/sub\u003e\u0026times;b\u003csub\u003e3\u003c/sub\u003e +\n-     * a\u003csub\u003e4\u003c/sub\u003e\u0026times;b\u003csub\u003e4\u003c/sub\u003e\n-     * to high accuracy. It does so by using specific multiplication and\n-     * addition algorithms to preserve accuracy and reduce cancellation effects.\n-     * It is based on the 2005 paper \u003ca\n-     * href\u003d\"http://citeseerx.ist.psu.edu/viewdoc/summary?doi\u003d10.1.1.2.1547\"\u003e\n-     * Accurate Sum and Dot Product\u003c/a\u003e by Takeshi Ogita,\n-     * Siegfried M. Rump, and Shin\u0027ichi Oishi published in SIAM J. Sci. Comput.\n-     * \u003c/p\u003e\n-     * @param a1 first factor of the first term\n-     * @param b1 second factor of the first term\n-     * @param a2 first factor of the second term\n-     * @param b2 second factor of the second term\n-     * @param a3 first factor of the third term\n-     * @param b3 second factor of the third term\n-     * @param a4 first factor of the third term\n-     * @param b4 second factor of the third term\n-     * @return a\u003csub\u003e1\u003c/sub\u003e\u0026times;b\u003csub\u003e1\u003c/sub\u003e +\n-     * a\u003csub\u003e2\u003c/sub\u003e\u0026times;b\u003csub\u003e2\u003c/sub\u003e + a\u003csub\u003e3\u003c/sub\u003e\u0026times;b\u003csub\u003e3\u003c/sub\u003e +\n-     * a\u003csub\u003e4\u003c/sub\u003e\u0026times;b\u003csub\u003e4\u003c/sub\u003e\n-     * @see #linearCombination(double, double, double, double)\n-     * @see #linearCombination(double, double, double, double, double, double)\n-     */\n-    public static double linearCombination(final double a1, final double b1,\n-                                           final double a2, final double b2,\n-                                           final double a3, final double b3,\n-                                           final double a4, final double b4) {\n-\n-        // the code below is split in many additions/subtractions that may\n-        // appear redundant. However, they should NOT be simplified, as they\n-        // do use IEEE754 floating point arithmetic rounding properties.\n-        // as an example, the expression \"ca1 - (ca1 - a1)\" is NOT the same as \"a1\"\n-        // The variables naming conventions are that xyzHigh contains the most significant\n-        // bits of xyz and xyzLow contains its least significant bits. So theoretically\n-        // xyz is the sum xyzHigh + xyzLow, but in many cases below, this sum cannot\n-        // be represented in only one double precision number so we preserve two numbers\n-        // to hold it as long as we can, combining the high and low order bits together\n-        // only at the end, after cancellation may have occurred on high order bits\n-\n-        // split a1 and b1 as two 26 bits numbers\n-        final double ca1        \u003d SPLIT_FACTOR * a1;\n-        final double a1High     \u003d ca1 - (ca1 - a1);\n-        final double a1Low      \u003d a1 - a1High;\n-        final double cb1        \u003d SPLIT_FACTOR * b1;\n-        final double b1High     \u003d cb1 - (cb1 - b1);\n-        final double b1Low      \u003d b1 - b1High;\n-\n-        // accurate multiplication a1 * b1\n-        final double prod1High  \u003d a1 * b1;\n-        final double prod1Low   \u003d a1Low * b1Low - (((prod1High - a1High * b1High) - a1Low * b1High) - a1High * b1Low);\n-\n-        // split a2 and b2 as two 26 bits numbers\n-        final double ca2        \u003d SPLIT_FACTOR * a2;\n-        final double a2High     \u003d ca2 - (ca2 - a2);\n-        final double a2Low      \u003d a2 - a2High;\n-        final double cb2        \u003d SPLIT_FACTOR * b2;\n-        final double b2High     \u003d cb2 - (cb2 - b2);\n-        final double b2Low      \u003d b2 - b2High;\n-\n-        // accurate multiplication a2 * b2\n-        final double prod2High  \u003d a2 * b2;\n-        final double prod2Low   \u003d a2Low * b2Low - (((prod2High - a2High * b2High) - a2Low * b2High) - a2High * b2Low);\n-\n-        // split a3 and b3 as two 26 bits numbers\n-        final double ca3        \u003d SPLIT_FACTOR * a3;\n-        final double a3High     \u003d ca3 - (ca3 - a3);\n-        final double a3Low      \u003d a3 - a3High;\n-        final double cb3        \u003d SPLIT_FACTOR * b3;\n-        final double b3High     \u003d cb3 - (cb3 - b3);\n-        final double b3Low      \u003d b3 - b3High;\n-\n-        // accurate multiplication a3 * b3\n-        final double prod3High  \u003d a3 * b3;\n-        final double prod3Low   \u003d a3Low * b3Low - (((prod3High - a3High * b3High) - a3Low * b3High) - a3High * b3Low);\n-\n-        // split a4 and b4 as two 26 bits numbers\n-        final double ca4        \u003d SPLIT_FACTOR * a4;\n-        final double a4High     \u003d ca4 - (ca4 - a4);\n-        final double a4Low      \u003d a4 - a4High;\n-        final double cb4        \u003d SPLIT_FACTOR * b4;\n-        final double b4High     \u003d cb4 - (cb4 - b4);\n-        final double b4Low      \u003d b4 - b4High;\n-\n-        // accurate multiplication a4 * b4\n-        final double prod4High  \u003d a4 * b4;\n-        final double prod4Low   \u003d a4Low * b4Low - (((prod4High - a4High * b4High) - a4Low * b4High) - a4High * b4Low);\n-\n-        // accurate addition a1 * b1 + a2 * b2\n-        final double s12High    \u003d prod1High + prod2High;\n-        final double s12Prime   \u003d s12High - prod2High;\n-        final double s12Low     \u003d (prod2High - (s12High - s12Prime)) + (prod1High - s12Prime);\n-\n-        // accurate addition a1 * b1 + a2 * b2 + a3 * b3\n-        final double s123High   \u003d s12High + prod3High;\n-        final double s123Prime  \u003d s123High - prod3High;\n-        final double s123Low    \u003d (prod3High - (s123High - s123Prime)) + (s12High - s123Prime);\n-\n-        // accurate addition a1 * b1 + a2 * b2 + a3 * b3 + a4 * b4\n-        final double s1234High  \u003d s123High + prod4High;\n-        final double s1234Prime \u003d s1234High - prod4High;\n-        final double s1234Low   \u003d (prod4High - (s1234High - s1234Prime)) + (s123High - s1234Prime);\n-\n-        // final rounding, s1234 may have suffered many cancellations, we try\n-        // to recover some bits from the extra words we have saved up to now\n-        double result \u003d s1234High + (prod1Low + prod2Low + prod3Low + prod4Low + s12Low + s123Low + s1234Low);\n-\n-        if (Double.isNaN(result)) {\n-            // either we have split infinite numbers or some coefficients were NaNs,\n-            // just rely on the naive implementation and let IEEE754 handle this\n-            result \u003d a1 * b1 + a2 * b2 + a3 * b3 + a4 * b4;\n-        }\n-\n-        return result;\n-\n-    }\n-\n-    /**\n-     * Compute a linear combination accurately.\n-     * This method computes the sum of the products\n-     * \u003ccode\u003ea\u003csub\u003ei\u003c/sub\u003e b\u003csub\u003ei\u003c/sub\u003e\u003c/code\u003e to high accuracy.\n-     * It does so by using specific multiplication and addition algorithms to\n-     * preserve accuracy and reduce cancellation effects.\n-     * \u003cbr/\u003e\n-     * It is based on the 2005 paper\n-     * \u003ca href\u003d\"http://citeseerx.ist.psu.edu/viewdoc/summary?doi\u003d10.1.1.2.1547\"\u003e\n-     * Accurate Sum and Dot Product\u003c/a\u003e by Takeshi Ogita, Siegfried M. Rump,\n-     * and Shin\u0027ichi Oishi published in SIAM J. Sci. Comput.\n-     *\n-     * @param a Factors.\n-     * @param b Factors.\n-     * @return \u003ccode\u003e\u0026Sigma;\u003csub\u003ei\u003c/sub\u003e a\u003csub\u003ei\u003c/sub\u003e b\u003csub\u003ei\u003c/sub\u003e\u003c/code\u003e.\n-     */\n-    public static double linearCombination(final double[] a, final double[] b) {\n-        final int len \u003d a.length;\n-        if (len !\u003d b.length) {\n-            throw new DimensionMismatchException(len, b.length);\n-        }\n-\n-        final double[] prodHigh \u003d new double[len];\n-        double prodLowSum \u003d 0;\n-\n-        for (int i \u003d 0; i \u003c len; i++) {\n-            final double ai \u003d a[i];\n-            final double ca \u003d SPLIT_FACTOR * ai;\n-            final double aHigh \u003d ca - (ca - ai);\n-            final double aLow \u003d ai - aHigh;\n-\n-            final double bi \u003d b[i];\n-            final double cb \u003d SPLIT_FACTOR * bi;\n-            final double bHigh \u003d cb - (cb - bi);\n-            final double bLow \u003d bi - bHigh;\n-            prodHigh[i] \u003d ai * bi;\n-            final double prodLow \u003d aLow * bLow - (((prodHigh[i] -\n-                                                    aHigh * bHigh) -\n-                                                   aLow * bHigh) -\n-                                                  aHigh * bLow);\n-            prodLowSum +\u003d prodLow;\n-        }\n-\n-\n-        final double prodHighCur \u003d prodHigh[0];\n-        double prodHighNext \u003d prodHigh[1];\n-        double sHighPrev \u003d prodHighCur + prodHighNext;\n-        double sPrime \u003d sHighPrev - prodHighNext;\n-        double sLowSum \u003d (prodHighNext - (sHighPrev - sPrime)) + (prodHighCur - sPrime);\n-\n-        final int lenMinusOne \u003d len - 1;\n-        for (int i \u003d 1; i \u003c lenMinusOne; i++) {\n-            prodHighNext \u003d prodHigh[i + 1];\n-            final double sHighCur \u003d sHighPrev + prodHighNext;\n-            sPrime \u003d sHighCur - prodHighNext;\n-            sLowSum +\u003d (prodHighNext - (sHighCur - sPrime)) + (sHighPrev - sPrime);\n-            sHighPrev \u003d sHighCur;\n-        }\n-\n-        double result \u003d sHighPrev + (prodLowSum + sLowSum);\n-\n-        if (Double.isNaN(result)) {\n-            // either we have split infinite numbers or some coefficients were NaNs,\n-            // just rely on the naive implementation and let IEEE754 handle this\n-            result \u003d 0;\n-            for (int i \u003d 0; i \u003c len; ++i) {\n-                result +\u003d a[i] * b[i];\n-            }\n-        }\n-\n-        return result;\n-\n-    }\n-\n }\n",
      "operations": [
        {
          "type": "delete-tree",
          "from": "ImportDeclaration [901,928]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ImportDeclaration [954,983]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ImportDeclaration [984,1012]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ImportDeclaration [1013,1035]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ImportDeclaration [1037,1105]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ImportDeclaration [1243,1302]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ImportDeclaration [1303,1374]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "Javadoc [3443,3505]",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [59708,61138]",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java",
        "src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.math.util.MultidimensionalCounter:getSizes:[]:int[]",
            "org.apache.commons.math.util.MultidimensionalCounter:MultidimensionalCounter:[int... size]:null",
            "org.apache.commons.math.util.MultidimensionalCounter\\$Iterator:getCounts:[]:int[]"
          ],
          "num": 3
        },
        {
          "qualified_names": [
            "org.apache.commons.math.util.MultidimensionalCounter:getSizes:[]:int[]",
            "org.apache.commons.math.util.MultidimensionalCounter\\$Iterator:getCounts:[]:int[]",
            "org.apache.commons.math.util.MultidimensionalCounter:MultidimensionalCounter:[int... size]:null"
          ],
          "num": 3
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "23",
            "132",
            "167",
            "283"
          ],
          "num": 4
        },
        {
          "qualified_names": [
            "22",
            "131",
            "166",
            "282"
          ],
          "num": 4
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java b/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\nindex bf20bf5..35f6f78 100644\n--- a/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\n+++ b/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\n@@ -20,7 +20,6 @@\n import org.apache.commons.math.exception.DimensionMismatchException;\n import org.apache.commons.math.exception.OutOfRangeException;\n import org.apache.commons.math.exception.NotStrictlyPositiveException;\n-import org.apache.commons.math.util.MathUtils;\n \n /**\n  * Converter between unidimensional storage structure and multidimensional\n@@ -129,7 +128,7 @@\n          * @return the indices within the multidimensional counter.\n          */\n         public int[] getCounts() {\n-            return MathUtils.copyOf(counter);\n+            return MathArrays.copyOf(counter);\n         }\n \n         /**\n@@ -164,7 +163,7 @@\n      */\n     public MultidimensionalCounter(int ... size) {\n         dimension \u003d size.length;\n-        this.size \u003d MathUtils.copyOf(size);\n+        this.size \u003d MathArrays.copyOf(size);\n \n         uniCounterOffset \u003d new int[dimension];\n \n@@ -280,7 +279,7 @@\n      * @return the sizes of the multidimensional counter in each dimension.\n      */\n     public int[] getSizes() {\n-        return MathUtils.copyOf(size);\n+        return MathArrays.copyOf(size);\n     }\n \n     /**\n",
      "operations": [
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ImportDeclaration [1045,1091]",
          "to": ""
        }
      ]
    }
  ],
  "inducing_type": {
    "add_classes": {
      "qualified_names": [
        "src/main/java/org/apache/commons/math/util/MathArrays.java"
      ],
      "num": 1
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [
        "org.apache.commons.math.exception.NonMonotonicSequenceException:getDirection:[]:MathArrays.OrderDirection",
        "org.apache.commons.math.exception.NonMonotonicSequenceException:NonMonotonicSequenceException:[Number wrong, Number previous, int index, MathArrays.OrderDirection direction, boolean strict]:null",
        "org.apache.commons.math.util.MathUtils:checkFinite:[final double[] val]:void",
        "org.apache.commons.math.util.MathUtils:addAndCheck:[int x, int y]:int"
      ],
      "num": 4
    },
    "delete_functions": {
      "qualified_names": [
        "org.apache.commons.math.util.MathUtils:distance1:[double[] p1, double[] p2]:double",
        "org.apache.commons.math.util.MathUtils:linearCombination:[final double a1, final double b1, final double a2, final double b2, final double a3, final double b3]:double",
        "org.apache.commons.math.util.MathUtils:linearCombination:[final double[] a, final double[] b]:double",
        "org.apache.commons.math.exception.NonMonotonicSequenceException:NonMonotonicSequenceException:[Number wrong, Number previous, int index, MathUtils.OrderDirection direction, boolean strict]:null",
        "org.apache.commons.math.util.MathUtils:safeNorm:[double[] v]:double",
        "org.apache.commons.math.util.MathUtils:isMonotone:[double[] val, OrderDirection dir, boolean strict]:boolean",
        "org.apache.commons.math.util.MathUtils:isMonotone:[Comparable[] val, OrderDirection dir, boolean strict]:boolean",
        "org.apache.commons.math.util.MathUtils:copyOf:[int[] source, int len]:int[]",
        "org.apache.commons.math.util.MathUtils:checkFinite:[final double x]:void",
        "org.apache.commons.math.exception.NonMonotonicSequenceException:getDirection:[]:MathUtils.OrderDirection",
        "org.apache.commons.math.util.MathUtils:distance:[double[] p1, double[] p2]:double",
        "org.apache.commons.math.util.MathUtils:distanceInf:[double[] p1, double[] p2]:double",
        "org.apache.commons.math.util.MathUtils:copyOf:[double[] source, int len]:double[]",
        "org.apache.commons.math.util.MathUtils:copyOf:[double[] source]:double[]",
        "org.apache.commons.math.util.MathUtils:linearCombination:[final double a1, final double b1, final double a2, final double b2]:double",
        "org.apache.commons.math.util.MathUtils:sortInPlace:[double[] x, final OrderDirection dir, double[]... yList]:void",
        "org.apache.commons.math.util.MathUtils:checkNotNull:[Object o, Localizable pattern, Object... args]:void",
        "org.apache.commons.math.util.MathUtils:checkOrder:[double[] val, OrderDirection dir, boolean strict]:void",
        "org.apache.commons.math.util.MathUtils:checkOrder:[double[] val]:void",
        "org.apache.commons.math.util.MathUtils:sortInPlace:[double[] x, double[]... yList]:void",
        "org.apache.commons.math.util.MathUtils:linearCombination:[final double a1, final double b1, final double a2, final double b2, final double a3, final double b3, final double a4, final double b4]:double",
        "org.apache.commons.math.util.MathUtils:distance:[int[] p1, int[] p2]:double",
        "org.apache.commons.math.util.MathUtils:distance1:[int[] p1, int[] p2]:int",
        "org.apache.commons.math.util.MathUtils:copyOf:[int[] source]:int[]",
        "org.apache.commons.math.util.MathUtils:distanceInf:[int[] p1, int[] p2]:int",
        "org.apache.commons.math.util.MathUtils:checkOrder:[double[] val, OrderDirection dir, boolean strict, boolean abort]:boolean"
      ],
      "num": 26
    }
  },
  "trigger_tests": [
    {
      "test_class": "org.apache.commons.math3.util.MathArraysTest",
      "test_function": "testLinearCombinationWithSingleElementArray",
      "assertion_line": "591",
      "exception": "java.lang.ArrayIndexOutOfBoundsException",
      "message": "1"
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/math3/util/MathArrays.java",
        "src/main/java/org/apache/commons/math3/util/MathArrays.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.math3.util.MathArrays:linearCombination:[final double[] a, final double[] b]:double"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "org.apache.commons.math3.util.MathArrays:linearCombination:[final double[] a, final double[] b]:double"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "820"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "821",
            "822",
            "823",
            "824",
            "825"
          ],
          "num": 5
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/math3/util/MathArrays.java b/src/main/java/org/apache/commons/math3/util/MathArrays.java\nindex 1aa56cc..8f83d96 100644\n--- a/src/main/java/org/apache/commons/math3/util/MathArrays.java\n+++ b/src/main/java/org/apache/commons/math3/util/MathArrays.java\n@@ -818,6 +818,11 @@\n             throw new DimensionMismatchException(len, b.length);\n         }\n \n+        if (len \u003d\u003d 1) {\n+            // Revert to scalar multiplication.\n+            return a[0] * b[0];\n+        }\n+\n         final double[] prodHigh \u003d new double[len];\n         double prodLowSum \u003d 0;\n \n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [28935,29040]"
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  },
  "patch_changed_mths": {
    "qualified_names": [],
    "num": 0
  }
}