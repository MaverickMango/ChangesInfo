diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java
index 152e942..8046052 100644
--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java
+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java
@@ -76,7 +76,7 @@
 
             if (actualTypeArgument instanceof WildcardType) {
                 contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));
-            } else {
+            } else if (typeParameter != actualTypeArgument) {
                 contextualActualTypeParameters.put(typeParameter, actualTypeArgument);
             }
             // logger.log("For '" + parameterizedType + "' found type variable : { '" + typeParameter + "(" + System.identityHashCode(typeParameter) + ")" + "' : '" + actualTypeArgument + "(" + System.identityHashCode(typeParameter) + ")" + "' }");
diff --git a/test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java b/test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java
index 9b9b7f0..f15833c 100644
--- a/test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java
+++ b/test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java
@@ -21,7 +21,10 @@
 
 @SuppressWarnings("unused")
 public class GenericMetadataSupportTest {
-
+  
+    interface GenericsSelfReference<T extends GenericsSelfReference<T>> {
+        T self();
+    }
     interface UpperBoundedTypeWithClass<E extends Number & Comparable<E>> {
         E get();
     }
@@ -44,6 +47,12 @@
 
     static class StringList extends ArrayList<String> { }
 
+    @Test
+    public void typeVariable_of_self_type() {
+        GenericMetadataSupport genericMetadata = inferFrom(GenericsSelfReference.class).resolveGenericReturnType(firstNamedMethod("self", GenericsSelfReference.class));
+
+        assertThat(genericMetadata.rawType()).isEqualTo(GenericsSelfReference.class);
+    }
 
     @Test
     public void can_get_raw_type_from_Class() throws Exception {
