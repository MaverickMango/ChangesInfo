{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "data/changesInfo/",
  "timeoutSecond": 300,
  "proj": "Mockito",
  "id": "8",
  "workingDir": "../bugs/Mockito_8_buggy",
  "inducingCommit": "ab9e9f347705bf9f4ebace4b07b085088275a256",
  "originalCommit": "6e97858d79d08b455cb3690b811120965ee1975a",
  "bug_name": "Mockito_8",
  "derive": "defects4j",
  "original_fixing_commit": "5a03bf5d0c9aedac9cfbf074833167c1eca6439f",
  "buildFiles_changed": false,
  "inducing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/org/mockito/internal/util/reflection/GenericMetadataSupport.java",
        "src/org/mockito/internal/util/reflection/GenericMetadataSupport.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "TypeVarBoundedType",
            "getRawType",
            "actualTypeArguments",
            "getOwnerType",
            "interfaceBounds",
            "getGenericDeclaration",
            "toString",
            "convertToSerializableArray",
            "toString",
            "getBounds",
            "fromArrayToArrayOfClass",
            "boundsOf",
            "readActualTypeParametersOnDeclaringClass",
            "registerTypeVariablesOn",
            "convertToSerializableArray",
            "SerializableBoundedType",
            "SerializableBound",
            "registerTypeParametersOn",
            "ParameterizedReturnType",
            "getName",
            "SerializableParameterizedType",
            "FromClassGenericMetadataSupport",
            "getActualTypeArguments",
            "SerializableTypeVariable",
            "boundsOf",
            "firstBound",
            "fromArray"
          ],
          "num": 27
        },
        {
          "qualified_names": [
            "readActualTypeParametersOnDeclaringClass",
            "toString",
            "actualTypeArguments",
            "ParameterizedReturnType",
            "boundsOf",
            "registerTypeVariablesOn",
            "superClassOf",
            "registerTypeVariableIfNotPresent",
            "registerTypeParametersOn",
            "TypeVarBoundedType",
            "hasRawExtraInterfaces",
            "toString",
            "boundsOf",
            "FromClassGenericMetadataSupport"
          ],
          "num": 14
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "12",
            "13",
            "14",
            "15",
            "59",
            "60",
            "80",
            "83",
            "84",
            "85",
            "87",
            "94",
            "95",
            "96",
            "109",
            "129",
            "154",
            "168",
            "246",
            "250",
            "253",
            "266",
            "279",
            "306",
            "307",
            "493",
            "494",
            "498",
            "537",
            "538",
            "539",
            "540",
            "541",
            "557",
            "558",
            "598",
            "599",
            "600",
            "601",
            "609",
            "610",
            "611",
            "612",
            "613",
            "614",
            "615",
            "616",
            "617",
            "618",
            "619",
            "620",
            "621",
            "622",
            "623",
            "624",
            "625",
            "626",
            "627",
            "628",
            "629",
            "630",
            "631",
            "632",
            "633",
            "634",
            "635",
            "636",
            "637",
            "638",
            "639",
            "640",
            "641",
            "642",
            "643",
            "644",
            "645",
            "646",
            "647",
            "648",
            "649",
            "650",
            "651",
            "652",
            "653",
            "654",
            "655",
            "656",
            "657",
            "658",
            "659",
            "660",
            "661",
            "662",
            "663",
            "664",
            "665",
            "666",
            "667",
            "668",
            "669",
            "670",
            "671",
            "672",
            "673",
            "674",
            "675",
            "676",
            "677",
            "678",
            "679",
            "680",
            "681",
            "682",
            "683",
            "684",
            "685",
            "686",
            "687",
            "688",
            "689",
            "690",
            "691",
            "692",
            "693",
            "694",
            "695",
            "696",
            "697",
            "698",
            "699",
            "700",
            "701",
            "702",
            "703",
            "704",
            "705",
            "706",
            "707",
            "708",
            "709",
            "710",
            "711",
            "712",
            "713",
            "714",
            "715",
            "716",
            "717",
            "718",
            "719",
            "720",
            "721",
            "722",
            "723",
            "724",
            "725",
            "726",
            "727",
            "728",
            "729",
            "730",
            "731",
            "732",
            "733",
            "734",
            "735",
            "736",
            "737"
          ],
          "num": 168
        },
        {
          "qualified_names": [
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "67",
            "89",
            "91",
            "98",
            "99",
            "100",
            "101",
            "102",
            "103",
            "104",
            "105",
            "106",
            "119",
            "139",
            "165",
            "166",
            "167",
            "168",
            "169",
            "170",
            "171",
            "185",
            "263",
            "267",
            "268",
            "269",
            "270",
            "271",
            "272",
            "273",
            "276",
            "277",
            "278",
            "279",
            "280",
            "281",
            "282",
            "283",
            "284",
            "285",
            "299",
            "312",
            "339",
            "340",
            "526",
            "527",
            "531",
            "570",
            "582",
            "586",
            "587",
            "627"
          ],
          "num": 64
        }
      ],
      "diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex a8bf999..26493ea 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -5,14 +5,22 @@\n package org.mockito.internal.util.reflection;\r\n \r\n \r\n+import java.lang.reflect.Method;\r\n+import java.lang.reflect.ParameterizedType;\r\n+import java.lang.reflect.Type;\r\n+import java.lang.reflect.TypeVariable;\r\n+import java.lang.reflect.WildcardType;\r\n+import java.util.ArrayList;\r\n+import java.util.Arrays;\r\n+import java.util.Collections;\r\n+import java.util.HashMap;\r\n+import java.util.LinkedHashMap;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n import org.mockito.Incubating;\r\n import org.mockito.exceptions.base.MockitoException;\r\n import org.mockito.internal.util.Checks;\r\n \r\n-import java.io.Serializable;\r\n-import java.lang.reflect.*;\r\n-import java.util.*;\r\n-\r\n \r\n /**\r\n  * This class can retrieve generic meta-data that the compiler stores on classes\r\n@@ -56,8 +64,7 @@\n  * @see org.mockito.internal.stubbing.defaultanswers.ReturnsDeepStubs\r\n  */\r\n @Incubating\r\n-public abstract class GenericMetadataSupport implements Serializable {\r\n-\r\n+public abstract class GenericMetadataSupport {\r\n \r\n     // public static MockitoLogger logger \u003d new ConsoleMockitoLogger();\r\n \r\n@@ -77,23 +84,26 @@\n         for (int i \u003d 0; i \u003c actualTypeArguments.length; i++) {\r\n             TypeVariable typeParameter \u003d typeParameters[i];\r\n             Type actualTypeArgument \u003d actualTypeArguments[i];\r\n-            SerializableTypeVariable serializableTypeVariable \u003d new SerializableTypeVariable(typeParameter);\r\n \r\n             if (actualTypeArgument instanceof WildcardType) {\r\n-                contextualActualTypeParameters.put(serializableTypeVariable, boundsOf((WildcardType) actualTypeArgument));\r\n-            } else if (actualTypeArgument instanceof ParameterizedType) {\r\n-                contextualActualTypeParameters.put(serializableTypeVariable, new SerializableParameterizedType((ParameterizedType) actualTypeArgument));\r\n+                contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\r\n             } else {\r\n-                contextualActualTypeParameters.put(serializableTypeVariable, actualTypeArgument);\r\n+                contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\r\n             }\r\n             // logger.log(\"For \u0027\" + parameterizedType + \"\u0027 found type variable : { \u0027\" + typeParameter + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"\u0027 : \u0027\" + actualTypeArgument + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"\u0027 }\");\r\n         }\r\n     }\r\n \r\n     protected void registerTypeParametersOn(TypeVariable[] typeParameters) {\r\n-        for (TypeVariable typeParameter : typeParameters) {\r\n-            contextualActualTypeParameters.put(new SerializableTypeVariable(typeParameter), boundsOf(typeParameter));\r\n-            // logger.log(\"For \u0027\" + typeParameter.getGenericDeclaration() + \"\u0027 found type variable : { \u0027\" + typeParameter + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"\u0027 : \u0027\" + boundsOf(typeParameter) + \"\u0027 }\");\r\n+        for (TypeVariable typeVariable : typeParameters) {\r\n+            registerTypeVariableIfNotPresent(typeVariable);\r\n+        }\r\n+    }\r\n+\r\n+    private void registerTypeVariableIfNotPresent(TypeVariable typeVariable) {\r\n+        if (!contextualActualTypeParameters.containsKey(typeVariable)) {\r\n+            contextualActualTypeParameters.put(typeVariable, boundsOf(typeVariable));\r\n+            // logger.log(\"For \u0027\" + typeVariable.getGenericDeclaration() + \"\u0027 found type variable : { \u0027\" + typeVariable + \"(\" + System.identityHashCode(typeVariable) + \")\" + \"\u0027 : \u0027\" + boundsOf(typeVariable) + \"\u0027 }\");\r\n         }\r\n     }\r\n \r\n@@ -106,7 +116,7 @@\n         if (typeParameter.getBounds()[0] instanceof TypeVariable) {\r\n             return boundsOf((TypeVariable) typeParameter.getBounds()[0]);\r\n         }\r\n-        return new SerializableBoundedType(new TypeVarBoundedType(typeParameter));\r\n+        return new TypeVarBoundedType(typeParameter);\r\n     }\r\n \r\n     /**\r\n@@ -126,7 +136,7 @@\n             return boundsOf((TypeVariable) wildCardBoundedType.firstBound());\r\n         }\r\n \r\n-        return new SerializableBoundedType(wildCardBoundedType);\r\n+        return wildCardBoundedType;\r\n     }\r\n \r\n \r\n@@ -152,6 +162,13 @@\n         return new Class[0];\r\n     }\r\n \r\n+    /**\r\n+     * @return Returns true if metadata knows about extra-interfaces {@link #extraInterfaces()} \u003cstrong\u003eif relevant\u003c/strong\u003e.\r\n+     */\r\n+    public boolean hasRawExtraInterfaces() {\r\n+        return rawExtraInterfaces().length \u003e 0;\r\n+    }\r\n+\r\n \r\n \r\n     /**\r\n@@ -165,7 +182,7 @@\n \r\n             Type actualType \u003d getActualTypeArgumentFor(typeParameter);\r\n \r\n-            actualTypeArguments.put(new SerializableTypeVariable(typeParameter), actualType);\r\n+            actualTypeArguments.put(typeParameter, actualType);\r\n             // logger.log(\"For \u0027\" + rawType().getCanonicalName() + \"\u0027 returning explicit TypeVariable : { \u0027\" + typeParameter + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"\u0027 : \u0027\" + actualType +\"\u0027 }\");\r\n         }\r\n \r\n@@ -243,14 +260,29 @@\n      * the class and its ancestors and interfaces.\r\n      */\r\n     private static class FromClassGenericMetadataSupport extends GenericMetadataSupport {\r\n-        private Class\u003c?\u003e clazz;\r\n+        private final Class\u003c?\u003e clazz;\r\n \r\n         public FromClassGenericMetadataSupport(Class\u003c?\u003e clazz) {\r\n             this.clazz \u003d clazz;\r\n-            readActualTypeParametersOnDeclaringClass();\r\n+\r\n+            for (Class currentExploredClass \u003d clazz;\r\n+                 currentExploredClass !\u003d null \u0026\u0026 currentExploredClass !\u003d Object.class;\r\n+                 currentExploredClass \u003d superClassOf(currentExploredClass)\r\n+                ) {\r\n+                readActualTypeParametersOnDeclaringClass(currentExploredClass);\r\n+            }\r\n         }\r\n \r\n-        private void readActualTypeParametersOnDeclaringClass() {\r\n+        private Class superClassOf(Class currentExploredClass) {\r\n+            Type genericSuperclass \u003d currentExploredClass.getGenericSuperclass();\r\n+            if (genericSuperclass instanceof ParameterizedType) {\r\n+                Type rawType \u003d ((ParameterizedType) genericSuperclass).getRawType();\r\n+                return (Class) rawType;\r\n+            }\r\n+            return (Class) genericSuperclass;\r\n+        }\r\n+\r\n+        private void readActualTypeParametersOnDeclaringClass(Class\u003c?\u003e clazz) {\r\n             registerTypeParametersOn(clazz.getTypeParameters());\r\n             registerTypeVariablesOn(clazz.getGenericSuperclass());\r\n             for (Type genericInterface : clazz.getGenericInterfaces()) {\r\n@@ -264,6 +296,7 @@\n         }\r\n     }\r\n \r\n+\r\n     /**\r\n      * Generic metadata implementation for \"standalone\" {@link ParameterizedType}.\r\n      *\r\n@@ -276,7 +309,7 @@\n      * Instead use {@link ParameterizedReturnType}.\r\n      */\r\n     private static class FromParameterizedTypeGenericMetadataSupport extends GenericMetadataSupport {\r\n-        private ParameterizedType parameterizedType;\r\n+        private final ParameterizedType parameterizedType;\r\n \r\n         public FromParameterizedTypeGenericMetadataSupport(ParameterizedType parameterizedType) {\r\n             this.parameterizedType \u003d parameterizedType;\r\n@@ -303,8 +336,8 @@\n         private final TypeVariable[] typeParameters;\r\n \r\n         public ParameterizedReturnType(GenericMetadataSupport source, TypeVariable[] typeParameters, ParameterizedType parameterizedType) {\r\n-            this.parameterizedType \u003d new SerializableParameterizedType(parameterizedType);\r\n-            this.typeParameters \u003d fromArray(typeParameters);\r\n+            this.parameterizedType \u003d parameterizedType;\r\n+            this.typeParameters \u003d typeParameters;\r\n             this.contextualActualTypeParameters \u003d source.contextualActualTypeParameters;\r\n \r\n             readTypeParameters();\r\n@@ -490,12 +523,12 @@\n      *\r\n      * @see \u003ca href\u003d\"http://docs.oracle.com/javase/specs/jls/se5.0/html/typesValues.html#4.4\"\u003ehttp://docs.oracle.com/javase/specs/jls/se5.0/html/typesValues.html#4.4\u003c/a\u003e\r\n      */\r\n-    public static class TypeVarBoundedType implements BoundedType, Serializable {\r\n-        private TypeVariable typeVariable;\r\n+    public static class TypeVarBoundedType implements BoundedType {\r\n+        private final TypeVariable typeVariable;\r\n \r\n \r\n         public TypeVarBoundedType(TypeVariable typeVariable) {\r\n-            this.typeVariable \u003d new SerializableTypeVariable(typeVariable);\r\n+            this.typeVariable \u003d typeVariable;\r\n         }\r\n \r\n         /**\r\n@@ -534,11 +567,7 @@\n \r\n         @Override\r\n         public String toString() {\r\n-            final StringBuilder sb \u003d new StringBuilder();\r\n-            sb.append(\"{firstBound\u003d\").append(firstBound());\r\n-            sb.append(\", interfaceBounds\u003d\").append(Arrays.deepToString(interfaceBounds()));\r\n-            sb.append(\u0027}\u0027);\r\n-            return sb.toString();\r\n+            return \"{firstBound\u003d\" + firstBound() + \", interfaceBounds\u003d\" + Arrays.deepToString(interfaceBounds()) + \u0027}\u0027;\r\n         }\r\n \r\n         public TypeVariable typeVariable() {\r\n@@ -554,8 +583,8 @@\n      *\r\n      * @see \u003ca href\u003d\"http://docs.oracle.com/javase/specs/jls/se5.0/html/typesValues.html#4.4\"\u003ehttp://docs.oracle.com/javase/specs/jls/se5.0/html/typesValues.html#4.4\u003c/a\u003e\r\n      */\r\n-    public static class WildCardBoundedType implements BoundedType, Serializable {\r\n-        private WildcardType wildcard;\r\n+    public static class WildCardBoundedType implements BoundedType {\r\n+        private final WildcardType wildcard;\r\n \r\n \r\n         public WildCardBoundedType(WildcardType wildcard) {\r\n@@ -595,10 +624,7 @@\n \r\n         @Override\r\n         public String toString() {\r\n-            final StringBuilder sb \u003d new StringBuilder();\r\n-            sb.append(\"{firstBound\u003d\").append(firstBound());\r\n-            sb.append(\", interfaceBounds\u003d[]}\");\r\n-            return sb.toString();\r\n+            return \"{firstBound\u003d\" + firstBound() + \", interfaceBounds\u003d[]}\";\r\n         }\r\n \r\n         public WildcardType wildCard() {\r\n@@ -606,135 +632,6 @@\n         }\r\n     }\r\n \r\n-    private static class SerializableBound implements Type, Serializable {\r\n-\r\n-        private Class classBound;\r\n-\r\n-        private SerializableParameterizedType serializableParameterizedType;\r\n-\r\n-        public SerializableBound(Type type){\r\n-            if(type instanceof Class){\r\n-                classBound \u003d (Class) type;\r\n-            } else if(type instanceof ParameterizedType) {\r\n-                serializableParameterizedType \u003d new SerializableParameterizedType((ParameterizedType) type);\r\n-            }\r\n-        }\r\n-\r\n-    }\r\n-\r\n-\r\n-    private static class SerializableTypeVariable implements TypeVariable, Serializable {\r\n-\r\n-        private Class genericDeclaration;\r\n-        private String name;\r\n-        private SerializableBound[] bounds;\r\n-\r\n-        public SerializableTypeVariable(TypeVariable typeVariable){\r\n-            this.genericDeclaration \u003d (Class) typeVariable.getGenericDeclaration();\r\n-            this.name \u003d typeVariable.getName();\r\n-            this.bounds \u003d convertToSerializableArray(typeVariable);\r\n-        }\r\n-\r\n-        @Override\r\n-        public Type[] getBounds() {\r\n-            return bounds;\r\n-        }\r\n-\r\n-        @Override\r\n-        public GenericDeclaration getGenericDeclaration() {\r\n-            return genericDeclaration;\r\n-        }\r\n-\r\n-        @Override\r\n-        public String getName() {\r\n-            return name;\r\n-        }\r\n-\r\n-    }\r\n-\r\n-    private static SerializableBound[] convertToSerializableArray(TypeVariable typeVariable) {\r\n-        SerializableBound[] bounds \u003d new SerializableBound[typeVariable.getBounds().length];\r\n-        for (int i \u003d 0; i \u003c typeVariable.getBounds().length; i++) {\r\n-            bounds[i] \u003d  new SerializableBound(typeVariable.getBounds()[i]);\r\n-        }\r\n-        return bounds;\r\n-    }\r\n-    private static SerializableBound[] convertToSerializableArray(BoundedType boundedType) {\r\n-        SerializableBound[] bounds \u003d new SerializableBound[boundedType.interfaceBounds().length];\r\n-        for (int i \u003d 0; i \u003c boundedType.interfaceBounds().length; i++) {\r\n-            bounds[i] \u003d  new SerializableBound(boundedType.interfaceBounds()[i]);\r\n-        }\r\n-        return bounds;\r\n-    }\r\n-\r\n-    private static \u003cT\u003e Class[] fromArrayToArrayOfClass(T[] objects) {\r\n-        Class[] elements \u003d new Class[objects.length];\r\n-        for (int i \u003d 0; i \u003c objects.length; i++) {\r\n-            elements[i] \u003d objects[i].getClass();\r\n-        }\r\n-        return elements;\r\n-    }\r\n-\r\n-    private static SerializableTypeVariable[] fromArray(TypeVariable[] typeVariables){\r\n-        SerializableTypeVariable[] serializableTypeVariables \u003d new SerializableTypeVariable[typeVariables.length];\r\n-        for (int i \u003d 0; i \u003c typeVariables.length; i++) {\r\n-            serializableTypeVariables[i] \u003d new SerializableTypeVariable(typeVariables[i]);\r\n-        }\r\n-        return serializableTypeVariables;\r\n-    }\r\n-\r\n-    private static class SerializableParameterizedType implements ParameterizedType, Serializable {\r\n-\r\n-        private final Class[] actualTypeArguments;\r\n-\r\n-        private final Class rawType;\r\n-\r\n-        private final Class ownerType;\r\n-\r\n-        public SerializableParameterizedType(ParameterizedType parameterizedType){\r\n-            actualTypeArguments \u003d fromArrayToArrayOfClass(parameterizedType.getActualTypeArguments());\r\n-            rawType \u003d (Class) parameterizedType.getRawType();\r\n-            ownerType \u003d (Class) parameterizedType.getOwnerType();\r\n-        }\r\n-\r\n-        @Override\r\n-        public Type[] getActualTypeArguments() {\r\n-            return actualTypeArguments;\r\n-        }\r\n-\r\n-        @Override\r\n-        public Type getRawType() {\r\n-            return rawType;\r\n-        }\r\n-\r\n-        @Override\r\n-        public Type getOwnerType() {\r\n-            return ownerType;\r\n-        }\r\n-    }\r\n-\r\n-    private static class SerializableBoundedType implements BoundedType, Serializable {\r\n-\r\n-        private final SerializableBound firstBound;\r\n-\r\n-        private final SerializableBound[] interfaceBounds;\r\n-\r\n-        private SerializableBoundedType(BoundedType boundedType) {\r\n-            this.firstBound \u003d new SerializableBound(boundedType.firstBound());\r\n-            this.interfaceBounds \u003d convertToSerializableArray(boundedType);\r\n-        }\r\n-\r\n-        @Override\r\n-        public Type firstBound() {\r\n-            return firstBound;\r\n-        }\r\n-\r\n-        @Override\r\n-        public Type[] interfaceBounds() {\r\n-            return interfaceBounds;\r\n-        }\r\n-    }\r\n-\r\n }\r\n \r\n \r\n",
      "operations": [
        {
          "type": "insert-node",
          "from": "",
          "to": "MethodDeclaration [4256,4727]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [6756,6997]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: private [4256,4263]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "PrimitiveType: void [4264,4268]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: registerTypeVariableIfNotPresent [4269,4301]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SingleVariableDeclaration [4302,4327]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Block [4329,4727]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [11896,12302]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "IfStatement [4340,4720]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: final [11414,11419]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SingleVariableDeclaration [12368,12382]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: final [13594,13599]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: final [22230,22235]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: final [24436,24441]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "PrefixExpression [4344,4401]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Block [4403,4720]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "ForStatement [11552,11873]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [14667,14710]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [22344,22377]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ReturnStatement [23705,23812]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ReturnStatement [25580,25643]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [4183,4230]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationExpression [11557,11591]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "InfixExpression [11611,11679]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Assignment [11699,11756]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Block [11776,11873]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: typeVariable [4453,4465]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "METHOD_INVOCATION_ARGUMENTS [11836,11856]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ImportDeclaration [305,333]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [2285,2297]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [3196,3292]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "InstanceofExpression [3506,3553]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "Block [3555,3725]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "IfStatement [3502,3846]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ClassInstanceCreation [4304,4347]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [5092,5115]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "ClassInstanceCreation [5088,5154]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [6103,6126]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "ClassInstanceCreation [6099,6147]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [7279,7303]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "ClassInstanceCreation [7275,7318]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [13667,13745]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: fromArray [13781,13790]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "METHOD_INVOCATION_ARGUMENTS [13791,13805]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "MethodInvocation [13781,13806]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [21258,21270]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [21398,21461]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [22789,22834]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [22848,22895]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [22909,22988]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [23002,23017]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ReturnStatement [23031,23052]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [23658,23670]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [24828,24873]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [24887,24934]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [24948,24983]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ReturnStatement [24997,25018]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TypeDeclaration [25129,25653]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TypeDeclaration [25663,26485]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [26493,26866]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [26872,27258]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [27266,27532]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [27540,27949]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TypeDeclaration [27957,28847]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TypeDeclaration [28855,29512]",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        }
      ]
    }
  ],
  "inducing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [
        "superClassOf",
        "hasRawExtraInterfaces",
        "registerTypeVariableIfNotPresent"
      ],
      "num": 3
    },
    "delete_functions": {
      "qualified_names": [
        "firstBound",
        "getRawType",
        "getName",
        "getActualTypeArguments",
        "fromArrayToArrayOfClass",
        "fromArray",
        "interfaceBounds",
        "SerializableParameterizedType",
        "getOwnerType",
        "getBounds",
        "convertToSerializableArray",
        "SerializableTypeVariable",
        "SerializableBoundedType",
        "SerializableBound",
        "getGenericDeclaration"
      ],
      "num": 15
    }
  },
  "trigger_tests": [],
  "fixing_changes": [],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  }
}