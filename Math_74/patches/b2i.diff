diff -r -u buggy/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java inducing/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java
--- buggy/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	2023-06-12 11:34:50.858666201 +0800
+++ inducing/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	2023-06-12 11:34:51.086670360 +0800
@@ -67,33 +67,6 @@
 public abstract class EmbeddedRungeKuttaIntegrator
   extends AdaptiveStepsizeIntegrator {
 
-    /** Indicator for <i>fsal</i> methods. */
-    private final boolean fsal;
-
-    /** Time steps from Butcher array (without the first zero). */
-    private final double[] c;
-
-    /** Internal weights from Butcher array (without the first empty row). */
-    private final double[][] a;
-
-    /** External weights for the high order method from Butcher array. */
-    private final double[] b;
-
-    /** Prototype of the step interpolator. */
-    private final RungeKuttaStepInterpolator prototype;
-
-    /** Stepsize control exponent. */
-    private final double exp;
-
-    /** Safety factor for stepsize control. */
-    private double safety;
-
-    /** Minimal reduction factor for stepsize control. */
-    private double minReduction;
-
-    /** Maximal growth factor for stepsize control. */
-    private double maxGrowth;
-
   /** Build a Runge-Kutta integrator with the given Butcher array.
    * @param name name of the method
    * @param fsal indicate that the method is an <i>fsal</i>
@@ -199,7 +172,7 @@
     sanityChecks(equations, t0, y0, t, y);
     setEquations(equations);
     resetEvaluations();
-    final boolean forward = t > t0;
+    final boolean forward = (t > t0);
 
     // create some internal working arrays
     final int stages = c.length + 1;
@@ -399,4 +372,31 @@
                                           double[] y0, double[] y1,
                                           double h);
 
+  /** Indicator for <i>fsal</i> methods. */
+  private boolean fsal;
+
+  /** Time steps from Butcher array (without the first zero). */
+  private double[] c;
+
+  /** Internal weights from Butcher array (without the first empty row). */
+  private double[][] a;
+
+  /** External weights for the high order method from Butcher array. */
+  private double[] b;
+
+  /** Prototype of the step interpolator. */
+  private RungeKuttaStepInterpolator prototype;
+                                         
+  /** Stepsize control exponent. */
+  private double exp;
+
+  /** Safety factor for stepsize control. */
+  private double safety;
+
+  /** Minimal reduction factor for stepsize control. */
+  private double minReduction;
+
+  /** Maximal growth factor for stepsize control. */
+  private double maxGrowth;
+
 }
