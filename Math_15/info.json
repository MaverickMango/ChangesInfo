{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "data/changesInfo/",
  "timeoutSecond": 300,
  "proj": "Math",
  "id": "15",
  "workingDir": "../bugs/Math_15_buggy",
  "inducingCommit": "90279e83d82389db2ba88898ec985a1827849e6e",
  "originalCommit": "86d92c9994adc66abd9c3e4de93394a59e79357b",
  "bug_name": "Math_15",
  "derive": "defects4j",
  "original_fixing_commit": "b221a7342856a2a548f5d9817055defc0ec4dea6",
  "buildFiles_changed": false,
  "inducing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/math/util/FastMath.java",
        "src/main/java/org/apache/commons/math/util/FastMath.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "log1p",
            "pow",
            "floor",
            "ceil",
            "asin",
            "atan",
            "acos",
            "tan",
            "atan2",
            "exp"
          ],
          "num": 10
        },
        {
          "qualified_names": [
            "log1p",
            "acos",
            "pow",
            "cos",
            "asin",
            "tan",
            "atan2",
            "ceil",
            "floor",
            "exp",
            "atan"
          ],
          "num": 11
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "207",
            "208",
            "209",
            "210",
            "211",
            "212",
            "213",
            "214",
            "215",
            "216",
            "217",
            "218",
            "219",
            "220",
            "221",
            "222",
            "443",
            "476",
            "1173",
            "1230",
            "1231",
            "1232",
            "1233",
            "1234",
            "1235",
            "1236",
            "1237",
            "1244",
            "1258",
            "1266",
            "1275",
            "1276",
            "1283",
            "1284",
            "1285",
            "1293",
            "1294",
            "2378",
            "2379",
            "2415",
            "2522",
            "2523",
            "2524",
            "2526",
            "2527",
            "2528",
            "2529",
            "2530",
            "2532",
            "2533",
            "2534",
            "2535",
            "2536",
            "2537",
            "2538",
            "2539",
            "2540",
            "2541",
            "2542",
            "2543",
            "2544",
            "2545",
            "2546",
            "2547",
            "2548",
            "2555",
            "2556",
            "2588",
            "2688",
            "2837",
            "2856"
          ],
          "num": 71
        },
        {
          "qualified_names": [
            "206",
            "428",
            "429",
            "430",
            "431",
            "465",
            "466",
            "467",
            "468",
            "1166",
            "1167",
            "1168",
            "1169",
            "1170",
            "1171",
            "1172",
            "1173",
            "1230",
            "1231",
            "1234",
            "1239",
            "1240",
            "1241",
            "1243",
            "1244",
            "1245",
            "1246",
            "1247",
            "1248",
            "1249",
            "1250",
            "1251",
            "1265",
            "1266",
            "1267",
            "1276",
            "1277",
            "1278",
            "1286",
            "1287",
            "1288",
            "1289",
            "1290",
            "1291",
            "1292",
            "1293",
            "1294",
            "1295",
            "1296",
            "1297",
            "1298",
            "1299",
            "1300",
            "1301",
            "1302",
            "1303",
            "1304",
            "1305",
            "1306",
            "1307",
            "1308",
            "1309",
            "1311",
            "1312",
            "1313",
            "1314",
            "1315",
            "1316",
            "1317",
            "1323",
            "1324",
            "1325",
            "1326",
            "1327",
            "1328",
            "1329",
            "1330",
            "1331",
            "1332",
            "1333",
            "1334",
            "1335",
            "1336",
            "1337",
            "1339",
            "1340",
            "1341",
            "1342",
            "1343",
            "1344",
            "1345",
            "1346",
            "1347",
            "1348",
            "1349",
            "1350",
            "1358",
            "1359",
            "2349",
            "2443",
            "2444",
            "2587",
            "2588",
            "2589",
            "2590",
            "2591",
            "2592",
            "2594",
            "2595",
            "2602",
            "2603",
            "2635",
            "2636",
            "2637",
            "2638",
            "2639",
            "2740",
            "2741",
            "2742",
            "2743",
            "2744",
            "2745",
            "2746",
            "2747",
            "2748",
            "2749",
            "2750",
            "2751",
            "2752",
            "2753",
            "2754",
            "2755",
            "2756",
            "2757",
            "2758",
            "2759",
            "2760",
            "2761",
            "2762",
            "2763",
            "2764",
            "2765",
            "2766",
            "2767",
            "2768",
            "2769",
            "2770",
            "2771",
            "2772",
            "2773",
            "2774",
            "2775",
            "2776",
            "2777",
            "2778",
            "2779",
            "2780",
            "2781",
            "2782",
            "2783",
            "2784",
            "2785",
            "2786",
            "2787",
            "2788",
            "2789",
            "2790",
            "2791",
            "2792",
            "2793",
            "2794",
            "2795",
            "2796",
            "2797",
            "2798",
            "2799",
            "2800",
            "2801",
            "2802",
            "2803",
            "2804",
            "2805",
            "2806",
            "2807",
            "2808",
            "2809",
            "2810",
            "2811",
            "2812",
            "2813",
            "2814",
            "2815",
            "2816",
            "2817",
            "2818",
            "2819",
            "2820",
            "2821",
            "2822",
            "2823",
            "2824",
            "2825",
            "2826",
            "2827",
            "2828",
            "2829",
            "2830",
            "2831",
            "2832",
            "2833",
            "2834",
            "2835",
            "2836",
            "2837",
            "2838",
            "2839",
            "2840",
            "2841",
            "2842",
            "2843",
            "2844",
            "2845",
            "2846",
            "2847",
            "2848",
            "2849",
            "2850",
            "2851",
            "2852",
            "2853",
            "2854",
            "2855",
            "2856",
            "2857",
            "2858",
            "2859",
            "2860",
            "2861",
            "2862",
            "2863",
            "2864",
            "2865",
            "2866",
            "2867",
            "2868",
            "2869",
            "2870",
            "2871",
            "2872",
            "2873",
            "2874",
            "2875",
            "2876",
            "2877",
            "2878",
            "2879",
            "2880",
            "2881",
            "2882",
            "2883",
            "2884",
            "2885",
            "2886",
            "2887",
            "2888",
            "3032",
            "3033",
            "3034",
            "3035",
            "3041",
            "3045",
            "3046",
            "3047",
            "3048",
            "3059",
            "3060",
            "3061",
            "3062",
            "3068",
            "3069",
            "3070",
            "3071",
            "3072",
            "3073",
            "3074"
          ],
          "num": 285
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/math/util/FastMath.java b/src/main/java/org/apache/commons/math/util/FastMath.java\nindex 3d963e5..09c7cd0 100644\n--- a/src/main/java/org/apache/commons/math/util/FastMath.java\n+++ b/src/main/java/org/apache/commons/math/util/FastMath.java\n@@ -204,22 +204,6 @@\n     private FastMath() {\n     }\n \n-    /** Compute the arc cosine of a number.\n-     * @param a number on which evaluation is done\n-     * @return arc cosine of a\n-     */\n-    public static double acos(final double a) {\n-        return Math.acos(a);\n-    }\n-\n-    /** Compute the arc sine of a number.\n-     * @param a number on which evaluation is done\n-     * @return arc sine of a\n-     */\n-    public static double asin(final double a) {\n-        return Math.asin(a);\n-    }\n-\n     /** Compute the square root of a number.\n      * @param a number on which evaluation is done\n      * @return square root of a\n@@ -441,6 +425,10 @@\n             intVal \u003d (int) -x;\n \n             if (intVal \u003e 746) {\n+                if (hiPrec !\u003d null) {\n+                    hiPrec[0] \u003d 0.0;\n+                    hiPrec[1] \u003d 0.0;\n+                }\n                 return 0.0;\n             }\n \n@@ -474,6 +462,10 @@\n             intVal \u003d (int) x;\n \n             if (intVal \u003e 709) {\n+                if (hiPrec !\u003d null) {\n+                    hiPrec[0] \u003d Double.POSITIVE_INFINITY;\n+                    hiPrec[1] \u003d 0.0;\n+                }\n                 return Double.POSITIVE_INFINITY;\n             }\n \n@@ -1171,6 +1163,14 @@\n         double xpa \u003d 1.0 + x;\n         double xpb \u003d -(xpa - 1.0 - x);\n \n+        if (x \u003d\u003d -1) {\n+            return x/0.0;   // -Infinity\n+        }\n+\n+        if (x \u003e 0 \u0026\u0026 1/x \u003d\u003d 0) { // x \u003d Infinity\n+            return x;\n+        }\n+\n         if (x\u003e1e-6 || x\u003c-1e-6) {\n             double hiPrec[] \u003d new double[2];\n \n@@ -1227,22 +1227,28 @@\n             return 1.0;\n         }\n \n-        /* Handle special case x\u003c0 */\n-        if (x \u003c 0) {\n-            if (y \u003d\u003d (long) y) {\n-                // If y is an integer\n-                return ((long)y \u0026 1) \u003d\u003d 0 ? pow(-x, y) : -pow(-x, y);\n-            } else {\n-                return Double.NaN;\n-            }\n+        if (x !\u003d x) { // X is NaN\n+            return x;\n         }\n \n+\n         if (x \u003d\u003d 0) {\n             long bits \u003d Double.doubleToLongBits(x);\n             if ((bits \u0026 0x8000000000000000L) !\u003d 0) {\n                 // -zero\n-                if (y \u003c 0 \u0026\u0026 y \u003d\u003d (long)y)\n+                long yi \u003d (long) y;\n+\n+                if (y \u003c 0 \u0026\u0026 y \u003d\u003d yi \u0026\u0026 (yi \u0026 1) \u003d\u003d 1) {\n                     return Double.NEGATIVE_INFINITY;\n+                }\n+\n+                if (y \u003c 0 \u0026\u0026 y \u003d\u003d yi \u0026\u0026 (yi \u0026 1) \u003d\u003d 1) {\n+                    return -0.0;\n+                }\n+\n+                if (y \u003e 0 \u0026\u0026 y \u003d\u003d yi \u0026\u0026 (yi \u0026 1) \u003d\u003d 1) {\n+                    return -0.0;\n+                }\n             }\n \n             if (y \u003c 0) {\n@@ -1256,6 +1262,9 @@\n         }\n \n         if (x \u003d\u003d Double.POSITIVE_INFINITY) {\n+            if (y !\u003d y) { // y is NaN\n+                return y;\n+            }\n             if (y \u003c 0.0) {\n                 return 0.0;\n             } else {\n@@ -1264,6 +1273,9 @@\n         }\n \n         if (y \u003d\u003d Double.POSITIVE_INFINITY) {\n+            if (x * x \u003d\u003d 1.0)\n+              return Double.NaN;\n+\n             if (x * x \u003e 1.0) {\n                 return Double.POSITIVE_INFINITY;\n             } else {\n@@ -1271,18 +1283,71 @@\n             }\n         }\n \n+        if (x \u003d\u003d Double.NEGATIVE_INFINITY) {\n+            if (y !\u003d y) { // y is NaN\n+                return y;\n+            }\n+\n+            if (y \u003c 0) {\n+                long yi \u003d (long) y;\n+                if (y \u003d\u003d yi \u0026\u0026 (yi \u0026 1) \u003d\u003d 1) {\n+                    return -0.0;\n+                }\n+\n+                return 0.0;\n+            }\n+\n+            if (y \u003e 0)  {\n+                long yi \u003d (long) y;\n+                if (y \u003d\u003d yi \u0026\u0026 (yi \u0026 1) \u003d\u003d 1) {\n+                    return Double.NEGATIVE_INFINITY;\n+                }\n+\n+                return Double.POSITIVE_INFINITY;\n+            }\n+        }\n+\n         if (y \u003d\u003d Double.NEGATIVE_INFINITY) {\n-            if (x*x \u003c 1.0) {\n-                return Double.NEGATIVE_INFINITY;\n+\n+            if (x * x \u003d\u003d 1.0) {\n+                return Double.NaN;\n+            }\n+\n+            if (x * x \u003c 1.0) {\n+                return Double.POSITIVE_INFINITY;\n             } else {\n                 return 0.0;\n             }\n         }\n \n+        /* Handle special case x\u003c0 */\n+        if (x \u003c 0) {\n+            // y is an even integer in this case\n+            if (y \u003e\u003d 4503599627370496.0 || y \u003c\u003d -4503599627370496.0) {\n+                return pow(-x, y);\n+            }\n+\n+            if (y \u003d\u003d (long) y) {\n+                // If y is an integer\n+                return ((long)y \u0026 1) \u003d\u003d 0 ? pow(-x, y) : -pow(-x, y);\n+            } else {\n+                return Double.NaN;\n+            }\n+        }\n+\n         /* Split y into ya and yb such that y \u003d ya+yb */\n-        double tmp1 \u003d y * 1073741824.0;\n-        final double ya \u003d y + tmp1 - tmp1;\n-        final double yb \u003d y - ya;\n+        double ya;\n+        double yb;\n+        if (y \u003c 8e298 \u0026\u0026 y \u003e -8e298) {\n+            double tmp1 \u003d y * 1073741824.0;\n+            ya \u003d y + tmp1 - tmp1;\n+            yb \u003d y - ya;\n+        } else {\n+            double tmp1 \u003d y * 9.31322574615478515625E-10;\n+            double tmp2 \u003d tmp1 * 9.31322574615478515625E-10;\n+            ya \u003d (tmp1 + tmp2 - tmp1) * 1073741824.0 * 1073741824.0;\n+            yb \u003d y - ya;\n+        }\n \n         /* Compute ln(x) */\n         log(x, lns);\n@@ -1290,8 +1355,8 @@\n         double lnb \u003d lns[1];\n \n         /* resplit lns */\n-        tmp1 \u003d lna * 1073741824.0;\n-        final double tmp2 \u003d lna + tmp1 - tmp1;\n+        double tmp1 \u003d lna * 1073741824.0;\n+        double tmp2 \u003d lna + tmp1 - tmp1;\n         lnb +\u003d lna - tmp2;\n         lna \u003d tmp2;\n \n@@ -2375,8 +2440,8 @@\n             double b \u003d -(a - pi2a + xa);\n             b +\u003d pi2b - xb;\n \n-            xa \u003d a;\n-            xb \u003d b;\n+            xa \u003d a + b;\n+            xb \u003d -(xa - a - b);\n             quadrant ^\u003d 1;\n             negative ^\u003d true;\n         }\n@@ -2412,7 +2477,6 @@\n      */\n     private static double atan(double xa, double xb, boolean leftPlane) {\n         boolean negate \u003d false;\n-        boolean recip \u003d false;\n         int idx;\n \n         if (xa \u003c 0) {\n@@ -2519,41 +2583,24 @@\n \n         double result;\n         double resultb;\n-        if (recip) {\n-            final double pi2a \u003d 1.5707963267948966;\n-            final double pi2b \u003d 6.123233995736766E-17;\n \n-            double za \u003d pi2a - ya;\n-            double zb \u003d -(za - pi2a + ya);\n-            temp \u003d za - EIGHTHES[idx];\n-            zb +\u003d -(temp - za + EIGHTHES[idx]);\n-            za \u003d temp;\n+        //result \u003d yb + eighths[idx] + ya;\n+        double za \u003d EIGHTHES[idx] + ya;\n+        double zb \u003d -(za - EIGHTHES[idx] - ya);\n+        temp \u003d za + yb;\n+        zb +\u003d -(temp - za - yb);\n+        za \u003d temp;\n \n-            zb +\u003d pi2b - yb;\n-            ya \u003d za;\n-            yb \u003d zb;\n-\n-            result \u003d yb + ya;\n-            resultb \u003d -(result - yb - ya);\n-        } else {\n-            //result \u003d yb + eighths[idx] + ya;\n-            double za \u003d EIGHTHES[idx] + ya;\n-            double zb \u003d -(za - EIGHTHES[idx] - ya);\n-            temp \u003d za + yb;\n-            zb +\u003d -(temp - za - yb);\n-            za \u003d temp;\n-\n-            result \u003d za + zb;\n-            resultb \u003d -(result - za - zb);\n-        }\n+        result \u003d za + zb;\n+        resultb \u003d -(result - za - zb);\n \n         if (leftPlane) {\n             // Result is in the left plane\n             final double pia \u003d 1.5707963267948966*2.0;\n             final double pib \u003d 6.123233995736766E-17*2.0;\n \n-            final double za \u003d pia - result;\n-            double zb \u003d -(za - pia + result);\n+            za \u003d pia - result;\n+            zb \u003d -(za - pia + result);\n             zb +\u003d pib - resultb;\n \n             result \u003d za + zb;\n@@ -2585,7 +2632,11 @@\n             double invy \u003d 1.0/y;\n \n             if (invx \u003d\u003d 0.0) { // X is infinite\n-                return 0.0;\n+                if (x \u003e 0) {\n+                    return 0.0;\n+                } else {\n+                    return Math.PI;\n+                }\n             }\n \n             if (result !\u003d result) { // y must be infinite\n@@ -2686,6 +2737,155 @@\n         return result;\n     }\n \n+    /** Compute the arc sine of a number.\n+     * @param x number on which evaluation is done\n+     * @return arc sine of x\n+     */\n+    public static double asin(double x) {\n+      if (x !\u003d x) {\n+          return Double.NaN;\n+      }\n+\n+      if (x \u003e 1.0 || x \u003c -1.0) {\n+          return Double.NaN;\n+      }\n+\n+      if (x \u003d\u003d 1.0) {\n+          return Math.PI/2.0;\n+      }\n+\n+      if (x \u003d\u003d -1.0) {\n+          return -Math.PI/2.0;\n+      }\n+\n+      /* Compute asin(x) \u003d atan(x/sqrt(1-x*x)) */\n+\n+      /* Split x */\n+      double temp \u003d x * 1073741824.0;\n+      final double xa \u003d x + temp - temp;\n+      final double xb \u003d x - xa;\n+\n+      /* Square it */\n+      double ya \u003d xa*xa;\n+      double yb \u003d xa*xb*2.0 + xb*xb;\n+\n+      /* Subtract from 1 */\n+      ya \u003d -ya;\n+      yb \u003d -yb;\n+\n+      double za \u003d 1.0 + ya;\n+      double zb \u003d -(za - 1.0 - ya);\n+\n+      temp \u003d za + yb;\n+      zb +\u003d -(temp - za - yb);\n+      za \u003d temp;\n+\n+      /* Square root */\n+      double y;\n+      y \u003d sqrt(za);\n+      temp \u003d y * 1073741824.0;\n+      ya \u003d y + temp - temp;\n+      yb \u003d y - ya;\n+\n+      /* Extend precision of sqrt */\n+      yb +\u003d (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);\n+\n+      /* Contribution of zb to sqrt */\n+      double dx \u003d zb / (2.0*y);\n+\n+      // Compute ratio r \u003d x/y\n+      double r \u003d x/y;\n+      temp \u003d r * 1073741824.0;\n+      double ra \u003d r + temp - temp;\n+      double rb \u003d r - ra;\n+\n+      rb +\u003d (x - ra*ya - ra*yb - rb*ya - rb*yb) / y;  // Correct for rounding in division\n+      rb +\u003d -x * dx / y / y;  // Add in effect additional bits of sqrt.\n+\n+      temp \u003d ra + rb;\n+      rb \u003d -(temp - ra - rb);\n+      ra \u003d temp;\n+\n+      return atan(ra, rb, false);\n+    }\n+\n+    /** Compute the arc cosine of a number.\n+     * @param x number on which evaluation is done\n+     * @return arc cosine of x\n+     */\n+    public static double acos(double x) {\n+      if (x !\u003d x) {\n+          return Double.NaN;\n+      }\n+\n+      if (x \u003e 1.0 || x \u003c -1.0) {\n+          return Double.NaN;\n+      }\n+\n+      if (x \u003d\u003d -1.0) {\n+          return Math.PI;\n+      }\n+\n+      if (x \u003d\u003d 1.0) {\n+          return 0.0;\n+      }\n+\n+      if (x \u003d\u003d 0) {\n+          return Math.PI/2.0;\n+      }\n+\n+      /* Compute acos(x) \u003d atan(sqrt(1-x*x)/x) */\n+\n+      /* Split x */\n+      double temp \u003d x * 1073741824.0;\n+      final double xa \u003d x + temp - temp;\n+      final double xb \u003d x - xa;\n+\n+      /* Square it */\n+      double ya \u003d xa*xa;\n+      double yb \u003d xa*xb*2.0 + xb*xb;\n+\n+      /* Subtract from 1 */\n+      ya \u003d -ya;\n+      yb \u003d -yb;\n+\n+      double za \u003d 1.0 + ya;\n+      double zb \u003d -(za - 1.0 - ya);\n+\n+      temp \u003d za + yb;\n+      zb +\u003d -(temp - za - yb);\n+      za \u003d temp;\n+\n+      /* Square root */\n+      double y \u003d sqrt(za);\n+      temp \u003d y * 1073741824.0;\n+      ya \u003d y + temp - temp;\n+      yb \u003d y - ya;\n+\n+      /* Extend precision of sqrt */\n+      yb +\u003d (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);\n+\n+      /* Contribution of zb to sqrt */\n+      yb +\u003d zb / (2.0*y);\n+      y \u003d ya+yb;\n+      yb \u003d -(y - ya - yb);\n+\n+      // Compute ratio r \u003d y/x\n+      double r \u003d y/x;\n+      temp \u003d r * 1073741824.0;\n+      double ra \u003d r + temp - temp;\n+      double rb \u003d r - ra;\n+\n+      rb +\u003d (y - ra*xa - ra*xb - rb*xa - rb*xb) / x;  // Correct for rounding in division\n+      rb +\u003d yb / x;  // Add in effect additional bits of sqrt.\n+\n+      temp \u003d ra + rb;\n+      rb \u003d -(temp - ra - rb);\n+      ra \u003d temp;\n+\n+      return atan(ra, rb, x\u003c0);\n+    }\n+\n     /**\n      *  Convert degrees to radians, with error of less than 0.5 ULP\n      *  @param x angle in degrees\n@@ -2829,15 +3029,23 @@\n     public static double floor(double x) {\n         long y;\n \n+        if (x !\u003d x) { // NaN\n+            return x;\n+        }\n+\n         if (x \u003e\u003d 4503599627370496.0 || x \u003c\u003d -4503599627370496.0) {\n             return x;\n         }\n \n         y \u003d (long) x;\n-        if (x \u003c 0) {\n+        if (x \u003c 0 \u0026\u0026 y !\u003d x) {\n             y--;\n         }\n \n+        if (y \u003d\u003d 0) {\n+            return x*y;\n+        }\n+\n         return (double) y;\n     }\n \n@@ -2848,12 +3056,22 @@\n     public static double ceil(double x) {\n         double y;\n \n+        if (x !\u003d x) { // NaN\n+            return x;\n+        }\n+\n         y \u003d floor(x);\n         if (y \u003d\u003d x) {\n             return y;\n         }\n \n-        return y + 1.0;\n+        y +\u003d 1.0;\n+\n+        if (y \u003d\u003d 0) {\n+            return x*y;\n+        }\n+\n+        return y;\n     }\n \n     /** Get the whole number that is the nearest to x, or the even one if x is exactly half way between two integers.\n",
      "operations": [
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [38911,38976]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [38986,39058]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [40522,40579]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "IfStatement [41874,42448]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [43248,43258]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [43267,43277]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "IfStatement [43286,43659]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "VariableDeclarationStatement [43803,43836]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [83398,83448]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [83456,83519]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [83527,83580]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [83588,83643]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [83722,83753]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [83760,83794]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [83801,83826]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [83856,83874]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [83881,83911]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [83947,83956]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [83963,83972]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [83980,84001]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [84008,84037]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [84045,84060]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [84067,84091]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [84098,84108]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [84140,84149]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [84156,84169]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [84176,84200]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [84207,84228]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [84235,84247]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [84292,84339]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [84386,84411]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [84450,84465]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [84472,84496]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [84503,84531]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [84538,84557]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [84565,84611]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [84655,84677]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [84728,84743]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [84750,84773]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [84780,84790]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ReturnStatement [84798,84825]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [85015,85065]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [85073,85136]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [85144,85194]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [85202,85247]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [85255,85306]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [85385,85416]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [85423,85457]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [85464,85489]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [85519,85537]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [85544,85574]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [85610,85619]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [85626,85635]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [85643,85664]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [85671,85700]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [85708,85723]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [85730,85754]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [85761,85771]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [85803,85823]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [85830,85854]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [85861,85882]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [85889,85901]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [85946,85993]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [86040,86059]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [86066,86076]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [86083,86103]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [86142,86157]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [86164,86188]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [86195,86223]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [86230,86249]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [86257,86303]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [86347,86360]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [86411,86426]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [86433,86456]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [86463,86473]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ReturnStatement [86481,86506]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [91208,91260]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "IfStatement [91451,91498]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [91792,91844]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [91931,91940]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [91950,91997]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "InfixExpression [41878,41907]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Block [41909,42448]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "InfixExpression [43290,43313]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Block [43315,43429]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Block [43435,43659]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "PrimitiveType: double [43803,43809]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "VariableDeclarationFragment [43810,43835]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "InfixExpression [91396,91411]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "InfixExpression [91455,91461]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Block [91463,91498]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [41387,41452]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [41660,41710]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [41923,41988]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [42002,42192]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "IfStatement [42206,42438]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [42508,42576]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [42852,42959]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "ExpressionStatement [43373,43394]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [43407,43419]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [43449,43494]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [43507,43555]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [43568,43624]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "ExpressionStatement [43637,43649]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [75135,75154]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "ExpressionStatement [79956,79974]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "ExpressionStatement [79987,80013]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "INFIX_EXPRESSION_OPERATOR: \u0026\u0026 [91402,91404]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "InfixExpression [91405,91411]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "ReturnStatement [91477,91488]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "InfixExpression [42210,42215]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Block [42218,42438]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Assignment [43373,43393]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Assignment [43637,43648]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Assignment [79956,79973]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Assignment [79987,80012]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: x [91396,91397]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "InfixExpression [91484,91487]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [15374,15487]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [16594,16728]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [40750,40769]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [40916,41007]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [41025,41116]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [42236,42255]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "IfStatement [42272,42374]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ReturnStatement [42392,42424]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ReturnStatement [42625,42657]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "ASSIGNMENT_OPERATOR: \u003d [43376,43377]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "ASSIGNMENT_OPERATOR: \u003d [43640,43641]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "InfixExpression [75116,75121]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "ASSIGNMENT_OPERATOR: \u003d [79959,79960]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "ASSIGNMENT_OPERATOR: \u003d [79990,79991]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "IfStatement [80724,80847]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "INFIX_EXPRESSION_OPERATOR: * [91485,91486]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: y [91486,91487]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "InfixExpression [40791,40824]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Block [40826,40898]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "InfixExpression [42276,42300]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Block [42302,42374]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "INFIX_EXPRESSION_OPERATOR: + [75118,75119]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: b [75120,75121]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "InfixExpression [80728,80733]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Block [80735,80786]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Block [80792,80847]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "INFIX_EXPRESSION_OPERATOR: \u0026\u0026 [40808,40810]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "InfixExpression [40811,40824]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ParenthesizedExpression [40811,40819]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "NumberLiteral: 1 [40823,40824]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: yi [40805,40807]"
        },
        {
          "type": "delete-tree",
          "from": "CastExpression [40975,40982]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: final [41946,41951]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "PrimitiveType: double [41952,41958]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "VariableDeclarationFragment [41959,41979]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "VariableDeclarationStatement [41946,41980]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: final [41989,41994]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "PrimitiveType: double [41995,42001]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "VariableDeclarationFragment [42002,42013]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "VariableDeclarationStatement [41989,42014]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "ASSIGNMENT_OPERATOR: \u003d [42163,42164]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Assignment [42158,42183]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "ExpressionStatement [42158,42184]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: final [42193,42198]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [73485,73492]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [74446,74468]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: recip [77868,77873]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [77889,77928]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [77941,77983]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [77997,78019]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [78032,78062]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [78075,78101]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [78114,78149]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [78186,78202]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [78215,78223]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [78236,78244]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [78258,78275]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [78288,78318]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Block [77875,78328]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Block [78334,78650]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "IfStatement [77864,78650]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: final [78846,78851]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "PrimitiveType: double [78852,78858]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "VariableDeclarationFragment [78859,78876]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "VariableDeclarationStatement [78846,78877]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "PrimitiveType: double [78890,78896]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "VariableDeclarationFragment [78897,78922]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "VariableDeclarationStatement [78890,78923]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: final [8086,8091]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ReturnStatement [8112,8132]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: final [7872,7877]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ReturnStatement [7898,7918]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "INFIX_EXPRESSION_OPERATOR: + [87253,87254]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "NumberLiteral: 1.0 [87255,87258]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "InfixExpression [87251,87258]",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        }
      ]
    }
  ],
  "inducing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [
        "cos"
      ],
      "num": 1
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  },
  "trigger_tests": [],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/math/util/FastMath.java",
        "src/main/java/org/apache/commons/math/util/FastMath.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "pow"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "pow"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "1326"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "1326"
          ],
          "num": 1
        }
      ],
      "diff": "diff -u -r data/changesInfo//Math_15/properties/modified_classes/inducing/src/main/java/org/apache/commons/math/util/FastMath.java data/changesInfo//Math_15/cleaned/fixing/src/main/java/org/apache/commons/math/util/FastMath.java\n--- data/changesInfo//Math_15/properties/modified_classes/inducing/src/main/java/org/apache/commons/math/util/FastMath.java\t2023-08-25 13:44:06.422881402 +0800\n+++ data/changesInfo//Math_15/cleaned/fixing/src/main/java/org/apache/commons/math/util/FastMath.java\t2023-06-20 22:19:40.444978476 +0800\n@@ -1323,7 +1323,7 @@\n         /* Handle special case x\u003c0 */\n         if (x \u003c 0) {\n             // y is an even integer in this case\n-            if (y \u003e\u003d 4503599627370496.0 || y \u003c\u003d -4503599627370496.0) {\n+            if (y \u003e\u003d 2 * 4503599627370496.0 || y \u003c\u003d -(2 * 4503599627370496.0)) {\n                 return pow(-x, y);\n             }\n \n",
      "operations": [
        {
          "type": "insert-node",
          "from": "",
          "to": "InfixExpression [42861,42883]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "NumberLiteral: 2 [42861,42862]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "INFIX_EXPRESSION_OPERATOR: * [42863,42864]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "ParenthesizedExpression [42893,42917]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "InfixExpression [42894,42916]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "NumberLiteral: 2 [42894,42895]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "INFIX_EXPRESSION_OPERATOR: * [42896,42897]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  }
}