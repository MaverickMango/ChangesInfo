{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "/home/liumengjiao/Desktop/CI/Benchmark/data/changesInfo/",
  "properties": {
    "trigger.tests": "org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369",
    "test.dir": "src/test/java",
    "clz.modified": "org.apache.commons.math.analysis.solvers.BisectionSolver",
    "src.dir": "src/main/java"
  },
  "timeoutSecond": 100,
  "proj": "Math",
  "id": "70",
  "workingDir": "../bugs/Math_70_buggy",
  "buggyCommit": "f184aeb7810bed8c89b2c8cca4f8164aef535e56",
  "inducingCommit": "583dffc0ee383e9b5e1e08c574de10db8270fdb7",
  "originalCommit": "2466ed1d8402459cb2383a6fdb9188fce61320c8",
  "bug_name": "Math_70",
  "derive": "defects4j",
  "original_fixing_commit": "f41fcd85ca62a2109a6e550be0353d292d351213",
  "buildFiles_changed": false,
  "regression": false,
  "inducing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/math/MessagesResources_fr.java",
        "src/java/org/apache/commons/math/MessagesResources_fr.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [],
          "num": 0
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "199",
            "200",
            "201",
            "263"
          ],
          "num": 4
        },
        {
          "qualified_names": [
            "205",
            "206",
            "207",
            "264",
            "265",
            "266",
            "267",
            "268",
            "269",
            "270",
            "271",
            "272",
            "273",
            "274",
            "275"
          ],
          "num": 15
        }
      ],
      "diff": "diff --git a/src/java/org/apache/commons/math/MessagesResources_fr.java b/src/java/org/apache/commons/math/MessagesResources_fr.java\nindex 04d4654..08afd7d 100644\n--- a/src/java/org/apache/commons/math/MessagesResources_fr.java\n+++ b/src/java/org/apache/commons/math/MessagesResources_fr.java\n@@ -196,15 +196,15 @@\n       \"taille de vecteur invalide : {0} au lieu de {1} attendue\" },\n     { \"dimensions mismatch: got {0}x{1} but expected {2}x{3}\",\n       \"dimensions incoh\\u00e9rentes : {0}x{1} \\u00e0 la place de {2}x{3}\" },\n-\n-    // org.apache.commons.math.linear.BigMatrixImpl\n-    // org.apache.commons.math.linear.RealMatrixImpl\n     { \"matrix must have at least one row\",\n       \"une matrice doit comporter au moins une ligne\" },\n     { \"matrix must have at least one column\",\n       \"une matrice doit comporter au moins une colonne\" },\n     { \"some rows have length {0} while others have length {1}\",\n       \"certaines ligne ont une longueur de {0} alors que d\u0027\u0027autres ont une longueur de {1}\" },\n+\n+    // org.apache.commons.math.linear.BigMatrixImpl\n+    // org.apache.commons.math.linear.RealMatrixImpl\n     { \"row index {0} out of allowed range [{1}, {2}]\",\n       \"index de ligne {0} hors de la plage autoris\\u00e9e [{1}, {2}]\" },\n     { \"column index {0} out of allowed range [{1}, {2}]\",\n@@ -261,6 +261,18 @@\n    { \"identical abscissas x[{0}] \u003d\u003d x[{1}] \u003d\u003d {2} cause division by zero\",\n      \"division par z\\u00e9ro caus\\u00e9e par les abscisses identiques x[{0}] \u003d\u003d x[{1}] \u003d\u003d {2}\" },\n \n+   // org.apache.commons.math.analysis.UnivariateRealSolverImpl\n+   { \"function to solve cannot be null\",\n+     \"la fonction \\u00e0 r\\u00e9soudre ne peux pas \\u00eatre nulle\" },\n+\n+   // org.apache.commons.math.analysis.LaguerreSolver\n+   { \"function is not polynomial\",\n+     \"la fonction n\u0027\u0027est pas p\\u00f4lynomiale\" },\n+\n+   // org.apache.commons.math.analysis.NewtonSolver\n+   { \"function is not differentiable\",\n+     \"la fonction n\u0027\u0027est pas diff\\u00e9rentiable\" },\n+\n    // org.apache.commons.math.fraction.Fraction\n    { \"zero denominator in fraction {0}/{1}\",\n      \"d\\u00e9nominateur null dans le nombre rationnel {0}/{1}\" },\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "ArrayInitializer [13354,13461]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ArrayInitializer [13521,13601]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ArrayInitializer [13659,13746]"
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/math/analysis/BisectionSolver.java",
        "src/java/org/apache/commons/math/analysis/BisectionSolver.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.math.analysis.BisectionSolver:solve:[double min, double max, double initial]:double",
            "org.apache.commons.math.analysis.BisectionSolver:solve:[double min, double max]:double"
          ],
          "num": 2
        },
        {
          "qualified_names": [
            "org.apache.commons.math.analysis.BisectionSolver:BisectionSolver:[]:null",
            "org.apache.commons.math.analysis.BisectionSolver:solve:[final UnivariateRealFunction f, double min, double max, double initial]:double",
            "org.apache.commons.math.analysis.BisectionSolver:solve:[double min, double max]:double",
            "org.apache.commons.math.analysis.BisectionSolver:solve:[final UnivariateRealFunction f, double min, double max]:double",
            "org.apache.commons.math.analysis.BisectionSolver:BisectionSolver:[UnivariateRealFunction f]:null",
            "org.apache.commons.math.analysis.BisectionSolver:solve:[double min, double max, double initial]:double"
          ],
          "num": 6
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "33",
            "45",
            "47",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "58",
            "59",
            "62",
            "63",
            "64",
            "65",
            "66",
            "67",
            "68",
            "69",
            "70",
            "71",
            "72",
            "73",
            "74",
            "75"
          ],
          "num": 26
        },
        {
          "qualified_names": [
            "33",
            "39",
            "40",
            "41",
            "42",
            "44",
            "50",
            "53",
            "54",
            "55",
            "56",
            "57",
            "58",
            "61",
            "64",
            "65",
            "66",
            "67",
            "68",
            "69",
            "70",
            "71",
            "72",
            "73",
            "74",
            "75",
            "76",
            "77",
            "78",
            "79",
            "80"
          ],
          "num": 31
        }
      ],
      "diff": "diff --git a/src/java/org/apache/commons/math/analysis/BisectionSolver.java b/src/java/org/apache/commons/math/analysis/BisectionSolver.java\nindex 3488b55..6f3f1e8 100644\n--- a/src/java/org/apache/commons/math/analysis/BisectionSolver.java\n+++ b/src/java/org/apache/commons/math/analysis/BisectionSolver.java\n@@ -30,49 +30,54 @@\n public class BisectionSolver extends UnivariateRealSolverImpl {\n     \n     /** Serializable version identifier */\n-    private static final long serialVersionUID \u003d 4963578633786538912L;\n+    private static final long serialVersionUID \u003d 5227509383222989438L;\n \n     /**\n      * Construct a solver for the given function.\n      * \n      * @param f function to solve.\n+     * @deprecated as of 2.0 the function to solve is passed as an argument\n+     * to the {@link #solve(UnivariateRealFunction, double, double)} or\n+     * {@link UnivariateRealSolverImpl#solve(UnivariateRealFunction, double, double, double)}\n+     * method.\n      */\n+    @Deprecated\n     public BisectionSolver(UnivariateRealFunction f) {\n         super(f, 100, 1E-6);\n     }\n \n     /**\n-     * Find a zero in the given interval.\n+     * Construct a solver.\n      * \n-     * @param min the lower bound for the interval.\n-     * @param max the upper bound for the interval.\n-     * @param initial the start value to use (ignored).\n-     * @return the value where the function is zero\n-     * @throws MaxIterationsExceededException the maximum iteration count is exceeded \n-     * @throws FunctionEvaluationException if an error occurs evaluating\n-     *  the function\n-     * @throws IllegalArgumentException if min is not less than max\n      */\n+    public BisectionSolver() {\n+        super(100, 1E-6);\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Deprecated\n     public double solve(double min, double max, double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n-          \n-        return solve(min, max);\n+        return solve(f, min, max);\n     }\n     \n-    /**\n-     * Find a zero root in the given interval.\n-     * \n-     * @param min the lower bound for the interval\n-     * @param max the upper bound for the interval\n-     * @return the value where the function is zero\n-     * @throws MaxIterationsExceededException if the maximum iteration count is exceeded.\n-     * @throws FunctionEvaluationException if an error occurs evaluating the\n-     * function\n-     * @throws IllegalArgumentException if min is not less than max\n-     */\n-    public double solve(double min, double max) throws MaxIterationsExceededException,\n-        FunctionEvaluationException {\n-        \n+    /** {@inheritDoc} */\n+    @Deprecated\n+    public double solve(double min, double max)\n+        throws MaxIterationsExceededException, FunctionEvaluationException {\n+        return solve(f, min, max);\n+    }\n+\n+    /** {@inheritDoc} */\n+    public double solve(final UnivariateRealFunction f, double min, double max, double initial)\n+        throws MaxIterationsExceededException, FunctionEvaluationException {\n+        return solve(min, max);\n+    }\n+\n+    /** {@inheritDoc} */\n+    public double solve(final UnivariateRealFunction f, double min, double max)\n+        throws MaxIterationsExceededException, FunctionEvaluationException {\n+            \n         clearResult();\n         verifyInterval(min,max);\n         double m;\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [1898,2007]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [2449,2680]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "MethodDeclaration [2686,3713]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Javadoc [1425,1786]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MarkerAnnotation [1791,1802]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [2013,2033]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MarkerAnnotation [2038,2049]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [2241,2261]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MarkerAnnotation [2266,2277]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [2686,2706]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: public [2711,2717]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "PrimitiveType: double [2718,2724]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: solve [2725,2730]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SingleVariableDeclaration [2731,2761]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SingleVariableDeclaration [2763,2773]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SingleVariableDeclaration [2775,2785]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SimpleType [2802,2832]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SimpleType [2834,2861]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Block [2862,3713]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [1529,1778]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ReturnStatement [2411,2437]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: f [2212,2213]"
        },
        {
          "type": "delete-node",
          "from": "Javadoc [1425,1529]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "Javadoc [1625,2147]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "Javadoc [2347,2818]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/math/analysis/BrentSolver.java",
        "src/java/org/apache/commons/math/analysis/BrentSolver.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.math.analysis.BrentSolver:solve:[double x0, double y0, double x1, double y1, double x2, double y2]:double",
            "org.apache.commons.math.analysis.BrentSolver:solve:[double min, double max]:double",
            "org.apache.commons.math.analysis.BrentSolver:solve:[double min, double max, double initial]:double"
          ],
          "num": 3
        },
        {
          "qualified_names": [
            "org.apache.commons.math.analysis.BrentSolver:BrentSolver:[UnivariateRealFunction f]:null",
            "org.apache.commons.math.analysis.BrentSolver:solve:[final UnivariateRealFunction f, double x0, double y0, double x1, double y1, double x2, double y2]:double",
            "org.apache.commons.math.analysis.BrentSolver:solve:[final UnivariateRealFunction f, final double min, final double max, final double initial]:double",
            "org.apache.commons.math.analysis.BrentSolver:solve:[double min, double max, double initial]:double",
            "org.apache.commons.math.analysis.BrentSolver:BrentSolver:[]:null",
            "org.apache.commons.math.analysis.BrentSolver:solve:[final UnivariateRealFunction f, final double min, final double max]:double",
            "org.apache.commons.math.analysis.BrentSolver:solve:[double min, double max]:double"
          ],
          "num": 7
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "34",
            "64",
            "89",
            "101",
            "105",
            "125",
            "155",
            "169",
            "184"
          ],
          "num": 9
        },
        {
          "qualified_names": [
            "34",
            "40",
            "41",
            "42",
            "43",
            "45",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57",
            "58",
            "59",
            "60",
            "61",
            "62",
            "63",
            "64",
            "65",
            "66",
            "67",
            "68",
            "69",
            "70",
            "71",
            "78",
            "91",
            "92",
            "117",
            "129",
            "133",
            "153",
            "154",
            "155",
            "185",
            "200",
            "215",
            "216"
          ],
          "num": 40
        }
      ],
      "diff": "diff --git a/src/java/org/apache/commons/math/analysis/BrentSolver.java b/src/java/org/apache/commons/math/analysis/BrentSolver.java\nindex 57f64a9..cec1ea2 100644\n--- a/src/java/org/apache/commons/math/analysis/BrentSolver.java\n+++ b/src/java/org/apache/commons/math/analysis/BrentSolver.java\n@@ -31,24 +31,51 @@\n public class BrentSolver extends UnivariateRealSolverImpl {\n     \n     /** Serializable version identifier */\n-    private static final long serialVersionUID \u003d -2136672307739067002L;\n+    private static final long serialVersionUID \u003d 7694577816772532779L;\n \n     /**\n      * Construct a solver for the given function.\n      * \n      * @param f function to solve.\n+     * @deprecated as of 2.0 the function to solve is passed as an argument\n+     * to the {@link #solve(UnivariateRealFunction, double, double)} or\n+     * {@link UnivariateRealSolverImpl#solve(UnivariateRealFunction, double, double, double)}\n+     * method.\n      */\n+    @Deprecated\n     public BrentSolver(UnivariateRealFunction f) {\n         super(f, 100, 1E-6);\n     }\n \n     /**\n+     * Construct a solver.\n+     */\n+    public BrentSolver() {\n+        super(100, 1E-6);\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Deprecated\n+    public double solve(double min, double max)\n+        throws MaxIterationsExceededException, FunctionEvaluationException {\n+        return solve(f, min, max);\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Deprecated\n+    public double solve(double min, double max, double initial)\n+        throws MaxIterationsExceededException, FunctionEvaluationException {\n+        return solve(f, min, max, initial);\n+    }\n+\n+    /**\n      * Find a zero in the given interval with an initial guess.\n      * \u003cp\u003eThrows \u003ccode\u003eIllegalArgumentException\u003c/code\u003e if the values of the\n      * function at the three points have the same sign (note that it is\n      * allowed to have endpoints with the same sign if the initial point has\n      * opposite sign function-wise).\u003c/p\u003e\n      * \n+     * @param f function to solve.\n      * @param min the lower bound for the interval.\n      * @param max the upper bound for the interval.\n      * @param initial the start value to use (must be set to min if no\n@@ -61,7 +88,8 @@\n      * @throws IllegalArgumentException if initial is not between min and max\n      * (even if it \u003cem\u003eis\u003c/em\u003e a root)\n      */\n-    public double solve(double min, double max, double initial)\n+    public double solve(final UnivariateRealFunction f,\n+                        final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n         if (((initial - min) * (max -initial)) \u003c 0) {\n@@ -86,7 +114,7 @@\n \n         // reduce interval if min and initial bracket the root\n         if (yInitial * yMin \u003c 0) {\n-            return solve(min, yMin, initial, yInitial, min, yMin);\n+            return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n \n         // return the second endpoint if it is good enough\n@@ -98,11 +126,11 @@\n \n         // reduce interval if initial and max bracket the root\n         if (yInitial * yMax \u003c 0) {\n-            return solve(initial, yInitial, max, yMax, initial, yInitial);\n+            return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n         // full Brent algorithm starting with provided initial guess\n-        return solve(min, yMin, max, yMax, initial, yInitial);\n+        return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n     \n@@ -122,7 +150,9 @@\n      * @throws IllegalArgumentException if min is not less than max or the\n      * signs of the values of the function at the endpoints are not opposites\n      */\n-    public double solve(double min, double max) throws MaxIterationsExceededException, \n+    public double solve(final UnivariateRealFunction f,\n+                        final double min, final double max)\n+        throws MaxIterationsExceededException, \n         FunctionEvaluationException {\n         \n         clearResult();\n@@ -152,7 +182,7 @@\n             }\n         } else if (sign \u003c 0){\n             // solve using only the first endpoint as initial guess\n-            ret \u003d solve(min, yMin, max, yMax, min, yMin);\n+            ret \u003d solve(f, min, yMin, max, yMax, min, yMin);\n         } else {\n             // either min or max is a root\n             if (yMin \u003d\u003d 0.0) {\n@@ -167,6 +197,7 @@\n         \n     /**\n      * Find a zero starting search according to the three provided points.\n+     * @param f the function to solve\n      * @param x0 old approximation for the root\n      * @param y0 function value at the approximation for the root\n      * @param x1 last calculated approximation for the root\n@@ -181,7 +212,8 @@\n      * @throws FunctionEvaluationException if an error occurs evaluating\n      * the function \n      */\n-    private double solve(double x0, double y0,\n+    private double solve(final UnivariateRealFunction f,\n+                         double x0, double y0,\n                          double x1, double y1,\n                          double x2, double y2)\n     throws MaxIterationsExceededException, FunctionEvaluationException {\n",
      "operations": [
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [1947,2044]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "MethodDeclaration [2491,5110]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "MethodDeclaration [5120,7419]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Javadoc [1478,1839]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MarkerAnnotation [1844,1855]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [2050,2070]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MarkerAnnotation [2075,2086]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [2258,2278]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MarkerAnnotation [2283,2294]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [2491,3439]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: public [3444,3450]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "PrimitiveType: double [3451,3457]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: solve [3458,3463]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SingleVariableDeclaration [3464,3494]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SingleVariableDeclaration [3520,3536]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SingleVariableDeclaration [3538,3554]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SingleVariableDeclaration [3556,3576]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SimpleType [3593,3623]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SimpleType [3625,3652]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Block [3653,5110]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [5120,5864]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: public [5869,5875]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "PrimitiveType: double [5876,5882]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: solve [5883,5888]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SingleVariableDeclaration [5889,5919]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SingleVariableDeclaration [5945,5961]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SingleVariableDeclaration [5963,5979]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SimpleType [5996,6026]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SimpleType [6037,6064]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Block [6065,7419]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SingleVariableDeclaration [8281,8311]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "NumberLiteral: 7694577816772532779L [1451,1471]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [1582,1831]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ReturnStatement [2220,2246]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ReturnStatement [2444,2479]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [7519,7549]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: f [5059,5060]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: f [4506,4507]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: f [4905,4906]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: f [7166,7167]"
        },
        {
          "type": "delete-tree",
          "from": "PrefixExpression [1451,1472]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Javadoc [1479,1583]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "Javadoc [4186,4930]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "Javadoc [1675,2588]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/math/analysis/LaguerreSolver.java",
        "src/java/org/apache/commons/math/analysis/LaguerreSolver.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.math.analysis.LaguerreSolver:LaguerreSolver:[UnivariateRealFunction f]:null",
            "org.apache.commons.math.analysis.LaguerreSolver:solve:[double min, double max, double initial]:double",
            "org.apache.commons.math.analysis.LaguerreSolver:solve:[double min, double max]:double"
          ],
          "num": 3
        },
        {
          "qualified_names": [
            "org.apache.commons.math.analysis.LaguerreSolver:LaguerreSolver:[]:null",
            "org.apache.commons.math.analysis.LaguerreSolver:solve:[final UnivariateRealFunction f, final double min, final double max]:double",
            "org.apache.commons.math.analysis.LaguerreSolver:LaguerreSolver:[UnivariateRealFunction f]:null",
            "org.apache.commons.math.analysis.LaguerreSolver:getPolynomialFunction:[]:PolynomialFunction",
            "org.apache.commons.math.analysis.LaguerreSolver:solve:[final double min, final double max, final double initial]:double",
            "org.apache.commons.math.analysis.LaguerreSolver:solve:[final double min, final double max]:double",
            "org.apache.commons.math.analysis.LaguerreSolver:solve:[final UnivariateRealFunction f, final double min, final double max, final double initial]:double"
          ],
          "num": 7
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "20",
            "41",
            "52",
            "55",
            "57",
            "85",
            "86",
            "89",
            "90",
            "91",
            "93",
            "95",
            "96",
            "98",
            "110",
            "120",
            "121",
            "124",
            "125",
            "126",
            "128"
          ],
          "num": 21
        },
        {
          "qualified_names": [
            "21",
            "42",
            "43",
            "44",
            "45",
            "53",
            "54",
            "55",
            "56",
            "58",
            "63",
            "65",
            "70",
            "71",
            "72",
            "73",
            "74",
            "75",
            "76",
            "80",
            "82",
            "87",
            "88",
            "89",
            "90",
            "91",
            "92",
            "93",
            "94",
            "95",
            "96",
            "97",
            "98",
            "99",
            "100",
            "106",
            "117",
            "118",
            "119",
            "122",
            "123",
            "124",
            "126",
            "128",
            "129",
            "131",
            "133",
            "145",
            "155",
            "156",
            "157",
            "158",
            "159",
            "160",
            "161",
            "162",
            "165",
            "166",
            "167",
            "169"
          ],
          "num": 60
        }
      ],
      "diff": "diff --git a/src/java/org/apache/commons/math/analysis/LaguerreSolver.java b/src/java/org/apache/commons/math/analysis/LaguerreSolver.java\nindex 546a411..13470a5 100644\n--- a/src/java/org/apache/commons/math/analysis/LaguerreSolver.java\n+++ b/src/java/org/apache/commons/math/analysis/LaguerreSolver.java\n@@ -18,6 +18,7 @@\n \n import org.apache.commons.math.ConvergenceException;\n import org.apache.commons.math.FunctionEvaluationException;\n+import org.apache.commons.math.MathRuntimeException;\n import org.apache.commons.math.MaxIterationsExceededException;\n import org.apache.commons.math.complex.Complex;\n \n@@ -38,7 +39,10 @@\n     /** serializable version identifier */\n     private static final long serialVersionUID \u003d -3775334783473775723L;\n \n-    /** polynomial function to solve */\n+    /** polynomial function to solve.\n+     * @deprecated as of 2.0 the function is not stored anymore in the instance\n+     */\n+    @Deprecated\n     private PolynomialFunction p;\n \n     /**\n@@ -46,32 +50,60 @@\n      *\n      * @param f function to solve\n      * @throws IllegalArgumentException if function is not polynomial\n+     * @deprecated as of 2.0 the function to solve is passed as an argument\n+     * to the {@link #solve(UnivariateRealFunction, double, double)} or\n+     * {@link UnivariateRealSolverImpl#solve(UnivariateRealFunction, double, double, double)}\n+     * method.\n      */\n+    @Deprecated\n     public LaguerreSolver(UnivariateRealFunction f) throws\n         IllegalArgumentException {\n-\n         super(f, 100, 1E-6);\n         if (f instanceof PolynomialFunction) {\n-            p \u003d (PolynomialFunction)f;\n+            p \u003d (PolynomialFunction) f;\n         } else {\n-            throw new IllegalArgumentException(\"Function is not polynomial.\");\n+            throw MathRuntimeException.createIllegalArgumentException(\"function is not polynomial\", null);\n         }\n     }\n \n     /**\n+     * Construct a solver.\n+     */\n+    public LaguerreSolver() {\n+        super(100, 1E-6);\n+    }\n+\n+    /**\n      * Returns a copy of the polynomial function.\n      * \n      * @return a fresh copy of the polynomial function\n+     * @deprecated as of 2.0 the function is not stored anymore within the instance.\n      */\n+    @Deprecated\n     public PolynomialFunction getPolynomialFunction() {\n         return new PolynomialFunction(p.getCoefficients());\n     }\n \n+    /** {@inheritDoc} */\n+    @Deprecated\n+    public double solve(final double min, final double max)\n+        throws ConvergenceException, FunctionEvaluationException {\n+        return solve(p, min, max);\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Deprecated\n+    public double solve(final double min, final double max, final double initial)\n+        throws ConvergenceException, FunctionEvaluationException {\n+        return solve(p, min, max, initial);\n+    }\n+\n     /**\n      * Find a real root in the given interval with initial value.\n      * \u003cp\u003e\n      * Requires bracketing condition.\u003c/p\u003e\n      * \n+     * @param f function to solve (must be polynomial)\n      * @param min the lower bound for the interval\n      * @param max the upper bound for the interval\n      * @param initial the start value to use\n@@ -82,21 +114,23 @@\n      * function\n      * @throws IllegalArgumentException if any parameters are invalid\n      */\n-    public double solve(double min, double max, double initial) throws\n-        ConvergenceException, FunctionEvaluationException {\n+    public double solve(final UnivariateRealFunction f,\n+                        final double min, final double max, final double initial)\n+        throws ConvergenceException, FunctionEvaluationException {\n \n         // check for zeros before verifying bracketing\n-        if (p.value(min) \u003d\u003d 0.0) { return min; }\n-        if (p.value(max) \u003d\u003d 0.0) { return max; }\n-        if (p.value(initial) \u003d\u003d 0.0) { return initial; }\n+        if (f.value(min) \u003d\u003d 0.0) { return min; }\n+        if (f.value(max) \u003d\u003d 0.0) { return max; }\n+        if (f.value(initial) \u003d\u003d 0.0) { return initial; }\n \n-        verifyBracketing(min, max, p);\n+        verifyBracketing(min, max, f);\n         verifySequence(min, initial, max);\n-        if (isBracketing(min, initial, p)) {\n-            return solve(min, initial);\n+        if (isBracketing(min, initial, f)) {\n+            return solve(f, min, initial);\n         } else {\n-            return solve(initial, max);\n+            return solve(f, initial, max);\n         }\n+\n     }\n \n     /**\n@@ -108,6 +142,7 @@\n      * another initial value, or, as we did here, call solveAll() to obtain\n      * all roots and pick up the one that we\u0027re looking for.\u003c/p\u003e\n      *\n+     * @param f the function to solve\n      * @param min the lower bound for the interval\n      * @param max the upper bound for the interval\n      * @return the point at which the function value is zero\n@@ -117,15 +152,21 @@\n      * function \n      * @throws IllegalArgumentException if any parameters are invalid\n      */\n-    public double solve(double min, double max) throws ConvergenceException, \n-        FunctionEvaluationException {\n+    public double solve(final UnivariateRealFunction f,\n+                        final double min, final double max)\n+        throws ConvergenceException, FunctionEvaluationException {\n+\n+        // check function type\n+        if (!(f instanceof PolynomialFunction)) {\n+            throw MathRuntimeException.createIllegalArgumentException(\"function is not polynomial\", null);\n+        }\n \n         // check for zeros before verifying bracketing\n-        if (p.value(min) \u003d\u003d 0.0) { return min; }\n-        if (p.value(max) \u003d\u003d 0.0) { return max; }\n-        verifyBracketing(min, max, p);\n+        if (f.value(min) \u003d\u003d 0.0) { return min; }\n+        if (f.value(max) \u003d\u003d 0.0) { return max; }\n+        verifyBracketing(min, max, f);\n \n-        double coefficients[] \u003d p.getCoefficients();\n+        double coefficients[] \u003d ((PolynomialFunction) f).getCoefficients();\n         Complex c[] \u003d new Complex[coefficients.length];\n         for (int i \u003d 0; i \u003c coefficients.length; i++) {\n             c[i] \u003d new Complex(coefficients[i], 0.0);\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "ImportDeclaration [959,1011]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [2748,2848]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "MethodDeclaration [3658,5025]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "MethodDeclaration [5031,7431]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [1770,1891]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MarkerAnnotation [1896,1907]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Javadoc [1947,2376]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MarkerAnnotation [2381,2392]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MarkerAnnotation [3068,3079]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [3207,3227]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MarkerAnnotation [3232,3243]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [3417,3437]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MarkerAnnotation [3442,3453]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [3658,4361]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: public [4366,4372]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "PrimitiveType: double [4373,4379]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: solve [4380,4385]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SingleVariableDeclaration [4386,4416]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SingleVariableDeclaration [4442,4458]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SingleVariableDeclaration [4460,4476]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SingleVariableDeclaration [4478,4498]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SimpleType [4515,4535]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SimpleType [4537,4564]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Block [4565,5025]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [5031,5975]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: public [5980,5986]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "PrimitiveType: double [5987,5993]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: solve [5994,5999]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SingleVariableDeclaration [6000,6030]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SingleVariableDeclaration [6056,6072]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SingleVariableDeclaration [6074,6090]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SimpleType [6107,6127]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SimpleType [6129,6156]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Block [6157,7431]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [2119,2368]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [2978,3055]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: final [3268,3273]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: final [3286,3291]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "ReturnStatement [3379,3405]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: final [3478,3483]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: final [3496,3501]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: final [3514,3519]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "ReturnStatement [3611,3646]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [6199,6357]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [6560,6627]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "MethodInvocation [3386,3404]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "MethodInvocation [3618,3645]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ThrowStatement [2632,2726]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: solve [3386,3391]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "METHOD_INVOCATION_ARGUMENTS [3392,3403]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: solve [3618,3623]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "METHOD_INVOCATION_ARGUMENTS [3624,3644]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: min [3395,3398]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: max [3400,3403]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: min [3627,3630]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: max [3632,3635]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: initial [3637,3644]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: f [4814,4815]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: f [4900,4901]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: f [6547,6548]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: f [4635,4636]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: f [4684,4685]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: f [4733,4734]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: f [6426,6427]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: f [6475,6476]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: f [4931,4932]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: f [4991,4992]"
        },
        {
          "type": "delete-tree",
          "from": "Javadoc [1717,1752]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Javadoc [1792,1964]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ThrowStatement [2204,2270]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "Javadoc [3781,4687]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [5006,5050]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "Javadoc [2544,3192]",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/math/analysis/MullerSolver.java",
        "src/java/org/apache/commons/math/analysis/MullerSolver.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.math.analysis.MullerSolver:solve:[double min, double max]:double",
            "org.apache.commons.math.analysis.MullerSolver:solve:[double min, double max, double initial]:double",
            "org.apache.commons.math.analysis.MullerSolver:solve2:[double min, double max]:double"
          ],
          "num": 3
        },
        {
          "qualified_names": [
            "org.apache.commons.math.analysis.MullerSolver:solve:[final UnivariateRealFunction f, final double min, final double max]:double",
            "org.apache.commons.math.analysis.MullerSolver:MullerSolver:[UnivariateRealFunction f]:null",
            "org.apache.commons.math.analysis.MullerSolver:solve:[final double min, final double max, final double initial]:double",
            "org.apache.commons.math.analysis.MullerSolver:MullerSolver:[]:null",
            "org.apache.commons.math.analysis.MullerSolver:solve:[final UnivariateRealFunction f, final double min, final double max, final double initial]:double",
            "org.apache.commons.math.analysis.MullerSolver:solve2:[final UnivariateRealFunction f, final double min, final double max]:double",
            "org.apache.commons.math.analysis.MullerSolver:solve:[final double min, final double max]:double",
            "org.apache.commons.math.analysis.MullerSolver:solve2:[final double min, final double max]:double"
          ],
          "num": 8
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "18",
            "39",
            "65",
            "66",
            "76",
            "78",
            "96",
            "106",
            "107",
            "212",
            "213"
          ],
          "num": 11
        },
        {
          "qualified_names": [
            "19",
            "40",
            "46",
            "47",
            "48",
            "49",
            "51",
            "57",
            "58",
            "59",
            "60",
            "61",
            "62",
            "63",
            "64",
            "65",
            "66",
            "67",
            "68",
            "69",
            "70",
            "71",
            "72",
            "73",
            "74",
            "75",
            "76",
            "77",
            "82",
            "93",
            "94",
            "95",
            "105",
            "107",
            "126",
            "136",
            "137",
            "138",
            "242",
            "243",
            "245",
            "246",
            "247",
            "248",
            "249",
            "250",
            "251",
            "252",
            "253",
            "254",
            "255",
            "256",
            "257",
            "258",
            "259",
            "260",
            "261",
            "262",
            "263",
            "264",
            "265",
            "266",
            "267",
            "268",
            "269",
            "270",
            "271",
            "272",
            "273",
            "274",
            "275",
            "276",
            "277",
            "278"
          ],
          "num": 74
        }
      ],
      "diff": "diff --git a/src/java/org/apache/commons/math/analysis/MullerSolver.java b/src/java/org/apache/commons/math/analysis/MullerSolver.java\nindex 6784e23..ed8cbdb 100644\n--- a/src/java/org/apache/commons/math/analysis/MullerSolver.java\n+++ b/src/java/org/apache/commons/math/analysis/MullerSolver.java\n@@ -16,6 +16,7 @@\n  */\n package org.apache.commons.math.analysis;\n \n+import org.apache.commons.math.ConvergenceException;\n import org.apache.commons.math.FunctionEvaluationException;\n import org.apache.commons.math.MaxIterationsExceededException;\n import org.apache.commons.math.util.MathUtils;\n@@ -36,22 +37,49 @@\n public class MullerSolver extends UnivariateRealSolverImpl {\n \n     /** serializable version identifier */\n-    private static final long serialVersionUID \u003d 6552227503458976920L;\n+    private static final long serialVersionUID \u003d 7768903775784754323L;\n \n     /**\n      * Construct a solver for the given function.\n      * \n      * @param f function to solve\n+     * @deprecated as of 2.0 the function to solve is passed as an argument\n+     * to the {@link #solve(UnivariateRealFunction, double, double)} or\n+     * {@link UnivariateRealSolverImpl#solve(UnivariateRealFunction, double, double, double)}\n+     * method.\n      */\n+    @Deprecated\n     public MullerSolver(UnivariateRealFunction f) {\n         super(f, 100, 1E-6);\n     }\n \n     /**\n+     * Construct a solver.\n+     */\n+    public MullerSolver() {\n+        super(100, 1E-6);\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Deprecated\n+    public double solve(final double min, final double max)\n+        throws ConvergenceException, FunctionEvaluationException {\n+        return solve(f, min, max);\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Deprecated\n+    public double solve(final double min, final double max, final double initial)\n+        throws ConvergenceException, FunctionEvaluationException {\n+        return solve(f, min, max, initial);\n+    }\n+\n+    /**\n      * Find a real root in the given interval with initial value.\n      * \u003cp\u003e\n      * Requires bracketing condition.\u003c/p\u003e\n      * \n+     * @param f the function to solve\n      * @param min the lower bound for the interval\n      * @param max the upper bound for the interval\n      * @param initial the start value to use\n@@ -62,8 +90,9 @@\n      * function\n      * @throws IllegalArgumentException if any parameters are invalid\n      */\n-    public double solve(double min, double max, double initial) throws\n-        MaxIterationsExceededException, FunctionEvaluationException {\n+    public double solve(final UnivariateRealFunction f,\n+                        final double min, final double max, final double initial)\n+        throws MaxIterationsExceededException, FunctionEvaluationException {\n \n         // check for zeros before verifying bracketing\n         if (f.value(min) \u003d\u003d 0.0) { return min; }\n@@ -73,9 +102,9 @@\n         verifyBracketing(min, max, f);\n         verifySequence(min, initial, max);\n         if (isBracketing(min, initial, f)) {\n-            return solve(min, initial);\n+            return solve(f, min, initial);\n         } else {\n-            return solve(initial, max);\n+            return solve(f, initial, max);\n         }\n     }\n \n@@ -94,6 +123,7 @@\n      * \u003cp\u003e\n      * The formulas here use divided differences directly.\u003c/p\u003e\n      * \n+     * @param f the function to solve\n      * @param min the lower bound for the interval\n      * @param max the upper bound for the interval\n      * @return the point at which the function value is zero\n@@ -103,8 +133,9 @@\n      * function \n      * @throws IllegalArgumentException if any parameters are invalid\n      */\n-    public double solve(double min, double max) throws MaxIterationsExceededException, \n-        FunctionEvaluationException {\n+    public double solve(final UnivariateRealFunction f,\n+                        final double min, final double max)\n+        throws MaxIterationsExceededException, FunctionEvaluationException {\n \n         // [x0, x2] is the bracketing interval in each iteration\n         // x1 is the last approximation and an interpolation point in (x0, x2)\n@@ -208,9 +239,43 @@\n      * @throws FunctionEvaluationException if an error occurs evaluating the\n      * function \n      * @throws IllegalArgumentException if any parameters are invalid\n+     * @deprecated replaced by {@link #solve2(UnivariateRealFunction, double, double)\n+     * since 2.0\n      */\n-    public double solve2(double min, double max) throws MaxIterationsExceededException, \n-        FunctionEvaluationException {\n+    @Deprecated\n+    public double solve2(final double min, final double max)\n+        throws MaxIterationsExceededException, FunctionEvaluationException {\n+        return solve2(f, min, max);\n+    }\n+\n+    /**\n+     * Find a real root in the given interval.\n+     * \u003cp\u003e\n+     * solve2() differs from solve() in the way it avoids complex operations.\n+     * Except for the initial [min, max], solve2() does not require bracketing\n+     * condition, e.g. f(x0), f(x1), f(x2) can have the same sign. If complex\n+     * number arises in the computation, we simply use its modulus as real\n+     * approximation.\u003c/p\u003e\n+     * \u003cp\u003e\n+     * Because the interval may not be bracketing, bisection alternative is\n+     * not applicable here. However in practice our treatment usually works\n+     * well, especially near real zeros where the imaginary part of complex\n+     * approximation is often negligible.\u003c/p\u003e\n+     * \u003cp\u003e\n+     * The formulas here do not use divided differences directly.\u003c/p\u003e\n+     * \n+     * @param min the lower bound for the interval\n+     * @param max the upper bound for the interval\n+     * @return the point at which the function value is zero\n+     * @throws MaxIterationsExceededException if the maximum iteration count is exceeded\n+     * or the solver detects convergence problems otherwise\n+     * @throws FunctionEvaluationException if an error occurs evaluating the\n+     * function \n+     * @throws IllegalArgumentException if any parameters are invalid\n+     */\n+    public double solve2(final UnivariateRealFunction f,\n+                         final double min, final double max)\n+        throws MaxIterationsExceededException, FunctionEvaluationException {\n \n         // x2 is the last root approximation\n         // x is the new approximation and new x2 for next round\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "ImportDeclaration [846,898]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [2241,2339]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "MethodDeclaration [2796,4165]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "MethodDeclaration [4171,8951]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "MethodDeclaration [10517,14562]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Javadoc [1772,2132]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MarkerAnnotation [2137,2148]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [2345,2365]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MarkerAnnotation [2370,2381]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SimpleType [2457,2477]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [2555,2575]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MarkerAnnotation [2580,2591]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SimpleType [2689,2709]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [2796,3492]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: public [3497,3503]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "PrimitiveType: double [3504,3510]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: solve [3511,3516]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SingleVariableDeclaration [3517,3547]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SingleVariableDeclaration [3573,3589]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SingleVariableDeclaration [3591,3607]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SingleVariableDeclaration [3609,3629]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SimpleType [3646,3676]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SimpleType [3678,3705]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Block [3706,4165]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [4171,5454]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: public [5459,5465]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "PrimitiveType: double [5466,5472]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: solve [5473,5478]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SingleVariableDeclaration [5479,5509]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SingleVariableDeclaration [5535,5551]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SingleVariableDeclaration [5553,5569]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SimpleType [5586,5616]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SimpleType [5618,5645]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Block [5646,8951]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MarkerAnnotation [10320,10331]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [10517,11772]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: public [11777,11783]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "PrimitiveType: double [11784,11790]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: solve2 [11791,11797]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SingleVariableDeclaration [11798,11828]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SingleVariableDeclaration [11855,11871]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SingleVariableDeclaration [11873,11889]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SimpleType [11906,11936]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SimpleType [11938,11965]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Block [11966,14562]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [1875,2124]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: final [2406,2411]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: final [2424,2429]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ReturnStatement [2517,2543]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: final [2616,2621]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: final [2634,2639]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: final [2652,2657]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ReturnStatement [2749,2784]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [10212,10308]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: final [10357,10362]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: final [10375,10380]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ReturnStatement [10478,10505]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: f [4072,4073]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: f [4132,4133]"
        },
        {
          "type": "delete-node",
          "from": "Javadoc [1719,1822]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "Javadoc [3172,4417]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [4473,4503]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "Javadoc [1915,2573]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [2653,2683]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/math/analysis/NewtonSolver.java",
        "src/java/org/apache/commons/math/analysis/NewtonSolver.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.math.analysis.NewtonSolver:NewtonSolver:[DifferentiableUnivariateRealFunction f]:null",
            "org.apache.commons.math.analysis.NewtonSolver:solve:[double min, double max]:double",
            "org.apache.commons.math.analysis.NewtonSolver:readObject:[java.io.ObjectInputStream in]:void",
            "org.apache.commons.math.analysis.NewtonSolver:solve:[double min, double max, double startValue]:double"
          ],
          "num": 4
        },
        {
          "qualified_names": [
            "org.apache.commons.math.analysis.NewtonSolver:solve:[final double min, final double max]:double",
            "org.apache.commons.math.analysis.NewtonSolver:solve:[final UnivariateRealFunction f, final double min, final double max]:double",
            "org.apache.commons.math.analysis.NewtonSolver:NewtonSolver:[DifferentiableUnivariateRealFunction f]:null",
            "org.apache.commons.math.analysis.NewtonSolver:solve:[final UnivariateRealFunction f, final double min, final double max, final double startValue]:double",
            "org.apache.commons.math.analysis.NewtonSolver:solve:[final double min, final double max, final double startValue]:double",
            "org.apache.commons.math.analysis.NewtonSolver:NewtonSolver:[]:null"
          ],
          "num": 6
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "20",
            "21",
            "35",
            "37",
            "38",
            "39",
            "46",
            "60",
            "61",
            "62",
            "75",
            "77",
            "79",
            "80",
            "81",
            "83",
            "84",
            "85",
            "86",
            "87",
            "88",
            "89",
            "90",
            "91",
            "92",
            "94",
            "95",
            "96",
            "98",
            "99",
            "102",
            "103",
            "104",
            "105",
            "106",
            "107",
            "108",
            "109",
            "110",
            "111",
            "112",
            "113"
          ],
          "num": 42
        },
        {
          "qualified_names": [
            "20",
            "21",
            "35",
            "40",
            "41",
            "42",
            "43",
            "45",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57",
            "58",
            "59",
            "60",
            "61",
            "62",
            "63",
            "64",
            "65",
            "66",
            "67",
            "68",
            "69",
            "83",
            "84",
            "85",
            "86",
            "99",
            "100",
            "102",
            "103",
            "106",
            "107",
            "108",
            "109",
            "110",
            "111",
            "112",
            "113",
            "114",
            "115",
            "116",
            "117",
            "118",
            "119",
            "120",
            "121",
            "122",
            "123",
            "124",
            "125",
            "126",
            "128",
            "129",
            "130",
            "131",
            "132"
          ],
          "num": 64
        }
      ],
      "diff": "diff --git a/src/java/org/apache/commons/math/analysis/NewtonSolver.java b/src/java/org/apache/commons/math/analysis/NewtonSolver.java\nindex 1526055..55f72cd 100644\n--- a/src/java/org/apache/commons/math/analysis/NewtonSolver.java\n+++ b/src/java/org/apache/commons/math/analysis/NewtonSolver.java\n@@ -17,8 +17,8 @@\n \n package org.apache.commons.math.analysis;\n \n-import java.io.IOException;\n-import org.apache.commons.math.FunctionEvaluationException; \n+import org.apache.commons.math.FunctionEvaluationException;\n+import org.apache.commons.math.MathRuntimeException;\n import org.apache.commons.math.MaxIterationsExceededException;\n \n /**\n@@ -32,18 +32,41 @@\n public class NewtonSolver extends UnivariateRealSolverImpl {\n     \n     /** Serializable version identifier */\n-    private static final long serialVersionUID \u003d 2067325783137941016L;\n+    private static final long serialVersionUID \u003d 7579593514004764309L;\n \n-    /** The first derivative of the target function. */\n-    private transient UnivariateRealFunction derivative;\n-    \n     /**\n      * Construct a solver for the given function.\n      * @param f function to solve.\n+     * @deprecated as of 2.0 the function to solve is passed as an argument\n+     * to the {@link #solve(UnivariateRealFunction, double, double)} or\n+     * {@link UnivariateRealSolverImpl#solve(UnivariateRealFunction, double, double, double)}\n+     * method.\n      */\n+    @Deprecated\n     public NewtonSolver(DifferentiableUnivariateRealFunction f) {\n         super(f, 100, 1E-6);\n-        derivative \u003d f.derivative();\n+    }\n+\n+    /**\n+     * Construct a solver.\n+     */\n+    public NewtonSolver() {\n+        super(100, 1E-6);\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Deprecated\n+    public double solve(final double min, final double max)\n+        throws MaxIterationsExceededException, \n+        FunctionEvaluationException  {\n+        return solve(f, min, max);\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Deprecated\n+    public double solve(final double min, final double max, final double startValue)\n+        throws MaxIterationsExceededException, FunctionEvaluationException  {\n+        return solve(f, min, max, startValue);\n     }\n \n     /**\n@@ -57,9 +80,10 @@\n      * function or derivative\n      * @throws IllegalArgumentException if min is not less than max\n      */\n-    public double solve(double min, double max) throws MaxIterationsExceededException, \n-        FunctionEvaluationException  {\n-        return solve(min, max, UnivariateRealSolverUtils.midpoint(min, max));\n+    public double solve(final UnivariateRealFunction f,\n+                        final double min, final double max)\n+        throws MaxIterationsExceededException, FunctionEvaluationException  {\n+        return solve(f, min, max, UnivariateRealSolverUtils.midpoint(min, max));\n     }\n \n     /**\n@@ -72,43 +96,41 @@\n      * @throws MaxIterationsExceededException if the maximum iteration count is exceeded \n      * @throws FunctionEvaluationException if an error occurs evaluating the\n      * function or derivative\n-     * @throws IllegalArgumentException if startValue is not between min and max\n+     * @throws IllegalArgumentException if startValue is not between min and max or\n+     * if function is not a {@link DifferentiableUnivariateRealFunction} instance\n      */\n-    public double solve(double min, double max, double startValue)\n+    public double solve(final UnivariateRealFunction f,\n+                        final double min, final double max, final double startValue)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n-        \n-        clearResult();\n-        verifySequence(min, startValue, max);\n \n-        double x0 \u003d startValue;\n-        double x1;\n-        \n-        int i \u003d 0;\n-        while (i \u003c maximalIterationCount) {\n-            x1 \u003d x0 - (f.value(x0) / derivative.value(x0));\n-            if (Math.abs(x1 - x0) \u003c\u003d absoluteAccuracy) {\n-                \n-                setResult(x1, i);\n-                return x1;\n+        try {\n+\n+            final UnivariateRealFunction derivative \u003d\n+                ((DifferentiableUnivariateRealFunction) f).derivative();\n+            clearResult();\n+            verifySequence(min, startValue, max);\n+\n+            double x0 \u003d startValue;\n+            double x1;\n+\n+            int i \u003d 0;\n+            while (i \u003c maximalIterationCount) {\n+\n+                x1 \u003d x0 - (f.value(x0) / derivative.value(x0));\n+                if (Math.abs(x1 - x0) \u003c\u003d absoluteAccuracy) {\n+                    setResult(x1, i);\n+                    return x1;\n+                }\n+\n+                x0 \u003d x1;\n+                ++i;\n             }\n-            \n-            x0 \u003d x1;\n-            ++i;\n+\n+            throw new MaxIterationsExceededException(maximalIterationCount);\n+        } catch (ClassCastException cce) {\n+            throw MathRuntimeException.createIllegalArgumentException(\"function is not differentiable\",\n+                                                                      null);\n         }\n-        \n-        throw new MaxIterationsExceededException(maximalIterationCount);\n     }\n     \n-    /**\n-     * Custom deserialization to initialize transient deriviate field.\n-     * \n-     * @param in serialized object input stream\n-     * @throws IOException if IO error occurs \n-     * @throws ClassNotFoundException if instantiation error occurs\n-     */\n-    private void readObject(java.io.ObjectInputStream in)\n-    throws IOException, ClassNotFoundException {\n-        in.defaultReadObject();\n-        derivative \u003d ((DifferentiableUnivariateRealFunction) f).derivative();\n-    }    \n }\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "ImportDeclaration [907,959]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [1948,2046]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "MethodDeclaration [2540,3338]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "MethodDeclaration [3344,5172]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Javadoc [1472,1825]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MarkerAnnotation [1830,1841]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [2052,2072]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MarkerAnnotation [2077,2088]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [2282,2302]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MarkerAnnotation [2307,2318]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [2540,3057]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: public [3062,3068]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "PrimitiveType: double [3069,3075]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: solve [3076,3081]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SingleVariableDeclaration [3082,3112]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SingleVariableDeclaration [3138,3154]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SingleVariableDeclaration [3156,3172]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SimpleType [3189,3219]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SimpleType [3221,3248]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Block [3250,3338]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [3344,4010]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: public [4015,4021]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "PrimitiveType: double [4022,4028]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: solve [4029,4034]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SingleVariableDeclaration [4035,4065]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SingleVariableDeclaration [4091,4107]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SingleVariableDeclaration [4109,4125]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SingleVariableDeclaration [4127,4150]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SimpleType [4167,4197]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SimpleType [4199,4226]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Block [4227,5172]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [1568,1817]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: final [2113,2118]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: final [2131,2136]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ReturnStatement [2244,2270]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: final [2343,2348]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: final [2361,2366]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: final [2379,2384]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ReturnStatement [2490,2528]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TryStatement [4238,5166]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Block [4242,4942]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "CatchClause [4943,5166]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [4257,4371]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: f [3273,3274]"
        },
        {
          "type": "delete-tree",
          "from": "ImportDeclaration [847,874]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "FieldDeclaration [1448,1556]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Javadoc [1566,1662]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [1766,1794]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "Javadoc [1806,2323]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "Javadoc [2540,3121]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [3835,4311]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/math/analysis/RiddersSolver.java",
        "src/java/org/apache/commons/math/analysis/RiddersSolver.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.math.analysis.RiddersSolver:solve:[double min, double max]:double",
            "org.apache.commons.math.analysis.RiddersSolver:solve:[double min, double max, double initial]:double"
          ],
          "num": 2
        },
        {
          "qualified_names": [
            "org.apache.commons.math.analysis.RiddersSolver:solve:[final double min, final double max, final double initial]:double",
            "org.apache.commons.math.analysis.RiddersSolver:solve:[final UnivariateRealFunction f, final double min, final double max]:double",
            "org.apache.commons.math.analysis.RiddersSolver:solve:[final UnivariateRealFunction f, final double min, final double max, final double initial]:double",
            "org.apache.commons.math.analysis.RiddersSolver:RiddersSolver:[]:null",
            "org.apache.commons.math.analysis.RiddersSolver:solve:[final double min, final double max]:double",
            "org.apache.commons.math.analysis.RiddersSolver:RiddersSolver:[UnivariateRealFunction f]:null"
          ],
          "num": 6
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "18",
            "38",
            "63",
            "64",
            "74",
            "76",
            "84",
            "93",
            "94"
          ],
          "num": 9
        },
        {
          "qualified_names": [
            "19",
            "39",
            "45",
            "46",
            "47",
            "48",
            "50",
            "56",
            "57",
            "58",
            "59",
            "60",
            "61",
            "62",
            "63",
            "64",
            "65",
            "66",
            "67",
            "68",
            "69",
            "70",
            "71",
            "72",
            "73",
            "74",
            "75",
            "76",
            "81",
            "91",
            "92",
            "93",
            "103",
            "105",
            "114",
            "123",
            "124",
            "125"
          ],
          "num": 38
        }
      ],
      "diff": "diff --git a/src/java/org/apache/commons/math/analysis/RiddersSolver.java b/src/java/org/apache/commons/math/analysis/RiddersSolver.java\nindex d46be02..58a17f8 100644\n--- a/src/java/org/apache/commons/math/analysis/RiddersSolver.java\n+++ b/src/java/org/apache/commons/math/analysis/RiddersSolver.java\n@@ -16,6 +16,7 @@\n  */\n package org.apache.commons.math.analysis;\n \n+import org.apache.commons.math.ConvergenceException;\n import org.apache.commons.math.FunctionEvaluationException;\n import org.apache.commons.math.MaxIterationsExceededException;\n import org.apache.commons.math.util.MathUtils;\n@@ -35,22 +36,49 @@\n public class RiddersSolver extends UnivariateRealSolverImpl {\n \n     /** serializable version identifier */\n-    private static final long serialVersionUID \u003d -4703139035737911735L;\n+    private static final long serialVersionUID \u003d -1556464494585337088L;\n \n     /**\n      * Construct a solver for the given function.\n      * \n      * @param f function to solve\n+     * @deprecated as of 2.0 the function to solve is passed as an argument\n+     * to the {@link #solve(UnivariateRealFunction, double, double)} or\n+     * {@link UnivariateRealSolverImpl#solve(UnivariateRealFunction, double, double, double)}\n+     * method.\n      */\n+    @Deprecated\n     public RiddersSolver(UnivariateRealFunction f) {\n         super(f, 100, 1E-6);\n     }\n \n     /**\n+     * Construct a solver.\n+     */\n+    public RiddersSolver() {\n+        super(100, 1E-6);\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Deprecated\n+    public double solve(final double min, final double max)\n+        throws ConvergenceException, FunctionEvaluationException {\n+        return solve(f, min, max);\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Deprecated\n+    public double solve(final double min, final double max, final double initial)\n+        throws ConvergenceException, FunctionEvaluationException {\n+        return solve(f, min, max, initial);\n+    }\n+\n+    /**\n      * Find a root in the given interval with initial value.\n      * \u003cp\u003e\n      * Requires bracketing condition.\u003c/p\u003e\n      * \n+     * @param f the function to solve\n      * @param min the lower bound for the interval\n      * @param max the upper bound for the interval\n      * @param initial the start value to use\n@@ -60,8 +88,9 @@\n      * function\n      * @throws IllegalArgumentException if any parameters are invalid\n      */\n-    public double solve(double min, double max, double initial) throws\n-        MaxIterationsExceededException, FunctionEvaluationException {\n+    public double solve(final UnivariateRealFunction f,\n+                        final double min, final double max, final double initial)\n+        throws MaxIterationsExceededException, FunctionEvaluationException {\n \n         // check for zeros before verifying bracketing\n         if (f.value(min) \u003d\u003d 0.0) { return min; }\n@@ -71,9 +100,9 @@\n         verifyBracketing(min, max, f);\n         verifySequence(min, initial, max);\n         if (isBracketing(min, initial, f)) {\n-            return solve(min, initial);\n+            return solve(f, min, initial);\n         } else {\n-            return solve(initial, max);\n+            return solve(f, initial, max);\n         }\n     }\n \n@@ -82,6 +111,7 @@\n      * \u003cp\u003e\n      * Requires bracketing condition.\u003c/p\u003e\n      * \n+     * @param f the function to solve\n      * @param min the lower bound for the interval\n      * @param max the upper bound for the interval\n      * @return the point at which the function value is zero\n@@ -90,8 +120,9 @@\n      * function \n      * @throws IllegalArgumentException if any parameters are invalid\n      */\n-    public double solve(double min, double max) throws MaxIterationsExceededException, \n-        FunctionEvaluationException {\n+    public double solve(final UnivariateRealFunction f,\n+                        final double min, final double max)\n+        throws MaxIterationsExceededException, FunctionEvaluationException {\n \n         // [x1, x2] is the bracketing interval in each iteration\n         // x3 is the midpoint of [x1, x2]\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "ImportDeclaration [846,898]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [2191,2290]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "MethodDeclaration [2747,4051]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "MethodDeclaration [4057,7199]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Javadoc [1721,2081]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MarkerAnnotation [2086,2097]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [2296,2316]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MarkerAnnotation [2321,2332]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SimpleType [2408,2428]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [2506,2526]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MarkerAnnotation [2531,2542]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SimpleType [2640,2660]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [2747,3378]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: public [3383,3389]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "PrimitiveType: double [3390,3396]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: solve [3397,3402]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SingleVariableDeclaration [3403,3433]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SingleVariableDeclaration [3459,3475]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SingleVariableDeclaration [3477,3493]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SingleVariableDeclaration [3495,3515]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SimpleType [3532,3562]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SimpleType [3564,3591]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Block [3592,4051]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [4057,4625]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: public [4630,4636]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "PrimitiveType: double [4637,4643]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: solve [4644,4649]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SingleVariableDeclaration [4650,4680]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SingleVariableDeclaration [4706,4722]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SingleVariableDeclaration [4724,4740]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SimpleType [4757,4787]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SimpleType [4789,4816]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Block [4817,7199]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [1824,2073]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: final [2357,2362]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: final [2375,2380]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ReturnStatement [2468,2494]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: final [2567,2572]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: final [2585,2590]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: final [2603,2608]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ReturnStatement [2700,2735]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: f [3958,3959]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: f [4018,4019]"
        },
        {
          "type": "delete-node",
          "from": "Javadoc [1668,1771]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "Javadoc [3057,3587]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [3643,3673]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "Javadoc [1865,2458]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [2538,2568]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/math/analysis/SecantSolver.java",
        "src/java/org/apache/commons/math/analysis/SecantSolver.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.math.analysis.SecantSolver:solve:[double min, double max]:double",
            "org.apache.commons.math.analysis.SecantSolver:solve:[double min, double max, double initial]:double"
          ],
          "num": 2
        },
        {
          "qualified_names": [
            "org.apache.commons.math.analysis.SecantSolver:solve:[final double min, final double max]:double",
            "org.apache.commons.math.analysis.SecantSolver:solve:[final UnivariateRealFunction f, final double min, final double max, final double initial]:double",
            "org.apache.commons.math.analysis.SecantSolver:solve:[final UnivariateRealFunction f, final double min, final double max]:double",
            "org.apache.commons.math.analysis.SecantSolver:solve:[final double min, final double max, final double initial]:double",
            "org.apache.commons.math.analysis.SecantSolver:SecantSolver:[UnivariateRealFunction f]:null",
            "org.apache.commons.math.analysis.SecantSolver:SecantSolver:[]:null"
          ],
          "num": 6
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "20",
            "44",
            "67",
            "69",
            "70",
            "84",
            "85"
          ],
          "num": 7
        },
        {
          "qualified_names": [
            "21",
            "45",
            "50",
            "51",
            "52",
            "53",
            "55",
            "61",
            "62",
            "63",
            "64",
            "65",
            "66",
            "67",
            "68",
            "69",
            "70",
            "71",
            "72",
            "73",
            "74",
            "75",
            "76",
            "77",
            "78",
            "79",
            "80",
            "81",
            "84",
            "95",
            "96",
            "98",
            "103",
            "113",
            "114",
            "115"
          ],
          "num": 36
        }
      ],
      "diff": "diff --git a/src/java/org/apache/commons/math/analysis/SecantSolver.java b/src/java/org/apache/commons/math/analysis/SecantSolver.java\nindex 59de5f6..499453e 100644\n--- a/src/java/org/apache/commons/math/analysis/SecantSolver.java\n+++ b/src/java/org/apache/commons/math/analysis/SecantSolver.java\n@@ -18,6 +18,7 @@\n \n import java.io.Serializable;\n \n+import org.apache.commons.math.ConvergenceException;\n import org.apache.commons.math.FunctionEvaluationException;\n import org.apache.commons.math.MaxIterationsExceededException;\n \n@@ -41,19 +42,46 @@\n public class SecantSolver extends UnivariateRealSolverImpl implements Serializable {\n     \n     /** Serializable version identifier */\n-    private static final long serialVersionUID \u003d 1984971194738974867L;\n+    private static final long serialVersionUID \u003d 2477470651270304246L;\n \n     /**\n      * Construct a solver for the given function.\n      * @param f function to solve.\n+     * @deprecated as of 2.0 the function to solve is passed as an argument\n+     * to the {@link #solve(UnivariateRealFunction, double, double)} or\n+     * {@link UnivariateRealSolverImpl#solve(UnivariateRealFunction, double, double, double)}\n+     * method.\n      */\n+    @Deprecated\n     public SecantSolver(UnivariateRealFunction f) {\n         super(f, 100, 1E-6);\n     }\n \n     /**\n+     * Construct a solver.\n+     */\n+    public SecantSolver() {\n+        super(100, 1E-6);\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Deprecated\n+    public double solve(final double min, final double max)\n+        throws ConvergenceException, FunctionEvaluationException {\n+        return solve(f, min, max);\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Deprecated\n+    public double solve(final double min, final double max, final double initial)\n+        throws ConvergenceException, FunctionEvaluationException {\n+        return solve(f, min, max, initial);\n+    }\n+\n+    /**\n      * Find a zero in the given interval.\n      * \n+     * @param f the function to solve\n      * @param min the lower bound for the interval\n      * @param max the upper bound for the interval\n      * @param initial the start value to use (ignored)\n@@ -64,14 +92,15 @@\n      * @throws IllegalArgumentException if min is not less than max or the\n      * signs of the values of the function at the endpoints are not opposites\n      */\n-    public double solve(double min, double max, double initial)\n+    public double solve(final UnivariateRealFunction f,\n+                        final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n-            \n-        return solve(min, max);\n+        return solve(f, min, max);\n     }\n     \n     /**\n      * Find a zero in the given interval.\n+     * @param f the function to solve\n      * @param min the lower bound for the interval.\n      * @param max the upper bound for the interval.\n      * @return the value where the function is zero\n@@ -81,8 +110,9 @@\n      * @throws IllegalArgumentException if min is not less than max or the\n      * signs of the values of the function at the endpoints are not opposites\n      */\n-    public double solve(double min, double max) throws MaxIterationsExceededException, \n-        FunctionEvaluationException {\n+    public double solve(final UnivariateRealFunction f,\n+                        final double min, final double max)\n+        throws MaxIterationsExceededException, FunctionEvaluationException {\n         \n         clearResult();\n         verifyInterval(min, max);\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "ImportDeclaration [876,928]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [2400,2498]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "MethodDeclaration [2955,3855]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "MethodDeclaration [3865,7048]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Javadoc [1938,2291]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MarkerAnnotation [2296,2307]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [2504,2524]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MarkerAnnotation [2529,2540]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SimpleType [2616,2636]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [2714,2734]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MarkerAnnotation [2739,2750]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SimpleType [2848,2868]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [2955,3599]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: public [3604,3610]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "PrimitiveType: double [3611,3617]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: solve [3618,3623]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SingleVariableDeclaration [3624,3654]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SingleVariableDeclaration [3680,3696]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SingleVariableDeclaration [3698,3714]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SingleVariableDeclaration [3716,3736]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SimpleType [3753,3783]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SimpleType [3785,3812]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Block [3813,3855]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [3865,4449]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: public [4454,4460]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "PrimitiveType: double [4461,4467]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: solve [4468,4473]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SingleVariableDeclaration [4474,4504]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SingleVariableDeclaration [4530,4546]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SingleVariableDeclaration [4548,4564]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SimpleType [4581,4611]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SimpleType [4613,4640]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Block [4641,7048]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [2034,2283]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: final [2565,2570]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: final [2583,2588]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ReturnStatement [2676,2702]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: final [2775,2780]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: final [2793,2798]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: final [2811,2816]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ReturnStatement [2908,2943]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: f [3836,3837]"
        },
        {
          "type": "delete-node",
          "from": "Javadoc [1885,1981]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "Javadoc [2882,3428]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [3484,3514]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "Javadoc [2074,2680]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [2760,2790]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java",
        "src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.math.analysis.UnivariateRealSolver:solve:[double min, double max]:double",
            "org.apache.commons.math.analysis.UnivariateRealSolver:solve:[double min, double max, double startValue]:double"
          ],
          "num": 2
        },
        {
          "qualified_names": [
            "org.apache.commons.math.analysis.UnivariateRealSolver:solve:[UnivariateRealFunction f, double min, double max, double startValue]:double",
            "org.apache.commons.math.analysis.UnivariateRealSolver:solve:[double min, double max]:double",
            "org.apache.commons.math.analysis.UnivariateRealSolver:solve:[double min, double max, double startValue]:double",
            "org.apache.commons.math.analysis.UnivariateRealSolver:solve:[UnivariateRealFunction f, double min, double max]:double",
            "org.apache.commons.math.analysis.UnivariateRealSolver:getResult:[]:double"
          ],
          "num": 5
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "160",
            "178"
          ],
          "num": 2
        },
        {
          "qualified_names": [
            "161",
            "162",
            "164",
            "169",
            "170",
            "171",
            "172",
            "173",
            "174",
            "175",
            "176",
            "177",
            "178",
            "179",
            "180",
            "181",
            "182",
            "183",
            "184",
            "185",
            "186",
            "187",
            "188",
            "202",
            "203",
            "205",
            "210",
            "211",
            "212",
            "213",
            "214",
            "215",
            "216",
            "217",
            "218",
            "219",
            "220",
            "221",
            "222",
            "223",
            "224",
            "225",
            "226",
            "227",
            "228",
            "229"
          ],
          "num": 46
        }
      ],
      "diff": "diff --git a/src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java b/src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java\nindex 3bf6dc1..1e5dae7 100644\n--- a/src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java\n+++ b/src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java\n@@ -158,11 +158,34 @@\n      * function\n      * @throws IllegalArgumentException if min \u003e max or the endpoints do not\n      * satisfy the requirements specified by the solver\n+     * @deprecated replaced by {@link #solve(UnivariateRealFunction, double, double)\n+     * since 2.0\n      */\n+    @Deprecated\n     double solve(double min, double max) throws ConvergenceException, \n         FunctionEvaluationException;\n \n     /**\n+     * Solve for a zero root in the given interval.\n+     * A solver may require that the interval brackets a single zero root.\n+     * \n+     * @param f the function to solve.\n+     * @param min the lower bound for the interval.\n+     * @param max the upper bound for the interval.\n+     * @return a value where the function is zero\n+     * @throws ConvergenceException if the maximum iteration count is exceeded\n+     * or the solver detects convergence problems otherwise.\n+     * @throws FunctionEvaluationException if an error occurs evaluating the\n+     * function\n+     * @throws IllegalArgumentException if min \u003e max or the endpoints do not\n+     * satisfy the requirements specified by the solver\n+     * @since 2.0\n+     */\n+    double solve(UnivariateRealFunction f, double min, double max)\n+        throws ConvergenceException, \n+        FunctionEvaluationException;\n+\n+    /**\n      * Solve for a zero in the given interval, start at startValue.\n      * A solver may require that the interval brackets a single zero root.\n      * \n@@ -176,11 +199,34 @@\n      * function\n      * @throws IllegalArgumentException if min \u003e max or the arguments do not\n      * satisfy the requirements specified by the solver\n+     * @deprecated replaced by {@link #solve(UnivariateRealFunction, double, double, double)\n+     * since 2.0\n      */\n+    @Deprecated\n     double solve(double min, double max, double startValue)\n         throws ConvergenceException, FunctionEvaluationException;\n \n     /**\n+     * Solve for a zero in the given interval, start at startValue.\n+     * A solver may require that the interval brackets a single zero root.\n+     * \n+     * @param f the function to solve.\n+     * @param min the lower bound for the interval.\n+     * @param max the upper bound for the interval.\n+     * @param startValue the start value to use\n+     * @return a value where the function is zero\n+     * @throws ConvergenceException if the maximum iteration count is exceeded\n+     * or the solver detects convergence problems otherwise.\n+     * @throws FunctionEvaluationException if an error occurs evaluating the\n+     * function\n+     * @throws IllegalArgumentException if min \u003e max or the arguments do not\n+     * satisfy the requirements specified by the solver\n+     * @since 2.0\n+     */\n+    double solve(UnivariateRealFunction f, double min, double max, double startValue)\n+        throws ConvergenceException, FunctionEvaluationException;\n+\n+    /**\n      * Get the result of the last run of the solver.\n      * \n      * @return the last result.\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [5801,6666]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [7660,8599]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MarkerAnnotation [5676,5687]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MarkerAnnotation [7517,7528]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [5569,5664]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [7402,7505]"
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java",
        "src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.math.analysis.UnivariateRealSolverFactory:newDefaultSolver:[UnivariateRealFunction f]:UnivariateRealSolver",
            "org.apache.commons.math.analysis.UnivariateRealSolverFactory:newNewtonSolver:[DifferentiableUnivariateRealFunction f]:UnivariateRealSolver",
            "org.apache.commons.math.analysis.UnivariateRealSolverFactory:newBisectionSolver:[UnivariateRealFunction f]:UnivariateRealSolver",
            "org.apache.commons.math.analysis.UnivariateRealSolverFactory:newSecantSolver:[UnivariateRealFunction f]:UnivariateRealSolver",
            "org.apache.commons.math.analysis.UnivariateRealSolverFactory:newBrentSolver:[UnivariateRealFunction f]:UnivariateRealSolver"
          ],
          "num": 5
        },
        {
          "qualified_names": [
            "org.apache.commons.math.analysis.UnivariateRealSolverFactory:newNewtonSolver:[]:UnivariateRealSolver",
            "org.apache.commons.math.analysis.UnivariateRealSolverFactory:newSecantSolver:[]:UnivariateRealSolver",
            "org.apache.commons.math.analysis.UnivariateRealSolverFactory:newDefaultSolver:[]:UnivariateRealSolver",
            "org.apache.commons.math.analysis.UnivariateRealSolverFactory:newBrentSolver:[]:UnivariateRealSolver",
            "org.apache.commons.math.analysis.UnivariateRealSolverFactory:newBisectionSolver:[]:UnivariateRealSolver"
          ],
          "num": 5
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "34",
            "35",
            "56",
            "58",
            "61",
            "62",
            "65",
            "67",
            "70",
            "71",
            "74",
            "76",
            "79",
            "80",
            "83",
            "85",
            "88",
            "89",
            "92",
            "94",
            "97",
            "98"
          ],
          "num": 22
        },
        {
          "qualified_names": [
            "34",
            "35",
            "56",
            "60",
            "63",
            "67",
            "70",
            "74",
            "77",
            "81",
            "84",
            "88",
            "89"
          ],
          "num": 13
        }
      ],
      "diff": "diff --git a/src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java b/src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java\nindex 74f36d8..d398a67 100644\n--- a/src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java\n+++ b/src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java\n@@ -31,8 +31,8 @@\n  * Common usage:\u003cpre\u003e\n  * SolverFactory factory \u003d UnivariateRealSolverFactory.newInstance();\u003c/p\u003e\n  *\n- * // create a Brent solver to use with a UnivariateRealFunction f\n- * BrentSolver solver \u003d factory.newBrentSolver(f);\n+ * // create a Brent solver to use\n+ * BrentSolver solver \u003d factory.newBrentSolver();\n  * \u003c/pre\u003e\n  *\n  * @version $Revision$ $Date$\n@@ -53,47 +53,38 @@\n     }\n     \n     /**\n-     * Create a new {@link UnivariateRealSolver} for the given function.  The\n+     * Create a new {@link UnivariateRealSolver}.  The\n      * actual solver returned is determined by the underlying factory.\n-     * @param f the function.\n      * @return the new solver.\n      */\n-    public abstract UnivariateRealSolver newDefaultSolver(\n-        UnivariateRealFunction f);\n+    public abstract UnivariateRealSolver newDefaultSolver();\n     \n     /**\n-     * Create a new {@link UnivariateRealSolver} for the given function.  The\n+     * Create a new {@link UnivariateRealSolver}.  The\n      * solver is an implementation of the bisection method.\n-     * @param f the function.\n      * @return the new solver.\n      */\n-    public abstract UnivariateRealSolver newBisectionSolver(\n-        UnivariateRealFunction f);\n+    public abstract UnivariateRealSolver newBisectionSolver();\n     \n     /**\n-     * Create a new {@link UnivariateRealSolver} for the given function.  The\n+     * Create a new {@link UnivariateRealSolver}.  The\n      * solver is an implementation of the Brent method.\n-     * @param f the function.\n      * @return the new solver.\n      */\n-    public abstract UnivariateRealSolver newBrentSolver(\n-        UnivariateRealFunction f);\n+    public abstract UnivariateRealSolver newBrentSolver();\n     \n     /**\n-     * Create a new {@link UnivariateRealSolver} for the given function.  The\n+     * Create a new {@link UnivariateRealSolver}.  The\n      * solver is an implementation of Newton\u0027s Method.\n-     * @param f the function.\n      * @return the new solver.\n      */\n-    public abstract UnivariateRealSolver newNewtonSolver(\n-        DifferentiableUnivariateRealFunction f);\n+    public abstract UnivariateRealSolver newNewtonSolver();\n     \n     /**\n-     * Create a new {@link UnivariateRealSolver} for the given function.  The\n+     * Create a new {@link UnivariateRealSolver}.  The\n      * solver is an implementation of the secant method.\n-     * @param f the function.\n      * @return the new solver.\n      */\n-    public abstract UnivariateRealSolver newSecantSolver(\n-        UnivariateRealFunction f);\n+    public abstract UnivariateRealSolver newSecantSolver();\n+\n }\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [1836,2065]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [2075,2295]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [2305,2517]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [2527,2739]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [2749,2963]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [1869,2184]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [2194,2500]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [2510,2808]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [2818,3130]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [3140,3440]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java",
        "src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImpl:newBrentSolver:[UnivariateRealFunction f]:UnivariateRealSolver",
            "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImpl:newSecantSolver:[UnivariateRealFunction f]:UnivariateRealSolver",
            "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImpl:newDefaultSolver:[UnivariateRealFunction f]:UnivariateRealSolver",
            "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImpl:newNewtonSolver:[DifferentiableUnivariateRealFunction f]:UnivariateRealSolver",
            "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImpl:newBisectionSolver:[UnivariateRealFunction f]:UnivariateRealSolver"
          ],
          "num": 5
        },
        {
          "qualified_names": [
            "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImpl:newBrentSolver:[]:UnivariateRealSolver",
            "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImpl:newSecantSolver:[]:UnivariateRealSolver",
            "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImpl:newDefaultSolver:[]:UnivariateRealSolver",
            "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImpl:newBisectionSolver:[]:UnivariateRealSolver",
            "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImpl:newNewtonSolver:[]:UnivariateRealSolver"
          ],
          "num": 5
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "35",
            "36",
            "37",
            "38",
            "39",
            "40",
            "41",
            "42",
            "43",
            "44",
            "45",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "58",
            "59",
            "60",
            "61",
            "62",
            "63",
            "64",
            "65",
            "68",
            "69",
            "70",
            "71",
            "72",
            "73",
            "74",
            "75",
            "76",
            "77",
            "80",
            "81",
            "82",
            "83",
            "84",
            "85",
            "86",
            "87"
          ],
          "num": 45
        },
        {
          "qualified_names": [
            "35",
            "36",
            "37",
            "40",
            "41",
            "42",
            "45",
            "46",
            "47",
            "50",
            "51",
            "52",
            "55",
            "56",
            "57"
          ],
          "num": 15
        }
      ],
      "diff": "diff --git a/src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java b/src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java\nindex 29d701b..e4b9fdd 100644\n--- a/src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java\n+++ b/src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java\n@@ -32,58 +32,28 @@\n     public UnivariateRealSolverFactoryImpl() {\n     }\n \n-    /**\n-     * Create a new {@link UnivariateRealSolver} for the given function.  The\n-     * actual solver returned is determined by the underlying factory.\n-     * \n-     * This factory returns a {@link BrentSolver} instance.\n-     *\n-     * @param f the function.\n-     * @return the new solver.\n-     */\n-    public UnivariateRealSolver newDefaultSolver(UnivariateRealFunction f) {\n-        return newBrentSolver(f);\n+    /** {@inheritDoc} */\n+    public UnivariateRealSolver newDefaultSolver() {\n+        return newBrentSolver();\n     }\n     \n-    /**\n-     * Create a new {@link UnivariateRealSolver} for the given function.  The\n-     * solver is an implementation of the bisection method.\n-     * @param f the function.\n-     * @return the new solver.\n-     */\n-    public UnivariateRealSolver newBisectionSolver(UnivariateRealFunction f) {\n-        return new BisectionSolver(f);\n+    /** {@inheritDoc} */\n+    public UnivariateRealSolver newBisectionSolver() {\n+        return new BisectionSolver();\n     }\n \n-    /**\n-     * Create a new {@link UnivariateRealSolver} for the given function.  The\n-     * solver is an implementation of the Brent method.\n-     * @param f the function.\n-     * @return the new solver.\n-     */\n-    public UnivariateRealSolver newBrentSolver(UnivariateRealFunction f) {\n-        return new BrentSolver(f);\n+    /** {@inheritDoc} */\n+    public UnivariateRealSolver newBrentSolver() {\n+        return new BrentSolver();\n     }\n     \n-    /**\n-     * Create a new {@link UnivariateRealSolver} for the given function.  The\n-     * solver is an implementation of Newton\u0027s Method.\n-     * @param f the function.\n-     * @return the new solver.\n-     */\n-    public UnivariateRealSolver newNewtonSolver(\n-        DifferentiableUnivariateRealFunction f) {\n-        \n-        return new NewtonSolver(f);\n+    /** {@inheritDoc} */\n+    public UnivariateRealSolver newNewtonSolver() {\n+        return new NewtonSolver();\n     }\n     \n-    /**\n-     * Create a new {@link UnivariateRealSolver} for the given function.  The\n-     * solver is an implementation of the secant method.\n-     * @param f the function.\n-     * @return the new solver.\n-     */\n-    public UnivariateRealSolver newSecantSolver(UnivariateRealFunction f) {\n-        return new SecantSolver(f);\n+    /** {@inheritDoc} */\n+    public UnivariateRealSolver newSecantSolver() {\n+        return new SecantSolver();\n     }\n }\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [1278,1298]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [1400,1420]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [1525,1545]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [1646,1666]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [1769,1789]"
        },
        {
          "type": "delete-tree",
          "from": "Javadoc [1278,1574]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SingleVariableDeclaration [1624,1648]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "METHOD_INVOCATION_ARGUMENTS [1682,1683]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "Javadoc [1701,1911]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SingleVariableDeclaration [1963,1987]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: f [2026,2027]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "Javadoc [2041,2247]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SingleVariableDeclaration [2295,2319]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: f [2354,2355]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "Javadoc [2373,2578]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SingleVariableDeclaration [2636,2674]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: f [2719,2720]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "Javadoc [2738,2945]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SingleVariableDeclaration [2994,3018]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: f [3054,3055]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java",
        "src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.math.analysis.UnivariateRealSolverImpl:UnivariateRealSolverImpl:[UnivariateRealFunction f, int defaultMaximalIterationCount, double defaultAbsoluteAccuracy]:null"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "org.apache.commons.math.analysis.UnivariateRealSolverImpl:UnivariateRealSolverImpl:[int defaultMaximalIterationCount, double defaultAbsoluteAccuracy]:null",
            "org.apache.commons.math.analysis.UnivariateRealSolverImpl:UnivariateRealSolverImpl:[UnivariateRealFunction f, int defaultMaximalIterationCount, double defaultAbsoluteAccuracy]:null"
          ],
          "num": 2
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "71",
            "88",
            "89",
            "91",
            "93"
          ],
          "num": 5
        },
        {
          "qualified_names": [
            "71",
            "72",
            "73",
            "74",
            "75",
            "76",
            "87",
            "88",
            "89",
            "90",
            "92",
            "99",
            "100",
            "103",
            "104",
            "105",
            "106",
            "107",
            "108",
            "109",
            "110",
            "111",
            "112",
            "113",
            "114",
            "115",
            "116",
            "117",
            "118",
            "119",
            "120",
            "121",
            "122",
            "123"
          ],
          "num": 34
        }
      ],
      "diff": "diff --git a/src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java b/src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java\nindex 04bed1e..7d1f753 100644\n--- a/src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java\n+++ b/src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java\n@@ -68,7 +68,12 @@\n     /** The last iteration count. */\n     protected int iterationCount;\n \n-    /** The function to solve. */\n+    /** The function to solve.\n+     * @deprecated as of 2.0 the function to solve is passed as an argument\n+     * to the {@link #solve(UnivariateRealFunction, double, double)} or\n+     * {@link UnivariateRealSolverImpl#solve(UnivariateRealFunction, double, double, double)}\n+     * method. */\n+    @Deprecated\n     protected UnivariateRealFunction f;\n \n     /**\n@@ -79,19 +84,43 @@\n      * @param defaultMaximalIterationCount maximum number of iterations\n      * @throws IllegalArgumentException if f is null or the \n      * defaultAbsoluteAccuracy is not valid\n+     * @deprecated as of 2.0 the function to solve is passed as an argument\n+     * to the {@link #solve(UnivariateRealFunction, double, double)} or\n+     * {@link UnivariateRealSolverImpl#solve(UnivariateRealFunction, double, double, double)}\n+     * method.\n      */\n+    @Deprecated\n     protected UnivariateRealSolverImpl(\n         UnivariateRealFunction f,\n         int defaultMaximalIterationCount,\n         double defaultAbsoluteAccuracy) {\n         \n-        super();\n-        \n         if (f \u003d\u003d null) {\n-            throw new IllegalArgumentException(\"function can not be null.\");\n+            throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\",\n+                                                                      null);\n         }\n-        \n         this.f \u003d f;\n+\n+        this.defaultAbsoluteAccuracy \u003d defaultAbsoluteAccuracy;\n+        this.defaultRelativeAccuracy \u003d 1E-14;\n+        this.defaultFunctionValueAccuracy \u003d 1E-15;\n+        this.absoluteAccuracy \u003d defaultAbsoluteAccuracy;\n+        this.relativeAccuracy \u003d defaultRelativeAccuracy;\n+        this.functionValueAccuracy \u003d defaultFunctionValueAccuracy;\n+        this.defaultMaximalIterationCount \u003d defaultMaximalIterationCount;\n+        this.maximalIterationCount \u003d defaultMaximalIterationCount;\n+    }\n+\n+    /**\n+     * Construct a solver with given iteration count and accuracy.\n+     * \n+     * @param defaultAbsoluteAccuracy maximum absolute error\n+     * @param defaultMaximalIterationCount maximum number of iterations\n+     * @throws IllegalArgumentException if f is null or the \n+     * defaultAbsoluteAccuracy is not valid\n+     */\n+    protected UnivariateRealSolverImpl(int defaultMaximalIterationCount,\n+                                       double defaultAbsoluteAccuracy) {\n         this.defaultAbsoluteAccuracy \u003d defaultAbsoluteAccuracy;\n         this.defaultRelativeAccuracy \u003d 1E-14;\n         this.defaultFunctionValueAccuracy \u003d 1E-15;\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [4193,5152]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [2308,2594]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MarkerAnnotation [2599,2610]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MarkerAnnotation [3281,3292]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [3019,3268]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [3468,3677]"
        },
        {
          "type": "delete-tree",
          "from": "Javadoc [2308,2337]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SuperConstructorInvocation [2922,2930]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [2948,3051]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java",
        "src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.math.analysis.UnivariateRealSolverUtils:solve:[UnivariateRealFunction f, double x0, double x1]:double",
            "org.apache.commons.math.analysis.UnivariateRealSolverUtils:solve:[UnivariateRealFunction f, double x0, double x1, double absoluteAccuracy]:double"
          ],
          "num": 2
        },
        {
          "qualified_names": [
            "org.apache.commons.math.analysis.UnivariateRealSolverUtils:solve:[UnivariateRealFunction f, double x0, double x1, double absoluteAccuracy]:double",
            "org.apache.commons.math.analysis.UnivariateRealSolverUtils:solve:[UnivariateRealFunction f, double x0, double x1]:double"
          ],
          "num": 2
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "55",
            "79",
            "81"
          ],
          "num": 3
        },
        {
          "qualified_names": [
            "55",
            "79",
            "81"
          ],
          "num": 3
        }
      ],
      "diff": "diff --git a/src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java b/src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java\nindex 89eb019..8a8d55b 100644\n--- a/src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java\n+++ b/src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java\n@@ -52,7 +52,7 @@\n     public static double solve(UnivariateRealFunction f, double x0, double x1)\n     throws ConvergenceException, FunctionEvaluationException {\n         setup(f);\n-        return factory.newDefaultSolver(f).solve(x0, x1);\n+        return factory.newDefaultSolver().solve(f, x0, x1);\n     }\n \n     /**\n@@ -76,9 +76,9 @@\n             FunctionEvaluationException {    \n        \n         setup(f);\n-        UnivariateRealSolver solver \u003d factory.newDefaultSolver(f);\n+        UnivariateRealSolver solver \u003d factory.newDefaultSolver();\n         solver.setAbsoluteAccuracy(absoluteAccuracy);\n-        return solver.solve(x0, x1);\n+        return solver.solve(f, x0, x1);\n     }\n \n     /**\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "ReturnStatement [2072,2123]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: f [3216,3217]"
        },
        {
          "type": "delete-tree",
          "from": "ReturnStatement [2072,2121]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "METHOD_INVOCATION_ARGUMENTS [3129,3130]",
          "to": ""
        }
      ]
    }
  ],
  "inducing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [
        "org.apache.commons.math.analysis.BrentSolver:solve:[final UnivariateRealFunction f, final double min, final double max, final double initial]:double",
        "org.apache.commons.math.analysis.RiddersSolver:RiddersSolver:[UnivariateRealFunction f]:null",
        "org.apache.commons.math.analysis.UnivariateRealSolverFactory:newNewtonSolver:[]:UnivariateRealSolver",
        "org.apache.commons.math.analysis.UnivariateRealSolverFactory:newSecantSolver:[]:UnivariateRealSolver",
        "org.apache.commons.math.analysis.RiddersSolver:solve:[final UnivariateRealFunction f, final double min, final double max, final double initial]:double",
        "org.apache.commons.math.analysis.NewtonSolver:solve:[final UnivariateRealFunction f, final double min, final double max, final double startValue]:double",
        "org.apache.commons.math.analysis.UnivariateRealSolver:getResult:[]:double",
        "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImpl:newBisectionSolver:[]:UnivariateRealSolver",
        "org.apache.commons.math.analysis.LaguerreSolver:solve:[final UnivariateRealFunction f, final double min, final double max]:double",
        "org.apache.commons.math.analysis.MullerSolver:solve2:[final UnivariateRealFunction f, final double min, final double max]:double",
        "org.apache.commons.math.analysis.MullerSolver:MullerSolver:[]:null",
        "org.apache.commons.math.analysis.BisectionSolver:solve:[final UnivariateRealFunction f, double min, double max]:double",
        "org.apache.commons.math.analysis.BisectionSolver:BisectionSolver:[]:null",
        "org.apache.commons.math.analysis.NewtonSolver:solve:[final UnivariateRealFunction f, final double min, final double max]:double",
        "org.apache.commons.math.analysis.LaguerreSolver:solve:[final UnivariateRealFunction f, final double min, final double max, final double initial]:double",
        "org.apache.commons.math.analysis.LaguerreSolver:solve:[final double min, final double max]:double",
        "org.apache.commons.math.analysis.MullerSolver:solve:[final double min, final double max]:double",
        "org.apache.commons.math.analysis.BrentSolver:BrentSolver:[UnivariateRealFunction f]:null",
        "org.apache.commons.math.analysis.NewtonSolver:solve:[final double min, final double max]:double",
        "org.apache.commons.math.analysis.UnivariateRealSolverFactory:newDefaultSolver:[]:UnivariateRealSolver",
        "org.apache.commons.math.analysis.UnivariateRealSolverFactory:newBisectionSolver:[]:UnivariateRealSolver",
        "org.apache.commons.math.analysis.LaguerreSolver:solve:[final double min, final double max, final double initial]:double",
        "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImpl:newBrentSolver:[]:UnivariateRealSolver",
        "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImpl:newDefaultSolver:[]:UnivariateRealSolver",
        "org.apache.commons.math.analysis.NewtonSolver:NewtonSolver:[]:null",
        "org.apache.commons.math.analysis.UnivariateRealSolver:solve:[UnivariateRealFunction f, double min, double max, double startValue]:double",
        "org.apache.commons.math.analysis.MullerSolver:solve2:[final double min, final double max]:double",
        "org.apache.commons.math.analysis.SecantSolver:solve:[final UnivariateRealFunction f, final double min, final double max, final double initial]:double",
        "org.apache.commons.math.analysis.SecantSolver:SecantSolver:[]:null",
        "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImpl:newSecantSolver:[]:UnivariateRealSolver",
        "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImpl:newNewtonSolver:[]:UnivariateRealSolver",
        "org.apache.commons.math.analysis.BisectionSolver:BisectionSolver:[UnivariateRealFunction f]:null",
        "org.apache.commons.math.analysis.BrentSolver:BrentSolver:[]:null",
        "org.apache.commons.math.analysis.BrentSolver:solve:[final UnivariateRealFunction f, final double min, final double max]:double",
        "org.apache.commons.math.analysis.SecantSolver:solve:[final UnivariateRealFunction f, final double min, final double max]:double",
        "org.apache.commons.math.analysis.MullerSolver:solve:[final UnivariateRealFunction f, final double min, final double max, final double initial]:double",
        "org.apache.commons.math.analysis.MullerSolver:solve:[final UnivariateRealFunction f, final double min, final double max]:double",
        "org.apache.commons.math.analysis.BisectionSolver:solve:[final UnivariateRealFunction f, double min, double max, double initial]:double",
        "org.apache.commons.math.analysis.RiddersSolver:solve:[final double min, final double max, final double initial]:double",
        "org.apache.commons.math.analysis.RiddersSolver:solve:[final UnivariateRealFunction f, final double min, final double max]:double",
        "org.apache.commons.math.analysis.SecantSolver:solve:[final double min, final double max, final double initial]:double",
        "org.apache.commons.math.analysis.BrentSolver:solve:[final UnivariateRealFunction f, double x0, double y0, double x1, double y1, double x2, double y2]:double",
        "org.apache.commons.math.analysis.LaguerreSolver:getPolynomialFunction:[]:PolynomialFunction",
        "org.apache.commons.math.analysis.MullerSolver:MullerSolver:[UnivariateRealFunction f]:null",
        "org.apache.commons.math.analysis.LaguerreSolver:LaguerreSolver:[]:null",
        "org.apache.commons.math.analysis.MullerSolver:solve:[final double min, final double max, final double initial]:double",
        "org.apache.commons.math.analysis.UnivariateRealSolverFactory:newBrentSolver:[]:UnivariateRealSolver",
        "org.apache.commons.math.analysis.SecantSolver:solve:[final double min, final double max]:double",
        "org.apache.commons.math.analysis.RiddersSolver:solve:[final double min, final double max]:double",
        "org.apache.commons.math.analysis.NewtonSolver:solve:[final double min, final double max, final double startValue]:double",
        "org.apache.commons.math.analysis.UnivariateRealSolver:solve:[UnivariateRealFunction f, double min, double max]:double",
        "org.apache.commons.math.analysis.UnivariateRealSolverImpl:UnivariateRealSolverImpl:[int defaultMaximalIterationCount, double defaultAbsoluteAccuracy]:null",
        "org.apache.commons.math.analysis.RiddersSolver:RiddersSolver:[]:null",
        "org.apache.commons.math.analysis.SecantSolver:SecantSolver:[UnivariateRealFunction f]:null"
      ],
      "num": 54
    },
    "delete_functions": {
      "qualified_names": [
        "org.apache.commons.math.analysis.RiddersSolver:solve:[double min, double max, double initial]:double",
        "org.apache.commons.math.analysis.SecantSolver:solve:[double min, double max]:double",
        "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImpl:newNewtonSolver:[DifferentiableUnivariateRealFunction f]:UnivariateRealSolver",
        "org.apache.commons.math.analysis.NewtonSolver:solve:[double min, double max, double startValue]:double",
        "org.apache.commons.math.analysis.MullerSolver:solve2:[double min, double max]:double",
        "org.apache.commons.math.analysis.UnivariateRealSolverFactory:newBisectionSolver:[UnivariateRealFunction f]:UnivariateRealSolver",
        "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImpl:newBisectionSolver:[UnivariateRealFunction f]:UnivariateRealSolver",
        "org.apache.commons.math.analysis.LaguerreSolver:solve:[double min, double max]:double",
        "org.apache.commons.math.analysis.UnivariateRealSolverFactory:newDefaultSolver:[UnivariateRealFunction f]:UnivariateRealSolver",
        "org.apache.commons.math.analysis.MullerSolver:solve:[double min, double max]:double",
        "org.apache.commons.math.analysis.SecantSolver:solve:[double min, double max, double initial]:double",
        "org.apache.commons.math.analysis.BrentSolver:solve:[double x0, double y0, double x1, double y1, double x2, double y2]:double",
        "org.apache.commons.math.analysis.UnivariateRealSolverFactory:newBrentSolver:[UnivariateRealFunction f]:UnivariateRealSolver",
        "org.apache.commons.math.analysis.UnivariateRealSolverFactory:newNewtonSolver:[DifferentiableUnivariateRealFunction f]:UnivariateRealSolver",
        "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImpl:newSecantSolver:[UnivariateRealFunction f]:UnivariateRealSolver",
        "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImpl:newDefaultSolver:[UnivariateRealFunction f]:UnivariateRealSolver",
        "org.apache.commons.math.analysis.RiddersSolver:solve:[double min, double max]:double",
        "org.apache.commons.math.analysis.UnivariateRealSolverFactory:newSecantSolver:[UnivariateRealFunction f]:UnivariateRealSolver",
        "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImpl:newBrentSolver:[UnivariateRealFunction f]:UnivariateRealSolver",
        "org.apache.commons.math.analysis.NewtonSolver:solve:[double min, double max]:double",
        "org.apache.commons.math.analysis.MullerSolver:solve:[double min, double max, double initial]:double",
        "org.apache.commons.math.analysis.LaguerreSolver:solve:[double min, double max, double initial]:double",
        "org.apache.commons.math.analysis.NewtonSolver:readObject:[java.io.ObjectInputStream in]:void"
      ],
      "num": 23
    }
  },
  "trigger_tests": [
    {
      "test_class": "org.apache.commons.math.analysis.solvers.BisectionSolverTest",
      "test_function": "testMath369",
      "assertion_line": "101",
      "exception": "java.lang.NullPointerException",
      "message": ""
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java",
        "src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.math.analysis.solvers.BisectionSolver:solve:[final UnivariateRealFunction f, double min, double max, double initial]:double"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "org.apache.commons.math.analysis.solvers.BisectionSolver:solve:[final UnivariateRealFunction f, double min, double max, double initial]:double"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "72"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "72"
          ],
          "num": 1
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java\nindex 3f66927..180caef 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java\n@@ -69,7 +69,7 @@\n     /** {@inheritDoc} */\n     public double solve(final UnivariateRealFunction f, double min, double max, double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n-        return solve(min, max);\n+        return solve(f, min, max);\n     }\n \n     /** {@inheritDoc} */\n",
      "operations": [
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: f [2609,2610]"
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  },
  "patch_changed_mths": {
    "qualified_names": [],
    "num": 0
  }
}