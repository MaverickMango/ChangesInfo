===
move-tree
---
MethodDeclaration [1675,4176]
    Javadoc [1675,2588]
        TagElement [1686,2008]
            TextElement: Find a zero in the given interval with an initial guess. [1686,1742]
            TextElement: <p>Throws <code>IllegalArgumentException</code> if the values of the [1750,1818]
            TextElement: function at the three points have the same sign (note that it is [1826,1890]
            TextElement: allowed to have endpoints with the same sign if the initial point has [1898,1967]
            TextElement: opposite sign function-wise).</p> [1975,2008]
        TagElement [2024,2068]
            SimpleName: min [2031,2034]
            TextElement:  the lower bound for the interval. [2034,2068]
        TagElement [2076,2120]
            SimpleName: max [2083,2086]
            TextElement:  the upper bound for the interval. [2086,2120]
        TagElement [2128,2223]
            SimpleName: initial [2135,2142]
            TextElement:  the start value to use (must be set to min if no [2142,2191]
            TextElement: initial point is known). [2199,2223]
        TagElement [2231,2275]
            TextElement:  the value where the function is zero [2238,2275]
        TagElement [2283,2369]
            SimpleName: MaxIterationsExceededException [2291,2321]
            TextElement:  the maximum iteration count [2321,2349]
            TextElement: is exceeded  [2357,2369]
        TagElement [2377,2463]
            SimpleName: FunctionEvaluationException [2385,2412]
            TextElement:  if an error occurs evaluating [2412,2442]
            TextElement: the function [2451,2463]
        TagElement [2471,2580]
            SimpleName: IllegalArgumentException [2479,2503]
            TextElement:  if initial is not between min and max [2503,2541]
            TextElement: (even if it <em>is</em> a root) [2549,2580]
    Modifier: public [2593,2599]
    PrimitiveType: double [2600,2606]
    SimpleName: solve [2607,2612]
    SingleVariableDeclaration [2613,2623]
        PrimitiveType: double [2613,2619]
        SimpleName: min [2620,2623]
    SingleVariableDeclaration [2625,2635]
        PrimitiveType: double [2625,2631]
        SimpleName: max [2632,2635]
    SingleVariableDeclaration [2637,2651]
        PrimitiveType: double [2637,2643]
        SimpleName: initial [2644,2651]
    SimpleType [2668,2698]
        SimpleName: MaxIterationsExceededException [2668,2698]
    SimpleType [2700,2727]
        SimpleName: FunctionEvaluationException [2700,2727]
    Block [2728,4176]
        IfStatement [2739,3004]
            InfixExpression [2743,2781]
                ParenthesizedExpression [2743,2777]
                    InfixExpression [2744,2776]
                        ParenthesizedExpression [2744,2759]
                            InfixExpression [2745,2758]
                                SimpleName: initial [2745,2752]
                                INFIX_EXPRESSION_OPERATOR: - [2753,2754]
                                SimpleName: min [2755,2758]
                        INFIX_EXPRESSION_OPERATOR: * [2760,2761]
                        ParenthesizedExpression [2762,2776]
                            InfixExpression [2763,2775]
                                SimpleName: max [2763,2766]
                                INFIX_EXPRESSION_OPERATOR: - [2767,2768]
                                SimpleName: initial [2768,2775]
                INFIX_EXPRESSION_OPERATOR: < [2778,2779]
                NumberLiteral: 0 [2780,2781]
            Block [2783,3004]
                ThrowStatement [2797,2994]
                    ClassInstanceCreation [2803,2993]
                        SimpleType [2807,2831]
                            SimpleName: IllegalArgumentException [2807,2831]
                        InfixExpression [2832,2992]
                            InfixExpression [2832,2917]
                                StringLiteral: "Initial guess is not in search" [2832,2864]
                                INFIX_EXPRESSION_OPERATOR: + [2865,2866]
                                StringLiteral: " interval." [2889,2901]
                                StringLiteral: "  Initial: " [2904,2917]
                            INFIX_EXPRESSION_OPERATOR: + [2918,2919]
                            SimpleName: initial [2920,2927]
                            StringLiteral: "  Endpoints: [" [2952,2968]
                            SimpleName: min [2971,2974]
                            StringLiteral: "," [2977,2980]
                            SimpleName: max [2983,2986]
                            StringLiteral: "]" [2989,2992]
        VariableDeclarationStatement [3071,3106]
            PrimitiveType: double [3071,3077]
            VariableDeclarationFragment [3078,3105]
                SimpleName: yInitial [3078,3086]
                MethodInvocation [3089,3105]
                    METHOD_INVOCATION_RECEIVER [3089,3090]
                        SimpleName: f [3089,3090]
                    SimpleName: value [3091,3096]
                    METHOD_INVOCATION_ARGUMENTS [3097,3104]
                        SimpleName: initial [3097,3104]
        IfStatement [3115,3237]
            InfixExpression [3119,3162]
                MethodInvocation [3119,3137]
                    METHOD_INVOCATION_RECEIVER [3119,3123]
                        SimpleName: Math [3119,3123]
                    SimpleName: abs [3124,3127]
                    METHOD_INVOCATION_ARGUMENTS [3128,3136]
                        SimpleName: yInitial [3128,3136]
                INFIX_EXPRESSION_OPERATOR: <= [3138,3140]
                SimpleName: functionValueAccuracy [3141,3162]
            Block [3164,3237]
                ExpressionStatement [3178,3200]
                    MethodInvocation [3178,3199]
                        SimpleName: setResult [3178,3187]
                        METHOD_INVOCATION_ARGUMENTS [3188,3198]
                            SimpleName: initial [3188,3195]
                            NumberLiteral: 0 [3197,3198]
                ReturnStatement [3213,3227]
                    SimpleName: result [3220,3226]
        VariableDeclarationStatement [3305,3332]
            PrimitiveType: double [3305,3311]
            VariableDeclarationFragment [3312,3331]
                SimpleName: yMin [3312,3316]
                MethodInvocation [3319,3331]
                    METHOD_INVOCATION_RECEIVER [3319,3320]
                        SimpleName: f [3319,3320]
                    SimpleName: value [3321,3326]
                    METHOD_INVOCATION_ARGUMENTS [3327,3330]
                        SimpleName: min [3327,3330]
        IfStatement [3341,3456]
            InfixExpression [3345,3384]
                MethodInvocation [3345,3359]
                    METHOD_INVOCATION_RECEIVER [3345,3349]
                        SimpleName: Math [3345,3349]
                    SimpleName: abs [3350,3353]
                    METHOD_INVOCATION_ARGUMENTS [3354,3358]
                        SimpleName: yMin [3354,3358]
                INFIX_EXPRESSION_OPERATOR: <= [3360,3362]
                SimpleName: functionValueAccuracy [3363,3384]
            Block [3386,3456]
                ExpressionStatement [3400,3419]
                    MethodInvocation [3400,3418]
                        SimpleName: setResult [3400,3409]
                        METHOD_INVOCATION_ARGUMENTS [3410,3417]
                            SimpleName: yMin [3410,3414]
                            NumberLiteral: 0 [3416,3417]
                ReturnStatement [3432,3446]
                    SimpleName: result [3439,3445]
        IfStatement [3529,3632]
            InfixExpression [3533,3552]
                InfixExpression [3533,3548]
                    SimpleName: yInitial [3533,3541]
                    INFIX_EXPRESSION_OPERATOR: * [3542,3543]
                    SimpleName: yMin [3544,3548]
                INFIX_EXPRESSION_OPERATOR: < [3549,3550]
                NumberLiteral: 0 [3551,3552]
            Block [3554,3632]
                ReturnStatement [3568,3622]
                    MethodInvocation [3575,3621]
                        SimpleName: solve [3575,3580]
                        METHOD_INVOCATION_ARGUMENTS [3581,3620]
                            SimpleName: min [3581,3584]
                            SimpleName: yMin [3586,3590]
                            SimpleName: initial [3592,3599]
                            SimpleName: yInitial [3601,3609]
                            SimpleName: min [3611,3614]
                            SimpleName: yMin [3616,3620]
        VariableDeclarationStatement [3701,3728]
            PrimitiveType: double [3701,3707]
            VariableDeclarationFragment [3708,3727]
                SimpleName: yMax [3708,3712]
                MethodInvocation [3715,3727]
                    METHOD_INVOCATION_RECEIVER [3715,3716]
                        SimpleName: f [3715,3716]
                    SimpleName: value [3717,3722]
                    METHOD_INVOCATION_ARGUMENTS [3723,3726]
                        SimpleName: max [3723,3726]
        IfStatement [3737,3852]
            InfixExpression [3741,3780]
                MethodInvocation [3741,3755]
                    METHOD_INVOCATION_RECEIVER [3741,3745]
                        SimpleName: Math [3741,3745]
                    SimpleName: abs [3746,3749]
                    METHOD_INVOCATION_ARGUMENTS [3750,3754]
                        SimpleName: yMax [3750,3754]
                INFIX_EXPRESSION_OPERATOR: <= [3756,3758]
                SimpleName: functionValueAccuracy [3759,3780]
            Block [3782,3852]
                ExpressionStatement [3796,3815]
                    MethodInvocation [3796,3814]
                        SimpleName: setResult [3796,3805]
                        METHOD_INVOCATION_ARGUMENTS [3806,3813]
                            SimpleName: yMax [3806,3810]
                            NumberLiteral: 0 [3812,3813]
                ReturnStatement [3828,3842]
                    SimpleName: result [3835,3841]
        IfStatement [3925,4036]
            InfixExpression [3929,3948]
                InfixExpression [3929,3944]
                    SimpleName: yInitial [3929,3937]
                    INFIX_EXPRESSION_OPERATOR: * [3938,3939]
                    SimpleName: yMax [3940,3944]
                INFIX_EXPRESSION_OPERATOR: < [3945,3946]
                NumberLiteral: 0 [3947,3948]
            Block [3950,4036]
                ReturnStatement [3964,4026]
                    MethodInvocation [3971,4025]
                        SimpleName: solve [3971,3976]
                        METHOD_INVOCATION_ARGUMENTS [3977,4024]
                            SimpleName: initial [3977,3984]
                            SimpleName: yInitial [3986,3994]
                            SimpleName: max [3996,3999]
                            SimpleName: yMax [4001,4005]
                            SimpleName: initial [4007,4014]
                            SimpleName: yInitial [4016,4024]
        ReturnStatement [4115,4169]
            MethodInvocation [4122,4168]
                SimpleName: solve [4122,4127]
                METHOD_INVOCATION_ARGUMENTS [4128,4167]
                    SimpleName: min [4128,4131]
                    SimpleName: yMin [4133,4137]
                    SimpleName: max [4139,4142]
                    SimpleName: yMax [4144,4148]
                    SimpleName: initial [4150,4157]
                    SimpleName: yInitial [4159,4167]
to
TypeDeclaration [971,10716]
at 8
===
insert-tree
---
MethodDeclaration [1947,2044]
    Javadoc [1947,1985]
        TagElement [1958,1977]
            TextElement: Construct a solver. [1958,1977]
    Modifier: public [1990,1996]
    SimpleName: BrentSolver [1997,2008]
    Block [2011,2044]
        SuperConstructorInvocation [2021,2038]
            NumberLiteral: 100 [2027,2030]
            NumberLiteral: 1E-6 [2032,2036]
to
TypeDeclaration [971,10716]
at 7
===
insert-node
---
MethodDeclaration [2491,5110]
to
TypeDeclaration [971,10716]
at 10
===
insert-node
---
MethodDeclaration [5120,7419]
to
TypeDeclaration [971,10716]
at 11
===
insert-node
---
Javadoc [1478,1839]
to
MethodDeclaration [1479,1669]
at 0
===
insert-tree
---
MarkerAnnotation [1844,1855]
    SimpleName: Deprecated [1845,1855]
to
MethodDeclaration [1479,1669]
at 1
===
insert-tree
---
Javadoc [2050,2070]
    TagElement [2054,2068]
        TagElement [2054,2067]
        TextElement:   [2067,2068]
to
MethodDeclaration [4186,6406]
at 0
===
insert-tree
---
MarkerAnnotation [2075,2086]
    SimpleName: Deprecated [2076,2086]
to
MethodDeclaration [4186,6406]
at 1
===
insert-tree
---
Javadoc [2258,2278]
    TagElement [2262,2276]
        TagElement [2262,2275]
        TextElement:   [2275,2276]
to
MethodDeclaration [1675,4176]
at 0
===
insert-tree
---
MarkerAnnotation [2283,2294]
    SimpleName: Deprecated [2284,2294]
to
MethodDeclaration [1675,4176]
at 1
===
insert-tree
---
Javadoc [2491,3439]
    TagElement [2502,2824]
        TextElement: Find a zero in the given interval with an initial guess. [2502,2558]
        TextElement: <p>Throws <code>IllegalArgumentException</code> if the values of the [2566,2634]
        TextElement: function at the three points have the same sign (note that it is [2642,2706]
        TextElement: allowed to have endpoints with the same sign if the initial point has [2714,2783]
        TextElement: opposite sign function-wise).</p> [2791,2824]
    TagElement [2840,2867]
        SimpleName: f [2847,2848]
        TextElement:  function to solve. [2848,2867]
    TagElement [2875,2919]
        SimpleName: min [2882,2885]
        TextElement:  the lower bound for the interval. [2885,2919]
    TagElement [2927,2971]
        SimpleName: max [2934,2937]
        TextElement:  the upper bound for the interval. [2937,2971]
    TagElement [2979,3074]
        SimpleName: initial [2986,2993]
        TextElement:  the start value to use (must be set to min if no [2993,3042]
        TextElement: initial point is known). [3050,3074]
    TagElement [3082,3126]
        TextElement:  the value where the function is zero [3089,3126]
    TagElement [3134,3220]
        SimpleName: MaxIterationsExceededException [3142,3172]
        TextElement:  the maximum iteration count [3172,3200]
        TextElement: is exceeded  [3208,3220]
    TagElement [3228,3314]
        SimpleName: FunctionEvaluationException [3236,3263]
        TextElement:  if an error occurs evaluating [3263,3293]
        TextElement: the function [3302,3314]
    TagElement [3322,3431]
        SimpleName: IllegalArgumentException [3330,3354]
        TextElement:  if initial is not between min and max [3354,3392]
        TextElement: (even if it <em>is</em> a root) [3400,3431]
to
MethodDeclaration [2491,5110]
at 0
===
insert-node
---
Modifier: public [3444,3450]
to
MethodDeclaration [2491,5110]
at 1
===
insert-node
---
PrimitiveType: double [3451,3457]
to
MethodDeclaration [2491,5110]
at 2
===
insert-node
---
SimpleName: solve [3458,3463]
to
MethodDeclaration [2491,5110]
at 3
===
insert-tree
---
SingleVariableDeclaration [3464,3494]
    Modifier: final [3464,3469]
    SimpleType [3470,3492]
        SimpleName: UnivariateRealFunction [3470,3492]
    SimpleName: f [3493,3494]
to
MethodDeclaration [2491,5110]
at 4
===
insert-tree
---
SingleVariableDeclaration [3520,3536]
    Modifier: final [3520,3525]
    PrimitiveType: double [3526,3532]
    SimpleName: min [3533,3536]
to
MethodDeclaration [2491,5110]
at 5
===
insert-tree
---
SingleVariableDeclaration [3538,3554]
    Modifier: final [3538,3543]
    PrimitiveType: double [3544,3550]
    SimpleName: max [3551,3554]
to
MethodDeclaration [2491,5110]
at 6
===
insert-tree
---
SingleVariableDeclaration [3556,3576]
    Modifier: final [3556,3561]
    PrimitiveType: double [3562,3568]
    SimpleName: initial [3569,3576]
to
MethodDeclaration [2491,5110]
at 7
===
insert-tree
---
SimpleType [3593,3623]
    SimpleName: MaxIterationsExceededException [3593,3623]
to
MethodDeclaration [2491,5110]
at 8
===
insert-tree
---
SimpleType [3625,3652]
    SimpleName: FunctionEvaluationException [3625,3652]
to
MethodDeclaration [2491,5110]
at 9
===
insert-node
---
Block [3653,5110]
to
MethodDeclaration [2491,5110]
at 10
===
insert-tree
---
Javadoc [5120,5864]
    TagElement [5131,5356]
        TextElement: Find a zero in the given interval. [5131,5165]
        TextElement: <p> [5173,5176]
        TextElement: Requires that the values of the function at the endpoints have opposite [5184,5255]
        TextElement: signs. An <code>IllegalArgumentException</code> is thrown if this is not [5263,5335]
        TextElement: the case.</p> [5343,5356]
    TagElement [5372,5416]
        SimpleName: min [5379,5382]
        TextElement:  the lower bound for the interval. [5382,5416]
    TagElement [5424,5468]
        SimpleName: max [5431,5434]
        TextElement:  the upper bound for the interval. [5434,5468]
    TagElement [5476,5520]
        TextElement:  the value where the function is zero [5483,5520]
    TagElement [5528,5609]
        SimpleName: MaxIterationsExceededException [5536,5566]
        TextElement:  if the maximum iteration count is exceeded [5566,5609]
    TagElement [5617,5703]
        SimpleName: FunctionEvaluationException [5625,5652]
        TextElement:  if an error occurs evaluating the [5652,5686]
        TextElement: function  [5694,5703]
    TagElement [5711,5856]
        SimpleName: IllegalArgumentException [5719,5743]
        TextElement:  if min is not less than max or the [5743,5778]
        TextElement: signs of the values of the function at the endpoints are not opposites [5786,5856]
to
MethodDeclaration [5120,7419]
at 0
===
insert-node
---
Modifier: public [5869,5875]
to
MethodDeclaration [5120,7419]
at 1
===
insert-node
---
PrimitiveType: double [5876,5882]
to
MethodDeclaration [5120,7419]
at 2
===
insert-node
---
SimpleName: solve [5883,5888]
to
MethodDeclaration [5120,7419]
at 3
===
insert-tree
---
SingleVariableDeclaration [5889,5919]
    Modifier: final [5889,5894]
    SimpleType [5895,5917]
        SimpleName: UnivariateRealFunction [5895,5917]
    SimpleName: f [5918,5919]
to
MethodDeclaration [5120,7419]
at 4
===
insert-tree
---
SingleVariableDeclaration [5945,5961]
    Modifier: final [5945,5950]
    PrimitiveType: double [5951,5957]
    SimpleName: min [5958,5961]
to
MethodDeclaration [5120,7419]
at 5
===
insert-tree
---
SingleVariableDeclaration [5963,5979]
    Modifier: final [5963,5968]
    PrimitiveType: double [5969,5975]
    SimpleName: max [5976,5979]
to
MethodDeclaration [5120,7419]
at 6
===
insert-tree
---
SimpleType [5996,6026]
    SimpleName: MaxIterationsExceededException [5996,6026]
to
MethodDeclaration [5120,7419]
at 7
===
insert-tree
---
SimpleType [6037,6064]
    SimpleName: FunctionEvaluationException [6037,6064]
to
MethodDeclaration [5120,7419]
at 8
===
insert-node
---
Block [6065,7419]
to
MethodDeclaration [5120,7419]
at 9
===
insert-tree
---
SingleVariableDeclaration [8281,8311]
    Modifier: final [8281,8286]
    SimpleType [8287,8309]
        SimpleName: UnivariateRealFunction [8287,8309]
    SimpleName: f [8310,8311]
to
MethodDeclaration [6420,10714]
at 4
===
insert-node
---
NumberLiteral: 7694577816772532779L [1451,1471]
to
VariableDeclarationFragment [1432,1472]
at 1
===
move-tree
---
TagElement [1490,1532]
    TextElement: Construct a solver for the given function. [1490,1532]
to
Javadoc [1478,1839]
at 0
===
move-tree
---
TagElement [1548,1575]
    SimpleName: f [1555,1556]
    TextElement:  function to solve. [1556,1575]
to
Javadoc [1478,1839]
at 1
===
insert-tree
---
TagElement [1582,1831]
    TextElement:  as of 2.0 the function to solve is passed as an argument [1593,1650]
    TextElement: to the  [1658,1665]
    TagElement [1665,1719]
        MethodRef [1672,1718]
            SimpleName: solve [1673,1678]
            MethodRefParameter [1679,1701]
                SimpleType [1679,1701]
                    SimpleName: UnivariateRealFunction [1679,1701]
            MethodRefParameter [1703,1709]
                PrimitiveType: double [1703,1709]
            MethodRefParameter [1711,1717]
                PrimitiveType: double [1711,1717]
    TextElement:  or [1719,1722]
    TagElement [1730,1816]
        MethodRef [1737,1815]
            SimpleName: UnivariateRealSolverImpl [1737,1761]
            SimpleName: solve [1762,1767]
            MethodRefParameter [1768,1790]
                SimpleType [1768,1790]
                    SimpleName: UnivariateRealFunction [1768,1790]
            MethodRefParameter [1792,1798]
                PrimitiveType: double [1792,1798]
            MethodRefParameter [1800,1806]
                PrimitiveType: double [1800,1806]
            MethodRefParameter [1808,1814]
                PrimitiveType: double [1808,1814]
    TextElement: method. [1824,1831]
to
Javadoc [1478,1839]
at 2
===
insert-tree
---
ReturnStatement [2220,2246]
    MethodInvocation [2227,2245]
        SimpleName: solve [2227,2232]
        METHOD_INVOCATION_ARGUMENTS [2233,2244]
            SimpleName: f [2233,2234]
            SimpleName: min [2236,2239]
            SimpleName: max [2241,2244]
to
Block [5055,6406]
at 0
===
insert-tree
---
ReturnStatement [2444,2479]
    MethodInvocation [2451,2478]
        SimpleName: solve [2451,2456]
        METHOD_INVOCATION_ARGUMENTS [2457,2477]
            SimpleName: f [2457,2458]
            SimpleName: min [2460,2463]
            SimpleName: max [2465,2468]
            SimpleName: initial [2470,2477]
to
Block [2728,4176]
at 0
===
move-tree
---
IfStatement [2739,3004]
    InfixExpression [2743,2781]
        ParenthesizedExpression [2743,2777]
            InfixExpression [2744,2776]
                ParenthesizedExpression [2744,2759]
                    InfixExpression [2745,2758]
                        SimpleName: initial [2745,2752]
                        INFIX_EXPRESSION_OPERATOR: - [2753,2754]
                        SimpleName: min [2755,2758]
                INFIX_EXPRESSION_OPERATOR: * [2760,2761]
                ParenthesizedExpression [2762,2776]
                    InfixExpression [2763,2775]
                        SimpleName: max [2763,2766]
                        INFIX_EXPRESSION_OPERATOR: - [2767,2768]
                        SimpleName: initial [2768,2775]
        INFIX_EXPRESSION_OPERATOR: < [2778,2779]
        NumberLiteral: 0 [2780,2781]
    Block [2783,3004]
        ThrowStatement [2797,2994]
            ClassInstanceCreation [2803,2993]
                SimpleType [2807,2831]
                    SimpleName: IllegalArgumentException [2807,2831]
                InfixExpression [2832,2992]
                    InfixExpression [2832,2917]
                        StringLiteral: "Initial guess is not in search" [2832,2864]
                        INFIX_EXPRESSION_OPERATOR: + [2865,2866]
                        StringLiteral: " interval." [2889,2901]
                        StringLiteral: "  Initial: " [2904,2917]
                    INFIX_EXPRESSION_OPERATOR: + [2918,2919]
                    SimpleName: initial [2920,2927]
                    StringLiteral: "  Endpoints: [" [2952,2968]
                    SimpleName: min [2971,2974]
                    StringLiteral: "," [2977,2980]
                    SimpleName: max [2983,2986]
                    StringLiteral: "]" [2989,2992]
to
Block [3653,5110]
at 0
===
move-tree
---
VariableDeclarationStatement [3071,3106]
    PrimitiveType: double [3071,3077]
    VariableDeclarationFragment [3078,3105]
        SimpleName: yInitial [3078,3086]
        MethodInvocation [3089,3105]
            METHOD_INVOCATION_RECEIVER [3089,3090]
                SimpleName: f [3089,3090]
            SimpleName: value [3091,3096]
            METHOD_INVOCATION_ARGUMENTS [3097,3104]
                SimpleName: initial [3097,3104]
to
Block [3653,5110]
at 1
===
move-tree
---
IfStatement [3115,3237]
    InfixExpression [3119,3162]
        MethodInvocation [3119,3137]
            METHOD_INVOCATION_RECEIVER [3119,3123]
                SimpleName: Math [3119,3123]
            SimpleName: abs [3124,3127]
            METHOD_INVOCATION_ARGUMENTS [3128,3136]
                SimpleName: yInitial [3128,3136]
        INFIX_EXPRESSION_OPERATOR: <= [3138,3140]
        SimpleName: functionValueAccuracy [3141,3162]
    Block [3164,3237]
        ExpressionStatement [3178,3200]
            MethodInvocation [3178,3199]
                SimpleName: setResult [3178,3187]
                METHOD_INVOCATION_ARGUMENTS [3188,3198]
                    SimpleName: initial [3188,3195]
                    NumberLiteral: 0 [3197,3198]
        ReturnStatement [3213,3227]
            SimpleName: result [3220,3226]
to
Block [3653,5110]
at 2
===
move-tree
---
VariableDeclarationStatement [3305,3332]
    PrimitiveType: double [3305,3311]
    VariableDeclarationFragment [3312,3331]
        SimpleName: yMin [3312,3316]
        MethodInvocation [3319,3331]
            METHOD_INVOCATION_RECEIVER [3319,3320]
                SimpleName: f [3319,3320]
            SimpleName: value [3321,3326]
            METHOD_INVOCATION_ARGUMENTS [3327,3330]
                SimpleName: min [3327,3330]
to
Block [3653,5110]
at 3
===
move-tree
---
IfStatement [3341,3456]
    InfixExpression [3345,3384]
        MethodInvocation [3345,3359]
            METHOD_INVOCATION_RECEIVER [3345,3349]
                SimpleName: Math [3345,3349]
            SimpleName: abs [3350,3353]
            METHOD_INVOCATION_ARGUMENTS [3354,3358]
                SimpleName: yMin [3354,3358]
        INFIX_EXPRESSION_OPERATOR: <= [3360,3362]
        SimpleName: functionValueAccuracy [3363,3384]
    Block [3386,3456]
        ExpressionStatement [3400,3419]
            MethodInvocation [3400,3418]
                SimpleName: setResult [3400,3409]
                METHOD_INVOCATION_ARGUMENTS [3410,3417]
                    SimpleName: yMin [3410,3414]
                    NumberLiteral: 0 [3416,3417]
        ReturnStatement [3432,3446]
            SimpleName: result [3439,3445]
to
Block [3653,5110]
at 4
===
move-tree
---
IfStatement [3529,3632]
    InfixExpression [3533,3552]
        InfixExpression [3533,3548]
            SimpleName: yInitial [3533,3541]
            INFIX_EXPRESSION_OPERATOR: * [3542,3543]
            SimpleName: yMin [3544,3548]
        INFIX_EXPRESSION_OPERATOR: < [3549,3550]
        NumberLiteral: 0 [3551,3552]
    Block [3554,3632]
        ReturnStatement [3568,3622]
            MethodInvocation [3575,3621]
                SimpleName: solve [3575,3580]
                METHOD_INVOCATION_ARGUMENTS [3581,3620]
                    SimpleName: min [3581,3584]
                    SimpleName: yMin [3586,3590]
                    SimpleName: initial [3592,3599]
                    SimpleName: yInitial [3601,3609]
                    SimpleName: min [3611,3614]
                    SimpleName: yMin [3616,3620]
to
Block [3653,5110]
at 5
===
move-tree
---
VariableDeclarationStatement [3701,3728]
    PrimitiveType: double [3701,3707]
    VariableDeclarationFragment [3708,3727]
        SimpleName: yMax [3708,3712]
        MethodInvocation [3715,3727]
            METHOD_INVOCATION_RECEIVER [3715,3716]
                SimpleName: f [3715,3716]
            SimpleName: value [3717,3722]
            METHOD_INVOCATION_ARGUMENTS [3723,3726]
                SimpleName: max [3723,3726]
to
Block [3653,5110]
at 6
===
move-tree
---
IfStatement [3737,3852]
    InfixExpression [3741,3780]
        MethodInvocation [3741,3755]
            METHOD_INVOCATION_RECEIVER [3741,3745]
                SimpleName: Math [3741,3745]
            SimpleName: abs [3746,3749]
            METHOD_INVOCATION_ARGUMENTS [3750,3754]
                SimpleName: yMax [3750,3754]
        INFIX_EXPRESSION_OPERATOR: <= [3756,3758]
        SimpleName: functionValueAccuracy [3759,3780]
    Block [3782,3852]
        ExpressionStatement [3796,3815]
            MethodInvocation [3796,3814]
                SimpleName: setResult [3796,3805]
                METHOD_INVOCATION_ARGUMENTS [3806,3813]
                    SimpleName: yMax [3806,3810]
                    NumberLiteral: 0 [3812,3813]
        ReturnStatement [3828,3842]
            SimpleName: result [3835,3841]
to
Block [3653,5110]
at 7
===
move-tree
---
IfStatement [3925,4036]
    InfixExpression [3929,3948]
        InfixExpression [3929,3944]
            SimpleName: yInitial [3929,3937]
            INFIX_EXPRESSION_OPERATOR: * [3938,3939]
            SimpleName: yMax [3940,3944]
        INFIX_EXPRESSION_OPERATOR: < [3945,3946]
        NumberLiteral: 0 [3947,3948]
    Block [3950,4036]
        ReturnStatement [3964,4026]
            MethodInvocation [3971,4025]
                SimpleName: solve [3971,3976]
                METHOD_INVOCATION_ARGUMENTS [3977,4024]
                    SimpleName: initial [3977,3984]
                    SimpleName: yInitial [3986,3994]
                    SimpleName: max [3996,3999]
                    SimpleName: yMax [4001,4005]
                    SimpleName: initial [4007,4014]
                    SimpleName: yInitial [4016,4024]
to
Block [3653,5110]
at 8
===
move-tree
---
ReturnStatement [4115,4169]
    MethodInvocation [4122,4168]
        SimpleName: solve [4122,4127]
        METHOD_INVOCATION_ARGUMENTS [4128,4167]
            SimpleName: min [4128,4131]
            SimpleName: yMin [4133,4137]
            SimpleName: max [4139,4142]
            SimpleName: yMax [4144,4148]
            SimpleName: initial [4150,4157]
            SimpleName: yInitial [4159,4167]
to
Block [3653,5110]
at 9
===
move-tree
---
ExpressionStatement [5074,5088]
    MethodInvocation [5074,5087]
        SimpleName: clearResult [5074,5085]
to
Block [6065,7419]
at 0
===
move-tree
---
ExpressionStatement [5097,5122]
    MethodInvocation [5097,5121]
        SimpleName: verifyInterval [5097,5111]
        METHOD_INVOCATION_ARGUMENTS [5112,5120]
            SimpleName: min [5112,5115]
            SimpleName: max [5117,5120]
to
Block [6065,7419]
at 1
===
move-tree
---
VariableDeclarationStatement [5140,5164]
    PrimitiveType: double [5140,5146]
    VariableDeclarationFragment [5147,5163]
        SimpleName: ret [5147,5150]
        QualifiedName: Double.NaN [5153,5163]
to
Block [6065,7419]
at 2
===
move-tree
---
VariableDeclarationStatement [5182,5209]
    PrimitiveType: double [5182,5188]
    VariableDeclarationFragment [5189,5208]
        SimpleName: yMin [5189,5193]
        MethodInvocation [5196,5208]
            METHOD_INVOCATION_RECEIVER [5196,5197]
                SimpleName: f [5196,5197]
            SimpleName: value [5198,5203]
            METHOD_INVOCATION_ARGUMENTS [5204,5207]
                SimpleName: min [5204,5207]
to
Block [6065,7419]
at 3
===
move-tree
---
VariableDeclarationStatement [5218,5245]
    PrimitiveType: double [5218,5224]
    VariableDeclarationFragment [5225,5244]
        SimpleName: yMax [5225,5229]
        MethodInvocation [5232,5244]
            METHOD_INVOCATION_RECEIVER [5232,5233]
                SimpleName: f [5232,5233]
            SimpleName: value [5234,5239]
            METHOD_INVOCATION_ARGUMENTS [5240,5243]
                SimpleName: max [5240,5243]
to
Block [6065,7419]
at 4
===
move-tree
---
VariableDeclarationStatement [5292,5318]
    PrimitiveType: double [5292,5298]
    VariableDeclarationFragment [5299,5317]
        SimpleName: sign [5299,5303]
        InfixExpression [5306,5317]
            SimpleName: yMin [5306,5310]
            INFIX_EXPRESSION_OPERATOR: * [5311,5312]
            SimpleName: yMax [5313,5317]
to
Block [6065,7419]
at 5
===
move-tree
---
IfStatement [5327,6379]
    InfixExpression [5331,5339]
        SimpleName: sign [5331,5335]
        INFIX_EXPRESSION_OPERATOR: > [5336,5337]
        NumberLiteral: 0 [5338,5339]
    Block [5341,6043]
        IfStatement [5411,6033]
            InfixExpression [5415,5454]
                MethodInvocation [5415,5429]
                    METHOD_INVOCATION_RECEIVER [5415,5419]
                        SimpleName: Math [5415,5419]
                    SimpleName: abs [5420,5423]
                    METHOD_INVOCATION_ARGUMENTS [5424,5428]
                        SimpleName: yMin [5424,5428]
                INFIX_EXPRESSION_OPERATOR: <= [5430,5432]
                SimpleName: functionValueAccuracy [5433,5454]
            Block [5456,5533]
                ExpressionStatement [5474,5492]
                    MethodInvocation [5474,5491]
                        SimpleName: setResult [5474,5483]
                        METHOD_INVOCATION_ARGUMENTS [5484,5490]
                            SimpleName: min [5484,5487]
                            NumberLiteral: 0 [5489,5490]
                ExpressionStatement [5509,5519]
                    Assignment [5509,5518]
                        SimpleName: ret [5509,5512]
                        ASSIGNMENT_OPERATOR: = [5513,5514]
                        SimpleName: min [5515,5518]
            IfStatement [5539,6033]
                InfixExpression [5543,5582]
                    MethodInvocation [5543,5557]
                        METHOD_INVOCATION_RECEIVER [5543,5547]
                            SimpleName: Math [5543,5547]
                        SimpleName: abs [5548,5551]
                        METHOD_INVOCATION_ARGUMENTS [5552,5556]
                            SimpleName: yMax [5552,5556]
                    INFIX_EXPRESSION_OPERATOR: <= [5558,5560]
                    SimpleName: functionValueAccuracy [5561,5582]
                Block [5584,5661]
                    ExpressionStatement [5602,5620]
                        MethodInvocation [5602,5619]
                            SimpleName: setResult [5602,5611]
                            METHOD_INVOCATION_ARGUMENTS [5612,5618]
                                SimpleName: max [5612,5615]
                                NumberLiteral: 0 [5617,5618]
                    ExpressionStatement [5637,5647]
                        Assignment [5637,5646]
                            SimpleName: ret [5637,5640]
                            ASSIGNMENT_OPERATOR: = [5641,5642]
                            SimpleName: max [5643,5646]
                Block [5667,6033]
                    ThrowStatement [5772,6019]
                        ClassInstanceCreation [5778,6018]
                            SimpleType [5782,5806]
                                SimpleName: IllegalArgumentException [5782,5806]
                            InfixExpression [5824,6017]
                                InfixExpression [5824,5926]
                                    StringLiteral: "Function values at endpoints do not have different signs." [5824,5883]
                                    INFIX_EXPRESSION_OPERATOR: + [5884,5885]
                                    StringLiteral: "  Endpoints: [" [5910,5926]
                                INFIX_EXPRESSION_OPERATOR: + [5927,5928]
                                SimpleName: min [5929,5932]
                                StringLiteral: "," [5935,5938]
                                SimpleName: max [5941,5944]
                                StringLiteral: "]" [5947,5950]
                                StringLiteral: "  Values: [" [5978,5991]
                                SimpleName: yMin [5994,5998]
                                StringLiteral: "," [6001,6004]
                                SimpleName: yMax [6007,6011]
                                StringLiteral: "]" [6014,6017]
    IfStatement [6049,6379]
        InfixExpression [6053,6061]
            SimpleName: sign [6053,6057]
            INFIX_EXPRESSION_OPERATOR: < [6058,6059]
            NumberLiteral: 0 [6060,6061]
        Block [6062,6199]
            ExpressionStatement [6144,6189]
                Assignment [6144,6188]
                    SimpleName: ret [6144,6147]
                    ASSIGNMENT_OPERATOR: = [6148,6149]
                    MethodInvocation [6150,6188]
                        SimpleName: solve [6150,6155]
                        METHOD_INVOCATION_ARGUMENTS [6156,6187]
                            SimpleName: min [6156,6159]
                            SimpleName: yMin [6161,6165]
                            SimpleName: max [6167,6170]
                            SimpleName: yMax [6172,6176]
                            SimpleName: min [6178,6181]
                            SimpleName: yMin [6183,6187]
        Block [6205,6379]
            IfStatement [6262,6369]
                InfixExpression [6266,6277]
                    SimpleName: yMin [6266,6270]
                    INFIX_EXPRESSION_OPERATOR: == [6271,6273]
                    NumberLiteral: 0.0 [6274,6277]
                Block [6279,6321]
                    ExpressionStatement [6297,6307]
                        Assignment [6297,6306]
                            SimpleName: ret [6297,6300]
                            ASSIGNMENT_OPERATOR: = [6301,6302]
                            SimpleName: min [6303,6306]
                Block [6327,6369]
                    ExpressionStatement [6345,6355]
                        Assignment [6345,6354]
                            SimpleName: ret [6345,6348]
                            ASSIGNMENT_OPERATOR: = [6349,6350]
                            SimpleName: max [6351,6354]
to
Block [6065,7419]
at 6
===
move-tree
---
ReturnStatement [6389,6400]
    SimpleName: ret [6396,6399]
to
Block [6065,7419]
at 7
===
insert-tree
---
TagElement [7519,7549]
    SimpleName: f [7526,7527]
    TextElement:  the function to solve [7527,7549]
to
Javadoc [6420,7204]
at 1
===
insert-node
---
SimpleName: f [5059,5060]
to
METHOD_INVOCATION_ARGUMENTS [4128,4167]
at 0
===
insert-node
---
SimpleName: f [4506,4507]
to
METHOD_INVOCATION_ARGUMENTS [3581,3620]
at 0
===
insert-node
---
SimpleName: f [4905,4906]
to
METHOD_INVOCATION_ARGUMENTS [3977,4024]
at 0
===
insert-node
---
SimpleName: f [7166,7167]
to
METHOD_INVOCATION_ARGUMENTS [6156,6187]
at 0
===
delete-tree
---
PrefixExpression [1451,1472]
    PREFIX_EXPRESSION_OPERATOR: - [1451,1452]
    NumberLiteral: 2136672307739067002L [1452,1472]
===
delete-node
---
Javadoc [1479,1583]
===
===
delete-tree
---
Javadoc [4186,4930]
    TagElement [4197,4422]
        TextElement: Find a zero in the given interval. [4197,4231]
        TextElement: <p> [4239,4242]
        TextElement: Requires that the values of the function at the endpoints have opposite [4250,4321]
        TextElement: signs. An <code>IllegalArgumentException</code> is thrown if this is not [4329,4401]
        TextElement: the case.</p> [4409,4422]
    TagElement [4438,4482]
        SimpleName: min [4445,4448]
        TextElement:  the lower bound for the interval. [4448,4482]
    TagElement [4490,4534]
        SimpleName: max [4497,4500]
        TextElement:  the upper bound for the interval. [4500,4534]
    TagElement [4542,4586]
        TextElement:  the value where the function is zero [4549,4586]
    TagElement [4594,4675]
        SimpleName: MaxIterationsExceededException [4602,4632]
        TextElement:  if the maximum iteration count is exceeded [4632,4675]
    TagElement [4683,4769]
        SimpleName: FunctionEvaluationException [4691,4718]
        TextElement:  if an error occurs evaluating the [4718,4752]
        TextElement: function  [4760,4769]
    TagElement [4777,4922]
        SimpleName: IllegalArgumentException [4785,4809]
        TextElement:  if min is not less than max or the [4809,4844]
        TextElement: signs of the values of the function at the endpoints are not opposites [4852,4922]
===
delete-tree
---
Javadoc [1675,2588]
    TagElement [1686,2008]
        TextElement: Find a zero in the given interval with an initial guess. [1686,1742]
        TextElement: <p>Throws <code>IllegalArgumentException</code> if the values of the [1750,1818]
        TextElement: function at the three points have the same sign (note that it is [1826,1890]
        TextElement: allowed to have endpoints with the same sign if the initial point has [1898,1967]
        TextElement: opposite sign function-wise).</p> [1975,2008]
    TagElement [2024,2068]
        SimpleName: min [2031,2034]
        TextElement:  the lower bound for the interval. [2034,2068]
    TagElement [2076,2120]
        SimpleName: max [2083,2086]
        TextElement:  the upper bound for the interval. [2086,2120]
    TagElement [2128,2223]
        SimpleName: initial [2135,2142]
        TextElement:  the start value to use (must be set to min if no [2142,2191]
        TextElement: initial point is known). [2199,2223]
    TagElement [2231,2275]
        TextElement:  the value where the function is zero [2238,2275]
    TagElement [2283,2369]
        SimpleName: MaxIterationsExceededException [2291,2321]
        TextElement:  the maximum iteration count [2321,2349]
        TextElement: is exceeded  [2357,2369]
    TagElement [2377,2463]
        SimpleName: FunctionEvaluationException [2385,2412]
        TextElement:  if an error occurs evaluating [2412,2442]
        TextElement: the function [2451,2463]
    TagElement [2471,2580]
        SimpleName: IllegalArgumentException [2479,2503]
        TextElement:  if initial is not between min and max [2503,2541]
        TextElement: (even if it <em>is</em> a root) [2549,2580]
