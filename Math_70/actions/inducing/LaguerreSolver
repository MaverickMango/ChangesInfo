===
insert-tree
---
ImportDeclaration [959,1011]
    QualifiedName: org.apache.commons.math.MathRuntimeException [966,1010]
to
CompilationUnit [0,13021]
at 3
===
move-tree
---
MethodDeclaration [2544,3775]
    Javadoc [2544,3192]
        TagElement [2555,2666]
            TextElement: Find a real root in the given interval with initial value. [2555,2613]
            TextElement: <p> [2621,2624]
            TextElement: Requires bracketing condition.</p> [2632,2666]
        TagElement [2682,2725]
            SimpleName: min [2689,2692]
            TextElement:  the lower bound for the interval [2692,2725]
        TagElement [2733,2776]
            SimpleName: max [2740,2743]
            TextElement:  the upper bound for the interval [2743,2776]
        TagElement [2784,2821]
            SimpleName: initial [2791,2798]
            TextElement:  the start value to use [2798,2821]
        TagElement [2829,2882]
            TextElement:  the point at which the function value is zero [2836,2882]
        TagElement [2890,3021]
            SimpleName: ConvergenceException [2898,2918]
            TextElement:  if the maximum iteration count is exceeded [2918,2961]
            TextElement: or the solver detects convergence problems otherwise [2969,3021]
        TagElement [3029,3114]
            SimpleName: FunctionEvaluationException [3037,3064]
            TextElement:  if an error occurs evaluating the [3064,3098]
            TextElement: function [3106,3114]
        TagElement [3122,3184]
            SimpleName: IllegalArgumentException [3130,3154]
            TextElement:  if any parameters are invalid [3154,3184]
    Modifier: public [3197,3203]
    PrimitiveType: double [3204,3210]
    SimpleName: solve [3211,3216]
    SingleVariableDeclaration [3217,3227]
        PrimitiveType: double [3217,3223]
        SimpleName: min [3224,3227]
    SingleVariableDeclaration [3229,3239]
        PrimitiveType: double [3229,3235]
        SimpleName: max [3236,3239]
    SingleVariableDeclaration [3241,3255]
        PrimitiveType: double [3241,3247]
        SimpleName: initial [3248,3255]
    SimpleType [3272,3292]
        SimpleName: ConvergenceException [3272,3292]
    SimpleType [3294,3321]
        SimpleName: FunctionEvaluationException [3294,3321]
    Block [3322,3775]
        IfStatement [3388,3428]
            InfixExpression [3392,3411]
                MethodInvocation [3392,3404]
                    METHOD_INVOCATION_RECEIVER [3392,3393]
                        SimpleName: p [3392,3393]
                    SimpleName: value [3394,3399]
                    METHOD_INVOCATION_ARGUMENTS [3400,3403]
                        SimpleName: min [3400,3403]
                INFIX_EXPRESSION_OPERATOR: == [3405,3407]
                NumberLiteral: 0.0 [3408,3411]
            Block [3413,3428]
                ReturnStatement [3415,3426]
                    SimpleName: min [3422,3425]
        IfStatement [3437,3477]
            InfixExpression [3441,3460]
                MethodInvocation [3441,3453]
                    METHOD_INVOCATION_RECEIVER [3441,3442]
                        SimpleName: p [3441,3442]
                    SimpleName: value [3443,3448]
                    METHOD_INVOCATION_ARGUMENTS [3449,3452]
                        SimpleName: max [3449,3452]
                INFIX_EXPRESSION_OPERATOR: == [3454,3456]
                NumberLiteral: 0.0 [3457,3460]
            Block [3462,3477]
                ReturnStatement [3464,3475]
                    SimpleName: max [3471,3474]
        IfStatement [3486,3534]
            InfixExpression [3490,3513]
                MethodInvocation [3490,3506]
                    METHOD_INVOCATION_RECEIVER [3490,3491]
                        SimpleName: p [3490,3491]
                    SimpleName: value [3492,3497]
                    METHOD_INVOCATION_ARGUMENTS [3498,3505]
                        SimpleName: initial [3498,3505]
                INFIX_EXPRESSION_OPERATOR: == [3507,3509]
                NumberLiteral: 0.0 [3510,3513]
            Block [3515,3534]
                ReturnStatement [3517,3532]
                    SimpleName: initial [3524,3531]
        ExpressionStatement [3544,3574]
            MethodInvocation [3544,3573]
                SimpleName: verifyBracketing [3544,3560]
                METHOD_INVOCATION_ARGUMENTS [3561,3572]
                    SimpleName: min [3561,3564]
                    SimpleName: max [3566,3569]
                    SimpleName: p [3571,3572]
        ExpressionStatement [3583,3617]
            MethodInvocation [3583,3616]
                SimpleName: verifySequence [3583,3597]
                METHOD_INVOCATION_ARGUMENTS [3598,3615]
                    SimpleName: min [3598,3601]
                    SimpleName: initial [3603,3610]
                    SimpleName: max [3612,3615]
        IfStatement [3626,3769]
            MethodInvocation [3630,3659]
                SimpleName: isBracketing [3630,3642]
                METHOD_INVOCATION_ARGUMENTS [3643,3658]
                    SimpleName: min [3643,3646]
                    SimpleName: initial [3648,3655]
                    SimpleName: p [3657,3658]
            Block [3661,3712]
                ReturnStatement [3675,3702]
                    MethodInvocation [3682,3701]
                        SimpleName: solve [3682,3687]
                        METHOD_INVOCATION_ARGUMENTS [3688,3700]
                            SimpleName: min [3688,3691]
                            SimpleName: initial [3693,3700]
            Block [3718,3769]
                ReturnStatement [3732,3759]
                    MethodInvocation [3739,3758]
                        SimpleName: solve [3739,3744]
                        METHOD_INVOCATION_ARGUMENTS [3745,3757]
                            SimpleName: initial [3745,3752]
                            SimpleName: max [3754,3757]
to
TypeDeclaration [1071,13020]
at 10
===
insert-tree
---
MethodDeclaration [2748,2848]
    Javadoc [2748,2786]
        TagElement [2759,2778]
            TextElement: Construct a solver. [2759,2778]
    Modifier: public [2791,2797]
    SimpleName: LaguerreSolver [2798,2812]
    Block [2815,2848]
        SuperConstructorInvocation [2825,2842]
            NumberLiteral: 100 [2831,2834]
            NumberLiteral: 1E-6 [2836,2840]
to
TypeDeclaration [1071,13020]
at 8
===
insert-node
---
MethodDeclaration [3658,5025]
to
TypeDeclaration [1071,13020]
at 12
===
insert-node
---
MethodDeclaration [5031,7431]
to
TypeDeclaration [1071,13020]
at 13
===
insert-tree
---
Javadoc [1770,1891]
    TagElement [1774,1803]
        TextElement: polynomial function to solve. [1774,1803]
    TagElement [1811,1883]
        TextElement:  as of 2.0 the function is not stored anymore in the instance [1822,1883]
to
FieldDeclaration [1717,1786]
at 0
===
insert-tree
---
MarkerAnnotation [1896,1907]
    SimpleName: Deprecated [1897,1907]
to
FieldDeclaration [1717,1786]
at 1
===
insert-node
---
Javadoc [1947,2376]
to
MethodDeclaration [1792,2286]
at 0
===
insert-tree
---
MarkerAnnotation [2381,2392]
    SimpleName: Deprecated [2382,2392]
to
MethodDeclaration [1792,2286]
at 1
===
insert-tree
---
MarkerAnnotation [3068,3079]
    SimpleName: Deprecated [3069,3079]
to
MethodDeclaration [2292,2538]
at 1
===
insert-tree
---
Javadoc [3207,3227]
    TagElement [3211,3225]
        TagElement [3211,3224]
        TextElement:   [3224,3225]
to
MethodDeclaration [3781,5854]
at 0
===
insert-tree
---
MarkerAnnotation [3232,3243]
    SimpleName: Deprecated [3233,3243]
to
MethodDeclaration [3781,5854]
at 1
===
insert-tree
---
Javadoc [3417,3437]
    TagElement [3421,3435]
        TagElement [3421,3434]
        TextElement:   [3434,3435]
to
MethodDeclaration [2544,3775]
at 0
===
insert-tree
---
MarkerAnnotation [3442,3453]
    SimpleName: Deprecated [3443,3453]
to
MethodDeclaration [2544,3775]
at 1
===
insert-tree
---
Javadoc [3658,4361]
    TagElement [3669,3780]
        TextElement: Find a real root in the given interval with initial value. [3669,3727]
        TextElement: <p> [3735,3738]
        TextElement: Requires bracketing condition.</p> [3746,3780]
    TagElement [3796,3843]
        SimpleName: f [3803,3804]
        TextElement:  function to solve (must be polynomial) [3804,3843]
    TagElement [3851,3894]
        SimpleName: min [3858,3861]
        TextElement:  the lower bound for the interval [3861,3894]
    TagElement [3902,3945]
        SimpleName: max [3909,3912]
        TextElement:  the upper bound for the interval [3912,3945]
    TagElement [3953,3990]
        SimpleName: initial [3960,3967]
        TextElement:  the start value to use [3967,3990]
    TagElement [3998,4051]
        TextElement:  the point at which the function value is zero [4005,4051]
    TagElement [4059,4190]
        SimpleName: ConvergenceException [4067,4087]
        TextElement:  if the maximum iteration count is exceeded [4087,4130]
        TextElement: or the solver detects convergence problems otherwise [4138,4190]
    TagElement [4198,4283]
        SimpleName: FunctionEvaluationException [4206,4233]
        TextElement:  if an error occurs evaluating the [4233,4267]
        TextElement: function [4275,4283]
    TagElement [4291,4353]
        SimpleName: IllegalArgumentException [4299,4323]
        TextElement:  if any parameters are invalid [4323,4353]
to
MethodDeclaration [3658,5025]
at 0
===
insert-node
---
Modifier: public [4366,4372]
to
MethodDeclaration [3658,5025]
at 1
===
insert-node
---
PrimitiveType: double [4373,4379]
to
MethodDeclaration [3658,5025]
at 2
===
insert-node
---
SimpleName: solve [4380,4385]
to
MethodDeclaration [3658,5025]
at 3
===
insert-tree
---
SingleVariableDeclaration [4386,4416]
    Modifier: final [4386,4391]
    SimpleType [4392,4414]
        SimpleName: UnivariateRealFunction [4392,4414]
    SimpleName: f [4415,4416]
to
MethodDeclaration [3658,5025]
at 4
===
insert-tree
---
SingleVariableDeclaration [4442,4458]
    Modifier: final [4442,4447]
    PrimitiveType: double [4448,4454]
    SimpleName: min [4455,4458]
to
MethodDeclaration [3658,5025]
at 5
===
insert-tree
---
SingleVariableDeclaration [4460,4476]
    Modifier: final [4460,4465]
    PrimitiveType: double [4466,4472]
    SimpleName: max [4473,4476]
to
MethodDeclaration [3658,5025]
at 6
===
insert-tree
---
SingleVariableDeclaration [4478,4498]
    Modifier: final [4478,4483]
    PrimitiveType: double [4484,4490]
    SimpleName: initial [4491,4498]
to
MethodDeclaration [3658,5025]
at 7
===
insert-tree
---
SimpleType [4515,4535]
    SimpleName: ConvergenceException [4515,4535]
to
MethodDeclaration [3658,5025]
at 8
===
insert-tree
---
SimpleType [4537,4564]
    SimpleName: FunctionEvaluationException [4537,4564]
to
MethodDeclaration [3658,5025]
at 9
===
insert-node
---
Block [4565,5025]
to
MethodDeclaration [3658,5025]
at 10
===
insert-tree
---
Javadoc [5031,5975]
    TagElement [5042,5456]
        TextElement: Find a real root in the given interval. [5042,5081]
        TextElement: <p> [5089,5092]
        TextElement: Despite the bracketing condition, the root returned by solve(Complex[], [5100,5171]
        TextElement: Complex) may not be a real zero inside [min, max]. For example, [5179,5242]
        TextElement: p(x) = x^3 + 1, min = -2, max = 2, initial = 0. We can either try [5250,5315]
        TextElement: another initial value, or, as we did here, call solveAll() to obtain [5323,5391]
        TextElement: all roots and pick up the one that we're looking for.</p> [5399,5456]
    TagElement [5471,5501]
        SimpleName: f [5478,5479]
        TextElement:  the function to solve [5479,5501]
    TagElement [5509,5552]
        SimpleName: min [5516,5519]
        TextElement:  the lower bound for the interval [5519,5552]
    TagElement [5560,5603]
        SimpleName: max [5567,5570]
        TextElement:  the upper bound for the interval [5570,5603]
    TagElement [5611,5664]
        TextElement:  the point at which the function value is zero [5618,5664]
    TagElement [5672,5803]
        SimpleName: ConvergenceException [5680,5700]
        TextElement:  if the maximum iteration count is exceeded [5700,5743]
        TextElement: or the solver detects convergence problems otherwise [5751,5803]
    TagElement [5811,5897]
        SimpleName: FunctionEvaluationException [5819,5846]
        TextElement:  if an error occurs evaluating the [5846,5880]
        TextElement: function  [5888,5897]
    TagElement [5905,5967]
        SimpleName: IllegalArgumentException [5913,5937]
        TextElement:  if any parameters are invalid [5937,5967]
to
MethodDeclaration [5031,7431]
at 0
===
insert-node
---
Modifier: public [5980,5986]
to
MethodDeclaration [5031,7431]
at 1
===
insert-node
---
PrimitiveType: double [5987,5993]
to
MethodDeclaration [5031,7431]
at 2
===
insert-node
---
SimpleName: solve [5994,5999]
to
MethodDeclaration [5031,7431]
at 3
===
insert-tree
---
SingleVariableDeclaration [6000,6030]
    Modifier: final [6000,6005]
    SimpleType [6006,6028]
        SimpleName: UnivariateRealFunction [6006,6028]
    SimpleName: f [6029,6030]
to
MethodDeclaration [5031,7431]
at 4
===
insert-tree
---
SingleVariableDeclaration [6056,6072]
    Modifier: final [6056,6061]
    PrimitiveType: double [6062,6068]
    SimpleName: min [6069,6072]
to
MethodDeclaration [5031,7431]
at 5
===
insert-tree
---
SingleVariableDeclaration [6074,6090]
    Modifier: final [6074,6079]
    PrimitiveType: double [6080,6086]
    SimpleName: max [6087,6090]
to
MethodDeclaration [5031,7431]
at 6
===
insert-tree
---
SimpleType [6107,6127]
    SimpleName: ConvergenceException [6107,6127]
to
MethodDeclaration [5031,7431]
at 7
===
insert-tree
---
SimpleType [6129,6156]
    SimpleName: FunctionEvaluationException [6129,6156]
to
MethodDeclaration [5031,7431]
at 8
===
insert-node
---
Block [6157,7431]
to
MethodDeclaration [5031,7431]
at 9
===
move-tree
---
TagElement [1803,1845]
    TextElement: Construct a solver for the given function. [1803,1845]
to
Javadoc [1947,2376]
at 0
===
move-tree
---
TagElement [1860,1886]
    SimpleName: f [1867,1868]
    TextElement:  function to solve [1868,1886]
to
Javadoc [1947,2376]
at 1
===
move-tree
---
TagElement [1894,1956]
    SimpleName: IllegalArgumentException [1902,1926]
    TextElement:  if function is not polynomial [1926,1956]
to
Javadoc [1947,2376]
at 2
===
insert-tree
---
TagElement [2119,2368]
    TextElement:  as of 2.0 the function to solve is passed as an argument [2130,2187]
    TextElement: to the  [2195,2202]
    TagElement [2202,2256]
        MethodRef [2209,2255]
            SimpleName: solve [2210,2215]
            MethodRefParameter [2216,2238]
                SimpleType [2216,2238]
                    SimpleName: UnivariateRealFunction [2216,2238]
            MethodRefParameter [2240,2246]
                PrimitiveType: double [2240,2246]
            MethodRefParameter [2248,2254]
                PrimitiveType: double [2248,2254]
    TextElement:  or [2256,2259]
    TagElement [2267,2353]
        MethodRef [2274,2352]
            SimpleName: UnivariateRealSolverImpl [2274,2298]
            SimpleName: solve [2299,2304]
            MethodRefParameter [2305,2327]
                SimpleType [2305,2327]
                    SimpleName: UnivariateRealFunction [2305,2327]
            MethodRefParameter [2329,2335]
                PrimitiveType: double [2329,2335]
            MethodRefParameter [2337,2343]
                PrimitiveType: double [2337,2343]
            MethodRefParameter [2345,2351]
                PrimitiveType: double [2345,2351]
    TextElement: method. [2361,2368]
to
Javadoc [1947,2376]
at 3
===
insert-tree
---
TagElement [2978,3055]
    TextElement:  as of 2.0 the function is not stored anymore within the instance. [2989,3055]
to
Javadoc [2292,2416]
at 2
===
insert-node
---
Modifier: final [3268,3273]
to
SingleVariableDeclaration [4712,4722]
at 0
===
insert-node
---
Modifier: final [3286,3291]
to
SingleVariableDeclaration [4724,4734]
at 0
===
insert-node
---
ReturnStatement [3379,3405]
to
Block [4802,5854]
at 0
===
insert-node
---
Modifier: final [3478,3483]
to
SingleVariableDeclaration [3217,3227]
at 0
===
insert-node
---
Modifier: final [3496,3501]
to
SingleVariableDeclaration [3229,3239]
at 0
===
insert-node
---
Modifier: final [3514,3519]
to
SingleVariableDeclaration [3241,3255]
at 0
===
insert-node
---
ReturnStatement [3611,3646]
to
Block [3322,3775]
at 0
===
move-tree
---
IfStatement [3388,3428]
    InfixExpression [3392,3411]
        MethodInvocation [3392,3404]
            METHOD_INVOCATION_RECEIVER [3392,3393]
                SimpleName: p [3392,3393]
            SimpleName: value [3394,3399]
            METHOD_INVOCATION_ARGUMENTS [3400,3403]
                SimpleName: min [3400,3403]
        INFIX_EXPRESSION_OPERATOR: == [3405,3407]
        NumberLiteral: 0.0 [3408,3411]
    Block [3413,3428]
        ReturnStatement [3415,3426]
            SimpleName: min [3422,3425]
to
Block [4565,5025]
at 0
===
move-tree
---
IfStatement [3437,3477]
    InfixExpression [3441,3460]
        MethodInvocation [3441,3453]
            METHOD_INVOCATION_RECEIVER [3441,3442]
                SimpleName: p [3441,3442]
            SimpleName: value [3443,3448]
            METHOD_INVOCATION_ARGUMENTS [3449,3452]
                SimpleName: max [3449,3452]
        INFIX_EXPRESSION_OPERATOR: == [3454,3456]
        NumberLiteral: 0.0 [3457,3460]
    Block [3462,3477]
        ReturnStatement [3464,3475]
            SimpleName: max [3471,3474]
to
Block [4565,5025]
at 1
===
move-tree
---
IfStatement [3486,3534]
    InfixExpression [3490,3513]
        MethodInvocation [3490,3506]
            METHOD_INVOCATION_RECEIVER [3490,3491]
                SimpleName: p [3490,3491]
            SimpleName: value [3492,3497]
            METHOD_INVOCATION_ARGUMENTS [3498,3505]
                SimpleName: initial [3498,3505]
        INFIX_EXPRESSION_OPERATOR: == [3507,3509]
        NumberLiteral: 0.0 [3510,3513]
    Block [3515,3534]
        ReturnStatement [3517,3532]
            SimpleName: initial [3524,3531]
to
Block [4565,5025]
at 2
===
move-tree
---
ExpressionStatement [3544,3574]
    MethodInvocation [3544,3573]
        SimpleName: verifyBracketing [3544,3560]
        METHOD_INVOCATION_ARGUMENTS [3561,3572]
            SimpleName: min [3561,3564]
            SimpleName: max [3566,3569]
            SimpleName: p [3571,3572]
to
Block [4565,5025]
at 3
===
move-tree
---
ExpressionStatement [3583,3617]
    MethodInvocation [3583,3616]
        SimpleName: verifySequence [3583,3597]
        METHOD_INVOCATION_ARGUMENTS [3598,3615]
            SimpleName: min [3598,3601]
            SimpleName: initial [3603,3610]
            SimpleName: max [3612,3615]
to
Block [4565,5025]
at 4
===
move-tree
---
IfStatement [3626,3769]
    MethodInvocation [3630,3659]
        SimpleName: isBracketing [3630,3642]
        METHOD_INVOCATION_ARGUMENTS [3643,3658]
            SimpleName: min [3643,3646]
            SimpleName: initial [3648,3655]
            SimpleName: p [3657,3658]
    Block [3661,3712]
        ReturnStatement [3675,3702]
            MethodInvocation [3682,3701]
                SimpleName: solve [3682,3687]
                METHOD_INVOCATION_ARGUMENTS [3688,3700]
                    SimpleName: min [3688,3691]
                    SimpleName: initial [3693,3700]
    Block [3718,3769]
        ReturnStatement [3732,3759]
            MethodInvocation [3739,3758]
                SimpleName: solve [3739,3744]
                METHOD_INVOCATION_ARGUMENTS [3745,3757]
                    SimpleName: initial [3745,3752]
                    SimpleName: max [3754,3757]
to
Block [4565,5025]
at 5
===
insert-tree
---
IfStatement [6199,6357]
    PrefixExpression [6203,6237]
        PREFIX_EXPRESSION_OPERATOR: ! [6203,6204]
        ParenthesizedExpression [6204,6237]
            InstanceofExpression [6205,6236]
                SimpleName: f [6205,6206]
                SimpleType [6218,6236]
                    SimpleName: PolynomialFunction [6218,6236]
    Block [6239,6357]
        ThrowStatement [6253,6347]
            MethodInvocation [6259,6346]
                METHOD_INVOCATION_RECEIVER [6259,6279]
                    SimpleName: MathRuntimeException [6259,6279]
                SimpleName: createIllegalArgumentException [6280,6310]
                METHOD_INVOCATION_ARGUMENTS [6311,6345]
                    StringLiteral: "function is not polynomial" [6311,6339]
                    NullLiteral [6341,6345]
to
Block [6157,7431]
at 0
===
move-tree
---
IfStatement [4868,4908]
    InfixExpression [4872,4891]
        MethodInvocation [4872,4884]
            METHOD_INVOCATION_RECEIVER [4872,4873]
                SimpleName: p [4872,4873]
            SimpleName: value [4874,4879]
            METHOD_INVOCATION_ARGUMENTS [4880,4883]
                SimpleName: min [4880,4883]
        INFIX_EXPRESSION_OPERATOR: == [4885,4887]
        NumberLiteral: 0.0 [4888,4891]
    Block [4893,4908]
        ReturnStatement [4895,4906]
            SimpleName: min [4902,4905]
to
Block [6157,7431]
at 1
===
move-tree
---
IfStatement [4917,4957]
    InfixExpression [4921,4940]
        MethodInvocation [4921,4933]
            METHOD_INVOCATION_RECEIVER [4921,4922]
                SimpleName: p [4921,4922]
            SimpleName: value [4923,4928]
            METHOD_INVOCATION_ARGUMENTS [4929,4932]
                SimpleName: max [4929,4932]
        INFIX_EXPRESSION_OPERATOR: == [4934,4936]
        NumberLiteral: 0.0 [4937,4940]
    Block [4942,4957]
        ReturnStatement [4944,4955]
            SimpleName: max [4951,4954]
to
Block [6157,7431]
at 2
===
move-tree
---
ExpressionStatement [4966,4996]
    MethodInvocation [4966,4995]
        SimpleName: verifyBracketing [4966,4982]
        METHOD_INVOCATION_ARGUMENTS [4983,4994]
            SimpleName: min [4983,4986]
            SimpleName: max [4988,4991]
            SimpleName: p [4993,4994]
to
Block [6157,7431]
at 3
===
insert-tree
---
VariableDeclarationStatement [6560,6627]
    PrimitiveType: double [6560,6566]
    VariableDeclarationFragment [6567,6626]
        SimpleName: coefficients [6567,6579]
        Dimension [6579,6581]
        MethodInvocation [6584,6626]
            METHOD_INVOCATION_RECEIVER [6584,6608]
                ParenthesizedExpression [6584,6608]
                    CastExpression [6585,6607]
                        SimpleType [6586,6604]
                            SimpleName: PolynomialFunction [6586,6604]
                        SimpleName: f [6606,6607]
            SimpleName: getCoefficients [6609,6624]
to
Block [6157,7431]
at 4
===
move-tree
---
VariableDeclarationStatement [5059,5106]
    SimpleType [5059,5066]
        SimpleName: Complex [5059,5066]
    VariableDeclarationFragment [5067,5105]
        SimpleName: c [5067,5068]
        Dimension [5068,5070]
        ArrayCreation [5073,5105]
            ArrayType [5077,5105]
                SimpleType [5077,5084]
                    SimpleName: Complex [5077,5084]
                Dimension [5084,5105]
                    QualifiedName: coefficients.length [5085,5104]
to
Block [6157,7431]
at 5
===
move-tree
---
ForStatement [5115,5226]
    VariableDeclarationExpression [5120,5129]
        PrimitiveType: int [5120,5123]
        VariableDeclarationFragment [5124,5129]
            SimpleName: i [5124,5125]
            NumberLiteral: 0 [5128,5129]
    InfixExpression [5131,5154]
        SimpleName: i [5131,5132]
        INFIX_EXPRESSION_OPERATOR: < [5133,5134]
        QualifiedName: coefficients.length [5135,5154]
    PostfixExpression [5156,5159]
        SimpleName: i [5156,5157]
        POSTFIX_EXPRESSION_OPERATOR: ++ [5157,5159]
    Block [5161,5226]
        ExpressionStatement [5175,5216]
            Assignment [5175,5215]
                ArrayAccess [5175,5179]
                    SimpleName: c [5175,5176]
                    SimpleName: i [5177,5178]
                ASSIGNMENT_OPERATOR: = [5180,5181]
                ClassInstanceCreation [5182,5215]
                    SimpleType [5186,5193]
                        SimpleName: Complex [5186,5193]
                    ArrayAccess [5194,5209]
                        SimpleName: coefficients [5194,5206]
                        SimpleName: i [5207,5208]
                    NumberLiteral: 0.0 [5211,5214]
to
Block [6157,7431]
at 6
===
move-tree
---
VariableDeclarationStatement [5235,5289]
    SimpleType [5235,5242]
        SimpleName: Complex [5235,5242]
    VariableDeclarationFragment [5243,5288]
        SimpleName: initial [5243,5250]
        ClassInstanceCreation [5253,5288]
            SimpleType [5257,5264]
                SimpleName: Complex [5257,5264]
            InfixExpression [5265,5282]
                NumberLiteral: 0.5 [5265,5268]
                INFIX_EXPRESSION_OPERATOR: * [5269,5270]
                ParenthesizedExpression [5271,5282]
                    InfixExpression [5272,5281]
                        SimpleName: min [5272,5275]
                        INFIX_EXPRESSION_OPERATOR: + [5276,5277]
                        SimpleName: max [5278,5281]
            NumberLiteral: 0.0 [5284,5287]
to
Block [6157,7431]
at 7
===
move-tree
---
VariableDeclarationStatement [5298,5328]
    SimpleType [5298,5305]
        SimpleName: Complex [5298,5305]
    VariableDeclarationFragment [5306,5327]
        SimpleName: z [5306,5307]
        MethodInvocation [5310,5327]
            SimpleName: solve [5310,5315]
            METHOD_INVOCATION_ARGUMENTS [5316,5326]
                SimpleName: c [5316,5317]
                SimpleName: initial [5319,5326]
to
Block [6157,7431]
at 8
===
move-tree
---
IfStatement [5337,5454]
    MethodInvocation [5341,5362]
        SimpleName: isRootOK [5341,5349]
        METHOD_INVOCATION_ARGUMENTS [5350,5361]
            SimpleName: min [5350,5353]
            SimpleName: max [5355,5358]
            SimpleName: z [5360,5361]
    Block [5364,5454]
        ExpressionStatement [5378,5417]
            MethodInvocation [5378,5416]
                SimpleName: setResult [5378,5387]
                METHOD_INVOCATION_ARGUMENTS [5388,5415]
                    MethodInvocation [5388,5399]
                        METHOD_INVOCATION_RECEIVER [5388,5389]
                            SimpleName: z [5388,5389]
                        SimpleName: getReal [5390,5397]
                    SimpleName: iterationCount [5401,5415]
        ReturnStatement [5430,5444]
            SimpleName: result [5437,5443]
to
Block [6157,7431]
at 9
===
move-tree
---
VariableDeclarationStatement [5524,5562]
    ArrayType [5524,5533]
        SimpleType [5524,5531]
            SimpleName: Complex [5524,5531]
        Dimension [5531,5533]
    VariableDeclarationFragment [5534,5561]
        SimpleName: root [5534,5538]
        MethodInvocation [5541,5561]
            SimpleName: solveAll [5541,5549]
            METHOD_INVOCATION_ARGUMENTS [5550,5560]
                SimpleName: c [5550,5551]
                SimpleName: initial [5553,5560]
to
Block [6157,7431]
at 10
===
move-tree
---
ForStatement [5571,5774]
    VariableDeclarationExpression [5576,5585]
        PrimitiveType: int [5576,5579]
        VariableDeclarationFragment [5580,5585]
            SimpleName: i [5580,5581]
            NumberLiteral: 0 [5584,5585]
    InfixExpression [5587,5602]
        SimpleName: i [5587,5588]
        INFIX_EXPRESSION_OPERATOR: < [5589,5590]
        QualifiedName: root.length [5591,5602]
    PostfixExpression [5604,5607]
        SimpleName: i [5604,5605]
        POSTFIX_EXPRESSION_OPERATOR: ++ [5605,5607]
    Block [5609,5774]
        IfStatement [5623,5764]
            MethodInvocation [5627,5654]
                SimpleName: isRootOK [5627,5635]
                METHOD_INVOCATION_ARGUMENTS [5636,5653]
                    SimpleName: min [5636,5639]
                    SimpleName: max [5641,5644]
                    ArrayAccess [5646,5653]
                        SimpleName: root [5646,5650]
                        SimpleName: i [5651,5652]
            Block [5656,5764]
                ExpressionStatement [5674,5719]
                    MethodInvocation [5674,5718]
                        SimpleName: setResult [5674,5683]
                        METHOD_INVOCATION_ARGUMENTS [5684,5717]
                            MethodInvocation [5684,5701]
                                METHOD_INVOCATION_RECEIVER [5684,5691]
                                    ArrayAccess [5684,5691]
                                        SimpleName: root [5684,5688]
                                        SimpleName: i [5689,5690]
                                SimpleName: getReal [5692,5699]
                            SimpleName: iterationCount [5703,5717]
                ReturnStatement [5736,5750]
                    SimpleName: result [5743,5749]
to
Block [6157,7431]
at 11
===
move-tree
---
ThrowStatement [5815,5848]
    ClassInstanceCreation [5821,5847]
        SimpleType [5825,5845]
            SimpleName: ConvergenceException [5825,5845]
to
Block [6157,7431]
at 12
===
insert-node
---
MethodInvocation [3386,3404]
to
ReturnStatement [3379,3405]
at 0
===
insert-node
---
MethodInvocation [3618,3645]
to
ReturnStatement [3611,3646]
at 0
===
insert-tree
---
ThrowStatement [2632,2726]
    MethodInvocation [2638,2725]
        METHOD_INVOCATION_RECEIVER [2638,2658]
            SimpleName: MathRuntimeException [2638,2658]
        SimpleName: createIllegalArgumentException [2659,2689]
        METHOD_INVOCATION_ARGUMENTS [2690,2724]
            StringLiteral: "function is not polynomial" [2690,2718]
            NullLiteral [2720,2724]
to
Block [2190,2280]
at 0
===
insert-node
---
SimpleName: solve [3386,3391]
to
MethodInvocation [3386,3404]
at 0
===
insert-node
---
METHOD_INVOCATION_ARGUMENTS [3392,3403]
to
MethodInvocation [3386,3404]
at 1
===
insert-node
---
SimpleName: solve [3618,3623]
to
MethodInvocation [3618,3645]
at 0
===
insert-node
---
METHOD_INVOCATION_ARGUMENTS [3624,3644]
to
MethodInvocation [3618,3645]
at 1
===
insert-node
---
SimpleName: min [3395,3398]
to
METHOD_INVOCATION_ARGUMENTS [3392,3403]
at 0
===
insert-node
---
SimpleName: max [3400,3403]
to
METHOD_INVOCATION_ARGUMENTS [3392,3403]
at 1
===
insert-node
---
SimpleName: min [3627,3630]
to
METHOD_INVOCATION_ARGUMENTS [3624,3644]
at 0
===
insert-node
---
SimpleName: max [3632,3635]
to
METHOD_INVOCATION_ARGUMENTS [3624,3644]
at 1
===
insert-node
---
SimpleName: initial [3637,3644]
to
METHOD_INVOCATION_ARGUMENTS [3624,3644]
at 2
===
insert-node
---
SimpleName: f [4814,4815]
to
METHOD_INVOCATION_ARGUMENTS [3561,3572]
at 2
===
insert-node
---
SimpleName: f [4900,4901]
to
METHOD_INVOCATION_ARGUMENTS [3643,3658]
at 2
===
insert-node
---
SimpleName: f [6547,6548]
to
METHOD_INVOCATION_ARGUMENTS [4983,4994]
at 2
===
insert-node
---
SimpleName: f [4635,4636]
to
METHOD_INVOCATION_RECEIVER [3392,3393]
at 0
===
insert-node
---
SimpleName: f [4684,4685]
to
METHOD_INVOCATION_RECEIVER [3441,3442]
at 0
===
insert-node
---
SimpleName: f [4733,4734]
to
METHOD_INVOCATION_RECEIVER [3490,3491]
at 0
===
insert-node
---
SimpleName: f [6426,6427]
to
METHOD_INVOCATION_RECEIVER [4872,4873]
at 0
===
insert-node
---
SimpleName: f [6475,6476]
to
METHOD_INVOCATION_RECEIVER [4921,4922]
at 0
===
insert-node
---
SimpleName: f [4931,4932]
to
METHOD_INVOCATION_ARGUMENTS [3688,3700]
at 0
===
insert-node
---
SimpleName: f [4991,4992]
to
METHOD_INVOCATION_ARGUMENTS [3745,3757]
at 0
===
delete-tree
---
Javadoc [1717,1752]
    TagElement [1721,1750]
        TextElement: polynomial function to solve  [1721,1750]
===
delete-node
---
Javadoc [1792,1964]
===
===
delete-tree
---
ThrowStatement [2204,2270]
    ClassInstanceCreation [2210,2269]
        SimpleType [2214,2238]
            SimpleName: IllegalArgumentException [2214,2238]
        StringLiteral: "Function is not polynomial." [2239,2268]
===
delete-tree
---
Javadoc [3781,4687]
    TagElement [3792,4206]
        TextElement: Find a real root in the given interval. [3792,3831]
        TextElement: <p> [3839,3842]
        TextElement: Despite the bracketing condition, the root returned by solve(Complex[], [3850,3921]
        TextElement: Complex) may not be a real zero inside [min, max]. For example, [3929,3992]
        TextElement: p(x) = x^3 + 1, min = -2, max = 2, initial = 0. We can either try [4000,4065]
        TextElement: another initial value, or, as we did here, call solveAll() to obtain [4073,4141]
        TextElement: all roots and pick up the one that we're looking for.</p> [4149,4206]
    TagElement [4221,4264]
        SimpleName: min [4228,4231]
        TextElement:  the lower bound for the interval [4231,4264]
    TagElement [4272,4315]
        SimpleName: max [4279,4282]
        TextElement:  the upper bound for the interval [4282,4315]
    TagElement [4323,4376]
        TextElement:  the point at which the function value is zero [4330,4376]
    TagElement [4384,4515]
        SimpleName: ConvergenceException [4392,4412]
        TextElement:  if the maximum iteration count is exceeded [4412,4455]
        TextElement: or the solver detects convergence problems otherwise [4463,4515]
    TagElement [4523,4609]
        SimpleName: FunctionEvaluationException [4531,4558]
        TextElement:  if an error occurs evaluating the [4558,4592]
        TextElement: function  [4600,4609]
    TagElement [4617,4679]
        SimpleName: IllegalArgumentException [4625,4649]
        TextElement:  if any parameters are invalid [4649,4679]
===
delete-tree
---
VariableDeclarationStatement [5006,5050]
    PrimitiveType: double [5006,5012]
    VariableDeclarationFragment [5013,5049]
        SimpleName: coefficients [5013,5025]
        Dimension [5025,5027]
        MethodInvocation [5030,5049]
            METHOD_INVOCATION_RECEIVER [5030,5031]
                SimpleName: p [5030,5031]
            SimpleName: getCoefficients [5032,5047]
===
delete-tree
---
Javadoc [2544,3192]
    TagElement [2555,2666]
        TextElement: Find a real root in the given interval with initial value. [2555,2613]
        TextElement: <p> [2621,2624]
        TextElement: Requires bracketing condition.</p> [2632,2666]
    TagElement [2682,2725]
        SimpleName: min [2689,2692]
        TextElement:  the lower bound for the interval [2692,2725]
    TagElement [2733,2776]
        SimpleName: max [2740,2743]
        TextElement:  the upper bound for the interval [2743,2776]
    TagElement [2784,2821]
        SimpleName: initial [2791,2798]
        TextElement:  the start value to use [2798,2821]
    TagElement [2829,2882]
        TextElement:  the point at which the function value is zero [2836,2882]
    TagElement [2890,3021]
        SimpleName: ConvergenceException [2898,2918]
        TextElement:  if the maximum iteration count is exceeded [2918,2961]
        TextElement: or the solver detects convergence problems otherwise [2969,3021]
    TagElement [3029,3114]
        SimpleName: FunctionEvaluationException [3037,3064]
        TextElement:  if an error occurs evaluating the [3064,3098]
        TextElement: function [3106,3114]
    TagElement [3122,3184]
        SimpleName: IllegalArgumentException [3130,3154]
        TextElement:  if any parameters are invalid [3154,3184]
===
multi-move-tree
---
SimpleName: p [4872,4873]
to
SimpleName: p [3392,3393]
at -1
===
multi-move-tree
---
SimpleName: p [4993,4994]
to
SimpleName: p [3392,3393]
at -1
===
multi-move-tree
---
SimpleName: p [4921,4922]
to
SimpleName: p [3392,3393]
at -1
===
multi-move-tree
---
SimpleName: p [3657,3658]
to
SimpleName: p [3624,3625]
at -1
===
multi-move-tree
---
SimpleName: p [3571,3572]
to
SimpleName: p [3624,3625]
at -1
===
multi-move-tree
---
SimpleName: p [3392,3393]
to
SimpleName: p [3624,3625]
at -1
===
multi-move-tree
---
SimpleName: p [3441,3442]
to
SimpleName: p [3624,3625]
at -1
===
multi-move-tree
---
SimpleName: p [3490,3491]
to
SimpleName: p [3624,3625]
at -1
