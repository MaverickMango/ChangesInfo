===
insert-tree
---
ImportDeclaration [846,898]
    QualifiedName: org.apache.commons.math.ConvergenceException [853,897]
to
CompilationUnit [0,11833]
at 1
===
move-tree
---
MethodDeclaration [1915,3166]
    Javadoc [1915,2573]
        TagElement [1926,2037]
            TextElement: Find a real root in the given interval with initial value. [1926,1984]
            TextElement: <p> [1992,1995]
            TextElement: Requires bracketing condition.</p> [2003,2037]
        TagElement [2053,2096]
            SimpleName: min [2060,2063]
            TextElement:  the lower bound for the interval [2063,2096]
        TagElement [2104,2147]
            SimpleName: max [2111,2114]
            TextElement:  the upper bound for the interval [2114,2147]
        TagElement [2155,2192]
            SimpleName: initial [2162,2169]
            TextElement:  the start value to use [2169,2192]
        TagElement [2200,2253]
            TextElement:  the point at which the function value is zero [2207,2253]
        TagElement [2261,2402]
            SimpleName: MaxIterationsExceededException [2269,2299]
            TextElement:  if the maximum iteration count is exceeded [2299,2342]
            TextElement: or the solver detects convergence problems otherwise [2350,2402]
        TagElement [2410,2495]
            SimpleName: FunctionEvaluationException [2418,2445]
            TextElement:  if an error occurs evaluating the [2445,2479]
            TextElement: function [2487,2495]
        TagElement [2503,2565]
            SimpleName: IllegalArgumentException [2511,2535]
            TextElement:  if any parameters are invalid [2535,2565]
    Modifier: public [2578,2584]
    PrimitiveType: double [2585,2591]
    SimpleName: solve [2592,2597]
    SingleVariableDeclaration [2598,2608]
        PrimitiveType: double [2598,2604]
        SimpleName: min [2605,2608]
    SingleVariableDeclaration [2610,2620]
        PrimitiveType: double [2610,2616]
        SimpleName: max [2617,2620]
    SingleVariableDeclaration [2622,2636]
        PrimitiveType: double [2622,2628]
        SimpleName: initial [2629,2636]
    SimpleType [2653,2683]
        SimpleName: MaxIterationsExceededException [2653,2683]
    SimpleType [2685,2712]
        SimpleName: FunctionEvaluationException [2685,2712]
    Block [2713,3166]
        IfStatement [2779,2819]
            InfixExpression [2783,2802]
                MethodInvocation [2783,2795]
                    METHOD_INVOCATION_RECEIVER [2783,2784]
                        SimpleName: f [2783,2784]
                    SimpleName: value [2785,2790]
                    METHOD_INVOCATION_ARGUMENTS [2791,2794]
                        SimpleName: min [2791,2794]
                INFIX_EXPRESSION_OPERATOR: == [2796,2798]
                NumberLiteral: 0.0 [2799,2802]
            Block [2804,2819]
                ReturnStatement [2806,2817]
                    SimpleName: min [2813,2816]
        IfStatement [2828,2868]
            InfixExpression [2832,2851]
                MethodInvocation [2832,2844]
                    METHOD_INVOCATION_RECEIVER [2832,2833]
                        SimpleName: f [2832,2833]
                    SimpleName: value [2834,2839]
                    METHOD_INVOCATION_ARGUMENTS [2840,2843]
                        SimpleName: max [2840,2843]
                INFIX_EXPRESSION_OPERATOR: == [2845,2847]
                NumberLiteral: 0.0 [2848,2851]
            Block [2853,2868]
                ReturnStatement [2855,2866]
                    SimpleName: max [2862,2865]
        IfStatement [2877,2925]
            InfixExpression [2881,2904]
                MethodInvocation [2881,2897]
                    METHOD_INVOCATION_RECEIVER [2881,2882]
                        SimpleName: f [2881,2882]
                    SimpleName: value [2883,2888]
                    METHOD_INVOCATION_ARGUMENTS [2889,2896]
                        SimpleName: initial [2889,2896]
                INFIX_EXPRESSION_OPERATOR: == [2898,2900]
                NumberLiteral: 0.0 [2901,2904]
            Block [2906,2925]
                ReturnStatement [2908,2923]
                    SimpleName: initial [2915,2922]
        ExpressionStatement [2935,2965]
            MethodInvocation [2935,2964]
                SimpleName: verifyBracketing [2935,2951]
                METHOD_INVOCATION_ARGUMENTS [2952,2963]
                    SimpleName: min [2952,2955]
                    SimpleName: max [2957,2960]
                    SimpleName: f [2962,2963]
        ExpressionStatement [2974,3008]
            MethodInvocation [2974,3007]
                SimpleName: verifySequence [2974,2988]
                METHOD_INVOCATION_ARGUMENTS [2989,3006]
                    SimpleName: min [2989,2992]
                    SimpleName: initial [2994,3001]
                    SimpleName: max [3003,3006]
        IfStatement [3017,3160]
            MethodInvocation [3021,3050]
                SimpleName: isBracketing [3021,3033]
                METHOD_INVOCATION_ARGUMENTS [3034,3049]
                    SimpleName: min [3034,3037]
                    SimpleName: initial [3039,3046]
                    SimpleName: f [3048,3049]
            Block [3052,3103]
                ReturnStatement [3066,3093]
                    MethodInvocation [3073,3092]
                        SimpleName: solve [3073,3078]
                        METHOD_INVOCATION_ARGUMENTS [3079,3091]
                            SimpleName: min [3079,3082]
                            SimpleName: initial [3084,3091]
            Block [3109,3160]
                ReturnStatement [3123,3150]
                    MethodInvocation [3130,3149]
                        SimpleName: solve [3130,3135]
                        METHOD_INVOCATION_ARGUMENTS [3136,3148]
                            SimpleName: initial [3136,3143]
                            SimpleName: max [3145,3148]
to
TypeDeclaration [1017,11832]
at 8
===
insert-tree
---
MethodDeclaration [2241,2339]
    Javadoc [2241,2279]
        TagElement [2252,2271]
            TextElement: Construct a solver. [2252,2271]
    Modifier: public [2284,2290]
    SimpleName: MullerSolver [2291,2303]
    Block [2306,2339]
        SuperConstructorInvocation [2316,2333]
            NumberLiteral: 100 [2322,2325]
            NumberLiteral: 1E-6 [2327,2331]
to
TypeDeclaration [1017,11832]
at 7
===
insert-node
---
MethodDeclaration [2796,4165]
to
TypeDeclaration [1017,11832]
at 10
===
insert-node
---
MethodDeclaration [4171,8951]
to
TypeDeclaration [1017,11832]
at 11
===
insert-node
---
MethodDeclaration [10517,14562]
to
TypeDeclaration [1017,11832]
at 13
===
insert-node
---
Javadoc [1772,2132]
to
MethodDeclaration [1719,1909]
at 0
===
insert-tree
---
MarkerAnnotation [2137,2148]
    SimpleName: Deprecated [2138,2148]
to
MethodDeclaration [1719,1909]
at 1
===
insert-tree
---
Javadoc [2345,2365]
    TagElement [2349,2363]
        TagElement [2349,2362]
        TextElement:   [2362,2363]
to
MethodDeclaration [3172,7847]
at 0
===
insert-tree
---
MarkerAnnotation [2370,2381]
    SimpleName: Deprecated [2371,2381]
to
MethodDeclaration [3172,7847]
at 1
===
insert-tree
---
SimpleType [2457,2477]
    SimpleName: ConvergenceException [2457,2477]
to
MethodDeclaration [3172,7847]
at 8
===
insert-tree
---
Javadoc [2555,2575]
    TagElement [2559,2573]
        TagElement [2559,2572]
        TextElement:   [2572,2573]
to
MethodDeclaration [1915,3166]
at 0
===
insert-tree
---
MarkerAnnotation [2580,2591]
    SimpleName: Deprecated [2581,2591]
to
MethodDeclaration [1915,3166]
at 1
===
insert-tree
---
SimpleType [2689,2709]
    SimpleName: ConvergenceException [2689,2709]
to
MethodDeclaration [1915,3166]
at 9
===
insert-tree
---
Javadoc [2796,3492]
    TagElement [2807,2918]
        TextElement: Find a real root in the given interval with initial value. [2807,2865]
        TextElement: <p> [2873,2876]
        TextElement: Requires bracketing condition.</p> [2884,2918]
    TagElement [2934,2964]
        SimpleName: f [2941,2942]
        TextElement:  the function to solve [2942,2964]
    TagElement [2972,3015]
        SimpleName: min [2979,2982]
        TextElement:  the lower bound for the interval [2982,3015]
    TagElement [3023,3066]
        SimpleName: max [3030,3033]
        TextElement:  the upper bound for the interval [3033,3066]
    TagElement [3074,3111]
        SimpleName: initial [3081,3088]
        TextElement:  the start value to use [3088,3111]
    TagElement [3119,3172]
        TextElement:  the point at which the function value is zero [3126,3172]
    TagElement [3180,3321]
        SimpleName: MaxIterationsExceededException [3188,3218]
        TextElement:  if the maximum iteration count is exceeded [3218,3261]
        TextElement: or the solver detects convergence problems otherwise [3269,3321]
    TagElement [3329,3414]
        SimpleName: FunctionEvaluationException [3337,3364]
        TextElement:  if an error occurs evaluating the [3364,3398]
        TextElement: function [3406,3414]
    TagElement [3422,3484]
        SimpleName: IllegalArgumentException [3430,3454]
        TextElement:  if any parameters are invalid [3454,3484]
to
MethodDeclaration [2796,4165]
at 0
===
insert-node
---
Modifier: public [3497,3503]
to
MethodDeclaration [2796,4165]
at 1
===
insert-node
---
PrimitiveType: double [3504,3510]
to
MethodDeclaration [2796,4165]
at 2
===
insert-node
---
SimpleName: solve [3511,3516]
to
MethodDeclaration [2796,4165]
at 3
===
insert-tree
---
SingleVariableDeclaration [3517,3547]
    Modifier: final [3517,3522]
    SimpleType [3523,3545]
        SimpleName: UnivariateRealFunction [3523,3545]
    SimpleName: f [3546,3547]
to
MethodDeclaration [2796,4165]
at 4
===
insert-tree
---
SingleVariableDeclaration [3573,3589]
    Modifier: final [3573,3578]
    PrimitiveType: double [3579,3585]
    SimpleName: min [3586,3589]
to
MethodDeclaration [2796,4165]
at 5
===
insert-tree
---
SingleVariableDeclaration [3591,3607]
    Modifier: final [3591,3596]
    PrimitiveType: double [3597,3603]
    SimpleName: max [3604,3607]
to
MethodDeclaration [2796,4165]
at 6
===
insert-tree
---
SingleVariableDeclaration [3609,3629]
    Modifier: final [3609,3614]
    PrimitiveType: double [3615,3621]
    SimpleName: initial [3622,3629]
to
MethodDeclaration [2796,4165]
at 7
===
insert-tree
---
SimpleType [3646,3676]
    SimpleName: MaxIterationsExceededException [3646,3676]
to
MethodDeclaration [2796,4165]
at 8
===
insert-tree
---
SimpleType [3678,3705]
    SimpleName: FunctionEvaluationException [3678,3705]
to
MethodDeclaration [2796,4165]
at 9
===
insert-node
---
Block [3706,4165]
to
MethodDeclaration [2796,4165]
at 10
===
insert-tree
---
Javadoc [4171,5454]
    TagElement [4182,4924]
        TextElement: Find a real root in the given interval. [4182,4221]
        TextElement: <p> [4229,4232]
        TextElement: Original Muller's method would have function evaluation at complex point. [4240,4313]
        TextElement: Since our f(x) is real, we have to find ways to avoid that. Bracketing [4321,4391]
        TextElement: condition is one way to go: by requiring bracketing in every iteration, [4399,4470]
        TextElement: the newly computed approximation is guaranteed to be real.</p> [4478,4540]
        TextElement: <p> [4548,4551]
        TextElement: Normally Muller's method converges quadratically in the vicinity of a [4559,4628]
        TextElement: zero, however it may be very slow in regions far away from zeros. For [4636,4705]
        TextElement: example, f(x) = exp(x) - 1, min = -50, max = 100. In such case we use [4713,4782]
        TextElement: bisection as a safety backup if it performs very poorly.</p> [4790,4850]
        TextElement: <p> [4858,4861]
        TextElement: The formulas here use divided differences directly.</p> [4869,4924]
    TagElement [4940,4970]
        SimpleName: f [4947,4948]
        TextElement:  the function to solve [4948,4970]
    TagElement [4978,5021]
        SimpleName: min [4985,4988]
        TextElement:  the lower bound for the interval [4988,5021]
    TagElement [5029,5072]
        SimpleName: max [5036,5039]
        TextElement:  the upper bound for the interval [5039,5072]
    TagElement [5080,5133]
        TextElement:  the point at which the function value is zero [5087,5133]
    TagElement [5141,5282]
        SimpleName: MaxIterationsExceededException [5149,5179]
        TextElement:  if the maximum iteration count is exceeded [5179,5222]
        TextElement: or the solver detects convergence problems otherwise [5230,5282]
    TagElement [5290,5376]
        SimpleName: FunctionEvaluationException [5298,5325]
        TextElement:  if an error occurs evaluating the [5325,5359]
        TextElement: function  [5367,5376]
    TagElement [5384,5446]
        SimpleName: IllegalArgumentException [5392,5416]
        TextElement:  if any parameters are invalid [5416,5446]
to
MethodDeclaration [4171,8951]
at 0
===
insert-node
---
Modifier: public [5459,5465]
to
MethodDeclaration [4171,8951]
at 1
===
insert-node
---
PrimitiveType: double [5466,5472]
to
MethodDeclaration [4171,8951]
at 2
===
insert-node
---
SimpleName: solve [5473,5478]
to
MethodDeclaration [4171,8951]
at 3
===
insert-tree
---
SingleVariableDeclaration [5479,5509]
    Modifier: final [5479,5484]
    SimpleType [5485,5507]
        SimpleName: UnivariateRealFunction [5485,5507]
    SimpleName: f [5508,5509]
to
MethodDeclaration [4171,8951]
at 4
===
insert-tree
---
SingleVariableDeclaration [5535,5551]
    Modifier: final [5535,5540]
    PrimitiveType: double [5541,5547]
    SimpleName: min [5548,5551]
to
MethodDeclaration [4171,8951]
at 5
===
insert-tree
---
SingleVariableDeclaration [5553,5569]
    Modifier: final [5553,5558]
    PrimitiveType: double [5559,5565]
    SimpleName: max [5566,5569]
to
MethodDeclaration [4171,8951]
at 6
===
insert-tree
---
SimpleType [5586,5616]
    SimpleName: MaxIterationsExceededException [5586,5616]
to
MethodDeclaration [4171,8951]
at 7
===
insert-tree
---
SimpleType [5618,5645]
    SimpleName: FunctionEvaluationException [5618,5645]
to
MethodDeclaration [4171,8951]
at 8
===
insert-node
---
Block [5646,8951]
to
MethodDeclaration [4171,8951]
at 9
===
insert-tree
---
MarkerAnnotation [10320,10331]
    SimpleName: Deprecated [10321,10331]
to
MethodDeclaration [7853,11830]
at 1
===
insert-tree
---
Javadoc [10517,11772]
    TagElement [10528,11280]
        TextElement: Find a real root in the given interval. [10528,10567]
        TextElement: <p> [10575,10578]
        TextElement: solve2() differs from solve() in the way it avoids complex operations. [10586,10656]
        TextElement: Except for the initial [min, max], solve2() does not require bracketing [10664,10735]
        TextElement: condition, e.g. f(x0), f(x1), f(x2) can have the same sign. If complex [10743,10813]
        TextElement: number arises in the computation, we simply use its modulus as real [10821,10888]
        TextElement: approximation.</p> [10896,10914]
        TextElement: <p> [10922,10925]
        TextElement: Because the interval may not be bracketing, bisection alternative is [10933,11001]
        TextElement: not applicable here. However in practice our treatment usually works [11009,11077]
        TextElement: well, especially near real zeros where the imaginary part of complex [11085,11153]
        TextElement: approximation is often negligible.</p> [11161,11199]
        TextElement: <p> [11207,11210]
        TextElement: The formulas here do not use divided differences directly.</p> [11218,11280]
    TagElement [11296,11339]
        SimpleName: min [11303,11306]
        TextElement:  the lower bound for the interval [11306,11339]
    TagElement [11347,11390]
        SimpleName: max [11354,11357]
        TextElement:  the upper bound for the interval [11357,11390]
    TagElement [11398,11451]
        TextElement:  the point at which the function value is zero [11405,11451]
    TagElement [11459,11600]
        SimpleName: MaxIterationsExceededException [11467,11497]
        TextElement:  if the maximum iteration count is exceeded [11497,11540]
        TextElement: or the solver detects convergence problems otherwise [11548,11600]
    TagElement [11608,11694]
        SimpleName: FunctionEvaluationException [11616,11643]
        TextElement:  if an error occurs evaluating the [11643,11677]
        TextElement: function  [11685,11694]
    TagElement [11702,11764]
        SimpleName: IllegalArgumentException [11710,11734]
        TextElement:  if any parameters are invalid [11734,11764]
to
MethodDeclaration [10517,14562]
at 0
===
insert-node
---
Modifier: public [11777,11783]
to
MethodDeclaration [10517,14562]
at 1
===
insert-node
---
PrimitiveType: double [11784,11790]
to
MethodDeclaration [10517,14562]
at 2
===
insert-node
---
SimpleName: solve2 [11791,11797]
to
MethodDeclaration [10517,14562]
at 3
===
insert-tree
---
SingleVariableDeclaration [11798,11828]
    Modifier: final [11798,11803]
    SimpleType [11804,11826]
        SimpleName: UnivariateRealFunction [11804,11826]
    SimpleName: f [11827,11828]
to
MethodDeclaration [10517,14562]
at 4
===
insert-tree
---
SingleVariableDeclaration [11855,11871]
    Modifier: final [11855,11860]
    PrimitiveType: double [11861,11867]
    SimpleName: min [11868,11871]
to
MethodDeclaration [10517,14562]
at 5
===
insert-tree
---
SingleVariableDeclaration [11873,11889]
    Modifier: final [11873,11878]
    PrimitiveType: double [11879,11885]
    SimpleName: max [11886,11889]
to
MethodDeclaration [10517,14562]
at 6
===
insert-tree
---
SimpleType [11906,11936]
    SimpleName: MaxIterationsExceededException [11906,11936]
to
MethodDeclaration [10517,14562]
at 7
===
insert-tree
---
SimpleType [11938,11965]
    SimpleName: FunctionEvaluationException [11938,11965]
to
MethodDeclaration [10517,14562]
at 8
===
insert-node
---
Block [11966,14562]
to
MethodDeclaration [10517,14562]
at 9
===
update-node
---
NumberLiteral: 6552227503458976920L [1692,1712]
replace 6552227503458976920L by 7768903775784754323L
===
move-tree
---
TagElement [1730,1772]
    TextElement: Construct a solver for the given function. [1730,1772]
to
Javadoc [1772,2132]
at 0
===
move-tree
---
TagElement [1788,1814]
    SimpleName: f [1795,1796]
    TextElement:  function to solve [1796,1814]
to
Javadoc [1772,2132]
at 1
===
insert-tree
---
TagElement [1875,2124]
    TextElement:  as of 2.0 the function to solve is passed as an argument [1886,1943]
    TextElement: to the  [1951,1958]
    TagElement [1958,2012]
        MethodRef [1965,2011]
            SimpleName: solve [1966,1971]
            MethodRefParameter [1972,1994]
                SimpleType [1972,1994]
                    SimpleName: UnivariateRealFunction [1972,1994]
            MethodRefParameter [1996,2002]
                PrimitiveType: double [1996,2002]
            MethodRefParameter [2004,2010]
                PrimitiveType: double [2004,2010]
    TextElement:  or [2012,2015]
    TagElement [2023,2109]
        MethodRef [2030,2108]
            SimpleName: UnivariateRealSolverImpl [2030,2054]
            SimpleName: solve [2055,2060]
            MethodRefParameter [2061,2083]
                SimpleType [2061,2083]
                    SimpleName: UnivariateRealFunction [2061,2083]
            MethodRefParameter [2085,2091]
                PrimitiveType: double [2085,2091]
            MethodRefParameter [2093,2099]
                PrimitiveType: double [2093,2099]
            MethodRefParameter [2101,2107]
                PrimitiveType: double [2101,2107]
    TextElement: method. [2117,2124]
to
Javadoc [1772,2132]
at 2
===
insert-node
---
Modifier: final [2406,2411]
to
SingleVariableDeclaration [4442,4452]
at 0
===
insert-node
---
Modifier: final [2424,2429]
to
SingleVariableDeclaration [4454,4464]
at 0
===
insert-tree
---
ReturnStatement [2517,2543]
    MethodInvocation [2524,2542]
        SimpleName: solve [2524,2529]
        METHOD_INVOCATION_ARGUMENTS [2530,2541]
            SimpleName: f [2530,2531]
            SimpleName: min [2533,2536]
            SimpleName: max [2538,2541]
to
Block [4542,7847]
at 0
===
insert-node
---
Modifier: final [2616,2621]
to
SingleVariableDeclaration [2598,2608]
at 0
===
insert-node
---
Modifier: final [2634,2639]
to
SingleVariableDeclaration [2610,2620]
at 0
===
insert-node
---
Modifier: final [2652,2657]
to
SingleVariableDeclaration [2622,2636]
at 0
===
insert-tree
---
ReturnStatement [2749,2784]
    MethodInvocation [2756,2783]
        SimpleName: solve [2756,2761]
        METHOD_INVOCATION_ARGUMENTS [2762,2782]
            SimpleName: f [2762,2763]
            SimpleName: min [2765,2768]
            SimpleName: max [2770,2773]
            SimpleName: initial [2775,2782]
to
Block [2713,3166]
at 0
===
move-tree
---
IfStatement [2779,2819]
    InfixExpression [2783,2802]
        MethodInvocation [2783,2795]
            METHOD_INVOCATION_RECEIVER [2783,2784]
                SimpleName: f [2783,2784]
            SimpleName: value [2785,2790]
            METHOD_INVOCATION_ARGUMENTS [2791,2794]
                SimpleName: min [2791,2794]
        INFIX_EXPRESSION_OPERATOR: == [2796,2798]
        NumberLiteral: 0.0 [2799,2802]
    Block [2804,2819]
        ReturnStatement [2806,2817]
            SimpleName: min [2813,2816]
to
Block [3706,4165]
at 0
===
move-tree
---
IfStatement [2828,2868]
    InfixExpression [2832,2851]
        MethodInvocation [2832,2844]
            METHOD_INVOCATION_RECEIVER [2832,2833]
                SimpleName: f [2832,2833]
            SimpleName: value [2834,2839]
            METHOD_INVOCATION_ARGUMENTS [2840,2843]
                SimpleName: max [2840,2843]
        INFIX_EXPRESSION_OPERATOR: == [2845,2847]
        NumberLiteral: 0.0 [2848,2851]
    Block [2853,2868]
        ReturnStatement [2855,2866]
            SimpleName: max [2862,2865]
to
Block [3706,4165]
at 1
===
move-tree
---
IfStatement [2877,2925]
    InfixExpression [2881,2904]
        MethodInvocation [2881,2897]
            METHOD_INVOCATION_RECEIVER [2881,2882]
                SimpleName: f [2881,2882]
            SimpleName: value [2883,2888]
            METHOD_INVOCATION_ARGUMENTS [2889,2896]
                SimpleName: initial [2889,2896]
        INFIX_EXPRESSION_OPERATOR: == [2898,2900]
        NumberLiteral: 0.0 [2901,2904]
    Block [2906,2925]
        ReturnStatement [2908,2923]
            SimpleName: initial [2915,2922]
to
Block [3706,4165]
at 2
===
move-tree
---
ExpressionStatement [2935,2965]
    MethodInvocation [2935,2964]
        SimpleName: verifyBracketing [2935,2951]
        METHOD_INVOCATION_ARGUMENTS [2952,2963]
            SimpleName: min [2952,2955]
            SimpleName: max [2957,2960]
            SimpleName: f [2962,2963]
to
Block [3706,4165]
at 3
===
move-tree
---
ExpressionStatement [2974,3008]
    MethodInvocation [2974,3007]
        SimpleName: verifySequence [2974,2988]
        METHOD_INVOCATION_ARGUMENTS [2989,3006]
            SimpleName: min [2989,2992]
            SimpleName: initial [2994,3001]
            SimpleName: max [3003,3006]
to
Block [3706,4165]
at 4
===
move-tree
---
IfStatement [3017,3160]
    MethodInvocation [3021,3050]
        SimpleName: isBracketing [3021,3033]
        METHOD_INVOCATION_ARGUMENTS [3034,3049]
            SimpleName: min [3034,3037]
            SimpleName: initial [3039,3046]
            SimpleName: f [3048,3049]
    Block [3052,3103]
        ReturnStatement [3066,3093]
            MethodInvocation [3073,3092]
                SimpleName: solve [3073,3078]
                METHOD_INVOCATION_ARGUMENTS [3079,3091]
                    SimpleName: min [3079,3082]
                    SimpleName: initial [3084,3091]
    Block [3109,3160]
        ReturnStatement [3123,3150]
            MethodInvocation [3130,3149]
                SimpleName: solve [3130,3135]
                METHOD_INVOCATION_ARGUMENTS [3136,3148]
                    SimpleName: initial [3136,3143]
                    SimpleName: max [3145,3148]
to
Block [3706,4165]
at 5
===
move-tree
---
VariableDeclarationStatement [4816,4858]
    PrimitiveType: double [4816,4822]
    VariableDeclarationFragment [4823,4825]
        SimpleName: x0 [4823,4825]
    VariableDeclarationFragment [4827,4829]
        SimpleName: x1 [4827,4829]
    VariableDeclarationFragment [4831,4833]
        SimpleName: x2 [4831,4833]
    VariableDeclarationFragment [4835,4836]
        SimpleName: x [4835,4836]
    VariableDeclarationFragment [4838,4842]
        SimpleName: oldx [4838,4842]
    VariableDeclarationFragment [4844,4846]
        SimpleName: y0 [4844,4846]
    VariableDeclarationFragment [4848,4850]
        SimpleName: y1 [4848,4850]
    VariableDeclarationFragment [4852,4854]
        SimpleName: y2 [4852,4854]
    VariableDeclarationFragment [4856,4857]
        SimpleName: y [4856,4857]
to
Block [5646,8951]
at 0
===
move-tree
---
VariableDeclarationStatement [4867,4926]
    PrimitiveType: double [4867,4873]
    VariableDeclarationFragment [4874,4877]
        SimpleName: d01 [4874,4877]
    VariableDeclarationFragment [4879,4882]
        SimpleName: d12 [4879,4882]
    VariableDeclarationFragment [4884,4888]
        SimpleName: d012 [4884,4888]
    VariableDeclarationFragment [4890,4892]
        SimpleName: c1 [4890,4892]
    VariableDeclarationFragment [4894,4899]
        SimpleName: delta [4894,4899]
    VariableDeclarationFragment [4901,4906]
        SimpleName: xplus [4901,4906]
    VariableDeclarationFragment [4908,4914]
        SimpleName: xminus [4908,4914]
    VariableDeclarationFragment [4916,4925]
        SimpleName: tolerance [4916,4925]
to
Block [5646,8951]
at 1
===
move-tree
---
ExpressionStatement [4936,4945]
    Assignment [4936,4944]
        SimpleName: x0 [4936,4938]
        ASSIGNMENT_OPERATOR: = [4939,4940]
        SimpleName: min [4941,4944]
to
Block [5646,8951]
at 2
===
move-tree
---
ExpressionStatement [4946,4963]
    Assignment [4946,4962]
        SimpleName: y0 [4946,4948]
        ASSIGNMENT_OPERATOR: = [4949,4950]
        MethodInvocation [4951,4962]
            METHOD_INVOCATION_RECEIVER [4951,4952]
                SimpleName: f [4951,4952]
            SimpleName: value [4953,4958]
            METHOD_INVOCATION_ARGUMENTS [4959,4961]
                SimpleName: x0 [4959,4961]
to
Block [5646,8951]
at 3
===
move-tree
---
ExpressionStatement [4972,4981]
    Assignment [4972,4980]
        SimpleName: x2 [4972,4974]
        ASSIGNMENT_OPERATOR: = [4975,4976]
        SimpleName: max [4977,4980]
to
Block [5646,8951]
at 4
===
move-tree
---
ExpressionStatement [4982,4999]
    Assignment [4982,4998]
        SimpleName: y2 [4982,4984]
        ASSIGNMENT_OPERATOR: = [4985,4986]
        MethodInvocation [4987,4998]
            METHOD_INVOCATION_RECEIVER [4987,4988]
                SimpleName: f [4987,4988]
            SimpleName: value [4989,4994]
            METHOD_INVOCATION_ARGUMENTS [4995,4997]
                SimpleName: x2 [4995,4997]
to
Block [5646,8951]
at 5
===
move-tree
---
ExpressionStatement [5008,5029]
    Assignment [5008,5028]
        SimpleName: x1 [5008,5010]
        ASSIGNMENT_OPERATOR: = [5011,5012]
        InfixExpression [5013,5028]
            NumberLiteral: 0.5 [5013,5016]
            INFIX_EXPRESSION_OPERATOR: * [5017,5018]
            ParenthesizedExpression [5019,5028]
                InfixExpression [5020,5027]
                    SimpleName: x0 [5020,5022]
                    INFIX_EXPRESSION_OPERATOR: + [5023,5024]
                    SimpleName: x2 [5025,5027]
to
Block [5646,8951]
at 6
===
move-tree
---
ExpressionStatement [5030,5047]
    Assignment [5030,5046]
        SimpleName: y1 [5030,5032]
        ASSIGNMENT_OPERATOR: = [5033,5034]
        MethodInvocation [5035,5046]
            METHOD_INVOCATION_RECEIVER [5035,5036]
                SimpleName: f [5035,5036]
            SimpleName: value [5037,5042]
            METHOD_INVOCATION_ARGUMENTS [5043,5045]
                SimpleName: x1 [5043,5045]
to
Block [5646,8951]
at 7
===
move-tree
---
IfStatement [5112,5142]
    InfixExpression [5116,5125]
        SimpleName: y0 [5116,5118]
        INFIX_EXPRESSION_OPERATOR: == [5119,5121]
        NumberLiteral: 0.0 [5122,5125]
    Block [5127,5142]
        ReturnStatement [5129,5140]
            SimpleName: min [5136,5139]
to
Block [5646,8951]
at 8
===
move-tree
---
IfStatement [5151,5181]
    InfixExpression [5155,5164]
        SimpleName: y2 [5155,5157]
        INFIX_EXPRESSION_OPERATOR: == [5158,5160]
        NumberLiteral: 0.0 [5161,5164]
    Block [5166,5181]
        ReturnStatement [5168,5179]
            SimpleName: max [5175,5178]
to
Block [5646,8951]
at 9
===
move-tree
---
ExpressionStatement [5190,5220]
    MethodInvocation [5190,5219]
        SimpleName: verifyBracketing [5190,5206]
        METHOD_INVOCATION_ARGUMENTS [5207,5218]
            SimpleName: min [5207,5210]
            SimpleName: max [5212,5215]
            SimpleName: f [5217,5218]
to
Block [5646,8951]
at 10
===
move-tree
---
VariableDeclarationStatement [5230,5240]
    PrimitiveType: int [5230,5233]
    VariableDeclarationFragment [5234,5239]
        SimpleName: i [5234,5235]
        NumberLiteral: 1 [5238,5239]
to
Block [5646,8951]
at 11
===
move-tree
---
ExpressionStatement [5249,5281]
    Assignment [5249,5280]
        SimpleName: oldx [5249,5253]
        ASSIGNMENT_OPERATOR: = [5254,5255]
        QualifiedName: Double.POSITIVE_INFINITY [5256,5280]
to
Block [5646,8951]
at 12
===
move-tree
---
WhileStatement [5290,7768]
    InfixExpression [5297,5323]
        SimpleName: i [5297,5298]
        INFIX_EXPRESSION_OPERATOR: <= [5299,5301]
        SimpleName: maximalIterationCount [5302,5323]
    Block [5325,7768]
        ExpressionStatement [5622,5650]
            Assignment [5622,5649]
                SimpleName: d01 [5622,5625]
                ASSIGNMENT_OPERATOR: = [5626,5627]
                InfixExpression [5628,5649]
                    ParenthesizedExpression [5628,5637]
                        InfixExpression [5629,5636]
                            SimpleName: y1 [5629,5631]
                            INFIX_EXPRESSION_OPERATOR: - [5632,5633]
                            SimpleName: y0 [5634,5636]
                    INFIX_EXPRESSION_OPERATOR: / [5638,5639]
                    ParenthesizedExpression [5640,5649]
                        InfixExpression [5641,5648]
                            SimpleName: x1 [5641,5643]
                            INFIX_EXPRESSION_OPERATOR: - [5644,5645]
                            SimpleName: x0 [5646,5648]
        ExpressionStatement [5663,5691]
            Assignment [5663,5690]
                SimpleName: d12 [5663,5666]
                ASSIGNMENT_OPERATOR: = [5667,5668]
                InfixExpression [5669,5690]
                    ParenthesizedExpression [5669,5678]
                        InfixExpression [5670,5677]
                            SimpleName: y2 [5670,5672]
                            INFIX_EXPRESSION_OPERATOR: - [5673,5674]
                            SimpleName: y1 [5675,5677]
                    INFIX_EXPRESSION_OPERATOR: / [5679,5680]
                    ParenthesizedExpression [5681,5690]
                        InfixExpression [5682,5689]
                            SimpleName: x2 [5682,5684]
                            INFIX_EXPRESSION_OPERATOR: - [5685,5686]
                            SimpleName: x1 [5687,5689]
        ExpressionStatement [5704,5735]
            Assignment [5704,5734]
                SimpleName: d012 [5704,5708]
                ASSIGNMENT_OPERATOR: = [5709,5710]
                InfixExpression [5711,5734]
                    ParenthesizedExpression [5711,5722]
                        InfixExpression [5712,5721]
                            SimpleName: d12 [5712,5715]
                            INFIX_EXPRESSION_OPERATOR: - [5716,5717]
                            SimpleName: d01 [5718,5721]
                    INFIX_EXPRESSION_OPERATOR: / [5723,5724]
                    ParenthesizedExpression [5725,5734]
                        InfixExpression [5726,5733]
                            SimpleName: x2 [5726,5728]
                            INFIX_EXPRESSION_OPERATOR: - [5729,5730]
                            SimpleName: x0 [5731,5733]
        ExpressionStatement [5748,5776]
            Assignment [5748,5775]
                SimpleName: c1 [5748,5750]
                ASSIGNMENT_OPERATOR: = [5751,5752]
                InfixExpression [5753,5775]
                    SimpleName: d01 [5753,5756]
                    INFIX_EXPRESSION_OPERATOR: + [5757,5758]
                    InfixExpression [5759,5775]
                        ParenthesizedExpression [5759,5768]
                            InfixExpression [5760,5767]
                                SimpleName: x1 [5760,5762]
                                INFIX_EXPRESSION_OPERATOR: - [5763,5764]
                                SimpleName: x0 [5765,5767]
                        INFIX_EXPRESSION_OPERATOR: * [5769,5770]
                        SimpleName: d012 [5771,5775]
        ExpressionStatement [5789,5821]
            Assignment [5789,5820]
                SimpleName: delta [5789,5794]
                ASSIGNMENT_OPERATOR: = [5795,5796]
                InfixExpression [5797,5820]
                    InfixExpression [5797,5804]
                        SimpleName: c1 [5797,5799]
                        INFIX_EXPRESSION_OPERATOR: * [5800,5801]
                        SimpleName: c1 [5802,5804]
                    INFIX_EXPRESSION_OPERATOR: - [5805,5806]
                    InfixExpression [5807,5820]
                        NumberLiteral: 4 [5807,5808]
                        INFIX_EXPRESSION_OPERATOR: * [5809,5810]
                        SimpleName: y1 [5811,5813]
                        SimpleName: d012 [5816,5820]
        ExpressionStatement [5834,5885]
            Assignment [5834,5884]
                SimpleName: xplus [5834,5839]
                ASSIGNMENT_OPERATOR: = [5840,5841]
                InfixExpression [5842,5884]
                    SimpleName: x1 [5842,5844]
                    INFIX_EXPRESSION_OPERATOR: + [5845,5846]
                    InfixExpression [5847,5884]
                        ParenthesizedExpression [5847,5858]
                            InfixExpression [5848,5857]
                                PrefixExpression [5848,5852]
                                    PREFIX_EXPRESSION_OPERATOR: - [5848,5849]
                                    NumberLiteral: 2.0 [5849,5852]
                                INFIX_EXPRESSION_OPERATOR: * [5853,5854]
                                SimpleName: y1 [5855,5857]
                        INFIX_EXPRESSION_OPERATOR: / [5859,5860]
                        ParenthesizedExpression [5861,5884]
                            InfixExpression [5862,5883]
                                SimpleName: c1 [5862,5864]
                                INFIX_EXPRESSION_OPERATOR: + [5865,5866]
                                MethodInvocation [5867,5883]
                                    METHOD_INVOCATION_RECEIVER [5867,5871]
                                        SimpleName: Math [5867,5871]
                                    SimpleName: sqrt [5872,5876]
                                    METHOD_INVOCATION_ARGUMENTS [5877,5882]
                                        SimpleName: delta [5877,5882]
        ExpressionStatement [5898,5950]
            Assignment [5898,5949]
                SimpleName: xminus [5898,5904]
                ASSIGNMENT_OPERATOR: = [5905,5906]
                InfixExpression [5907,5949]
                    SimpleName: x1 [5907,5909]
                    INFIX_EXPRESSION_OPERATOR: + [5910,5911]
                    InfixExpression [5912,5949]
                        ParenthesizedExpression [5912,5923]
                            InfixExpression [5913,5922]
                                PrefixExpression [5913,5917]
                                    PREFIX_EXPRESSION_OPERATOR: - [5913,5914]
                                    NumberLiteral: 2.0 [5914,5917]
                                INFIX_EXPRESSION_OPERATOR: * [5918,5919]
                                SimpleName: y1 [5920,5922]
                        INFIX_EXPRESSION_OPERATOR: / [5924,5925]
                        ParenthesizedExpression [5926,5949]
                            InfixExpression [5927,5948]
                                SimpleName: c1 [5927,5929]
                                INFIX_EXPRESSION_OPERATOR: - [5930,5931]
                                MethodInvocation [5932,5948]
                                    METHOD_INVOCATION_RECEIVER [5932,5936]
                                        SimpleName: Math [5932,5936]
                                    SimpleName: sqrt [5937,5941]
                                    METHOD_INVOCATION_ARGUMENTS [5942,5947]
                                        SimpleName: delta [5942,5947]
        ExpressionStatement [6084,6131]
            Assignment [6084,6130]
                SimpleName: x [6084,6085]
                ASSIGNMENT_OPERATOR: = [6086,6087]
                ConditionalExpression [6088,6130]
                    MethodInvocation [6088,6113]
                        SimpleName: isSequence [6088,6098]
                        METHOD_INVOCATION_ARGUMENTS [6099,6112]
                            SimpleName: x0 [6099,6101]
                            SimpleName: xplus [6103,6108]
                            SimpleName: x2 [6110,6112]
                    SimpleName: xplus [6116,6121]
                    SimpleName: xminus [6124,6130]
        ExpressionStatement [6144,6159]
            Assignment [6144,6158]
                SimpleName: y [6144,6145]
                ASSIGNMENT_OPERATOR: = [6146,6147]
                MethodInvocation [6148,6158]
                    METHOD_INVOCATION_RECEIVER [6148,6149]
                        SimpleName: f [6148,6149]
                    SimpleName: value [6150,6155]
                    METHOD_INVOCATION_ARGUMENTS [6156,6157]
                        SimpleName: x [6156,6157]
        ExpressionStatement [6210,6281]
            Assignment [6210,6280]
                SimpleName: tolerance [6210,6219]
                ASSIGNMENT_OPERATOR: = [6220,6221]
                MethodInvocation [6222,6280]
                    METHOD_INVOCATION_RECEIVER [6222,6226]
                        SimpleName: Math [6222,6226]
                    SimpleName: max [6227,6230]
                    METHOD_INVOCATION_ARGUMENTS [6231,6279]
                        InfixExpression [6231,6261]
                            SimpleName: relativeAccuracy [6231,6247]
                            INFIX_EXPRESSION_OPERATOR: * [6248,6249]
                            MethodInvocation [6250,6261]
                                METHOD_INVOCATION_RECEIVER [6250,6254]
                                    SimpleName: Math [6250,6254]
                                SimpleName: abs [6255,6258]
                                METHOD_INVOCATION_ARGUMENTS [6259,6260]
                                    SimpleName: x [6259,6260]
                        SimpleName: absoluteAccuracy [6263,6279]
        IfStatement [6294,6410]
            InfixExpression [6298,6329]
                MethodInvocation [6298,6316]
                    METHOD_INVOCATION_RECEIVER [6298,6302]
                        SimpleName: Math [6298,6302]
                    SimpleName: abs [6303,6306]
                    METHOD_INVOCATION_ARGUMENTS [6307,6315]
                        InfixExpression [6307,6315]
                            SimpleName: x [6307,6308]
                            INFIX_EXPRESSION_OPERATOR: - [6309,6310]
                            SimpleName: oldx [6311,6315]
                INFIX_EXPRESSION_OPERATOR: <= [6317,6319]
                SimpleName: tolerance [6320,6329]
            Block [6331,6410]
                ExpressionStatement [6349,6365]
                    MethodInvocation [6349,6364]
                        SimpleName: setResult [6349,6358]
                        METHOD_INVOCATION_ARGUMENTS [6359,6363]
                            SimpleName: x [6359,6360]
                            SimpleName: i [6362,6363]
                ReturnStatement [6382,6396]
                    SimpleName: result [6389,6395]
        IfStatement [6423,6544]
            InfixExpression [6427,6463]
                MethodInvocation [6427,6438]
                    METHOD_INVOCATION_RECEIVER [6427,6431]
                        SimpleName: Math [6427,6431]
                    SimpleName: abs [6432,6435]
                    METHOD_INVOCATION_ARGUMENTS [6436,6437]
                        SimpleName: y [6436,6437]
                INFIX_EXPRESSION_OPERATOR: <= [6439,6441]
                SimpleName: functionValueAccuracy [6442,6463]
            Block [6465,6544]
                ExpressionStatement [6483,6499]
                    MethodInvocation [6483,6498]
                        SimpleName: setResult [6483,6492]
                        METHOD_INVOCATION_ARGUMENTS [6493,6497]
                            SimpleName: x [6493,6494]
                            SimpleName: i [6496,6497]
                ReturnStatement [6516,6530]
                    SimpleName: result [6523,6529]
        VariableDeclarationStatement [6826,6999]
            PrimitiveType: boolean [6826,6833]
            VariableDeclarationFragment [6834,6998]
                SimpleName: bisect [6834,6840]
                InfixExpression [6843,6998]
                    ParenthesizedExpression [6843,6883]
                        InfixExpression [6844,6882]
                            InfixExpression [6844,6850]
                                SimpleName: x [6844,6845]
                                INFIX_EXPRESSION_OPERATOR: < [6846,6847]
                                SimpleName: x1 [6848,6850]
                            INFIX_EXPRESSION_OPERATOR: && [6851,6853]
                            InfixExpression [6854,6882]
                                ParenthesizedExpression [6854,6863]
                                    InfixExpression [6855,6862]
                                        SimpleName: x1 [6855,6857]
                                        INFIX_EXPRESSION_OPERATOR: - [6858,6859]
                                        SimpleName: x0 [6860,6862]
                                INFIX_EXPRESSION_OPERATOR: > [6864,6865]
                                InfixExpression [6866,6882]
                                    NumberLiteral: 0.95 [6866,6870]
                                    INFIX_EXPRESSION_OPERATOR: * [6871,6872]
                                    ParenthesizedExpression [6873,6882]
                                        InfixExpression [6874,6881]
                                            SimpleName: x2 [6874,6876]
                                            INFIX_EXPRESSION_OPERATOR: - [6877,6878]
                                            SimpleName: x0 [6879,6881]
                    INFIX_EXPRESSION_OPERATOR: || [6884,6886]
                    ParenthesizedExpression [6916,6956]
                        InfixExpression [6917,6955]
                            InfixExpression [6917,6923]
                                SimpleName: x [6917,6918]
                                INFIX_EXPRESSION_OPERATOR: > [6919,6920]
                                SimpleName: x1 [6921,6923]
                            INFIX_EXPRESSION_OPERATOR: && [6924,6926]
                            InfixExpression [6927,6955]
                                ParenthesizedExpression [6927,6936]
                                    InfixExpression [6928,6935]
                                        SimpleName: x2 [6928,6930]
                                        INFIX_EXPRESSION_OPERATOR: - [6931,6932]
                                        SimpleName: x1 [6933,6935]
                                INFIX_EXPRESSION_OPERATOR: > [6937,6938]
                                InfixExpression [6939,6955]
                                    NumberLiteral: 0.95 [6939,6943]
                                    INFIX_EXPRESSION_OPERATOR: * [6944,6945]
                                    ParenthesizedExpression [6946,6955]
                                        InfixExpression [6947,6954]
                                            SimpleName: x2 [6947,6949]
                                            INFIX_EXPRESSION_OPERATOR: - [6950,6951]
                                            SimpleName: x0 [6952,6954]
                    ParenthesizedExpression [6989,6998]
                        InfixExpression [6990,6997]
                            SimpleName: x [6990,6991]
                            INFIX_EXPRESSION_OPERATOR: == [6992,6994]
                            SimpleName: x1 [6995,6997]
        IfStatement [7082,7741]
            PrefixExpression [7086,7093]
                PREFIX_EXPRESSION_OPERATOR: ! [7086,7087]
                SimpleName: bisect [7087,7093]
            Block [7095,7324]
                ExpressionStatement [7113,7135]
                    Assignment [7113,7134]
                        SimpleName: x0 [7113,7115]
                        ASSIGNMENT_OPERATOR: = [7116,7117]
                        ConditionalExpression [7118,7134]
                            InfixExpression [7118,7124]
                                SimpleName: x [7118,7119]
                                INFIX_EXPRESSION_OPERATOR: < [7120,7121]
                                SimpleName: x1 [7122,7124]
                            SimpleName: x0 [7127,7129]
                            SimpleName: x1 [7132,7134]
                ExpressionStatement [7152,7174]
                    Assignment [7152,7173]
                        SimpleName: y0 [7152,7154]
                        ASSIGNMENT_OPERATOR: = [7155,7156]
                        ConditionalExpression [7157,7173]
                            InfixExpression [7157,7163]
                                SimpleName: x [7157,7158]
                                INFIX_EXPRESSION_OPERATOR: < [7159,7160]
                                SimpleName: x1 [7161,7163]
                            SimpleName: y0 [7166,7168]
                            SimpleName: y1 [7171,7173]
                ExpressionStatement [7191,7213]
                    Assignment [7191,7212]
                        SimpleName: x2 [7191,7193]
                        ASSIGNMENT_OPERATOR: = [7194,7195]
                        ConditionalExpression [7196,7212]
                            InfixExpression [7196,7202]
                                SimpleName: x [7196,7197]
                                INFIX_EXPRESSION_OPERATOR: > [7198,7199]
                                SimpleName: x1 [7200,7202]
                            SimpleName: x2 [7205,7207]
                            SimpleName: x1 [7210,7212]
                ExpressionStatement [7230,7252]
                    Assignment [7230,7251]
                        SimpleName: y2 [7230,7232]
                        ASSIGNMENT_OPERATOR: = [7233,7234]
                        ConditionalExpression [7235,7251]
                            InfixExpression [7235,7241]
                                SimpleName: x [7235,7236]
                                INFIX_EXPRESSION_OPERATOR: > [7237,7238]
                                SimpleName: x1 [7239,7241]
                            SimpleName: y2 [7244,7246]
                            SimpleName: y1 [7249,7251]
                ExpressionStatement [7269,7276]
                    Assignment [7269,7275]
                        SimpleName: x1 [7269,7271]
                        ASSIGNMENT_OPERATOR: = [7272,7273]
                        SimpleName: x [7274,7275]
                ExpressionStatement [7277,7284]
                    Assignment [7277,7283]
                        SimpleName: y1 [7277,7279]
                        ASSIGNMENT_OPERATOR: = [7280,7281]
                        SimpleName: y [7282,7283]
                ExpressionStatement [7301,7310]
                    Assignment [7301,7309]
                        SimpleName: oldx [7301,7305]
                        ASSIGNMENT_OPERATOR: = [7306,7307]
                        SimpleName: x [7308,7309]
            Block [7330,7741]
                VariableDeclarationStatement [7348,7376]
                    PrimitiveType: double [7348,7354]
                    VariableDeclarationFragment [7355,7375]
                        SimpleName: xm [7355,7357]
                        InfixExpression [7360,7375]
                            NumberLiteral: 0.5 [7360,7363]
                            INFIX_EXPRESSION_OPERATOR: * [7364,7365]
                            ParenthesizedExpression [7366,7375]
                                InfixExpression [7367,7374]
                                    SimpleName: x0 [7367,7369]
                                    INFIX_EXPRESSION_OPERATOR: + [7370,7371]
                                    SimpleName: x2 [7372,7374]
                VariableDeclarationStatement [7393,7417]
                    PrimitiveType: double [7393,7399]
                    VariableDeclarationFragment [7400,7416]
                        SimpleName: ym [7400,7402]
                        MethodInvocation [7405,7416]
                            METHOD_INVOCATION_RECEIVER [7405,7406]
                                SimpleName: f [7405,7406]
                            SimpleName: value [7407,7412]
                            METHOD_INVOCATION_ARGUMENTS [7413,7415]
                                SimpleName: xm [7413,7415]
                IfStatement [7434,7606]
                    InfixExpression [7438,7484]
                        InfixExpression [7438,7477]
                            MethodInvocation [7438,7456]
                                METHOD_INVOCATION_RECEIVER [7438,7447]
                                    SimpleName: MathUtils [7438,7447]
                                SimpleName: sign [7448,7452]
                                METHOD_INVOCATION_ARGUMENTS [7453,7455]
                                    SimpleName: y0 [7453,7455]
                            INFIX_EXPRESSION_OPERATOR: + [7457,7458]
                            MethodInvocation [7459,7477]
                                METHOD_INVOCATION_RECEIVER [7459,7468]
                                    SimpleName: MathUtils [7459,7468]
                                SimpleName: sign [7469,7473]
                                METHOD_INVOCATION_ARGUMENTS [7474,7476]
                                    SimpleName: ym [7474,7476]
                        INFIX_EXPRESSION_OPERATOR: == [7478,7480]
                        NumberLiteral: 0.0 [7481,7484]
                    Block [7486,7543]
                        ExpressionStatement [7508,7516]
                            Assignment [7508,7515]
                                SimpleName: x2 [7508,7510]
                                ASSIGNMENT_OPERATOR: = [7511,7512]
                                SimpleName: xm [7513,7515]
                        ExpressionStatement [7517,7525]
                            Assignment [7517,7524]
                                SimpleName: y2 [7517,7519]
                                ASSIGNMENT_OPERATOR: = [7520,7521]
                                SimpleName: ym [7522,7524]
                    Block [7549,7606]
                        ExpressionStatement [7571,7579]
                            Assignment [7571,7578]
                                SimpleName: x0 [7571,7573]
                                ASSIGNMENT_OPERATOR: = [7574,7575]
                                SimpleName: xm [7576,7578]
                        ExpressionStatement [7580,7588]
                            Assignment [7580,7587]
                                SimpleName: y0 [7580,7582]
                                ASSIGNMENT_OPERATOR: = [7583,7584]
                                SimpleName: ym [7585,7587]
                ExpressionStatement [7623,7644]
                    Assignment [7623,7643]
                        SimpleName: x1 [7623,7625]
                        ASSIGNMENT_OPERATOR: = [7626,7627]
                        InfixExpression [7628,7643]
                            NumberLiteral: 0.5 [7628,7631]
                            INFIX_EXPRESSION_OPERATOR: * [7632,7633]
                            ParenthesizedExpression [7634,7643]
                                InfixExpression [7635,7642]
                                    SimpleName: x0 [7635,7637]
                                    INFIX_EXPRESSION_OPERATOR: + [7638,7639]
                                    SimpleName: x2 [7640,7642]
                ExpressionStatement [7661,7678]
                    Assignment [7661,7677]
                        SimpleName: y1 [7661,7663]
                        ASSIGNMENT_OPERATOR: = [7664,7665]
                        MethodInvocation [7666,7677]
                            METHOD_INVOCATION_RECEIVER [7666,7667]
                                SimpleName: f [7666,7667]
                            SimpleName: value [7668,7673]
                            METHOD_INVOCATION_ARGUMENTS [7674,7676]
                                SimpleName: x1 [7674,7676]
                ExpressionStatement [7695,7727]
                    Assignment [7695,7726]
                        SimpleName: oldx [7695,7699]
                        ASSIGNMENT_OPERATOR: = [7700,7701]
                        QualifiedName: Double.POSITIVE_INFINITY [7702,7726]
        ExpressionStatement [7754,7758]
            PostfixExpression [7754,7757]
                SimpleName: i [7754,7755]
                POSTFIX_EXPRESSION_OPERATOR: ++ [7755,7757]
to
Block [5646,8951]
at 13
===
move-tree
---
ThrowStatement [7777,7841]
    ClassInstanceCreation [7783,7840]
        SimpleType [7787,7817]
            SimpleName: MaxIterationsExceededException [7787,7817]
        SimpleName: maximalIterationCount [7818,7839]
to
Block [5646,8951]
at 14
===
insert-tree
---
TagElement [10212,10308]
    TextElement:  replaced by  [10223,10236]
    TagElement [10236,10308]
        MethodRef [10243,10290]
            SimpleName: solve2 [10244,10250]
            MethodRefParameter [10251,10273]
                SimpleType [10251,10273]
                    SimpleName: UnivariateRealFunction [10251,10273]
            MethodRefParameter [10275,10281]
                PrimitiveType: double [10275,10281]
            MethodRefParameter [10283,10289]
                PrimitiveType: double [10283,10289]
        TextElement: since 2.0 [10298,10307]
to
Javadoc [7853,9108]
at 7
===
insert-node
---
Modifier: final [10357,10362]
to
SingleVariableDeclaration [9134,9144]
at 0
===
insert-node
---
Modifier: final [10375,10380]
to
SingleVariableDeclaration [9146,9156]
at 0
===
insert-tree
---
ReturnStatement [10478,10505]
    MethodInvocation [10485,10504]
        SimpleName: solve2 [10485,10491]
        METHOD_INVOCATION_ARGUMENTS [10492,10503]
            SimpleName: f [10492,10493]
            SimpleName: min [10495,10498]
            SimpleName: max [10500,10503]
to
Block [9234,11830]
at 0
===
move-tree
---
VariableDeclarationStatement [9397,9439]
    PrimitiveType: double [9397,9403]
    VariableDeclarationFragment [9404,9406]
        SimpleName: x0 [9404,9406]
    VariableDeclarationFragment [9408,9410]
        SimpleName: x1 [9408,9410]
    VariableDeclarationFragment [9412,9414]
        SimpleName: x2 [9412,9414]
    VariableDeclarationFragment [9416,9417]
        SimpleName: x [9416,9417]
    VariableDeclarationFragment [9419,9423]
        SimpleName: oldx [9419,9423]
    VariableDeclarationFragment [9425,9427]
        SimpleName: y0 [9425,9427]
    VariableDeclarationFragment [9429,9431]
        SimpleName: y1 [9429,9431]
    VariableDeclarationFragment [9433,9435]
        SimpleName: y2 [9433,9435]
    VariableDeclarationFragment [9437,9438]
        SimpleName: y [9437,9438]
to
Block [11966,14562]
at 0
===
move-tree
---
VariableDeclarationStatement [9448,9497]
    PrimitiveType: double [9448,9454]
    VariableDeclarationFragment [9455,9456]
        SimpleName: q [9455,9456]
    VariableDeclarationFragment [9458,9459]
        SimpleName: A [9458,9459]
    VariableDeclarationFragment [9461,9462]
        SimpleName: B [9461,9462]
    VariableDeclarationFragment [9464,9465]
        SimpleName: C [9464,9465]
    VariableDeclarationFragment [9467,9472]
        SimpleName: delta [9467,9472]
    VariableDeclarationFragment [9474,9485]
        SimpleName: denominator [9474,9485]
    VariableDeclarationFragment [9487,9496]
        SimpleName: tolerance [9487,9496]
to
Block [11966,14562]
at 1
===
move-tree
---
ExpressionStatement [9507,9516]
    Assignment [9507,9515]
        SimpleName: x0 [9507,9509]
        ASSIGNMENT_OPERATOR: = [9510,9511]
        SimpleName: min [9512,9515]
to
Block [11966,14562]
at 2
===
move-tree
---
ExpressionStatement [9517,9534]
    Assignment [9517,9533]
        SimpleName: y0 [9517,9519]
        ASSIGNMENT_OPERATOR: = [9520,9521]
        MethodInvocation [9522,9533]
            METHOD_INVOCATION_RECEIVER [9522,9523]
                SimpleName: f [9522,9523]
            SimpleName: value [9524,9529]
            METHOD_INVOCATION_ARGUMENTS [9530,9532]
                SimpleName: x0 [9530,9532]
to
Block [11966,14562]
at 3
===
move-tree
---
ExpressionStatement [9543,9552]
    Assignment [9543,9551]
        SimpleName: x1 [9543,9545]
        ASSIGNMENT_OPERATOR: = [9546,9547]
        SimpleName: max [9548,9551]
to
Block [11966,14562]
at 4
===
move-tree
---
ExpressionStatement [9553,9570]
    Assignment [9553,9569]
        SimpleName: y1 [9553,9555]
        ASSIGNMENT_OPERATOR: = [9556,9557]
        MethodInvocation [9558,9569]
            METHOD_INVOCATION_RECEIVER [9558,9559]
                SimpleName: f [9558,9559]
            SimpleName: value [9560,9565]
            METHOD_INVOCATION_ARGUMENTS [9566,9568]
                SimpleName: x1 [9566,9568]
to
Block [11966,14562]
at 5
===
move-tree
---
ExpressionStatement [9579,9600]
    Assignment [9579,9599]
        SimpleName: x2 [9579,9581]
        ASSIGNMENT_OPERATOR: = [9582,9583]
        InfixExpression [9584,9599]
            NumberLiteral: 0.5 [9584,9587]
            INFIX_EXPRESSION_OPERATOR: * [9588,9589]
            ParenthesizedExpression [9590,9599]
                InfixExpression [9591,9598]
                    SimpleName: x0 [9591,9593]
                    INFIX_EXPRESSION_OPERATOR: + [9594,9595]
                    SimpleName: x1 [9596,9598]
to
Block [11966,14562]
at 6
===
move-tree
---
ExpressionStatement [9601,9618]
    Assignment [9601,9617]
        SimpleName: y2 [9601,9603]
        ASSIGNMENT_OPERATOR: = [9604,9605]
        MethodInvocation [9606,9617]
            METHOD_INVOCATION_RECEIVER [9606,9607]
                SimpleName: f [9606,9607]
            SimpleName: value [9608,9613]
            METHOD_INVOCATION_ARGUMENTS [9614,9616]
                SimpleName: x2 [9614,9616]
to
Block [11966,14562]
at 7
===
move-tree
---
IfStatement [9683,9713]
    InfixExpression [9687,9696]
        SimpleName: y0 [9687,9689]
        INFIX_EXPRESSION_OPERATOR: == [9690,9692]
        NumberLiteral: 0.0 [9693,9696]
    Block [9698,9713]
        ReturnStatement [9700,9711]
            SimpleName: min [9707,9710]
to
Block [11966,14562]
at 8
===
move-tree
---
IfStatement [9722,9752]
    InfixExpression [9726,9735]
        SimpleName: y1 [9726,9728]
        INFIX_EXPRESSION_OPERATOR: == [9729,9731]
        NumberLiteral: 0.0 [9732,9735]
    Block [9737,9752]
        ReturnStatement [9739,9750]
            SimpleName: max [9746,9749]
to
Block [11966,14562]
at 9
===
move-tree
---
ExpressionStatement [9761,9791]
    MethodInvocation [9761,9790]
        SimpleName: verifyBracketing [9761,9777]
        METHOD_INVOCATION_ARGUMENTS [9778,9789]
            SimpleName: min [9778,9781]
            SimpleName: max [9783,9786]
            SimpleName: f [9788,9789]
to
Block [11966,14562]
at 10
===
move-tree
---
VariableDeclarationStatement [9801,9811]
    PrimitiveType: int [9801,9804]
    VariableDeclarationFragment [9805,9810]
        SimpleName: i [9805,9806]
        NumberLiteral: 1 [9809,9810]
to
Block [11966,14562]
at 11
===
move-tree
---
ExpressionStatement [9820,9852]
    Assignment [9820,9851]
        SimpleName: oldx [9820,9824]
        ASSIGNMENT_OPERATOR: = [9825,9826]
        QualifiedName: Double.POSITIVE_INFINITY [9827,9851]
to
Block [11966,14562]
at 12
===
move-tree
---
WhileStatement [9861,11751]
    InfixExpression [9868,9894]
        SimpleName: i [9868,9869]
        INFIX_EXPRESSION_OPERATOR: <= [9870,9872]
        SimpleName: maximalIterationCount [9873,9894]
    Block [9896,11751]
        ExpressionStatement [9968,9994]
            Assignment [9968,9993]
                SimpleName: q [9968,9969]
                ASSIGNMENT_OPERATOR: = [9970,9971]
                InfixExpression [9972,9993]
                    ParenthesizedExpression [9972,9981]
                        InfixExpression [9973,9980]
                            SimpleName: x2 [9973,9975]
                            INFIX_EXPRESSION_OPERATOR: - [9976,9977]
                            SimpleName: x1 [9978,9980]
                    INFIX_EXPRESSION_OPERATOR: / [9982,9983]
                    ParenthesizedExpression [9984,9993]
                        InfixExpression [9985,9992]
                            SimpleName: x1 [9985,9987]
                            INFIX_EXPRESSION_OPERATOR: - [9988,9989]
                            SimpleName: x0 [9990,9992]
        ExpressionStatement [10007,10044]
            Assignment [10007,10043]
                SimpleName: A [10007,10008]
                ASSIGNMENT_OPERATOR: = [10009,10010]
                InfixExpression [10011,10043]
                    SimpleName: q [10011,10012]
                    INFIX_EXPRESSION_OPERATOR: * [10013,10014]
                    ParenthesizedExpression [10015,10043]
                        InfixExpression [10016,10042]
                            InfixExpression [10016,10033]
                                SimpleName: y2 [10016,10018]
                                INFIX_EXPRESSION_OPERATOR: - [10019,10020]
                                InfixExpression [10021,10033]
                                    ParenthesizedExpression [10021,10028]
                                        InfixExpression [10022,10027]
                                            NumberLiteral: 1 [10022,10023]
                                            INFIX_EXPRESSION_OPERATOR: + [10024,10025]
                                            SimpleName: q [10026,10027]
                                    INFIX_EXPRESSION_OPERATOR: * [10029,10030]
                                    SimpleName: y1 [10031,10033]
                            INFIX_EXPRESSION_OPERATOR: + [10034,10035]
                            InfixExpression [10036,10042]
                                SimpleName: q [10036,10037]
                                INFIX_EXPRESSION_OPERATOR: * [10038,10039]
                                SimpleName: y0 [10040,10042]
        ExpressionStatement [10057,10114]
            Assignment [10057,10113]
                SimpleName: B [10057,10058]
                ASSIGNMENT_OPERATOR: = [10059,10060]
                InfixExpression [10061,10113]
                    InfixExpression [10061,10100]
                        InfixExpression [10061,10075]
                            ParenthesizedExpression [10061,10070]
                                InfixExpression [10062,10069]
                                    InfixExpression [10062,10065]
                                        NumberLiteral: 2 [10062,10063]
                                        INFIX_EXPRESSION_OPERATOR: * [10063,10064]
                                        SimpleName: q [10064,10065]
                                    INFIX_EXPRESSION_OPERATOR: + [10066,10067]
                                    NumberLiteral: 1 [10068,10069]
                            INFIX_EXPRESSION_OPERATOR: * [10071,10072]
                            SimpleName: y2 [10073,10075]
                        INFIX_EXPRESSION_OPERATOR: - [10076,10077]
                        InfixExpression [10078,10100]
                            ParenthesizedExpression [10078,10085]
                                InfixExpression [10079,10084]
                                    NumberLiteral: 1 [10079,10080]
                                    INFIX_EXPRESSION_OPERATOR: + [10081,10082]
                                    SimpleName: q [10083,10084]
                            INFIX_EXPRESSION_OPERATOR: * [10086,10087]
                            ParenthesizedExpression [10088,10095]
                                InfixExpression [10089,10094]
                                    NumberLiteral: 1 [10089,10090]
                                    INFIX_EXPRESSION_OPERATOR: + [10091,10092]
                                    SimpleName: q [10093,10094]
                            SimpleName: y1 [10098,10100]
                    INFIX_EXPRESSION_OPERATOR: + [10101,10102]
                    InfixExpression [10103,10113]
                        SimpleName: q [10103,10104]
                        INFIX_EXPRESSION_OPERATOR: * [10105,10106]
                        SimpleName: q [10107,10108]
                        SimpleName: y0 [10111,10113]
        ExpressionStatement [10127,10144]
            Assignment [10127,10143]
                SimpleName: C [10127,10128]
                ASSIGNMENT_OPERATOR: = [10129,10130]
                InfixExpression [10131,10143]
                    ParenthesizedExpression [10131,10138]
                        InfixExpression [10132,10137]
                            NumberLiteral: 1 [10132,10133]
                            INFIX_EXPRESSION_OPERATOR: + [10134,10135]
                            SimpleName: q [10136,10137]
                    INFIX_EXPRESSION_OPERATOR: * [10139,10140]
                    SimpleName: y2 [10141,10143]
        ExpressionStatement [10157,10183]
            Assignment [10157,10182]
                SimpleName: delta [10157,10162]
                ASSIGNMENT_OPERATOR: = [10163,10164]
                InfixExpression [10165,10182]
                    InfixExpression [10165,10170]
                        SimpleName: B [10165,10166]
                        INFIX_EXPRESSION_OPERATOR: * [10167,10168]
                        SimpleName: B [10169,10170]
                    INFIX_EXPRESSION_OPERATOR: - [10171,10172]
                    InfixExpression [10173,10182]
                        NumberLiteral: 4 [10173,10174]
                        INFIX_EXPRESSION_OPERATOR: * [10175,10176]
                        SimpleName: A [10177,10178]
                        SimpleName: C [10181,10182]
        IfStatement [10196,10620]
            InfixExpression [10200,10212]
                SimpleName: delta [10200,10205]
                INFIX_EXPRESSION_OPERATOR: >= [10206,10208]
                NumberLiteral: 0.0 [10209,10212]
            Block [10214,10479]
                VariableDeclarationStatement [10292,10328]
                    PrimitiveType: double [10292,10298]
                    VariableDeclarationFragment [10299,10327]
                        SimpleName: dplus [10299,10304]
                        InfixExpression [10307,10327]
                            SimpleName: B [10307,10308]
                            INFIX_EXPRESSION_OPERATOR: + [10309,10310]
                            MethodInvocation [10311,10327]
                                METHOD_INVOCATION_RECEIVER [10311,10315]
                                    SimpleName: Math [10311,10315]
                                SimpleName: sqrt [10316,10320]
                                METHOD_INVOCATION_ARGUMENTS [10321,10326]
                                    SimpleName: delta [10321,10326]
                VariableDeclarationStatement [10345,10382]
                    PrimitiveType: double [10345,10351]
                    VariableDeclarationFragment [10352,10381]
                        SimpleName: dminus [10352,10358]
                        InfixExpression [10361,10381]
                            SimpleName: B [10361,10362]
                            INFIX_EXPRESSION_OPERATOR: - [10363,10364]
                            MethodInvocation [10365,10381]
                                METHOD_INVOCATION_RECEIVER [10365,10369]
                                    SimpleName: Math [10365,10369]
                                SimpleName: sqrt [10370,10374]
                                METHOD_INVOCATION_ARGUMENTS [10375,10380]
                                    SimpleName: delta [10375,10380]
                ExpressionStatement [10399,10465]
                    Assignment [10399,10464]
                        SimpleName: denominator [10399,10410]
                        ASSIGNMENT_OPERATOR: = [10411,10412]
                        ConditionalExpression [10413,10464]
                            InfixExpression [10413,10447]
                                MethodInvocation [10413,10428]
                                    METHOD_INVOCATION_RECEIVER [10413,10417]
                                        SimpleName: Math [10413,10417]
                                    SimpleName: abs [10418,10421]
                                    METHOD_INVOCATION_ARGUMENTS [10422,10427]
                                        SimpleName: dplus [10422,10427]
                                INFIX_EXPRESSION_OPERATOR: > [10429,10430]
                                MethodInvocation [10431,10447]
                                    METHOD_INVOCATION_RECEIVER [10431,10435]
                                        SimpleName: Math [10431,10435]
                                    SimpleName: abs [10436,10439]
                                    METHOD_INVOCATION_ARGUMENTS [10440,10446]
                                        SimpleName: dminus [10440,10446]
                            SimpleName: dplus [10450,10455]
                            SimpleName: dminus [10458,10464]
            Block [10485,10620]
                ExpressionStatement [10567,10606]
                    Assignment [10567,10605]
                        SimpleName: denominator [10567,10578]
                        ASSIGNMENT_OPERATOR: = [10579,10580]
                        MethodInvocation [10581,10605]
                            METHOD_INVOCATION_RECEIVER [10581,10585]
                                SimpleName: Math [10581,10585]
                            SimpleName: sqrt [10586,10590]
                            METHOD_INVOCATION_ARGUMENTS [10591,10604]
                                InfixExpression [10591,10604]
                                    InfixExpression [10591,10596]
                                        SimpleName: B [10591,10592]
                                        INFIX_EXPRESSION_OPERATOR: * [10593,10594]
                                        SimpleName: B [10595,10596]
                                    INFIX_EXPRESSION_OPERATOR: - [10597,10598]
                                    SimpleName: delta [10599,10604]
        IfStatement [10633,11158]
            InfixExpression [10637,10653]
                SimpleName: denominator [10637,10648]
                INFIX_EXPRESSION_OPERATOR: != [10649,10651]
                NumberLiteral: 0 [10652,10653]
            Block [10655,10962]
                ExpressionStatement [10673,10716]
                    Assignment [10673,10715]
                        SimpleName: x [10673,10674]
                        ASSIGNMENT_OPERATOR: = [10675,10676]
                        InfixExpression [10677,10715]
                            SimpleName: x2 [10677,10679]
                            INFIX_EXPRESSION_OPERATOR: - [10680,10681]
                            InfixExpression [10682,10715]
                                InfixExpression [10682,10701]
                                    NumberLiteral: 2.0 [10682,10685]
                                    INFIX_EXPRESSION_OPERATOR: * [10686,10687]
                                    SimpleName: C [10688,10689]
                                    ParenthesizedExpression [10692,10701]
                                        InfixExpression [10693,10700]
                                            SimpleName: x2 [10693,10695]
                                            INFIX_EXPRESSION_OPERATOR: - [10696,10697]
                                            SimpleName: x1 [10698,10700]
                                INFIX_EXPRESSION_OPERATOR: / [10702,10703]
                                SimpleName: denominator [10704,10715]
                WhileStatement [10859,10948]
                    InfixExpression [10866,10884]
                        InfixExpression [10866,10873]
                            SimpleName: x [10866,10867]
                            INFIX_EXPRESSION_OPERATOR: == [10868,10870]
                            SimpleName: x1 [10871,10873]
                        INFIX_EXPRESSION_OPERATOR: || [10874,10876]
                        InfixExpression [10877,10884]
                            SimpleName: x [10877,10878]
                            INFIX_EXPRESSION_OPERATOR: == [10879,10881]
                            SimpleName: x2 [10882,10884]
                    Block [10886,10948]
                        ExpressionStatement [10908,10930]
                            Assignment [10908,10929]
                                SimpleName: x [10908,10909]
                                ASSIGNMENT_OPERATOR: += [10910,10912]
                                SimpleName: absoluteAccuracy [10913,10929]
            Block [10968,11158]
                ExpressionStatement [11057,11095]
                    Assignment [11057,11094]
                        SimpleName: x [11057,11058]
                        ASSIGNMENT_OPERATOR: = [11059,11060]
                        InfixExpression [11061,11094]
                            SimpleName: min [11061,11064]
                            INFIX_EXPRESSION_OPERATOR: + [11065,11066]
                            InfixExpression [11067,11094]
                                MethodInvocation [11067,11080]
                                    METHOD_INVOCATION_RECEIVER [11067,11071]
                                        SimpleName: Math [11067,11071]
                                    SimpleName: random [11072,11078]
                                INFIX_EXPRESSION_OPERATOR: * [11081,11082]
                                ParenthesizedExpression [11083,11094]
                                    InfixExpression [11084,11093]
                                        SimpleName: max [11084,11087]
                                        INFIX_EXPRESSION_OPERATOR: - [11088,11089]
                                        SimpleName: min [11090,11093]
                ExpressionStatement [11112,11144]
                    Assignment [11112,11143]
                        SimpleName: oldx [11112,11116]
                        ASSIGNMENT_OPERATOR: = [11117,11118]
                        QualifiedName: Double.POSITIVE_INFINITY [11119,11143]
        ExpressionStatement [11171,11186]
            Assignment [11171,11185]
                SimpleName: y [11171,11172]
                ASSIGNMENT_OPERATOR: = [11173,11174]
                MethodInvocation [11175,11185]
                    METHOD_INVOCATION_RECEIVER [11175,11176]
                        SimpleName: f [11175,11176]
                    SimpleName: value [11177,11182]
                    METHOD_INVOCATION_ARGUMENTS [11183,11184]
                        SimpleName: x [11183,11184]
        ExpressionStatement [11237,11308]
            Assignment [11237,11307]
                SimpleName: tolerance [11237,11246]
                ASSIGNMENT_OPERATOR: = [11247,11248]
                MethodInvocation [11249,11307]
                    METHOD_INVOCATION_RECEIVER [11249,11253]
                        SimpleName: Math [11249,11253]
                    SimpleName: max [11254,11257]
                    METHOD_INVOCATION_ARGUMENTS [11258,11306]
                        InfixExpression [11258,11288]
                            SimpleName: relativeAccuracy [11258,11274]
                            INFIX_EXPRESSION_OPERATOR: * [11275,11276]
                            MethodInvocation [11277,11288]
                                METHOD_INVOCATION_RECEIVER [11277,11281]
                                    SimpleName: Math [11277,11281]
                                SimpleName: abs [11282,11285]
                                METHOD_INVOCATION_ARGUMENTS [11286,11287]
                                    SimpleName: x [11286,11287]
                        SimpleName: absoluteAccuracy [11290,11306]
        IfStatement [11321,11437]
            InfixExpression [11325,11356]
                MethodInvocation [11325,11343]
                    METHOD_INVOCATION_RECEIVER [11325,11329]
                        SimpleName: Math [11325,11329]
                    SimpleName: abs [11330,11333]
                    METHOD_INVOCATION_ARGUMENTS [11334,11342]
                        InfixExpression [11334,11342]
                            SimpleName: x [11334,11335]
                            INFIX_EXPRESSION_OPERATOR: - [11336,11337]
                            SimpleName: oldx [11338,11342]
                INFIX_EXPRESSION_OPERATOR: <= [11344,11346]
                SimpleName: tolerance [11347,11356]
            Block [11358,11437]
                ExpressionStatement [11376,11392]
                    MethodInvocation [11376,11391]
                        SimpleName: setResult [11376,11385]
                        METHOD_INVOCATION_ARGUMENTS [11386,11390]
                            SimpleName: x [11386,11387]
                            SimpleName: i [11389,11390]
                ReturnStatement [11409,11423]
                    SimpleName: result [11416,11422]
        IfStatement [11450,11571]
            InfixExpression [11454,11490]
                MethodInvocation [11454,11465]
                    METHOD_INVOCATION_RECEIVER [11454,11458]
                        SimpleName: Math [11454,11458]
                    SimpleName: abs [11459,11462]
                    METHOD_INVOCATION_ARGUMENTS [11463,11464]
                        SimpleName: y [11463,11464]
                INFIX_EXPRESSION_OPERATOR: <= [11466,11468]
                SimpleName: functionValueAccuracy [11469,11490]
            Block [11492,11571]
                ExpressionStatement [11510,11526]
                    MethodInvocation [11510,11525]
                        SimpleName: setResult [11510,11519]
                        METHOD_INVOCATION_ARGUMENTS [11520,11524]
                            SimpleName: x [11520,11521]
                            SimpleName: i [11523,11524]
                ReturnStatement [11543,11557]
                    SimpleName: result [11550,11556]
        ExpressionStatement [11627,11635]
            Assignment [11627,11634]
                SimpleName: x0 [11627,11629]
                ASSIGNMENT_OPERATOR: = [11630,11631]
                SimpleName: x1 [11632,11634]
        ExpressionStatement [11636,11644]
            Assignment [11636,11643]
                SimpleName: y0 [11636,11638]
                ASSIGNMENT_OPERATOR: = [11639,11640]
                SimpleName: y1 [11641,11643]
        ExpressionStatement [11657,11665]
            Assignment [11657,11664]
                SimpleName: x1 [11657,11659]
                ASSIGNMENT_OPERATOR: = [11660,11661]
                SimpleName: x2 [11662,11664]
        ExpressionStatement [11666,11674]
            Assignment [11666,11673]
                SimpleName: y1 [11666,11668]
                ASSIGNMENT_OPERATOR: = [11669,11670]
                SimpleName: y2 [11671,11673]
        ExpressionStatement [11687,11694]
            Assignment [11687,11693]
                SimpleName: x2 [11687,11689]
                ASSIGNMENT_OPERATOR: = [11690,11691]
                SimpleName: x [11692,11693]
        ExpressionStatement [11695,11702]
            Assignment [11695,11701]
                SimpleName: y2 [11695,11697]
                ASSIGNMENT_OPERATOR: = [11698,11699]
                SimpleName: y [11700,11701]
        ExpressionStatement [11715,11724]
            Assignment [11715,11723]
                SimpleName: oldx [11715,11719]
                ASSIGNMENT_OPERATOR: = [11720,11721]
                SimpleName: x [11722,11723]
        ExpressionStatement [11737,11741]
            PostfixExpression [11737,11740]
                SimpleName: i [11737,11738]
                POSTFIX_EXPRESSION_OPERATOR: ++ [11738,11740]
to
Block [11966,14562]
at 13
===
move-tree
---
ThrowStatement [11760,11824]
    ClassInstanceCreation [11766,11823]
        SimpleType [11770,11800]
            SimpleName: MaxIterationsExceededException [11770,11800]
        SimpleName: maximalIterationCount [11801,11822]
to
Block [11966,14562]
at 14
===
insert-node
---
SimpleName: f [4072,4073]
to
METHOD_INVOCATION_ARGUMENTS [3079,3091]
at 0
===
insert-node
---
SimpleName: f [4132,4133]
to
METHOD_INVOCATION_ARGUMENTS [3136,3148]
at 0
===
delete-node
---
Javadoc [1719,1822]
===
===
delete-tree
---
Javadoc [3172,4417]
    TagElement [3183,3925]
        TextElement: Find a real root in the given interval. [3183,3222]
        TextElement: <p> [3230,3233]
        TextElement: Original Muller's method would have function evaluation at complex point. [3241,3314]
        TextElement: Since our f(x) is real, we have to find ways to avoid that. Bracketing [3322,3392]
        TextElement: condition is one way to go: by requiring bracketing in every iteration, [3400,3471]
        TextElement: the newly computed approximation is guaranteed to be real.</p> [3479,3541]
        TextElement: <p> [3549,3552]
        TextElement: Normally Muller's method converges quadratically in the vicinity of a [3560,3629]
        TextElement: zero, however it may be very slow in regions far away from zeros. For [3637,3706]
        TextElement: example, f(x) = exp(x) - 1, min = -50, max = 100. In such case we use [3714,3783]
        TextElement: bisection as a safety backup if it performs very poorly.</p> [3791,3851]
        TextElement: <p> [3859,3862]
        TextElement: The formulas here use divided differences directly.</p> [3870,3925]
    TagElement [3941,3984]
        SimpleName: min [3948,3951]
        TextElement:  the lower bound for the interval [3951,3984]
    TagElement [3992,4035]
        SimpleName: max [3999,4002]
        TextElement:  the upper bound for the interval [4002,4035]
    TagElement [4043,4096]
        TextElement:  the point at which the function value is zero [4050,4096]
    TagElement [4104,4245]
        SimpleName: MaxIterationsExceededException [4112,4142]
        TextElement:  if the maximum iteration count is exceeded [4142,4185]
        TextElement: or the solver detects convergence problems otherwise [4193,4245]
    TagElement [4253,4339]
        SimpleName: FunctionEvaluationException [4261,4288]
        TextElement:  if an error occurs evaluating the [4288,4322]
        TextElement: function  [4330,4339]
    TagElement [4347,4409]
        SimpleName: IllegalArgumentException [4355,4379]
        TextElement:  if any parameters are invalid [4379,4409]
===
delete-tree
---
SimpleType [4473,4503]
    SimpleName: MaxIterationsExceededException [4473,4503]
===
delete-tree
---
Javadoc [1915,2573]
    TagElement [1926,2037]
        TextElement: Find a real root in the given interval with initial value. [1926,1984]
        TextElement: <p> [1992,1995]
        TextElement: Requires bracketing condition.</p> [2003,2037]
    TagElement [2053,2096]
        SimpleName: min [2060,2063]
        TextElement:  the lower bound for the interval [2063,2096]
    TagElement [2104,2147]
        SimpleName: max [2111,2114]
        TextElement:  the upper bound for the interval [2114,2147]
    TagElement [2155,2192]
        SimpleName: initial [2162,2169]
        TextElement:  the start value to use [2169,2192]
    TagElement [2200,2253]
        TextElement:  the point at which the function value is zero [2207,2253]
    TagElement [2261,2402]
        SimpleName: MaxIterationsExceededException [2269,2299]
        TextElement:  if the maximum iteration count is exceeded [2299,2342]
        TextElement: or the solver detects convergence problems otherwise [2350,2402]
    TagElement [2410,2495]
        SimpleName: FunctionEvaluationException [2418,2445]
        TextElement:  if an error occurs evaluating the [2445,2479]
        TextElement: function [2487,2495]
    TagElement [2503,2565]
        SimpleName: IllegalArgumentException [2511,2535]
        TextElement:  if any parameters are invalid [2535,2565]
===
delete-tree
---
SimpleType [2653,2683]
    SimpleName: MaxIterationsExceededException [2653,2683]
