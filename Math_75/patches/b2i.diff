diff -r -u buggy/src/main/java/org/apache/commons/math/stat/Frequency.java inducing/src/main/java/org/apache/commons/math/stat/Frequency.java
--- buggy/src/main/java/org/apache/commons/math/stat/Frequency.java	2023-06-12 11:34:51.890685025 +0800
+++ inducing/src/main/java/org/apache/commons/math/stat/Frequency.java	2023-06-12 11:34:52.098688819 +0800
@@ -24,14 +24,14 @@
 
 import org.apache.commons.math.MathRuntimeException;
 
-/**
+/** 
  * Maintains a frequency distribution.
  * <p>
- * Accepts int, long, char or Comparable values.  New values added must be
- * comparable to those that have been added, otherwise the add method will
+ * Accepts int, long, char or Comparable values.  New values added must be 
+ * comparable to those that have been added, otherwise the add method will 
  * throw an IllegalArgumentException.</p>
  * <p>
- * Integer values (int, long, Integer, Long) are not distinguished by type --
+ * Integer values (int, long, Integer, Long) are not distinguished by type -- 
  * i.e. <code>addValue(Long.valueOf(2)), addValue(2), addValue(2l)</code> all have
  * the same effect (similarly for arguments to <code>getCount,</code> etc.).</p>
  * <p>
@@ -40,13 +40,13 @@
  * to combine integral types with chars in a frequency distribution will fail.
  * </p>
  * <p>
- * The values are ordered using the default (natural order), unless a
+ * The values are ordered using the default (natural order), unless a  
  * <code>Comparator</code> is supplied in the constructor.</p>
  *
  * @version $Revision$ $Date$
  */
 public class Frequency implements Serializable {
-
+    
     /** Serializable version identifier */
     private static final long serialVersionUID = -3845586908418844111L;
 
@@ -59,10 +59,10 @@
     public Frequency() {
         freqTable = new TreeMap<Comparable<?>, Long>();
     }
-
+    
     /**
      * Constructor allowing values Comparator to be specified.
-     *
+     * 
      * @param comparator Comparator used to order values
      */
     @SuppressWarnings("unchecked")
@@ -73,7 +73,7 @@
     /**
      * Return a string representation of this frequency
      * distribution.
-     *
+     * 
      * @return a string representation.
      */
     @Override
@@ -102,30 +102,30 @@
      * If other objects have already been added to this Frequency, v must
      * be comparable to those that have already been added.
      * </p>
-     *
+     * 
      * @param v the value to add.
-     * @throws IllegalArgumentException if <code>v</code> is not Comparable,
+     * @throws IllegalArgumentException if <code>v</code> is not Comparable, 
      *         or is not comparable with previous entries
      * @deprecated use {@link #addValue(Comparable)} instead
      */
     @Deprecated
     public void addValue(Object v) {
         if (v instanceof Comparable<?>){
-            addValue((Comparable<?>) v);
+            addValue((Comparable<?>) v);            
         } else {
             throw MathRuntimeException.createIllegalArgumentException(
                   "class ({0}) does not implement Comparable",
                   v.getClass().getName());
         }
     }
-
+    
     /**
      * Adds 1 to the frequency count for v.
      * <p>
      * If other objects have already been added to this Frequency, v must
      * be comparable to those that have already been added.
      * </p>
-     *
+     * 
      * @param v the value to add.
      * @throws IllegalArgumentException if <code>v</code> is not comparable with previous entries
      */
@@ -141,7 +141,7 @@
             } else {
                 freqTable.put(obj, Long.valueOf(count.longValue() + 1));
             }
-        } catch (ClassCastException ex) {
+        } catch (ClassCastException ex) {   
             //TreeMap will throw ClassCastException if v is not comparable
             throw MathRuntimeException.createIllegalArgumentException(
                   "instance of class {0} not comparable to existing values",
@@ -151,18 +151,17 @@
 
     /**
      * Adds 1 to the frequency count for v.
-     *
+     * 
      * @param v the value to add.
      */
     public void addValue(int v) {
         addValue(Long.valueOf(v));
     }
-
+    
     /**
      * Adds 1 to the frequency count for v.
-     *
+     * 
      * @param v the value to add.
-     * @deprecated to be removed in math 3.0
      */
     public void addValue(Integer v) {
         addValue(Long.valueOf(v.longValue()));
@@ -170,45 +169,45 @@
 
     /**
      * Adds 1 to the frequency count for v.
-     *
+     * 
      * @param v the value to add.
      */
     public void addValue(long v) {
         addValue(Long.valueOf(v));
     }
-
+    
     /**
      * Adds 1 to the frequency count for v.
-     *
+     * 
      * @param v the value to add.
      */
     public void addValue(char v) {
         addValue(Character.valueOf(v));
     }
-
+    
     /** Clears the frequency table */
     public void clear() {
         freqTable.clear();
     }
-
+    
     /**
      * Returns an Iterator over the set of values that have been added.
      * <p>
-     * If added values are integral (i.e., integers, longs, Integers, or Longs),
+     * If added values are integral (i.e., integers, longs, Integers, or Longs), 
      * they are converted to Longs when they are added, so the objects returned
      * by the Iterator will in this case be Longs.</p>
-     *
+     * 
      * @return values Iterator
      */
     public Iterator<Comparable<?>> valuesIterator() {
         return freqTable.keySet().iterator();
     }
-
+    
     //-------------------------------------------------------------------------
-
+    
     /**
      * Returns the sum of all frequencies.
-     *
+     * 
      * @return the total frequency count.
      */
     public long getSumFreq() {
@@ -223,7 +222,7 @@
     /**
      * Returns the number of values = v.
      * Returns 0 if the value is not comparable.
-     *
+     * 
      * @param v the value to lookup.
      * @return the frequency of v.
      * @deprecated replaced by {@link #getCount(Comparable)} as of 2.0
@@ -236,7 +235,7 @@
     /**
      * Returns the number of values = v.
      * Returns 0 if the value is not comparable.
-     *
+     * 
      * @param v the value to lookup.
      * @return the frequency of v.
      */
@@ -245,7 +244,7 @@
             return getCount(((Integer) v).longValue());
         }
         long result = 0;
-        try {
+        try { 
             Long count =  freqTable.get(v);
             if (count != null) {
                 result = count.longValue();
@@ -258,34 +257,34 @@
 
     /**
      * Returns the number of values = v.
-     *
+     * 
      * @param v the value to lookup.
      * @return the frequency of v.
      */
     public long getCount(int v) {
         return getCount(Long.valueOf(v));
     }
-
+    
     /**
      * Returns the number of values = v.
-     *
+     * 
      * @param v the value to lookup.
      * @return the frequency of v.
      */
     public long getCount(long v) {
         return getCount(Long.valueOf(v));
     }
-
+    
     /**
      * Returns the number of values = v.
-     *
+     * 
      * @param v the value to lookup.
      * @return the frequency of v.
      */
     public long getCount(char v) {
         return getCount(Character.valueOf(v));
     }
-
+    
     //-------------------------------------------------------------
 
     /**
@@ -293,7 +292,7 @@
      * (as a proportion between 0 and 1).
      * <p>
      * Returns <code>Double.NaN</code> if no values have been added.</p>
-     *
+     * 
      * @param v the value to lookup
      * @return the proportion of values equal to v
      * @deprecated replaced by {@link #getPct(Comparable)} as of 2.0
@@ -308,7 +307,7 @@
      * (as a proportion between 0 and 1).
      * <p>
      * Returns <code>Double.NaN</code> if no values have been added.</p>
-     *
+     * 
      * @param v the value to lookup
      * @return the proportion of values equal to v
      */
@@ -317,49 +316,49 @@
         if (sumFreq == 0) {
             return Double.NaN;
         }
-        return (double) getCount(v) / (double) sumFreq;
+        return (double) getCount(v) / (double) sumFreq;        
     }
-
+    
     /**
      * Returns the percentage of values that are equal to v
      * (as a proportion between 0 and 1).
-     *
+     * 
      * @param v the value to lookup
      * @return the proportion of values equal to v
      */
     public double getPct(int v) {
-        return getPct(Long.valueOf(v));
+        return getPct(Long.valueOf(v));       
     }
-
+    
     /**
      * Returns the percentage of values that are equal to v
      * (as a proportion between 0 and 1).
-     *
+     * 
      * @param v the value to lookup
      * @return the proportion of values equal to v
      */
     public double getPct(long v) {
-        return getPct(Long.valueOf(v));
+        return getPct(Long.valueOf(v));         
     }
-
+    
     /**
      * Returns the percentage of values that are equal to v
      * (as a proportion between 0 and 1).
-     *
+     * 
      * @param v the value to lookup
      * @return the proportion of values equal to v
      */
     public double getPct(char v) {
-        return getPct(Character.valueOf(v));
+        return getPct(Character.valueOf(v));         
     }
-
+    
     //-----------------------------------------------------------------------------------------
-
+    
     /**
      * Returns the cumulative frequency of values less than or equal to v.
      * <p>
      * Returns 0 if v is not comparable to the values set.</p>
-     *
+     * 
      * @param v the value to lookup.
      * @return the proportion of values equal to v
      * @deprecated replaced by {@link #getCumFreq(Comparable)} as of 2.0
@@ -373,7 +372,7 @@
      * Returns the cumulative frequency of values less than or equal to v.
      * <p>
      * Returns 0 if v is not comparable to the values set.</p>
-     *
+     * 
      * @param v the value to lookup.
      * @return the proportion of values equal to v
      */
@@ -390,7 +389,7 @@
             c = new NaturalComparator();
         }
         long result = 0;
-
+        
         try {
             Long value = freqTable.get(v);
             if (value != null) {
@@ -403,11 +402,11 @@
         if (c.compare(v, freqTable.firstKey()) < 0) {
             return 0;  // v is comparable, but less than first value
         }
-
+        
         if (c.compare(v, freqTable.lastKey()) >= 0) {
             return getSumFreq();    // v is comparable, but greater than the last value
         }
-
+        
         Iterator<Comparable<?>> values = valuesIterator();
         while (values.hasNext()) {
             Comparable<?> nextValue = values.next();
@@ -419,45 +418,45 @@
         }
         return result;
     }
-
+    
      /**
      * Returns the cumulative frequency of values less than or equal to v.
      * <p>
      * Returns 0 if v is not comparable to the values set.</p>
-     *
+     * 
      * @param v the value to lookup
      * @return the proportion of values equal to v
      */
     public long getCumFreq(int v) {
-        return getCumFreq(Long.valueOf(v));
+        return getCumFreq(Long.valueOf(v));       
     }
-
+    
      /**
      * Returns the cumulative frequency of values less than or equal to v.
      * <p>
      * Returns 0 if v is not comparable to the values set.</p>
-     *
+     * 
      * @param v the value to lookup
      * @return the proportion of values equal to v
      */
     public long getCumFreq(long v) {
-        return getCumFreq(Long.valueOf(v));
+        return getCumFreq(Long.valueOf(v));         
     }
-
+    
     /**
      * Returns the cumulative frequency of values less than or equal to v.
      * <p>
      * Returns 0 if v is not comparable to the values set.</p>
-     *
+     * 
      * @param v the value to lookup
      * @return the proportion of values equal to v
      */
     public long getCumFreq(char v) {
-        return getCumFreq(Character.valueOf(v));
+        return getCumFreq(Character.valueOf(v));         
     }
-
+    
     //----------------------------------------------------------------------------------------------
-
+    
     /**
      * Returns the cumulative percentage of values less than or equal to v
      * (as a proportion between 0 and 1).
@@ -465,7 +464,7 @@
      * Returns <code>Double.NaN</code> if no values have been added.
      * Returns 0 if at least one value has been added, but v is not comparable
      * to the values set.</p>
-     *
+     * 
      * @param v the value to lookup
      * @return the proportion of values less than or equal to v
      * @deprecated replaced by {@link #getCumPct(Comparable)} as of 2.0
@@ -473,7 +472,7 @@
     @Deprecated
     public double getCumPct(Object v) {
         return getCumPct((Comparable<?>) v);
-
+        
     }
 
     /**
@@ -483,7 +482,7 @@
      * Returns <code>Double.NaN</code> if no values have been added.
      * Returns 0 if at least one value has been added, but v is not comparable
      * to the values set.</p>
-     *
+     * 
      * @param v the value to lookup
      * @return the proportion of values less than or equal to v
      */
@@ -492,48 +491,48 @@
         if (sumFreq == 0) {
             return Double.NaN;
         }
-        return (double) getCumFreq(v) / (double) sumFreq;
+        return (double) getCumFreq(v) / (double) sumFreq;        
     }
-
+    
     /**
      * Returns the cumulative percentage of values less than or equal to v
      * (as a proportion between 0 and 1).
      * <p>
      * Returns 0 if v is not comparable to the values set.</p>
-     *
+     * 
      * @param v the value to lookup
      * @return the proportion of values less than or equal to v
      */
     public double getCumPct(int v) {
-        return getCumPct(Long.valueOf(v));
+        return getCumPct(Long.valueOf(v));       
     }
-
+    
     /**
      * Returns the cumulative percentage of values less than or equal to v
      * (as a proportion between 0 and 1).
      * <p>
      * Returns 0 if v is not comparable to the values set.</p>
-     *
+     * 
      * @param v the value to lookup
      * @return the proportion of values less than or equal to v
      */
     public double getCumPct(long v) {
-        return getCumPct(Long.valueOf(v));
+        return getCumPct(Long.valueOf(v));         
     }
-
+    
     /**
      * Returns the cumulative percentage of values less than or equal to v
      * (as a proportion between 0 and 1).
      * <p>
      * Returns 0 if v is not comparable to the values set.</p>
-     *
+     * 
      * @param v the value to lookup
      * @return the proportion of values less than or equal to v
      */
     public double getCumPct(char v) {
-        return getCumPct(Character.valueOf(v));
+        return getCumPct(Character.valueOf(v));         
     }
-
+    
     /**
      * A Comparator that compares comparable objects using the
      * natural order.  Copied from Commons Collections ComparableComparator.
@@ -547,18 +546,18 @@
          * Compare the two {@link Comparable Comparable} arguments.
          * This method is equivalent to:
          * <pre>(({@link Comparable Comparable})o1).{@link Comparable#compareTo compareTo}(o2)</pre>
-         *
-         * @param  o1 the first object
+         * 
+         * @param  o1 the first object 
          * @param  o2 the second object
          * @return  result of comparison
-         * @throws NullPointerException when <i>o1</i> is <code>null</code>,
+         * @throws NullPointerException when <i>o1</i> is <code>null</code>, 
          *         or when <code>((Comparable)o1).compareTo(o2)</code> does
-         * @throws ClassCastException when <i>o1</i> is not a {@link Comparable Comparable},
+         * @throws ClassCastException when <i>o1</i> is not a {@link Comparable Comparable}, 
          *         or when <code>((Comparable)o1).compareTo(o2)</code> does
          */
         @SuppressWarnings("unchecked")
         public int compare(Comparable<T> o1, Comparable<T> o2) {
-            return o1.compareTo((T) o2);
+            return (o1.compareTo((T) o2));
         }
     }
 
diff -r -u buggy/src/test/java/org/apache/commons/math/stat/FrequencyTest.java inducing/src/test/java/org/apache/commons/math/stat/FrequencyTest.java
--- buggy/src/test/java/org/apache/commons/math/stat/FrequencyTest.java	2023-06-12 11:34:51.926685683 +0800
+++ inducing/src/test/java/org/apache/commons/math/stat/FrequencyTest.java	2023-06-12 11:34:52.106688966 +0800
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- *
+ * 
  *      http://www.apache.org/licenses/LICENSE-2.0
- *
+ * 
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -42,22 +42,22 @@
     private int threeI=3;
     private double tolerance = 10E-15;
     private Frequency f = null;
-
+    
     public FrequencyTest(String name) {
         super(name);
     }
 
     @Override
-    public void setUp() {
+    public void setUp() {  
         f = new Frequency();
     }
-
+    
     public static Test suite() {
         TestSuite suite = new TestSuite(FrequencyTest.class);
         suite.setName("Frequency Tests");
         return suite;
     }
-
+    
     /** test freq counts */
     public void testCounts() {
         assertEquals("total count",0,f.getSumFreq());
@@ -75,10 +75,10 @@
         assertEquals("Integer argument cum freq",4, f.getCumFreq(Integer.valueOf(2)));
         assertEquals("five cumulative frequency", 4,  f.getCumFreq(5));
         assertEquals("foo cumulative frequency", 0,  f.getCumFreq("foo"));
-
+        
         f.clear();
         assertEquals("total count",0,f.getSumFreq());
-
+        
         // userguide examples -------------------------------------------------------------------
         f.addValue("one");
         f.addValue("One");
@@ -89,7 +89,7 @@
         assertEquals("z cumulative pct", 1.0,  f.getCumPct("z"), tolerance);
         assertEquals("Ot cumulative pct", 0.25,  f.getCumPct("Ot"), tolerance);
         f.clear();
-
+        
         f = null;
         Frequency f = new Frequency();
         f.addValue(1);
@@ -102,8 +102,8 @@
         assertEquals("0 cum pct", 0.2, f.getCumPct(0), tolerance);
         assertEquals("1 pct", 0.6, f.getPct(Integer.valueOf(1)), tolerance);
         assertEquals("-2 cum pct", 0, f.getCumPct(-2), tolerance);
-        assertEquals("10 cum pct", 1, f.getCumPct(10), tolerance);
-
+        assertEquals("10 cum pct", 1, f.getCumPct(10), tolerance);   
+        
         f = null;
         f = new Frequency(String.CASE_INSENSITIVE_ORDER);
         f.addValue("one");
@@ -129,8 +129,8 @@
         assertEquals(0.25, f.getPct('a'), 0.0);
         assertEquals(0.5, f.getCumPct('b'), 0.0);
         assertEquals(1.0, f.getCumPct('e'), 0.0);
-    }
-
+    }     
+    
     /** test pcts */
     public void testPcts() {
         f.addValue(oneL);
@@ -154,7 +154,7 @@
         assertEquals("zero cum pct",0.0,f.getCumPct(0),tolerance);
         assertEquals("foo cum pct",0,f.getCumPct("foo"),tolerance);
     }
-
+    
     /** test adding incomparable values */
     public void testAdd() {
         char aChar = 'a';
@@ -163,7 +163,7 @@
         f.addValue(aChar);
         f.addValue(bChar);
         try {
-            f.addValue(aString);
+            f.addValue(aString);    
             fail("Expecting IllegalArgumentException");
         } catch (IllegalArgumentException ex) {
             // expected
@@ -178,17 +178,17 @@
         assertEquals("b cum pct",1.0,f.getCumPct(bChar),tolerance);
         assertEquals("a string pct",0.0,f.getPct(aString),tolerance);
         assertEquals("a string cum pct",0.0,f.getCumPct(aString),tolerance);
-
+        
         f = new Frequency();
         f.addValue("One");
         try {
-            f.addValue(new Integer("One"));
+            f.addValue(new Integer("One")); 
             fail("Expecting IllegalArgumentException");
         } catch (IllegalArgumentException ex) {
             // expected
         }
     }
-
+    
     // Check what happens when non-Comparable objects are added
     @SuppressWarnings("deprecation")
     public void testAddNonComparable(){
@@ -216,18 +216,18 @@
         assertTrue("pct, empty table", Double.isNaN(f.getPct(0)));
         assertTrue("pct, empty table", Double.isNaN(f.getPct(Integer.valueOf(0))));
         assertTrue("cum pct, empty table", Double.isNaN(f.getCumPct(0)));
-        assertTrue("cum pct, empty table", Double.isNaN(f.getCumPct(Integer.valueOf(0))));
+        assertTrue("cum pct, empty table", Double.isNaN(f.getCumPct(Integer.valueOf(0))));   
     }
-
+    
     /**
-     * Tests toString()
+     * Tests toString() 
      */
     public void testToString(){
         f.addValue(oneL);
         f.addValue(twoL);
         f.addValue(oneI);
         f.addValue(twoI);
-
+        
         String s = f.toString();
         //System.out.println(s);
         assertNotNull(s);
@@ -235,10 +235,10 @@
         try {
             String line = reader.readLine(); // header line
             assertNotNull(line);
-
+            
             line = reader.readLine(); // one's or two's line
             assertNotNull(line);
-
+                        
             line = reader.readLine(); // one's or two's line
             assertNotNull(line);
 
@@ -246,7 +246,7 @@
             assertNull(line);
         } catch(IOException ex){
             fail(ex.getMessage());
-        }
+        }        
     }
     public void testIntegerValues() {
         Comparable<?> obj1 = null;
@@ -265,9 +265,9 @@
         Iterator<?> it = f.valuesIterator();
         while (it.hasNext()) {
             assertTrue(it.next() instanceof Long);
-        }
+        }     
     }
-
+    
     public void testSerial() {
         f.addValue(oneL);
         f.addValue(twoL);
