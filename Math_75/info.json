{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "data/changesInfo/",
  "timeoutSecond": 300,
  "proj": "Math",
  "id": "75",
  "workingDir": "../bugs/Math_75_buggy",
  "inducingCommit": "18b61a1b18ed7d80ec2bf28588ce95fdd3dddf28",
  "originalCommit": "a701b9aa98d2a3c90d612347a1a6990771cab442",
  "bug_name": "Math_75",
  "derive": "defects4j",
  "original_fixing_commit": "523df0c13719150b1397a6094f410274bfaf1475",
  "buildFiles_changed": false,
  "inducing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/math/stat/Frequency.java",
        "src/java/org/apache/commons/math/stat/Frequency.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "equals",
            "getCumPct",
            "toString",
            "getCumFreq",
            "getCount",
            "Frequency",
            "compare",
            "getSumFreq",
            "getPct"
          ],
          "num": 9
        },
        {
          "qualified_names": [
            "getCumPct",
            "getCount",
            "getCumFreq",
            "Frequency",
            "toString",
            "getSumFreq",
            "getCumPct",
            "compare",
            "getPct",
            "getPct",
            "getCumFreq",
            "getCount"
          ],
          "num": 12
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "30",
            "68",
            "69",
            "83",
            "85",
            "214",
            "216",
            "226",
            "283",
            "343",
            "357",
            "366",
            "368",
            "425",
            "478",
            "496",
            "497",
            "498",
            "528"
          ],
          "num": 19
        },
        {
          "qualified_names": [
            "30",
            "68",
            "69",
            "70",
            "84",
            "86",
            "215",
            "217",
            "228",
            "230",
            "232",
            "233",
            "234",
            "235",
            "236",
            "237",
            "238",
            "239",
            "240",
            "241",
            "242",
            "298",
            "300",
            "302",
            "303",
            "304",
            "305",
            "306",
            "307",
            "308",
            "309",
            "310",
            "311",
            "312",
            "313",
            "314",
            "364",
            "366",
            "368",
            "369",
            "370",
            "371",
            "372",
            "373",
            "374",
            "375",
            "376",
            "377",
            "378",
            "379",
            "380",
            "387",
            "401",
            "410",
            "412",
            "470",
            "472",
            "474",
            "475",
            "476",
            "477",
            "478",
            "479",
            "480",
            "481",
            "482",
            "483",
            "484",
            "485",
            "486",
            "487",
            "488",
            "489",
            "540",
            "558",
            "559",
            "560",
            "591"
          ],
          "num": 78
        }
      ],
      "diff": "diff --git a/src/java/org/apache/commons/math/stat/Frequency.java b/src/java/org/apache/commons/math/stat/Frequency.java\nindex bc5f826..34790ff 100644\n--- a/src/java/org/apache/commons/math/stat/Frequency.java\n+++ b/src/java/org/apache/commons/math/stat/Frequency.java\n@@ -27,7 +27,7 @@\n /** \n  * Maintains a frequency distribution.\n  * \u003cp\u003e\n- * Accepts int, long, char or Object values.  New values added must be \n+ * Accepts int, long, char or Comparable values.  New values added must be \n  * comparable to those that have been added, otherwise the add method will \n  * throw an IllegalArgumentException.\u003c/p\u003e\n  * \u003cp\u003e\n@@ -65,8 +65,9 @@\n      * \n      * @param comparator Comparator used to order values\n      */\n-    public Frequency(Comparator comparator) {\n-        freqTable \u003d new TreeMap\u003cComparable\u003c?\u003e, Long\u003e(comparator);\n+    @SuppressWarnings(\"unchecked\")\n+    public Frequency(Comparator\u003c?\u003e comparator) {\n+        freqTable \u003d new TreeMap\u003cComparable\u003c?\u003e, Long\u003e((Comparator\u003c? super Comparable\u003c?\u003e\u003e) comparator);\n     }\n \n     /**\n@@ -80,9 +81,9 @@\n         NumberFormat nf \u003d NumberFormat.getPercentInstance();\n         StringBuffer outBuffer \u003d new StringBuffer();\n         outBuffer.append(\"Value \\t Freq. \\t Pct. \\t Cum Pct. \\n\");\n-        Iterator\u003c?\u003e iter \u003d freqTable.keySet().iterator();\n+        Iterator\u003cComparable\u003c?\u003e\u003e iter \u003d freqTable.keySet().iterator();\n         while (iter.hasNext()) {\n-            Object value \u003d iter.next();\n+            Comparable\u003c?\u003e value \u003d iter.next();\n             outBuffer.append(value);\n             outBuffer.append(\u0027\\t\u0027);\n             outBuffer.append(getCount(value));\n@@ -211,9 +212,9 @@\n      */\n     public long getSumFreq() {\n         long result \u003d 0;\n-        Iterator\u003c?\u003e iterator \u003d freqTable.values().iterator();\n+        Iterator\u003cLong\u003e iterator \u003d freqTable.values().iterator();\n         while (iterator.hasNext())  {\n-            result +\u003d ((Long) iterator.next()).longValue();\n+            result +\u003d iterator.next().longValue();\n         }\n         return result;\n     }\n@@ -224,8 +225,21 @@\n      * \n      * @param v the value to lookup.\n      * @return the frequency of v.\n+     * @deprecated replaced by {@link #getCount(Comparable)} as of 2.0\n      */\n+    @Deprecated\n     public long getCount(Object v) {\n+        return getCount((Comparable\u003c?\u003e) v);\n+    }\n+\n+    /**\n+     * Returns the number of values \u003d v.\n+     * Returns 0 if the value is not comparable.\n+     * \n+     * @param v the value to lookup.\n+     * @return the frequency of v.\n+     */\n+    public long getCount(Comparable\u003c?\u003e v) {\n         if (v instanceof Integer) {\n             return getCount(((Integer) v).longValue());\n         }\n@@ -281,8 +295,23 @@\n      * \n      * @param v the value to lookup\n      * @return the proportion of values equal to v\n+     * @deprecated replaced by {@link #getPct(Comparable)} as of 2.0\n      */\n+    @Deprecated\n     public double getPct(Object v) {\n+        return getCumPct((Comparable\u003c?\u003e) v);\n+    }\n+\n+    /**\n+     * Returns the percentage of values that are equal to v\n+     * (as a proportion between 0 and 1).\n+     * \u003cp\u003e\n+     * Returns \u003ccode\u003eDouble.NaN\u003c/code\u003e if no values have been added.\u003c/p\u003e\n+     * \n+     * @param v the value to lookup\n+     * @return the proportion of values equal to v\n+     */\n+    public double getPct(Comparable\u003c?\u003e v) {\n         final long sumFreq \u003d getSumFreq();\n         if (sumFreq \u003d\u003d 0) {\n             return Double.NaN;\n@@ -332,15 +361,30 @@\n      * \n      * @param v the value to lookup.\n      * @return the proportion of values equal to v\n+     * @deprecated replaced by {@link #getCumFreq(Comparable)} as of 2.0\n      */\n+    @Deprecated\n     public long getCumFreq(Object v) {\n+        return getCumFreq((Comparable\u003c?\u003e) v);\n+    }\n+\n+    /**\n+     * Returns the cumulative frequency of values less than or equal to v.\n+     * \u003cp\u003e\n+     * Returns 0 if v is not comparable to the values set.\u003c/p\u003e\n+     * \n+     * @param v the value to lookup.\n+     * @return the proportion of values equal to v\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+        public long getCumFreq(Comparable\u003c?\u003e v) {\n         if (getSumFreq() \u003d\u003d 0) {\n             return 0;\n         }\n         if (v instanceof Integer) {\n             return getCumFreq(((Integer) v).longValue());\n         }\n-        Comparator c \u003d freqTable.comparator();\n+        Comparator\u003cComparable\u003c?\u003e\u003e c \u003d (Comparator\u003cComparable\u003c?\u003e\u003e) freqTable.comparator();\n         if (c \u003d\u003d null) {\n             c \u003d new NaturalComparator();\n         }\n@@ -354,7 +398,7 @@\n         } catch (ClassCastException ex) {\n             return result;   // v is not comparable\n         }\n-        \n+\n         if (c.compare(v, freqTable.firstKey()) \u003c 0) {\n             return 0;  // v is comparable, but less than first value\n         }\n@@ -363,9 +407,9 @@\n             return getSumFreq();    // v is comparable, but greater than the last value\n         }\n         \n-        Iterator\u003c?\u003e values \u003d valuesIterator();\n+        Iterator\u003cComparable\u003c?\u003e\u003e values \u003d valuesIterator();\n         while (values.hasNext()) {\n-            Object nextValue \u003d values.next();\n+            Comparable\u003c?\u003e nextValue \u003d values.next();\n             if (c.compare(v, nextValue) \u003e 0) {\n                 result +\u003d getCount(nextValue);\n             } else {\n@@ -423,8 +467,26 @@\n      * \n      * @param v the value to lookup\n      * @return the proportion of values less than or equal to v\n+     * @deprecated replaced by {@link #getCumPct(Comparable)} as of 2.0\n      */\n+    @Deprecated\n     public double getCumPct(Object v) {\n+        return getCumPct((Comparable\u003c?\u003e) v);\n+        \n+    }\n+\n+    /**\n+     * Returns the cumulative percentage of values less than or equal to v\n+     * (as a proportion between 0 and 1).\n+     * \u003cp\u003e\n+     * Returns \u003ccode\u003eDouble.NaN\u003c/code\u003e if no values have been added.\n+     * Returns 0 if at least one value has been added, but v is not comparable\n+     * to the values set.\u003c/p\u003e\n+     * \n+     * @param v the value to lookup\n+     * @return the proportion of values less than or equal to v\n+     */\n+    public double getCumPct(Comparable\u003c?\u003e v) {\n         final long sumFreq \u003d getSumFreq();\n         if (sumFreq \u003d\u003d 0) {\n             return Double.NaN;\n@@ -475,7 +537,7 @@\n      * A Comparator that compares comparable objects using the\n      * natural order.  Copied from Commons Collections ComparableComparator.\n      */\n-    private static class NaturalComparator implements Comparator, Serializable {\n+    private static class NaturalComparator\u003cT extends Comparable\u003cT\u003e\u003e implements Comparator\u003cComparable\u003cT\u003e\u003e, Serializable {\n \n         /** Serializable version identifier */\n         private static final long serialVersionUID \u003d -3852193713161395148L;\n@@ -493,9 +555,9 @@\n          * @throws ClassCastException when \u003ci\u003eo1\u003c/i\u003e is not a {@link Comparable Comparable}, \n          *         or when \u003ccode\u003e((Comparable)o1).compareTo(o2)\u003c/code\u003e does\n          */\n-        @SuppressWarnings(\"unchecked\") // See Javadoc, ClassCast is expected\n-        public int compare(Object o1, Object o2) {\n-            return ((Comparable\u003cObject\u003e)o1).compareTo(o2);\n+        @SuppressWarnings(\"unchecked\")\n+        public int compare(Comparable\u003cT\u003e o1, Comparable\u003cT\u003e o2) {\n+            return (o1.compareTo((T) o2));\n         }\n     }\n \n@@ -526,4 +588,5 @@\n             return false;\n         return true;\n     }\n+\n }\n",
      "operations": [
        {
          "type": "insert-node",
          "from": "",
          "to": "MethodDeclaration [7668,8350]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [9576,10094]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "MethodDeclaration [11573,13185]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "MethodDeclaration [15007,15663]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SingleMemberAnnotation [2507,2537]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MarkerAnnotation [7564,7575]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [7668,7849]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: public [7854,7860]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "PrimitiveType: long [7861,7865]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: getCount [7866,7874]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SingleVariableDeclaration [7875,7890]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Block [7892,8350]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MarkerAnnotation [9471,9482]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MarkerAnnotation [11465,11476]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [11573,11829]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SingleMemberAnnotation [11834,11864]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: public [11873,11879]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "PrimitiveType: long [11880,11884]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: getCumFreq [11885,11895]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SingleVariableDeclaration [11896,11911]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Block [11913,13185]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MarkerAnnotation [14890,14901]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [15007,15432]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: public [15437,15443]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "PrimitiveType: double [15444,15450]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: getCumPct [15451,15460]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SingleVariableDeclaration [15461,15476]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Block [15478,15663]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TypeParameter [17118,17141]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ParameterizedType [17154,17179]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [17329,18168]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "ParameterizedType [2559,2572]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [7488,7551]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ReturnStatement [7621,7656]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [9397,9458]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ReturnStatement [9528,9564]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [11387,11452]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ReturnStatement [11524,11561]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [14813,14877]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ReturnStatement [14950,14986]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "WildcardType [2570,2571]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "ParameterizedType [12092,12117]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "ParameterizedType [3080,3093]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SimpleType [7126,7130]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ParameterizedType [12103,12116]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "CastExpression [12122,12172]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "ParameterizedType [12857,12870]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "CastExpression [2640,2686]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SimpleType [3080,3090]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ParameterizedType [3178,3191]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ParameterizedType [12123,12148]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SimpleType [12857,12867]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ParameterizedType [12946,12959]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ParameterizedType [2641,2674]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [3088,3094]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "WildcardType [7029,7030]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [7136,7140]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "CastExpression [7135,7157]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "ParenthesizedExpression [7134,7158]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [11474,11480]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [15024,15034]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [15184,16063]",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        }
      ]
    }
  ],
  "inducing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [
        "equals"
      ],
      "num": 1
    }
  },
  "trigger_tests": [],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/math/stat/Frequency.java",
        "src/java/org/apache/commons/math/stat/Frequency.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "getPct"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "getPct"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "302"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "302"
          ],
          "num": 1
        }
      ],
      "diff": "diff -u -r data/changesInfo//Math_75/properties/modified_classes/inducing/src/java/org/apache/commons/math/stat/Frequency.java data/changesInfo//Math_75/cleaned/fixing/src/java/org/apache/commons/math/stat/Frequency.java\n--- data/changesInfo//Math_75/properties/modified_classes/inducing/src/java/org/apache/commons/math/stat/Frequency.java\t2023-08-25 14:00:53.311866218 +0800\n+++ data/changesInfo//Math_75/cleaned/fixing/src/java/org/apache/commons/math/stat/Frequency.java\t2023-06-24 16:03:11.848000000 +0800\n@@ -299,7 +299,7 @@\n      */\n     @Deprecated\n     public double getPct(Object v) {\n-        return getCumPct((Comparable\u003c?\u003e) v);\n+        return getPct((Comparable\u003c?\u003e) v);\n     }\n \n     /**\n",
      "operations": [
        {
          "type": "update-node",
          "from": "",
          "to": ""
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  }
}