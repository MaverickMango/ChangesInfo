{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "data/changesInfo/",
  "timeoutSecond": 300,
  "proj": "Jsoup",
  "id": "79",
  "workingDir": "../bugs/Jsoup_79_buggy",
  "inducingCommit": "f71712ba5d28df09c9a5b6e3c8a37f05f5e3372d",
  "originalCommit": "5e386d51f396deec5743ca9cc4e3f0e7559d3956",
  "bug_name": "Jsoup_79",
  "derive": "defects4j",
  "original_fixing_commit": "1028b37a1dfbc5dda7b18cbe692ab168c54fb505",
  "buildFiles_changed": true,
  "inducing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/jsoup/nodes/Attributes.java",
        "src/main/java/org/jsoup/nodes/Attributes.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "put",
            "put",
            "put"
          ],
          "num": 3
        },
        {
          "qualified_names": [
            "put",
            "put",
            "put"
          ],
          "num": 3
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "80",
            "81",
            "82",
            "84",
            "99",
            "100",
            "101",
            "102",
            "103",
            "114"
          ],
          "num": 10
        },
        {
          "qualified_names": [
            "80",
            "81",
            "82",
            "83",
            "85",
            "88",
            "101",
            "102",
            "103",
            "104",
            "105",
            "106",
            "111",
            "117",
            "119",
            "124"
          ],
          "num": 16
        }
      ],
      "diff": "diff --git a/src/main/java/org/jsoup/nodes/Attributes.java b/src/main/java/org/jsoup/nodes/Attributes.java\nindex b014941..ba9a91d 100644\n--- a/src/main/java/org/jsoup/nodes/Attributes.java\n+++ b/src/main/java/org/jsoup/nodes/Attributes.java\n@@ -77,13 +77,15 @@\n     }\n \n     /**\n-     Set a new attribute, or replace an existing one by key.\n-     @param key attribute key\n-     @param value attribute value\n+     * Set a new attribute, or replace an existing one by key.\n+     * @param key attribute key\n+     * @param value attribute value\n+     * @return these attributes, for chaining\n      */\n-    public void put(String key, String value) {\n+    public Attributes put(String key, String value) {\n         Attribute attr \u003d new Attribute(key, value);\n         put(attr);\n+        return this;\n     }\n \n     void putIgnoreCase(String key, String value) {\n@@ -96,26 +98,30 @@\n     }\n \n     /**\n-    Set a new boolean attribute, remove attribute if value is false.\n-    @param key attribute key\n-    @param value attribute value\n-    */\n-    public void put(String key, boolean value) {\n+     * Set a new boolean attribute, remove attribute if value is false.\n+     * @param key attribute key\n+     * @param value attribute value\n+     * @return these attributes, for chaining\n+     */\n+    public Attributes put(String key, boolean value) {\n         if (value)\n             put(new BooleanAttribute(key));\n         else\n             remove(key);\n+        return this;\n     }\n \n     /**\n      Set a new attribute, or replace an existing one by key.\n      @param attribute attribute\n+     @return these attributes, for chaining\n      */\n-    public void put(Attribute attribute) {\n+    public Attributes put(Attribute attribute) {\n         Validate.notNull(attribute);\n         if (attributes \u003d\u003d null)\n              attributes \u003d new LinkedHashMap\u003c\u003e(2);\n         attributes.put(attribute.getKey(), attribute);\n+        return this;\n     }\n \n     /**\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "SimpleType [2590,2600]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SimpleType [3209,3219]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SimpleType [3546,3556]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [2532,2570]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ReturnStatement [2712,2724]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [3151,3189]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ReturnStatement [3362,3374]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [3488,3526]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ReturnStatement [3766,3778]"
        },
        {
          "type": "delete-node",
          "from": "PrimitiveType: void [2538,2542]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "PrimitiveType: void [3074,3078]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "PrimitiveType: void [3340,3344]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/jsoup/nodes/Comment.java",
        "src/main/java/org/jsoup/nodes/Comment.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "getData",
            "Comment"
          ],
          "num": 2
        },
        {
          "qualified_names": [
            "Comment",
            "Comment",
            "getData"
          ],
          "num": 3
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "9",
            "15",
            "18",
            "19",
            "31"
          ],
          "num": 5
        },
        {
          "qualified_names": [
            "9",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23",
            "24",
            "27",
            "39"
          ],
          "num": 13
        }
      ],
      "diff": "diff --git a/src/main/java/org/jsoup/nodes/Comment.java b/src/main/java/org/jsoup/nodes/Comment.java\nindex 40b87c9..e467a39 100644\n--- a/src/main/java/org/jsoup/nodes/Comment.java\n+++ b/src/main/java/org/jsoup/nodes/Comment.java\n@@ -6,17 +6,25 @@\n  A comment node.\n \n  @author Jonathan Hedley, jonathan@hedley.net */\n-public class Comment extends Node {\n+public class Comment extends LeafNode {\n     private static final String COMMENT_KEY \u003d \"comment\";\n \n     /**\n      Create a new comment node.\n      @param data The contents of the comment\n-     @param baseUri base URI\n+     */\n+    public Comment(String data) {\n+        value \u003d data;\n+    }\n+\n+    /**\n+     Create a new comment node.\n+     @param data The contents of the comment\n+     @param baseUri base URI not used. This is a leaf node.\n+     @deprecated\n      */\n     public Comment(String data, String baseUri) {\n-        super(baseUri);\n-        attributes.put(COMMENT_KEY, data);\n+        this(data);\n     }\n \n     public String nodeName() {\n@@ -28,7 +36,7 @@\n      @return comment content\n      */\n     public String getData() {\n-        return attributes.get(COMMENT_KEY);\n+        return coreValue();\n     }\n \n \tvoid outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "SimpleType [155,163]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [228,378]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TagElement [530,541]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ConstructorInvocation [608,619]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ReturnStatement [813,832]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [155,159]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SuperConstructorInvocation [400,415]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [424,458]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ReturnStatement [652,687]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/jsoup/nodes/DataNode.java",
        "src/main/java/org/jsoup/nodes/DataNode.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "getWholeData",
            "setWholeData",
            "DataNode"
          ],
          "num": 3
        },
        {
          "qualified_names": [
            "DataNode",
            "setWholeData",
            "getWholeData",
            "DataNode"
          ],
          "num": 4
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "9",
            "10",
            "15",
            "18",
            "19",
            "31",
            "40"
          ],
          "num": 7
        },
        {
          "qualified_names": [
            "9",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23",
            "26",
            "38",
            "47"
          ],
          "num": 14
        }
      ],
      "diff": "diff --git a/src/main/java/org/jsoup/nodes/DataNode.java b/src/main/java/org/jsoup/nodes/DataNode.java\nindex b58ad35..b71cd4a 100644\n--- a/src/main/java/org/jsoup/nodes/DataNode.java\n+++ b/src/main/java/org/jsoup/nodes/DataNode.java\n@@ -6,17 +6,24 @@\n  A data node, for contents of style, script tags etc, where contents should not show in text().\n \n  @author Jonathan Hedley, jonathan@hedley.net */\n-public class DataNode extends Node{\n-    private static final String DATA_KEY \u003d \"data\";\n+public class DataNode extends LeafNode {\n \n     /**\n      Create a new DataNode.\n      @param data data contents\n-     @param baseUri base URI\n+     */\n+    public DataNode(String data) {\n+        value \u003d data;\n+    }\n+\n+    /**\n+     Create a new DataNode.\n+     @param data data contents\n+     @param baseUri Unused, Leaf Nodes do not hold base URis\n+     @deprecated\n      */\n     public DataNode(String data, String baseUri) {\n-        super(baseUri);\n-        attributes.put(DATA_KEY, data);\n+        this(data);\n     }\n \n     public String nodeName() {\n@@ -28,7 +35,7 @@\n      @return data\n      */\n     public String getWholeData() {\n-        return attributes.get(DATA_KEY);\n+        return coreValue();\n     }\n \n     /**\n@@ -37,7 +44,7 @@\n      * @return this node, for chaining\n      */\n     public DataNode setWholeData(String data) {\n-        attributes.put(DATA_KEY, data);\n+        coreValue(data);\n         return this;\n     }\n \n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "SimpleType [235,243]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [251,384]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TagElement [519,530]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ConstructorInvocation [598,609]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ReturnStatement [855,874]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [1070,1086]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [235,239]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "FieldDeclaration [245,291]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SuperConstructorInvocation [456,471]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [480,511]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ReturnStatement [757,789]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [985,1016]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/jsoup/nodes/Document.java",
        "src/main/java/org/jsoup/nodes/Document.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "normaliseStructure",
            "findFirstElementByTagName",
            "normaliseTextNodes",
            "ensureMetaCharsetElement"
          ],
          "num": 4
        },
        {
          "qualified_names": [
            "normaliseStructure",
            "findFirstElementByTagName",
            "ensureMetaCharsetElement",
            "normaliseTextNodes"
          ],
          "num": 4
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "153",
            "166",
            "184",
            "185",
            "345",
            "352"
          ],
          "num": 6
        },
        {
          "qualified_names": [
            "153",
            "166",
            "184",
            "185",
            "186",
            "346",
            "353"
          ],
          "num": 7
        }
      ],
      "diff": "diff --git a/src/main/java/org/jsoup/nodes/Document.java b/src/main/java/org/jsoup/nodes/Document.java\nindex c6e5700..3c54d4b 100644\n--- a/src/main/java/org/jsoup/nodes/Document.java\n+++ b/src/main/java/org/jsoup/nodes/Document.java\n@@ -150,7 +150,7 @@\n         for (int i \u003d toMove.size()-1; i \u003e\u003d 0; i--) {\n             Node node \u003d toMove.get(i);\n             element.removeChild(node);\n-            body().prependChild(new TextNode(\" \", \"\"));\n+            body().prependChild(new TextNode(\" \"));\n             body().prependChild(node);\n         }\n     }\n@@ -163,7 +163,7 @@\n             List\u003cNode\u003e toMove \u003d new ArrayList\u003c\u003e();\n             for (int i \u003d 1; i \u003c elements.size(); i++) {\n                 Node dupe \u003d elements.get(i);\n-                toMove.addAll(dupe.childNodes);\n+                toMove.addAll(dupe.ensureChildNodes());\n                 dupe.remove();\n             }\n \n@@ -181,8 +181,9 @@\n         if (node.nodeName().equals(tag))\n             return (Element) node;\n         else {\n-            for (Node child: node.childNodes) {\n-                Element found \u003d findFirstElementByTagName(tag, child);\n+            int size \u003d node.childNodeSize();\n+            for (int i \u003d 0; i \u003c size; i++) {\n+                Element found \u003d findFirstElementByTagName(tag, node.childNode(i));\n                 if (found !\u003d null)\n                     return found;\n             }\n@@ -342,14 +343,14 @@\n                             decl.attr(\"version\", \"1.0\");\n                         }\n                     } else {\n-                        decl \u003d new XmlDeclaration(\"xml\", baseUri, false);\n+                        decl \u003d new XmlDeclaration(\"xml\", false);\n                         decl.attr(\"version\", \"1.0\");\n                         decl.attr(\"encoding\", charset().displayName());\n \n                         prependChild(decl);\n                     }\n                 } else {\n-                    XmlDeclaration decl \u003d new XmlDeclaration(\"xml\", baseUri, false);\n+                    XmlDeclaration decl \u003d new XmlDeclaration(\"xml\", false);\n                     decl.attr(\"version\", \"1.0\");\n                     decl.attr(\"encoding\", charset().displayName());\n \n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [6172,6204]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationExpression [6222,6231]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "InfixExpression [6233,6241]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "PostfixExpression [6243,6246]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodInvocation [5584,5607]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodInvocation [6313,6330]"
        },
        {
          "type": "delete-node",
          "from": "StringLiteral: \"\" [4933,4935]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "QualifiedName: dupe.childNodes [5588,5603]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SingleVariableDeclaration [6173,6183]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "QualifiedName: node.childNodes [6185,6200]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: child [6267,6272]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: baseUri [11625,11632]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: baseUri [11927,11934]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/jsoup/nodes/DocumentType.java",
        "src/main/java/org/jsoup/nodes/DocumentType.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "DocumentType",
            "DocumentType"
          ],
          "num": 2
        },
        {
          "qualified_names": [
            "setPubSysKey",
            "DocumentType",
            "DocumentType",
            "DocumentType"
          ],
          "num": 4
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "3",
            "4",
            "6",
            "11",
            "25",
            "27",
            "28",
            "29",
            "43",
            "46",
            "47",
            "54"
          ],
          "num": 12
        },
        {
          "qualified_names": [
            "4",
            "5",
            "6",
            "11",
            "12",
            "27",
            "41",
            "42",
            "43",
            "44",
            "45",
            "46",
            "47",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57",
            "58",
            "59",
            "69",
            "70",
            "71",
            "72"
          ],
          "num": 29
        }
      ],
      "diff": "diff --git a/src/main/java/org/jsoup/nodes/DocumentType.java b/src/main/java/org/jsoup/nodes/DocumentType.java\nindex 4e7730b..7d5d42f 100644\n--- a/src/main/java/org/jsoup/nodes/DocumentType.java\n+++ b/src/main/java/org/jsoup/nodes/DocumentType.java\n@@ -1,14 +1,15 @@\n package org.jsoup.nodes;\n \n-import java.io.IOException;\n-\n import org.jsoup.helper.StringUtil;\n-import org.jsoup.nodes.Document.OutputSettings.*;\n+import org.jsoup.nodes.Document.OutputSettings.Syntax;\n+\n+import java.io.IOException;\n \n /**\n  * A {@code \u003c!DOCTYPE\u003e} node.\n  */\n-public class DocumentType extends Node {\n+public class DocumentType extends LeafNode {\n+    // todo needs a bit of a chunky cleanup. this level of detail isn\u0027t needed\n     public static final String PUBLIC_KEY \u003d \"PUBLIC\";\n     public static final String SYSTEM_KEY \u003d \"SYSTEM\";\n     private static final String NAME \u003d \"name\";\n@@ -22,11 +23,8 @@\n      * @param name the doctype\u0027s name\n      * @param publicId the doctype\u0027s public ID\n      * @param systemId the doctype\u0027s system ID\n-     * @param baseUri the doctype\u0027s base URI\n      */\n-    public DocumentType(String name, String publicId, String systemId, String baseUri) {\n-        super(baseUri);\n-\n+    public DocumentType(String name, String publicId, String systemId) {\n         attr(NAME, name);\n         attr(PUBLIC_ID, publicId);\n         if (has(PUBLIC_ID)) {\n@@ -40,11 +38,27 @@\n      * @param name the doctype\u0027s name\n      * @param publicId the doctype\u0027s public ID\n      * @param systemId the doctype\u0027s system ID\n-     * @param baseUri the doctype\u0027s base URI\n+     * @param baseUri unused\n+     * @deprecated\n+     */\n+    public DocumentType(String name, String publicId, String systemId, String baseUri) {\n+        attr(NAME, name);\n+        attr(PUBLIC_ID, publicId);\n+        if (has(PUBLIC_ID)) {\n+            attr(PUB_SYS_KEY, PUBLIC_KEY);\n+        }\n+        attr(SYSTEM_ID, systemId);\n+    }\n+\n+    /**\n+     * Create a new doctype element.\n+     * @param name the doctype\u0027s name\n+     * @param publicId the doctype\u0027s public ID\n+     * @param systemId the doctype\u0027s system ID\n+     * @param baseUri unused\n+     * @deprecated\n      */\n     public DocumentType(String name, String pubSysKey, String publicId, String systemId, String baseUri) {\n-        super(baseUri);\n-\n         attr(NAME, name);\n         if (pubSysKey !\u003d null) {\n             attr(PUB_SYS_KEY, pubSysKey);\n@@ -52,6 +66,10 @@\n         attr(PUBLIC_ID, publicId);\n         attr(SYSTEM_ID, systemId);\n     }\n+    public void setPubSysKey(String value) {\n+        if (value !\u003d null)\n+            attr(PUB_SYS_KEY, value);\n+    }\n \n     @Override\n     public String nodeName() {\n",
      "operations": [
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SimpleType [219,227]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [711,1149]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [2190,2301]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TagElement [1364,1375]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TagElement [1872,1883]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [214,218]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SuperConstructorInvocation [946,961]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SuperConstructorInvocation [1494,1509]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/jsoup/nodes/Element.java",
        "src/main/java/org/jsoup/nodes/Element.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "attr",
            "appendText",
            "classNames",
            "prependText",
            "outerHtmlHead",
            "id",
            "text",
            "hasClass",
            "clone",
            "Element",
            "dataset",
            "Element"
          ],
          "num": 12
        },
        {
          "qualified_names": [
            "hasAttributes",
            "attr",
            "appendText",
            "doClone",
            "outerHtmlHead",
            "prependText",
            "NodeList",
            "onContentsChanged",
            "doSetBaseUri",
            "ensureChildNodes",
            "hasClass",
            "attributes",
            "dataset",
            "Element",
            "baseUri",
            "id",
            "Element",
            "childNodeSize",
            "text",
            "classNames"
          ],
          "num": 20
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "2",
            "42",
            "43",
            "63",
            "64",
            "65",
            "78",
            "133",
            "158",
            "176",
            "461",
            "474",
            "1055",
            "1138",
            "1149",
            "1275",
            "1346"
          ],
          "num": 17
        },
        {
          "qualified_names": [
            "3",
            "41",
            "42",
            "45",
            "46",
            "47",
            "67",
            "68",
            "69",
            "70",
            "71",
            "84",
            "85",
            "86",
            "87",
            "88",
            "89",
            "90",
            "91",
            "92",
            "93",
            "94",
            "95",
            "96",
            "97",
            "98",
            "99",
            "100",
            "101",
            "102",
            "103",
            "104",
            "105",
            "106",
            "107",
            "108",
            "109",
            "110",
            "111",
            "112",
            "113",
            "114",
            "115",
            "116",
            "117",
            "118",
            "173",
            "198",
            "216",
            "501",
            "514",
            "1095",
            "1178",
            "1189",
            "1315",
            "1316",
            "1388",
            "1389",
            "1390",
            "1391",
            "1392",
            "1393",
            "1394",
            "1395",
            "1396",
            "1397",
            "1398",
            "1399",
            "1400",
            "1401",
            "1402",
            "1403",
            "1404",
            "1405",
            "1406",
            "1407",
            "1408",
            "1409"
          ],
          "num": 78
        }
      ],
      "diff": "diff --git a/src/main/java/org/jsoup/nodes/Element.java b/src/main/java/org/jsoup/nodes/Element.java\nindex 3a9154e..266bd14 100644\n--- a/src/main/java/org/jsoup/nodes/Element.java\n+++ b/src/main/java/org/jsoup/nodes/Element.java\n@@ -1,5 +1,6 @@\n package org.jsoup.nodes;\n \n+import org.jsoup.helper.ChangeNotifyingArrayList;\n import org.jsoup.helper.StringUtil;\n import org.jsoup.helper.Validate;\n import org.jsoup.parser.ParseSettings;\n@@ -37,10 +38,13 @@\n  * @author Jonathan Hedley, jonathan@hedley.net\n  */\n public class Element extends Node {\n+    private static final List\u003cNode\u003e EMPTY_NODES \u003d Collections.emptyList();\n+    private static final Pattern classSplit \u003d Pattern.compile(\"\\\\s+\");\n     private Tag tag;\n     private WeakReference\u003cList\u003cElement\u003e\u003e shadowChildrenRef; // points to child elements shadowed from node children\n-\n-    private static final Pattern classSplit \u003d Pattern.compile(\"\\\\s+\");\n+    List\u003cNode\u003e childNodes;\n+    private Attributes attributes;\n+    private String baseUri;\n \n     /**\n      * Create a new, standalone element.\n@@ -60,9 +64,11 @@\n      * @see #appendElement(String)\n      */\n     public Element(Tag tag, String baseUri, Attributes attributes) {\n-        super(baseUri, attributes);\n-        \n-        Validate.notNull(tag);    \n+        Validate.notNull(tag);\n+        Validate.notNull(baseUri);\n+        childNodes \u003d EMPTY_NODES;\n+        this.baseUri \u003d baseUri;\n+        this.attributes \u003d attributes;\n         this.tag \u003d tag;\n     }\n     \n@@ -75,7 +81,41 @@\n      * @see Tag#valueOf(String, ParseSettings)\n      */\n     public Element(Tag tag, String baseUri) {\n-        this(tag, baseUri, new Attributes());\n+        this(tag, baseUri, null);\n+    }\n+\n+    protected List\u003cNode\u003e ensureChildNodes() {\n+        if (childNodes \u003d\u003d EMPTY_NODES) {\n+            childNodes \u003d new NodeList(4);\n+        }\n+        return childNodes;\n+    }\n+\n+    @Override\n+    protected boolean hasAttributes() {\n+        return attributes !\u003d null;\n+    }\n+\n+    @Override\n+    public Attributes attributes() {\n+        if (!hasAttributes())\n+            attributes \u003d new Attributes();\n+        return attributes;\n+    }\n+\n+    @Override\n+    public String baseUri() {\n+        return baseUri;\n+    }\n+\n+    @Override\n+    protected void doSetBaseUri(String baseUri) {\n+        this.baseUri \u003d baseUri;\n+    }\n+\n+    @Override\n+    public int childNodeSize() {\n+        return childNodes.size();\n     }\n \n     @Override\n@@ -130,7 +170,7 @@\n      * @return The id attribute, if present, or an empty string if not.\n      */\n     public String id() {\n-        return attributes.getIgnoreCase(\"id\");\n+        return attributes().getIgnoreCase(\"id\");\n     }\n \n     /**\n@@ -155,7 +195,7 @@\n      * @return this element\n      */\n     public Element attr(String attributeKey, boolean attributeValue) {\n-        attributes.put(attributeKey, attributeValue);\n+        attributes().put(attributeKey, attributeValue);\n         return this;\n     }\n \n@@ -173,7 +213,7 @@\n      * @return a map of {@code key\u003dvalue} custom data attributes.\n      */\n     public Map\u003cString, String\u003e dataset() {\n-        return attributes.dataset();\n+        return attributes().dataset();\n     }\n \n     @Override\n@@ -458,7 +498,7 @@\n      */\n     public Element appendText(String text) {\n         Validate.notNull(text);\n-        TextNode node \u003d new TextNode(text, baseUri());\n+        TextNode node \u003d new TextNode(text);\n         appendChild(node);\n         return this;\n     }\n@@ -471,7 +511,7 @@\n      */\n     public Element prependText(String text) {\n         Validate.notNull(text);\n-        TextNode node \u003d new TextNode(text, baseUri());\n+        TextNode node \u003d new TextNode(text);\n         prependChild(node);\n         return this;\n     }\n@@ -1052,7 +1092,7 @@\n         Validate.notNull(text);\n \n         empty();\n-        TextNode textNode \u003d new TextNode(text, baseUri);\n+        TextNode textNode \u003d new TextNode(text);\n         appendChild(textNode);\n \n         return this;\n@@ -1135,7 +1175,7 @@\n      */\n     public Element classNames(Set\u003cString\u003e classNames) {\n         Validate.notNull(classNames);\n-        attributes.put(\"class\", StringUtil.join(classNames, \" \"));\n+        attributes().put(\"class\", StringUtil.join(classNames, \" \"));\n         return this;\n     }\n \n@@ -1146,7 +1186,7 @@\n      */\n     // performance sensitive\n     public boolean hasClass(String className) {\n-        final String classAttr \u003d attributes.getIgnoreCase(\"class\");\n+        final String classAttr \u003d attributes().getIgnoreCase(\"class\");\n         final int len \u003d classAttr.length();\n         final int wantLen \u003d className.length();\n \n@@ -1272,7 +1312,8 @@\n         accum\n                 .append(\"\u003c\")\n                 .append(tagName());\n-        attributes.html(accum, out);\n+        if (hasAttributes())\n+            attributes.html(accum, out);\n \n         // selfclosing includes unknown tags, isEmpty defines tags that are always empty\n         if (childNodes.isEmpty() \u0026\u0026 tag.isSelfClosing()) {\n@@ -1344,4 +1385,26 @@\n     public Element clone() {\n         return (Element) super.clone();\n     }\n+\n+    @Override\n+    protected Element doClone(Node parent) {\n+        Element clone \u003d (Element) super.doClone(parent);\n+        clone.attributes \u003d attributes !\u003d null ? attributes.clone() : null;\n+        clone.baseUri \u003d baseUri;\n+        clone.childNodes \u003d new NodeList(childNodes.size());\n+\n+        clone.childNodes.addAll(childNodes);\n+\n+        return clone;\n+    }\n+\n+    private final class NodeList extends ChangeNotifyingArrayList\u003cNode\u003e {\n+        NodeList(int initialCapacity) {\n+            super(initialCapacity);\n+        }\n+\n+        public void onContentsChanged() {\n+            nodelistChanged();\n+        }\n+    }\n }\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "ImportDeclaration [26,75]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [2718,2885]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [2891,2981]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [2987,3139]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [3145,3214]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [3220,3317]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [3323,3405]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [49714,50068]"
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: private [1531,1538]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: private [1566,1573]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [2164,2190]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [2199,2224]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [2233,2256]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [2265,2294]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "IfStatement [47412,47473]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "NullLiteral [2700,2704]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodInvocation [47416,47431]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "MethodInvocation [4786,4798]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "MethodInvocation [5707,5719]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "MethodInvocation [6530,6542]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "MethodInvocation [43111,43123]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "MethodInvocation [43482,43494]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SuperConstructorInvocation [1919,1946]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ClassInstanceCreation [2396,2412]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodInvocation [16281,16290]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodInvocation [16628,16637]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: baseUri [39003,39010]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/jsoup/nodes/Node.java",
        "src/main/java/org/jsoup/nodes/Node.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "siblingNodes",
            "attr",
            "absUrl",
            "addChildren",
            "addSiblingHtml",
            "nextSibling",
            "NodeList",
            "setBaseUri",
            "childNodeSize",
            "ensureChildNodes",
            "clone",
            "childNodes",
            "childNode",
            "childNodesCopy",
            "doClone",
            "Node",
            "Node",
            "hasAttr",
            "clearAttributes",
            "removeAttr",
            "previousSibling",
            "childNodesAsArray",
            "baseUri",
            "replaceChild",
            "ownerDocument",
            "unwrap",
            "removeChild",
            "Node",
            "attributes",
            "addChildren",
            "onContentsChanged",
            "attr"
          ],
          "num": 32
        },
        {
          "qualified_names": [
            "ensureChildNodes",
            "childNodesAsArray",
            "addChildren",
            "nextSibling",
            "addSiblingHtml",
            "replaceChild",
            "childNodeSize",
            "attr",
            "head",
            "clone",
            "unwrap",
            "attr",
            "baseUri",
            "doSetBaseUri",
            "childNodesCopy",
            "hasParent",
            "removeChild",
            "attributes",
            "ownerDocument",
            "addChildren",
            "childNode",
            "hasAttributes",
            "reindexChildren",
            "siblingNodes",
            "previousSibling",
            "childNodes",
            "removeAttr",
            "hasAttr",
            "clearAttributes",
            "setBaseUri",
            "absUrl"
          ],
          "num": 31
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "4",
            "25",
            "27",
            "28",
            "29",
            "33",
            "34",
            "35",
            "36",
            "37",
            "38",
            "39",
            "40",
            "41",
            "42",
            "43",
            "44",
            "45",
            "46",
            "47",
            "48",
            "49",
            "50",
            "54",
            "55",
            "64",
            "72",
            "82",
            "94",
            "95",
            "96",
            "106",
            "120",
            "123",
            "133",
            "142",
            "154",
            "155",
            "156",
            "167",
            "191",
            "204",
            "214",
            "223",
            "232",
            "233",
            "243",
            "244",
            "245",
            "246",
            "248",
            "277",
            "279",
            "286",
            "349",
            "395",
            "402",
            "421",
            "444",
            "446",
            "455",
            "464",
            "465",
            "466",
            "472",
            "476",
            "480",
            "481",
            "482",
            "483",
            "484",
            "485",
            "486",
            "492",
            "498",
            "508",
            "523",
            "524",
            "541",
            "555",
            "611",
            "659",
            "665",
            "666",
            "667",
            "690",
            "691",
            "692",
            "693",
            "694",
            "726",
            "727",
            "728",
            "729",
            "730",
            "731",
            "732",
            "733",
            "734",
            "735"
          ],
          "num": 100
        },
        {
          "qualified_names": [
            "3",
            "24",
            "41",
            "42",
            "43",
            "44",
            "45",
            "46",
            "47",
            "48",
            "49",
            "57",
            "66",
            "67",
            "69",
            "81",
            "91",
            "105",
            "108",
            "118",
            "127",
            "139",
            "140",
            "141",
            "142",
            "143",
            "144",
            "145",
            "156",
            "180",
            "193",
            "197",
            "198",
            "205",
            "214",
            "223",
            "224",
            "225",
            "235",
            "236",
            "238",
            "267",
            "269",
            "276",
            "339",
            "385",
            "392",
            "411",
            "434",
            "436",
            "445",
            "452",
            "453",
            "456",
            "457",
            "463",
            "464",
            "468",
            "472",
            "478",
            "480",
            "481",
            "486",
            "496",
            "511",
            "512",
            "529",
            "543",
            "599",
            "647",
            "653",
            "654",
            "655",
            "656",
            "657",
            "699",
            "740"
          ],
          "num": 77
        }
      ],
      "diff": "diff --git a/src/main/java/org/jsoup/nodes/Node.java b/src/main/java/org/jsoup/nodes/Node.java\nindex b82710e..9866e43 100644\n--- a/src/main/java/org/jsoup/nodes/Node.java\n+++ b/src/main/java/org/jsoup/nodes/Node.java\n@@ -1,7 +1,6 @@\n package org.jsoup.nodes;\n \n import org.jsoup.SerializationException;\n-import org.jsoup.helper.ChangeNotifyingArrayList;\n import org.jsoup.helper.StringUtil;\n import org.jsoup.helper.Validate;\n import org.jsoup.parser.Parser;\n@@ -22,37 +21,14 @@\n \n  @author Jonathan Hedley, jonathan@hedley.net */\n public abstract class Node implements Cloneable {\n-    private static final List\u003cNode\u003e EMPTY_NODES \u003d Collections.emptyList();\n+    static final String EmptyString \u003d \"\";\n     Node parentNode;\n-    List\u003cNode\u003e childNodes;\n-    Attributes attributes;\n-    String baseUri;\n     int siblingIndex;\n \n     /**\n-     Create a new Node.\n-     @param baseUri base URI\n-     @param attributes attributes (not null, but may be empty)\n-     */\n-    protected Node(String baseUri, Attributes attributes) {\n-        Validate.notNull(baseUri);\n-        Validate.notNull(attributes);\n-        \n-        childNodes \u003d EMPTY_NODES;\n-        this.baseUri \u003d baseUri.trim();\n-        this.attributes \u003d attributes;\n-    }\n-\n-    protected Node(String baseUri) {\n-        this(baseUri, new Attributes());\n-    }\n-\n-    /**\n      * Default constructor. Doesn\u0027t setup base uri, children, or attributes; use with caution.\n      */\n     protected Node() {\n-        childNodes \u003d EMPTY_NODES;\n-        attributes \u003d null;\n     }\n \n     /**\n@@ -62,6 +38,15 @@\n     public abstract String nodeName();\n \n     /**\n+     * Check if this Node has an actual Attributes object.\n+     */\n+    protected abstract boolean hasAttributes();\n+\n+    public boolean hasParent() {\n+        return parentNode !\u003d null;\n+    }\n+\n+    /**\n      * Get an attribute\u0027s value by its key. \u003cb\u003eCase insensitive\u003c/b\u003e\n      * \u003cp\u003e\n      * To get an absolute URL from an attribute that may be a relative URL, prefix the key with \u003ccode\u003e\u003cb\u003eabs\u003c/b\u003e\u003c/code\u003e,\n@@ -69,7 +54,7 @@\n      * \u003c/p\u003e\n      * E.g.:\n      * \u003cblockquote\u003e\u003ccode\u003eString url \u003d a.attr(\"abs:href\");\u003c/code\u003e\u003c/blockquote\u003e\n-     * \n+     *\n      * @param attributeKey The attribute key.\n      * @return The attribute, or empty string if not present (to avoid nulls).\n      * @see #attributes()\n@@ -78,8 +63,10 @@\n      */\n     public String attr(String attributeKey) {\n         Validate.notNull(attributeKey);\n+        if (!hasAttributes())\n+            return EmptyString;\n \n-        String val \u003d attributes.getIgnoreCase(attributeKey);\n+        String val \u003d attributes().getIgnoreCase(attributeKey);\n         if (val.length() \u003e 0)\n             return val;\n         else if (lowerCase(attributeKey).startsWith(\"abs:\"))\n@@ -91,9 +78,7 @@\n      * Get all of the element\u0027s attributes.\n      * @return attributes (which implements iterable, in same order as presented in original HTML).\n      */\n-    public Attributes attributes() {\n-        return attributes;\n-    }\n+    public abstract Attributes attributes();\n \n     /**\n      * Set an attribute (key\u003dvalue). If the attribute already exists, it is replaced. The attribute key comparison is\n@@ -103,7 +88,7 @@\n      * @return this (for chaining)\n      */\n     public Node attr(String attributeKey, String attributeValue) {\n-        attributes.putIgnoreCase(attributeKey, attributeValue);\n+        attributes().putIgnoreCase(attributeKey, attributeValue);\n         return this;\n     }\n \n@@ -117,10 +102,10 @@\n \n         if (attributeKey.startsWith(\"abs:\")) {\n             String key \u003d attributeKey.substring(\"abs:\".length());\n-            if (attributes.hasKeyIgnoreCase(key) \u0026\u0026 !absUrl(key).equals(\"\"))\n+            if (attributes().hasKeyIgnoreCase(key) \u0026\u0026 !absUrl(key).equals(\"\"))\n                 return true;\n         }\n-        return attributes.hasKeyIgnoreCase(attributeKey);\n+        return attributes().hasKeyIgnoreCase(attributeKey);\n     }\n \n     /**\n@@ -130,7 +115,7 @@\n      */\n     public Node removeAttr(String attributeKey) {\n         Validate.notNull(attributeKey);\n-        attributes.removeIgnoreCase(attributeKey);\n+        attributes().removeIgnoreCase(attributeKey);\n         return this;\n     }\n \n@@ -139,7 +124,7 @@\n      * @return this, for chaining\n      */\n     public Node clearAttributes() {\n-        Iterator\u003cAttribute\u003e it \u003d attributes.iterator();\n+        Iterator\u003cAttribute\u003e it \u003d attributes().iterator();\n         while (it.hasNext()) {\n             it.next();\n             it.remove();\n@@ -151,9 +136,13 @@\n      Get the base URI of this node.\n      @return base URI\n      */\n-    public String baseUri() {\n-        return baseUri;\n-    }\n+    public abstract String baseUri();\n+\n+    /**\n+     * Set the baseUri for just this node (not its descendants), if this Node tracks base URIs.\n+     * @param baseUri\n+     */\n+    protected abstract void doSetBaseUri(String baseUri);\n \n     /**\n      Update the base URI of this node and all of its descendants.\n@@ -164,7 +153,7 @@\n \n         traverse(new NodeVisitor() {\n             public void head(Node node, int depth) {\n-                node.baseUri \u003d baseUri;\n+                node.doSetBaseUri(baseUri);\n             }\n \n             public void tail(Node node, int depth) {\n@@ -188,7 +177,7 @@\n      * As an alternate, you can use the {@link #attr} method with the \u003ccode\u003eabs:\u003c/code\u003e prefix, e.g.:\n      * \u003ccode\u003eString absUrl \u003d linkEl.attr(\"abs:href\");\u003c/code\u003e\n      * \u003c/p\u003e\n-     * \n+     *\n      * @param attributeKey The attribute key\n      * @return An absolute URL if one could be made, or an empty string (not null) if the attribute was missing or\n      * could not be made successfully into a URL.\n@@ -201,17 +190,19 @@\n         if (!hasAttr(attributeKey)) {\n             return \"\"; // nothing to make absolute with\n         } else {\n-            return StringUtil.resolve(baseUri, attr(attributeKey));\n+            return StringUtil.resolve(baseUri(), attr(attributeKey));\n         }\n     }\n \n+    protected abstract List\u003cNode\u003e ensureChildNodes();\n+\n     /**\n      Get a child node by its 0-based index.\n      @param index index of child node\n      @return the child node at this index. Throws a {@code IndexOutOfBoundsException} if the index is out of bounds.\n      */\n     public Node childNode(int index) {\n-        return childNodes.get(index);\n+        return ensureChildNodes().get(index);\n     }\n \n     /**\n@@ -220,7 +211,7 @@\n      @return list of children. If no children, returns an empty list.\n      */\n     public List\u003cNode\u003e childNodes() {\n-        return Collections.unmodifiableList(childNodes);\n+        return Collections.unmodifiableList(ensureChildNodes());\n     }\n \n     /**\n@@ -229,8 +220,9 @@\n      * @return a deep copy of this node\u0027s children\n      */\n     public List\u003cNode\u003e childNodesCopy() {\n-        List\u003cNode\u003e children \u003d new ArrayList\u003c\u003e(childNodes.size());\n-        for (Node node : childNodes) {\n+        final List\u003cNode\u003e nodes \u003d ensureChildNodes();\n+        final ArrayList\u003cNode\u003e children \u003d new ArrayList\u003c\u003e(nodes.size());\n+        for (Node node : nodes) {\n             children.add(node.clone());\n         }\n         return children;\n@@ -240,12 +232,10 @@\n      * Get the number of child nodes that this node holds.\n      * @return the number of child nodes that this node holds.\n      */\n-    public final int childNodeSize() {\n-        return childNodes.size();\n-    }\n-    \n+    public abstract int childNodeSize();\n+\n     protected Node[] childNodesAsArray() {\n-        return childNodes.toArray(new Node[childNodeSize()]);\n+        return ensureChildNodes().toArray(new Node[childNodeSize()]);\n     }\n \n     /**\n@@ -274,16 +264,16 @@\n             node \u003d node.parentNode;\n         return node;\n     }\n-    \n+\n     /**\n-     * Gets the Document associated with this Node. \n+     * Gets the Document associated with this Node.\n      * @return the Document associated with this Node, or null if there is no such Document.\n      */\n     public Document ownerDocument() {\n         Node root \u003d root();\n         return (root instanceof Document) ? (Document) root : null;\n     }\n-    \n+\n     /**\n      * Remove (delete) this node from the DOM tree. If this node has children, they are also removed.\n      */\n@@ -346,7 +336,7 @@\n         Validate.notNull(html);\n         Validate.notNull(parentNode);\n \n-        Element context \u003d parent() instanceof Element ? (Element) parent() : null;        \n+        Element context \u003d parent() instanceof Element ? (Element) parent() : null;\n         List\u003cNode\u003e nodes \u003d Parser.parseFragment(html, context, baseUri());\n         parentNode.addChildren(index, nodes.toArray(new Node[nodes.size()]));\n     }\n@@ -392,14 +382,14 @@\n      * Calling {@code element.unwrap()} on the {@code span} element will result in the html:\n      * \u003cp\u003e{@code \u003cdiv\u003eOne Two \u003cb\u003eThree\u003c/b\u003e\u003c/div\u003e}\u003c/p\u003e\n      * and the {@code \"Two \"} {@link TextNode} being returned.\n-     * \n+     *\n      * @return the first child of this node, after the node has been unwrapped. Null if the node had no children.\n      * @see #remove()\n      * @see #wrap(String)\n      */\n     public Node unwrap() {\n         Validate.notNull(parentNode);\n-\n+        final List\u003cNode\u003e childNodes \u003d ensureChildNodes();\n         Node firstChild \u003d childNodes.size() \u003e 0 ? childNodes.get(0) : null;\n         parentNode.addChildren(siblingIndex, this.childNodesAsArray());\n         this.remove();\n@@ -418,7 +408,7 @@\n     void nodelistChanged() {\n         // Element overrides this to clear its shadow children elements\n     }\n-    \n+\n     /**\n      * Replace this node in the DOM with the supplied node.\n      * @param in the node that will will replace the existing node.\n@@ -441,9 +431,9 @@\n         Validate.notNull(in);\n         if (in.parentNode !\u003d null)\n             in.parentNode.removeChild(in);\n-        \n+\n         final int index \u003d out.siblingIndex;\n-        childNodes.set(index, in);\n+        ensureChildNodes().set(index, in);\n         in.parentNode \u003d this;\n         in.setSiblingIndex(index);\n         out.parentNode \u003d null;\n@@ -452,50 +442,48 @@\n     protected void removeChild(Node out) {\n         Validate.isTrue(out.parentNode \u003d\u003d this);\n         final int index \u003d out.siblingIndex;\n-        childNodes.remove(index);\n+        ensureChildNodes().remove(index);\n         reindexChildren(index);\n         out.parentNode \u003d null;\n     }\n \n     protected void addChildren(Node... children) {\n         //most used. short circuit addChildren(int), which hits reindex children and array copy\n+        final List\u003cNode\u003e nodes \u003d ensureChildNodes();\n+\n         for (Node child: children) {\n             reparentChild(child);\n-            ensureChildNodes();\n-            childNodes.add(child);\n-            child.setSiblingIndex(childNodes.size()-1);\n+            nodes.add(child);\n+            child.setSiblingIndex(nodes.size()-1);\n         }\n     }\n \n     protected void addChildren(int index, Node... children) {\n         Validate.noNullElements(children);\n-        ensureChildNodes();\n+        final List\u003cNode\u003e nodes \u003d ensureChildNodes();\n+\n         for (int i \u003d children.length - 1; i \u003e\u003d 0; i--) {\n             Node in \u003d children[i];\n             reparentChild(in);\n-            childNodes.add(index, in);\n+            nodes.add(index, in);\n             reindexChildren(index);\n         }\n     }\n-\n-    protected void ensureChildNodes() {\n-        if (childNodes \u003d\u003d EMPTY_NODES) {\n-            childNodes \u003d new NodeList(4);\n-        }\n-    }\n-\n+    \n     protected void reparentChild(Node child) {\n         if (child.parentNode !\u003d null)\n             child.parentNode.removeChild(child);\n         child.setParentNode(this);\n     }\n-    \n+\n     private void reindexChildren(int start) {\n+        final List\u003cNode\u003e childNodes \u003d ensureChildNodes();\n+\n         for (int i \u003d start; i \u003c childNodes.size(); i++) {\n             childNodes.get(i).setSiblingIndex(i);\n         }\n     }\n-    \n+\n     /**\n      Retrieves this node\u0027s sibling nodes. Similar to {@link #childNodes()  node.parent.childNodes()}, but does not\n      include this node (a node is not a sibling of itself).\n@@ -505,7 +493,7 @@\n         if (parentNode \u003d\u003d null)\n             return Collections.emptyList();\n \n-        List\u003cNode\u003e nodes \u003d parentNode.childNodes;\n+        List\u003cNode\u003e nodes \u003d parentNode.ensureChildNodes();\n         List\u003cNode\u003e siblings \u003d new ArrayList\u003c\u003e(nodes.size() - 1);\n         for (Node node: nodes)\n             if (node !\u003d this)\n@@ -520,8 +508,8 @@\n     public Node nextSibling() {\n         if (parentNode \u003d\u003d null)\n             return null; // root\n-        \n-        final List\u003cNode\u003e siblings \u003d parentNode.childNodes;\n+\n+        final List\u003cNode\u003e siblings \u003d parentNode.ensureChildNodes();\n         final int index \u003d siblingIndex+1;\n         if (siblings.size() \u003e index)\n             return siblings.get(index);\n@@ -538,7 +526,7 @@\n             return null; // root\n \n         if (siblingIndex \u003e 0)\n-            return parentNode.childNodes.get(siblingIndex-1);\n+            return parentNode.ensureChildNodes().get(siblingIndex-1);\n         else\n             return null;\n     }\n@@ -552,7 +540,7 @@\n     public int siblingIndex() {\n         return siblingIndex;\n     }\n-    \n+\n     protected void setSiblingIndex(int siblingIndex) {\n         this.siblingIndex \u003d siblingIndex;\n     }\n@@ -608,7 +596,7 @@\n         outerHtml(appendable);\n         return appendable;\n     }\n-    \n+\n \tpublic String toString() {\n         return outerHtml();\n     }\n@@ -656,15 +644,17 @@\n         Node thisClone \u003d doClone(null); // splits for orphan\n \n         // Queue up nodes that need their children cloned (BFS).\n-        LinkedList\u003cNode\u003e nodesToProcess \u003d new LinkedList\u003c\u003e();\n+        final LinkedList\u003cNode\u003e nodesToProcess \u003d new LinkedList\u003c\u003e();\n         nodesToProcess.add(thisClone);\n \n         while (!nodesToProcess.isEmpty()) {\n             Node currParent \u003d nodesToProcess.remove();\n \n-            for (int i \u003d 0; i \u003c currParent.childNodes.size(); i++) {\n-                Node childClone \u003d currParent.childNodes.get(i).doClone(currParent);\n-                currParent.childNodes.set(i, childClone);\n+            final int size \u003d currParent.childNodeSize();\n+            for (int i \u003d 0; i \u003c size; i++) {\n+                final List\u003cNode\u003e childNodes \u003d currParent.ensureChildNodes();\n+                Node childClone \u003d childNodes.get(i).doClone(currParent);\n+                childNodes.set(i, childClone);\n                 nodesToProcess.add(childClone);\n             }\n         }\n@@ -687,11 +677,6 @@\n \n         clone.parentNode \u003d parent; // can be null, to create an orphan split\n         clone.siblingIndex \u003d parent \u003d\u003d null ? 0 : siblingIndex;\n-        clone.attributes \u003d attributes !\u003d null ? attributes.clone() : null;\n-        clone.baseUri \u003d baseUri;\n-        clone.childNodes \u003d new NodeList(childNodes.size());\n-\n-        clone.childNodes.addAll(childNodes);\n \n         return clone;\n     }\n@@ -723,14 +708,4 @@\n             }\n         }\n     }\n-\n-    private final class NodeList extends ChangeNotifyingArrayList\u003cNode\u003e {\n-        NodeList(int initialCapacity) {\n-            super(initialCapacity);\n-        }\n-\n-        public void onContentsChanged() {\n-            nodelistChanged();\n-        }\n-    }\n }\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldDeclaration [666,703]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [1088,1206]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [1212,1281]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [2305,2505]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [4197,4304]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [4310,4497]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [6319,6368]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [7509,7683]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [1969,2022]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [7272,7316]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [12988,13037]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "VariableDeclarationStatement [14897,14941]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "VariableDeclarationStatement [15225,15269]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [15715,15764]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [16284,16333]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [16748,16806]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: final [7325,7330]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: final [14897,14902]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ParameterizedType [14903,14913]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "VariableDeclarationFragment [14914,14940]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: final [15225,15230]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ParameterizedType [15231,15241]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "VariableDeclarationFragment [15242,15268]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: final [21480,21485]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: nodes [14914,14919]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: nodes [15242,15247]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [21692,21736]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "MethodInvocation [2879,2891]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "MethodInvocation [3502,3514]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "MethodInvocation [3801,3813]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodInvocation [6639,6657]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodInvocation [6997,7015]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodInvocation [7743,7761]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodInvocation [14356,14374]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodInvocation [14638,14656]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "MethodInvocation [2045,2057]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "MethodInvocation [4051,4063]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodInvocation [17249,17278]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [21798,21858]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "MethodDeclaration [4753,4851]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "MethodInvocation [6266,6275]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "MethodInvocation [3385,3397]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: public [4753,4759]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "PrimitiveType: void [4760,4764]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: head [4765,4769]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Block [4792,4851]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: childNodes [21948,21958]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: childNodes [21893,21903]"
        },
        {
          "type": "delete-tree",
          "from": "ImportDeclaration [67,116]",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [909,1295]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [1301,1380]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [1524,1549]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [1558,1576]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "Javadoc [2738,2893]",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: attributes [2946,2956]",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "Javadoc [4645,4714]",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ReturnStatement [4753,4768]",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: public [5030,5036]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "PrimitiveType: void [5037,5041]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: head [5042,5046]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "Block [5069,5124]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "MethodDeclaration [5030,5124]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: childNodes [6856,6866]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: childNodes [7206,7216]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "Javadoc [7656,7789]",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: final [7801,7806]",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ReturnStatement [7837,7862]",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: childNodes [7932,7942]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: childNodes [14510,14520]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: childNodes [14784,14794]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "ExpressionStatement [15110,15129]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "ExpressionStatement [15351,15370]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [15590,15724]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [16474,16515]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [16938,16988]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "QualifiedName: parentNode.childNodes [17431,17452]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "METHOD_INVOCATION_RECEIVER [21888,21909]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "MethodInvocation [21888,21916]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "QualifiedName: currParent.childNodes [21959,21980]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "QualifiedName: currParent.childNodes [22025,22046]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [22673,22739]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [22748,22772]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [22781,22832]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [22842,22878]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TypeDeclaration [23718,23963]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/jsoup/nodes/TextNode.java",
        "src/main/java/org/jsoup/nodes/TextNode.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "TextNode",
            "ensureAttributes",
            "text",
            "getWholeText",
            "outerHtmlHead",
            "isBlank",
            "splitText",
            "attr",
            "hasAttr",
            "absUrl",
            "attr",
            "createFromEncoded",
            "attributes",
            "removeAttr"
          ],
          "num": 14
        },
        {
          "qualified_names": [
            "createFromEncoded",
            "isBlank",
            "splitText",
            "text",
            "outerHtmlHead",
            "createFromEncoded",
            "getWholeText",
            "TextNode",
            "TextNode"
          ],
          "num": 9
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "3",
            "4",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "25",
            "29",
            "30",
            "52",
            "53",
            "54",
            "63",
            "71",
            "84",
            "85",
            "100",
            "118",
            "134",
            "135",
            "136",
            "137",
            "138",
            "139",
            "140",
            "142",
            "143",
            "144",
            "145",
            "146",
            "147",
            "148",
            "149",
            "150",
            "151",
            "152",
            "153",
            "154",
            "155",
            "156",
            "157",
            "158",
            "159",
            "160",
            "161",
            "162",
            "163",
            "164",
            "165",
            "166",
            "167",
            "168",
            "169",
            "170",
            "171",
            "172",
            "173",
            "174",
            "175",
            "176"
          ],
          "num": 64
        },
        {
          "qualified_names": [
            "6",
            "7",
            "12",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "30",
            "33",
            "55",
            "64",
            "72",
            "82",
            "86",
            "87",
            "102",
            "117",
            "120",
            "121",
            "122",
            "123",
            "124",
            "125",
            "126",
            "127",
            "128",
            "129",
            "130",
            "131"
          ],
          "num": 36
        }
      ],
      "diff": "diff --git a/src/main/java/org/jsoup/nodes/TextNode.java b/src/main/java/org/jsoup/nodes/TextNode.java\nindex 1f95c61..1e7f5ae 100644\n--- a/src/main/java/org/jsoup/nodes/TextNode.java\n+++ b/src/main/java/org/jsoup/nodes/TextNode.java\n@@ -1,33 +1,36 @@\n package org.jsoup.nodes;\n \n-import java.io.IOException;\n-\n import org.jsoup.helper.StringUtil;\n import org.jsoup.helper.Validate;\n \n+import java.io.IOException;\n+\n /**\n  A text node.\n \n  @author Jonathan Hedley, jonathan@hedley.net */\n-public class TextNode extends Node {\n-    /*\n-    TextNode is a node, and so by default comes with attributes and children. The attributes are seldom used, but use\n-    memory, and the child nodes are never used. So we don\u0027t have them, and override accessors to attributes to create\n-    them as needed on the fly.\n-     */\n-    private static final String TEXT_KEY \u003d \"text\";\n-    String text;\n+public class TextNode extends LeafNode {\n \n     /**\n      Create a new TextNode representing the supplied (unencoded) text).\n \n      @param text raw text\n-     @param baseUri base uri\n+     @see #createFromEncoded(String)\n+     */\n+    public TextNode(String text) {\n+        value \u003d text;\n+    }\n+\n+    /**\n+     Create a new TextNode representing the supplied (unencoded) text).\n+\n+     @param text raw text\n+     @param baseUri base uri - ignored for this node type\n      @see #createFromEncoded(String, String)\n+     @deprecated use {@link TextNode(String)}\n      */\n     public TextNode(String text, String baseUri) {\n-        this.baseUri \u003d baseUri;\n-        this.text \u003d text;\n+        this(text);\n     }\n \n \tpublic String nodeName() {\n@@ -49,9 +52,7 @@\n      * @return this, for chaining\n      */\n     public TextNode text(String text) {\n-        this.text \u003d text;\n-        if (attributes !\u003d null)\n-            attributes.put(TEXT_KEY, text);\n+        coreValue(text);\n         return this;\n     }\n \n@@ -60,7 +61,7 @@\n      @return text\n      */\n     public String getWholeText() {\n-        return attributes \u003d\u003d null ? text : attributes.get(TEXT_KEY);\n+        return coreValue();\n     }\n \n     /**\n@@ -68,7 +69,7 @@\n      @return true if this document is empty or only whitespace, false if it contains any text content.\n      */\n     public boolean isBlank() {\n-        return StringUtil.isBlank(getWholeText());\n+        return StringUtil.isBlank(coreValue());\n     }\n \n     /**\n@@ -78,11 +79,12 @@\n      * @return the newly created text node containing the text after the offset.\n      */\n     public TextNode splitText(int offset) {\n+        final String text \u003d coreValue();\n         Validate.isTrue(offset \u003e\u003d 0, \"Split offset must be not be negative\");\n         Validate.isTrue(offset \u003c text.length(), \"Split offset must not be greater than current text length\");\n \n-        String head \u003d getWholeText().substring(0, offset);\n-        String tail \u003d getWholeText().substring(offset);\n+        String head \u003d text.substring(0, offset);\n+        String tail \u003d text.substring(offset);\n         text(head);\n         TextNode tailNode \u003d new TextNode(tail, this.baseUri());\n         if (parent() !\u003d null)\n@@ -97,7 +99,7 @@\n \n         boolean normaliseWhite \u003d out.prettyPrint() \u0026\u0026 parent() instanceof Element\n                 \u0026\u0026 !Element.preserveWhitespace(parent());\n-        Entities.escape(accum, getWholeText(), out, false, normaliseWhite, false);\n+        Entities.escape(accum, coreValue(), out, false, normaliseWhite, false);\n     }\n \n \tvoid outerHtmlTail(Appendable accum, int depth, Document.OutputSettings out) {}\n@@ -112,10 +114,21 @@\n      * @param encodedText Text containing encoded HTML (e.g. \u0026amp;lt;)\n      * @param baseUri Base uri\n      * @return TextNode containing unencoded data (e.g. \u0026lt;)\n+     * @deprecated use {@link TextNode#createFromEncoded(String)} instead, as LeafNodes don\u0027t carry base URIs.\n      */\n     public static TextNode createFromEncoded(String encodedText, String baseUri) {\n         String text \u003d Entities.unescape(encodedText);\n-        return new TextNode(text, baseUri);\n+        return new TextNode(text);\n+    }\n+\n+    /**\n+     * Create a new TextNode from HTML encoded (aka escaped) data.\n+     * @param encodedText Text containing encoded HTML (e.g. \u0026amp;lt;)\n+     * @return TextNode containing unencoded data (e.g. \u0026lt;)\n+     */\n+    public static TextNode createFromEncoded(String encodedText) {\n+        String text \u003d Entities.unescape(encodedText);\n+        return new TextNode(text);\n     }\n \n     static String normaliseWhitespace(String text) {\n@@ -131,47 +144,5 @@\n         return sb.length() !\u003d 0 \u0026\u0026 sb.charAt(sb.length() - 1) \u003d\u003d \u0027 \u0027;\n     }\n \n-    // attribute fiddling. create on first access.\n-    private void ensureAttributes() {\n-        if (attributes \u003d\u003d null) {\n-            attributes \u003d new Attributes();\n-            attributes.put(TEXT_KEY, text);\n-        }\n-    }\n \n-    @Override\n-    public String attr(String attributeKey) {\n-        ensureAttributes();\n-        return super.attr(attributeKey);\n-    }\n-\n-    @Override\n-    public Attributes attributes() {\n-        ensureAttributes();\n-        return super.attributes();\n-    }\n-\n-    @Override\n-    public Node attr(String attributeKey, String attributeValue) {\n-        ensureAttributes();\n-        return super.attr(attributeKey, attributeValue);\n-    }\n-\n-    @Override\n-    public boolean hasAttr(String attributeKey) {\n-        ensureAttributes();\n-        return super.hasAttr(attributeKey);\n-    }\n-\n-    @Override\n-    public Node removeAttr(String attributeKey) {\n-        ensureAttributes();\n-        return super.removeAttr(attributeKey);\n-    }\n-\n-    @Override\n-    public String absUrl(String attributeKey) {\n-        ensureAttributes();\n-        return super.absUrl(attributeKey);\n-    }\n }\n",
      "operations": [
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SimpleType [224,232]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [240,450]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [4077,4450]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [667,707]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ConstructorInvocation [775,786]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [1268,1284]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ReturnStatement [1498,1517]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [2268,2300]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [3782,3885]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: text [2512,2516]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: text [2561,2565]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [224,228]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "FieldDeclaration [517,563]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "FieldDeclaration [568,580]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [830,853]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [862,879]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [1361,1378]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [1387,1454]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ReturnStatement [1668,1728]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodInvocation [2685,2699]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodInvocation [2744,2758]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: baseUri [4150,4157]",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "ASSIGNMENT_OPERATOR: \u003d [4694,4695]",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Assignment [4683,4712]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "ExpressionStatement [4683,4713]",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: TEXT_KEY [4741,4749]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: text [4751,4755]",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SingleVariableDeclaration [4812,4831]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [4843,4862]",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ReturnStatement [4998,5024]",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SingleVariableDeclaration [5067,5086]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SingleVariableDeclaration [5088,5109]",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "ReturnStatement [5149,5197]",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SingleVariableDeclaration [5246,5265]",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SingleVariableDeclaration [5389,5408]",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SingleVariableDeclaration [5533,5552]",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/jsoup/nodes/XmlDeclaration.java",
        "src/main/java/org/jsoup/nodes/XmlDeclaration.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "getWholeDeclaration",
            "name",
            "outerHtmlHead",
            "XmlDeclaration",
            "outerHtmlTail"
          ],
          "num": 5
        },
        {
          "qualified_names": [
            "XmlDeclaration",
            "XmlDeclaration",
            "name",
            "outerHtmlTail",
            "getWholeDeclaration",
            "getWholeDeclaration",
            "outerHtmlHead"
          ],
          "num": 7
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "8",
            "9",
            "10",
            "11",
            "12",
            "16",
            "17",
            "18",
            "19",
            "22",
            "23",
            "24",
            "25",
            "32",
            "38",
            "42",
            "43",
            "46",
            "49",
            "53",
            "54",
            "60"
          ],
          "num": 22
        },
        {
          "qualified_names": [
            "3",
            "9",
            "10",
            "11",
            "12",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "35",
            "47",
            "51",
            "52",
            "55",
            "56",
            "57",
            "58",
            "59",
            "60",
            "61",
            "64",
            "65",
            "66",
            "67",
            "68",
            "69",
            "70",
            "71",
            "72",
            "73",
            "77",
            "78",
            "84",
            "85"
          ],
          "num": 47
        }
      ],
      "diff": "diff --git a/src/main/java/org/jsoup/nodes/XmlDeclaration.java b/src/main/java/org/jsoup/nodes/XmlDeclaration.java\nindex 619cd14..602805b 100644\n--- a/src/main/java/org/jsoup/nodes/XmlDeclaration.java\n+++ b/src/main/java/org/jsoup/nodes/XmlDeclaration.java\n@@ -1,63 +1,88 @@\n package org.jsoup.nodes;\n \n+import org.jsoup.SerializationException;\n import org.jsoup.helper.Validate;\n \n import java.io.IOException;\n \n /**\n- An XML Declaration.\n-\n- @author Jonathan Hedley, jonathan@hedley.net */\n-public class XmlDeclaration extends Node {\n-    private final String name;\n+ * An XML Declaration.\n+ */\n+public class XmlDeclaration extends LeafNode {\n+    // todo this impl isn\u0027t really right, the data shouldn\u0027t be attributes, just a run of text after the name\n     private final boolean isProcessingInstruction; // \u003c! if true, \u003c? if false, declaration (and last data char should be ?)\n \n     /**\n-     Create a new XML declaration\n-     @param name of declaration\n-     @param baseUri base uri\n-     @param isProcessingInstruction is processing instruction\n+     * Create a new XML declaration\n+     * @param name of declaration\n+     * @param isProcessingInstruction is processing instruction\n+     */\n+    public XmlDeclaration(String name, boolean isProcessingInstruction) {\n+        Validate.notNull(name);\n+        value \u003d name;\n+        this.isProcessingInstruction \u003d isProcessingInstruction;\n+    }\n+\n+    /**\n+     * Create a new XML declaration\n+     * @param name of declaration\n+     * @param baseUri Leaf Nodes don\u0027t have base URIs; they inherit from their Element\n+     * @param isProcessingInstruction is processing instruction\n+     * @see XmlDeclaration#XmlDeclaration(String, boolean)\n+     * @deprecated\n      */\n     public XmlDeclaration(String name, String baseUri, boolean isProcessingInstruction) {\n-        super(baseUri);\n-        Validate.notNull(name);\n-        this.name \u003d name;\n-        this.isProcessingInstruction \u003d isProcessingInstruction;\n+        this(name, isProcessingInstruction);\n     }\n \n     public String nodeName() {\n         return \"#declaration\";\n     }\n \n-\n     /**\n      * Get the name of this declaration.\n      * @return name of this declaration.\n      */\n     public String name() {\n-        return name;\n+        return coreValue();\n     }\n \n     /**\n-     Get the unencoded XML declaration.\n-     @return XML declaration\n+     * Get the unencoded XML declaration.\n+     * @return XML declaration\n      */\n     public String getWholeDeclaration() {\n-        return attributes.html().trim(); // attr html starts with a \" \"\n+        StringBuilder sb \u003d new StringBuilder();\n+        try {\n+            getWholeDeclaration(sb, new Document.OutputSettings());\n+        } catch (IOException e) {\n+            throw new SerializationException(e);\n+        }\n+        return sb.toString().trim();\n     }\n \n-\tvoid outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n+    private void getWholeDeclaration(Appendable accum, Document.OutputSettings out) throws IOException {\n+        for (Attribute attribute : attributes()) {\n+            if (!attribute.getKey().equals(nodeName())) { // skips coreValue (name)\n+                accum.append(\u0027 \u0027);\n+                attribute.html(accum, out);\n+            }\n+        }\n+    }\n+\n+    void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n         accum\n             .append(\"\u003c\")\n             .append(isProcessingInstruction ? \"!\" : \"?\")\n-            .append(name);\n-        attributes.html(accum, out);\n+            .append(coreValue());\n+        getWholeDeclaration(accum, out);\n         accum\n             .append(isProcessingInstruction ? \"!\" : \"?\")\n             .append(\"\u003e\");\n     }\n \n-\tvoid outerHtmlTail(Appendable accum, int depth, Document.OutputSettings out) {}\n+    void outerHtmlTail(Appendable accum, int depth, Document.OutputSettings out) {\n+    }\n \n     @Override\n     public String toString() {\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "ImportDeclaration [26,66]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SimpleType [198,206]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [448,791]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "MethodDeclaration [1881,2225]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: private [1881,1888]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "PrimitiveType: void [1889,1893]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: getWholeDeclaration [1894,1913]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SingleVariableDeclaration [1914,1930]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SingleVariableDeclaration [1932,1959]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SimpleType [1968,1979]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Block [1980,2225]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [1029,1080]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TagElement [1088,1099]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ConstructorInvocation [1206,1242]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ReturnStatement [1452,1471]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [1618,1657]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TryStatement [1666,1832]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "EnhancedForStatement [1990,2219]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [2467,2499]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SingleVariableDeclaration [1995,2014]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodInvocation [2017,2029]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Block [2031,2219]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "IfStatement [2045,2209]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "PrefixExpression [2049,2087]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Block [2089,2209]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodInvocation [2445,2456]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [2133,2151]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [117,162]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [201,205]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "FieldDeclaration [212,238]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SuperConstructorInvocation [635,650]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [659,682]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [691,708]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [717,772]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ReturnStatement [983,995]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: name [1424,1428]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/jsoup/parser/HtmlTreeBuilder.java",
        "src/main/java/org/jsoup/parser/HtmlTreeBuilder.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "insert",
            "insert"
          ],
          "num": 2
        },
        {
          "qualified_names": [
            "insert",
            "insert"
          ],
          "num": 2
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "247",
            "256",
            "258"
          ],
          "num": 3
        },
        {
          "qualified_names": [
            "247",
            "256",
            "258"
          ],
          "num": 3
        }
      ],
      "diff": "diff --git a/src/main/java/org/jsoup/parser/HtmlTreeBuilder.java b/src/main/java/org/jsoup/parser/HtmlTreeBuilder.java\nindex 3fe076a..6ada343 100644\n--- a/src/main/java/org/jsoup/parser/HtmlTreeBuilder.java\n+++ b/src/main/java/org/jsoup/parser/HtmlTreeBuilder.java\n@@ -244,7 +244,7 @@\n     }\n \n     void insert(Token.Comment commentToken) {\n-        Comment comment \u003d new Comment(commentToken.getData(), baseUri);\n+        Comment comment \u003d new Comment(commentToken.getData());\n         insertNode(comment);\n     }\n \n@@ -253,9 +253,9 @@\n         // characters in script and style go in as datanodes, not text nodes\n         String tagName \u003d currentElement().tagName();\n         if (tagName.equals(\"script\") || tagName.equals(\"style\"))\n-            node \u003d new DataNode(characterToken.getData(), baseUri);\n+            node \u003d new DataNode(characterToken.getData());\n         else\n-            node \u003d new TextNode(characterToken.getData(), baseUri);\n+            node \u003d new TextNode(characterToken.getData());\n         currentElement().appendChild(node); // doesn\u0027t use insertNode, because we don\u0027t foster these; and will always have a stack.\n     }\n \n",
      "operations": [
        {
          "type": "delete-node",
          "from": "SimpleName: baseUri [9587,9594]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: baseUri [9955,9962]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: baseUri [10036,10043]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java",
        "src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [],
          "num": 0
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "23"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "23",
            "24"
          ],
          "num": 2
        }
      ],
      "diff": "diff --git a/src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java b/src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java\nindex a9a9583..bb2a61e 100644\n--- a/src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java\n+++ b/src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java\n@@ -20,7 +20,8 @@\n                 // todo: quirk state check on doctype ids\n                 Token.Doctype d \u003d t.asDoctype();\n                 DocumentType doctype \u003d new DocumentType(\n-                    tb.settings.normalizeTag(d.getName()), d.getPubSysKey(), d.getPublicIdentifier(), d.getSystemIdentifier(), tb.getBaseUri());\n+                    tb.settings.normalizeTag(d.getName()), d.getPublicIdentifier(), d.getSystemIdentifier());\n+                doctype.setPubSysKey(d.getPubSysKey());\n                 tb.getDocument().appendChild(doctype);\n                 if (d.isForceQuirks())\n                     tb.getDocument().quirksMode(Document.QuirksMode.quirks);\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [905,944]"
        },
        {
          "type": "delete-tree",
          "from": "MethodInvocation [838,854]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodInvocation [906,921]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/jsoup/parser/XmlTreeBuilder.java",
        "src/main/java/org/jsoup/parser/XmlTreeBuilder.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "insert",
            "insert",
            "insert"
          ],
          "num": 3
        },
        {
          "qualified_names": [
            "insert",
            "insert",
            "insert"
          ],
          "num": 3
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "84",
            "92",
            "100",
            "105"
          ],
          "num": 4
        },
        {
          "qualified_names": [
            "84",
            "92",
            "100",
            "105",
            "106"
          ],
          "num": 5
        }
      ],
      "diff": "diff --git a/src/main/java/org/jsoup/parser/XmlTreeBuilder.java b/src/main/java/org/jsoup/parser/XmlTreeBuilder.java\nindex 0507243..631a74a 100644\n--- a/src/main/java/org/jsoup/parser/XmlTreeBuilder.java\n+++ b/src/main/java/org/jsoup/parser/XmlTreeBuilder.java\n@@ -81,7 +81,7 @@\n     }\n \n     void insert(Token.Comment commentToken) {\n-        Comment comment \u003d new Comment(commentToken.getData(), baseUri);\n+        Comment comment \u003d new Comment(commentToken.getData());\n         Node insert \u003d comment;\n         if (commentToken.bogus) { // xml declarations are emitted as bogus comments (which is right for html, but not xml)\n             // so we do a bit of a hack and parse the data as an element to pull the attributes out\n@@ -89,7 +89,7 @@\n             if (data.length() \u003e 1 \u0026\u0026 (data.startsWith(\"!\") || data.startsWith(\"?\"))) {\n                 Document doc \u003d Jsoup.parse(\"\u003c\" + data.substring(1, data.length() -1) + \"\u003e\", baseUri, Parser.xmlParser());\n                 Element el \u003d doc.child(0);\n-                insert \u003d new XmlDeclaration(settings.normalizeTag(el.tagName()), comment.baseUri(), data.startsWith(\"!\"));\n+                insert \u003d new XmlDeclaration(settings.normalizeTag(el.tagName()), data.startsWith(\"!\"));\n                 insert.attributes().addAll(el.attributes());\n             }\n         }\n@@ -97,12 +97,13 @@\n     }\n \n     void insert(Token.Character characterToken) {\n-        Node node \u003d new TextNode(characterToken.getData(), baseUri);\n+        Node node \u003d new TextNode(characterToken.getData());\n         insertNode(node);\n     }\n \n     void insert(Token.Doctype d) {\n-        DocumentType doctypeNode \u003d new DocumentType(settings.normalizeTag(d.getName()), d.getPubSysKey(), d.getPublicIdentifier(), d.getSystemIdentifier(), baseUri);\n+        DocumentType doctypeNode \u003d new DocumentType(settings.normalizeTag(d.getName()), d.getPublicIdentifier(), d.getSystemIdentifier());\n+        doctypeNode.setPubSysKey(d.getPubSysKey());\n         insertNode(doctypeNode);\n     }\n \n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [4035,4078]"
        },
        {
          "type": "delete-node",
          "from": "SimpleName: baseUri [2934,2941]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodInvocation [3576,3593]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: baseUri [3847,3854]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodInvocation [4013,4029]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: baseUri [4081,4088]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/jsoup/safety/Cleaner.java",
        "src/main/java/org/jsoup/safety/Cleaner.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "head"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "head"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "122",
            "126"
          ],
          "num": 2
        },
        {
          "qualified_names": [
            "122",
            "126"
          ],
          "num": 2
        }
      ],
      "diff": "diff --git a/src/main/java/org/jsoup/safety/Cleaner.java b/src/main/java/org/jsoup/safety/Cleaner.java\nindex 1223bbe..34f0b14 100644\n--- a/src/main/java/org/jsoup/safety/Cleaner.java\n+++ b/src/main/java/org/jsoup/safety/Cleaner.java\n@@ -119,11 +119,11 @@\n                 }\n             } else if (source instanceof TextNode) {\n                 TextNode sourceText \u003d (TextNode) source;\n-                TextNode destText \u003d new TextNode(sourceText.getWholeText(), source.baseUri());\n+                TextNode destText \u003d new TextNode(sourceText.getWholeText());\n                 destination.appendChild(destText);\n             } else if (source instanceof DataNode \u0026\u0026 whitelist.isSafeTag(source.parent().nodeName())) {\n               DataNode sourceData \u003d (DataNode) source;\n-              DataNode destData \u003d new DataNode(sourceData.getWholeData(), source.baseUri());\n+              DataNode destData \u003d new DataNode(sourceData.getWholeData());\n               destination.appendChild(destData);\n             } else { // else, we don\u0027t care about comments, xml proc instructions, etc\n                 numDiscarded++;\n",
      "operations": [
        {
          "type": "delete-tree",
          "from": "MethodInvocation [5241,5257]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodInvocation [5544,5560]",
          "to": ""
        }
      ]
    }
  ],
  "inducing_type": {
    "add_classes": {
      "qualified_names": [
        "src/main/java/org/jsoup/nodes/LeafNode.java"
      ],
      "num": 1
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [
        "setPubSysKey",
        "hasAttributes",
        "reindexChildren",
        "doSetBaseUri",
        "hasParent"
      ],
      "num": 5
    },
    "delete_functions": {
      "qualified_names": [
        "Node",
        "ensureAttributes"
      ],
      "num": 2
    }
  },
  "trigger_tests": [
    {
      "test_class": "org.jsoup.nodes.ElementTest",
      "test_function": "testThrowsOnAddNullText",
      "exception": "junit.framework.AssertionFailedError",
      "message": "Expected exception: java.lang.IllegalArgumentException"
    },
    {
      "test_class": "org.jsoup.nodes.ElementTest",
      "test_function": "testThrowsOnPrependNullText",
      "exception": "junit.framework.AssertionFailedError",
      "message": "Expected exception: java.lang.IllegalArgumentException"
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/jsoup/nodes/LeafNode.java",
        "src/main/java/org/jsoup/nodes/LeafNode.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "ensureChildNodes"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "ensureChildNodes"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "5",
            "93"
          ],
          "num": 2
        },
        {
          "qualified_names": [
            "6",
            "9",
            "95"
          ],
          "num": 3
        }
      ],
      "diff": "diff -u -r data/changesInfo//Jsoup_79/properties/modified_classes/inducing/src/main/java/org/jsoup/nodes/LeafNode.java data/changesInfo//Jsoup_79/cleaned/fixing/src/main/java/org/jsoup/nodes/LeafNode.java\n--- data/changesInfo//Jsoup_79/properties/modified_classes/inducing/src/main/java/org/jsoup/nodes/LeafNode.java\t2023-07-26 13:24:52.356201616 +0800\n+++ data/changesInfo//Jsoup_79/cleaned/fixing/src/main/java/org/jsoup/nodes/LeafNode.java\t2023-07-27 18:00:46.895023738 +0800\n@@ -3,8 +3,10 @@\n import org.jsoup.helper.Validate;\n \n import java.util.List;\n+import java.util.Collections;\n \n abstract class LeafNode extends Node {\n+    private static final List\u003cNode\u003e EmptyNodes \u003d Collections.emptyList();\n     Object value; // either a string value, or an attribute map (in the rare case multiple attributes are set)\n \n     protected final boolean hasAttributes() {\n@@ -90,6 +92,6 @@\n \n     @Override\n     protected List\u003cNode\u003e ensureChildNodes() {\n-        throw new UnsupportedOperationException(\"Leaf Nodes do not have child nodes.\");\n+        return EmptyNodes;\n     }\n }\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "ImportDeclaration [84,113]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldDeclaration [158,227]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ReturnStatement [2234,2252]"
        },
        {
          "type": "delete-tree",
          "from": "ThrowStatement [2130,2209]",
          "to": ""
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  }
}