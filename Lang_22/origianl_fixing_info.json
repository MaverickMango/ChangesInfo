{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "/home/liumengjiao/Desktop/CI/Benchmark/data/changesInfo/",
  "properties": {
    "trigger.tests": "org.apache.commons.lang3.math.FractionTest::testReducedFactory_int_int,org.apache.commons.lang3.math.FractionTest::testReduce",
    "test.dir": "src/test/java",
    "clz.modified": "org.apache.commons.lang3.math.Fraction",
    "src.dir": "src/main/java"
  },
  "timeoutSecond": 100,
  "proj": "Lang",
  "id": "22",
  "workingDir": "../bugs/Lang_22_buggy",
  "buggyCommit": "1b708e343781255f50e17bf10b363cca303120af",
  "inducingCommit": "dcdea66eff6cee2cd956e8ad2a92ab3a7c3a2f09",
  "originalCommit": "7f89bd4850b7a5b0dd2a10d2f2daa62805de5bca",
  "bug_name": "Lang_22",
  "derive": "defects4j",
  "original_fixing_commit": "0b2b82ad923b0455cde93286e3f504a1abd0863b",
  "buildFiles_changed": false,
  "regression": true,
  "inducing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/lang/math/Fraction.java",
        "src/java/org/apache/commons/lang/math/Fraction.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.lang.math.Fraction:greatestCommonDivisor:[int u, int v]:int"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "org.apache.commons.lang.math.Fraction:greatestCommonDivisor:[int u, int v]:int"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "574"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "570",
            "571",
            "572",
            "573"
          ],
          "num": 4
        }
      ],
      "diff": "diff --git a/src/java/org/apache/commons/lang/math/Fraction.java b/src/java/org/apache/commons/lang/math/Fraction.java\nindex c00c2c7..5f8e565 100644\n--- a/src/java/org/apache/commons/lang/math/Fraction.java\n+++ b/src/java/org/apache/commons/lang/math/Fraction.java\n@@ -567,11 +567,14 @@\n      * @return the greatest common divisor, never zero\n      */\n     private static int greatestCommonDivisor(int u, int v) {\n+        //if either op. is abs 0 or 1, return 1:\n+        if (Math.abs(u) \u003c\u003d 1 || Math.abs(v) \u003c\u003d 1) {\n+            return 1;\n+        }\n         // keep u and v negative, as negative integers range down to\n         // -2^31, while positive numbers can only be as large as 2^31-1\n         // (i.e. we can\u0027t necessarily negate a negative number without\n         // overflow)\n-        /* assert u!\u003d0 \u0026\u0026 v!\u003d0; */\n         if (u\u003e0) { u\u003d-u; } // make u negative\n         if (v\u003e0) { v\u003d-v; } // make v negative\n         // B1. [Find power of 2]\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [20414,20489]"
        }
      ]
    }
  ],
  "inducing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  },
  "trigger_tests": [
    {
      "test_class": "org.apache.commons.lang3.math.FractionTest",
      "test_function": "testReducedFactory_int_int",
      "assertion_line": "336",
      "exception": "junit.framework.AssertionFailedError",
      "message": "expected:\u003c-1073741824\u003e but was:\u003c-2147483648\u003e"
    },
    {
      "test_class": "org.apache.commons.lang3.math.FractionTest",
      "test_function": "testReduce",
      "assertion_line": "654",
      "exception": "junit.framework.AssertionFailedError",
      "message": "expected:\u003c-1073741824\u003e but was:\u003c-2147483648\u003e"
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/lang3/math/Fraction.java",
        "src/main/java/org/apache/commons/lang3/math/Fraction.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.lang3.math.Fraction:greatestCommonDivisor:[int u, int v]:int"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "org.apache.commons.lang3.math.Fraction:greatestCommonDivisor:[int u, int v]:int"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "582",
            "583"
          ],
          "num": 2
        },
        {
          "qualified_names": [
            "582",
            "583",
            "584",
            "585",
            "586",
            "587",
            "588",
            "589",
            "590"
          ],
          "num": 9
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/lang3/math/Fraction.java b/src/main/java/org/apache/commons/lang3/math/Fraction.java\nindex 15272e5..bf15a49 100644\n--- a/src/main/java/org/apache/commons/lang3/math/Fraction.java\n+++ b/src/main/java/org/apache/commons/lang3/math/Fraction.java\n@@ -579,8 +579,15 @@\n      * @return the greatest common divisor, never zero\n      */\n     private static int greatestCommonDivisor(int u, int v) {\n-        //if either op. is abs 0 or 1, return 1:\n-        if (Math.abs(u) \u003c\u003d 1 || Math.abs(v) \u003c\u003d 1) {\n+        // From Commons Math:\n+        if ((u \u003d\u003d 0) || (v \u003d\u003d 0)) {\n+            if ((u \u003d\u003d Integer.MIN_VALUE) || (v \u003d\u003d Integer.MIN_VALUE)) {\n+                throw new ArithmeticException(\"overflow: gcd is 2^31\");\n+            }\n+            return Math.abs(u) + Math.abs(v);\n+        }\n+        //if either operand is abs 1, return 1:\n+        if (Math.abs(u) \u003d\u003d 1 || Math.abs(v) \u003d\u003d 1) {\n             return 1;\n         }\n         // keep u and v negative, as negative integers range down to\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [20880,21121]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  },
  "patch_changed_mths": {
    "qualified_names": [
      "org.apache.commons.lang3.math.Fraction:greatestCommonDivisor(II)I:regression"
    ],
    "num": 1
  }
}