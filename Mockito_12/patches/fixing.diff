diff --git a/src/org/mockito/internal/util/reflection/GenericMaster.java b/src/org/mockito/internal/util/reflection/GenericMaster.java
index 1e63db6..4df9f7a 100644
--- a/src/org/mockito/internal/util/reflection/GenericMaster.java
+++ b/src/org/mockito/internal/util/reflection/GenericMaster.java
@@ -17,7 +17,12 @@
         Type generic = field.getGenericType();
         if (generic != null && generic instanceof ParameterizedType) {
             Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0];
-            return (Class) actual;
+            if (actual instanceof Class) {
+                return (Class) actual;
+            } else if (actual instanceof ParameterizedType) {
+                //in case of nested generics we don't go deep
+                return (Class) ((ParameterizedType) actual).getRawType();
+            }
         }
         
         return Object.class;
diff --git a/test/org/mockito/internal/util/reflection/GenericMasterTest.java b/test/org/mockito/internal/util/reflection/GenericMasterTest.java
index 8b4079e..46e0172 100644
--- a/test/org/mockito/internal/util/reflection/GenericMasterTest.java
+++ b/test/org/mockito/internal/util/reflection/GenericMasterTest.java
@@ -3,6 +3,7 @@
 import static org.junit.Assert.*;
 
 import java.lang.reflect.Field;
+import java.util.Collection;
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
@@ -17,17 +18,25 @@
     Set<Integer> two;
     Map<Double, String> map;
     String nonGeneric;
+    List<Set<String>> nested;
+    List<Set<Collection<String>>> multiNested;
     
     @Test
     public void shouldFindGenericClass() throws Exception {
-        assertEquals(m.getGenericType(field("one")), String.class);
-        assertEquals(m.getGenericType(field("two")), Integer.class);
-        assertEquals(m.getGenericType(field("map")), Double.class);
+        assertEquals(String.class, m.getGenericType(field("one")));
+        assertEquals(Integer.class, m.getGenericType(field("two")));
+        assertEquals(Double.class, m.getGenericType(field("map")));
     }
     
     @Test
     public void shouldGetObjectForNonGeneric() throws Exception {
-        assertEquals(m.getGenericType(field("nonGeneric")), Object.class);
+        assertEquals(Object.class, m.getGenericType(field("nonGeneric")));
+    }
+    
+    @Test
+    public void shouldDealWithNestedGenerics() throws Exception {
+        assertEquals(Set.class, m.getGenericType(field("nested")));
+        assertEquals(Set.class, m.getGenericType(field("multiNested")));
     }
 
     private Field field(String fieldName) throws SecurityException, NoSuchFieldException {
