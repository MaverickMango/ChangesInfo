diff --git a/src/org/mockito/internal/configuration/DefaultAnnotationEngine.java b/src/org/mockito/internal/configuration/DefaultAnnotationEngine.java
index a0492c6..d6849ec 100644
--- a/src/org/mockito/internal/configuration/DefaultAnnotationEngine.java
+++ b/src/org/mockito/internal/configuration/DefaultAnnotationEngine.java
@@ -6,8 +6,6 @@
 
 import java.lang.annotation.Annotation;
 import java.lang.reflect.Field;
-import java.lang.reflect.ParameterizedType;
-import java.lang.reflect.Type;
 
 import org.mockito.ArgumentCaptor;
 import org.mockito.Captor;
@@ -19,12 +17,14 @@
 import org.mockito.exceptions.Reporter;
 import org.mockito.exceptions.base.MockitoException;
 import org.mockito.internal.util.reflection.FieldSetter;
+import org.mockito.internal.util.reflection.GenericMaster;
 
 /**
  * Initializes fields annotated with &#64;{@link org.mockito.Mock} or &#64;{@link org.mockito.Captor}.
  * <p/>
  * See {@link MockitoAnnotations}
  */
+@SuppressWarnings("unchecked")
 public class DefaultAnnotationEngine implements AnnotationEngine {
 
     /* (non-Javadoc)
@@ -65,7 +65,7 @@
     private Object processAnnotationOn(org.mockito.MockitoAnnotations.Mock annotation, Field field) {
         return Mockito.mock(field.getType(), field.getName());
     }
-
+    
     private Object processAnnotationOn(Captor annotation, Field field) {
         Class<?> type = field.getType();
         if (!ArgumentCaptor.class.isAssignableFrom(type)) {
@@ -73,20 +73,9 @@
                     + field.getName() + "' has wrong type\n"
                     + "For info how to use @Captor annotations see examples in javadoc for MockitoAnnotations class.");
         }
-        Type generic = field.getGenericType();
-        if (generic != null && generic instanceof ParameterizedType) {
-            Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0];
-            return ArgumentCaptor.forClass(typeToClass(actual));
-        }
-        return ArgumentCaptor.forClass(Object.class);    
-    }       
-
-    private Class typeToClass(Type actual) {
-        if (actual.equals(Double.class)) {
-            return Double.class;
-        }
-        return Object.class;
-    }
+        Class cls = new GenericMaster().getGenericType(field);        
+        return ArgumentCaptor.forClass(cls);    
+    }           
 
     @Override
     public void process(Class<?> clazz, Object testClass) {
diff --git a/src/org/mockito/internal/util/reflection/GenericMaster.java b/src/org/mockito/internal/util/reflection/GenericMaster.java
new file mode 100644
index 0000000..1e63db6
--- /dev/null
+++ b/src/org/mockito/internal/util/reflection/GenericMaster.java
@@ -0,0 +1,25 @@
+package org.mockito.internal.util.reflection;
+
+import java.lang.reflect.Field;
+import java.lang.reflect.ParameterizedType;
+import java.lang.reflect.Type;
+
+@SuppressWarnings("unchecked")
+public class GenericMaster {
+
+    /**
+     * Finds the generic type (parametrized type) of the field. If the field is not generic it returns Object.class. 
+     * 
+     * @param field
+     * @return
+     */
+    public Class getGenericType(Field field) {        
+        Type generic = field.getGenericType();
+        if (generic != null && generic instanceof ParameterizedType) {
+            Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0];
+            return (Class) actual;
+        }
+        
+        return Object.class;
+    }
+}
diff --git a/test/org/mockito/internal/util/reflection/GenericMasterTest.java b/test/org/mockito/internal/util/reflection/GenericMasterTest.java
new file mode 100644
index 0000000..8b4079e
--- /dev/null
+++ b/test/org/mockito/internal/util/reflection/GenericMasterTest.java
@@ -0,0 +1,36 @@
+package org.mockito.internal.util.reflection;
+
+import static org.junit.Assert.*;
+
+import java.lang.reflect.Field;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+
+import org.junit.Test;
+
+public class GenericMasterTest {
+    
+    GenericMaster m = new GenericMaster();
+    
+    List<String> one;
+    Set<Integer> two;
+    Map<Double, String> map;
+    String nonGeneric;
+    
+    @Test
+    public void shouldFindGenericClass() throws Exception {
+        assertEquals(m.getGenericType(field("one")), String.class);
+        assertEquals(m.getGenericType(field("two")), Integer.class);
+        assertEquals(m.getGenericType(field("map")), Double.class);
+    }
+    
+    @Test
+    public void shouldGetObjectForNonGeneric() throws Exception {
+        assertEquals(m.getGenericType(field("nonGeneric")), Object.class);
+    }
+
+    private Field field(String fieldName) throws SecurityException, NoSuchFieldException {
+        return this.getClass().getDeclaredField(fieldName);
+    }
+}
diff --git a/test/org/mockitousage/bugs/CaptorAnnotationAutoboxingTest.java b/test/org/mockitousage/bugs/CaptorAnnotationAutoboxingTest.java
index 5fa4d5a..e006881 100644
--- a/test/org/mockitousage/bugs/CaptorAnnotationAutoboxingTest.java
+++ b/test/org/mockitousage/bugs/CaptorAnnotationAutoboxingTest.java
@@ -17,6 +17,7 @@
     
     interface Fun {
         void doFun(double prmitive);
+        void moreFun(int howMuch);
     }
     
     @Mock Fun fun;
@@ -31,4 +32,11 @@
         verify(fun).doFun(captor.capture());
         assertEquals((Double) 1.0, captor.getValue());
     }
+
+    @Captor ArgumentCaptor<Integer> intCaptor;
+    
+    @Test
+    public void shouldAutoboxAllPrimitives() {
+        verify(fun, never()).moreFun(intCaptor.capture());
+    }
 }
\ No newline at end of file
