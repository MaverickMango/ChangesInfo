{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "/home/liumengjiao/Desktop/CI/Benchmark/data/changesInfo/",
  "properties": {
    "trigger.tests": "org.apache.commons.compress.utils.IOUtilsTest::skipUsingRead,org.apache.commons.compress.utils.IOUtilsTest::skipUsingSkipAndRead",
    "test.dir": "src/test/java",
    "clz.modified": "org.apache.commons.compress.utils.IOUtils",
    "src.dir": "src/main/java"
  },
  "timeoutSecond": 100,
  "proj": "Compress",
  "id": "26",
  "workingDir": "../bugs/Compress_26_buggy",
  "buggyCommit": "8af0b6c133fe7d147833b70e731c99d179dc8db9",
  "inducingCommit": "a671a703fe86b69adb8c61495a915065c186362d",
  "originalCommit": "c70896112c7b4d0a24b840618601b3416e5496d7",
  "bug_name": "Compress_26",
  "derive": "defects4j",
  "original_fixing_commit": "557800a53cedad99afc951032a11931f3e39bf13",
  "buildFiles_changed": false,
  "regression": true,
  "inducing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java",
        "src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:TarArchiveInputStream:[InputStream is, int blockSize]:null",
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:close:[]:void",
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:getNextTarEntry:[]:TarArchiveEntry",
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:TarArchiveInputStream:[InputStream is, String encoding]:null",
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:getRecordSize:[]:int",
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:skip:[long numToSkip]:long",
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:TarArchiveInputStream:[InputStream is]:null",
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:read:[byte[] buf, int offset, int numToRead]:int",
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:matches:[byte[] signature, int length]:boolean",
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:TarArchiveInputStream:[InputStream is, int blockSize, String encoding]:null",
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:TarArchiveInputStream:[InputStream is, int blockSize, int recordSize]:null",
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:getCurrentEntry:[]:TarArchiveEntry",
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:TarArchiveInputStream:[InputStream is, int blockSize, int recordSize, String encoding]:null",
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:getRecord:[]:byte[]"
          ],
          "num": 14
        },
        {
          "qualified_names": [
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:TarArchiveInputStream:[InputStream is]:null",
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:consumeRemainderOfLastBlock:[]:void",
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:isEOFRecord:[byte[] record]:boolean",
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:getCurrentEntry:[]:ArchiveEntry",
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:getRecordSize:[]:int",
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:TarArchiveInputStream:[InputStream is, int blockSize, String encoding]:null",
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:matches:[byte[] signature, int length]:boolean",
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:getNextEntry:[]:ArchiveEntry",
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:close:[]:void",
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:read:[byte[] buf, int offset, int numToRead]:int",
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:readRecord:[]:byte[]",
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:TarArchiveInputStream:[InputStream is, int blockSize]:null",
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:TarArchiveInputStream:[InputStream is, String encoding]:null",
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:TarArchiveInputStream:[InputStream is, int blockSize, int recordSize, String encoding]:null",
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:skipRecordPadding:[]:void",
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:getRecord:[]:byte[]",
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:tryToConsumeSecondEOFRecord:[]:void",
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:skip:[long numToSkip]:long",
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:getNextTarEntry:[]:TarArchiveEntry",
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:TarArchiveInputStream:[InputStream is, int blockSize, int recordSize]:null"
          ],
          "num": 20
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "38",
            "48",
            "49",
            "51",
            "57",
            "58",
            "67",
            "77",
            "86",
            "98",
            "108",
            "121",
            "122",
            "133",
            "137",
            "142",
            "177",
            "178",
            "179",
            "180",
            "181",
            "182",
            "183",
            "184",
            "185",
            "186",
            "187",
            "188",
            "189",
            "190",
            "191",
            "220",
            "222",
            "223",
            "224",
            "225",
            "226",
            "227",
            "228",
            "229",
            "230",
            "231",
            "248",
            "286",
            "338",
            "339",
            "340",
            "341",
            "342",
            "343",
            "344",
            "345",
            "348",
            "470",
            "491",
            "493",
            "497",
            "498",
            "501",
            "502",
            "503",
            "504",
            "505",
            "506",
            "507",
            "508",
            "509",
            "510",
            "511",
            "512",
            "513",
            "514",
            "515",
            "516",
            "517",
            "518",
            "519",
            "520",
            "521",
            "522",
            "523",
            "524",
            "525",
            "526",
            "527",
            "528",
            "529",
            "530",
            "531",
            "532",
            "533",
            "534",
            "535",
            "536",
            "537",
            "538",
            "539",
            "540",
            "541",
            "542",
            "543",
            "544",
            "545",
            "546",
            "547",
            "548",
            "549",
            "550",
            "551",
            "552",
            "553",
            "571",
            "587"
          ],
          "num": 113
        },
        {
          "qualified_names": [
            "39",
            "50",
            "51",
            "54",
            "55",
            "56",
            "57",
            "58",
            "59",
            "60",
            "62",
            "63",
            "65",
            "66",
            "68",
            "69",
            "70",
            "71",
            "72",
            "74",
            "75",
            "83",
            "93",
            "94",
            "103",
            "115",
            "125",
            "138",
            "141",
            "142",
            "151",
            "155",
            "160",
            "195",
            "196",
            "197",
            "198",
            "199",
            "200",
            "201",
            "202",
            "231",
            "232",
            "234",
            "235",
            "253",
            "292",
            "295",
            "296",
            "297",
            "298",
            "299",
            "300",
            "301",
            "302",
            "303",
            "304",
            "305",
            "306",
            "307",
            "357",
            "358",
            "359",
            "360",
            "361",
            "362",
            "363",
            "364",
            "365",
            "366",
            "367",
            "368",
            "369",
            "370",
            "371",
            "372",
            "373",
            "374",
            "375",
            "376",
            "377",
            "378",
            "379",
            "380",
            "381",
            "382",
            "383",
            "384",
            "385",
            "386",
            "387",
            "388",
            "389",
            "390",
            "391",
            "394",
            "517",
            "518",
            "519",
            "520",
            "521",
            "522",
            "523",
            "528",
            "529",
            "530",
            "531",
            "532",
            "533",
            "534",
            "535",
            "536",
            "537",
            "538",
            "539",
            "540",
            "541",
            "542",
            "543",
            "544",
            "545",
            "546",
            "547",
            "548",
            "549",
            "550",
            "551",
            "552",
            "553",
            "570",
            "572",
            "576",
            "577",
            "578",
            "579",
            "580",
            "581",
            "582",
            "583",
            "584",
            "604",
            "605",
            "606",
            "607",
            "608",
            "609",
            "626",
            "627",
            "628",
            "629",
            "630",
            "631",
            "632",
            "633",
            "634",
            "635",
            "636",
            "637",
            "638"
          ],
          "num": 159
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java\nindex 7c3a0f3..6ea6e97 100644\n--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java\n@@ -36,6 +36,7 @@\n import org.apache.commons.compress.archivers.zip.ZipEncodingHelper;\n import org.apache.commons.compress.utils.ArchiveUtils;\n import org.apache.commons.compress.utils.CharsetNames;\n+import org.apache.commons.compress.utils.IOUtils;\n \n /**\n  * The TarInputStream reads a UNIX tar archive as an InputStream.\n@@ -45,18 +46,33 @@\n  * @NotThreadSafe\n  */\n public class TarArchiveInputStream extends ArchiveInputStream {\n-    private static final int SMALL_BUFFER_SIZE \u003d 256;\n-    private static final int BUFFER_SIZE \u003d 8 * 1024;\n \n-    private final byte[] SKIP_BUF \u003d new byte[BUFFER_SIZE];\n+    private static final int SMALL_BUFFER_SIZE \u003d 256;\n+\n     private final byte[] SMALL_BUF \u003d new byte[SMALL_BUFFER_SIZE];\n \n+    /** The size the TAR header */\n+    private final int recordSize;\n+\n+    /** The size of a block */\n+    private final int blockSize;\n+\n+    /** True if file has hit EOF */\n     private boolean hasHitEOF;\n+\n+    /** Size of the current entry */\n     private long entrySize;\n+\n+    /** How far into the entry the stream is at */\n     private long entryOffset;\n-    private byte[] readBuf;\n-    protected final TarBuffer buffer;\n+\n+    /** An input stream to read from */\n+    private final InputStream is;\n+\n+    /** The meta-data about the current entry */\n     private TarArchiveEntry currEntry;\n+\n+    /** The encoding of the file */\n     private final ZipEncoding encoding;\n \n     /**\n@@ -64,7 +80,7 @@\n      * @param is the input stream to use\n      */\n     public TarArchiveInputStream(InputStream is) {\n-        this(is, TarBuffer.DEFAULT_BLKSIZE, TarBuffer.DEFAULT_RCDSIZE);\n+        this(is, TarConstants.DEFAULT_BLKSIZE, TarConstants.DEFAULT_RCDSIZE);\n     }\n \n     /**\n@@ -74,7 +90,8 @@\n      * @since 1.4\n      */\n     public TarArchiveInputStream(InputStream is, String encoding) {\n-        this(is, TarBuffer.DEFAULT_BLKSIZE, TarBuffer.DEFAULT_RCDSIZE, encoding);\n+        this(is, TarConstants.DEFAULT_BLKSIZE, TarConstants.DEFAULT_RCDSIZE,\n+             encoding);\n     }\n \n     /**\n@@ -83,7 +100,7 @@\n      * @param blockSize the block size to use\n      */\n     public TarArchiveInputStream(InputStream is, int blockSize) {\n-        this(is, blockSize, TarBuffer.DEFAULT_RCDSIZE);\n+        this(is, blockSize, TarConstants.DEFAULT_RCDSIZE);\n     }\n \n     /**\n@@ -95,7 +112,7 @@\n      */\n     public TarArchiveInputStream(InputStream is, int blockSize,\n                                  String encoding) {\n-        this(is, blockSize, TarBuffer.DEFAULT_RCDSIZE, encoding);\n+        this(is, blockSize, TarConstants.DEFAULT_RCDSIZE, encoding);\n     }\n \n     /**\n@@ -105,7 +122,7 @@\n      * @param recordSize the record size to use\n      */\n     public TarArchiveInputStream(InputStream is, int blockSize, int recordSize) {\n-        this(is, blockSize, recordSize, null);\n+        this(is, blockSize, recordSize, null);      \n     }\n \n     /**\n@@ -118,10 +135,11 @@\n      */\n     public TarArchiveInputStream(InputStream is, int blockSize, int recordSize,\n                                  String encoding) {\n-        this.buffer \u003d new TarBuffer(is, blockSize, recordSize);\n-        this.readBuf \u003d null;\n+        this.is \u003d is;\n         this.hasHitEOF \u003d false;\n         this.encoding \u003d ZipEncodingHelper.getZipEncoding(encoding);\n+        this.recordSize \u003d recordSize;\n+        this.blockSize \u003d blockSize;\n     }\n \n     /**\n@@ -130,16 +148,16 @@\n      */\n     @Override\n     public void close() throws IOException {\n-        buffer.close();\n+        is.close();\n     }\n \n     /**\n-     * Get the record size being used by this stream\u0027s TarBuffer.\n+     * Get the record size being used by this stream\u0027s buffer.\n      *\n      * @return The TarBuffer record size.\n      */\n     public int getRecordSize() {\n-        return buffer.getRecordSize();\n+        return recordSize;\n     }\n \n     /**\n@@ -174,21 +192,14 @@\n      */\n     @Override\n     public long skip(long numToSkip) throws IOException {\n-        // REVIEW\n-        // This is horribly inefficient, but it ensures that we\n-        // properly skip over bytes via the TarBuffer...\n-        //\n-        long skip \u003d numToSkip;\n-        while (skip \u003e 0) {\n-            int realSkip \u003d (int) (skip \u003e SKIP_BUF.length\n-                                  ? SKIP_BUF.length : skip);\n-            int numRead \u003d read(SKIP_BUF, 0, realSkip);\n-            if (numRead \u003d\u003d -1) {\n-                break;\n-            }\n-            skip -\u003d numRead;\n-        }\n-        return (numToSkip - skip);\n+\n+        long available \u003d (entrySize - entryOffset);\n+        numToSkip \u003d Math.min(numToSkip, available);\n+\n+        long skipped \u003d IOUtils.skip(is, numToSkip); \n+        count(skipped);\n+        entryOffset +\u003d skipped;\n+        return skipped;\n     }\n \n     /**\n@@ -217,18 +228,11 @@\n         }\n \n         if (currEntry !\u003d null) {\n-            long numToSkip \u003d entrySize - entryOffset;\n+            /* Skip will only go to the end of the current entry */\n+            skip(Long.MAX_VALUE);\n \n-            while (numToSkip \u003e 0) {\n-                long skipped \u003d skip(numToSkip);\n-                if (skipped \u003c\u003d 0) {\n-                    throw new RuntimeException(\"failed to skip current tar\"\n-                                               + \" entry\");\n-                }\n-                numToSkip -\u003d skipped;\n-            }\n-\n-            readBuf \u003d null;\n+            /* skip to the end of the last record */\n+            skipRecordPadding();\n         }\n \n         byte[] headerBuf \u003d getRecord();\n@@ -246,6 +250,7 @@\n             ioe.initCause(e);\n             throw ioe;\n         }\n+\n         entryOffset \u003d 0;\n         entrySize \u003d currEntry.getSize();\n \n@@ -284,8 +289,22 @@\n         // information, we update entrySize here so that it contains\n         // the correct value.\n         entrySize \u003d currEntry.getSize();\n+\n         return currEntry;\n     }\n+    \n+    /**\n+     * The last record block should be written at the full size, so skip any\n+     * additional space used to fill a record after an entry\n+     */\n+    private void skipRecordPadding() throws IOException {\n+        if (this.entrySize \u003e 0 \u0026\u0026 this.entrySize % this.recordSize !\u003d 0) {\n+            long numRecords \u003d (this.entrySize / this.recordSize) + 1;\n+            long padding \u003d (numRecords * this.recordSize) - this.entrySize;\n+            long skipped \u003d IOUtils.skip(is, padding);\n+            count(skipped);\n+        }\n+    }\n \n     /**\n      * Get the next entry in this tar archive as longname data.\n@@ -335,17 +354,44 @@\n      * @throws IOException on error\n      */\n     private byte[] getRecord() throws IOException {\n-        byte[] headerBuf \u003d null;\n-        if (!hasHitEOF) {\n-            headerBuf \u003d buffer.readRecord();\n-            hasHitEOF \u003d buffer.isEOFRecord(headerBuf);\n-            if (hasHitEOF \u0026\u0026 headerBuf !\u003d null) {\n-                buffer.tryToConsumeSecondEOFRecord();\n-                headerBuf \u003d null;\n-            }\n+        byte[] headerBuf \u003d readRecord();\n+        hasHitEOF \u003d isEOFRecord(headerBuf);\n+        if (hasHitEOF \u0026\u0026 headerBuf !\u003d null) {\n+            tryToConsumeSecondEOFRecord();\n+            consumeRemainderOfLastBlock();\n+            headerBuf \u003d null;\n+        }\n+        return headerBuf;\n+    }\n+\n+    /**\n+     * Determine if an archive record indicate End of Archive. End of\n+     * archive is indicated by a record that consists entirely of null bytes.\n+     *\n+     * @param record The record data to check.\n+     * @return true if the record data is an End of Archive\n+     */\n+    protected boolean isEOFRecord(byte[] record) {\n+        return record \u003d\u003d null || ArchiveUtils.isArrayZero(record, recordSize);\n+    }\n+    \n+    /**\n+     * Read a record from the input stream and return the data.\n+     *\n+     * @return The record data or null if EOF has been hit.\n+     * @throws IOException on error\n+     */\n+    protected byte[] readRecord() throws IOException {\n+\n+        byte[] record \u003d new byte[recordSize];\n+\n+        int readNow \u003d is.read(record);\n+        count(readNow);\n+        if (readNow !\u003d recordSize) {\n+            return null;\n         }\n \n-        return headerBuf;\n+        return record;\n     }\n \n     private void paxHeaders() throws IOException{\n@@ -468,10 +514,43 @@\n         }\n     }\n \n+    /**\n+     * Returns the next Archive Entry in this Stream.\n+     *\n+     * @return the next entry,\n+     *         or {@code null} if there are no more entries\n+     * @throws IOException if the next entry could not be read\n+     */\n     @Override\n     public ArchiveEntry getNextEntry() throws IOException {\n         return getNextTarEntry();\n     }\n+    \n+    /**\n+     * Tries to read the next record rewinding the stream if it is not a EOF record.\n+     *\n+     * \u003cp\u003eThis is meant to protect against cases where a tar\n+     * implementation has written only one EOF record when two are\n+     * expected.  Actually this won\u0027t help since a non-conforming\n+     * implementation likely won\u0027t fill full blocks consisting of - by\n+     * default - ten records either so we probably have already read\n+     * beyond the archive anyway.\u003c/p\u003e\n+     */\n+    private void tryToConsumeSecondEOFRecord() throws IOException {\n+        boolean shouldReset \u003d true;\n+        boolean marked \u003d is.markSupported();\n+        if (marked) {\n+            is.mark(recordSize);\n+        }\n+        try {\n+            shouldReset \u003d !isEOFRecord(readRecord());\n+        } finally {\n+            if (shouldReset \u0026\u0026 marked) {\n+                pushedBackBytes(recordSize);\n+            \tis.reset();\n+            }\n+        }\n+    }\n \n     /**\n      * Reads bytes from the current tar archive entry.\n@@ -488,69 +567,23 @@\n      */\n     @Override\n     public int read(byte[] buf, int offset, int numToRead) throws IOException {\n-        int totalRead \u003d 0;\n+    \tint totalRead \u003d 0;\n \n-        if (entryOffset \u003e\u003d entrySize) {\n+        if (hasHitEOF || entryOffset \u003e\u003d entrySize) {\n             return -1;\n         }\n \n-        if ((numToRead + entryOffset) \u003e entrySize) {\n-            numToRead \u003d (int) (entrySize - entryOffset);\n+        numToRead \u003d Math.min(numToRead, available());\n+        \n+        totalRead \u003d is.read(buf, offset, numToRead);\n+        count(totalRead);\n+        \n+        if (totalRead \u003d\u003d -1) {\n+            hasHitEOF \u003d true;\n+        } else {\n+            entryOffset +\u003d (long) totalRead;\n         }\n \n-        if (readBuf !\u003d null) {\n-            int sz \u003d (numToRead \u003e readBuf.length) ? readBuf.length\n-                : numToRead;\n-\n-            System.arraycopy(readBuf, 0, buf, offset, sz);\n-\n-            if (sz \u003e\u003d readBuf.length) {\n-                readBuf \u003d null;\n-            } else {\n-                int newLen \u003d readBuf.length - sz;\n-                byte[] newBuf \u003d new byte[newLen];\n-\n-                System.arraycopy(readBuf, sz, newBuf, 0, newLen);\n-\n-                readBuf \u003d newBuf;\n-            }\n-\n-            totalRead +\u003d sz;\n-            numToRead -\u003d sz;\n-            offset +\u003d sz;\n-        }\n-\n-        while (numToRead \u003e 0) {\n-            byte[] rec \u003d buffer.readRecord();\n-\n-            if (rec \u003d\u003d null) {\n-                // Unexpected EOF!\n-                throw new IOException(\"unexpected EOF with \" + numToRead\n-                                      + \" bytes unread. Occured at byte: \" + getBytesRead());\n-            }\n-            count(rec.length);\n-            int sz \u003d numToRead;\n-            int recLen \u003d rec.length;\n-\n-            if (recLen \u003e sz) {\n-                System.arraycopy(rec, 0, buf, offset, sz);\n-\n-                readBuf \u003d new byte[recLen - sz];\n-\n-                System.arraycopy(rec, sz, readBuf, 0, recLen - sz);\n-            } else {\n-                sz \u003d recLen;\n-\n-                System.arraycopy(rec, 0, buf, offset, recLen);\n-            }\n-\n-            totalRead +\u003d sz;\n-            numToRead -\u003d sz;\n-            offset +\u003d sz;\n-        }\n-\n-        entryOffset +\u003d totalRead;\n-\n         return totalRead;\n     }\n \n@@ -568,7 +601,12 @@\n         return false;\n     }\n \n-    protected final TarArchiveEntry getCurrentEntry() {\n+    /**\n+     * Get the current TAR Archive Entry that this input stream is processing\n+     * \n+     * @return The current Archive Entry\n+     */\n+    public ArchiveEntry getCurrentEntry() {\n         return currEntry;\n     }\n \n@@ -585,6 +623,19 @@\n     }\n \n     /**\n+     * This method is invoked once the end of the archive is hit, it\n+     * tries to consume the remaining bytes under the assumption that\n+     * the tool creating this archive has padded the last block.\n+     */\n+    private void consumeRemainderOfLastBlock() throws IOException {\n+        long bytesReadOfLastBlock \u003d getBytesRead() % blockSize;\n+        if (bytesReadOfLastBlock \u003e 0) {\n+            long skipped \u003d IOUtils.skip(is, blockSize - bytesReadOfLastBlock);\n+            count(skipped);\n+        }\n+    }\n+\n+    /**\n      * Checks if the signature matches what is expected for a tar file.\n      *\n      * @param signature\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "ImportDeclaration [1559,1608]"
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [9647,10173]"
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [12636,13082]"
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [21109,21619]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [2039,2069]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [2109,2135]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [2174,2205]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [2242,2274]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [2308,2354]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [2390,2425]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [2465,2509]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [2554,2585]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [17934,18160]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: private [18764,18771]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [20647,20785]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [4653,4666]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [4775,4804]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [4813,4840]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ReturnStatement [5220,5238]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "VariableDeclarationStatement [6531,6574]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [6583,6626]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [6636,6679]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [6689,6704]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [6713,6736]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ReturnStatement [6745,6760]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [11931,11963]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [19935,19980]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [19998,20042]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "IfStatement [20086,20210]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "PrimitiveType: long [6531,6535]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "VariableDeclarationFragment [6536,6573]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "InfixExpression [19852,19889]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "InfixExpression [20090,20105]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Block [20107,20148]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Block [20154,20210]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: available [6536,6545]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "ParenthesizedExpression [6548,6573]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "ExpressionStatement [7720,7741]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [7808,7828]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [12109,12139]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: hasHitEOF [19852,19861]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "INFIX_EXPRESSION_OPERATOR: || [19862,19864]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "InfixExpression [6549,6572]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "MethodInvocation [7720,7740]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: totalRead [20057,20066]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: entrySize [6549,6558]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: entryOffset [6561,6572]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "METHOD_INVOCATION_ARGUMENTS [7725,7739]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [19119,19147]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "CastExpression [20183,20199]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "PrimitiveType: long [20184,20188]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "FieldDeclaration [1920,1968]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "FieldDeclaration [1974,2028]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "FieldDeclaration [2189,2212]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [4320,4375]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [4384,4404]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ReturnStatement [4891,4921]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: numToSkip [6375,6384]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "VariableDeclarationStatement [6363,6385]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "WhileStatement [6394,6694]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: numToSkip [6711,6720]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: skip [6723,6727]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "InfixExpression [6711,6727]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "ParenthesizedExpression [6710,6728]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "ReturnStatement [6703,6729]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [7621,7662]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "InfixExpression [7683,7696]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "PrimitiveType: long [7716,7720]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: skipped [7721,7728]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "METHOD_INVOCATION_ARGUMENTS [7736,7745]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "MethodInvocation [7731,7746]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "VariableDeclarationFragment [7721,7746]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "VariableDeclarationStatement [7716,7747]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [7764,7937]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [7954,7975]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Block [7698,7989]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "WhileStatement [7676,7989]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [8003,8018]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "METHOD_INVOCATION_RECEIVER [11703,11709]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "METHOD_INVOCATION_RECEIVER [11800,11806]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [11583,11607]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "PrefixExpression [11620,11630]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [11646,11678]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Block [11632,11895]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "IfStatement [11616,11895]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "QualifiedName: rec.length [18662,18672]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [17612,17723]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [17733,18316]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "InfixExpression [18333,18346]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [18362,18395]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [18409,18643]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [18687,18706]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [18719,18743]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [18757,19081]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [19095,19111]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [19124,19140]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [19153,19166]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Block [18348,19176]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "WhileStatement [18326,19176]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: final [19658,19663]",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java",
        "src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:closeArchiveEntry:[]:void",
            "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:TarArchiveOutputStream:[OutputStream os, int blockSize, String encoding]:null",
            "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:TarArchiveOutputStream:[OutputStream os, int blockSize]:null",
            "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:putArchiveEntry:[ArchiveEntry archiveEntry]:void",
            "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:TarArchiveOutputStream:[OutputStream os, int blockSize, int recordSize, String encoding]:null",
            "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:finish:[]:void",
            "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:write:[byte[] wBuf, int wOffset, int numToWrite]:void",
            "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:getRecordSize:[]:int",
            "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:writeEOFRecord:[]:void",
            "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:TarArchiveOutputStream:[OutputStream os, String encoding]:null",
            "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:createArchiveEntry:[File inputFile, String entryName]:ArchiveEntry",
            "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:close:[]:void",
            "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:TarArchiveOutputStream:[OutputStream os]:null"
          ],
          "num": 13
        },
        {
          "qualified_names": [
            "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:putArchiveEntry:[ArchiveEntry archiveEntry]:void",
            "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:closeArchiveEntry:[]:void",
            "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:writeEOFRecord:[]:void",
            "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:getRecordSize:[]:int",
            "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:TarArchiveOutputStream:[OutputStream os, int blockSize]:null",
            "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:writeRecord:[byte[] record]:void",
            "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:close:[]:void",
            "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:TarArchiveOutputStream:[OutputStream os]:null",
            "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:padAsNeeded:[]:void",
            "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:TarArchiveOutputStream:[OutputStream os, int blockSize, int recordSize, String encoding]:null",
            "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:write:[byte[] wBuf, int wOffset, int numToWrite]:void",
            "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:writeRecord:[byte[] buf, int offset]:void",
            "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:TarArchiveOutputStream:[OutputStream os, String encoding]:null",
            "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:TarArchiveOutputStream:[OutputStream os, int blockSize, String encoding]:null",
            "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:finish:[]:void"
          ],
          "num": 15
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "70",
            "95",
            "105",
            "114",
            "126",
            "152",
            "220",
            "230",
            "235",
            "247",
            "320",
            "356",
            "410",
            "441",
            "515",
            "530"
          ],
          "num": 16
        },
        {
          "qualified_names": [
            "72",
            "73",
            "74",
            "97",
            "107",
            "116",
            "128",
            "157",
            "158",
            "223",
            "224",
            "234",
            "250",
            "323",
            "359",
            "413",
            "444",
            "518",
            "534",
            "535",
            "536",
            "537",
            "538",
            "539",
            "540",
            "541",
            "542",
            "543",
            "544",
            "545",
            "546",
            "547",
            "548",
            "549",
            "550",
            "551",
            "552",
            "553",
            "554",
            "555",
            "556",
            "557",
            "558",
            "559",
            "560",
            "561",
            "562",
            "563",
            "564",
            "565",
            "566",
            "567",
            "568",
            "569",
            "570",
            "571",
            "572",
            "573",
            "574",
            "575",
            "576",
            "577",
            "578",
            "579",
            "580",
            "581",
            "582"
          ],
          "num": 67
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java\nindex 5c2102e..ed52ae7 100644\n--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java\n@@ -67,9 +67,11 @@\n     private final byte[]    recordBuf;\n     private int       assemLen;\n     private final byte[]    assemBuf;\n-    protected final TarBuffer buffer;\n     private int       longFileMode \u003d LONGFILE_ERROR;\n     private int       bigNumberMode \u003d BIGNUMBER_ERROR;\n+    private int recordsWritten;\n+    private final int recordsPerBlock;\n+    private final int recordSize;\n \n     private boolean closed \u003d false;\n \n@@ -92,7 +94,7 @@\n      * @param os the output stream to use\n      */\n     public TarArchiveOutputStream(OutputStream os) {\n-        this(os, TarBuffer.DEFAULT_BLKSIZE, TarBuffer.DEFAULT_RCDSIZE);\n+        this(os, TarConstants.DEFAULT_BLKSIZE, TarConstants.DEFAULT_RCDSIZE);\n     }\n \n     /**\n@@ -102,7 +104,7 @@\n      * @since 1.4\n      */\n     public TarArchiveOutputStream(OutputStream os, String encoding) {\n-        this(os, TarBuffer.DEFAULT_BLKSIZE, TarBuffer.DEFAULT_RCDSIZE, encoding);\n+        this(os, TarConstants.DEFAULT_BLKSIZE, TarConstants.DEFAULT_RCDSIZE, encoding);\n     }\n \n     /**\n@@ -111,7 +113,7 @@\n      * @param blockSize the block size to use\n      */\n     public TarArchiveOutputStream(OutputStream os, int blockSize) {\n-        this(os, blockSize, TarBuffer.DEFAULT_RCDSIZE);\n+        this(os, blockSize, TarConstants.DEFAULT_RCDSIZE);\n     }\n \n     /**\n@@ -123,7 +125,7 @@\n      */\n     public TarArchiveOutputStream(OutputStream os, int blockSize,\n                                   String encoding) {\n-        this(os, blockSize, TarBuffer.DEFAULT_RCDSIZE, encoding);\n+        this(os, blockSize, TarConstants.DEFAULT_RCDSIZE, encoding);\n     }\n \n     /**\n@@ -149,10 +151,11 @@\n         out \u003d new CountingOutputStream(os);\n         this.encoding \u003d ZipEncodingHelper.getZipEncoding(encoding);\n \n-        this.buffer \u003d new TarBuffer(out, blockSize, recordSize);\n         this.assemLen \u003d 0;\n         this.assemBuf \u003d new byte[recordSize];\n         this.recordBuf \u003d new byte[recordSize];\n+        this.recordSize \u003d recordSize;\n+        this.recordsPerBlock \u003d blockSize / recordSize;\n     }\n \n     /**\n@@ -217,7 +220,8 @@\n         }\n         writeEOFRecord();\n         writeEOFRecord();\n-        buffer.flushBlock();\n+        padAsNeeded();\n+        out.flush();\n         finished \u003d true;\n     }\n \n@@ -227,12 +231,11 @@\n      */\n     @Override\n     public void close() throws IOException {\n-        if(!finished) {\n+        if (!finished) {\n             finish();\n         }\n \n         if (!closed) {\n-            buffer.close();\n             out.close();\n             closed \u003d true;\n         }\n@@ -244,7 +247,7 @@\n      * @return The TarBuffer record size.\n      */\n     public int getRecordSize() {\n-        return buffer.getRecordSize();\n+        return this.recordSize;\n     }\n \n     /**\n@@ -317,7 +320,7 @@\n \n         entry.writeEntryHeader(recordBuf, encoding,\n                                bigNumberMode \u003d\u003d BIGNUMBER_STAR);\n-        buffer.writeRecord(recordBuf);\n+        writeRecord(recordBuf);\n \n         currBytes \u003d 0;\n \n@@ -353,7 +356,7 @@\n                 assemBuf[i] \u003d 0;\n             }\n \n-            buffer.writeRecord(assemBuf);\n+            writeRecord(assemBuf);\n \n             currBytes +\u003d assemLen;\n             assemLen \u003d 0;\n@@ -407,7 +410,7 @@\n                                  assemLen);\n                 System.arraycopy(wBuf, wOffset, recordBuf,\n                                  assemLen, aLen);\n-                buffer.writeRecord(recordBuf);\n+                writeRecord(recordBuf);\n \n                 currBytes +\u003d recordBuf.length;\n                 wOffset +\u003d aLen;\n@@ -438,7 +441,7 @@\n                 break;\n             }\n \n-            buffer.writeRecord(wBuf, wOffset);\n+            writeRecord(wBuf, wOffset);\n \n             int num \u003d recordBuf.length;\n \n@@ -512,7 +515,7 @@\n      */\n     private void writeEOFRecord() throws IOException {\n         Arrays.fill(recordBuf, (byte) 0);\n-        buffer.writeRecord(recordBuf);\n+        writeRecord(recordBuf);\n     }\n \n     @Override\n@@ -528,6 +531,55 @@\n         }\n         return new TarArchiveEntry(inputFile, entryName);\n     }\n+    \n+    /**\n+     * Write an archive record to the archive.\n+     *\n+     * @param record The record data to write to the archive.\n+     * @throws IOException on error\n+     */\n+    private void writeRecord(byte[] record) throws IOException {\n+        if (record.length !\u003d recordSize) {\n+            throw new IOException(\"record to write has length \u0027\"\n+                                  + record.length\n+                                  + \"\u0027 which is not the record size of \u0027\"\n+                                  + recordSize + \"\u0027\");\n+        }\n+\n+        out.write(record);\n+        recordsWritten++;\n+    }\n+    \n+    /**\n+     * Write an archive record to the archive, where the record may be\n+     * inside of a larger array buffer. The buffer must be \"offset plus\n+     * record size\" long.\n+     *\n+     * @param buf The buffer containing the record data to write.\n+     * @param offset The offset of the record data within buf.\n+     * @throws IOException on error\n+     */\n+    private void writeRecord(byte[] buf, int offset) throws IOException {\n+ \n+        if ((offset + recordSize) \u003e buf.length) {\n+            throw new IOException(\"record has length \u0027\" + buf.length\n+                                  + \"\u0027 with offset \u0027\" + offset\n+                                  + \"\u0027 which is less than the record size of \u0027\"\n+                                  + recordSize + \"\u0027\");\n+        }\n+\n+        out.write(buf, offset, recordSize);\n+        recordsWritten++;\n+    }\n+\n+    private void padAsNeeded() throws IOException {\n+        int start \u003d recordsWritten % recordsPerBlock;\n+        if (start !\u003d 0) {\n+            for (int i \u003d start; i \u003c recordsPerBlock; i++) {\n+                writeEOFRecord();\n+            }\n+        }\n+    }\n \n     private void addPaxHeadersForBigNumbers(Map\u003cString, String\u003e paxHeaders,\n                                             TarArchiveEntry entry) {\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldDeclaration [2909,2936]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldDeclaration [2941,2975]"
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [19257,19842]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [19852,20684]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [20690,20941]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [5760,5789]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [5798,5844]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [7888,7902]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [7911,7923]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ReturnStatement [8432,8455]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "FieldDeclaration [2801,2834]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [5555,5611]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [7775,7795]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [8074,8089]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ReturnStatement [8331,8361]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "METHOD_INVOCATION_RECEIVER [11577,11583]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "METHOD_INVOCATION_RECEIVER [12719,12725]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "METHOD_INVOCATION_RECEIVER [15026,15032]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "METHOD_INVOCATION_RECEIVER [15920,15926]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "METHOD_INVOCATION_RECEIVER [18772,18778]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java",
        "src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [],
          "num": 0
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "29"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "30",
            "31",
            "32",
            "33",
            "34",
            "35"
          ],
          "num": 6
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java b/src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java\nindex 5e5889c..d46d82c 100644\n--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java\n@@ -27,6 +27,12 @@\n // CheckStyle:InterfaceIsTypeCheck OFF (bc)\n public interface TarConstants {\n \n+    /** Default record size */\n+    int DEFAULT_RCDSIZE \u003d (512);\n+\n+    /** Default block size */\n+    int DEFAULT_BLKSIZE \u003d (DEFAULT_RCDSIZE * 20);\n+\n     /**\n      * GNU format as per before tar 1.12.\n      */\n",
      "operations": [
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java",
        "src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [
            "org.apache.commons.compress.utils.ArchiveUtils:isArrayZero:[byte[] a, int size]:boolean"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "233"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "233",
            "234",
            "235",
            "236",
            "237",
            "238",
            "239",
            "240",
            "241",
            "242",
            "243",
            "244",
            "245",
            "246",
            "247",
            "248",
            "249",
            "250"
          ],
          "num": 18
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java b/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java\nindex 8deca15..50b6d22 100644\n--- a/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java\n+++ b/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java\n@@ -230,5 +230,22 @@\n             final byte[] buffer2, final int offset2, final int length2){\n         return isEqual(buffer1, offset1, length1, buffer2, offset2, length2, true);\n     }\n-\n+    \n+    /**\n+     * Returns true if the first N bytes of an array are all zero\n+     * \n+     * @param a\n+     *            The array to check\n+     * @param size\n+     *            The number of characters to check (not the size of the array)\n+     * @return true if the first N bytes are zero\n+     */\n+    public static boolean isArrayZero(byte[] a, int size) {\n+        for (int i \u003d 0; i \u003c size; i++) {\n+            if (a[i] !\u003d 0) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n }\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [7719,8217]"
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/compress/utils/IOUtils.java",
        "src/main/java/org/apache/commons/compress/utils/IOUtils.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.compress.utils.IOUtils:copy:[final InputStream input, final OutputStream output, int buffersize]:long"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "org.apache.commons.compress.utils.IOUtils:skip:[InputStream input, long numToSkip]:long"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "72"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "73",
            "74",
            "75",
            "76",
            "77",
            "78",
            "79",
            "81",
            "82",
            "83",
            "84",
            "85",
            "86",
            "87",
            "88",
            "89",
            "90",
            "91",
            "92",
            "93",
            "94",
            "95",
            "96"
          ],
          "num": 23
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/compress/utils/IOUtils.java b/src/main/java/org/apache/commons/compress/utils/IOUtils.java\nindex a4355bc..5250605 100644\n--- a/src/main/java/org/apache/commons/compress/utils/IOUtils.java\n+++ b/src/main/java/org/apache/commons/compress/utils/IOUtils.java\n@@ -70,7 +70,30 @@\n         }\n         return count;\n     }\n+    \n+    /**\n+     * Skips the given number of bytes by repeatedly invoking skip on\n+     * the given input stream if necessary.\n+     *\n+     * \u003cp\u003eThis method will only skip less than the requested number of\n+     * bytes if the end of the input stream has been reached.\u003c/p\u003e\n \n+     * @param input stream to skip bytes in\n+     * @param numToSkip the number of bytes to skip\n+     * @return the number of bytes actually skipped\n+     * @throws IOException\n+     */\n+    public static long skip(InputStream input, long numToSkip) throws IOException {\n+        long available \u003d numToSkip;\n+        while (numToSkip \u003e 0) {\n+            long skipped \u003d input.skip(numToSkip);\n+            if (skipped \u003d\u003d 0) {\n+                break;\n+            }\n+            numToSkip -\u003d skipped;\n+        }\n+        return (available - numToSkip);\n+    }\n \n     // toByteArray(InputStream) copied from:\n     // commons/proper/io/trunk/src/main/java/org/apache/commons/io/IOUtils.java?revision\u003d1428941\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [2334,3140]"
        }
      ]
    }
  ],
  "inducing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [
        "src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java"
      ],
      "num": 1
    },
    "add_functions": {
      "qualified_names": [
        "org.apache.commons.compress.utils.ArchiveUtils:isArrayZero:[byte[] a, int size]:boolean",
        "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:getNextEntry:[]:ArchiveEntry",
        "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:consumeRemainderOfLastBlock:[]:void",
        "org.apache.commons.compress.utils.IOUtils:skip:[InputStream input, long numToSkip]:long",
        "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:writeRecord:[byte[] record]:void",
        "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:isEOFRecord:[byte[] record]:boolean",
        "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:padAsNeeded:[]:void",
        "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:readRecord:[]:byte[]",
        "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:tryToConsumeSecondEOFRecord:[]:void",
        "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:getCurrentEntry:[]:ArchiveEntry",
        "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:writeRecord:[byte[] buf, int offset]:void",
        "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:skipRecordPadding:[]:void"
      ],
      "num": 12
    },
    "delete_functions": {
      "qualified_names": [
        "org.apache.commons.compress.utils.IOUtils:copy:[final InputStream input, final OutputStream output, int buffersize]:long",
        "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:createArchiveEntry:[File inputFile, String entryName]:ArchiveEntry",
        "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:getCurrentEntry:[]:TarArchiveEntry"
      ],
      "num": 3
    }
  },
  "trigger_tests": [
    {
      "test_class": "org.apache.commons.compress.utils.IOUtilsTest",
      "test_function": "skipUsingRead",
      "assertion_line": "45",
      "exception": "junit.framework.AssertionFailedError",
      "message": "expected:\u003c10\u003e but was:\u003c0\u003e"
    },
    {
      "test_class": "org.apache.commons.compress.utils.IOUtilsTest",
      "test_function": "skipUsingSkipAndRead",
      "assertion_line": "58",
      "exception": "junit.framework.AssertionFailedError",
      "message": "expected:\u003c10\u003e but was:\u003c5\u003e"
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/compress/utils/IOUtils.java",
        "src/main/java/org/apache/commons/compress/utils/IOUtils.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.compress.utils.IOUtils:skip:[InputStream input, long numToSkip]:long",
            "org.apache.commons.compress.utils.IOUtils:copy:[final InputStream input, final OutputStream output]:long"
          ],
          "num": 2
        },
        {
          "qualified_names": [
            "org.apache.commons.compress.utils.IOUtils:skip:[InputStream input, long numToSkip]:long",
            "org.apache.commons.compress.utils.IOUtils:copy:[final InputStream input, final OutputStream output]:long"
          ],
          "num": 2
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "32",
            "49",
            "78",
            "95"
          ],
          "num": 4
        },
        {
          "qualified_names": [
            "33",
            "34",
            "35",
            "52",
            "82",
            "83",
            "84",
            "85",
            "103",
            "104",
            "105",
            "106",
            "107",
            "108",
            "109",
            "110",
            "111",
            "112",
            "113",
            "114"
          ],
          "num": 20
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/compress/utils/IOUtils.java b/src/main/java/org/apache/commons/compress/utils/IOUtils.java\nindex 8ce49d2..177d8f2 100644\n--- a/src/main/java/org/apache/commons/compress/utils/IOUtils.java\n+++ b/src/main/java/org/apache/commons/compress/utils/IOUtils.java\n@@ -30,6 +30,9 @@\n  */\n public final class IOUtils {\n \n+    private static final int COPY_BUF_SIZE \u003d 8024;\n+    private static final int SKIP_BUF_SIZE \u003d 4096;\n+\n     /** Private constructor to prevent instantiation of this utility class. */\n     private IOUtils(){\n     }\n@@ -46,7 +49,7 @@\n      *             if an error occurs\n      */\n     public static long copy(final InputStream input, final OutputStream output) throws IOException {\n-        return copy(input, output, 8024);\n+        return copy(input, output, COPY_BUF_SIZE);\n     }\n \n     /**\n@@ -76,6 +79,10 @@\n      * Skips the given number of bytes by repeatedly invoking skip on\n      * the given input stream if necessary.\n      *\n+     * \u003cp\u003eIn a case where the stream\u0027s skip() method returns 0 before\n+     * the requested number of bytes has been skip this implementation\n+     * will fall back to using the read() method.\u003c/p\u003e\n+     *\n      * \u003cp\u003eThis method will only skip less than the requested number of\n      * bytes if the end of the input stream has been reached.\u003c/p\u003e\n      *\n@@ -93,6 +100,18 @@\n             }\n             numToSkip -\u003d skipped;\n         }\n+            \n+        if (numToSkip \u003e 0) {\n+            byte[] skipBuf \u003d new byte[SKIP_BUF_SIZE];\n+            while (numToSkip \u003e 0) {\n+                int read \u003d readFully(input, skipBuf, 0,\n+                                     (int) Math.min(numToSkip, SKIP_BUF_SIZE));\n+                if (read \u003c 1) {\n+                    break;\n+                }\n+                numToSkip -\u003d read;\n+            }\n+        }\n         return available - numToSkip;\n     }\n \n",
      "operations": [
        {
          "type": "insert-node",
          "from": "",
          "to": "FieldDeclaration [1077,1123]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldDeclaration [1128,1174]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: private [1077,1084]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: static [1085,1091]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: final [1092,1097]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "PrimitiveType: int [1098,1101]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "VariableDeclarationFragment [1102,1122]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: COPY_BUF_SIZE [1102,1115]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [3462,3844]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003cp\u003eIn a case where the stream\u0027s skip() method returns 0 before [2604,2666]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: the requested number of bytes has been skip this implementation [2674,2737]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: will fall back to using the read() method.\u003c/p\u003e [2745,2791]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: COPY_BUF_SIZE [1742,1755]"
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  },
  "patch_changed_mths": {
    "qualified_names": [
      "org.apache.commons.compress.utils.IOUtils:skip(Ljava/io/InputStream;J)J:regression"
    ],
    "num": 1
  }
}