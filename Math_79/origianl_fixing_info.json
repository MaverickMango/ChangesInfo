{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "/home/liumengjiao/Desktop/CI/Benchmark/data/changesInfo/",
  "properties": {
    "trigger.tests": "org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate",
    "test.dir": "src/test/java",
    "clz.modified": "org.apache.commons.math.util.MathUtils",
    "src.dir": "src/main/java"
  },
  "timeoutSecond": 100,
  "proj": "Math",
  "id": "79",
  "workingDir": "../bugs/Math_79_buggy",
  "buggyCommit": "ca1ca9250b99dd49434468aa5530eb00b2f0680d",
  "inducingCommit": "dfd9f0676b690fe8c0928316b656ffb87d44cd31",
  "originalCommit": "a251f02aea1ab2095bb7bdc7970fdfc04ebd8b55",
  "bug_name": "Math_79",
  "derive": "defects4j",
  "original_fixing_commit": "138baec1c778c2ea1dc1a6efe6d5e76a3b072b1d",
  "buildFiles_changed": false,
  "regression": true,
  "inducing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/math/util/MathUtils.java",
        "src/java/org/apache/commons/math/util/MathUtils.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [
            "org.apache.commons.math.util.MathUtils:distance:[double[] p1, double[] p2]:double",
            "org.apache.commons.math.util.MathUtils:distance:[int[] p1, int[] p2]:double",
            "org.apache.commons.math.util.MathUtils:distanceInf:[double[] p1, double[] p2]:double",
            "org.apache.commons.math.util.MathUtils:distance1:[double[] p1, double[] p2]:double",
            "org.apache.commons.math.util.MathUtils:distance1:[int[] p1, int[] p2]:int",
            "org.apache.commons.math.util.MathUtils:distanceInf:[int[] p1, int[] p2]:int"
          ],
          "num": 6
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "1485"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "1486",
            "1487",
            "1488",
            "1489",
            "1490",
            "1491",
            "1492",
            "1493",
            "1494",
            "1495",
            "1496",
            "1497",
            "1498",
            "1499",
            "1500",
            "1501",
            "1502",
            "1503",
            "1504",
            "1505",
            "1506",
            "1507",
            "1508",
            "1509",
            "1510",
            "1511",
            "1512",
            "1513",
            "1514",
            "1515",
            "1516",
            "1517",
            "1518",
            "1519",
            "1520",
            "1521",
            "1522",
            "1523",
            "1524",
            "1525",
            "1526",
            "1527",
            "1528",
            "1529",
            "1530",
            "1531",
            "1532",
            "1533",
            "1534",
            "1535",
            "1536",
            "1537",
            "1538",
            "1539",
            "1540",
            "1541",
            "1542",
            "1543",
            "1544",
            "1545",
            "1546",
            "1547",
            "1548",
            "1549",
            "1550",
            "1551",
            "1552",
            "1553",
            "1554",
            "1555",
            "1556",
            "1557",
            "1558",
            "1559",
            "1560",
            "1561",
            "1562",
            "1563",
            "1564",
            "1565",
            "1566",
            "1567",
            "1568",
            "1569",
            "1570",
            "1571",
            "1572",
            "1573",
            "1574",
            "1575",
            "1576",
            "1577",
            "1578"
          ],
          "num": 93
        }
      ],
      "diff": "diff --git a/src/java/org/apache/commons/math/util/MathUtils.java b/src/java/org/apache/commons/math/util/MathUtils.java\nindex abb5e91..68f005b 100644\n--- a/src/java/org/apache/commons/math/util/MathUtils.java\n+++ b/src/java/org/apache/commons/math/util/MathUtils.java\n@@ -1483,4 +1483,97 @@\n \n     }\n \n+    /**\n+     * Calculates the L\u003csub\u003e1\u003c/sub\u003e (sum of abs) distance between two points.\n+     *\n+     * @param p1 the first point\n+     * @param p2 the second point\n+     * @return the L\u003csub\u003e1\u003c/sub\u003e distance between the two points\n+     */\n+    public static final double distance1(double[] p1, double[] p2) {\n+        double sum \u003d 0;\n+        for (int i \u003d 0; i \u003c p1.length; i++) {\n+            sum +\u003d Math.abs(p1[i] - p2[i]);\n+        }\n+        return sum;\n+    }\n+    \n+    /**\n+     * Calculates the L\u003csub\u003e1\u003c/sub\u003e (sum of abs) distance between two points.\n+     *\n+     * @param p1 the first point\n+     * @param p2 the second point\n+     * @return the L\u003csub\u003e1\u003c/sub\u003e distance between the two points\n+     */\n+    public static final int distance1(int[] p1, int[] p2) {\n+      int sum \u003d 0;\n+      for (int i \u003d 0; i \u003c p1.length; i++) {\n+          sum +\u003d Math.abs(p1[i] - p2[i]);\n+      }\n+      return sum;\n+    }\n+\n+    /**\n+     * Calculates the L\u003csub\u003e2\u003c/sub\u003e (Euclidean) distance between two points.\n+     *\n+     * @param p1 the first point\n+     * @param p2 the second point\n+     * @return the L\u003csub\u003e2\u003c/sub\u003e distance between the two points\n+     */\n+    public static final double distance(double[] p1, double[] p2) {\n+        double sum \u003d 0;\n+        for (int i \u003d 0; i \u003c p1.length; i++) {\n+            final double dp \u003d p1[i] - p2[i];\n+            sum +\u003d dp * dp;\n+        }\n+        return Math.sqrt(sum);\n+    }\n+    \n+    /**\n+     * Calculates the L\u003csub\u003e2\u003c/sub\u003e (Euclidean) distance between two points.\n+     *\n+     * @param p1 the first point\n+     * @param p2 the second point\n+     * @return the L\u003csub\u003e2\u003c/sub\u003e distance between the two points\n+     */\n+    public static final double distance(int[] p1, int[] p2) {\n+      int sum \u003d 0;\n+      for (int i \u003d 0; i \u003c p1.length; i++) {\n+          final int dp \u003d p1[i] - p2[i];\n+          sum +\u003d dp * dp;\n+      }\n+      return Math.sqrt(sum);\n+    }\n+    \n+    /**\n+     * Calculates the L\u003csub\u003e\u0026infin;\u003c/sub\u003e (max of abs) distance between two points.\n+     *\n+     * @param p1 the first point\n+     * @param p2 the second point\n+     * @return the L\u003csub\u003e\u0026infin;\u003c/sub\u003e distance between the two points\n+     */\n+    public static final double distanceInf(double[] p1, double[] p2) {\n+        double max \u003d 0;\n+        for (int i \u003d 0; i \u003c p1.length; i++) {\n+            max \u003d Math.max(max, Math.abs(p1[i] - p2[i]));\n+        }\n+        return max;\n+    }\n+    \n+    /**\n+     * Calculates the L\u003csub\u003e\u0026infin;\u003c/sub\u003e (max of abs) distance between two points.\n+     *\n+     * @param p1 the first point\n+     * @param p2 the second point\n+     * @return the L\u003csub\u003e\u0026infin;\u003c/sub\u003e distance between the two points\n+     */\n+    public static final int distanceInf(int[] p1, int[] p2) {\n+        int max \u003d 0;\n+        for (int i \u003d 0; i \u003c p1.length; i++) {\n+            max \u003d Math.max(max, Math.abs(p1[i] - p2[i]));\n+        }\n+        return max;\n+    }\n+\n+    \n }\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [50454,50901]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [50911,51336]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [51342,51827]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [51837,52298]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [52308,52783]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [52793,53256]"
        }
      ]
    }
  ],
  "inducing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [
        "org.apache.commons.math.util.MathUtils:distance1:[double[] p1, double[] p2]:double",
        "org.apache.commons.math.util.MathUtils:distance:[int[] p1, int[] p2]:double",
        "org.apache.commons.math.util.MathUtils:distance1:[int[] p1, int[] p2]:int",
        "org.apache.commons.math.util.MathUtils:distance:[double[] p1, double[] p2]:double",
        "org.apache.commons.math.util.MathUtils:distanceInf:[int[] p1, int[] p2]:int",
        "org.apache.commons.math.util.MathUtils:distanceInf:[double[] p1, double[] p2]:double"
      ],
      "num": 6
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  },
  "trigger_tests": [
    {
      "test_class": "org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest",
      "test_function": "testPerformClusterAnalysisDegenerate",
      "assertion_line": "109",
      "exception": "java.lang.NullPointerException",
      "message": ""
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/math/util/MathUtils.java",
        "src/main/java/org/apache/commons/math/util/MathUtils.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.math.util.MathUtils:distance:[int[] p1, int[] p2]:double"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "org.apache.commons.math.util.MathUtils:distance:[int[] p1, int[] p2]:double"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "1624",
            "1626"
          ],
          "num": 2
        },
        {
          "qualified_names": [
            "1624",
            "1626"
          ],
          "num": 2
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/math/util/MathUtils.java b/src/main/java/org/apache/commons/math/util/MathUtils.java\nindex 46368dc..ad77a56 100644\n--- a/src/main/java/org/apache/commons/math/util/MathUtils.java\n+++ b/src/main/java/org/apache/commons/math/util/MathUtils.java\n@@ -1621,9 +1621,9 @@\n      * @return the L\u003csub\u003e2\u003c/sub\u003e distance between the two points\n      */\n     public static double distance(int[] p1, int[] p2) {\n-      int sum \u003d 0;\n+      double sum \u003d 0;\n       for (int i \u003d 0; i \u003c p1.length; i++) {\n-          final int dp \u003d p1[i] - p2[i];\n+          final double dp \u003d p1[i] - p2[i];\n           sum +\u003d dp * dp;\n       }\n       return Math.sqrt(sum);\n",
      "operations": [
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  },
  "patch_changed_mths": {
    "qualified_names": [
      "org.apache.commons.math.util.MathUtils:distance([I[I)D"
    ],
    "num": 1
  }
}