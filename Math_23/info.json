{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "data/changesInfo/",
  "timeoutSecond": 300,
  "proj": "Math",
  "id": "23",
  "workingDir": "../bugs/Math_23_buggy",
  "inducingCommit": "36d811b2d4cfe1b867823bd60ccca25abbc80b46",
  "originalCommit": "b5839871867024885927edc2b087e0c718fb73b3",
  "bug_name": "Math_23",
  "derive": "defects4j",
  "original_fixing_commit": "f1b04e990f4fc86544b6230fab1aa8ecfb74fbb1",
  "buildFiles_changed": false,
  "inducing_changes": [],
  "inducing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  },
  "trigger_tests": [
    {
      "test_class": "org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest",
      "test_function": "testAckley",
      "exception": "junit.framework.AssertionFailedError",
      "message": "expected:\u003c0.0\u003e but was:\u003c1.047765607609108E-8\u003e"
    },
    {
      "test_class": "org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest",
      "test_function": "testDiffPow",
      "exception": "org.apache.commons.math3.exception.TooManyEvaluationsException",
      "message": "illegal state: maximal count (12,000) exceeded: evaluations"
    },
    {
      "test_class": "org.apache.commons.math3.util.FastMathTest",
      "test_function": "checkMissingFastMathClasses",
      "exception": "junit.framework.AssertionFailedError",
      "message": "FastMath should implement all StrictMath methods"
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java",
        "src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "doOptimize"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "doOptimize",
            "best"
          ],
          "num": 2
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "142",
            "229",
            "266"
          ],
          "num": 3
        },
        {
          "qualified_names": [
            "143",
            "227",
            "228",
            "229",
            "230",
            "231",
            "235",
            "272",
            "273",
            "274",
            "275",
            "276",
            "281",
            "282",
            "283",
            "284",
            "285",
            "286",
            "287",
            "288",
            "289",
            "290",
            "291",
            "292",
            "293",
            "294",
            "295",
            "296",
            "297",
            "298",
            "299",
            "300",
            "301",
            "302",
            "303",
            "304",
            "305",
            "306",
            "307",
            "308"
          ],
          "num": 40
        }
      ],
      "diff": "diff -u -r data/changesInfo//Math_23/properties/modified_classes/inducing/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java data/changesInfo//Math_23/cleaned/fixing/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java\n--- data/changesInfo//Math_23/properties/modified_classes/inducing/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java\t2023-07-25 20:54:35.739488399 +0800\n+++ data/changesInfo//Math_23/cleaned/fixing/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java\t2023-07-25 20:57:01.041923685 +0800\n@@ -140,6 +140,7 @@\n         UnivariatePointValuePair previous \u003d null;\n         UnivariatePointValuePair current\n             \u003d new UnivariatePointValuePair(x, isMinim ? fx : -fx);\n+        UnivariatePointValuePair best \u003d current;\n \n         int iter \u003d 0;\n         while (true) {\n@@ -223,10 +224,15 @@\n                 // User-defined convergence checker.\n                 previous \u003d current;\n                 current \u003d new UnivariatePointValuePair(u, isMinim ? fu : -fu);\n+                best \u003d best(best,\n+                            best(current,\n+                                 previous,\n+                                 isMinim),\n+                            isMinim);\n \n                 if (checker !\u003d null) {\n                     if (checker.converged(iter, previous, current)) {\n-                        return current;\n+                        return best;\n                     }\n                 }\n \n@@ -263,9 +269,41 @@\n                     }\n                 }\n             } else { // Default termination (Brent\u0027s criterion).\n-                return current;\n+                return best \u003d best(best,\n+                        best(current,\n+                                previous,\n+                                isMinim),\n+                        isMinim);\n             }\n             ++iter;\n         }\n     }\n+\n+    /**\n+     * Selects the best of two points.\n+     *\n+     * @param a Point and value.\n+     * @param b Point and value.\n+     * @param isMinim {@code true} if the selected point must be the one with\n+     * the lowest value.\n+     * @return the best point, or {@code null} if {@code a} and {@code b} are\n+     * both {@code null}. When {@code a} and {@code b} have the same function\n+     * value, {@code a} is returned.\n+     */\n+    private UnivariatePointValuePair best(UnivariatePointValuePair a,\n+                                          UnivariatePointValuePair b,\n+                                          boolean isMinim) {\n+        if (a \u003d\u003d null) {\n+            return b;\n+        }\n+        if (b \u003d\u003d null) {\n+            return a;\n+        }\n+\n+        if (isMinim) {\n+            return a.getValue() \u003c\u003d b.getValue() ? a : b;\n+        } else {\n+            return a.getValue() \u003e\u003d b.getValue() ? a : b;\n+        }\n+    }\n }\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [9834,10739]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "VariableDeclarationStatement [5242,5282]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SimpleType [5242,5266]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "VariableDeclarationFragment [5267,5281]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: best [5267,5271]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [8109,8292]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ReturnStatement [9598,9778]"
        },
        {
          "type": "delete-node",
          "from": "ReturnStatement [9352,9367]",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [
        "best"
      ],
      "num": 1
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  }
}