diff -u -r data/changesInfo//Math_23/properties/modified_classes/inducing/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java data/changesInfo//Math_23/cleaned/fixing/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java
--- data/changesInfo//Math_23/properties/modified_classes/inducing/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	2023-07-25 05:54:35.739488399 -0700
+++ data/changesInfo//Math_23/cleaned/fixing/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	2023-07-25 05:57:01.041923685 -0700
@@ -140,6 +140,7 @@
         UnivariatePointValuePair previous = null;
         UnivariatePointValuePair current
             = new UnivariatePointValuePair(x, isMinim ? fx : -fx);
+        UnivariatePointValuePair best = current;
 
         int iter = 0;
         while (true) {
@@ -223,10 +224,15 @@
                 // User-defined convergence checker.
                 previous = current;
                 current = new UnivariatePointValuePair(u, isMinim ? fu : -fu);
+                best = best(best,
+                            best(current,
+                                 previous,
+                                 isMinim),
+                            isMinim);
 
                 if (checker != null) {
                     if (checker.converged(iter, previous, current)) {
-                        return current;
+                        return best;
                     }
                 }
 
@@ -263,9 +269,41 @@
                     }
                 }
             } else { // Default termination (Brent's criterion).
-                return current;
+                return best = best(best,
+                        best(current,
+                                previous,
+                                isMinim),
+                        isMinim);
             }
             ++iter;
         }
     }
+
+    /**
+     * Selects the best of two points.
+     *
+     * @param a Point and value.
+     * @param b Point and value.
+     * @param isMinim {@code true} if the selected point must be the one with
+     * the lowest value.
+     * @return the best point, or {@code null} if {@code a} and {@code b} are
+     * both {@code null}. When {@code a} and {@code b} have the same function
+     * value, {@code a} is returned.
+     */
+    private UnivariatePointValuePair best(UnivariatePointValuePair a,
+                                          UnivariatePointValuePair b,
+                                          boolean isMinim) {
+        if (a == null) {
+            return b;
+        }
+        if (b == null) {
+            return a;
+        }
+
+        if (isMinim) {
+            return a.getValue() <= b.getValue() ? a : b;
+        } else {
+            return a.getValue() >= b.getValue() ? a : b;
+        }
+    }
 }
Only in data/changesInfo//Math_23/properties/modified_classes/inducing/src: test
