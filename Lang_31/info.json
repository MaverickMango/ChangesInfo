{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "data/changesInfo/",
  "timeoutSecond": 300,
  "proj": "Lang",
  "id": "31",
  "workingDir": "../bugs/Lang_31_buggy",
  "inducingCommit": "4bdc5d864104f29b4ebfe0105b75002db9f58f07",
  "originalCommit": "29a7fd5e735ab0fb3c4196a24e977a643eedc004",
  "bug_name": "Lang_31",
  "derive": "defects4j",
  "original_fixing_commit": "38bf7048571f3bc8dd34d14691906426444e4381",
  "buildFiles_changed": false,
  "inducing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/lang/StringUtils.java",
        "src/java/org/apache/commons/lang/StringUtils.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [
            "containsAny",
            "containsAny"
          ],
          "num": 2
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "43",
            "44",
            "1139"
          ],
          "num": 3
        },
        {
          "qualified_names": [
            "43",
            "44",
            "1140",
            "1141",
            "1142",
            "1143",
            "1144",
            "1145",
            "1146",
            "1147",
            "1148",
            "1149",
            "1150",
            "1151",
            "1152",
            "1153",
            "1154",
            "1155",
            "1156",
            "1157",
            "1158",
            "1159",
            "1160",
            "1161",
            "1162",
            "1163",
            "1164",
            "1165",
            "1166",
            "1167",
            "1168",
            "1169",
            "1170",
            "1171",
            "1172",
            "1173",
            "1174",
            "1175",
            "1176",
            "1177",
            "1178",
            "1179",
            "1180",
            "1181",
            "1182",
            "1183",
            "1184",
            "1185",
            "1186",
            "1187",
            "1188",
            "1189",
            "1190",
            "1191",
            "1192",
            "1193",
            "1194",
            "1195",
            "1196",
            "1197",
            "1198",
            "1199",
            "1200",
            "1201",
            "1202",
            "1203",
            "1204",
            "1205",
            "1206",
            "1207",
            "1208",
            "1209",
            "1210",
            "1211"
          ],
          "num": 74
        }
      ],
      "diff": "diff --git a/src/java/org/apache/commons/lang/StringUtils.java b/src/java/org/apache/commons/lang/StringUtils.java\nindex 57c36c6..ab1422d 100644\n--- a/src/java/org/apache/commons/lang/StringUtils.java\n+++ b/src/java/org/apache/commons/lang/StringUtils.java\n@@ -40,8 +40,8 @@\n  *      - null-safe index-of checks\n  *  \u003cli\u003e\u003cb\u003eIndexOfAny/LastIndexOfAny/IndexOfAnyBut/LastIndexOfAnyBut\u003c/b\u003e\n  *      - index-of any of a set of Strings\u003c/li\u003e\n- *  \u003cli\u003e\u003cb\u003eContainsOnly/ContainsNone\u003c/b\u003e\n- *      - does String contains only/none of these characters\u003c/li\u003e\n+ *  \u003cli\u003e\u003cb\u003eContainsOnly/ContainsNone/ContainsAny\u003c/b\u003e\n+ *      - does String contains only/none/any of these characters\u003c/li\u003e\n  *  \u003cli\u003e\u003cb\u003eSubstring/Left/Right/Mid\u003c/b\u003e\n  *      - null-safe substring extractions\u003c/li\u003e\n  *  \u003cli\u003e\u003cb\u003eSubstringBefore/SubstringAfter/SubstringBetween\u003c/b\u003e\n@@ -1137,6 +1137,78 @@\n         return indexOfAny(str, searchChars.toCharArray());\n     }\n \n+    // ContainsAny\n+    //-----------------------------------------------------------------------\n+    /**\n+     * \u003cp\u003eChecks if the String contains any character in the given\n+     * set of characters.\u003c/p\u003e\n+     *\n+     * \u003cp\u003eA \u003ccode\u003enull\u003c/code\u003e String will return \u003ccode\u003efalse\u003c/code\u003e.\n+     * A \u003ccode\u003enull\u003c/code\u003e or zero length search array will return \u003ccode\u003efalse\u003c/code\u003e.\u003c/p\u003e\n+     *\n+     * \u003cpre\u003e\n+     * StringUtils.containsAny(null, *)                \u003d false\n+     * StringUtils.containsAny(\"\", *)                  \u003d false\n+     * StringUtils.containsAny(*, null)                \u003d false\n+     * StringUtils.containsAny(*, [])                  \u003d false\n+     * StringUtils.containsAny(\"zzabyycdxx\",[\u0027z\u0027,\u0027a\u0027]) \u003d true\n+     * StringUtils.containsAny(\"zzabyycdxx\",[\u0027b\u0027,\u0027y\u0027]) \u003d true\n+     * StringUtils.containsAny(\"aba\", [\u0027z\u0027])           \u003d false\n+     * \u003c/pre\u003e\n+     *\n+     * @param str  the String to check, may be null\n+     * @param searchChars  the chars to search for, may be null\n+     * @return the \u003ccode\u003etrue\u003c/code\u003e if any of the chars are found,\n+     * \u003ccode\u003efalse\u003c/code\u003e if no match or null input\n+     * @since 2.4\n+     */\n+    public static boolean containsAny(String str, char[] searchChars) {\n+        if (str \u003d\u003d null || str.length() \u003d\u003d 0 ||\n+            searchChars \u003d\u003d null || searchChars.length \u003d\u003d 0) {\n+            return false;\n+        }\n+        for (int i \u003d 0; i \u003c str.length(); i++) {\n+            char ch \u003d str.charAt(i);\n+            for (int j \u003d 0; j \u003c searchChars.length; j++) {\n+                if (searchChars[j] \u003d\u003d ch) {\n+                    return true;\n+                }\n+            }\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * \u003cp\u003eChecks if the String contains any character in the given\n+     * set of characters.\u003c/p\u003e\n+     *\n+     * \u003cp\u003eA \u003ccode\u003enull\u003c/code\u003e String will return \u003ccode\u003efalse\u003c/code\u003e.\n+     * A \u003ccode\u003enull\u003c/code\u003e search string will return \u003ccode\u003efalse\u003c/code\u003e.\u003c/p\u003e\n+     *\n+     * \u003cpre\u003e\n+     * StringUtils.containsAny(null, *)            \u003d false\n+     * StringUtils.containsAny(\"\", *)              \u003d false\n+     * StringUtils.containsAny(*, null)            \u003d false\n+     * StringUtils.containsAny(*, \"\")              \u003d false\n+     * StringUtils.containsAny(\"zzabyycdxx\", \"za\") \u003d true\n+     * StringUtils.containsAny(\"zzabyycdxx\", \"by\") \u003d true\n+     * StringUtils.containsAny(\"aba\",\"z\")          \u003d false\n+     * \u003c/pre\u003e\n+     *\n+     * @param str  the String to check, may be null\n+     * @param searchChars  the chars to search for, may be null\n+     * @return the \u003ccode\u003etrue\u003c/code\u003e if any of the chars are found,\n+     * \u003ccode\u003efalse\u003c/code\u003e if no match or null input\n+     * @since 2.4\n+     */\n+    public static boolean containsAny(String str, String searchChars) {\n+        if (searchChars \u003d\u003d null) {\n+            return false;\n+        } else {\n+            return containsAny(str, searchChars.toCharArray());\n+        }\n+    }\n+\n     // IndexOfAnyBut chars\n     //-----------------------------------------------------------------------\n     /**\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [43776,45295]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [45301,46498]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        }
      ]
    }
  ],
  "inducing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [
        "containsAny"
      ],
      "num": 1
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  },
  "trigger_tests": [
    {
      "test_class": "org.apache.commons.lang.CharUtilsPerfTest",
      "exception": "java.lang.Exception",
      "message": "No runnable methods"
    },
    {
      "test_class": "org.apache.commons.lang.EntitiesPerformanceTest",
      "test_function": "testEscapePrimitive",
      "exception": "java.lang.NullPointerExceptio",
      "message": ""
    },
    {
      "test_class": "org.apache.commons.lang.EntitiesPerformanceTest",
      "test_function": "testEscapeBinary",
      "exception": "java.lang.NullPointerExceptio",
      "message": ""
    },
    {
      "test_class": "org.apache.commons.lang.EntitiesPerformanceTest",
      "test_function": "testEscapeLookup",
      "exception": "java.lang.NullPointerExceptio",
      "message": ""
    },
    {
      "test_class": "org.apache.commons.lang.EntitiesPerformanceTest",
      "test_function": "testUnescapeHash",
      "exception": "java.lang.NullPointerExceptio",
      "message": ""
    },
    {
      "test_class": "org.apache.commons.lang.EntitiesPerformanceTest",
      "test_function": "testUnescapeTree",
      "exception": "java.lang.NullPointerExceptio",
      "message": ""
    },
    {
      "test_class": "org.apache.commons.lang.EntitiesPerformanceTest",
      "test_function": "testUnescapeBinary",
      "exception": "java.lang.NullPointerExceptio",
      "message": ""
    },
    {
      "test_class": "org.apache.commons.lang.EntitiesPerformanceTest",
      "test_function": "testEscapeHash",
      "exception": "java.lang.NullPointerExceptio",
      "message": ""
    },
    {
      "test_class": "org.apache.commons.lang.EntitiesPerformanceTest",
      "test_function": "testEscapeTree",
      "exception": "java.lang.NullPointerExceptio",
      "message": ""
    },
    {
      "test_class": "org.apache.commons.lang.EntitiesPerformanceTest",
      "test_function": "testLookupBinary",
      "exception": "java.lang.NullPointerExceptio",
      "message": ""
    },
    {
      "test_class": "org.apache.commons.lang.builder.ShortPrefixToStringStyleTest",
      "test_function": "testPerson",
      "exception": "junit.framework.ComparisonFailure",
      "message": "expected:\u003c[org.apache.commons.lang.builder.ToStringStyleTest$]Person[name\u003dJohn Q. ...\u003e but was:\u003c[ToStringStyleTest.]Person[name\u003dJohn Q. ...\u003e"
    },
    {
      "test_class": "org.apache.commons.lang.builder.ToStringBuilderTest",
      "test_function": "testReflectionHierarchyArrayList",
      "exception": "junit.framework.ComparisonFailure",
      "message": "expected:\u003c...1a14a4[elementData\u003d{[\u003cnull\u003e,\u003cnull\u003e,\u003cnull\u003e,\u003cnull\u003e,\u003cnull\u003e,\u003cnull\u003e,\u003cnull\u003e,\u003cnull\u003e,\u003cnull\u003e,\u003cnull\u003e]},size\u003d0,modCount\u003d0]\u003e but was:\u003c...1a14a4[elementData\u003d{[]},size\u003d0,modCount\u003d0]\u003e"
    },
    {
      "test_class": "org.apache.commons.lang.enum.EnumTest",
      "test_function": "testColorEnumEqualsWithDifferentClassLoaders",
      "exception": "junit.framework.AssertionFailedError",
      "message": "EnumTest ClassLoader \u003d org.apache.tools.ant.loader.AntClassLoader5"
    },
    {
      "test_class": "org.apache.commons.lang.enums.EnumTest",
      "test_function": "testColorEnumEqualsWithDifferentClassLoaders",
      "exception": "junit.framework.AssertionFailedError",
      "message": "EnumTest ClassLoader \u003d org.apache.tools.ant.loader.AntClassLoader5"
    },
    {
      "test_class": "org.apache.commons.lang.time.FastDateFormatTest",
      "test_function": "testFormat",
      "exception": "junit.framework.ComparisonFailure",
      "message": "expected:\u003cAD AD AD AD 2003 [2003 03 20]03 January Jan 01 1 ...\u003e but was:\u003cAD AD AD AD 2003 [03 03 ]03 January Jan 01 1 ...\u003e"
    }
  ],
  "fixing_changes": [],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  }
}