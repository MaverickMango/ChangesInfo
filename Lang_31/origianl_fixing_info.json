{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "/home/liumengjiao/Desktop/CI/Benchmark/data/changesInfo/",
  "properties": {
    "trigger.tests": "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAnyCharArrayWithSupplementaryChars,org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAnyStringWithSupplementaryChars",
    "test.dir": "src/test/java",
    "clz.modified": "org.apache.commons.lang3.StringUtils",
    "src.dir": "src/main/java"
  },
  "timeoutSecond": 100,
  "proj": "Lang",
  "id": "31",
  "workingDir": "../bugs/Lang_31_buggy",
  "buggyCommit": "0cc451d5e5cb565eb7311308466f487bc534ebaf",
  "inducingCommit": "4bdc5d864104f29b4ebfe0105b75002db9f58f07",
  "originalCommit": "29a7fd5e735ab0fb3c4196a24e977a643eedc004",
  "bug_name": "Lang_31",
  "derive": "defects4j",
  "original_fixing_commit": "38bf7048571f3bc8dd34d14691906426444e4381",
  "buildFiles_changed": false,
  "regression": true,
  "inducing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/lang/StringUtils.java",
        "src/java/org/apache/commons/lang/StringUtils.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [
            "org.apache.commons.lang.StringUtils:containsAny:[String str, char[] searchChars]:boolean",
            "org.apache.commons.lang.StringUtils:containsAny:[String str, String searchChars]:boolean"
          ],
          "num": 2
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "43",
            "44",
            "1139"
          ],
          "num": 3
        },
        {
          "qualified_names": [
            "43",
            "44",
            "1140",
            "1141",
            "1142",
            "1143",
            "1144",
            "1145",
            "1146",
            "1147",
            "1148",
            "1149",
            "1150",
            "1151",
            "1152",
            "1153",
            "1154",
            "1155",
            "1156",
            "1157",
            "1158",
            "1159",
            "1160",
            "1161",
            "1162",
            "1163",
            "1164",
            "1165",
            "1166",
            "1167",
            "1168",
            "1169",
            "1170",
            "1171",
            "1172",
            "1173",
            "1174",
            "1175",
            "1176",
            "1177",
            "1178",
            "1179",
            "1180",
            "1181",
            "1182",
            "1183",
            "1184",
            "1185",
            "1186",
            "1187",
            "1188",
            "1189",
            "1190",
            "1191",
            "1192",
            "1193",
            "1194",
            "1195",
            "1196",
            "1197",
            "1198",
            "1199",
            "1200",
            "1201",
            "1202",
            "1203",
            "1204",
            "1205",
            "1206",
            "1207",
            "1208",
            "1209",
            "1210",
            "1211"
          ],
          "num": 74
        }
      ],
      "diff": "diff --git a/src/java/org/apache/commons/lang/StringUtils.java b/src/java/org/apache/commons/lang/StringUtils.java\nindex 57c36c6..ab1422d 100644\n--- a/src/java/org/apache/commons/lang/StringUtils.java\n+++ b/src/java/org/apache/commons/lang/StringUtils.java\n@@ -40,8 +40,8 @@\n  *      - null-safe index-of checks\n  *  \u003cli\u003e\u003cb\u003eIndexOfAny/LastIndexOfAny/IndexOfAnyBut/LastIndexOfAnyBut\u003c/b\u003e\n  *      - index-of any of a set of Strings\u003c/li\u003e\n- *  \u003cli\u003e\u003cb\u003eContainsOnly/ContainsNone\u003c/b\u003e\n- *      - does String contains only/none of these characters\u003c/li\u003e\n+ *  \u003cli\u003e\u003cb\u003eContainsOnly/ContainsNone/ContainsAny\u003c/b\u003e\n+ *      - does String contains only/none/any of these characters\u003c/li\u003e\n  *  \u003cli\u003e\u003cb\u003eSubstring/Left/Right/Mid\u003c/b\u003e\n  *      - null-safe substring extractions\u003c/li\u003e\n  *  \u003cli\u003e\u003cb\u003eSubstringBefore/SubstringAfter/SubstringBetween\u003c/b\u003e\n@@ -1137,6 +1137,78 @@\n         return indexOfAny(str, searchChars.toCharArray());\n     }\n \n+    // ContainsAny\n+    //-----------------------------------------------------------------------\n+    /**\n+     * \u003cp\u003eChecks if the String contains any character in the given\n+     * set of characters.\u003c/p\u003e\n+     *\n+     * \u003cp\u003eA \u003ccode\u003enull\u003c/code\u003e String will return \u003ccode\u003efalse\u003c/code\u003e.\n+     * A \u003ccode\u003enull\u003c/code\u003e or zero length search array will return \u003ccode\u003efalse\u003c/code\u003e.\u003c/p\u003e\n+     *\n+     * \u003cpre\u003e\n+     * StringUtils.containsAny(null, *)                \u003d false\n+     * StringUtils.containsAny(\"\", *)                  \u003d false\n+     * StringUtils.containsAny(*, null)                \u003d false\n+     * StringUtils.containsAny(*, [])                  \u003d false\n+     * StringUtils.containsAny(\"zzabyycdxx\",[\u0027z\u0027,\u0027a\u0027]) \u003d true\n+     * StringUtils.containsAny(\"zzabyycdxx\",[\u0027b\u0027,\u0027y\u0027]) \u003d true\n+     * StringUtils.containsAny(\"aba\", [\u0027z\u0027])           \u003d false\n+     * \u003c/pre\u003e\n+     *\n+     * @param str  the String to check, may be null\n+     * @param searchChars  the chars to search for, may be null\n+     * @return the \u003ccode\u003etrue\u003c/code\u003e if any of the chars are found,\n+     * \u003ccode\u003efalse\u003c/code\u003e if no match or null input\n+     * @since 2.4\n+     */\n+    public static boolean containsAny(String str, char[] searchChars) {\n+        if (str \u003d\u003d null || str.length() \u003d\u003d 0 ||\n+            searchChars \u003d\u003d null || searchChars.length \u003d\u003d 0) {\n+            return false;\n+        }\n+        for (int i \u003d 0; i \u003c str.length(); i++) {\n+            char ch \u003d str.charAt(i);\n+            for (int j \u003d 0; j \u003c searchChars.length; j++) {\n+                if (searchChars[j] \u003d\u003d ch) {\n+                    return true;\n+                }\n+            }\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * \u003cp\u003eChecks if the String contains any character in the given\n+     * set of characters.\u003c/p\u003e\n+     *\n+     * \u003cp\u003eA \u003ccode\u003enull\u003c/code\u003e String will return \u003ccode\u003efalse\u003c/code\u003e.\n+     * A \u003ccode\u003enull\u003c/code\u003e search string will return \u003ccode\u003efalse\u003c/code\u003e.\u003c/p\u003e\n+     *\n+     * \u003cpre\u003e\n+     * StringUtils.containsAny(null, *)            \u003d false\n+     * StringUtils.containsAny(\"\", *)              \u003d false\n+     * StringUtils.containsAny(*, null)            \u003d false\n+     * StringUtils.containsAny(*, \"\")              \u003d false\n+     * StringUtils.containsAny(\"zzabyycdxx\", \"za\") \u003d true\n+     * StringUtils.containsAny(\"zzabyycdxx\", \"by\") \u003d true\n+     * StringUtils.containsAny(\"aba\",\"z\")          \u003d false\n+     * \u003c/pre\u003e\n+     *\n+     * @param str  the String to check, may be null\n+     * @param searchChars  the chars to search for, may be null\n+     * @return the \u003ccode\u003etrue\u003c/code\u003e if any of the chars are found,\n+     * \u003ccode\u003efalse\u003c/code\u003e if no match or null input\n+     * @since 2.4\n+     */\n+    public static boolean containsAny(String str, String searchChars) {\n+        if (searchChars \u003d\u003d null) {\n+            return false;\n+        } else {\n+            return containsAny(str, searchChars.toCharArray());\n+        }\n+    }\n+\n     // IndexOfAnyBut chars\n     //-----------------------------------------------------------------------\n     /**\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [43776,45295]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [45301,46498]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        }
      ]
    }
  ],
  "inducing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [
        "org.apache.commons.lang.StringUtils:containsAny:[String str, String searchChars]:boolean",
        "org.apache.commons.lang.StringUtils:containsAny:[String str, char[] searchChars]:boolean"
      ],
      "num": 2
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  },
  "trigger_tests": [
    {
      "test_class": "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest",
      "test_function": "testContainsAnyCharArrayWithSupplementaryChars",
      "assertion_line": "696",
      "exception": "junit.framework.AssertionFailedError",
      "message": "expected:\u003cfalse\u003e but was:\u003ctrue\u003e"
    },
    {
      "test_class": "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest",
      "test_function": "testContainsAnyStringWithSupplementaryChars",
      "assertion_line": "680",
      "exception": "junit.framework.AssertionFailedError",
      "message": "expected:\u003cfalse\u003e but was:\u003ctrue\u003e"
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/lang3/StringUtils.java",
        "src/main/java/org/apache/commons/lang3/StringUtils.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.lang3.StringUtils:containsAny:[CharSequence cs, char[] searchChars]:boolean"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "org.apache.commons.lang3.StringUtils:containsAny:[CharSequence cs, char[] searchChars]:boolean"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "1440",
            "1441",
            "1442",
            "1443",
            "1444",
            "1445",
            "1446",
            "1447",
            "1448",
            "1449",
            "1450",
            "1451",
            "1452",
            "1453"
          ],
          "num": 14
        },
        {
          "qualified_names": [
            "1440",
            "1441",
            "1442",
            "1443",
            "1444",
            "1445",
            "1446",
            "1447",
            "1448",
            "1449",
            "1450",
            "1451",
            "1452",
            "1453",
            "1454",
            "1455",
            "1456",
            "1457",
            "1458",
            "1459",
            "1460",
            "1461",
            "1462",
            "1463",
            "1464",
            "1465"
          ],
          "num": 26
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex e60c449..4aac02d 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,20 +1437,32 @@\n      * \u003ccode\u003efalse\u003c/code\u003e if no match or null input\n      * @since 2.4\n      */\n-    public static boolean containsAny(CharSequence cs, char[] searchChars) {\n-        if (cs \u003d\u003d null || cs.length() \u003d\u003d 0 || searchChars \u003d\u003d null || searchChars.length \u003d\u003d 0) {\n-            return false;\n-        }\n-        for (int i \u003d 0; i \u003c cs.length(); i++) {\n-            char ch \u003d cs.charAt(i);\n-            for (int j \u003d 0; j \u003c searchChars.length; j++) {\n-                if (searchChars[j] \u003d\u003d ch) {\n-                    return true;\n-                }\n-            }\n-        }\n-        return false;\n-    }\n+\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+\t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n+\t\t\treturn false;\n+\t\t}\n+\t\tint csLength \u003d cs.length();\n+\t\tint searchLength \u003d searchChars.length;\n+\t\tint csLastIndex \u003d csLength - 1;\n+\t\tint searchLastIndex \u003d searchLength - 1;\n+\t\tfor (int i \u003d 0; i \u003c csLength; i++) {\n+\t\t\tchar ch \u003d cs.charAt(i);\n+\t\t\tfor (int j \u003d 0; j \u003c searchLength; j++) {\n+\t\t\t\tif (searchChars[j] \u003d\u003d ch) {\n+\t\t\t\t\tif (i \u003c csLastIndex \u0026\u0026 j \u003c searchLastIndex \u0026\u0026 ch \u003e\u003d Character.MIN_HIGH_SURROGATE \u0026\u0026 ch \u003c\u003d Character.MAX_HIGH_SURROGATE) {\n+\t\t\t\t\t\t// ch is a supplementary character\n+\t\t\t\t\t\tif (searchChars[j + 1] \u003d\u003d cs.charAt(i + 1)) {\n+\t\t\t\t\t\t\treturn true;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\t// ch is in the Basic Multilingual Plane\n+\t\t\t\t\t\treturn true;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\treturn false;\n+\t}\n \n     /**\n      * \u003cp\u003e\n",
      "operations": [
        {
          "type": "insert-node",
          "from": "",
          "to": "VariableDeclarationStatement [57342,57369]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "VariableDeclarationStatement [57372,57410]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [57413,57444]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [57447,57486]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "PrimitiveType: int [57342,57345]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "VariableDeclarationFragment [57346,57368]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "PrimitiveType: int [57372,57375]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "VariableDeclarationFragment [57376,57409]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "MethodInvocation [57269,57280]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "MethodInvocation [57284,57315]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: csLength [57346,57354]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: searchLength [57376,57388]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: csLength [57509,57517]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: isEmpty [57269,57276]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "METHOD_INVOCATION_ARGUMENTS [57277,57279]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "METHOD_INVOCATION_RECEIVER [57284,57294]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: isEmpty [57295,57302]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "METHOD_INVOCATION_ARGUMENTS [57303,57314]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: searchLength [57576,57588]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "IfStatement [57634,57963]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "InfixExpression [57638,57752]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Block [57754,57883]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Block [57889,57963]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "IfStatement [57803,57876]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "InfixExpression [57807,57845]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Block [57847,57876]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "InfixExpression [57278,57288]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "INFIX_EXPRESSION_OPERATOR: || [57289,57291]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "METHOD_INVOCATION_RECEIVER [57292,57294]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: length [57295,57301]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "MethodInvocation [57292,57303]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "INFIX_EXPRESSION_OPERATOR: \u003d\u003d [57304,57306]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "NumberLiteral: 0 [57307,57308]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "InfixExpression [57292,57308]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "InfixExpression [57278,57308]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "INFIX_EXPRESSION_OPERATOR: \u003d\u003d [57324,57326]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "NullLiteral [57327,57331]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "InfixExpression [57312,57331]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "InfixExpression [57278,57331]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "INFIX_EXPRESSION_OPERATOR: || [57332,57334]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "InfixExpression [57335,57358]",
          "to": ""
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  },
  "patch_changed_mths": {
    "qualified_names": [
      "org.apache.commons.lang3.StringUtils:containsAny(Ljava/lang/CharSequence;[C)Z:regression",
      "org.apache.commons.lang3.StringUtils:containsAny(Ljava/lang/CharSequence;Ljava/lang/String;)Z:regression"
    ],
    "num": 2
  }
}