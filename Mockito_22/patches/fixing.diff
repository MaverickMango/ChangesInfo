diff --git a/src/org/mockito/internal/matchers/Equality.java b/src/org/mockito/internal/matchers/Equality.java
index 43e11fc..0791441 100644
--- a/src/org/mockito/internal/matchers/Equality.java
+++ b/src/org/mockito/internal/matchers/Equality.java
@@ -10,7 +10,9 @@
 public class Equality {
 
     public static boolean areEqual(Object o1, Object o2) {
-        if (o1 == null || o2 == null) {
+        if (o1 == o2 ) {
+            return true;
+	} else if (o1 == null || o2 == null) {
             return o1 == null && o2 == null;
         } else if (isArray(o1)) {
             return isArray(o2) && areArraysEqual(o1, o2);
diff --git a/test/org/mockito/internal/matchers/EqualityTest.java b/test/org/mockito/internal/matchers/EqualityTest.java
index ce5b8c9..3656651 100644
--- a/test/org/mockito/internal/matchers/EqualityTest.java
+++ b/test/org/mockito/internal/matchers/EqualityTest.java
@@ -20,9 +20,18 @@
         assertTrue(areEqual(new Object[10], new Object[10]));
         assertTrue(areEqual(new int[] {1}, new Integer[] {1}));
         assertTrue(areEqual(new Object[] {"1"}, new String[] {"1"}));
+	Object badequals=new BadEquals();
+	assertTrue(areEqual(badequals,badequals));
 
         assertFalse(areEqual(new Object[9], new Object[10]));
         assertFalse(areEqual(new int[] {1, 2}, new int[] {1}));
         assertFalse(areEqual(new int[] {1}, new double[] {1.0}));
     }
-}
\ No newline at end of file
+
+   private final class BadEquals {
+    @Override
+        public boolean equals (Object oth) {
+	      throw new RuntimeException();
+        }
+   }
+}
\ No newline at end of file
