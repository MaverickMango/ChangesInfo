diff --git a/src/org/mockito/internal/matchers/Equality.java b/src/org/mockito/internal/matchers/Equality.java
new file mode 100644
index 0000000..3d905f1
--- /dev/null
+++ b/src/org/mockito/internal/matchers/Equality.java
@@ -0,0 +1,37 @@
+package org.mockito.internal.matchers;
+
+import java.lang.reflect.Array;
+
+//stolen from hamcrest because I didn't want to have more dependency than Matcher class 
+public class Equality {
+
+    public static boolean areEqual(Object o1, Object o2) {
+        if (o1 == null || o2 == null) {
+            return o1 == null && o2 == null;
+        } else if (isArray(o1)) {
+            return isArray(o2) && areArraysEqual(o1, o2);
+        } else {
+            return o1.equals(o2);
+        }
+    }
+
+    static boolean areArraysEqual(Object o1, Object o2) {
+        return areArrayLengthsEqual(o1, o2)
+                && areArrayElementsEqual(o1, o2);
+    }
+
+    static boolean areArrayLengthsEqual(Object o1, Object o2) {
+        return Array.getLength(o1) == Array.getLength(o2);
+    }
+
+    static boolean areArrayElementsEqual(Object o1, Object o2) {
+        for (int i = 0; i < Array.getLength(o1); i++) {
+            if (!areEqual(Array.get(o1, i), Array.get(o2, i))) return false;
+        }
+        return true;
+    }
+
+    static boolean isArray(Object o) {
+        return o.getClass().isArray();
+    }
+}
\ No newline at end of file
diff --git a/src/org/mockito/internal/matchers/Equals.java b/src/org/mockito/internal/matchers/Equals.java
index b889f57..bd8b436 100644
--- a/src/org/mockito/internal/matchers/Equals.java
+++ b/src/org/mockito/internal/matchers/Equals.java
@@ -18,10 +18,7 @@
     }
 
     public boolean matches(Object actual) {
-        if (this.wanted == null) {
-            return actual == null;
-        }
-        return wanted.equals(actual);
+        return Equality.areEqual(this.wanted, actual);
     }
 
     public void describeTo(Description description) {
diff --git a/test/org/mockito/internal/matchers/EqualityTest.java b/test/org/mockito/internal/matchers/EqualityTest.java
new file mode 100644
index 0000000..fa44a47
--- /dev/null
+++ b/test/org/mockito/internal/matchers/EqualityTest.java
@@ -0,0 +1,24 @@
+package org.mockito.internal.matchers;
+
+import org.mockitoutil.TestBase;
+import org.junit.Test;
+import static org.mockito.internal.matchers.Equality.areEqual;
+
+public class EqualityTest extends TestBase {
+    
+    @Test
+    public void shouldKnowIfObjectsAreEqual() throws Exception {
+        int[] arr = new int[] {1, 2};
+        assertTrue(areEqual(arr, arr));
+        assertTrue(areEqual(new int[] {1, 2}, new int[] {1, 2}));
+        assertTrue(areEqual(new Double[] {1.0}, new Double[] {1.0}));
+        assertTrue(areEqual(new String[0], new String[0]));
+        assertTrue(areEqual(new Object[10], new Object[10]));
+        assertTrue(areEqual(new int[] {1}, new Integer[] {1}));
+        assertTrue(areEqual(new Object[] {"1"}, new String[] {"1"}));
+
+        assertFalse(areEqual(new Object[9], new Object[10]));
+        assertFalse(areEqual(new int[] {1, 2}, new int[] {1}));
+        assertFalse(areEqual(new int[] {1}, new double[] {1.0}));
+    }
+}
\ No newline at end of file
diff --git a/test/org/mockito/internal/matchers/EqualsTest.java b/test/org/mockito/internal/matchers/EqualsTest.java
index c0a6a79..84e9d92 100644
--- a/test/org/mockito/internal/matchers/EqualsTest.java
+++ b/test/org/mockito/internal/matchers/EqualsTest.java
@@ -9,7 +9,8 @@
 
 
 public class EqualsTest extends TestBase {
-    
+
+    @Test
     public void shouldBeEqual() {
         assertEquals(new Equals(null), new Equals(null));
         assertEquals(new Equals(new Integer(2)), new Equals(new Integer(2)));
@@ -21,6 +22,12 @@
         } catch (UnsupportedOperationException expected) {
         }
     }
+
+    @Test
+    public void shouldArraysBeEqual() {
+        assertTrue(new Equals(new int[] {1, 2}).matches(new int[] {1, 2}));
+        assertFalse(new Equals(new Object[] {"1"}).matches(new Object[] {"1.0"}));
+    }
     
     @Test
     public void shouldDescribeWithExtraTypeInfo() throws Exception {
@@ -91,4 +98,4 @@
         //then
         assertFalse(equals.typeMatches(null));
     }
-}
+}
\ No newline at end of file
diff --git a/test/org/mockitousage/matchers/MatchersTest.java b/test/org/mockitousage/matchers/MatchersTest.java
index b91e9a8..9f5f87a 100644
--- a/test/org/mockitousage/matchers/MatchersTest.java
+++ b/test/org/mockitousage/matchers/MatchersTest.java
@@ -276,6 +276,22 @@
             assertContains("oneArray(null)", e.getMessage());
         }
     }
+
+    @Test
+    public void shouldUseSmartEqualsForArrays() throws Exception {
+        //issue 143
+        mock.arrayMethod(new String[] {"one"});
+        verify(mock).arrayMethod(eq(new String[] {"one"}));
+        verify(mock).arrayMethod(new String[] {"one"});
+    }
+
+    @Test
+    public void shouldUseSmartEqualsForPrimitiveArrays() throws Exception {
+        //issue 143
+        mock.objectArgMethod(new int[] {1, 2});
+        verify(mock).objectArgMethod(eq(new int[] {1, 2}));
+        verify(mock).objectArgMethod(new int[] {1, 2});
+    }
     
     @Test(expected=ArgumentsAreDifferent.class)
     public void arrayEqualsShouldThrowArgumentsAreDifferentExceptionForNonMatchingArguments() {        
