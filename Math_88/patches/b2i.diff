diff -r -u buggy/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java inducing/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java
--- buggy/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	2023-06-12 11:34:52.538696845 +0800
+++ inducing/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	2023-06-12 11:34:52.710699981 +0800
@@ -17,21 +17,16 @@
 
 package org.apache.commons.math.optimization.linear;
 
-import java.io.IOException;
-import java.io.ObjectInputStream;
-import java.io.ObjectOutputStream;
 import java.io.Serializable;
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.List;
 
-import org.apache.commons.math.linear.MatrixUtils;
 import org.apache.commons.math.linear.RealMatrix;
 import org.apache.commons.math.linear.RealMatrixImpl;
 import org.apache.commons.math.linear.RealVector;
 import org.apache.commons.math.optimization.GoalType;
 import org.apache.commons.math.optimization.RealPointValuePair;
-import org.apache.commons.math.util.MathUtils;
 
 /**
  * A tableau for use in the Simplex method.
@@ -73,7 +68,7 @@
     private final boolean restrictToNonNegative;
 
     /** Simple tableau. */
-    protected transient RealMatrix tableau;
+    protected RealMatrix tableau;
 
     /** Number of decision variables. */
     protected final int numDecisionVariables;
@@ -84,9 +79,6 @@
     /** Number of artificial variables. */
     protected int numArtificialVariables;
 
-    /** Amount of error to accept in floating point comparisons. */ 
-    protected final double epsilon;
-    
     /**
      * Build a tableau for a linear problem.
      * @param f linear objective function
@@ -94,16 +86,13 @@
      * @param goalType type of optimization goal: either {@link GoalType#MAXIMIZE}
      * or {@link GoalType#MINIMIZE}
      * @param restrictToNonNegative whether to restrict the variables to non-negative values
-     * @param epsilon amount of error to accept in floating point comparisons
      */
     SimplexTableau(final LinearObjectiveFunction f,
                    final Collection<LinearConstraint> constraints,
-                   final GoalType goalType, final boolean restrictToNonNegative,
-                   final double epsilon) {
+                   final GoalType goalType, final boolean restrictToNonNegative) {
         this.f                      = f;
         this.constraints            = constraints;
         this.restrictToNonNegative  = restrictToNonNegative;
-        this.epsilon                = epsilon;
         this.numDecisionVariables   = getNumVariables() + (restrictToNonNegative ? 0 : 1);
         this.numSlackVariables      = getConstraintTypeCounts(Relationship.LEQ) +
                                       getConstraintTypeCounts(Relationship.GEQ);
@@ -270,7 +259,7 @@
     private Integer getBasicRow(final int col) {
         Integer row = null;
         for (int i = getNumObjectiveFunctions(); i < getHeight(); i++) {
-            if (!MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {
+            if (getEntry(i, col) != 0.0) {
                 if (row == null) {
                     row = i;
                 } else {
@@ -492,68 +481,4 @@
         return tableau.getData();
     }
 
-    /** {@inheritDoc} */
-    @Override
-    public boolean equals(Object other) {
-
-      if (this == other) { 
-        return true;
-      }
-
-      if (other == null) {
-        return false;
-      }
-
-      try {
-
-          SimplexTableau rhs = (SimplexTableau) other;
-          return (restrictToNonNegative  == rhs.restrictToNonNegative) &&
-                 (numDecisionVariables   == rhs.numDecisionVariables) &&
-                 (numSlackVariables      == rhs.numSlackVariables) &&
-                 (numArtificialVariables == rhs.numArtificialVariables) &&
-                 (epsilon                == rhs.epsilon) &&
-                 f.equals(rhs.f) &&
-                 constraints.equals(rhs.constraints) &&
-                 tableau.equals(rhs.tableau);
-
-      } catch (ClassCastException ex) {
-          // ignore exception
-          return false;
-      }
-
-    }
-    
-    /** {@inheritDoc} */
-    @Override
-    public int hashCode() {
-        return Boolean.valueOf(restrictToNonNegative).hashCode() ^
-               numDecisionVariables ^
-               numSlackVariables ^
-               numArtificialVariables ^
-               Double.valueOf(epsilon).hashCode() ^
-               f.hashCode() ^
-               constraints.hashCode() ^
-               tableau.hashCode();
-    }
-
-    /** Serialize the instance.
-     * @param oos stream where object should be written
-     * @throws IOException if object cannot be written to stream
-     */
-    private void writeObject(ObjectOutputStream oos)
-        throws IOException {
-        oos.defaultWriteObject();
-        MatrixUtils.serializeRealMatrix(tableau, oos);
-    }
-
-    /** Deserialize the instance.
-     * @param ois stream from which the object should be read
-     * @throws ClassNotFoundException if a class in the stream cannot be found
-     * @throws IOException if object cannot be read from the stream
-     */
-    private void readObject(ObjectInputStream ois)
-      throws ClassNotFoundException, IOException {
-        ois.defaultReadObject();
-        MatrixUtils.deserializeRealMatrix(this, "tableau", ois);
-    }
 }
diff -r -u buggy/src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java inducing/src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java
--- buggy/src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java	2023-06-12 11:34:52.550697064 +0800
+++ inducing/src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java	2023-06-12 11:34:52.718700128 +0800
@@ -31,6 +31,7 @@
 public class SimplexSolverTest extends TestCase {
 
     public void testSimplexSolver() throws OptimizationException {
+
         LinearObjectiveFunction f =
             new LinearObjectiveFunction(new double[] { 15, 10 }, 7);
         Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();
@@ -90,7 +91,7 @@
         assertEquals(12.0, solution.getValue());
     }
 
-    public void testInfeasibleSolution() {
+    public void testInfeasibleSolution() throws UnboundedSolutionException {
         LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 15 }, 0);
         Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();
         constraints.add(new LinearConstraint(new double[] { 1 }, Relationship.LEQ, 1));
@@ -107,7 +108,7 @@
         }
     }
 
-    public void testUnboundedSolution() {
+    public void testUnboundedSolution() throws NoFeasibleSolutionException {
         LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 15, 10 }, 0);
         Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();
         constraints.add(new LinearConstraint(new double[] { 1, 0 }, Relationship.EQ, 2));
@@ -142,22 +143,6 @@
         assertEquals(1438556.7491409, solution.getValue(), .0000001);
     }
 
-    public void testEpsilon() throws OptimizationException {
-      LinearObjectiveFunction f =
-          new LinearObjectiveFunction(new double[] { 10, 5, 1 }, 0);
-      Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();
-      constraints.add(new LinearConstraint(new double[] {  9, 8, 0 }, Relationship.EQ,  17));
-      constraints.add(new LinearConstraint(new double[] {  0, 7, 8 }, Relationship.LEQ,  7));
-      constraints.add(new LinearConstraint(new double[] { 10, 0, 2 }, Relationship.LEQ, 10));
-
-      SimplexSolver solver = new SimplexSolver();
-      RealPointValuePair solution = solver.optimize(f, constraints, GoalType.MAXIMIZE, false);
-      assertEquals(1.0, solution.getPoint()[0]);
-      assertEquals(1.0, solution.getPoint()[1]);
-      assertEquals(0.0, solution.getPoint()[2]);
-      assertEquals(15.0, solution.getValue());
-  }
-    
     public void testTrivialModel() throws OptimizationException {
         LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 1, 1 }, 0);
         Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();
