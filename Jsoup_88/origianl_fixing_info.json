{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "/home/liumengjiao/Desktop/CI/Benchmark/data/changesInfo/",
  "properties": {
    "trigger.tests": "org.jsoup.nodes.AttributeTest::booleanAttributesAreEmptyStringValues",
    "test.dir": "src/test/java",
    "clz.modified": "org.jsoup.nodes.Attribute",
    "src.dir": "src/main/java"
  },
  "timeoutSecond": 100,
  "proj": "Jsoup",
  "id": "88",
  "workingDir": "../bugs/Jsoup_88_buggy",
  "buggyCommit": "8adcd55d8abe4c84ae2dcffb9a882abc4143bb93",
  "inducingCommit": "ea1fb65e9ff8eee82c4e379dc3236d09a5ab02e1",
  "originalCommit": "ea3225714c9e6e02ab17c4a79a88b71d1ea6eae3",
  "bug_name": "Jsoup_88",
  "derive": "defects4j",
  "original_fixing_commit": "8b837a43cbe2c12624ab2088dc4ff9a725af5f4d",
  "buildFiles_changed": true,
  "regression": true,
  "inducing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/jsoup/helper/StringUtil.java",
        "src/main/java/org/jsoup/helper/StringUtil.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.jsoup.helper.StringUtil:padding:[int width]:String"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "org.jsoup.helper.StringUtil:padding:[int width]:String"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "13",
            "14",
            "59"
          ],
          "num": 3
        },
        {
          "qualified_names": [
            "13",
            "14",
            "15",
            "16",
            "56"
          ],
          "num": 5
        }
      ],
      "diff": "diff --git a/src/main/java/org/jsoup/helper/StringUtil.java b/src/main/java/org/jsoup/helper/StringUtil.java\nindex f8a8bc0..90cc69d 100644\n--- a/src/main/java/org/jsoup/helper/StringUtil.java\n+++ b/src/main/java/org/jsoup/helper/StringUtil.java\n@@ -10,8 +10,10 @@\n  * A minimal String utility class. Designed for internal jsoup use only.\n  */\n public final class StringUtil {\n-    // memoised padding up to 10\n-    private static final String[] padding \u003d {\"\", \" \", \"  \", \"   \", \"    \", \"     \", \"      \", \"       \", \"        \", \"         \", \"          \"};\n+    // memoised padding up to 21\n+    static final String[] padding \u003d {\"\", \" \", \"  \", \"   \", \"    \", \"     \", \"      \", \"       \", \"        \",\n+        \"         \", \"          \", \"           \", \"            \", \"             \", \"              \", \"               \",\n+        \"                \", \"                 \", \"                  \", \"                   \", \"                    \"};\n \n     /**\n      * Join a collection of strings by a separator\n@@ -56,7 +58,6 @@\n \n         if (width \u003c padding.length)\n             return padding[width];\n-\n         char[] out \u003d new char[width];\n         for (int i \u003d 0; i \u003c width; i++)\n             out[i] \u003d \u0027 \u0027;\n",
      "operations": [
        {
          "type": "insert-node",
          "from": "",
          "to": "StringLiteral: \"           \" [459,472]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "StringLiteral: \"            \" [474,488]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "StringLiteral: \"             \" [490,505]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "StringLiteral: \"              \" [507,523]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "StringLiteral: \"               \" [525,542]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "StringLiteral: \"                \" [552,570]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "StringLiteral: \"                 \" [572,591]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "StringLiteral: \"                  \" [593,613]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "StringLiteral: \"                   \" [615,636]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "StringLiteral: \"                    \" [638,660]"
        },
        {
          "type": "delete-node",
          "from": "Modifier: private [319,326]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/jsoup/nodes/Attribute.java",
        "src/main/java/org/jsoup/nodes/Attribute.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.jsoup.nodes.Attribute:setKey:[String key]:void",
            "org.jsoup.nodes.Attribute:shouldCollapseAttribute:[Document.OutputSettings out]:boolean",
            "org.jsoup.nodes.Attribute:hashCode:[]:int",
            "org.jsoup.nodes.Attribute:Attribute:[String key, String value]:null",
            "org.jsoup.nodes.Attribute:equals:[Object o]:boolean",
            "org.jsoup.nodes.Attribute:createFromEncoded:[String unencodedKey, String encodedValue]:Attribute",
            "org.jsoup.nodes.Attribute:getValue:[]:String",
            "org.jsoup.nodes.Attribute:setValue:[String value]:String",
            "org.jsoup.nodes.Attribute:clone:[]:Attribute",
            "org.jsoup.nodes.Attribute:html:[Appendable accum, Document.OutputSettings out]:void"
          ],
          "num": 10
        },
        {
          "qualified_names": [
            "org.jsoup.nodes.Attribute:setValue:[String val]:String",
            "org.jsoup.nodes.Attribute:createFromEncoded:[String unencodedKey, String encodedValue]:Attribute",
            "org.jsoup.nodes.Attribute:setKey:[String key]:void",
            "org.jsoup.nodes.Attribute:html:[String key, String val, Appendable accum, Document.OutputSettings out]:void",
            "org.jsoup.nodes.Attribute:shouldCollapseAttribute:[Document.OutputSettings out]:boolean",
            "org.jsoup.nodes.Attribute:getValue:[]:String",
            "org.jsoup.nodes.Attribute:shouldCollapseAttribute:[String key, String val, Document.OutputSettings out]:boolean",
            "org.jsoup.nodes.Attribute:isBooleanAttribute:[]:boolean",
            "org.jsoup.nodes.Attribute:hashCode:[]:int",
            "org.jsoup.nodes.Attribute:Attribute:[String key, String val, Attributes parent]:null",
            "org.jsoup.nodes.Attribute:Attribute:[String key, String value]:null",
            "org.jsoup.nodes.Attribute:equals:[Object o]:boolean",
            "org.jsoup.nodes.Attribute:isDataAttribute:[String key]:boolean",
            "org.jsoup.nodes.Attribute:isDataAttribute:[]:boolean",
            "org.jsoup.nodes.Attribute:html:[Appendable accum, Document.OutputSettings out]:void",
            "org.jsoup.nodes.Attribute:isBooleanAttribute:[final String key]:boolean",
            "org.jsoup.nodes.Attribute:clone:[]:Attribute"
          ],
          "num": 17
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "11",
            "12",
            "13",
            "23",
            "33",
            "36",
            "53",
            "61",
            "66",
            "68",
            "69",
            "70",
            "71",
            "72",
            "89",
            "90",
            "92",
            "94",
            "116",
            "130",
            "131",
            "132",
            "140",
            "142",
            "143",
            "145",
            "147",
            "151",
            "153",
            "160"
          ],
          "num": 30
        },
        {
          "qualified_names": [
            "11",
            "12",
            "22",
            "23",
            "32",
            "33",
            "34",
            "35",
            "36",
            "37",
            "38",
            "39",
            "40",
            "41",
            "45",
            "46",
            "63",
            "64",
            "65",
            "66",
            "67",
            "68",
            "69",
            "77",
            "82",
            "84",
            "85",
            "86",
            "87",
            "88",
            "89",
            "90",
            "91",
            "92",
            "109",
            "110",
            "112",
            "114",
            "118",
            "119",
            "120",
            "121",
            "140",
            "144",
            "145",
            "146",
            "147",
            "158",
            "161",
            "162",
            "163",
            "164",
            "165",
            "166",
            "167",
            "168",
            "169",
            "170",
            "172",
            "173",
            "174",
            "175",
            "176",
            "177",
            "178",
            "183",
            "185",
            "188",
            "192",
            "194",
            "201"
          ],
          "num": 71
        }
      ],
      "diff": "diff --git a/src/main/java/org/jsoup/nodes/Attribute.java b/src/main/java/org/jsoup/nodes/Attribute.java\nindex 38be823..abe5d55 100644\n--- a/src/main/java/org/jsoup/nodes/Attribute.java\n+++ b/src/main/java/org/jsoup/nodes/Attribute.java\n@@ -8,9 +8,8 @@\n import java.util.Map;\n \n /**\n- A single key + value attribute. Keys are trimmed and normalised to lower-case.\n-\n- @author Jonathan Hedley, jonathan@hedley.net */\n+ A single key + value attribute. (Only used for presentation.)\n+ */\n public class Attribute implements Map.Entry\u003cString, String\u003e, Cloneable  {\n     private static final String[] booleanAttributes \u003d {\n             \"allowfullscreen\", \"async\", \"autofocus\", \"checked\", \"compact\", \"declare\", \"default\", \"defer\", \"disabled\",\n@@ -20,7 +19,8 @@\n     };\n \n     private String key;\n-    private String value;\n+    private String val;\n+    Attributes parent; // used to update the holding Attributes when the key / value is changed via this interface\n \n     /**\n      * Create a new attribute from unencoded (raw) key and value.\n@@ -29,11 +29,21 @@\n      * @see #createFromEncoded\n      */\n     public Attribute(String key, String value) {\n+        this(key, value, null);\n+    }\n+\n+    /**\n+     * Create a new attribute from unencoded (raw) key and value.\n+     * @param key attribute key; case is preserved.\n+     * @param val attribute value\n+     * @param parent the containing Attributes (this Attribute is not automatically added to said Attributes)\n+     * @see #createFromEncoded*/\n+    public Attribute(String key, String val, Attributes parent) {\n         Validate.notNull(key);\n-        Validate.notNull(value);\n         this.key \u003d key.trim();\n         Validate.notEmpty(key); // trimming could potentially make empty, so validate here\n-        this.value \u003d value;\n+        this.val \u003d val;\n+        this.parent \u003d parent;\n     }\n \n     /**\n@@ -50,7 +60,13 @@\n      */\n     public void setKey(String key) {\n         Validate.notEmpty(key);\n-        this.key \u003d key.trim();\n+        key \u003d key.trim();\n+        if (parent !\u003d null) {\n+            int i \u003d parent.indexOfKey(this.key);\n+            if (i !\u003d Attributes.NotFound)\n+                parent.keys[i] \u003d key;\n+        }\n+        this.key \u003d key;\n     }\n \n     /**\n@@ -58,18 +74,22 @@\n      @return the attribute value\n      */\n     public String getValue() {\n-        return value;\n+        return val;\n     }\n \n     /**\n      Set the attribute value.\n-     @param value the new attribute value; must not be null\n+     @param val the new attribute value; must not be null\n      */\n-    public String setValue(String value) {\n-        Validate.notNull(value);\n-        String old \u003d this.value;\n-        this.value \u003d value;\n-        return old;\n+    public String setValue(String val) {\n+        String oldVal \u003d parent.get(this.key);\n+        if (parent !\u003d null) {\n+            int i \u003d parent.indexOfKey(this.key);\n+            if (i !\u003d Attributes.NotFound)\n+                parent.vals[i] \u003d val;\n+        }\n+        this.val \u003d val;\n+        return oldVal;\n     }\n \n     /**\n@@ -86,15 +106,19 @@\n         }\n         return accum.toString();\n     }\n-    \n-    protected void html(Appendable accum, Document.OutputSettings out) throws IOException {\n+\n+    protected static void html(String key, String val, Appendable accum, Document.OutputSettings out) throws IOException {\n         accum.append(key);\n-        if (!shouldCollapseAttribute(out)) {\n+        if (!shouldCollapseAttribute(key, val, out)) {\n             accum.append(\"\u003d\\\"\");\n-            Entities.escape(accum, value, out, true, false, false);\n+            Entities.escape(accum, Attributes.checkNotNull(val) , out, true, false, false);\n             accum.append(\u0027\"\u0027);\n         }\n     }\n+    \n+    protected void html(Appendable accum, Document.OutputSettings out) throws IOException {\n+        html(key, val, accum, out);\n+    }\n \n     /**\n      Get the string representation of this attribute, implemented as {@link #html()}.\n@@ -113,10 +137,14 @@\n      */\n     public static Attribute createFromEncoded(String unencodedKey, String encodedValue) {\n         String value \u003d Entities.unescape(encodedValue, true);\n-        return new Attribute(unencodedKey, value);\n+        return new Attribute(unencodedKey, value, null); // parent will get set when Put\n     }\n \n     protected boolean isDataAttribute() {\n+        return isDataAttribute(key);\n+    }\n+\n+    protected static boolean isDataAttribute(String key) {\n         return key.startsWith(Attributes.dataPrefix) \u0026\u0026 key.length() \u003e Attributes.dataPrefix.length();\n     }\n \n@@ -127,37 +155,50 @@\n      * @return  Returns whether collapsible or not\n      */\n     protected final boolean shouldCollapseAttribute(Document.OutputSettings out) {\n-        return (\"\".equals(value) || value.equalsIgnoreCase(key))\n-                \u0026\u0026 out.syntax() \u003d\u003d Document.OutputSettings.Syntax.html\n-                \u0026\u0026 isBooleanAttribute();\n+        return shouldCollapseAttribute(key, val, out);\n     }\n \n+    protected static boolean shouldCollapseAttribute(String key, String val, Document.OutputSettings out) {\n+        // todo: optimize\n+        return (val \u003d\u003d null || \"\".equals(val) || val.equalsIgnoreCase(key))\n+            \u0026\u0026 out.syntax() \u003d\u003d Document.OutputSettings.Syntax.html\n+            \u0026\u0026 isBooleanAttribute(key);\n+    }\n+\n+    /**\n+     * @deprecated\n+     */\n     protected boolean isBooleanAttribute() {\n+        return Arrays.binarySearch(booleanAttributes, key) \u003e\u003d 0 || val \u003d\u003d null;\n+    }\n+\n+    /**\n+     * Checks if this attribute name is defined as a boolean attribute in HTML5\n+     */\n+    protected static boolean isBooleanAttribute(final String key) {\n         return Arrays.binarySearch(booleanAttributes, key) \u003e\u003d 0;\n     }\n \n     @Override\n-    public boolean equals(Object o) {\n+    public boolean equals(Object o) { // note parent not considered\n         if (this \u003d\u003d o) return true;\n-        if (!(o instanceof Attribute)) return false;\n-\n+        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) return false;\n         Attribute attribute \u003d (Attribute) o;\n-\n         if (key !\u003d null ? !key.equals(attribute.key) : attribute.key !\u003d null) return false;\n-        return !(value !\u003d null ? !value.equals(attribute.value) : attribute.value !\u003d null);\n+        return val !\u003d null ? val.equals(attribute.val) : attribute.val \u003d\u003d null;\n     }\n \n     @Override\n-    public int hashCode() {\n+    public int hashCode() { // note parent not considered\n         int result \u003d key !\u003d null ? key.hashCode() : 0;\n-        result \u003d 31 * result + (value !\u003d null ? value.hashCode() : 0);\n+        result \u003d 31 * result + (val !\u003d null ? val.hashCode() : 0);\n         return result;\n     }\n \n     @Override\n     public Attribute clone() {\n         try {\n-            return (Attribute) super.clone(); // only fields are immutable strings key and value, so no more deep copy required\n+            return (Attribute) super.clone();\n         } catch (CloneNotSupportedException e) {\n             throw new RuntimeException(e);\n         }\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [178,248]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldDeclaration [839,857]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [1244,1821]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "MethodDeclaration [3336,3708]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "MethodDeclaration [4667,4830]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [5172,5490]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [5663,5893]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: protected [3336,3345]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: static [3346,3352]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "PrimitiveType: void [3353,3357]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: html [3358,3362]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SingleVariableDeclaration [3363,3373]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SingleVariableDeclaration [3375,3385]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SingleVariableDeclaration [3387,3403]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SingleVariableDeclaration [3405,3432]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SimpleType [3441,3452]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Block [3453,3708]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: protected [4667,4676]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: static [4677,4683]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "PrimitiveType: boolean [4684,4691]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: isDataAttribute [4692,4707]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SingleVariableDeclaration [4708,4718]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Block [4720,4830]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [5496,5526]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ConstructorInvocation [1209,1232]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [2166,2326]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [2335,2350]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [2648,2685]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [2694,2854]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [3814,3841]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ReturnStatement [4627,4655]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ReturnStatement [5114,5160]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ReturnStatement [6225,6296]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "InfixExpression [5587,5650]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "InfixExpression [6025,6064]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "NullLiteral [4531,4535]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "INFIX_EXPRESSION_OPERATOR: || [5636,5638]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "InfixExpression [5639,5650]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "InfixExpression [6025,6034]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "INFIX_EXPRESSION_OPERATOR: || [6035,6037]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "InfixExpression [6038,6064]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "INFIX_EXPRESSION_OPERATOR: \u003d\u003d [6027,6029]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "NullLiteral [6030,6034]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: key [3519,3522]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: val [3524,3527]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodInvocation [3605,3633]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "Javadoc [178,311]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [1159,1181]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [1190,1214]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [1223,1245]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [1254,1277]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [1345,1364]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "ThisExpression [1689,1693]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "FieldAccess [1689,1697]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [2015,2039]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [2048,2072]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: value [2787,2792]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ReturnStatement [3992,4160]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "PREFIX_EXPRESSION_OPERATOR: ! [4385,4386]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [4400,4409]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "InstanceofExpression [4387,4409]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "ParenthesizedExpression [4386,4410]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "PrefixExpression [4385,4410]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ReturnStatement [4573,4656]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/jsoup/nodes/Attributes.java",
        "src/main/java/org/jsoup/nodes/Attributes.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.jsoup.nodes.Attributes:remove:[String key]:void",
            "org.jsoup.nodes.Attributes:hashCode:[]:int",
            "org.jsoup.nodes.Attributes:clone:[]:Attributes",
            "org.jsoup.nodes.Attributes\\$Dataset\\$EntrySet:size:[]:int",
            "org.jsoup.nodes.Attributes:hasKey:[String key]:boolean",
            "org.jsoup.nodes.Attributes:putIgnoreCase:[String key, String value]:void",
            "org.jsoup.nodes.Attributes:size:[]:int",
            "org.jsoup.nodes.Attributes:put:[Attribute attribute]:Attributes",
            "org.jsoup.nodes.Attributes:getIgnoreCase:[String key]:String",
            "org.jsoup.nodes.Attributes\\$Dataset:Dataset:[]:null",
            "org.jsoup.nodes.Attributes:put:[String key, boolean value]:Attributes",
            "org.jsoup.nodes.Attributes:hasKeyIgnoreCase:[String key]:boolean",
            "org.jsoup.nodes.Attributes:removeIgnoreCase:[String key]:void",
            "org.jsoup.nodes.Attributes:addAll:[Attributes incoming]:void",
            "org.jsoup.nodes.Attributes:iterator:[]:Iterator\u003cAttribute\u003e",
            "org.jsoup.nodes.Attributes:get:[String key]:String",
            "org.jsoup.nodes.Attributes:put:[String key, String value]:Attributes",
            "org.jsoup.nodes.Attributes:equals:[Object o]:boolean",
            "org.jsoup.nodes.Attributes:html:[Appendable accum, Document.OutputSettings out]:void",
            "org.jsoup.nodes.Attributes:getAttributeIgnoreCase:[String key]:Attribute",
            "org.jsoup.nodes.Attributes:dataset:[]:Map\u003cString,String\u003e",
            "org.jsoup.nodes.Attributes\\$Dataset:put:[String key, String value]:String",
            "org.jsoup.nodes.Attributes:asList:[]:List\u003cAttribute\u003e"
          ],
          "num": 23
        },
        {
          "qualified_names": [
            "org.jsoup.nodes.Attributes:get:[String key]:String",
            "org.jsoup.nodes.Attributes:indexOfKeyIgnoreCase:[String key]:int",
            "org.jsoup.nodes.Attributes:checkNotNull:[String val]:String",
            "org.jsoup.nodes.Attributes:indexOfKey:[String key]:int",
            "org.jsoup.nodes.Attributes:hasKeyIgnoreCase:[String key]:boolean",
            "org.jsoup.nodes.Attributes:dataset:[]:Map\u003cString,String\u003e",
            "org.jsoup.nodes.Attributes:size:[]:int",
            "org.jsoup.nodes.Attributes:putIgnoreCase:[String key, String value]:void",
            "org.jsoup.nodes.Attributes:html:[final Appendable accum, final Document.OutputSettings out]:void",
            "org.jsoup.nodes.Attributes:checkCapacity:[int minNewSize]:void",
            "org.jsoup.nodes.Attributes:put:[Attribute attribute]:Attributes",
            "org.jsoup.nodes.Attributes:equals:[Object o]:boolean",
            "org.jsoup.nodes.Attributes:hashCode:[]:int",
            "org.jsoup.nodes.Attributes:add:[String key, String value]:void",
            "org.jsoup.nodes.Attributes:put:[String key, String value]:Attributes",
            "org.jsoup.nodes.Attributes:remove:[int index]:void",
            "org.jsoup.nodes.Attributes:put:[String key, boolean value]:Attributes",
            "org.jsoup.nodes.Attributes:normalize:[]:void",
            "org.jsoup.nodes.Attributes:getIgnoreCase:[String key]:String",
            "org.jsoup.nodes.Attributes\\$Dataset\\$EntrySet:size:[]:int",
            "org.jsoup.nodes.Attributes\\$Dataset:Dataset:[Attributes attributes]:null",
            "org.jsoup.nodes.Attributes:asList:[]:List\u003cAttribute\u003e",
            "org.jsoup.nodes.Attributes\\$Dataset:put:[String key, String value]:String",
            "org.jsoup.nodes.Attributes:remove:[String key]:void",
            "org.jsoup.nodes.Attributes:addAll:[Attributes incoming]:void",
            "org.jsoup.nodes.Attributes:iterator:[]:Iterator\u003cAttribute\u003e",
            "org.jsoup.nodes.Attributes:hasKey:[String key]:boolean",
            "org.jsoup.nodes.Attributes:removeIgnoreCase:[String key]:void",
            "org.jsoup.nodes.Attributes:clone:[]:Attributes"
          ],
          "num": 29
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "12",
            "23",
            "33",
            "34",
            "35",
            "40",
            "44",
            "45",
            "46",
            "47",
            "48",
            "49",
            "50",
            "56",
            "59",
            "60",
            "63",
            "64",
            "65",
            "66",
            "67",
            "68",
            "69",
            "70",
            "71",
            "72",
            "73",
            "74",
            "75",
            "76",
            "81",
            "86",
            "87",
            "92",
            "93",
            "94",
            "96",
            "97",
            "102",
            "108",
            "116",
            "121",
            "122",
            "123",
            "132",
            "133",
            "134",
            "135",
            "143",
            "144",
            "145",
            "146",
            "147",
            "148",
            "149",
            "150",
            "159",
            "168",
            "169",
            "170",
            "171",
            "172",
            "173",
            "174",
            "182",
            "183",
            "184",
            "194",
            "195",
            "196",
            "200",
            "201",
            "202",
            "204",
            "208",
            "209",
            "210",
            "213",
            "214",
            "215",
            "216",
            "217",
            "218",
            "229",
            "247",
            "248",
            "249",
            "251",
            "252",
            "253",
            "254",
            "271",
            "275",
            "284",
            "289",
            "290",
            "291",
            "298",
            "299",
            "300",
            "304",
            "306",
            "307",
            "308",
            "319",
            "320",
            "321",
            "332",
            "343"
          ],
          "num": 109
        },
        {
          "qualified_names": [
            "10",
            "17",
            "18",
            "25",
            "34",
            "36",
            "37",
            "38",
            "39",
            "40",
            "41",
            "42",
            "43",
            "44",
            "45",
            "46",
            "47",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57",
            "58",
            "59",
            "60",
            "61",
            "62",
            "63",
            "64",
            "65",
            "66",
            "67",
            "68",
            "69",
            "70",
            "71",
            "72",
            "73",
            "74",
            "75",
            "76",
            "77",
            "78",
            "79",
            "80",
            "81",
            "82",
            "87",
            "91",
            "92",
            "98",
            "101",
            "102",
            "105",
            "106",
            "107",
            "108",
            "109",
            "110",
            "115",
            "120",
            "121",
            "122",
            "123",
            "124",
            "129",
            "130",
            "131",
            "132",
            "133",
            "135",
            "136",
            "141",
            "147",
            "155",
            "160",
            "161",
            "165",
            "166",
            "167",
            "168",
            "169",
            "170",
            "171",
            "172",
            "173",
            "174",
            "175",
            "176",
            "177",
            "183",
            "184",
            "185",
            "193",
            "194",
            "195",
            "204",
            "213",
            "221",
            "231",
            "232",
            "233",
            "234",
            "235",
            "236",
            "237",
            "241",
            "242",
            "244",
            "245",
            "246",
            "247",
            "248",
            "249",
            "250",
            "251",
            "252",
            "253",
            "254",
            "255",
            "256",
            "257",
            "258",
            "259",
            "260",
            "264",
            "265",
            "268",
            "269",
            "270",
            "271",
            "272",
            "273",
            "284",
            "302",
            "303",
            "304",
            "305",
            "306",
            "307",
            "308",
            "310",
            "311",
            "312",
            "313",
            "314",
            "315",
            "316",
            "317",
            "334",
            "338",
            "339",
            "340",
            "349",
            "350",
            "351",
            "352",
            "363",
            "364",
            "365",
            "369",
            "370",
            "371",
            "372",
            "373",
            "374",
            "375",
            "376",
            "378",
            "379",
            "380",
            "381",
            "382",
            "393",
            "394",
            "405",
            "416"
          ],
          "num": 182
        }
      ],
      "diff": "diff --git a/src/main/java/org/jsoup/nodes/Attributes.java b/src/main/java/org/jsoup/nodes/Attributes.java\nindex ba9a91d..c8c1d07 100644\n--- a/src/main/java/org/jsoup/nodes/Attributes.java\n+++ b/src/main/java/org/jsoup/nodes/Attributes.java\n@@ -7,20 +7,22 @@\n import java.util.AbstractMap;\n import java.util.AbstractSet;\n import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.Collections;\n import java.util.Iterator;\n-import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n \n+import static org.jsoup.internal.Normalizer.lowerCase;\n+\n /**\n  * The attributes of an Element.\n  * \u003cp\u003e\n  * Attributes are treated as a map: there can be only one value associated with an attribute key/name.\n  * \u003c/p\u003e\n  * \u003cp\u003e\n- * Attribute name and value comparisons are  \u003cb\u003ecase sensitive\u003c/b\u003e. By default for HTML, attribute names are\n+ * Attribute name and value comparisons are  generally \u003cb\u003ecase sensitive\u003c/b\u003e. By default for HTML, attribute names are\n  * normalized to lower-case on parsing. That means you should use lower-case strings when referring to attributes by\n  * name.\n  * \u003c/p\u003e\n@@ -29,83 +31,120 @@\n  */\n public class Attributes implements Iterable\u003cAttribute\u003e, Cloneable {\n     protected static final String dataPrefix \u003d \"data-\";\n+    private static final int InitialCapacity \u003d 4; // todo - analyze Alexa 1MM sites, determine best setting\n \n-    private LinkedHashMap\u003cString, Attribute\u003e attributes \u003d null;\n-    // linked hash map to preserve insertion order.\n-    // null be default as so many elements have no attributes -- saves a good chunk of memory\n+    // manages the key/val arrays\n+    private static final int GrowthFactor \u003d 2;\n+    private static final String[] Empty \u003d {};\n+    static final int NotFound \u003d -1;\n+    private static final String EmptyString \u003d \"\";\n+\n+    private int size \u003d 0; // number of slots used (not capacity, which is keys.length\n+    String[] keys \u003d Empty;\n+    String[] vals \u003d Empty;\n+\n+    // check there\u0027s room for more\n+    private void checkCapacity(int minNewSize) {\n+        Validate.isTrue(minNewSize \u003e\u003d size);\n+        int curSize \u003d keys.length;\n+        if (curSize \u003e\u003d minNewSize)\n+            return;\n+\n+        int newSize \u003d curSize \u003e\u003d InitialCapacity ? size * GrowthFactor : InitialCapacity;\n+        if (minNewSize \u003e newSize)\n+            newSize \u003d minNewSize;\n+\n+        keys \u003d Arrays.copyOf(keys, newSize);\n+        vals \u003d Arrays.copyOf(vals, newSize);\n+    }\n+\n+    int indexOfKey(String key) {\n+        Validate.notNull(key);\n+        for (int i \u003d 0; i \u003c size; i++) {\n+            if (key.equals(keys[i]))\n+                return i;\n+        }\n+        return NotFound;\n+    }\n+\n+    private int indexOfKeyIgnoreCase(String key) {\n+        Validate.notNull(key);\n+        for (int i \u003d 0; i \u003c size; i++) {\n+            if (key.equalsIgnoreCase(keys[i]))\n+                return i;\n+        }\n+        return NotFound;\n+    }\n+\n+    // we track boolean attributes as null in values - they\u0027re just keys. so returns empty for consumers\n+    static final String checkNotNull(String val) {\n+        return val \u003d\u003d null ? EmptyString : val;\n+    }\n \n     /**\n      Get an attribute value by key.\n      @param key the (case-sensitive) attribute key\n-     @return the attribute value if set; or empty string if not set.\n+     @return the attribute value if set; or empty string if not set (or a boolean attribute).\n      @see #hasKey(String)\n      */\n     public String get(String key) {\n-        Validate.notEmpty(key);\n-\n-        if (attributes \u003d\u003d null)\n-            return \"\";\n-\n-        Attribute attr \u003d attributes.get(key);\n-        return attr !\u003d null ? attr.getValue() : \"\";\n+        int i \u003d indexOfKey(key);\n+        return i \u003d\u003d NotFound ? EmptyString : checkNotNull(vals[i]);\n     }\n \n     /**\n      * Get an attribute\u0027s value by case-insensitive key\n      * @param key the attribute name\n-     * @return the first matching attribute value if set; or empty string if not set.\n+     * @return the first matching attribute value if set; or empty string if not set (ora boolean attribute).\n      */\n     public String getIgnoreCase(String key) {\n-        Attribute attr \u003d getAttributeIgnoreCase(key);\n-        return attr !\u003d null ? attr.getValue() : \"\";\n+        int i \u003d indexOfKeyIgnoreCase(key);\n+        return i \u003d\u003d NotFound ? EmptyString : checkNotNull(vals[i]);\n     }\n \n-    private Attribute getAttributeIgnoreCase(String key) {\n-        Validate.notEmpty(key);\n-        if (attributes \u003d\u003d null)\n-            return null;\n-\n-        Attribute attr \u003d attributes.get(key);\n-        if (attr !\u003d null)\n-            return attr;\n-\n-        for (String attrKey : attributes.keySet()) {\n-            if (attrKey.equalsIgnoreCase(key))\n-                return attributes.get(attrKey);\n-        }\n-        return null;\n+    // adds without checking if this key exists\n+    private void add(String key, String value) {\n+        checkCapacity(size + 1);\n+        keys[size] \u003d key;\n+        vals[size] \u003d value;\n+        size++;\n     }\n \n     /**\n      * Set a new attribute, or replace an existing one by key.\n-     * @param key attribute key\n+     * @param key case sensitive attribute key\n      * @param value attribute value\n      * @return these attributes, for chaining\n      */\n     public Attributes put(String key, String value) {\n-        Attribute attr \u003d new Attribute(key, value);\n-        put(attr);\n+        int i \u003d indexOfKey(key);\n+        if (i !\u003d NotFound)\n+            vals[i] \u003d value;\n+        else\n+            add(key, value);\n         return this;\n     }\n \n     void putIgnoreCase(String key, String value) {\n-        Attribute oldAttr \u003d getAttributeIgnoreCase(key);\n-        if (oldAttr !\u003d null \u0026\u0026 !oldAttr.getKey().equals(key)) {\n-            attributes.remove(oldAttr.getKey());\n+        int i \u003d indexOfKeyIgnoreCase(key);\n+        if (i !\u003d NotFound) {\n+            vals[i] \u003d value;\n+            if (!keys[i].equals(key)) // case changed, update\n+                keys[i] \u003d key;\n         }\n-\n-        put(key, value);\n+        else\n+            add(key, value);\n     }\n \n     /**\n      * Set a new boolean attribute, remove attribute if value is false.\n-     * @param key attribute key\n+     * @param key case \u003cb\u003einsensitive\u003c/b\u003e attribute key\n      * @param value attribute value\n      * @return these attributes, for chaining\n      */\n     public Attributes put(String key, boolean value) {\n         if (value)\n-            put(new BooleanAttribute(key));\n+            putIgnoreCase(key, null);\n         else\n             remove(key);\n         return this;\n@@ -113,26 +152,37 @@\n \n     /**\n      Set a new attribute, or replace an existing one by key.\n-     @param attribute attribute\n+     @param attribute attribute with case sensitive key\n      @return these attributes, for chaining\n      */\n     public Attributes put(Attribute attribute) {\n         Validate.notNull(attribute);\n-        if (attributes \u003d\u003d null)\n-             attributes \u003d new LinkedHashMap\u003c\u003e(2);\n-        attributes.put(attribute.getKey(), attribute);\n+        put(attribute.getKey(), attribute.getValue());\n+        attribute.parent \u003d this;\n         return this;\n     }\n \n+    // removes and shifts up\n+    private void remove(int index) {\n+        Validate.isFalse(index \u003e\u003d size);\n+        int shifted \u003d size - index - 1;\n+        if (shifted \u003e 0) {\n+            System.arraycopy(keys, index + 1, keys, index, shifted);\n+            System.arraycopy(vals, index + 1, vals, index, shifted);\n+        }\n+        size--;\n+        keys[size] \u003d null; // release hold\n+        vals[size] \u003d null;\n+    }\n+\n     /**\n      Remove an attribute by key. \u003cb\u003eCase sensitive.\u003c/b\u003e\n      @param key attribute key to remove\n      */\n     public void remove(String key) {\n-        Validate.notEmpty(key);\n-        if (attributes \u003d\u003d null)\n-            return;\n-        attributes.remove(key);\n+        int i \u003d indexOfKey(key);\n+        if (i !\u003d NotFound)\n+            remove(i);\n     }\n \n     /**\n@@ -140,14 +190,9 @@\n      @param key attribute key to remove\n      */\n     public void removeIgnoreCase(String key) {\n-        Validate.notEmpty(key);\n-        if (attributes \u003d\u003d null)\n-            return;\n-        for (Iterator\u003cString\u003e it \u003d attributes.keySet().iterator(); it.hasNext(); ) {\n-            String attrKey \u003d it.next();\n-            if (attrKey.equalsIgnoreCase(key))\n-                it.remove();\n-        }\n+        int i \u003d indexOfKeyIgnoreCase(key);\n+        if (i !\u003d NotFound)\n+            remove(i);\n     }\n \n     /**\n@@ -156,7 +201,7 @@\n      @return true if key exists, false otherwise\n      */\n     public boolean hasKey(String key) {\n-        return attributes !\u003d null \u0026\u0026 attributes.containsKey(key);\n+        return indexOfKey(key) !\u003d NotFound;\n     }\n \n     /**\n@@ -165,13 +210,7 @@\n      @return true if key exists, false otherwise\n      */\n     public boolean hasKeyIgnoreCase(String key) {\n-        if (attributes \u003d\u003d null)\n-            return false;\n-        for (String attrKey : attributes.keySet()) {\n-            if (attrKey.equalsIgnoreCase(key))\n-                return true;\n-        }\n-        return false;\n+        return indexOfKeyIgnoreCase(key) !\u003d NotFound;\n     }\n \n     /**\n@@ -179,9 +218,7 @@\n      @return size\n      */\n     public int size() {\n-        if (attributes \u003d\u003d null)\n-            return 0;\n-        return attributes.size();\n+        return size;\n     }\n \n     /**\n@@ -191,31 +228,49 @@\n     public void addAll(Attributes incoming) {\n         if (incoming.size() \u003d\u003d 0)\n             return;\n-        if (attributes \u003d\u003d null)\n-            attributes \u003d new LinkedHashMap\u003c\u003e(incoming.size());\n-        attributes.putAll(incoming.attributes);\n+        checkCapacity(size + incoming.size);\n+\n+        for (Attribute attr : incoming) {\n+            // todo - should this be case insensitive?\n+            put(attr);\n+        }\n+\n     }\n \n     public Iterator\u003cAttribute\u003e iterator() {\n-        if (attributes \u003d\u003d null || attributes.isEmpty()) {\n-            return Collections.\u003cAttribute\u003eemptyList().iterator();\n-        }\n+        return new Iterator\u003cAttribute\u003e() {\n+            int i \u003d 0;\n \n-        return attributes.values().iterator();\n+            @Override\n+            public boolean hasNext() {\n+                return i \u003c size;\n+            }\n+\n+            @Override\n+            public Attribute next() {\n+                final Attribute attr \u003d new Attribute(keys[i], vals[i], Attributes.this);\n+                i++;\n+                return attr;\n+            }\n+\n+            @Override\n+            public void remove() {\n+                Attributes.this.remove(--i); // next() advanced, so rewind\n+            }\n+        };\n     }\n \n     /**\n-     Get the attributes as a List, for iteration. Do not modify the keys of the attributes via this view, as changes\n-     to keys will not be recognised in the containing set.\n-     @return an view of the attributes as a List.\n+     Get the attributes as a List, for iteration.\n+     @return an view of the attributes as an unmodifialbe List.\n      */\n     public List\u003cAttribute\u003e asList() {\n-        if (attributes \u003d\u003d null)\n-            return Collections.emptyList();\n-\n-        List\u003cAttribute\u003e list \u003d new ArrayList\u003c\u003e(attributes.size());\n-        for (Map.Entry\u003cString, Attribute\u003e entry : attributes.entrySet()) {\n-            list.add(entry.getValue());\n+        ArrayList\u003cAttribute\u003e list \u003d new ArrayList\u003c\u003e(size);\n+        for (int i \u003d 0; i \u003c size; i++) {\n+            Attribute attr \u003d vals[i] \u003d\u003d null ?\n+                new BooleanAttribute(keys[i]) : // deprecated class, but maybe someone still wants it\n+                new Attribute(keys[i], vals[i], Attributes.this);\n+            list.add(attr);\n         }\n         return Collections.unmodifiableList(list);\n     }\n@@ -226,7 +281,7 @@\n      * @return map of custom data attributes.\n      */\n     public Map\u003cString, String\u003e dataset() {\n-        return new Dataset();\n+        return new Dataset(this);\n     }\n \n     /**\n@@ -244,14 +299,22 @@\n         return accum.toString();\n     }\n \n-    void html(Appendable accum, Document.OutputSettings out) throws IOException {\n-        if (attributes \u003d\u003d null)\n-            return;\n+    final void html(final Appendable accum, final Document.OutputSettings out) throws IOException {\n+        final int sz \u003d size;\n+        for (int i \u003d 0; i \u003c sz; i++) {\n+            // inlined from Attribute.html()\n+            final String key \u003d keys[i];\n+            final String val \u003d vals[i];\n+            accum.append(\u0027 \u0027).append(key);\n \n-        for (Map.Entry\u003cString, Attribute\u003e entry : attributes.entrySet()) {\n-            Attribute attribute \u003d entry.getValue();\n-            accum.append(\" \");\n-            attribute.html(accum, out);\n+            // collapse checked\u003dnull, checked\u003d\"\", checked\u003dchecked; write out others\n+            if (!(out.syntax() \u003d\u003d Document.OutputSettings.Syntax.html\n+                \u0026\u0026 (val \u003d\u003d null || val.equals(key) \u0026\u0026 Attribute.isBooleanAttribute(key)))) {\n+\n+                accum.append(\"\u003d\\\"\");\n+                Entities.escape(accum, val \u003d\u003d null ? EmptyString : val, out, true, false, false);\n+                accum.append(\u0027\"\u0027);\n+            }\n         }\n     }\n \n@@ -268,11 +331,13 @@\n     @Override\n     public boolean equals(Object o) {\n         if (this \u003d\u003d o) return true;\n-        if (!(o instanceof Attributes)) return false;\n+        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) return false;\n \n         Attributes that \u003d (Attributes) o;\n \n-        return !(attributes !\u003d null ? !attributes.equals(that.attributes) : that.attributes !\u003d null);\n+        if (size !\u003d that.size) return false;\n+        if (!Arrays.equals(keys, that.keys)) return false;\n+        return Arrays.equals(vals, that.vals);\n     }\n \n     /**\n@@ -281,31 +346,40 @@\n      */\n     @Override\n     public int hashCode() {\n-        return attributes !\u003d null ? attributes.hashCode() : 0;\n+        int result \u003d size;\n+        result \u003d 31 * result + Arrays.hashCode(keys);\n+        result \u003d 31 * result + Arrays.hashCode(vals);\n+        return result;\n     }\n \n     @Override\n     public Attributes clone() {\n-        if (attributes \u003d\u003d null)\n-            return new Attributes();\n-\n         Attributes clone;\n         try {\n             clone \u003d (Attributes) super.clone();\n         } catch (CloneNotSupportedException e) {\n             throw new RuntimeException(e);\n         }\n-        clone.attributes \u003d new LinkedHashMap\u003c\u003e(attributes.size());\n-        for (Attribute attribute: this)\n-            clone.attributes.put(attribute.getKey(), attribute.clone());\n+        clone.size \u003d size;\n+        keys \u003d Arrays.copyOf(keys, size);\n+        vals \u003d Arrays.copyOf(vals, size);\n         return clone;\n     }\n \n-    private class Dataset extends AbstractMap\u003cString, String\u003e {\n+    /**\n+     * Internal method. Lowercases all keys.\n+     */\n+    public void normalize() {\n+        for (int i \u003d 0; i \u003c size; i++) {\n+            keys[i] \u003d lowerCase(keys[i]);\n+        }\n+    }\n \n-        private Dataset() {\n-            if (attributes \u003d\u003d null)\n-                attributes \u003d new LinkedHashMap\u003c\u003e(2);\n+    private static class Dataset extends AbstractMap\u003cString, String\u003e {\n+        private final Attributes attributes;\n+\n+        private Dataset(Attributes attributes) {\n+            this.attributes \u003d attributes;\n         }\n \n         @Override\n@@ -316,9 +390,8 @@\n         @Override\n         public String put(String key, String value) {\n             String dataKey \u003d dataKey(key);\n-            String oldValue \u003d hasKey(dataKey) ? attributes.get(dataKey).getValue() : null;\n-            Attribute attr \u003d new Attribute(dataKey, value);\n-            attributes.put(dataKey, attr);\n+            String oldValue \u003d attributes.hasKey(dataKey) ? attributes.get(dataKey) : null;\n+            attributes.put(dataKey, value);\n             return oldValue;\n         }\n \n@@ -329,7 +402,7 @@\n                 return new DatasetIterator();\n             }\n \n-           @Override\n+            @Override\n             public int size() {\n                 int count \u003d 0;\n                 Iterator iter \u003d new DatasetIterator();\n@@ -340,7 +413,7 @@\n         }\n \n         private class DatasetIterator implements Iterator\u003cMap.Entry\u003cString, String\u003e\u003e {\n-            private Iterator\u003cAttribute\u003e attrIter \u003d attributes.values().iterator();\n+            private Iterator\u003cAttribute\u003e attrIter \u003d attributes.iterator();\n             private Attribute attr;\n             public boolean hasNext() {\n                 while (attrIter.hasNext()) {\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "ImportDeclaration [218,242]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ImportDeclaration [368,422]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldDeclaration [1022,1067]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldDeclaration [1165,1207]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldDeclaration [1212,1253]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldDeclaration [1258,1289]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldDeclaration [1294,1339]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "FieldDeclaration [1345,1366]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldDeclaration [1431,1453]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldDeclaration [1458,1480]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [1521,1956]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "MethodDeclaration [1962,2166]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [2172,2404]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [2515,2615]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [3419,3572]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [5115,5495]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [11324,11509]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: private [1345,1352]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "PrimitiveType: int [1353,1356]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "VariableDeclarationFragment [1357,1365]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "PrimitiveType: int [1962,1965]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: indexOfKey [1966,1976]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SingleVariableDeclaration [1977,1987]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Block [1989,2166]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [7702,7827]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: final [9140,9145]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: static [11523,11529]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldDeclaration [11590,11626]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [11636,11728]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: size [1357,1361]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "ForStatement [2030,2135]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ReturnStatement [2144,2160]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [2884,2908]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ReturnStatement [2917,2976]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [3257,3291]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ReturnStatement [3300,3359]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [3844,3868]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [3877,3966]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [4054,4088]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [4097,4291]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [5029,5053]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [5654,5678]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [5687,5728]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [5905,5939]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [5948,5989]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ReturnStatement [6225,6260]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ReturnStatement [6491,6536]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [6924,6960]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "EnhancedForStatement [6970,7091]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ReturnStatement [7152,7690]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "ForStatement [7933,8218]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: final [9156,9161]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: final [9180,9185]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [9244,9264]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "ForStatement [9273,9914]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [10427,10463]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [10472,10522]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ReturnStatement [10531,10569]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [10787,10805]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [10814,10859]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [10868,10913]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ReturnStatement [10922,10936]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [11188,11206]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [11215,11248]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [11257,11290]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationExpression [2035,2044]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "InfixExpression [2046,2054]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "PostfixExpression [2056,2059]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Block [2061,2135]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: size [6664,6668]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SingleVariableDeclaration [6975,6989]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: incoming [6992,7000]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Block [7002,7091]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationExpression [7938,7947]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "InfixExpression [7949,7957]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "PostfixExpression [7959,7962]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationExpression [9278,9287]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "InfixExpression [9289,9295]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "PostfixExpression [9297,9300]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Block [9302,9914]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "InfixExpression [10320,10359]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [7978,8180]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "ThisExpression [8561,8565]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [9361,9388]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [9401,9428]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [9441,9471]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "IfStatement [9569,9904]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "InfixExpression [10320,10329]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "INFIX_EXPRESSION_OPERATOR: || [10330,10332]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "InfixExpression [10333,10359]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodInvocation [2079,2098]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "MethodInvocation [4998,5018]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "PrefixExpression [9573,9716]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "INFIX_EXPRESSION_OPERATOR: \u003d\u003d [10322,10324]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "NullLiteral [10325,10329]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: i [2123,2124]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "NullLiteral [4630,4634]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "METHOD_INVOCATION_RECEIVER [4998,5007]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: getValue [5008,5016]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [9774,9855]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [9872,9890]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: attr [7075,7079]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: attr [8202,8206]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "METHOD_INVOCATION_RECEIVER [11994,12004]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ImportDeclaration [275,306]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "InfixExpression [1450,1468]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "StringLiteral: \"\" [1489,1491]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "FieldDeclaration [964,1023]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [1502,1539]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ReturnStatement [1548,1591]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [1848,1893]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ReturnStatement [1902,1945]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [1957,2384]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [2641,2684]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [2693,2703]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [2791,2839]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [2848,2962]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [2972,2988]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [3292,3308]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "ClassInstanceCreation [3288,3313]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [3629,3702]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "METHOD_INVOCATION_RECEIVER [3711,3721]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [3943,3966]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [3975,4018]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [4027,4050]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [4227,4250]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [4259,4302]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ForStatement [4311,4513]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ReturnStatement [4749,4806]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [5037,5086]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "EnhancedForStatement [5095,5225]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ReturnStatement [5234,5247]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "InfixExpression [5372,5390]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "IfStatement [5368,5413]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ReturnStatement [5422,5447]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "METHOD_INVOCATION_RECEIVER [5797,5807]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "QualifiedName: incoming.attributes [5815,5834]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [5702,5788]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [5896,6021]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ReturnStatement [6031,6069]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "Javadoc [6081,6318]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [6365,6432]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "METHOD_INVOCATION_RECEIVER [6481,6491]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "MethodInvocation [6481,6498]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodInvocation [6597,6613]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SingleVariableDeclaration [6514,6548]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodInvocation [6551,6572]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "EnhancedForStatement [6509,6625]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [7761,7800]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [7844,7871]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [7629,7672]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SingleVariableDeclaration [7687,7721]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodInvocation [7724,7745]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "EnhancedForStatement [7682,7881]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "PREFIX_EXPRESSION_OPERATOR: ! [8287,8288]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [8302,8312]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "InstanceofExpression [8289,8312]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "ParenthesizedExpression [8288,8313]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "PrefixExpression [8287,8313]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ReturnStatement [8381,8474]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ReturnStatement [8692,8746]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [8808,8868]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [9068,9126]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "EnhancedForStatement [9135,9239]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [9342,9460]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "METHOD_INVOCATION_RECEIVER [9744,9767]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: getValue [9768,9776]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "MethodInvocation [9744,9778]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [9799,9808]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: attr [9809,9813]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [9820,9829]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: dataKey [9830,9837]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "ClassInstanceCreation [9816,9845]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "VariableDeclarationFragment [9809,9845]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "VariableDeclarationStatement [9799,9846]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: values [10573,10579]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "MethodInvocation [10562,10581]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "METHOD_INVOCATION_RECEIVER [10562,10581]",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/jsoup/nodes/BooleanAttribute.java",
        "src/main/java/org/jsoup/nodes/BooleanAttribute.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.jsoup.nodes.BooleanAttribute:BooleanAttribute:[String key]:null"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "org.jsoup.nodes.BooleanAttribute:BooleanAttribute:[String key]:null"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "4",
            "12"
          ],
          "num": 2
        },
        {
          "qualified_names": [
            "5",
            "13"
          ],
          "num": 2
        }
      ],
      "diff": "diff --git a/src/main/java/org/jsoup/nodes/BooleanAttribute.java b/src/main/java/org/jsoup/nodes/BooleanAttribute.java\nindex d3eb4ef..583ea4f 100644\n--- a/src/main/java/org/jsoup/nodes/BooleanAttribute.java\n+++ b/src/main/java/org/jsoup/nodes/BooleanAttribute.java\n@@ -2,6 +2,7 @@\n \n /**\n  * A boolean attribute that is written out without any value.\n+ * @deprecated just use null values (vs empty string) for booleans.\n  */\n public class BooleanAttribute extends Attribute {\n     /**\n@@ -9,7 +10,7 @@\n      * @param key attribute key\n      */\n     public BooleanAttribute(String key) {\n-        super(key, \"\");\n+        super(key, null);\n     }\n \n     @Override\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [95,159]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "NullLiteral [387,391]"
        },
        {
          "type": "delete-node",
          "from": "StringLiteral: \"\" [319,321]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/jsoup/nodes/Document.java",
        "src/main/java/org/jsoup/nodes/Document.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.jsoup.nodes.Document\\$OutputSettings:encoder:[]:CharsetEncoder",
            "org.jsoup.nodes.Document\\$OutputSettings:charset:[Charset charset]:OutputSettings"
          ],
          "num": 2
        },
        {
          "qualified_names": [
            "org.jsoup.nodes.Document\\$OutputSettings:prepareEncoder:[]:CharsetEncoder",
            "org.jsoup.nodes.Document\\$OutputSettings:charset:[String charset]:OutputSettings"
          ],
          "num": 2
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "375",
            "376",
            "377",
            "378",
            "379",
            "380",
            "381",
            "433",
            "447",
            "448",
            "449",
            "450",
            "451",
            "452",
            "453",
            "454",
            "455"
          ],
          "num": 17
        },
        {
          "qualified_names": [
            "375",
            "376",
            "377",
            "436",
            "442",
            "443",
            "444",
            "445"
          ],
          "num": 8
        }
      ],
      "diff": "diff --git a/src/main/java/org/jsoup/nodes/Document.java b/src/main/java/org/jsoup/nodes/Document.java\nindex a2448ba..e31457c 100644\n--- a/src/main/java/org/jsoup/nodes/Document.java\n+++ b/src/main/java/org/jsoup/nodes/Document.java\n@@ -372,13 +372,9 @@\n \n         private Entities.EscapeMode escapeMode \u003d Entities.EscapeMode.base;\n         private Charset charset;\n-        // enables the doc to be shared in multiple threads, without creating new encoders on every traverse\n-        private final ThreadLocal\u003cCharsetEncoder\u003e encoder \u003d new ThreadLocal\u003cCharsetEncoder\u003e() {\n-            @Override\n-            protected CharsetEncoder initialValue() {\n-                return charset.newEncoder();\n-            }\n-        };\n+        CharsetEncoder encoder; // initialized by start of OuterHtmlVisitor and cleared at end\n+        Entities.CoreCharset coreCharset; // fast encoders for ascii and utf8\n+\n         private boolean prettyPrint \u003d true;\n         private boolean outline \u003d false;\n         private int indentAmount \u003d 1;\n@@ -430,7 +426,6 @@\n          */\n         public OutputSettings charset(Charset charset) {\n             this.charset \u003d charset;\n-            encoder.remove();\n             return this;\n         }\n \n@@ -444,15 +439,10 @@\n             return this;\n         }\n \n-        CharsetEncoder encoder() {\n-            CharsetEncoder ce \u003d encoder.get();\n-            // check that the charset wasn\u0027t changed since accessed in this thread\n-            // (this is probably overkill for something we\u0027re not advertising as threadsafe)\n-            if (!ce.charset().equals(charset)) {\n-                encoder.remove();\n-                ce \u003d encoder.get(); // retrips initialValue()\n-            }\n-            return ce;\n+        CharsetEncoder prepareEncoder() {\n+            encoder \u003d charset.newEncoder(); // created at start of OuterHtmlVisitor so each pass has own encoder, so OutputSettings can be shared among threads\n+            coreCharset \u003d Entities.CoreCharset.byName(encoder.charset().name());\n+            return encoder;\n         }\n \n         /**\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldDeclaration [12680,12713]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [15277,15589]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SimpleType [12585,12599]"
        },
        {
          "type": "delete-node",
          "from": "Modifier: private [12694,12701]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: final [12702,12707]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ParameterizedType [12708,12735]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ClassInstanceCreation [12746,12926]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [15086,15103]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [15484,15925]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/jsoup/nodes/DocumentType.java",
        "src/main/java/org/jsoup/nodes/DocumentType.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.jsoup.nodes.DocumentType:DocumentType:[String name, String publicId, String systemId]:null"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "org.jsoup.nodes.DocumentType:DocumentType:[String name, String publicId, String systemId]:null"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "3",
            "27"
          ],
          "num": 2
        },
        {
          "qualified_names": [
            "4",
            "29",
            "30",
            "31"
          ],
          "num": 4
        }
      ],
      "diff": "diff --git a/src/main/java/org/jsoup/nodes/DocumentType.java b/src/main/java/org/jsoup/nodes/DocumentType.java\nindex 7d5d42f..ac40907 100644\n--- a/src/main/java/org/jsoup/nodes/DocumentType.java\n+++ b/src/main/java/org/jsoup/nodes/DocumentType.java\n@@ -1,6 +1,7 @@\n package org.jsoup.nodes;\n \n import org.jsoup.helper.StringUtil;\n+import org.jsoup.helper.Validate;\n import org.jsoup.nodes.Document.OutputSettings.Syntax;\n \n import java.io.IOException;\n@@ -25,6 +26,9 @@\n      * @param systemId the doctype\u0027s system ID\n      */\n     public DocumentType(String name, String publicId, String systemId) {\n+        Validate.notNull(name);\n+        Validate.notNull(publicId);\n+        Validate.notNull(systemId);\n         attr(NAME, name);\n         attr(PUBLIC_ID, publicId);\n         if (has(PUBLIC_ID)) {\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "ImportDeclaration [62,95]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [1007,1030]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [1039,1066]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [1075,1102]"
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/jsoup/nodes/Element.java",
        "src/main/java/org/jsoup/nodes/Element.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.jsoup.nodes.Element:text:[]:String",
            "org.jsoup.nodes.Element:outerHtmlTail:[Appendable accum, int depth, Document.OutputSettings out]:void",
            "org.jsoup.nodes.Element:outerHtmlHead:[Appendable accum, int depth, Document.OutputSettings out]:void"
          ],
          "num": 3
        },
        {
          "qualified_names": [
            "org.jsoup.nodes.Element:outerHtmlHead:[final Appendable accum, int depth, final Document.OutputSettings out]:void",
            "org.jsoup.nodes.Element:outerHtmlTail:[Appendable accum, int depth, Document.OutputSettings out]:void",
            "org.jsoup.nodes.Element:text:[]:String"
          ],
          "num": 3
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "1024",
            "1303",
            "1312",
            "1313",
            "1314",
            "1315",
            "1316",
            "1326",
            "1335"
          ],
          "num": 9
        },
        {
          "qualified_names": [
            "1024",
            "1303",
            "1312",
            "1313",
            "1323",
            "1332"
          ],
          "num": 6
        }
      ],
      "diff": "diff --git a/src/main/java/org/jsoup/nodes/Element.java b/src/main/java/org/jsoup/nodes/Element.java\nindex 266bd14..83df680 100644\n--- a/src/main/java/org/jsoup/nodes/Element.java\n+++ b/src/main/java/org/jsoup/nodes/Element.java\n@@ -1021,7 +1021,7 @@\n                     if (accum.length() \u003e 0 \u0026\u0026\n                         (element.isBlock() || element.tag.getName().equals(\"br\")) \u0026\u0026\n                         !TextNode.lastCharIsWhitespace(accum))\n-                        accum.append(\" \");\n+                        accum.append(\u0027 \u0027);\n                 }\n             }\n \n@@ -1300,7 +1300,7 @@\n         return this;\n     }\n \n-    void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n+    void outerHtmlHead(final Appendable accum, int depth, final Document.OutputSettings out) throws IOException {\n         if (out.prettyPrint() \u0026\u0026 (tag.formatAsBlock() || (parent() !\u003d null \u0026\u0026 parent().tag().formatAsBlock()) || out.outline())) {\n             if (accum instanceof StringBuilder) {\n                 if (((StringBuilder) accum).length() \u003e 0)\n@@ -1309,11 +1309,8 @@\n                 indent(accum, depth, out);\n             }\n         }\n-        accum\n-                .append(\"\u003c\")\n-                .append(tagName());\n-        if (hasAttributes())\n-            attributes.html(accum, out);\n+        accum.append(\u0027\u003c\u0027).append(tagName());\n+        if (attributes !\u003d null) attributes.html(accum, out);\n \n         // selfclosing includes unknown tags, isEmpty defines tags that are always empty\n         if (childNodes.isEmpty() \u0026\u0026 tag.isSelfClosing()) {\n@@ -1323,7 +1320,7 @@\n                 accum.append(\" /\u003e\"); // \u003cimg\u003e in html, \u003cimg /\u003e in xml\n         }\n         else\n-            accum.append(\"\u003e\");\n+            accum.append(\u0027\u003e\u0027);\n     }\n \n \tvoid outerHtmlTail(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n@@ -1332,7 +1329,7 @@\n                     tag.formatAsBlock() || (out.outline() \u0026\u0026 (childNodes.size()\u003e1 || (childNodes.size()\u003d\u003d1 \u0026\u0026 !(childNodes.get(0) instanceof TextNode))))\n             )))\n                 indent(accum, depth, out);\n-            accum.append(\"\u003c/\").append(tagName()).append(\"\u003e\");\n+            accum.append(\"\u003c/\").append(tagName()).append(\u0027\u003e\u0027);\n         }\n     }\n \n",
      "operations": [
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: final [46872,46877]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: final [46907,46912]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "InfixExpression [47394,47412]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "CharacterLiteral: \u0027\u003e\u0027 [47848,47851]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "CharacterLiteral: \u0027\u003c\u0027 [47358,47361]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "CharacterLiteral: \u0027\u003e\u0027 [48356,48359]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "CharacterLiteral: \u0027 \u0027 [37418,37421]"
        },
        {
          "type": "delete-node",
          "from": "StringLiteral: \" \" [37418,37421]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "StringLiteral: \"\u003c\" [47363,47366]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodInvocation [47416,47431]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "StringLiteral: \"\u003e\" [47879,47882]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "StringLiteral: \"\u003e\" [48387,48390]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/jsoup/nodes/Entities.java",
        "src/main/java/org/jsoup/nodes/Entities.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.jsoup.nodes.Entities:escape:[Appendable accum, String string, Document.OutputSettings out, boolean inAttribute, boolean normaliseWhite, boolean stripLeadingWhite]:void",
            "org.jsoup.nodes.Entities:byName:[String name]:CoreCharset"
          ],
          "num": 2
        },
        {
          "qualified_names": [
            "org.jsoup.nodes.Entities:escape:[Appendable accum, String string, Document.OutputSettings out, boolean inAttribute, boolean normaliseWhite, boolean stripLeadingWhite]:void",
            "org.jsoup.nodes.Entities:byName:[final String name]:CoreCharset"
          ],
          "num": 2
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "164",
            "165",
            "281",
            "284"
          ],
          "num": 4
        },
        {
          "qualified_names": [
            "164",
            "165",
            "281",
            "284"
          ],
          "num": 4
        }
      ],
      "diff": "diff --git a/src/main/java/org/jsoup/nodes/Entities.java b/src/main/java/org/jsoup/nodes/Entities.java\nindex 1f7cc6b..274d6fe 100644\n--- a/src/main/java/org/jsoup/nodes/Entities.java\n+++ b/src/main/java/org/jsoup/nodes/Entities.java\n@@ -161,8 +161,8 @@\n         boolean lastWasWhite \u003d false;\n         boolean reachedNonWhite \u003d false;\n         final EscapeMode escapeMode \u003d out.escapeMode();\n-        final CharsetEncoder encoder \u003d out.encoder();\n-        final CoreCharset coreCharset \u003d CoreCharset.byName(encoder.charset().name());\n+        final CharsetEncoder encoder \u003d out.encoder !\u003d null ? out.encoder : out.prepareEncoder();\n+        final CoreCharset coreCharset \u003d out.coreCharset; // init in out.prepareEncoder()\n         final int length \u003d string.length();\n \n         int codePoint;\n@@ -278,10 +278,10 @@\n         }\n     }\n \n-    private enum CoreCharset {\n+    enum CoreCharset {\n         ascii, utf, fallback;\n \n-        private static CoreCharset byName(String name) {\n+        static CoreCharset byName(final String name) {\n             if (name.equals(\"US-ASCII\"))\n                 return ascii;\n             if (name.startsWith(\"UTF-\")) // covers UTF-8, UTF-16, et al\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [5921,6009]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [6018,6066]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: final [10907,10912]"
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [5921,5966]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [5975,6052]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: private [10777,10784]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: private [10843,10850]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/jsoup/nodes/Node.java",
        "src/main/java/org/jsoup/nodes/Node.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.jsoup.nodes.Node:outerHtmlHead:[Appendable accum, int depth, Document.OutputSettings out]:void",
            "org.jsoup.nodes.Node\\$OuterHtmlVisitor:OuterHtmlVisitor:[Appendable accum, Document.OutputSettings out]:null",
            "org.jsoup.nodes.Node:indent:[Appendable accum, int depth, Document.OutputSettings out]:void",
            "org.jsoup.nodes.Node:attr:[String attributeKey]:String",
            "org.jsoup.nodes.Node:outerHtmlTail:[Appendable accum, int depth, Document.OutputSettings out]:void"
          ],
          "num": 5
        },
        {
          "qualified_names": [
            "org.jsoup.nodes.Node:attr:[String attributeKey]:String",
            "org.jsoup.nodes.Node:outerHtmlHead:[final Appendable accum, int depth, final Document.OutputSettings out]:void",
            "org.jsoup.nodes.Node\\$OuterHtmlVisitor:OuterHtmlVisitor:[Appendable accum, Document.OutputSettings out]:null",
            "org.jsoup.nodes.Node:outerHtmlTail:[final Appendable accum, int depth, final Document.OutputSettings out]:void",
            "org.jsoup.nodes.Node:indent:[Appendable accum, int depth, Document.OutputSettings out]:void"
          ],
          "num": 5
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "17",
            "18",
            "72",
            "585",
            "587",
            "605",
            "690"
          ],
          "num": 7
        },
        {
          "qualified_names": [
            "16",
            "70",
            "583",
            "585",
            "603",
            "689"
          ],
          "num": 6
        }
      ],
      "diff": "diff --git a/src/main/java/org/jsoup/nodes/Node.java b/src/main/java/org/jsoup/nodes/Node.java\nindex 9866e43..3fcfff9 100644\n--- a/src/main/java/org/jsoup/nodes/Node.java\n+++ b/src/main/java/org/jsoup/nodes/Node.java\n@@ -14,8 +14,6 @@\n import java.util.LinkedList;\n import java.util.List;\n \n-import static org.jsoup.internal.Normalizer.lowerCase;\n-\n /**\n  The base, abstract Node model. Elements, Documents, Comments etc are all Node instances.\n \n@@ -69,7 +67,7 @@\n         String val \u003d attributes().getIgnoreCase(attributeKey);\n         if (val.length() \u003e 0)\n             return val;\n-        else if (lowerCase(attributeKey).startsWith(\"abs:\"))\n+        else if (attributeKey.startsWith(\"abs:\"))\n             return absUrl(attributeKey.substring(\"abs:\".length()));\n         else return \"\";\n     }\n@@ -582,9 +580,9 @@\n      @param accum accumulator to place HTML into\n      @throws IOException if appending to the given accumulator fails.\n      */\n-    abstract void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException;\n+    abstract void outerHtmlHead(final Appendable accum, int depth, final Document.OutputSettings out) throws IOException;\n \n-    abstract void outerHtmlTail(Appendable accum, int depth, Document.OutputSettings out) throws IOException;\n+    abstract void outerHtmlTail(final Appendable accum, int depth, final Document.OutputSettings out) throws IOException;\n \n     /**\n      * Write this node and its children to the given {@link Appendable}.\n@@ -602,7 +600,7 @@\n     }\n \n     protected void indent(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n-        accum.append(\"\\n\").append(StringUtil.padding(depth * out.indentAmount()));\n+        accum.append(\u0027\\n\u0027).append(StringUtil.padding(depth * out.indentAmount()));\n     }\n \n     /**\n@@ -688,6 +686,7 @@\n         OuterHtmlVisitor(Appendable accum, Document.OutputSettings out) {\n             this.accum \u003d accum;\n             this.out \u003d out;\n+            out.prepareEncoder();\n         }\n \n         public void head(Node node, int depth) {\n",
      "operations": [
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: final [18971,18976]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: final [19006,19011]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: final [19094,19099]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: final [19129,19134]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [22857,22878]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "CharacterLiteral: \u0027\\n\u0027 [19715,19719]"
        },
        {
          "type": "delete-tree",
          "from": "ImportDeclaration [412,466]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: lowerCase [2158,2167]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "METHOD_INVOCATION_ARGUMENTS [2168,2180]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "MethodInvocation [2158,2181]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "StringLiteral: \"\\n\" [19758,19762]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/jsoup/parser/ParseSettings.java",
        "src/main/java/org/jsoup/parser/ParseSettings.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.jsoup.parser.ParseSettings:normalizeAttributes:[Attributes attributes]:Attributes"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "org.jsoup.parser.ParseSettings:normalizeAttributes:[Attributes attributes]:Attributes"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "3",
            "55",
            "56",
            "57"
          ],
          "num": 4
        },
        {
          "qualified_names": [
            "2",
            "54"
          ],
          "num": 2
        }
      ],
      "diff": "diff --git a/src/main/java/org/jsoup/parser/ParseSettings.java b/src/main/java/org/jsoup/parser/ParseSettings.java\nindex e9df9df..25a9b86 100644\n--- a/src/main/java/org/jsoup/parser/ParseSettings.java\n+++ b/src/main/java/org/jsoup/parser/ParseSettings.java\n@@ -1,6 +1,5 @@\n package org.jsoup.parser;\n \n-import org.jsoup.nodes.Attribute;\n import org.jsoup.nodes.Attributes;\n \n import static org.jsoup.internal.Normalizer.lowerCase;\n@@ -52,9 +51,7 @@\n \n     Attributes normalizeAttributes(Attributes attributes) {\n         if (!preserveAttributeCase) {\n-            for (Attribute attr : attributes) {\n-                attr.setKey(lowerCase(attr.getKey()));\n-            }\n+            attributes.normalize();\n         }\n         return attributes;\n     }\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [1455,1478]"
        },
        {
          "type": "delete-tree",
          "from": "ImportDeclaration [27,60]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "EnhancedForStatement [1489,1593]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/jsoup/parser/Token.java",
        "src/main/java/org/jsoup/parser/Token.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.jsoup.parser.Token\\$Tag:newAttribute:[]:void"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "org.jsoup.parser.Token\\$Tag:newAttribute:[]:void"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "4",
            "6",
            "110",
            "112",
            "113",
            "115",
            "117",
            "118"
          ],
          "num": 8
        },
        {
          "qualified_names": [
            "3",
            "108",
            "110",
            "112",
            "114",
            "115"
          ],
          "num": 6
        }
      ],
      "diff": "diff --git a/src/main/java/org/jsoup/parser/Token.java b/src/main/java/org/jsoup/parser/Token.java\nindex c983557..567d7b2 100644\n--- a/src/main/java/org/jsoup/parser/Token.java\n+++ b/src/main/java/org/jsoup/parser/Token.java\n@@ -1,9 +1,7 @@\n package org.jsoup.parser;\n \n import org.jsoup.helper.Validate;\n-import org.jsoup.nodes.Attribute;\n import org.jsoup.nodes.Attributes;\n-import org.jsoup.nodes.BooleanAttribute;\n \n import static org.jsoup.internal.Normalizer.lowerCase;\n \n@@ -107,15 +105,14 @@\n                 // the tokeniser has skipped whitespace control chars, but trimming could collapse to empty for other control codes, so verify here\n                 pendingAttributeName \u003d pendingAttributeName.trim();\n                 if (pendingAttributeName.length() \u003e 0) {\n-                    Attribute attribute;\n+                    String value;\n                     if (hasPendingAttributeValue)\n-                        attribute \u003d new Attribute(pendingAttributeName,\n-                            pendingAttributeValue.length() \u003e 0 ? pendingAttributeValue.toString() : pendingAttributeValueS);\n+                        value \u003d pendingAttributeValue.length() \u003e 0 ? pendingAttributeValue.toString() : pendingAttributeValueS;\n                     else if (hasEmptyAttributeValue)\n-                        attribute \u003d new Attribute(pendingAttributeName, \"\");\n+                        value \u003d \"\";\n                     else\n-                        attribute \u003d new BooleanAttribute(pendingAttributeName);\n-                    attributes.put(attribute);\n+                        value \u003d null;\n+                    attributes.put(pendingAttributeName, value);\n                 }\n             }\n             pendingAttributeName \u003d null;\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [3509,3522]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [3597,3700]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [3778,3789]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [3839,3852]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: value [3910,3915]"
        },
        {
          "type": "delete-tree",
          "from": "ImportDeclaration [61,94]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ImportDeclaration [130,170]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [3584,3604]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [3679,3851]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [3929,3981]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [4031,4086]",
          "to": ""
        }
      ]
    }
  ],
  "inducing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [
        "org.jsoup.nodes.Attribute:shouldCollapseAttribute:[String key, String val, Document.OutputSettings out]:boolean",
        "org.jsoup.nodes.Attributes\\$Dataset:Dataset:[Attributes attributes]:null",
        "org.jsoup.nodes.Attributes:checkCapacity:[int minNewSize]:void",
        "org.jsoup.nodes.Attributes:checkNotNull:[String val]:String",
        "org.jsoup.nodes.Attribute:isBooleanAttribute:[]:boolean",
        "org.jsoup.nodes.Attribute:Attribute:[String key, String val, Attributes parent]:null",
        "org.jsoup.nodes.Attribute:setValue:[String val]:String",
        "org.jsoup.nodes.Node:outerHtmlTail:[final Appendable accum, int depth, final Document.OutputSettings out]:void",
        "org.jsoup.nodes.Attributes:remove:[int index]:void",
        "org.jsoup.nodes.Document\\$OutputSettings:prepareEncoder:[]:CharsetEncoder",
        "org.jsoup.nodes.Attribute:isBooleanAttribute:[final String key]:boolean",
        "org.jsoup.nodes.Document\\$OutputSettings:charset:[String charset]:OutputSettings",
        "org.jsoup.nodes.Attributes:html:[final Appendable accum, final Document.OutputSettings out]:void",
        "org.jsoup.nodes.Attributes:indexOfKey:[String key]:int",
        "org.jsoup.nodes.Attributes:add:[String key, String value]:void",
        "org.jsoup.nodes.Entities:byName:[final String name]:CoreCharset",
        "org.jsoup.nodes.Element:outerHtmlHead:[final Appendable accum, int depth, final Document.OutputSettings out]:void",
        "org.jsoup.nodes.Attributes:normalize:[]:void",
        "org.jsoup.nodes.Attribute:html:[String key, String val, Appendable accum, Document.OutputSettings out]:void",
        "org.jsoup.nodes.Node:outerHtmlHead:[final Appendable accum, int depth, final Document.OutputSettings out]:void",
        "org.jsoup.nodes.Attribute:isDataAttribute:[String key]:boolean",
        "org.jsoup.nodes.Attributes:indexOfKeyIgnoreCase:[String key]:int",
        "org.jsoup.nodes.Attribute:isDataAttribute:[]:boolean"
      ],
      "num": 23
    },
    "delete_functions": {
      "qualified_names": [
        "org.jsoup.nodes.Document\\$OutputSettings:charset:[Charset charset]:OutputSettings",
        "org.jsoup.nodes.Document\\$OutputSettings:encoder:[]:CharsetEncoder",
        "org.jsoup.nodes.Element:outerHtmlHead:[Appendable accum, int depth, Document.OutputSettings out]:void",
        "org.jsoup.nodes.Node:outerHtmlTail:[Appendable accum, int depth, Document.OutputSettings out]:void",
        "org.jsoup.nodes.Attributes\\$Dataset:Dataset:[]:null",
        "org.jsoup.nodes.Entities:byName:[String name]:CoreCharset",
        "org.jsoup.nodes.Attribute:setValue:[String value]:String",
        "org.jsoup.nodes.Attributes:getAttributeIgnoreCase:[String key]:Attribute",
        "org.jsoup.nodes.Attributes:html:[Appendable accum, Document.OutputSettings out]:void",
        "org.jsoup.nodes.Node:outerHtmlHead:[Appendable accum, int depth, Document.OutputSettings out]:void"
      ],
      "num": 10
    }
  },
  "trigger_tests": [
    {
      "test_class": "org.jsoup.nodes.AttributeTest",
      "test_function": "booleanAttributesAreEmptyStringValues",
      "assertion_line": "38",
      "exception": "junit.framework.AssertionFailedError",
      "message": "expected:\u003c\u003e but was:\u003cnull\u003e"
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/jsoup/nodes/Attribute.java",
        "src/main/java/org/jsoup/nodes/Attribute.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.jsoup.nodes.Attribute:getValue:[]:String"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "org.jsoup.nodes.Attribute:getValue:[]:String"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "80"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "80"
          ],
          "num": 1
        }
      ],
      "diff": "diff --git a/src/main/java/org/jsoup/nodes/Attribute.java b/src/main/java/org/jsoup/nodes/Attribute.java\nindex e321b6a..6fab394 100644\n--- a/src/main/java/org/jsoup/nodes/Attribute.java\n+++ b/src/main/java/org/jsoup/nodes/Attribute.java\n@@ -77,7 +77,7 @@\n      @return the attribute value\n      */\n     public String getValue() {\n-        return val;\n+        return Attributes.checkNotNull(val);\n     }\n \n     /**\n",
      "operations": [
        {
          "type": "insert-node",
          "from": "",
          "to": "MethodInvocation [2630,2658]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "METHOD_INVOCATION_RECEIVER [2630,2640]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: checkNotNull [2641,2653]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "METHOD_INVOCATION_ARGUMENTS [2654,2657]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  },
  "patch_changed_mths": {
    "qualified_names": [
      "org.jsoup.nodes.Attribute:getValue()Ljava/lang/String;:regression"
    ],
    "num": 1
  }
}