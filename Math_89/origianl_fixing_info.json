{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "/home/liumengjiao/Desktop/CI/Benchmark/data/changesInfo/",
  "properties": {
    "trigger.tests": "org.apache.commons.math.stat.FrequencyTest::testAddNonComparable",
    "test.dir": "src/test",
    "clz.modified": "org.apache.commons.math.stat.Frequency",
    "src.dir": "src/java"
  },
  "timeoutSecond": 100,
  "proj": "Math",
  "id": "89",
  "workingDir": "../bugs/Math_89_buggy",
  "buggyCommit": "0c84b28c3542f3340f7ec0dffc34c60dff66604e",
  "inducingCommit": "0c84b28c3542f3340f7ec0dffc34c60dff66604e",
  "originalCommit": "43336b08c6c27d55c1c6e8c1b6330cb44a29044e",
  "bug_name": "Math_89",
  "derive": "defects4j",
  "original_fixing_commit": "62b3877f953dd47c4d301be35c77446e2cf55311",
  "buildFiles_changed": false,
  "regression": false,
  "inducing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/math/stat/Frequency.java",
        "src/java/org/apache/commons/math/stat/Frequency.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.math.stat.Frequency:addValue:[Object v]:void"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "org.apache.commons.math.stat.Frequency:addValue:[Comparable\u003c?\u003e v]:void",
            "org.apache.commons.math.stat.Frequency:addValue:[Object v]:void"
          ],
          "num": 2
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "104"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "104",
            "105",
            "106",
            "108",
            "110",
            "111",
            "112",
            "113",
            "114",
            "115",
            "116",
            "117",
            "118",
            "119",
            "120",
            "121",
            "122",
            "123"
          ],
          "num": 18
        }
      ],
      "diff": "diff --git a/src/java/org/apache/commons/math/stat/Frequency.java b/src/java/org/apache/commons/math/stat/Frequency.java\nindex a5b8d7b..237c2f6 100644\n--- a/src/java/org/apache/commons/math/stat/Frequency.java\n+++ b/src/java/org/apache/commons/math/stat/Frequency.java\n@@ -101,9 +101,26 @@\n      * \u003c/p\u003e\n      * \n      * @param v the value to add.\n-     * @throws IllegalArgumentException if \u003ccode\u003ev\u003c/code\u003e is not comparable.\n+     * @throws IllegalArgumentException if \u003ccode\u003ev\u003c/code\u003e is not comparable with previous entries\n+     * @throws ClassCastException if \u003ccode\u003ev\u003c/code\u003e is not Comparable\n+     * @deprecated use {@link #addValue(Comparable)} instead\n      */\n+    @Deprecated\n     public void addValue(Object v) {\n+        addValue((Comparable\u003c?\u003e) v);\n+    }\n+    \n+    /**\n+     * Adds 1 to the frequency count for v.\n+     * \u003cp\u003e\n+     * If other objects have already been added to this Frequency, v must\n+     * be comparable to those that have already been added.\n+     * \u003c/p\u003e\n+     * \n+     * @param v the value to add.\n+     * @throws IllegalArgumentException if \u003ccode\u003ev\u003c/code\u003e is not comparable with previous entries\n+     */\n+    public void addValue(Comparable\u003c?\u003ev){\n         Object obj \u003d v;\n         if (v instanceof Integer) {\n            obj \u003d Long.valueOf(((Integer) v).longValue());\n",
      "operations": [
        {
          "type": "insert-node",
          "from": "",
          "to": "MethodDeclaration [3986,4996]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MarkerAnnotation [3885,3896]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [3986,4338]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: public [4343,4349]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "PrimitiveType: void [4350,4354]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: addValue [4355,4363]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SingleVariableDeclaration [4364,4378]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Block [4379,4996]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [3749,3811]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [3819,3872]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [3942,3970]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        }
      ]
    }
  ],
  "inducing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [
        "org.apache.commons.math.stat.Frequency:addValue:[Comparable\u003c?\u003e v]:void"
      ],
      "num": 1
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  },
  "trigger_tests": [
    {
      "test_class": "org.apache.commons.math.stat.FrequencyTest",
      "test_function": "testAddNonComparable",
      "assertion_line": "195",
      "exception": "java.lang.ClassCastException",
      "message": "java.lang.Object cannot be cast to java.lang.Comparable"
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/math/stat/Frequency.java",
        "src/java/org/apache/commons/math/stat/Frequency.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.math.stat.Frequency:addValue:[Object v]:void"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "org.apache.commons.math.stat.Frequency:addValue:[Object v]:void"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "104",
            "105",
            "110"
          ],
          "num": 3
        },
        {
          "qualified_names": [
            "104",
            "105",
            "110",
            "111",
            "112",
            "113",
            "114"
          ],
          "num": 7
        }
      ],
      "diff": "diff --git a/src/java/org/apache/commons/math/stat/Frequency.java b/src/java/org/apache/commons/math/stat/Frequency.java\nindex 237c2f6..70d622d 100644\n--- a/src/java/org/apache/commons/math/stat/Frequency.java\n+++ b/src/java/org/apache/commons/math/stat/Frequency.java\n@@ -101,13 +101,17 @@\n      * \u003c/p\u003e\n      * \n      * @param v the value to add.\n-     * @throws IllegalArgumentException if \u003ccode\u003ev\u003c/code\u003e is not comparable with previous entries\n-     * @throws ClassCastException if \u003ccode\u003ev\u003c/code\u003e is not Comparable\n+     * @throws IllegalArgumentException if \u003ccode\u003ev\u003c/code\u003e is not Comparable, \n+     *         or is not comparable with previous entries\n      * @deprecated use {@link #addValue(Comparable)} instead\n      */\n     @Deprecated\n     public void addValue(Object v) {\n-        addValue((Comparable\u003c?\u003e) v);\n+        if (v instanceof Comparable\u003c?\u003e){\n+            addValue((Comparable\u003c?\u003e) v);            \n+        } else {\n+            throw new IllegalArgumentException(\"Object must implement Comparable\");\n+        }\n     }\n     \n     /**\n",
      "operations": [
        {
          "type": "insert-node",
          "from": "",
          "to": "TagElement [3651,3779]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "IfStatement [3910,4106]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement:  if \u003ccode\u003ev\u003c/code\u003e is not Comparable,  [3683,3721]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: or is not comparable with previous entries [3737,3779]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "InstanceofExpression [3914,3940]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Block [3941,4005]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Block [4011,4106]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement:  if \u003ccode\u003ev\u003c/code\u003e is not comparable with previous entries [3683,3741]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TagElement [3651,3741]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [3749,3811]",
          "to": ""
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  },
  "patch_changed_mths": {
    "qualified_names": [],
    "num": 0
  }
}