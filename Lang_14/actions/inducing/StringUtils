===
insert-node
---
Javadoc [184692,185051]
to
MethodDeclaration [184411,184783]
at 0
===
move-tree
---
VariableDeclarationStatement [193566,193577]
    PrimitiveType: int [193566,193569]
    VariableDeclarationFragment [193570,193576]
        SimpleName: strLen [193570,193576]
to
Block [193556,193838]
at 1
===
move-tree
---
VariableDeclarationStatement [194691,194702]
    PrimitiveType: int [194691,194694]
    VariableDeclarationFragment [194695,194701]
        SimpleName: strLen [194695,194701]
to
Block [194681,194963]
at 1
===
update-node
---
SimpleName: str [7418,7421]
replace str by cs
===
update-node
---
SimpleName: str [8020,8023]
replace str by cs
===
update-node
---
SimpleName: str [8621,8624]
replace str by cs
===
update-node
---
SimpleName: str [9541,9544]
replace str by cs
===
update-node
---
SimpleName: str1 [27330,27334]
replace str1 by cs1
===
update-node
---
SimpleName: str2 [27343,27347]
replace str2 by cs2
===
update-node
---
SimpleName: str [54113,54116]
replace str by cs
===
update-node
---
SimpleName: str [55469,55472]
replace str by cs
===
update-node
---
SimpleName: str [56803,56806]
replace str by cs
===
update-node
---
SimpleName: str [58329,58332]
replace str by cs
===
update-node
---
SimpleName: str [59580,59583]
replace str by cs
===
update-node
---
SimpleName: str [62349,62352]
replace str by cs
===
update-node
---
SimpleName: str [63700,63703]
replace str by cs
===
update-node
---
SimpleName: str [64952,64955]
replace str by cs
===
update-node
---
SimpleName: str [66403,66406]
replace str by cs
===
insert-tree
---
TagElement [184700,184790]
    TextElement: Gets a CharSequence length or <code>0</code> if the CharSequence is [184700,184767]
    TextElement: <code>null</code>. [184772,184790]
to
Javadoc [184692,185051]
at 0
===
insert-tree
---
TagElement [184800,184860]
    SimpleName: cs [184807,184809]
    TextElement: a CharSequence or <code>null</code> [184825,184860]
to
Javadoc [184692,185051]
at 1
===
insert-tree
---
TagElement [184865,184964]
    TextElement:  CharSequence length or <code>0</code> if the CharSequence is [184872,184933]
    TextElement: <code>null</code>. [184946,184964]
to
Javadoc [184692,185051]
at 2
===
move-tree
---
TagElement [184663,184673]
    TextElement:  2.4 [184669,184673]
to
Javadoc [184692,185051]
at 3
===
insert-tree
---
TagElement [184984,185046]
    TextElement:  See  [184995,185000]
    TagElement [185000,185046]
        MethodRef [185007,185045]
            SimpleName: CharSequenceUtils [185007,185024]
            SimpleName: length [185025,185031]
            MethodRefParameter [185032,185044]
                SimpleType [185032,185044]
                    SimpleName: CharSequence [185032,185044]
to
Javadoc [184692,185051]
at 4
===
update-node
---
SimpleName: str [184724,184727]
replace str by cs
===
insert-tree
---
ReturnStatement [185099,185135]
    MethodInvocation [185106,185134]
        METHOD_INVOCATION_RECEIVER [185106,185123]
            SimpleName: CharSequenceUtils [185106,185123]
        SimpleName: length [185124,185130]
        METHOD_INVOCATION_ARGUMENTS [185131,185133]
            SimpleName: cs [185131,185133]
to
Block [184729,184783]
at 0
===
update-node
---
SimpleName: str [193551,193554]
replace str by cs
===
insert-tree
---
IfStatement [194006,194084]
    InfixExpression [194010,194037]
        ParenthesizedExpression [194010,194032]
            Assignment [194011,194031]
                SimpleName: strLen [194011,194017]
                ASSIGNMENT_OPERATOR: = [194018,194019]
                MethodInvocation [194020,194031]
                    METHOD_INVOCATION_RECEIVER [194020,194022]
                        SimpleName: cs [194020,194022]
                    SimpleName: length [194023,194029]
        INFIX_EXPRESSION_OPERATOR: == [194033,194035]
        NumberLiteral: 0 [194036,194037]
    Block [194039,194084]
        ReturnStatement [194053,194074]
            MethodInvocation [194060,194073]
                METHOD_INVOCATION_RECEIVER [194060,194062]
                    SimpleName: cs [194060,194062]
                SimpleName: toString [194063,194071]
to
Block [193556,193838]
at 2
===
update-node
---
SimpleName: str [194676,194679]
replace str by cs
===
insert-tree
---
IfStatement [195221,195299]
    InfixExpression [195225,195252]
        ParenthesizedExpression [195225,195247]
            Assignment [195226,195246]
                SimpleName: strLen [195226,195232]
                ASSIGNMENT_OPERATOR: = [195233,195234]
                MethodInvocation [195235,195246]
                    METHOD_INVOCATION_RECEIVER [195235,195237]
                        SimpleName: cs [195235,195237]
                    SimpleName: length [195238,195244]
        INFIX_EXPRESSION_OPERATOR: == [195248,195250]
        NumberLiteral: 0 [195251,195252]
    Block [195254,195299]
        ReturnStatement [195268,195289]
            MethodInvocation [195275,195288]
                METHOD_INVOCATION_RECEIVER [195275,195277]
                    SimpleName: cs [195275,195277]
                SimpleName: toString [195278,195286]
to
Block [194681,194963]
at 2
===
update-node
---
SimpleName: str [198747,198750]
replace str by cs
===
update-node
---
SimpleName: str [199829,199832]
replace str by cs
===
update-node
---
SimpleName: str [200944,200947]
replace str by cs
===
update-node
---
SimpleName: str [202081,202084]
replace str by cs
===
update-node
---
SimpleName: str [203473,203476]
replace str by cs
===
update-node
---
SimpleName: str [204609,204612]
replace str by cs
===
update-node
---
SimpleName: str [205791,205794]
replace str by cs
===
update-node
---
SimpleName: str [206830,206833]
replace str by cs
===
update-node
---
SimpleName: str [207833,207836]
replace str by cs
===
update-node
---
SimpleName: str [208849,208852]
replace str by cs
===
insert-tree
---
ReturnStatement [213040,213089]
    MethodInvocation [213047,213088]
        METHOD_INVOCATION_RECEIVER [213047,213077]
            MethodInvocation [213047,213077]
                METHOD_INVOCATION_RECEIVER [213047,213064]
                    SimpleName: CharSequenceUtils [213047,213064]
                SimpleName: reverse [213065,213072]
                METHOD_INVOCATION_ARGUMENTS [213073,213076]
                    SimpleName: str [213073,213076]
        SimpleName: toString [213078,213086]
to
Block [212187,212316]
at 1
===
update-node
---
SimpleName: str1 [222518,222522]
replace str1 by cs1
===
update-node
---
SimpleName: str2 [222531,222535]
replace str2 by cs2
===
update-node
---
SimpleName: strs [224649,224653]
replace strs by css
===
update-node
---
TextElement: <p>Checks if a String is empty ("") or null.</p> [6770,6818]
replace <p>Checks if a String is empty ("") or null.</p> by <p>Checks if a CharSequence is empty ("") or null.</p>
===
update-node
---
TextElement: It no longer trims the String. [7152,7182]
replace It no longer trims the String. by It no longer trims the CharSequence.
===
update-node
---
SimpleName: str [7261,7264]
replace str by cs
===
update-node
---
TextElement:   the String to check, may be null [7264,7298]
replace   the String to check, may be null by   the CharSequence to check, may be null
===
update-node
---
TextElement:  <code>true</code> if the String is empty or null [7313,7362]
replace  <code>true</code> if the String is empty or null by  <code>true</code> if the CharSequence is empty or null
===
update-node
---
TextElement: <p>Checks if a String is not empty ("") and not null.</p> [7496,7553]
replace <p>Checks if a String is not empty ("") and not null.</p> by <p>Checks if a CharSequence is not empty ("") and not null.</p>
===
update-node
---
SimpleName: str [7851,7854]
replace str by cs
===
update-node
---
TextElement:   the String to check, may be null [7854,7888]
replace   the String to check, may be null by   the CharSequence to check, may be null
===
update-node
---
TextElement:  <code>true</code> if the String is not empty and not null [7903,7961]
replace  <code>true</code> if the String is not empty and not null by  <code>true</code> if the CharSequence is not empty and not null
===
update-node
---
TextElement: <p>Checks if a String is whitespace, empty ("") or null.</p> [8091,8151]
replace <p>Checks if a String is whitespace, empty ("") or null.</p> by <p>Checks if a CharSequence is whitespace, empty ("") or null.</p>
===
update-node
---
SimpleName: str [8434,8437]
replace str by cs
===
update-node
---
TextElement:   the String to check, may be null [8437,8471]
replace   the String to check, may be null by   the CharSequence to check, may be null
===
update-node
---
TextElement:  <code>true</code> if the String is null, empty or whitespace [8486,8547]
replace  <code>true</code> if the String is null, empty or whitespace by  <code>true</code> if the CharSequence is null, empty or whitespace
===
update-node
---
TextElement: <p>Checks if a String is not empty (""), not null and not whitespace only.</p> [8950,9028]
replace <p>Checks if a String is not empty (""), not null and not whitespace only.</p> by <p>Checks if a CharSequence is not empty (""), not null and not whitespace only.</p>
===
update-node
---
SimpleName: str [9327,9330]
replace str by cs
===
update-node
---
TextElement:   the String to check, may be null [9330,9364]
replace   the String to check, may be null by   the CharSequence to check, may be null
===
update-node
---
TextElement:  <code>true</code> if the String is [9379,9414]
replace  <code>true</code> if the String is by  <code>true</code> if the CharSequence is
===
update-node
---
TextElement: <p>Compares two Strings, returning <code>true</code> if they are equal.</p> [26499,26574]
replace <p>Compares two Strings, returning <code>true</code> if they are equal.</p> by <p>Compares two CharSequences, returning <code>true</code> if they are equal.</p>
===
update-node
---
SimpleName: str1 [27086,27090]
replace str1 by cs1
===
update-node
---
TextElement:   the first String, may be null [27090,27121]
replace   the first String, may be null by   the first CharSequence, may be null
===
update-node
---
SimpleName: str2 [27136,27140]
replace str2 by cs2
===
update-node
---
TextElement:   the second String, may be null [27140,27172]
replace   the second String, may be null by   the second CharSequence, may be null
===
update-node
---
TextElement:  <code>true</code> if the Strings are equal, case sensitive, or [27187,27250]
replace  <code>true</code> if the Strings are equal, case sensitive, or by  <code>true</code> if the CharSequences are equal, case sensitive, or
===
update-node
---
SimpleName: String [27323,27329]
replace String by CharSequence
===
update-node
---
SimpleName: String [27336,27342]
replace String by CharSequence
===
update-node
---
TextElement: <p>Search a String to find the first index of any [53140,53189]
replace <p>Search a String to find the first index of any by <p>Search a CharSequence to find the first index of any
===
update-node
---
SimpleName: str [53870,53873]
replace str by cs
===
update-node
---
TextElement:   the String to check, may be null [53873,53907]
replace   the String to check, may be null by   the CharSequence to check, may be null
===
update-node
---
SimpleName: String [54106,54112]
replace String by CharSequence
===
update-node
---
TextElement: <p>Search a String to find the first index of any [54538,54587]
replace <p>Search a String to find the first index of any by <p>Search a CharSequence to find the first index of any
===
update-node
---
SimpleName: str [55226,55229]
replace str by cs
===
update-node
---
TextElement:   the String to check, may be null [55229,55263]
replace   the String to check, may be null by   the CharSequence to check, may be null
===
update-node
---
SimpleName: String [55462,55468]
replace String by CharSequence
===
update-node
---
TextElement: <p>Checks if the String contains any character in the given [55759,55818]
replace <p>Checks if the String contains any character in the given by <p>Checks if the CharSequence contains any character in the given
===
update-node
---
TextElement: <p>A <code>null</code> String will return <code>false</code>. [55863,55924]
replace <p>A <code>null</code> String will return <code>false</code>. by <p>A <code>null</code> CharSequence will return <code>false</code>.
===
update-node
---
SimpleName: str [56510,56513]
replace str by cs
===
update-node
---
TextElement:   the String to check, may be null [56513,56547]
replace   the String to check, may be null by   the CharSequence to check, may be null
===
update-node
---
SimpleName: String [56796,56802]
replace String by CharSequence
===
update-node
---
TextElement: Checks if the String contains any character in the given set of characters. [57283,57358]
replace Checks if the String contains any character in the given set of characters. by Checks if the CharSequence contains any character in the given set of characters.
===
update-node
---
TextElement: A <code>null</code> String will return <code>false</code>. A <code>null</code> search string will return [57397,57501]
replace A <code>null</code> String will return <code>false</code>. A <code>null</code> search string will return by A <code>null</code> CharSequence will return <code>false</code>. A <code>null</code> search CharSequence will return
===
update-node
---
SimpleName: str [58009,58012]
replace str by cs
===
update-node
---
TextElement: the String to check, may be null [58031,58063]
replace the String to check, may be null by the CharSequence to check, may be null
===
update-node
---
SimpleName: String [58322,58328]
replace String by CharSequence
===
update-node
---
TextElement: <p>Search a String to find the first index of any [58614,58663]
replace <p>Search a String to find the first index of any by <p>Searches a CharSequence to find the first index of any
===
update-node
---
TextElement: <p>A <code>null</code> String will return <code>-1</code>. [58735,58793]
replace <p>A <code>null</code> String will return <code>-1</code>. by <p>A <code>null</code> CharSequence will return <code>-1</code>.
===
update-node
---
SimpleName: str [59334,59337]
replace str by cs
===
update-node
---
TextElement:   the String to check, may be null [59337,59371]
replace   the String to check, may be null by   the CharSequence to check, may be null
===
update-node
---
SimpleName: String [59573,59579]
replace String by CharSequence
===
update-node
---
TextElement: <p>Checks if the String contains only certain characters.</p> [61408,61469]
replace <p>Checks if the String contains only certain characters.</p> by <p>Checks if the CharSequence contains only certain characters.</p>
===
update-node
---
TextElement: <p>A <code>null</code> String will return <code>false</code>. [61484,61545]
replace <p>A <code>null</code> String will return <code>false</code>. by <p>A <code>null</code> CharSequence will return <code>false</code>.
===
update-node
---
TextElement: An empty String ("") always returns <code>true</code>.</p> [61634,61692]
replace An empty String ("") always returns <code>true</code>.</p> by An empty CharSequence (length()=0) always returns <code>true</code>.</p>
===
update-node
---
SimpleName: str [62131,62134]
replace str by cs
===
update-node
---
SimpleName: String [62342,62348]
replace String by CharSequence
===
update-node
---
TextElement: <p>Checks if the String contains only certain characters.</p> [62735,62796]
replace <p>Checks if the String contains only certain characters.</p> by <p>Checks if the CharSequence contains only certain characters.</p>
===
update-node
---
TextElement: <p>A <code>null</code> String will return <code>false</code>. [62811,62872]
replace <p>A <code>null</code> String will return <code>false</code>. by <p>A <code>null</code> CharSequence will return <code>false</code>.
===
update-node
---
TextElement: An empty String ("") always returns <code>true</code>.</p> [62962,63020]
replace An empty String ("") always returns <code>true</code>.</p> by An empty String (length()=0) always returns <code>true</code>.</p>
===
update-node
---
SimpleName: str [63459,63462]
replace str by cs
===
update-node
---
TextElement:   the String to check, may be null [63462,63496]
replace   the String to check, may be null by   the CharSequence to check, may be null
===
update-node
---
SimpleName: String [63693,63699]
replace String by CharSequence
===
update-node
---
TextElement: <p>Checks that the String does not contain certain characters.</p> [63991,64057]
replace <p>Checks that the String does not contain certain characters.</p> by <p>Checks that the CharSequence does not contain certain characters.</p>
===
update-node
---
TextElement: <p>A <code>null</code> String will return <code>true</code>. [64072,64132]
replace <p>A <code>null</code> String will return <code>true</code>. by <p>A <code>null</code> CharSequence will return <code>true</code>.
===
update-node
---
TextElement: An empty String ("") always returns true.</p> [64222,64267]
replace An empty String ("") always returns true.</p> by An empty CharSequence (length()=0) always returns true.</p>
===
update-node
---
SimpleName: str [64702,64705]
replace str by cs
===
update-node
---
TextElement:   the String to check, may be null [64705,64739]
replace   the String to check, may be null by   the CharSequence to check, may be null
===
update-node
---
SimpleName: String [64945,64951]
replace String by CharSequence
===
update-node
---
TextElement: <p>Checks that the String does not contain certain characters.</p> [65442,65508]
replace <p>Checks that the String does not contain certain characters.</p> by <p>Checks that the CharSequence does not contain certain characters.</p>
===
update-node
---
TextElement: <p>A <code>null</code> String will return <code>true</code>. [65523,65583]
replace <p>A <code>null</code> String will return <code>true</code>. by <p>A <code>null</code> CharSequence will return <code>true</code>.
===
update-node
---
SimpleName: str [66153,66156]
replace str by cs
===
update-node
---
TextElement:   the String to check, may be null [66156,66190]
replace   the String to check, may be null by   the CharSequence to check, may be null
===
update-node
---
SimpleName: String [66396,66402]
replace String by CharSequence
===
update-node
---
SimpleName: str [193286,193289]
replace str by cs
===
update-node
---
TextElement:   the String to capitalize, may be null [193289,193328]
replace   the String to capitalize, may be null by  the String to capitalize, may be null
===
update-node
---
SimpleName: String [193544,193550]
replace String by CharSequence
===
move-tree
---
InfixExpression [193590,193601]
    SimpleName: str [193590,193593]
    INFIX_EXPRESSION_OPERATOR: == [193594,193596]
    NullLiteral [193597,193601]
to
IfStatement [193586,193670]
at 0
===
update-node
---
TextElement: <p>Uncapitalizes a String changing the first letter to title case as [193855,193923]
replace <p>Uncapitalizes a String changing the first letter to title case as by <p>Uncapitalizes a CharSequence changing the first letter to title case as
===
update-node
---
SimpleName: str [194405,194408]
replace str by cs
===
update-node
---
TextElement:   the String to uncapitalize, may be null [194408,194449]
replace   the String to uncapitalize, may be null by  the String to uncapitalize, may be null
===
update-node
---
SimpleName: String [194669,194675]
replace String by CharSequence
===
move-tree
---
InfixExpression [194715,194726]
    SimpleName: str [194715,194718]
    INFIX_EXPRESSION_OPERATOR: == [194719,194721]
    NullLiteral [194722,194726]
to
IfStatement [194711,194795]
at 0
===
update-node
---
TextElement: <p>Checks if the String contains only unicode letters.</p> [198085,198143]
replace <p>Checks if the String contains only unicode letters.</p> by <p>Checks if the CharSequence contains only unicode letters.</p>
===
update-node
---
TextElement: An empty String ("") will return <code>true</code>.</p> [198218,198273]
replace An empty String ("") will return <code>true</code>.</p> by An empty CharSequence (length()=0) will return <code>true</code>.</p>
===
update-node
---
SimpleName: str [198585,198588]
replace str by cs
===
update-node
---
TextElement:   the String to check, may be null [198588,198622]
replace   the String to check, may be null by   the CharSequence to check, may be null
===
update-node
---
SimpleName: String [198740,198746]
replace String by CharSequence
===
update-node
---
TextElement: <p>Checks if the String contains only unicode letters and [199046,199103]
replace <p>Checks if the String contains only unicode letters and by <p>Checks if the CharSequence contains only unicode letters and
===
update-node
---
TextElement: An empty String ("") will return <code>true</code>.</p> [199201,199256]
replace An empty String ("") will return <code>true</code>.</p> by An empty CharSequence (length()=0) will return <code>true</code>.</p>
===
update-node
---
SimpleName: str [199644,199647]
replace str by cs
===
update-node
---
TextElement:   the String to check, may be null [199647,199681]
replace   the String to check, may be null by   the CharSequence to check, may be null
===
update-node
---
SimpleName: String [199822,199828]
replace String by CharSequence
===
update-node
---
TextElement: <p>Checks if the String contains only unicode letters or digits.</p> [200156,200224]
replace <p>Checks if the String contains only unicode letters or digits.</p> by <p>Checks if the CharSequence contains only unicode letters or digits.</p>
===
update-node
---
TextElement: An empty String ("") will return <code>true</code>.</p> [200299,200354]
replace An empty String ("") will return <code>true</code>.</p> by An empty CharSequence (length()=0) will return <code>true</code>.</p>
===
update-node
---
SimpleName: str [200757,200760]
replace str by cs
===
update-node
---
TextElement:   the String to check, may be null [200760,200794]
replace   the String to check, may be null by   the CharSequence to check, may be null
===
update-node
---
SimpleName: String [200937,200943]
replace String by CharSequence
===
update-node
---
TextElement: <p>Checks if the String contains only unicode letters, digits [201250,201311]
replace <p>Checks if the String contains only unicode letters, digits by <p>Checks if the CharSequence contains only unicode letters, digits
===
update-node
---
TextElement: An empty String ("") will return <code>true</code>.</p> [201426,201481]
replace An empty String ("") will return <code>true</code>.</p> by An empty CharSequence (length()=0) will return <code>true</code>.</p>
===
update-node
---
SimpleName: str [201882,201885]
replace str by cs
===
update-node
---
TextElement:   the String to check, may be null [201885,201919]
replace   the String to check, may be null by   the CharSequence to check, may be null
===
update-node
---
SimpleName: String [202074,202080]
replace String by CharSequence
===
update-node
---
TextElement: <p>Checks if the string contains only ASCII printable characters.</p> [202415,202484]
replace <p>Checks if the string contains only ASCII printable characters.</p> by <p>Checks if the CharSequence contains only ASCII printable characters.</p>
===
update-node
---
TextElement: An empty String ("") will return <code>true</code>.</p> [202560,202615]
replace An empty String ("") will return <code>true</code>.</p> by An empty CharSequence (length()=0) will return <code>true</code>.</p>
===
update-node
---
SimpleName: str [203272,203275]
replace str by cs
===
update-node
---
TextElement:  the string to check, may be null [203275,203308]
replace  the string to check, may be null by  the CharSequence to check, may be null
===
update-node
---
SimpleName: String [203466,203472]
replace String by CharSequence
===
update-node
---
TextElement: <p>Checks if the String contains only unicode digits. [203780,203833]
replace <p>Checks if the String contains only unicode digits. by <p>Checks if the CharSequence contains only unicode digits.
===
update-node
---
TextElement: An empty String ("") will return <code>true</code>.</p> [203977,204032]
replace An empty String ("") will return <code>true</code>.</p> by An empty CharSequence (length()=0) will return <code>true</code>.</p>
===
update-node
---
SimpleName: str [204446,204449]
replace str by cs
===
update-node
---
TextElement:   the String to check, may be null [204449,204483]
replace   the String to check, may be null by   the CharSequence to check, may be null
===
update-node
---
SimpleName: String [204602,204608]
replace String by CharSequence
===
update-node
---
TextElement: <p>Checks if the String contains only unicode digits or space [204907,204968]
replace <p>Checks if the String contains only unicode digits or space by <p>Checks if the CharSequence contains only unicode digits or space
===
update-node
---
TextElement: An empty String ("") will return <code>true</code>.</p> [205139,205194]
replace An empty String ("") will return <code>true</code>.</p> by An empty CharSequence (length()=0) will return <code>true</code>.</p>
===
update-node
---
SimpleName: str [205606,205609]
replace str by cs
===
update-node
---
TextElement:   the String to check, may be null [205609,205643]
replace   the String to check, may be null by   the CharSequence to check, may be null
===
update-node
---
SimpleName: String [205784,205790]
replace String by CharSequence
===
update-node
---
TextElement: <p>Checks if the String contains only whitespace.</p> [206117,206170]
replace <p>Checks if the String contains only whitespace.</p> by <p>Checks if the CharSequence contains only whitespace.</p>
===
update-node
---
TextElement: An empty String ("") will return <code>true</code>.</p> [206245,206300]
replace An empty String ("") will return <code>true</code>.</p> by An empty CharSequence (length()=0) will return <code>true</code>.</p>
===
update-node
---
SimpleName: str [206642,206645]
replace str by cs
===
update-node
---
TextElement:   the String to check, may be null [206645,206679]
replace   the String to check, may be null by   the CharSequence to check, may be null
===
update-node
---
SimpleName: String [206823,206829]
replace String by CharSequence
===
update-node
---
TextElement: <p>Checks if the String contains only lowercase characters.</p> [207135,207198]
replace <p>Checks if the String contains only lowercase characters.</p> by <p>Checks if the CharSequence contains only lowercase characters.</p>
===
update-node
---
TextElement: An empty String ("") will return <code>false</code>.</p> [207273,207329]
replace An empty String ("") will return <code>false</code>.</p> by An empty CharSequence (length()=0) will return <code>false</code>.</p>
===
update-node
---
SimpleName: str [207633,207636]
replace str by cs
===
update-node
---
TextElement:   the String to check, may be null [207636,207670]
replace   the String to check, may be null by   the CharSequence to check, may be null
===
update-node
---
SimpleName: String [207826,207832]
replace String by CharSequence
===
update-node
---
TextElement: <p>Checks if the String contains only uppercase characters.</p> [208151,208214]
replace <p>Checks if the String contains only uppercase characters.</p> by <p>Checks if the CharSequence contains only uppercase characters.</p>
===
update-node
---
TextElement: An empty String ("") will return <code>false</code>.</p> [208289,208345]
replace An empty String ("") will return <code>false</code>.</p> by An empty String (length()=0) will return <code>false</code>.</p>
===
update-node
---
SimpleName: str [208649,208652]
replace str by cs
===
update-node
---
TextElement:   the String to check, may be null [208652,208686]
replace   the String to check, may be null by  the CharSequence to check, may be null
===
update-node
---
SimpleName: String [208842,208848]
replace String by CharSequence
===
update-node
---
TextElement: <p>Compares two Strings, and returns the index at which the [221577,221636]
replace <p>Compares two Strings, and returns the index at which the by <p>Compares two CharSequences, and returns the index at which the
===
update-node
---
TextElement: Strings begin to differ.</p> [221644,221672]
replace Strings begin to differ.</p> by CharSequences begin to differ.</p>
===
update-node
---
SimpleName: str1 [222275,222279]
replace str1 by cs1
===
update-node
---
TextElement:   the first String, may be null [222279,222310]
replace   the first String, may be null by   the first CharSequence, may be null
===
update-node
---
SimpleName: str2 [222325,222329]
replace str2 by cs2
===
update-node
---
TextElement:   the second String, may be null [222329,222361]
replace   the second String, may be null by   the second CharSequence, may be null
===
update-node
---
TextElement:  the index where str2 and str1 begin to differ; -1 if they are equal [222376,222444]
replace  the index where str2 and str1 begin to differ; -1 if they are equal by  the index where cs1 and cs2 begin to differ; -1 if they are equal
===
update-node
---
SimpleName: String [222511,222517]
replace String by CharSequence
===
update-node
---
SimpleName: String [222524,222530]
replace String by CharSequence
===
update-node
---
TextElement: <p>Compares all Strings in an array and returns the index at which the [222984,223054]
replace <p>Compares all Strings in an array and returns the index at which the by <p>Compares all CharSequences in an array and returns the index at which the
===
update-node
---
TextElement: Strings begin to differ.</p> [223062,223090]
replace Strings begin to differ.</p> by CharSequences begin to differ.</p>
===
update-node
---
SimpleName: strs [224445,224449]
replace strs by css
===
update-node
---
TextElement:   array of strings, entries may be null [224449,224488]
replace   array of strings, entries may be null by   array of CharSequences, entries may be null
===
update-node
---
SimpleName: String [231214,231220]
replace String by CharSequence
===
update-node
---
SimpleName: String [231224,231230]
replace String by CharSequence
===
move-tree
---
InfixExpression [62457,62470]
    SimpleName: valid [62457,62462]
    INFIX_EXPRESSION_OPERATOR: == [62463,62465]
    NullLiteral [62466,62470]
to
InfixExpression [62456,62488]
at 0
===
move-tree
---
InfixExpression [62476,62487]
    SimpleName: str [62476,62479]
    INFIX_EXPRESSION_OPERATOR: == [62480,62482]
    NullLiteral [62483,62487]
to
InfixExpression [62456,62488]
at 3
===
move-tree
---
InfixExpression [68115,68126]
    SimpleName: str [68115,68118]
    INFIX_EXPRESSION_OPERATOR: == [68119,68121]
    NullLiteral [68122,68126]
to
InfixExpression [68114,68151]
at 0
===
move-tree
---
InfixExpression [68132,68150]
    SimpleName: searchStrs [68132,68142]
    INFIX_EXPRESSION_OPERATOR: == [68143,68145]
    NullLiteral [68146,68150]
to
InfixExpression [68114,68151]
at 3
===
update-node
---
SimpleName: str [193590,193593]
replace str by cs
===
update-node
---
SimpleName: str [194715,194718]
replace str by cs
===
update-node
---
SimpleName: str [198766,198769]
replace str by cs
===
update-node
---
SimpleName: str [199848,199851]
replace str by cs
===
update-node
---
SimpleName: str [200963,200966]
replace str by cs
===
update-node
---
SimpleName: str [202100,202103]
replace str by cs
===
update-node
---
SimpleName: str [203492,203495]
replace str by cs
===
update-node
---
SimpleName: str [204628,204631]
replace str by cs
===
update-node
---
SimpleName: str [205810,205813]
replace str by cs
===
update-node
---
SimpleName: str [206849,206852]
replace str by cs
===
update-node
---
SimpleName: str1 [222551,222555]
replace str1 by cs1
===
update-node
---
SimpleName: str2 [222559,222563]
replace str2 by cs2
===
update-node
---
SimpleName: String [224640,224646]
replace String by CharSequence
===
update-node
---
QualifiedName: strs.length [224839,224850]
replace strs.length by css.length
===
update-node
---
SimpleName: str [7440,7443]
replace str by cs
===
update-node
---
SimpleName: str [8660,8663]
replace str by cs
===
update-node
---
SimpleName: str1 [27366,27370]
replace str1 by cs1
===
update-node
---
SimpleName: str2 [27381,27385]
replace str2 by cs2
===
update-node
---
SimpleName: str [55607,55610]
replace str by cs
===
update-node
---
SimpleName: str [58454,58457]
replace str by cs
===
update-node
---
SimpleName: str [62476,62479]
replace str by cs
===
update-node
---
SimpleName: str [63738,63741]
replace str by cs
===
update-node
---
SimpleName: str [63839,63842]
replace str by cs
===
update-node
---
SimpleName: str [64992,64995]
replace str by cs
===
update-node
---
SimpleName: str [66443,66446]
replace str by cs
===
update-node
---
SimpleName: str [66545,66548]
replace str by cs
===
insert-node
---
NullLiteral [193962,193966]
to
ReturnStatement [193649,193660]
at 0
===
insert-node
---
NullLiteral [195177,195181]
to
ReturnStatement [194774,194785]
at 0
===
update-node
---
SimpleName: str [207852,207855]
replace str by cs
===
update-node
---
SimpleName: str [208868,208871]
replace str by cs
===
update-node
---
SimpleName: str1 [222612,222616]
replace str1 by cs1
===
update-node
---
SimpleName: str2 [222628,222632]
replace str2 by cs2
===
update-node
---
SimpleName: strs [224669,224673]
replace strs by css
===
update-node
---
QualifiedName: strs.length [224685,224696]
replace strs.length by css.length
===
move-tree
---
InfixExpression [241638,241667]
    InfixExpression [241638,241649]
        SimpleName: str [241638,241641]
        INFIX_EXPRESSION_OPERATOR: == [241642,241644]
        NullLiteral [241645,241649]
    INFIX_EXPRESSION_OPERATOR: && [241650,241652]
    InfixExpression [241653,241667]
        SimpleName: suffix [241653,241659]
        INFIX_EXPRESSION_OPERATOR: == [241660,241662]
        NullLiteral [241663,241667]
to
ReturnStatement [241630,241669]
at 0
===
update-node
---
SimpleName: str [8063,8066]
replace str by cs
===
update-node
---
SimpleName: str [9584,9587]
replace str by cs
===
update-node
---
SimpleName: str1 [27396,27400]
replace str1 by cs1
===
update-node
---
SimpleName: str2 [27408,27412]
replace str2 by cs2
===
update-node
---
SimpleName: str [54160,54163]
replace str by cs
===
update-node
---
SimpleName: str [54264,54267]
replace str by cs
===
update-node
---
SimpleName: str [55516,55519]
replace str by cs
===
update-node
---
SimpleName: str [56992,56995]
replace str by cs
===
update-node
---
SimpleName: str [59627,59630]
replace str by cs
===
update-node
---
SimpleName: str [62540,62543]
replace str by cs
===
update-node
---
SimpleName: str [62694,62697]
replace str by cs
===
update-node
---
SimpleName: str [65088,65091]
replace str by cs
===
update-node
---
SimpleName: String [194597,194603]
replace String by CharSequence
===
update-node
---
SimpleName: str [198834,198837]
replace str by cs
===
update-node
---
SimpleName: str [199916,199919]
replace str by cs
===
update-node
---
SimpleName: str [201031,201034]
replace str by cs
===
update-node
---
SimpleName: str [202168,202171]
replace str by cs
===
update-node
---
SimpleName: str [203560,203563]
replace str by cs
===
update-node
---
SimpleName: str [204696,204699]
replace str by cs
===
update-node
---
SimpleName: str [205878,205881]
replace str by cs
===
update-node
---
SimpleName: str [206917,206920]
replace str by cs
===
update-node
---
SimpleName: str [207875,207878]
replace str by cs
===
update-node
---
SimpleName: str [207936,207939]
replace str by cs
===
update-node
---
SimpleName: str [208891,208894]
replace str by cs
===
update-node
---
SimpleName: str [208952,208955]
replace str by cs
===
update-node
---
SimpleName: String [232856,232862]
replace String by CharSequence
===
update-node
---
SimpleName: str [7455,7458]
replace str by cs
===
update-node
---
SimpleName: str [56842,56845]
replace str by cs
===
update-node
---
SimpleName: str [59739,59742]
replace str by cs
===
update-node
---
SimpleName: str1 [222715,222719]
replace str1 by cs1
===
update-node
---
SimpleName: str2 [222736,222740]
replace str2 by cs2
===
update-node
---
SimpleName: str2 [222873,222877]
replace str2 by cs2
===
update-node
---
SimpleName: str1 [222894,222898]
replace str1 by cs1
===
update-node
---
SimpleName: strs [225178,225182]
replace strs by css
===
update-node
---
SimpleName: str [54307,54310]
replace str by cs
===
update-node
---
SimpleName: str [57035,57038]
replace str by cs
===
update-node
---
SimpleName: str [65213,65216]
replace str by cs
===
update-node
---
SimpleName: substring [193794,193803]
replace substring by subSequence
===
update-node
---
SimpleName: substring [194919,194928]
replace substring by subSequence
===
update-node
---
SimpleName: str1 [222774,222778]
replace str1 by cs1
===
update-node
---
SimpleName: str2 [222792,222796]
replace str2 by cs2
===
update-node
---
SimpleName: str [8685,8688]
replace str by cs
===
update-node
---
SimpleName: str [56857,56860]
replace str by cs
===
update-node
---
SimpleName: str [59782,59785]
replace str by cs
===
update-node
---
SimpleName: str [193790,193793]
replace str by CharSequenceUtils
===
insert-node
---
SimpleName: cs [194233,194235]
to
METHOD_INVOCATION_ARGUMENTS [193804,193805]
at 0
===
update-node
---
SimpleName: str [194915,194918]
replace str by CharSequenceUtils
===
insert-node
---
SimpleName: cs [195448,195450]
to
METHOD_INVOCATION_ARGUMENTS [194929,194930]
at 0
===
update-node
---
SimpleName: strs [226028,226032]
replace strs by css
===
update-node
---
SimpleName: str [198922,198925]
replace str by cs
===
update-node
---
SimpleName: str [200034,200037]
replace str by cs
===
update-node
---
SimpleName: str [201126,201129]
replace str by cs
===
update-node
---
SimpleName: str [202293,202296]
replace str by cs
===
update-node
---
SimpleName: str [203656,203659]
replace str by cs
===
update-node
---
SimpleName: str [204783,204786]
replace str by cs
===
update-node
---
SimpleName: str [205995,205998]
replace str by cs
===
update-node
---
SimpleName: str [208027,208030]
replace str by cs
===
update-node
---
SimpleName: str [209043,209046]
replace str by cs
===
update-node
---
SimpleName: str [8825,8828]
replace str by cs
===
update-node
---
SimpleName: str [207010,207013]
replace str by cs
===
update-node
---
SimpleName: strs [226145,226149]
replace strs by css
===
update-node
---
SimpleName: str [200005,200008]
replace str by cs
===
update-node
---
SimpleName: str [202264,202267]
replace str by cs
===
update-node
---
SimpleName: str [205966,205969]
replace str by cs
===
update-node
---
SimpleName: str [193754,193757]
replace str by cs
===
update-node
---
SimpleName: str [194879,194882]
replace str by cs
===
update-node
---
SimpleName: strs [225374,225378]
replace strs by css
===
update-node
---
SimpleName: strs [225450,225454]
replace strs by css
===
delete-node
---
ParenthesizedExpression [62456,62471]
===
===
delete-node
---
ParenthesizedExpression [62475,62488]
===
===
delete-node
---
ParenthesizedExpression [68114,68127]
===
===
delete-node
---
ParenthesizedExpression [68131,68151]
===
===
delete-tree
---
TagElement [184422,184498]
    TextElement: Gets a String's length or <code>0</code> if the String is <code>null</code>. [184422,184498]
===
delete-tree
---
TagElement [184514,184572]
    SimpleName: str [184521,184524]
    TextElement: a String or <code>null</code> [184543,184572]
===
delete-tree
---
TagElement [184580,184655]
    TextElement:  String length or <code>0</code> if the String is <code>null</code>. [184587,184655]
===
delete-node
---
Javadoc [184411,184681]
===
===
delete-tree
---
ReturnStatement [184739,184777]
    ConditionalExpression [184746,184776]
        InfixExpression [184746,184757]
            SimpleName: str [184746,184749]
            INFIX_EXPRESSION_OPERATOR: == [184750,184752]
            NullLiteral [184753,184757]
        NumberLiteral: 0 [184760,184761]
        MethodInvocation [184764,184776]
            METHOD_INVOCATION_RECEIVER [184764,184767]
                SimpleName: str [184764,184767]
            SimpleName: length [184768,184774]
===
delete-node
---
INFIX_EXPRESSION_OPERATOR: || [193602,193604]
===
===
delete-tree
---
InfixExpression [193605,193633]
    ParenthesizedExpression [193605,193628]
        Assignment [193606,193627]
            SimpleName: strLen [193606,193612]
            ASSIGNMENT_OPERATOR: = [193613,193614]
            MethodInvocation [193615,193627]
                METHOD_INVOCATION_RECEIVER [193615,193618]
                    SimpleName: str [193615,193618]
                SimpleName: length [193619,193625]
    INFIX_EXPRESSION_OPERATOR: == [193629,193631]
    NumberLiteral: 0 [193632,193633]
===
delete-node
---
InfixExpression [193590,193633]
===
===
delete-node
---
SimpleName: str [193656,193659]
===
===
delete-node
---
INFIX_EXPRESSION_OPERATOR: || [194727,194729]
===
===
delete-tree
---
InfixExpression [194730,194758]
    ParenthesizedExpression [194730,194753]
        Assignment [194731,194752]
            SimpleName: strLen [194731,194737]
            ASSIGNMENT_OPERATOR: = [194738,194739]
            MethodInvocation [194740,194752]
                METHOD_INVOCATION_RECEIVER [194740,194743]
                    SimpleName: str [194740,194743]
                SimpleName: length [194744,194750]
    INFIX_EXPRESSION_OPERATOR: == [194754,194756]
    NumberLiteral: 0 [194757,194758]
===
delete-node
---
InfixExpression [194715,194758]
===
===
delete-node
---
SimpleName: str [194781,194784]
===
===
delete-tree
---
ReturnStatement [212259,212310]
    MethodInvocation [212266,212309]
        METHOD_INVOCATION_RECEIVER [212266,212298]
            MethodInvocation [212266,212298]
                METHOD_INVOCATION_RECEIVER [212266,212288]
                    ClassInstanceCreation [212266,212288]
                        SimpleType [212270,212283]
                            SimpleName: StringBuilder [212270,212283]
                        SimpleName: str [212284,212287]
                SimpleName: reverse [212289,212296]
        SimpleName: toString [212299,212307]
===
delete-node
---
ParenthesizedExpression [241637,241668]
===
