{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "/home/liumengjiao/Desktop/CI/Benchmark/data/changesInfo/",
  "properties": {
    "trigger.tests": "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testEquals",
    "test.dir": "src/test/java",
    "clz.modified": "org.apache.commons.lang3.StringUtils",
    "src.dir": "src/main/java"
  },
  "timeoutSecond": 100,
  "proj": "Lang",
  "id": "14",
  "workingDir": "../bugs/Lang_14_buggy",
  "buggyCommit": "c8afaa3e869cc8c25577641553e0d0b5bdac78b5",
  "inducingCommit": "cf2e48a05c250feb636dd337dae1ffb7a1d9d411",
  "originalCommit": "43885858071f12924607fb91ea595424e5880c3d",
  "bug_name": "Lang_14",
  "derive": "defects4j",
  "original_fixing_commit": "cf7211f9d7d70d56501d8c4c827bf9ce3cac5f0b",
  "buildFiles_changed": true,
  "regression": true,
  "inducing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/lang3/StringUtils.java",
        "src/main/java/org/apache/commons/lang3/StringUtils.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.lang3.StringUtils:isBlank:[CharSequence str]:boolean",
            "org.apache.commons.lang3.StringUtils:indexOfDifference:[String str1, String str2]:int",
            "org.apache.commons.lang3.StringUtils:containsNone:[String str, String invalidChars]:boolean",
            "org.apache.commons.lang3.StringUtils:isAllLowerCase:[String str]:boolean",
            "org.apache.commons.lang3.StringUtils:isEmpty:[CharSequence str]:boolean",
            "org.apache.commons.lang3.StringUtils:isAlphanumericSpace:[String str]:boolean",
            "org.apache.commons.lang3.StringUtils:reverse:[String str]:String",
            "org.apache.commons.lang3.StringUtils:indexOfDifference:[String[] strs]:int",
            "org.apache.commons.lang3.StringUtils:isNotBlank:[CharSequence str]:boolean",
            "org.apache.commons.lang3.StringUtils:isAlphaSpace:[String str]:boolean",
            "org.apache.commons.lang3.StringUtils:isNumericSpace:[String str]:boolean",
            "org.apache.commons.lang3.StringUtils:containsOnly:[String str, char[] valid]:boolean",
            "org.apache.commons.lang3.StringUtils:isNotEmpty:[CharSequence str]:boolean",
            "org.apache.commons.lang3.StringUtils:isAlpha:[String str]:boolean",
            "org.apache.commons.lang3.StringUtils:containsNone:[String str, char[] invalidChars]:boolean",
            "org.apache.commons.lang3.StringUtils:containsAny:[String str, char[] searchChars]:boolean",
            "org.apache.commons.lang3.StringUtils:indexOfAnyBut:[String str, char[] searchChars]:int",
            "org.apache.commons.lang3.StringUtils:capitalize:[String str]:String",
            "org.apache.commons.lang3.StringUtils:isNumeric:[String str]:boolean",
            "org.apache.commons.lang3.StringUtils:indexOfAny:[String str, char[] searchChars]:int",
            "org.apache.commons.lang3.StringUtils:isWhitespace:[String str]:boolean",
            "org.apache.commons.lang3.StringUtils:uncapitalize:[String str]:String",
            "org.apache.commons.lang3.StringUtils:isAllUpperCase:[String str]:boolean",
            "org.apache.commons.lang3.StringUtils:isAlphanumeric:[String str]:boolean",
            "org.apache.commons.lang3.StringUtils:isAsciiPrintable:[String str]:boolean",
            "org.apache.commons.lang3.StringUtils:endsWith:[String str, String suffix, boolean ignoreCase]:boolean",
            "org.apache.commons.lang3.StringUtils:equals:[String str1, String str2]:boolean",
            "org.apache.commons.lang3.StringUtils:indexOfAny:[String str, String searchChars]:int",
            "org.apache.commons.lang3.StringUtils:containsOnly:[String str, String validChars]:boolean",
            "org.apache.commons.lang3.StringUtils:indexOfAny:[String str, String[] searchStrs]:int",
            "org.apache.commons.lang3.StringUtils:containsAny:[String str, String searchChars]:boolean",
            "org.apache.commons.lang3.StringUtils:getLevenshteinDistance:[String s, String t]:int",
            "org.apache.commons.lang3.StringUtils:length:[CharSequence str]:int"
          ],
          "num": 33
        },
        {
          "qualified_names": [
            "org.apache.commons.lang3.StringUtils:containsOnly:[CharSequence cs, char[] valid]:boolean",
            "org.apache.commons.lang3.StringUtils:indexOfDifference:[CharSequence cs1, CharSequence cs2]:int",
            "org.apache.commons.lang3.StringUtils:containsAny:[CharSequence cs, char[] searchChars]:boolean",
            "org.apache.commons.lang3.StringUtils:endsWith:[String str, String suffix, boolean ignoreCase]:boolean",
            "org.apache.commons.lang3.StringUtils:isAlpha:[CharSequence cs]:boolean",
            "org.apache.commons.lang3.StringUtils:isAllUpperCase:[CharSequence cs]:boolean",
            "org.apache.commons.lang3.StringUtils:getLevenshteinDistance:[CharSequence s, CharSequence t]:int",
            "org.apache.commons.lang3.StringUtils:isNotBlank:[CharSequence cs]:boolean",
            "org.apache.commons.lang3.StringUtils:indexOfAnyBut:[CharSequence cs, char[] searchChars]:int",
            "org.apache.commons.lang3.StringUtils:isAlphanumeric:[CharSequence cs]:boolean",
            "org.apache.commons.lang3.StringUtils:containsAny:[CharSequence cs, String searchChars]:boolean",
            "org.apache.commons.lang3.StringUtils:length:[CharSequence cs]:int",
            "org.apache.commons.lang3.StringUtils:containsNone:[CharSequence cs, String invalidChars]:boolean",
            "org.apache.commons.lang3.StringUtils:indexOfAny:[String str, String[] searchStrs]:int",
            "org.apache.commons.lang3.StringUtils:containsOnly:[CharSequence cs, String validChars]:boolean",
            "org.apache.commons.lang3.StringUtils:capitalize:[CharSequence cs]:String",
            "org.apache.commons.lang3.StringUtils:isAsciiPrintable:[CharSequence cs]:boolean",
            "org.apache.commons.lang3.StringUtils:isNumericSpace:[CharSequence cs]:boolean",
            "org.apache.commons.lang3.StringUtils:equals:[CharSequence cs1, CharSequence cs2]:boolean",
            "org.apache.commons.lang3.StringUtils:isNotEmpty:[CharSequence cs]:boolean",
            "org.apache.commons.lang3.StringUtils:isNumeric:[CharSequence cs]:boolean",
            "org.apache.commons.lang3.StringUtils:indexOfAny:[CharSequence cs, char[] searchChars]:int",
            "org.apache.commons.lang3.StringUtils:containsNone:[CharSequence cs, char[] invalidChars]:boolean",
            "org.apache.commons.lang3.StringUtils:isEmpty:[CharSequence cs]:boolean",
            "org.apache.commons.lang3.StringUtils:indexOfAny:[CharSequence cs, String searchChars]:int",
            "org.apache.commons.lang3.StringUtils:isAlphaSpace:[CharSequence cs]:boolean",
            "org.apache.commons.lang3.StringUtils:isBlank:[CharSequence cs]:boolean",
            "org.apache.commons.lang3.StringUtils:reverse:[String str]:String",
            "org.apache.commons.lang3.StringUtils:isAlphanumericSpace:[CharSequence cs]:boolean",
            "org.apache.commons.lang3.StringUtils:indexOfDifference:[CharSequence[] css]:int",
            "org.apache.commons.lang3.StringUtils:uncapitalize:[CharSequence cs]:String",
            "org.apache.commons.lang3.StringUtils:isAllLowerCase:[CharSequence cs]:boolean",
            "org.apache.commons.lang3.StringUtils:isWhitespace:[CharSequence cs]:boolean"
          ],
          "num": 33
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "176",
            "187",
            "190",
            "191",
            "193",
            "194",
            "198",
            "208",
            "209",
            "211",
            "212",
            "216",
            "226",
            "227",
            "230",
            "232",
            "236",
            "244",
            "254",
            "255",
            "259",
            "260",
            "680",
            "694",
            "695",
            "696",
            "699",
            "700",
            "1350",
            "1366",
            "1371",
            "1372",
            "1375",
            "1376",
            "1387",
            "1403",
            "1408",
            "1409",
            "1412",
            "1418",
            "1421",
            "1434",
            "1440",
            "1441",
            "1444",
            "1445",
            "1457",
            "1461",
            "1475",
            "1476",
            "1482",
            "1486",
            "1492",
            "1495",
            "1508",
            "1513",
            "1514",
            "1517",
            "1518",
            "1566",
            "1568",
            "1570",
            "1582",
            "1586",
            "1588",
            "1591",
            "1597",
            "1601",
            "1603",
            "1605",
            "1617",
            "1622",
            "1623",
            "1626",
            "1632",
            "1634",
            "1636",
            "1648",
            "1653",
            "1654",
            "1657",
            "1660",
            "1671",
            "1673",
            "1687",
            "1692",
            "1693",
            "1696",
            "1728",
            "4609",
            "4610",
            "4611",
            "4612",
            "4613",
            "4614",
            "4615",
            "4616",
            "4617",
            "4618",
            "4619",
            "4845",
            "4851",
            "4853",
            "4854",
            "4857",
            "4858",
            "4863",
            "4876",
            "4879",
            "4882",
            "4884",
            "4885",
            "4888",
            "4889",
            "4979",
            "4982",
            "4993",
            "4996",
            "4997",
            "5000",
            "5002",
            "5010",
            "5014",
            "5026",
            "5030",
            "5031",
            "5034",
            "5036",
            "5044",
            "5047",
            "5059",
            "5063",
            "5064",
            "5067",
            "5069",
            "5077",
            "5081",
            "5093",
            "5097",
            "5098",
            "5101",
            "5103",
            "5111",
            "5114",
            "5130",
            "5135",
            "5136",
            "5139",
            "5141",
            "5149",
            "5153",
            "5166",
            "5169",
            "5170",
            "5173",
            "5175",
            "5183",
            "5188",
            "5201",
            "5205",
            "5206",
            "5209",
            "5211",
            "5219",
            "5222",
            "5233",
            "5237",
            "5238",
            "5241",
            "5243",
            "5251",
            "5254",
            "5264",
            "5268",
            "5269",
            "5272",
            "5274",
            "5282",
            "5285",
            "5295",
            "5299",
            "5300",
            "5303",
            "5305",
            "5396",
            "5622",
            "5623",
            "5639",
            "5640",
            "5641",
            "5644",
            "5645",
            "5648",
            "5652",
            "5653",
            "5657",
            "5664",
            "5665",
            "5690",
            "5694",
            "5695",
            "5700",
            "5708",
            "5713",
            "5714",
            "5731",
            "5733",
            "5841",
            "5874",
            "6112"
          ],
          "num": 210
        },
        {
          "qualified_names": [
            "176",
            "187",
            "190",
            "191",
            "193",
            "194",
            "198",
            "208",
            "209",
            "211",
            "212",
            "216",
            "226",
            "227",
            "230",
            "232",
            "236",
            "244",
            "254",
            "255",
            "259",
            "260",
            "680",
            "694",
            "695",
            "696",
            "699",
            "700",
            "1350",
            "1366",
            "1371",
            "1372",
            "1375",
            "1376",
            "1387",
            "1403",
            "1408",
            "1409",
            "1412",
            "1418",
            "1421",
            "1434",
            "1440",
            "1441",
            "1444",
            "1445",
            "1457",
            "1461",
            "1475",
            "1476",
            "1482",
            "1486",
            "1492",
            "1495",
            "1508",
            "1513",
            "1514",
            "1517",
            "1518",
            "1566",
            "1568",
            "1570",
            "1582",
            "1586",
            "1588",
            "1591",
            "1597",
            "1601",
            "1603",
            "1605",
            "1617",
            "1622",
            "1623",
            "1626",
            "1632",
            "1634",
            "1636",
            "1648",
            "1653",
            "1654",
            "1657",
            "1660",
            "1671",
            "1673",
            "1687",
            "1692",
            "1693",
            "1696",
            "1728",
            "4609",
            "4610",
            "4611",
            "4612",
            "4613",
            "4614",
            "4615",
            "4616",
            "4617",
            "4618",
            "4619",
            "4620",
            "4621",
            "4622",
            "4848",
            "4854",
            "4855",
            "4856",
            "4857",
            "4859",
            "4860",
            "4863",
            "4864",
            "4869",
            "4882",
            "4885",
            "4888",
            "4889",
            "4890",
            "4891",
            "4893",
            "4894",
            "4897",
            "4898",
            "4988",
            "4991",
            "5002",
            "5005",
            "5006",
            "5009",
            "5011",
            "5019",
            "5023",
            "5035",
            "5039",
            "5040",
            "5043",
            "5045",
            "5053",
            "5056",
            "5068",
            "5072",
            "5073",
            "5076",
            "5078",
            "5086",
            "5090",
            "5102",
            "5106",
            "5107",
            "5110",
            "5112",
            "5120",
            "5123",
            "5139",
            "5144",
            "5145",
            "5148",
            "5150",
            "5158",
            "5162",
            "5175",
            "5178",
            "5179",
            "5182",
            "5184",
            "5192",
            "5197",
            "5210",
            "5214",
            "5215",
            "5218",
            "5220",
            "5228",
            "5231",
            "5242",
            "5246",
            "5247",
            "5250",
            "5252",
            "5260",
            "5263",
            "5273",
            "5277",
            "5278",
            "5281",
            "5283",
            "5291",
            "5294",
            "5304",
            "5308",
            "5309",
            "5312",
            "5314",
            "5405",
            "5631",
            "5632",
            "5648",
            "5649",
            "5650",
            "5653",
            "5654",
            "5657",
            "5661",
            "5662",
            "5666",
            "5673",
            "5674",
            "5699",
            "5703",
            "5704",
            "5709",
            "5717",
            "5722",
            "5723",
            "5740",
            "5742",
            "5850",
            "5883",
            "6121"
          ],
          "num": 219
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex c68c3a4..595f4bf 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -173,7 +173,7 @@\n     // Empty checks\n     //-----------------------------------------------------------------------\n     /**\n-     * \u003cp\u003eChecks if a String is empty (\"\") or null.\u003c/p\u003e\n+     * \u003cp\u003eChecks if a CharSequence is empty (\"\") or null.\u003c/p\u003e\n      *\n      * \u003cpre\u003e\n      * StringUtils.isEmpty(null)      \u003d true\n@@ -184,18 +184,18 @@\n      * \u003c/pre\u003e\n      *\n      * \u003cp\u003eNOTE: This method changed in Lang version 2.0.\n-     * It no longer trims the String.\n+     * It no longer trims the CharSequence.\n      * That functionality is available in isBlank().\u003c/p\u003e\n      *\n-     * @param str  the String to check, may be null\n-     * @return \u003ccode\u003etrue\u003c/code\u003e if the String is empty or null\n+     * @param cs  the CharSequence to check, may be null\n+     * @return \u003ccode\u003etrue\u003c/code\u003e if the CharSequence is empty or null\n      */\n-    public static boolean isEmpty(CharSequence str) {\n-        return str \u003d\u003d null || str.length() \u003d\u003d 0;\n+    public static boolean isEmpty(CharSequence cs) {\n+        return cs \u003d\u003d null || cs.length() \u003d\u003d 0;\n     }\n \n     /**\n-     * \u003cp\u003eChecks if a String is not empty (\"\") and not null.\u003c/p\u003e\n+     * \u003cp\u003eChecks if a CharSequence is not empty (\"\") and not null.\u003c/p\u003e\n      *\n      * \u003cpre\u003e\n      * StringUtils.isNotEmpty(null)      \u003d false\n@@ -205,15 +205,15 @@\n      * StringUtils.isNotEmpty(\"  bob  \") \u003d true\n      * \u003c/pre\u003e\n      *\n-     * @param str  the String to check, may be null\n-     * @return \u003ccode\u003etrue\u003c/code\u003e if the String is not empty and not null\n+     * @param cs  the CharSequence to check, may be null\n+     * @return \u003ccode\u003etrue\u003c/code\u003e if the CharSequence is not empty and not null\n      */\n-    public static boolean isNotEmpty(CharSequence str) {\n-        return !StringUtils.isEmpty(str);\n+    public static boolean isNotEmpty(CharSequence cs) {\n+        return !StringUtils.isEmpty(cs);\n     }\n \n     /**\n-     * \u003cp\u003eChecks if a String is whitespace, empty (\"\") or null.\u003c/p\u003e\n+     * \u003cp\u003eChecks if a CharSequence is whitespace, empty (\"\") or null.\u003c/p\u003e\n      *\n      * \u003cpre\u003e\n      * StringUtils.isBlank(null)      \u003d true\n@@ -223,17 +223,17 @@\n      * StringUtils.isBlank(\"  bob  \") \u003d false\n      * \u003c/pre\u003e\n      *\n-     * @param str  the String to check, may be null\n-     * @return \u003ccode\u003etrue\u003c/code\u003e if the String is null, empty or whitespace\n+     * @param cs  the CharSequence to check, may be null\n+     * @return \u003ccode\u003etrue\u003c/code\u003e if the CharSequence is null, empty or whitespace\n      * @since 2.0\n      */\n-    public static boolean isBlank(CharSequence str) {\n+    public static boolean isBlank(CharSequence cs) {\n         int strLen;\n-        if (str \u003d\u003d null || (strLen \u003d str.length()) \u003d\u003d 0) {\n+        if (cs \u003d\u003d null || (strLen \u003d cs.length()) \u003d\u003d 0) {\n             return true;\n         }\n         for (int i \u003d 0; i \u003c strLen; i++) {\n-            if ((Character.isWhitespace(str.charAt(i)) \u003d\u003d false)) {\n+            if ((Character.isWhitespace(cs.charAt(i)) \u003d\u003d false)) {\n                 return false;\n             }\n         }\n@@ -241,7 +241,7 @@\n     }\n \n     /**\n-     * \u003cp\u003eChecks if a String is not empty (\"\"), not null and not whitespace only.\u003c/p\u003e\n+     * \u003cp\u003eChecks if a CharSequence is not empty (\"\"), not null and not whitespace only.\u003c/p\u003e\n      *\n      * \u003cpre\u003e\n      * StringUtils.isNotBlank(null)      \u003d false\n@@ -251,13 +251,13 @@\n      * StringUtils.isNotBlank(\"  bob  \") \u003d true\n      * \u003c/pre\u003e\n      *\n-     * @param str  the String to check, may be null\n-     * @return \u003ccode\u003etrue\u003c/code\u003e if the String is\n+     * @param cs  the CharSequence to check, may be null\n+     * @return \u003ccode\u003etrue\u003c/code\u003e if the CharSequence is\n      *  not empty and not null and not whitespace\n      * @since 2.0\n      */\n-    public static boolean isNotBlank(CharSequence str) {\n-        return !StringUtils.isBlank(str);\n+    public static boolean isNotBlank(CharSequence cs) {\n+        return !StringUtils.isBlank(cs);\n     }\n \n     // Trim\n@@ -677,7 +677,7 @@\n     // Equals\n     //-----------------------------------------------------------------------\n     /**\n-     * \u003cp\u003eCompares two Strings, returning \u003ccode\u003etrue\u003c/code\u003e if they are equal.\u003c/p\u003e\n+     * \u003cp\u003eCompares two CharSequences, returning \u003ccode\u003etrue\u003c/code\u003e if they are equal.\u003c/p\u003e\n      *\n      * \u003cp\u003e\u003ccode\u003enull\u003c/code\u003es are handled without exceptions. Two \u003ccode\u003enull\u003c/code\u003e\n      * references are considered to be equal. The comparison is case sensitive.\u003c/p\u003e\n@@ -691,13 +691,13 @@\n      * \u003c/pre\u003e\n      *\n      * @see java.lang.String#equals(Object)\n-     * @param str1  the first String, may be null\n-     * @param str2  the second String, may be null\n-     * @return \u003ccode\u003etrue\u003c/code\u003e if the Strings are equal, case sensitive, or\n+     * @param cs1  the first CharSequence, may be null\n+     * @param cs2  the second CharSequence, may be null\n+     * @return \u003ccode\u003etrue\u003c/code\u003e if the CharSequences are equal, case sensitive, or\n      *  both \u003ccode\u003enull\u003c/code\u003e\n      */\n-    public static boolean equals(String str1, String str2) {\n-        return str1 \u003d\u003d null ? str2 \u003d\u003d null : str1.equals(str2);\n+    public static boolean equals(CharSequence cs1, CharSequence cs2) {\n+        return cs1 \u003d\u003d null ? cs2 \u003d\u003d null : cs1.equals(cs2);\n     }\n \n     /**\n@@ -1347,7 +1347,7 @@\n     // IndexOfAny chars\n     //-----------------------------------------------------------------------\n     /**\n-     * \u003cp\u003eSearch a String to find the first index of any\n+     * \u003cp\u003eSearch a CharSequence to find the first index of any\n      * character in the given set of characters.\u003c/p\u003e\n      *\n      * \u003cp\u003eA \u003ccode\u003enull\u003c/code\u003e String will return \u003ccode\u003e-1\u003c/code\u003e.\n@@ -1363,17 +1363,17 @@\n      * StringUtils.indexOfAny(\"aba\", [\u0027z\u0027])           \u003d -1\n      * \u003c/pre\u003e\n      *\n-     * @param str  the String to check, may be null\n+     * @param cs  the CharSequence to check, may be null\n      * @param searchChars  the chars to search for, may be null\n      * @return the index of any of the chars, -1 if no match or null input\n      * @since 2.0\n      */\n-    public static int indexOfAny(String str, char[] searchChars) {\n-        if (isEmpty(str) || ArrayUtils.isEmpty(searchChars)) {\n+    public static int indexOfAny(CharSequence cs, char[] searchChars) {\n+        if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n             return -1;\n         }\n-        for (int i \u003d 0; i \u003c str.length(); i++) {\n-            char ch \u003d str.charAt(i);\n+        for (int i \u003d 0; i \u003c cs.length(); i++) {\n+            char ch \u003d cs.charAt(i);\n             for (int j \u003d 0; j \u003c searchChars.length; j++) {\n                 if (searchChars[j] \u003d\u003d ch) {\n                     return i;\n@@ -1384,7 +1384,7 @@\n     }\n \n     /**\n-     * \u003cp\u003eSearch a String to find the first index of any\n+     * \u003cp\u003eSearch a CharSequence to find the first index of any\n      * character in the given set of characters.\u003c/p\u003e\n      *\n      * \u003cp\u003eA \u003ccode\u003enull\u003c/code\u003e String will return \u003ccode\u003e-1\u003c/code\u003e.\n@@ -1400,25 +1400,25 @@\n      * StringUtils.indexOfAny(\"aba\",\"z\")          \u003d -1\n      * \u003c/pre\u003e\n      *\n-     * @param str  the String to check, may be null\n+     * @param cs  the CharSequence to check, may be null\n      * @param searchChars  the chars to search for, may be null\n      * @return the index of any of the chars, -1 if no match or null input\n      * @since 2.0\n      */\n-    public static int indexOfAny(String str, String searchChars) {\n-        if (isEmpty(str) || isEmpty(searchChars)) {\n+    public static int indexOfAny(CharSequence cs, String searchChars) {\n+        if (isEmpty(cs) || isEmpty(searchChars)) {\n             return -1;\n         }\n-        return indexOfAny(str, searchChars.toCharArray());\n+        return indexOfAny(cs, searchChars.toCharArray());\n     }\n \n     // ContainsAny\n     //-----------------------------------------------------------------------\n     /**\n-     * \u003cp\u003eChecks if the String contains any character in the given\n+     * \u003cp\u003eChecks if the CharSequence contains any character in the given\n      * set of characters.\u003c/p\u003e\n      *\n-     * \u003cp\u003eA \u003ccode\u003enull\u003c/code\u003e String will return \u003ccode\u003efalse\u003c/code\u003e.\n+     * \u003cp\u003eA \u003ccode\u003enull\u003c/code\u003e CharSequence will return \u003ccode\u003efalse\u003c/code\u003e.\n      * A \u003ccode\u003enull\u003c/code\u003e or zero length search array will return \u003ccode\u003efalse\u003c/code\u003e.\u003c/p\u003e\n      *\n      * \u003cpre\u003e\n@@ -1431,18 +1431,18 @@\n      * StringUtils.containsAny(\"aba\", [\u0027z\u0027])           \u003d false\n      * \u003c/pre\u003e\n      *\n-     * @param str  the String to check, may be null\n+     * @param cs  the CharSequence to check, may be null\n      * @param searchChars  the chars to search for, may be null\n      * @return the \u003ccode\u003etrue\u003c/code\u003e if any of the chars are found,\n      * \u003ccode\u003efalse\u003c/code\u003e if no match or null input\n      * @since 2.4\n      */\n-    public static boolean containsAny(String str, char[] searchChars) {\n-        if (str \u003d\u003d null || str.length() \u003d\u003d 0 || searchChars \u003d\u003d null || searchChars.length \u003d\u003d 0) {\n+    public static boolean containsAny(CharSequence cs, char[] searchChars) {\n+        if (cs \u003d\u003d null || cs.length() \u003d\u003d 0 || searchChars \u003d\u003d null || searchChars.length \u003d\u003d 0) {\n             return false;\n         }\n-        for (int i \u003d 0; i \u003c str.length(); i++) {\n-            char ch \u003d str.charAt(i);\n+        for (int i \u003d 0; i \u003c cs.length(); i++) {\n+            char ch \u003d cs.charAt(i);\n             for (int j \u003d 0; j \u003c searchChars.length; j++) {\n                 if (searchChars[j] \u003d\u003d ch) {\n                     return true;\n@@ -1454,11 +1454,11 @@\n \n     /**\n      * \u003cp\u003e\n-     * Checks if the String contains any character in the given set of characters.\n+     * Checks if the CharSequence contains any character in the given set of characters.\n      * \u003c/p\u003e\n      * \n      * \u003cp\u003e\n-     * A \u003ccode\u003enull\u003c/code\u003e String will return \u003ccode\u003efalse\u003c/code\u003e. A \u003ccode\u003enull\u003c/code\u003e search string will return\n+     * A \u003ccode\u003enull\u003c/code\u003e CharSequence will return \u003ccode\u003efalse\u003c/code\u003e. A \u003ccode\u003enull\u003c/code\u003e search CharSequence will return\n      * \u003ccode\u003efalse\u003c/code\u003e.\n      * \u003c/p\u003e\n      * \n@@ -1472,27 +1472,27 @@\n      * StringUtils.containsAny(\"aba\",\"z\")          \u003d false\n      * \u003c/pre\u003e\n      * \n-     * @param str\n-     *            the String to check, may be null\n+     * @param cs\n+     *            the CharSequence to check, may be null\n      * @param searchChars\n      *            the chars to search for, may be null\n      * @return the \u003ccode\u003etrue\u003c/code\u003e if any of the chars are found, \u003ccode\u003efalse\u003c/code\u003e if no match or null input\n      * @since 2.4\n      */\n-    public static boolean containsAny(String str, String searchChars) {\n+    public static boolean containsAny(CharSequence cs, String searchChars) {\n         if (searchChars \u003d\u003d null) {\n             return false;\n         }\n-        return containsAny(str, searchChars.toCharArray());\n+        return containsAny(cs, searchChars.toCharArray());\n     }\n \n     // IndexOfAnyBut chars\n     //-----------------------------------------------------------------------\n     /**\n-     * \u003cp\u003eSearch a String to find the first index of any\n+     * \u003cp\u003eSearches a CharSequence to find the first index of any\n      * character not in the given set of characters.\u003c/p\u003e\n      *\n-     * \u003cp\u003eA \u003ccode\u003enull\u003c/code\u003e String will return \u003ccode\u003e-1\u003c/code\u003e.\n+     * \u003cp\u003eA \u003ccode\u003enull\u003c/code\u003e CharSequence will return \u003ccode\u003e-1\u003c/code\u003e.\n      * A \u003ccode\u003enull\u003c/code\u003e or zero length search array will return \u003ccode\u003e-1\u003c/code\u003e.\u003c/p\u003e\n      *\n      * \u003cpre\u003e\n@@ -1505,17 +1505,17 @@\n      * StringUtils.indexOfAnyBut(\"aba\", \u0027ab\u0027)       \u003d -1\n      * \u003c/pre\u003e\n      *\n-     * @param str  the String to check, may be null\n+     * @param cs  the CharSequence to check, may be null\n      * @param searchChars  the chars to search for, may be null\n      * @return the index of any of the chars, -1 if no match or null input\n      * @since 2.0\n      */\n-    public static int indexOfAnyBut(String str, char[] searchChars) {\n-        if (isEmpty(str) || ArrayUtils.isEmpty(searchChars)) {\n+    public static int indexOfAnyBut(CharSequence cs, char[] searchChars) {\n+        if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n             return -1;\n         }\n-        outer : for (int i \u003d 0; i \u003c str.length(); i++) {\n-            char ch \u003d str.charAt(i);\n+        outer : for (int i \u003d 0; i \u003c cs.length(); i++) {\n+            char ch \u003d cs.charAt(i);\n             for (int j \u003d 0; j \u003c searchChars.length; j++) {\n                 if (searchChars[j] \u003d\u003d ch) {\n                     continue outer;\n@@ -1563,11 +1563,11 @@\n     // ContainsOnly\n     //-----------------------------------------------------------------------\n     /**\n-     * \u003cp\u003eChecks if the String contains only certain characters.\u003c/p\u003e\n+     * \u003cp\u003eChecks if the CharSequence contains only certain characters.\u003c/p\u003e\n      *\n-     * \u003cp\u003eA \u003ccode\u003enull\u003c/code\u003e String will return \u003ccode\u003efalse\u003c/code\u003e.\n+     * \u003cp\u003eA \u003ccode\u003enull\u003c/code\u003e CharSequence will return \u003ccode\u003efalse\u003c/code\u003e.\n      * A \u003ccode\u003enull\u003c/code\u003e valid character array will return \u003ccode\u003efalse\u003c/code\u003e.\n-     * An empty String (\"\") always returns \u003ccode\u003etrue\u003c/code\u003e.\u003c/p\u003e\n+     * An empty CharSequence (length()\u003d0) always returns \u003ccode\u003etrue\u003c/code\u003e.\u003c/p\u003e\n      *\n      * \u003cpre\u003e\n      * StringUtils.containsOnly(null, *)       \u003d false\n@@ -1579,30 +1579,30 @@\n      * StringUtils.containsOnly(\"abz\", \u0027abc\u0027)  \u003d false\n      * \u003c/pre\u003e\n      *\n-     * @param str  the String to check, may be null\n+     * @param cs  the String to check, may be null\n      * @param valid  an array of valid chars, may be null\n      * @return true if it only contains valid chars and is non-null\n      */\n-    public static boolean containsOnly(String str, char[] valid) {\n+    public static boolean containsOnly(CharSequence cs, char[] valid) {\n         // All these pre-checks are to maintain API with an older version\n-        if ((valid \u003d\u003d null) || (str \u003d\u003d null)) {\n+        if (valid \u003d\u003d null || cs \u003d\u003d null) {\n             return false;\n         }\n-        if (str.length() \u003d\u003d 0) {\n+        if (cs.length() \u003d\u003d 0) {\n             return true;\n         }\n         if (valid.length \u003d\u003d 0) {\n             return false;\n         }\n-        return indexOfAnyBut(str, valid) \u003d\u003d -1;\n+        return indexOfAnyBut(cs, valid) \u003d\u003d -1;\n     }\n \n     /**\n-     * \u003cp\u003eChecks if the String contains only certain characters.\u003c/p\u003e\n+     * \u003cp\u003eChecks if the CharSequence contains only certain characters.\u003c/p\u003e\n      *\n-     * \u003cp\u003eA \u003ccode\u003enull\u003c/code\u003e String will return \u003ccode\u003efalse\u003c/code\u003e.\n+     * \u003cp\u003eA \u003ccode\u003enull\u003c/code\u003e CharSequence will return \u003ccode\u003efalse\u003c/code\u003e.\n      * A \u003ccode\u003enull\u003c/code\u003e valid character String will return \u003ccode\u003efalse\u003c/code\u003e.\n-     * An empty String (\"\") always returns \u003ccode\u003etrue\u003c/code\u003e.\u003c/p\u003e\n+     * An empty String (length()\u003d0) always returns \u003ccode\u003etrue\u003c/code\u003e.\u003c/p\u003e\n      *\n      * \u003cpre\u003e\n      * StringUtils.containsOnly(null, *)       \u003d false\n@@ -1614,26 +1614,26 @@\n      * StringUtils.containsOnly(\"abz\", \"abc\")  \u003d false\n      * \u003c/pre\u003e\n      *\n-     * @param str  the String to check, may be null\n+     * @param cs  the CharSequence to check, may be null\n      * @param validChars  a String of valid chars, may be null\n      * @return true if it only contains valid chars and is non-null\n      * @since 2.0\n      */\n-    public static boolean containsOnly(String str, String validChars) {\n-        if (str \u003d\u003d null || validChars \u003d\u003d null) {\n+    public static boolean containsOnly(CharSequence cs, String validChars) {\n+        if (cs \u003d\u003d null || validChars \u003d\u003d null) {\n             return false;\n         }\n-        return containsOnly(str, validChars.toCharArray());\n+        return containsOnly(cs, validChars.toCharArray());\n     }\n \n     // ContainsNone\n     //-----------------------------------------------------------------------\n     /**\n-     * \u003cp\u003eChecks that the String does not contain certain characters.\u003c/p\u003e\n+     * \u003cp\u003eChecks that the CharSequence does not contain certain characters.\u003c/p\u003e\n      *\n-     * \u003cp\u003eA \u003ccode\u003enull\u003c/code\u003e String will return \u003ccode\u003etrue\u003c/code\u003e.\n+     * \u003cp\u003eA \u003ccode\u003enull\u003c/code\u003e CharSequence will return \u003ccode\u003etrue\u003c/code\u003e.\n      * A \u003ccode\u003enull\u003c/code\u003e invalid character array will return \u003ccode\u003etrue\u003c/code\u003e.\n-     * An empty String (\"\") always returns true.\u003c/p\u003e\n+     * An empty CharSequence (length()\u003d0) always returns true.\u003c/p\u003e\n      *\n      * \u003cpre\u003e\n      * StringUtils.containsNone(null, *)       \u003d true\n@@ -1645,19 +1645,19 @@\n      * StringUtils.containsNone(\"abz\", \u0027xyz\u0027)  \u003d false\n      * \u003c/pre\u003e\n      *\n-     * @param str  the String to check, may be null\n+     * @param cs  the CharSequence to check, may be null\n      * @param invalidChars  an array of invalid chars, may be null\n      * @return true if it contains none of the invalid chars, or is null\n      * @since 2.0\n      */\n-    public static boolean containsNone(String str, char[] invalidChars) {\n-        if (str \u003d\u003d null || invalidChars \u003d\u003d null) {\n+    public static boolean containsNone(CharSequence cs, char[] invalidChars) {\n+        if (cs \u003d\u003d null || invalidChars \u003d\u003d null) {\n             return true;\n         }\n-        int strSize \u003d str.length();\n+        int strSize \u003d cs.length();\n         int validSize \u003d invalidChars.length;\n         for (int i \u003d 0; i \u003c strSize; i++) {\n-            char ch \u003d str.charAt(i);\n+            char ch \u003d cs.charAt(i);\n             for (int j \u003d 0; j \u003c validSize; j++) {\n                 if (invalidChars[j] \u003d\u003d ch) {\n                     return false;\n@@ -1668,9 +1668,9 @@\n     }\n \n     /**\n-     * \u003cp\u003eChecks that the String does not contain certain characters.\u003c/p\u003e\n+     * \u003cp\u003eChecks that the CharSequence does not contain certain characters.\u003c/p\u003e\n      *\n-     * \u003cp\u003eA \u003ccode\u003enull\u003c/code\u003e String will return \u003ccode\u003etrue\u003c/code\u003e.\n+     * \u003cp\u003eA \u003ccode\u003enull\u003c/code\u003e CharSequence will return \u003ccode\u003etrue\u003c/code\u003e.\n      * A \u003ccode\u003enull\u003c/code\u003e invalid character array will return \u003ccode\u003etrue\u003c/code\u003e.\n      * An empty String (\"\") always returns true.\u003c/p\u003e\n      *\n@@ -1684,16 +1684,16 @@\n      * StringUtils.containsNone(\"abz\", \"xyz\")  \u003d false\n      * \u003c/pre\u003e\n      *\n-     * @param str  the String to check, may be null\n+     * @param cs  the CharSequence to check, may be null\n      * @param invalidChars  a String of invalid chars, may be null\n      * @return true if it contains none of the invalid chars, or is null\n      * @since 2.0\n      */\n-    public static boolean containsNone(String str, String invalidChars) {\n-        if (str \u003d\u003d null || invalidChars \u003d\u003d null) {\n+    public static boolean containsNone(CharSequence cs, String invalidChars) {\n+        if (cs \u003d\u003d null || invalidChars \u003d\u003d null) {\n             return true;\n         }\n-        return containsNone(str, invalidChars.toCharArray());\n+        return containsNone(cs, invalidChars.toCharArray());\n     }\n \n     // IndexOfAny strings\n@@ -1725,7 +1725,7 @@\n      * @return the first index of any of the searchStrs in str, -1 if no match\n      */\n     public static int indexOfAny(String str, String[] searchStrs) {\n-        if ((str \u003d\u003d null) || (searchStrs \u003d\u003d null)) {\n+        if (str \u003d\u003d null || searchStrs \u003d\u003d null) {\n             return -1;\n         }\n         int sz \u003d searchStrs.length;\n@@ -4606,17 +4606,20 @@\n         }\n     }\n \n-    /**\n-     * Gets a String\u0027s length or \u003ccode\u003e0\u003c/code\u003e if the String is \u003ccode\u003enull\u003c/code\u003e.\n-     * \n-     * @param str\n-     *            a String or \u003ccode\u003enull\u003c/code\u003e\n-     * @return String length or \u003ccode\u003e0\u003c/code\u003e if the String is \u003ccode\u003enull\u003c/code\u003e.\n-     * @since 2.4\n-     */\n-    public static int length(CharSequence str) {\n-        return str \u003d\u003d null ? 0 : str.length();\n-    }\n+\t/**\n+\t * Gets a CharSequence length or \u003ccode\u003e0\u003c/code\u003e if the CharSequence is\n+\t * \u003ccode\u003enull\u003c/code\u003e.\n+\t * \n+\t * @param cs\n+\t *            a CharSequence or \u003ccode\u003enull\u003c/code\u003e\n+\t * @return CharSequence length or \u003ccode\u003e0\u003c/code\u003e if the CharSequence is\n+\t *         \u003ccode\u003enull\u003c/code\u003e.\n+\t * @since 2.4\n+\t * @deprecated See {@link CharSequenceUtils#length(CharSequence)}\n+\t */\n+\tpublic static int length(CharSequence cs) {\n+\t\treturn CharSequenceUtils.length(cs);\n+\t}\n     \n     // Centering\n     //-----------------------------------------------------------------------\n@@ -4842,25 +4845,28 @@\n      * StringUtils.capitalize(\"cAt\") \u003d \"CAt\"\n      * \u003c/pre\u003e\n      *\n-     * @param str  the String to capitalize, may be null\n+     * @param cs the String to capitalize, may be null\n      * @return the capitalized String, \u003ccode\u003enull\u003c/code\u003e if null String input\n      * @see WordUtils#capitalize(String)\n      * @see #uncapitalize(String)\n      * @since 2.0\n      */\n-    public static String capitalize(String str) {\n+    public static String capitalize(CharSequence cs) {\n+        if (cs \u003d\u003d null ) {\n+            return null;\n+        }\n         int strLen;\n-        if (str \u003d\u003d null || (strLen \u003d str.length()) \u003d\u003d 0) {\n-            return str;\n+        if ((strLen \u003d cs.length()) \u003d\u003d 0) {\n+            return cs.toString();\n         }\n         return new StringBuilder(strLen)\n-            .append(Character.toTitleCase(str.charAt(0)))\n-            .append(str.substring(1))\n+            .append(Character.toTitleCase(cs.charAt(0)))\n+            .append(CharSequenceUtils.subSequence(cs, 1))\n             .toString();\n     }\n \n     /**\n-     * \u003cp\u003eUncapitalizes a String changing the first letter to title case as\n+     * \u003cp\u003eUncapitalizes a CharSequence changing the first letter to title case as\n      * per {@link Character#toLowerCase(char)}. No other letters are changed.\u003c/p\u003e\n      *\n      * \u003cp\u003eFor a word based algorithm, see {@link WordUtils#uncapitalize(String)}.\n@@ -4873,20 +4879,23 @@\n      * StringUtils.uncapitalize(\"CAT\") \u003d \"cAT\"\n      * \u003c/pre\u003e\n      *\n-     * @param str  the String to uncapitalize, may be null\n+     * @param cs the String to uncapitalize, may be null\n      * @return the uncapitalized String, \u003ccode\u003enull\u003c/code\u003e if null String input\n      * @see WordUtils#uncapitalize(String)\n-     * @see #capitalize(String)\n+     * @see #capitalize(CharSequence)\n      * @since 2.0\n      */\n-    public static String uncapitalize(String str) {\n+    public static String uncapitalize(CharSequence cs) {\n+        if (cs \u003d\u003d null ) {\n+            return null;\n+        }\n         int strLen;\n-        if (str \u003d\u003d null || (strLen \u003d str.length()) \u003d\u003d 0) {\n-            return str;\n+        if ((strLen \u003d cs.length()) \u003d\u003d 0) {\n+            return cs.toString();\n         }\n         return new StringBuilder(strLen)\n-            .append(Character.toLowerCase(str.charAt(0)))\n-            .append(str.substring(1))\n+            .append(Character.toLowerCase(cs.charAt(0)))\n+            .append(CharSequenceUtils.subSequence(cs, 1))\n             .toString();\n     }\n \n@@ -4976,10 +4985,10 @@\n     // Character Tests\n     //-----------------------------------------------------------------------\n     /**\n-     * \u003cp\u003eChecks if the String contains only unicode letters.\u003c/p\u003e\n+     * \u003cp\u003eChecks if the CharSequence contains only unicode letters.\u003c/p\u003e\n      *\n      * \u003cp\u003e\u003ccode\u003enull\u003c/code\u003e will return \u003ccode\u003efalse\u003c/code\u003e.\n-     * An empty String (\"\") will return \u003ccode\u003etrue\u003c/code\u003e.\u003c/p\u003e\n+     * An empty CharSequence (length()\u003d0) will return \u003ccode\u003etrue\u003c/code\u003e.\u003c/p\u003e\n      *\n      * \u003cpre\u003e\n      * StringUtils.isAlpha(null)   \u003d false\n@@ -4990,16 +4999,16 @@\n      * StringUtils.isAlpha(\"ab-c\") \u003d false\n      * \u003c/pre\u003e\n      *\n-     * @param str  the String to check, may be null\n+     * @param cs  the CharSequence to check, may be null\n      * @return \u003ccode\u003etrue\u003c/code\u003e if only contains letters, and is non-null\n      */\n-    public static boolean isAlpha(String str) {\n-        if (str \u003d\u003d null) {\n+    public static boolean isAlpha(CharSequence cs) {\n+        if (cs \u003d\u003d null) {\n             return false;\n         }\n-        int sz \u003d str.length();\n+        int sz \u003d cs.length();\n         for (int i \u003d 0; i \u003c sz; i++) {\n-            if (Character.isLetter(str.charAt(i)) \u003d\u003d false) {\n+            if (Character.isLetter(cs.charAt(i)) \u003d\u003d false) {\n                 return false;\n             }\n         }\n@@ -5007,11 +5016,11 @@\n     }\n \n     /**\n-     * \u003cp\u003eChecks if the String contains only unicode letters and\n+     * \u003cp\u003eChecks if the CharSequence contains only unicode letters and\n      * space (\u0027 \u0027).\u003c/p\u003e\n      *\n      * \u003cp\u003e\u003ccode\u003enull\u003c/code\u003e will return \u003ccode\u003efalse\u003c/code\u003e\n-     * An empty String (\"\") will return \u003ccode\u003etrue\u003c/code\u003e.\u003c/p\u003e\n+     * An empty CharSequence (length()\u003d0) will return \u003ccode\u003etrue\u003c/code\u003e.\u003c/p\u003e\n      *\n      * \u003cpre\u003e\n      * StringUtils.isAlphaSpace(null)   \u003d false\n@@ -5023,17 +5032,17 @@\n      * StringUtils.isAlphaSpace(\"ab-c\") \u003d false\n      * \u003c/pre\u003e\n      *\n-     * @param str  the String to check, may be null\n+     * @param cs  the CharSequence to check, may be null\n      * @return \u003ccode\u003etrue\u003c/code\u003e if only contains letters and space,\n      *  and is non-null\n      */\n-    public static boolean isAlphaSpace(String str) {\n-        if (str \u003d\u003d null) {\n+    public static boolean isAlphaSpace(CharSequence cs) {\n+        if (cs \u003d\u003d null) {\n             return false;\n         }\n-        int sz \u003d str.length();\n+        int sz \u003d cs.length();\n         for (int i \u003d 0; i \u003c sz; i++) {\n-            if ((Character.isLetter(str.charAt(i)) \u003d\u003d false) \u0026\u0026 (str.charAt(i) !\u003d \u0027 \u0027)) {\n+            if ((Character.isLetter(cs.charAt(i)) \u003d\u003d false) \u0026\u0026 (cs.charAt(i) !\u003d \u0027 \u0027)) {\n                 return false;\n             }\n         }\n@@ -5041,10 +5050,10 @@\n     }\n \n     /**\n-     * \u003cp\u003eChecks if the String contains only unicode letters or digits.\u003c/p\u003e\n+     * \u003cp\u003eChecks if the CharSequence contains only unicode letters or digits.\u003c/p\u003e\n      *\n      * \u003cp\u003e\u003ccode\u003enull\u003c/code\u003e will return \u003ccode\u003efalse\u003c/code\u003e.\n-     * An empty String (\"\") will return \u003ccode\u003etrue\u003c/code\u003e.\u003c/p\u003e\n+     * An empty CharSequence (length()\u003d0) will return \u003ccode\u003etrue\u003c/code\u003e.\u003c/p\u003e\n      *\n      * \u003cpre\u003e\n      * StringUtils.isAlphanumeric(null)   \u003d false\n@@ -5056,17 +5065,17 @@\n      * StringUtils.isAlphanumeric(\"ab-c\") \u003d false\n      * \u003c/pre\u003e\n      *\n-     * @param str  the String to check, may be null\n+     * @param cs  the CharSequence to check, may be null\n      * @return \u003ccode\u003etrue\u003c/code\u003e if only contains letters or digits,\n      *  and is non-null\n      */\n-    public static boolean isAlphanumeric(String str) {\n-        if (str \u003d\u003d null) {\n+    public static boolean isAlphanumeric(CharSequence cs) {\n+        if (cs \u003d\u003d null) {\n             return false;\n         }\n-        int sz \u003d str.length();\n+        int sz \u003d cs.length();\n         for (int i \u003d 0; i \u003c sz; i++) {\n-            if (Character.isLetterOrDigit(str.charAt(i)) \u003d\u003d false) {\n+            if (Character.isLetterOrDigit(cs.charAt(i)) \u003d\u003d false) {\n                 return false;\n             }\n         }\n@@ -5074,11 +5083,11 @@\n     }\n \n     /**\n-     * \u003cp\u003eChecks if the String contains only unicode letters, digits\n+     * \u003cp\u003eChecks if the CharSequence contains only unicode letters, digits\n      * or space (\u003ccode\u003e\u0027 \u0027\u003c/code\u003e).\u003c/p\u003e\n      *\n      * \u003cp\u003e\u003ccode\u003enull\u003c/code\u003e will return \u003ccode\u003efalse\u003c/code\u003e.\n-     * An empty String (\"\") will return \u003ccode\u003etrue\u003c/code\u003e.\u003c/p\u003e\n+     * An empty CharSequence (length()\u003d0) will return \u003ccode\u003etrue\u003c/code\u003e.\u003c/p\u003e\n      *\n      * \u003cpre\u003e\n      * StringUtils.isAlphanumeric(null)   \u003d false\n@@ -5090,17 +5099,17 @@\n      * StringUtils.isAlphanumeric(\"ab-c\") \u003d false\n      * \u003c/pre\u003e\n      *\n-     * @param str  the String to check, may be null\n+     * @param cs  the CharSequence to check, may be null\n      * @return \u003ccode\u003etrue\u003c/code\u003e if only contains letters, digits or space,\n      *  and is non-null\n      */\n-    public static boolean isAlphanumericSpace(String str) {\n-        if (str \u003d\u003d null) {\n+    public static boolean isAlphanumericSpace(CharSequence cs) {\n+        if (cs \u003d\u003d null) {\n             return false;\n         }\n-        int sz \u003d str.length();\n+        int sz \u003d cs.length();\n         for (int i \u003d 0; i \u003c sz; i++) {\n-            if ((Character.isLetterOrDigit(str.charAt(i)) \u003d\u003d false) \u0026\u0026 (str.charAt(i) !\u003d \u0027 \u0027)) {\n+            if ((Character.isLetterOrDigit(cs.charAt(i)) \u003d\u003d false) \u0026\u0026 (cs.charAt(i) !\u003d \u0027 \u0027)) {\n                 return false;\n             }\n         }\n@@ -5108,10 +5117,10 @@\n     }\n \n     /**\n-     * \u003cp\u003eChecks if the string contains only ASCII printable characters.\u003c/p\u003e\n+     * \u003cp\u003eChecks if the CharSequence contains only ASCII printable characters.\u003c/p\u003e\n      * \n      * \u003cp\u003e\u003ccode\u003enull\u003c/code\u003e will return \u003ccode\u003efalse\u003c/code\u003e.\n-     * An empty String (\"\") will return \u003ccode\u003etrue\u003c/code\u003e.\u003c/p\u003e\n+     * An empty CharSequence (length()\u003d0) will return \u003ccode\u003etrue\u003c/code\u003e.\u003c/p\u003e\n      * \n      * \u003cpre\u003e\n      * StringUtils.isAsciiPrintable(null)     \u003d false\n@@ -5127,18 +5136,18 @@\n      * StringUtils.isAsciiPrintable(\"Ceki G\\u00fclc\\u00fc\") \u003d false\n      * \u003c/pre\u003e\n      *\n-     * @param str the string to check, may be null\n+     * @param cs the CharSequence to check, may be null\n      * @return \u003ccode\u003etrue\u003c/code\u003e if every character is in the range\n      *  32 thru 126\n      * @since 2.1\n      */\n-    public static boolean isAsciiPrintable(String str) {\n-        if (str \u003d\u003d null) {\n+    public static boolean isAsciiPrintable(CharSequence cs) {\n+        if (cs \u003d\u003d null) {\n             return false;\n         }\n-        int sz \u003d str.length();\n+        int sz \u003d cs.length();\n         for (int i \u003d 0; i \u003c sz; i++) {\n-            if (CharUtils.isAsciiPrintable(str.charAt(i)) \u003d\u003d false) {\n+            if (CharUtils.isAsciiPrintable(cs.charAt(i)) \u003d\u003d false) {\n                 return false;\n             }\n         }\n@@ -5146,11 +5155,11 @@\n     }\n \n     /**\n-     * \u003cp\u003eChecks if the String contains only unicode digits.\n+     * \u003cp\u003eChecks if the CharSequence contains only unicode digits.\n      * A decimal point is not a unicode digit and returns false.\u003c/p\u003e\n      *\n      * \u003cp\u003e\u003ccode\u003enull\u003c/code\u003e will return \u003ccode\u003efalse\u003c/code\u003e.\n-     * An empty String (\"\") will return \u003ccode\u003etrue\u003c/code\u003e.\u003c/p\u003e\n+     * An empty CharSequence (length()\u003d0) will return \u003ccode\u003etrue\u003c/code\u003e.\u003c/p\u003e\n      *\n      * \u003cpre\u003e\n      * StringUtils.isNumeric(null)   \u003d false\n@@ -5163,16 +5172,16 @@\n      * StringUtils.isNumeric(\"12.3\") \u003d false\n      * \u003c/pre\u003e\n      *\n-     * @param str  the String to check, may be null\n+     * @param cs  the CharSequence to check, may be null\n      * @return \u003ccode\u003etrue\u003c/code\u003e if only contains digits, and is non-null\n      */\n-    public static boolean isNumeric(String str) {\n-        if (str \u003d\u003d null) {\n+    public static boolean isNumeric(CharSequence cs) {\n+        if (cs \u003d\u003d null) {\n             return false;\n         }\n-        int sz \u003d str.length();\n+        int sz \u003d cs.length();\n         for (int i \u003d 0; i \u003c sz; i++) {\n-            if (Character.isDigit(str.charAt(i)) \u003d\u003d false) {\n+            if (Character.isDigit(cs.charAt(i)) \u003d\u003d false) {\n                 return false;\n             }\n         }\n@@ -5180,12 +5189,12 @@\n     }\n \n     /**\n-     * \u003cp\u003eChecks if the String contains only unicode digits or space\n+     * \u003cp\u003eChecks if the CharSequence contains only unicode digits or space\n      * (\u003ccode\u003e\u0027 \u0027\u003c/code\u003e).\n      * A decimal point is not a unicode digit and returns false.\u003c/p\u003e\n      *\n      * \u003cp\u003e\u003ccode\u003enull\u003c/code\u003e will return \u003ccode\u003efalse\u003c/code\u003e.\n-     * An empty String (\"\") will return \u003ccode\u003etrue\u003c/code\u003e.\u003c/p\u003e\n+     * An empty CharSequence (length()\u003d0) will return \u003ccode\u003etrue\u003c/code\u003e.\u003c/p\u003e\n      *\n      * \u003cpre\u003e\n      * StringUtils.isNumeric(null)   \u003d false\n@@ -5198,17 +5207,17 @@\n      * StringUtils.isNumeric(\"12.3\") \u003d false\n      * \u003c/pre\u003e\n      *\n-     * @param str  the String to check, may be null\n+     * @param cs  the CharSequence to check, may be null\n      * @return \u003ccode\u003etrue\u003c/code\u003e if only contains digits or space,\n      *  and is non-null\n      */\n-    public static boolean isNumericSpace(String str) {\n-        if (str \u003d\u003d null) {\n+    public static boolean isNumericSpace(CharSequence cs) {\n+        if (cs \u003d\u003d null) {\n             return false;\n         }\n-        int sz \u003d str.length();\n+        int sz \u003d cs.length();\n         for (int i \u003d 0; i \u003c sz; i++) {\n-            if ((Character.isDigit(str.charAt(i)) \u003d\u003d false) \u0026\u0026 (str.charAt(i) !\u003d \u0027 \u0027)) {\n+            if ((Character.isDigit(cs.charAt(i)) \u003d\u003d false) \u0026\u0026 (cs.charAt(i) !\u003d \u0027 \u0027)) {\n                 return false;\n             }\n         }\n@@ -5216,10 +5225,10 @@\n     }\n \n     /**\n-     * \u003cp\u003eChecks if the String contains only whitespace.\u003c/p\u003e\n+     * \u003cp\u003eChecks if the CharSequence contains only whitespace.\u003c/p\u003e\n      *\n      * \u003cp\u003e\u003ccode\u003enull\u003c/code\u003e will return \u003ccode\u003efalse\u003c/code\u003e.\n-     * An empty String (\"\") will return \u003ccode\u003etrue\u003c/code\u003e.\u003c/p\u003e\n+     * An empty CharSequence (length()\u003d0) will return \u003ccode\u003etrue\u003c/code\u003e.\u003c/p\u003e\n      *\n      * \u003cpre\u003e\n      * StringUtils.isWhitespace(null)   \u003d false\n@@ -5230,17 +5239,17 @@\n      * StringUtils.isWhitespace(\"ab-c\") \u003d false\n      * \u003c/pre\u003e\n      *\n-     * @param str  the String to check, may be null\n+     * @param cs  the CharSequence to check, may be null\n      * @return \u003ccode\u003etrue\u003c/code\u003e if only contains whitespace, and is non-null\n      * @since 2.0\n      */\n-    public static boolean isWhitespace(String str) {\n-        if (str \u003d\u003d null) {\n+    public static boolean isWhitespace(CharSequence cs) {\n+        if (cs \u003d\u003d null) {\n             return false;\n         }\n-        int sz \u003d str.length();\n+        int sz \u003d cs.length();\n         for (int i \u003d 0; i \u003c sz; i++) {\n-            if ((Character.isWhitespace(str.charAt(i)) \u003d\u003d false)) {\n+            if ((Character.isWhitespace(cs.charAt(i)) \u003d\u003d false)) {\n                 return false;\n             }\n         }\n@@ -5248,10 +5257,10 @@\n     }\n \n     /**\n-     * \u003cp\u003eChecks if the String contains only lowercase characters.\u003c/p\u003e\n+     * \u003cp\u003eChecks if the CharSequence contains only lowercase characters.\u003c/p\u003e\n      *\n      * \u003cp\u003e\u003ccode\u003enull\u003c/code\u003e will return \u003ccode\u003efalse\u003c/code\u003e.\n-     * An empty String (\"\") will return \u003ccode\u003efalse\u003c/code\u003e.\u003c/p\u003e\n+     * An empty CharSequence (length()\u003d0) will return \u003ccode\u003efalse\u003c/code\u003e.\u003c/p\u003e\n      *\n      * \u003cpre\u003e\n      * StringUtils.isAllLowerCase(null)   \u003d false\n@@ -5261,17 +5270,17 @@\n      * StringUtils.isAllLowerCase(\"abC\") \u003d false\n      * \u003c/pre\u003e\n      *\n-     * @param str  the String to check, may be null\n+     * @param cs  the CharSequence to check, may be null\n      * @return \u003ccode\u003etrue\u003c/code\u003e if only contains lowercase characters, and is non-null\n      * @since 2.5\n      */\n-    public static boolean isAllLowerCase(String str) {\n-        if (str \u003d\u003d null || isEmpty(str)) {\n+    public static boolean isAllLowerCase(CharSequence cs) {\n+        if (cs \u003d\u003d null || isEmpty(cs)) {\n             return false;\n         }\n-        int sz \u003d str.length();\n+        int sz \u003d cs.length();\n         for (int i \u003d 0; i \u003c sz; i++) {\n-            if (Character.isLowerCase(str.charAt(i)) \u003d\u003d false) {\n+            if (Character.isLowerCase(cs.charAt(i)) \u003d\u003d false) {\n                 return false;\n             }\n         }\n@@ -5279,10 +5288,10 @@\n     }\n \n     /**\n-     * \u003cp\u003eChecks if the String contains only uppercase characters.\u003c/p\u003e\n+     * \u003cp\u003eChecks if the CharSequence contains only uppercase characters.\u003c/p\u003e\n      *\n      * \u003cp\u003e\u003ccode\u003enull\u003c/code\u003e will return \u003ccode\u003efalse\u003c/code\u003e.\n-     * An empty String (\"\") will return \u003ccode\u003efalse\u003c/code\u003e.\u003c/p\u003e\n+     * An empty String (length()\u003d0) will return \u003ccode\u003efalse\u003c/code\u003e.\u003c/p\u003e\n      *\n      * \u003cpre\u003e\n      * StringUtils.isAllUpperCase(null)   \u003d false\n@@ -5292,17 +5301,17 @@\n      * StringUtils.isAllUpperCase(\"aBC\") \u003d false\n      * \u003c/pre\u003e\n      *\n-     * @param str  the String to check, may be null\n+     * @param cs the CharSequence to check, may be null\n      * @return \u003ccode\u003etrue\u003c/code\u003e if only contains uppercase characters, and is non-null\n      * @since 2.5\n      */\n-    public static boolean isAllUpperCase(String str) {\n-        if (str \u003d\u003d null || isEmpty(str)) {\n+    public static boolean isAllUpperCase(CharSequence cs) {\n+        if (cs \u003d\u003d null || isEmpty(cs)) {\n             return false;\n         }\n-        int sz \u003d str.length();\n+        int sz \u003d cs.length();\n         for (int i \u003d 0; i \u003c sz; i++) {\n-            if (Character.isUpperCase(str.charAt(i)) \u003d\u003d false) {\n+            if (Character.isUpperCase(cs.charAt(i)) \u003d\u003d false) {\n                 return false;\n             }\n         }\n@@ -5393,7 +5402,7 @@\n         if (str \u003d\u003d null) {\n             return null;\n         }\n-        return new StringBuilder(str).reverse().toString();\n+        return CharSequenceUtils.reverse(str).toString();\n     }\n \n     /**\n@@ -5619,8 +5628,8 @@\n     }\n \n     /**\n-     * \u003cp\u003eCompares two Strings, and returns the index at which the\n-     * Strings begin to differ.\u003c/p\u003e\n+     * \u003cp\u003eCompares two CharSequences, and returns the index at which the\n+     * CharSequences begin to differ.\u003c/p\u003e\n      *\n      * \u003cp\u003eFor example,\n      * \u003ccode\u003eindexOfDifference(\"i am a machine\", \"i am a robot\") -\u003e 7\u003c/code\u003e\u003c/p\u003e\n@@ -5636,33 +5645,33 @@\n      * StringUtils.indexOfDifference(\"abcde\", \"xyz\") \u003d 0\n      * \u003c/pre\u003e\n      *\n-     * @param str1  the first String, may be null\n-     * @param str2  the second String, may be null\n-     * @return the index where str2 and str1 begin to differ; -1 if they are equal\n+     * @param cs1  the first CharSequence, may be null\n+     * @param cs2  the second CharSequence, may be null\n+     * @return the index where cs1 and cs2 begin to differ; -1 if they are equal\n      * @since 2.0\n      */\n-    public static int indexOfDifference(String str1, String str2) {\n-        if (str1 \u003d\u003d str2) {\n+    public static int indexOfDifference(CharSequence cs1, CharSequence cs2) {\n+        if (cs1 \u003d\u003d cs2) {\n             return -1;\n         }\n-        if (str1 \u003d\u003d null || str2 \u003d\u003d null) {\n+        if (cs1 \u003d\u003d null || cs2 \u003d\u003d null) {\n             return 0;\n         }\n         int i;\n-        for (i \u003d 0; i \u003c str1.length() \u0026\u0026 i \u003c str2.length(); ++i) {\n-            if (str1.charAt(i) !\u003d str2.charAt(i)) {\n+        for (i \u003d 0; i \u003c cs1.length() \u0026\u0026 i \u003c cs2.length(); ++i) {\n+            if (cs1.charAt(i) !\u003d cs2.charAt(i)) {\n                 break;\n             }\n         }\n-        if (i \u003c str2.length() || i \u003c str1.length()) {\n+        if (i \u003c cs2.length() || i \u003c cs1.length()) {\n             return i;\n         }\n         return -1;\n     }\n \n     /**\n-     * \u003cp\u003eCompares all Strings in an array and returns the index at which the\n-     * Strings begin to differ.\u003c/p\u003e\n+     * \u003cp\u003eCompares all CharSequences in an array and returns the index at which the\n+     * CharSequences begin to differ.\u003c/p\u003e\n      *\n      * \u003cp\u003eFor example,\n      * \u003ccode\u003eindexOfDifference(new String[] {\"i am a machine\", \"i am a robot\"}) -\u003e 7\u003c/code\u003e\u003c/p\u003e\n@@ -5687,17 +5696,17 @@\n      * StringUtils.indexOfDifference(new String[] {\"i am a machine\", \"i am a robot\"}) \u003d 7\n      * \u003c/pre\u003e\n      *\n-     * @param strs  array of strings, entries may be null\n+     * @param css  array of CharSequences, entries may be null\n      * @return the index where the strings begin to differ; -1 if they are all equal\n      * @since 2.4\n      */\n-    public static int indexOfDifference(String[] strs) {\n-        if (strs \u003d\u003d null || strs.length \u003c\u003d 1) {\n+    public static int indexOfDifference(CharSequence[] css) {\n+        if (css \u003d\u003d null || css.length \u003c\u003d 1) {\n             return -1;\n         }\n         boolean anyStringNull \u003d false;\n         boolean allStringsNull \u003d true;\n-        int arrayLen \u003d strs.length;\n+        int arrayLen \u003d css.length;\n         int shortestStrLen \u003d Integer.MAX_VALUE;\n         int longestStrLen \u003d 0;\n \n@@ -5705,13 +5714,13 @@\n         // sure we are not exceeding the length of the string each time through\n         // the bottom loop.\n         for (int i \u003d 0; i \u003c arrayLen; i++) {\n-            if (strs[i] \u003d\u003d null) {\n+            if (css[i] \u003d\u003d null) {\n                 anyStringNull \u003d true;\n                 shortestStrLen \u003d 0;\n             } else {\n                 allStringsNull \u003d false;\n-                shortestStrLen \u003d Math.min(strs[i].length(), shortestStrLen);\n-                longestStrLen \u003d Math.max(strs[i].length(), longestStrLen);\n+                shortestStrLen \u003d Math.min(css[i].length(), shortestStrLen);\n+                longestStrLen \u003d Math.max(css[i].length(), longestStrLen);\n             }\n         }\n \n@@ -5728,9 +5737,9 @@\n         // find the position with the first difference across all strings\n         int firstDiff \u003d -1;\n         for (int stringPos \u003d 0; stringPos \u003c shortestStrLen; stringPos++) {\n-            char comparisonChar \u003d strs[0].charAt(stringPos);\n+            char comparisonChar \u003d css[0].charAt(stringPos);\n             for (int arrayPos \u003d 1; arrayPos \u003c arrayLen; arrayPos++) {\n-                if (strs[arrayPos].charAt(stringPos) !\u003d comparisonChar) {\n+                if (css[arrayPos].charAt(stringPos) !\u003d comparisonChar) {\n                     firstDiff \u003d stringPos;\n                     break;\n                 }\n@@ -5838,7 +5847,7 @@\n      * @return result distance\n      * @throws IllegalArgumentException if either String input \u003ccode\u003enull\u003c/code\u003e\n      */\n-    public static int getLevenshteinDistance(String s, String t) {\n+    public static int getLevenshteinDistance(CharSequence s, CharSequence t) {\n         if (s \u003d\u003d null || t \u003d\u003d null) {\n             throw new IllegalArgumentException(\"Strings must not be null\");\n         }\n@@ -5871,7 +5880,7 @@\n \n         if (n \u003e m) {\n             // swap the input strings to consume less memory\n-            String tmp \u003d s;\n+        \tCharSequence tmp \u003d s;\n             s \u003d t;\n             t \u003d tmp;\n             n \u003d m;\n@@ -6109,7 +6118,7 @@\n      */\n     private static boolean endsWith(String str, String suffix, boolean ignoreCase) {\n         if (str \u003d\u003d null || suffix \u003d\u003d null) {\n-            return (str \u003d\u003d null \u0026\u0026 suffix \u003d\u003d null);\n+            return str \u003d\u003d null \u0026\u0026 suffix \u003d\u003d null;\n         }\n         if (suffix.length() \u003e str.length()) {\n             return false;\n",
      "operations": [
        {
          "type": "insert-node",
          "from": "",
          "to": "Javadoc [184692,185051]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [184700,184790]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [184800,184860]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [184865,184964]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [184984,185046]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ReturnStatement [185099,185135]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [194006,194084]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [195221,195299]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ReturnStatement [213040,213089]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "NullLiteral [193962,193966]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "NullLiteral [195177,195181]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: cs [194233,194235]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: cs [195448,195450]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "ParenthesizedExpression [62456,62471]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "ParenthesizedExpression [62475,62488]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "ParenthesizedExpression [68114,68127]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "ParenthesizedExpression [68131,68151]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [184422,184498]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [184514,184572]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [184580,184655]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Javadoc [184411,184681]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ReturnStatement [184739,184777]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "INFIX_EXPRESSION_OPERATOR: || [193602,193604]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "InfixExpression [193605,193633]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "InfixExpression [193590,193633]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: str [193656,193659]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "INFIX_EXPRESSION_OPERATOR: || [194727,194729]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "InfixExpression [194730,194758]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "InfixExpression [194715,194758]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: str [194781,194784]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ReturnStatement [212259,212310]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "ParenthesizedExpression [241637,241668]",
          "to": ""
        }
      ]
    }
  ],
  "inducing_type": {
    "add_classes": {
      "qualified_names": [
        "src/main/java/org/apache/commons/lang3/CharSequenceUtils.java"
      ],
      "num": 1
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [
        "org.apache.commons.lang3.StringUtils:containsAny:[CharSequence cs, char[] searchChars]:boolean",
        "org.apache.commons.lang3.StringUtils:isAllUpperCase:[CharSequence cs]:boolean",
        "org.apache.commons.lang3.StringUtils:isNotEmpty:[CharSequence cs]:boolean",
        "org.apache.commons.lang3.StringUtils:isAlphaSpace:[CharSequence cs]:boolean",
        "org.apache.commons.lang3.StringUtils:containsAny:[CharSequence cs, String searchChars]:boolean",
        "org.apache.commons.lang3.StringUtils:isAlphanumericSpace:[CharSequence cs]:boolean",
        "org.apache.commons.lang3.StringUtils:isBlank:[CharSequence cs]:boolean",
        "org.apache.commons.lang3.StringUtils:containsNone:[CharSequence cs, char[] invalidChars]:boolean",
        "org.apache.commons.lang3.StringUtils:equals:[CharSequence cs1, CharSequence cs2]:boolean",
        "org.apache.commons.lang3.StringUtils:isWhitespace:[CharSequence cs]:boolean",
        "org.apache.commons.lang3.StringUtils:isAlphanumeric:[CharSequence cs]:boolean",
        "org.apache.commons.lang3.StringUtils:isAllLowerCase:[CharSequence cs]:boolean",
        "org.apache.commons.lang3.StringUtils:isAlpha:[CharSequence cs]:boolean",
        "org.apache.commons.lang3.StringUtils:uncapitalize:[CharSequence cs]:String",
        "org.apache.commons.lang3.StringUtils:isAsciiPrintable:[CharSequence cs]:boolean",
        "org.apache.commons.lang3.StringUtils:indexOfAny:[CharSequence cs, String searchChars]:int",
        "org.apache.commons.lang3.StringUtils:isNumeric:[CharSequence cs]:boolean",
        "org.apache.commons.lang3.StringUtils:isEmpty:[CharSequence cs]:boolean",
        "org.apache.commons.lang3.StringUtils:containsOnly:[CharSequence cs, String validChars]:boolean",
        "org.apache.commons.lang3.StringUtils:containsOnly:[CharSequence cs, char[] valid]:boolean",
        "org.apache.commons.lang3.StringUtils:indexOfAnyBut:[CharSequence cs, char[] searchChars]:int",
        "org.apache.commons.lang3.StringUtils:containsNone:[CharSequence cs, String invalidChars]:boolean",
        "org.apache.commons.lang3.StringUtils:indexOfAny:[CharSequence cs, char[] searchChars]:int",
        "org.apache.commons.lang3.StringUtils:isNotBlank:[CharSequence cs]:boolean",
        "org.apache.commons.lang3.StringUtils:isNumericSpace:[CharSequence cs]:boolean",
        "org.apache.commons.lang3.StringUtils:getLevenshteinDistance:[CharSequence s, CharSequence t]:int",
        "org.apache.commons.lang3.StringUtils:length:[CharSequence cs]:int",
        "org.apache.commons.lang3.StringUtils:indexOfDifference:[CharSequence cs1, CharSequence cs2]:int",
        "org.apache.commons.lang3.StringUtils:indexOfDifference:[CharSequence[] css]:int",
        "org.apache.commons.lang3.StringUtils:capitalize:[CharSequence cs]:String"
      ],
      "num": 30
    },
    "delete_functions": {
      "qualified_names": [
        "org.apache.commons.lang3.StringUtils:indexOfAny:[String str, String searchChars]:int",
        "org.apache.commons.lang3.StringUtils:indexOfDifference:[String[] strs]:int",
        "org.apache.commons.lang3.StringUtils:getLevenshteinDistance:[String s, String t]:int",
        "org.apache.commons.lang3.StringUtils:capitalize:[String str]:String",
        "org.apache.commons.lang3.StringUtils:equals:[String str1, String str2]:boolean",
        "org.apache.commons.lang3.StringUtils:containsAny:[String str, char[] searchChars]:boolean",
        "org.apache.commons.lang3.StringUtils:isAllUpperCase:[String str]:boolean",
        "org.apache.commons.lang3.StringUtils:length:[CharSequence str]:int",
        "org.apache.commons.lang3.StringUtils:indexOfDifference:[String str1, String str2]:int",
        "org.apache.commons.lang3.StringUtils:isAlphaSpace:[String str]:boolean",
        "org.apache.commons.lang3.StringUtils:isEmpty:[CharSequence str]:boolean",
        "org.apache.commons.lang3.StringUtils:isAlpha:[String str]:boolean",
        "org.apache.commons.lang3.StringUtils:containsOnly:[String str, String validChars]:boolean",
        "org.apache.commons.lang3.StringUtils:isAlphanumericSpace:[String str]:boolean",
        "org.apache.commons.lang3.StringUtils:isWhitespace:[String str]:boolean",
        "org.apache.commons.lang3.StringUtils:containsNone:[String str, char[] invalidChars]:boolean",
        "org.apache.commons.lang3.StringUtils:containsNone:[String str, String invalidChars]:boolean",
        "org.apache.commons.lang3.StringUtils:isNumeric:[String str]:boolean",
        "org.apache.commons.lang3.StringUtils:isAlphanumeric:[String str]:boolean",
        "org.apache.commons.lang3.StringUtils:isBlank:[CharSequence str]:boolean",
        "org.apache.commons.lang3.StringUtils:indexOfAnyBut:[String str, char[] searchChars]:int",
        "org.apache.commons.lang3.StringUtils:containsOnly:[String str, char[] valid]:boolean",
        "org.apache.commons.lang3.StringUtils:uncapitalize:[String str]:String",
        "org.apache.commons.lang3.StringUtils:isNumericSpace:[String str]:boolean",
        "org.apache.commons.lang3.StringUtils:isNotEmpty:[CharSequence str]:boolean",
        "org.apache.commons.lang3.StringUtils:isAsciiPrintable:[String str]:boolean",
        "org.apache.commons.lang3.StringUtils:containsAny:[String str, String searchChars]:boolean",
        "org.apache.commons.lang3.StringUtils:indexOfAny:[String str, char[] searchChars]:int",
        "org.apache.commons.lang3.StringUtils:isNotBlank:[CharSequence str]:boolean",
        "org.apache.commons.lang3.StringUtils:isAllLowerCase:[String str]:boolean"
      ],
      "num": 30
    }
  },
  "trigger_tests": [
    {
      "test_class": "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest",
      "test_function": "testEquals",
      "assertion_line": "490",
      "exception": "junit.framework.AssertionFailedError",
      "message": ""
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/lang3/StringUtils.java",
        "src/main/java/org/apache/commons/lang3/StringUtils.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.lang3.StringUtils:equals:[CharSequence cs1, CharSequence cs2]:boolean",
            "org.apache.commons.lang3.StringUtils:equalsIgnoreCase:[CharSequence str1, CharSequence str2]:boolean"
          ],
          "num": 2
        },
        {
          "qualified_names": [
            "org.apache.commons.lang3.StringUtils:equalsIgnoreCase:[CharSequence str1, CharSequence str2]:boolean",
            "org.apache.commons.lang3.StringUtils:equals:[CharSequence cs1, CharSequence cs2]:boolean"
          ],
          "num": 2
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "761",
            "774",
            "775",
            "776",
            "777",
            "778",
            "782",
            "786",
            "787"
          ],
          "num": 9
        },
        {
          "qualified_names": [
            "761",
            "762",
            "775",
            "776",
            "777",
            "778",
            "782",
            "783",
            "784",
            "785",
            "786",
            "787",
            "788",
            "789",
            "790",
            "791",
            "795",
            "796"
          ],
          "num": 18
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex ff6e35c..4733b7e 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -758,7 +758,8 @@\n     // Equals\n     //-----------------------------------------------------------------------\n     /**\n-     * \u003cp\u003eCompares two CharSequences, returning {@code true} if they are equal.\u003c/p\u003e\n+     * \u003cp\u003eCompares two CharSequences, returning {@code true} if they represent\n+     * equal sequences of characters.\u003c/p\u003e\n      *\n      * \u003cp\u003e{@code null}s are handled without exceptions. Two {@code null}\n      * references are considered to be equal. The comparison is case sensitive.\u003c/p\u003e\n@@ -771,20 +772,28 @@\n      * StringUtils.equals(\"abc\", \"ABC\") \u003d false\n      * \u003c/pre\u003e\n      *\n-     * @see java.lang.String#equals(Object)\n-     * @param cs1  the first CharSequence, may be null\n-     * @param cs2  the second CharSequence, may be null\n-     * @return {@code true} if the CharSequences are equal, case sensitive, or\n-     *  both {@code null}\n+     * @see java.lang.CharSequence#equals(Object)\n+     * @param cs1  the first CharSequence, may be {@code null}\n+     * @param cs2  the second CharSequence, may be {@code null}\n+     * @return {@code true} if the CharSequences are equal (case-sensitive), or both {@code null}\n      * @since 3.0 Changed signature from equals(String, String) to equals(CharSequence, CharSequence)\n      */\n     public static boolean equals(CharSequence cs1, CharSequence cs2) {\n-        return cs1 \u003d\u003d null ? cs2 \u003d\u003d null : cs1.equals(cs2);\n+        if (cs1 \u003d\u003d cs2) {\n+            return true;\n+        }\n+        if (cs1 \u003d\u003d null || cs2 \u003d\u003d null) {\n+            return false;\n+        }\n+        if (cs1 instanceof String \u0026\u0026 cs2 instanceof String) {\n+            return cs1.equals(cs2);\n+        }\n+        return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));\n     }\n \n     /**\n-     * \u003cp\u003eCompares two CharSequences, returning {@code true} if they are equal ignoring\n-     * the case.\u003c/p\u003e\n+     * \u003cp\u003eCompares two CharSequences, returning {@code true} if they represent\n+     * equal sequences of characters, ignoring case.\u003c/p\u003e\n      *\n      * \u003cp\u003e{@code null}s are handled without exceptions. Two {@code null}\n      * references are considered equal. Comparison is case insensitive.\u003c/p\u003e\n",
      "operations": [
        {
          "type": "insert-node",
          "from": "",
          "to": "TagElement [31356,31411]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TagElement [31419,31475]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [31763,31815]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [31824,31893]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "IfStatement [31902,32001]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ReturnStatement [32010,32110]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: equal sequences of characters.\u003c/p\u003e [30821,30855]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement:   the first CharSequence, may be  [31366,31399]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [31399,31411]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement:   the second CharSequence, may be  [31429,31463]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [31463,31475]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "InfixExpression [31906,31952]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Block [31954,32001]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement:   the first CharSequence, may be null [31323,31360]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TagElement [31313,31360]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement:   the second CharSequence, may be null [31378,31416]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TagElement [31368,31416]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: both  [31504,31509]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "InfixExpression [31718,31729]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "InfixExpression [31732,31743]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "ConditionalExpression [31718,31761]",
          "to": ""
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  },
  "patch_changed_mths": {
    "qualified_names": [
      "org.apache.commons.lang3.StringUtils:equals(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Z:regression",
      "org.apache.commons.lang3.StringUtils:equalsIgnoreCase(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Z:regression"
    ],
    "num": 2
  }
}