{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "data/changesInfo/",
  "timeoutSecond": 300,
  "proj": "Math",
  "id": "48",
  "workingDir": "../bugs/Math_48_buggy",
  "inducingCommit": "6a23f66ae368949d1a0764cdcd8aad9668bda0c3",
  "originalCommit": "4d95c18a15bdbc2048953924d7a8dd735202a5ff",
  "bug_name": "Math_48",
  "derive": "defects4j",
  "original_fixing_commit": "13d22f45624470ce5c07c085cf8b1ec0251eaee6",
  "buildFiles_changed": false,
  "inducing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java",
        "src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "setAllowedSolutions",
            "getAllowedSolutions"
          ],
          "num": 2
        },
        {
          "qualified_names": [
            "IllinoisSolver"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "41",
            "66",
            "67",
            "68",
            "69",
            "70",
            "71",
            "72",
            "73",
            "74",
            "75"
          ],
          "num": 11
        },
        {
          "qualified_names": [
            "41",
            "65"
          ],
          "num": 2
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java\nindex 1274896..37c3ab8 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java\n@@ -38,7 +38,7 @@\n  * @since 3.0\n  * @version $Id$\n  */\n-public class IllinoisSolver extends SecantBase implements BracketedSolution {\n+public class IllinoisSolver extends BaseBracketedSecantSolver {\n     /** Construct a solver with default accuracy (1e-6). */\n     public IllinoisSolver() {\n         super(DEFAULT_ABSOLUTE_ACCURACY, Method.ILLINOIS);\n@@ -63,14 +63,4 @@\n                           final double absoluteAccuracy) {\n         super(relativeAccuracy, absoluteAccuracy, Method.ILLINOIS);\n     }\n-\n-    /** {@inheritDoc} */\n-    public AllowedSolutions getAllowedSolutions() {\n-        return allowedSolutions;\n-    }\n-\n-    /** {@inheritDoc} */\n-    public void setAllowedSolutions(final AllowedSolutions allowedSolutions) {\n-        this.allowedSolutions \u003d allowedSolutions;\n-    }\n }\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "SimpleType [1731,1756]"
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [1731,1741]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [1753,1770]",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java",
        "src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "setAllowedSolutions",
            "getAllowedSolutions"
          ],
          "num": 2
        },
        {
          "qualified_names": [
            "PegasusSolver"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "43",
            "68",
            "69",
            "70",
            "71",
            "72",
            "73",
            "74",
            "75",
            "76",
            "77"
          ],
          "num": 11
        },
        {
          "qualified_names": [
            "43",
            "67"
          ],
          "num": 2
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java\nindex a2f83b7..30e8ad4 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java\n@@ -40,7 +40,7 @@\n  * @since 3.0\n  * @version $Id$\n  */\n-public class PegasusSolver extends SecantBase implements BracketedSolution {\n+public class PegasusSolver extends BaseBracketedSecantSolver {\n     /** Construct a solver with default accuracy (1e-6). */\n     public PegasusSolver() {\n         super(DEFAULT_ABSOLUTE_ACCURACY, Method.PEGASUS);\n@@ -65,14 +65,4 @@\n                          final double absoluteAccuracy) {\n         super(relativeAccuracy, absoluteAccuracy, Method.PEGASUS);\n     }\n-\n-    /** {@inheritDoc} */\n-    public AllowedSolutions getAllowedSolutions() {\n-        return allowedSolutions;\n-    }\n-\n-    /** {@inheritDoc} */\n-    public void setAllowedSolutions(final AllowedSolutions allowedSolutions) {\n-        this.allowedSolutions \u003d allowedSolutions;\n-    }\n }\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "SimpleType [1864,1889]"
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [1864,1874]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [1886,1903]",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolver.java",
        "src/main/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolver.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "setAllowedSolutions",
            "getAllowedSolutions"
          ],
          "num": 2
        },
        {
          "qualified_names": [
            "RegulaFalsiSolver"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "38",
            "63",
            "64",
            "65",
            "66",
            "67",
            "68",
            "69",
            "70",
            "71",
            "72"
          ],
          "num": 11
        },
        {
          "qualified_names": [
            "38",
            "62"
          ],
          "num": 2
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolver.java\nindex 2b310f1..949e3e9 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolver.java\n@@ -35,7 +35,7 @@\n  * @since 3.0\n  * @version $Id$\n  */\n-public class RegulaFalsiSolver extends SecantBase implements BracketedSolution {\n+public class RegulaFalsiSolver extends BaseBracketedSecantSolver {\n     /** Construct a solver with default accuracy (1e-6). */\n     public RegulaFalsiSolver() {\n         super(DEFAULT_ABSOLUTE_ACCURACY, Method.REGULA_FALSI);\n@@ -60,14 +60,4 @@\n                              final double absoluteAccuracy) {\n         super(relativeAccuracy, absoluteAccuracy, Method.REGULA_FALSI);\n     }\n-\n-    /** {@inheritDoc} */\n-    public AllowedSolutions getAllowedSolutions() {\n-        return allowedSolutions;\n-    }\n-\n-    /** {@inheritDoc} */\n-    public void setAllowedSolutions(final AllowedSolutions allowedSolutions) {\n-        this.allowedSolutions \u003d allowedSolutions;\n-    }\n }\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "SimpleType [1650,1675]"
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [1650,1660]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [1672,1689]",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java",
        "src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [],
          "num": 0
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "39"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "39"
          ],
          "num": 1
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java\nindex 0d50c94..52ae77e 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java\n@@ -36,7 +36,7 @@\n  *\n  * @version $Id$\n  */\n-public class SecantSolver extends SecantBase {\n+public class SecantSolver extends BaseSecantSolver {\n     /** Construct a solver with default accuracy (1e-6). */\n     public SecantSolver() {\n         super(DEFAULT_ABSOLUTE_ACCURACY, Method.SECANT);\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "SimpleType [1767,1783]"
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [1767,1777]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java",
        "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [
            "BaseSecantSolver",
            "doSolve",
            "BaseSecantSolver"
          ],
          "num": 3
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "-1"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "35",
            "36",
            "37",
            "38",
            "39",
            "40",
            "41",
            "42",
            "43",
            "44",
            "45",
            "46",
            "47",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57",
            "58",
            "59",
            "60",
            "61",
            "62",
            "63",
            "64",
            "65",
            "66",
            "67",
            "68",
            "69",
            "70",
            "71",
            "72",
            "73",
            "74",
            "75",
            "76",
            "77",
            "78",
            "79",
            "80",
            "81",
            "82",
            "83",
            "84",
            "85",
            "86",
            "87",
            "88",
            "89",
            "90",
            "91",
            "92",
            "93",
            "94",
            "95",
            "96",
            "97",
            "98",
            "99",
            "100",
            "101",
            "102",
            "103",
            "104",
            "105",
            "106",
            "107",
            "108",
            "109",
            "110",
            "111",
            "112",
            "113",
            "114",
            "115",
            "116",
            "117",
            "118",
            "119",
            "120",
            "121",
            "122",
            "123",
            "124",
            "125",
            "126",
            "127",
            "128",
            "129",
            "130",
            "131",
            "132",
            "133",
            "134",
            "135",
            "136",
            "137",
            "138",
            "139",
            "140",
            "141",
            "142",
            "143",
            "144",
            "145",
            "146",
            "147",
            "148",
            "149",
            "150",
            "151",
            "152",
            "153",
            "154",
            "155",
            "156",
            "157",
            "158",
            "159",
            "160",
            "161",
            "162",
            "163",
            "164",
            "165",
            "166",
            "167",
            "168",
            "169",
            "170",
            "171",
            "172",
            "173",
            "174",
            "175",
            "176",
            "177",
            "178",
            "179",
            "180",
            "181",
            "182",
            "183",
            "184",
            "185",
            "186",
            "187",
            "188",
            "189",
            "190",
            "191",
            "192",
            "193",
            "194",
            "195",
            "196",
            "197",
            "198",
            "199",
            "200"
          ],
          "num": 200
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\nnew file mode 100644\nindex 0000000..4764a57\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n@@ -0,0 +1,200 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.math.analysis.solvers;\n+\n+import org.apache.commons.math.util.FastMath;\n+import org.apache.commons.math.exception.MathInternalError;\n+\n+/**\n+ * Base class for all \u003cem\u003eSecant\u003c/em\u003e-based methods for root-finding\n+ * (approximating a zero of a univariate real function).\n+ *\n+ * \u003cp\u003eImplementation of the {@link SecantSolver \u003cem\u003eSecant\u003c/em\u003e},\n+ * {@link RegulaFalsiSolver \u003cem\u003eRegula Falsi\u003c/em\u003e}, and\n+ * {@link IllinoisSolver \u003cem\u003eIllinois\u003c/em\u003e} methods is based on the\n+ * following article: M. Dowell and P. Jarratt,\n+ * \u003cem\u003eA modified regula falsi method for computing the root of an\n+ * equation\u003c/em\u003e, BIT Numerical Mathematics, volume 11, number 2,\n+ * pages 168-174, Springer, 1971.\u003c/p\u003e\n+ *\n+ * \u003cp\u003eImplementation of the {@link PegasusSolver \u003cem\u003ePegasus\u003c/em\u003e} method is\n+ * based on the following article: M. Dowell and P. Jarratt,\n+ * \u003cem\u003eThe \"Pegasus\" method for computing the root of an equation\u003c/em\u003e,\n+ * BIT Numerical Mathematics, volume 12, number 4, pages 503-508, Springer,\n+ * 1972.\u003c/p\u003e\n+ *\n+ * @since 3.0\n+ * @version $Id$\n+ */\n+public abstract class BaseSecantSolver extends AbstractUnivariateRealSolver {\n+    /** Default absolute accuracy. */\n+    protected static final double DEFAULT_ABSOLUTE_ACCURACY \u003d 1e-6;\n+    /** The kinds of solutions that the algorithm may accept. */\n+    protected AllowedSolutions allowedSolutions \u003d AllowedSolutions.EITHER_SIDE;\n+    /** The \u003cem\u003eSecant\u003c/em\u003e-based root-finding method to use. */\n+    private final Method method;\n+\n+    /**\n+     * Construct a solver.\n+     *\n+     * @param absoluteAccuracy absolute accuracy\n+     * @param method \u003cem\u003eSecant\u003c/em\u003e-based root-finding method to use\n+     */\n+    protected BaseSecantSolver(final double absoluteAccuracy, final Method method) {\n+        super(absoluteAccuracy);\n+        this.method \u003d method;\n+    }\n+\n+    /**\n+     * Construct a solver.\n+     *\n+     * @param relativeAccuracy relative accuracy\n+     * @param absoluteAccuracy absolute accuracy\n+     * @param method \u003cem\u003eSecant\u003c/em\u003e-based root-finding method to use\n+     */\n+    protected BaseSecantSolver(final double relativeAccuracy,\n+                               final double absoluteAccuracy,\n+                               final Method method) {\n+        super(relativeAccuracy, absoluteAccuracy);\n+        this.method \u003d method;\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override\n+    protected final double doSolve() {\n+        // Get initial solution\n+        double x0 \u003d getMin();\n+        double x1 \u003d getMax();\n+        double f0 \u003d computeObjectiveValue(x0);\n+        double f1 \u003d computeObjectiveValue(x1);\n+\n+        // If one of the bounds is the exact root, return it. Since these are\n+        // not under-approximations or over-approximations, we can return them\n+        // regardless of the allowed solutions.\n+        if (f0 \u003d\u003d 0.0) return x0;\n+        if (f1 \u003d\u003d 0.0) return x1;\n+\n+        // Verify bracketing of initial solution.\n+        verifyBracketing(x0, x1);\n+\n+        // Get accuracies.\n+        final double ftol \u003d getFunctionValueAccuracy();\n+        final double atol \u003d getAbsoluteAccuracy();\n+        final double rtol \u003d getRelativeAccuracy();\n+\n+        // Variables to hold new bounds.\n+        double x;\n+        double fx;\n+\n+        // Keep track of inverted intervals, meaning that the left bound is\n+        // larger than the right bound. Not used for the original Secant\n+        // method.\n+        boolean inverted \u003d false;\n+\n+        // Keep finding better approximations.\n+        while (true) {\n+            // Calculate the next approximation.\n+            x \u003d x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n+            fx \u003d computeObjectiveValue(x);\n+\n+            // If the new approximation is the exact root, return it. Since\n+            // this is not an under-approximation or an over-approximation,\n+            // we can return it regardless of the allowed solutions.\n+            if (fx \u003d\u003d 0.0) return x;\n+\n+            // Update the bounds with the new approximation.\n+            if (method \u003d\u003d Method.SECANT) {\n+                x0 \u003d x1;\n+                f0 \u003d f1;\n+                x1 \u003d x;\n+                f1 \u003d fx;\n+            } else if (f1 * fx \u003c 0) {\n+                // We had [x0..x1]. We update it to [x1, x]. Note that the\n+                // value of x1 has switched to the other bound, thus inverting\n+                // the interval.\n+                x0 \u003d x1;\n+                f0 \u003d f1;\n+                x1 \u003d x;\n+                f1 \u003d fx;\n+                inverted \u003d !inverted;\n+            } else {\n+                // We had [x0..x1]. We update it to [x0, x].\n+                if (method \u003d\u003d Method.ILLINOIS) f0 *\u003d 0.5;\n+                if (method \u003d\u003d Method.PEGASUS) f0 *\u003d f1 / (f1 + fx);\n+                x1 \u003d x;\n+                f1 \u003d fx;\n+            }\n+\n+            // If the function value of the last approximation is too small,\n+            // given the function value accuracy, then we can\u0027t get close to\n+            // the root than we already are.\n+            if (FastMath.abs(f1) \u003c\u003d ftol) {\n+                switch (allowedSolutions) {\n+                case EITHER_SIDE:\n+                    return x1;\n+                case LEFT_SIDE:\n+                    if (inverted) {\n+                        return x1;\n+                    }\n+                    break;\n+                case RIGHT_SIDE:\n+                    if (!inverted) {\n+                        return x1;\n+                    }\n+                    break;\n+                default:\n+                    throw new MathInternalError();\n+                }\n+            }\n+\n+            // If the current interval is within the given accuracies, we\n+            // are satisfied with the current approximation.\n+            if (FastMath.abs(x1 - x0) \u003c FastMath.max(rtol * FastMath.abs(x1),\n+                                                     atol)) {\n+                switch (allowedSolutions) {\n+                case EITHER_SIDE:\n+                    return x1;\n+                case LEFT_SIDE:\n+                    return inverted ? x1 : x0;\n+                case RIGHT_SIDE:\n+                    return inverted ? x0 : x1;\n+                default:\n+                    throw new MathInternalError();\n+                }\n+            }\n+        }\n+    }\n+\n+    /** \u003cem\u003eSecant\u003c/em\u003e-based root-finding methods. */\n+    protected enum Method {\n+        /** The original {@link SecantSolver \u003cem\u003eSecant\u003c/em\u003e} method. */\n+        SECANT,\n+\n+        /**\n+         * The {@link RegulaFalsiSolver \u003cem\u003eRegula Falsi\u003c/em\u003e} or\n+         * \u003cem\u003eFalse Position\u003c/em\u003e method.\n+         */\n+        REGULA_FALSI,\n+\n+        /** The {@link IllinoisSolver \u003cem\u003eIllinois\u003c/em\u003e} method. */\n+        ILLINOIS,\n+\n+        /** The {@link PegasusSolver \u003cem\u003ePegasus\u003c/em\u003e} method. */\n+        PEGASUS,\n+    }\n+}\n",
      "operations": [
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        }
      ]
    }
  ],
  "inducing_type": {
    "add_classes": {
      "qualified_names": [
        "src/main/java/org/apache/commons/math/analysis/solvers/BaseBracketedSecantSolver.java",
        "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java"
      ],
      "num": 2
    },
    "delete_classes": {
      "qualified_names": [
        "src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java"
      ],
      "num": 1
    },
    "add_functions": {
      "qualified_names": [
        "PegasusSolver",
        "BaseSecantSolver",
        "IllinoisSolver",
        "RegulaFalsiSolver",
        "doSolve"
      ],
      "num": 5
    },
    "delete_functions": {
      "qualified_names": [
        "getAllowedSolutions",
        "setAllowedSolutions"
      ],
      "num": 2
    }
  },
  "trigger_tests": [
    {
      "test_class": "org.apache.commons.math.optimization.direct.BOBYQAOptimizerTest",
      "test_function": "testAckley",
      "exception": "junit.framework.AssertionFailedError",
      "message": "expected:\u003c0.0\u003e but was:\u003c1.047765607609108E-8\u003e"
    },
    {
      "test_class": "org.apache.commons.math.optimization.direct.BOBYQAOptimizerTest",
      "test_function": "testDiffPow",
      "exception": "org.apache.commons.math.exception.TooManyEvaluationsException",
      "message": "illegal state: maximal count (12,000) exceeded: evaluations"
    },
    {
      "test_class": "org.apache.commons.math.util.FastMathTest",
      "test_function": "checkMissingFastMathClasses",
      "exception": "junit.framework.AssertionFailedError",
      "message": "FastMath should implement all StrictMath methods"
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java",
        "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "BaseSecantSolver",
            "doSolve",
            "BaseSecantSolver"
          ],
          "num": 3
        },
        {
          "qualified_names": [
            "doSolve",
            "solve",
            "BaseSecantSolver",
            "BaseSecantSolver",
            "solve",
            "BaseSecantSolver",
            "solve"
          ],
          "num": 7
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "24",
            "27",
            "28",
            "44",
            "48",
            "59",
            "73",
            "89",
            "90",
            "100",
            "101",
            "102",
            "103",
            "105",
            "106",
            "112",
            "113",
            "118",
            "121",
            "122",
            "123",
            "124",
            "125",
            "126",
            "127",
            "128",
            "132",
            "133",
            "136",
            "137",
            "138",
            "139",
            "140",
            "144",
            "147",
            "148",
            "159",
            "169",
            "170",
            "185",
            "186",
            "198"
          ],
          "num": 42
        },
        {
          "qualified_names": [
            "21",
            "23",
            "26",
            "29",
            "42",
            "43",
            "44",
            "45",
            "49",
            "50",
            "51",
            "52",
            "55",
            "57",
            "58",
            "70",
            "85",
            "86",
            "87",
            "88",
            "89",
            "90",
            "91",
            "92",
            "93",
            "94",
            "95",
            "96",
            "97",
            "98",
            "99",
            "100",
            "101",
            "102",
            "107",
            "108",
            "109",
            "110",
            "111",
            "112",
            "113",
            "114",
            "115",
            "116",
            "117",
            "118",
            "119",
            "120",
            "121",
            "123",
            "124",
            "125",
            "126",
            "127",
            "128",
            "139",
            "140",
            "141",
            "142",
            "143",
            "144",
            "155",
            "161",
            "162",
            "167",
            "168",
            "169",
            "172",
            "173",
            "179",
            "180",
            "181",
            "182",
            "183",
            "184",
            "185",
            "186",
            "187",
            "188",
            "189",
            "190",
            "191",
            "192",
            "193",
            "194",
            "196",
            "197",
            "198",
            "201",
            "204",
            "205",
            "217",
            "218",
            "219",
            "220",
            "221",
            "222",
            "223",
            "224",
            "225",
            "226",
            "236",
            "237",
            "243",
            "244",
            "245",
            "246",
            "267",
            "268"
          ],
          "num": 109
        }
      ],
      "diff": "diff -u -r data/changesInfo//Math_48/properties/modified_classes/inducing/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java data/changesInfo//Math_48/cleaned/fixing/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n--- data/changesInfo//Math_48/properties/modified_classes/inducing/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2023-08-25 13:58:28.841417064 +0800\n+++ data/changesInfo//Math_48/cleaned/fixing/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2023-07-25 23:10:08.918583162 +0800\n@@ -18,14 +18,15 @@\n package org.apache.commons.math.analysis.solvers;\n \n import org.apache.commons.math.util.FastMath;\n+import org.apache.commons.math.analysis.UnivariateRealFunction;\n import org.apache.commons.math.exception.MathInternalError;\n+import org.apache.commons.math.exception.ConvergenceException;\n \n /**\n- * Base class for all \u003cem\u003eSecant\u003c/em\u003e-based methods for root-finding\n+ * Base class for all bracketing \u003cem\u003eSecant\u003c/em\u003e-based methods for root-finding\n  * (approximating a zero of a univariate real function).\n  *\n- * \u003cp\u003eImplementation of the {@link SecantSolver \u003cem\u003eSecant\u003c/em\u003e},\n- * {@link RegulaFalsiSolver \u003cem\u003eRegula Falsi\u003c/em\u003e}, and\n+ * \u003cp\u003eImplementation of the {@link RegulaFalsiSolver \u003cem\u003eRegula Falsi\u003c/em\u003e} and\n  * {@link IllinoisSolver \u003cem\u003eIllinois\u003c/em\u003e} methods is based on the\n  * following article: M. Dowell and P. Jarratt,\n  * \u003cem\u003eA modified regula falsi method for computing the root of an\n@@ -38,14 +39,23 @@\n  * BIT Numerical Mathematics, volume 12, number 4, pages 503-508, Springer,\n  * 1972.\u003c/p\u003e\n  *\n+ * \u003cp\u003eThe {@link SecantSolver \u003cem\u003eSecant\u003c/em\u003e} method is \u003cem\u003enot\u003c/em\u003e a\n+ * bracketing method, so it is not implemented here. It has a separate\n+ * implementation.\u003c/p\u003e\n+ *\n  * @since 3.0\n  * @version $Id$\n  */\n-public abstract class BaseSecantSolver extends AbstractUnivariateRealSolver {\n+public abstract class BaseSecantSolver\n+    extends AbstractUnivariateRealSolver\n+    implements BracketedUnivariateRealSolver\u003cUnivariateRealFunction\u003e {\n+\n     /** Default absolute accuracy. */\n     protected static final double DEFAULT_ABSOLUTE_ACCURACY \u003d 1e-6;\n+\n     /** The kinds of solutions that the algorithm may accept. */\n-    protected AllowedSolutions allowedSolutions \u003d AllowedSolutions.EITHER_SIDE;\n+    private AllowedSolution allowed;\n+\n     /** The \u003cem\u003eSecant\u003c/em\u003e-based root-finding method to use. */\n     private final Method method;\n \n@@ -57,6 +67,7 @@\n      */\n     protected BaseSecantSolver(final double absoluteAccuracy, final Method method) {\n         super(absoluteAccuracy);\n+        this.allowed \u003d AllowedSolution.ANY_SIDE;\n         this.method \u003d method;\n     }\n \n@@ -71,11 +82,50 @@\n                                final double absoluteAccuracy,\n                                final Method method) {\n         super(relativeAccuracy, absoluteAccuracy);\n+        this.allowed \u003d AllowedSolution.ANY_SIDE;\n+        this.method \u003d method;\n+    }\n+\n+    /**\n+     * Construct a solver.\n+     *\n+     * @param relativeAccuracy Maximum relative error.\n+     * @param absoluteAccuracy Maximum absolute error.\n+     * @param functionValueAccuracy Maximum function value error.\n+     * @param method \u003cem\u003eSecant\u003c/em\u003e-based root-finding method to use\n+     */\n+    protected BaseSecantSolver(final double relativeAccuracy,\n+                               final double absoluteAccuracy,\n+                               final double functionValueAccuracy,\n+                               final Method method) {\n+        super(relativeAccuracy, absoluteAccuracy, functionValueAccuracy);\n+        this.allowed \u003d AllowedSolution.ANY_SIDE;\n         this.method \u003d method;\n     }\n \n     /** {@inheritDoc} */\n+    public double solve(final int maxEval, final UnivariateRealFunction f,\n+                        final double min, final double max,\n+                        final AllowedSolution allowedSolution) {\n+        return solve(maxEval, f, min, max, min + 0.5 * (max - min), allowedSolution);\n+    }\n+\n+    /** {@inheritDoc} */\n+    public double solve(final int maxEval, final UnivariateRealFunction f,\n+                        final double min, final double max, final double startValue,\n+                        final AllowedSolution allowedSolution) {\n+        this.allowed \u003d allowedSolution;\n+        return super.solve(maxEval, f, min, max, startValue);\n+    }\n+\n+    /** {@inheritDoc} */\n     @Override\n+    public double solve(final int maxEval, final UnivariateRealFunction f,\n+                        final double min, final double max, final double startValue) {\n+        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n+    }\n+\n+    /** {@inheritDoc} */\n     protected final double doSolve() {\n         // Get initial solution\n         double x0 \u003d getMin();\n@@ -86,8 +136,12 @@\n         // If one of the bounds is the exact root, return it. Since these are\n         // not under-approximations or over-approximations, we can return them\n         // regardless of the allowed solutions.\n-        if (f0 \u003d\u003d 0.0) return x0;\n-        if (f1 \u003d\u003d 0.0) return x1;\n+        if (f0 \u003d\u003d 0.0) {\n+            return x0;\n+        }\n+        if (f1 \u003d\u003d 0.0) {\n+            return x1;\n+        }\n \n         // Verify bracketing of initial solution.\n         verifyBracketing(x0, x1);\n@@ -97,55 +151,58 @@\n         final double atol \u003d getAbsoluteAccuracy();\n         final double rtol \u003d getRelativeAccuracy();\n \n-        // Variables to hold new bounds.\n-        double x;\n-        double fx;\n-\n         // Keep track of inverted intervals, meaning that the left bound is\n-        // larger than the right bound. Not used for the original Secant\n-        // method.\n+        // larger than the right bound.\n         boolean inverted \u003d false;\n \n         // Keep finding better approximations.\n         while (true) {\n             // Calculate the next approximation.\n-            x \u003d x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n-            fx \u003d computeObjectiveValue(x);\n+            final double x \u003d x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n+            final double fx \u003d computeObjectiveValue(x);\n \n             // If the new approximation is the exact root, return it. Since\n             // this is not an under-approximation or an over-approximation,\n             // we can return it regardless of the allowed solutions.\n-            if (fx \u003d\u003d 0.0) return x;\n+            if (fx \u003d\u003d 0.0) {\n+                return x;\n+            }\n \n             // Update the bounds with the new approximation.\n-            if (method \u003d\u003d Method.SECANT) {\n-                x0 \u003d x1;\n-                f0 \u003d f1;\n-                x1 \u003d x;\n-                f1 \u003d fx;\n-            } else if (f1 * fx \u003c 0) {\n-                // We had [x0..x1]. We update it to [x1, x]. Note that the\n-                // value of x1 has switched to the other bound, thus inverting\n+            if (f1 * fx \u003c 0) {\n+                // The value of x1 has switched to the other bound, thus inverting\n                 // the interval.\n                 x0 \u003d x1;\n                 f0 \u003d f1;\n-                x1 \u003d x;\n-                f1 \u003d fx;\n                 inverted \u003d !inverted;\n             } else {\n-                // We had [x0..x1]. We update it to [x0, x].\n-                if (method \u003d\u003d Method.ILLINOIS) f0 *\u003d 0.5;\n-                if (method \u003d\u003d Method.PEGASUS) f0 *\u003d f1 / (f1 + fx);\n-                x1 \u003d x;\n-                f1 \u003d fx;\n+                switch (method) {\n+                case ILLINOIS:\n+                    f0 *\u003d 0.5;\n+                    break;\n+                case PEGASUS:\n+                    f0 *\u003d f1 / (f1 + fx);\n+                    break;\n+                case REGULA_FALSI:\n+                    if (x \u003d\u003d x1) {\n+                        throw new ConvergenceException();\n+                    }\n+                    break;\n+                default:\n+                    // Should never happen.\n+                    throw new MathInternalError();\n+                }\n             }\n+            // Update from [x0, x1] to [x0, x].\n+            x1 \u003d x;\n+            f1 \u003d fx;\n \n             // If the function value of the last approximation is too small,\n-            // given the function value accuracy, then we can\u0027t get close to\n+            // given the function value accuracy, then we can\u0027t get closer to\n             // the root than we already are.\n             if (FastMath.abs(f1) \u003c\u003d ftol) {\n-                switch (allowedSolutions) {\n-                case EITHER_SIDE:\n+                switch (allowed) {\n+                case ANY_SIDE:\n                     return x1;\n                 case LEFT_SIDE:\n                     if (inverted) {\n@@ -157,6 +214,16 @@\n                         return x1;\n                     }\n                     break;\n+                case BELOW_SIDE:\n+                    if (f1 \u003c\u003d 0) {\n+                        return x1;\n+                    }\n+                    break;\n+                case ABOVE_SIDE:\n+                    if (f1 \u003e\u003d 0) {\n+                        return x1;\n+                    }\n+                    break;\n                 default:\n                     throw new MathInternalError();\n                 }\n@@ -166,13 +233,17 @@\n             // are satisfied with the current approximation.\n             if (FastMath.abs(x1 - x0) \u003c FastMath.max(rtol * FastMath.abs(x1),\n                                                      atol)) {\n-                switch (allowedSolutions) {\n-                case EITHER_SIDE:\n+                switch (allowed) {\n+                case ANY_SIDE:\n                     return x1;\n                 case LEFT_SIDE:\n                     return inverted ? x1 : x0;\n                 case RIGHT_SIDE:\n                     return inverted ? x0 : x1;\n+                case BELOW_SIDE:\n+                    return (f1 \u003c\u003d 0) ? x1 : x0;\n+                case ABOVE_SIDE:\n+                    return (f1 \u003e\u003d 0) ? x1 : x0;\n                 default:\n                     throw new MathInternalError();\n                 }\n@@ -182,8 +253,6 @@\n \n     /** \u003cem\u003eSecant\u003c/em\u003e-based root-finding methods. */\n     protected enum Method {\n-        /** The original {@link SecantSolver \u003cem\u003eSecant\u003c/em\u003e} method. */\n-        SECANT,\n \n         /**\n          * The {@link RegulaFalsiSolver \u003cem\u003eRegula Falsi\u003c/em\u003e} or\n@@ -195,6 +264,7 @@\n         ILLINOIS,\n \n         /** The {@link PegasusSolver \u003cem\u003ePegasus\u003c/em\u003e} method. */\n-        PEGASUS,\n+        PEGASUS;\n+\n     }\n }\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "ImportDeclaration [901,964]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ImportDeclaration [1025,1087]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ParameterizedType [2204,2257]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldDeclaration [2372,2469]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [3480,4175]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [4181,4493]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [4499,4852]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [4858,5142]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement:  method is \u003cem\u003enot\u003c/em\u003e a [1951,1976]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: bracketing method, so it is not implemented here. It has a separate [1980,2047]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: implementation.\u003c/p\u003e [2051,2070]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [2865,2905]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [3398,3438]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Block [5623,5657]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Block [5681,5715]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "VariableDeclarationStatement [6270,6323]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "VariableDeclarationStatement [6336,6379]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: final [6270,6275]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "PrimitiveType: double [6276,6282]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "VariableDeclarationFragment [6283,6322]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: final [6336,6341]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "PrimitiveType: double [6342,6348]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "VariableDeclarationFragment [6349,6378]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Block [6629,6670]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SwitchStatement [7005,7525]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: method [7013,7019]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SwitchCase [7039,7053]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "BreakStatement [7105,7111]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SwitchCase [7128,7141]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "BreakStatement [7204,7210]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SwitchCase [7227,7245]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [7266,7360]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "BreakStatement [7381,7387]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SwitchCase [8293,8309]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "IfStatement [8330,8401]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "BreakStatement [8422,8428]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SwitchCase [8445,8461]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [8482,8553]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "BreakStatement [8574,8580]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SwitchCase [8597,8605]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ThrowStatement [8626,8656]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SwitchCase [9237,9253]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ReturnStatement [9274,9301]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SwitchCase [9318,9334]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ReturnStatement [9355,9382]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "InfixExpression [8334,8341]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Block [8343,8401]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "ReturnStatement [8369,8379]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "FieldDeclaration [2032,2172]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MarkerAnnotation [3109,3118]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [3939,3948]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [3957,3967]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "ASSIGNMENT_OPERATOR: \u003d [4305,4306]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Assignment [4303,4342]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "ExpressionStatement [4303,4343]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "ASSIGNMENT_OPERATOR: \u003d [4359,4360]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Assignment [4356,4385]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "ExpressionStatement [4356,4386]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: x0 [5091,5093]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "ASSIGNMENT_OPERATOR: \u003d [5094,5095]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Assignment [5091,5098]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "ExpressionStatement [5091,5099]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [5116,5124]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [5141,5148]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [5165,5173]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "InfixExpression [5314,5339]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "IfStatement [5310,5351]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "InfixExpression [5372,5396]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "IfStatement [5368,5419]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [5436,5443]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [5460,5468]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "InfixExpression [4724,4747]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Block [4749,4863]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "IfStatement [4720,5482]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "EnumConstantDeclaration [7010,7089]",
          "to": ""
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [
        "solve"
      ],
      "num": 1
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  }
}