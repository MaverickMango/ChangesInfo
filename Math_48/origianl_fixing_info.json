{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "/home/liumengjiao/Desktop/CI/Benchmark/data/changesInfo/",
  "properties": {
    "trigger.tests": "org.apache.commons.math.analysis.solvers.RegulaFalsiSolverTest::testIssue631",
    "test.dir": "src/test/java",
    "clz.modified": "org.apache.commons.math.analysis.solvers.BaseSecantSolver",
    "src.dir": "src/main/java"
  },
  "timeoutSecond": 100,
  "proj": "Math",
  "id": "48",
  "workingDir": "../bugs/Math_48_buggy",
  "buggyCommit": "2af72281fcb919dac92b0c4e464f847adda23be1",
  "inducingCommit": "6a23f66ae368949d1a0764cdcd8aad9668bda0c3",
  "originalCommit": "4d95c18a15bdbc2048953924d7a8dd735202a5ff",
  "bug_name": "Math_48",
  "derive": "defects4j",
  "original_fixing_commit": "13d22f45624470ce5c07c085cf8b1ec0251eaee6",
  "buildFiles_changed": false,
  "regression": true,
  "inducing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java",
        "src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.math.analysis.solvers.IllinoisSolver:getAllowedSolutions:[]:AllowedSolutions",
            "org.apache.commons.math.analysis.solvers.IllinoisSolver:setAllowedSolutions:[final AllowedSolutions allowedSolutions]:void"
          ],
          "num": 2
        },
        {
          "qualified_names": [
            "org.apache.commons.math.analysis.solvers.IllinoisSolver:IllinoisSolver:[final double relativeAccuracy, final double absoluteAccuracy]:null"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "41",
            "66",
            "67",
            "68",
            "69",
            "70",
            "71",
            "72",
            "73",
            "74",
            "75"
          ],
          "num": 11
        },
        {
          "qualified_names": [
            "41",
            "65"
          ],
          "num": 2
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java\nindex 1274896..37c3ab8 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java\n@@ -38,7 +38,7 @@\n  * @since 3.0\n  * @version $Id$\n  */\n-public class IllinoisSolver extends SecantBase implements BracketedSolution {\n+public class IllinoisSolver extends BaseBracketedSecantSolver {\n     /** Construct a solver with default accuracy (1e-6). */\n     public IllinoisSolver() {\n         super(DEFAULT_ABSOLUTE_ACCURACY, Method.ILLINOIS);\n@@ -63,14 +63,4 @@\n                           final double absoluteAccuracy) {\n         super(relativeAccuracy, absoluteAccuracy, Method.ILLINOIS);\n     }\n-\n-    /** {@inheritDoc} */\n-    public AllowedSolutions getAllowedSolutions() {\n-        return allowedSolutions;\n-    }\n-\n-    /** {@inheritDoc} */\n-    public void setAllowedSolutions(final AllowedSolutions allowedSolutions) {\n-        this.allowedSolutions \u003d allowedSolutions;\n-    }\n }\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "SimpleType [1731,1756]"
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [1731,1741]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [1753,1770]",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java",
        "src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.math.analysis.solvers.PegasusSolver:getAllowedSolutions:[]:AllowedSolutions",
            "org.apache.commons.math.analysis.solvers.PegasusSolver:setAllowedSolutions:[final AllowedSolutions allowedSolutions]:void"
          ],
          "num": 2
        },
        {
          "qualified_names": [
            "org.apache.commons.math.analysis.solvers.PegasusSolver:PegasusSolver:[final double relativeAccuracy, final double absoluteAccuracy]:null"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "43",
            "68",
            "69",
            "70",
            "71",
            "72",
            "73",
            "74",
            "75",
            "76",
            "77"
          ],
          "num": 11
        },
        {
          "qualified_names": [
            "43",
            "67"
          ],
          "num": 2
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java\nindex a2f83b7..30e8ad4 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java\n@@ -40,7 +40,7 @@\n  * @since 3.0\n  * @version $Id$\n  */\n-public class PegasusSolver extends SecantBase implements BracketedSolution {\n+public class PegasusSolver extends BaseBracketedSecantSolver {\n     /** Construct a solver with default accuracy (1e-6). */\n     public PegasusSolver() {\n         super(DEFAULT_ABSOLUTE_ACCURACY, Method.PEGASUS);\n@@ -65,14 +65,4 @@\n                          final double absoluteAccuracy) {\n         super(relativeAccuracy, absoluteAccuracy, Method.PEGASUS);\n     }\n-\n-    /** {@inheritDoc} */\n-    public AllowedSolutions getAllowedSolutions() {\n-        return allowedSolutions;\n-    }\n-\n-    /** {@inheritDoc} */\n-    public void setAllowedSolutions(final AllowedSolutions allowedSolutions) {\n-        this.allowedSolutions \u003d allowedSolutions;\n-    }\n }\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "SimpleType [1864,1889]"
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [1864,1874]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [1886,1903]",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolver.java",
        "src/main/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolver.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.math.analysis.solvers.RegulaFalsiSolver:setAllowedSolutions:[final AllowedSolutions allowedSolutions]:void",
            "org.apache.commons.math.analysis.solvers.RegulaFalsiSolver:getAllowedSolutions:[]:AllowedSolutions"
          ],
          "num": 2
        },
        {
          "qualified_names": [
            "org.apache.commons.math.analysis.solvers.RegulaFalsiSolver:RegulaFalsiSolver:[final double relativeAccuracy, final double absoluteAccuracy]:null"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "38",
            "63",
            "64",
            "65",
            "66",
            "67",
            "68",
            "69",
            "70",
            "71",
            "72"
          ],
          "num": 11
        },
        {
          "qualified_names": [
            "38",
            "62"
          ],
          "num": 2
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolver.java\nindex 2b310f1..949e3e9 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolver.java\n@@ -35,7 +35,7 @@\n  * @since 3.0\n  * @version $Id$\n  */\n-public class RegulaFalsiSolver extends SecantBase implements BracketedSolution {\n+public class RegulaFalsiSolver extends BaseBracketedSecantSolver {\n     /** Construct a solver with default accuracy (1e-6). */\n     public RegulaFalsiSolver() {\n         super(DEFAULT_ABSOLUTE_ACCURACY, Method.REGULA_FALSI);\n@@ -60,14 +60,4 @@\n                              final double absoluteAccuracy) {\n         super(relativeAccuracy, absoluteAccuracy, Method.REGULA_FALSI);\n     }\n-\n-    /** {@inheritDoc} */\n-    public AllowedSolutions getAllowedSolutions() {\n-        return allowedSolutions;\n-    }\n-\n-    /** {@inheritDoc} */\n-    public void setAllowedSolutions(final AllowedSolutions allowedSolutions) {\n-        this.allowedSolutions \u003d allowedSolutions;\n-    }\n }\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "SimpleType [1650,1675]"
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [1650,1660]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [1672,1689]",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java",
        "src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [],
          "num": 0
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "39"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "39"
          ],
          "num": 1
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java\nindex 0d50c94..52ae77e 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java\n@@ -36,7 +36,7 @@\n  *\n  * @version $Id$\n  */\n-public class SecantSolver extends SecantBase {\n+public class SecantSolver extends BaseSecantSolver {\n     /** Construct a solver with default accuracy (1e-6). */\n     public SecantSolver() {\n         super(DEFAULT_ABSOLUTE_ACCURACY, Method.SECANT);\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "SimpleType [1767,1783]"
        },
        {
          "type": "delete-tree",
          "from": "SimpleType [1767,1777]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java",
        "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [
            "org.apache.commons.math.analysis.solvers.BaseSecantSolver:BaseSecantSolver:[final double relativeAccuracy, final double absoluteAccuracy, final Method method]:null",
            "org.apache.commons.math.analysis.solvers.BaseSecantSolver:doSolve:[]:double",
            "org.apache.commons.math.analysis.solvers.BaseSecantSolver:BaseSecantSolver:[final double absoluteAccuracy, final Method method]:null"
          ],
          "num": 3
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "-1"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "35",
            "36",
            "37",
            "38",
            "39",
            "40",
            "41",
            "42",
            "43",
            "44",
            "45",
            "46",
            "47",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57",
            "58",
            "59",
            "60",
            "61",
            "62",
            "63",
            "64",
            "65",
            "66",
            "67",
            "68",
            "69",
            "70",
            "71",
            "72",
            "73",
            "74",
            "75",
            "76",
            "77",
            "78",
            "79",
            "80",
            "81",
            "82",
            "83",
            "84",
            "85",
            "86",
            "87",
            "88",
            "89",
            "90",
            "91",
            "92",
            "93",
            "94",
            "95",
            "96",
            "97",
            "98",
            "99",
            "100",
            "101",
            "102",
            "103",
            "104",
            "105",
            "106",
            "107",
            "108",
            "109",
            "110",
            "111",
            "112",
            "113",
            "114",
            "115",
            "116",
            "117",
            "118",
            "119",
            "120",
            "121",
            "122",
            "123",
            "124",
            "125",
            "126",
            "127",
            "128",
            "129",
            "130",
            "131",
            "132",
            "133",
            "134",
            "135",
            "136",
            "137",
            "138",
            "139",
            "140",
            "141",
            "142",
            "143",
            "144",
            "145",
            "146",
            "147",
            "148",
            "149",
            "150",
            "151",
            "152",
            "153",
            "154",
            "155",
            "156",
            "157",
            "158",
            "159",
            "160",
            "161",
            "162",
            "163",
            "164",
            "165",
            "166",
            "167",
            "168",
            "169",
            "170",
            "171",
            "172",
            "173",
            "174",
            "175",
            "176",
            "177",
            "178",
            "179",
            "180",
            "181",
            "182",
            "183",
            "184",
            "185",
            "186",
            "187",
            "188",
            "189",
            "190",
            "191",
            "192",
            "193",
            "194",
            "195",
            "196",
            "197",
            "198",
            "199",
            "200"
          ],
          "num": 200
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\nnew file mode 100644\nindex 0000000..4764a57\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n@@ -0,0 +1,200 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.math.analysis.solvers;\n+\n+import org.apache.commons.math.util.FastMath;\n+import org.apache.commons.math.exception.MathInternalError;\n+\n+/**\n+ * Base class for all \u003cem\u003eSecant\u003c/em\u003e-based methods for root-finding\n+ * (approximating a zero of a univariate real function).\n+ *\n+ * \u003cp\u003eImplementation of the {@link SecantSolver \u003cem\u003eSecant\u003c/em\u003e},\n+ * {@link RegulaFalsiSolver \u003cem\u003eRegula Falsi\u003c/em\u003e}, and\n+ * {@link IllinoisSolver \u003cem\u003eIllinois\u003c/em\u003e} methods is based on the\n+ * following article: M. Dowell and P. Jarratt,\n+ * \u003cem\u003eA modified regula falsi method for computing the root of an\n+ * equation\u003c/em\u003e, BIT Numerical Mathematics, volume 11, number 2,\n+ * pages 168-174, Springer, 1971.\u003c/p\u003e\n+ *\n+ * \u003cp\u003eImplementation of the {@link PegasusSolver \u003cem\u003ePegasus\u003c/em\u003e} method is\n+ * based on the following article: M. Dowell and P. Jarratt,\n+ * \u003cem\u003eThe \"Pegasus\" method for computing the root of an equation\u003c/em\u003e,\n+ * BIT Numerical Mathematics, volume 12, number 4, pages 503-508, Springer,\n+ * 1972.\u003c/p\u003e\n+ *\n+ * @since 3.0\n+ * @version $Id$\n+ */\n+public abstract class BaseSecantSolver extends AbstractUnivariateRealSolver {\n+    /** Default absolute accuracy. */\n+    protected static final double DEFAULT_ABSOLUTE_ACCURACY \u003d 1e-6;\n+    /** The kinds of solutions that the algorithm may accept. */\n+    protected AllowedSolutions allowedSolutions \u003d AllowedSolutions.EITHER_SIDE;\n+    /** The \u003cem\u003eSecant\u003c/em\u003e-based root-finding method to use. */\n+    private final Method method;\n+\n+    /**\n+     * Construct a solver.\n+     *\n+     * @param absoluteAccuracy absolute accuracy\n+     * @param method \u003cem\u003eSecant\u003c/em\u003e-based root-finding method to use\n+     */\n+    protected BaseSecantSolver(final double absoluteAccuracy, final Method method) {\n+        super(absoluteAccuracy);\n+        this.method \u003d method;\n+    }\n+\n+    /**\n+     * Construct a solver.\n+     *\n+     * @param relativeAccuracy relative accuracy\n+     * @param absoluteAccuracy absolute accuracy\n+     * @param method \u003cem\u003eSecant\u003c/em\u003e-based root-finding method to use\n+     */\n+    protected BaseSecantSolver(final double relativeAccuracy,\n+                               final double absoluteAccuracy,\n+                               final Method method) {\n+        super(relativeAccuracy, absoluteAccuracy);\n+        this.method \u003d method;\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override\n+    protected final double doSolve() {\n+        // Get initial solution\n+        double x0 \u003d getMin();\n+        double x1 \u003d getMax();\n+        double f0 \u003d computeObjectiveValue(x0);\n+        double f1 \u003d computeObjectiveValue(x1);\n+\n+        // If one of the bounds is the exact root, return it. Since these are\n+        // not under-approximations or over-approximations, we can return them\n+        // regardless of the allowed solutions.\n+        if (f0 \u003d\u003d 0.0) return x0;\n+        if (f1 \u003d\u003d 0.0) return x1;\n+\n+        // Verify bracketing of initial solution.\n+        verifyBracketing(x0, x1);\n+\n+        // Get accuracies.\n+        final double ftol \u003d getFunctionValueAccuracy();\n+        final double atol \u003d getAbsoluteAccuracy();\n+        final double rtol \u003d getRelativeAccuracy();\n+\n+        // Variables to hold new bounds.\n+        double x;\n+        double fx;\n+\n+        // Keep track of inverted intervals, meaning that the left bound is\n+        // larger than the right bound. Not used for the original Secant\n+        // method.\n+        boolean inverted \u003d false;\n+\n+        // Keep finding better approximations.\n+        while (true) {\n+            // Calculate the next approximation.\n+            x \u003d x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n+            fx \u003d computeObjectiveValue(x);\n+\n+            // If the new approximation is the exact root, return it. Since\n+            // this is not an under-approximation or an over-approximation,\n+            // we can return it regardless of the allowed solutions.\n+            if (fx \u003d\u003d 0.0) return x;\n+\n+            // Update the bounds with the new approximation.\n+            if (method \u003d\u003d Method.SECANT) {\n+                x0 \u003d x1;\n+                f0 \u003d f1;\n+                x1 \u003d x;\n+                f1 \u003d fx;\n+            } else if (f1 * fx \u003c 0) {\n+                // We had [x0..x1]. We update it to [x1, x]. Note that the\n+                // value of x1 has switched to the other bound, thus inverting\n+                // the interval.\n+                x0 \u003d x1;\n+                f0 \u003d f1;\n+                x1 \u003d x;\n+                f1 \u003d fx;\n+                inverted \u003d !inverted;\n+            } else {\n+                // We had [x0..x1]. We update it to [x0, x].\n+                if (method \u003d\u003d Method.ILLINOIS) f0 *\u003d 0.5;\n+                if (method \u003d\u003d Method.PEGASUS) f0 *\u003d f1 / (f1 + fx);\n+                x1 \u003d x;\n+                f1 \u003d fx;\n+            }\n+\n+            // If the function value of the last approximation is too small,\n+            // given the function value accuracy, then we can\u0027t get close to\n+            // the root than we already are.\n+            if (FastMath.abs(f1) \u003c\u003d ftol) {\n+                switch (allowedSolutions) {\n+                case EITHER_SIDE:\n+                    return x1;\n+                case LEFT_SIDE:\n+                    if (inverted) {\n+                        return x1;\n+                    }\n+                    break;\n+                case RIGHT_SIDE:\n+                    if (!inverted) {\n+                        return x1;\n+                    }\n+                    break;\n+                default:\n+                    throw new MathInternalError();\n+                }\n+            }\n+\n+            // If the current interval is within the given accuracies, we\n+            // are satisfied with the current approximation.\n+            if (FastMath.abs(x1 - x0) \u003c FastMath.max(rtol * FastMath.abs(x1),\n+                                                     atol)) {\n+                switch (allowedSolutions) {\n+                case EITHER_SIDE:\n+                    return x1;\n+                case LEFT_SIDE:\n+                    return inverted ? x1 : x0;\n+                case RIGHT_SIDE:\n+                    return inverted ? x0 : x1;\n+                default:\n+                    throw new MathInternalError();\n+                }\n+            }\n+        }\n+    }\n+\n+    /** \u003cem\u003eSecant\u003c/em\u003e-based root-finding methods. */\n+    protected enum Method {\n+        /** The original {@link SecantSolver \u003cem\u003eSecant\u003c/em\u003e} method. */\n+        SECANT,\n+\n+        /**\n+         * The {@link RegulaFalsiSolver \u003cem\u003eRegula Falsi\u003c/em\u003e} or\n+         * \u003cem\u003eFalse Position\u003c/em\u003e method.\n+         */\n+        REGULA_FALSI,\n+\n+        /** The {@link IllinoisSolver \u003cem\u003eIllinois\u003c/em\u003e} method. */\n+        ILLINOIS,\n+\n+        /** The {@link PegasusSolver \u003cem\u003ePegasus\u003c/em\u003e} method. */\n+        PEGASUS,\n+    }\n+}\n",
      "operations": [
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        }
      ]
    }
  ],
  "inducing_type": {
    "add_classes": {
      "qualified_names": [
        "src/main/java/org/apache/commons/math/analysis/solvers/BaseBracketedSecantSolver.java",
        "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java"
      ],
      "num": 2
    },
    "delete_classes": {
      "qualified_names": [
        "src/main/java/org/apache/commons/math/analysis/solvers/SecantBase.java"
      ],
      "num": 1
    },
    "add_functions": {
      "qualified_names": [
        "org.apache.commons.math.analysis.solvers.IllinoisSolver:IllinoisSolver:[final double relativeAccuracy, final double absoluteAccuracy]:null",
        "org.apache.commons.math.analysis.solvers.BaseSecantSolver:BaseSecantSolver:[final double absoluteAccuracy, final Method method]:null",
        "org.apache.commons.math.analysis.solvers.PegasusSolver:PegasusSolver:[final double relativeAccuracy, final double absoluteAccuracy]:null",
        "org.apache.commons.math.analysis.solvers.BaseSecantSolver:doSolve:[]:double",
        "org.apache.commons.math.analysis.solvers.BaseSecantSolver:BaseSecantSolver:[final double relativeAccuracy, final double absoluteAccuracy, final Method method]:null",
        "org.apache.commons.math.analysis.solvers.RegulaFalsiSolver:RegulaFalsiSolver:[final double relativeAccuracy, final double absoluteAccuracy]:null"
      ],
      "num": 6
    },
    "delete_functions": {
      "qualified_names": [
        "org.apache.commons.math.analysis.solvers.IllinoisSolver:getAllowedSolutions:[]:AllowedSolutions",
        "org.apache.commons.math.analysis.solvers.IllinoisSolver:setAllowedSolutions:[final AllowedSolutions allowedSolutions]:void",
        "org.apache.commons.math.analysis.solvers.PegasusSolver:getAllowedSolutions:[]:AllowedSolutions",
        "org.apache.commons.math.analysis.solvers.PegasusSolver:setAllowedSolutions:[final AllowedSolutions allowedSolutions]:void",
        "org.apache.commons.math.analysis.solvers.RegulaFalsiSolver:setAllowedSolutions:[final AllowedSolutions allowedSolutions]:void",
        "org.apache.commons.math.analysis.solvers.RegulaFalsiSolver:getAllowedSolutions:[]:AllowedSolutions"
      ],
      "num": 6
    }
  },
  "trigger_tests": [
    {
      "test_class": "org.apache.commons.math.analysis.solvers.RegulaFalsiSolverTest",
      "test_function": "testIssue631",
      "assertion_line": "54",
      "exception": "java.lang.Exception",
      "message": "Unexpected exception, expected\u003corg.apache.commons.math.exception.ConvergenceException\u003e but was\u003corg.apache.commons.math.exception.TooManyEvaluationsException\u003e"
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java",
        "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.math.analysis.solvers.BaseSecantSolver:doSolve:[]:double",
            "org.apache.commons.math.analysis.solvers.BaseSecantSolver:BaseSecantSolver:[final double relativeAccuracy, final double absoluteAccuracy, final Method method]:null",
            "org.apache.commons.math.analysis.solvers.BaseSecantSolver:BaseSecantSolver:[final double absoluteAccuracy, final Method method]:null"
          ],
          "num": 3
        },
        {
          "qualified_names": [
            "org.apache.commons.math.analysis.solvers.BaseSecantSolver:doSolve:[]:double",
            "org.apache.commons.math.analysis.solvers.BaseSecantSolver:BaseSecantSolver:[final double relativeAccuracy, final double absoluteAccuracy, final Method method]:null",
            "org.apache.commons.math.analysis.solvers.BaseSecantSolver:BaseSecantSolver:[final double absoluteAccuracy, final Method method]:null"
          ],
          "num": 3
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "21",
            "64",
            "65",
            "76",
            "77",
            "78",
            "186"
          ],
          "num": 7
        },
        {
          "qualified_names": [
            "22",
            "65",
            "66",
            "77",
            "78",
            "79",
            "187",
            "188",
            "189",
            "190",
            "191"
          ],
          "num": 11
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\nindex c781a90..0347525 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n@@ -19,6 +19,7 @@\n \n import org.apache.commons.math.util.FastMath;\n import org.apache.commons.math.analysis.UnivariateRealFunction;\n+import org.apache.commons.math.exception.ConvergenceException;\n import org.apache.commons.math.exception.MathInternalError;\n \n /**\n@@ -61,8 +62,8 @@\n     /**\n      * Construct a solver.\n      *\n-     * @param absoluteAccuracy absolute accuracy\n-     * @param method \u003cem\u003eSecant\u003c/em\u003e-based root-finding method to use\n+     * @param absoluteAccuracy Absolute accuracy.\n+     * @param method \u003cem\u003eSecant\u003c/em\u003e-based root-finding method to use.\n      */\n     protected BaseSecantSolver(final double absoluteAccuracy, final Method method) {\n         super(absoluteAccuracy);\n@@ -73,9 +74,9 @@\n     /**\n      * Construct a solver.\n      *\n-     * @param relativeAccuracy relative accuracy\n-     * @param absoluteAccuracy absolute accuracy\n-     * @param method \u003cem\u003eSecant\u003c/em\u003e-based root-finding method to use\n+     * @param relativeAccuracy Relative accuracy.\n+     * @param absoluteAccuracy Absolute accuracy.\n+     * @param method \u003cem\u003eSecant\u003c/em\u003e-based root-finding method to use.\n      */\n     protected BaseSecantSolver(final double relativeAccuracy,\n                                final double absoluteAccuracy,\n@@ -183,7 +184,11 @@\n                     f0 *\u003d f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n+                    // Detect early that algorithm is stuck, instead of waiting\n+                    // for the maximum number of iterations to be exceeded.\n+                    if (x \u003d\u003d x1) {\n+                        throw new ConvergenceException();\n+                    }\n                     break;\n                 default:\n                     // Should never happen.\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "ImportDeclaration [965,1027]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [7427,7521]"
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java",
        "src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.math.analysis.solvers.IllinoisSolver:IllinoisSolver:[final double absoluteAccuracy]:null",
            "org.apache.commons.math.analysis.solvers.IllinoisSolver:IllinoisSolver:[final double relativeAccuracy, final double absoluteAccuracy]:null",
            "org.apache.commons.math.analysis.solvers.IllinoisSolver:IllinoisSolver:[final double relativeAccuracy, final double absoluteAccuracy, final double functionValueAccuracy]:null"
          ],
          "num": 3
        },
        {
          "qualified_names": [
            "org.apache.commons.math.analysis.solvers.IllinoisSolver:IllinoisSolver:[final double absoluteAccuracy]:null",
            "org.apache.commons.math.analysis.solvers.IllinoisSolver:IllinoisSolver:[final double relativeAccuracy, final double absoluteAccuracy]:null",
            "org.apache.commons.math.analysis.solvers.IllinoisSolver:IllinoisSolver:[final double relativeAccuracy, final double absoluteAccuracy, final double functionValueAccuracy]:null"
          ],
          "num": 3
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "29",
            "52",
            "61",
            "62",
            "72",
            "73",
            "81"
          ],
          "num": 7
        },
        {
          "qualified_names": [
            "29",
            "30",
            "31",
            "54",
            "63",
            "64",
            "74",
            "75",
            "78"
          ],
          "num": 9
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java\nindex ede0c27..47c340c 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java\n@@ -26,7 +26,9 @@\n  * \u003cp\u003eLike the \u003cem\u003eRegula Falsi\u003c/em\u003e method, convergence is guaranteed by\n  * maintaining a bracketed solution. The \u003cem\u003eIllinois\u003c/em\u003e method however,\n  * should converge much faster than the original \u003cem\u003eRegula Falsi\u003c/em\u003e\n- * method.\u003c/p\u003e\n+ * method. Furthermore, this implementation of the \u003cem\u003eIllinois\u003c/em\u003e method\n+ * should not suffer from the same implementation issues as the \u003cem\u003eRegula\n+ * Falsi\u003c/em\u003e method, which may fail to convergence in certain cases.\u003c/p\u003e\n  *\n  * \u003cp\u003eThe \u003cem\u003eIllinois\u003c/em\u003e method assumes that the function is continuous,\n  * but not necessarily smooth.\u003c/p\u003e\n@@ -49,7 +51,7 @@\n     /**\n      * Construct a solver.\n      *\n-     * @param absoluteAccuracy absolute accuracy\n+     * @param absoluteAccuracy Absolute accuracy.\n      */\n     public IllinoisSolver(final double absoluteAccuracy) {\n         super(absoluteAccuracy, Method.ILLINOIS);\n@@ -58,8 +60,8 @@\n     /**\n      * Construct a solver.\n      *\n-     * @param relativeAccuracy relative accuracy\n-     * @param absoluteAccuracy absolute accuracy\n+     * @param relativeAccuracy Relative accuracy.\n+     * @param absoluteAccuracy Absolute accuracy.\n      */\n     public IllinoisSolver(final double relativeAccuracy,\n                           final double absoluteAccuracy) {\n@@ -69,8 +71,8 @@\n     /**\n      * Construct a solver.\n      *\n-     * @param relativeAccuracy relative accuracy\n-     * @param absoluteAccuracy absolute accuracy\n+     * @param relativeAccuracy Relative accuracy.\n+     * @param absoluteAccuracy Absolute accuracy.\n      * @param functionValueAccuracy Maximum function value error.\n      */\n     public IllinoisSolver(final double relativeAccuracy,\n@@ -78,5 +80,4 @@\n                           final double functionValueAccuracy) {\n         super(relativeAccuracy, absoluteAccuracy, functionValueAccuracy, Method.PEGASUS);\n     }\n-\n }\n",
      "operations": [
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: should not suffer from the same implementation issues as the \u003cem\u003eRegula [1355,1426]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: Falsi\u003c/em\u003e method, which may fail to convergence in certain cases.\u003c/p\u003e [1430,1500]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java",
        "src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.math.analysis.solvers.PegasusSolver:PegasusSolver:[final double relativeAccuracy, final double absoluteAccuracy]:null",
            "org.apache.commons.math.analysis.solvers.PegasusSolver:PegasusSolver:[final double absoluteAccuracy]:null",
            "org.apache.commons.math.analysis.solvers.PegasusSolver:PegasusSolver:[final double relativeAccuracy, final double absoluteAccuracy, final double functionValueAccuracy]:null"
          ],
          "num": 3
        },
        {
          "qualified_names": [
            "org.apache.commons.math.analysis.solvers.PegasusSolver:PegasusSolver:[final double relativeAccuracy, final double absoluteAccuracy]:null",
            "org.apache.commons.math.analysis.solvers.PegasusSolver:PegasusSolver:[final double absoluteAccuracy]:null",
            "org.apache.commons.math.analysis.solvers.PegasusSolver:PegasusSolver:[final double relativeAccuracy, final double absoluteAccuracy, final double functionValueAccuracy]:null"
          ],
          "num": 3
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "27",
            "28",
            "29",
            "30",
            "53",
            "62",
            "63",
            "73",
            "74",
            "82"
          ],
          "num": 10
        },
        {
          "qualified_names": [
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "56",
            "65",
            "66",
            "76",
            "77",
            "78"
          ],
          "num": 13
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java\nindex 08fb0c7..457c958 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java\n@@ -24,10 +24,13 @@\n  *\n  * \u003cp\u003eLike the \u003cem\u003eRegula Falsi\u003c/em\u003e method, convergence is guaranteed by\n  * maintaining a bracketed solution. The \u003cem\u003ePegasus\u003c/em\u003e method however,\n- * should converge much faster than the original \u003cem\u003eRegula Falsi\u003c/em\u003e method.\n- * Furthermore, it should converge faster than the\n- * {@link IllinoisSolver \u003cem\u003eIllinois\u003c/em\u003e} method, another\n- * \u003cem\u003eRegula Falsi\u003c/em\u003e-based method.\u003c/p\u003e\n+ * should converge much faster than the original \u003cem\u003eRegula Falsi\u003c/em\u003e\n+ * method. Furthermore, this implementation of the \u003cem\u003ePegasus\u003c/em\u003e method\n+ * should not suffer from the same implementation issues as the \u003cem\u003eRegula\n+ * Falsi\u003c/em\u003e method, which may fail to convergence in certain cases. Also,\n+ * the \u003cem\u003ePegasus\u003c/em\u003e method should converge faster than the\n+ * {@link IllinoisSolver \u003cem\u003eIllinois\u003c/em\u003e} method, another \u003cem\u003eRegula\n+ * Falsi\u003c/em\u003e-based method.\u003c/p\u003e\n  *\n  * \u003cp\u003eThe \u003cem\u003ePegasus\u003c/em\u003e method assumes that the function is continuous,\n  * but not necessarily smooth.\u003c/p\u003e\n@@ -50,7 +53,7 @@\n     /**\n      * Construct a solver.\n      *\n-     * @param absoluteAccuracy absolute accuracy\n+     * @param absoluteAccuracy Absolute accuracy.\n      */\n     public PegasusSolver(final double absoluteAccuracy) {\n         super(absoluteAccuracy, Method.PEGASUS);\n@@ -59,8 +62,8 @@\n     /**\n      * Construct a solver.\n      *\n-     * @param relativeAccuracy relative accuracy\n-     * @param absoluteAccuracy absolute accuracy\n+     * @param relativeAccuracy Relative accuracy.\n+     * @param absoluteAccuracy Absolute accuracy.\n      */\n     public PegasusSolver(final double relativeAccuracy,\n                          final double absoluteAccuracy) {\n@@ -70,8 +73,8 @@\n     /**\n      * Construct a solver.\n      *\n-     * @param relativeAccuracy relative accuracy\n-     * @param absoluteAccuracy absolute accuracy\n+     * @param relativeAccuracy Relative accuracy.\n+     * @param absoluteAccuracy Absolute accuracy.\n      * @param functionValueAccuracy Maximum function value error.\n      */\n     public PegasusSolver(final double relativeAccuracy,\n@@ -79,5 +82,4 @@\n                          final double functionValueAccuracy) {\n         super(relativeAccuracy, absoluteAccuracy, functionValueAccuracy, Method.PEGASUS);\n     }\n-\n }\n",
      "operations": [
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: the \u003cem\u003ePegasus\u003c/em\u003e method should converge faster than the [1502,1561]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement:  method, another \u003cem\u003eRegula [1605,1632]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: Falsi\u003c/em\u003e-based method.\u003c/p\u003e [1636,1664]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolver.java",
        "src/main/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolver.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.math.analysis.solvers.RegulaFalsiSolver:RegulaFalsiSolver:[final double relativeAccuracy, final double absoluteAccuracy]:null",
            "org.apache.commons.math.analysis.solvers.RegulaFalsiSolver:RegulaFalsiSolver:[final double absoluteAccuracy]:null",
            "org.apache.commons.math.analysis.solvers.RegulaFalsiSolver:RegulaFalsiSolver:[final double relativeAccuracy, final double absoluteAccuracy, final double functionValueAccuracy]:null"
          ],
          "num": 3
        },
        {
          "qualified_names": [
            "org.apache.commons.math.analysis.solvers.RegulaFalsiSolver:RegulaFalsiSolver:[final double absoluteAccuracy]:null",
            "org.apache.commons.math.analysis.solvers.RegulaFalsiSolver:RegulaFalsiSolver:[final double relativeAccuracy, final double absoluteAccuracy, final double functionValueAccuracy]:null",
            "org.apache.commons.math.analysis.solvers.RegulaFalsiSolver:RegulaFalsiSolver:[final double relativeAccuracy, final double absoluteAccuracy]:null"
          ],
          "num": 3
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "20",
            "24",
            "25",
            "26",
            "49",
            "58",
            "59",
            "69",
            "70"
          ],
          "num": 9
        },
        {
          "qualified_names": [
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "35",
            "36",
            "37",
            "38",
            "39",
            "40",
            "41",
            "42",
            "43",
            "66",
            "75",
            "76",
            "86",
            "87"
          ],
          "num": 26
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolver.java\nindex 89c50df..71224a0 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolver.java\n@@ -17,13 +17,30 @@\n \n package org.apache.commons.math.analysis.solvers;\n \n-\n /**\n  * Implements the \u003cem\u003eRegula Falsi\u003c/em\u003e or \u003cem\u003eFalse position\u003c/em\u003e method for\n  * root-finding (approximating a zero of a univariate real function). It is a\n- * modified {@link SecantSolver \u003cem\u003eSecant\u003c/em\u003e} method. Unlike the\n- * \u003cem\u003eSecant\u003c/em\u003e method, convergence is guaranteed by maintaining a\n- * bracketed solution.\n+ * modified {@link SecantSolver \u003cem\u003eSecant\u003c/em\u003e} method.\n+ *\n+ * \u003cp\u003eThe \u003cem\u003eRegula Falsi\u003c/em\u003e method is included for completeness, for\n+ * testing purposes, for educational purposes, for comparison to other\n+ * algorithms, etc. It is however \u003cstrong\u003enot\u003c/strong\u003e intended to be used\n+ * for actual problems, as one of the bounds often remains fixed, resulting\n+ * in very slow convergence. Instead, one of the well-known modified\n+ * \u003cem\u003eRegula Falsi\u003c/em\u003e algorithms can be used ({@link IllinoisSolver\n+ * \u003cem\u003eIllinois\u003c/em\u003e} or {@link PegasusSolver \u003cem\u003ePegasus\u003c/em\u003e}). These two\n+ * algorithms solve the fundamental issues of the original \u003cem\u003eRegula\n+ * Falsi\u003c/em\u003e algorithm, and greatly out-performs it for most, if not all,\n+ * (practical) functions.\n+ *\n+ * \u003cp\u003eUnlike the \u003cem\u003eSecant\u003c/em\u003e method, the \u003cem\u003eRegula Falsi\u003c/em\u003e guarantees\n+ * convergence, by maintaining a bracketed solution. Note however, that due to\n+ * the finite/limited precision of Java\u0027s {@link Double double} type, which is\n+ * used in this implementation, the algorithm may get stuck in a situation\n+ * where it no longer makes any progress. Such cases are detected and result\n+ * in a {@code ConvergenceException} exception being thrown. In other words,\n+ * the algorithm theoretically guarantees convergence, but the implementation\n+ * does not.\u003c/p\u003e\n  *\n  * \u003cp\u003eThe \u003cem\u003eRegula Falsi\u003c/em\u003e method assumes that the function is continuous,\n  * but not necessarily smooth.\u003c/p\u003e\n@@ -46,7 +63,7 @@\n     /**\n      * Construct a solver.\n      *\n-     * @param absoluteAccuracy absolute accuracy\n+     * @param absoluteAccuracy Absolute accuracy.\n      */\n     public RegulaFalsiSolver(final double absoluteAccuracy) {\n         super(absoluteAccuracy, Method.REGULA_FALSI);\n@@ -55,8 +72,8 @@\n     /**\n      * Construct a solver.\n      *\n-     * @param relativeAccuracy relative accuracy\n-     * @param absoluteAccuracy absolute accuracy\n+     * @param relativeAccuracy Relative accuracy.\n+     * @param absoluteAccuracy Absolute accuracy.\n      */\n     public RegulaFalsiSolver(final double relativeAccuracy,\n                              final double absoluteAccuracy) {\n@@ -66,8 +83,8 @@\n     /**\n      * Construct a solver.\n      *\n-     * @param relativeAccuracy relative accuracy\n-     * @param absoluteAccuracy absolute accuracy\n+     * @param relativeAccuracy Relative accuracy.\n+     * @param absoluteAccuracy Absolute accuracy.\n      * @param functionValueAccuracy Maximum function value error.\n      */\n     public RegulaFalsiSolver(final double relativeAccuracy,\n",
      "operations": [
        {
          "type": "insert-node",
          "from": "",
          "to": "Javadoc [855,2728]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TagElement [862,2690]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement:  method. [1063,1071]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003cp\u003eThe \u003cem\u003eRegula Falsi\u003c/em\u003e method is included for completeness, for [1078,1147]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: testing purposes, for educational purposes, for comparison to other [1151,1218]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: algorithms, etc. It is however \u003cstrong\u003enot\u003c/strong\u003e intended to be used [1222,1293]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: for actual problems, as one of the bounds often remains fixed, resulting [1297,1369]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: in very slow convergence. Instead, one of the well-known modified [1373,1438]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003cem\u003eRegula Falsi\u003c/em\u003e algorithms can be used ( [1442,1488]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [1488,1531]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement:  or  [1531,1535]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [1535,1573]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: ). These two [1573,1585]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: algorithms solve the fundamental issues of the original \u003cem\u003eRegula [1589,1655]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: Falsi\u003c/em\u003e algorithm, and greatly out-performs it for most, if not all, [1659,1730]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: (practical) functions. [1734,1756]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003cp\u003eUnlike the \u003cem\u003eSecant\u003c/em\u003e method, the \u003cem\u003eRegula Falsi\u003c/em\u003e guarantees [1763,1837]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: convergence, by maintaining a bracketed solution. Note however, that due to [1841,1916]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: the finite/limited precision of Java\u0027s  [1920,1959]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [1959,1980]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement:  type, which is [1980,1995]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: used in this implementation, the algorithm may get stuck in a situation [1999,2070]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: where it no longer makes any progress. Such cases are detected and result [2074,2147]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: in a  [2151,2156]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [2156,2184]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement:  exception being thrown. In other words, [2184,2224]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: the algorithm theoretically guarantees convergence, but the implementation [2228,2302]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: does not.\u003c/p\u003e [2306,2319]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement:  method. Unlike the [1064,1083]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: \u003cem\u003eSecant\u003c/em\u003e method, convergence is guaranteed by maintaining a [1087,1153]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: bracketed solution. [1157,1176]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TagElement [863,1547]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Javadoc [856,1585]",
          "to": ""
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  },
  "patch_changed_mths": {
    "qualified_names": [
      "org.apache.commons.math.analysis.solvers.BaseSecantSolver:doSolve()D"
    ],
    "num": 1
  }
}