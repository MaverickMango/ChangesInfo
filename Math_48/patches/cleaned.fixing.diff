diff -u -r data/changesInfo//Math_48/properties/modified_classes/inducing/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java data/changesInfo//Math_48/cleaned/fixing/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java
--- data/changesInfo//Math_48/properties/modified_classes/inducing/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	2023-12-27 22:47:26.641080561 -0800
+++ data/changesInfo//Math_48/cleaned/fixing/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	2023-07-25 08:10:08.918583162 -0700
@@ -18,14 +18,15 @@
 package org.apache.commons.math.analysis.solvers;
 
 import org.apache.commons.math.util.FastMath;
+import org.apache.commons.math.analysis.UnivariateRealFunction;
 import org.apache.commons.math.exception.MathInternalError;
+import org.apache.commons.math.exception.ConvergenceException;
 
 /**
- * Base class for all <em>Secant</em>-based methods for root-finding
+ * Base class for all bracketing <em>Secant</em>-based methods for root-finding
  * (approximating a zero of a univariate real function).
  *
- * <p>Implementation of the {@link SecantSolver <em>Secant</em>},
- * {@link RegulaFalsiSolver <em>Regula Falsi</em>}, and
+ * <p>Implementation of the {@link RegulaFalsiSolver <em>Regula Falsi</em>} and
  * {@link IllinoisSolver <em>Illinois</em>} methods is based on the
  * following article: M. Dowell and P. Jarratt,
  * <em>A modified regula falsi method for computing the root of an
@@ -38,14 +39,23 @@
  * BIT Numerical Mathematics, volume 12, number 4, pages 503-508, Springer,
  * 1972.</p>
  *
+ * <p>The {@link SecantSolver <em>Secant</em>} method is <em>not</em> a
+ * bracketing method, so it is not implemented here. It has a separate
+ * implementation.</p>
+ *
  * @since 3.0
  * @version $Id$
  */
-public abstract class BaseSecantSolver extends AbstractUnivariateRealSolver {
+public abstract class BaseSecantSolver
+    extends AbstractUnivariateRealSolver
+    implements BracketedUnivariateRealSolver<UnivariateRealFunction> {
+
     /** Default absolute accuracy. */
     protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;
+
     /** The kinds of solutions that the algorithm may accept. */
-    protected AllowedSolutions allowedSolutions = AllowedSolutions.EITHER_SIDE;
+    private AllowedSolution allowed;
+
     /** The <em>Secant</em>-based root-finding method to use. */
     private final Method method;
 
@@ -57,6 +67,7 @@
      */
     protected BaseSecantSolver(final double absoluteAccuracy, final Method method) {
         super(absoluteAccuracy);
+        this.allowed = AllowedSolution.ANY_SIDE;
         this.method = method;
     }
 
@@ -71,11 +82,50 @@
                                final double absoluteAccuracy,
                                final Method method) {
         super(relativeAccuracy, absoluteAccuracy);
+        this.allowed = AllowedSolution.ANY_SIDE;
+        this.method = method;
+    }
+
+    /**
+     * Construct a solver.
+     *
+     * @param relativeAccuracy Maximum relative error.
+     * @param absoluteAccuracy Maximum absolute error.
+     * @param functionValueAccuracy Maximum function value error.
+     * @param method <em>Secant</em>-based root-finding method to use
+     */
+    protected BaseSecantSolver(final double relativeAccuracy,
+                               final double absoluteAccuracy,
+                               final double functionValueAccuracy,
+                               final Method method) {
+        super(relativeAccuracy, absoluteAccuracy, functionValueAccuracy);
+        this.allowed = AllowedSolution.ANY_SIDE;
         this.method = method;
     }
 
     /** {@inheritDoc} */
+    public double solve(final int maxEval, final UnivariateRealFunction f,
+                        final double min, final double max,
+                        final AllowedSolution allowedSolution) {
+        return solve(maxEval, f, min, max, min + 0.5 * (max - min), allowedSolution);
+    }
+
+    /** {@inheritDoc} */
+    public double solve(final int maxEval, final UnivariateRealFunction f,
+                        final double min, final double max, final double startValue,
+                        final AllowedSolution allowedSolution) {
+        this.allowed = allowedSolution;
+        return super.solve(maxEval, f, min, max, startValue);
+    }
+
+    /** {@inheritDoc} */
     @Override
+    public double solve(final int maxEval, final UnivariateRealFunction f,
+                        final double min, final double max, final double startValue) {
+        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);
+    }
+
+    /** {@inheritDoc} */
     protected final double doSolve() {
         // Get initial solution
         double x0 = getMin();
@@ -86,8 +136,12 @@
         // If one of the bounds is the exact root, return it. Since these are
         // not under-approximations or over-approximations, we can return them
         // regardless of the allowed solutions.
-        if (f0 == 0.0) return x0;
-        if (f1 == 0.0) return x1;
+        if (f0 == 0.0) {
+            return x0;
+        }
+        if (f1 == 0.0) {
+            return x1;
+        }
 
         // Verify bracketing of initial solution.
         verifyBracketing(x0, x1);
@@ -97,55 +151,58 @@
         final double atol = getAbsoluteAccuracy();
         final double rtol = getRelativeAccuracy();
 
-        // Variables to hold new bounds.
-        double x;
-        double fx;
-
         // Keep track of inverted intervals, meaning that the left bound is
-        // larger than the right bound. Not used for the original Secant
-        // method.
+        // larger than the right bound.
         boolean inverted = false;
 
         // Keep finding better approximations.
         while (true) {
             // Calculate the next approximation.
-            x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));
-            fx = computeObjectiveValue(x);
+            final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));
+            final double fx = computeObjectiveValue(x);
 
             // If the new approximation is the exact root, return it. Since
             // this is not an under-approximation or an over-approximation,
             // we can return it regardless of the allowed solutions.
-            if (fx == 0.0) return x;
+            if (fx == 0.0) {
+                return x;
+            }
 
             // Update the bounds with the new approximation.
-            if (method == Method.SECANT) {
-                x0 = x1;
-                f0 = f1;
-                x1 = x;
-                f1 = fx;
-            } else if (f1 * fx < 0) {
-                // We had [x0..x1]. We update it to [x1, x]. Note that the
-                // value of x1 has switched to the other bound, thus inverting
+            if (f1 * fx < 0) {
+                // The value of x1 has switched to the other bound, thus inverting
                 // the interval.
                 x0 = x1;
                 f0 = f1;
-                x1 = x;
-                f1 = fx;
                 inverted = !inverted;
             } else {
-                // We had [x0..x1]. We update it to [x0, x].
-                if (method == Method.ILLINOIS) f0 *= 0.5;
-                if (method == Method.PEGASUS) f0 *= f1 / (f1 + fx);
-                x1 = x;
-                f1 = fx;
+                switch (method) {
+                case ILLINOIS:
+                    f0 *= 0.5;
+                    break;
+                case PEGASUS:
+                    f0 *= f1 / (f1 + fx);
+                    break;
+                case REGULA_FALSI:
+                    if (x == x1) {
+                        throw new ConvergenceException();
+                    }
+                    break;
+                default:
+                    // Should never happen.
+                    throw new MathInternalError();
+                }
             }
+            // Update from [x0, x1] to [x0, x].
+            x1 = x;
+            f1 = fx;
 
             // If the function value of the last approximation is too small,
-            // given the function value accuracy, then we can't get close to
+            // given the function value accuracy, then we can't get closer to
             // the root than we already are.
             if (FastMath.abs(f1) <= ftol) {
-                switch (allowedSolutions) {
-                case EITHER_SIDE:
+                switch (allowed) {
+                case ANY_SIDE:
                     return x1;
                 case LEFT_SIDE:
                     if (inverted) {
@@ -157,6 +214,16 @@
                         return x1;
                     }
                     break;
+                case BELOW_SIDE:
+                    if (f1 <= 0) {
+                        return x1;
+                    }
+                    break;
+                case ABOVE_SIDE:
+                    if (f1 >= 0) {
+                        return x1;
+                    }
+                    break;
                 default:
                     throw new MathInternalError();
                 }
@@ -166,13 +233,17 @@
             // are satisfied with the current approximation.
             if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
                                                      atol)) {
-                switch (allowedSolutions) {
-                case EITHER_SIDE:
+                switch (allowed) {
+                case ANY_SIDE:
                     return x1;
                 case LEFT_SIDE:
                     return inverted ? x1 : x0;
                 case RIGHT_SIDE:
                     return inverted ? x0 : x1;
+                case BELOW_SIDE:
+                    return (f1 <= 0) ? x1 : x0;
+                case ABOVE_SIDE:
+                    return (f1 >= 0) ? x1 : x0;
                 default:
                     throw new MathInternalError();
                 }
@@ -182,8 +253,6 @@
 
     /** <em>Secant</em>-based root-finding methods. */
     protected enum Method {
-        /** The original {@link SecantSolver <em>Secant</em>} method. */
-        SECANT,
 
         /**
          * The {@link RegulaFalsiSolver <em>Regula Falsi</em>} or
@@ -195,6 +264,7 @@
         ILLINOIS,
 
         /** The {@link PegasusSolver <em>Pegasus</em>} method. */
-        PEGASUS,
+        PEGASUS;
+
     }
 }
Only in data/changesInfo//Math_48/properties/modified_classes/inducing/src/main/java/org/apache/commons/math/analysis/solvers: IllinoisSolver.java
Only in data/changesInfo//Math_48/properties/modified_classes/inducing/src/main/java/org/apache/commons/math/analysis/solvers: PegasusSolver.java
Only in data/changesInfo//Math_48/properties/modified_classes/inducing/src/main/java/org/apache/commons/math/analysis/solvers: RegulaFalsiSolver.java
Only in data/changesInfo//Math_48/properties/modified_classes/inducing/src/main/java/org/apache/commons/math/analysis/solvers: SecantSolver.java
Only in data/changesInfo//Math_48/properties/modified_classes/inducing/src: test
