{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "data/changesInfo/",
  "timeoutSecond": 300,
  "proj": "Codec",
  "id": "3",
  "workingDir": "../bugs/Codec_3_buggy",
  "inducingCommit": "727432fe12821b9e25e2c5a1758076ad83b098eb",
  "originalCommit": "26c5d764b6af99753d4a5150e6398fa2b5c46b68",
  "bug_name": "Codec_3",
  "derive": "defects4j",
  "original_fixing_commit": "a5dfe5cbc95d7f3ce0b4829756690c2cb8439f4c",
  "buildFiles_changed": false,
  "inducing_changes": [],
  "inducing_type": {
    "add_classes": {
      "qualified_names": [
        "src/java/org/apache/commons/codec/language/DoubleMetaphone.java"
      ],
      "num": 1
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  },
  "trigger_tests": [],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/codec/language/DoubleMetaphone.java",
        "src/java/org/apache/commons/codec/language/DoubleMetaphone.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "handleL",
            "conditionL0",
            "handleG"
          ],
          "num": 3
        },
        {
          "qualified_names": [
            "handleL",
            "conditionL0",
            "handleG"
          ],
          "num": 3
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "454",
            "563",
            "566",
            "858"
          ],
          "num": 4
        },
        {
          "qualified_names": [
            "454",
            "565",
            "566",
            "567",
            "572",
            "860"
          ],
          "num": 6
        }
      ],
      "diff": "diff -u -r data/changesInfo//Codec_3/properties/modified_classes/inducing/src/java/org/apache/commons/codec/language/DoubleMetaphone.java data/changesInfo//Codec_3/cleaned/fixing/src/java/org/apache/commons/codec/language/DoubleMetaphone.java\n--- data/changesInfo//Codec_3/properties/modified_classes/inducing/src/java/org/apache/commons/codec/language/DoubleMetaphone.java\t2023-07-26 17:09:14.951645272 +0800\n+++ data/changesInfo//Codec_3/cleaned/fixing/src/java/org/apache/commons/codec/language/DoubleMetaphone.java\t2023-07-26 17:18:21.643026316 +0800\n@@ -451,7 +451,7 @@\n                 contains(value, index + 1, 2, \"ET\")) {\n                 //-- obvious germanic --//\n                 result.append(\u0027K\u0027);\n-            } else if (contains(value, index + 1, 4, \"IER\")) {\n+            } else if (contains(value, index + 1, 2, \"IER\")) {\n                 result.append(\u0027J\u0027);\n             } else {\n                 result.append(\u0027J\u0027, \u0027K\u0027);\n@@ -560,14 +560,16 @@\n      * Handles \u0027L\u0027 cases\n      */\n     private int handleL(String value, DoubleMetaphoneResult result, int index) {\n-        result.append(\u0027L\u0027);\n         if (charAt(value, index + 1) \u003d\u003d \u0027L\u0027) {\n             if (conditionL0(value, index)) {\n-                result.appendAlternate(\u0027 \u0027);\n+                result.appendPrimary(\u0027L\u0027);\n+            } else {\n+                result.append(\u0027L\u0027);\n             }\n             index +\u003d 2;\n         } else {\n             index++;\n+            result.append(\u0027L\u0027);\n         }\n         return index;\n     }\n@@ -855,7 +857,7 @@\n         if (index \u003d\u003d value.length() - 3 \u0026\u0026 \n             contains(value, index - 1, 4, \"ILLO\", \"ILLA\", \"ALLE\")) {\n             return true;\n-        } else if ((contains(value, index - 1, 2, \"AS\", \"OS\") || \n+        } else if ((contains(value, value.length() - 2, 2, \"AS\", \"OS\") ||\n                     contains(value, value.length() - 1, 1, \"A\", \"O\")) \u0026\u0026\n                    contains(value, index - 1, 4, \"ALLE\")) {\n             return true;\n",
      "operations": [
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Block [20701,20752]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [20655,20681]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodInvocation [31402,31416]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: index [31343,31348]",
          "to": ""
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  }
}