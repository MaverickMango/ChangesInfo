{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "/home/liumengjiao/Desktop/CI/Benchmark/data/changesInfo/",
  "properties": {
    "trigger.tests": "org.apache.commons.codec.language.DoubleMetaphone2Test::testDoubleMetaphoneAlternate",
    "test.dir": "src/test",
    "clz.modified": "org.apache.commons.codec.language.DoubleMetaphone",
    "src.dir": "src/java"
  },
  "timeoutSecond": 100,
  "proj": "Codec",
  "id": "3",
  "workingDir": "../bugs/Codec_3_buggy",
  "buggyCommit": "d7b01850ef418b1d261cdb2029f8f85ab4031553",
  "inducingCommit": "727432fe12821b9e25e2c5a1758076ad83b098eb",
  "originalCommit": "26c5d764b6af99753d4a5150e6398fa2b5c46b68",
  "bug_name": "Codec_3",
  "derive": "defects4j",
  "original_fixing_commit": "a5dfe5cbc95d7f3ce0b4829756690c2cb8439f4c",
  "buildFiles_changed": false,
  "regression": true,
  "inducing_changes": [],
  "inducing_type": {
    "add_classes": {
      "qualified_names": [
        "src/java/org/apache/commons/codec/language/DoubleMetaphone.java"
      ],
      "num": 1
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  },
  "trigger_tests": [
    {
      "test_class": "org.apache.commons.codec.language.DoubleMetaphone2Test",
      "test_function": "testDoubleMetaphoneAlternate",
      "assertion_line": "84",
      "exception": "junit.framework.ComparisonFailure",
      "message": "Test [19]\u003dAngier expected:\u003cAN[J]R\u003e but was:\u003cAN[K]R\u003e"
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/codec/language/DoubleMetaphone.java",
        "src/java/org/apache/commons/codec/language/DoubleMetaphone.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.codec.language.DoubleMetaphone:handleL:[String value, DoubleMetaphoneResult result, int index]:int",
            "org.apache.commons.codec.language.DoubleMetaphone:conditionL0:[String value, int index]:boolean",
            "org.apache.commons.codec.language.DoubleMetaphone:handleG:[String value, DoubleMetaphoneResult result, int index, boolean slavoGermanic]:int",
            "org.apache.commons.codec.language.DoubleMetaphone:contains:[String value, int start, int length, String[] criteria]:boolean"
          ],
          "num": 4
        },
        {
          "qualified_names": [
            "org.apache.commons.codec.language.DoubleMetaphone:handleG:[String value, DoubleMetaphoneResult result, int index, boolean slavoGermanic]:int",
            "org.apache.commons.codec.language.DoubleMetaphone:conditionL0:[String value, int index]:boolean",
            "org.apache.commons.codec.language.DoubleMetaphone:contains:[String value, int start, int length, String[] criteria]:boolean",
            "org.apache.commons.codec.language.DoubleMetaphone:handleL:[String value, DoubleMetaphoneResult result, int index]:int"
          ],
          "num": 4
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "455",
            "564",
            "567",
            "860",
            "1005",
            "1006",
            "1007",
            "1008"
          ],
          "num": 8
        },
        {
          "qualified_names": [
            "455",
            "566",
            "567",
            "568",
            "573",
            "862",
            "1007",
            "1008",
            "1009"
          ],
          "num": 9
        }
      ],
      "diff": "diff --git a/src/java/org/apache/commons/codec/language/DoubleMetaphone.java b/src/java/org/apache/commons/codec/language/DoubleMetaphone.java\nindex 5186895..f7122d4 100644\n--- a/src/java/org/apache/commons/codec/language/DoubleMetaphone.java\n+++ b/src/java/org/apache/commons/codec/language/DoubleMetaphone.java\n@@ -452,7 +452,7 @@\n             if ((contains(value, 0 ,4, \"VAN \", \"VON \") || contains(value, 0, 3, \"SCH\")) || contains(value, index + 1, 2, \"ET\")) {\n                 //-- obvious germanic --//\n                 result.append(\u0027K\u0027);\n-            } else if (contains(value, index + 1, 4, \"IER\")) {\n+            } else if (contains(value, index + 1, 3, \"IER\")) {\n                 result.append(\u0027J\u0027);\n             } else {\n                 result.append(\u0027J\u0027, \u0027K\u0027);\n@@ -561,14 +561,16 @@\n     private int handleL(String value, \n                         DoubleMetaphoneResult result, \n                         int index) {\n-        result.append(\u0027L\u0027);\n         if (charAt(value, index + 1) \u003d\u003d \u0027L\u0027) {\n             if (conditionL0(value, index)) {\n-                result.appendAlternate(\u0027 \u0027);\n+                result.appendPrimary(\u0027L\u0027);\n+            } else {\n+                result.append(\u0027L\u0027);\n             }\n             index +\u003d 2;\n         } else {\n             index++;\n+            result.append(\u0027L\u0027);\n         }\n         return index;\n     }\n@@ -857,7 +859,7 @@\n         if (index \u003d\u003d value.length() - 3 \u0026\u0026 \n             contains(value, index - 1, 4, \"ILLO\", \"ILLA\", \"ALLE\")) {\n             return true;\n-        } else if ((contains(value, index - 1, 2, \"AS\", \"OS\") || \n+        } else if ((contains(value, value.length() - 2, 2, \"AS\", \"OS\") || \n                     contains(value, value.length() - 1, 1, \"A\", \"O\")) \u0026\u0026\n                    contains(value, index - 1, 4, \"ALLE\")) {\n             return true;\n@@ -1002,10 +1004,9 @@\n     }\n     \n     /**\n-     * Determines whether \u003ccode\u003evalue\u003c/code\u003e contains any of the criteria \n-     starting\n-     * at index \u003ccode\u003estart\u003c/code\u003e and matching up to length \u003ccode\u003elength\u003c/code\u003e\n-     */    \n+     * Determines whether \u003ccode\u003evalue\u003c/code\u003e contains any of the criteria starting at index \u003ccode\u003estart\u003c/code\u003e and\n+     * matching up to length \u003ccode\u003elength\u003c/code\u003e\n+     */\n     protected static boolean contains(String value, int start, int length, \n                                       String[] criteria) {\n         boolean result \u003d false;\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [35833,36008]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Block [20247,20298]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [20201,20227]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodInvocation [30842,30856]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: index [30783,30788]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "Javadoc [35765,35946]",
          "to": ""
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  },
  "patch_changed_mths": {
    "qualified_names": [
      "org.apache.commons.codec.language.DoubleMetaphone:handleG(Ljava/lang/String;Lorg/apache/commons/codec/language/DoubleMetaphone$DoubleMetaphoneResult;IZ)I:regression",
      "org.apache.commons.codec.language.DoubleMetaphone:handleL(Ljava/lang/String;Lorg/apache/commons/codec/language/DoubleMetaphone$DoubleMetaphoneResult;I)I:regression",
      "org.apache.commons.codec.language.DoubleMetaphone:conditionL0(Ljava/lang/String;I)Z:regression",
      "org.apache.commons.codec.language.DoubleMetaphone:contains(Ljava/lang/String;IILjava/lang/String;)Z:regression",
      "org.apache.commons.codec.language.DoubleMetaphone:contains(Ljava/lang/String;II[Ljava/lang/String;)Z:regression"
    ],
    "num": 5
  }
}