{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "data/changesInfo/",
  "timeoutSecond": 300,
  "proj": "Lang",
  "id": "46",
  "workingDir": "../bugs/Lang_46_buggy",
  "inducingCommit": "868f6976aea222e96259843f56df9aed8e48584b",
  "originalCommit": "5209cefa81c9c48a34e5472fdcf2a308a4da2589",
  "bug_name": "Lang_46",
  "derive": "defects4j",
  "original_fixing_commit": "916639bda234a8e5a030361c4068667764b34cb7",
  "buildFiles_changed": false,
  "inducing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/lang/StringEscapeUtils.java",
        "src/java/org/apache/commons/lang/StringEscapeUtils.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "escapeJavaStyleString"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "escapeJavaStyleString"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "235"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "236",
            "237",
            "238",
            "239"
          ],
          "num": 4
        }
      ],
      "diff": "diff --git a/src/java/org/apache/commons/lang/StringEscapeUtils.java b/src/java/org/apache/commons/lang/StringEscapeUtils.java\nindex 4fda091..db2d7bd 100644\n--- a/src/java/org/apache/commons/lang/StringEscapeUtils.java\n+++ b/src/java/org/apache/commons/lang/StringEscapeUtils.java\n@@ -233,6 +233,10 @@\n                         out.write(\u0027\\\\\u0027);\n                         out.write(\u0027\\\\\u0027);\n                         break;\n+                    case \u0027/\u0027:\n+                        out.write(\u0027\\\\\u0027);\n+                        out.write(\u0027/\u0027);\n+                        break;\n                     default :\n                         out.write(ch);\n                         break;\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "SwitchCase [8609,8618]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [8643,8659]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [8684,8699]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "BreakStatement [8724,8730]"
        }
      ]
    }
  ],
  "inducing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  },
  "trigger_tests": [],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/lang/StringEscapeUtils.java",
        "src/java/org/apache/commons/lang/StringEscapeUtils.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "escapeJava",
            "escapeJavaStyleString",
            "escapeJavaStyleString",
            "escapeJava",
            "escapeJavaScript",
            "escapeJavaScript"
          ],
          "num": 6
        },
        {
          "qualified_names": [
            "escapeJava",
            "escapeJavaScript",
            "escapeJavaScript",
            "escapeJava",
            "escapeJavaStyleString",
            "escapeJavaStyleString"
          ],
          "num": 6
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "81",
            "97",
            "122",
            "138",
            "148",
            "154",
            "171",
            "237"
          ],
          "num": 8
        },
        {
          "qualified_names": [
            "81",
            "97",
            "122",
            "138",
            "148",
            "154",
            "171",
            "237",
            "238",
            "239"
          ],
          "num": 10
        }
      ],
      "diff": "diff -u -r data/changesInfo//Lang_46/properties/modified_classes/inducing/src/java/org/apache/commons/lang/StringEscapeUtils.java data/changesInfo//Lang_46/cleaned/fixing/src/java/org/apache/commons/lang/StringEscapeUtils.java\n--- data/changesInfo//Lang_46/properties/modified_classes/inducing/src/java/org/apache/commons/lang/StringEscapeUtils.java\t2023-08-25 13:39:57.381010326 +0800\n+++ data/changesInfo//Lang_46/cleaned/fixing/src/java/org/apache/commons/lang/StringEscapeUtils.java\t2023-06-20 21:54:01.402341557 +0800\n@@ -78,7 +78,7 @@\n      * @return String with escaped values, \u003ccode\u003enull\u003c/code\u003e if null string input\n      */\n     public static String escapeJava(String str) {\n-        return escapeJavaStyleString(str, false);\n+        return escapeJavaStyleString(str, false, false);\n     }\n \n     /**\n@@ -94,7 +94,7 @@\n      * @throws IOException if error occurs on underlying Writer\n      */\n     public static void escapeJava(Writer out, String str) throws IOException {\n-        escapeJavaStyleString(out, str, false);\n+        escapeJavaStyleString(out, str, false, false);\n     }\n \n     /**\n@@ -119,7 +119,7 @@\n      * @return String with escaped values, \u003ccode\u003enull\u003c/code\u003e if null string input\n      */\n     public static String escapeJavaScript(String str) {\n-        return escapeJavaStyleString(str, true);\n+        return escapeJavaStyleString(str, true, true);\n     }\n \n     /**\n@@ -135,7 +135,7 @@\n      * @throws IOException if error occurs on underlying Writer\n      **/\n     public static void escapeJavaScript(Writer out, String str) throws IOException {\n-        escapeJavaStyleString(out, str, true);\n+        escapeJavaStyleString(out, str, true, true);\n     }\n \n     /**\n@@ -145,13 +145,13 @@\n      * @param escapeSingleQuotes escapes single quotes if \u003ccode\u003etrue\u003c/code\u003e\n      * @return the escaped string\n      */\n-    private static String escapeJavaStyleString(String str, boolean escapeSingleQuotes) {\n+    private static String escapeJavaStyleString(String str, boolean escapeSingleQuotes, boolean escapeForwardSlash) {\n         if (str \u003d\u003d null) {\n             return null;\n         }\n         try {\n             StringWriter writer \u003d new StringWriter(str.length() * 2);\n-            escapeJavaStyleString(writer, str, escapeSingleQuotes);\n+            escapeJavaStyleString(writer, str, escapeSingleQuotes, escapeForwardSlash);\n             return writer.toString();\n         } catch (IOException ioe) {\n             // this should never ever happen while writing to a StringWriter\n@@ -168,7 +168,7 @@\n      * @param escapeSingleQuote escapes single quotes if \u003ccode\u003etrue\u003c/code\u003e\n      * @throws IOException if an IOException occurs\n      */\n-    private static void escapeJavaStyleString(Writer out, String str, boolean escapeSingleQuote) throws IOException {\n+    private static void escapeJavaStyleString(Writer out, String str, boolean escapeSingleQuote, boolean escapeForwardSlash) throws IOException {\n         if (out \u003d\u003d null) {\n             throw new IllegalArgumentException(\"The Writer must not be null\");\n         }\n@@ -234,7 +234,9 @@\n                         out.write(\u0027\\\\\u0027);\n                         break;\n                     case \u0027/\u0027:\n-                        out.write(\u0027\\\\\u0027);\n+                        if (escapeForwardSlash) {\n+                            out.write(\u0027\\\\\u0027);\n+                        }\n                         out.write(\u0027/\u0027);\n                         break;\n                     default :\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "SingleVariableDeclaration [5519,5545]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SingleVariableDeclaration [6450,6476]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "BooleanLiteral: false [2883,2888]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "BooleanLiteral: false [3532,3537]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "BooleanLiteral: true [4475,4479]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "BooleanLiteral: true [5141,5145]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: escapeForwardSlash [5762,5780]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "IfStatement [8745,8841]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: escapeForwardSlash [8749,8767]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Block [8769,8841]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  }
}