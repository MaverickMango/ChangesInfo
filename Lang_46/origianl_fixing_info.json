{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "/home/liumengjiao/Desktop/CI/Benchmark/data/changesInfo/",
  "properties": {
    "trigger.tests": "org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaWithSlash",
    "test.dir": "src/test",
    "clz.modified": "org.apache.commons.lang.StringEscapeUtils",
    "src.dir": "src/java"
  },
  "timeoutSecond": 100,
  "proj": "Lang",
  "id": "46",
  "workingDir": "../bugs/Lang_46_buggy",
  "buggyCommit": "229151ec41339450e4d4f857bf92ed080d3e2430",
  "inducingCommit": "868f6976aea222e96259843f56df9aed8e48584b",
  "originalCommit": "5209cefa81c9c48a34e5472fdcf2a308a4da2589",
  "bug_name": "Lang_46",
  "derive": "defects4j",
  "original_fixing_commit": "916639bda234a8e5a030361c4068667764b34cb7",
  "buildFiles_changed": false,
  "regression": true,
  "inducing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/lang/StringEscapeUtils.java",
        "src/java/org/apache/commons/lang/StringEscapeUtils.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.lang.StringEscapeUtils:escapeJavaStyleString:[Writer out, String str, boolean escapeSingleQuote]:void"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "org.apache.commons.lang.StringEscapeUtils:escapeJavaStyleString:[Writer out, String str, boolean escapeSingleQuote]:void"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "235"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "236",
            "237",
            "238",
            "239"
          ],
          "num": 4
        }
      ],
      "diff": "diff --git a/src/java/org/apache/commons/lang/StringEscapeUtils.java b/src/java/org/apache/commons/lang/StringEscapeUtils.java\nindex 4fda091..db2d7bd 100644\n--- a/src/java/org/apache/commons/lang/StringEscapeUtils.java\n+++ b/src/java/org/apache/commons/lang/StringEscapeUtils.java\n@@ -233,6 +233,10 @@\n                         out.write(\u0027\\\\\u0027);\n                         out.write(\u0027\\\\\u0027);\n                         break;\n+                    case \u0027/\u0027:\n+                        out.write(\u0027\\\\\u0027);\n+                        out.write(\u0027/\u0027);\n+                        break;\n                     default :\n                         out.write(ch);\n                         break;\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "SwitchCase [8609,8618]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [8643,8659]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [8684,8699]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "BreakStatement [8724,8730]"
        }
      ]
    }
  ],
  "inducing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  },
  "trigger_tests": [
    {
      "test_class": "org.apache.commons.lang.StringEscapeUtilsTest",
      "test_function": "testEscapeJavaWithSlash",
      "assertion_line": "113",
      "exception": "junit.framework.ComparisonFailure",
      "message": "expected:\u003c...tring with a slash ([]/) in it\u003e but was:\u003c...tring with a slash ([\\]/) in it\u003e"
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/lang/StringEscapeUtils.java",
        "src/java/org/apache/commons/lang/StringEscapeUtils.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.lang.StringEscapeUtils:escapeJava:[Writer out, String str]:void",
            "org.apache.commons.lang.StringEscapeUtils:escapeJavaScript:[Writer out, String str]:void",
            "org.apache.commons.lang.StringEscapeUtils:escapeJava:[String str]:String",
            "org.apache.commons.lang.StringEscapeUtils:escapeJavaStyleString:[Writer out, String str, boolean escapeSingleQuote]:void",
            "org.apache.commons.lang.StringEscapeUtils:escapeJavaStyleString:[String str, boolean escapeSingleQuotes]:String",
            "org.apache.commons.lang.StringEscapeUtils:escapeJavaScript:[String str]:String"
          ],
          "num": 6
        },
        {
          "qualified_names": [
            "org.apache.commons.lang.StringEscapeUtils:escapeJavaScript:[String str]:String",
            "org.apache.commons.lang.StringEscapeUtils:escapeJavaStyleString:[String str, boolean escapeSingleQuotes, boolean escapeForwardSlash]:String",
            "org.apache.commons.lang.StringEscapeUtils:escapeJavaStyleString:[Writer out, String str, boolean escapeSingleQuote, boolean escapeForwardSlash]:void",
            "org.apache.commons.lang.StringEscapeUtils:escapeJavaScript:[Writer out, String str]:void",
            "org.apache.commons.lang.StringEscapeUtils:escapeJava:[String str]:String",
            "org.apache.commons.lang.StringEscapeUtils:escapeJava:[Writer out, String str]:void"
          ],
          "num": 6
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "86",
            "102",
            "127",
            "143",
            "153",
            "159",
            "176",
            "197",
            "201",
            "205",
            "209",
            "213",
            "227",
            "229",
            "233",
            "237",
            "241",
            "242"
          ],
          "num": 18
        },
        {
          "qualified_names": [
            "86",
            "102",
            "127",
            "143",
            "151",
            "154",
            "160",
            "175",
            "178",
            "179",
            "200",
            "204",
            "208",
            "212",
            "216",
            "230",
            "232",
            "236",
            "240",
            "244",
            "245",
            "246",
            "247"
          ],
          "num": 23
        }
      ],
      "diff": "diff --git a/src/java/org/apache/commons/lang/StringEscapeUtils.java b/src/java/org/apache/commons/lang/StringEscapeUtils.java\nindex c30c663..d4f98ec 100644\n--- a/src/java/org/apache/commons/lang/StringEscapeUtils.java\n+++ b/src/java/org/apache/commons/lang/StringEscapeUtils.java\n@@ -83,7 +83,7 @@\n      * @return String with escaped values, \u003ccode\u003enull\u003c/code\u003e if null string input\n      */\n     public static String escapeJava(String str) {\n-        return escapeJavaStyleString(str, false);\n+        return escapeJavaStyleString(str, false, false);\n     }\n \n     /**\n@@ -99,7 +99,7 @@\n      * @throws IOException if error occurs on underlying Writer\n      */\n     public static void escapeJava(Writer out, String str) throws IOException {\n-        escapeJavaStyleString(out, str, false);\n+        escapeJavaStyleString(out, str, false, false);\n     }\n \n     /**\n@@ -124,7 +124,7 @@\n      * @return String with escaped values, \u003ccode\u003enull\u003c/code\u003e if null string input\n      */\n     public static String escapeJavaScript(String str) {\n-        return escapeJavaStyleString(str, true);\n+        return escapeJavaStyleString(str, true, true);\n     }\n \n     /**\n@@ -140,7 +140,7 @@\n      * @throws IOException if error occurs on underlying Writer\n      **/\n     public static void escapeJavaScript(Writer out, String str) throws IOException {\n-        escapeJavaStyleString(out, str, true);\n+        escapeJavaStyleString(out, str, true, true);\n     }\n \n     /**\n@@ -148,15 +148,16 @@\n      * \n      * @param str String to escape values in, may be null\n      * @param escapeSingleQuotes escapes single quotes if \u003ccode\u003etrue\u003c/code\u003e\n+     * @param escapeForwardSlash TODO\n      * @return the escaped string\n      */\n-    private static String escapeJavaStyleString(String str, boolean escapeSingleQuotes) {\n+    private static String escapeJavaStyleString(String str, boolean escapeSingleQuotes, boolean escapeForwardSlash) {\n         if (str \u003d\u003d null) {\n             return null;\n         }\n         try {\n             StringWriter writer \u003d new StringWriter(str.length() * 2);\n-            escapeJavaStyleString(writer, str, escapeSingleQuotes);\n+            escapeJavaStyleString(writer, str, escapeSingleQuotes, escapeForwardSlash);\n             return writer.toString();\n         } catch (IOException ioe) {\n             // this should never ever happen while writing to a StringWriter\n@@ -171,9 +172,11 @@\n      * @param out write to receieve the escaped string\n      * @param str String to escape values in, may be null\n      * @param escapeSingleQuote escapes single quotes if \u003ccode\u003etrue\u003c/code\u003e\n+     * @param escapeForwardSlash TODO\n      * @throws IOException if an IOException occurs\n      */\n-    private static void escapeJavaStyleString(Writer out, String str, boolean escapeSingleQuote) throws IOException {\n+    private static void escapeJavaStyleString(Writer out, String str, boolean escapeSingleQuote,\n+            boolean escapeForwardSlash) throws IOException {\n         if (out \u003d\u003d null) {\n             throw new IllegalArgumentException(\"The Writer must not be null\");\n         }\n@@ -194,23 +197,23 @@\n                 out.write(\"\\\\u00\" + hex(ch));\n             } else if (ch \u003c 32) {\n                 switch (ch) {\n-                    case \u0027\\b\u0027:\n+                    case \u0027\\b\u0027 :\n                         out.write(\u0027\\\\\u0027);\n                         out.write(\u0027b\u0027);\n                         break;\n-                    case \u0027\\n\u0027:\n+                    case \u0027\\n\u0027 :\n                         out.write(\u0027\\\\\u0027);\n                         out.write(\u0027n\u0027);\n                         break;\n-                    case \u0027\\t\u0027:\n+                    case \u0027\\t\u0027 :\n                         out.write(\u0027\\\\\u0027);\n                         out.write(\u0027t\u0027);\n                         break;\n-                    case \u0027\\f\u0027:\n+                    case \u0027\\f\u0027 :\n                         out.write(\u0027\\\\\u0027);\n                         out.write(\u0027f\u0027);\n                         break;\n-                    case \u0027\\r\u0027:\n+                    case \u0027\\r\u0027 :\n                         out.write(\u0027\\\\\u0027);\n                         out.write(\u0027r\u0027);\n                         break;\n@@ -224,22 +227,24 @@\n                 }\n             } else {\n                 switch (ch) {\n-                    case \u0027\\\u0027\u0027:\n+                    case \u0027\\\u0027\u0027 :\n                         if (escapeSingleQuote) {\n-                          out.write(\u0027\\\\\u0027);\n+                            out.write(\u0027\\\\\u0027);\n                         }\n                         out.write(\u0027\\\u0027\u0027);\n                         break;\n-                    case \u0027\"\u0027:\n+                    case \u0027\"\u0027 :\n                         out.write(\u0027\\\\\u0027);\n                         out.write(\u0027\"\u0027);\n                         break;\n-                    case \u0027\\\\\u0027:\n+                    case \u0027\\\\\u0027 :\n                         out.write(\u0027\\\\\u0027);\n                         out.write(\u0027\\\\\u0027);\n                         break;\n-                    case \u0027/\u0027:\n-                        out.write(\u0027\\\\\u0027);\n+                    case \u0027/\u0027 :\n+                        if (escapeForwardSlash) {\n+                            out.write(\u0027\\\\\u0027);\n+                        }\n                         out.write(\u0027/\u0027);\n                         break;\n                     default :\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "SingleVariableDeclaration [5849,5875]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SingleVariableDeclaration [6830,6856]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [5688,5718]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [6630,6660]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "BooleanLiteral: false [3175,3180]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "BooleanLiteral: false [3824,3829]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "BooleanLiteral: true [4767,4771]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "BooleanLiteral: true [5433,5437]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: escapeForwardSlash [6092,6110]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "IfStatement [9136,9232]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: escapeForwardSlash [9140,9158]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Block [9160,9232]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [
        "org.apache.commons.lang.StringEscapeUtils:escapeJavaStyleString:[Writer out, String str, boolean escapeSingleQuote, boolean escapeForwardSlash]:void",
        "org.apache.commons.lang.StringEscapeUtils:escapeJavaStyleString:[String str, boolean escapeSingleQuotes, boolean escapeForwardSlash]:String"
      ],
      "num": 2
    },
    "delete_functions": {
      "qualified_names": [
        "org.apache.commons.lang.StringEscapeUtils:escapeJavaStyleString:[Writer out, String str, boolean escapeSingleQuote]:void",
        "org.apache.commons.lang.StringEscapeUtils:escapeJavaStyleString:[String str, boolean escapeSingleQuotes]:String"
      ],
      "num": 2
    }
  },
  "patch_changed_mths": {
    "qualified_names": [
      "org.apache.commons.lang.StringEscapeUtils:escapeJava(Ljava/io/Writer;Ljava/lang/String;)V:regression",
      "org.apache.commons.lang.StringEscapeUtils:escapeJavaScript(Ljava/io/Writer;Ljava/lang/String;)V:regression"
    ],
    "num": 2
  }
}