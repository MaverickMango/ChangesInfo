{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "/home/liumengjiao/Desktop/CI/Benchmark/data/changesInfo/",
  "properties": {
    "trigger.tests": "org.apache.commons.compress.utils.ChecksumCalculatingInputStreamTest::testClassInstantiationWithParameterBeingNullThrowsNullPointerExceptionOne,org.apache.commons.compress.utils.ChecksumCalculatingInputStreamTest::testClassInstantiationWithParameterBeingNullThrowsNullPointerExceptionTwo,org.apache.commons.compress.utils.ChecksumCalculatingInputStreamTest::testClassInstantiationWithParameterBeingNullThrowsNullPointerExceptionThree",
    "test.dir": "src/test/java",
    "clz.modified": "org.apache.commons.compress.utils.ChecksumCalculatingInputStream",
    "src.dir": "src/main/java"
  },
  "timeoutSecond": 100,
  "proj": "Compress",
  "id": "44",
  "workingDir": "../bugs/Compress_44_buggy",
  "buggyCommit": "b53ead4b43c6c248b1a39f4a1cce7a0c4062285d",
  "inducingCommit": "982ce0eca9935e65915278ae07febd3a1d52273d",
  "originalCommit": "72fec65e1c09e14b92a21aae5d0f0dd20e8fe4ef",
  "bug_name": "Compress_44",
  "derive": "defects4j",
  "original_fixing_commit": "6f379134ae1807cd404ed6c9579707e5dc6a6df0",
  "buildFiles_changed": false,
  "regression": false,
  "inducing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java",
        "src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream:maybeFinishCurrentBlock:[]:void",
            "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream:verifyContentChecksum:[]:void",
            "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream:nextBlock:[]:void"
          ],
          "num": 3
        },
        {
          "qualified_names": [
            "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream:verifyContentChecksum:[]:void",
            "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream:verifyChecksum:[XXHash32 hash, String kind]:void",
            "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream:maybeFinishCurrentBlock:[]:void",
            "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream:nextBlock:[]:void"
          ],
          "num": 4
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "27",
            "82",
            "241",
            "260",
            "261",
            "262",
            "263",
            "264",
            "271",
            "272",
            "273",
            "274",
            "275",
            "276",
            "277",
            "278",
            "279",
            "280"
          ],
          "num": 18
        },
        {
          "qualified_names": [
            "28",
            "84",
            "85",
            "86",
            "246",
            "247",
            "248",
            "267",
            "268",
            "275",
            "280",
            "281",
            "282",
            "283",
            "284",
            "285",
            "286",
            "287",
            "288",
            "289",
            "290",
            "291",
            "292"
          ],
          "num": 23
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java b/src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java\nindex 9b47d7b..8bf49ac 100644\n--- a/src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java\n@@ -25,6 +25,7 @@\n import org.apache.commons.compress.compressors.CompressorInputStream;\n import org.apache.commons.compress.utils.BoundedInputStream;\n import org.apache.commons.compress.utils.ByteUtils;\n+import org.apache.commons.compress.utils.ChecksumCalculatingInputStream;\n import org.apache.commons.compress.utils.IOUtils;\n \n /**\n@@ -80,6 +81,9 @@\n     // used for frame header checksum and content checksum, if present\n     private final XXHash32 contentHash \u003d new XXHash32();\n \n+    // used for block checksum, if present\n+    private final XXHash32 blockHash \u003d new XXHash32();\n+\n     // only created if the frame doesn\u0027t set the block independence flag\n     private byte[] blockDependencyBuffer;\n \n@@ -239,6 +243,9 @@\n             return;\n         }\n         InputStream capped \u003d new BoundedInputStream(in, realLen);\n+        if (expectBlockChecksum) {\n+            capped \u003d new ChecksumCalculatingInputStream(blockHash, capped);\n+        }\n         if (uncompressed) {\n             inUncompressed \u003d true;\n             currentBlock \u003d capped;\n@@ -257,31 +264,32 @@\n             currentBlock.close();\n             currentBlock \u003d null;\n             if (expectBlockChecksum) {\n-                int skipped \u003d (int) IOUtils.skip(in, 4);\n-                count(skipped);\n-                if (4 !\u003d skipped) {\n-                    throw new IOException(\"Premature end of stream while reading block checksum\");\n-                }\n+                verifyChecksum(blockHash, \"block\");\n+                blockHash.reset();\n             }\n         }\n     }\n \n     private void verifyContentChecksum() throws IOException {\n         if (expectContentChecksum) {\n-            byte[] checksum \u003d new byte[4];\n-            int read \u003d IOUtils.readFully(in, checksum);\n-            count(read);\n-            if (4 !\u003d read) {\n-                throw new IOException(\"Premature end of stream while reading content checksum\");\n-            }\n-            long expectedHash \u003d contentHash.getValue();\n-            if (expectedHash !\u003d ByteUtils.fromLittleEndian(checksum)) {\n-                throw new IOException(\"content checksum mismatch.\");\n-            }\n+            verifyChecksum(contentHash, \"content\");\n         }\n         contentHash.reset();\n     }\n \n+    private void verifyChecksum(XXHash32 hash, String kind) throws IOException {\n+        byte[] checksum \u003d new byte[4];\n+        int read \u003d IOUtils.readFully(in, checksum);\n+        count(read);\n+        if (4 !\u003d read) {\n+            throw new IOException(\"Premature end of stream while reading \" + kind + \" checksum\");\n+        }\n+        long expectedHash \u003d hash.getValue();\n+        if (expectedHash !\u003d ByteUtils.fromLittleEndian(checksum)) {\n+            throw new IOException(kind + \" checksum mismatch.\");\n+        }\n+    }\n+\n     private int readOneByte() throws IOException {\n         final int b \u003d in.read();\n         if (b !\u003d -1) {\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "ImportDeclaration [1125,1197]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldDeclaration [3116,3166]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "MethodDeclaration [10004,10519]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: private [10004,10011]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "PrimitiveType: void [10012,10016]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: verifyChecksum [10017,10031]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SingleVariableDeclaration [10032,10045]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SingleVariableDeclaration [10047,10058]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SimpleType [10067,10078]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Block [10079,10519]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [8974,9086]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "ExpressionStatement [9914,9953]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "MethodInvocation [9914,9952]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [9701,9736]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [9753,9771]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: verifyChecksum [9914,9928]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "METHOD_INVOCATION_ARGUMENTS [9929,9951]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "InfixExpression [10252,10313]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: hash [10354,10358]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "InfixExpression [10473,10501]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "StringLiteral: \"content\" [9942,9951]"
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [9408,9448]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [9465,9480]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [9497,9633]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "StringLiteral: \"Premature end of stream while reading content checksum\" [9955,10011]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "StringLiteral: \"content checksum mismatch.\" [10194,10222]",
          "to": ""
        }
      ]
    }
  ],
  "inducing_type": {
    "add_classes": {
      "qualified_names": [
        "src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java"
      ],
      "num": 1
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream:verifyChecksum:[XXHash32 hash, String kind]:void"
      ],
      "num": 1
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  },
  "trigger_tests": [
    {
      "test_class": "org.apache.commons.compress.utils.ChecksumCalculatingInputStreamTest",
      "test_function": "testClassInstantiationWithParameterBeingNullThrowsNullPointerExceptionOne",
      "exception": "junit.framework.AssertionFailedError",
      "message": "Expected exception: java.lang.NullPointerException"
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java",
        "src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.compress.utils.ChecksumCalculatingInputStream:ChecksumCalculatingInputStream:[final Checksum checksum, final InputStream in]:null"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "org.apache.commons.compress.utils.ChecksumCalculatingInputStream:ChecksumCalculatingInputStream:[final Checksum checksum, final InputStream in]:null"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "33"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "34",
            "35",
            "36",
            "37",
            "38",
            "39",
            "40",
            "41",
            "42"
          ],
          "num": 9
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java b/src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java\nindex ebf44fd..4a408a5 100644\n--- a/src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java\n@@ -31,6 +31,15 @@\n     private final Checksum checksum;\n \n     public ChecksumCalculatingInputStream(final Checksum checksum, final InputStream in) {\n+\n+        if ( checksum \u003d\u003d null ){\n+            throw new NullPointerException(\"Parameter checksum must not be null\");\n+        }\n+\n+        if ( in \u003d\u003d null ){\n+            throw new NullPointerException(\"Parameter in must not be null\");\n+        }\n+\n         this.checksum \u003d checksum;\n         this.in \u003d in;\n     }\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [1287,1404]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [1414,1519]"
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  },
  "patch_changed_mths": {
    "qualified_names": [],
    "num": 0
  }
}