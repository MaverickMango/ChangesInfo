diff --git a/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java b/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java
index 107bf0b..cd0165f 100644
--- a/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java
+++ b/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java
@@ -19,6 +19,7 @@
 package org.apache.commons.compress.utils;
 
 import java.io.UnsupportedEncodingException;
+import java.util.Arrays;
 
 import org.apache.commons.compress.archivers.ArchiveEntry;
 
@@ -27,6 +28,8 @@
  */
 public class ArchiveUtils {
 
+    private static final int MAX_SANITIZED_NAME_LENGTH = 255;
+
     /** Private constructor to prevent instantiation of this utility class. */
     private ArchiveUtils(){
     }
@@ -255,7 +258,8 @@
     /**
      * Returns a "sanitized" version of the string given as arguments,
      * where sanitized means non-printable characters have been
-     * replaced with a question mark.
+     * replaced with a question mark and the outcome is not longer
+     * than 255 chars.
      *
      * <p>This method is used to clean up file names when they are
      * used in exception messages as they may end up in log files or
@@ -267,7 +271,13 @@
      * @since Compress 1.12
      */
     public static String sanitize(String s) {
-        final char[] chars = s.toCharArray();
+        final char[] cs = s.toCharArray();
+        final char[] chars = cs.length <= MAX_SANITIZED_NAME_LENGTH ? cs : Arrays.copyOf(cs, MAX_SANITIZED_NAME_LENGTH);
+        if (cs.length > MAX_SANITIZED_NAME_LENGTH) {
+            for (int i = MAX_SANITIZED_NAME_LENGTH - 3; i < MAX_SANITIZED_NAME_LENGTH; i++) {
+                chars[i] = '.';
+            }
+        }
         final int len = chars.length;
         final StringBuilder sb = new StringBuilder();
         for (int i = 0; i < len; i++) {
diff --git a/src/test/java/org/apache/commons/compress/ArchiveUtilsTest.java b/src/test/java/org/apache/commons/compress/ArchiveUtilsTest.java
index 413b52b..db383ed 100644
--- a/src/test/java/org/apache/commons/compress/ArchiveUtilsTest.java
+++ b/src/test/java/org/apache/commons/compress/ArchiveUtilsTest.java
@@ -67,6 +67,21 @@
         asciiToByteAndBackFail("\u8025");
     }
 
+    @Test
+    public void sanitizeShortensString() {
+        String input = "012345678901234567890123456789012345678901234567890123456789"
+            + "012345678901234567890123456789012345678901234567890123456789"
+            + "012345678901234567890123456789012345678901234567890123456789"
+            + "012345678901234567890123456789012345678901234567890123456789"
+            + "012345678901234567890123456789012345678901234567890123456789";
+        String expected = "012345678901234567890123456789012345678901234567890123456789"
+            + "012345678901234567890123456789012345678901234567890123456789"
+            + "012345678901234567890123456789012345678901234567890123456789"
+            + "012345678901234567890123456789012345678901234567890123456789"
+            + "012345678901...";
+        assertEquals(expected, ArchiveUtils.sanitize(input));
+    }
+
     private void asciiToByteAndBackOK(final String inputString) {
         assertEquals(inputString, ArchiveUtils.toAsciiString(ArchiveUtils.toAsciiBytes(inputString)));
     }
