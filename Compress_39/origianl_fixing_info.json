{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "/home/liumengjiao/Desktop/CI/Benchmark/data/changesInfo/",
  "properties": {
    "trigger.tests": "org.apache.commons.compress.ArchiveUtilsTest::sanitizeShortensString",
    "test.dir": "src/test/java",
    "clz.modified": "org.apache.commons.compress.utils.ArchiveUtils",
    "src.dir": "src/main/java"
  },
  "timeoutSecond": 100,
  "proj": "Compress",
  "id": "39",
  "workingDir": "../bugs/Compress_39_buggy",
  "buggyCommit": "593339ab62ce5db71fd42501a9ddea9fe698b9ca",
  "inducingCommit": "318de9ae84f1731fda8ce0785ae537f149ea5fcf",
  "originalCommit": "d0501577d37b594c3ff59a39ac211f7a1b170fa7",
  "bug_name": "Compress_39",
  "derive": "defects4j",
  "original_fixing_commit": "11840dfde044fec90b0cb4a715ce9d213acea3ca",
  "buildFiles_changed": false,
  "regression": false,
  "inducing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java",
        "src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:drainCurrentEntryData:[]:void",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:firstUnprintableCharacter:[String name]:int"
          ],
          "num": 2
        },
        {
          "qualified_names": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:drainCurrentEntryData:[]:void"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "36",
            "656",
            "657",
            "658",
            "659",
            "660",
            "661",
            "991",
            "992",
            "993",
            "994",
            "995",
            "996",
            "997",
            "998",
            "999",
            "1000",
            "1001"
          ],
          "num": 18
        },
        {
          "qualified_names": [
            "37",
            "657",
            "658",
            "993"
          ],
          "num": 4
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java\nindex 47668fc..54aa0ab 100644\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java\n@@ -34,6 +34,7 @@\n import org.apache.commons.compress.archivers.ArchiveEntry;\n import org.apache.commons.compress.archivers.ArchiveInputStream;\n import org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream;\n+import org.apache.commons.compress.utils.ArchiveUtils;\n import org.apache.commons.compress.utils.IOUtils;\n \n import static org.apache.commons.compress.archivers.zip.ZipConstants.DWORD;\n@@ -653,12 +654,8 @@\n         while (remaining \u003e 0) {\n             final long n \u003d in.read(buf.array(), 0, (int) Math.min(buf.capacity(), remaining));\n             if (n \u003c 0) {\n-                String name \u003d current.entry.getName();\n-                int idx \u003d firstUnprintableCharacter(current.entry.getName());\n-                if (idx \u003e\u003d 0) {\n-                    name \u003d \"corrupted name starting with \u0027\" + name.substring(0, idx) + \"\u0027\";\n-                }\n-                throw new EOFException(\"Truncated ZIP entry: \" + name);\n+                throw new EOFException(\"Truncated ZIP entry: \"\n+                                       + ArchiveUtils.sanitize(current.entry.getName()));\n             }\n             count(n);\n             remaining -\u003d n;\n@@ -988,17 +985,6 @@\n         return b \u003d\u003d ZipArchiveOutputStream.EOCD_SIG[0];\n     }\n \n-    private int firstUnprintableCharacter(String name) {\n-        final char[] chars \u003d name.toCharArray();\n-        final int len \u003d chars.length;\n-        for (int i \u003d 0; i \u003c len; i++) {\n-            if (Character.isISOControl(chars[i]) || !Character.isDefined(chars[i])) {\n-                return i;\n-            }\n-        }\n-        return -1;\n-    }\n-\n     /**\n      * Structure collecting information for the entry that is\n      * currently being read.\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "ImportDeclaration [1455,1509]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodInvocation [24611,24657]"
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [24468,24506]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [24523,24584]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [24601,24726]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: name [24792,24796]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [37348,37688]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java",
        "src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.compress.utils.ArchiveUtils:isArrayZero:[final byte[] a, final int size]:boolean"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "org.apache.commons.compress.utils.ArchiveUtils:sanitize:[String s]:String"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "253"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "254",
            "255",
            "256",
            "257",
            "258",
            "259",
            "260",
            "261",
            "262",
            "263",
            "264",
            "265",
            "266",
            "267",
            "268",
            "269",
            "270",
            "271",
            "272",
            "273",
            "274",
            "275",
            "276",
            "277",
            "278",
            "279",
            "280",
            "281",
            "282",
            "283",
            "284",
            "285",
            "286"
          ],
          "num": 33
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java b/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java\nindex e39e4f3..107bf0b 100644\n--- a/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java\n+++ b/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java\n@@ -251,4 +251,37 @@\n         }\n         return true;\n     }\n+\n+    /**\n+     * Returns a \"sanitized\" version of the string given as arguments,\n+     * where sanitized means non-printable characters have been\n+     * replaced with a question mark.\n+     *\n+     * \u003cp\u003eThis method is used to clean up file names when they are\n+     * used in exception messages as they may end up in log files or\n+     * as console output and may have been read from a corrupted\n+     * input.\u003c/p\u003e\n+     *\n+     * @param s the string to sanitize\n+     * @return a sanitized version of the argument\n+     * @since Compress 1.12\n+     */\n+    public static String sanitize(String s) {\n+        final char[] chars \u003d s.toCharArray();\n+        final int len \u003d chars.length;\n+        final StringBuilder sb \u003d new StringBuilder();\n+        for (int i \u003d 0; i \u003c len; i++) {\n+            final char c \u003d chars[i];\n+            if (!Character.isISOControl(c)) {\n+                Character.UnicodeBlock block \u003d Character.UnicodeBlock.of(c);\n+                if (block !\u003d null \u0026\u0026 block !\u003d Character.UnicodeBlock.SPECIALS) {\n+                    sb.append(c);\n+                    continue;\n+                }\n+            }\n+            sb.append(\u0027?\u0027);\n+        }\n+        return sb.toString();\n+    }\n+\n }\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [8988,10158]"
        }
      ]
    }
  ],
  "inducing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [
        "org.apache.commons.compress.utils.ArchiveUtils:sanitize:[String s]:String"
      ],
      "num": 1
    },
    "delete_functions": {
      "qualified_names": [
        "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:firstUnprintableCharacter:[String name]:int",
        "org.apache.commons.compress.utils.ArchiveUtils:isArrayZero:[final byte[] a, final int size]:boolean"
      ],
      "num": 2
    }
  },
  "trigger_tests": [
    {
      "test_class": "org.apache.commons.compress.ArchiveUtilsTest",
      "test_function": "sanitizeShortensString",
      "assertion_line": "82",
      "exception": "junit.framework.AssertionFailedError",
      "message": "expected:\u003c...23456789012345678901[...]\u003e but was:\u003c...23456789012345678901[234567890123456789012345678901234567890123456789]\u003e"
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java",
        "src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.compress.utils.ArchiveUtils:sanitize:[String s]:String"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "org.apache.commons.compress.utils.ArchiveUtils:sanitize:[String s]:String"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "21",
            "29",
            "258",
            "270"
          ],
          "num": 4
        },
        {
          "qualified_names": [
            "22",
            "31",
            "32",
            "261",
            "262",
            "274",
            "275",
            "276",
            "277",
            "278",
            "279",
            "280"
          ],
          "num": 12
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java b/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java\nindex 107bf0b..cd0165f 100644\n--- a/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java\n+++ b/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java\n@@ -19,6 +19,7 @@\n package org.apache.commons.compress.utils;\n \n import java.io.UnsupportedEncodingException;\n+import java.util.Arrays;\n \n import org.apache.commons.compress.archivers.ArchiveEntry;\n \n@@ -27,6 +28,8 @@\n  */\n public class ArchiveUtils {\n \n+    private static final int MAX_SANITIZED_NAME_LENGTH \u003d 255;\n+\n     /** Private constructor to prevent instantiation of this utility class. */\n     private ArchiveUtils(){\n     }\n@@ -255,7 +258,8 @@\n     /**\n      * Returns a \"sanitized\" version of the string given as arguments,\n      * where sanitized means non-printable characters have been\n-     * replaced with a question mark.\n+     * replaced with a question mark and the outcome is not longer\n+     * than 255 chars.\n      *\n      * \u003cp\u003eThis method is used to clean up file names when they are\n      * used in exception messages as they may end up in log files or\n@@ -267,7 +271,13 @@\n      * @since Compress 1.12\n      */\n     public static String sanitize(String s) {\n-        final char[] chars \u003d s.toCharArray();\n+        final char[] cs \u003d s.toCharArray();\n+        final char[] chars \u003d cs.length \u003c\u003d MAX_SANITIZED_NAME_LENGTH ? cs : Arrays.copyOf(cs, MAX_SANITIZED_NAME_LENGTH);\n+        if (cs.length \u003e MAX_SANITIZED_NAME_LENGTH) {\n+            for (int i \u003d MAX_SANITIZED_NAME_LENGTH - 3; i \u003c MAX_SANITIZED_NAME_LENGTH; i++) {\n+                chars[i] \u003d \u0027.\u0027;\n+            }\n+        }\n         final int len \u003d chars.length;\n         final StringBuilder sb \u003d new StringBuilder();\n         for (int i \u003d 0; i \u003c len; i++) {\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "ImportDeclaration [894,918]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldDeclaration [1050,1107]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [9761,9873]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [9882,10076]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: than 255 chars. [9289,9304]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  },
  "patch_changed_mths": {
    "qualified_names": [],
    "num": 0
  }
}