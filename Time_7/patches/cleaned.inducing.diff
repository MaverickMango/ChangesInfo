Only in data/changesInfo//Time_7/properties/modified_classes/inducing/JodaTime/src: main
Only in data/changesInfo//Time_7/properties/modified_classes/inducing/JodaTime/src/test/java/org/joda/time/format: TestDateTimeFormat.java
diff -u -r data/changesInfo//Time_7/properties/modified_classes/inducing/JodaTime/src/test/java/org/joda/time/format/TestDateTimeFormatter.java data/changesInfo//Time_7/cleaned/inducing/JodaTime/src/test/java/org/joda/time/format/TestDateTimeFormatter.java
--- data/changesInfo//Time_7/properties/modified_classes/inducing/JodaTime/src/test/java/org/joda/time/format/TestDateTimeFormatter.java	2023-12-27 22:48:46.899277269 -0800
+++ data/changesInfo//Time_7/cleaned/inducing/JodaTime/src/test/java/org/joda/time/format/TestDateTimeFormatter.java	2023-06-24 03:19:29.117000000 -0700
@@ -33,7 +33,6 @@
 import org.joda.time.MutableDateTime;
 import org.joda.time.ReadablePartial;
 import org.joda.time.chrono.BuddhistChronology;
-import org.joda.time.chrono.GJChronology;
 import org.joda.time.chrono.ISOChronology;
 
 /**
@@ -373,55 +372,6 @@
         } catch (IllegalArgumentException ex) {}
     }
 
-    public void testParseLocalDate_yearOfEra() {
-        Chronology chrono = GJChronology.getInstanceUTC();
-        DateTimeFormatter f = DateTimeFormat
-            .forPattern("YYYY-MM GG")
-            .withChronology(chrono)
-            .withLocale(Locale.UK);
-        
-        LocalDate date = new LocalDate(2005, 10, 1, chrono);
-        assertEquals(date, f.parseLocalDate("2005-10 AD"));
-        assertEquals(date, f.parseLocalDate("2005-10 CE"));
-        
-        date = new LocalDate(-2005, 10, 1, chrono);
-        assertEquals(date, f.parseLocalDate("2005-10 BC"));
-        assertEquals(date, f.parseLocalDate("2005-10 BCE"));
-    }
-
-    public void testParseLocalDate_yearOfCentury() {
-        Chronology chrono = GJChronology.getInstanceUTC();
-        DateTimeFormatter f = DateTimeFormat
-            .forPattern("yy M d")
-            .withChronology(chrono)
-            .withLocale(Locale.UK)
-            .withPivotYear(2050);
-        
-        LocalDate date = new LocalDate(2050, 8, 4, chrono);
-        assertEquals(date, f.parseLocalDate("50 8 4"));
-    }
-
-    public void testParseLocalDate_monthDay_feb29() {
-        Chronology chrono = GJChronology.getInstanceUTC();
-        DateTimeFormatter f = DateTimeFormat
-            .forPattern("M d")
-            .withChronology(chrono)
-            .withLocale(Locale.UK);
-        
-        assertEquals(new LocalDate(2000, 2, 29, chrono), f.parseLocalDate("2 29"));
-    }
-
-    public void testParseLocalDate_monthDay_withDefaultYear_feb29() {
-        Chronology chrono = GJChronology.getInstanceUTC();
-        DateTimeFormatter f = DateTimeFormat
-            .forPattern("M d")
-            .withChronology(chrono)
-            .withLocale(Locale.UK)
-            .withDefaultYear(2012);
-        
-        assertEquals(new LocalDate(2012, 2, 29, chrono), f.parseLocalDate("2 29"));
-    }
-
     //-----------------------------------------------------------------------
     public void testParseLocalTime_simple() {
         assertEquals(new LocalTime(10, 20, 30), g.parseLocalTime("2004-06-09T10:20:30Z"));
@@ -448,27 +398,6 @@
         } catch (IllegalArgumentException ex) {}
     }
 
-    public void testParseLocalDateTime_monthDay_feb29() {
-        Chronology chrono = GJChronology.getInstanceUTC();
-        DateTimeFormatter f = DateTimeFormat
-            .forPattern("M d H m")
-            .withChronology(chrono)
-            .withLocale(Locale.UK);
-        
-        assertEquals(new LocalDateTime(2000, 2, 29, 13, 40, 0, 0, chrono), f.parseLocalDateTime("2 29 13 40"));
-    }
-
-    public void testParseLocalDateTime_monthDay_withDefaultYear_feb29() {
-        Chronology chrono = GJChronology.getInstanceUTC();
-        DateTimeFormatter f = DateTimeFormat
-            .forPattern("M d H m")
-            .withChronology(chrono)
-            .withLocale(Locale.UK)
-            .withDefaultYear(2012);
-        
-        assertEquals(new LocalDateTime(2012, 2, 29, 13, 40, 0, 0, chrono), f.parseLocalDateTime("2 29 13 40"));
-    }
-
     //-----------------------------------------------------------------------
     public void testParseDateTime_simple() {
         DateTime expect = null;
@@ -836,4 +765,18 @@
         assertEquals("2005-10-30 02:00:01.0 EST", fmt.print(outDST_2));
     }
 
+    public void testParseInto_monthDay_feb29_newYork_startOfYear() {
+        DateTimeFormatter f = DateTimeFormat.forPattern("M d").withLocale(Locale.UK);
+        MutableDateTime result = new MutableDateTime(2004, 1, 1, 0, 0, 0, 0, NEWYORK);
+        assertEquals(4, f.parseInto(result, "2 29", 0));
+        assertEquals(new MutableDateTime(2004, 2, 29, 0, 0, 0, 0, NEWYORK), result);
+    }
+
+    public void testParseInto_monthDay_feb29_tokyo_endOfYear() {
+        DateTimeFormatter f = DateTimeFormat.forPattern("M d").withLocale(Locale.UK);
+        MutableDateTime result = new MutableDateTime(2004, 12, 31, 23, 59, 59, 999, TOKYO);
+        assertEquals(4, f.parseInto(result, "2 29", 0));
+        assertEquals(new MutableDateTime(2004, 2, 29, 23, 59, 59, 999, TOKYO), result);
+    }
+
 }
Only in data/changesInfo//Time_7/properties/modified_classes/inducing/: src
