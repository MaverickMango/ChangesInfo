{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "/home/liumengjiao/Desktop/CI/Benchmark/data/changesInfo/",
  "properties": {
    "trigger.tests": "org.apache.commons.math.util.MathUtilsTest::testBinomialCoefficientLarge",
    "test.dir": "src/test",
    "clz.modified": "org.apache.commons.math.util.MathUtils",
    "src.dir": "src/java"
  },
  "timeoutSecond": 100,
  "proj": "Math",
  "id": "92",
  "workingDir": "../bugs/Math_92_buggy",
  "buggyCommit": "63c7bc9d7cbee21a7f6acc5a9b85d1b8b0e3a205",
  "inducingCommit": "0a904461932f2c0455611e77ec6a8d8aced2980b",
  "originalCommit": "d5e5ca813228dac93f3111b3879e44e1642bf0cf",
  "bug_name": "Math_92",
  "derive": "defects4j",
  "original_fixing_commit": "85a8ab2dcfc26e83be1514acdb11d3feaac3e73d",
  "buildFiles_changed": true,
  "regression": false,
  "inducing_changes": [],
  "inducing_type": {
    "add_classes": {
      "qualified_names": [
        "src/java/org/apache/commons/math/ConvergenceException.java",
        "src/java/org/apache/commons/math/MathConfigurationException.java",
        "src/java/org/apache/commons/math/MathException.java",
        "src/java/org/apache/commons/math/analysis/BisectionSolver.java",
        "src/java/org/apache/commons/math/analysis/BrentSolver.java",
        "src/java/org/apache/commons/math/analysis/ConvergenceException.java",
        "src/java/org/apache/commons/math/analysis/CubicSplineFunction.java",
        "src/java/org/apache/commons/math/analysis/QuinticFunction.java",
        "src/java/org/apache/commons/math/analysis/RootFinding.java",
        "src/java/org/apache/commons/math/analysis/SecantSolver.java",
        "src/java/org/apache/commons/math/analysis/SinFunction.java",
        "src/java/org/apache/commons/math/analysis/SplineInterpolator.java",
        "src/java/org/apache/commons/math/analysis/UnivariateFunction.java",
        "src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java",
        "src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java",
        "src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java",
        "src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java",
        "src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java",
        "src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java",
        "src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java",
        "src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java",
        "src/java/org/apache/commons/math/complex/Complex.java",
        "src/java/org/apache/commons/math/complex/ComplexMath.java",
        "src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java",
        "src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java",
        "src/java/org/apache/commons/math/distribution/BinomialDistribution.java",
        "src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java",
        "src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java",
        "src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java",
        "src/java/org/apache/commons/math/distribution/ContinuousDistribution.java",
        "src/java/org/apache/commons/math/distribution/DiscreteDistribution.java",
        "src/java/org/apache/commons/math/distribution/DistributionFactory.java",
        "src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java",
        "src/java/org/apache/commons/math/distribution/ExponentialDistribution.java",
        "src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java",
        "src/java/org/apache/commons/math/distribution/FDistribution.java",
        "src/java/org/apache/commons/math/distribution/FDistributionImpl.java",
        "src/java/org/apache/commons/math/distribution/GammaDistribution.java",
        "src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java",
        "src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java",
        "src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java",
        "src/java/org/apache/commons/math/distribution/TDistribution.java",
        "src/java/org/apache/commons/math/distribution/TDistributionImpl.java",
        "src/java/org/apache/commons/math/linear/RealMatrix.java",
        "src/java/org/apache/commons/math/linear/RealMatrixImpl.java",
        "src/java/org/apache/commons/math/random/EmpiricalDistribution.java",
        "src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java",
        "src/java/org/apache/commons/math/random/RandomData.java",
        "src/java/org/apache/commons/math/random/RandomDataImpl.java",
        "src/java/org/apache/commons/math/random/ValueServer.java",
        "src/java/org/apache/commons/math/special/Beta.java",
        "src/java/org/apache/commons/math/special/Gamma.java",
        "src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java",
        "src/java/org/apache/commons/math/stat/AbstractUnivariate.java",
        "src/java/org/apache/commons/math/stat/Applyable.java",
        "src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java",
        "src/java/org/apache/commons/math/stat/BivariateRegression.java",
        "src/java/org/apache/commons/math/stat/Frequency.java",
        "src/java/org/apache/commons/math/stat/ListUnivariateImpl.java",
        "src/java/org/apache/commons/math/stat/StatUtils.java",
        "src/java/org/apache/commons/math/stat/StoreUnivariate.java",
        "src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java",
        "src/java/org/apache/commons/math/stat/TestStatistic.java",
        "src/java/org/apache/commons/math/stat/TestStatisticImpl.java",
        "src/java/org/apache/commons/math/stat/Univariate.java",
        "src/java/org/apache/commons/math/stat/UnivariateImpl.java",
        "src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java",
        "src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java",
        "src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java",
        "src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java",
        "src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java",
        "src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java",
        "src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java",
        "src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java",
        "src/java/org/apache/commons/math/stat/univariate/moment/Mean.java",
        "src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java",
        "src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java",
        "src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java",
        "src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java",
        "src/java/org/apache/commons/math/stat/univariate/moment/Variance.java",
        "src/java/org/apache/commons/math/stat/univariate/rank/Max.java",
        "src/java/org/apache/commons/math/stat/univariate/rank/Median.java",
        "src/java/org/apache/commons/math/stat/univariate/rank/Min.java",
        "src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java",
        "src/java/org/apache/commons/math/stat/univariate/summary/Product.java",
        "src/java/org/apache/commons/math/stat/univariate/summary/Sum.java",
        "src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java",
        "src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java",
        "src/java/org/apache/commons/math/util/BeanTransformer.java",
        "src/java/org/apache/commons/math/util/ContinuedFraction.java",
        "src/java/org/apache/commons/math/util/ContractableDoubleArray.java",
        "src/java/org/apache/commons/math/util/DefaultTransformer.java",
        "src/java/org/apache/commons/math/util/DoubleArray.java",
        "src/java/org/apache/commons/math/util/ExpandableDoubleArray.java",
        "src/java/org/apache/commons/math/util/FixedDoubleArray.java",
        "src/java/org/apache/commons/math/util/MathUtils.java",
        "src/java/org/apache/commons/math/util/NumberTransformer.java",
        "src/java/org/apache/commons/math/util/TransformerMap.java"
      ],
      "num": 98
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  },
  "trigger_tests": [
    {
      "test_class": "org.apache.commons.math.util.MathUtilsTest",
      "test_function": "testBinomialCoefficientLarge",
      "assertion_line": "195",
      "exception": "junit.framework.AssertionFailedError",
      "message": "48,22 expected:\u003c27385657281648\u003e but was:\u003c27385657281647\u003e"
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/math/util/MathUtils.java",
        "src/java/org/apache/commons/math/util/MathUtils.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.math.util.MathUtils:binomialCoefficientDouble:[final int n, final int k]:double",
            "org.apache.commons.math.util.MathUtils:binomialCoefficient:[final int n, final int k]:long",
            "org.apache.commons.math.util.MathUtils:binomialCoefficientLog:[final int n, final int k]:double"
          ],
          "num": 3
        },
        {
          "qualified_names": [
            "org.apache.commons.math.util.MathUtils:binomialCoefficient:[final int n, final int k]:long",
            "org.apache.commons.math.util.MathUtils:binomialCoefficientDouble:[final int n, final int k]:double",
            "org.apache.commons.math.util.MathUtils:binomialCoefficientLog:[final int n, final int k]:double"
          ],
          "num": 3
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "184",
            "185",
            "186",
            "187",
            "188",
            "216",
            "250",
            "264"
          ],
          "num": 8
        },
        {
          "qualified_names": [
            "184",
            "185",
            "186",
            "187",
            "188",
            "189",
            "190",
            "191",
            "192",
            "193",
            "194",
            "195",
            "196",
            "197",
            "198",
            "199",
            "200",
            "201",
            "202",
            "203",
            "204",
            "205",
            "206",
            "207",
            "208",
            "209",
            "210",
            "211",
            "212",
            "213",
            "214",
            "215",
            "216",
            "217",
            "218",
            "219",
            "247",
            "248",
            "249",
            "250",
            "251",
            "252",
            "253",
            "254",
            "255",
            "256",
            "257",
            "258",
            "259",
            "260",
            "261",
            "262",
            "263",
            "264",
            "265",
            "266",
            "267",
            "268",
            "269",
            "270",
            "271",
            "272",
            "273",
            "307",
            "309",
            "310",
            "311",
            "312",
            "313",
            "314",
            "315",
            "316",
            "317",
            "318",
            "319",
            "320",
            "321",
            "322",
            "323",
            "324",
            "325",
            "326",
            "327",
            "328",
            "341"
          ],
          "num": 85
        }
      ],
      "diff": "diff --git a/src/java/org/apache/commons/math/util/MathUtils.java b/src/java/org/apache/commons/math/util/MathUtils.java\nindex 8cb7590..03c92eb 100644\n--- a/src/java/org/apache/commons/math/util/MathUtils.java\n+++ b/src/java/org/apache/commons/math/util/MathUtils.java\n@@ -181,11 +181,42 @@\n         if ((k \u003d\u003d 1) || (k \u003d\u003d n - 1)) {\n             return n;\n         }\n-\n-        long result \u003d Math.round(binomialCoefficientDouble(n, k));\n-        if (result \u003d\u003d Long.MAX_VALUE) {\n-            throw new ArithmeticException(\n-                \"result too large to represent in a long integer\");\n+        // Use symmetry for large k\n+        if (k \u003e n / 2)\n+            return binomialCoefficient(n, n - k);\n+        \n+        // We use the formula\n+        // (n choose k) \u003d n! / (n-k)! / k!\n+        // (n choose k) \u003d\u003d ((n-k+1)*...*n) / (1*...*k)\n+        // which could be written\n+        // (n choose k) \u003d\u003d (n-1 choose k-1) * n / k\n+        long result \u003d 1;\n+        if (n \u003c\u003d 61) {\n+            // For n \u003c\u003d 61, the naive implementation cannot overflow.\n+            for (int j \u003d 1, i \u003d n - k + 1; j \u003c\u003d k; i++, j++) {\n+                result \u003d result * i / j;\n+            }\n+        } else if (n \u003c\u003d 66) {\n+            // For n \u003e 61 but n \u003c\u003d 66, the result cannot overflow,\n+            // but we must take care not to overflow intermediate values.\n+            for (int j \u003d 1, i \u003d n - k + 1; j \u003c\u003d k; i++, j++) {\n+                // We know that (result * i) is divisible by j,\n+                // but (result * i) may overflow, so we split j:\n+                // Filter out the gcd, d, so j/d and i/d are integer.\n+                // result is divisible by (j/d) because (j/d)\n+                // is relative prime to (i/d) and is a divisor of\n+                // result * (i/d).\n+                long d \u003d gcd(i, j);\n+                result \u003d (result / (j / d)) * (i / d);\n+            }\n+        } else {\n+            // For n \u003e 66, a result overflow might occur, so we check\n+            // the multiplication, taking care to not overflow\n+            // unnecessary.\n+            for (int j \u003d 1, i \u003d n - k + 1; j \u003c\u003d k; i++, j++) {\n+                long d \u003d gcd(i, j);\n+                result \u003d mulAndCheck((result / (j / d)), (i / d));\n+            }\n         }\n         return result;\n     }\n@@ -213,7 +244,33 @@\n      * @throws IllegalArgumentException if preconditions are not met.\n      */\n     public static double binomialCoefficientDouble(final int n, final int k) {\n-        return Math.floor(Math.exp(binomialCoefficientLog(n, k)) + 0.5);\n+        if (n \u003c k) {\n+            throw new IllegalArgumentException(\n+                \"must have n \u003e\u003d k for binomial coefficient (n,k)\");\n+        }\n+        if (n \u003c 0) {\n+            throw new IllegalArgumentException(\n+                \"must have n \u003e\u003d 0 for binomial coefficient (n,k)\");\n+        }\n+        if ((n \u003d\u003d k) || (k \u003d\u003d 0)) {\n+            return 1d;\n+        }\n+        if ((k \u003d\u003d 1) || (k \u003d\u003d n - 1)) {\n+            return n;\n+        }\n+        if (k \u003e n/2) {\n+            return binomialCoefficientDouble(n, n - k);\n+        }\n+        if (n \u003c 67) {\n+            return binomialCoefficient(n,k);\n+        }\n+        \n+        double result \u003d 1d;\n+        for (int i \u003d 1; i \u003c\u003d k; i++) {\n+             result *\u003d (double)(n - k + i) / (double)i;\n+        }\n+  \n+        return Math.floor(result + 0.5);\n     }\n     \n     /**\n@@ -247,8 +304,28 @@\n             return 0;\n         }\n         if ((k \u003d\u003d 1) || (k \u003d\u003d n - 1)) {\n-            return Math.log((double)n);\n+            return Math.log((double) n);\n         }\n+        \n+        /*\n+         * For values small enough to do exact integer computation,\n+         * return the log of the exact value \n+         */\n+        if (n \u003c 67) {  \n+            return Math.log(binomialCoefficient(n,k));\n+        }\n+        \n+        /*\n+         * Return the log of binomialCoefficientDouble for values that will not\n+         * overflow binomialCoefficientDouble\n+         */\n+        if (n \u003c 1030) { \n+            return Math.log(binomialCoefficientDouble(n, k));\n+        } \n+        \n+        /*\n+         * Sum logs for values that could overflow\n+         */\n         double logSum \u003d 0;\n \n         // n!/k!\n@@ -261,7 +338,7 @@\n             logSum -\u003d Math.log((double)i);\n         }\n \n-        return logSum;\n+        return logSum;      \n     }\n     \n     /**\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [6081,6145]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [6377,6393]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [6402,7673]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [8790,8928]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [8937,9075]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [9084,9144]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [9153,9216]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [9225,9305]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [9314,9382]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [9400,9419]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ForStatement [9428,9524]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [10974,11054]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [11221,11309]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: result [9554,9560]"
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [6046,6104]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [6113,6265]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodInvocation [7400,7438]",
          "to": ""
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  },
  "patch_changed_mths": {
    "qualified_names": [],
    "num": 0
  }
}