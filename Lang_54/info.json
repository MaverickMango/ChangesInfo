{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "data/changesInfo/",
  "timeoutSecond": 300,
  "proj": "Lang",
  "id": "54",
  "workingDir": "../bugs/Lang_54_buggy",
  "inducingCommit": "ddd4f84525178a0722ecbc01229d919d11c526f7",
  "originalCommit": "2cb189ef3bb4a6b4c4904ab254059fbe13a9e9d9",
  "bug_name": "Lang_54",
  "derive": "defects4j",
  "original_fixing_commit": "e89e8d62b911340cc5b293465cdae909f3dfd640",
  "buildFiles_changed": false,
  "inducing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/lang/LocaleUtils.java",
        "src/java/org/apache/commons/lang/LocaleUtils.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "localeLookupList",
            "localeLookupList",
            "languagesByCountry",
            "countriesByLanguage",
            "toLocale"
          ],
          "num": 5
        },
        {
          "qualified_names": [
            "localeLookupList",
            "availableLocaleList",
            "isAvailableLocale",
            "languagesByCountry",
            "countriesByLanguage",
            "localeLookupList",
            "availableLocaleSet",
            "toLocale"
          ],
          "num": 8
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "18",
            "36",
            "62",
            "69",
            "70",
            "71",
            "74",
            "75",
            "78",
            "81",
            "82",
            "85",
            "104",
            "120",
            "121",
            "125",
            "141",
            "146",
            "147",
            "148",
            "149",
            "151",
            "152",
            "154",
            "155",
            "156",
            "157",
            "158",
            "159",
            "160",
            "161",
            "162",
            "163",
            "170",
            "176",
            "178",
            "179",
            "180",
            "181",
            "182",
            "183",
            "184",
            "185",
            "189"
          ],
          "num": 44
        },
        {
          "qualified_names": [
            "19",
            "20",
            "21",
            "25",
            "41",
            "42",
            "43",
            "44",
            "45",
            "46",
            "47",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "77",
            "78",
            "79",
            "80",
            "81",
            "82",
            "83",
            "86",
            "93",
            "94",
            "97",
            "98",
            "99",
            "102",
            "105",
            "108",
            "109",
            "110",
            "111",
            "112",
            "113",
            "116",
            "117",
            "118",
            "135",
            "151",
            "152",
            "153",
            "157",
            "173",
            "178",
            "179",
            "180",
            "181",
            "182",
            "184",
            "186",
            "187",
            "188",
            "189",
            "190",
            "191",
            "192",
            "193",
            "194",
            "195",
            "196",
            "197",
            "198",
            "199",
            "200",
            "201",
            "202",
            "203",
            "204",
            "205",
            "212",
            "213",
            "214",
            "215",
            "216",
            "217",
            "218",
            "219",
            "220",
            "221",
            "222",
            "223",
            "224",
            "225",
            "226",
            "227",
            "228",
            "229",
            "230",
            "231",
            "232",
            "233",
            "234",
            "235",
            "236",
            "237",
            "238",
            "239",
            "240",
            "241",
            "242",
            "243",
            "244",
            "245",
            "246",
            "247",
            "248",
            "249",
            "250",
            "251",
            "252",
            "253",
            "254",
            "260",
            "262",
            "263",
            "264",
            "265",
            "266",
            "267",
            "268",
            "269",
            "270",
            "271",
            "272",
            "273",
            "274",
            "276",
            "277",
            "278",
            "280",
            "282"
          ],
          "num": 135
        }
      ],
      "diff": "diff --git a/src/java/org/apache/commons/lang/LocaleUtils.java b/src/java/org/apache/commons/lang/LocaleUtils.java\nindex f702446..4375948 100644\n--- a/src/java/org/apache/commons/lang/LocaleUtils.java\n+++ b/src/java/org/apache/commons/lang/LocaleUtils.java\n@@ -16,9 +16,13 @@\n package org.apache.commons.lang;\n \n import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Locale;\n+import java.util.Map;\n import java.util.Set;\n \n /**\n@@ -34,6 +38,19 @@\n  */\n public class LocaleUtils {\n \n+    /** Unmodifiable list of available locales. */\n+    private static final List cAvailableLocaleList;\n+    /** Unmodifiable set of available locales. */\n+    private static Set cAvailableLocaleSet;\n+    /** Unmodifiable map of language locales by country. */\n+    private static final Map cLanguagesByCountry \u003d Collections.synchronizedMap(new HashMap());\n+    /** Unmodifiable map of country locales by language. */\n+    private static final Map cCountriesByLanguage \u003d Collections.synchronizedMap(new HashMap());\n+    static {\n+        List list \u003d Arrays.asList(Locale.getAvailableLocales());\n+        cAvailableLocaleList \u003d Collections.unmodifiableList(list);\n+    }\n+\n     /**\n      * \u003cp\u003e\u003ccode\u003eLocaleUtils\u003c/code\u003e instances should NOT be constructed in standard programming.\n      * Instead, the class should be used as \u003ccode\u003eLocaleUtils.toLocale(\"en_GB\");\u003c/code\u003e.\u003c/p\u003e\n@@ -57,34 +74,48 @@\n      *   LocaleUtils.toLocale(\"en_GB\")  \u003d new Locale(\"en\", \"GB\")\n      *   LocaleUtils.toLocale(\"en_GB_xxx\")  \u003d new Locale(\"en\", \"GB\", \"xxx\")\n      * \u003c/pre\u003e\n+     * \n+     * \u003cp\u003eThis method validates the input strictly.\n+     * The language code must be lowercase.\n+     * The country code must be uppercase.\n+     * The separator must be an underscore.\n+     * The length must be correct.\n+     * \u003c/p\u003e\n      *\n      * @param str  the locale String to convert, null returns null\n-     * @return a Locale\n+     * @return a Locale, null if null input\n      * @throws IllegalArgumentException if the string is an invalid format\n      */\n     public static Locale toLocale(String str) {\n         if (str \u003d\u003d null) {\n             return null;\n         }\n-        if (str.length() !\u003d 2 \u0026\u0026\n-            str.length() !\u003d 5 \u0026\u0026\n-            str.length() \u003c 7) {\n+        int len \u003d str.length();\n+        if (len !\u003d 2 \u0026\u0026 len !\u003d 5 \u0026\u0026 len \u003c 7) {\n             throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n         }\n-        if (Character.isLowerCase(str.charAt(0)) \u003d\u003d false ||\n-            Character.isLowerCase(str.charAt(1)) \u003d\u003d false) {\n+        char ch0 \u003d str.charAt(0);\n+        char ch1 \u003d str.charAt(1);\n+        if (ch0 \u003c \u0027a\u0027 || ch0 \u003e \u0027z\u0027 || ch1 \u003c \u0027a\u0027 || ch1 \u003e \u0027z\u0027) {\n             throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n         }\n-        if (str.length() \u003d\u003d 2) {\n+        if (len \u003d\u003d 2) {\n             return new Locale(str, \"\");\n         } else {\n-            if (Character.isUpperCase(str.charAt(3)) \u003d\u003d false ||\n-                Character.isUpperCase(str.charAt(4)) \u003d\u003d false) {\n+            if (str.charAt(2) !\u003d \u0027_\u0027) {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n             }\n-            if (str.length() \u003d\u003d 5) {\n+            char ch3 \u003d str.charAt(3);\n+            char ch4 \u003d str.charAt(4);\n+            if (ch3 \u003c \u0027A\u0027 || ch3 \u003e \u0027Z\u0027 || ch4 \u003c \u0027A\u0027 || ch4 \u003e \u0027Z\u0027) {\n+                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+            }\n+            if (len \u003d\u003d 5) {\n                 return new Locale(str.substring(0, 2), str.substring(3, 5));\n             } else {\n+                if (str.charAt(5) !\u003d \u0027_\u0027) {\n+                    throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+                }\n                 return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));\n             }\n         }\n@@ -101,7 +132,7 @@\n      * \u003c/pre\u003e\n      *\n      * @param locale  the locale to start from\n-     * @return the list of Locale objects, 0 being locale\n+     * @return the unmodifiable list of Locale objects, 0 being locale, never null\n      */\n     public static List localeLookupList(Locale locale) {\n         return localeLookupList(locale, locale);\n@@ -117,12 +148,13 @@\n      *   \u003d [Locale(\"fr\",\"CA\",\"xxx\"), Locale(\"fr\",\"CA\"), Locale(\"fr\"), Locale(\"en\"]\n      * \u003c/pre\u003e\n      *\n-     * \u003cp\u003eThis method takes a country code and searches to find the\n-     * languages available for that country. Variant locales are removed.\u003c/p\u003e\n+     * \u003cp\u003eThe result list begins with the most specific locale, then the\n+     * next more general and so on, finishing with the default locale.\n+     * The list will never contain the same locale twice.\u003c/p\u003e\n      *\n      * @param locale  the locale to start from, null returns empty list\n      * @param defaultLocale  the default locale to use if no other is found\n-     * @return the list of Locale objects, 0 being locale\n+     * @return the unmodifiable list of Locale objects, 0 being locale, never null\n      */\n     public static List localeLookupList(Locale locale, Locale defaultLocale) {\n         List list \u003d new ArrayList(4);\n@@ -138,55 +170,116 @@\n                 list.add(defaultLocale);\n             }\n         }\n-        return list;\n+        return Collections.unmodifiableList(list);\n     }\n \n     //-----------------------------------------------------------------------\n     /**\n-     * \u003cp\u003eObtains the set of languages supported for a given country.\u003c/p\u003e\n-     \n-     * \u003cp\u003eThis method takes a country code and searches to find the\n-     * languages available for that country. Variant locales are removed.\u003c/p\u003e\n+     * \u003cp\u003eObtains an unmodifiable list of installed locales.\u003c/p\u003e\n+     * \n+     * \u003cp\u003eThis method is a wrapper around {@link Locale#getAvailableLocales()}.\n+     * It is more efficient, as the JDK method must create a new array each\n+     * time it is called.\u003c/p\u003e\n      *\n-     * @param countryCode  the 2 letter country code, null returns empty\n-     * @return a Set of Locale objects\n+     * @return the unmodifiable list of available locales\n      */\n-    public static Set languagesByCountry(String countryCode) {\n-        Set set \u003d new HashSet();\n-        Locale[] array \u003d Locale.getAvailableLocales();\n-        if (countryCode !\u003d null) {\n-            for (int i \u003d 0; i \u003c array.length; i++) {\n-                if (countryCode.equals(array[i].getCountry()) \u0026\u0026\n-                        array[i].getVariant().length() \u003d\u003d 0) {\n-                    set.add(array[i]);\n-                }\n-            }\n+    public static List availableLocaleList() {\n+        return cAvailableLocaleList;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * \u003cp\u003eObtains an unmodifiable set of installed locales.\u003c/p\u003e\n+     * \n+     * \u003cp\u003eThis method is a wrapper around {@link Locale#getAvailableLocales()}.\n+     * It is more efficient, as the JDK method must create a new array each\n+     * time it is called.\u003c/p\u003e\n+     *\n+     * @return the unmodifiable set of available locales\n+     */\n+    public static Set availableLocaleSet() {\n+        Set set \u003d cAvailableLocaleSet;\n+        if (set \u003d\u003d null) {\n+            set \u003d new HashSet(availableLocaleList());\n+            set \u003d Collections.unmodifiableSet(set);\n+            cAvailableLocaleSet \u003d set;\n         }\n         return set;\n     }\n \n     //-----------------------------------------------------------------------\n     /**\n-     * \u003cp\u003eObtains the set of countries supported for a given language.\u003c/p\u003e\n+     * \u003cp\u003eChecks if the locale specified is in the list of available locales.\u003c/p\u003e\n+     *\n+     * @return true if the locale is a known locale\n+     */\n+    public static boolean isAvailableLocale(Locale locale) {\n+        return cAvailableLocaleSet.contains(locale);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * \u003cp\u003eObtains the list of languages supported for a given country.\u003c/p\u003e\n+     *\n+     * \u003cp\u003eThis method takes a country code and searches to find the\n+     * languages available for that country. Variant locales are removed.\u003c/p\u003e\n+     *\n+     * @param countryCode  the 2 letter country code, null returns empty\n+     * @return an unmodifiable List of Locale objects, never null\n+     */\n+    public static List languagesByCountry(String countryCode) {\n+        List langs \u003d (List) cLanguagesByCountry.get(countryCode);\n+        if (langs \u003d\u003d null) {\n+            if (countryCode !\u003d null) {\n+                langs \u003d new ArrayList();\n+                List locales \u003d availableLocaleList();\n+                for (int i \u003d 0; i \u003c locales.size(); i++) {\n+                    Locale locale \u003d (Locale) locales.get(i);\n+                    if (countryCode.equals(locale.getCountry()) \u0026\u0026\n+                            locale.getVariant().length() \u003d\u003d 0) {\n+                        langs.add(locale);\n+                    }\n+                }\n+                langs \u003d Collections.unmodifiableList(langs);\n+            } else {\n+                langs \u003d Collections.EMPTY_LIST;\n+            }\n+            cLanguagesByCountry.put(countryCode, langs);\n+        }\n+        return langs;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * \u003cp\u003eObtains the list of countries supported for a given language.\u003c/p\u003e\n      * \n      * \u003cp\u003eThis method takes a language code and searches to find the\n      * countries available for that language. Variant locales are removed.\u003c/p\u003e\n      *\n      * @param languageCode  the 2 letter language code, null returns empty\n-     * @return a Set of Locale objects\n+     * @return an unmodifiable List of Locale objects, never null\n      */\n-    public static Set countriesByLanguage(String languageCode) {\n-        Set set \u003d new HashSet();\n-        Locale[] array \u003d Locale.getAvailableLocales();\n-        if (languageCode !\u003d null) {\n-            for (int i \u003d 0; i \u003c array.length; i++) {\n-                if (languageCode.equals(array[i].getLanguage()) \u0026\u0026\n-                        array[i].getVariant().length() \u003d\u003d 0) {\n-                    set.add(array[i]);\n+    public static List countriesByLanguage(String languageCode) {\n+        List countries \u003d (List) cCountriesByLanguage.get(languageCode);\n+        if (countries \u003d\u003d null) {\n+            if (languageCode !\u003d null) {\n+                countries \u003d new ArrayList();\n+                List locales \u003d availableLocaleList();\n+                for (int i \u003d 0; i \u003c locales.size(); i++) {\n+                    Locale locale \u003d (Locale) locales.get(i);\n+                    if (languageCode.equals(locale.getLanguage()) \u0026\u0026\n+                            locale.getCountry().length() !\u003d 0 \u0026\u0026\n+                            locale.getVariant().length() \u003d\u003d 0) {\n+                        countries.add(locale);\n+                    }\n                 }\n+                countries \u003d Collections.unmodifiableList(countries);\n+            } else {\n+                countries \u003d Collections.EMPTY_LIST;\n             }\n+            cCountriesByLanguage.put(languageCode, countries);\n         }\n-        return set;\n+        return countries;\n     }\n \n }\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "ImportDeclaration [681,705]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ImportDeclaration [706,735]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ImportDeclaration [736,761]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ImportDeclaration [836,857]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldDeclaration [1249,1347]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldDeclaration [1352,1441]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldDeclaration [1446,1596]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldDeclaration [1601,1752]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Initializer [1757,1903]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [6707,7132]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [7216,7841]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [7925,8197]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "VariableDeclarationStatement [3316,3339]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "VariableDeclarationStatement [3486,3511]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [3520,3545]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [8739,8796]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "IfStatement [8805,9505]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [10083,10146]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "IfStatement [10155,10953]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003cp\u003eThis method validates the input strictly. [2774,2818]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: The language code must be lowercase. [2826,2862]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: The country code must be uppercase. [2870,2905]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: The separator must be an underscore. [2913,2949]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: The length must be correct. [2957,2984]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003c/p\u003e [2992,2996]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "PrimitiveType: int [3316,3319]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "VariableDeclarationFragment [3320,3338]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "PrimitiveType: char [3486,3490]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "VariableDeclarationFragment [3491,3510]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: The list will never contain the same locale twice.\u003c/p\u003e [5690,5744]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "MethodInvocation [6582,6616]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "InfixExpression [8809,8822]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Block [8824,9505]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "InfixExpression [10159,10176]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Block [10178,10953]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: len [3320,3323]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "InfixExpression [3352,3372]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "InfixExpression [3376,3383]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: ch0 [3491,3494]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "InfixExpression [3558,3593]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "InfixExpression [3597,3606]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: len [3713,3716]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "VariableDeclarationStatement [3933,3958]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [3971,3996]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [4009,4163]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "METHOD_INVOCATION_RECEIVER [6582,6593]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: unmodifiableList [6594,6610]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "METHOD_INVOCATION_ARGUMENTS [6611,6615]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [9451,9495]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [10893,10943]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "InfixExpression [3352,3360]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "InfixExpression [3364,3372]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: len [3376,3379]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "PrimitiveType: char [3933,3937]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "VariableDeclarationFragment [3938,3957]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Block [9375,9438]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Block [10813,10880]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: len [3352,3355]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: len [3364,3367]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "CharacterLiteral: \u0027_\u0027 [3815,3818]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: ch3 [3938,3941]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: len [4180,4183]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [4306,4440]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [8881,8905]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [8922,8959]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [9311,9355]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [10236,10264]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [10281,10318]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [10741,10793]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodInvocation [8996,9010]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [9039,9079]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodInvocation [10355,10369]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [10398,10438]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "InfixExpression [10463,10569]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "InfixExpression [10601,10634]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "MethodInvocation [10463,10504]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "INFIX_EXPRESSION_OPERATOR: \u0026\u0026 [10505,10507]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "InfixExpression [10536,10569]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "MethodInvocation [10601,10629]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "METHOD_INVOCATION_ARGUMENTS [10483,10503]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "METHOD_INVOCATION_RECEIVER [10601,10620]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: locale [9246,9252]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "MethodInvocation [10483,10503]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "MethodInvocation [10601,10620]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: locale [10676,10682]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: locale [9123,9129]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "METHOD_INVOCATION_RECEIVER [10483,10489]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "METHOD_INVOCATION_RECEIVER [10601,10607]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: locale [9175,9181]"
        },
        {
          "type": "delete-node",
          "from": "InfixExpression [2299,2316]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "InfixExpression [2332,2349]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "InfixExpression [2299,2349]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "InfixExpression [2365,2381]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "METHOD_INVOCATION_RECEIVER [2488,2497]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: isLowerCase [2498,2509]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "METHOD_INVOCATION_ARGUMENTS [2510,2523]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "MethodInvocation [2488,2524]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "INFIX_EXPRESSION_OPERATOR: \u003d\u003d [2525,2527]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "BooleanLiteral: false [2528,2533]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "InfixExpression [2488,2533]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "InfixExpression [2549,2594]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "METHOD_INVOCATION_RECEIVER [2860,2869]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: isUpperCase [2870,2881]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "METHOD_INVOCATION_ARGUMENTS [2882,2895]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "MethodInvocation [2860,2896]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "BooleanLiteral: false [2900,2905]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "METHOD_INVOCATION_RECEIVER [2795,2804]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: isUpperCase [2805,2816]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "METHOD_INVOCATION_ARGUMENTS [2817,2830]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "MethodInvocation [2795,2831]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "INFIX_EXPRESSION_OPERATOR: \u003d\u003d [2832,2834]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "BooleanLiteral: false [2835,2840]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "InfixExpression [2795,2840]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "INFIX_EXPRESSION_OPERATOR: || [2841,2843]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "InfixExpression [2795,2905]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "QualifiedName: array.length [5844,5856]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ArrayAccess [5904,5912]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ArrayAccess [5954,5962]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ArrayAccess [6021,6029]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [5697,5721]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [5730,5776]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "QualifiedName: array.length [6768,6780]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "METHOD_INVOCATION_RECEIVER [6829,6837]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "MethodInvocation [6829,6851]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "METHOD_INVOCATION_ARGUMENTS [6829,6851]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "MethodInvocation [6809,6852]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "METHOD_INVOCATION_RECEIVER [6880,6888]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "MethodInvocation [6880,6901]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "METHOD_INVOCATION_RECEIVER [6880,6901]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "MethodInvocation [6880,6910]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "InfixExpression [6880,6915]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ArrayAccess [6947,6955]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [6620,6644]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [6653,6699]",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        }
      ]
    }
  ],
  "inducing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [
        "availableLocaleList",
        "availableLocaleSet",
        "isAvailableLocale"
      ],
      "num": 3
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  },
  "trigger_tests": [],
  "fixing_changes": [],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  }
}