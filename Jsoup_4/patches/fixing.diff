diff --git a/CHANGES b/CHANGES
index d46cd83..8be687b 100644
--- a/CHANGES
+++ b/CHANGES
@@ -4,6 +4,9 @@
  * Removed dependency on Apache Commons-lang. Jsoup now has no external dependencies.
 
  * Further speed optimisations for parsing and output generation.
+ 
+ * Fixed support for case-sensitive HTML escape entities.
+   <http://github.com/jhy/jsoup/issues/issue/31>
 
 *** Release 1.2.3 [2010-Aug-04]
  * Added support for automatic input character set detection and decoding. Jsoup now automatically detects the encoding
diff --git a/src/main/java/org/jsoup/nodes/Entities.java b/src/main/java/org/jsoup/nodes/Entities.java
index 0231ec6..ad825d3 100644
--- a/src/main/java/org/jsoup/nodes/Entities.java
+++ b/src/main/java/org/jsoup/nodes/Entities.java
@@ -18,7 +18,6 @@
         base, extended
     }
 
-    private static final Map<String, Character> base;
     private static final Map<String, Character> full;
     private static final Map<Character, String> baseByVal;
     private static final Map<Character, String> fullByVal;
@@ -62,7 +61,7 @@
                 } catch (NumberFormatException e) {
                 } // skip
             } else {
-                String name = m.group(1).toLowerCase();
+                String name = m.group(1);
                 if (full.containsKey(name))
                     charval = full.get(name);
             }
@@ -2227,20 +2226,18 @@
     };
 
     static {
-        base = new HashMap<String, Character>(baseArray.length);
         full = new HashMap<String, Character>(fullArray.length);
         baseByVal = new HashMap<Character, String>(baseArray.length);
         fullByVal = new HashMap<Character, String>(fullArray.length);
 
         for (Object[] entity : baseArray) {
             Character c = Character.valueOf((char) ((Integer) entity[1]).intValue());
-            base.put((String) entity[0], c);
-            baseByVal.put(c, ((String) entity[0]).toLowerCase());
+            baseByVal.put(c, ((String) entity[0]));
         }
         for (Object[] entity : fullArray) {
             Character c = Character.valueOf((char) ((Integer) entity[1]).intValue());
             full.put((String) entity[0], c);
-            fullByVal.put(c, ((String) entity[0]).toLowerCase());
+            fullByVal.put(c, ((String) entity[0]));
         }
     }
 
diff --git a/src/test/java/org/jsoup/nodes/EntitiesTest.java b/src/test/java/org/jsoup/nodes/EntitiesTest.java
index cdf84f6..3eeba5b 100644
--- a/src/test/java/org/jsoup/nodes/EntitiesTest.java
+++ b/src/test/java/org/jsoup/nodes/EntitiesTest.java
@@ -9,21 +9,29 @@
 
 public class EntitiesTest {
     @Test public void escape() {
-        String text = "Hello &<> Å π 新 there";
+        String text = "Hello &<> Å å π 新 there";
         String escapedAscii = Entities.escape(text, Charset.forName("ascii").newEncoder(), Entities.EscapeMode.base);
         String escapedAsciiFull = Entities.escape(text, Charset.forName("ascii").newEncoder(), Entities.EscapeMode.extended);
         String escapedUtf = Entities.escape(text, Charset.forName("UTF-8").newEncoder(), Entities.EscapeMode.base);
 
-        assertEquals("Hello &amp;&lt;&gt; &aring; &#960; &#26032; there", escapedAscii);
-        assertEquals("Hello &amp;&lt;&gt; &angst; &pi; &#26032; there", escapedAsciiFull);
-        assertEquals("Hello &amp;&lt;&gt; &aring; π 新 there", escapedUtf);
+        assertEquals("Hello &amp;&lt;&gt; &Aring; &aring; &#960; &#26032; there", escapedAscii);
+        assertEquals("Hello &amp;&lt;&gt; &angst; &aring; &pi; &#26032; there", escapedAsciiFull);
+        assertEquals("Hello &amp;&lt;&gt; &Aring; &aring; π 新 there", escapedUtf);
         // odd that it's defined as aring in base but angst in full
     }
 
     @Test public void unescape() {
-        String text = "Hello &amp;&LT&gt; &ANGST &#960; &#960 &#x65B0; there &!";
+        String text = "Hello &amp;&LT&gt; &angst &#960; &#960 &#x65B0; there &!";
         assertEquals("Hello &<> Å π π 新 there &!", Entities.unescape(text));
 
         assertEquals("&0987654321; &unknown", Entities.unescape("&0987654321; &unknown"));
     }
+    
+    @Test public void caseSensitive() {
+        String unescaped = "Ü ü & &";
+        assertEquals("&Uuml; &uuml; &amp; &amp;", Entities.escape(unescaped, Charset.forName("ascii").newEncoder(), Entities.EscapeMode.extended));
+        
+        String escaped = "&Uuml; &uuml; &amp; &AMP";
+        assertEquals("Ü ü & &", Entities.unescape(escaped));
+    }
 }
