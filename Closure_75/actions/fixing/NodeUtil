===
insert-tree
---
SimpleType [11059,11071]
    SimpleName: TernaryValue [11059,11071]
to
MethodDeclaration [10826,11326]
at 2
===
insert-tree
---
IfStatement [9429,9538]
    MethodInvocation [9433,9463]
        METHOD_INVOCATION_RECEIVER [9433,9444]
            SimpleName: rawJsString [9433,9444]
        SimpleName: contains [9445,9453]
        METHOD_INVOCATION_ARGUMENTS [9454,9462]
            StringLiteral: "\u000b" [9454,9462]
    Block [9465,9538]
        ReturnStatement [9520,9532]
            NullLiteral [9527,9531]
to
Block [9423,10523]
at 0
===
move-tree
---
SwitchCase [11104,11118]
    CharacterLiteral: '\u000B' [11109,11117]
to
SwitchStatement [10925,11322]
at 1
===
insert-tree
---
ReturnStatement [11155,11183]
    QualifiedName: TernaryValue.UNKNOWN [11162,11182]
to
SwitchStatement [10925,11322]
at 2
===
insert-tree
---
ReturnStatement [11529,11641]
    ConditionalExpression [11536,11640]
        ParenthesizedExpression [11536,11587]
            InfixExpression [11537,11586]
                MethodInvocation [11537,11557]
                    METHOD_INVOCATION_RECEIVER [11537,11546]
                        SimpleName: Character [11537,11546]
                    SimpleName: getType [11547,11554]
                    METHOD_INVOCATION_ARGUMENTS [11555,11556]
                        SimpleName: c [11555,11556]
                INFIX_EXPRESSION_OPERATOR: == [11558,11560]
                QualifiedName: Character.SPACE_SEPARATOR [11561,11586]
        QualifiedName: TernaryValue.TRUE [11602,11619]
        QualifiedName: TernaryValue.FALSE [11622,11640]
to
SwitchStatement [10925,11322]
at 14
===
insert-node
---
InfixExpression [10760,10819]
to
InfixExpression [10626,10673]
at 2
===
insert-node
---
InfixExpression [10876,10933]
to
InfixExpression [10707,10758]
at 2
===
insert-node
---
QualifiedName: TernaryValue.TRUE [11487,11504]
to
ReturnStatement [11223,11235]
at 0
===
move-tree
---
MethodInvocation [10637,10673]
    SimpleName: isStrWhiteSpaceChar [10637,10656]
    METHOD_INVOCATION_ARGUMENTS [10657,10672]
        MethodInvocation [10657,10672]
            METHOD_INVOCATION_RECEIVER [10657,10658]
                SimpleName: s [10657,10658]
            SimpleName: charAt [10659,10665]
            METHOD_INVOCATION_ARGUMENTS [10666,10671]
                InfixExpression [10666,10671]
                    SimpleName: end [10666,10669]
                    INFIX_EXPRESSION_OPERATOR: - [10669,10670]
                    NumberLiteral: 1 [10670,10671]
to
InfixExpression [10760,10819]
at 0
===
insert-node
---
INFIX_EXPRESSION_OPERATOR: == [10799,10801]
to
InfixExpression [10760,10819]
at 1
===
insert-node
---
QualifiedName: TernaryValue.TRUE [10802,10819]
to
InfixExpression [10760,10819]
at 2
===
move-tree
---
MethodInvocation [10722,10758]
    SimpleName: isStrWhiteSpaceChar [10722,10741]
    METHOD_INVOCATION_ARGUMENTS [10742,10757]
        MethodInvocation [10742,10757]
            METHOD_INVOCATION_RECEIVER [10742,10743]
                SimpleName: s [10742,10743]
            SimpleName: charAt [10744,10750]
            METHOD_INVOCATION_ARGUMENTS [10751,10756]
                SimpleName: start [10751,10756]
to
InfixExpression [10876,10933]
at 0
===
insert-node
---
INFIX_EXPRESSION_OPERATOR: == [10913,10915]
to
InfixExpression [10876,10933]
at 1
===
insert-node
---
QualifiedName: TernaryValue.TRUE [10916,10933]
to
InfixExpression [10876,10933]
at 2
===
delete-node
---
PrimitiveType: boolean [10884,10891]
===
===
delete-node
---
BooleanLiteral: true [11230,11234]
===
===
delete-tree
---
ReturnStatement [11259,11316]
    InfixExpression [11266,11315]
        MethodInvocation [11266,11286]
            METHOD_INVOCATION_RECEIVER [11266,11275]
                SimpleName: Character [11266,11275]
            SimpleName: getType [11276,11283]
            METHOD_INVOCATION_ARGUMENTS [11284,11285]
                SimpleName: c [11284,11285]
        INFIX_EXPRESSION_OPERATOR: == [11287,11289]
        QualifiedName: Character.SPACE_SEPARATOR [11290,11315]
