diff --git a/contrib/externs/facebook_javascript_sdk.js b/contrib/externs/facebook_javascript_sdk.js
deleted file mode 100644
index f471fbb..0000000
--- a/contrib/externs/facebook_javascript_sdk.js
+++ /dev/null
@@ -1,142 +0,0 @@
-/*
- * Copyright 2010 The Closure Compiler Authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-/**
- * @fileoverview Externs for Facebook Javascript SDK
- * @see http://developers.facebook.com/docs/reference/javascript/
- * @externs
- */
-
-/** @const */
-var FB = {};
-
-/**
- * @see http://developers.facebook.com/docs/reference/javascript/fb.getsession/
- * @return {Object.<*,*>}
- */
-FB.getSession = function() { };
-
-/**
- * @see http://developers.facebook.com/docs/reference/javascript/fb.api/
- * @param {string} path
- * @param {(string|Object.<string, *>|function(Object.<*,*>))=} method
- * @param {(Object.<string, *>|function(Object.<*,*>))=} params
- * @param {function(Object.<*,*>)=} callback  
- */
-FB.api = function(path, method, params, callback) { };
-
-/**
- * @see http://developers.facebook.com/docs/reference/javascript/fb.getloginstatus/
- * @param {function(Object.<*,*>)} callback
- * @param {boolean=} force
- */
-FB.getLoginStatus = function(callback, force) {};
-
-/**
- * @see http://developers.facebook.com/docs/reference/javascript/fb.init/
- * @param {Object.<string,*>=} opt_opts
- */
-FB.init = function(opt_opts) {};
-
-/**
- * @see http://developers.facebook.com/docs/reference/javascript/fb.login/
- * @param {function(Object.<*,*>)} callback
- * @param {Object.<string,*>=} opt_opts
- */
-FB.login = function(callback, opt_opts) {};
-
-/**
- * @see http://developers.facebook.com/docs/reference/javascript/fb.logout/
- * @param {function(Object.<*,*>)=} callback
- */
-FB.logout = function(callback) {};
-
-/**
- * @see http://developers.facebook.com/docs/reference/javascript/fb.ui/
- * @param {Object.<string, *>} params
- * @param {function(Object.<*,*>)=} callback  
- */
-FB.ui = function(params, callback) { };
-
-/** @const */
-FB.Event = {};
-
-/**
- * @see http://developers.facebook.com/docs/reference/javascript/fb.Event.subscribe/
- * @param {string} eventName
- * @param {function(Object.<*,*>)} callback  
- */
-FB.Event.subscribe = function(eventName, callback) {};
-
-/**
- * @see http://developers.facebook.com/docs/reference/javascript/fb.Event.unsubscribe/
- * @param {string} eventName
- * @param {function(Object.<*,*>)} callback  
- */
-FB.Event.unsubscribe = function(eventName, callback) {};
-
-/** @const */
-FB.XFBML = {};
-
-/**
- * @see http://developers.facebook.com/docs/reference/javascript/fb.XFBML.parse/
- * @param {Element=} node
- * @param {function(Object.<*,*>)=} callback
- */
-FB.XFBML.parse = function(node, callback) {};
-
-/** @const */
-FB.Data = {};
-
-/**
- * This object is not constructed directly. It is returned by calls to
- * FB.Data.Query.
- * @constructor
- * @private
- */
-FB.Data.queryObject = function() {};
-
-/**
- * @see http://developers.facebook.com/docs/reference/javascript/fb.data.query/
- * @param {string} template
- * @param {...(string|number|FB.Data.queryObject)} var_data
- * @return {FB.Data.queryObject}
- */
-FB.Data.query = function(template, var_data) {};
-
-/**
- * @see http://developers.facebook.com/docs/reference/javascript/fb.data.waiton/
- * @param {Array.<*>} dependencies
- * @param {function(Object.<*,*>)} callback
- * @return {Object.<*,*>}
- */
-FB.Data.waitOn = function(dependencies, callback) {};
-
-/** @const */
-FB.Canvas = {};
-
-/**
- * @see http://developers.facebook.com/docs/reference/javascript/fb.Canvas.setAutoResize/
- * @param {(boolean|number)=} onOrOff
- * @param {number=} interval
- */
-FB.Canvas.setAutoResize = function(onOrOff, interval) {};
-
-/**
- * @see http://developers.facebook.com/docs/reference/javascript/fb.Canvas.setSize/
- * @param {Object.<*, number>} params
- */
-FB.Canvas.setSize = function(params) {};
\ No newline at end of file
diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
index fce4f17..de6b020 100644
--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
@@ -18,6 +18,7 @@
 
 import com.google.common.base.Preconditions;
 import com.google.common.collect.Lists;
+import com.google.javascript.jscomp.mozilla.rhino.ScriptRuntime;
 import com.google.javascript.rhino.Node;
 import com.google.javascript.rhino.Token;
 import com.google.javascript.rhino.jstype.TernaryValue;
@@ -77,11 +78,14 @@
         return tryFoldTypeof(subtree);
 
       case Token.NOT:
+      case Token.POS:
       case Token.NEG:
       case Token.BITNOT:
+        tryReduceOperandsForOp(subtree);
         return tryFoldUnaryOperator(subtree);
 
       default:
+        tryReduceOperandsForOp(subtree);
         return tryFoldBinaryOperator(subtree);
     }
   }
@@ -155,6 +159,98 @@
     }
   }
 
+  private void tryReduceOperandsForOp(Node n) {
+    switch (n.getType()) {
+      case Token.ADD:
+        Node left = n.getFirstChild();
+        Node right = n.getLastChild();
+        if (!NodeUtil.mayBeString(left) && !NodeUtil.mayBeString(right)) {
+          tryConvertOperandsToNumber(n);
+        }
+        break;
+      case Token.ASSIGN_BITOR:
+      case Token.ASSIGN_BITXOR:
+      case Token.ASSIGN_BITAND:
+        // TODO(johnlenz): convert these to integers.
+      case Token.ASSIGN_LSH:
+      case Token.ASSIGN_RSH:
+      case Token.ASSIGN_URSH:
+      case Token.ASSIGN_SUB:
+      case Token.ASSIGN_MUL:
+      case Token.ASSIGN_MOD:
+      case Token.ASSIGN_DIV:
+        tryConvertToNumber(n.getLastChild());
+        break;
+      case Token.BITNOT:
+      case Token.BITOR:
+      case Token.BITXOR:
+      case Token.BITAND:
+      case Token.LSH:
+      case Token.RSH:
+      case Token.URSH:
+      case Token.SUB:
+      case Token.MUL:
+      case Token.MOD:
+      case Token.DIV:
+      case Token.POS:
+      case Token.NEG:
+        tryConvertOperandsToNumber(n);
+        break;
+    }
+  }
+
+  private void tryConvertOperandsToNumber(Node n) {
+    Node next;
+    for (Node c = n.getFirstChild(); c != null; c = next) {
+      next = c.getNext();
+      tryConvertToNumber(c);
+    }
+  }
+
+  private void tryConvertToNumber(Node n) {
+    switch (n.getType()) {
+      case Token.NUMBER:
+        // Nothing to do
+        return;
+      case Token.AND:
+      case Token.OR:
+      case Token.COMMA:
+        tryConvertToNumber(n.getLastChild());
+        return;
+      case Token.HOOK:
+        tryConvertToNumber(n.getChildAtIndex(1));
+        tryConvertToNumber(n.getLastChild());
+        return;
+      case Token.NAME:
+        if (!NodeUtil.isUndefined(n)) {
+          return;
+        }
+        break;
+    }
+
+    Double result = NodeUtil.getNumberValue(n);
+    if (result == null) {
+      return;
+    }
+
+    double value = result;
+
+    Node replacement;
+    if (Double.isNaN(value)) {
+      replacement = Node.newString(Token.NAME, "NaN");
+    } else if (value == Double.POSITIVE_INFINITY) {
+      replacement = Node.newString(Token.NAME, "Infinity");
+    } else if (value == Double.NEGATIVE_INFINITY) {
+      replacement = new Node(Token.NEG, Node.newString(Token.NAME, "Infinity"));
+      replacement.copyInformationFromForTree(n);
+    } else {
+      replacement = Node.newNumber(value);
+    }
+
+    n.getParent().replaceChild(n, replacement);
+    reportCodeChange();
+  }
+
   /**
    * Folds 'typeof(foo)' if foo is a literal, e.g.
    * typeof("bar") --> "string"
@@ -234,6 +330,14 @@
         parent.replaceChild(n, replacementNode);
         reportCodeChange();
         return replacementNode;
+      case Token.POS:
+        if (NodeUtil.isNumericResult(left)) {
+          // POS does nothing to numeric values.
+          parent.replaceChild(n, left.detachFromParent());
+          reportCodeChange();
+          return left;
+        }
+        return n;
       case Token.NEG:
         try {
           if (left.getType() == Token.NAME) {
@@ -506,6 +610,7 @@
   private Node tryFoldArithmeticOp(Node n, Node left, Node right) {
     Node result = performArithmeticOp(n.getType(), left, right);
     if (result != null) {
+      result.copyInformationFromForTree(n);
       n.getParent().replaceChild(n, result);
       reportCodeChange();
       return result;
@@ -527,6 +632,9 @@
 
     double result;
 
+    // TODO(johnlenz): Handle NaN with unknown value. BIT ops convert NaN
+    // to zero so this is a little akward here.
+
     Double lValObj = NodeUtil.getNumberValue(left);
     if (lValObj == null) {
       return null;
@@ -541,22 +649,13 @@
 
     switch (opType) {
       case Token.BITAND:
-        if (!areValidInts(lval, rval)) {
-          return null;
-        }
-        result = (int)lval & (int)rval;
+        result = ScriptRuntime.toInt32(lval) & ScriptRuntime.toInt32(rval);
         break;
       case Token.BITOR:
-        if (!areValidInts(lval, rval)) {
-          return null;
-        }
-        result = (int)lval | (int)rval;
+        result = ScriptRuntime.toInt32(lval) | ScriptRuntime.toInt32(rval);
         break;
       case Token.BITXOR:
-        if (!areValidInts(lval, rval)) {
-          return null;
-        }
-        result = (int)lval ^ (int)rval;
+        result = ScriptRuntime.toInt32(lval) ^ ScriptRuntime.toInt32(rval);
         break;
       case Token.ADD:
         result = lval + rval;
@@ -607,22 +706,6 @@
   }
 
   /**
-   * @return Whether the double can be precisely represented as a int.
-   */
-  private boolean isValidInt(double val) {
-    return !(val < Integer.MIN_VALUE || val > Integer.MAX_VALUE)
-        && val == (int)val;
-  }
-
-  /**
-   * @return Whether the parameters are doubles can be precisely represented
-   * as a int.
-   */
-  private boolean areValidInts(double val1, double val2) {
-    return isValidInt(val1) && isValidInt(val2);
-  }
-
-  /**
    * Expressions such as [foo() * 10 * 20] generate parse trees
    * where no node has two const children ((foo() * 10) * 20), so
    * performArithmeticOp() won't fold it -- tryFoldLeftChildOp() will.
@@ -633,30 +716,33 @@
    */
   private Node tryFoldLeftChildOp(Node n, Node left, Node right) {
     int opType = n.getType();
-    // Note: ADD is not associative when used as a string concat operator.
+    // TODO(johnlenz): Add support for ADD in numberic contexts.
     Preconditions.checkState(
       NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType));
-    // TODO(johnlenz): create and use a getNumberValue.
-    if (right.getType() == Token.NUMBER && left.getType() == opType) {
+
+    // Use getNumberValue to handle constants like "NaN" and "Infinity"
+    // other values are converted to numbers elsewhere.
+    Double rightValObj = NodeUtil.getNumberValue(right);
+    if (rightValObj != null && left.getType() == opType) {
       Preconditions.checkState(left.getChildCount() == 2);
 
       Node ll = left.getFirstChild();
       Node lr = ll.getNext();
 
-      Node valueToCombine;
-      if (ll.getType() == Token.NUMBER) {
-        valueToCombine = ll;
-      } else if (lr.getType() == Token.NUMBER) {
-        valueToCombine = lr;
-      } else {
-        // Nothing to do.
-        return n;
-      }
-
+      Node valueToCombine = ll;
       Node replacement = performArithmeticOp(opType, valueToCombine, right);
+      if (replacement == null) {
+        valueToCombine = lr;
+        replacement = performArithmeticOp(opType, valueToCombine, right);
+      }
       if (replacement != null) {
+        // Remove the child that has been combined
         left.removeChild(valueToCombine);
+        // Replace the left op with the remaining child.
         n.replaceChild(left, left.removeFirstChild());
+        // New "-Infinity" node need location info explicitly
+        // added.
+        replacement.copyInformationFromForTree(right);
         n.replaceChild(right, replacement);
         reportCodeChange();
       }
diff --git a/test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java b/test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java
index 72cbf23..d596d8a 100644
--- a/test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java
+++ b/test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java
@@ -188,6 +188,19 @@
     fold("a=~~0", "a=0");
     fold("a=~~10", "a=10");
     fold("a=~-7", "a=6");
+
+    fold("a=+true", "a=1");
+    fold("a=+10", "a=10");
+    fold("a=+false", "a=0");
+    foldSame("a=+foo()");
+    foldSame("a=+f");
+    fold("a=+(f?true:false)", "a=+(f?1:0)"); // TODO(johnlenz): foldable
+    fold("a=+0", "a=0");
+    fold("a=+Infinity", "a=Infinity");
+    fold("a=+NaN", "a=NaN");
+    fold("a=+-7", "a=-7");
+    fold("a=+.5", "a=.5");
+
     fold("a=~0x100000000", "a=~0x100000000",
          PeepholeFoldConstants.BITWISE_OPERAND_OUT_OF_RANGE);
     fold("a=~-0x100000000", "a=~-0x100000000",
@@ -212,7 +225,7 @@
     fold("x = 3 || x", "x = 3");
     fold("x = false || 0", "x = 0");
 
-    // surprisingly unfoldable
+    // unfoldable, because the right-side may be the result
     fold("a = x && true", "a=x&&true");
     fold("a = x && false", "a=x&&false");
     fold("a = x || 3", "a=x||3");
@@ -270,16 +283,17 @@
 
     // make sure we fold only when we are supposed to -- not when doing so would
     // lose information or when it is performed on nonsensical arguments.
-    fold("x = 1 & 1.1", "x = 1&1.1");
-    fold("x = 1.1 & 1", "x = 1.1&1");
-    fold("x = 1 & 3000000000", "x = 1&3000000000");
-    fold("x = 3000000000 & 1", "x = 3000000000&1");
+    fold("x = 1 & 1.1", "x = 1");
+    fold("x = 1.1 & 1", "x = 1");
+    fold("x = 1 & 3000000000", "x = 0");
+    fold("x = 3000000000 & 1", "x = 0");
 
     // Try some cases with | as well
     fold("x = 1 | 4", "x = 5");
     fold("x = 1 | 3", "x = 3");
-    fold("x = 1 | 1.1", "x = 1|1.1");
-    fold("x = 1 | 3000000000", "x = 1|3000000000");
+    fold("x = 1 | 1.1", "x = 1");
+    foldSame("x = 1 | 3E9");
+    fold("x = 1 | 3000000001", "x = -1294967295");
   }
 
   public void testFoldBitwiseOp2() {
@@ -303,6 +317,31 @@
     fold("x = 3 ^ y ^ 1", "x = y ^ 2");
     fold("x = y ^ 3 ^ 3", "x = y ^ 0");
     fold("x = 3 ^ y ^ 3", "x = y ^ 0");
+
+    fold("x = Infinity | NaN", "x=0");
+    fold("x = 12 | NaN", "x=12");
+  }
+
+  public void testFoldingMixTypes() {
+    fold("x = x + '2'", "x+='2'");
+    fold("x = +x + +'2'", "x = +x + 2");
+    fold("x = x - '2'", "x-=2");
+    fold("x = x ^ '2'", "x^=2");
+    fold("x = '2' ^ x", "x^=2");
+    fold("x = '2' & x", "x&=2");
+    fold("x = '2' | x", "x|=2");
+
+    fold("x = '2' | y", "x=2|y");
+    fold("x = y | '2'", "x=y|2");
+    fold("x = y | (a && '2')", "x=y|(a&&2)");
+    fold("x = y | (a,'2')", "x=y|(a,2)");
+    fold("x = y | (a?'1':'2')", "x=y|(a?1:2)");
+    fold("x = y | ('x'?'1':'2')", "x=y|('x'?1:2)");
+  }
+
+  public void testFoldingAdd() {
+    fold("x = null + true", "x=1");
+    foldSame("x = a + true");
   }
 
   public void testFoldBitwiseOpStringCompare() {
@@ -525,7 +564,13 @@
     fold("x = null * undefined", "x = NaN");
     fold("x = null * 1", "x = 0");
     fold("x = (null - 1) * 2", "x = -2");
-    foldSame("x = (null + 1) * 2"); // We don't fold "+" with mixed types yet.
+    fold("x = (null + 1) * 2", "x = 2");
+  }
+
+  public void testFoldArithmeticInfinity() {
+    fold("x=-Infinity-2", "x=-Infinity");
+    fold("x=Infinity-2", "x=Infinity");
+    fold("x=Infinity*5", "x=Infinity");
   }
 
   public void testFoldArithmeticStringComp() {
@@ -655,6 +700,11 @@
     fold("x = 'abc' + 5 + 10", "x = \"abc510\"");
   }
 
+  public void testFoldLeft() {
+    foldSame("(+x - 1) + 2"); // not yet
+    foldSame("(+x + 1) + 2"); // not yet
+  }
+
   public void testFoldArrayLength() {
     // Can fold
     fold("x = [].length", "x = 0");
@@ -751,7 +801,10 @@
   }
 
   public void testFoldAdd1() {
-    foldSame("x=false+1");
+    fold("x=false+1","x=1");
+    fold("x=true+1","x=2");
+    fold("x=1+false","x=1");
+    fold("x=1+true","x=2");
   }
 
   public void testFoldLiteralNames() {
@@ -793,6 +846,60 @@
     fold("true < false", "false");
   }
 
+  public void testFoldLeftChildConcat() {
+    foldSame("x +5 + \"1\"");
+    fold("x+\"5\" + \"1\"", "x + \"51\"");
+  }
+
+  public void testFoldLeftChildOp() {
+    fold("x * Infinity * 2", "x * Infinity");
+    foldSame("x - Infinity - 2"); // want "x-Infinity"
+    foldSame("x - 1 + Infinity");
+    foldSame("x - 2 + 1");
+    foldSame("x - 2 + 3");
+    foldSame("1 + x - 2 + 1");
+    foldSame("1 + x - 2 + 3");
+    foldSame("1 + x - 2 + 3 - 1");
+    foldSame("f(x)-0");
+    foldSame("x-0-0");
+    foldSame("x+2-2+2");
+    foldSame("x+2-2+2-2");
+    foldSame("x-2+2");
+    foldSame("x-2+2-2");
+    foldSame("x-2+2-2+2");
+
+    foldSame("1+x-0-NaN");
+    foldSame("1+f(x)-0-NaN");
+    foldSame("1+x-0+NaN");
+    foldSame("1+f(x)-0+NaN");
+
+    foldSame("1+x+NaN"); // unfoldable
+    foldSame("x+2-2");   // unfoldable
+    foldSame("x+2");  // nothing to do
+    foldSame("x-2");  // nothing to do
+  }
+
+  public void testFoldSimpleArithmeticOp() {
+    foldSame("x*NaN");
+    foldSame("NaN/y");
+    foldSame("f(x)-0");
+    foldSame("f(x)*1");
+    foldSame("1*f(x)");
+    foldSame("0+a+b");
+    foldSame("0-a-b");
+    foldSame("a+b-0");
+    foldSame("(1+x)*NaN");
+
+    foldSame("(1+f(x))*NaN"); // don't fold side-effects
+  }
+
+  public void testFoldLiteralsAsNumbers() {
+    fold("x/'12'","x/12");
+    fold("x/('12'+'6')", "x/126");
+    fold("true*x", "1*x");
+    fold("x/false", "x/0");  // should we add an error check? :)
+  }
+
   private static final List<String> LITERAL_OPERANDS =
       ImmutableList.of(
           "null",
@@ -803,11 +910,13 @@
           "0",
           "1",
           "''",
+          "'123'",
           "'abc'",
           "'def'",
           "NaN",
           "Infinity"
           // TODO(nicksantos): Add more literals
+          //-Infinity
           //"({})",
           //"[]",
           //"[0]",
