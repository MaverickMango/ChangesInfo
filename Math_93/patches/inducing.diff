diff --git a/src/java/org/apache/commons/math/ConvergenceException.java b/src/java/org/apache/commons/math/ConvergenceException.java
new file mode 100644
index 0000000..e30fc71
--- /dev/null
+++ b/src/java/org/apache/commons/math/ConvergenceException.java
@@ -0,0 +1,95 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.commons.math;
+
+/**
+ * Error thrown when a numerical computation can not be performed because the
+ * numerical result failed to converge to a finite value.
+ * 
+ * @version $Revision: 1.6 $ $Date: 2003/11/14 22:22:22 $
+ */
+public class ConvergenceException extends MathException {
+    /**
+     * Default constructor.
+     */
+    public ConvergenceException() {
+        this(null, null);
+    }
+    
+    /**
+     * Construct an exception with the given message.
+     * @param message descriptive error message. 
+     */
+    public ConvergenceException(String message) {
+        this(message, null);
+    }
+
+    /**
+     * Construct an exception with the given message and root cause.
+     * @param message descriptive error message.
+     * @param cause root cause.
+     */
+    public ConvergenceException(String message, Throwable cause) {
+        super(message, cause);
+    }
+
+    /**
+     * Create an exception with a given root cause.
+     * @param throwable caught exception causing this problem
+     */
+    public ConvergenceException(Throwable throwable) {
+        this(null, throwable);
+    }
+
+}
diff --git a/src/java/org/apache/commons/math/MathConfigurationException.java b/src/java/org/apache/commons/math/MathConfigurationException.java
new file mode 100644
index 0000000..7a4e743
--- /dev/null
+++ b/src/java/org/apache/commons/math/MathConfigurationException.java
@@ -0,0 +1,95 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.commons.math;
+
+/**
+ * Signals a configuration problem with any of the factory methods.
+ * @version $Revision: 1.11 $ $Date: 2003/11/14 22:22:22 $
+ */
+public class MathConfigurationException extends MathException {
+
+    /**
+     * Default constructor.
+     */
+    public MathConfigurationException() {
+        this(null, null);
+    }
+
+    /**
+     * Construct an exception with the given message.
+     * @param message message describing the problem
+     */
+    public MathConfigurationException(final String message) {
+        this(message, null);
+    }
+
+    /**
+     * Construct an exception with the given message and root cause.
+     * @param message message describing the problem
+     * @param throwable caught exception causing this problem
+     */
+    public MathConfigurationException(
+        final String message,
+        final Throwable throwable) {
+        super(message, throwable);
+    }
+
+    /**
+     * Construct an exception with the given root cause.
+     * @param throwable caught exception causing this problem
+     */
+    public MathConfigurationException(final Throwable throwable) {
+        this(null, throwable);
+    }
+}
diff --git a/src/java/org/apache/commons/math/MathException.java b/src/java/org/apache/commons/math/MathException.java
new file mode 100644
index 0000000..ef9ff5f
--- /dev/null
+++ b/src/java/org/apache/commons/math/MathException.java
@@ -0,0 +1,95 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.commons.math;
+
+import org.apache.commons.lang.exception.NestableException;
+
+/**
+ * A generic exception indicating problems in the math package.
+ * @version $Revision: 1.10 $ $Date: 2003/11/14 22:22:22 $
+ */
+public class MathException extends NestableException {
+
+    /**
+     * Constructs a MathException
+     */
+    public MathException() {
+        this(null, null);
+    }
+
+    /**
+     * Create an exception with a given error message.
+     * @param message message describing the problem
+     */
+    public MathException(final String message) {
+        this(message, null);
+    }
+
+    /**
+     * Create an exception with a given error message and root cause.
+     * @param message message describing the problem
+     * @param throwable caught exception causing this problem
+     */
+    public MathException(final String message, final Throwable throwable) {
+        super(message, throwable);
+    }
+
+    /**
+     * Create an exception with a given root cause.
+     * @param throwable caught exception causing this problem
+     */
+    public MathException(final Throwable throwable) {
+        this(null, throwable);
+    }
+}
diff --git a/src/java/org/apache/commons/math/analysis/BisectionSolver.java b/src/java/org/apache/commons/math/analysis/BisectionSolver.java
new file mode 100644
index 0000000..96715f4
--- /dev/null
+++ b/src/java/org/apache/commons/math/analysis/BisectionSolver.java
@@ -0,0 +1,138 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.commons.math.analysis;
+
+import org.apache.commons.math.MathException;
+
+/**
+ * Provide the bisection algorithm for solving for zeros of real univariate
+ * functions.  It will only search for one zero in the given interval.  The
+ * function is supposed to be continuous but not necessarily smooth.
+ * @version $Revision: 1.7 $ $Date: 2003/11/14 22:22:17 $
+ */
+public class BisectionSolver extends UnivariateRealSolverImpl {
+    /**
+     * Construct a solver for the given function.
+     * @param f function to solve.
+     */
+    public BisectionSolver(UnivariateRealFunction f) {
+        super(f, 100, 1E-6);
+    }
+
+    /**
+     * Solve for a zero in the given interval.
+     * @param min the lower bound for the interval.
+     * @param max the upper bound for the interval.
+     * @param initial the start value to use (ignored).
+     * @return the value where the function is zero
+     * @throws MathException if the iteration count was exceeded or the
+     *  solver detects convergence problems otherwise.
+     */
+    public double solve(double min, double max, double initial)
+        throws MathException {
+            
+        return solve(min, max);
+    }
+    
+    /**
+     * Solve for a zero root in the given interval.
+     * @param min the lower bound for the interval.
+     * @param max the upper bound for the interval.
+     * @return the value where the function is zero
+     * @throws MathException if the iteration count was exceeded or the
+     *  solver detects convergence problems otherwise.
+     */
+    public double solve(double min, double max) throws MathException {
+        clearResult();
+
+        double m;
+        double fm;
+        double fmin;
+        
+        int i = 0;
+        while (i < maximalIterationCount) {
+            m = midpoint(min, max);
+            fmin = f.value(min);
+            fm = f.value(m);
+
+            if (fm * fmin > 0.0) {
+                // max and m bracket the root.
+                min = m;
+                fmin = fm;
+            } else {
+                // min and m bracket the root.
+                max = m;
+            }
+
+            if (Math.abs(max - min) <= absoluteAccuracy) {
+                m = midpoint(min, max);
+                setResult(m, i);
+                return m;
+            }
+            ++i;
+        }
+        
+        throw new MathException("Maximal iteration number exceeded");
+    }
+
+    /**
+     * Compute the midpoint of two values.
+     * @param a first value.
+     * @param b second value.
+     * @return the midpoint. 
+     */
+    public static double midpoint(double a, double b) {
+        return (a + b) * .5;
+    }
+}
diff --git a/src/java/org/apache/commons/math/analysis/BrentSolver.java b/src/java/org/apache/commons/math/analysis/BrentSolver.java
new file mode 100644
index 0000000..9428667
--- /dev/null
+++ b/src/java/org/apache/commons/math/analysis/BrentSolver.java
@@ -0,0 +1,198 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.commons.math.analysis;
+
+import org.apache.commons.math.MathException;
+
+/**
+ * Provide the Brent algorithm for solving for zeros of real univariate
+ * functions.
+ * It will only search for one zero in the given interval.
+ * The function is supposed to be continuous but not necessarily smooth.
+ *  
+ * @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:17 $
+ */
+public class BrentSolver extends UnivariateRealSolverImpl {
+    /**
+     * Construct a solver for the given function.
+     * @param f function to solve.
+     */
+    public BrentSolver(UnivariateRealFunction f) {
+        super(f, 100, 1E-6);
+    }
+
+    /**
+     * Solve for a zero in the given interval.
+     * @param min the lower bound for the interval.
+     * @param max the upper bound for the interval.
+     * @param initial the start value to use (ignored).
+     * @return the value where the function is zero
+     * @throws MathException if the iteration count was exceeded or the
+     *  solver detects convergence problems otherwise.
+     */
+    public double solve(double min, double max, double initial)
+        throws MathException {
+            
+        return solve(min, max);
+    }
+    
+    /**
+     * Solve for a zero root in the given interval.
+     * @param min the lower bound for the interval.
+     * @param max the upper bound for the interval.
+     * @return the value where the function is zero
+     * @throws MathException if the iteration count was exceeded or the
+     *  solver detects convergence problems otherwise.
+     */
+    public double solve(double min, double max) throws MathException {
+        clearResult();
+        // Index 0 is the old approximation for the root.
+        // Index 1 is the last calculated approximation  for the root.
+        // Index 2 is a bracket for the root with respect to x1.
+        double x0 = min;
+        double x1 = max;
+        double y0 = f.value(x0);
+        double y1 = f.value(x1);
+        if ((y0 > 0) == (y1 > 0)) {
+            throw new MathException("Interval doesn't bracket a zero.");
+        }
+        double x2 = x0;
+        double y2 = y0;
+        double delta = x1 - x0;
+        double oldDelta = delta;
+
+        int i = 0;
+        while (i < maximalIterationCount) {
+            if (Math.abs(y2) < Math.abs(y1)) {
+                x0 = x1;
+                x1 = x2;
+                x2 = x0;
+                y0 = y1;
+                y1 = y2;
+                y2 = y0;
+            }
+            if (Math.abs(y1) <= functionValueAccuracy) {
+                // Avoid division by very small values. Assume
+                // the iteration has converged (the problem may
+                // still be ill conditioned)
+                setResult(x1, i);
+                return result;
+            }
+            double dx = (x2 - x1);
+            double tolerance =
+                Math.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy);
+            if (Math.abs(dx) <= tolerance) {
+                setResult(x1, i);
+                return result;
+            }
+            if ((Math.abs(oldDelta) < tolerance) ||
+                    (Math.abs(y0) <= Math.abs(y1))) {
+                // Force bisection.
+                delta = 0.5 * dx;
+                oldDelta = delta;
+            } else {
+                double r3 = y1 / y0;
+                double p;
+                double p1;
+                if (x0 == x2) {
+                    // Linear interpolation.
+                    p = dx * r3;
+                    p1 = 1.0 - r3;
+                } else {
+                    // Inverse quadratic interpolation.
+                    double r1 = y0 / y2;
+                    double r2 = y1 / y2;
+                    p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));
+                    p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
+                }
+                if (p > 0.0) {
+                    p1 = -p1;
+                } else {
+                    p = -p;
+                }
+                if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
+                        p >= Math.abs(0.5 * oldDelta * p1)) {
+                    // Inverse quadratic interpolation gives a value
+                    // in the wrong direction, or progress is slow.
+                    // Fall back to bisection.
+                    delta = 0.5 * dx;
+                    oldDelta = delta;
+                } else {
+                    oldDelta = delta;
+                    delta = p / p1;
+                }
+            }
+            // Save old X1, Y1 
+            x0 = x1;
+            y0 = y1;
+            // Compute new X1, Y1
+            if (Math.abs(delta) > tolerance) {
+                x1 = x1 + delta;
+            } else if (dx > 0.0) {
+                x1 = x1 + 0.5 * tolerance;
+            } else if (dx <= 0.0) {
+                x1 = x1 - 0.5 * tolerance;
+            }
+            y1 = f.value(x1);
+            if ((y1 > 0) == (y2 > 0)) {
+                x2 = x0;
+                y2 = y0;
+                delta = x1 - x0;
+                oldDelta = delta;
+            }
+            i++;
+        }
+        throw new MathException("Maximal iteration number exceeded.");
+    }
+}
diff --git a/src/java/org/apache/commons/math/analysis/ConvergenceException.java b/src/java/org/apache/commons/math/analysis/ConvergenceException.java
new file mode 100644
index 0000000..9671c04
--- /dev/null
+++ b/src/java/org/apache/commons/math/analysis/ConvergenceException.java
@@ -0,0 +1,97 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their names without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.commons.math.analysis;
+
+import org.apache.commons.lang.exception.NestableRuntimeException;
+
+/**
+ * Error thrown when a numerical computation can not be performed because the
+ * numerical result failed to converge to a finite value.
+ * 
+ * @version $Revision: 1.6 $ $Date: 2003/11/14 22:22:17 $
+ */
+public class ConvergenceException extends NestableRuntimeException {
+    /**
+     * Default constructor.
+     */
+    public ConvergenceException() {
+        this(null, null);
+    }
+    
+    /**
+     * Construct an exception with the given message.
+     * @param message descriptive error message. 
+     */
+    public ConvergenceException(String message) {
+        this(message, null);
+    }
+
+    /**
+     * Construct an exception with the given message and root cause.
+     * @param message descriptive error message.
+     * @param cause root cause.
+     */
+    public ConvergenceException(String message, Throwable cause) {
+        super(message, cause);
+    }
+
+    /**
+     * Create an exception with a given root cause.
+     * @param throwable caught exception causing this problem
+     */
+    public ConvergenceException(Throwable throwable) {
+        this(null, throwable);
+    }
+
+}
diff --git a/src/java/org/apache/commons/math/analysis/CubicSplineFunction.java b/src/java/org/apache/commons/math/analysis/CubicSplineFunction.java
new file mode 100644
index 0000000..d067c08
--- /dev/null
+++ b/src/java/org/apache/commons/math/analysis/CubicSplineFunction.java
@@ -0,0 +1,162 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.commons.math.analysis;
+
+import java.util.Arrays;
+
+import org.apache.commons.math.MathException;
+
+/**
+ * Represents a cubic spline function.
+ * Spline functions map a certain interval of real numbers to real numbers.
+ * A cubic spline consists of segments of cubic functions. For this class,
+ * polynominal coefficents are used.
+ * Arguments outside of the domain cause an IllegalArgumentException.
+ * 
+ * @version $Revision: 1.7 $ $Date: 2003/11/14 22:22:17 $
+ */
+public class CubicSplineFunction implements UnivariateRealFunction {
+    /** Spline segment interval delimiters. Size is N+1 for N segments. */
+    private double xval[];
+
+    /**
+     * The spline segment's polynominal coefficients.
+     * The first index runs over the intervals, size is N.
+     * The second index adresses the coefficients in the segment, with
+     * index 0 being the absolute coefficient and index 3 the coefficient
+     * for the third power.
+     * The coefficients are setup so that x runs from 0 to xval[i+1]-xval[i].
+     */
+    private double c[][];
+
+    /**
+     * Construct a function with the given segment delimiters and polynomial
+     * coefficients.
+     * @param xval Spline segment interval delimiters
+     * @param c spline segment's polynominal coefficients
+     */
+    public CubicSplineFunction(double xval[], double c[][]) {
+        super();
+        // TODO: should copy the arguments here, for safety. This could be a major overhead.
+        this.xval = xval;
+        this.c = c;
+    }
+
+    /**
+     * Compute the value for the function.
+     * @param x the point for which the function value should be computed
+     * @return the value
+     * @throws MathException if the function couldn't be computed due to
+     *  missing additional data or other environmental problems.
+     * @see UnivariateRealFunction#value(double)
+     */
+    public double value(double x) throws MathException {
+        if (x < xval[0] || x > xval[xval.length - 1]) {
+            throw new IllegalArgumentException("Argument outside domain");
+        }
+        int i = Arrays.binarySearch(xval, x);
+        if (i < 0) {
+            i = -i - 2;
+        }
+        x = x - xval[i];
+        return ((c[i][3] * x + c[i][2]) * x + c[i][1]) * x + c[i][0];
+    }
+
+    /**
+     * Compute the value for the first derivative of the function.
+     * It is recommended to provide this method only if the first derivative is
+     * analytical. Numerical derivatives may be acceptable in some cases.
+     * An implementation should throw an UnsupportedOperationException if
+     * this method is not implemented.
+     * @param x the point for which the first derivative should be computed
+     * @return the value
+     * @throws MathException if the derivative couldn't be computed.
+     * @see UnivariateRealFunction#firstDerivative(double)
+     */
+    public double firstDerivative(double x) throws MathException {
+        if (x < xval[0] || x > xval[xval.length - 1]) {
+            throw new IllegalArgumentException("Argument outside domain");
+        }
+        int i = Arrays.binarySearch(xval, x);
+        if (i < 0) {
+            i = -i - 2;
+        }
+        x = x - xval[i];
+        return (3 * c[i][3] * x + 2 * c[i][2]) * x + c[i][1];
+    }
+
+    /**
+     * Compute the value for the second derivative of the function.
+     * It is recommended to provide this method only if the second derivative is
+     * analytical. Numerical derivatives may be acceptable in some cases.
+     * An implementation should throw an UnsupportedOperationException if
+     * this method is not implemented.
+     * @param x the point for which the first derivative should be computed
+     * @return the value
+     * @throws MathException if the second derivative couldn't be computed.
+     * @see UnivariateRealFunction#secondDerivative(double)
+     */
+    public double secondDerivative(double x) throws MathException {
+        if (x < xval[0] || x > xval[xval.length - 1]) {
+            throw new IllegalArgumentException("Argument outside domain");
+        }
+        int i = Arrays.binarySearch(xval, x);
+        if (i < 0) {
+            i = -i - 2;
+        }
+        x = x - xval[i];
+        return 6 * c[i][3] * x + 2 * c[i][2];
+    }
+
+}
diff --git a/src/java/org/apache/commons/math/analysis/QuinticFunction.java b/src/java/org/apache/commons/math/analysis/QuinticFunction.java
new file mode 100644
index 0000000..90a54a1
--- /dev/null
+++ b/src/java/org/apache/commons/math/analysis/QuinticFunction.java
@@ -0,0 +1,88 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowlegement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowlegement may appear in the software itself,
+ *    if and wherever such third-party acknowlegements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their names without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.commons.math.analysis;
+
+import org.apache.commons.math.MathException;
+
+/**
+ * Auxillary class for testing solvers.
+ * 
+ * @author pietsch at apache.org
+ *
+ */
+public class QuinticFunction implements UnivariateRealFunction {
+
+    /* Evaluate quintic.
+     * @see org.apache.commons.math.UnivariateRealFunction#value(double)
+     */
+    public double value(double x) throws MathException {
+        return (x-1)*(x-0.5)*x*(x+0.5)*(x+1);
+    }
+
+    /* First derivative of quintic.
+     * @see org.apache.commons.math.UnivariateRealFunction#firstDerivative(double)
+     */
+    public double firstDerivative(double x) throws MathException {
+        return (5*x*x-3.75)*x*x+0.25;
+    }
+
+    /* Second order derivative of quintic.
+     * Unsupported.
+     * @see org.apache.commons.math.UnivariateRealFunction#secondDerivative(double)
+     */
+    public double secondDerivative(double x) throws MathException {
+        throw new UnsupportedOperationException();
+    }
+
+}
diff --git a/src/java/org/apache/commons/math/analysis/RootFinding.java b/src/java/org/apache/commons/math/analysis/RootFinding.java
new file mode 100644
index 0000000..a3c86e8
--- /dev/null
+++ b/src/java/org/apache/commons/math/analysis/RootFinding.java
@@ -0,0 +1,128 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowlegement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowlegement may appear in the software itself,
+ *    if and wherever such third-party acknowlegements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their names without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.commons.math.analysis;
+
+import org.apache.commons.math.MathException;
+
+/**
+ * Utility class comprised of root finding techniques.
+ *
+ * @version $Revision: 1.6 $ $Date: 2003/11/14 22:22:17 $
+ */
+public class RootFinding {
+    /**
+     * Default constructor. Prohibit construction.
+     */
+    private RootFinding() {
+        super();
+    }
+
+    /**
+     * For a function, f, this method returns two values, a and b that bracket
+     * a root of f.  That is to say, there exists a value c between a and b
+     * such that f(c) = 0.
+     *
+     * @param function the function
+     * @param initial midpoint of the returned range.
+     * @param lowerBound for numerical safety, a never is less than this value.
+     * @param upperBound for numerical safety, b never is greater than this
+     *                   value.
+     * @return a two element array holding {a, b}.
+     * @throws MathException if a root can not be bracketted.
+     */
+    public static double[] bracket(UnivariateRealFunction function,
+                                   double initial,
+                                   double lowerBound,
+                                   double upperBound) throws MathException {
+        return bracket( function, initial, lowerBound, upperBound,
+            Integer.MAX_VALUE ) ;
+    }
+
+    /**
+     * For a function, f, this method returns two values, a and b that bracket
+     * a root of f.  That is to say, there exists a value c between a and b
+     * such that f(c) = 0.
+     *
+     * @param function the function
+     * @param initial midpoint of the returned range.
+     * @param lowerBound for numerical safety, a never is less than this value.
+     * @param upperBound for numerical safety, b never is greater than this
+     *                   value.
+     * @param maximumIterations to guard against infinite looping, maximum
+     *                          number of iterations to perform
+     * @return a two element array holding {a, b}.
+     * @throws MathException if a root can not be bracketted.
+     */
+    public static double[] bracket(UnivariateRealFunction function,
+                                   double initial,
+                                   double lowerBound,
+                                   double upperBound,
+                                   int maximumIterations) throws MathException {
+        double a = initial;
+        double b = initial;
+        double fa;
+        double fb;
+        int numIterations = 0 ;
+
+        do {
+            a = Math.max(a - 1.0, lowerBound);
+            b = Math.min(b + 1.0, upperBound);
+            fa = function.value(a);
+            fb = function.value(b);
+            numIterations += 1 ;
+        } while ( (fa * fb > 0.0) && ( numIterations < maximumIterations ) );
+
+        return new double[]{a, b};
+    }
+}
diff --git a/src/java/org/apache/commons/math/analysis/SecantSolver.java b/src/java/org/apache/commons/math/analysis/SecantSolver.java
new file mode 100644
index 0000000..24b9917
--- /dev/null
+++ b/src/java/org/apache/commons/math/analysis/SecantSolver.java
@@ -0,0 +1,163 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.commons.math.analysis;
+
+import org.apache.commons.math.MathException;
+
+/**
+ * Provide the secant algorithm for solving for zeros of real univariate
+ * functions. Because of forced bracketing, convergence is slower than
+ * the unrestricted secant algorithm. However, slow convergence of the
+ * Regula Falsi can be avoided.
+ * It will only search for one zero in the given interval.
+ * The function is supposed to be continuous but not necessarily smooth.
+ *  
+ * @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:17 $
+ */
+public class SecantSolver extends UnivariateRealSolverImpl {
+    /**
+     * Construct a solver for the given function.
+     * @param f function to solve.
+     */
+    public SecantSolver(UnivariateRealFunction f) {
+        super(f, 100, 1E-6);
+    }
+
+    /**
+     * Solve for a zero in the given interval.
+     * @param min the lower bound for the interval.
+     * @param max the upper bound for the interval.
+     * @param initial the start value to use (ignored).
+     * @return the value where the function is zero
+     * @throws MathException if the iteration count was exceeded or the
+     *  solver detects convergence problems otherwise.
+     */
+    public double solve(double min, double max, double initial)
+        throws MathException {
+            
+        return solve(min, max);
+    }
+    
+    /**
+     * Solve for a zero root in the given interval.
+     * @param min the lower bound for the interval.
+     * @param max the upper bound for the interval.
+     * @return the value where the function is zero
+     * @throws MathException if the iteration count was exceeded or the
+     *  solver detects convergence problems otherwise.
+     */
+    public double solve(double min, double max) throws MathException {
+        clearResult();
+        // Index 0 is the old approximation for the root.
+        // Index 1 is the last calculated approximation  for the root.
+        // Index 2 is a bracket for the root with respect to x0.
+        // OldDelta is the length of the bracketing interval of the last
+        // iteration.
+        double x0 = min;
+        double x1 = max;
+        double y0 = f.value(x0);
+        double y1 = f.value(x1);
+        if ((y0 > 0) == (y1 > 0)) {
+            throw new MathException("Interval doesn't bracket a zero.");
+        }
+        double x2 = x0;
+        double y2 = y0;
+        double oldDelta = x2 - x1;
+        int i = 0;
+        while (i < maximalIterationCount) {
+            if (Math.abs(y2) < Math.abs(y1)) {
+                x0 = x1;
+                x1 = x2;
+                x2 = x0;
+                y0 = y1;
+                y1 = y2;
+                y2 = y0;
+            }
+            if (Math.abs(y1) <= functionValueAccuracy) {
+                setResult(x1, i);
+                return result;
+            }
+            if (Math.abs(oldDelta) <
+                Math.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy)) {
+                setResult(x1, i);
+                return result;
+            }
+            double delta;
+            if (Math.abs(y1) > Math.abs(y0)) {
+                // Function value increased in last iteration. Force bisection.
+                delta = 0.5 * oldDelta;
+            } else {
+                delta = (x0 - x1) / (1 - y0 / y1);
+                if (delta / oldDelta > 1) {
+                    // New approximation falls outside bracket.
+                    // Fall back to bisection.
+                    delta = 0.5 * oldDelta;
+                }
+            }
+            x0 = x1;
+            y0 = y1;
+            x1 = x1 + delta;
+            y1 = f.value(x1);
+            if ((y1 > 0) == (y2 > 0)) {
+                // New bracket is (x0,x1).                    
+                x2 = x0;
+                y2 = y0;
+            }
+            oldDelta = x2 - x1;
+            i++;
+        }
+        throw new MathException("Maximal iteration number exceeded");
+    }
+
+}
diff --git a/src/java/org/apache/commons/math/analysis/SinFunction.java b/src/java/org/apache/commons/math/analysis/SinFunction.java
new file mode 100644
index 0000000..4e809f6
--- /dev/null
+++ b/src/java/org/apache/commons/math/analysis/SinFunction.java
@@ -0,0 +1,93 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowlegement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowlegement may appear in the software itself,
+ *    if and wherever such third-party acknowlegements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their names without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.commons.math.analysis;
+
+import org.apache.commons.math.MathException;
+
+/**
+ * Auxillary class for testing solvers.
+ *
+ * The function is extraordinarily well behaved around zero roots: it
+ * has an inflection point there (second order derivative is zero),
+ * which means linear approximation (Regula Falsi) will converge
+ * quadratically.
+ * 
+ * @author pietsch at apache.org
+ *
+ */
+public class SinFunction implements UnivariateRealFunction {
+
+    /* Evaluate sinus fuction.
+     * @see org.apache.commons.math.UnivariateRealFunction#value(double)
+     */
+    public double value(double x) throws MathException {
+        return Math.sin(x);
+    }
+
+    /* First derivative of sinus function
+     * @see org.apache.commons.math.UnivariateRealFunction#firstDerivative(double)
+     */
+    public double firstDerivative(double x) throws MathException {
+        return Math.cos(x);
+    }
+
+    /* Second derivative of sinus function.
+     * Unsupported.
+     * @see org.apache.commons.math.UnivariateRealFunction#secondDerivative(double)
+     */
+    public double secondDerivative(double x) throws MathException {
+        throw new UnsupportedOperationException();
+    }
+
+}
diff --git a/src/java/org/apache/commons/math/analysis/SplineInterpolator.java b/src/java/org/apache/commons/math/analysis/SplineInterpolator.java
new file mode 100644
index 0000000..8dee437
--- /dev/null
+++ b/src/java/org/apache/commons/math/analysis/SplineInterpolator.java
@@ -0,0 +1,164 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.commons.math.analysis;
+
+/**
+ * Computes a natural spline interpolation for the data set.
+ *
+ * @version $Revision: 1.9 $ $Date: 2003/11/14 22:22:17 $
+ *
+ */
+public class SplineInterpolator implements UnivariateRealInterpolator {
+    /** the natural spline coefficients. */
+    private double[][] c = null;
+
+    /**
+     * Computes an interpolating function for the data set.
+     * @param xval the arguments for the interpolation points
+     * @param yval the values for the interpolation points
+     * @return a function which interpolates the data set
+     */
+    public UnivariateRealFunction interpolate(double[] xval, double[] yval) {
+        if (xval.length != yval.length) {
+            throw new IllegalArgumentException("Dataset arrays must have same length.");
+        }
+
+        if (c == null) {
+            // Number of intervals. The number of data points is N+1.
+            int n = xval.length - 1;
+            // Check whether the xval vector has ascending values.
+            // Separation should be checked too (not implemented: which criteria?).
+            for (int i = 0; i < n; i++) {
+                if (xval[i] >= xval[i + 1]) {
+                    throw new IllegalArgumentException("Dataset must specify sorted, ascending x values.");
+                }
+            }
+            // Vectors for the equation system. There are n-1 equations for the unknowns s[i] (1<=i<=N-1),
+            // which are second order derivatives for the spline at xval[i]. At the end points, s[0]=s[N]=0.
+            // Vectors are offset by -1, except the lower diagonal vector which is offset by -2. Layout:
+            // d[0]*s[1]+u[0]*s[2]                                           = b[0]
+            // l[0]*s[1]+d[1]*s[2]+u[1]*s[3]                                 = b[1]
+            //           l[1]*s[2]+d[2]*s[3]+u[2]*s[4]                       = b[2]
+            //                           ...
+            //                     l[N-4]*s[N-3]+d[N-3]*s[N-2]+u[N-3]*s[N-1] = b[N-3]
+            //                                   l[N-3]*s[N-2]+d[N-2]*s[N-1] = b[N-2]
+            // Vector b is the right hand side (RHS) of the system.
+            double b[] = new double[n - 1];
+            // Vector d is diagonal of the matrix and also holds the computed solution.
+            double d[] = new double[n - 1];
+            // Setup right hand side and diagonal.
+            double dquot = (yval[1] - yval[0]) / (xval[1] - xval[0]);
+            for (int i = 0; i < n - 1; i++) {
+                // TODO avoid recomputing the term
+                //    (yval[i + 2] - yval[i + 1]) / (xval[i + 2] - xval[i + 1])
+                // take it from the previous loop pass. Note: the interesting part of performance
+                // loss is the range check in the array access, not the computation itself.
+                double dquotNext = 
+                    (yval[i + 2] - yval[i + 1]) / (xval[i + 2] - xval[i + 1]);
+                b[i] = 6.0 * (dquotNext - dquot);
+                d[i] = 2.0 * (xval[i + 2] - xval[i]);
+                dquot = dquotNext;
+            }
+            // u[] and l[] (for the upper and lower diagonal respectively) are not
+            // really needed, the computation is folded into the system solving loops.
+            // Keep this for documentation purposes:
+            //double u[] = new double[n - 2]; // upper diagonal
+            //double l[] = new double[n - 2]; // lower diagonal
+            // Set up upper and lower diagonal. Keep the offsets in mind.
+            //for (int i = 0; i < n - 2; i++) {
+            //  u[i] = xval[i + 2] - xval[i + 1];
+            //  l[i] = xval[i + 2] - xval[i + 1];
+            //}
+            // Solve the system: forward pass.
+            for (int i = 0; i < n - 2; i++) {
+                double delta = xval[i + 2] - xval[i + 1];
+                double deltaquot = delta / d[i];
+                d[i + 1] -= delta * deltaquot;
+                b[i + 1] -= b[i] * deltaquot;
+            }
+            // Solve the system: backward pass.
+            d[n - 2] = b[n - 2] / d[n - 2];
+            for (int i = n - 3; i >= 0; i--) {
+                d[i] = (b[i] - (xval[i + 2] - xval[i + 1]) * d[i + 1]) / d[i];
+            }
+            // Compute coefficients as usual polynomial coefficients.
+            // Not the best with respect to roundoff on evaluation, but simple.
+            c = new double[n][4];
+            double delta = xval[1] - xval[0];
+            c[0][3] = d[0] / delta / 6.0;
+            c[0][2] = 0.0;
+            c[0][1] = (yval[1] - yval[0]) / delta - d[0] * delta / 6.0;
+            for (int i = 1; i < n - 2; i++) {
+                delta = xval[i + 1] - xval[i];
+                c[i][3] = (d[i] - d[i - 1]) / delta / 6.0;
+                c[i][2] = d[i - 1] / 2.0;
+                c[i][1] =
+                    (yval[i + 1] - yval[i]) / delta -
+                        (d[i] / 2.0 - d[i - 1]) * delta / 3.0;
+            }
+            delta = (xval[n] - xval[n - 1]);
+            c[n - 1][3] = -d[n - 2] / delta / 6.0;
+            c[n - 1][2] = d[n - 2] / 2.0;
+            c[n - 1][1] =
+                (yval[n] - yval[n - 1]) / delta - d[n - 2] * delta / 3.0;
+            for (int i = 0; i < n; i++) {
+                c[i][0] = yval[i];
+            }
+        }
+
+        // TODO: copy xval, unless copied in CubicSplineFunction constructor
+        return new CubicSplineFunction(xval, c);
+    }
+
+}
diff --git a/src/java/org/apache/commons/math/analysis/UnivariateFunction.java b/src/java/org/apache/commons/math/analysis/UnivariateFunction.java
new file mode 100644
index 0000000..4e830f0
--- /dev/null
+++ b/src/java/org/apache/commons/math/analysis/UnivariateFunction.java
@@ -0,0 +1,66 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowlegement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowlegement may appear in the software itself,
+ *    if and wherever such third-party acknowlegements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their names without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.commons.math.analysis;
+
+/**
+ * @version $Revision: 1.4 $ $Date: 2003/11/14 22:22:17 $
+ */
+public interface UnivariateFunction {
+    // TODO: More documentation
+
+    /**
+     * 
+     */
+    double evaluate(double x);
+}
diff --git a/src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java b/src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java
new file mode 100644
index 0000000..1cb0821
--- /dev/null
+++ b/src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java
@@ -0,0 +1,100 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.commons.math.analysis;
+
+import org.apache.commons.math.MathException;
+
+/**
+ * Provide an interface univariate real functions.
+ * The object may held temporary data which is shared between calculations
+ * of the value and the derivatives for the same argument. It is not guaranteed
+ * that derivatives are evaluated after the value, the evaluation algorithm
+ * should throw an InvalidStateException if it can't cope with this.
+ *  
+ * @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:17 $
+ */
+public interface UnivariateRealFunction {
+    /**
+     * Compute the value for the function.
+     * @param x the point for which the function value should be computed
+     * @return the value
+     * @throws MathException if the function couldn't be computed due to
+     *  missing additional data or other environmental problems.
+     */
+    public double value(double x) throws MathException;
+
+    /**
+     * Compute the value for the first derivative of the function.
+     * It is recommended to provide this method only if the first derivative is
+     * analytical. Numerical derivatives may be acceptable in some cases.
+     * An implementation should throw an UnsupportedOperationException if
+     * this method is not implemented.
+     * @param x the point for which the first derivative should be computed
+     * @return the value
+     * @throws MathException if the derivative couldn't be computed.
+     */
+    public double firstDerivative(double x) throws MathException;
+
+    /**
+     * Compute the value for the second derivative of the function.
+     * It is recommended to provide this method only if the second derivative is
+     * analytical. Numerical derivatives may be acceptable in some cases.
+     * An implementation should throw an UnsupportedOperationException if
+     * this method is not implemented.
+     * @param x the point for which the first derivative should be computed
+     * @return the value
+     * @throws MathException if the second derivative couldn't be computed.
+     */
+    public double secondDerivative(double x) throws MathException;
+}
diff --git a/src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java b/src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java
new file mode 100644
index 0000000..e7c16b1
--- /dev/null
+++ b/src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java
@@ -0,0 +1,75 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.commons.math.analysis;
+
+import org.apache.commons.math.MathException;
+
+/**
+ * Interface for interpolating a data set.
+ *  
+ * @version $Revision: 1.7 $ $Date: 2003/11/14 22:22:17 $
+ */
+public interface UnivariateRealInterpolator {
+
+    /**
+     * Computes an interpolating function for the data set.
+     * @param xval the arguments for the interpolation points
+     * @param yval the values for the interpolation points
+     * @return a function which interpolates the data set
+     * @throws MathException if arguments violate assumptions made by the
+     *         interpolationg algorithm
+     */
+    public UnivariateRealFunction interpolate(double xval[], double yval[])
+        throws MathException;
+}
diff --git a/src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java b/src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java
new file mode 100644
index 0000000..39b0ebf
--- /dev/null
+++ b/src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java
@@ -0,0 +1,226 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.commons.math.analysis;
+
+import org.apache.commons.math.MathException;
+
+/**
+ * Provide an interface to algorithms for solving for zeros of real univariate
+ * functions.
+ * An implementation will only search for one zero in the given interval.
+ *  
+ * @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:17 $
+ */
+public interface UnivariateRealSolver {
+
+    /**
+     * Set the upper limit for the number of iterations.
+     * 
+     * Usually a high iteration count indicates convergence problems. However,
+     * the "reasonable value" varies widely for different solvers, users are
+     * advised to use the default value supplied by the solver.
+     *  
+     * An exception will be thrown if the number is exceeded.
+     *  
+     * @param count maximum number of iterations
+     */
+    public void setMaximalIterationCount(int count);
+
+    /**
+     * Get the upper limit for the number of iterations.
+     * 
+     * @return the actual upper limit
+     */
+    public int getMaximalIterationCount();
+
+    /**
+     * Reset the upper limit for the number of iterations to the default.
+     * 
+     * The default value is supplied by the solver implementation.
+     * 
+     * @see #setMaximalIterationCount(int)
+     */
+    public void resetMaximalIterationCount();
+
+    /**
+     * Set the absolute accuracy.
+     * 
+     * The default is usually choosen so taht roots in the interval
+     * -10..-0.1 and +0.1..+10 can be found wit a reasonable accuracy. If the
+     * expected absolute value of your roots is of much smaller magnitude, set
+     * this to a smaller value.
+     * 
+     * Solvers are advised to do a plausibility check with the relative
+     * accuracy, but clients should not rely on this.
+     *  
+     * @param accuracy the accuracy.
+     * @throws MathException if the accuracy can't be achieved by the solver or
+     *         is otherwise deemed unreasonable. 
+     */
+    public void setAbsoluteAccuracy(double accuracy) throws MathException;
+
+    /**
+     * Get the actual absolute accuracy.
+     * 
+     * @return the accuracy
+     */
+    public double getAbsoluteAccuracy();
+
+    /**
+     * Reset the absolute accuracy to the default.
+     * 
+     * The default value is provided by the solver implementation.
+     */
+    public void resetAbsoluteAccuracy();
+
+    /**
+     * Set the relative accuracy.
+     * 
+     * This is used to stop iterations if the absolute accuracy can't be
+     * achieved due to large values or short mantissa length.
+     * 
+     * If this should be the primary criterium for convergence rather then a
+     * safety measure, set the absolute accuracy to a ridiculously small value,
+     * like 1E-1000.
+     * 
+     * @param accuracy the relative accuracy.
+     * @throws MathException if the accuracy can't be achieved by the solver or
+     *         is otherwise deemed unreasonable. 
+     */
+    public void setRelativeAccuracy(double accuracy) throws MathException;
+
+    /**
+     * Get the actual relative accuracy.
+     * @return the accuracy
+     */
+    public double getRelativeAccuracy();
+
+    /**
+     * Reset the relative accuracy to the default.
+     * The default value is provided by the solver implementation.
+     */
+    public void resetRelativeAccuracy();
+
+    /**
+     * Set the function value accuracy.
+     * 
+     * This is used to determine whan an evaluated function value or some other
+     * value which is used as divisor is zero.
+     * 
+     * This is a safety guard and it shouldn't be necesary to change this in
+     * general.
+     * 
+     * @param accuracy the accuracy.
+     * @throws MathException if the accuracy can't be achieved by the solver or
+     *         is otherwise deemed unreasonable. 
+     */
+    public void setFunctionValueAccuracy(double accuracy) throws MathException;
+
+    /**
+     * Get the actual function value accuracy.
+     * @return the accuracy
+     */
+    public double getFunctionValueAccuracy();
+
+    /**
+     * Reset the actual function accuracy to the default.
+     * The default value is provided by the solver implementation.
+     */
+    public void resetFunctionValueAccuracy();
+
+    /**
+     * Solve for a zero root in the given interval.
+     * A solver may require that the interval brackets a single zero root.
+     * @param min the lower bound for the interval.
+     * @param max the upper bound for the interval.
+     * @return a value where the function is zero
+     * @throws MathException if the iteration count was exceeded or the
+     *  solver detects convergence problems otherwise.
+     */
+    public double solve(double min, double max) throws MathException;
+
+    /**
+     * Solve for a zero in the given interval, start at startValue.
+     * A solver may require that the interval brackets a single zero root.
+     * @param min the lower bound for the interval.
+     * @param max the upper bound for the interval.
+     * @param startValue the start value to use
+     * @return a value where the function is zero
+     * @throws MathException if the iteration count was exceeded or the
+     *  solver detects convergence problems otherwise.
+     */
+    public double solve(double min, double max, double startValue)
+        throws MathException;
+
+    /**
+     * Get the result of the last run of the solver.
+     * @return the last result.
+     * @throws MathException if there is no result available, either
+     * because no result was yet computed or the last attempt failed.
+     */
+    public double getResult() throws MathException;
+
+    /**
+     * Get the number of iterations in the last run of the solver.
+     * This is mainly meant for testing purposes. It may occasionally
+     * help track down performance problems: if the iteration count
+     * is notoriously high, check whether the function is evaluated
+     * properly, and whether another solver is more amenable to the
+     * problem.
+     * @return the last iteration count.
+     * @throws MathException if there is no result available, either
+     * because no result was yet computed or the last attempt failed.
+     */
+    public int getIterationCount() throws MathException;
+}
\ No newline at end of file
diff --git a/src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java b/src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java
new file mode 100644
index 0000000..078595d
--- /dev/null
+++ b/src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java
@@ -0,0 +1,127 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.commons.math.analysis;
+
+import org.apache.commons.discovery.tools.DiscoverClass;
+
+/**
+ * A factory to easily get a default solver and some convenience
+ * functions.
+ * Because solvers are easily reusable, the factory does not
+ * store configuration data and creates preconfigured solvers
+ * (this may be controversial, because the configuration data
+ * may also be used for the default solver used by the static
+ * solve() method). 
+ * @version $Revision: 1.10 $ $Date: 2003/11/14 22:22:17 $
+ */
+public abstract class UnivariateRealSolverFactory {
+    /**
+     * Default constructor.
+     */
+    protected UnivariateRealSolverFactory() {
+    }
+
+    /**
+     * Create a new factory.
+     * @return a new factory.
+     */
+    public static UnivariateRealSolverFactory newInstance() {
+        UnivariateRealSolverFactory factory = null;
+        try {
+            DiscoverClass dc = new DiscoverClass();
+            factory = (UnivariateRealSolverFactory) dc.newInstance(
+                UnivariateRealSolverFactory.class,
+                "org.apache.commons.math.analysis.UnivariateRealSolverFactoryImpl");
+        } catch(Exception ex) {
+            // ignore as default implementation will be used.
+        }
+        return factory;
+    }
+    
+    /**
+     * Create a new {@link UnivariateRealSolver} for the given function.  The
+     * actual solver returned is determined by the underlying factory.
+     * @param f the function.
+     * @return the new solver.
+     */
+    public abstract UnivariateRealSolver newDefaultSolver(
+        UnivariateRealFunction f);
+    
+    /**
+     * Create a new {@link UnivariateRealSolver} for the given function.  The
+     * solver is an implementation of the bisection method.
+     * @param f the function.
+     * @return the new solver.
+     */
+    public abstract UnivariateRealSolver newBisectionSolver(
+        UnivariateRealFunction f);
+    
+    /**
+     * Create a new {@link UnivariateRealSolver} for the given function.  The
+     * solver is an implementation of the Brent method.
+     * @param f the function.
+     * @return the new solver.
+     */
+    public abstract UnivariateRealSolver newBrentSolver(
+        UnivariateRealFunction f);
+    
+    /**
+     * Create a new {@link UnivariateRealSolver} for the given function.  The
+     * solver is an implementation of the secant method.
+     * @param f the function.
+     * @return the new solver.
+     */
+    public abstract UnivariateRealSolver newSecantSolver(
+        UnivariateRealFunction f);
+}
diff --git a/src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java b/src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java
new file mode 100644
index 0000000..093f04d
--- /dev/null
+++ b/src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java
@@ -0,0 +1,118 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.commons.math.analysis;
+
+
+/**
+ * A factory to easily get a default solver and some convenience
+ * functions.
+ * Because solvers are easily reusable, the factory does not
+ * store configuration data and creates preconfigured solvers
+ * (this may be controversial, because the configuration data
+ * may also be used for the default solver used by the static
+ * solve() method). 
+ * @version $Revision: 1.6 $ $Date: 2003/11/14 22:22:18 $
+ */
+public class UnivariateRealSolverFactoryImpl
+    extends UnivariateRealSolverFactory {
+        
+    /**
+     * Default constructor.
+     */
+    public UnivariateRealSolverFactoryImpl() {
+    }
+
+    /**
+     * Create a new {@link UnivariateRealSolver} for the given function.  The
+     * actual solver returned is determined by the underlying factory.
+     * 
+     * This factory returns a {@link BrentSolver} instance.
+     *
+     * @param f the function.
+     * @return the new solver.
+     */
+    public UnivariateRealSolver newDefaultSolver(UnivariateRealFunction f) {
+        return newBrentSolver(f);
+    }
+    
+    /**
+     * Create a new {@link UnivariateRealSolver} for the given function.  The
+     * solver is an implementation of the bisection method.
+     * @param f the function.
+     * @return the new solver.
+     */
+    public UnivariateRealSolver newBisectionSolver(UnivariateRealFunction f) {
+        return new BisectionSolver(f);
+    }
+
+    /**
+     * Create a new {@link UnivariateRealSolver} for the given function.  The
+     * solver is an implementation of the Brent method.
+     * @param f the function.
+     * @return the new solver.
+     */
+    public UnivariateRealSolver newBrentSolver(UnivariateRealFunction f) {
+        return new BrentSolver(f);
+    }
+
+    /**
+     * Create a new {@link UnivariateRealSolver} for the given function.  The
+     * solver is an implementation of the secant method.
+     * @param f the function.
+     * @return the new solver.
+     */
+    public UnivariateRealSolver newSecantSolver(UnivariateRealFunction f) {
+        return new SecantSolver(f);
+    }
+}
diff --git a/src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java b/src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java
new file mode 100644
index 0000000..c86f8f0
--- /dev/null
+++ b/src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java
@@ -0,0 +1,281 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+
+package org.apache.commons.math.analysis;
+
+import org.apache.commons.math.MathException;
+
+/**
+ * Provide a default implementation for several functions useful to generic
+ * solvers.
+ *  
+ * @version $Revision: 1.7 $ $Date: 2003/11/14 22:22:17 $
+ */
+public abstract class UnivariateRealSolverImpl
+    implements UnivariateRealSolver {
+
+    /** Maximum absolute error. */
+    protected double absoluteAccuracy;
+
+    /** Maximum relative error. */
+    protected double relativeAccuracy;
+
+    /** Maximum error of function. */
+    protected double functionValueAccuracy;
+
+    /** Maximum number of iterations. */
+    protected int maximalIterationCount;
+
+    /** Default maximum absolute error. */
+    protected double defaultAbsoluteAccuracy;
+
+    /** Default maximum relative error. */
+    protected double defaultRelativeAccuracy;
+
+    /** Default maximum error of function. */
+    protected double defaultFunctionValueAccuracy;
+
+    /** Default maximum number of iterations. */
+    protected int defaultMaximalIterationCount;
+
+    /** Indicates where a root has been computed. */
+    protected boolean resultComputed = false;
+
+    /** The last computed root. */
+    protected double result;
+
+    // Mainly for test framework.
+    /** The last iteration count. */
+    protected int iterationCount;
+
+    /** The function to solve. */
+    protected UnivariateRealFunction f;
+
+    /**
+     * Construct a solver with given iteration count and accuracy.
+     * @param f the function to solve.
+     * @param defaultAbsoluteAccuracy maximum absolue error.
+     * @param defaultMaximalIterationCount maximum number of iterations.
+     */
+    protected UnivariateRealSolverImpl(
+        UnivariateRealFunction f,
+        int defaultMaximalIterationCount,
+        double defaultAbsoluteAccuracy) {
+        
+        super();
+        
+        this.f = f;
+        this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
+        this.defaultRelativeAccuracy = 1E-14;
+        this.defaultFunctionValueAccuracy = 1E-15;
+        this.absoluteAccuracy = defaultAbsoluteAccuracy;
+        this.relativeAccuracy = defaultRelativeAccuracy;
+        this.functionValueAccuracy = defaultFunctionValueAccuracy;
+        this.defaultMaximalIterationCount = defaultMaximalIterationCount;
+        this.maximalIterationCount = defaultMaximalIterationCount;
+    }
+
+    /**
+     * Access the last computed root.
+     * @return the last computed root.
+     * @throws MathException if no root has been computed.
+     */
+    public double getResult() throws MathException {
+        if (resultComputed) {
+            return result;
+        } else {
+            // TODO: could this be an IllegalStateException instead?
+            throw new MathException("No result available");
+        }
+    }
+
+    /**
+     * Access the last iteration count.
+     * @return the last iteration count.
+     * @throws MathException if no root has been computed.
+     *  
+     */
+    public int getIterationCount() throws MathException {
+        if (resultComputed) {
+            return iterationCount;
+        } else {
+            // TODO: could this be an IllegalStateException instead?
+            throw new MathException("No result available");
+        }
+    }
+
+    /**
+     * Convenience function for implementations.
+     * @param result the result to set
+     * @param iterationCount the iteration count to set
+     */
+    protected final void setResult(double result, int iterationCount) {
+        this.result = result;
+        this.iterationCount = iterationCount;
+        this.resultComputed = true;
+    }
+
+    /**
+     * Convenience function for implementations.
+     */
+    protected final void clearResult() {
+        this.resultComputed = false;
+    }
+
+    /**
+     * Set the absolute accuracy.
+     * 
+     * @param accuracy the accuracy.
+     * @throws MathException if the accuracy can't be achieved by the solver or
+     *         is otherwise deemed unreasonable. 
+     */
+    public void setAbsoluteAccuracy(double accuracy)
+        throws MathException {
+        absoluteAccuracy = accuracy;
+    }
+
+    /**
+     * Get the actual absolute accuracy.
+     * 
+     * @return the accuracy
+     */
+    public double getAbsoluteAccuracy() {
+        return absoluteAccuracy;
+    }
+
+    /**
+     * Reset the absolute accuracy to the default.
+     */
+    public void resetAbsoluteAccuracy() {
+        absoluteAccuracy = defaultAbsoluteAccuracy;
+    }
+
+    /**
+     * Set the upper limit for the number of iterations.
+     * 
+     * @param count maximum number of iterations
+     */
+    public void setMaximalIterationCount(int count) {
+        maximalIterationCount = count;
+    }
+
+    /**
+     * Get the upper limit for the number of iterations.
+     * 
+     * @return the actual upper limit
+     */
+    public int getMaximalIterationCount() {
+        return maximalIterationCount;
+    }
+
+    /**
+     * Reset the upper limit for the number of iterations to the default.
+     */
+    public void resetMaximalIterationCount() {
+        maximalIterationCount = defaultMaximalIterationCount;
+    }
+
+    /**
+     * Set the relative accuracy.
+     * 
+     * @param accuracy the relative accuracy.
+     * @throws MathException if the accuracy can't be achieved by the solver or
+     *         is otherwise deemed unreasonable. 
+     */
+    public void setRelativeAccuracy(double accuracy) throws MathException {
+        relativeAccuracy = accuracy;
+    }
+
+    /**
+     * Get the actual relative accuracy.
+     * @return the accuracy
+     */
+    public double getRelativeAccuracy() {
+        return relativeAccuracy;
+    }
+
+    /**
+     * Reset the relative accuracy to the default.
+     */
+    public void resetRelativeAccuracy() {
+        relativeAccuracy = defaultRelativeAccuracy;
+    }
+
+    /**
+     * Set the function value accuracy.
+     * 
+     * @param accuracy the accuracy.
+     * @throws MathException if the accuracy can't be achieved by the solver or
+     *         is otherwise deemed unreasonable. 
+     */
+    public void setFunctionValueAccuracy(double accuracy)
+        throws MathException {
+        functionValueAccuracy = accuracy;
+    }
+
+    /**
+     * Get the actual function value accuracy.
+     * @return the accuracy
+     */
+    public double getFunctionValueAccuracy() {
+        return functionValueAccuracy;
+    }
+
+    /**
+     * Reset the actual function accuracy to the default.
+     */
+    public void resetFunctionValueAccuracy() {
+        functionValueAccuracy = defaultFunctionValueAccuracy;
+    }
+}
diff --git a/src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java b/src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java
new file mode 100644
index 0000000..9d95d57
--- /dev/null
+++ b/src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java
@@ -0,0 +1,110 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowlegement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowlegement may appear in the software itself,
+ *    if and wherever such third-party acknowlegements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their names without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.commons.math.analysis;
+
+import org.apache.commons.math.MathException;
+
+/**
+ * Utility routines for {@link UnivariateRealSolver} objects.
+ * @version $Revision: 1.4 $ $Date: 2003/11/14 22:22:17 $
+ */
+public class UnivariateRealSolverUtil {
+    /**
+     * Default constructor.
+     */
+    private UnivariateRealSolverUtil() {
+        super();
+    }
+
+    /**
+     * Method to solve for zeros of real univariate functions.  A
+     * default solver is created and used for solving. 
+     * @param f the function.
+     * @param x0 the lower bound for the interval.
+     * @param x1 the upper bound for the interval.
+     * @return a value where the function is zero.
+     * @throws MathException if the iteration count was exceeded or the
+     *         solver detects convergence problems otherwise.
+     */
+    public static double solve(UnivariateRealFunction f, double x0, double x1)
+        throws MathException {
+            
+        return UnivariateRealSolverFactory.newInstance().newDefaultSolver(f)
+            .solve(x0, x1);
+    }
+
+    /**
+     * Convience method to solve for zeros of real univariate functions.  A
+     * default solver is created and used for solving. 
+     * @param f the function.
+     * @param x0 the lower bound for the interval.
+     * @param x1 the upper bound for the interval.
+     * @param absoluteAccuracy the accuracy to be used by the solver.
+     * @return a value where the function is zero.
+     * @throws MathException if the iteration count was exceeded or the
+     *         solver detects convergence problems otherwise.
+     */
+    public static double solve(
+        UnivariateRealFunction f,
+        double x0,
+        double x1,
+        double absoluteAccuracy)
+        throws MathException {
+            
+        UnivariateRealSolver solver = UnivariateRealSolverFactory.newInstance()
+            .newDefaultSolver(f);
+        solver.setAbsoluteAccuracy(absoluteAccuracy);
+        return solver.solve(x0, x1);
+    }
+}
diff --git a/src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java b/src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java
new file mode 100644
index 0000000..7f412c6
--- /dev/null
+++ b/src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java
@@ -0,0 +1,176 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.commons.math.analysis;
+
+import org.apache.commons.math.MathException;
+
+/**
+ * Utility routines for {@link UnivariateRealSolver} objects.
+ * @version $Revision: 1.5 $ $Date: 2003/11/14 22:22:18 $
+ */
+public class UnivariateRealSolverUtils {
+    /**
+     * Default constructor.
+     */
+    private UnivariateRealSolverUtils() {
+        super();
+    }
+
+    /**
+     * Method to solve for zeros of real univariate functions.  A
+     * default solver is created and used for solving. 
+     * @param f the function.
+     * @param x0 the lower bound for the interval.
+     * @param x1 the upper bound for the interval.
+     * @return a value where the function is zero.
+     * @throws MathException if the iteration count was exceeded or the
+     *         solver detects convergence problems otherwise.
+     */
+    public static double solve(UnivariateRealFunction f, double x0, double x1)
+        throws MathException
+    {
+        if(f == null){
+            throw new IllegalArgumentException("f can not be null.");    
+        }
+        
+        return UnivariateRealSolverFactory.newInstance().newDefaultSolver(f)
+            .solve(x0, x1);
+    }
+
+    /**
+     * Convience method to solve for zeros of real univariate functions.  A
+     * default solver is created and used for solving. 
+     * @param f the function.
+     * @param x0 the lower bound for the interval.
+     * @param x1 the upper bound for the interval.
+     * @param absoluteAccuracy the accuracy to be used by the solver.
+     * @return a value where the function is zero.
+     * @throws MathException if the iteration count was exceeded or the
+     *         solver detects convergence problems otherwise.
+     */
+    public static double solve(
+        UnivariateRealFunction f,
+        double x0,
+        double x1,
+        double absoluteAccuracy)
+        throws MathException
+    {
+        if(f == null){
+            throw new IllegalArgumentException("f can not be null.");    
+        }
+            
+        UnivariateRealSolver solver = UnivariateRealSolverFactory.newInstance()
+            .newDefaultSolver(f);
+        solver.setAbsoluteAccuracy(absoluteAccuracy);
+        return solver.solve(x0, x1);
+    }
+
+    /**
+     * For a function, f, this method returns two values, a and b that bracket
+     * a root of f.  That is to say, there exists a value c between a and b
+     * such that f(c) = 0.
+     *
+     * @param function the function
+     * @param initial midpoint of the returned range.
+     * @param lowerBound for numerical safety, a never is less than this value.
+     * @param upperBound for numerical safety, b never is greater than this
+     *                   value.
+     * @return a two element array holding {a, b}.
+     * @throws MathException if a root can not be bracketted.
+     */
+    public static double[] bracket(UnivariateRealFunction function,
+                                   double initial,
+                                   double lowerBound,
+                                   double upperBound) throws MathException {
+        return bracket( function, initial, lowerBound, upperBound,
+            Integer.MAX_VALUE ) ;
+    }
+
+    /**
+     * For a function, f, this method returns two values, a and b that bracket
+     * a root of f.  That is to say, there exists a value c between a and b
+     * such that f(c) = 0.
+     *
+     * @param function the function
+     * @param initial midpoint of the returned range.
+     * @param lowerBound for numerical safety, a never is less than this value.
+     * @param upperBound for numerical safety, b never is greater than this
+     *                   value.
+     * @param maximumIterations to guard against infinite looping, maximum
+     *                          number of iterations to perform
+     * @return a two element array holding {a, b}.
+     * @throws MathException if a root can not be bracketted.
+     */
+    public static double[] bracket(UnivariateRealFunction function,
+                                   double initial,
+                                   double lowerBound,
+                                   double upperBound,
+                                   int maximumIterations) throws MathException {
+        double a = initial;
+        double b = initial;
+        double fa;
+        double fb;
+        int numIterations = 0 ;
+    
+        do {
+            a = Math.max(a - 1.0, lowerBound);
+            b = Math.min(b + 1.0, upperBound);
+            fa = function.value(a);
+            fb = function.value(b);
+            numIterations += 1 ;
+        } while ( (fa * fb > 0.0) && ( numIterations < maximumIterations ) );
+    
+        return new double[]{a, b};
+    }
+}
diff --git a/src/java/org/apache/commons/math/analysis/package.html b/src/java/org/apache/commons/math/analysis/package.html
new file mode 100644
index 0000000..a4cf4c8
--- /dev/null
+++ b/src/java/org/apache/commons/math/analysis/package.html
@@ -0,0 +1,6 @@
+<html>
+	<!-- $Revision: 1.4 $ $Date: 2003/11/14 22:22:17 $ -->
+    <body>
+     Implementations of common numerical analysis procedures, including root finding and function interpolation.
+    </body>
+</html>
\ No newline at end of file
diff --git a/src/java/org/apache/commons/math/complex/Complex.java b/src/java/org/apache/commons/math/complex/Complex.java
new file mode 100644
index 0000000..ccbcd29
--- /dev/null
+++ b/src/java/org/apache/commons/math/complex/Complex.java
@@ -0,0 +1,255 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution,
+ *    if any, must include the following acknowledgment:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgment may appear in the software itself,
+ *    if and wherever such third-party acknowledgments normally appear.
+ *
+ * 4. The names "Apache" and "Apache Software Foundation" and
+ *    "Apache Geronimo" must not be used to endorse or promote products
+ *    derived from this software without prior written permission. For
+ *    written permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache",
+ *    "Apache Geronimo", nor may "Apache" appear in their name, without
+ *    prior written permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ *
+ * ====================================================================
+ */
+
+package org.apache.commons.math.complex;
+
+/**
+ * Reference:
+ *   http://myweb.lmu.edu/dmsmith/ZMLIB.pdf
+ * 
+ * @version $Revision: 1.3 $ $Date: 2003/11/14 22:22:22 $
+ */
+public class Complex {
+
+    /** The square root of -1. */    
+    public static final Complex I = new Complex(0.0, 1.0);
+    
+    /** */
+    public static final Complex NaN = new Complex(Double.NaN, Double.NaN);
+
+    /** 1. */    
+    public static final Complex ONE = new Complex(1.0, 0.0);
+    
+    /** The imaginary part. */
+    protected double imaginary;
+    
+    /** The real part. */
+    protected double real;
+    
+    /**
+     * Create a complex number given the real and imaginary parts.
+     * @param real the real part.
+     * @param imaginary the imaginary part.
+     */
+    public Complex(double real, double imaginary) {
+        super();
+        this.real = real;
+        this.imaginary = imaginary;
+    }
+
+    /**
+     * Return the absolute value of this complex number.
+     * @return the absolute value.
+     */
+    public double abs() {
+        if (isNaN()) {
+            return Double.NaN;
+        }
+        return Math.sqrt(squareSum());       
+    }
+    
+    /**
+     * Return the sum of this complex number and the given complex number.
+     * @param rhs the other complex number.
+     * @return the complex number sum.
+     */
+    public Complex add(Complex rhs) {
+        if (isNaN() || rhs.isNaN()) {
+            return NaN;
+        }
+        
+        return new Complex(real + rhs.getReal(),
+            imaginary + rhs.getImaginary());
+    }
+    
+    /**
+     * Return the conjugate of this complex number.
+     * @return the conjugate.
+     */
+    public Complex conjugate() {
+        if (isNaN()) {
+            return NaN;
+        }
+        
+        return new Complex(real, -imaginary);
+    }
+    
+    /**
+     * Return the quotient of this complex number and the given complex number.
+     * @param rhs the other complex number.
+     * @return the complex number quotient.
+     */
+    public Complex divide(Complex rhs) {
+        if (isNaN() || rhs.isNaN()) {
+            return NaN;
+        }
+        
+        if (Math.abs(rhs.getReal()) < Math.abs(rhs.getImaginary())) {
+            double q = rhs.getReal() / rhs.getImaginary();
+            double d = (rhs.getReal() * q) + rhs.getImaginary();
+            return new Complex(((real * q) + imaginary) / d,
+                ((imaginary * q) - real) / d);
+        } else {
+            double q = rhs.getImaginary() / rhs.getReal();
+            double d = (rhs.getImaginary() * q) + rhs.getReal();
+            return new Complex(((imaginary * q) + real) / d,
+                (imaginary - (real * q)) / d);
+        }
+    }
+    
+    /**
+     * 
+     */
+    public boolean equals(Object other) {
+        boolean ret;
+        
+        if (this == other) { 
+            ret = true;
+        } else if (other == null) {
+            ret = false;
+        } else {
+            try {
+                Complex rhs = (Complex)other;
+                ret = (Double.doubleToRawLongBits(real) ==
+                        Double.doubleToRawLongBits(rhs.getReal())) &&
+                    (Double.doubleToRawLongBits(imaginary) ==
+                        Double.doubleToRawLongBits(rhs.getImaginary())); 
+            } catch (ClassCastException ex) {
+                // ignore exception
+                ret = false;
+            }
+        }
+        
+        return ret;
+    }
+
+    /**
+     * Access the imaginary part.
+     * @return the imaginary part.
+     */
+    public double getImaginary() {
+        return imaginary;
+    }
+
+    /**
+     * Access the real part.
+     * @return the real part.
+     */
+    public double getReal() {
+        return real;
+    }
+    
+    /**
+     * Returns true if this complex number is the special Not-a-Number (NaN)
+     * value.
+     * @return true if the value represented by this object is NaN; false
+     *         otherwise.
+     */
+    public boolean isNaN() {
+        return Double.isNaN(real) || Double.isNaN(imaginary);        
+    }
+    
+    /**
+     * Return the product of this complex number and the given complex number.
+     * @param rhs the other complex number.
+     * @return the complex number product.
+     */
+    public Complex multiply(Complex rhs) {
+        if (isNaN() || rhs.isNaN()) {
+            return NaN;
+        }
+        
+        double p = (real + imaginary) * (rhs.getReal() + rhs.getImaginary());
+        double ac = real * rhs.getReal();
+        double bd = imaginary * rhs.getImaginary();
+        return new Complex(ac - bd, p - ac - bd);
+    }
+    
+    /**
+     * Return the additive inverse of this complex number.
+     * @return the negation of this complex number.
+     */
+    public Complex negate() {
+        if (isNaN()) {
+            return NaN;
+        }
+        
+        return new Complex(-real, -imaginary);
+    }
+    
+    /**
+     * Return the sum of the squared terms.
+     * @return the square sum.
+     */
+    private double squareSum() {
+        return real * real + imaginary * imaginary;
+    }
+    
+    /**
+     * Return the difference between this complex number and the given complex
+     * number.
+     * @param rhs the other complex number.
+     * @return the complex number difference.
+     */
+    public Complex subtract(Complex rhs) {
+        if (isNaN() || rhs.isNaN()) {
+            return NaN;
+        }
+        
+        return new Complex(real - rhs.getReal(),
+            imaginary - rhs.getImaginary());
+    }
+}
diff --git a/src/java/org/apache/commons/math/complex/ComplexMath.java b/src/java/org/apache/commons/math/complex/ComplexMath.java
new file mode 100644
index 0000000..07f39bb
--- /dev/null
+++ b/src/java/org/apache/commons/math/complex/ComplexMath.java
@@ -0,0 +1,264 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution,
+ *    if any, must include the following acknowledgment:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgment may appear in the software itself,
+ *    if and wherever such third-party acknowledgments normally appear.
+ *
+ * 4. The names "Apache" and "Apache Software Foundation" and
+ *    "Apache Geronimo" must not be used to endorse or promote products
+ *    derived from this software without prior written permission. For
+ *    written permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache",
+ *    "Apache Geronimo", nor may "Apache" appear in their name, without
+ *    prior written permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ *
+ * ====================================================================
+ */
+
+package org.apache.commons.math.complex;
+
+import org.apache.commons.math.util.MathUtils;
+
+/**
+ * Reference:
+ *   http://myweb.lmu.edu/dmsmith/ZMLIB.pdf
+ * 
+ * @version $Revision: 1.3 $ $Date: 2003/11/14 22:22:22 $
+ */
+public class ComplexMath {
+    
+    /**
+     * 
+     */
+    private ComplexMath() {
+        super();
+    }
+    
+    /**
+     * 
+     */
+    public static Complex acos(Complex z) {
+        if (z.isNaN()) {
+            return Complex.NaN;
+        }
+
+        return Complex.I.negate().multiply(log(z.add(
+            Complex.I.multiply(sqrt1z(z)))));       
+    }
+    
+    /**
+     * 
+     */
+    public static Complex asin(Complex z) {
+        if (z.isNaN()) {
+            return Complex.NaN;
+        }
+
+        return Complex.I.negate().multiply(log(sqrt1z(z).add(
+            Complex.I.multiply(z))));       
+    }
+    
+    /**
+     * 
+     */
+    public static Complex atan(Complex z) {
+        if (z.isNaN()) {
+            return Complex.NaN;
+        }
+        
+        return Complex.I.multiply(
+            log(Complex.I.add(z).divide(Complex.I.subtract(z))))
+            .multiply(new Complex(2.0, 0.0));
+    }
+    
+    /**
+     * 
+     */
+    public static Complex cos(Complex z) {
+        if (z.isNaN()) {
+            return Complex.NaN;
+        }
+        
+        double a = z.getReal();
+        double b = z.getImaginary();
+        
+        return new Complex(Math.cos(a) * MathUtils.cosh(b),
+            -Math.sin(a) * MathUtils.sinh(b));
+    }
+    
+    /**
+     * 
+     */
+    public static Complex cosh(Complex z) {
+        if (z.isNaN()) {
+            return Complex.NaN;
+        }
+        
+        double a = z.getReal();
+        double b = z.getImaginary();
+        
+        return new Complex(MathUtils.cosh(a) * Math.cos(b),
+            MathUtils.sinh(a) * Math.sin(b));
+    }
+    
+    /**
+     * 
+     */
+    public static Complex exp(Complex z) {
+        if (z.isNaN()) {
+            return Complex.NaN;
+        }
+        
+        double b = z.getImaginary();
+        double expA = Math.exp(z.getReal());
+        double sinB = Math.sin(b);
+        double cosB = Math.cos(b);
+        return new Complex(expA * cosB, expA * sinB);
+    }
+    
+    /**
+     * 
+     */
+    public static Complex log(Complex z) {
+        if (z.isNaN()) {
+            return Complex.NaN;
+        }
+
+        return new Complex(Math.log(z.abs()),
+            Math.atan2(z.getImaginary(), z.getReal()));        
+    }
+    
+    /**
+     * 
+     */
+    public static Complex pow(Complex y, Complex x) {
+        return exp(x.multiply(log(y)));
+    }
+    
+    /**
+     * 
+     */
+    public static Complex sin(Complex z) {
+        if (z.isNaN()) {
+            return Complex.NaN;
+        }
+        
+        double a = z.getReal();
+        double b = z.getImaginary();
+        
+        return new Complex(Math.sin(a) * MathUtils.cosh(b),
+            Math.cos(a) * MathUtils.sinh(b));
+    }
+    
+    /**
+     * 
+     */
+    public static Complex sinh(Complex z) {
+        if (z.isNaN()) {
+            return Complex.NaN;
+        }
+        
+        double a = z.getReal();
+        double b = z.getImaginary();
+        
+        return new Complex(MathUtils.sinh(a) * Math.cos(b),
+            MathUtils.cosh(a) * Math.sin(b));
+    }
+    
+    /**
+     * 
+     */
+    public static Complex sqrt(Complex z) {
+        if (z.isNaN()) {
+            return Complex.NaN;
+        }
+        
+        double a = z.getReal();
+        double b = z.getImaginary();
+        
+        double t = Math.sqrt((Math.abs(a) + z.abs()) / 2.0);
+        if (a >= 0.0) {
+            return new Complex(t, b / (2.0 * t));
+        } else {
+            double s = (b > 0.0 ? 1.0 : (b < 0.0 ? -1.0 : 0.0));
+            return new Complex(Math.abs(z.getImaginary()) / (2.0 * t), s * t);
+        }
+    }
+    
+    /**
+     * Returns the square root of 1 - z^2.
+     * @return the square root of 1 - z^2.
+     */
+    public static Complex sqrt1z(Complex z) {
+        return sqrt(Complex.ONE.subtract(z.multiply(z)));
+    }
+    
+    /**
+     * 
+     */
+    public static Complex tan(Complex z) {
+        if (z.isNaN()) {
+            return Complex.NaN;
+        }
+        
+        double a2 = 2.0 * z.getReal();
+        double b2 = 2.0 * z.getImaginary();
+        double d = Math.cos(a2) + MathUtils.cosh(b2);
+        
+        return new Complex(Math.sin(a2) / d, MathUtils.sinh(b2) / 2);
+    }
+    
+    /**
+     * 
+     */
+    public static Complex tanh(Complex z) {
+        if (z.isNaN()) {
+            return Complex.NaN;
+        }
+        
+        double a2 = 2.0 * z.getReal();
+        double b2 = 2.0 * z.getImaginary();
+        double d = MathUtils.cosh(a2) + Math.cos(b2);
+        
+        return new Complex(MathUtils.sinh(a2) / d, Math.sin(b2) / 2);
+    }
+}
diff --git a/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java b/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java
new file mode 100644
index 0000000..b5793e1
--- /dev/null
+++ b/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java
@@ -0,0 +1,169 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.commons.math.stat.distribution;
+
+import org.apache.commons.math.MathException;
+import org.apache.commons.math.analysis.UnivariateRealFunction;
+import org.apache.commons.math.analysis.UnivariateRealSolverUtils;
+
+/**
+ * Base class for various continuous distributions.  It provides default
+ * implementations for some of the methods that do not vary from distribution
+ * to distribution.
+ *  
+ * @version $Revision: 1.13 $ $Date: 2003/11/14 22:22:19 $
+ */
+public abstract class AbstractContinuousDistribution
+    implements ContinuousDistribution {
+        
+    /**
+     * Default constructor.
+     */
+    protected AbstractContinuousDistribution() {
+        super();
+    }
+
+    /**
+     * For this distribution, X, this method returns P(x0 &lt; X &lt; x1).  This
+     * is accomplished by using the equality P(x0 &lt; X &lt; x1) =
+     * P(X &lt; x1) - P(X &lt; x0).
+     * 
+     * @param x0 the lower bound
+     * @param x1 the upper bound
+     * @return the cummulative probability. 
+     */
+    public double cummulativeProbability(double x0, double x1) {
+        return cummulativeProbability(x1) - cummulativeProbability(x0);
+    }
+    
+    /**
+     * For this distribution, X, this method returns the critical point x, such
+     * that P(X &lt; x) = <code>p</code>.
+     *
+     * @param p the desired probability
+     * @return x, such that P(X &lt; x) = <code>p</code>
+     */
+    public double inverseCummulativeProbability(final double p) {
+        if (p < 0.0 || p > 1.0) {
+            throw new IllegalArgumentException(
+                "p must be between 0.0 and 1.0, inclusive.");
+        }
+        
+        // by default, do simple root finding using bracketing and bisection.
+        // subclasses can overide if there is a better method.
+        UnivariateRealFunction rootFindingFunction =
+            new UnivariateRealFunction() {
+                
+            public double value(double x) throws MathException {
+                return cummulativeProbability(x) - p;
+            }
+
+            public double firstDerivative(double x) throws MathException {
+                return 0;
+            }
+
+            public double secondDerivative(double x) throws MathException {
+                return 0;
+            }
+        };
+        
+        try {
+            // bracket root
+            double[] bracket = UnivariateRealSolverUtils.bracket(rootFindingFunction,
+                getInitialDomain(p), getDomainLowerBound(p),
+                getDomainUpperBound(p));
+            
+            // find root
+            double root = UnivariateRealSolverUtils.solve(
+                rootFindingFunction, bracket[0], bracket[1]);
+        
+            return root;
+        } catch (MathException ex) {
+            // this should never happen.
+            return Double.NaN;
+        }
+    }
+    
+    /**
+     * Access the initial domain value, based on <code>p</code>, used to
+     * bracket a CDF root.  This method is used by
+     * {@link #inverseCummulativeProbability(double)} to find critical values.
+     * 
+     * @param p the desired probability for the critical value
+     * @return initial domain value
+     */
+    protected abstract double getInitialDomain(double p);
+    
+    /**
+     * Access the domain value lower bound, based on <code>p</code>, used to
+     * bracket a CDF root.  This method is used by
+     * {@link #inverseCummulativeProbability(double)} to find critical values.
+     * 
+     * @param p the desired probability for the critical value
+     * @return domain value lower bound, i.e.
+     *         P(X &lt; <i>lower bound</i>) &lt; <code>p</code> 
+     */
+    protected abstract double getDomainLowerBound(double p);
+    
+    /**
+     * Access the domain value upper bound, based on <code>p</code>, used to
+     * bracket a CDF root.  This method is used by
+     * {@link #inverseCummulativeProbability(double)} to find critical values.
+     * 
+     * @param p the desired probability for the critical value
+     * @return domain value upper bound, i.e.
+     *         P(X &lt; <i>upper bound</i>) &gt; <code>p</code> 
+     */
+    protected abstract double getDomainUpperBound(double p);
+}
diff --git a/src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java b/src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java
new file mode 100644
index 0000000..8cfeb9b
--- /dev/null
+++ b/src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java
@@ -0,0 +1,160 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.commons.math.stat.distribution;
+
+
+/**
+ * Base class for various discrete distributions.  It provides default
+ * implementations for some of the methods that do not vary from distribution
+ * to distribution.
+ *  
+ * @version $Revision: 1.6 $ $Date: 2003/11/14 22:22:19 $
+ */
+public abstract class AbstractDiscreteDistribution
+    implements DiscreteDistribution {
+        
+    /**
+     * Default constructor.
+     */
+    protected AbstractDiscreteDistribution() {
+        super();
+    }
+    
+    /**
+     * For this disbution, X, this method returns P(x0 &le; X &le; x1).
+     * @param x0 the inclusive, lower bound
+     * @param x1 the inclusive, upper bound
+     * @return the cummulative probability. 
+     */
+    public double cummulativeProbability(int x0, int x1) {
+        return cummulativeProbability(x1) - 
+            cummulativeProbability(x0 - 1);
+    }
+    
+    /**
+     * For this distribution, X, this method returns the critical point x, such
+     * that P(X &le; x) &le; <code>p</code>.
+     *
+     * @param p the desired probability
+     * @return x, such that P(X &lt; x) = <code>p</code>
+     */
+    public int inverseCummulativeProbability(final double p) {
+        if (p < 0.0 || p > 1.0) {
+            throw new IllegalArgumentException(
+                "p must be between 0.0 and 1.0, inclusive.");
+        }
+        
+        // by default, do simple bisection.
+        // subclasses can override if there is a better method.
+        int x0 = getDomainLowerBound(p);
+        int x1 = getDomainUpperBound(p);
+        double pm;
+        while (x0 < x1) {
+            int xm = x0 + (x1 - x0) / 2;
+            pm = cummulativeProbability(xm);
+            if (pm > p) {
+                // update x1
+                if (xm == x1) {
+                    // this can happen with integer division
+                    // simply decrement x1
+                    --x1;
+                } else {
+                    // update x1 normally
+                    x1 = xm;
+                }
+            } else {
+                // update x0
+                if (xm == x0) {
+                    // this can happen with integer division
+                    // simply increment x0
+                    ++x0;
+                } else {
+                    // update x0 normally
+                    x0 = xm;
+                }
+            }
+        }
+        
+        // insure x0 is the correct critical point
+        pm = cummulativeProbability(x0);
+        while (pm > p) {
+            --x0;
+            pm = cummulativeProbability(x0);
+        }
+        
+        return x0;        
+    }
+    
+    /**
+     * Access the domain value lower bound, based on <code>p</code>, used to
+     * bracket a PDF root.  This method is used by
+     * {@link #inverseCummulativeProbability(double)} to find critical values.
+     * 
+     * @param p the desired probability for the critical value
+     * @return domain value lower bound, i.e.
+     *         P(X &lt; <i>lower bound</i>) &lt; <code>p</code> 
+     */
+    protected abstract int getDomainLowerBound(double p);
+    
+    /**
+     * Access the domain value upper bound, based on <code>p</code>, used to
+     * bracket a PDF root.  This method is used by
+     * {@link #inverseCummulativeProbability(double)} to find critical values.
+     * 
+     * @param p the desired probability for the critical value
+     * @return domain value upper bound, i.e.
+     *         P(X &lt; <i>upper bound</i>) &gt; <code>p</code> 
+     */
+    protected abstract int getDomainUpperBound(double p);
+}
diff --git a/src/java/org/apache/commons/math/distribution/BinomialDistribution.java b/src/java/org/apache/commons/math/distribution/BinomialDistribution.java
new file mode 100644
index 0000000..5183dc0
--- /dev/null
+++ b/src/java/org/apache/commons/math/distribution/BinomialDistribution.java
@@ -0,0 +1,94 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.commons.math.stat.distribution;
+
+/**
+ * The Binomial Distribution.
+ * 
+ * Instances of BinomialDistribution objects should be created using
+ * {@link DistributionFactory#createBinomialDistribution(int, double)}.
+ * 
+ * References:
+ * <ul>
+ * <li><a href="http://mathworld.wolfram.com/BinomialDistribution.html">
+ * Binomial Distribution</a></li>
+ * </ul>
+ * 
+ * @version $Revision: 1.6 $ $Date: 2003/11/14 22:22:19 $
+ */
+public interface BinomialDistribution extends DiscreteDistribution {
+    /**
+     * Access the number of trials for this distribution.
+     * @return the number of trials.
+     */
+    int getNumberOfTrials();
+    
+    /**
+     * Access the probability of success for this distribution.
+     * @return the probability of success.
+     */
+    double getProbabilityOfSuccess();
+    
+    /**
+     * Change the number of trials for this distribution.
+     * @param trials the new number of trials.
+     */
+    void setNumberOfTrials(int trials);
+    
+    /**
+     * Change the probability of success for this distribution.
+     * @param p the new probability of success.
+     */
+    void setProbabilityOfSuccess(double p);
+}
\ No newline at end of file
diff --git a/src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java b/src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java
new file mode 100644
index 0000000..364362b
--- /dev/null
+++ b/src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java
@@ -0,0 +1,193 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.commons.math.stat.distribution;
+
+import org.apache.commons.logging.LogFactory;
+import org.apache.commons.math.MathException;
+import org.apache.commons.math.special.Beta;
+import org.apache.commons.math.util.MathUtils;
+
+/**
+ * The default implementation of {@link BinomialDistribution}.
+ * 
+ * @version $Revision: 1.5 $ $Date: 2003/11/14 22:22:19 $
+ */
+public class BinomialDistributionImpl extends AbstractDiscreteDistribution
+    implements BinomialDistribution {
+
+    /** The number of trials. */
+    private int numberOfTrials;
+    
+    /** The probability of success. */
+    private double probabilityOfSuccess;
+    
+    /**
+     * Create a binomial distribution with the given number of trials and
+     * probability of success.
+     * @param trials the number of trials.
+     * @param p the probability of success.
+     */
+    public BinomialDistributionImpl(int trials, double p) {
+        super();
+        setNumberOfTrials(trials);
+        setProbabilityOfSuccess(p);
+    }
+    
+    /**
+     * Access the number of trials for this distribution.
+     * @return the number of trials.
+     */
+    public int getNumberOfTrials() {
+        return numberOfTrials;
+    }
+
+    /**
+     * Access the probability of success for this distribution.
+     * @return the probability of success.
+     */
+    public double getProbabilityOfSuccess() {
+        return probabilityOfSuccess;
+    }
+
+    /**
+     * Change the number of trials for this distribution.
+     * @param trials the new number of trials.
+     */
+    public void setNumberOfTrials(int trials) {
+        if (trials < 0) {
+            throw new IllegalArgumentException(
+                "number of trials must be non-negative.");
+        }
+        numberOfTrials = trials;
+    }
+
+    /**
+     * Change the probability of success for this distribution.
+     * @param p the new probability of success.
+     */
+    public void setProbabilityOfSuccess(double p) {
+        if (p < 0.0 || p > 1.0) {
+            throw new IllegalArgumentException(
+                "probability of success must be between 0.0 and 1.0, inclusive.");
+        }
+        probabilityOfSuccess = p;
+    }
+    
+    /**
+     * Access the domain value lower bound, based on <code>p</code>, used to
+     * bracket a PDF root.
+     * 
+     * @param p the desired probability for the critical value
+     * @return domain value lower bound, i.e.
+     *         P(X &lt; <i>lower bound</i>) &lt; <code>p</code> 
+     */
+    protected int getDomainLowerBound(double p) {
+        return -1;
+    }
+
+    /**
+     * Access the domain value upper bound, based on <code>p</code>, used to
+     * bracket a PDF root.
+     * 
+     * @param p the desired probability for the critical value
+     * @return domain value upper bound, i.e.
+     *         P(X &lt; <i>upper bound</i>) &gt; <code>p</code> 
+     */
+    protected int getDomainUpperBound(double p) {
+        return getNumberOfTrials();
+    }
+
+    /**
+     * For this disbution, X, this method returns P(X &le; x).
+     * @param x the value at which the PDF is evaluated.
+     * @return PDF for this distribution. 
+     */
+    public double cummulativeProbability(int x) {
+        double ret;
+        if (x < 0) {
+            ret = 0.0;
+        } else if (x >= getNumberOfTrials()) {
+            ret = 1.0;
+        } else {
+            try {
+                ret = 1.0 - Beta.regularizedBeta(getProbabilityOfSuccess(),
+                    x + 1.0, getNumberOfTrials() - x);
+            } catch (MathException ex) {
+                LogFactory.getLog(getClass()).error(
+                    "Failed to compute cummulative probability, returning NaN.",
+                    ex);
+                ret = Double.NaN;
+            }
+        }
+        return ret;
+    }
+
+    /**
+     * For this disbution, X, this method returns P(X = x).
+     * @param x the value at which the PMF is evaluated.
+     * @return PMF for this distribution. 
+     */
+    public double probability(int x) {
+        double ret;
+        if (x < 0 || x > getNumberOfTrials()) {
+            ret = 0.0;
+        } else {
+            ret = MathUtils.binomialCoefficientDouble(getNumberOfTrials(), x) *
+                Math.pow(getProbabilityOfSuccess(), x) *
+                Math.pow(1.0 - getProbabilityOfSuccess(),
+                    getNumberOfTrials() - x);
+        }
+        return ret;
+    }
+}
diff --git a/src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java b/src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java
new file mode 100644
index 0000000..6768047
--- /dev/null
+++ b/src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java
@@ -0,0 +1,82 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.commons.math.stat.distribution;
+
+/**
+ * The Chi-Squared Distribution.
+ * 
+ * Instances of ChiSquaredDistribution objects should be created using
+ * {@link DistributionFactory#createChiSquareDistribution(double)}.
+ * 
+ * References:
+ * <ul>
+ * <li><a href="http://mathworld.wolfram.com/Chi-SquaredDistribution.html">
+ * Chi-Squared Distribution</a></li>
+ * </ul>
+ * 
+ * @version $Revision: 1.9 $ $Date: 2003/11/14 22:22:19 $
+ */
+public interface ChiSquaredDistribution extends ContinuousDistribution {
+    /**
+     * Modify the degrees of freedom.
+     * @param degreesOfFreedom the new degrees of freedom.
+     */
+    void setDegreesOfFreedom(double degreesOfFreedom);
+    
+    /**
+     * Access the degrees of freedom.
+     * @return the degrees of freedom.
+     */
+    double getDegreesOfFreedom();
+}
\ No newline at end of file
diff --git a/src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java b/src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java
new file mode 100644
index 0000000..557f2d2
--- /dev/null
+++ b/src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java
@@ -0,0 +1,182 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.commons.math.stat.distribution;
+
+/**
+ * The default implementation of {@link ChiSquaredDistribution}
+ * 
+ * @version $Revision: 1.9 $ $Date: 2003/11/14 22:22:19 $
+ */
+public class ChiSquaredDistributionImpl
+    extends AbstractContinuousDistribution
+    implements ChiSquaredDistribution {
+    
+    /** Internal Gamma distribution. */    
+    private GammaDistribution gamma;
+    
+    /**
+     * Create a Chi-Squared distribution with the given degrees of freedom.
+     * @param degreesOfFreedom degrees of freedom.
+     */
+    public ChiSquaredDistributionImpl(double degreesOfFreedom) {
+        super();
+        setGamma(DistributionFactory.newInstance().createGammaDistribution(
+            degreesOfFreedom / 2.0, 2.0));
+    }
+    
+    /**
+     * Modify the degrees of freedom.
+     * @param degreesOfFreedom the new degrees of freedom.
+     */
+    public void setDegreesOfFreedom(double degreesOfFreedom) {
+        getGamma().setAlpha(degreesOfFreedom / 2.0);
+    }
+        
+    /**
+     * Access the degrees of freedom.
+     * @return the degrees of freedom.
+     */
+    public double getDegreesOfFreedom() {
+        return getGamma().getAlpha() * 2.0;
+    }
+        
+    /**
+     * For this disbution, X, this method returns P(X &lt; x).
+     * @param x the value at which the CDF is evaluated.
+     * @return CDF for this distribution. 
+     */
+    public double cummulativeProbability(double x) {
+        return getGamma().cummulativeProbability(x);
+    }
+        
+    /**
+     * Access the domain value lower bound, based on <code>p</code>, used to
+     * bracket a CDF root.  This method is used by
+     * {@link #inverseCummulativeProbability(double)} to find critical values.
+     * 
+     * @param p the desired probability for the critical value
+     * @return domain value lower bound, i.e.
+     *         P(X &lt; <i>lower bound</i>) &lt; <code>p</code> 
+     */
+    protected double getDomainLowerBound(double p) {
+        return Double.MIN_VALUE * getGamma().getBeta();
+    }
+
+    /**
+     * Access the domain value upper bound, based on <code>p</code>, used to
+     * bracket a CDF root.  This method is used by
+     * {@link #inverseCummulativeProbability(double)} to find critical values.
+     * 
+     * @param p the desired probability for the critical value
+     * @return domain value upper bound, i.e.
+     *         P(X &lt; <i>upper bound</i>) &gt; <code>p</code> 
+     */
+    protected double getDomainUpperBound(double p) {
+        // NOTE: chi squared is skewed to the left
+        // NOTE: therefore, P(X < &mu;) > .5
+
+        double ret;
+
+        if (p < .5) {
+            // use mean
+            ret = getDegreesOfFreedom();
+        } else {
+            // use max
+            ret = Double.MAX_VALUE;
+        }
+        
+        return ret;
+    }
+
+    /**
+     * Access the initial domain value, based on <code>p</code>, used to
+     * bracket a CDF root.  This method is used by
+     * {@link #inverseCummulativeProbability(double)} to find critical values.
+     * 
+     * @param p the desired probability for the critical value
+     * @return initial domain value
+     */
+    protected double getInitialDomain(double p) {
+        // NOTE: chi squared is skewed to the left
+        // NOTE: therefore, P(X < &mu;) > .5
+        
+        double ret;
+
+        if (p < .5) {
+            // use 1/2 mean
+            ret = getDegreesOfFreedom() * .5;
+        } else {
+            // use mean
+            ret = getDegreesOfFreedom();
+        }
+        
+        return ret;
+    }
+    
+    /**
+     * Modify the Gamma distribution.
+     * @param gamma the new distribution.
+     */
+    private void setGamma(GammaDistribution gamma) {
+        this.gamma = gamma;
+    }
+
+    /**
+     * Access the Gamma distribution.
+     * @return the internal Gamma distribution.
+     */
+    private GammaDistribution getGamma() {
+        return gamma;
+    }
+}
diff --git a/src/java/org/apache/commons/math/distribution/ContinuousDistribution.java b/src/java/org/apache/commons/math/distribution/ContinuousDistribution.java
new file mode 100644
index 0000000..cbbdf17
--- /dev/null
+++ b/src/java/org/apache/commons/math/distribution/ContinuousDistribution.java
@@ -0,0 +1,83 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.commons.math.stat.distribution;
+
+/**
+ * Base interface for various continuous distributions.
+ * 
+ * @version $Revision: 1.7 $ $Date: 2003/11/14 22:22:19 $
+ */
+public interface ContinuousDistribution {
+    /**
+     * For this disbution, X, this method returns P(X &lt; x).
+     * @param x the value at which the CDF is evaluated.
+     * @return CDF for this distribution. 
+     */
+    double cummulativeProbability(double x);
+
+    /**
+     * For this disbution, X, this method returns P(x0 &lt; X &lt; x1).
+     * @param x0 the lower bound
+     * @param x1 the upper bound
+     * @return the cummulative probability. 
+     */
+    double cummulativeProbability(double x0, double x1);
+    
+    /**
+     * For this disbution, X, this method returns x such that P(X &lt; x) = p.
+     * @param p the cummulative probability.
+     * @return x. 
+     */
+    double inverseCummulativeProbability(double p);
+}
diff --git a/src/java/org/apache/commons/math/distribution/DiscreteDistribution.java b/src/java/org/apache/commons/math/distribution/DiscreteDistribution.java
new file mode 100644
index 0000000..a1a1145
--- /dev/null
+++ b/src/java/org/apache/commons/math/distribution/DiscreteDistribution.java
@@ -0,0 +1,90 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.commons.math.stat.distribution;
+
+/**
+ * Base interface for various discrete distributions.
+ * 
+ * @version $Revision: 1.5 $ $Date: 2003/11/14 22:22:19 $
+ */
+public interface DiscreteDistribution {
+    /**
+     * For this disbution, X, this method returns P(X = x).
+     * @param x the value at which the PMF is evaluated.
+     * @return PMF for this distribution. 
+     */
+    double probability(int x);
+    
+    /**
+     * For this disbution, X, this method returns P(X &le; x).
+     * @param x the value at which the PDF is evaluated.
+     * @return PDF for this distribution. 
+     */
+    double cummulativeProbability(int x);
+
+    /**
+     * For this disbution, X, this method returns P(x0 &le; X &le; x1).
+     * @param x0 the inclusive, lower bound
+     * @param x1 the inclusive, upper bound
+     * @return the cummulative probability. 
+     */
+    double cummulativeProbability(int x0, int x1);
+    
+    /**
+     * For this disbution, X, this method returns x such that P(X &le; x) <= p.
+     * @param p the cummulative probability.
+     * @return x. 
+     */
+    int inverseCummulativeProbability(double p);
+}
diff --git a/src/java/org/apache/commons/math/distribution/DistributionFactory.java b/src/java/org/apache/commons/math/distribution/DistributionFactory.java
new file mode 100644
index 0000000..3e99212
--- /dev/null
+++ b/src/java/org/apache/commons/math/distribution/DistributionFactory.java
@@ -0,0 +1,167 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+
+package org.apache.commons.math.stat.distribution;
+
+import org.apache.commons.discovery.tools.DiscoverClass;
+
+/**
+ * This factory provids the means to create common statistical distributions.
+ * The following distributions are supported:
+ * <ul>
+ * <li>Binomial</li>
+ * <li>Chi-Squared</li>
+ * <li>Exponential</li>
+ * <li>F</li>
+ * <li>Gamma</li>
+ * <li>Student's t</li>
+ * </ul>
+ * 
+ * Common usage:<pre>
+ * DistributionFactory factory = DistributionFactory.newInstance();
+ * 
+ * // create a Chi-Square distribution with 5 degrees of freedom.
+ * ChiSquaredDistribution chi = factory.createChiSquareDistribution(5.0);
+ * </pre>
+ * 
+ * @version $Revision: 1.16 $ $Date: 2003/11/14 22:22:19 $
+ */
+public abstract class DistributionFactory {
+    /**
+     * Default constructor.
+     */
+    protected DistributionFactory() {
+        super();
+    }
+    
+    /**
+     * Create an instance of a <code>DistributionFactory</code>
+     * @return a new factory. 
+     */
+    public static DistributionFactory newInstance() {
+        DistributionFactory factory = null;
+        try {
+            DiscoverClass dc = new DiscoverClass();
+            factory = (DistributionFactory) dc.newInstance(
+                DistributionFactory.class,
+                "org.apache.commons.math.stat.distribution.DistributionFactoryImpl");
+        } catch(Exception ex) {
+            // ignore as default implementation will be used.
+        }
+        return factory;
+    }
+
+    /**
+     * Create a binomial distribution with the given number of trials and
+     * probability of success.
+     * @param numberOfTrials the number of trials.
+     * @param probabilityOfSuccess the probability of success.
+     * @return a new binomial distribution.
+     */
+    public abstract BinomialDistribution createBinomialDistribution(
+        int numberOfTrials, double probabilityOfSuccess);
+        
+    /**
+     * Create a new chi-square distribution with the given degrees of freedom.
+     * @param degreesOfFreedom degrees of freedom.
+     * @return a new chi-square distribution.  
+     */
+    public abstract ChiSquaredDistribution createChiSquareDistribution(
+        double degreesOfFreedom);
+    
+    /**
+     * Create a new exponential distribution with the given degrees of freedom.
+     * @param mean mean.
+     * @return a new exponential distribution.  
+     */
+    public abstract ExponentialDistribution createExponentialDistribution(
+        double mean);
+    
+    /**
+     * Create a new F-distribution with the given degrees of freedom.
+     * @param numeratorDegreesOfFreedom numerator degrees of freedom.
+     * @param denominatorDegreesOfFreedom denominator degrees of freedom.
+     * @return a new F-distribution.  
+     */
+    public abstract FDistribution createFDistribution(
+        double numeratorDegreesOfFreedom, double denominatorDegreesOfFreedom);
+    
+    /**
+     * Create a new gamma distribution with the given alpha and beta values.
+     * @param alpha the shape parameter.
+     * @param beta the scale parameter.
+     * @return a new gamma distribution.  
+     */
+    public abstract GammaDistribution createGammaDistribution(
+        double alpha, double beta);
+
+    /**
+     * Create a new t distribution with the given degrees of freedom.
+     * @param degreesOfFreedom degrees of freedom.
+     * @return a new t distribution.  
+     */
+    public abstract TDistribution createTDistribution(double degreesOfFreedom);
+    
+    /**
+     * Create a new hypergeometric distribution with the given the population
+     * size, the number of successes in the population, and the sample size.
+     * @param populationSize the population size.
+     * @param numberOfSuccesses number of successes in the population.
+     * @param sampleSize the sample size.
+     * @return a new hypergeometric desitribution.
+     */
+    public abstract HypergeometricDistribution
+        createHypergeometricDistribution(int populationSize,
+            int numberOfSuccesses, int sampleSize);
+}
diff --git a/src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java b/src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java
new file mode 100644
index 0000000..4309ca1
--- /dev/null
+++ b/src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java
@@ -0,0 +1,155 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.commons.math.stat.distribution;
+
+
+/**
+ * A concrete distribution factory.  This is the default factory used by
+ * Commons-Math.
+ *  
+ * @version $Revision: 1.14 $ $Date: 2003/11/14 22:22:19 $
+ */
+public class DistributionFactoryImpl extends DistributionFactory {
+    /**
+     * Default constructor.  Package scope to prevent unwanted instantiation. 
+     */
+    public DistributionFactoryImpl() {
+        super();
+    }
+    
+    /**
+     * Create a new chi-square distribution with the given degrees of freedom.
+     * @param degreesOfFreedom degrees of freedom.
+     * @return a new chi-square distribution.  
+     */
+    public ChiSquaredDistribution createChiSquareDistribution(
+        final double degreesOfFreedom) {
+            
+        return new ChiSquaredDistributionImpl(degreesOfFreedom);
+    }
+    
+    /**
+     * Create a new gamma distribution the given alpha and beta values.
+     * @param alpha the shape parameter.
+     * @param beta the scale parameter.
+     * @return a new gamma distribution.  
+     */
+    public GammaDistribution createGammaDistribution(
+        double alpha, double beta) {
+
+        return new GammaDistributionImpl(alpha, beta);
+    }
+
+    /**
+     * Create a new t distribution with the given degrees of freedom.
+     * @param degreesOfFreedom degrees of freedom.
+     * @return a new t distribution.  
+     */
+    public TDistribution createTDistribution(double degreesOfFreedom) {
+        return new TDistributionImpl(degreesOfFreedom);
+    }
+
+    /**
+     * Create a new F-distribution with the given degrees of freedom.
+     * @param numeratorDegreesOfFreedom numerator degrees of freedom.
+     * @param denominatorDegreesOfFreedom denominator degrees of freedom.
+     * @return a new F-distribution.  
+     */
+    public FDistribution createFDistribution(
+        double numeratorDegreesOfFreedom,
+        double denominatorDegreesOfFreedom) {
+        return new FDistributionImpl(numeratorDegreesOfFreedom,
+            denominatorDegreesOfFreedom);
+    }
+
+    /**
+     * Create a new exponential distribution with the given degrees of freedom.
+     * @param mean mean.
+     * @return a new exponential distribution.  
+     */
+    public ExponentialDistribution createExponentialDistribution(double mean) {
+        return new ExponentialDistributionImpl(mean);
+    }    
+
+    /**
+     * Create a binomial distribution with the given number of trials and
+     * probability of success.
+     * @param numberOfTrials the number of trials.
+     * @param probabilityOfSuccess the probability of success.
+     * @return a new binomial distribution.
+     */
+    public BinomialDistribution createBinomialDistribution(
+        int numberOfTrials, double probabilityOfSuccess) {
+        return new BinomialDistributionImpl(numberOfTrials,
+            probabilityOfSuccess);
+    }
+
+    /**
+     * Create a new hypergeometric distribution with the given the population
+     * size, the number of successes in the population, and the sample size.
+     * @param populationSize the population size.
+     * @param numberOfSuccesses number of successes in the population.
+     * @param sampleSize the sample size.
+     * @return a new hypergeometric desitribution.
+     */
+    public HypergeometricDistribution createHypergeometricDistribution(
+        int populationSize,
+        int numberOfSuccesses,
+        int sampleSize)
+    {
+        return new HypergeometricDistributionImpl(populationSize,
+            numberOfSuccesses, sampleSize);
+    }
+
+}
diff --git a/src/java/org/apache/commons/math/distribution/ExponentialDistribution.java b/src/java/org/apache/commons/math/distribution/ExponentialDistribution.java
new file mode 100644
index 0000000..97c8ebb
--- /dev/null
+++ b/src/java/org/apache/commons/math/distribution/ExponentialDistribution.java
@@ -0,0 +1,81 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.commons.math.stat.distribution;
+
+/**
+ * The Exponential Distribution.
+ * 
+ * Instances of ExponentialDistribution objects should be created using
+ * {@link DistributionFactory#createExponentialDistribution(double)}.
+ * 
+ * References:
+ * <ul>
+ * <li><a href="http://mathworld.wolfram.com/ExponentialDistribution.html">
+ * Exponential Distribution</a></li>
+ * 
+ * @version $Revision: 1.7 $ $Date: 2003/11/14 22:22:19 $
+ */
+public interface ExponentialDistribution extends ContinuousDistribution {
+    /**
+     * Modify the mean.
+     * @param mean the new mean.
+     */
+    void setMean(double mean);
+    
+    /**
+     * Access the mean.
+     * @return the mean.
+     */
+    double getMean();
+}
\ No newline at end of file
diff --git a/src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java b/src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java
new file mode 100644
index 0000000..7ebeec2
--- /dev/null
+++ b/src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java
@@ -0,0 +1,148 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.commons.math.stat.distribution;
+
+/**
+ * The default implementation of {@link ExponentialDistribution}
+ * 
+ * @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:19 $
+ */
+public class ExponentialDistributionImpl
+    implements ExponentialDistribution {
+
+    /** The mean of this distribution. */
+    private double mean;
+    
+    /**
+     * Create a exponential distribution with the given mean.
+     * @param mean mean of this distribution.
+     */
+    public ExponentialDistributionImpl(double mean) {
+        super();
+        setMean(mean);
+    }
+
+    /**
+     * Modify the mean.
+     * @param mean the new mean.
+     */
+    public void setMean(double mean) {
+        if (mean <= 0.0) {
+            throw new IllegalArgumentException("mean must be positive.");
+        }
+        this.mean = mean;
+    }
+
+    /**
+     * Access the mean.
+     * @return the mean.
+     */
+    public double getMean() {
+        return mean;
+    }
+
+    /**
+     * For this disbution, X, this method returns P(X &lt; x).
+     * 
+     * The implementation of this method is based on:
+     * <ul>
+     * <li>
+     * <a href="http://mathworld.wolfram.com/ExponentialDistribution.html">
+     * Exponential Distribution</a>, equation (1).</li>
+     * </ul>
+     * 
+     * @param x the value at which the CDF is evaluated.
+     * @return CDF for this distribution.
+     */
+    public double cummulativeProbability(double x) {
+        double ret;
+        if (x <= 0.0) {
+            ret = 0.0;
+        } else {
+            ret = 1.0 - Math.exp(-x / getMean());
+        }
+        return ret;
+    }
+    
+    /**
+     * For this distribution, X, this method returns the critical point x, such
+     * that P(X &lt; x) = <code>p</code>.
+     *
+     * @param p the desired probability
+     * @return x, such that P(X &lt; x) = <code>p</code>
+     */
+    public double inverseCummulativeProbability(double p) {
+        double ret;
+        
+        if (p < 0.0 || p > 1.0) {
+            ret = Double.NaN;
+        } else if (p == 1.0) {
+            ret = Double.POSITIVE_INFINITY;
+        } else {
+            ret = -getMean() * Math.log(1.0 - p);
+        }
+        
+        return ret;
+    }
+    
+    /**
+     * For this disbution, X, this method returns P(x0 &lt; X &lt; x1).
+     * @param x0 the lower bound
+     * @param x1 the upper bound
+     * @return the cummulative probability. 
+     */
+    public double cummulativeProbability(double x0, double x1) {
+        return cummulativeProbability(x1) - cummulativeProbability(x0);
+    }
+}
diff --git a/src/java/org/apache/commons/math/distribution/FDistribution.java b/src/java/org/apache/commons/math/distribution/FDistribution.java
new file mode 100644
index 0000000..fb4e7a5
--- /dev/null
+++ b/src/java/org/apache/commons/math/distribution/FDistribution.java
@@ -0,0 +1,94 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.commons.math.stat.distribution;
+
+/**
+ * F-Distribution.
+ * 
+ * Instances of FDistribution objects should be created using
+ * {@link DistributionFactory#createFDistribution(double,double)}.
+ * 
+ * References:
+ * <ul>
+ * <li><a href="http://mathworld.wolfram.com/F-Distribution.html">
+ * F-Distribution</a></li>
+ * </ul>
+ * 
+ * @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:19 $
+ */
+public interface FDistribution extends ContinuousDistribution {
+    /**
+     * Modify the numerator degrees of freedom.
+     * @param degreesOfFreedom the new numerator degrees of freedom.
+     */
+    void setNumeratorDegreesOfFreedom(double degreesOfFreedom);
+    
+    /**
+     * Access the numerator degrees of freedom.
+     * @return the numerator degrees of freedom.
+     */
+    double getNumeratorDegreesOfFreedom();
+    
+    /**
+     * Modify the denominator degrees of freedom.
+     * @param degreesOfFreedom the new denominator degrees of freedom.
+     */
+    void setDenominatorDegreesOfFreedom(double degreesOfFreedom);
+    
+    /**
+     * Access the denominator degrees of freedom.
+     * @return the denominator degrees of freedom.
+     */
+    double getDenominatorDegreesOfFreedom();
+}
diff --git a/src/java/org/apache/commons/math/distribution/FDistributionImpl.java b/src/java/org/apache/commons/math/distribution/FDistributionImpl.java
new file mode 100644
index 0000000..01e7bb6
--- /dev/null
+++ b/src/java/org/apache/commons/math/distribution/FDistributionImpl.java
@@ -0,0 +1,201 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.commons.math.stat.distribution;
+
+import org.apache.commons.logging.LogFactory;
+import org.apache.commons.math.MathException;
+import org.apache.commons.math.special.Beta;
+
+/**
+ * Default implementation of
+ * {@link org.apache.commons.math.stat.distribution.FDistribution}.
+ * 
+ * @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:19 $
+ */
+public class FDistributionImpl
+    extends AbstractContinuousDistribution
+    implements FDistribution {
+
+    /** The numerator degrees of freedom*/
+    private double numeratorDegreesOfFreedom;
+
+    /** The numerator degrees of freedom*/
+    private double denominatorDegreesOfFreedom;
+    
+    /**
+     * Create a F distribution using the given degrees of freedom.
+     * @param numeratorDegreesOfFreedom the numerator degrees of freedom.
+     * @param denominatorDegreesOfFreedom the denominator degrees of freedom.
+     */
+    public FDistributionImpl(double numeratorDegreesOfFreedom,
+            double denominatorDegreesOfFreedom) {
+        super();
+        setNumeratorDegreesOfFreedom(numeratorDegreesOfFreedom);
+        setDenominatorDegreesOfFreedom(denominatorDegreesOfFreedom);
+    }
+    
+    /**
+     * For this disbution, X, this method returns P(X &lt; x).
+     * 
+     * The implementation of this method is based on:
+     * <ul>
+     * <li>
+     * <a href="http://mathworld.wolfram.com/F-Distribution.html">
+     * F-Distribution</a>, equation (4).</li>
+     * </ul>
+     * 
+     * @param x the value at which the CDF is evaluated.
+     * @return CDF for this distribution. 
+     */
+    public double cummulativeProbability(double x) {
+        double ret;
+        if (x <= 0.0) {
+            ret = 0.0;
+        } else {
+            double n = getNumeratorDegreesOfFreedom();
+            double m = getDenominatorDegreesOfFreedom();
+            
+            try {
+                ret = Beta.regularizedBeta((n * x) / (m + n * x),
+                    0.5 * n,
+                    0.5 * m);
+            } catch (MathException ex) {
+                LogFactory.getLog(getClass()).error(
+                    "Failed to compute cummulative probability, returning NaN.",
+                    ex);
+                ret = Double.NaN;
+            }
+        }
+        return ret;
+    }
+        
+    /**
+     * Access the domain value lower bound, based on <code>p</code>, used to
+     * bracket a CDF root.  This method is used by
+     * {@link #inverseCummulativeProbability(double)} to find critical values.
+     * 
+     * @param p the desired probability for the critical value
+     * @return domain value lower bound, i.e.
+     *         P(X &lt; <i>lower bound</i>) &lt; <code>p</code> 
+     */
+    protected double getDomainLowerBound(double p) {
+        return 0.0;
+    }
+
+    /**
+     * Access the domain value upper bound, based on <code>p</code>, used to
+     * bracket a CDF root.  This method is used by
+     * {@link #inverseCummulativeProbability(double)} to find critical values.
+     * 
+     * @param p the desired probability for the critical value
+     * @return domain value upper bound, i.e.
+     *         P(X &lt; <i>upper bound</i>) &gt; <code>p</code> 
+     */
+    protected double getDomainUpperBound(double p) {
+        return Double.MAX_VALUE;
+    }
+
+    /**
+     * Access the initial domain value, based on <code>p</code>, used to
+     * bracket a CDF root.  This method is used by
+     * {@link #inverseCummulativeProbability(double)} to find critical values.
+     * 
+     * @param p the desired probability for the critical value
+     * @return initial domain value
+     */
+    protected double getInitialDomain(double p) {
+        return getDenominatorDegreesOfFreedom() /
+            (getDenominatorDegreesOfFreedom() - 2.0);
+    }
+    
+    /**
+     * Modify the numerator degrees of freedom.
+     * @param degreesOfFreedom the new numerator degrees of freedom.
+     */
+    public void setNumeratorDegreesOfFreedom(double degreesOfFreedom) {
+        if (degreesOfFreedom <= 0.0) {
+            throw new IllegalArgumentException(
+                "degrees of freedom must be positive.");
+        }
+        this.numeratorDegreesOfFreedom = degreesOfFreedom;
+    }
+    
+    /**
+     * Access the numerator degrees of freedom.
+     * @return the numerator degrees of freedom.
+     */
+    public double getNumeratorDegreesOfFreedom() {
+        return numeratorDegreesOfFreedom;
+    }
+    
+    /**
+     * Modify the denominator degrees of freedom.
+     * @param degreesOfFreedom the new denominator degrees of freedom.
+     */
+    public void setDenominatorDegreesOfFreedom(double degreesOfFreedom) {
+        if (degreesOfFreedom <= 0.0) {
+            throw new IllegalArgumentException(
+                "degrees of freedom must be positive.");
+        }
+        this.denominatorDegreesOfFreedom = degreesOfFreedom;
+    }
+    
+    /**
+     * Access the denominator degrees of freedom.
+     * @return the denominator degrees of freedom.
+     */
+    public double getDenominatorDegreesOfFreedom() {
+        return denominatorDegreesOfFreedom;
+    }
+}
diff --git a/src/java/org/apache/commons/math/distribution/GammaDistribution.java b/src/java/org/apache/commons/math/distribution/GammaDistribution.java
new file mode 100644
index 0000000..c1590ae
--- /dev/null
+++ b/src/java/org/apache/commons/math/distribution/GammaDistribution.java
@@ -0,0 +1,94 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.commons.math.stat.distribution;
+
+/**
+ * The Gamma Distribution.
+ * 
+ * Instances of GammaDistribution objects should be created using
+ * {@link DistributionFactory#createGammaDistribution(double,double)}.
+ * 
+ * References:
+ * <ul>
+ * <li><a href="http://mathworld.wolfram.com/GammaDistribution.html">
+ * Gamma Distribution</a></li>
+ * </ul>
+ *  
+ * @version $Revision: 1.10 $ $Date: 2003/11/14 22:22:19 $
+ */
+public interface GammaDistribution extends ContinuousDistribution {
+    /**
+     * Modify the shape parameter, alpha.
+     * @param alpha the new shape parameter.
+     */
+    void setAlpha(double alpha);
+    
+    /**
+     * Access the shape parameter, alpha
+     * @return alpha.
+     */
+    double getAlpha();
+    
+    /**
+     * Modify the scale parameter, beta.
+     * @param beta the new scale parameter.
+     */
+    void setBeta(double beta);
+    
+    /**
+     * Access the scale parameter, beta
+     * @return beta.
+     */
+    double getBeta();
+}
diff --git a/src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java b/src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java
new file mode 100644
index 0000000..b8bcb71
--- /dev/null
+++ b/src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java
@@ -0,0 +1,222 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.commons.math.stat.distribution;
+
+import org.apache.commons.logging.LogFactory;
+import org.apache.commons.math.MathException;
+import org.apache.commons.math.special.Gamma;
+
+/**
+ * The default implementation of {@link GammaDistribution}
+ * 
+ * @version $Revision: 1.11 $ $Date: 2003/11/14 22:22:19 $
+ */
+public class GammaDistributionImpl extends AbstractContinuousDistribution
+    implements GammaDistribution {
+
+    /** The shape parameter. */
+    private double alpha;
+    
+    /** The scale parameter. */
+    private double beta;
+    
+    /**
+     * Create a new gamma distribution with the given alpha and beta values.
+     * @param alpha the shape parameter.
+     * @param beta the scale parameter.
+     */
+    public GammaDistributionImpl(double alpha, double beta) {
+        super();
+        setAlpha(alpha);
+        setBeta(beta);
+    }
+    
+    /**
+     * For this disbution, X, this method returns P(X &lt; x).
+     * 
+     * The implementation of this method is based on:
+     * <ul>
+     * <li>
+     * <a href="http://mathworld.wolfram.com/Chi-SquaredDistribution.html">
+     * Chi-Squared Distribution</a>, equation (9).</li>
+     * <li>Casella, G., & Berger, R. (1990). <i>Statistical Inference</i>.
+     * Belmont, CA: Duxbury Press.</li>
+     * </ul>
+     * 
+     * @param x the value at which the CDF is evaluated.
+     * @return CDF for this distribution. 
+     */
+    public double cummulativeProbability(double x) {
+        double ret;
+    
+        if (x <= 0.0) {
+            ret = 0.0;
+        } else {
+            try {
+                ret = Gamma.regularizedGammaP(getAlpha(), x / getBeta());
+            } catch(MathException ex){
+                LogFactory.getLog(getClass()).error(
+                    "Failed to compute cummulative probability, returning NaN.",
+                    ex);
+                ret = Double.NaN;
+            }
+        }
+    
+        return ret;
+    }
+    
+    /**
+     * Modify the shape parameter, alpha.
+     * @param alpha the new shape parameter.
+     */
+    public void setAlpha(double alpha) {
+        if (alpha <= 0.0) {
+            throw new IllegalArgumentException("alpha must be positive");
+        }
+        this.alpha = alpha;
+    }
+    
+    /**
+     * Access the shape parameter, alpha
+     * @return alpha.
+     */
+    public double getAlpha() {
+        return alpha;
+    }
+    
+    /**
+     * Modify the scale parameter, beta.
+     * @param beta the new scale parameter.
+     */
+    public void setBeta(double beta) {
+        if (beta <= 0.0) {
+            throw new IllegalArgumentException("beta must be positive");
+        }
+        this.beta = beta;
+    }
+    
+    /**
+     * Access the scale parameter, beta
+     * @return beta.
+     */
+    public double getBeta() {
+        return beta;
+    }
+    
+    /**
+     * Access the domain value lower bound, based on <code>p</code>, used to
+     * bracket a CDF root.  This method is used by
+     * {@link #inverseCummulativeProbability(double)} to find critical values.
+     * 
+     * @param p the desired probability for the critical value
+     * @return domain value lower bound, i.e.
+     *         P(X &lt; <i>lower bound</i>) &lt; <code>p</code>
+     * TODO: try to improve on this estimate
+     */
+    protected double getDomainLowerBound(double p) {
+        return Double.MIN_VALUE;
+    }
+
+    /**
+     * Access the domain value upper bound, based on <code>p</code>, used to
+     * bracket a CDF root.  This method is used by
+     * {@link #inverseCummulativeProbability(double)} to find critical values.
+     * 
+     * @param p the desired probability for the critical value
+     * @return domain value upper bound, i.e.
+     *         P(X &lt; <i>upper bound</i>) &gt; <code>p</code> 
+     * TODO: try to improve on this estimate
+     */
+    protected double getDomainUpperBound(double p) {
+        // NOTE: gamma is skewed to the left
+        // NOTE: therefore, P(X < &mu;) > .5
+
+        double ret;
+
+        if (p < .5) {
+            // use mean
+            ret = getAlpha() * getBeta();
+        } else {
+            // use max value
+            ret = Double.MAX_VALUE;
+        }
+        
+        return ret;
+    }
+
+    /**
+     * Access the initial domain value, based on <code>p</code>, used to
+     * bracket a CDF root.  This method is used by
+     * {@link #inverseCummulativeProbability(double)} to find critical values.
+     * 
+     * @param p the desired probability for the critical value
+     * @return initial domain value
+     * TODO: try to improve on this estimate
+     */
+    protected double getInitialDomain(double p) {
+        // Gamma is skewed to the left, therefore, P(X < &mu;) > .5
+
+        double ret;
+
+        if (p < .5) {
+            // use 1/2 mean
+            ret = getAlpha() * getBeta() * .5;
+        } else {
+            // use mean
+            ret = getAlpha() * getBeta();
+        }
+        
+        return ret;
+    }
+}
diff --git a/src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java b/src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java
new file mode 100644
index 0000000..11a6a4a
--- /dev/null
+++ b/src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java
@@ -0,0 +1,107 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+
+package org.apache.commons.math.stat.distribution;
+
+/**
+ * The Hypergeometric Distribution.
+ * 
+ * Instances of HypergeometricDistribution objects should be created using
+ * {@link DistributionFactory#createHypergeometricDistribution(int, int, int)}.
+ * 
+ * References:
+ * <ul>
+ * <li><a href="http://mathworld.wolfram.com/HypergeometricDistribution.html">
+ * Hypergeometric Distribution</a></li>
+ * </ul>
+ * 
+ * @version $Revision: 1.5 $ $Date: 2003/11/14 22:22:19 $
+ */
+public interface HypergeometricDistribution extends DiscreteDistribution {
+    /**
+     * Access the number of successes.
+     * @return the number of successes.
+     */
+    public abstract int getNumberOfSuccesses();
+    
+    /**
+     * Access the population size.
+     * @return the population size.
+     */
+    public abstract int getPopulationSize();
+    
+    /**
+     * Access the sample size.
+     * @return the sample size.
+     */
+    public abstract int getSampleSize();
+    
+    /**
+     * Modify the number of successes.
+     * @param num the new number of successes.
+     */
+    public abstract void setNumberOfSuccesses(int num);
+    
+    /**
+     * Modify the population size.
+     * @param size the new population size.
+     */
+    public abstract void setPopulationSize(int size);
+    
+    /**
+     * Modify the sample size.
+     * @param size the new sample size.
+     */
+    public abstract void setSampleSize(int size);
+}
diff --git a/src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java b/src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java
new file mode 100644
index 0000000..2ba3b3f
--- /dev/null
+++ b/src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java
@@ -0,0 +1,279 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+
+package org.apache.commons.math.stat.distribution;
+
+import org.apache.commons.math.util.MathUtils;
+
+/**
+ * The default implementation of {@link HypergeometricDistribution}.
+ * 
+ * @version $Revision: 1.5 $ $Date: 2003/11/14 22:22:19 $
+ */
+public class HypergeometricDistributionImpl extends AbstractDiscreteDistribution
+    implements HypergeometricDistribution
+{
+
+    /** The number of successes in the population. */
+    private int numberOfSuccesses;
+    
+    /** The population size. */
+    private int populationSize;
+    
+    /** The sample size. */
+    private int sampleSize;
+    
+    /**
+     * Construct a new hypergeometric distribution with the given the population
+     * size, the number of successes in the population, and the sample size.
+     * @param populationSize the population size.
+     * @param numberOfSuccesses number of successes in the population.
+     * @param sampleSize the sample size.
+     */
+    public HypergeometricDistributionImpl(int populationSize,
+        int numberOfSuccesses, int sampleSize)
+    {
+        super();
+        setPopulationSize(populationSize);
+        setSampleSize(sampleSize);
+        setNumberOfSuccesses(numberOfSuccesses);
+    }
+
+    /**
+     * For this disbution, X, this method returns P(X &le; x).
+     * @param x the value at which the PDF is evaluated.
+     * @return PDF for this distribution. 
+     */
+    public double cummulativeProbability(int x) {
+        double ret;
+        
+        int n = getPopulationSize();
+        int m = getNumberOfSuccesses();
+        int k = getSampleSize();
+
+        int[] domain = getDomain(n, m, k);
+        if (x < domain[0]) {
+            ret = 0.0;
+        } else if(x >= domain[1]) {
+            ret = 1.0;
+        } else {
+            ret = 0.0;
+            for (int i = domain[0]; i <= x; ++i){
+                ret += probability(n, m, k, i);
+            }
+        }
+        
+        return ret;
+    }
+
+    /**
+     * Return the domain for the given hypergeometric distribution parameters.
+     * @param n the population size.
+     * @param m number of successes in the population.
+     * @param k the sample size.
+     * @return a two element array containing the lower and upper bounds of the
+     *         hypergeometric distribution.  
+     */
+    private int[] getDomain(int n, int m, int k){
+        return new int[]{
+            getLowerDomain(n, m, k),
+            getUpperDomain(m, k)
+        };
+    }
+    
+    /**
+     * Access the domain value lower bound, based on <code>p</code>, used to
+     * bracket a PDF root.
+     * 
+     * @param p the desired probability for the critical value
+     * @return domain value lower bound, i.e.
+     *         P(X &lt; <i>lower bound</i>) &lt; <code>p</code> 
+     */
+    protected int getDomainLowerBound(double p) {
+        return getLowerDomain(getPopulationSize(), getNumberOfSuccesses(),
+            getSampleSize());
+    }
+    
+    /**
+     * Access the domain value upper bound, based on <code>p</code>, used to
+     * bracket a PDF root.
+     * 
+     * @param p the desired probability for the critical value
+     * @return domain value upper bound, i.e.
+     *         P(X &lt; <i>upper bound</i>) &gt; <code>p</code> 
+     */
+    protected int getDomainUpperBound(double p) {
+        return getUpperDomain(getSampleSize(), getNumberOfSuccesses());
+    }
+
+    /**
+     * Return the lowest domain value for the given hypergeometric distribution
+     * parameters.
+     * @param n the population size.
+     * @param m number of successes in the population.
+     * @param k the sample size.
+     * @return the lowest domain value of the hypergeometric distribution.  
+     */
+    private int getLowerDomain(int n, int m, int k) {
+        return Math.max(0, m - (n - k));
+    }
+
+    /**
+     * Access the number of successes.
+     * @return the number of successes.
+     */
+    public int getNumberOfSuccesses() {
+        return numberOfSuccesses;
+    }
+
+    /**
+     * Access the population size.
+     * @return the population size.
+     */
+    public int getPopulationSize() {
+        return populationSize;
+    }
+
+    /**
+     * Access the sample size.
+     * @return the sample size.
+     */
+    public int getSampleSize() {
+        return sampleSize;
+    }
+
+    /**
+     * Return the highest domain value for the given hypergeometric distribution
+     * parameters.
+     * @param m number of successes in the population.
+     * @param k the sample size.
+     * @return the highest domain value of the hypergeometric distribution.  
+     */
+    private int getUpperDomain(int m, int k){
+        return Math.min(k, m);
+    }
+
+    /**
+     * For this disbution, X, this method returns P(X = x).
+     * @param x the value at which the PMF is evaluated.
+     * @return PMF for this distribution. 
+     */
+    public double probability(int x) {
+        double ret;
+        
+        int n = getPopulationSize();
+        int m = getNumberOfSuccesses();
+        int k = getSampleSize();
+
+        int[] domain = getDomain(n, m, k);
+        if(x < domain[0] || x > domain[1]){
+            ret = 0.0;
+        } else {
+            ret = probability(n, m, k, x);
+        }
+        
+        return ret;
+    }
+
+    /**
+     * For the disbution, X, defined by the given hypergeometric distribution
+     * parameters, this method returns P(X = x).
+     * @param n the population size.
+     * @param m number of successes in the population.
+     * @param k the sample size.
+     * @param x the value at which the PMF is evaluated.
+     * @return PMF for the distribution. 
+     */
+    private double probability(int n, int m, int k, int x) {
+        return Math.exp(MathUtils.binomialCoefficientLog(m, x) +
+            MathUtils.binomialCoefficientLog(n - m, k - x) -
+            MathUtils.binomialCoefficientLog(n, k));
+    }
+    
+    /**
+     * Modify the number of successes.
+     * @param num the new number of successes.
+     */
+    public void setNumberOfSuccesses(int num) {
+        if(num < 0){
+            throw new IllegalArgumentException(
+                "number of successes must be non-negative.");
+        }
+        numberOfSuccesses = num;
+    }
+
+    /**
+     * Modify the population size.
+     * @param size the new population size.
+     */
+    public void setPopulationSize(int size) {
+        if(size <= 0){
+            throw new IllegalArgumentException(
+                "population size must be positive.");
+        }
+        populationSize = size;
+    }
+
+    /**
+     * Modify the sample size.
+     * @param size the new sample size.
+     */
+    public void setSampleSize(int size) {
+        if(size < 0){
+            throw new IllegalArgumentException(
+                "sample size must be non-negative.");
+        }
+        sampleSize = size;
+    }
+}
diff --git a/src/java/org/apache/commons/math/distribution/TDistribution.java b/src/java/org/apache/commons/math/distribution/TDistribution.java
new file mode 100644
index 0000000..8579281
--- /dev/null
+++ b/src/java/org/apache/commons/math/distribution/TDistribution.java
@@ -0,0 +1,82 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.commons.math.stat.distribution;
+
+/**
+ * Student's t-Distribution.
+ * 
+ * Instances of TDistribution objects should be created using
+ * {@link DistributionFactory#createTDistribution(double)}
+ * 
+ * References:
+ * <ul>
+ * <li><a href="http://mathworld.wolfram.com/Studentst-Distribution.html">
+ * Student's t-Distribution</a></li>
+ * </ul>
+ * 
+ * @version $Revision: 1.7 $ $Date: 2003/11/14 22:25:28 $
+ */
+public interface TDistribution extends ContinuousDistribution {
+    /**
+     * Modify the degrees of freedom.
+     * @param degreesOfFreedom the new degrees of freedom.
+     */
+    void setDegreesOfFreedom(double degreesOfFreedom);
+    
+    /**
+     * Access the degrees of freedom.
+     * @return the degrees of freedom.
+     */
+    double getDegreesOfFreedom();
+}
diff --git a/src/java/org/apache/commons/math/distribution/TDistributionImpl.java b/src/java/org/apache/commons/math/distribution/TDistributionImpl.java
new file mode 100644
index 0000000..f2da27e
--- /dev/null
+++ b/src/java/org/apache/commons/math/distribution/TDistributionImpl.java
@@ -0,0 +1,171 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.commons.math.stat.distribution;
+
+import org.apache.commons.logging.LogFactory;
+import org.apache.commons.math.MathException;
+import org.apache.commons.math.special.Beta;
+
+/**
+ * Default implementation of
+ * {@link org.apache.commons.math.stat.distribution.TDistribution}.
+ * 
+ * @version $Revision: 1.8 $ $Date: 2003/11/14 22:25:28 $
+ */
+public class TDistributionImpl
+    extends AbstractContinuousDistribution
+    implements TDistribution {
+
+    /** The degrees of freedom*/
+    private double degreesOfFreedom;
+    
+    /**
+     * Create a t distribution using the given degrees of freedom.
+     * @param degreesOfFreedom the degrees of freedom.
+     */
+    public TDistributionImpl(double degreesOfFreedom) {
+        super();
+        setDegreesOfFreedom(degreesOfFreedom);
+    }
+
+    /**
+     * Modify the degrees of freedom.
+     * @param degreesOfFreedom the new degrees of freedom.
+     */
+    public void setDegreesOfFreedom(double degreesOfFreedom) {
+        if (degreesOfFreedom <= 0.0) {
+            throw new IllegalArgumentException(
+                "degrees of freedom must be positive.");
+        }
+        this.degreesOfFreedom = degreesOfFreedom;
+    }
+
+    /**
+     * Access the degrees of freedom.
+     * @return the degrees of freedom.
+     */
+    public double getDegreesOfFreedom() {
+        return degreesOfFreedom;
+    }
+
+    /**
+     * For this disbution, X, this method returns P(X &lt; <code>x</code>).
+     * @param x the value at which the CDF is evaluated.
+     * @return CDF evaluted at <code>x</code>. 
+     */
+    public double cummulativeProbability(double x) {
+        double ret;
+        if (x == 0.0) {
+            ret = 0.5;
+        } else {
+            double t;
+            try {
+                t = Beta.regularizedBeta(
+                    getDegreesOfFreedom() / (getDegreesOfFreedom() + (x * x)),
+                    0.5 * getDegreesOfFreedom(),
+                    0.5);
+                if (x < 0.0) {
+                    ret = 0.5 * t;
+                } else {
+                    ret = 1.0 - 0.5 * t;
+                }
+            } catch (MathException ex) {
+                LogFactory.getLog(getClass()).error(
+                    "Failed to compute cummulative probability, returning NaN.",
+                    ex);
+                ret = Double.NaN;
+            }
+        }
+        
+        return ret;
+    }
+        
+    /**
+     * Access the domain value lower bound, based on <code>p</code>, used to
+     * bracket a CDF root.  This method is used by
+     * {@link #inverseCummulativeProbability(double)} to find critical values.
+     * 
+     * @param p the desired probability for the critical value
+     * @return domain value lower bound, i.e.
+     *         P(X &lt; <i>lower bound</i>) &lt; <code>p</code> 
+     */
+    protected double getDomainLowerBound(double p) {
+        return -Double.MAX_VALUE;
+    }
+
+    /**
+     * Access the domain value upper bound, based on <code>p</code>, used to
+     * bracket a CDF root.  This method is used by
+     * {@link #inverseCummulativeProbability(double)} to find critical values.
+     * 
+     * @param p the desired probability for the critical value
+     * @return domain value upper bound, i.e.
+     *         P(X &lt; <i>upper bound</i>) &gt; <code>p</code> 
+     */
+    protected double getDomainUpperBound(double p) {
+        return Double.MAX_VALUE;
+    }
+
+    /**
+     * Access the initial domain value, based on <code>p</code>, used to
+     * bracket a CDF root.  This method is used by
+     * {@link #inverseCummulativeProbability(double)} to find critical values.
+     * 
+     * @param p the desired probability for the critical value
+     * @return initial domain value
+     */
+    protected double getInitialDomain(double p) {
+        return 0.0;
+    }
+}
diff --git a/src/java/org/apache/commons/math/distribution/package.html b/src/java/org/apache/commons/math/distribution/package.html
new file mode 100644
index 0000000..7adbaaa
--- /dev/null
+++ b/src/java/org/apache/commons/math/distribution/package.html
@@ -0,0 +1,4 @@
+<html>
+	<!-- $Revision: 1.4 $ $Date: 2003/11/14 22:25:28 $ -->
+	<body>Implementations of common discrete and continuous distributions.</body>
+</html>
diff --git a/src/java/org/apache/commons/math/linear/RealMatrix.java b/src/java/org/apache/commons/math/linear/RealMatrix.java
new file mode 100644
index 0000000..fc2b343
--- /dev/null
+++ b/src/java/org/apache/commons/math/linear/RealMatrix.java
@@ -0,0 +1,282 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+
+package org.apache.commons.math.linear;
+
+/**
+ * Interface defining a real-valued matrix with basic algebraic operations
+ * @version $Revision: 1.7 $ $Date: 2003/11/14 22:22:19 $
+ */
+public interface RealMatrix {
+
+    /**
+     * Returns a (deep) copy of this.
+     *
+     * @return matrix copy
+     */
+    RealMatrix copy();
+    
+    /**
+     * Compute the sum of this and m.
+     *
+     * @param m    matrix to be added
+     * @return     this + m
+     * @exception  IllegalArgumentException if m is not the same size as this
+     */
+    RealMatrix add(RealMatrix m) throws IllegalArgumentException;   
+    
+    /**
+     * Compute this minus m.
+     *
+     * @param m    matrix to be subtracted
+     * @return     this + m
+     * @exception  IllegalArgumentException if m is not the same size as this
+     */
+    RealMatrix subtract(RealMatrix m) throws IllegalArgumentException;   
+    
+    /**
+     * Returns the rank of the matrix.
+     *
+     * @return the rank of this matrix
+     */
+    int getRank();
+    
+     /**
+     * Returns the result of adding d to each entry of this.
+     *
+     * @param d    value to be added to each entry
+     * @return     d + this
+     */
+    RealMatrix scalarAdd(double d);
+    
+    /**
+     * Returns the result multiplying each entry of this by d.
+     *
+     * @param d    value to multiply all entries by
+     * @return     d * this
+     */
+    RealMatrix scalarMultiply(double d);
+    
+    /**
+     * Returns the result postmultiplying this by m.
+     *
+     * @param m    matrix to postmultiply by
+     * @return     this * m
+     * @throws     IllegalArgumentException 
+     *             if columnDimension(this) != rowDimension(m)
+     */
+    RealMatrix multiply(RealMatrix m) throws IllegalArgumentException;
+    
+    /**
+     * Returns matrix entries as a two-dimensional array.
+     *
+     * @return    2-dimensional array of entries
+     */
+    double[][] getData();
+    
+    /**
+     * Overwrites the underlying data for the matrix with
+     * a fresh copy of <code>data</code>.
+     *
+     * @param  data  2-dimensional array of entries
+     */
+    void setData(double[][] data);
+    
+    /**
+     * Returns the <a href="http://mathworld.wolfram.com/
+     * MaximumAbsoluteRowSumNorm.html">maximum absolute row sum norm</a> 
+     * of the matrix.
+     *
+     * @return norm
+     */
+    double getNorm();
+    
+    /**
+     * Returns the entries in row number <code>row</code> as an array.
+     *
+     * @param row the row to be fetched
+     * @return array of entries in the row
+     * @throws IllegalArgumentException if row > rowDimension
+     */
+    double[] getRow(int row) throws IllegalArgumentException;
+    
+    /**
+     * Returns the entries in column number <code>col</code> as an array.
+     *
+     * @param col  column to fetch
+     * @return array of entries in the column
+     * @throws IllegalArgumentException if column > columnDimension
+     */
+    double[] getColumn(int col) throws IllegalArgumentException;
+    
+    /**
+     * Returns the entry in the specified row and column.
+     *
+     * @param row  row location of entry to be fetched  
+     * @param column  column location of entry to be fetched
+     * @return     matrix entry in row,column
+     * @throws     IllegalArgumentException if entry does not exist
+     */
+    double getEntry(int row, int column) throws IllegalArgumentException;
+    
+    /**
+     * Sets the entry in the specified row and column to the specified value.
+     *
+     * @param row    row location of entry to be set 
+     * @param column    column location of entry to be set
+     * @param value  value to set 
+     * @throws IllegalArgumentException if entry does not exist
+     */
+    void setEntry(int row, int column, double value) 
+        throws IllegalArgumentException;
+    
+    /**
+     * Returns the transpose of this matrix.
+     *
+     * @return transpose matrix
+     */
+    RealMatrix transpose();
+    
+    /**
+     * Returns the inverse of this matrix.
+     *
+     * @return inverse matrix
+     * @throws IllegalArgumentException if *this is not invertible
+     */
+    RealMatrix inverse() throws IllegalArgumentException;
+    
+    /**
+     * Returns the determinant of this matrix.
+     *
+     * @return determinant
+     */
+    double getDeterminant();
+    
+    /**
+     * Is this a square matrix?
+     * @return true if the matrix is square (rowDimension = columnDimension)
+     */
+    boolean isSquare();
+    
+    /**
+     * Is this a singular matrix?
+     * @return true if the matrix is singular
+     */
+    boolean isSingular();
+    
+    /**
+     * Returns the number of rows in the matrix.
+     *
+     * @return rowDimension
+     */
+    int getRowDimension();
+    
+    /**
+     * Returns the number of columns in the matrix.
+     *
+     * @return columnDimension
+     */
+    int getColumnDimension();
+    
+    /**
+     * Returns the <a href="http://mathworld.wolfram.com/MatrixTrace.html">
+     * trace</a> of the matrix (the sum of the elements on the main diagonal).
+     *
+     * @return trace
+     */
+    double getTrace();
+    
+    /**
+     * Returns the result of multiplying this by the vector <code>v</code>.
+     *
+     * @param v the vector to operate on
+     * @return this*v
+     * @throws IllegalArgumentException if columnDimension != v.size()
+     */
+    double[] operate(double[] v) throws IllegalArgumentException;
+    
+    /**
+     * Returns the result of premultiplying this by the vector <code>v</code>.
+     *
+     * @param v the row vector to premultiply by
+     * @return v*this
+     * @throws IllegalArgumentException if rowDimension != v.size()
+     */
+    RealMatrix preMultiply(double[] v) throws IllegalArgumentException;  
+    
+    /**
+     * Returns the solution vector for a linear system with coefficient
+     * matrix = this and constant vector = <code>b</code>.
+     *
+     * @param b  constant vector
+     * @return   vector of solution values to AX = b, where A is *this
+     * @throws   IllegalArgumentException if rowDimension != b.length or matrix 
+     *           is singular
+     */
+    double[] solve(double[] b) throws IllegalArgumentException;
+    
+    /**
+     * Returns a matrix of (column) solution vectors for linear systems with
+     * coefficient matrix = this and constant vectors = columns of
+     * <code>b</code>. 
+     *
+     * @param b  matrix of constant vectors forming RHS of linear systems to
+     * to solve
+     * @return matrix of solution vectors
+     * @throws IllegalArgumentException if rowDimension != row dimension of b
+     * or this is not square or singular
+     */
+    RealMatrix solve(RealMatrix b) throws IllegalArgumentException;
+}
+
diff --git a/src/java/org/apache/commons/math/linear/RealMatrixImpl.java b/src/java/org/apache/commons/math/linear/RealMatrixImpl.java
new file mode 100644
index 0000000..cacabf6
--- /dev/null
+++ b/src/java/org/apache/commons/math/linear/RealMatrixImpl.java
@@ -0,0 +1,775 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+
+package org.apache.commons.math.linear;
+import java.io.Serializable;
+
+/**
+ * Implementation for RealMatrix using a double[][] array to store entries
+ * and <a href="http://www.math.gatech.edu/~bourbaki/
+ * math2601/Web-notes/2num.pdf">LU decompostion</a> to support linear system 
+ * solution and inverse.
+ * <p>
+ * The <a href="http://www.math.gatech.edu/~bourbaki/math2601/Web-notes
+ * /2num.pdf">LU decompostion</a> is performed as needed, to support the 
+ * following operations: <ul>
+ * <li>solve</li>
+ * <li>isSingular</li>
+ * <li>getDeterminant</li>
+ * <li>inverse</li> </ul>
+ * <p>
+ * <strong>Usage note</strong>:<br>
+ * The LU decomposition is stored and reused on subsequent calls.  If matrix
+ * data are modified using any of the public setXxx methods, the saved 
+ * decomposition is discarded.  If data are modified via references to the
+ * underlying array obtained using <code>getDataRef()</code>, then the stored
+ * LU decomposition will not be discarded.  In this case, you need to 
+ * explicitly invoke <code>LUDecompose()</code> to recompute the decomposition
+ * before using any of the methods above.
+ *
+ * @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:19 $
+ */
+public class RealMatrixImpl implements RealMatrix, Serializable {
+
+    /** Entries of the matrix */
+    private double data[][] = null;
+    
+    /** Entries of LU decomposition.
+     * All updates to data (other than luDecompostion) *must* set this to null
+     */
+    private double lu[][] = null;
+    
+    /** Pivot array associated with LU decompostion */
+    private int[] pivot = null;
+    
+    /** Parity of the permutation associated with the LU decomposition */
+    private int parity = 1;
+    
+    /** Bound to determine effective singularity in LU decomposition */
+    private static double TOO_SMALL = 10E-12;
+    
+    /** 
+     * Creates a matrix with no data
+     */
+    public RealMatrixImpl() {
+    }
+    
+    /**
+     * Create a new RealMatrix with the supplied row and column dimensions.
+     *
+     * @param rowDimension      the number of rows in the new matrix
+     * @param columnDimension   the number of columns in the new matrix
+     */
+    public RealMatrixImpl(int rowDimension,
+    int columnDimension) {
+        data = new double[rowDimension][columnDimension];
+        lu = null;
+    }
+    
+    /**
+     * Create a new RealMatrix using the <code>data</code> as the underlying
+     * data array.
+     * <p>
+     * The input array is copied, not referenced.
+     *
+     * @param d data for new matrix
+     */
+    public RealMatrixImpl(double[][] d) {
+        this.copyIn(d);
+        lu = null;
+    }
+    
+    /**
+     * Create a new (column) RealMatrix using <code>v</code> as the 
+     * data for the unique column of the <code>v.length x 1</code> matrix 
+     * created.
+     * <p>
+     * The input array is copied, not referenced.
+     *
+     * @param v column vector holding data for new matrix
+     */
+    public RealMatrixImpl(double[] v) {
+        int nRows = v.length;
+        data = new double[nRows][1];
+        for (int row = 0; row < nRows; row++) {
+            data[row][0] = v[row];
+        }
+    }
+    
+    /**
+     * Create a new RealMatrix which is a copy of this.
+     *
+     * @return  the cloned matrix
+     */
+    public RealMatrix copy() {
+        return new RealMatrixImpl(this.copyOut());
+    }
+    
+    /**
+     * Compute the sum of this and <code>m</code>.
+     *
+     * @param m    matrix to be added
+     * @return     this + m
+     * @exception  IllegalArgumentException if m is not the same size as this
+     */
+    public RealMatrix add(RealMatrix m) throws IllegalArgumentException {
+        if (this.getColumnDimension() != m.getColumnDimension() ||
+        this.getRowDimension() != m.getRowDimension()) {
+            throw new IllegalArgumentException("matrix dimension mismatch");
+        }
+        int rowCount = this.getRowDimension();
+        int columnCount = this.getColumnDimension();
+        double[][] outData = new double[rowCount][columnCount];
+        double[][] mData = m.getData();
+        for (int row = 0; row < rowCount; row++) {
+            for (int col = 0; col < columnCount; col++) {
+                outData[row][col] = data[row][col] + mData[row][col];
+            }
+        }
+        return new RealMatrixImpl(outData);
+    }
+    
+    /**
+     * Compute  this minus <code>m</code>.
+     *
+     * @param m    matrix to be subtracted
+     * @return     this + m
+     * @exception  IllegalArgumentException if m is not the same size as *this
+     */
+    public RealMatrix subtract(RealMatrix m) throws IllegalArgumentException {
+        if (this.getColumnDimension() != m.getColumnDimension() ||
+        this.getRowDimension() != m.getRowDimension()) {
+            throw new IllegalArgumentException("matrix dimension mismatch");
+        }
+        int rowCount = this.getRowDimension();
+        int columnCount = this.getColumnDimension();
+        double[][] outData = new double[rowCount][columnCount];
+        double[][] mData = m.getData();
+        for (int row = 0; row < rowCount; row++) {
+            for (int col = 0; col < columnCount; col++) {
+                outData[row][col] = data[row][col] - mData[row][col];
+            }
+        }
+        return new RealMatrixImpl(outData);
+    }
+    
+    /**
+     * Returns the rank of the matrix.
+     *
+     * @return the rank of this matrix
+     */
+    public int getRank() {
+        // FIXME: need to add singular value decomposition or drop this
+        throw new UnsupportedOperationException("not implemented yet");
+    }
+    
+    
+    /**
+     * Returns the result of adding d to each entry of this.
+     *
+     * @param d    value to be added to each entry
+     * @return     d + this
+     */
+    public RealMatrix scalarAdd(double d) {
+        int rowCount = this.getRowDimension();
+        int columnCount = this.getColumnDimension();
+        double[][] outData = new double[rowCount][columnCount];
+        for (int row = 0; row < rowCount; row++) {
+            for (int col = 0; col < columnCount; col++) {
+                outData[row][col] = data[row][col] + d;
+            }
+        }
+        return new RealMatrixImpl(outData);
+    }
+    
+    /**
+     * Returns the result multiplying each entry of this by <code>d</code>
+     * @param d  value to multiply all entries by
+     * @return d * this
+     */
+    public RealMatrix scalarMultiply(double d) {
+        int rowCount = this.getRowDimension();
+        int columnCount = this.getColumnDimension();
+        double[][] outData = new double[rowCount][columnCount];
+        for (int row = 0; row < rowCount; row++) {
+            for (int col = 0; col < columnCount; col++) {
+                outData[row][col] = data[row][col] * d;
+            }
+        }
+        return new RealMatrixImpl(outData);
+    }
+    
+    /**
+     * Returns the result postmultiplying this by <code>m</code>.
+     * @param m    matrix to postmultiply by
+     * @return     this*m
+     * @throws     IllegalArgumentException
+     *             if columnDimension(this) != rowDimension(m)
+     */
+    public RealMatrix multiply(RealMatrix m) throws IllegalArgumentException {
+        if (this.getColumnDimension() != m.getRowDimension()) {
+            throw new IllegalArgumentException
+            ("Matrices are not multiplication compatible.");
+        }
+        int nRows = this.getRowDimension();
+        int nCols = this.getColumnDimension();
+        double[][] mData = m.getData();
+        double[][] outData =
+        new double[nRows][nCols];
+        double sum = 0;
+        for (int row = 0; row < nRows; row++) {
+            for (int col = 0; col < nCols; col++) {
+                sum = 0;
+                for (int i = 0; i < nCols; i++) {
+                    sum += data[row][i] * mData[i][col];
+                }
+                outData[row][col] = sum;
+            }
+        }
+        return new RealMatrixImpl(outData);
+    }
+    
+    /**
+     * Returns matrix entries as a two-dimensional array.
+     * <p>
+     * Makes a fresh copy of the underlying data.
+     *
+     * @return    2-dimensional array of entries
+     */
+    public double[][] getData() {
+        return copyOut();
+    }
+    
+    /**
+     * Overwrites the underlying data for the matrix
+     * with a fresh copy of <code>inData</code>.
+     *
+     * @param  inData 2-dimensional array of entries
+     */
+    public void setData(double[][] inData) {
+        copyIn(inData);
+        lu = null;
+    }
+    
+    /**
+     * Returns a reference to the underlying data array.
+     * <p>
+     * Does not make a fresh copy of the underlying data.
+     *
+     * @return 2-dimensional array of entries
+     */
+    public double[][] getDataRef() {
+        return data;
+    }
+    
+    /**
+     * Overwrites the underlying data for the matrix
+     * with a reference to <code>inData</code>.
+     * <p>
+     * Does not make a fresh copy of <code>data</code>.
+     *
+     * @param  inData 2-dimensional array of entries
+     */
+    public void setDataRef(double[][] inData) {
+        this.data = inData;
+        lu = null;
+    }
+    
+    /**
+     *
+     * @return norm
+     */
+    public double getNorm() {
+        double maxColSum = 0;
+        for (int col = 0; col < this.getColumnDimension(); col++) {
+            double sum = 0;
+            for (int row = 0; row < this.getRowDimension(); row++) {
+                sum += Math.abs(data[row][col]);
+            }
+            maxColSum = Math.max(maxColSum, sum);
+        }
+        return maxColSum;
+    }
+    
+    /**
+     *
+     * @param row  the row to be fetched
+     * @return array of entries in the row
+     * @throws IllegalArgumentException if row > rowDimension or row < 1
+     */
+    public double[] getRow(int row) throws IllegalArgumentException {
+        if (row > this.getRowDimension() || row < 1) {
+            throw new IllegalArgumentException("illegal row argument");
+        }
+        int ncols = this.getColumnDimension();
+        double[] out = new double[ncols];
+        System.arraycopy(data[row - 1], 0, out, 0, ncols);
+        return out;
+    }
+    
+    /**
+     * @param col column to fetch
+     * @return array of entries in the column
+     * @throws IllegalArgumentException if column > columnDimension or
+     * column < 1
+     */
+    public double[] getColumn(int col) throws IllegalArgumentException {
+        if (col > this.getColumnDimension() || col < 1) {
+            throw new IllegalArgumentException("illegal column argument");
+        }
+        int nRows = this.getRowDimension();
+        double[] out = new double[nRows];
+        for (int row = 0; row < nRows; row++) {
+            out[row] = data[row][col - 1];
+        }
+        return out;
+    }
+    
+    /**
+     * @param row  row location of entry to be fetched
+     * @param column  column location of entry to be fetched
+     * @return matrix entry in row,column
+     * @throws IllegalArgumentException if entry does not exist
+     */
+    public double getEntry(int row, int column)
+    throws IllegalArgumentException {
+        if (row < 1 || column < 1 || row > this.getRowDimension() ||
+            column > this.getColumnDimension()) {
+                
+            throw new IllegalArgumentException
+            ("matrix entry does not exist");
+        }
+        return data[row - 1][column - 1];
+    }
+    
+    /**
+     * @param row    row location of entry to be set
+     * @param column    column location of entry to be set
+     * @param value  value to set
+     * @throws IllegalArgumentException if entry does not exist
+     */
+    public void setEntry(int row, int column, double value)
+    throws IllegalArgumentException {
+        if (row < 1 || column < 1 || row > this.getRowDimension() ||
+            column > this.getColumnDimension()) {
+                
+            throw new IllegalArgumentException
+            ("matrix entry does not exist");
+        }
+        data[row - 1][column - 1] = value;
+        lu = null;
+    }
+    
+    /**
+     *
+     * @return transpose matrix
+     */
+    public RealMatrix transpose() {
+        int nRows = this.getRowDimension();
+        int nCols = this.getColumnDimension();
+        RealMatrixImpl out = new RealMatrixImpl(nCols, nRows);
+        double[][] outData = out.getDataRef();
+        for (int row = 0; row < nRows; row++) {
+            for (int col = 0; col < nCols; col++) {
+                outData[col][row] = data[row][col];
+            }
+        }
+        return out;
+    }   
+    
+    /**
+     * @return inverse matrix
+     * @throws IllegalArgumentException if this is not invertible
+     */
+    public RealMatrix inverse() throws IllegalArgumentException {
+        return solve(getIdentity(this.getRowDimension()));
+    }
+    
+    /**
+     * @return determinant
+     * @throws IllegalArgumentException if matrix is not square
+     */
+    public double getDeterminant() throws IllegalArgumentException {
+        if (!isSquare()) {
+            throw new IllegalArgumentException("matrix is not square");
+        }
+        if (isSingular()) {  // note: this has side effect of attempting LU
+            return 0d;        //       decomp if lu == null
+        } else {
+            double det = (double) parity;
+            for (int i = 0; i < this.getRowDimension(); i++) {
+                det *= lu[i][i];
+            }
+            return det;
+        }
+    }
+    
+    /**
+     * @return true if the matrix is square (rowDimension = columnDimension)
+     */
+    public boolean isSquare() {
+        return (this.getColumnDimension() == this.getRowDimension());
+    }
+    
+    /**
+     * @return true if the matrix is singular
+     */
+    public boolean isSingular() {
+        if (lu == null) {
+            try {
+                LUDecompose();
+                return false;
+            } catch (IllegalArgumentException ex) {
+                return true;
+            }
+        } else {            // LU decomp must have been successfully performed
+            return false;   // so the matrix is not singular
+        }
+    }
+    
+    /**
+     * @return rowDimension
+     */
+    public int getRowDimension() {
+        return data.length;
+    }
+    
+    /**
+     * @return columnDimension
+     */
+    public int getColumnDimension() {
+        return data[0].length;
+    }
+    
+    /**
+     * @return trace
+     * @throws IllegalArgumentException if the matrix is not square
+     */
+    public double getTrace() throws IllegalArgumentException {
+        if (!isSquare()) {
+            throw new IllegalArgumentException("matrix is not square");
+        }
+        double trace = data[0][0];
+        for (int i = 1; i < this.getRowDimension(); i++) {
+            trace += data[i][i];
+        }
+        return trace;
+    }
+    
+    /**
+     * @param v vector to operate on
+     * @throws IllegalArgumentException if columnDimension != v.length
+     * @return resulting vector
+     */
+    public double[] operate(double[] v) throws IllegalArgumentException {
+        if (v.length != this.getColumnDimension()) {
+            throw new IllegalArgumentException("vector has wrong length");
+        }
+        int nRows = this.getRowDimension();
+        int nCols = this.getColumnDimension();
+        double[] out = new double[v.length];
+        for (int row = 0; row < nRows; row++) {
+            double sum = 0;
+            for (int i = 0; i < nCols; i++) {
+                sum += data[row][i] * v[i];
+            }
+            out[row] = sum;
+        }
+        return out;      
+    }
+    
+    /**
+     * @param v vector to premultiply by
+     * @throws IllegalArgumentException if rowDimension != v.length
+     * @return resulting matrix
+     */
+    public RealMatrix preMultiply(double[] v) throws IllegalArgumentException {
+        int nCols = this.getColumnDimension();
+        if (v.length != nCols) {
+            throw new IllegalArgumentException("vector has wrong length");
+        }
+        // being a bit lazy here -- probably should implement directly, like
+        // operate
+        RealMatrix pm = new RealMatrixImpl(v).transpose();
+        return pm.multiply(this);     
+    }
+    
+    /**
+     * @param b  constant vector
+     * @return   vector of solution values to AX = b, where A is this
+     * @throws   IllegalArgumentException if rowDimension != b.length or matrix
+     *           is singular
+     */
+    public double[] solve(double[] b) throws IllegalArgumentException {
+        int nRows = this.getRowDimension();
+        if (b.length != nRows) {
+            throw new IllegalArgumentException
+                ("constant vector has wrong length");
+        }
+        RealMatrix bMatrix = new RealMatrixImpl(b);
+        double[][] solution = ((RealMatrixImpl) (solve(bMatrix))).getDataRef();
+        double[] out = new double[nRows];
+        for (int row = 0; row < nRows; row++) {
+            out[row] = solution[row][0];
+        }
+        return out;
+    }
+       
+    /**
+     * Uses LU decomposition, performing the composition if the matrix has
+     * not been decomposed, or if there have been changes to the matrix since
+     * the last decomposition.
+     *
+     * @param b the constant vector
+     * @return solution matrix
+     * @throws IllegalArgumentException if this is singular or dimensions
+     * do not match.
+     */
+    public RealMatrix solve(RealMatrix b) throws IllegalArgumentException {
+        if (!this.isSquare()) {
+            throw new IllegalArgumentException
+                ("coefficient matrix is not square");
+        }
+        if (b.getRowDimension() != this.getRowDimension()) {
+            throw new IllegalArgumentException("Incorrect row dimension");
+        }
+        if (this.isSingular()) {  // side effect: compute LU decomp
+            throw new IllegalArgumentException("Matrix is singular.");
+        }
+        
+        int nCol = this.getColumnDimension();
+        int nColB = b.getColumnDimension();
+        int nRowB = b.getRowDimension();
+        
+        // Apply permutations to b
+        double[][] bv = b.getData();
+        double[][] bp = new double[nRowB][nColB];
+        for (int row = 0; row < nRowB; row++) {
+            for (int col = 0; col < nColB; col++) {
+                bp[row][col] = bv[pivot[row]][col];
+            }
+        }
+        bv = null;
+        
+        // Solve LY = b
+        for (int col = 0; col < nCol; col++) {
+            for (int i = col + 1; i < nCol; i++) {
+                for (int j = 0; j < nColB; j++) {
+                    bp[i][j] -= bp[col][j] * lu[i][col];
+                }
+            }
+        }
+        
+        // Solve UX = Y
+        for (int col = nCol - 1; col >= 0; col--) {
+            for (int j = 0; j < nColB; j++) {
+                bp[col][j] /= lu[col][col];
+            }
+            for (int i = 0; i < col; i++) {
+                for (int j = 0; j < nColB; j++) {
+                    bp[i][j] -= bp[col][j] * lu[i][col];
+                }
+            }
+        }
+        
+        RealMatrixImpl outMat = new RealMatrixImpl(bp);
+        return outMat;
+    }
+    
+    /**
+     * Computes a new <a href="http://www.math.gatech.edu/~bourbaki/
+     * math2601/Web-notes/2num.pdf">LU decompostion</a> for this matrix,
+     * storing the result for use by other methods.
+     * <p>
+     * <strong>Implementation Note</strong>:<br>
+     * Uses <a href="http://www.damtp.cam.ac.uk/user/fdl/
+     * people/sd/lectures/nummeth98/linear.htm">Crout's algortithm</a>,
+     * with partial pivoting.
+     * <p>
+     * <strong>Usage Note</strong>:<br>
+     * This method should rarely be invoked directly. Its only use is
+     * to force recomputation of the LU decomposition when changes have been
+     * made to the underlying data using direct array references. Changes
+     * made using setXxx methods will trigger recomputation when needed
+     * automatically.
+     *
+     * @throws IllegalArgumentException if the matrix is singular
+     */
+    public void LUDecompose() throws IllegalArgumentException {
+        int nRows = this.getRowDimension();
+        int nCols = this.getColumnDimension();
+        if (nRows < nCols) {
+            throw new IllegalArgumentException
+              ("LU decomposition requires row dimension >= column dimension");
+        }
+        lu = this.getData();
+        
+        // Initialize pivot array and parity
+        pivot = new int[nRows];
+        for (int row = 0; row < nRows; row++) {
+            pivot[row] = row;
+        }
+        parity = 1;
+        
+        // Loop over columns
+        for (int col = 0; col < nCols; col++) {
+            
+            double sum = 0;
+            
+            // upper
+            for (int row = 0; row < col; row++) {
+                sum = lu[row][col];
+                for (int i = 0; i < row; i++) {
+                    sum -= lu[row][i] * lu[i][col];
+                }
+                lu[row][col] = sum;
+            }
+            
+            // lower
+            int max = col; // pivot row
+            double largest = 0d;
+            for (int row = col; row < nRows; row++) {
+                sum = lu[row][col];
+                for (int i = 0; i < col; i++) {
+                    sum -= lu[row][i] * lu[i][col];
+                }
+                lu[row][col] = sum;
+                
+                // maintain best pivot choice
+                if (Math.abs(sum) > largest) {
+                    largest = Math.abs(sum);
+                    max = row;
+                }
+            }
+            
+            // Singularity check
+            if (Math.abs(lu[max][col]) < TOO_SMALL) {
+                lu = null;
+                throw new IllegalArgumentException("matrix is singular");
+            }
+            
+            // Pivot if necessary
+            if (max != col) {
+                double tmp = 0;
+                for (int i = 0; i < nCols; i++) {
+                    tmp = lu[max][i];
+                    lu[max][i] = lu[col][i];
+                    lu[col][i] = tmp;
+                }
+                int temp = pivot[max];
+                pivot[max] = pivot[col];
+                pivot[col] = temp;
+                parity = -parity;
+            }
+            
+            //Divide the lower elements by the "winning" diagonal elt.
+            for (int row = col + 1; row < nRows; row++) {
+                lu[row][col] /= lu[col][col];
+            }
+        }
+    }
+    
+    //------------------------ Protected methods
+    
+    /**
+     * Returns <code>dimension x dimension</code> identity matrix.
+     *
+     * @param dimension dimension of identity matrix to generate
+     * @return identity matrix
+     */
+    protected RealMatrix getIdentity(int dimension) {
+        RealMatrixImpl out = new RealMatrixImpl(dimension, dimension);
+        double[][] d = out.getDataRef();
+        for (int row = 0; row < dimension; row++) {
+            for (int col = 0; col < dimension; col++) {
+                d[row][col] = row == col ? 1d : 0d;
+            }
+        }
+        return out;
+    }
+    
+    //------------------------ Private methods
+    
+    /**
+     * Returns a fresh copy of the underlying data array.
+     *
+     * @return a copy of the underlying data array.
+     */
+    private double[][] copyOut() {
+        int nRows = this.getRowDimension();
+        double[][] out =
+            new double[nRows][this.getColumnDimension()];
+        // can't copy 2-d array in one shot, otherwise get row references
+        for (int i = 0; i < nRows; i++) {
+            System.arraycopy(data[i], 0, out[i], 0, data[i].length);
+        }
+        return out;
+    }
+    
+    /**
+     * Replaces data with a fresh copy of the input array.
+     *
+     * @param in data to copy in
+     */
+    private void copyIn(double[][] in) {
+        int nRows = in.length;
+        int nCols = in[0].length;
+        data = new double[nRows][nCols];
+        System.arraycopy(in, 0, data, 0, in.length);
+        for (int i = 0; i < nRows ; i++) {
+            System.arraycopy(in[i], 0, data[i], 0, nCols);
+        }
+        lu = null;
+    }
+}
diff --git a/src/java/org/apache/commons/math/linear/package.html b/src/java/org/apache/commons/math/linear/package.html
new file mode 100644
index 0000000..cc63105
--- /dev/null
+++ b/src/java/org/apache/commons/math/linear/package.html
@@ -0,0 +1,4 @@
+<html>
+	<!-- $Revision: 1.4 $ $Date: 2003/11/14 22:22:19 $ -->
+	<body>Linear algebra support.</body>
+</html>
diff --git a/src/java/org/apache/commons/math/random/EmpiricalDistribution.java b/src/java/org/apache/commons/math/random/EmpiricalDistribution.java
new file mode 100644
index 0000000..5ae78cb
--- /dev/null
+++ b/src/java/org/apache/commons/math/random/EmpiricalDistribution.java
@@ -0,0 +1,183 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+
+package org.apache.commons.math.random;
+
+import java.io.IOException;
+import java.io.File;
+import java.util.ArrayList;
+
+import org.apache.commons.math.stat.Univariate;
+
+/**
+ * Represents an <a href="http://random.mat.sbg.ac.at/~ste/dipl/node11.html">
+ * empirical probability distribution</a> -- a probability distribution derived
+ * from observed data without making any assumptions about the functional form
+ * of the population distribution that the data come from.<p>
+ * Implementations of this interface maintain data structures, called 
+ * <i>distribution digests</i>, that describe empirical distributions and 
+ * support the following operations: <ul>
+ * <li>loading the distribution from a file of observed data values</li>
+ * <li>saving and re-loading distribution digests to/from "digest files" </li>
+ * <li>dividing the input data into "bin ranges" and reporting bin frequency
+ *     counts (data for histogram)</li>
+ * <li>reporting univariate statistics describing the full set of data values
+ *     as well as the observations within each bin</li>
+ * <li>generating random values from the distribution</li>
+ * </ul>
+ * Applications can use <code>EmpiricalDistribution</code> implementations to 
+ * build grouped frequnecy histograms representing the input data or to
+ * generate random values "like" those in the input file -- i.e., the values
+ * generated will follow the distribution of the values in the file.
+ * @version $Revision: 1.9 $ $Date: 2003/11/14 22:22:21 $
+ */
+public interface EmpiricalDistribution {
+    
+    /**
+     * Computes the empirical distribution from the input file
+     * @param filePath fully qualified name of a file in the local file system
+     * @throws IOException if an IO error occurs
+     */
+    void load(String filePath) throws IOException; 
+    
+    /**
+     * Computes the empirical distribution from the input file
+     * @param file url of the input file
+     * @throws IOException if an IO error occurs
+     */
+    void load(File file) throws IOException;
+    
+    /** 
+     * Generates a random value from this distribution.
+     * <strong>Preconditions:</strong><ul>
+     * <li>the distribution must be loaded before invoking this method</li></ul>
+     * @return the random value.
+     * @throws IllegalStateException if the distribution has not been loaded
+     */
+    double getNextValue() throws IllegalStateException;  
+    
+     
+    /** 
+     * Returns a Univariate describing this distribution.
+     * <strong>Preconditions:</strong><ul>
+     * <li>the distribution must be loaded before invoking this method</li></ul>
+     * @return the sample statistics
+     * @throws IllegalStateException if the distribution has not been loaded
+     */
+    Univariate getSampleStats() throws IllegalStateException;
+    
+    /** 
+     * Loads a saved distribution from a file.
+     * @param file File reference for a file containing a digested distribution
+     * @throws IOException if an error occurs reading the file
+     */
+    void loadDistribution(File file) throws IOException;  
+    
+    /** 
+     * Loads a saved distribution from a file.
+     * @param filePath fully qualified file path for a file 
+     * containing a digested distribution 
+     * @throws IOException if an error occurs reading the file
+     */
+    void loadDistribution(String filePath) throws IOException; 
+    
+    /** 
+     * Saves distribution to a file. Overwrites the file if it exists.
+     * <strong>Preconditions:</strong><ul>
+     * <li>the distribution must be loaded before invoking this method</li></ul>
+     * @param filePath fully qualified file path for the file to be written
+     * @throws IOException if an error occurs reading the file
+     * @throws IllegalStateException if the distribution has not been loaded
+     */
+    void saveDistribution(String filePath) throws 
+        IOException,IllegalStateException;
+    
+    /** 
+     * Saves distribution to a file. Overwrites the file if it exists.
+     * <strong>Preconditions:</strong><ul>
+     * <li>the distribution must be loaded before invoking this method</li></ul>
+     * @param file File reference for the file to be written
+     * @throws IOException if an error occurs reading the file
+     * @throws IllegalStateException if the distribution has not been loaded
+     */
+    void saveDistribution(File file) throws IOException,IllegalStateException;
+    
+    /**
+     * property indicating whether or not the distribution has been loaded
+     * @return true if the distribution has been loaded
+     */
+    boolean isLoaded();  
+    
+     /** 
+     * Returns the number of bins
+     * @return the number of bins.
+     */
+    int getBinCount();
+    
+    /** 
+     * Returns a list of Univariates containing statistics describing the
+     * values in each of the bins.  The ArrayList is indexed on the bin number.
+     * @return ArrayList of bin statistics.
+     */
+    ArrayList getBinStats();
+    
+    /** 
+     * Returns the array of upper bounds for the bins.  Bins are: <br/>
+     * [min,upperBounds[0]],(upperBounds[0],upperBounds[1]],...,
+     *  (upperBounds[binCount-1],max]
+     * @return array of bin upper bounds
+     */
+    double[] getUpperBounds();
+    
+}
diff --git a/src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java b/src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java
new file mode 100644
index 0000000..bbdb329
--- /dev/null
+++ b/src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java
@@ -0,0 +1,289 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+
+package org.apache.commons.math.random;
+
+import java.util.ArrayList;
+import java.io.Serializable;
+import java.io.BufferedReader;
+import java.io.FileReader;
+import java.io.File;
+import java.io.IOException;
+
+import org.apache.commons.math.stat.Univariate;
+import org.apache.commons.math.stat.UnivariateImpl;
+
+/**
+ * Implements <code>EmpiricalDistribution</code> interface.  This implementation
+ * uses what amounts to the 
+ * <a href="http://nedwww.ipac.caltech.edu/level5/March02/Silverman/Silver2_6.html">
+ * Variable Kernel Method</a> with Gaussian smoothing:<p>
+ * <strong>Digesting the input file</strong>
+ * <ol><li>Pass the file once to compute min and max.</li>  
+ * <li>Divide the range from min-max into <code>binCount</code> "bins."</li>
+ * <li>Pass the data file again, computing bin counts and univariate
+ *     statistics (mean, std dev.) for each of the bins </li>
+ * <li>Divide the interval (0,1) into subintervals associated with the bins,
+ *     with the length of a bin's subinterval proportional to its count.</li></ol>
+ * <strong>Generating random values from the distribution</strong><ol>
+ * <li>Generate a uniformly distributed value in (0,1) </li>
+ * <li>Select the subinterval to which the value belongs.
+ * <li>Generate a random Gaussian value with mean = mean of the associated
+ *     bin and std dev = std dev of associated bin.</li></ol></p><p>
+ *<strong>USAGE NOTES:</strong><ul>
+ *<li>The <code>binCount</code> is set by default to 1000.  A good rule of thumb
+ *    is to set the bin count to approximately the length of the input file divided
+ *    by 10.  See TODO: add reference </li>
+ *<li>The input file <i>must</i> be a plain text file containing one valid numeric
+ *    entry per line.</li>
+ * </ol></p>
+ *
+ * @version $Revision: 1.9 $ $Date: 2003/11/14 22:22:21 $
+ */
+public class EmpiricalDistributionImpl implements Serializable,EmpiricalDistribution {
+
+    
+    /** List of Univariate objects characterizing the bins */
+    private ArrayList binStats = null;
+    
+    /** Sample statistics */
+    Univariate sampleStats = null;
+    
+    /** number of bins */
+    private int binCount = 1000;
+    
+    /** is the distribution loaded? */
+    private boolean loaded = false;
+    
+    /** upper bounds of subintervals in (0,1) "belonging" to the bins */
+    private double[] upperBounds = null;
+    
+    /** RandomData instance to use in repeated calls to getNext() */
+    private RandomData randomData = new RandomDataImpl();
+    
+    /** 
+     * Creates a new EmpiricalDistribution  with the default bin count
+     */
+    public EmpiricalDistributionImpl() {
+        binStats = new ArrayList();
+    }
+    
+    /** 
+     * Creates a new EmpiricalDistribution  with the specified bin count
+     * @param binCount number of bins
+     */
+    public EmpiricalDistributionImpl(int binCount) {
+        this.binCount = binCount;
+        binStats = new ArrayList();
+    }
+    
+    
+    public void load(String filePath) throws IOException {
+        File file = new File(filePath);
+        load(file);
+    }
+    
+     
+    public void load(File file) throws IOException {
+        // Pass the file once to get sample stats
+         BufferedReader in = null;
+         try {  
+            in = new BufferedReader(new FileReader(file));
+            String str = null;
+            double val = 0.0;
+            sampleStats = new UnivariateImpl();
+            while ((str = in.readLine()) != null) {
+              val = new Double(str).doubleValue();
+              sampleStats.addValue(val);   
+            }
+            in.close();
+            in = null;
+         } finally {
+             if (in != null) try {in.close();} catch (Exception ex) {};
+         }               
+        
+         // Load array of bin upper bounds -- evenly spaced from min - max
+         double min = sampleStats.getMin();
+         double max = sampleStats.getMax();
+         double delta = (max - min)/(new Double(binCount)).doubleValue();
+         double[] binUpperBounds = new double[binCount];
+         binUpperBounds[0] = min + delta;
+         for (int i = 1; i< binCount - 1; i++) {
+             binUpperBounds[i] = binUpperBounds[i-1] + delta;
+         }
+         binUpperBounds[binCount -1] = max;
+         
+        // Initialize binStats ArrayList
+        if (!binStats.isEmpty()) {
+            binStats.clear();
+        }
+        for (int i = 0; i < binCount; i++) {
+            Univariate stats = new UnivariateImpl();
+            binStats.add(i,stats);
+        }
+         
+        // Pass the data again, filling data in binStats Array 
+         try {
+            in = new BufferedReader(new FileReader(file));
+            String str = null;
+            double val = 0.0d;
+            while ((str = in.readLine()) != null) {
+              val = new Double(str).doubleValue();
+              
+              // Find bin and add value to binStats for the bin
+              boolean found = false;
+              int i = 0; 
+              while (!found) {
+                  if (i >= binCount) {
+                      throw new RuntimeException("bin alignment error");
+                  }
+                  if (val <= binUpperBounds[i]) {
+                      found = true;
+                      Univariate stats = (Univariate)binStats.get(i);
+                      stats.addValue(val);
+                  }
+                  i++;
+              }       
+            }
+            in.close();
+            in = null;
+         } finally {
+             if (in != null) try {in.close();} catch (Exception ex) {};
+         }               
+        
+         // Assign upperBounds based on bin counts
+         upperBounds = new double[binCount];
+         upperBounds[0] = 
+            ((double)((Univariate)binStats.get(0)).getN())/
+                (double)sampleStats.getN();
+         for (int i = 1; i < binCount-1; i++) {
+             upperBounds[i] = upperBounds[i-1] +
+             ((double)((Univariate)binStats.get(i)).getN())/
+                (double)sampleStats.getN();
+         }
+         upperBounds[binCount-1] = 1.0d;   
+         
+         loaded = true;
+    }
+    
+    /**
+     * Generates a random value from this distribution
+     * @return the random value.
+     * @throws IllegalStateException if the distribution has not been loaded
+     */
+    public double getNextValue() throws IllegalStateException {    
+        
+        if (!loaded) {
+            throw new IllegalStateException("distribution not loaded");
+        }
+        
+        // Start with a uniformly distributed random number in (0,1)
+        double x = Math.random();
+       
+        // Use this to select the bin and generate a Gaussian within the bin
+        for (int i = 0; i < binCount; i++) {
+           if (x <= upperBounds[i]) {
+               Univariate stats = (Univariate)binStats.get(i);
+               if (stats.getN() > 0) { 
+                   if (stats.getStandardDeviation() > 0) {  // more than one obs 
+                        return randomData.nextGaussian
+                            (stats.getMean(),stats.getStandardDeviation());
+                   } else {
+                       return stats.getMean(); // only one obs in bin
+                   }
+               }
+           }
+        }
+        throw new RuntimeException("No bin selected");
+    }
+       
+    public void loadDistribution(String filePath) throws IOException {
+        throw new UnsupportedOperationException("Not Implemented yet :-(");
+    }
+    
+    public void loadDistribution(File file) throws IOException {
+        throw new UnsupportedOperationException("Not Implemented yet :-(");
+    }
+       
+    public void saveDistribution(String filePath) throws 
+        IOException,IllegalStateException {
+       throw new UnsupportedOperationException("Not Implemented yet :-(");
+    }
+    
+    public void saveDistribution(File file) throws 
+        IOException,IllegalStateException {
+       throw new UnsupportedOperationException("Not Implemented yet :-(");
+    }
+        
+    public Univariate getSampleStats() {
+        return sampleStats;
+    }
+    
+    public int getBinCount() {
+        return binCount;
+    }
+      
+    public ArrayList getBinStats() {
+        return binStats;
+    }
+       
+    public double[] getUpperBounds() {
+        return upperBounds;
+    }
+    
+    public boolean isLoaded() {
+        return loaded;
+    }
+    
+}
diff --git a/src/java/org/apache/commons/math/random/RandomData.java b/src/java/org/apache/commons/math/random/RandomData.java
new file mode 100644
index 0000000..f3af067
--- /dev/null
+++ b/src/java/org/apache/commons/math/random/RandomData.java
@@ -0,0 +1,316 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+
+package org.apache.commons.math.random;
+import java.util.Collection;
+
+/**
+ * Random data generation utilities
+ * @version $Revision: 1.6 $ $Date: 2003/11/14 22:22:21 $
+ */
+public interface RandomData {      
+    /**
+     * Generates a random string of hex characters of length
+     * <code>len</code>.
+     * <p>
+     * The generated string will be random, but not cryptographically 
+     * secure. To generate cryptographically secure strings, use 
+     * <code>nextSecureHexString</code>
+     * <p>
+     * <strong>Preconditions</strong>:<ul>
+     * <li><code>len > 0</code> (otherwise an IllegalArgumentException 
+     *     is thrown.)</li>
+     * </ul>
+     * 
+     * @param len the length of the string to be generated
+     * @return random string of hex characters of length <code>len</code>  
+     */
+    String nextHexString(int len);  
+    
+    /**
+     * Generates a uniformly distributed random integer between 
+     * <code>lower</code> and <code>upper</code> (endpoints included).
+     * <p>
+     * The generated integer will be random, but not cryptographically secure.
+     * To generate cryptographically secure integer sequences, use 
+     * <code>nextSecureInt</code>.
+     * <p>
+     * <strong>Preconditions</strong>:<ul>
+     * <li><code>lower < upper</code> (otherwise an IllegalArgumentException 
+     *     is thrown.)</li>
+     * </ul>
+     *
+     * @param lower lower bound for generated integer
+     * @param upper upper bound for generated integer
+     * @return a random integer greater than or equal to <code>lower</code> 
+     * and less than or equal to <code>upper</code>.
+     */
+    int nextInt(int lower, int upper);  
+    
+    /**
+     * Generates a uniformly distributed random long integer between
+     * <code>lower</code> and <code>upper</code> (endpoints included).
+     * <p>
+     * The generated long integer values will be random, but not 
+     * cryptographically secure.
+     * To generate cryptographically secure sequences of longs, use 
+     * <code>nextSecureLong</code>
+     * <p>
+     * <strong>Preconditions</strong>:<ul>
+     * <li><code>lower < upper</code> (otherwise an IllegalArgumentException 
+     *     is thrown.)</li>
+     * </ul>
+     *
+     * @param lower lower bound for generated integer
+     * @param upper upper bound for generated integer
+     * @return a random integer greater than or equal to <code>lower</code>
+     * and less than or equal to <code>upper</code>.
+     */
+    long nextLong(long lower, long upper);  
+    
+    /**
+     * Generates a random string of hex characters from a secure random 
+     * sequence.
+     * <p>
+     * If cryptographic security is not required, 
+     * use <code>nextHexString()</code>.
+     * <p>
+     * <strong>Preconditions</strong>:<ul>
+     * <li><code>len > 0</code> (otherwise an IllegalArgumentException 
+     *     is thrown.)</li>
+     * </ul>
+     * @param len length of return string
+     * @return the random hex string
+     */
+    String nextSecureHexString(int len);  
+    
+    /**
+     * Generates a uniformly distributed random integer between 
+     * <code>lower</code> and <code>upper</code> (endpoints included) 
+     * from a secure random sequence.
+     * <p>
+     * Sequences of integers generated using this method will be 
+     * cryptographically secure. If cryptographic security is not required, 
+     * <code>nextInt</code> should be used instead of this method. 
+     * <p>
+     * <strong>Definition</strong>:
+     * <a href="http://www.wikipedia.org/wiki/
+     * Cryptographically_secure_pseudo-random_number_generator">
+     * Secure Random Sequence</a>
+     * <p>
+     * <strong>Preconditions</strong>:<ul>
+     * <li><code>lower < upper</code> (otherwise an IllegalArgumentException 
+     *     is thrown.)</li>
+     * </ul>
+     *
+     * @param lower lower bound for generated integer
+     * @param upper upper bound for generated integer
+     * @return a random integer greater than or equal to <code>lower</code>
+     * and less than or equal to <code>upper</code>.
+     */
+    int nextSecureInt(int lower, int upper);  
+    
+    /**
+     * Generates a random long integer between <code>lower</code>
+     * and <code>upper</code> (endpoints included).<p>
+     * Sequences of long values generated using this method will be 
+     * cryptographically secure. If cryptographic security is not required,
+     * <code>nextLong</code> should be used instead of this method.
+     * <p>
+     * <strong>Definition</strong>:
+     * <a href="http://www.wikipedia.org/wiki/
+     * Cryptographically_secure_pseudo-random_number_generator">
+     * Secure Random Sequence</a>
+     * <p>
+     * <strong>Preconditions</strong>:<ul>
+     * <li><code>lower < upper</code> (otherwise an IllegalArgumentException 
+     *     is thrown.)</li>
+     * </ul>
+     *
+     * @param lower lower bound for generated integer
+     * @param upper upper bound for generated integer
+     * @return a long integer greater than or equal to <code>lower</code>
+     * and less than or equal to <code>upper</code>.
+     */
+    long nextSecureLong(long lower, long upper);  
+    
+    /** 
+     * Generates a random value from the Poisson distribution with 
+     * the given mean.
+     * <p>
+     * <strong>Definition</strong>: 
+     * <a href="http://www.itl.nist.gov/div898/handbook/
+     * eda/section3/eda366j.htm">
+     * Poisson Distribution</a>
+     * <p>
+     * <strong>Preconditions</strong>: <ul>
+     * <li>The specified mean <i>must</i> be positive (otherwise an 
+     *     IllegalArgumentException is thrown.)</li>
+     * </ul>
+     * @param mean Mean of the distribution
+     * @return poisson deviate with the specified mean
+     */
+    long nextPoisson(double mean);  
+    
+    /** 
+     * Generates a random value from the
+     * Normal (or Gaussian) distribution with the given mean
+     * and standard deviation.
+     * <p>
+     * <strong>Definition</strong>: 
+     * <a href="http://www.itl.nist.gov/div898/handbook/
+     * eda/section3/eda3661.htm">
+     * Normal Distribution</a>
+     * <p>
+     * <strong>Preconditions</strong>: <ul>
+     * <li><code>sigma > 0</code> (otherwise an IllegalArgumentException 
+     *     is thrown.)</li>
+     * </ul>
+     * @param mu Mean of the distribution
+     * @param sigma Standard deviation of the distribution
+     * @return random value from Gaussian distribution with mean = mu,
+     * standard deviation = sigma
+     */
+    double nextGaussian(double mu, double sigma);  
+    
+    /**
+     * Generates a random value from the exponential distribution
+     * with expected value = <code>mean</code>.
+     * <p>
+     * <strong>Definition</strong>: 
+     * <a href="http://www.itl.nist.gov/div898/handbook/
+     * eda/section3/eda3667.htm">
+     * Exponential Distribution</a>
+     * <p>
+     * <strong>Preconditions</strong>: <ul>
+     * <li><code>mu >= 0</code> (otherwise an IllegalArgumentException 
+     *     is thrown.)</li>
+     * </ul>
+     * @param mean Mean of the distribution
+     * @return random value from exponential distribution
+     */
+    double nextExponential(double mean);   
+    
+    /**
+     * Generates a uniformly distributed random value from the open interval
+     * (<code>lower</code>,<code>upper</code>) (i.e., endpoints excluded).
+     * <p>
+     * <strong>Definition</strong>: 
+     * <a href="http://www.itl.nist.gov/div898/handbook/
+     * eda/section3/eda3662.htm">
+     * Uniform Distribution</a> <code>lower</code> and 
+     * <code>upper - lower</code> are the 
+     * <a href = "http://www.itl.nist.gov/div898/handbook/eda/
+     * section3/eda364.htm">
+     * location and scale parameters</a>, respectively.
+     * <p>
+     * <strong>Preconditions</strong>:<ul>
+     * <li><code>lower < upper</code> (otherwise an IllegalArgumentException 
+     *     is thrown.)</li>
+     * </ul>
+     *
+     * @param lower lower endpoint of the interval of support
+     * @param upper upper endpoint of the interval of support
+     * @return uniformly distributed random value between lower
+     * and upper (exclusive)
+     */
+    double nextUniform(double lower, double upper);
+    
+    /**
+     * Generates an integer array of length <code>k</code> whose entries
+     * are selected randomly, without repetition, from the integers <code>
+     * 0 through n-1</code> (inclusive). 
+     * <p>
+     * Generated arrays represent permutations
+     * of <code>n</code> taken <code>k</code> at a time. 
+     * <p>
+     * <strong>Preconditions:</strong><ul>
+     * <li> <code>k <= n</code></li>
+     * <li> <code>n > 0</code> </li>
+     * </ul>
+     * If the preconditions are not met, an IllegalArgumentException is
+     * thrown.
+     * 
+     * @param n domain of the permutation
+     * @param k size of the permutation
+     * @return random k-permutation of n 
+     */
+    int[] nextPermutation(int n, int k);
+    
+    /**
+     * Returns an array of <code>k</code> objects selected randomly
+     * from the Collection <code>c</code>. 
+     * <p>
+     * Sampling from <code>c</code>
+     * is without replacement; but if <code>c</code> contains identical
+     * objects, the sample may include repeats.  If all elements of <code>
+     * c</code> are distinct, the resulting object array represents a 
+     * <a href="http://rkb.home.cern.ch/rkb/AN16pp/
+     * node250.html#SECTION0002500000000000000000">
+     * Simple Random Sample</a> of size
+     * <code>k</code> from the elements of <code>c</code>.
+     * <p>   
+     * <strong>Preconditions:</strong><ul>
+     * <li> k must be less than or equal to the size of c </li>
+     * <li> c must not be empty </li>
+     * </ul>
+     * If the preconditions are not met, an IllegalArgumentException is
+     * thrown.
+     * 
+     * @param c collection to be sampled
+     * @param k size of the sample
+     * @return random sample of k elements from c 
+     */
+    Object[] nextSample(Collection c, int k);
+}
diff --git a/src/java/org/apache/commons/math/random/RandomDataImpl.java b/src/java/org/apache/commons/math/random/RandomDataImpl.java
new file mode 100644
index 0000000..cf8fda0
--- /dev/null
+++ b/src/java/org/apache/commons/math/random/RandomDataImpl.java
@@ -0,0 +1,592 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+
+package org.apache.commons.math.random;
+
+import java.security.MessageDigest;
+import java.security.SecureRandom;
+import java.security.NoSuchAlgorithmException;
+import java.security.NoSuchProviderException;
+import java.util.Random;
+import java.util.Collection;
+
+/**
+ * Implements the <code>RandomData</code> interface using 
+ * <code>java.util.Random</code> and 
+ * <code>java.util.Random.SecureRandom</code> instances to generate data. 
+ * <p>
+ * Supports reseeding the underlying 
+ * <a href="http://www.wikipedia.org/wiki/Pseudo-random_number_generator">
+ * PRNG</a>. The <code>SecurityProvider</code> and <code>Algorithm</code>
+ * used by the <code>SecureRandom</code> instance can also be reset.
+ * <p>
+ * For details on the PRNGs, see the JDK documentation for 
+ * <code>java.util.Random</code> and 
+ * <code>java.util.Random.SecureRandom</code>
+ * <p>
+ * <strong>Usage Notes</strong>: <ul>
+ * <li>
+ * Instance variables are used to maintain <code>Random</code> and 
+ * <code>SecureRandom</code> instances used in data generation. Therefore,
+ * to generate a random sequence of values or strings, you should use just
+ * <strong>one</strong> <code>RandomDataImpl</code> instance repeatedly.</li>
+ * <li>
+ * The "secure" methods are *much* slower.  These should be used only when
+ * a <a href="http://www.wikipedia.org/wiki/
+ * Cryptographically_secure_pseudo-random_number_generator"> Secure Random 
+ * Sequence</a> is required.</li>
+ * <li>
+ * When a new <code>RandomDataImpl</code> is created, the underlying random
+ * number generators are <strong>not</strong> intialized.  The first call to a
+ * data generation method, or to a <code>reSeed()</code> method instantiates
+ * the appropriate generator.  If you do not explicitly seed the generator, it
+ * is by default seeded with the current time in milliseconds</li>
+ * <li>
+ * The <code>reSeed</code> and <code>reSeedSecure</code> methods delegate 
+ * to the corresponding methods on the underlying <code>Random</code> and 
+ * <code>SecureRandom</code> instances.  Therefore, the contracts of these 
+ * methods are as defined in the JDK documentation.  In particular, 
+ * <code>reSeed(long)</code> fully resets the initial state of the non-secure 
+ * random number generator (so that reseeding with a specific value always 
+ * results in the same subsequent random sequence); whereas reSeedSecure(long)
+ * does <strong>not</strong> reinitialize the secure random number generator 
+ * (so secure sequences started with calls to reseedSecure(long) won't be 
+ * identical).</li></ul>
+ * 
+ * @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:21 $
+ */
+public class RandomDataImpl implements RandomData {
+    
+    /** underlying random number generator */
+    private Random rand = null;
+    
+    /** underlying secure random number generator */
+    private SecureRandom secRand = null;
+    
+    /**
+     * Construct a RandomDataImpl.
+     */
+    public RandomDataImpl() {
+    }
+          
+    /**
+     * <strong>Algorithm Description:</strong> hex strings are generated 
+     * using a 2-step process. <ol>
+     * <li>
+     * len/2+1 binary bytes are generated using the underlying Random</li>
+     * <li>
+     * Each binary byte is translated into 2 hex digits</li></ol>
+     * @param len the desired string length.
+     * @return the random string.
+     */
+    public String nextHexString(int len) {
+        if (len <= 0) {
+            throw new IllegalArgumentException("length must be positive");
+        }
+            
+        //Get a random number generator
+        Random ran = getRan();
+        
+        //Initialize output buffer
+        StringBuffer outBuffer = new StringBuffer();
+            
+        //Get int(len/2)+1 random bytes
+        byte[] randomBytes = new byte[(len / 2) + 1];
+        ran.nextBytes(randomBytes);
+ 
+        //Convert each byte to 2 hex digits
+        for (int i = 0; i < randomBytes.length; i++) {
+            Integer c = new Integer(randomBytes[i]);
+                
+            /* Add 128 to byte value to make interval 0-255 before
+             * doing hex conversion.
+             * This guarantees <= 2 hex digits from toHexString()
+             * toHexString would otherwise add 2^32 to negative arguments.
+             */
+             String hex = Integer.toHexString(c.intValue() + 128);
+                
+             // Make sure we add 2 hex digits for each byte
+             if (hex.length() == 1)  {
+                 hex = "0" + hex;
+             }
+             outBuffer.append(hex);
+        }
+        return outBuffer.toString().substring(0, len);
+    }
+
+    /**
+     * Generate a random int value uniformly distributed between
+     * <code>lower</code> and <code>upper</code>, inclusive.
+     * @param lower the lower bound.
+     * @param upper the upper bound.
+     * @return the random integer.
+     */       
+    public int nextInt(int lower, int upper) {
+        if (lower >= upper) {
+            throw new IllegalArgumentException
+                ("upper bound must be > lower bound");
+        }
+        Random rand = getRan();
+        return lower + (int) (rand.nextDouble() * (upper - lower + 1));
+    }
+    
+    /**
+     * Generate a random long value uniformly distributed between
+     * <code>lower</code> and <code>upper</code>, inclusive.
+     * @param lower the lower bound.
+     * @param upper the upper bound.
+     * @return the random integer.
+     */       
+    public long nextLong(long lower, long upper) {
+        if (lower >= upper) {
+            throw new IllegalArgumentException
+                ("upper bound must be > lower bound");
+        }
+        Random rand = getRan();
+        return lower + (long) (rand.nextDouble() * (upper - lower + 1));
+    }
+    
+     /**
+     * <strong>Algorithm Description:</strong> hex strings are generated in 
+     * 40-byte segments using a 3-step process. <ol>
+     * <li>
+     * 20 random bytes are generated using the underlying 
+     * <code>SecureRandom</code>.</li>
+     * <li>
+     * SHA-1 hash is applied to yield a 20-byte binary digest.</li>
+     * <li>
+     * Each byte of the binary digest is converted to 2 hex digits</li></ol>
+     * <p>
+     * TODO: find external reference or provide justification for the claim 
+     * that this yields a cryptographically secure sequence of hex strings.
+     * @param len the desired string length.
+     * @return the random string.
+     */
+    public String nextSecureHexString(int len) {
+        if (len <= 0) {
+            throw new IllegalArgumentException("length must be positive");
+        }
+       
+       // Get SecureRandom and setup Digest provider
+       SecureRandom secRan = getSecRan();
+       MessageDigest alg = null;
+       try {
+            alg = MessageDigest.getInstance("SHA-1");
+       } catch (NoSuchAlgorithmException ex) {
+           return null; // gulp FIXME? -- this *should* never fail.
+       }
+       alg.reset(); 
+       
+       //Compute number of iterations required (40 bytes each)
+       int numIter = (len / 40) + 1;
+       
+       StringBuffer outBuffer = new StringBuffer();
+       for (int iter = 1; iter < numIter + 1; iter++) {
+            byte[] randomBytes = new byte[40];
+            secRan.nextBytes(randomBytes);
+            alg.update(randomBytes);
+    
+            //Compute hash -- will create 20-byte binary hash
+            byte hash[] = alg.digest();
+            
+            //Loop over the hash, converting each byte to 2 hex digits
+            for (int i = 0; i < hash.length; i++) {
+                Integer c = new Integer(hash[i]);
+        
+                /* Add 128 to byte value to make interval 0-255
+                 * This guarantees <= 2 hex digits from toHexString()
+                 * toHexString would otherwise add 2^32 to negative 
+                 * arguments
+                 */
+                String hex = Integer.toHexString(c.intValue() + 128);
+                    
+               //Keep strings uniform length -- guarantees 40 bytes
+                if (hex.length() == 1) {
+                    hex = "0" + hex;
+                }
+               outBuffer.append(hex);
+            }
+        }
+        return outBuffer.toString().substring(0, len);
+    }
+     
+    /**
+     * Generate a random int value uniformly distributed between
+     * <code>lower</code> and <code>upper</code>, inclusive.  This algorithm
+     * using a secure random number generator for its engine.
+     * @param lower the lower bound.
+     * @param upper the upper bound.
+     * @return the random integer.
+     */       
+    public int nextSecureInt(int lower, int upper) {
+          if (lower >= upper) {
+              throw new IllegalArgumentException
+                ("lower bound must be < upper bound");
+          }
+          SecureRandom sec = getSecRan();
+          return lower + (int) (sec.nextDouble() * (upper - lower + 1));
+    }
+     
+    /**
+     * Generate a random long value uniformly distributed between
+     * <code>lower</code> and <code>upper</code>, inclusive.  This algorithm
+     * using a secure random number generator for its engine.
+     * @param lower the lower bound.
+     * @param upper the upper bound.
+     * @return the random integer.
+     */       
+    public long nextSecureLong(long lower, long upper) {
+        if (lower >= upper) {
+            throw new IllegalArgumentException
+            ("lower bound must be < upper bound");
+        }
+        SecureRandom sec = getSecRan();
+        return lower + (long) (sec.nextDouble() * (upper - lower + 1));
+    }
+    
+    /** 
+     * <strong>Algorithm Description</strong>:
+     * Uses simulation of a Poisson process using Uniform deviates, as 
+     * described 
+     * <a href ="http://dmawww.epfl.ch/benarous/Pmmi/interactive/rng7.htm">
+     * here</a>
+     * @param mean mean of the Poisson distribution.
+     * @return the random Poisson value.
+     */
+    public long nextPoisson(double mean) {
+        if (mean <= 0) {
+            throw new IllegalArgumentException("Poisson mean must be > 0");
+        }
+        double p = Math.exp(-mean);
+        long n = 0;
+        double r = 1.0d;
+        Random rand = getRan();
+        while (true) {
+            double rnd = rand.nextDouble();
+            r = r * rnd;
+            if (r >= p) {
+                n++;
+            } else {
+                return n;
+            }
+        }
+    }
+    
+    /**
+     * Generate a random value from a Normal distribution.  This algorithm 
+     * generates random values for the general Normal distribution with the
+     * given mean, <code>mu</code> and the given standard deviation,
+     * <code>sigma</code>.
+     * @param mu the mean of the distribution.
+     * @param sigma the standard deviation of the distribution.
+     * @return the random Normal value.
+     */
+    public double nextGaussian(double mu, double sigma) {
+        if (sigma <= 0) {
+            throw new IllegalArgumentException("Gaussian std dev must be > 0");
+        }
+        Random rand = getRan();
+        return sigma * rand.nextGaussian() + mu;
+    }
+    
+    /**
+     * <strong>Algorithm Description</strong>:  Uses the 
+     * <a href="http://www.jesus.ox.ac.uk/~clifford/a5/chap1/node5.html"> 
+     * Inversion Method</a> to generate exponential from uniform deviates.
+     * @param mean the mean of the distribution.
+     * @return the random Exponential value.
+     */
+    public double nextExponential(double mean)  {
+        if (mean < 0.0)  {
+            throw new IllegalArgumentException
+                ("Exponential mean must be >= 0");
+        }
+        Random rand = getRan();
+        double unif = rand.nextDouble();
+        while (unif == 0.0d) {
+            unif = rand.nextDouble();
+        }
+        return -mean * Math.log(unif);
+    }
+    
+    /**
+     * <strong>Algorithm Description</strong>: scales the output of 
+     * Random.nextDouble(), but rejects 0 values (i.e., will generate another
+     * random double if Random.nextDouble() returns 0). 
+     * This is necessary to provide a symmetric output interval 
+     * (both endpoints excluded).
+     * @param lower the lower bound.
+     * @param upper the upper bound.
+     * @return the random value.
+     */
+    public double nextUniform(double lower, double upper) {
+        if (lower >= upper) {
+            throw new IllegalArgumentException
+            ("lower bound must be <= upper bound");
+        }
+        Random rand = getRan();
+        
+        // insure nextDouble() isn't 0.0
+        double u = rand.nextDouble();
+        while(u <= 0.0){
+            u = rand.nextDouble();
+        }
+        
+        return lower + u * (upper - lower);
+    }
+    
+    /** 
+     * Returns the static Random used to generate random data.
+     * <p>
+     * Creates and initializes if null.
+     * 
+     * @return the static Random used to generate random data
+     */
+    private Random getRan() {
+        if (rand == null) {
+            rand = new Random();
+            rand.setSeed(System.currentTimeMillis());
+        }
+        return rand;
+    }
+    
+    /** 
+     * Returns the static SecureRandom used to generate secure random data.
+     * <p>
+     * Creates and initializes if null.
+     *
+     * @return the static SecureRandom used to generate secure random data
+     */
+    private SecureRandom getSecRan() {
+        if (secRand == null) {
+            secRand = new SecureRandom();
+            secRand.setSeed(System.currentTimeMillis());
+        }
+        return secRand;
+    }
+    
+    /**
+     * Reseeds the random number generator with the supplied seed.
+     * <p>
+     * Will create and initialize if null.
+     *
+     * @param seed the seed value to use
+     */
+    public void reSeed(long seed) {
+        if (rand == null) {
+            rand = new Random();
+        }
+        rand.setSeed(seed);
+    }
+    
+    /**
+     * Reseeds the secure random number generator with the current time
+     * in milliseconds. 
+     * <p> 
+     * Will create and initialize if null.
+     */
+    public void reSeedSecure() {
+        if (secRand == null) {
+            secRand = new SecureRandom();
+        }
+        secRand.setSeed(System.currentTimeMillis());
+    }
+    
+    /**
+     * Reseeds the secure random number generator with the supplied seed.
+     * <p>
+     * Will create and initialize if null.
+     *
+     * @param seed the seed value to use
+     */
+    public void reSeedSecure(long seed) {
+        if (secRand == null) {
+            secRand = new SecureRandom();
+        }
+        secRand.setSeed(seed);
+    }
+    
+    /**
+     * Reseeds the random number generator with the current time
+     * in milliseconds.
+     */
+    public void reSeed() {
+        if (rand == null) {
+            rand = new Random();
+        }
+        rand.setSeed(System.currentTimeMillis());
+    }
+    
+    /**
+     * Sets the PRNG algorithm for the underlying SecureRandom instance
+     * using the Security Provider API.  The Security Provider API is defined in 
+     * <a href="http://java.sun.com/j2se/1.3/docs/guide/security/CryptoSpec.html#AppA">
+     * Java Cryptography Architecture API Specification & Reference.</a>
+     * <p>
+     * <strong>USAGE NOTE:</strong> This method carries <i>significant</i> 
+     * overhead and may take several seconds to execute.
+     * </p>
+     *
+     * @param algorithm the name of the PRNG algorithm
+     * @param provider the name of the provider 
+     * @throws NoSuchAlgorithmException if the specified algorithm 
+     * is not available
+     * @throws NoSuchProviderException if the specified provider 
+     * is not installed
+     */
+    public void setSecureAlgorithm(String algorithm, String provider) 
+        throws NoSuchAlgorithmException, NoSuchProviderException {
+        secRand = SecureRandom.getInstance(algorithm, provider);
+    }
+    
+    /**
+     * Uses a 2-cycle permutation shuffle to generate a random permutation.
+     * The shuffling process is described
+     * <a href=http://www.maths.abdn.ac.uk/~igc/tch/mx4002/notes/node83.html>
+     * here</a>.
+     * @param n the population size.
+     * @param k the number to choose.
+     * @return the random permutation.
+     */
+    public int[] nextPermutation(int n, int k) {
+        if (k > n) {
+            throw new IllegalArgumentException
+                ("permutation k exceeds n");
+        }       
+        if (k == 0) {
+            throw new IllegalArgumentException
+                ("permutation k must be > 0");
+        }
+        
+        int[] index = getNatural(n);
+        shuffle(index, n - k);
+        int[] result = new int[k];
+        for (int i = 0; i < k; i++) {
+            result[i] = index[n - i - 1];
+        }
+  
+        return result;
+    }
+    
+    /**
+     * Uses a 2-cycle permutation shuffle to generate a random permutation.
+     * <strong>Algorithm Description</strong>: Uses a 2-cycle permutation 
+     * shuffle to generate a random permutation of <code>c.size()</code> and 
+     * then returns the elements whose indexes correspond to the elements of 
+     * the generated permutation.  
+     * This technique is described, and proven to generate random samples, 
+     * <a href="http://www.maths.abdn.ac.uk/~igc/tch/mx4002/notes/node83.html">
+     * here</a>
+     * @param c Collection to sample from.
+     * @param k sample size.
+     * @return the random sample.
+     */ 
+    public Object[] nextSample(Collection c, int k) {
+        int len = c.size();
+        if (k > len) {
+            throw new IllegalArgumentException
+                ("sample size exceeds collection size");
+        }
+        if (k == 0) {
+            throw new IllegalArgumentException
+                ("sample size must be > 0");
+        }
+            
+       Object[] objects = c.toArray();
+       int[] index = nextPermutation(len, k);
+       Object[] result = new Object[k];
+       for (int i = 0; i < k; i++) {
+           result[i] = objects[index[i]];
+       }  
+       return result;
+    }
+    
+    //------------------------Private methods----------------------------------
+    
+    /** 
+     * Uses a 2-cycle permutation shuffle to randomly re-order the last elements
+     * of list.
+     * 
+     * @param list list to be shuffled
+     * @param end element past which shuffling begins
+     */
+    private void shuffle(int[] list, int end) {
+        int target = 0;
+        for (int i = list.length - 1 ; i >= end; i--) {
+            if (i == 0) {
+                target = 0; 
+            } else {
+                target = nextInt(0, i);
+            }
+            int temp = list[target];
+            list[target] = list[i];
+            list[i] = temp;
+        }      
+    }
+    
+    /**
+     * Returns an array representing n.
+     *
+     * @param n the natural number to represent
+     * @return array with entries = elements of n
+     */
+    private int[] getNatural(int n) {
+        int[] natural = new int[n];
+        for (int i = 0; i < n; i++) {
+            natural[i] = i;
+        }
+        return natural;
+    }
+        
+}
\ No newline at end of file
diff --git a/src/java/org/apache/commons/math/random/ValueServer.java b/src/java/org/apache/commons/math/random/ValueServer.java
new file mode 100644
index 0000000..007dc7a
--- /dev/null
+++ b/src/java/org/apache/commons/math/random/ValueServer.java
@@ -0,0 +1,379 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+
+package org.apache.commons.math.random;
+import java.io.BufferedReader;
+import java.io.FileReader;
+import java.io.File;
+import java.net.URL;
+import java.io.IOException;
+import java.net.MalformedURLException;
+
+/**
+ * Generates values for use in simulation applications.
+ * <p>
+ * How values are generated is determined by the <code>mode</code>
+ * property. 
+ * <p> 
+ * Supported <code>mode</code> values are: <ul>
+ * <li> DIGEST_MODE -- uses an empirical distribution </li>
+ * <li> REPLAY_MODE -- replays data from <code>valuesFile</code></li> 
+ * <li> UNIFORM_MODE -- generates uniformly distributed random values with
+ *                      mean = <code>mu</code> </li>
+ * <li> EXPONENTIAL_MODE -- generates exponentially distributed random values
+ *                         with mean = <code>mu</code></li>
+ * <li> GAUSSIAN_MODE -- generates Gaussian distributed random values with
+ *                       mean = <code>mu</code> and 
+ *                       standard deviation = <code>sigma</code></li>
+ * <li> CONSTANT_MODE -- returns <code>mu</code> every time.</li></ul> 
+ *
+ * @version $Revision: 1.7 $ $Date: 2003/11/14 22:22:21 $
+ *
+ */
+public class ValueServer {
+    /** mode determines how values are generated */
+    private int mode = 5;
+    
+    /** URI to raw data values  */
+    private URL valuesFileURL = null;
+    
+    /** Mean for use with non-data-driven modes */
+    private double mu = 0.0;
+    
+    /** Standard deviation for use with GAUSSIAN_MODE */
+    private double sigma = 0.0;
+    
+    /** Empirical probability distribution for use with DIGEST_MODE */
+    private EmpiricalDistribution empiricalDistribution = null;
+    
+    /** file pointer for REPLAY_MODE */
+    private BufferedReader filePointer = null;
+    
+    /** RandomDataImpl to use for random data generation */
+    private RandomDataImpl randomData = new RandomDataImpl();
+    
+    // Data generation modes ======================================
+   
+    /** Use empirical distribution  */
+    public static final int DIGEST_MODE = 0;        
+    
+    /** Replay data from valuesFilePath */
+    public static final int REPLAY_MODE = 1;      
+    
+    /** Uniform random deviates with mean = mu */
+    public static final int UNIFORM_MODE = 2;    
+    
+    /** Exponential random deviates with mean = mu */
+    public static final int EXPONENTIAL_MODE = 3;  
+    
+    /** Gaussian random deviates with mean = mu, std dev = sigma */
+    public static final int GAUSSIAN_MODE = 4;  
+    
+    /** Always return mu */
+    public static final int CONSTANT_MODE = 5;   
+    
+    /** Creates new ValueServer */
+    public ValueServer() {
+    }
+
+    /** 
+     * Returns the next generated value, generated according
+     * to the mode value (see MODE constants). 
+     *
+     * @return generated value 
+     * @throws IOException in REPLAY_MODE if a file I/O error occurs
+     */
+    public double getNext() throws IOException {
+        switch (mode) {
+            case DIGEST_MODE: return getNextDigest();
+            case REPLAY_MODE: return getNextReplay();
+            case UNIFORM_MODE: return getNextUniform();
+            case EXPONENTIAL_MODE: return getNextExponential();
+            case GAUSSIAN_MODE: return getNextGaussian();
+            case CONSTANT_MODE: return mu;
+            default: throw new IllegalStateException
+                       ("Bad mode: " + mode);
+        }
+    }
+    
+    /**
+     * Fills the input array with values generated using getNext() repeatedly.
+     *
+     * @param values array to be filled
+     * @throws IOException in REPLAY_MODE if a file I/O error occurs
+     */
+    public void fill(double[] values) throws IOException {
+        for (int i = 0; i < values.length; i++) {
+            values[i] = getNext();
+        }
+    }
+    
+    /**
+     * Returns an array of length <code>length</code> with values generated 
+     * using getNext() repeatedly.
+     *
+     * @param length length of output array
+     * @return array of generated values
+     * @throws IOException in REPLAY_MODE if a file I/O error occurs
+     */
+    public double[] fill(int length) throws IOException {
+        double[] out = new double[length];
+        for (int i = 0; i < length; i++) {
+            out[i] = getNext();
+        }
+        return out;
+    }       
+    
+    /** 
+     * Computes the empirical distribution using values from the file
+     * in <code>valuesFilePath</code>, using the default number of bins.
+     * <p>
+     * <code>valuesFileURL</code> must exist and be
+     * readable by *this at runtime.
+     * <p>
+     * This method must be called before using <code>getNext()</code>
+     * with <code>mode = DISGEST_MODE</code>
+     *
+     * @throws IOException if an I/O error occurs reading the input file
+     */
+    public void computeDistribution() throws IOException {
+        empiricalDistribution = new EmpiricalDistributionImpl();
+        empiricalDistribution.load(valuesFileURL.getFile());
+    }
+    
+    /** 
+     * Computes the empirical distribution using values from the file
+     * in <code>valuesFilePath</code> and <code>binCount</code> bins.
+     * <p>
+     * <code>valuesFileURL</code> must exist and be
+     * readable by *this at runtime.
+     * <p>
+     * This method must be called before using <code>getNext()</code>
+     * with <code>mode = DISGEST_MODE</code>
+     *
+     * @param binCount the number of bins used in computing the empirical
+     * distribution
+     * @throws IOException if an error occurs reading the input file
+     */
+    public void computeDistribution(int binCount) 
+            throws IOException {
+        empiricalDistribution = new EmpiricalDistributionImpl(binCount);
+        empiricalDistribution.load(valuesFileURL.getFile());
+        mu = empiricalDistribution.getSampleStats().getMean();
+        sigma = empiricalDistribution.getSampleStats().getStandardDeviation();
+    }
+    
+    /** Getter for property mode.
+     * @return Value of property mode.
+     */
+    public int getMode() {
+        return mode;
+    }
+    
+    /** Setter for property mode.
+     * @param mode New value of property mode.
+     */
+    public void setMode(int mode) {
+        this.mode = mode;
+    }
+    
+    /** Getter for property valuesFilePath.
+     * @return Value of property valuesFilePath.
+     */
+    public String getValuesFileURL() {
+        return valuesFileURL.toString();
+    }
+    
+    /** Setter for property valuesFilePath.
+     * @param url New value of property valuesFilePath.
+     * @throws MalformedURLException if url is not well formed
+     */
+    public void setValuesFileURL(String url) throws MalformedURLException {
+        this.valuesFileURL = new URL(url);
+    }
+    
+    /** Getter for property empiricalDistribution.
+     * @return Value of property empiricalDistribution.
+     */
+    public EmpiricalDistribution getEmpiricalDistribution() {
+        return empiricalDistribution;
+    }    
+    
+    /**  
+     * Opens <code>valuesFilePath</code> to use in REPLAY_MODE.
+     *
+     * @throws IOException if an error occurs opening the file
+     */
+    public void openReplayFile() throws IOException {
+        filePointer = new BufferedReader(new FileReader
+                            (new File(valuesFileURL.getFile())));
+    }
+    
+    /** 
+     * Closes <code>valuesFilePath</code> after use in REPLAY_MODE.
+     *
+     * @throws IOException if an error occurs closing the file
+     */
+    public void closeReplayFile() throws IOException {
+        if (filePointer != null) {
+            filePointer.close();
+            filePointer = null;
+        }     
+    }
+    
+    /** Getter for property mu.
+     * @return Value of property mu.
+     */
+    public double getMu() {
+        return mu;
+    }
+    
+    /** Setter for property mu.
+     * @param mu New value of property mu.
+     */
+    public void setMu(double mu) {
+        this.mu = mu;
+    }
+    
+    /** Getter for property sigma.
+     * @return Value of property sigma.
+     */
+    public double getSigma() {
+        return sigma;
+    }
+    
+    /** Setter for property sigma.
+     * @param sigma New value of property sigma.
+     */
+    public void setSigma(double sigma) {
+        this.sigma = sigma;
+    }
+    
+    //------------- private methods ---------------------------------
+    
+    /** 
+     * Gets a random value in DIGEST_MODE.
+     * <p>
+     * <strong>Preconditions</strong>: <ul>
+     * <li>Before this method is called, <code>computeDistribution()</code>
+     * must have completed successfully; otherwise an 
+     * <code>IllegalStateException</code> will be thrown</li></ul>
+     *
+     * @return next random value from the empirical distribution digest 
+     */
+    private double getNextDigest() {
+        if ((empiricalDistribution == null) ||
+            (empiricalDistribution.getBinStats().size() == 0)) {
+            throw new IllegalStateException("Digest not initialized");
+        }
+        return empiricalDistribution.getNextValue();     
+    }
+    
+    /**
+     * Gets next sequential value from the <code>valuesFilePath</code> 
+     * opened by <code>openReplayFile()</code>.
+     * <p>
+     * Throws an IOException if <code>filePointer</code> is null or read fails.
+     * Will wrap around to BOF is EOF is encountered.
+     * <p>
+     * <strong>Preconditions</strong>: <ul>
+     * <li> openReplayfile() must have completed successfully before 
+     * invoking this method; otherwise an <code>IlleglaStateException</code>
+     * will be thrown</li></ul>
+     *
+     * @return next value from the replay file
+     * @throws IOException if there is a problem reading from the file
+     */
+    private double getNextReplay() throws IOException {
+        String str = null;
+        if (filePointer == null) {
+            throw new IllegalStateException("replay file not open");
+        }
+        if ((str = filePointer.readLine()) == null) {
+            closeReplayFile();
+            openReplayFile();
+            str = filePointer.readLine();
+        }         
+        return new Double(str).doubleValue();
+    }
+    
+    /** 
+     * Gets a uniformly distributed random value with mean = mu. 
+     *
+     * @return random uniform value
+     */
+    private double getNextUniform() {
+        return randomData.nextUniform(0, 2 * mu);
+    }
+    
+    /** 
+     * Gets an exponentially distributed random value with mean = mu. 
+     *
+     * @return random exponential value
+     */
+    private double getNextExponential() {
+        return randomData.nextExponential(mu);    
+    }
+    
+    /** 
+     * Gets a Gaussian distributed random value with mean = mu
+     * and standard deviation = sigma.
+     *
+     * @return random Gaussian value
+     */
+    private double getNextGaussian() {
+        return randomData.nextGaussian(mu, sigma);
+    }
+    
+}
diff --git a/src/java/org/apache/commons/math/random/package.html b/src/java/org/apache/commons/math/random/package.html
new file mode 100644
index 0000000..00103e1
--- /dev/null
+++ b/src/java/org/apache/commons/math/random/package.html
@@ -0,0 +1,4 @@
+<html>
+	<!-- $Revision: 1.4 $ $Date: 2003/11/14 22:22:21 $ -->
+	<body>Random number and random data generators.</body>
+</html>
diff --git a/src/java/org/apache/commons/math/special/Beta.java b/src/java/org/apache/commons/math/special/Beta.java
new file mode 100644
index 0000000..ebbc367
--- /dev/null
+++ b/src/java/org/apache/commons/math/special/Beta.java
@@ -0,0 +1,243 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.commons.math.special;
+
+import org.apache.commons.math.MathException;
+import org.apache.commons.math.util.ContinuedFraction;
+
+/**
+ * This is a utility class that provides computation methods related to the
+ * Beta family of functions.
+ * 
+ * @version $Revision: 1.12 $ $Date: 2003/11/14 22:22:17 $
+ */
+public class Beta {
+    /** Maximum allowed numerical error. */
+    private static final double DEFAULT_EPSILON = 10e-9;
+
+    /**
+     * Default constructor.  Prohibit instantiation.
+     */
+    private Beta() {
+        super();
+    }
+
+    /**
+     * Returns the regularized beta function I(x, a, b).
+     * 
+     * @param x ???
+     * @param a ???
+     * @param b ???
+     * @return the regularized beta function I(x, a, b)
+     * @throws MathException if the algorithm fails to converge.
+     */
+    public static double regularizedBeta(double x, double a, double b)
+        throws MathException
+    {
+        return regularizedBeta(x, a, b, DEFAULT_EPSILON, Integer.MAX_VALUE);
+    }
+
+    /**
+     * Returns the regularized beta function I(x, a, b).
+     * 
+     * @param x ???
+     * @param a ???
+     * @param b ???
+     * @param epsilon When the absolute value of the nth item in the
+     *                series is less than epsilon the approximation ceases
+     *                to calculate further elements in the series.
+     * @return the regularized beta function I(x, a, b)
+     * @throws MathException if the algorithm fails to converge.
+     */
+    public static double regularizedBeta(double x, double a, double b,
+        double epsilon) throws MathException
+    {
+        return regularizedBeta(x, a, b, epsilon, Integer.MAX_VALUE);
+    }
+
+    /**
+     * Returns the regularized beta function I(x, a, b).
+     * 
+     * @param x ???
+     * @param a ???
+     * @param b ???
+     * @param maxIterations Maximum number of "iterations" to complete. 
+     * @return the regularized beta function I(x, a, b)
+     * @throws MathException if the algorithm fails to converge.
+     */
+    public static double regularizedBeta(double x, double a, double b,
+        int maxIterations) throws MathException
+    {
+        return regularizedBeta(x, a, b, DEFAULT_EPSILON, maxIterations);
+    }
+    
+    /**
+     * Returns the regularized beta function I(x, a, b).
+     * 
+     * The implementation of this method is based on:
+     * <ul>
+     * <li>
+     * <a href="http://mathworld.wolfram.com/RegularizedBetaFunction.html">
+     * Regularized Beta Function</a>.</li>
+     * <li>
+     * <a href="http://functions.wolfram.com/06.21.10.0001.01">
+     * Regularized Beta Function</a>.</li>
+     * </ul>
+     * 
+     * @param x ???
+     * @param a ???
+     * @param b ???
+     * @param epsilon When the absolute value of the nth item in the
+     *                series is less than epsilon the approximation ceases
+     *                to calculate further elements in the series.
+     * @param maxIterations Maximum number of "iterations" to complete. 
+     * @return the regularized beta function I(x, a, b)
+     * @throws MathException if the algorithm fails to converge.
+     */
+    public static double regularizedBeta(double x, final double a,
+        final double b, double epsilon, int maxIterations) throws MathException
+    {
+        double ret;
+
+        if (Double.isNaN(x) || Double.isNaN(a) || Double.isNaN(b) || (x < 0) ||
+            (x > 1) || (a <= 0.0) || (b <= 0.0)) {
+            ret = Double.NaN;
+        } else {
+            ContinuedFraction fraction = new ContinuedFraction() {
+                protected double getB(int n, double x) {
+                    double ret;
+                    double m;
+                    switch (n) {
+                        case 1 :
+                            ret = 1.0;
+                            break;
+                        default :
+                            if (n % 2 == 0) { // even
+                                m = (n - 2.0) / 2.0;
+                                ret = -((a + m) * (a + b + m) * x) /
+                                    ((a + (2 * m)) * (a + (2 * m) + 1.0));
+                            } else {
+                                m = (n - 1.0) / 2.0;
+                                ret = (m * (b - m) * x) /
+                                    ((a + (2 * m) - 1) * (a + (2 * m)));
+                            }
+                            break;
+                    }
+                    return ret;
+                }
+
+                protected double getA(int n, double x) {
+                    double ret;
+                    switch (n) {
+                        case 0 :
+                            ret = 0.0;
+                            break;
+                        default :
+                            ret = 1.0;
+                            break;
+                    }
+                    return ret;
+                }
+            };
+            ret = Math.exp((a * Math.log(x)) + (b * Math.log(1.0 - x)) -
+                Math.log(a) - logBeta(a, b, epsilon, maxIterations)) *
+                fraction.evaluate(x, epsilon, maxIterations);
+        }
+
+        return ret;
+    }
+
+    /**
+     * Returns the natural logarithm of the beta function B(a, b).
+     * 
+     * @param a ???
+     * @param b ???
+     * @return log(B(a, b))
+     */
+    public static double logBeta(double a, double b) {
+        return logBeta(a, b, DEFAULT_EPSILON, Integer.MAX_VALUE);
+    }
+    
+    /**
+     * Returns the natural logarithm of the beta function B(a, b).
+     *
+     * The implementation of this method is based on:
+     * <ul>
+     * <li><a href="http://mathworld.wolfram.com/BetaFunction.html">
+     * Beta Function</a>, equation (1).</li>
+     * </ul>
+     * 
+     * @param a ???
+     * @param b ???
+     * @param epsilon When the absolute value of the nth item in the
+     *                series is less than epsilon the approximation ceases
+     *                to calculate further elements in the series.
+     * @param maxIterations Maximum number of "iterations" to complete. 
+     * @return log(B(a, b))
+     */
+    public static double logBeta(double a, double b, double epsilon,
+        int maxIterations) {
+            
+        double ret;
+
+        if (Double.isNaN(a) || Double.isNaN(b) || (a <= 0.0) || (b <= 0.0)) {
+            ret = Double.NaN;
+        } else {
+            ret = Gamma.logGamma(a) + Gamma.logGamma(b) -
+                Gamma.logGamma(a + b);
+        }
+
+        return ret;
+    }
+}
diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java
new file mode 100644
index 0000000..a2e417d
--- /dev/null
+++ b/src/java/org/apache/commons/math/special/Gamma.java
@@ -0,0 +1,212 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.commons.math.special;
+
+import org.apache.commons.math.ConvergenceException;
+import org.apache.commons.math.MathException;
+
+/**
+ * This is a utility class that provides computation methods related to the
+ * Gamma family of functions.
+ * 
+ * @version $Revision: 1.14 $ $Date: 2003/11/14 22:22:17 $
+ */
+public class Gamma {
+    /** Maximum allowed numerical error. */
+    private static final double DEFAULT_EPSILON = 10e-9;
+
+    /** Lanczos coefficients */
+    private static double[] lanczos =
+    {
+        0.99999999999999709182,
+        57.156235665862923517,
+        -59.597960355475491248,
+        14.136097974741747174,
+        -0.49191381609762019978,
+        .33994649984811888699e-4,
+        .46523628927048575665e-4,
+        -.98374475304879564677e-4,
+        .15808870322491248884e-3,
+        -.21026444172410488319e-3,
+        .21743961811521264320e-3,
+        -.16431810653676389022e-3,
+        .84418223983852743293e-4,
+        -.26190838401581408670e-4,
+        .36899182659531622704e-5,
+    };
+
+    
+    /**
+     * Default constructor.  Prohibit instantiation.
+     */
+    private Gamma() {
+        super();
+    }
+
+    /**
+     * Returns the regularized gamma function P(a, x).
+     * 
+     * @param a ???
+     * @param x ???
+     * @return the regularized gamma function P(a, x)
+     * @throws MathException if the algorithm fails to converge.
+     */
+    public static double regularizedGammaP(double a, double x)
+        throws MathException
+    {
+        return regularizedGammaP(a, x, DEFAULT_EPSILON, Integer.MAX_VALUE);
+    }
+    
+    /**
+     * Returns the regularized gamma function P(a, x).
+     * 
+     * The implementation of this method is based on:
+     * <ul>
+     * <li>
+     * <a href="http://mathworld.wolfram.com/RegularizedGammaFunction.html">
+     * Regularized Gamma Function</a>, equation (1).</li>
+     * <li>
+     * <a href="http://mathworld.wolfram.com/IncompleteGammaFunction.html">
+     * Incomplete Gamma Function</a>, equation (4).</li>
+     * <li>
+     * <a href="http://mathworld.wolfram.com/ConfluentHypergeometricFunctionoftheFirstKind.html">
+     * Confluent Hypergeometric Function of the First Kind</a>, equation (1).
+     * </li>
+     * </ul>
+     * 
+     * @param a ???
+     * @param x ???
+     * @param epsilon When the absolute value of the nth item in the
+     *                series is less than epsilon the approximation ceases
+     *                to calculate further elements in the series.
+     * @param maxIterations Maximum number of "iterations" to complete. 
+     * @return the regularized gamma function P(a, x)
+     * @throws MathException if the algorithm fails to converge.
+     */
+    public static double regularizedGammaP(double a, 
+                                           double x, 
+                                           double epsilon, 
+                                           int maxIterations) 
+        throws MathException
+    {
+        double ret;
+
+        if (Double.isNaN(a) || Double.isNaN(x) || (a <= 0.0) || (x < 0.0)) {
+            ret = Double.NaN;
+        } else if (x == 0.0) {
+            ret = 0.0;
+        } else {
+            // calculate series
+            double n = 0.0; // current element index
+            double an = 1.0 / a; // n-th element in the series
+            double sum = an; // partial sum
+            while (Math.abs(an) > epsilon && n < maxIterations) {
+                // compute next element in the series
+                n = n + 1.0;
+                an = an * (x / (a + n));
+
+                // update partial sum
+                sum = sum + an;
+            }
+            if (n >= maxIterations) {
+                throw new ConvergenceException(
+                    "maximum number of iterations reached");
+            } else {
+                ret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * sum;
+            }
+        }
+
+        return ret;
+    }
+
+    /**
+     * Returns the natural logarithm of the gamma function &#915;(x).
+     *
+     * The implementation of this method is based on:
+     * <ul>
+     * <li><a href="http://mathworld.wolfram.com/GammaFunction.html">
+     * Gamma Function</a>, equation (28).</li>
+     * <li><a href="http://mathworld.wolfram.com/LanczosApproximation.html">
+     * Lanczos Approximation</a>, equations (1) through (5).</li>
+     * <li><a href="http://my.fit.edu/~gabdo/gamma.txt">Paul Godfrey, A note on
+     * the computation of the convergent Lanczos complex Gamma approximation
+     * </a></li>
+     * </ul>
+     * 
+     * @param x ???
+     * @return log(&#915;(x))
+     */
+    public static double logGamma(double x) {
+        double ret;
+
+        if (Double.isNaN(x) || (x <= 0.0)) {
+            ret = Double.NaN;
+        } else {
+            double g = 607.0 / 128.0;
+
+            double sum = 0.0;
+            for (int i = 1; i < lanczos.length; ++i) {
+                sum = sum + (lanczos[i] / (x + i));
+            }
+            sum = sum + lanczos[0];
+
+            double tmp = x + g + .5;
+            ret = ((x + .5) * Math.log(tmp)) - tmp +
+                (.5 * Math.log(2.0 * Math.PI)) + Math.log(sum) - Math.log(x);
+        }
+
+        return ret;
+    }
+}
+
diff --git a/src/java/org/apache/commons/math/special/package.html b/src/java/org/apache/commons/math/special/package.html
new file mode 100644
index 0000000..c82f010
--- /dev/null
+++ b/src/java/org/apache/commons/math/special/package.html
@@ -0,0 +1,4 @@
+<html>
+	<!-- $Revision: 1.4 $ $Date: 2003/11/14 22:22:17 $ -->
+	<body>Implementations of special functions such as Beta and Gamma.</body>
+</html>
diff --git a/src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java b/src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java
new file mode 100644
index 0000000..b1b66d9
--- /dev/null
+++ b/src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java
@@ -0,0 +1,121 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.commons.math.stat;
+
+import java.util.Arrays;
+
+import org.apache.commons.math.stat.univariate.rank.Percentile;
+
+/**
+ * Provides univariate measures for an array of doubles. 
+ * @version $Revision: 1.15 $ $Date: 2003/11/14 22:22:18 $
+ */
+public abstract class AbstractStoreUnivariate
+    extends AbstractUnivariate
+    implements StoreUnivariate {
+
+    /** Percentile */
+    protected Percentile percentile = new Percentile(50);
+        
+    /**
+     * Create an AbstractStoreUnivariate
+     */
+    public AbstractStoreUnivariate() {
+        super();
+    }
+
+    /**
+     * Create an AbstractStoreUnivariate with a specific Window
+     * @param window WindowSIze for stat calculation
+     */
+    public AbstractStoreUnivariate(int window) {
+        super(window);
+    }
+
+    /**
+     * @see org.apache.commons.math.stat.StoreUnivariate#getPercentile(double)
+     */
+    public double getPercentile(double p) {
+        percentile.setPercentile(p);
+        return apply(percentile);
+    }
+    
+    /**
+     * @see org.apache.commons.math.stat.StoreUnivariate#getSortedValues()
+     */
+    public double[] getSortedValues() {
+        double[] sort = getValues();
+        Arrays.sort(sort);
+        return sort;
+    }
+    
+    /**
+     * @see org.apache.commons.math.stat.Univariate#addValue(double)
+     */
+    public abstract void addValue(double value);
+
+    /**
+     * @see org.apache.commons.math.stat.StoreUnivariate#getValues()
+     */
+    public abstract double[] getValues();
+
+
+    /**
+     * @see org.apache.commons.math.stat.StoreUnivariate#getElement(int)
+     */
+    public abstract double getElement(int index);
+
+
+
+}
diff --git a/src/java/org/apache/commons/math/stat/AbstractUnivariate.java b/src/java/org/apache/commons/math/stat/AbstractUnivariate.java
new file mode 100644
index 0000000..2840ffd
--- /dev/null
+++ b/src/java/org/apache/commons/math/stat/AbstractUnivariate.java
@@ -0,0 +1,335 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.commons.math.stat;
+
+import org.apache.commons.math.stat.univariate.UnivariateStatistic;
+import org.apache.commons.math.stat.univariate.moment.FourthMoment;
+import org.apache.commons.math.stat.univariate.moment.GeometricMean;
+import org.apache.commons.math.stat.univariate.moment.Kurtosis;
+import org.apache.commons.math.stat.univariate.moment.Mean;
+import org.apache.commons.math.stat.univariate.moment.Skewness;
+import org.apache.commons.math.stat.univariate.moment.Variance;
+import org.apache.commons.math.stat.univariate.rank.Max;
+import org.apache.commons.math.stat.univariate.rank.Min;
+import org.apache.commons.math.stat.univariate.summary.Sum;
+import org.apache.commons.math.stat.univariate.summary.SumOfLogs;
+import org.apache.commons.math.stat.univariate.summary.SumOfSquares;
+
+/**
+ * Provides univariate measures for an array of doubles.
+ * @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:18 $  
+ */
+public abstract class AbstractUnivariate implements Univariate {
+
+    /** hold the window size **/
+    protected int windowSize = Univariate.INFINITE_WINDOW;
+
+    /** count of values that have been added */
+    protected int n = 0;
+
+    /** FourthMoment is used in calculating mean, variance,skew and kurtosis */
+    protected FourthMoment moment = null;
+    
+    /** sum of values that have been added */
+    protected Sum sum = null;
+
+    /** sum of the square of each value that has been added */
+    protected SumOfSquares sumsq = null;
+
+    /** min of values that have been added */
+    protected Min min = null;
+
+    /** max of values that have been added */
+    protected Max max = null;
+
+    /** sumLog of values that have been added */
+    protected SumOfLogs sumLog = null;
+
+    /** geoMean of values that have been added */
+    protected GeometricMean geoMean = null;
+
+    /** mean of values that have been added */
+    protected Mean mean = null;
+
+    /** variance of values that have been added */
+    protected Variance variance = null;
+
+    /** skewness of values that have been added */
+    protected Skewness skewness = null;
+
+    /** kurtosis of values that have been added */
+    protected Kurtosis kurtosis = null;
+
+    /**
+     * Construct an AbstractUnivariate
+     */
+    public AbstractUnivariate() {
+        super();
+        
+        sum = new Sum();
+        sumsq = new SumOfSquares();
+        min = new Min();
+        max = new Max();
+        sumLog = new SumOfLogs();
+        geoMean = new GeometricMean();
+
+        moment = new FourthMoment();
+        mean = new Mean(moment);
+        variance = new Variance(moment);
+        skewness = new Skewness(moment);
+        kurtosis = new Kurtosis(moment);
+    }
+
+    /**
+     * Construct an AbstractUnivariate with a window
+     * @param window The Window Size
+     */
+    public AbstractUnivariate(int window) {
+        this();
+        setWindowSize(window);
+    }
+
+    /**
+     * Apply the given statistic to this univariate collection.
+     * @param stat the statistic to apply
+     * @return the computed value of the statistic.
+     */
+    public abstract double apply(UnivariateStatistic stat);
+    
+
+    /**
+     * If windowSize is set to Infinite, 
+     * statistics are calculated using the following 
+     * <a href="http://www.spss.com/tech/stat/Algorithms/11.5/descriptives.pdf">
+     * recursive strategy
+     * </a>.
+     * @see org.apache.commons.math.stat.Univariate#addValue(double)
+     */
+    public abstract void addValue(double value);
+
+    /**
+     * @see org.apache.commons.math.stat.Univariate#getN()
+     */
+    public int getN() {
+        return n;
+    }
+
+    /**
+     * @see org.apache.commons.math.stat.Univariate#getSum()
+     */
+    public double getSum() {
+        return apply(sum);
+    }
+
+    /**
+     * @see org.apache.commons.math.stat.Univariate#getSumsq()
+     */
+    public double getSumsq() {
+        return apply(sumsq);
+    }
+
+    /**
+     * @see org.apache.commons.math.stat.Univariate#getMean()
+     */
+    public double getMean() {
+        return apply(mean);
+    }
+
+    /**
+     * Returns the standard deviation for this collection of values
+     * @see org.apache.commons.math.stat.Univariate#getStandardDeviation()
+     */
+    public double getStandardDeviation() {
+        double stdDev = Double.NaN;
+        if (getN() > 0) {
+            if (getN() > 1) {
+                stdDev = Math.sqrt(getVariance());
+            } else {
+                stdDev = 0.0;
+            }
+        }
+        return (stdDev);
+    }
+
+    /**
+     * Returns the variance of the values that have been added via West's
+     * algorithm as described by
+     * <a href="http://doi.acm.org/10.1145/359146.359152">Chan, T. F. and
+     * J. G. Lewis 1979, <i>Communications of the ACM</i>,
+     * vol. 22 no. 9, pp. 526-531.</a>.
+     *
+     * @return The variance of a set of values.  
+     *         Double.NaN is returned for an empty 
+     *         set of values and 0.0 is returned for 
+     *         a &lt;= 1 value set.
+     */
+    public double getVariance() {
+        return apply(variance);
+    }
+
+    /**
+     * Returns the skewness of the values that have been added as described by
+     * <a href="http://mathworld.wolfram.com/k-Statistic.html">
+     * Equation (6) for k-Statistics</a>.
+     * @return The skew of a set of values.  Double.NaN is returned for
+     *         an empty set of values and 0.0 is returned for a 
+     *         &lt;= 2 value set.
+     */
+    public double getSkewness() {
+        return apply(skewness);
+    }
+
+    /**
+     * Returns the kurtosis of the values that have been added as described by
+     * <a href="http://mathworld.wolfram.com/k-Statistic.html">
+     * Equation (7) for k-Statistics</a>.
+     *
+     * @return The kurtosis of a set of values.  Double.NaN is returned for
+     *         an empty set of values and 0.0 is returned for a &lt;= 3 
+     *         value set.
+     */
+    public double getKurtosis() {
+        return apply(kurtosis);
+    }
+
+    /**
+     * @see org.apache.commons.math.stat.StoreUnivariate#getKurtosisClass()
+     */
+    public int getKurtosisClass() {
+        int kClass = Univariate.MESOKURTIC;
+
+        double kurtosis = getKurtosis();
+        if (kurtosis > 0) {
+            kClass = Univariate.LEPTOKURTIC;
+        } else if (kurtosis < 0) {
+            kClass = Univariate.PLATYKURTIC;
+        }
+        return (kClass);
+    }
+
+    /**
+     * @see org.apache.commons.math.stat.Univariate#getMax()
+     */
+    public double getMax() {
+        return apply(max);
+    }
+
+    /**
+     * @see org.apache.commons.math.stat.Univariate#getMin()
+     */
+    public double getMin() {
+        return apply(min);
+    }
+
+    /**
+    * @see org.apache.commons.math.stat.Univariate#getGeometricMean()
+    */
+    public double getGeometricMean() {
+        return apply(geoMean);
+    }
+    
+    /**
+     * Generates a text report displaying
+     * univariate statistics from values that
+     * have been added.
+     * @return String with line feeds displaying statistics
+     */
+    public String toString() {
+        StringBuffer outBuffer = new StringBuffer();
+        outBuffer.append("UnivariateImpl:\n");
+        outBuffer.append("n: " + n + "\n");
+        outBuffer.append("min: " + min + "\n");
+        outBuffer.append("max: " + max + "\n");
+        outBuffer.append("mean: " + getMean() + "\n");
+        outBuffer.append("std dev: " + getStandardDeviation() + "\n");
+        outBuffer.append("skewness: " + getSkewness() + "\n");
+        outBuffer.append("kurtosis: " + getKurtosis() + "\n");
+        return outBuffer.toString();
+    }
+
+    /**
+     * @see org.apache.commons.math.stat.Univariate#clear()
+     */
+    public void clear() {
+        this.n = 0;
+        min.clear();
+        max.clear();
+        sum.clear();
+        sumLog.clear();
+        sumsq.clear();
+        geoMean.clear();
+        
+        moment.clear();
+        mean.clear();
+        variance.clear();
+        skewness.clear();
+        kurtosis.clear();
+    }
+
+    /**
+     * @see org.apache.commons.math.stat.Univariate#getWindowSize()
+     */
+    public int getWindowSize() {
+        return windowSize;
+    }
+
+    /**
+     * @see org.apache.commons.math.stat.Univariate#setWindowSize(int)
+     */
+    public void setWindowSize(int windowSize) {
+        clear();
+        this.windowSize = windowSize;
+    }
+
+}
\ No newline at end of file
diff --git a/src/java/org/apache/commons/math/stat/Applyable.java b/src/java/org/apache/commons/math/stat/Applyable.java
new file mode 100644
index 0000000..66b8354
--- /dev/null
+++ b/src/java/org/apache/commons/math/stat/Applyable.java
@@ -0,0 +1,75 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.commons.math.stat;
+
+import org.apache.commons.math.stat.univariate.UnivariateStatistic;
+
+/**
+ * Applyable.java
+ * 
+ * TODO: add javadocs
+ * 
+ * @version $Revision: 1.6 $ $Date: 2003/11/14 22:22:18 $
+ */
+public interface Applyable {
+    
+    /**
+     * Applies a UnivariateStatistic object against this object 
+     * and returns the result.
+     * @param stat The stat to apply.
+     * @return The result value of the application.
+     */
+    double apply(UnivariateStatistic stat);
+    
+}
diff --git a/src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java b/src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java
new file mode 100644
index 0000000..e1c43ab
--- /dev/null
+++ b/src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java
@@ -0,0 +1,131 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.commons.math.stat;
+
+import java.util.List;
+
+import org.apache.commons.math.util.BeanTransformer;
+
+/**
+ * This implementation of StoreUnivariate uses commons-beanutils to gather
+ * univariate statistics for a List of Java Beans by property.  This 
+ * implementation uses beanutils' PropertyUtils to get a simple, nested,
+ * indexed, mapped, or combined property from an element of a List.
+ * @version $Revision: 1.11 $ $Date: 2003/11/14 22:22:18 $
+ */
+public class BeanListUnivariateImpl extends ListUnivariateImpl {
+
+    /**
+     * propertyName of the property to get from the bean
+     */
+    private String propertyName;
+
+    /**
+     * Construct a BeanListUnivariate with specified
+     * backing list
+     * @param list Backing List
+     */
+    public BeanListUnivariateImpl(List list) {
+        this(list, null);
+    }
+
+    /**
+     * Construct a BeanListUnivariate with specified
+     * backing list and propertyName
+     * @param list Backing List
+     * @param propertyName Bean propertyName
+     */
+    public BeanListUnivariateImpl(List list, String propertyName) {
+        super(list);
+        setPropertyName(propertyName);
+    }
+
+    /**
+     * @return propertyName
+     */
+    public String getPropertyName() {
+        return propertyName;
+    }
+
+    /**
+     * @param propertyName Name of Property
+     */
+    public void setPropertyName(String propertyName) {
+        this.propertyName = propertyName;
+        setTransformer(new BeanTransformer(propertyName));
+    }
+
+    /**
+      * @see org.apache.commons.math.stat.Univariate#addValue(double)
+      */
+    public void addValue(double v) {
+        String msg =
+            "The BeanListUnivariateImpl does not accept values " +
+            "through the addValue method.  Because elements of this list " +
+            "are JavaBeans, one must be sure to set the 'propertyName' " +
+            "property and add new Beans to the underlying list via the " +
+            "addBean(Object bean) method";
+        throw new UnsupportedOperationException(msg);
+    }
+
+    /**
+     * Adds a bean to this list. 
+     *
+     * @param bean Bean to add to the list
+     */
+    public void addObject(Object bean) {
+        list.add(bean);
+    }
+
+}
diff --git a/src/java/org/apache/commons/math/stat/BivariateRegression.java b/src/java/org/apache/commons/math/stat/BivariateRegression.java
new file mode 100644
index 0000000..1de1b3d
--- /dev/null
+++ b/src/java/org/apache/commons/math/stat/BivariateRegression.java
@@ -0,0 +1,546 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+
+package org.apache.commons.math.stat;
+import org.apache.commons.math.stat.distribution.DistributionFactory;
+import org.apache.commons.math.stat.distribution.TDistribution;
+
+/**
+ * Estimates an ordinary least squares regression model
+ * with one independent variable.
+ * <p>
+ * <code> y = intercept + slope * x  </code>
+ * <p>
+ * Standard errors for <code>intercept</code> and <code>slope</code> are 
+ * available as well as ANOVA, r-square and Pearson's r statistics.
+ * <p>
+ * Observations (x,y pairs) can be added to the model one at a time or they 
+ * can be provided in a 2-dimensional array.  The observations are not stored
+ * in memory, so there is no limit to the number of observations that can be
+ * added to the model. 
+ * <p>
+ * <strong>Usage Notes</strong>: <ul>
+ * <li> When there are fewer than two observations in the model, or when
+ * there is no variation in the x values (i.e. all x values are the same) 
+ * all statistics return <code>NaN</code>. At least two observations with
+ * different x coordinates are requred to estimate a bivariate regression 
+ * model.
+ * </li>
+ * <li> getters for the statistics always compute values based on the current
+ * set of observations -- i.e., you can get statistics, then add more data
+ * and get updated statistics without using a new instance.  There is no 
+ * "compute" method that updates all statistics.  Each of the getters performs
+ * the necessary computations to return the requested statistic.</li>
+ * </ul>
+ *
+ * @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:18 $
+ */
+public class BivariateRegression {
+    
+    /** sum of x values */
+    private double sumX = 0d;
+    
+    /** total variation in x (sum of squared deviations from xbar) */
+    private double sumXX = 0d;
+    
+    /** sum of y values */
+    private double sumY = 0d;
+    
+    /** total variation in y (sum of squared deviations from ybar) */
+    private double sumYY = 0d;
+    
+    /** sum of products */
+    private double sumXY = 0d;
+    
+    /** number of observations */
+    private long n = 0;
+    
+    /** mean of accumulated x values, used in updating formulas */
+    private double xbar = 0;
+    
+    /** mean of accumulated y values, used in updating formulas */
+    private double ybar = 0;
+    
+    
+    // ---------------------Public methods--------------------------------------
+    
+    /**
+     * Adds the observation (x,y) to the regression data set.
+     * <p>
+     * Uses updating formulas for means and sums of squares defined in 
+     * "Algorithms for Computing the Sample Variance: Analysis and
+     * Recommendations", Chan, T.F., Golub, G.H., and LeVeque, R.J. 
+     * 1983, American Statistician, vol. 37, pp. 242-247, referenced in
+     * Weisberg, S. "Applied Linear Regression". 2nd Ed. 1985
+     *
+     *
+     * @param x independent variable value
+     * @param y dependent variable value
+     */
+    public void addData(double x, double y) {
+        if (n == 0) {
+            xbar = x;
+            ybar = y;
+        } else {
+            sumXX += ((double) n / (double) (n + 1)) * (x - xbar) * (x - xbar);
+            sumYY += ((double) n / (double) (n + 1)) * (y - ybar) * (y - ybar);
+            sumXY += ((double) n / (double) (n + 1)) * (x - xbar) * (y - ybar);
+            xbar += (1d / (double) (n + 1)) * (x - xbar);
+            ybar += (1d / (double) (n + 1)) * (y - ybar);
+        }
+        sumX += x;
+        sumY += y;
+        n++;
+    } 
+    
+    /**
+     * Adds the observations represented by the elements in 
+     * <code>data</code>.
+     * <p>
+     * <code>(data[0][0],data[0][1])</code> will be the first observation, then
+     * <code>(data[1][0],data[1][1])</code>, etc. <p> 
+     * 
+     * This method does not replace data that has already been added.  
+     * To replace all data, use <code>clear()</code> before adding the new 
+     * data.
+     * 
+     * @param data array of observations to be added
+     */
+    public void addData(double[][] data) {
+       for (int i = 0; i < data.length; i++) {
+            addData(data[i][0], data[i][1]);
+       }
+    }
+    
+    /**
+     * Clears all data from the model.
+     */
+    public void clear() {
+        sumX = 0d;
+        sumXX = 0d;
+        sumY = 0d;
+        sumYY = 0d;
+        sumXY = 0d;
+        n = 0;
+    }
+          
+    /**
+     * Returns the number of observations that have been added to the model.
+     *
+     * @return n number of observations that have been added.
+     */
+    public long getN() {
+        return n;
+    }
+    
+    /**
+     * Returns the "predicted" <code>y</code> value associated with the 
+     * supplied <code>x</code> value.
+     * <p>
+     * <code> predict(x) = intercept + slope * x </code>
+     * <p>
+     * <strong>Preconditions</strong>: <ul>
+     * <li>At least two observations (with at least two different x values)
+     * must have been added before invoking this method. If this method is 
+     * invoked before a model can be estimated, <code>Double,NaN</code> is
+     * returned.
+     * </li></ul>
+     *
+     * @param x input <code>x</code> value
+     * @return predicted <code>y</code> value
+     */
+    public double predict(double x) {
+        double b1 = getSlope();
+        return getIntercept(b1) + b1 * x;
+    }
+    
+    /**
+     * Returns the intercept of the estimated regression line.
+     * <p>
+     * The least squares estimate of the intercept is computed using the 
+     * <a href="http://www.xycoon.com/estimation4.htm">normal equations</a>.
+     * The intercept is sometimes denoted b0. 
+     * <p>
+     * <strong>Preconditions</strong>: <ul>
+     * <li>At least two observations (with at least two different x values)
+     * must have been added before invoking this method. If this method is 
+     * invoked before a model can be estimated, <code>Double,NaN</code> is
+     * returned.
+     * </li></ul>
+     *
+     * @return the intercept of the regression line
+     */
+     public double getIntercept() {
+         return getIntercept(getSlope());
+     }
+     
+     /**
+     * Returns the slope of the estimated regression line.  
+     * <p>
+     * The least squares estimate of the slope is computed using the 
+     * <a href="http://www.xycoon.com/estimation4.htm">normal equations</a>.
+     * The slope is sometimes denoted b1. 
+     * <p>
+     * <strong>Preconditions</strong>: <ul>
+     * <li>At least two observations (with at least two different x values)
+     * must have been added before invoking this method. If this method is 
+     * invoked before a model can be estimated, <code>Double.NaN</code> is
+     * returned.
+     * </li></ul>
+     *
+     * @return the slope of the regression line
+     */
+     public double getSlope() {
+         if (n < 2) {
+             return Double.NaN;  //not enough data 
+         }
+         if (Math.abs(sumXX) < 10 * Double.MIN_VALUE) { 
+             return Double.NaN; //not enough variation in x
+         }
+         return sumXY / sumXX;
+     }
+     
+     /**
+      * Returns the <a href="http://www.xycoon.com/SumOfSquares.htm">
+      * sum of squared errors</a> (SSE) associated with the regression 
+      * model.
+      * <p>
+      * <strong>Preconditions</strong>: <ul>
+      * <li>At least two observations (with at least two different x values)
+      * must have been added before invoking this method. If this method is 
+      * invoked before a model can be estimated, <code>Double,NaN</code> is
+      * returned.
+      * </li></ul>
+      *
+      * @return sum of squared errors associated with the regression model
+      */
+     public double getSumSquaredErrors() {
+         return getSumSquaredErrors(getSlope());
+     }
+     
+     /**
+      * Returns the sum of squared deviations of the y values about their mean.
+      * <p>
+      * This is defined as SSTO 
+      * <a href="http://www.xycoon.com/SumOfSquares.htm">here</a>.
+      * <p>
+      * If <code>n < 2</code>, this returns <code>Double.NaN</code>.
+      *
+      * @return sum of squared deviations of y values
+      */
+     public double getTotalSumSquares() {
+         if (n < 2) {
+             return Double.NaN;
+         }
+         return sumYY;
+     }
+         
+     /**
+      * Returns the sum of squared deviations of the predicted y values about 
+      * their mean (which equals the mean of y).
+      * <p>
+      * This is usually abbreviated SSR or SSM.  It is defined as SSM 
+      * <a href="http://www.xycoon.com/SumOfSquares.htm">here</a>
+      * <p>
+      * <strong>Preconditions</strong>: <ul>
+      * <li>At least two observations (with at least two different x values)
+      * must have been added before invoking this method. If this method is 
+      * invoked before a model can be estimated, <code>Double,NaN</code> is
+      * returned.
+      * </li></ul>
+      *
+      * @return sum of squared deviations of predicted y values
+      */
+     public double getRegressionSumSquares() {
+         return getRegressionSumSquares(getSlope());
+     }
+     
+     /**
+      * Returns the sum of squared errors divided by the degrees of freedom,
+      * usually abbreviated MSE. 
+      * <p>
+      * If there are fewer than <strong>three</strong> data pairs in the model,
+      * or if there is no variation in <code>x</code>, this returns 
+      * <code>Double.NaN</code>.
+      *
+      * @return sum of squared deviations of y values
+      */
+     public double getMeanSquareError() {
+         if (n < 3) {
+             return Double.NaN;
+         }
+         return getSumSquaredErrors() / (double) (n - 2);
+     }
+     
+     /**
+      * Returns <a href="http://www.stt.msu.edu/~xiaoyimi/STT200/Lecture5.pdf">
+      * Pearson's product moment correlation coefficient</a>,
+      * usually denoted r. 
+      * <p>
+      * <strong>Preconditions</strong>: <ul>
+      * <li>At least two observations (with at least two different x values)
+      * must have been added before invoking this method. If this method is 
+      * invoked before a model can be estimated, <code>Double,NaN</code> is
+      * returned.
+      * </li></ul>
+      *
+      * @return Pearson's r
+      */
+     public double getR() {
+         double b1 = getSlope();
+         double result = Math.sqrt(getRSquare(b1));
+         if (b1 < 0) {
+             result = -result;
+         }
+         return result;
+     }
+             
+     /** 
+      * Returns the <a href="http://www.xycoon.com/coefficient1.htm"> 
+      * coefficient of determination</a>,
+      * usually denoted r-square. 
+      * <p>
+      * <strong>Preconditions</strong>: <ul>
+      * <li>At least two observations (with at least two different x values)
+      * must have been added before invoking this method. If this method is 
+      * invoked before a model can be estimated, <code>Double,NaN</code> is
+      * returned.
+      * </li></ul>
+      *
+      * @return r-square
+      */
+     public double getRSquare() {
+         return getRSquare(getSlope());
+     }
+     
+         
+     /**
+      * Returns the <a href="http://www.xycoon.com/standarderrorb0.htm">
+      * standard error of the intercept estimate</a>, 
+      * usually denoted s(b0). 
+      * <p>
+      * If there are fewer that <strong>three</strong> observations in the 
+      * model, or if there is no variation in x, this returns 
+      * <code>Double.NaN</code>.
+      *
+      * @return standard error associated with intercept estimate
+      */
+     public double getInterceptStdErr() {
+         return Math.sqrt(getMeanSquareError() * ((1d / (double) n) +
+            (xbar * xbar) / sumXX));
+     }
+             
+     /**
+      * Returns the <a href="http://www.xycoon.com/standerrorb(1).htm">standard
+      * error of the slope estimate</a>,
+      * usually denoted s(b1). 
+      * <p>
+      * If there are fewer that <strong>three</strong> data pairs in the model,
+      * or if there is no variation in x, this returns <code>Double.NaN</code>.
+      *
+      * @return standard error associated with slope estimate
+      */
+     public double getSlopeStdErr() {
+         return Math.sqrt(getMeanSquareError() / sumXX);
+     }
+     
+     /**
+      * Returns the half-width of a 95% confidence interval for the slope
+      * estimate.
+      * <p>
+      * The 95% confidence interval is 
+      * <p>
+      * <code>(getSlope() - getSlopeConfidenceInterval(), 
+      * getSlope() + getSlopeConfidenceInterval())</code>
+      * <p>
+      * If there are fewer that <strong>three</strong> observations in the 
+      * model, or if there is no variation in x, this returns 
+      * <code>Double.NaN</code>.
+      * <p>
+      * <strong>Usage Note</strong>:<br>
+      * The validity of this statistic depends on the assumption that the 
+      * observations included in the model are drawn from a
+      * <a href="http://mathworld.wolfram.com/
+      * BivariateNormalDistribution.html">Bivariate Normal Distribution</a>.
+      *
+      * @return half-width of 95% confidence interval for the slope estimate
+      */
+     public double getSlopeConfidenceInterval() {   
+        return getSlopeConfidenceInterval(0.05d); 
+     }
+     
+     /**
+      * Returns the half-width of a (100-100*alpha)% confidence interval for 
+      * the slope estimate.
+      * <p>
+      * The (100-100*alpha)% confidence interval is 
+      * <p>
+      * <code>(getSlope() - getSlopeConfidenceInterval(), 
+      * getSlope() + getSlopeConfidenceInterval())</code>
+      * <p>
+      * To request, for example, a 99% confidence interval, use 
+      * <code>alpha = .01</code>
+      * <p>
+      * <strong>Usage Note</strong>:<br>
+      * The validity of this statistic depends on the assumption that the 
+      * observations included in the model are drawn from a
+      * <a href="http://mathworld.wolfram.com/
+      * BivariateNormalDistribution.html">Bivariate Normal Distribution</a>.
+      * <p>
+      * <strong> Preconditions:</strong><ul>
+      * <li>If there are fewer that <strong>three</strong> observations in the 
+      * model, or if there is no variation in x, this returns 
+      * <code>Double.NaN</code>. 
+      * </li>
+      * <li><code>(0 < alpha < 1)</code>; otherwise an 
+      * <code>IllegalArgumentException</code> is thrown.
+      * </li></ul>    
+      *
+      * @param alpha the desired significance level 
+      * @return half-width of 95% confidence interval for the slope estimate
+      */
+     public double getSlopeConfidenceInterval(double alpha) { 
+         if (alpha >= 1 || alpha <= 0) {
+             throw new IllegalArgumentException();
+         }
+         return getSlopeStdErr() * 
+            getTDistribution().inverseCummulativeProbability(1d - alpha / 2d); 
+     }
+     
+     /**
+      * Returns the significance level of the slope (equiv) correlation. 
+      * <p>
+      * Specifically, the returned value is the smallest <code>alpha</code>
+      * such that the slope confidence interval with significance level
+      * equal to <code>alpha</code> does not include <code>0</code>.
+      * On regression output, this is often denoted <code>Prob(|t| > 0)</code>
+      * <p>
+      * <strong>Usage Note</strong>:<br>
+      * The validity of this statistic depends on the assumption that the 
+      * observations included in the model are drawn from a
+      * <a href="http://mathworld.wolfram.com/
+      * BivariateNormalDistribution.html">Bivariate Normal Distribution</a>.
+      * <p>
+      * If there are fewer that <strong>three</strong> observations in the 
+      * model, or if there is no variation in x, this returns 
+      * <code>Double.NaN</code>.
+      *
+      * @return significance level for slope/correlation
+      */
+     public double getSignificance() {
+         return (1d - getTDistribution().cummulativeProbability(
+                Math.abs(getSlope()) / getSlopeStdErr()));
+     }
+     
+     // ---------------------Private methods-----------------------------------
+     
+     /**
+     * Returns the intercept of the estimated regression line, given the slope.
+     * <p>
+     * Will return <code>NaN</code> if slope is <code>NaN</code>.
+     *
+     * @param slope current slope
+     * @return the intercept of the regression line
+     */
+     private double getIntercept(double slope) {
+         return (sumY - slope * sumX) / ((double) n);
+     }
+       
+     /**
+      * Returns the sum of squared errors associated with the regression 
+      * model, using the slope of the regression line. 
+      * <p> 
+      * Returns NaN if the slope is NaN.
+      * 
+      * @param b1 current slope
+      * @return sum of squared errors associated with the regression model
+      */
+     private double getSumSquaredErrors(double b1) {
+         return sumYY - sumXY * sumXY / sumXX;
+     } 
+     
+     /** 
+      * Computes r-square from the slope.
+      * <p>
+      * will return NaN if slope is Nan.
+      *
+      * @param b1 current slope
+      * @return r-square
+      */
+     private double getRSquare(double b1) {
+         double ssto = getTotalSumSquares();
+         return (ssto - getSumSquaredErrors(b1)) / ssto;
+     }
+     
+     /**
+      * Computes SSR from b1.
+      * 
+      * @param slope regression slope estimate
+      * @return sum of squared deviations of predicted y values
+      */
+     private double getRegressionSumSquares(double slope) {
+         return slope * slope * sumXX;
+     }
+     
+     /**
+      * Uses distribution framework to get a t distribution instance 
+      * with df = n - 2
+      *
+      * @return t distribution with df = n - 2
+      */
+     private TDistribution getTDistribution() {
+         return DistributionFactory.newInstance().createTDistribution(n - 2);
+     }
+}
+
diff --git a/src/java/org/apache/commons/math/stat/Frequency.java b/src/java/org/apache/commons/math/stat/Frequency.java
new file mode 100644
index 0000000..e8395c7
--- /dev/null
+++ b/src/java/org/apache/commons/math/stat/Frequency.java
@@ -0,0 +1,179 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.commons.math.stat;
+
+import java.util.Iterator;
+
+import org.apache.commons.collections.Bag;
+import org.apache.commons.collections.HashBag;
+
+/** 
+ * Maintains a frequency distribution. <br>
+ * Accepts int, long or string values, converting
+ * all to Strings and maintaining frequency counts.
+ * 
+ * @version $Revision: 1.9 $ $Date: 2003/11/14 22:22:18 $
+ */
+public class Frequency {
+    /** name for this frequency distribution. */
+    private String name;
+
+    /** underlying collection */
+    private Bag freqTable = new HashBag();
+
+    /**
+     * Default constructor.
+     */
+    public Frequency() {
+        this(null);
+    }
+
+    /**
+     * Construct a frequency distribution with the given name.
+     * @param name the name for the new distribution.
+     */
+    public Frequency(String name) {
+        super();
+        setName(name);
+    }
+
+    /**
+     * Return a string representation of describing this frequency
+     * distribution.
+     * @return a string representation.
+     */
+    public String toString() {
+        StringBuffer outBuffer = new StringBuffer();
+        outBuffer.append("Value \t Frequency \n");
+        Iterator iter = freqTable.uniqueSet().iterator();
+        while (iter.hasNext()) {
+            Object value = iter.next();
+            outBuffer.append(value);
+            outBuffer.append('\t');
+            outBuffer.append(freqTable.getCount(value));
+            outBuffer.append('\n');
+        }
+        return outBuffer.toString();
+    }
+
+    /**
+     * Adds 1 to the frequency count for v
+     * @param v the value to add.
+     */
+    public void addValue(String v) {
+        freqTable.add(v);
+    }
+
+    /**
+     * Adds 1 to the frequency count for v
+     * @param v the value to add.
+     */
+    public void addValue(int v) {
+        addValue((new Integer(v)).toString());
+    }
+
+    /**
+     * Adds 1 to the frequency count for v.
+     * @param v the value to add.
+     */
+    public void addValue(long v) {
+        addValue((new Long(v)).toString());
+    }
+
+    /**
+     * Returns the number of values = v
+     * @param v the value to lookup.
+     * @return the absolute frequency of v.
+     */
+    public long getCount(String v) {
+        return freqTable.getCount(v);
+    }
+
+    /**
+     * Returns the sum of all frequencies
+     * @return the aggregate frequency.
+     */
+    public long getSumFreq() {
+        return freqTable.size();
+    }
+
+    /**
+     * Returns the percentage of values = v.
+     * @param v the value to lookup.
+     * @return the relative frequency of v.
+     */
+    public double getPct(String v) {
+        return (double) getCount(v) / (double) getSumFreq();        
+    }
+
+    /** Clears the frequency table */
+    public void clear() {
+        freqTable.clear();
+    }
+
+    /** Getter for property name.
+     * @return Value of property name.
+     */
+    public String getName() {
+        return name;
+    }
+
+    /** Setter for property name.
+     * @param name New value of property name.
+     */
+    public void setName(java.lang.String name) {
+        this.name = name;
+    }
+
+}
diff --git a/src/java/org/apache/commons/math/stat/ListUnivariateImpl.java b/src/java/org/apache/commons/math/stat/ListUnivariateImpl.java
new file mode 100644
index 0000000..040c116
--- /dev/null
+++ b/src/java/org/apache/commons/math/stat/ListUnivariateImpl.java
@@ -0,0 +1,219 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.commons.math.stat;
+
+import java.util.List;
+
+import org.apache.commons.math.stat.univariate.UnivariateStatistic;
+import org.apache.commons.math.util.DefaultTransformer;
+import org.apache.commons.math.util.NumberTransformer;
+
+/**
+ * @version $Revision: 1.11 $ $Date: 2003/11/14 22:22:18 $
+ */
+public class ListUnivariateImpl
+    extends AbstractStoreUnivariate
+    implements StoreUnivariate {
+
+    /**
+     * Holds a reference to a list - GENERICs are going to make
+     * out lives easier here as we could only accept List<Number>
+     */
+    protected List list;
+
+    /** Number Transformer maps Objects to Number for us. */
+    protected NumberTransformer runner;
+
+    /**
+     * Construct a ListUnivariate with a specific List.
+     * @param list The list that will back this Univariate
+     */
+    public ListUnivariateImpl(List list) {
+        this(list, new DefaultTransformer());
+    }
+    
+    /**
+     * Construct a ListUnivariate with a specific List.
+     * @param list The list that will back this Univariate
+     * @param runner the number runner used to convert the list items.
+     */
+    public ListUnivariateImpl(List list, NumberTransformer runner) {
+        super();
+        this.list = list;
+        this.runner = runner;
+    }
+
+    /**
+     * @see org.apache.commons.math.stat.StoreUnivariate#getValues()
+     */
+    public double[] getValues() {
+
+        int length = list.size();
+
+        // If the window size is not INFINITE_WINDOW AND
+        // the current list is larger that the window size, we need to
+        // take into account only the last n elements of the list
+        // as definied by windowSize
+
+        if (windowSize != Univariate.INFINITE_WINDOW &&
+            windowSize < list.size())
+        {
+            length = list.size() - Math.max(0, list.size() - windowSize);
+        }
+
+        // Create an array to hold all values
+        double[] copiedArray = new double[length];
+
+        for (int i = 0; i < copiedArray.length; i++) {
+            copiedArray[i] = getElement(i);
+        }
+        return copiedArray;
+    }
+
+    /**
+     * @see org.apache.commons.math.stat.StoreUnivariate#getElement(int)
+     */
+    public double getElement(int index) {
+
+        double value = Double.NaN;
+
+        int calcIndex = index;
+
+        if (windowSize != Univariate.INFINITE_WINDOW &&
+            windowSize < list.size())
+        {
+            calcIndex = (list.size() - windowSize) + index;
+        }
+
+        try {
+            value = runner.transform(list.get(calcIndex));
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+
+        return value;
+    }
+
+    /**
+     * @see org.apache.commons.math.stat.Univariate#getN()
+     */
+    public int getN() {
+        int n = 0;
+
+        if (windowSize != Univariate.INFINITE_WINDOW) {
+            if (list.size() > windowSize) {
+                n = windowSize;
+            } else {
+                n = list.size();
+            }
+        } else {
+            n = list.size();
+        }
+        return n;
+    }
+
+    /**
+     * @see org.apache.commons.math.stat.Univariate#addValue(double)
+     */
+    public void addValue(double v) {
+        list.add(new Double(v));
+    }
+    
+    /**
+     * Adds an object to this list. 
+     * @param o Object to add to the list
+     */
+    public void addObject(Object o) {
+        list.add(o);
+    }
+
+    /**
+     * @see org.apache.commons.math.stat.Univariate#clear()
+     */
+    public void clear() {
+        super.clear();
+        list.clear();
+    }
+    
+    /**
+     * Apply the given statistic to this univariate collection.
+     * @param stat the statistic to apply
+     * @return the computed value of the statistic.
+     */
+    public double apply(UnivariateStatistic stat) {
+        double[] v = this.getValues();
+
+        if (v != null) {
+            return stat.evaluate(v, 0, v.length);
+        }
+        return Double.NaN;
+    }
+    
+    /**
+     * Access the number runner.
+     * @return the number runner.
+     */
+    public NumberTransformer getTransformer() {
+        return runner;
+    }
+
+    /**
+     * Modify the number runner.
+     * @param runner the new number runner.
+     */
+    public void setTransformer(NumberTransformer runner) {
+        this.runner = runner;
+    }
+
+}
\ No newline at end of file
diff --git a/src/java/org/apache/commons/math/stat/StatUtils.java b/src/java/org/apache/commons/math/stat/StatUtils.java
new file mode 100644
index 0000000..7eb0563
--- /dev/null
+++ b/src/java/org/apache/commons/math/stat/StatUtils.java
@@ -0,0 +1,306 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.commons.math.stat;
+
+import org.apache.commons.math.stat.univariate.UnivariateStatistic;
+import org.apache.commons.math.stat.univariate.moment.Mean;
+import org.apache.commons.math.stat.univariate.moment.Variance;
+import org.apache.commons.math.stat.univariate.rank.Max;
+import org.apache.commons.math.stat.univariate.rank.Min;
+import org.apache.commons.math.stat.univariate.summary.Product;
+import org.apache.commons.math.stat.univariate.summary.Sum;
+import org.apache.commons.math.stat.univariate.summary.SumOfLogs;
+import org.apache.commons.math.stat.univariate.summary.SumOfSquares;
+
+/**
+ * StatUtils provides easy static implementations of common double[] based
+ * statistical methods. These return a single result value or in some cases, as
+ * identified in the javadoc for each method, Double.NaN.
+ * @version $Revision: 1.21 $ $Date: 2003/11/14 22:22:18 $
+ */
+public final class StatUtils {
+
+	/** sum */
+	private static UnivariateStatistic sum = new Sum();
+	
+	/** sumSq */
+	private static UnivariateStatistic sumSq = new SumOfSquares();
+	
+	/** prod */
+	private static UnivariateStatistic prod = new Product();
+	
+	/** sumLog */
+	private static UnivariateStatistic sumLog = new SumOfLogs();
+	
+	/** min */
+	private static UnivariateStatistic min = new Min();	
+	
+	/** max */
+	private static UnivariateStatistic max = new Max();	
+	
+	/** mean */
+	private static UnivariateStatistic mean = new Mean();	
+	
+	/** variance */
+	private static UnivariateStatistic variance = new Variance();	
+		
+    /**
+     * Private Constructor
+     */
+    private StatUtils() {
+    }
+
+    /**
+     * The sum of the values that have been added to Univariate.
+     * @param values Is a double[] containing the values
+     * @return the sum of the values or Double.NaN if the array is empty
+     */
+    public static double sum(final double[] values) {
+		return sum.evaluate(values);
+    }
+
+    /**
+     * The sum of the values that have been added to Univariate.
+     * @param values Is a double[] containing the values
+     * @param begin processing at this point in the array
+     * @param length processing at this point in the array
+     * @return the sum of the values or Double.NaN if the array is empty
+     */
+    public static double sum(
+        final double[] values,
+        final int begin,
+        final int length) {
+        return sum.evaluate(values, begin, length);
+    }
+
+    /**
+     * Returns the sum of the squares of the available values.
+     * @param values Is a double[] containing the values
+     * @return the sum of the squared values or Double.NaN if the array is empty
+     */
+    public static double sumSq(final double[] values) {
+		return sumSq.evaluate(values);
+    }
+
+    /**
+     * Returns the sum of the squares of the available values.
+     * @param values Is a double[] containing the values
+     * @param begin processing at this point in the array
+     * @param length processing at this point in the array
+     * @return the sum of the squared values or Double.NaN if the array is empty
+     */
+    public static double sumSq(
+        final double[] values,
+        final int begin,
+        final int length) {
+        return sumSq.evaluate(values, begin, length);
+    }
+
+    /**
+     * Returns the product for this collection of values
+     * @param values Is a double[] containing the values
+     * @return the product values or Double.NaN if the array is empty
+     */
+    public static double product(final double[] values) {
+        return prod.evaluate(values);
+    }
+
+    /**
+     * Returns the product for this collection of values
+     * @param values Is a double[] containing the values
+     * @param begin processing at this point in the array
+     * @param length processing at this point in the array
+     * @return the product values or Double.NaN if the array is empty
+     */
+    public static double product(
+        final double[] values,
+        final int begin,
+        final int length) {
+        return prod.evaluate(values, begin, length);
+    }
+
+    /**
+     * Returns the sum of the natural logs for this collection of values
+     * @param values Is a double[] containing the values
+     * @return the sumLog value or Double.NaN if the array is empty
+     */
+    public static double sumLog(final double[] values) {
+		return sumLog.evaluate(values);
+    }
+
+    /**
+     * Returns the sum of the natural logs for this collection of values
+     * @param values Is a double[] containing the values
+     * @param begin processing at this point in the array
+     * @param length processing at this point in the array
+     * @return the sumLog value or Double.NaN if the array is empty
+     */
+    public static double sumLog(
+        final double[] values,
+        final int begin,
+        final int length) {
+		return sumLog.evaluate(values, begin, length);
+    }
+
+    /**
+     * Returns the <a href=http://www.xycoon.com/arithmetic_mean.htm>
+     * arithmetic mean </a> of the available values
+     * @param values Is a double[] containing the values
+     * @return the mean of the values or Double.NaN if the array is empty
+     */
+    public static double mean(final double[] values) {
+		return mean.evaluate(values);
+    }
+
+    /**
+      * Returns the <a href=http://www.xycoon.com/arithmetic_mean.htm>
+      * arithmetic mean </a> of the available values
+     * @param values Is a double[] containing the values
+     * @param begin processing at this point in the array
+     * @param length processing at this point in the array
+      * @return the mean of the values or Double.NaN if the array is empty
+      */
+    public static double mean(
+        final double[] values,
+        final int begin,
+        final int length) {
+        return mean.evaluate(values, begin, length);
+    }
+
+    /**
+     * Returns the variance of the available values. This uses a corrected
+     * two pass algorithm of the following
+     * <a href="http://lib-www.lanl.gov/numerical/bookcpdf/c14-1.pdf">
+     * corrected two pass formula (14.1.8)</a>, and also referenced in:<p/>
+     * "Algorithms for Computing the Sample Variance: Analysis and
+     * Recommendations", Chan, T.F., Golub, G.H., and LeVeque, R.J.
+     * 1983, American Statistician, vol. 37, pp. 242?247.
+     *
+     * @param values Is a double[] containing the values
+     * @return the result, Double.NaN if no values for an empty array
+     * or 0.0 for a single value set.
+     */
+    public static double variance(final double[] values) {
+		return variance.evaluate(values);
+    }
+
+    /**
+     * Returns the variance of the available values. This uses a corrected
+     * two pass algorithm of the following
+     * <a href="http://lib-www.lanl.gov/numerical/bookcpdf/c14-1.pdf">
+     * corrected two pass formula (14.1.8)</a>, and also referenced in:<p/>
+     * "Algorithms for Computing the Sample Variance: Analysis and
+     * Recommendations", Chan, T.F., Golub, G.H., and LeVeque, R.J.
+     * 1983, American Statistician, vol. 37, pp. 242?247.
+     *
+     * @param values Is a double[] containing the values
+     * @param begin processing at this point in the array
+     * @param length processing at this point in the array
+     * @return the result, Double.NaN if no values for an empty array
+     * or 0.0 for a single value set.
+     */
+    public static double variance(
+        final double[] values,
+        final int begin,
+        final int length) {
+        return variance.evaluate(values, begin, length);
+    }
+
+    /**
+     * Returns the maximum of the available values
+     * @param values Is a double[] containing the values
+     * @return the maximum of the values or Double.NaN if the array is empty
+     */
+    public static double max(final double[] values) {
+		return max.evaluate(values);
+    }
+
+    /**
+     * Returns the maximum of the available values
+     * @param values Is a double[] containing the values
+     * @param begin processing at this point in the array
+     * @param length processing at this point in the array
+     * @return the maximum of the values or Double.NaN if the array is empty
+     */
+    public static double max(
+        final double[] values,
+        final int begin,
+        final int length) {
+        return max.evaluate(values, begin, length);
+    }
+
+    /**
+     * Returns the minimum of the available values
+     * @param values Is a double[] containing the values
+     * @return the minimum of the values or Double.NaN if the array is empty
+     */
+    public static double min(final double[] values) {
+		return min.evaluate(values);
+    }
+
+    /**
+     * Returns the minimum of the available values
+     * @param values Is a double[] containing the values
+     * @param begin processing at this point in the array
+     * @param length processing at this point in the array
+     * @return the minimum of the values or Double.NaN if the array is empty
+     */
+    public static double min(
+        final double[] values,
+        final int begin,
+        final int length) {
+        return min.evaluate(values, begin, length);
+    }
+
+}
\ No newline at end of file
diff --git a/src/java/org/apache/commons/math/stat/StoreUnivariate.java b/src/java/org/apache/commons/math/stat/StoreUnivariate.java
new file mode 100644
index 0000000..50075ec
--- /dev/null
+++ b/src/java/org/apache/commons/math/stat/StoreUnivariate.java
@@ -0,0 +1,113 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.commons.math.stat;
+
+/**
+ * StoreUnivariate implements the Univariate interface 
+ * but maintains the set of values which contribute to 
+ * the values being returned.  This implementation of 
+ * Univariate provides additional percentile functionality 
+ * such as.  This additional functionality comes with 
+ * a price of increased storage costs.
+ * @version $Revision: 1.11 $ $Date: 2003/11/14 22:22:18 $
+ */
+public interface StoreUnivariate extends Univariate {
+
+    /**
+     * Returns the current set of values in an array of double primitives.  
+     * The order of addition is preserved.  The returned array is a fresh
+     * copy of the underlying data -- i.e., it is not a reference to the
+     * stored data.
+     * 
+     * @return returns the current set of numbers in the order in which they 
+     *         were added to this set
+     */
+    double[] getValues();
+
+    /**
+     * Returns the current set of values in an array of double primitives,  
+     * sorted in ascending order.  The returned array is a fresh
+     * copy of the underlying data -- i.e., it is not a reference to the
+     * stored data.
+     * @return returns the current set of 
+     * numbers sorted in ascending order        
+     */
+    double[] getSortedValues();
+
+    /**
+     * Returns the element at the specified index
+     * @param index The Index of the element
+     * @return return the element at the specified index
+     */
+    double getElement(int index);
+
+    /**
+     * Returns an estimate for the pth percentile of the stored values. 
+     * This estimate follows the interpolation-adjusted defintion presented 
+     * <a href="http://www.utdallas.edu/~ammann/stat5311/node8.html">here</a>
+     * <p/>
+     * <strong>Preconditions</strong>:<ul>
+     * <li><code>0 &lt; p &lt; 100</code> (otherwise an 
+     * <code>IllegalArgumentException</code> is thrown)</li>
+     * <li>at least one value must be stored (returns <code>Double.NaN
+     *     </code> otherwise)</li>
+     * </ul>
+     * 
+     * @param p the requested percentile (scaled from 0 - 100)
+     * @return An estimate for the pth percentile of the stored data 
+     * values
+     */
+    double getPercentile(double p);
+
+}
diff --git a/src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java b/src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java
new file mode 100644
index 0000000..fc4c9fa
--- /dev/null
+++ b/src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java
@@ -0,0 +1,158 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.commons.math.stat;
+
+import org.apache.commons.math.stat.univariate.UnivariateStatistic;
+import org.apache.commons.math.util.ContractableDoubleArray;
+
+/**
+ * @version $Revision: 1.12 $ $Date: 2003/11/14 22:22:18 $
+ */
+public class StoreUnivariateImpl extends AbstractStoreUnivariate {
+
+    /** A contractable double array is used.  memory is reclaimed when 
+     * the storage of the array becomes too empty.
+     */
+    protected ContractableDoubleArray eDA;
+
+    /**
+     * Construct a StoreUnivariateImpl
+     */
+    public StoreUnivariateImpl() {
+        eDA = new ContractableDoubleArray();
+    }
+
+    /**
+     * @see org.apache.commons.math.stat.StoreUnivariate#getValues()
+     */
+    public double[] getValues() {
+
+        double[] copiedArray = new double[eDA.getNumElements()];
+        System.arraycopy(
+            eDA.getElements(),
+            0,
+            copiedArray,
+            0,
+            eDA.getNumElements());
+        return copiedArray;
+    }
+
+    /**
+     * @see org.apache.commons.math.stat.StoreUnivariate#getElement(int)
+     */
+    public double getElement(int index) {
+        return eDA.getElement(index);
+    }
+
+    /**
+     * @see org.apache.commons.math.stat.Univariate#getN()
+     */
+    public int getN() {
+        return eDA.getNumElements();
+    }
+
+    /**
+     * @see org.apache.commons.math.stat.Univariate#addValue(double)
+     */
+    public synchronized void addValue(double v) {
+        if (windowSize != Univariate.INFINITE_WINDOW) {
+            if (getN() == windowSize) {
+                eDA.addElementRolling(v);
+            } else if (getN() < windowSize) {
+                eDA.addElement(v);
+            } else {
+                String msg =
+                    "A window Univariate had more element than " +
+                    "the windowSize.  This is an inconsistent state.";
+                throw new RuntimeException(msg);
+            }
+        } else {
+            eDA.addElement(v);
+        }
+    }
+
+    /**
+     * @see org.apache.commons.math.stat.Univariate#clear()
+     */
+    public synchronized void clear() {
+        super.clear();
+        eDA.clear();
+    }
+
+    /**
+     * @see org.apache.commons.math.stat.Univariate#setWindowSize(int)
+     */
+    public synchronized void setWindowSize(int windowSize) {
+        this.windowSize = windowSize;
+
+        // We need to check to see if we need to discard elements
+        // from the front of the array.  If the windowSize is less than 
+        // the current number of elements.
+        if (windowSize < eDA.getNumElements()) {
+            eDA.discardFrontElements(eDA.getNumElements() - windowSize);
+        }
+    }
+
+    /**
+     * Apply the given statistic to this univariate collection.
+     * @param stat the statistic to apply
+     * @return the computed value of the statistic.
+     */
+    public double apply(UnivariateStatistic stat) {
+        if (eDA != null) {
+            return stat.evaluate(eDA.getValues(), eDA.start(), eDA.getNumElements());
+        }
+        return Double.NaN;
+    }
+}
\ No newline at end of file
diff --git a/src/java/org/apache/commons/math/stat/TestStatistic.java b/src/java/org/apache/commons/math/stat/TestStatistic.java
new file mode 100644
index 0000000..6a17212
--- /dev/null
+++ b/src/java/org/apache/commons/math/stat/TestStatistic.java
@@ -0,0 +1,533 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.commons.math.stat;
+/**
+ * A collection of commonly used test statistics and statistical tests.
+ * 
+ * @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:18 $ 
+ */
+public interface TestStatistic {
+    
+    /**
+     * Computes the <a href="http://www.itl.nist.gov/div898/handbook/eda
+     * /section3/eda35f.htm">Chi-Square statistic</a> comparing 
+     * <code>observed</code> and <code>expected</code> freqeuncy counts. 
+     * <p>
+     * This statistic can be used to perform Chi-Square tests.
+     * <p>
+     * <strong>Preconditions</strong>: <ul>
+     * <li>Expected counts must all be positive.  
+     * </li>
+     * <li>Observed counds must all be >= 0.   
+     * </li>
+     * <li>The observed and expected arrays must have the same length and
+     * their common length must be at least 2.  
+     * </li></ul><p>
+     * If any of the preconditions are not met, an 
+     * <code>IllegalArgumentException</code> is thrown.
+     *
+     * @param observed array of observed frequency counts
+     * @param expected array of exptected frequency counts
+     * @return chiSquare statistic
+     * @throws IllegalArgumentException if preconditions are not met
+     */
+    double chiSquare(double[] expected, double[] observed) 
+        throws IllegalArgumentException;
+    
+    /**
+     * Returns the <i>observed significance level</i>, or <a href=
+     * "http://www.cas.lancs.ac.uk/glossary_v1.1/hyptest.html#pvalue">
+     * p-value</a>, associated with a <a href="http://www.itl.nist.gov/div898/
+     * handbook/eda/section3/eda35f.htm">Chi-square goodness of fit test</a>
+     * comparing the <code>observed</code> frequency counts to those in the 
+     * <code>expected</code> array.
+     * <p>
+     * The number returned is the smallest significance level
+     * at which one can reject the null hypothesis that the observed counts
+     * conform to the frequency distribution described by the expected counts. 
+     * <p>
+     * <strong>Preconditions</strong>: <ul>
+     * <li>Expected counts must all be positive.  
+     * </li>
+     * <li>Observed counds must all be >= 0.   
+     * </li>
+     * <li>The observed and expected arrays must have the same length and
+     * their common length must be at least 2.  
+     * </li></ul><p>
+     * If any of the preconditions are not met, an 
+     * <code>IllegalArgumentException</code> is thrown.
+     *
+     * @param observed array of observed frequency counts
+     * @param expected array of exptected frequency counts
+     * @return p-value
+     * @throws IllegalArgumentException if preconditions are not met
+     */
+    double chiSquareTest(double[] expected, double[] observed) 
+        throws IllegalArgumentException;
+    
+    /**
+     * Performs a <a href="http://www.itl.nist.gov/div898/handbook/eda/
+     * section3/eda35f.htm">Chi-square goodness of fit test</a> evaluating the 
+     * null hypothesis that the observed counts conform to the frequency 
+     * distribution described by the expected counts, with significance level 
+     * <code>alpha</code>.
+     * <p>
+     * <strong>Example:</strong><br>
+     * To test the hypothesis that <code>observed</code> follows 
+     * <code>expected</code> at the 99% level, use <p>
+     * <code>chiSquareTest(expected, observed, 0.01) </code>
+     * <p>
+     * <strong>Preconditions</strong>: <ul>
+     * <li>Expected counts must all be positive.  
+     * </li>
+     * <li>Observed counds must all be >= 0.   
+     * </li>
+     * <li>The observed and expected arrays must have the same length and
+     * their common length must be at least 2.  
+     * <li> <code> 0 < alpha < 0.5 </code>
+     * </li></ul><p>
+     * If any of the preconditions are not met, an 
+     * <code>IllegalArgumentException</code> is thrown.
+     *
+     * @param observed array of observed frequency counts
+     * @param expected array of exptected frequency counts
+     * @param alpha significance level of the test
+     * @return true iff null hypothesis can be rejected with confidence
+     * 1 - alpha
+     * @throws IllegalArgumentException if preconditions are not met
+     */
+    boolean chiSquareTest(double[] expected, double[] observed, double alpha) 
+        throws IllegalArgumentException;
+    
+    /**
+     * Computes a <a href="http://www.itl.nist.gov/div898/handbook/prc/
+     * section2/prc22.htm#formula"> t statistic </a> given observed values and 
+     * a comparison constant.
+     * <p>
+     * This statistic can be used to perform a one sample t-test for the mean.
+     * <p>
+     * <strong>Preconditions</strong>: <ul>
+     * <li>The observed array length must be at least 2.
+     * </li></ul>
+     *
+     * @param mu comparison constant
+     * @param observed array of values
+     * @return t statistic
+     * @throws IllegalArgumentException if input array length is less than 2
+     */
+    double t(double mu, double[] observed) 
+        throws IllegalArgumentException;
+    
+    /**
+     * Computes a <a href="http://www.itl.nist.gov/div898/handbook/prc/section3
+     * /prc31.htm">2-sample t statistic </a>, without the assumption of equal
+     * sample variances.
+     * <p>
+     * This statistic can be used to perform a two-sample t-test to compare
+     * sample means.
+     * <p>
+     * <strong>Preconditions</strong>: <ul>
+     * <li>The observed array lengths must both be at least 5.
+     * </li></ul>
+     *
+     * @param sample1 array of sample data values
+     * @param sample2 array of sample data values
+     * @return t statistic
+     * @throws IllegalArgumentException if the precondition is not met
+     */
+    double t(double[] sample1, double[] sample2) 
+        throws IllegalArgumentException;
+    
+    /**
+     * Returns the <i>observed significance level</i>, or <a href=
+     * "http://www.cas.lancs.ac.uk/glossary_v1.1/hyptest.html#pvalue">
+     * p-value</a>, associated with a two-sample, two-tailed t-test 
+     * comparing the means of the input arrays.
+     * <p>
+     * The number returned is the smallest significance level
+     * at which one can reject the null hypothesis that the two means are
+     * equal in favor of the two-sided alternative that they are different. 
+     * For a one-sided test, divide the returned value by 2.
+     * <p>
+     * The test does not assume that the underlying popuation variances are
+     * equal and it uses approximated degrees of freedom computed from the 
+     * sample data as described <a href="http://www.itl.nist.gov/div898/
+     * handbook/prc/section3/prc31.htm">here</a>
+     * <p>
+     * <strong>Usage Note:</strong><br>
+     * The validity of the p-value depends on the assumptions of the parametric
+     * t-test procedure, as discussed <a href="http://www.basic.nwu.edu/
+     * statguidefiles/ttest_unpaired_ass_viol.html">here</a>
+     * <p>
+     * <strong>Preconditions</strong>: <ul>
+     * <li>The observed array lengths must both be at least 5.
+     * </li></ul>
+     *
+     * @param sample1 array of sample data values
+     * @param sample2 array of sample data values
+     * @return p-value for t-test
+     * @throws IllegalArgumentException if the precondition is not met
+     */
+    double tTest(double[] sample1, double[] sample2)
+        throws IllegalArgumentException;
+    
+    /**
+     * Performs a <a href="http://www.itl.nist.gov/div898/handbook/eda/
+     * section3/eda353.htm">two-sided t-test</a> evaluating the null 
+     * hypothesis that <code>sample1</code> and <code>sample2</code> are drawn 
+     * from populations with the same mean, with significance level 
+     * <code>alpha</code>.
+     * <p>
+     * Returns <code>true</code> iff the null hypothesis that the means are
+     * equal can be rejected with confidence <code>1 - alpha</code>.  To 
+     * perform a 1-sided test, use <code>alpha / 2</code>
+     * <p>
+     * <strong>Examples:</strong><br><ol>
+     * <li>To test the (2-sided) hypothesis <code>mean 1 = mean 2 </code> at
+     * the 95% level, use <br><code>tTest(sample1, sample2, 0.05) </code>
+     * </li>
+     * <li>To test the (one-sided) hypothesis <code> mean 1 < mean 2 </code>
+     * at the 99% level, first verify that the measured mean of 
+     * <code>sample 1</code> is less than the mean of <code>sample 2</code>
+     * and then use <br><code>tTest(sample1, sample2, 0.005) </code>
+     * </li></ol>
+     * <p>
+     * The test does not assume that the underlying popuation variances are
+     * equal and it uses approximated degrees of freedom computed from the 
+     * sample data as described <a href="http://www.itl.nist.gov/div898/
+     * handbook/prc/section3/prc31.htm">here</a>
+     * <p>
+     * <strong>Usage Note:</strong><br>
+     * The validity of the test depends on the assumptions of the parametric
+     * t-test procedure, as discussed <a href="http://www.basic.nwu.edu/
+     * statguidefiles/ttest_unpaired_ass_viol.html">here</a>
+     * <p>
+     * <strong>Preconditions</strong>: <ul>
+     * <li>The observed array lengths must both be at least 5.
+     * </li>
+     * <li> <code> 0 < alpha < 0.5 </code>
+     * </li></ul>
+     *
+     * @param sample1 array of sample data values
+     * @param sample2 array of sample data values
+     * @param alpha significance level of the test
+     * @return true if the null hypothesis can be rejected with 
+     * confidence 1 - alpha
+     * @throws IllegalArgumentException if the preconditions are not met
+     */
+    boolean tTest(double[] sample1, double[] sample2, double alpha)
+        throws IllegalArgumentException;
+    
+    /**
+     * Performs a <a href="http://www.itl.nist.gov/div898/handbook/eda/
+     * section3/eda353.htm">two-sided t-test</a> evaluating the null 
+     * hypothesis that the mean of the population from which 
+     * <code>sample</code> is drawn equals <code>mu</code>.
+     * <p>
+     * Returns <code>true</code> iff the null hypothesis can be 
+     * rejected with confidence <code>1 - alpha</code>.  To 
+     * perform a 1-sided test, use <code>alpha / 2</code>
+     * <p>
+     * <strong>Examples:</strong><br><ol>
+     * <li>To test the (2-sided) hypothesis <code>sample mean = mu </code> at
+     * the 95% level, use <br><code>tTest(mu, sample, 0.05) </code>
+     * </li>
+     * <li>To test the (one-sided) hypothesis <code> sample mean < mu </code>
+     * at the 99% level, first verify that the measured sample mean is less 
+     * than <code>mu</code> and then use 
+     * <br><code>tTest(mu, sample, 0.005) </code>
+     * </li></ol>
+     * <p>
+     * <strong>Usage Note:</strong><br>
+     * The validity of the test depends on the assumptions of the one-sample 
+     * parametric t-test procedure, as discussed 
+     * <a href="http://www.basic.nwu.edu/statguidefiles/
+     * sg_glos.html#one-sample">here</a>
+     * <p>
+     * <strong>Preconditions</strong>: <ul>
+     * <li>The observed array length must be at least 5.
+     * </li></ul>
+     *
+     * @param mu constant value to compare sample mean against
+     * @param sample array of sample data values
+     * @param alpha significance level of the test
+     * @return p-value
+     * @throws IllegalArgumentException if the precondition is not met
+     */
+    boolean tTest(double mu, double[] sample, double alpha)
+        throws IllegalArgumentException;
+    
+    /**
+     * Returns the <i>observed significance level</i>, or <a href=
+     * "http://www.cas.lancs.ac.uk/glossary_v1.1/hyptest.html#pvalue">
+     * p-value</a>, associated with a one-sample, two-tailed t-test 
+     * comparing the mean of the input array with the constant <code>mu</code>.
+     * <p>
+     * The number returned is the smallest significance level
+     * at which one can reject the null hypothesis that the mean equals 
+     * <code>mu</code> in favor of the two-sided alternative that the mean
+     * is different from <code>mu</code>. For a one-sided test, divide the 
+     * returned value by 2.
+     * <p>
+     * <strong>Usage Note:</strong><br>
+     * The validity of the test depends on the assumptions of the parametric
+     * t-test procedure, as discussed <a href="http://www.basic.nwu.edu/
+     * statguidefiles/ttest_unpaired_ass_viol.html">here</a>
+     * <p>
+     * <strong>Preconditions</strong>: <ul>
+     * <li>The observed array length must be at least 5.
+     * </li></ul>
+     *
+     * @param mu constant value to compare sample mean against
+     * @param sample array of sample data values
+     * @return p-value
+     * @throws IllegalArgumentException if the precondition is not met
+     */
+    double tTest(double mu, double[] sample)
+        throws IllegalArgumentException;
+    
+    /**
+     * Computes a <a href="http://www.itl.nist.gov/div898/handbook/prc/
+     * section2/prc22.htm#formula"> t statistic </a> to use in comparing 
+     * the dataset described by <code>sampleStats</code> to <code>mu</code>.
+     * <p>
+     * This statistic can be used to perform a one sample t-test for the mean.
+     * <p>
+     * <strong>Preconditions</strong>: <ul>
+     * <li><code>observed.getN() > = 2</code>.
+     * </li></ul>
+     *
+     * @param mu comparison constant
+     * @param sampleStats Univariate holding sample summary statitstics
+     * @return t statistic
+     * @throws IllegalArgumentException if the precondition is not met
+     */
+    double t(double mu, Univariate sampleStats) 
+        throws IllegalArgumentException;
+    
+    /**
+     * Computes a <a href="http://www.itl.nist.gov/div898/handbook/prc/section3
+     * /prc31.htm">2-sample t statistic </a>, comparing the datasets described
+     * by two Univariates without the assumption of equal sample variances.
+     * <p>
+     * This statistic can be used to perform a two-sample t-test to compare
+     * sample means.
+     * <p>
+     * <strong>Preconditions</strong>: <ul>
+     * <li>The datasets described by the two Univariates must each contain
+     * at least 5 observations.
+     * </li></ul>
+     *
+     * @param sampleStats1 Univariate describing data from the first sample
+     * @param sampleStats2 Univariate describing data from the second sample
+     * @return t statistic
+     * @throws IllegalArgumentException if the precondition is not met
+     */
+    double t(Univariate sampleStats1, Univariate sampleStats2) 
+        throws IllegalArgumentException;
+    
+    /**
+     * Returns the <i>observed significance level</i>, or <a href=
+     * "http://www.cas.lancs.ac.uk/glossary_v1.1/hyptest.html#pvalue">
+     * p-value</a>, associated with a two-sample, two-tailed t-test 
+     * comparing the means of the datasets described by two Univariates.
+     * <p>
+     * The number returned is the smallest significance level
+     * at which one can reject the null hypothesis that the two means are
+     * equal in favor of the two-sided alternative that they are different. 
+     * For a one-sided test, divide the returned value by 2.
+     * <p>
+     * The test does not assume that the underlying popuation variances are
+     * equal and it uses approximated degrees of freedom computed from the 
+     * sample data as described <a href="http://www.itl.nist.gov/div898/
+     * handbook/prc/section3/prc31.htm">here</a>
+     * <p>
+     * <strong>Usage Note:</strong><br>
+     * The validity of the p-value depends on the assumptions of the parametric
+     * t-test procedure, as discussed <a href="http://www.basic.nwu.edu/
+     * statguidefiles/ttest_unpaired_ass_viol.html">here</a>
+     * <p>
+     * <strong>Preconditions</strong>: <ul>
+     * <li>The datasets described by the two Univariates must each contain
+     * at least 5 observations.
+     * </li></ul>
+     *
+     * @param sampleStats1 Univariate describing data from the first sample
+     * @param sampleStats2 Univariate describing data from the second sample
+     * @return p-value for t-test
+     * @throws IllegalArgumentException if the precondition is not met
+     */
+    double tTest(Univariate sampleStats1, Univariate sampleStats2)
+        throws IllegalArgumentException;
+    
+    /**
+     * Performs a <a href="http://www.itl.nist.gov/div898/handbook/eda/
+     * section3/eda353.htm">two-sided t-test</a> evaluating the null 
+     * hypothesis that <code>sampleStats1</code> and <code>sampleStats2</code> 
+     * describe datasets drawn from populations with the same mean, with 
+     * significance level <code>alpha</code>.
+     * <p>
+     * Returns <code>true</code> iff the null hypothesis that the means are
+     * equal can be rejected with confidence <code>1 - alpha</code>.  To 
+     * perform a 1-sided test, use <code>alpha / 2</code>
+     * <p>
+     * <strong>Examples:</strong><br><ol>
+     * <li>To test the (2-sided) hypothesis <code>mean 1 = mean 2 </code> at
+     * the 95% level, use 
+     * <br><code>tTest(sampleStats1, sampleStats2, 0.05) </code>
+     * </li>
+     * <li>To test the (one-sided) hypothesis <code> mean 1 < mean 2 </code>
+     * at the 99% level, first verify that the measured mean of 
+     * <code>sample 1</code> is less than the mean of <code>sample 2</code>
+     * and then use <br><code>tTest(sampleStats1, sampleStats2, 0.005) </code>
+     * </li></ol>
+     * <p>
+     * The test does not assume that the underlying popuation variances are
+     * equal and it uses approximated degrees of freedom computed from the 
+     * sample data as described <a href="http://www.itl.nist.gov/div898/
+     * handbook/prc/section3/prc31.htm">here</a>
+     * <p>
+     * <strong>Usage Note:</strong><br>
+     * The validity of the test depends on the assumptions of the parametric
+     * t-test procedure, as discussed <a href="http://www.basic.nwu.edu/
+     * statguidefiles/ttest_unpaired_ass_viol.html">here</a>
+     * <p>
+     * <strong>Preconditions</strong>: <ul>
+     * <li>The datasets described by the two Univariates must each contain
+     * at least 5 observations.
+     * </li>
+     * <li> <code> 0 < alpha < 0.5 </code>
+     * </li></ul>
+     *
+     * @param sampleStats1 Univariate describing sample data values
+     * @param sampleStats2 Univariate describing sample data values
+     * @param alpha significance level of the test
+     * @return true if the null hypothesis can be rejected with 
+     * confidence 1 - alpha
+     * @throws IllegalArgumentException if the preconditions are not met
+     */
+    boolean tTest(Univariate sampleStats1, Univariate sampleStats2, 
+        double alpha)
+        throws IllegalArgumentException;
+    
+    /**
+     * Performs a <a href="http://www.itl.nist.gov/div898/handbook/eda/
+     * section3/eda353.htm">two-sided t-test</a> evaluating the null 
+     * hypothesis that the mean of the population from which the dataset  
+     * described by <code>stats</code> is drawn equals <code>mu</code>.
+     * <p>
+     * Returns <code>true</code> iff the null hypothesis can be 
+     * rejected with confidence <code>1 - alpha</code>.  To 
+     * perform a 1-sided test, use <code>alpha / 2</code>
+     * <p>
+     * <strong>Examples:</strong><br><ol>
+     * <li>To test the (2-sided) hypothesis <code>sample mean = mu </code> at
+     * the 95% level, use <br><code>tTest(mu, sampleStats, 0.05) </code>
+     * </li>
+     * <li>To test the (one-sided) hypothesis <code> sample mean < mu </code>
+     * at the 99% level, first verify that the measured sample mean is less 
+     * than <code>mu</code> and then use 
+     * <br><code>tTest(mu, sampleStats, 0.005) </code>
+     * </li></ol>
+     * <p>
+     * <strong>Usage Note:</strong><br>
+     * The validity of the test depends on the assumptions of the one-sample 
+     * parametric t-test procedure, as discussed 
+     * <a href="http://www.basic.nwu.edu/statguidefiles/
+     * sg_glos.html#one-sample">here</a>
+     * <p>
+     * <strong>Preconditions</strong>: <ul>
+     * <li>The sample must include at least 5 observations.
+     * </li></ul>
+     *
+     * @param mu constant value to compare sample mean against
+     * @param sampleStats Univariate describing sample data values
+     * @param alpha significance level of the test
+     * @return p-value
+     * @throws IllegalArgumentException if the precondition is not met
+     */
+    boolean tTest(double mu, Univariate sampleStats, double alpha)
+        throws IllegalArgumentException;
+    
+    /**
+     * Returns the <i>observed significance level</i>, or <a href=
+     * "http://www.cas.lancs.ac.uk/glossary_v1.1/hyptest.html#pvalue">
+     * p-value</a>, associated with a one-sample, two-tailed t-test 
+     * comparing the mean of the dataset described by <code>sampleStats</code>
+     * with the constant <code>mu</code>.
+     * <p>
+     * The number returned is the smallest significance level
+     * at which one can reject the null hypothesis that the mean equals 
+     * <code>mu</code> in favor of the two-sided alternative that the mean
+     * is different from <code>mu</code>. For a one-sided test, divide the 
+     * returned value by 2.
+     * <p>
+     * <strong>Usage Note:</strong><br>
+     * The validity of the test depends on the assumptions of the parametric
+     * t-test procedure, as discussed <a href="http://www.basic.nwu.edu/
+     * statguidefiles/ttest_unpaired_ass_viol.html">here</a>
+     * <p>
+     * <strong>Preconditions</strong>: <ul>
+     * <li>The sample must contain at least 5 observations.
+     * </li></ul>
+     *
+     * @param mu constant value to compare sample mean against
+     * @param sampleStats Univariate describing sample data
+     * @return p-value
+     * @throws IllegalArgumentException if the precondition is not met
+     */
+    double tTest(double mu, Univariate sampleStats)
+        throws IllegalArgumentException;
+}
+
diff --git a/src/java/org/apache/commons/math/stat/TestStatisticImpl.java b/src/java/org/apache/commons/math/stat/TestStatisticImpl.java
new file mode 100644
index 0000000..2f8c495
--- /dev/null
+++ b/src/java/org/apache/commons/math/stat/TestStatisticImpl.java
@@ -0,0 +1,420 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+
+package org.apache.commons.math.stat;
+
+import org.apache.commons.math.stat.distribution.DistributionFactory;
+import org.apache.commons.math.stat.distribution.TDistribution;
+import org.apache.commons.math.stat.distribution.ChiSquaredDistribution;
+
+/**
+ * Implements test statistics defined in the TestStatistic interface.
+ *
+ * @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:18 $
+ */
+public class TestStatisticImpl implements TestStatistic {
+    
+    /**
+     * Default constructor
+     */
+    public TestStatisticImpl() {
+    }
+    
+    /**
+     * @param observed array of observed frequency counts
+     * @param expected array of expected frequency counts
+     * @return chi-square test statistic
+     * @throws IllegalArgumentException if preconditions are not met
+     * or length is less than 2
+     */
+    public double chiSquare(double[] expected, double[] observed)
+        throws IllegalArgumentException {
+        double sumSq = 0.0d;
+        double dev = 0.0d;
+        if ((expected.length < 2) || (expected.length != observed.length)) {
+            throw new IllegalArgumentException
+                ("observed, expected array lengths incorrect");
+        }
+        if ((StatUtils.min(expected) <= 0) || (StatUtils.min(observed) < 0)) {
+            throw new IllegalArgumentException
+                ("observed counts must be non-negative," + 
+                    " expected counts must be postive");
+        }
+        for (int i = 0; i < observed.length; i++) {
+            dev = (observed[i] - expected[i]);
+            sumSq += dev * dev / expected[i];
+        }
+        
+        return sumSq;
+    }
+    
+    /**
+     * @param observed array of observed frequency counts
+     * @param expected array of exptected frequency counts
+     * @return p-value
+     * @throws IllegalArgumentException if preconditions are not met
+     */
+    public double chiSquareTest(double[] expected, double[] observed) 
+        throws IllegalArgumentException {
+        ChiSquaredDistribution chiSquaredDistribution = 
+            DistributionFactory.newInstance().createChiSquareDistribution
+                ((double) expected.length - 1);
+        return 1 - chiSquaredDistribution.cummulativeProbability(
+            chiSquare(expected, observed));     
+    }
+    
+    /**
+     * @param observed array of observed frequency counts
+     * @param expected array of exptected frequency counts
+     * @param alpha significance level of the test
+     * @return true iff null hypothesis can be rejected with confidence
+     * 1 - alpha
+     * @throws IllegalArgumentException if preconditions are not met
+     */
+    public boolean chiSquareTest(double[] expected, double[] observed, 
+        double alpha) 
+        throws IllegalArgumentException {
+        if ((alpha <= 0) || (alpha > 0.5)) {
+           throw new IllegalArgumentException
+                ("bad significance level: " + alpha);
+        }
+        return (chiSquareTest(expected, observed) < alpha);
+    }
+
+    /**
+     * @param mu comparison constant
+     * @param observed array of values
+     * @return t statistic
+     * @throws IllegalArgumentException if input array length is less than 5
+     */
+    public double t(double mu, double[] observed) 
+    throws IllegalArgumentException {
+        if ((observed == null) || (observed.length < 5)) {
+            throw new IllegalArgumentException
+                ("insufficient data for t statistic");
+        }
+        return t(StatUtils.mean(observed), mu, StatUtils.variance(observed), 
+            observed.length);
+    }
+    
+    /**
+     * @param mu constant value to compare sample mean against
+     * @param sample array of sample data values
+     * @param alpha significance level of the test
+     * @return p-value
+     * @throws IllegalArgumentException if the precondition is not met
+     */
+    public boolean tTest(double mu, double[] sample, double alpha)
+        throws IllegalArgumentException {
+        if ((alpha <= 0) || (alpha > 0.5)) {
+           throw new IllegalArgumentException
+                ("bad significance level: " + alpha);
+        }   
+        return (tTest(mu, sample) < alpha);
+    }
+                       
+    /**
+     * @param sample1 array of sample data values
+     * @param sample2 array of sample data values
+     * @return t-statistic
+     * @throws IllegalArgumentException if the precondition is not met
+     */
+    public double t(double[] sample1, double[] sample2) 
+        throws IllegalArgumentException {
+        if ((sample1 == null) || (sample2 == null || 
+            Math.min(sample1.length, sample2.length) < 5)) {
+            throw new IllegalArgumentException
+                ("insufficient data for t statistic");
+        }
+        return t(StatUtils.mean(sample1), StatUtils.mean(sample2), 
+            StatUtils.variance(sample1), StatUtils.variance(sample2), 
+            (double) sample1.length, (double) sample2.length);
+    }
+    
+    /**
+     *
+     * @param sample1 array of sample data values
+     * @param sample2 array of sample data values
+     * @return tTest p-value
+     * @throws IllegalArgumentException if the precondition is not met
+     */
+    public double tTest(double[] sample1, double[] sample2)
+        throws IllegalArgumentException  {
+        if ((sample1 == null) || (sample2 == null ||
+        Math.min(sample1.length, sample2.length) < 5)) {
+            throw new IllegalArgumentException
+            ("insufficient data");
+        }
+        return tTest(StatUtils.mean(sample1), StatUtils.mean(sample2), 
+            StatUtils.variance(sample1), StatUtils.variance(sample2), 
+            (double) sample1.length, (double) sample2.length);      
+    }
+    
+    /**
+     * @param sample1 array of sample data values
+     * @param sample2 array of sample data values
+     * @param alpha significance level
+     * @return true if the null hypothesis can be rejected with 
+     * confidence 1 - alpha
+     * @throws IllegalArgumentException if the preconditions are not met
+     */
+    public boolean tTest(double[] sample1, double[] sample2, double alpha)
+        throws IllegalArgumentException {
+       if ((alpha <= 0) || (alpha > 0.5)) {
+           throw new IllegalArgumentException
+                ("bad significance level: " + alpha);
+       }
+       return (tTest(sample1, sample2) < alpha);
+    }
+    
+    /**
+     * @param mu constant value to compare sample mean against
+     * @param sample array of sample data values
+     * @return p-value
+     * @throws IllegalArgumentException if the precondition is not met
+     */
+    public double tTest(double mu, double[] sample) 
+        throws IllegalArgumentException {
+        if ((sample == null) || (sample.length < 5)) {
+            throw new IllegalArgumentException
+                ("insufficient data for t statistic");
+        }
+        return tTest(StatUtils.mean(sample), mu, StatUtils.variance(sample),
+            sample.length);
+    }
+    
+    /**
+     * @param mu comparison constant
+     * @param sampleStats Univariate holding sample summary statitstics
+     * @return t statistic
+     * @throws IllegalArgumentException if the precondition is not met
+     */
+    public double t(double mu, Univariate sampleStats) 
+        throws IllegalArgumentException {
+        if ((sampleStats == null) || (sampleStats.getN() < 5)) {
+            throw new IllegalArgumentException
+                ("insufficient data for t statistic");
+        }
+        return t(sampleStats.getMean(), mu, sampleStats.getVariance(), 
+            sampleStats.getN());
+    }
+    
+    /**
+     * @param sampleStats1 Univariate describing data from the first sample
+     * @param sampleStats2 Univariate describing data from the second sample
+     * @return t statistic
+     * @throws IllegalArgumentException if the precondition is not met
+     */
+    public double t(Univariate sampleStats1, Univariate sampleStats2) 
+        throws IllegalArgumentException {
+        if ((sampleStats1 == null) || (sampleStats2 == null || 
+            Math.min(sampleStats1.getN(), sampleStats2.getN()) < 5)) {
+            throw new IllegalArgumentException
+                ("insufficient data for t statistic");
+        }
+        return t(sampleStats1.getMean(), sampleStats2.getMean(), 
+            sampleStats1.getVariance(), sampleStats2.getVariance(), 
+            (double) sampleStats1.getN(), (double) sampleStats2.getN());
+    }
+    
+    /**
+     * @param sampleStats1 Univariate describing data from the first sample
+     * @param sampleStats2 Univariate describing data from the second sample
+     * @return p-value for t-test
+     * @throws IllegalArgumentException if the precondition is not met
+     */
+    public double tTest(Univariate sampleStats1, Univariate sampleStats2)
+        throws IllegalArgumentException {
+        if ((sampleStats1 == null) || (sampleStats2 == null || 
+            Math.min(sampleStats1.getN(), sampleStats2.getN()) < 5)) {
+            throw new IllegalArgumentException
+                ("insufficient data for t statistic");
+        }
+         return tTest(sampleStats1.getMean(), sampleStats2.getMean(), 
+            sampleStats1.getVariance(), sampleStats2.getVariance(), 
+            (double) sampleStats1.getN(), (double) sampleStats2.getN());
+    }
+    
+    /**
+     * @param sampleStats1 Univariate describing sample data values
+     * @param sampleStats2 Univariate describing sample data values
+     * @param alpha significance level of the test
+     * @return true if the null hypothesis can be rejected with 
+     * confidence 1 - alpha
+     * @throws IllegalArgumentException if the preconditions are not met
+     */
+    public boolean tTest(Univariate sampleStats1, Univariate sampleStats2, 
+    double alpha) throws IllegalArgumentException {
+        if ((alpha <= 0) || (alpha > 0.5)) {
+            throw new IllegalArgumentException
+                ("bad significance level: " + alpha);
+        }
+        return (tTest(sampleStats1, sampleStats2) < alpha);
+    }
+    
+    /**
+     * @param mu constant value to compare sample mean against
+     * @param sampleStats Univariate describing sample data values
+     * @param alpha significance level of the test
+     * @return p-value
+     * @throws IllegalArgumentException if the precondition is not met
+     */
+    public boolean tTest(double mu, Univariate sampleStats, double alpha)
+        throws IllegalArgumentException {
+        if ((alpha <= 0) || (alpha > 0.5)) {
+           throw new IllegalArgumentException
+                ("bad significance level: " + alpha);
+        }   
+        return (tTest(mu, sampleStats) < alpha);
+    }
+    
+    /**
+     * @param mu constant value to compare sample mean against
+     * @param sampleStats Univariate describing sample data
+     * @return p-value
+     * @throws IllegalArgumentException if the precondition is not met
+     */
+    public double tTest(double mu, Univariate sampleStats)
+        throws IllegalArgumentException {
+        if ((sampleStats == null) || (sampleStats.getN() < 5)) {
+            throw new IllegalArgumentException
+                ("insufficient data for t statistic");
+        }
+        return tTest(sampleStats.getMean(), mu, sampleStats.getVariance(),
+            sampleStats.getN());
+    }
+    
+    //----------------------------------------------- Private methods 
+    
+    /**
+     * Computes approximate degrees of freedom for 2-sample t-test.
+     * 
+     * @param v1 first sample variance
+     * @param v2 second sample variance
+     * @param n1 first sample n
+     * @param n2 second sample n
+     * @return approximate degrees of freedom
+     */
+    private double df(double v1, double v2, double n1, double n2) {
+        return (((v1 / n1) + (v2 / n2)) * ((v1 / n1) + (v2 / n2))) /
+            ((v1 * v1) / (n1 * n1 * (n1 - 1d)) + 
+                (v2 * v2) / (n2 * n2 * (n2 - 1d)));       
+    }
+    
+     /**
+     * Computes t test statistic for 2-sample t-test.
+     * 
+     * @param m1 first sample mean
+     * @param m2 second sample mean
+     * @param v1 first sample variance
+     * @param v2 second sample variance
+     * @param n1 first sample n
+     * @param n2 second sample n
+     * @return t test statistic
+     */
+    private double t(double m1, double m2, double v1, double v2, double n1, 
+        double n2) {
+        return (m1 - m2) / Math.sqrt((v1 / n1) + (v2 / n2));
+    }
+    
+    /**
+     * Computes t test statistic for 1-sample t-test.
+     * 
+     * @param m sample mean
+     * @param mu constant to test against
+     * @param v sample variance
+     * @param n sample n
+     * @return t test statistic
+     */
+    private double t(double m, double mu, double v, double n) {
+        return (m - mu) / Math.sqrt(v / n);
+    }
+    
+    /**
+     * Computes p-value for 2-sided, 2-sample t-test.
+     * 
+     * @param m1 first sample mean
+     * @param m2 second sample mean
+     * @param v1 first sample variance
+     * @param v2 second sample variance
+     * @param n1 first sample n
+     * @param n2 second sample n
+     * @return p-value
+     */
+    private double tTest(double m1, double m2, double v1, double v2, double n1, 
+        double n2) {
+        double t = Math.abs(t(m1, m2, v1, v2, n1, n2));
+        TDistribution tDistribution = 
+            DistributionFactory.newInstance().createTDistribution
+                (df(v1, v2, n1, n2));
+        return 1.0 - tDistribution.cummulativeProbability(-t, t); 
+    }
+    
+    /**
+     * Computes p-value for 2-sided, 1-sample t-test.
+     * 
+     * @param m sample mean
+     * @param mu constant to test against
+     * @param v sample variance
+     * @param n sample n
+     * @return p-value
+     */
+    private double tTest(double m, double mu, double v, double n) {
+    double t = Math.abs(t(m, mu, v, n)); 
+        TDistribution tDistribution = 
+            DistributionFactory.newInstance().createTDistribution
+                (n - 1);
+        return 1.0 - tDistribution.cummulativeProbability(-t, t);
+    }          
+}
diff --git a/src/java/org/apache/commons/math/stat/Univariate.java b/src/java/org/apache/commons/math/stat/Univariate.java
new file mode 100644
index 0000000..7a19ca0
--- /dev/null
+++ b/src/java/org/apache/commons/math/stat/Univariate.java
@@ -0,0 +1,212 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.commons.math.stat;
+
+/**
+ *
+ * Accumulates univariate statistics for values fed in 
+ * through the addValue() method. This interface defines the LCD interface
+ * which all Univariate implementations must implement. <p>
+ * A "rolling" capability is supported by all implementations with the following
+ * contract: <p>
+ * <i> Setting the windowSize property limits the domain of all statistics to
+ * the last <code>windowSize</code> values added.</i><p>
+ * We use the term <i>available values</i> throughout the API documentation
+ * to refer to these values when the windowSize is set. For example, if the
+ * windowSize is set to 3 and the values {1,2,3,4,5} have been added <strong>
+ * in that order</strong> then the <i>available values</i> are {3,4,5} and all
+ * reported statistics will be based on these values<p>
+ * The default windowSize is "infinite" -- i.e., all values added are included
+ * in all computations.
+ * @version $Revision: 1.13 $ $Date: 2003/11/14 22:22:18 $
+*/
+public interface Univariate extends Applyable{
+    /**
+     * A LEPTOKURTIC set has a positive kurtosis (a high peak) 
+     */
+    public static int LEPTOKURTIC = 1;
+    /**
+     * A MESOKURTIC set has a kurtosis of 0 - it is a normal distribution
+     */
+    public static int MESOKURTIC = 0;
+    /**
+     * A PLATYKURTIC set has a negative kurtosis (a flat "peak")
+     */
+    public static int PLATYKURTIC = -1;
+
+    /**
+     * Adds the value to the set of numbers
+     * @param v the value to be added 
+     */
+    void addValue(double v);
+
+    /** 
+     * Returns the <a href="http://www.xycoon.com/arithmetic_mean.htm">
+     * arithmetic mean </a> of the available values 
+     * @return The mean or Double.NaN if no values have been added.
+     */
+    double getMean();
+
+    /** 
+     * Returns the <a href="http://www.xycoon.com/geometric_mean.htm">
+     * geometric mean </a> of the available values
+     * @return The geometricMean, Double.NaN if no values have been added, 
+     * or if the productof the available values is less than or equal to 0.
+     */
+    double getGeometricMean();
+
+    /** 
+     * Returns the variance of the available values.
+     * @return The variance, Double.NaN if no values have been added 
+     * or 0.0 for a single value set.  
+     */
+    double getVariance();
+
+    /** 
+     * Returns the standard deviation of the available values.
+     * @return The standard deviation, Double.NaN if no values have been added 
+     * or 0.0 for a single value set. 
+     */
+    double getStandardDeviation();
+
+    /**
+     * Returns the skewness of the available values. Skewness is a 
+     * measure of the assymetry of a given distribution.
+     * @return The skewness, Double.NaN if no values have been added 
+     * or 0.0 for a value set &lt;=2. 
+     */
+    double getSkewness();
+
+    /**
+     * Returns the Kurtosis of the available values. Kurtosis is a 
+     * measure of the "peakedness" of a distribution
+     * @return The kurtosis, Double.NaN if no values have been added, or 0.0 
+     * for a value set &lt;=3. 
+     */
+    double getKurtosis();
+
+    /**
+     * Returns the Kurtosis "classification" a distribution can be 
+     * leptokurtic (high peak), platykurtic (flat peak), 
+     * or mesokurtic (zero kurtosis).  
+     * 
+     * @return A static constant defined in this interface, 
+     *         StoredDeviation.LEPTOKURITC, StoredDeviation.PLATYKURTIC, or 
+     *         StoredDeviation.MESOKURTIC
+     */
+    int getKurtosisClass();
+    
+    /** 
+     * Returns the maximum of the available values
+     * @return The max or Double.NaN if no values have been added.
+     */
+    double getMax();
+
+    /** 
+    * Returns the minimum of the available values
+    * @return The min or Double.NaN if no values have been added.
+    */
+    double getMin();
+
+    /** 
+     * Returns the number of available values
+     * @return The number of available values
+     */
+    int getN();
+
+    /**
+     * Returns the sum of the values that have been added to Univariate.
+     * @return The sum or Double.NaN if no values have been added
+     */
+    double getSum();
+
+    /**
+     * Returns the sum of the squares of the available values.
+     * @return The sum of the squares or Double.NaN if no 
+     * values have been added.
+     */
+    double getSumsq();
+
+    /** 
+     * Resets all statistics and storage
+     */
+    void clear();
+
+    /**
+     * This constant signals that a Univariate implementation
+     * takes into account the contributions of an infinite number of
+     * elements.  In other words, if getWindow returns this
+     * constant, there is, in effect, no "window".
+     */
+    static final int INFINITE_WINDOW = -1;
+
+    /**
+     * Univariate has the ability to return only measures for the
+     * last N elements added to the set of values.
+     * @return The current window size or -1 if its Infinite.
+     */
+
+    int getWindowSize();
+
+    /**
+     * WindowSize controls the number of values which contribute 
+     * to the values returned by Univariate.  For example, if 
+     * windowSize is set to 3 and the values {1,2,3,4,5} 
+     * have been added <strong> in that order</strong> 
+     * then the <i>available values</i> are {3,4,5} and all
+     * reported statistics will be based on these values
+     * @param windowSize sets the size of the window.
+     */
+    void setWindowSize(int windowSize);
+}
diff --git a/src/java/org/apache/commons/math/stat/UnivariateImpl.java b/src/java/org/apache/commons/math/stat/UnivariateImpl.java
new file mode 100644
index 0000000..456916c
--- /dev/null
+++ b/src/java/org/apache/commons/math/stat/UnivariateImpl.java
@@ -0,0 +1,180 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.commons.math.stat;
+
+import java.io.Serializable;
+
+import org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic;
+import org.apache.commons.math.stat.univariate.UnivariateStatistic;
+import org.apache.commons.math.util.FixedDoubleArray;
+
+/**
+ *
+ * Accumulates univariate statistics for values fed in
+ * through the addValue() method.  Does not store raw data values.
+ * All data are represented internally as doubles.
+ * Integers, floats and longs can be added, but they will be converted
+ * to doubles by addValue().
+ *
+ * @version $Revision: 1.25 $ $Date: 2003/11/14 22:22:18 $
+*/
+public class UnivariateImpl
+    extends AbstractUnivariate
+    implements Univariate, Serializable {
+
+    /** fixed storage */
+    private FixedDoubleArray storage = null;
+
+    /** Creates new univariate with an infinite window */
+    public UnivariateImpl() {
+        super();
+    }
+
+    /** 
+     * Creates a new univariate with a fixed window 
+     * @param window Window Size
+     */
+    public UnivariateImpl(int window) {
+        super(window);
+        storage = new FixedDoubleArray(window);
+    }
+
+    /**
+     *  If windowSize is set to Infinite, moments 
+     *  are calculated using the following 
+     * <a href="http://www.spss.com/tech/stat/Algorithms/11.5/descriptives.pdf">
+     * recursive strategy
+     * </a>.
+     * Otherwise, stat methods delegate to StatUtils.
+     * @see org.apache.commons.math.stat.Univariate#addValue(double)
+     */
+    public void addValue(double value) {
+
+        if (storage != null) {
+            /* then all getters deligate to StatUtils
+             * and this clause simply adds/rolls a value in the storage array 
+             */
+            if (getWindowSize() == n) {
+                storage.addElementRolling(value);
+            } else {
+                n++;
+                storage.addElement(value);
+            }
+
+        } else {
+            /* If the windowSize is infinite don't store any values and there 
+             * is no need to discard the influence of any single item.
+             */
+            n++;
+            min.increment(value);
+            max.increment(value);
+            sum.increment(value);
+            sumsq.increment(value);
+            sumLog.increment(value);
+            geoMean.increment(value);
+
+            moment.increment(value);
+            //mean.increment(value);
+            //variance.increment(value);
+            //skewness.increment(value);
+            //kurtosis.increment(value);
+        }
+    }
+
+    /**
+     * Generates a text report displaying
+     * univariate statistics from values that
+     * have been added.
+     * @return String with line feeds displaying statistics
+     */
+    public String toString() {
+        StringBuffer outBuffer = new StringBuffer();
+        outBuffer.append("UnivariateImpl:\n");
+        outBuffer.append("n: " + getN() + "\n");
+        outBuffer.append("min: " + getMin() + "\n");
+        outBuffer.append("max: " + getMax() + "\n");
+        outBuffer.append("mean: " + getMean() + "\n");
+        outBuffer.append("std dev: " + getStandardDeviation() + "\n");
+        outBuffer.append("skewness: " + getSkewness() + "\n");
+        outBuffer.append("kurtosis: " + getKurtosis() + "\n");
+        return outBuffer.toString();
+    }
+
+    /**
+     * @see org.apache.commons.math.stat.Univariate#clear()
+     */
+    public void clear() {
+        super.clear();
+        if (getWindowSize() != INFINITE_WINDOW) {
+            storage = new FixedDoubleArray(getWindowSize());
+        }
+    }
+
+    /**
+     * Apply the given statistic to this univariate collection.
+     * @param stat the statistic to apply
+     * @return the computed value of the statistic.
+     */
+    public double apply(UnivariateStatistic stat) {
+        
+        if (storage != null) {
+            return stat.evaluate(storage.getValues(), storage.start(), storage.getNumElements());
+        } else if (stat instanceof StorelessUnivariateStatistic) {
+            return ((StorelessUnivariateStatistic) stat).getResult();
+        }
+
+        return Double.NaN;
+    }
+
+}
\ No newline at end of file
diff --git a/src/java/org/apache/commons/math/stat/package.html b/src/java/org/apache/commons/math/stat/package.html
new file mode 100644
index 0000000..41e8b8d
--- /dev/null
+++ b/src/java/org/apache/commons/math/stat/package.html
@@ -0,0 +1,4 @@
+<html>
+	<!-- $Revision: 1.4 $ $Date: 2003/11/14 22:22:18 $ -->
+	<body>Data storage, manipulation and summary routines.</body>
+</html>
diff --git a/src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java b/src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java
new file mode 100644
index 0000000..ec2c75d
--- /dev/null
+++ b/src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java
@@ -0,0 +1,104 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.commons.math.stat.univariate;
+
+/**
+ *
+ * Abstract Implementation for StorelessUnivariateStatistics.
+ * Provides the ability to extend polymophically so that
+ * indiviual statistics do not need to implement these methods unless
+ * there are better algorithms for handling the calculation.
+ * @version $Revision: 1.11 $ $Date: 2003/11/14 22:22:21 $
+ */
+public abstract class AbstractStorelessUnivariateStatistic
+    extends AbstractUnivariateStatistic
+    implements StorelessUnivariateStatistic {
+
+    /**
+     * This implements the AbstractUnivariateStatistic impl to funnel
+     * calculation off to the instantanious increment method. In most cases of
+     * StorelessUnivariateStatistic this is never really used because more
+     * efficient algorithms are available for that statistic.
+     * @see org.apache.commons.math.stat.univariate.UnivariateStatistic#evaluate(double[], int, int)
+     */
+    public double evaluate(
+        final double[] values,
+        final int begin,
+        final int length) {
+        if (this.test(values, begin, length)) {
+            this.clear();
+            int l = begin + length;
+            for (int i = begin; i < l; i++) {
+                increment(values[i]);
+            }
+        }
+        return getResult();
+    }
+
+    /**
+     * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#clear()
+     */
+    public abstract void clear();
+
+    /**
+     * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getResult()
+     */
+    public abstract double getResult();
+
+    /**
+     * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#increment(double)
+     */
+    public abstract void increment(final double d);
+
+}
\ No newline at end of file
diff --git a/src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java b/src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java
new file mode 100644
index 0000000..92f2b63
--- /dev/null
+++ b/src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java
@@ -0,0 +1,118 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.commons.math.stat.univariate;
+
+/**
+ * Abstract Implementation for UnivariateStatistics.
+ * Provides the ability to extend polymophically so that
+ * indiviual statistics do not need to implement these methods.
+ * @version $Revision: 1.10 $ $Date: 2003/11/14 22:22:21 $
+ */
+public abstract class AbstractUnivariateStatistic
+    implements UnivariateStatistic {
+
+    /**
+     * This implementation provides a simple wrapper around the double[]
+     * and passes the request onto the evaluate(DoubleArray da) method.
+     * @see org.apache.commons.math.stat.univariate.UnivariateStatistic#evaluate(double[])
+     */
+    public double evaluate(final double[] values) {
+        return evaluate(values, 0, values.length);
+    }
+
+    /**
+     * Subclasses of AbstractUnivariateStatistc need to implement this method.
+     * @see org.apache.commons.math.stat.univariate.UnivariateStatistic#evaluate(double[], int, int)
+     */
+    public abstract double evaluate(
+        final double[] values,
+        final int begin,
+        final int length);
+
+    /**
+     * this protected test method used by all methods to verify the content
+     * of the array and indicies are correct.
+     * @param values Is a double[] containing the values
+     * @param begin processing at this point in the array
+     * @param length processing at this point in the array
+     * @return this is used to determine if the array is of 0 length or not,
+     * it is used by an individual statistic to determine if continuation
+     * of a statistical calculation should continue or return NaN.
+     */
+    protected boolean test(
+        final double[] values,
+        final int begin,
+        final int length) {
+
+        if (length > values.length) {
+            throw new IllegalArgumentException("length > values.length");
+        }
+
+        if (begin + length > values.length) {
+            throw new IllegalArgumentException(
+                "begin + length > values.length");
+        }
+
+        if (values == null) {
+            throw new IllegalArgumentException("input value array is null");
+        }
+
+        if (values.length == 0 || length == 0) {
+            return false;
+        }
+
+        return true;
+
+    }
+}
\ No newline at end of file
diff --git a/src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java b/src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java
new file mode 100644
index 0000000..07162de
--- /dev/null
+++ b/src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java
@@ -0,0 +1,90 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.commons.math.stat.univariate;
+
+/**
+ * Extends the capabilities of UnivariateStatistic with a statefull incremental
+ * strategy through three methods for calculating a statistic without having to
+ * maintain a double[] of the values. Because a StorelessUnivariateStatistic
+ * does not require that a double[] storage structure be maintained with the
+ * values in it, there are only a subset of known statistics can actually be
+ * implemented using it. If a Statistic cannot be implemented in a Storeless
+ * approach it should implement the UnivariateStatistic interface directly
+ * instead.
+ * @version $Revision: 1.11 $ $Date: 2003/11/14 22:22:21 $
+ */
+public interface StorelessUnivariateStatistic extends UnivariateStatistic {
+
+    /**
+     * Increments the internal state of the Storagless
+     * Implementation.
+     * @param d is the value to increment the state by.
+     */
+    void increment(double d);
+
+    /**
+     * Returns the current state of the statistic after the
+     * last increment.
+     * @return value of the statistic, Double.NaN if it
+     * has been cleared or just instantiated.
+     */
+    double getResult();
+
+
+    /**
+     * Clears all the internal state of the Statistic
+     */
+    void clear();
+
+}
\ No newline at end of file
diff --git a/src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java b/src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java
new file mode 100644
index 0000000..12817f9
--- /dev/null
+++ b/src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java
@@ -0,0 +1,84 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.commons.math.stat.univariate;
+
+/**
+ * UnivariateStatistic interface provides methods to evaluate
+ * double[] based content using an implemented statistical approach.
+ * The interface provides two "stateless" simple methods to calculate
+ * a statistic from a double[] based parameter.
+ * @version $Revision: 1.10 $ $Date: 2003/11/14 22:22:21 $
+ */
+public interface UnivariateStatistic {
+
+    /**
+     * Evaluates the double[] returning the result of the evaluation.
+     * @param values Is a double[] containing the values
+     * @return the result of the evaluation or Double.NaN
+     * if the array is empty
+     */
+    double evaluate(double[] values);
+
+    /**
+     * Evaluates part of a double[] returning the result
+     * of the evaluation.
+     * @param values Is a double[] containing the values
+     * @param begin processing at this point in the array
+     * @param length processing at this point in the array
+     * @return the result of the evaluation or Double.NaN
+     * if the array is empty
+     */
+    double evaluate(double[] values, int begin, int length);
+
+}
\ No newline at end of file
diff --git a/src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java b/src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java
new file mode 100644
index 0000000..78bd078
--- /dev/null
+++ b/src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java
@@ -0,0 +1,127 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.commons.math.stat.univariate.moment;
+
+import org.apache.commons.math.stat.univariate.AbstractStorelessUnivariateStatistic;
+
+/**
+ * FirstMoment.java
+ *
+ * The FirstMoment (arithmentic mean) is calculated using the following
+ * <a href="http://www.spss.com/tech/stat/Algorithms/11.5/descriptives.pdf">
+ * recursive strategy
+ * </a>. Both incremental and evaluation strategies currently use this approach.
+ * @version $Revision: 1.10 $ $Date: 2003/11/14 22:22:20 $
+ */
+public class FirstMoment extends AbstractStorelessUnivariateStatistic {
+
+    /** count of values that have been added */
+    protected int n = 0;
+
+    /** first moment of values that have been added */
+    protected double m1 = Double.NaN;
+
+    /**
+     * temporary internal state made available for
+     * higher order moments
+     */
+    protected double dev = 0.0;
+
+    /**
+     * temporary internal state made available for
+     * higher order moments
+     */
+    protected double v = 0.0;
+
+    /**
+     * temporary internal state made available for
+     * higher order moments
+     */
+    protected double n0 = 0.0;
+
+    /**
+     * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#increment(double)
+     */
+    public void increment(final double d) {
+        if (n < 1) {
+            m1 = 0.0;
+        }
+
+        n++;
+        dev = d - m1;
+        n0 = (double) n;
+        v = dev / n0;
+
+        m1 += v;
+    }
+
+    /**
+     * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#clear()
+     */
+    public void clear() {
+        m1 = Double.NaN;
+        n = 0;
+        dev = 0.0;
+        v = 0.0;
+        n0 = 0.0;
+    }
+
+    /**
+     * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getResult()
+     */
+    public double getResult() {
+        return m1;
+    }
+
+}
\ No newline at end of file
diff --git a/src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java b/src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java
new file mode 100644
index 0000000..965b338
--- /dev/null
+++ b/src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java
@@ -0,0 +1,115 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.commons.math.stat.univariate.moment;
+
+/**
+ * The FourthMoment is calculated using the following
+ * <a href="http://www.spss.com/tech/stat/Algorithms/11.5/descriptives.pdf">
+ * recursive strategy
+ * </a>. Both incremental and evaluation strategies currently use this approach.
+ * @version $Revision: 1.12 $ $Date: 2003/11/14 22:22:20 $
+ */
+public class FourthMoment extends ThirdMoment {
+
+    /** fourth moment of values that have been added */
+    protected double m4 = Double.NaN;
+
+    /** temporary internal state made available for higher order moments */
+    protected double prevM3 = 0.0;
+
+    /** temporary internal state made available for higher order moments */
+    protected double n3 = 0.0;
+
+
+    /**
+     * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#increment(double)
+     */
+    public void increment(final double d) {
+        if (n < 1) {
+            m4 = 0.0;
+            m3 = 0.0;
+            m2 = 0.0;
+            m1 = 0.0;
+        }
+
+        /* retain previous m3 */
+        prevM3 = m3;
+
+        /* increment m1, m2 and m3 (and prevM2, _n0, _n1, _n2, _v, _v2) */
+        super.increment(d);
+
+        n3 = (double) (n - 3);
+
+        m4 = m4 - (4.0 * v * prevM3) + (6.0 * v2 * prevM2) +
+            ((n0 * n0) - 3 * n1) * (v2 * v2 * n1 * n0);
+    }
+
+    /**
+     * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getResult()
+     */
+    public double getResult() {
+        return m4;
+    }
+
+    /**
+     * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#clear()
+     */
+    public void clear() {
+        super.clear();
+        m4 = Double.NaN;
+        prevM3 = 0.0;
+        n3 = 0.0;
+    }
+
+}
diff --git a/src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java b/src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java
new file mode 100644
index 0000000..84c4ad7
--- /dev/null
+++ b/src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java
@@ -0,0 +1,120 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.commons.math.stat.univariate.moment;
+
+import org.apache.commons.math.stat.univariate.summary.SumOfLogs;
+
+/**
+ * Returns the <a href="http://www.xycoon.com/geometric_mean.htm">
+ * geometric mean </a> of the available values
+ * @version $Revision: 1.13 $ $Date: 2003/11/14 22:22:20 $
+ */
+public class GeometricMean extends SumOfLogs {
+
+    /** */
+    protected int n = 0;
+
+    /** */
+    private double geoMean = Double.NaN;
+
+    /** */
+    private double lastSum = 0.0;
+
+    /**
+     * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#increment(double)
+     */
+    public void increment(final double d) {
+        n++;
+        super.increment(d);
+    }
+
+    /**
+     * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getResult()
+     */
+    public double getResult() {
+        if (lastSum != super.getResult() || n == 1) {
+            lastSum = super.getResult();
+            geoMean = Math.exp(lastSum / (double) n);
+        }
+        return geoMean;
+    }
+
+    /**
+     * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#clear()
+     */
+    public void clear() {
+        super.clear();
+        lastSum = 0.0;
+        geoMean = Double.NaN;
+        n = 0;
+    }
+
+    /**
+     * Returns the geometric mean for this collection of values
+     * @param values Is a double[] containing the values
+     * @param begin processing at this point in the array
+     * @param length processing at this point in the array
+     * @return the geometric mean or Double.NaN if the array is empty or
+     * any of the values are &lt;= 0.
+     * @see org.apache.commons.math.stat.univariate.UnivariateStatistic#evaluate(double[], int, int)
+     */
+    public double evaluate(
+        final double[] values,
+        final int begin,
+        final int length) {
+        return Math.exp(
+            super.evaluate(values, begin, length) / (double) length);
+    }
+
+}
\ No newline at end of file
diff --git a/src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java b/src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java
new file mode 100644
index 0000000..c145f74
--- /dev/null
+++ b/src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java
@@ -0,0 +1,218 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.commons.math.stat.univariate.moment;
+
+import org
+    .apache
+    .commons
+    .math
+    .stat
+    .univariate
+    .AbstractStorelessUnivariateStatistic;
+
+/**
+ * @version $Revision: 1.13 $ $Date: 2003/11/14 22:22:20 $
+ */
+public class Kurtosis extends AbstractStorelessUnivariateStatistic {
+
+    /** */
+    protected FourthMoment moment = null;
+
+    /** */
+    protected boolean incMoment = true;
+
+    /** */
+    private double kurtosis = Double.NaN;
+
+    /** */
+    private int n = 0;
+
+    /**
+     * Construct a Kurtosis
+     */
+    public Kurtosis() {
+        moment = new FourthMoment();
+    }
+
+    /**
+     * Construct a Kurtosis with an external moment
+     * @param m4 external Moment
+     */
+    public Kurtosis(final FourthMoment m4) {
+        incMoment = false;
+        this.moment = m4;
+    }
+
+    /**
+     * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#increment(double)
+     */
+    public void increment(final double d) {
+        if (incMoment) {
+            moment.increment(d);
+        }
+    }
+
+    /**
+     * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getResult()
+     */
+    public double getResult() {
+        if (n < moment.n) {
+            if (moment.n <= 0) {
+                kurtosis = Double.NaN;
+            }
+
+            double variance =
+                (moment.n < 1) ? 0.0 : moment.m2 / (double) (moment.n - 1);
+
+            if (moment.n <= 3 || variance < 10E-20) {
+                kurtosis = 0.0;
+            } else {
+                kurtosis =
+                    (moment.n0 * (moment.n0 + 1) * moment.m4 -
+                    3 * moment.m2 * moment.m2 * moment.n1) /
+                    (moment.n1 * moment.n2 * moment.n3 * variance * variance);
+            }
+            n = moment.n;
+        }
+
+        return kurtosis;
+    }
+
+    /**
+     * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#clear()
+     */
+    public void clear() {
+        if (incMoment) {
+            moment.clear();
+        }
+        kurtosis = Double.NaN;
+        n = 0;
+    }
+
+    /*UnvariateStatistic Approach */
+
+    /** */
+    Mean mean = new Mean();
+
+    /**
+     * Returns the kurtosis for this collection of values. Kurtosis is a
+     * measure of the "peakedness" of a distribution.  This algorithm uses a
+     * corrected two pass algorithm of the following
+     * <a href="http://lib-www.lanl.gov/numerical/bookcpdf/c14-1.pdf">
+     * corrected two pass formula (14.1.8)</a>, and also referenced in:
+     * <p>
+     * "Algorithms for Computing the Sample Variance: Analysis and
+     * Recommendations", Chan, T.F., Golub, G.H., and LeVeque, R.J.
+     * 1983, American Statistician, vol. 37, pp. 242?247.
+     * </p>
+     * @param values Is a double[] containing the values
+     * @param begin processing at this point in the array
+     * @param length processing at this point in the array
+     * @return the kurtosis of the values or Double.NaN if the array is empty
+     */
+    public double evaluate(
+        final double[] values,
+        final int begin,
+        final int length) {
+
+        // Initialize the kurtosis
+        double kurt = Double.NaN;
+
+        if (test(values, begin, length)) {
+            if (length <= 3) {
+                kurt = 0.0;
+            } else {
+
+                // Get the mean and the standard deviation
+                double m = mean.evaluate(values, begin, length);
+
+                // Calc the std, this is implemented here instead
+                // of using the standardDeviation method eliminate
+                // a duplicate pass to get the mean
+                double accum = 0.0;
+                double accum2 = 0.0;
+                for (int i = begin; i < begin + length; i++) {
+                    accum += Math.pow((values[i] - m), 2.0);
+                    accum2 += (values[i] - m);
+                }
+
+                double stdDev =
+                    Math.sqrt(
+                        (accum - (Math.pow(accum2, 2) / ((double) length))) /
+                        (double) (length - 1));
+
+                // Sum the ^4 of the distance from the mean divided by the
+                // standard deviation
+                double accum3 = 0.0;
+                for (int i = begin; i < begin + length; i++) {
+                    accum3 += Math.pow((values[i] - m) / stdDev, 4.0);
+                }
+
+                // Get N
+                double n0 = length;
+
+                double coefficientOne =
+                    (n0 * (n0 + 1)) / ((n0 - 1) * (n0 - 2) * (n0 - 3));
+                double termTwo =
+                    ((3 * Math.pow(n0 - 1, 2.0)) / ((n0 - 2) * (n0 - 3)));
+
+                // Calculate kurtosis
+                kurt = (coefficientOne * accum3) - termTwo;
+            }
+        }
+
+        return kurt;
+    }
+
+}
diff --git a/src/java/org/apache/commons/math/stat/univariate/moment/Mean.java b/src/java/org/apache/commons/math/stat/univariate/moment/Mean.java
new file mode 100644
index 0000000..0565750
--- /dev/null
+++ b/src/java/org/apache/commons/math/stat/univariate/moment/Mean.java
@@ -0,0 +1,140 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.commons.math.stat.univariate.moment;
+
+import org
+    .apache
+    .commons
+    .math
+    .stat
+    .univariate
+    .AbstractStorelessUnivariateStatistic;
+import org.apache.commons.math.stat.univariate.summary.Sum;
+
+/**
+ * Returns the <a href="http://www.xycoon.com/arithmetic_mean.htm">
+ * arithmetic mean </a> of the available values.
+ * @version $Revision: 1.12 $ $Date: 2003/11/14 22:22:20 $
+ */
+public class Mean extends AbstractStorelessUnivariateStatistic {
+
+    /** first moment of values that have been added */
+    protected FirstMoment moment = null;
+
+    /** */
+    protected boolean incMoment = true;
+
+    /** */
+    public Mean() {
+        moment = new FirstMoment();
+    }
+
+    /**
+     * Constructs a Mean with an External Moment.
+     * @param m1 the moment
+     */
+    public Mean(final FirstMoment m1) {
+        this.moment = m1;
+        incMoment = false;
+    }
+
+    /**
+     * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#increment(double)
+     */
+    public void increment(final double d) {
+        if (incMoment) {
+            moment.increment(d);
+        }
+    }
+
+    /**
+     * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#clear()
+     */
+    public void clear() {
+        if (incMoment) {
+            moment.clear();
+        }
+    }
+
+    /**
+     * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getResult()
+     */
+    public double getResult() {
+        return moment.m1;
+    }
+
+    /*UnvariateStatistic Approach */
+
+    /** */
+    protected Sum sum = new Sum();
+
+    /**
+     * Returns the <a href="http://www.xycoon.com/arithmetic_mean.htm">
+     * arithmetic mean </a> of a double[] of the available values.
+     * @param values Is a double[] containing the values
+     * @param begin processing at this point in the array
+     * @param length processing at this point in the array
+     * @return the mean of the values or Double.NaN if the array is empty
+     * @see org.apache.commons.math.stat.univariate.UnivariateStatistic#evaluate(double[], int, int)
+     */
+    public double evaluate(
+        final double[] values,
+        final int begin,
+        final int length) {
+        if (test(values, begin, length)) {
+            return sum.evaluate(values) / ((double) length);
+        }
+        return Double.NaN;
+    }
+}
\ No newline at end of file
diff --git a/src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java b/src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java
new file mode 100644
index 0000000..7249210
--- /dev/null
+++ b/src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java
@@ -0,0 +1,105 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.commons.math.stat.univariate.moment;
+
+/**
+ * The SecondMoment is calculated using the following
+ * <a href="http://www.spss.com/tech/stat/Algorithms/11.5/descriptives.pdf">
+ * recursive strategy
+ * </a>. Both incremental and evaluation strategies currently use this approach.
+ * @version $Revision: 1.11 $ $Date: 2003/11/14 22:22:20 $
+ */
+public class SecondMoment extends FirstMoment {
+
+    /** second moment of values that have been added */
+    protected double m2 = Double.NaN;
+
+    /** temporary internal state made availabel for higher order moments */
+    protected double n1 = 0.0;
+
+    /**
+     * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#increment(double)
+     */
+    public void increment(final double d) {
+        if (n < 1) {
+            m1 = m2 = 0.0;
+        }
+
+        /* increment m1 and _n0, _dev,  _v) */
+        super.increment(d);
+
+        n1 = n0 - 1;
+
+        /* increment and return m2 */
+        m2 += n1 * dev * v;
+
+    }
+
+    /**
+     * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#clear()
+     */
+    public void clear() {
+        super.clear();
+        m2 = Double.NaN;
+        n1 = 0.0;
+    }
+
+    /**
+     * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getResult()
+     */
+    public double getResult() {
+        return m2;
+    }
+
+}
diff --git a/src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java b/src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java
new file mode 100644
index 0000000..2c68c73
--- /dev/null
+++ b/src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java
@@ -0,0 +1,204 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.commons.math.stat.univariate.moment;
+
+import org.apache.commons.math.stat.univariate.AbstractStorelessUnivariateStatistic;
+
+/**
+ * @version $Revision: 1.13 $ $Date: 2003/11/14 22:22:20 $
+ */
+public class Skewness extends AbstractStorelessUnivariateStatistic {
+
+    /** */
+    protected ThirdMoment moment = null;
+
+    /** */
+    protected boolean incMoment = true;
+
+    /** */
+    protected double skewness = Double.NaN;
+
+    /** */
+    private int n = 0;
+
+    /**
+     * Constructs a Skewness
+     */
+    public Skewness() {
+        moment = new ThirdMoment();
+    }
+
+    /**
+     * Constructs a Skewness with an external moment
+     * @param m3 external moment
+     */
+    public Skewness(final ThirdMoment m3) {
+        incMoment = false;
+        this.moment = m3;
+    }
+
+    /**
+     * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#increment(double)
+     */
+    public void increment(final double d) {
+        if (incMoment) {
+            moment.increment(d);
+        }
+    }
+
+    /**
+     * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getResult()
+     */
+    public double getResult() {
+        if (n < moment.n) {
+            if (moment.n <= 0) {
+                skewness = Double.NaN;
+            }
+
+            double variance =
+                (moment.n < 1) ? 0.0 : moment.m2 / (double) (moment.n - 1);
+
+            if (moment.n <= 2 || variance < 10E-20) {
+                skewness = 0.0;
+            } else {
+                skewness = (moment.n0 * moment.m3) /
+                    (moment.n1 * moment.n2 * Math.sqrt(variance) * variance);
+            }
+            n = moment.n;
+        }
+        return skewness;
+    }
+
+    /**
+     * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#clear()
+     */
+    public void clear() {
+        if (incMoment) {
+            moment.clear();
+        }
+        skewness = Double.NaN;
+        n = 0;
+    }
+
+    /*UnvariateStatistic Approach */
+
+    /** */
+    Mean mean = new Mean();
+
+    /**
+     * Returns the skewness of a collection of values.  Skewness is a
+     * measure of the assymetry of a given distribution.
+     * This algorithm uses a corrected two pass algorithm of the following
+     * <a href="http://lib-www.lanl.gov/numerical/bookcpdf/c14-1.pdf">
+     * corrected two pass formula (14.1.8)</a>, and also referenced in
+     * <p>
+     * "Algorithms for Computing the Sample Variance: Analysis and
+     * Recommendations", Chan, T.F., Golub, G.H., and LeVeque, R.J.
+     * 1983, American Statistician, vol. 37, pp. 242?247.
+     * </p>
+     * @param values Is a double[] containing the values
+     * @param begin processing at this point in the array
+     * @param length processing at this point in the array
+     * @return the skewness of the values or Double.NaN if the array is empty
+     * @see org.apache.commons.math.stat.univariate.UnivariateStatistic#evaluate(double[], int, int)
+     */
+    public double evaluate(
+        final double[] values,
+        final int begin,
+        final int length) {
+
+        // Initialize the skewness
+        double skew = Double.NaN;
+
+        if (test(values, begin, length)) {
+
+            if (length <= 2) {
+                skew = 0.0;
+            } else {
+                // Get the mean and the standard deviation
+                double m = mean.evaluate(values, begin, length);
+
+                // Calc the std, this is implemented here instead
+                // of using the standardDeviation method eliminate
+                // a duplicate pass to get the mean
+                double accum = 0.0;
+                double accum2 = 0.0;
+                for (int i = begin; i < begin + length; i++) {
+                    accum += Math.pow((values[i] - m), 2.0);
+                    accum2 += (values[i] - m);
+                }
+                double stdDev =
+                    Math.sqrt(
+                        (accum - (Math.pow(accum2, 2) / ((double) length))) /
+                            (double) (length - 1));
+
+                // Calculate the skew as the sum the cubes of the distance
+                // from the mean divided by the standard deviation.
+                double accum3 = 0.0;
+                for (int i = begin; i < begin + length; i++) {
+                    accum3 += Math.pow((values[i] - m) / stdDev, 3.0);
+                }
+
+                // Get N
+                double n0 = length;
+
+                // Calculate skewness
+                skew = (n0 / ((n0 - 1) * (n0 - 2))) * accum3;
+            }
+        }
+
+        return skew;
+    }
+
+}
diff --git a/src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java b/src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java
new file mode 100644
index 0000000..e32dee2
--- /dev/null
+++ b/src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java
@@ -0,0 +1,138 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.commons.math.stat.univariate.moment;
+
+/**
+ *
+ * @version $Revision: 1.11 $ $Date: 2003/11/14 22:22:20 $
+ */
+public class StandardDeviation extends Variance {
+
+    /** */
+    protected double std = Double.NaN;
+
+    /** */
+    private double lastVar = 0.0;
+
+    /**
+     * Constructs a StandardDeviation
+     */
+    public StandardDeviation() {
+        super();
+    }
+
+    /**
+     * Constructs a StandardDeviation with an external moment
+     * @param m2 the external moment
+     */
+    public StandardDeviation(final SecondMoment m2) {
+        super(m2);
+    }
+
+    /**
+     * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#increment(double)
+     */
+    public void increment(final double d) {
+        super.increment(d);
+    }
+
+    /**
+     * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getResult()
+     */
+    public double getResult() {
+        if (lastVar != super.getResult()) {
+            lastVar = super.getResult();
+            if (Double.isNaN(lastVar)) {
+                std = Double.NaN;
+            } else if (lastVar == 0.0) {
+                std = 0.0;
+            } else {
+                std = Math.sqrt(lastVar);
+            }
+        }
+        return std;
+    }
+
+    /**
+     * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#clear()
+     */
+    public void clear() {
+        super.clear();
+        lastVar = 0.0;
+    }
+
+    /**
+     * Returns the Standard Deviation on an array of values.
+     * @param values Is a double[] containing the values
+     * @param begin processing at this point in the array
+     * @param length processing at this point in the array
+     * @return the result, Double.NaN if no values for an empty array
+     * or 0.0 for a single value set.
+     * @see org.apache.commons.math.stat.univariate.UnivariateStatistic#evaluate(double[], int, int)
+     */
+    public double evaluate(
+        final double[] values,
+        final int begin,
+        final int length) {
+
+        double var = super.evaluate(values, begin, length);
+
+        if (Double.isNaN(var)) {
+            return Double.NaN;
+        }
+
+        return var != 0.0 ? Math.sqrt(var) : 0.0;
+    }
+
+}
\ No newline at end of file
diff --git a/src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java b/src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java
new file mode 100644
index 0000000..f674d84
--- /dev/null
+++ b/src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java
@@ -0,0 +1,116 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.commons.math.stat.univariate.moment;
+
+/**
+ * The ThirdMoment (arithmentic mean) is calculated using the following
+ * <a href="http://www.spss.com/tech/stat/Algorithms/11.5/descriptives.pdf">
+ * recursive strategy
+ * </a>. Both incremental and evaluation strategies currently use this approach.
+ * @version $Revision: 1.11 $ $Date: 2003/11/14 22:22:20 $
+ */
+public class ThirdMoment extends SecondMoment {
+
+    /** third moment of values that have been added */
+    protected double m3 = Double.NaN;
+
+    /** temporary internal state made availabel for higher order moments */
+    protected double v2 = 0.0;
+
+    /** temporary internal state made availabel for higher order moments */
+    protected double n2 = 0.0;
+
+    /** temporary internal state made availabel for higher order moments */
+    protected double prevM2 = 0.0;
+
+    /**
+     * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#increment(double)
+     */
+    public void increment(final double d) {
+        if (n < 1) {
+            m3 = m2 = m1 = 0.0;
+        }
+
+        /* retain a reference to the last m2*/
+        prevM2 = m2;
+
+        /* increment m1 and m2 (and _n0, _n1, _v) */
+        super.increment(d);
+
+        v2 = v * v;
+        n2 = (double) (n - 2);
+
+        m3 = m3 - (3.0 * v * prevM2) + (n0 * n1 * n2 * v2 * v);
+
+    }
+
+    /**
+     * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getResult()
+     */
+    public double getResult() {
+        return m3;
+    }
+
+    /**
+     * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#clear()
+     */
+    public void clear() {
+        super.clear();
+        m3 = Double.NaN;
+        v2 = 0.0;
+        n2 = 0.0;
+        prevM2 = 0.0;
+    }
+
+}
\ No newline at end of file
diff --git a/src/java/org/apache/commons/math/stat/univariate/moment/Variance.java b/src/java/org/apache/commons/math/stat/univariate/moment/Variance.java
new file mode 100644
index 0000000..163d43e
--- /dev/null
+++ b/src/java/org/apache/commons/math/stat/univariate/moment/Variance.java
@@ -0,0 +1,187 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.commons.math.stat.univariate.moment;
+
+import org.apache.commons.math.stat.univariate.AbstractStorelessUnivariateStatistic;
+
+/**
+ *
+ * @version $Revision: 1.13 $ $Date: 2003/11/14 22:22:20 $
+ */
+public class Variance extends AbstractStorelessUnivariateStatistic {
+
+    /** SecondMoment is used in incremental calculation of Variance*/
+    protected SecondMoment moment = null;
+
+    /**
+     * Boolean test to determine if this Variance should also increment
+     * the second moment, this evaluates to false when this Variance is
+     * constructed with an external SecondMoment as a parameter.
+     */
+    protected boolean incMoment = true;
+
+    /**
+     * This property maintains the latest calculated
+     * variance for efficiency when getResult() is called
+     * many times between increments.
+     */
+    protected double variance = Double.NaN;
+
+    /**
+     * Maintains the current count of inrementations that have occured.
+     * If the external SecondMoment is used, the this is updated from
+     * that moments counter
+     */
+    protected int n = 0;
+
+    /**
+     * Constructs a Variance.
+     */
+    public Variance() {
+        moment = new SecondMoment();
+    }
+
+    /**
+     * Constructs a Variance based on an externalized second moment.
+     * @param m2 the SecondMoment (Thrid or Fourth moments work
+     * here as well.)
+     */
+    public Variance(final SecondMoment m2) {
+        incMoment = false;
+        this.moment = m2;
+    }
+    /**
+     * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#increment(double)
+     */
+    public void increment(final double d) {
+        if (incMoment) {
+            moment.increment(d);
+        }
+    }
+
+    /**
+     * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getResult()
+     */
+    public double getResult() {
+        if (n < moment.n) {
+            if (moment.n <= 0) {
+                variance = Double.NaN;
+            } else if (moment.n <= 1) {
+                variance = 0.0;
+            } else {
+                variance = moment.m2 / (moment.n0 - 1);
+            }
+            n = moment.n;
+        }
+
+        return variance;
+    }
+
+    /**
+     * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#clear()
+     */
+    public void clear() {
+        if (incMoment) {
+            moment.clear();
+        }
+        variance = Double.NaN;
+        n = 0;
+    }
+
+    /** Mean to be used in UnvariateStatistic evaluation approach. */
+    protected Mean mean = new Mean();
+
+    /**
+     * Returns the variance of the available values. This uses a corrected
+     * two pass algorithm of the following
+     * <a href="http://lib-www.lanl.gov/numerical/bookcpdf/c14-1.pdf">
+     * corrected two pass formula (14.1.8)</a>, and also referenced in:
+     * <p>
+     * "Algorithms for Computing the Sample Variance: Analysis and
+     * Recommendations", Chan, T.F., Golub, G.H., and LeVeque, R.J.
+     * 1983, American Statistician, vol. 37, pp. 242?247.
+     * </p>
+     * @param values Is a double[] containing the values
+     * @param begin processing at this point in the array
+     * @param length processing at this point in the array
+     * @return the result, Double.NaN if no values for an empty array
+     * or 0.0 for a single value set.
+     * @see org.apache.commons.math.stat.univariate.UnivariateStatistic#evaluate(double[], int, int)
+     */
+    public double evaluate(
+        final double[] values,
+        final int begin,
+        final int length) {
+
+        double var = Double.NaN;
+
+        if (test(values, begin, length)) {
+            if (length == 1) {
+                var = 0.0;
+            } else if (length > 1) {
+                double m = mean.evaluate(values, begin, length);
+                double accum = 0.0;
+                double accum2 = 0.0;
+                for (int i = begin; i < begin + length; i++) {
+                    accum += Math.pow((values[i] - m), 2.0);
+                    accum2 += (values[i] - m);
+                }
+                var = (accum - (Math.pow(accum2, 2) / ((double) length))) /
+                    (double) (length - 1);
+            }
+        }
+        return var;
+    }
+
+}
diff --git a/src/java/org/apache/commons/math/stat/univariate/moment/package.html b/src/java/org/apache/commons/math/stat/univariate/moment/package.html
new file mode 100644
index 0000000..1932f3d
--- /dev/null
+++ b/src/java/org/apache/commons/math/stat/univariate/moment/package.html
@@ -0,0 +1,4 @@
+<html>
+	<!-- $Revision: 1.3 $ $Date: 2003/11/14 22:22:20 $ -->
+	<body>Summary statistics based on moments.</body>
+</html>
diff --git a/src/java/org/apache/commons/math/stat/univariate/package.html b/src/java/org/apache/commons/math/stat/univariate/package.html
new file mode 100644
index 0000000..1e8a018
--- /dev/null
+++ b/src/java/org/apache/commons/math/stat/univariate/package.html
@@ -0,0 +1,25 @@
+<html>
+	<!-- $Revision: 1.4 $ $Date: 2003/11/14 22:22:21 $ -->
+	<body>
+		Generic univariate summary statistic objects.
+		
+		<h3>UnivariateStatistic API Usage Examples:</h3>
+		<h4>UnivariateStatistic:</h4>
+		<code>/* evaluation approach */<br/> double[] values = new double[] { 1, 2,
+			3, 4, 5 };<br/> <span style="font-weight: bold;">UnivariateStatistic stat
+			= new Mean();</span><br/> System.out.println("mean = " + <span
+			style="font-weight: bold;">stat.evaluate(values)</span>);<br/> </code>
+		<h4>StorelessUnivariateStatistic:</h4>
+		<code>/* incremental approach */<br/> double[] values = new double[] { 1, 2,
+			3, 4, 5 };<br/> <span style="font-weight: bold;">
+			StorelessUnivariateStatistic stat = new Mean();</span><br/> 
+			System.out.println("mean before adding a value is NaN = " + <span
+			style="font-weight: bold;">stat.getResult()</span>);<br/> for (int i = 0;
+			i &lt; values.length; i++) {<br/> &nbsp;&nbsp;&nbsp; <span
+			style="font-weight: bold;">stat.increment(values[i]);</span><br/> &nbsp;&nbsp;&nbsp;
+			System.out.println("current mean = " + <span style="font-weight: bold;">
+			stat2.getResult()</span>);<br/> }<br/> <span style="font-weight: bold;">
+			stat.clear();</span><br/> System.out.println("mean after clear is NaN = "
+			+ <span style="font-weight: bold;">stat.getResult()</span>);</code>
+	</body>
+</html>
diff --git a/src/java/org/apache/commons/math/stat/univariate/rank/Max.java b/src/java/org/apache/commons/math/stat/univariate/rank/Max.java
new file mode 100644
index 0000000..1ddaff1
--- /dev/null
+++ b/src/java/org/apache/commons/math/stat/univariate/rank/Max.java
@@ -0,0 +1,109 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.commons.math.stat.univariate.rank;
+
+import org
+    .apache
+    .commons
+    .math
+    .stat
+    .univariate
+    .AbstractStorelessUnivariateStatistic;
+
+/**
+ * @version $Revision: 1.11 $ $Date: 2003/11/14 22:22:21 $
+ */
+public class Max extends AbstractStorelessUnivariateStatistic {
+
+    /** */
+    private double value = Double.NaN;
+
+    /**
+     * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#increment(double)
+     */
+    public void increment(final double d) {
+        value = Double.isNaN(value) ? d : Math.max(value, d);
+    }
+
+    /**
+         * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#clear()
+         */
+    public void clear() {
+        value = Double.NaN;
+    }
+
+    /**
+     * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getResult()
+     */
+    public double getResult() {
+        return value;
+    }
+
+    /**
+     * @see org.apache.commons.math.stat.univariate.UnivariateStatistic#evaluate(double[], int, int)
+     */
+    public double evaluate(
+        final double[] values,
+        final int begin,
+        final int length) {
+        double max = Double.NaN;
+        if (test(values, begin, length)) {
+            max = values[begin];
+            for (int i = begin; i < begin + length; i++) {
+                max = (max > values[i]) ? max : values[i];
+            }
+        }
+        return max;
+    }
+}
\ No newline at end of file
diff --git a/src/java/org/apache/commons/math/stat/univariate/rank/Median.java b/src/java/org/apache/commons/math/stat/univariate/rank/Median.java
new file mode 100644
index 0000000..a2cd628
--- /dev/null
+++ b/src/java/org/apache/commons/math/stat/univariate/rank/Median.java
@@ -0,0 +1,69 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.commons.math.stat.univariate.rank;
+
+
+/**
+ * @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:21 $
+ */
+public class Median extends Percentile {
+
+    /**
+     *
+     */
+    public Median() {
+        super(50.0);
+    }
+
+}
\ No newline at end of file
diff --git a/src/java/org/apache/commons/math/stat/univariate/rank/Min.java b/src/java/org/apache/commons/math/stat/univariate/rank/Min.java
new file mode 100644
index 0000000..207caf4
--- /dev/null
+++ b/src/java/org/apache/commons/math/stat/univariate/rank/Min.java
@@ -0,0 +1,109 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.commons.math.stat.univariate.rank;
+
+import org
+    .apache
+    .commons
+    .math
+    .stat
+    .univariate
+    .AbstractStorelessUnivariateStatistic;
+
+/**
+ * @version $Revision: 1.11 $ $Date: 2003/11/14 22:22:21 $
+ */
+public class Min extends AbstractStorelessUnivariateStatistic {
+
+    /** */
+    private double value = Double.NaN;
+
+    /**
+     * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#increment(double)
+     */
+    public void increment(final double d) {
+        value = Double.isNaN(value) ? d : Math.min(value, d);
+    }
+
+    /**
+     * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#clear()
+     */
+    public void clear() {
+        value = Double.NaN;
+    }
+
+    /**
+     * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getResult()
+     */
+    public double getResult() {
+        return value;
+    }
+
+    /**
+     * @see org.apache.commons.math.stat.univariate.UnivariateStatistic#evaluate(double[], int, int)
+     */
+    public double evaluate(
+        final double[] values,
+        final int begin,
+        final int length) {
+        double min = Double.NaN;
+        if (test(values, begin, length)) {
+            min = values[begin];
+            for (int i = begin; i < begin + length; i++) {
+                min = (min < values[i]) ? min : values[i];
+            }
+        }
+        return min;
+    }
+}
\ No newline at end of file
diff --git a/src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java b/src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java
new file mode 100644
index 0000000..edd2463
--- /dev/null
+++ b/src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java
@@ -0,0 +1,174 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.commons.math.stat.univariate.rank;
+
+import java.util.Arrays;
+import org.apache.commons.math.stat.univariate.AbstractUnivariateStatistic;
+
+/**
+ * @version $Revision: 1.10 $ $Date: 2003/11/14 22:22:21 $
+ */
+public class Percentile extends AbstractUnivariateStatistic {
+
+    /** */
+    private double percentile = 0.0;
+
+    /**
+     * Constructs a Percentile with a default percentile
+     * value of 50.0.
+     */
+    public Percentile() {
+        super();
+        percentile = 50.0;
+    }
+
+    /**
+     * Constructs a Percentile with the specific percentile value.
+     * @param p the percentile
+     */
+    public Percentile(final double p) {
+        this.percentile = p;
+    }
+
+    /**
+     * Evaluates the double[] top the specified percentile.
+     * This does not alter the interal percentile state of the
+     * statistic.
+     * @param values Is a double[] containing the values
+     * @param p Is the percentile to evaluate to.
+     * @return the result of the evaluation or Double.NaN
+     * if the array is empty
+     */
+    public double evaluate(final double[] values, final double p) {
+        return evaluate(values, 0, values.length, p);
+    }
+
+    /**
+     * @see org.apache.commons.math.stat.univariate.UnivariateStatistic#evaluate(double[], int, int)
+     */
+    public double evaluate(
+        final double[] values,
+        final int start,
+        final int length) {
+
+        return evaluate(values, start, length, percentile);
+    }
+
+    /**
+     * Evaluates the double[] top the specified percentile.
+     * This does not alter the interal percentile state of the
+     * statistic.
+     * @param values Is a double[] containing the values
+     * @param begin processing at this point in the array
+     * @param length processing at this point in the array
+     * @param p Is the percentile to evaluate to.*
+     * @return the result of the evaluation or Double.NaN
+     * if the array is empty
+     */
+    public double evaluate(
+        final double[] values,
+        final int begin,
+        final int length,
+        final double p) {
+
+        test(values, begin, length);
+
+        if ((p > 100) || (p <= 0)) {
+            throw new IllegalArgumentException("invalid percentile value");
+        }
+        double n = (double) length;
+        if (n == 0) {
+            return Double.NaN;
+        }
+        if (n == 1) {
+            return values[begin]; // always return single value for n = 1
+        }
+        double pos = p * (n + 1) / 100;
+        double fpos = Math.floor(pos);
+        int intPos = (int) fpos;
+        double dif = pos - fpos;
+        double[] sorted = new double[length];
+        System.arraycopy(values, begin, sorted, 0, length);
+        Arrays.sort(sorted);
+
+        if (pos < 1) {
+            return sorted[0];
+        }
+        if (pos >= n) {
+            return sorted[length - 1];
+        }
+        double lower = sorted[intPos - 1];
+        double upper = sorted[intPos];
+        return lower + dif * (upper - lower);
+    }
+
+    /**
+     * The default internal state of this percentile can be set.
+     * This will return that value.
+     * @return percentile
+     */
+    public double getPercentile() {
+        return percentile;
+    }
+
+    /**
+     * The default internal state of this percentile can be set.
+     * This will setthat value.
+     * @param p a value between 0 <= p <= 100
+     */
+    public void setPercentile(final double p) {
+        percentile = p;
+    }
+
+}
\ No newline at end of file
diff --git a/src/java/org/apache/commons/math/stat/univariate/rank/package.html b/src/java/org/apache/commons/math/stat/univariate/rank/package.html
new file mode 100644
index 0000000..9cb79c1
--- /dev/null
+++ b/src/java/org/apache/commons/math/stat/univariate/rank/package.html
@@ -0,0 +1,4 @@
+<html>
+	<!-- $Revision: 1.3 $ $Date: 2003/11/14 22:22:21 $ -->
+	<body>Summary statistics based on ranks.</body>
+</html>
diff --git a/src/java/org/apache/commons/math/stat/univariate/summary/Product.java b/src/java/org/apache/commons/math/stat/univariate/summary/Product.java
new file mode 100644
index 0000000..0f8841d
--- /dev/null
+++ b/src/java/org/apache/commons/math/stat/univariate/summary/Product.java
@@ -0,0 +1,121 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.commons.math.stat.univariate.summary;
+
+import org
+    .apache
+    .commons
+    .math
+    .stat
+    .univariate
+    .AbstractStorelessUnivariateStatistic;
+
+/**
+ * @version $Revision: 1.11 $ $Date: 2003/11/14 22:22:23 $
+ */
+public class Product extends AbstractStorelessUnivariateStatistic {
+
+    /**
+     * The current Running Product.
+     */
+    private double value = Double.NaN;
+
+    /**
+     * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#increment(double)
+     */
+    public void increment(final double d) {
+        if (Double.isNaN(value)) {
+            value = d;
+        } else {
+            value *= d;
+        }
+    }
+
+    /**
+     * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getResult()
+     */
+    public double getResult() {
+        return value;
+    }
+
+    /**
+     * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#clear()
+     */
+    public void clear() {
+        value = Double.NaN;
+    }
+
+    /**
+     * Returns the product for this collection of values
+     * @param values Is a double[] containing the values
+     * @param begin processing at this point in the array
+     * @param length processing at this point in the array
+     * @return the product values or Double.NaN if the array is empty
+     * @see org.apache.commons.math.stat.univariate.UnivariateStatistic#evaluate(double[], int, int)
+     */
+    public double evaluate(
+        final double[] values,
+        final int begin,
+        final int length) {
+        double product = Double.NaN;
+        if (test(values, begin, length)) {
+            product = 1.0;
+            for (int i = begin; i < begin + length; i++) {
+                product *= values[i];
+            }
+        }
+        return product;
+    }
+
+}
\ No newline at end of file
diff --git a/src/java/org/apache/commons/math/stat/univariate/summary/Sum.java b/src/java/org/apache/commons/math/stat/univariate/summary/Sum.java
new file mode 100644
index 0000000..acfbb6f
--- /dev/null
+++ b/src/java/org/apache/commons/math/stat/univariate/summary/Sum.java
@@ -0,0 +1,115 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.commons.math.stat.univariate.summary;
+
+import org.apache.commons.math.stat.univariate.AbstractStorelessUnivariateStatistic;
+
+/**
+ * @version $Revision: 1.13 $ $Date: 2003/11/14 22:22:23 $
+ */
+public class Sum extends AbstractStorelessUnivariateStatistic {
+
+    /**
+     * The currently running sum.
+     */
+    private double value = Double.NaN;
+
+    /**
+     * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#increment(double)
+     */
+    public void increment(final double d) {
+        if (Double.isNaN(value)) {
+            value = d;
+        } else {
+            value += d;
+        }
+    }
+
+    /**
+     * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getResult()
+     */
+    public double getResult() {
+        return value;
+    }
+
+    /**
+     * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#clear()
+     */
+    public void clear() {
+        value = Double.NaN;
+    }
+
+    /**
+     * The sum of the values that have been added to Univariate.
+     * @param values Is a double[] containing the values
+     * @param begin processing at this point in the array
+     * @param length processing at this point in the array
+     * @return the sum of the values or Double.NaN if the array is empty
+     * @see org.apache.commons.math.stat.univariate.UnivariateStatistic#evaluate(double[], int, int)
+     */
+    public double evaluate(
+        final double[] values,
+        final int begin,
+        final int length) {
+        double sum = Double.NaN;
+        if (test(values, begin, length)) {
+            sum = 0.0;
+            for (int i = begin; i < begin + length; i++) {
+                sum += values[i];
+            }
+        }
+        return sum;
+    }
+
+}
diff --git a/src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java b/src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java
new file mode 100644
index 0000000..24af058
--- /dev/null
+++ b/src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java
@@ -0,0 +1,125 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.commons.math.stat.univariate.summary;
+
+import org
+    .apache
+    .commons
+    .math
+    .stat
+    .univariate
+    .AbstractStorelessUnivariateStatistic;
+
+/**
+ * @version $Revision: 1.11 $ $Date: 2003/11/14 22:22:23 $
+ */
+public class SumOfLogs extends AbstractStorelessUnivariateStatistic {
+
+    /**
+     * The currently running value
+     */
+    private double value = Double.NaN;
+
+    /** */
+    private boolean init = true;
+
+    /**
+     * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#increment(double)
+     */
+    public void increment(final double d) {
+        if (init) {
+            value = Math.log(d);
+            init = false;
+        } else {
+            value += Math.log(d);
+        }
+    }
+
+    /**
+     * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getResult()
+     */
+    public double getResult() {
+        return value;
+    }
+
+    /**
+     * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#clear()
+     */
+    public void clear() {
+        value = Double.NaN;
+        init = true;
+    }
+
+    /**
+     * Returns the sum of the natural logs for this collection of values
+     * @param values Is a double[] containing the values
+     * @param begin processing at this point in the array
+     * @param length processing at this point in the array
+     * @return the sumLog value or Double.NaN if the array is empty
+     * @see org.apache.commons.math.stat.univariate.UnivariateStatistic#evaluate(double[], int, int)
+     */
+    public double evaluate(
+        final double[] values,
+        final int begin,
+        final int length) {
+        double sumLog = Double.NaN;
+        if (test(values, begin, length)) {
+            sumLog = 0.0;
+            for (int i = begin; i < begin + length; i++) {
+                sumLog += Math.log(values[i]);
+            }
+        }
+        return sumLog;
+    }
+}
\ No newline at end of file
diff --git a/src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java b/src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java
new file mode 100644
index 0000000..6341ec5
--- /dev/null
+++ b/src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java
@@ -0,0 +1,121 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.commons.math.stat.univariate.summary;
+
+import org
+    .apache
+    .commons
+    .math
+    .stat
+    .univariate
+    .AbstractStorelessUnivariateStatistic;
+
+/**
+ * @version $Revision: 1.11 $ $Date: 2003/11/14 22:22:23 $
+ */
+public class SumOfSquares extends AbstractStorelessUnivariateStatistic {
+
+    /**
+     * The currently running sumSq
+     */
+    private double value = Double.NaN;
+
+    /**
+     * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#increment(double)
+     */
+    public void increment(final double d) {
+        if (Double.isNaN(value)) {
+            value = d * d;
+        } else {
+            value += d * d;
+        }
+    }
+
+    /**
+     * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getResult()
+     */
+    public double getResult() {
+        return value;
+    }
+
+    /**
+     * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#clear()
+     */
+    public void clear() {
+        value = Double.NaN;
+    }
+
+    /**
+     * Returns the sum of the squares of the available values.
+     * @param values Is a double[] containing the values
+     * @param begin processing at this point in the array
+     * @param length processing at this point in the array
+     * @return the sum of the squared values or Double.NaN if the array is empty
+     * @see org.apache.commons.math.stat.univariate.UnivariateStatistic#evaluate(double[], int, int)
+     */
+    public double evaluate(
+        final double[] values,
+        final int begin,
+        final int length) {
+        double sumSq = Double.NaN;
+        if (test(values, begin, length)) {
+            sumSq = 0.0;
+            for (int i = begin; i < begin + length; i++) {
+                sumSq += Math.pow(values[i], 2.0);
+            }
+        }
+        return sumSq;
+    }
+
+}
\ No newline at end of file
diff --git a/src/java/org/apache/commons/math/stat/univariate/summary/package.html b/src/java/org/apache/commons/math/stat/univariate/summary/package.html
new file mode 100644
index 0000000..670e6fc
--- /dev/null
+++ b/src/java/org/apache/commons/math/stat/univariate/summary/package.html
@@ -0,0 +1,4 @@
+<html>
+	<!-- $Revision: 1.3 $ $Date: 2003/11/14 22:22:23 $ -->
+	<body>Other summary statistics.</body>
+</html>
diff --git a/src/java/org/apache/commons/math/util/BeanTransformer.java b/src/java/org/apache/commons/math/util/BeanTransformer.java
new file mode 100644
index 0000000..a01eb62
--- /dev/null
+++ b/src/java/org/apache/commons/math/util/BeanTransformer.java
@@ -0,0 +1,125 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.commons.math.util;
+
+import java.lang.reflect.InvocationTargetException;
+import org.apache.commons.beanutils.PropertyUtils;
+import org.apache.commons.logging.LogFactory;
+
+/**
+ * Uses PropertyUtils to map a Bean getter to a double value.
+ * @version $Revision: 1.10 $ $Date: 2003/11/14 22:22:17 $
+ */
+public class BeanTransformer implements NumberTransformer {
+
+    /**
+     * The propertyName for this Transformer
+     */
+    private String propertyName;
+
+    /**
+     * Create a BeanTransformer
+     */
+    public BeanTransformer() {
+        this(null);
+    }
+
+    /**
+     * Create a BeanTransformer with a specific PropertyName.
+     * @param property The property.
+     */
+    public BeanTransformer(final String property) {
+        super();
+        setPropertyName(property);
+    }
+
+    /**
+     * Get the property String
+     * @return the Property Name String
+     */
+    public String getPropertyName() {
+        return propertyName;
+    }
+
+    /**
+     * Set the propertyString
+     * @param string The string to set the property to.
+     */
+    public void setPropertyName(final String string) {
+        propertyName = string;
+    }
+
+    /**
+     * @see org.apache.commons.math.util.NumberTransformer#transform(java.lang.Object)
+     */
+    public double transform(final Object o) {
+        double d = Double.NaN;
+        try {
+            d =
+                ((Number) PropertyUtils.getProperty(o, getPropertyName()))
+                    .doubleValue();
+        } catch (IllegalAccessException e) {
+            LogFactory.getLog(getClass()).error(
+                "Property can not be accessed.  Using NaN.", e);
+        } catch (InvocationTargetException e) {
+            LogFactory.getLog(getClass()).error(
+                "Property accessor method threw an exception.  Using NaN.", e);
+            e.printStackTrace();
+        } catch (NoSuchMethodException e) {
+            LogFactory.getLog(getClass()).error(
+                "Property accessor method does not exist.  Using NaN.", e);
+        }
+        return d;
+    }
+}
\ No newline at end of file
diff --git a/src/java/org/apache/commons/math/util/ContinuedFraction.java b/src/java/org/apache/commons/math/util/ContinuedFraction.java
new file mode 100644
index 0000000..5bf334b
--- /dev/null
+++ b/src/java/org/apache/commons/math/util/ContinuedFraction.java
@@ -0,0 +1,219 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.commons.math.util;
+
+import org.apache.commons.math.ConvergenceException;
+import org.apache.commons.math.MathException;
+
+/**
+ * Provides a generic means to evaluate continued fractions.  Subclasses simply
+ * provided the a and b coefficients to evaluate the continued fraction.
+ * 
+ * References:
+ * <ul>
+ * <li><a href="http://mathworld.wolfram.com/ContinuedFraction.html">
+ * Continued Fraction</a></li>
+ * </ul>
+ * @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:17 $
+ */
+public abstract class ContinuedFraction {
+    /** Maximum allowed numerical error. */
+    private static final double DEFAULT_EPSILON = 10e-9;
+
+    /**
+     * Default constructor.
+     */
+    protected ContinuedFraction() {
+        super();
+    }
+
+    /**
+     * Access the n-th a coefficient of the continued fraction.  Since a can be
+     * a function of the evaluation point, x, that is passed in as well.
+     * @param n the coefficient index to retrieve.
+     * @param x the evaluation point.
+     * @return the n-th a coefficient.
+     */
+    protected abstract double getA(int n, double x);
+
+    /**
+     * Access the n-th b coefficient of the continued fraction.  Since b can be
+     * a function of the evaluation point, x, that is passed in as well.
+     * @param n the coefficient index to retrieve.
+     * @param x the evaluation point.
+     * @return the n-th b coefficient.
+     */
+    protected abstract double getB(int n, double x);
+
+    /**
+     * Evaluates the continued fraction at the value x.
+     * @param x the evaluation point.
+     * @return the value of the continued fraction evaluated at x. 
+     * @throws MathException if the algorithm fails to converge.
+     */
+    public double evaluate(double x) throws MathException {
+        return evaluate(x, DEFAULT_EPSILON, Integer.MAX_VALUE);
+    }
+
+    /**
+     * Evaluates the continued fraction at the value x.
+     * @param x the evaluation point.
+     * @param epsilon maximum error allowed.
+     * @return the value of the continued fraction evaluated at x. 
+     * @throws MathException if the algorithm fails to converge.
+     */
+    public double evaluate(double x, double epsilon) throws MathException {
+        return evaluate(x, epsilon, Integer.MAX_VALUE);
+    }
+
+    /**
+     * Evaluates the continued fraction at the value x.
+     * @param x the evaluation point.
+     * @param maxIterations maximum number of convergents
+     * @return the value of the continued fraction evaluated at x. 
+     * @throws MathException if the algorithm fails to converge.
+     */
+    public double evaluate(double x, int maxIterations) throws MathException {
+        return evaluate(x, DEFAULT_EPSILON, maxIterations);
+    }
+
+    /**
+     * Evaluates the continued fraction at the value x.
+     * 
+     * The implementation of this method is based on:
+     * <ul>
+     * <li>O. E-gecio-glu, C . K. Koc, J. Rifa i Coma,
+     * <a href="http://citeseer.nj.nec.com/egecioglu91fast.html">
+     * Fast Computation of Continued Fractions</a>, Computers Math. Applic.,
+     * 21(2--3), 1991, 167--169.</li>
+     * </ul>
+     * 
+     * @param x the evaluation point.
+     * @param epsilon maximum error allowed.
+     * @param maxIterations maximum number of convergents
+     * @return the value of the continued fraction evaluated at x. 
+     * @throws MathException if the algorithm fails to converge.
+     */
+    public double evaluate(double x, double epsilon, int maxIterations)
+        throws MathException
+    {
+        double[][] f = new double[2][2];
+        double[][] a = new double[2][2];
+        double[][] an = new double[2][2];
+
+        a[0][0] = getA(0, x);
+        a[0][1] = 1.0;
+        a[1][0] = 1.0;
+        a[1][1] = 0.0;
+
+        return evaluate(1, x, a, an, f, epsilon, maxIterations);
+    }
+
+    /**
+     * Evaluates the n-th convergent, fn = pn / qn, for this continued fraction
+     * at the value x.
+     * @param n the convergent to compute.
+     * @param x the evaluation point.
+     * @param a (n-1)-th convergent matrix.  (Input)
+     * @param an the n-th coefficient matrix. (Output)
+     * @param f the n-th convergent matrix. (Output)
+     * @param epsilon maximum error allowed.
+     * @param maxIterations maximum number of convergents
+     * @return the value of the the n-th convergent for this continued fraction
+     *         evaluated at x. 
+     * @throws MathException if the algorithm fails to converge.
+     */
+    private double evaluate(
+        int n,
+        double x,
+        double[][] a,
+        double[][] an,
+        double[][] f,
+        double epsilon,
+        int maxIterations) throws MathException 
+    {
+        double ret;
+
+        // create next matrix
+        an[0][0] = getA(n, x);
+        an[0][1] = 1.0;
+        an[1][0] = getB(n, x);
+        an[1][1] = 0.0;
+
+        // multiply a and an, save as f
+        f[0][0] = (a[0][0] * an[0][0]) + (a[0][1] * an[1][0]);
+        f[0][1] = (a[0][0] * an[0][1]) + (a[0][1] * an[1][1]);
+        f[1][0] = (a[1][0] * an[0][0]) + (a[1][1] * an[1][0]);
+        f[1][1] = (a[1][0] * an[0][1]) + (a[1][1] * an[1][1]);
+
+        // determine if we're close enough
+        if (Math.abs((f[0][0] * f[1][1]) - (f[1][0] * f[0][1])) <
+            Math.abs(epsilon * f[1][0] * f[1][1]))
+        {
+            ret = f[0][0] / f[1][0];
+        } else {
+            if (n >= maxIterations) {
+                throw new ConvergenceException(
+                    "Continued fraction convergents failed to converge.");
+            }
+            // compute next
+            ret = evaluate(n + 1, x, f /* new a */
+            , an /* reuse an */
+            , a /* new f */
+            , epsilon, maxIterations);
+        }
+
+        return ret;
+    }
+}
diff --git a/src/java/org/apache/commons/math/util/ContractableDoubleArray.java b/src/java/org/apache/commons/math/util/ContractableDoubleArray.java
new file mode 100644
index 0000000..249e0c8
--- /dev/null
+++ b/src/java/org/apache/commons/math/util/ContractableDoubleArray.java
@@ -0,0 +1,329 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.commons.math.util;
+
+import java.io.Serializable;
+
+/**
+ * <p>
+ * A variable length double array implementation and extension of 
+ * ExpandableDoubleArray which automatically handles expanding and
+ * contracting double arrays.
+ * </p>
+ *
+ * <p>
+ * This class extends the functionality of ExpandableDoubleArray and
+ * inherits the expansion parameters from that class.  If a developer
+ * instantiates a ContractableDoubleArray and only adds values to
+ * that instance, the behavior of this class is no different from
+ * the behavior of the super-class ExpandableDoubleArray.  If, on the
+ * other hand, elements are removed from the array, this implementation
+ * tests an additional parameter <code>contractionCriteria</code>.  The
+ * <code>contractionCriteria</code> dictates when this implementation
+ * will contract the size of the internal storage array to
+ * the number of elements + 1.  This check is performed after every
+ * operation that alters the number of elements in the array.
+ * </p>
+ *
+ * <p>
+ * Note that the contractionCriteria must always be greater than the
+ * expansionFactor.  If this were not the case (assume a 
+ * contractionCriteria of 1.5f and a expansionFactor of 2.0f) an
+ * endless series of expansions and contractions would occur.  If the 
+ * length of this array is highly varied over time it is a good idea
+ * to trade efficient memory usage for performance.  Each time an array
+ * is expanded or contracted the meaningful portions of the internal
+ * storage array are copied to a new array and the reference to the 
+ * internal storage array is swapped.
+ * </p>
+ * 
+ * @version $Revision: 1.9 $ $Date: 2003/11/14 22:22:17 $
+ */
+public class ContractableDoubleArray
+    extends ExpandableDoubleArray
+    implements Serializable {
+
+    /** The contraction criteria defines the conditions under which this
+     * object will "resize" the internal array to the number of elements
+     * contained in the element array + 1
+     */
+    private float contractionCriteria = 2.5f;
+
+    /**
+     * Create an expandable double array with the default initial capacity of 
+     * 16, an expansion factor of 2.00, and a contractionCriteria of 2.5
+     */
+    public ContractableDoubleArray() {
+        super();
+    }
+
+    /**
+     * Create an expandable double array with the specified initial capacity, 
+     * the defult expansion factor of 2.00, and a contractionCriteria of 2.5
+     * 
+     * @param initialCapacity The initial size of the internal storage array
+     */
+    public ContractableDoubleArray(int initialCapacity) {
+        super(initialCapacity);
+    }
+
+    /**
+     * Create an expandable double array with the specificed initial capacity 
+     * and expand factor, with a contractionCriteria of 2.5
+     * 
+     * @param initialCapacity The initial size of the internal storage array
+     * @param expansionFactor the array will be expanded based on this 
+     *                        parameter
+     */
+    public ContractableDoubleArray(
+        int initialCapacity,
+        float expansionFactor) {
+        this.expansionFactor = expansionFactor;
+        setInitialCapacity(initialCapacity);
+        internalArray = new double[initialCapacity];
+        checkContractExpand(getContractionCriteria(), expansionFactor);
+    }
+
+    /**
+     * Create an expandable double array with the
+     * specificed initial capacity, expand factor, and contractionCriteria
+     * 
+     * @param initialCapacity The initial size of the internal storage array
+     * @param expansionFactor the array will be expanded based on this 
+     *                        parameter
+     * @param contractionCriteria The contraction Criteria.
+     */
+    public ContractableDoubleArray(
+        int initialCapacity,
+        float expansionFactor,
+        float contractionCriteria) {
+        this.contractionCriteria = contractionCriteria;
+        this.expansionFactor = expansionFactor;
+        setInitialCapacity(initialCapacity);
+        internalArray = new double[initialCapacity];
+        checkContractExpand(contractionCriteria, expansionFactor);
+    }
+
+    /**
+     * Contracts the storage array to the (size of the element set) + 1 - to 
+     * avoid a zero length array. This function also resets the startIndex to 
+     * zero. 
+     */
+    public synchronized void contract() {
+        double[] tempArray = new double[numElements + 1];
+
+        // Copy and swap - copy only the element array from the src array.
+        System.arraycopy(internalArray, startIndex, tempArray, 0, numElements);
+        internalArray = tempArray;
+
+        // Reset the start index to zero
+        startIndex = 0;
+    }
+
+    /**
+     * Adds an element to the end of this expandable array
+     * 
+     * @param value to be added to end of array
+     */
+    public synchronized void addElement(double value) {
+        super.addElement(value);
+        if (shouldContract()) {
+            contract();
+        }
+    }
+
+    /**
+     * <p>
+     * Adds an element to the end of this expandable array and 
+     * discards a value from the front of the array.  This method
+     * has the effect of adding a value to the end of the list
+     * and discarded an element from the front of the list.
+     * </p>
+     *
+     * <p>
+     * When an array rolls it actually "scrolls" the element array in 
+     * the internal storage array.  An element is added to the end of the
+     * array, and the first element of the array is discard by incrementing
+     * the starting index of the element array within the internal
+     * storage array.  Over time this will create an orphaned prefix
+     * to the element array within the internal storage array.  If this
+     * function is called frequently, this orphaned prefix list will
+     * gradually push the internal storage vs. element storage to
+     * the contractionCriteria.
+     * </p>
+     * @param value to be added to end of array
+     * @return value added
+     */
+    public synchronized double addElementRolling(double value) {
+        double discarded = super.addElementRolling(value);
+        // Check the contraction criteria
+        if (shouldContract()) {
+            contract();
+        }
+        return discarded;
+    }
+
+    /**
+     * Should contract returns true if the ratio of (internal storage length) 
+     * to (number of elements) is larger than the contractionCriteria value.  
+     * In other words, using the default value of 2.5, if the internal storage
+     * array provides more than 2.5x the space needed to store numElements, 
+     * then this function returns true
+     * 
+     * @return true if array satisfies the contraction criteria
+     */
+    private synchronized boolean shouldContract() {
+        boolean shouldContract = false;
+        if ((internalArray.length / numElements) > contractionCriteria) {
+            shouldContract = true;
+        }
+        return shouldContract;
+    }
+
+    /**
+     * @see org.apache.commons.math.util.DoubleArray#setElement(int, double)
+     */
+    public synchronized void setElement(int index, double value) {
+        super.setElement(index, value);
+        if (shouldContract()) {
+            contract();
+        }
+    }
+
+    /**
+     * Method invokes the super class' setExpansionFactor but first it
+     * must validate the combination of expansionFactor and 
+     * contractionCriteria.
+     *
+     * @see org.apache.commons.math.util.ExpandableDoubleArray#setExpansionFactor(float)
+     */
+    public void setExpansionFactor(float expansionFactor) {
+        checkContractExpand(getContractionCriteria(), expansionFactor);
+        super.setExpansionFactor(expansionFactor);
+    }
+
+    /**
+     * The contraction criteria defines when the internal array will contract 
+     * to store only the number of elements in the element array.  This 
+     * contractionCriteria gaurantees that the internal storage array will 
+     * never exceed this factor more than the space needed to store 
+     * numElements.
+     * 
+     * @return the contraction criteria used to reclaim memory when array is 
+     *         empty
+     */
+    public float getContractionCriteria() {
+        return contractionCriteria;
+    }
+
+    /**
+     * Sets the contraction criteria for this ExpandContractDoubleArray. 
+     * 
+     * @param contractionCriteria contraction criteria
+     */
+    public void setContractionCriteria(float contractionCriteria) {
+        checkContractExpand(contractionCriteria, getExpansionFactor());
+
+        this.contractionCriteria = contractionCriteria;
+    }
+
+    /**
+     * Checks the expansion factor and the contraction criteria and throws an 
+     * IllegalArgumentException if the contractionCriteria is less than the 
+     * expansionCriteria
+     * 
+     * @param expansionFactor factor to be checked
+     * @param contractionCritera critera to be checked
+     */
+    protected void checkContractExpand(
+        float contractionCritera,
+        float expansionFactor) {
+
+        if (contractionCritera < expansionFactor) {
+            String msg =
+                "Contraction criteria can never be smaller than " +
+                "the expansion factor.  This would lead to a never " +
+                "ending loop of expansion and contraction as a newly " +
+                "expanded internal storage array would immediately " +
+                "satisfy the criteria for contraction";
+            throw new IllegalArgumentException(msg);
+        }
+
+        if (contractionCriteria <= 1.0) {
+            String msg =
+                "The contraction criteria must be a number larger " +
+                "than one.  If the contractionCriteria is less than or " +
+                "equal to one an endless loop of contraction and " +
+                "expansion would ensue as an internalArray.length " +
+                "== numElements would satisfy the contraction criteria";
+            throw new IllegalArgumentException(msg);
+        }
+
+        if (expansionFactor < 1.0) {
+            String msg =
+                "The expansion factor must be a number greater than 1.0";
+            throw new IllegalArgumentException(msg);
+        }
+    }
+
+    /**
+     * @see org.apache.commons.math.util.ExpandableDoubleArray#discardFrontElements(int)
+     */
+    public synchronized void discardFrontElements(int i) {
+        super.discardFrontElements(i);
+        if (shouldContract()) {
+            contract();
+        }
+    }
+}
diff --git a/src/java/org/apache/commons/math/util/DefaultTransformer.java b/src/java/org/apache/commons/math/util/DefaultTransformer.java
new file mode 100644
index 0000000..43a8d4e
--- /dev/null
+++ b/src/java/org/apache/commons/math/util/DefaultTransformer.java
@@ -0,0 +1,81 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+
+package org.apache.commons.math.util;
+
+import org.apache.commons.beanutils.ConversionException;
+import org.apache.commons.beanutils.converters.DoubleConverter;
+
+/**
+ * A Default NumberTransformer for java.lang.Numbers and Numeric Strings. 
+ * @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:17 $
+ */
+public class DefaultTransformer implements NumberTransformer {
+    /** Converter used to transform objects. */
+    private static final DoubleConverter converter =
+        new DoubleConverter(new Double(Double.NaN));
+    
+    /**
+     * @see org.apache.commons.collections.Transformer#transform(java.lang.Object)
+     */
+    public double transform(Object o) {
+        double d;
+        try {
+            d = ((Double)converter.convert(Double.class, o)).doubleValue();
+        } catch(ConversionException ex){
+            d = Double.NaN;
+        }
+        return d;
+    }
+}
\ No newline at end of file
diff --git a/src/java/org/apache/commons/math/util/DoubleArray.java b/src/java/org/apache/commons/math/util/DoubleArray.java
new file mode 100644
index 0000000..119e7d4
--- /dev/null
+++ b/src/java/org/apache/commons/math/util/DoubleArray.java
@@ -0,0 +1,125 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.commons.math.util;
+
+
+/**
+ * Provides a single interface for dealing with various flavors
+ * of double arrays.  This arrays framework follows the model of the
+ * Collections API by allowing a user to select from a number of 
+ * array implementations with support for various storage mechanisms
+ * such as automatic expansion, contraction, and array "rolling".
+ * @version $Revision: 1.7 $ $Date: 2003/11/14 22:22:17 $
+ */
+public interface DoubleArray {
+
+    /**
+     * Returns the number of elements currently in the array.  Please note
+     * that this is different from the length of the internal storage array.  
+     * @return number of elements
+     */
+    int getNumElements();
+
+    /**
+     * Returns the element at the specified index.  Note that if an
+     * out of bounds index is supplied a ArrayIndexOutOfBoundsException 
+     * will be thrown.
+     * 
+     * @param index index to fetch a value from
+     * @return value stored at the specified index
+     *
+     */
+    double getElement(int index);
+
+    /**
+     * Sets the element at the specified index.  This method will expand the 
+     * internal storage array to accomodate the insertion of a value at an 
+     * index beyond the current capacity.
+     * @param index index to store a value in
+     * @param value value to store at the specified index
+     */
+    void setElement(int index, double value);
+
+    /**
+     * Adds an element to the end of this expandable array
+     * 
+     * @param value to be added to end of array
+     */
+    void addElement(double value);
+
+    /**
+     * Adds an element and moves the window of elements up one.  This
+     * has the effect of a FIFO.  when you "roll" the array an element is 
+     * removed from the array.  The return value of this function is the 
+     * discarded double.
+     * 
+     * @param value the value to be added to the array
+     * @return the value which has been discarded or "pushed" out of the array
+     *         by this rolling insert.
+     */
+    double addElementRolling(double value);
+
+    /**
+     * Returns a double[] of elements
+     *
+     * @return all elements added to the array
+     */
+    double[] getElements();
+
+    /**
+     * Clear the double array
+     */
+    void clear();
+
+}
diff --git a/src/java/org/apache/commons/math/util/ExpandableDoubleArray.java b/src/java/org/apache/commons/math/util/ExpandableDoubleArray.java
new file mode 100644
index 0000000..f4e4e82
--- /dev/null
+++ b/src/java/org/apache/commons/math/util/ExpandableDoubleArray.java
@@ -0,0 +1,431 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.commons.math.util;
+
+import java.io.Serializable;
+
+/**
+ * <p>
+ * A DoubleArray implementation which automatically expands
+ * an internal double array to handle an array of arbitrary length.  This 
+ * implementation of DoubleArray is provided to support scenarios in
+ * which the ultimate length of an array is unknown, and the 
+ * developer can control the expansion process through the
+ * <code>initialCapacity</code> and <code>expansionFactor</code> 
+ * parameters.
+ * </p>
+ *
+ * <p>
+ * This implementation also allows a developer to:
+ * <ul>
+ *  <li>Resize an array via <code>setNumElements(int)</code></li>
+ *  <li>Discard elements from the front of an array via
+ *      <code>discardFrontElements(int)</code></li>
+ *  <li>Find the minimum and maximum values stored in this array</li>
+ * </ul>
+ * </p>
+ *
+ * <p>
+ * The initialCapacity parameter sets the capacity of the initial
+ * storage array, and the expansionFactor is the factor by which
+ * the current storage capacity is multiplied each time the internal
+ * array needs to be expanded.  <b>Please note</b> that the length of the 
+ * internal storage array has nothing to do with the number of elements 
+ * currently stored in this array.  If one creates an instance of this
+ * class with an initialCapacity of "2" and an expansion factor of "2", and
+ * then adds 3546 elements to the array, this implementation will need to
+ * expand the array 10 times - first from 2 -> 4. then 4 -> 8, 8 -> 16,
+ * and so on until we reach 4096 which is sufficient to hold 3546 elements.
+ * </p>
+ * @version $Revision: 1.10 $ $Date: 2003/11/14 22:22:17 $
+ */
+public class ExpandableDoubleArray implements Serializable, DoubleArray {
+
+    // TODO: expansionFactor is valuable, by if I only need storage
+    // for 1025 items and I use the default settings, I'll end up
+    // with enough storage for 2048 elements.  Maybe this implementation
+    // should have flags for incremental growth - (i.e. when expanding, only
+    // increase storage by a constant size - 100, 200 ) ?
+
+    /** 
+     * This is the internal storage array.
+     */
+    protected double[] internalArray;
+
+    /** 
+     * Number of elements in the array
+     */
+    protected int numElements = 0;
+
+    /** 
+     * Keeps track of a starting index
+     */
+    protected int startIndex = 0;
+
+    /**The initial capacity of the array. 
+     * Initial capacity is not exposed as a property as it is only meaningful
+     * when passed to a constructor.
+     */
+    protected int initialCapacity = 16;
+
+    /** The expand factor of the array.  When the array need to be expanded, 
+     * the new array size will be internalArray.length * expandFactor 
+     */
+    protected float expansionFactor = 2.0f;
+
+    /**
+     * Create an expandable double array with the
+     * default initial capactiy of 16 and an expansion factor of 2.00
+     */
+    public ExpandableDoubleArray() {
+        internalArray = new double[initialCapacity];
+    }
+
+    /**
+     * Create an expandable double array with the
+     * specified initial capacity and the defult expansion factor of 2.00
+     * 
+     * @param initialCapacity The initial size of the internal storage array
+     */
+    public ExpandableDoubleArray(int initialCapacity) {
+        setInitialCapacity(initialCapacity);
+        internalArray = new double[this.initialCapacity];
+    }
+
+    /**
+     * Create an expandable double array with the
+     * specificed initial capacity and expand factor.
+     * 
+     * @param initialCapacity The initial size of the internal storage array
+     * @param expansionFactor the array will be expanded based on this 
+     *                        parameter
+     */
+    public ExpandableDoubleArray(int initialCapacity, float expansionFactor) {
+        setInitialCapacity(initialCapacity);
+        setExpansionFactor(expansionFactor);
+        this.initialCapacity = initialCapacity;
+        internalArray = new double[initialCapacity];
+    }
+
+    /**
+     * The expansion factor controls the size of a new aray when an array 
+     * needs to be expanded. When a value is inserted into a full array, the 
+     * new array size is calculated as the current array size times this 
+     * expansion factor.  The default expansion factor is 2.0
+     * 
+     * @return the expansion factor of this expandable double array
+     */
+    public float getExpansionFactor() {
+        return expansionFactor;
+    }
+
+    /**
+     * Sets the expansion factor for this expandable double array.  
+     * The expansion factor will affect the next expansion of this array.
+     * 
+     * @param expansionFactor the expansion factor of this array
+     */
+    public void setExpansionFactor(float expansionFactor) {
+
+        // The expansion factor *must* be larger than 1.0, otherwise we'll 
+        // have an inconsistency upon expansion we'll start shrinking which 
+        // will lead to ArrayIndexOutOfBound exceptions.
+        if (expansionFactor > 1.0) {
+            this.expansionFactor = expansionFactor;
+        } else {
+            String msg =
+                "The expansion factor must be a number greater " + "than 1.0";
+            throw new IllegalArgumentException(msg);
+        }
+    }
+
+    /**
+     * Sets the initial capacity
+     * @param initialCapacity of the array
+     */
+    public void setInitialCapacity(int initialCapacity) {
+        if (initialCapacity > 0) {
+            this.initialCapacity = initialCapacity;
+        } else {
+            String msg =
+                "The initial capacity supplied: " + initialCapacity +
+                "must be a positive integer";
+            throw new IllegalArgumentException(msg);
+        }
+    }
+
+    /**
+     * Returns the internal storage array
+     * 
+     * @return the internal storage array used by this object
+     */
+    public double[] getValues() {
+        return (internalArray);
+    }
+
+    /**
+     * Returns the starting index of the internal array.
+     * @return starting index
+     */
+    public int start() {
+        return startIndex;
+    }
+
+    /**
+     * Returns the number of elements currently in the array.  Please note
+     * that this is different from the length of the internal storage array.  
+     * @return number of elements
+     */
+    public int getNumElements() {
+        return (numElements);
+    }
+
+    /**
+     * This function allows you to control the number of elements contained 
+     * in this array, and can be used to "throw" out the last n values in an 
+     * array.  This feature is mainly targetted at the subclasses of this 
+     * array class.  Note that this function will also expand the internal 
+     * array as needed.
+     * 
+     * @param i a new number of elements
+     */
+    public synchronized void setNumElements(int i) {
+
+        // If index is negative thrown an error
+        if (i < 0) {
+            String msg =
+                "Number of elements must be zero or a positive " + "integer";
+            throw new IllegalArgumentException(msg);
+        }
+
+        // Test the new num elements, check to see if the array needs to be 
+        // expanded to accomodate this new number of elements
+        if ((startIndex + i) > internalArray.length) {
+            expandTo(startIndex + i);
+        }
+
+        // Set the new number of elements to new value
+        numElements = i;
+    }
+
+    /**
+     * Returns the element at the specified index
+     * 
+     * @param index index to fetch a value from
+     * @return value stored at the specified index
+     */
+    public double getElement(int index) {
+        double value = Double.NaN;
+        if (index >= numElements) {
+            String msg =
+                "The index specified: " + index +
+                " is larger than the current number of elements";
+            throw new ArrayIndexOutOfBoundsException(msg);
+        } else if (index >= 0) {
+            value = internalArray[startIndex + index];
+        } else {
+            String msg =
+                "Elements cannot be retrieved from a negative array index";
+            throw new ArrayIndexOutOfBoundsException(msg);
+        }
+        return value;
+    }
+
+    /**
+     * Sets the element at the specified index.  This method will expand the 
+     * internal storage array to accomodate the insertion of a value at an 
+     * index beyond the current capacity.
+     *
+     * @param index index to store a value in
+     * @param value value to store at the specified index
+     */
+    public synchronized void setElement(int index, double value) {
+
+        if (index < 0) {
+            String msg = "Cannot set an element at a negative index";
+            throw new ArrayIndexOutOfBoundsException(msg);
+        }
+
+        if ((startIndex + index) >= internalArray.length) {
+            expandTo(startIndex + (index + 1));
+            numElements = index + 1;
+        }
+        internalArray[startIndex + index] = value;
+    }
+
+    /**
+     * Expands the internal storage array to the specified size.
+     * 
+     * @param size Size of the new internal storage array
+     */
+    private synchronized void expandTo(int size) {
+        double[] tempArray = new double[size];
+        // Copy and swap
+        System.arraycopy(internalArray, 0, tempArray, 0, internalArray.length);
+        internalArray = tempArray;
+    }
+
+    /**
+     * Expands the internal storage array using the expansion factor
+     */
+    protected synchronized void expand() {
+
+        // notice the use of Math.ceil(), this gaurantees that we will always 
+        // have an array of at least currentSize + 1.   Assume that the 
+        // current initial capacity is 1 and the expansion factor
+        // is 1.000000000000000001.  The newly calculated size will be 
+        // rounded up to 2 after the multiplication is performed.
+        int newSize = (int) Math.ceil(internalArray.length * expansionFactor);
+        double[] tempArray = new double[newSize];
+
+        // Copy and swap
+        System.arraycopy(internalArray, 0, tempArray, 0, internalArray.length);
+        internalArray = tempArray;
+    }
+
+    /**
+     * Adds an element to the end of this expandable array
+     * 
+     * @param value value to be added to end of array
+     */
+    public synchronized void addElement(double value) {
+        numElements++;
+        if ((startIndex + numElements) > internalArray.length) {
+            expand();
+        }
+        internalArray[startIndex + (numElements - 1)] = value;
+    }
+
+    /**
+     * Adds an element and moves the window of elements up one.  This
+     * has the effect of a FIFO.  when you "roll" the array an element is 
+     * removed from the array.  The return value of this function is the 
+     * discarded double.
+     * @param value the value to add
+     * @return the value which has been discarded or "pushed" out of the array 
+     * by this rolling insert.
+     */
+    public synchronized double addElementRolling(double value) {
+        double discarded = internalArray[startIndex];
+
+        if ((startIndex + (numElements + 1)) > internalArray.length) {
+            expand();
+        }
+        // Increment the start index
+        startIndex += 1;
+
+        // Add the new value
+        internalArray[startIndex + (numElements - 1)] = value;
+
+        return discarded;
+    }
+
+    /**
+     * Notice the package scope on this method.   This method is simply here 
+     * for the JUnit test, it allows us check if the expansion is working 
+     * properly after a number of expansions.  This is not meant to be a part 
+     * of the public interface of this class.
+     * 
+     * @return the length of the internal storage array.
+     */
+    int getInternalLength() {
+        return (internalArray.length);
+    }
+
+    /**
+     * Clear the array, reset the size to the initialCapacity and the number 
+     * of elements to zero.
+     */
+    public synchronized void clear() {
+        numElements = 0;
+        internalArray = new double[initialCapacity];
+    }
+
+    /**
+     * Discards values from the front of the list.  This function removes n 
+     * elements from the front of the array.
+     * 
+     * @param i number of elements to discard from the front of the array.
+     */
+    public synchronized void discardFrontElements(int i) {
+
+        if (i > numElements) {
+            String msg = "Cannot discard more elements than are" +
+                "contained in this array.";
+            throw new IllegalArgumentException(msg);
+        } else if (i < 0) {
+            String msg = "Cannot discard a negative number of elements.";
+            throw new IllegalArgumentException(msg);
+        } else {
+            // "Subtract" this number of discarded from numElements 
+            numElements -= i;
+            startIndex += i;
+        }
+    }
+
+    /**
+     * @see org.apache.commons.math.util.DoubleArray#getElements()
+     */
+    public double[] getElements() {
+        double[] elementArray = new double[numElements];
+        System.arraycopy(
+            internalArray,
+            startIndex,
+            elementArray,
+            0,
+            numElements);
+        return elementArray;
+    }
+
+}
diff --git a/src/java/org/apache/commons/math/util/FixedDoubleArray.java b/src/java/org/apache/commons/math/util/FixedDoubleArray.java
new file mode 100644
index 0000000..2b19430
--- /dev/null
+++ b/src/java/org/apache/commons/math/util/FixedDoubleArray.java
@@ -0,0 +1,347 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.commons.math.util;
+
+/**
+ * <p>
+ * Provides an implementation of the DoubleArray with a maximum number of
+ * elements.  Creating an array implementation with an upper limit on the
+ * number of elements allows us to support a more efficient "rolling" 
+ * mechanism to support addElementRoling(double). Please note that this
+ * implementation will not preserve the order of the values supplied to
+ * this array, calling getValues() will return an array of indeterminate
+ * order.
+ * </p>
+ * 
+ * <p>
+ * Values are added to this array by calling addElement(double) or 
+ * addElementRolling(double).  If addElement(double) is called on 
+ * an array that already contains the maximum number of elements, an
+ * ArrayIndexOutOfBoundsException will be thrown to reflect an attempt to
+ * add a value beyond the boundaries of the fixed length array - in this
+ * respect a FixedDoubleArray can be considered "full".  Calling 
+ * addElementRolling(double) on an array which contains the maximum
+ * number of elements will cause the array to overwrite the "oldest"
+ * value in the array.
+ * </p>
+ *
+ * <p>
+ * This class is called FixedDoubleArray not because it is of a fixed size.
+ * The name is appropriate because the internal storage array remains 
+ * "fixed" in memory, this implementation will never allocate, or copy
+ * the internal storage array to a new array instance.
+ * </p>
+ * @version $Revision: 1.11 $ $Date: 2003/11/14 22:22:17 $
+ */
+public class FixedDoubleArray implements DoubleArray {
+
+    /**
+     * This is the internal storage array.  This array is assigned
+     * a known fixed size in the constructor
+     */
+    private double[] internalArray;
+
+    /**
+     * Size determined the number of elements in the array at
+     * any given time. When an array is created is maxElements
+     * of 100, it is of size 0, and size increases as values are
+     * added.
+     */
+    private int size = 0;
+
+    /**
+     * This index points to the location of the next update.  Next
+     * add, cycles from 0 to (maxElement-1)
+     */
+    private int nextAdd = 0;
+ 
+    /**
+     * The maximum number of elements in the FixedDoubleArray
+     */
+    private int maxElements = 0;
+
+    /**
+     * Create a fixed array for double primitives which can hold up to
+     * <code>maxElements</codec> doubles.  This implementation of 
+     * DoubleArray was created to provide a more "performance-oriented"
+     * in-place rolling mechanism for calculations which need to
+     * operate on a rolling window of values.
+     *
+     * @param maxElements the maximum number of elements this 
+     *        FixeddoubleArray may contain.
+     */
+    public FixedDoubleArray(int maxElements) {
+        this.maxElements = maxElements;
+        internalArray = new double[maxElements];
+    }
+
+    /**
+     * Create a fixed array backed by the provided double[] implementation. 
+     * the array should have all the elements occupied. the size and maxElements
+     * are drawn from the array's length.
+     * 
+     * This implementation of DoubleArray was created to provide a more 
+     * "performance-oriented" in-place rolling mechanism for calculations 
+     * which need to operate on a rolling window of values.
+     * @param array the backing array
+     */
+    public FixedDoubleArray(double[] array) {
+        this.maxElements = array.length;
+        this.size = array.length;
+        internalArray = array;
+    }
+
+    /**
+     * Retrieves the current size of the array.
+     * @see org.apache.commons.math.util.DoubleArray#getNumElements()
+     */
+    public int getNumElements() {
+        return size;
+    }
+
+    /**
+     * Returns the element value at the specified index.  Please note that
+     * the size of the element array is not directly related to the 
+     * maximum number of elements which this array can contain.  One can
+     * create an instance of FixedDoubleArray with a maximum of
+     * ten elements, add three items, and get any items from index 0 to index
+     * 2 - trying to retrieve an element outside of the current element
+     * array will throw an ArrayIndexOutOfBoundsException.
+     *
+     * @see org.apache.commons.math.util.DoubleArray#getElement(int)
+     */
+    public double getElement(int index) {
+        if (index > (size - 1)) {
+            String msg =
+                "Attempted to retrieve an element outside of " +
+                "the element array";
+            throw new ArrayIndexOutOfBoundsException(msg);
+        } else {
+            // Return the element requested, if the index supplied
+            // is negative this statement may also throw an
+            // ArrayIndexOutOfBoundException.
+            return internalArray[index];
+        }
+    }
+
+    /**
+     * <p>
+     * Sets the element at the specified index to the value supplied.
+     * </p>
+     *
+     * <p>Implementation Notes:
+     * <ul>
+     *  This implementation will not expand the array to the specified
+     *  size.  Unlike the expandable double array implementation calling
+     *  setElement(10, 3.0) on an array with 5 elements will throw an
+     *  ArrayIndexOutOfBoundsException.
+     * </ul>
+     * <ul>
+     *  The number of elements in an array corresponds to the number
+     *  of elements that have been added to this FixedDoubleArray.  This
+     *  is not the same as the maximum number of elements which can be
+     *  contained in this array.  A FixedDoubleArray instance can be
+     *  created with a maximum upper limit of 10 elements, until 10
+     *  elements have been added to this array, the size of the array
+     *  reflects the number of elements added.
+     * </ul>
+     * </p>
+     *
+     * @see org.apache.commons.math.util.DoubleArray#setElement(int, double)
+     */
+    public void setElement(int index, double value) {
+        if (index > (size - 1)) {
+            String msg =
+                "Attempted to set an element outside of" + "the element array";
+            throw new ArrayIndexOutOfBoundsException(msg);
+        } else {
+            internalArray[index] = value;
+        }
+    }
+
+    /** 
+     * Add an element to the current array, testing to see if 
+     * this array has already met or exceeded the maximum number
+     * of elements
+     *
+     * @see org.apache.commons.math.util.DoubleArray#addElement(double)
+     */
+    public void addElement(double value) {
+        if (size < internalArray.length) {
+            size++;
+
+            internalArray[nextAdd] = value;
+
+            // Incremenet nextAdd and then modulo it against maxElements
+            // this has the effect of repeatedly "cycling" nextAdd
+            // between 0 and (maxElements-1) endlessly.
+            nextAdd++;
+            nextAdd = nextAdd % (maxElements);
+
+        } else {
+            // If the array has ALREADY reached the maximum size allowable,
+            // we throw an ArrayIndexOutOfBoundsException - the end-user
+            // is trying to add an element beyond the boundaries of the
+            // fixed array.
+            String msg =
+                "Attempted to add a value to an array of fixed " +
+                "size, please use addElementRolling " +
+                "to avoid this exception";
+            throw new ArrayIndexOutOfBoundsException(msg);
+        }
+    }
+
+    /**
+     * <p>
+     * Adds an element by "rolling" the new value into the current array 
+     * while discarding the element which was added <code>maxElement</code>
+     * add operations ago.  The value replaced is returned from this 
+     * method.  Until an array contains the maximum number of element, this
+     * method has the same result as the addElement(double) operation.  Once
+     * the maximum number of elements has been reached this implementation
+     * inserts the new values starting at index 0 of the internal storage 
+     * array.  This allows for efficient rolling, but prevents us from 
+     * preserving the order of the added values.
+     * </p>
+     *
+     * <p>
+     * <b>Note:</b> This function will return <code>Double.NaN</code> if
+     * no value has been discarded in this roll.  This can happen when
+     * the array has not met the size limitation introduced in the 
+     * constructor.
+     * </p>
+     * @param value the value to be added to the array
+     * @return Returns the value which a has been "removed" from the 
+     *         database.  <b>Important:</b> If the element array has
+     *         not reached the maximum size, then it is possible that
+     *         no element will be discarded from a given roll.  In this
+     *         case this method will return a <code>Double.NaN</code> value.
+     *
+     * @see org.apache.commons.math.util.DoubleArray#addElementRolling(double)
+     */
+    public double addElementRolling(double value) {
+
+        // Create the discarded primitive.  If no element is
+        // discarded by this roll, this method will return a
+        // Double.NaN value.
+        double discarded = Double.NaN;
+
+        if (size < internalArray.length) {
+            size++;
+        } else {
+            // If we've reached the length of the internal
+            // storage array, we have to start "discarding"
+            // values from the original array.
+
+            // Obtain the value discarded by this overwrite
+            discarded = internalArray[nextAdd];
+        }
+
+        internalArray[nextAdd] = value;
+
+        // nextAdd cycles between 0 and (maxElements-1).
+        nextAdd++;
+        nextAdd = nextAdd % maxElements;
+
+        // but we return the value which was "replaced"
+        return (discarded);
+    }
+
+    /**
+     * Provides an array of double[] which contain the
+     * number of elements added to this array.  This  
+     * method will return an array from zero to maxElements in length.
+     * 
+     * @return The array of elements added to this DoubleArray
+     *         implementation.
+     * @see org.apache.commons.math.util.DoubleArray#getElements()
+     */
+    public double[] getElements() {
+        double[] copy = new double[size];
+        System.arraycopy(internalArray, 0, copy, 0, size);
+        return copy;
+    }
+
+    /**
+     * Returns the internal storage array
+     * 
+     * @return the internal storage array used by this object
+     */
+    public double[] getValues() {
+        return (internalArray);
+    }
+
+    /**
+     * The starting index in the InternalArray.
+     * @return starting index.
+     */
+    public int start() {
+        return 0;
+    }
+
+    /**
+     * Clear the array - drop all the data and start with a blank
+     * internal array.  This implementation takes care of
+     * setting the size of the array back to zero, and reinitializing
+     * the internal storage array.
+     *
+     * @see org.apache.commons.math.util.DoubleArray#clear()
+     */
+    public void clear() {
+        size = 0;
+        nextAdd = 0;
+        internalArray = new double[maxElements];
+    }
+
+}
diff --git a/src/java/org/apache/commons/math/util/MathUtils.java b/src/java/org/apache/commons/math/util/MathUtils.java
new file mode 100644
index 0000000..0308b90
--- /dev/null
+++ b/src/java/org/apache/commons/math/util/MathUtils.java
@@ -0,0 +1,367 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+
+package org.apache.commons.math.util;
+
+/**
+ * Some useful additions to the built-in functions in {@link Math}.
+ *
+ * @version $Revision: 1.9 $ $Date: 2003/11/14 22:22:17 $
+ */
+public final class MathUtils {
+
+    /**
+     * Private Constructor
+     */
+    private MathUtils() {
+    }
+
+    /**
+     * For a double precision value x, this method returns +1.0 if x >= 0
+     * and -1.0 if x < 0.
+     * @param x the value, a double
+     * @return +1.0 or -1.0, depending on the the sign of x
+     */
+    public static double sign(final double x) {
+        if (x >= 0.0) {
+            return 1.0;
+        } else {
+            return -1.0;
+        }
+    }
+
+    /**
+     * For a float value x, this method returns +1.0F if x >= 0
+     * and -1.0F if x < 0.
+     * @param x the value, a float
+     * @return +1.0F or -1.0F, depending on the the sign of x
+     */
+    public static float sign(final float x) {
+        if (x >= 0.0F) {
+            return 1.0F;
+        } else {
+            return -1.0F;
+        }
+    }
+
+    /**
+     * For a byte value x, this method returns (byte)(+1) if x >= 0
+     * and (byte)(-1) if x < 0.
+     * @param x the value, a byte
+     * @return (byte)(+1) or (byte)(-1), depending on the the sign of x
+     */
+    public static byte sign(final byte x) {
+        if (x >= (byte) 0) {
+            return (byte) 1;
+        } else {
+            return (byte) (-1);
+        }
+    }
+
+    /**
+     * For a short value x, this method returns (short)(+1) if x >= 0
+     * and (short)(-1) if x < 0.
+     *
+     * @param x the value, a short
+     * @return (short)(+1) or (short)(-1), depending on the the sign of x
+     */
+    public static short sign(final short x) {
+        if (x >= (short) 0) {
+            return (short) 1;
+        } else {
+            return (short) (-1);
+        }
+    }
+
+    /**
+     * For an int value x, this method returns +1 if x >= 0
+     * and -1 if x < 0.
+     *
+     * @param x the value, an int
+     * @return +1 or -1, depending on the the sign of x
+     */
+    public static int sign(final int x) {
+        if (x >= 0) {
+            return 1;
+        } else {
+            return -1;
+        }
+    }
+
+    /**
+     * For a long value x, this method returns +1L if x >= 0
+     * and -1L if x < 0.
+     *
+     * @param x the value, a long
+     * @return +1L or -1L, depending on the the sign of x
+     */
+    public static long sign(final long x) {
+        if (x >= 0L) {
+            return 1L;
+        } else {
+            return -1L;
+        }
+    }
+    /**
+     * Returns an exact representation of the
+     * <a href="http://mathworld.wolfram.com/BinomialCoefficient.html">
+     * Binomial Coefficient</a>,  "<code>n choose k</code>",
+     * the number of <code>k</code>-element subsets that can be selected from
+     * an <code>n</code>-element set.
+     * <p>
+     * <Strong>Preconditions</strong>:<ul>
+     * <li> <code>0 < k <= n </code> (otherwise
+     * <li> <code>0 < k <= n </code> (otherwise
+     *      <code>IllegalArgumentException</code> is thrown)</li>
+     * <li> The result is small enough to fit into a <code>long</code>. The
+     *      largest value of <code>n</code> for which all coefficients are
+     *      <code> < Long.MAX_VALUE</code> is 66.  If the computed value
+     * <li> The result is small enough to fit into a <code>long</code>.  The
+     *      largest value of <code>n</code> for which all coefficients are
+     *      <code> < Long.MAX_VALUE</code> is 66.  If the computed value
+     *      exceeds <code>Long.MAX_VALUE</code> an <code>ArithMeticException
+     *      </code> is thrown.</li>
+     * </ul>
+     *
+     *
+     * @param n the size of the set
+     * @param k the size of the subsets to be counted
+     * @return <code>n choose k</code>
+     */
+    public static long binomialCoefficient(final int n, final int k) {
+        if (n < k) {
+            throw new IllegalArgumentException(
+                "must have n >= k for binomial coefficient (n,k)");
+        }
+        if (n <= 0) {
+            throw new IllegalArgumentException(
+                "must have n > 0 for binomial coefficient (n,k)");
+        }
+        if ((n == k) || (k == 0)) {
+            return 1;
+        }
+        if ((k == 1) || (k == n - 1)) {
+            return n;
+        }
+
+        long result = Math.round(binomialCoefficientDouble(n, k));
+        if (result == Long.MAX_VALUE) {
+            throw new ArithmeticException(
+                "result too large to represent in a long integer");
+        }
+        return result;
+    }
+
+    /**
+     * Returns a <code>double</code> representation of the
+     * <a href="http://mathworld.wolfram.com/BinomialCoefficient.html">
+     * Binomial Coefficient</a>,  "<code>n choose k</code>",
+     * the number of <code>k</code>-element subsets that can be selected from
+     * an <code>n</code>-element set.
+     * <p>
+     * <Strong>Preconditions</strong>:<ul>
+     * <li> <code>0 < k <= n </code> (otherwise
+     *      <code>IllegalArgumentException</code> is thrown)</li>
+     * <li> The result is small enough to fit into a <code>double</code>.
+     *      The largest value of <code>n</code> for which all coefficients are
+     *      < Double.MAX_VALUE is 1029.  If the computed value exceeds
+     *      Double.MAX_VALUE, Double.POSITIVE_INFINITY is returned</li>
+     * </ul>
+     *
+     * @param n the size of the set
+     * @param k the size of the subsets to be counted
+     * @return <code>n choose k</code>
+     */
+    public static double binomialCoefficientDouble(final int n, final int k) {
+        return Math.floor(Math.exp(binomialCoefficientLog(n, k)) + 0.5);
+    }
+
+    /**
+     * Returns the natural <code>log</code> of the
+     * <a href="http://mathworld.wolfram.com/BinomialCoefficient.html">
+     * Binomial Coefficient</a>,  "<code>n choose k</code>",
+     * the number of <code>k</code>-element subsets that can be selected from
+     * an <code>n</code>-element set.
+     * <p>
+     * <Strong>Preconditions</strong>:<ul>
+     * <li> <code>0 < k <= n </code> (otherwise
+     *      <code>IllegalArgumentException</code> is thrown)</li>
+     * </ul>
+     *
+     * @param n the size of the set
+     * @param k the size of the subsets to be counted
+     * @return <code>n choose k</code>
+     */
+    public static double binomialCoefficientLog(final int n, final int k) {
+        if (n < k) {
+            throw new IllegalArgumentException(
+                "must have n >= k for binomial coefficient (n,k)");
+        }
+        if (n <= 0) {
+            throw new IllegalArgumentException(
+                "must have n > 0 for binomial coefficient (n,k)");
+        }
+        if ((n == k) || (k == 0)) {
+            return 0;
+        }
+        if ((k == 1) || (k == n - 1)) {
+            return Math.log((double) n);
+        }
+        double logSum = 0;
+
+        // n!/k!
+        for (int i = k + 1; i <= n; i++) {
+            logSum += Math.log((double) i);
+        }
+
+        // divide by (n-k)!
+        for (int i = 2; i <= n - k; i++) {
+            logSum -= Math.log((double) i);
+        }
+
+        return logSum;
+    }
+
+    /**
+     * Returns n!.  Shorthand for <code>n</code>
+     * <a href="http://mathworld.wolfram.com/Factorial.html">
+     * Factorial</a>, the product of the numbers <code>1,...,n</code>.
+     * 
+     * <p>
+     * <Strong>Preconditions</strong>:<ul>
+     * <li> <code>n > 0</code> (otherwise
+     *      <code>IllegalArgumentException</code> is thrown)</li>
+     * <li> The result is small enough to fit into a <code>long</code>.  The
+     *      largest value of <code>n</code> for which <code>n!</code>
+     *      < Long.MAX_VALUE</code> is 20.  If the computed value
+     *      exceeds <code>Long.MAX_VALUE</code> an <code>ArithMeticException
+     *      </code> is thrown.</li>
+     * </ul>
+     * </p>
+     * 
+     * @param n argument
+     * @return <code>n!</code>
+     */
+    public static long factorial(final int n) {
+        long result = Math.round(factorialDouble(n));
+        if (result == Long.MAX_VALUE) {
+            throw new ArithmeticException(
+                "result too large to represent in a long integer");
+        }
+        return result;
+    }
+
+    /**
+     * Returns n!.  Shorthand for <code>n</code>
+     * <a href="http://mathworld.wolfram.com/Factorial.html">
+     * Factorial</a>, the product of the numbers <code>1,...,n</code> as a
+     * <code>double</code>.
+     * 
+     * <p>
+     * <Strong>Preconditions</strong>:<ul>
+     * <li> <code>n > 0</code> (otherwise
+     *      <code>IllegalArgumentException</code> is thrown)</li>
+     * <li> The result is small enough to fit into a <code>double</code>.  The
+     *      largest value of <code>n</code> for which <code>n!</code>
+     *      < Double.MAX_VALUE</code> is 170.  If the computed value exceeds
+     *      Double.MAX_VALUE, Double.POSITIVE_INFINITY is returned</li>
+     * </ul>
+     * </p>
+     * 
+     * @param n argument
+     * @return <code>n!</code>
+     */
+    public static double factorialDouble(final int n) {
+        if (n <= 0) {
+            throw new IllegalArgumentException("must have n > 0 for n!");
+        }
+        return Math.floor(Math.exp(factorialLog(n)) + 0.5);
+    }
+
+    /**
+      * Returns the natural logarithm of n!.
+      * <p>
+      * <Strong>Preconditions</strong>:<ul>
+      * <li> <code>n > 0</code> (otherwise
+      *      <code>IllegalArgumentException</code> is thrown)</li>
+      * </ul>
+      *
+      * @param n argument
+      * @return <code>n!</code>
+      */
+    public static double factorialLog(final int n) {
+        if (n <= 0) {
+            throw new IllegalArgumentException("must have n > 0 for n!");
+        }
+        double logSum = 0;
+        for (int i = 2; i <= n; i++) {
+            logSum += Math.log((double) i);
+        }
+        return logSum;
+    }
+    
+    /**
+     * 
+     */
+    public static double cosh(double x) {
+        return (Math.exp(x) + Math.exp(-x)) / 2.0;
+    }
+    
+    /**
+     * 
+     */
+    public static double sinh(double x) {
+        return (Math.exp(x) - Math.exp(-x)) / 2.0;
+    }
+}
\ No newline at end of file
diff --git a/src/java/org/apache/commons/math/util/NumberTransformer.java b/src/java/org/apache/commons/math/util/NumberTransformer.java
new file mode 100644
index 0000000..db20f24
--- /dev/null
+++ b/src/java/org/apache/commons/math/util/NumberTransformer.java
@@ -0,0 +1,73 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.commons.math.util;
+
+import org.apache.commons.math.MathException;
+
+/**
+ * Subclasses implementing this interface can transform Objects to doubles.
+ * @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:17 $
+ */
+public interface NumberTransformer {
+    
+    /**
+     * Implementing this interface provides a facility to transform
+     * from Object to Double.
+     * 
+     * @param o the Object to be transformed.
+     * @return the double value of the Object.
+     * @throws MathException if the Object can not be transformed into a Double. 
+     */
+    double transform(Object o) throws MathException;
+}
\ No newline at end of file
diff --git a/src/java/org/apache/commons/math/util/TransformerMap.java b/src/java/org/apache/commons/math/util/TransformerMap.java
new file mode 100644
index 0000000..344c3ac
--- /dev/null
+++ b/src/java/org/apache/commons/math/util/TransformerMap.java
@@ -0,0 +1,188 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.commons.math.util;
+
+import java.util.Collection;
+import java.util.HashMap;
+import java.util.Map;
+import java.util.Set;
+
+/**
+ * This TansformerMap automates the transformation of of mixed object types.
+ * It provides a means to set NumberTransformers that will be selected 
+ * based on the Class of the object handed to the Maps
+ * <code>double transform(Object o)</code> method.
+ * @version $Revision: 1.7 $ $Date: 2003/11/14 22:22:17 $
+ */
+public class TransformerMap implements NumberTransformer {
+
+    /**
+     * A default Number Transformer for Numbers and numeric Strings.
+     */
+    private NumberTransformer defaultTransformer = null;
+
+    /**
+     * The internal Map.
+     */
+    private Map map = null;
+
+    /**
+     * 
+     */
+    public TransformerMap() {
+        map = new HashMap();
+        defaultTransformer = new DefaultTransformer();
+    }
+
+    /**
+     * Tests if a Class is present in the TransformerMap.
+     * @param key Class to check
+     * @return true|false
+     */
+    public boolean containsClass(Class key) {
+        return map.containsKey(key);
+    }
+
+    /**
+     * Tests if a NumberTransformer is present in the TransformerMap.
+     * @param value NumberTransformer to check
+     * @return true|false
+     */
+    public boolean containsTransformer(NumberTransformer value) {
+        return map.containsValue(value);
+    }
+
+    /**
+     * Returns the Transformer that is mapped to a class
+     * if mapping is not present, this returns null.
+     * @param key The Class of the object
+     * @return the mapped NumberTransformer or null.
+     */
+    public NumberTransformer getTransformer(Class key) {
+        return (NumberTransformer) map.get(key);
+    }
+
+    /**
+     * Sets a Class to Transformer Mapping in the Map. If
+     * the Class is already present, this overwrites that
+     * mapping.
+     * @param key The Class
+     * @param runner The NumberTransformer
+     * @return the replaced runner if one is present
+     */
+    public Object putTransformer(Class key, NumberTransformer runner) {
+        return map.put(key, runner);
+    }
+
+    /**
+     * Removes a Class to Transformer Mapping in the Map.
+     * @param key The Class
+     * @return the removed runner if one is present or
+     * null if none was present.
+     */
+    public Object removeTransformer(Class key) {
+        return map.remove(key);
+    }
+
+    /**
+     * Clears all the Class to Transformer mappings.
+     */
+    public void clear() {
+        map.clear();
+    }
+
+    /**
+     * Returns the Set of Classes used as keys in the map.
+     * @return Set of Classes
+     */
+    public Set classes() {
+        return map.keySet();
+    }
+
+    /**
+     * Returns the Set of NumberTransformers used as values 
+     * in the map.
+     * @return Set of NumberTransformers
+     */
+    public Collection transformers() {
+        return map.values();
+    }
+
+    /**
+     * Attempts to transform the Object against the map of
+     * NumberTransformers. Otherwise it returns Double.NaN.
+     * 
+     * @see org.apache.commons.math.util.NumberTransformer#transform(java.lang.Object)
+     */
+    public double transform(Object o) {
+        double value = Double.NaN;
+
+        try {
+            if (o instanceof Number || o instanceof String) {
+                value = defaultTransformer.transform(o);
+            } else {
+                NumberTransformer trans =
+                    (NumberTransformer) this.getTransformer(o.getClass());
+                if (trans != null) {
+                    value = trans.transform(o);
+                }
+            }
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+
+        return value;
+    }
+
+}
\ No newline at end of file
diff --git a/src/java/org/apache/commons/math/util/package.html b/src/java/org/apache/commons/math/util/package.html
new file mode 100644
index 0000000..da4660c
--- /dev/null
+++ b/src/java/org/apache/commons/math/util/package.html
@@ -0,0 +1,4 @@
+<html>
+	<!-- $Revision: 1.4 $ $Date: 2003/11/14 22:22:17 $ -->
+	<body>Convience routines and common data structure used throughout the commons-math library.</body>
+</html>
diff --git a/src/test/org/apache/commons/math/MathConfigurationExceptionTest.java b/src/test/org/apache/commons/math/MathConfigurationExceptionTest.java
new file mode 100644
index 0000000..2632661
--- /dev/null
+++ b/src/test/org/apache/commons/math/MathConfigurationExceptionTest.java
@@ -0,0 +1,103 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+
+package org.apache.commons.math;
+
+import junit.framework.TestCase;
+
+/**
+ * @version $Revision: 1.5 $ $Date: 2003/11/14 22:22:23 $
+ */
+public class MathConfigurationExceptionTest extends TestCase {
+    /**
+     * 
+     */
+    public void testConstructor(){
+        MathConfigurationException ex = new MathConfigurationException();
+        assertNull(ex.getCause());
+        assertNull(ex.getMessage());
+    }
+    
+    /**
+     * 
+     */
+    public void testConstructorMessage(){
+        String msg = "message";
+        MathConfigurationException ex = new MathConfigurationException(msg);
+        assertNull(ex.getCause());
+        assertEquals(msg, ex.getMessage());
+    }
+    
+    /**
+     * 
+     */
+    public void testConstructorMessageCause(){
+        String outMsg = "outer message";
+        String inMsg = "inner message";
+        Exception cause = new Exception(inMsg);
+        MathConfigurationException ex = new MathConfigurationException(outMsg, cause);
+        assertEquals(outMsg, ex.getMessage());
+        assertEquals(cause, ex.getCause());
+    }
+    
+    /**
+     * 
+     */
+    public void testConstructorCause(){
+        String inMsg = "inner message";
+        Exception cause = new Exception(inMsg);
+        MathConfigurationException ex = new MathConfigurationException(cause);
+        assertEquals(cause, ex.getCause());
+    }
+}
diff --git a/src/test/org/apache/commons/math/MathExceptionTest.java b/src/test/org/apache/commons/math/MathExceptionTest.java
new file mode 100644
index 0000000..cbdea3d
--- /dev/null
+++ b/src/test/org/apache/commons/math/MathExceptionTest.java
@@ -0,0 +1,103 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+
+package org.apache.commons.math;
+
+import junit.framework.TestCase;
+
+/**
+ * @version $Revision: 1.5 $ $Date: 2003/11/14 22:22:23 $
+ */
+public class MathExceptionTest extends TestCase {
+    /**
+     * 
+     */
+    public void testConstructor(){
+        MathException ex = new MathException();
+        assertNull(ex.getCause());
+        assertNull(ex.getMessage());
+    }
+    
+    /**
+     * 
+     */
+    public void testConstructorMessage(){
+        String msg = "message";
+        MathException ex = new MathException(msg);
+        assertNull(ex.getCause());
+        assertEquals(msg, ex.getMessage());
+    }
+    
+    /**
+     * 
+     */
+    public void testConstructorMessageCause(){
+        String outMsg = "outer message";
+        String inMsg = "inner message";
+        Exception cause = new Exception(inMsg);
+        MathException ex = new MathException(outMsg, cause);
+        assertEquals(outMsg, ex.getMessage());
+        assertEquals(cause, ex.getCause());
+    }
+    
+    /**
+     * 
+     */
+    public void testConstructorCause(){
+        String inMsg = "inner message";
+        Exception cause = new Exception(inMsg);
+        MathException ex = new MathException(cause);
+        assertEquals(cause, ex.getCause());
+    }
+}
diff --git a/src/test/org/apache/commons/math/TestUtils.java b/src/test/org/apache/commons/math/TestUtils.java
new file mode 100644
index 0000000..04bf953
--- /dev/null
+++ b/src/test/org/apache/commons/math/TestUtils.java
@@ -0,0 +1,78 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+
+package org.apache.commons.math;
+
+import junit.framework.Assert;
+
+/**
+ * @version $Revision: 1.6 $ $Date: 2003/11/14 22:22:23 $
+ */
+public class TestUtils {
+    /**
+     * 
+     */
+    private TestUtils() {
+        super();
+    }
+
+    public static void assertEquals(double expected, double actual, double delta) {
+        // check for NaN
+        if(Double.isNaN(expected)){
+            Assert.assertTrue(Double.isNaN(actual));
+        } else {
+            Assert.assertEquals(expected, actual, delta);
+        }
+    }
+}
diff --git a/src/test/org/apache/commons/math/analysis/BisectionSolverTest.java b/src/test/org/apache/commons/math/analysis/BisectionSolverTest.java
new file mode 100644
index 0000000..a698a84
--- /dev/null
+++ b/src/test/org/apache/commons/math/analysis/BisectionSolverTest.java
@@ -0,0 +1,248 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.commons.math.analysis;
+
+import org.apache.commons.math.MathException;
+
+import junit.framework.TestCase;
+
+/**
+ * @version $Revision: 1.7 $ $Date: 2003/11/14 22:22:17 $
+ */
+public final class BisectionSolverTest extends TestCase {
+    /**
+     *
+     */
+    public void testSinZero() throws MathException {
+        UnivariateRealFunction f = new SinFunction();
+        double result;
+        
+        UnivariateRealSolver solver = new BisectionSolver(f);
+        result = solver.solve(3, 4);
+        assertEquals(result, Math.PI, solver.getAbsoluteAccuracy());
+
+        result = solver.solve(1, 4);
+        assertEquals(result, Math.PI, solver.getAbsoluteAccuracy());
+    }
+
+    /**
+     *
+     */
+    public void testQuinticZero() throws MathException {
+        UnivariateRealFunction f = new QuinticFunction();
+        double result;
+
+        UnivariateRealSolver solver = new BisectionSolver(f);
+        result = solver.solve(-0.2, 0.2);
+        assertEquals(result, 0, solver.getAbsoluteAccuracy());
+
+        result = solver.solve(-0.1, 0.3);
+        assertEquals(result, 0, solver.getAbsoluteAccuracy());
+
+        result = solver.solve(-0.3, 0.45);
+        assertEquals(result, 0, solver.getAbsoluteAccuracy());
+
+        result = solver.solve(0.3, 0.7);
+        assertEquals(result, 0.5, solver.getAbsoluteAccuracy());
+
+        result = solver.solve(0.2, 0.6);
+        assertEquals(result, 0.5, solver.getAbsoluteAccuracy());
+
+        result = solver.solve(0.05, 0.95);
+        assertEquals(result, 0.5, solver.getAbsoluteAccuracy());
+
+        result = solver.solve(0.85, 1.25);
+        assertEquals(result, 1.0, solver.getAbsoluteAccuracy());
+
+        result = solver.solve(0.8, 1.2);
+        assertEquals(result, 1.0, solver.getAbsoluteAccuracy());
+
+        result = solver.solve(0.85, 1.75);
+        assertEquals(result, 1.0, solver.getAbsoluteAccuracy());
+
+        result = solver.solve(0.55, 1.45);
+        assertEquals(result, 1.0, solver.getAbsoluteAccuracy());
+
+        result = solver.solve(0.85, 5);
+        assertEquals(result, 1.0, solver.getAbsoluteAccuracy());
+    }
+    
+    /**
+     * 
+     */
+    public void testSetFunctionValueAccuracy(){
+        double expected = 1.0e-2;
+        
+        UnivariateRealFunction f = new QuinticFunction();
+        UnivariateRealSolver solver = new BisectionSolver(f);
+        try {
+            solver.setFunctionValueAccuracy(expected);
+            assertEquals(expected, solver.getFunctionValueAccuracy(), 1.0e-2);
+        } catch (MathException ex) {
+            fail(ex.getMessage());
+        }
+    }        
+    
+    /**
+     * 
+     */
+    public void testResetFunctionValueAccuracy(){
+        double newValue = 1.0e-2;
+        
+        UnivariateRealFunction f = new QuinticFunction();
+        UnivariateRealSolver solver = new BisectionSolver(f);
+        try {
+            double oldValue = solver.getFunctionValueAccuracy();
+            solver.setFunctionValueAccuracy(newValue);
+            solver.resetFunctionValueAccuracy();
+            assertEquals(oldValue, solver.getFunctionValueAccuracy(), 1.0e-2);
+        } catch(MathException ex){
+            fail(ex.getMessage());
+        }
+    }        
+    
+    /**
+     * 
+     */
+    public void testSetAbsoluteAccuracy(){
+        double expected = 1.0e-2;
+        
+        UnivariateRealFunction f = new QuinticFunction();
+        UnivariateRealSolver solver = new BisectionSolver(f);
+        try {
+            solver.setAbsoluteAccuracy(expected);
+            assertEquals(expected, solver.getAbsoluteAccuracy(), 1.0e-2);
+        } catch(MathException ex){
+            fail(ex.getMessage());
+        }
+    }        
+    
+    /**
+     * 
+     */
+    public void testResetAbsoluteAccuracy(){
+        double newValue = 1.0e-2;
+        
+        UnivariateRealFunction f = new QuinticFunction();
+        UnivariateRealSolver solver = new BisectionSolver(f);
+        try {
+            double oldValue = solver.getAbsoluteAccuracy();
+            solver.setAbsoluteAccuracy(newValue);
+            solver.resetAbsoluteAccuracy();
+            assertEquals(oldValue, solver.getAbsoluteAccuracy(), 1.0e-2);
+        } catch(MathException ex){
+            fail(ex.getMessage());
+        }
+    }        
+    
+    /**
+     * 
+     */
+    public void testSetMaximalIterationCount(){
+        int expected = 100;
+        
+        UnivariateRealFunction f = new QuinticFunction();
+        UnivariateRealSolver solver = new BisectionSolver(f);
+        solver.setMaximalIterationCount(expected);
+        assertEquals(expected, solver.getMaximalIterationCount());
+    }        
+    
+    /**
+     * 
+     */
+    public void testResetMaximalIterationCount(){
+        int newValue = 10000;
+        
+        UnivariateRealFunction f = new QuinticFunction();
+        UnivariateRealSolver solver = new BisectionSolver(f);
+        int oldValue = solver.getMaximalIterationCount();
+        solver.setMaximalIterationCount(newValue);
+        solver.resetMaximalIterationCount();
+        assertEquals(oldValue, solver.getMaximalIterationCount());
+    }        
+    
+    /**
+     * 
+     */
+    public void testSetRelativeAccuracy(){
+        double expected = 1.0e-2;
+        
+        UnivariateRealFunction f = new QuinticFunction();
+        UnivariateRealSolver solver = new BisectionSolver(f);
+        try {
+            solver.setRelativeAccuracy(expected);
+            assertEquals(expected, solver.getRelativeAccuracy(), 1.0e-2);
+        } catch(MathException ex){
+            fail(ex.getMessage());
+        }
+    }        
+    
+    /**
+     * 
+     */
+    public void testResetRelativeAccuracy(){
+        double newValue = 1.0e-2;
+        
+        UnivariateRealFunction f = new QuinticFunction();
+        UnivariateRealSolver solver = new BisectionSolver(f);
+        try {
+            double oldValue = solver.getRelativeAccuracy();
+            solver.setRelativeAccuracy(newValue);
+            solver.resetRelativeAccuracy();
+            assertEquals(oldValue, solver.getRelativeAccuracy(), 1.0e-2);
+        } catch(MathException ex){
+            fail(ex.getMessage());
+        }
+    }        
+}
diff --git a/src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java b/src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java
new file mode 100644
index 0000000..4ee1597
--- /dev/null
+++ b/src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java
@@ -0,0 +1,105 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+
+package org.apache.commons.math.analysis;
+
+import org.apache.commons.math.ConvergenceException;
+
+import junit.framework.TestCase;
+
+/**
+ * @version $Revision: 1.5 $ $Date: 2003/11/14 22:22:17 $
+ */
+public class ConvergenceExceptionTest extends TestCase {
+    /**
+     * 
+     */
+    public void testConstructor(){
+        ConvergenceException ex = new ConvergenceException();
+        assertNull(ex.getCause());
+        assertNull(ex.getMessage());
+    }
+    
+    /**
+     * 
+     */
+    public void testConstructorMessage(){
+        String msg = "message";
+        ConvergenceException ex = new ConvergenceException(msg);
+        assertNull(ex.getCause());
+        assertEquals(msg, ex.getMessage());
+    }
+    
+    /**
+     * 
+     */
+    public void testConstructorMessageCause(){
+        String outMsg = "outer message";
+        String inMsg = "inner message";
+        Exception cause = new Exception(inMsg);
+        ConvergenceException ex = new ConvergenceException(outMsg, cause);
+        assertEquals(outMsg, ex.getMessage());
+        assertEquals(cause, ex.getCause());
+    }
+    
+    /**
+     * 
+     */
+    public void testConstructorCause(){
+        String inMsg = "inner message";
+        Exception cause = new Exception(inMsg);
+        ConvergenceException ex = new ConvergenceException(cause);
+        assertEquals(cause, ex.getCause());
+    }
+}
diff --git a/src/test/org/apache/commons/math/analysis/InterpolatorTest.java b/src/test/org/apache/commons/math/analysis/InterpolatorTest.java
new file mode 100644
index 0000000..8edc371
--- /dev/null
+++ b/src/test/org/apache/commons/math/analysis/InterpolatorTest.java
@@ -0,0 +1,359 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.commons.math.analysis;
+
+import org.apache.commons.math.MathException;
+
+import junit.framework.Test;
+import junit.framework.TestCase;
+import junit.framework.TestSuite;
+
+/**
+ * Test the interpolation framework.
+ *
+ * @version $Revision: 1.7 $ $Date: 2003/11/14 22:22:16 $ 
+ */
+public class InterpolatorTest extends TestCase {
+
+    public InterpolatorTest(String name) {
+        super(name);
+    }
+
+    public static Test suite() {
+        TestSuite suite = new TestSuite(InterpolatorTest.class);
+        suite.setName("UnivariateRealInterpolator Tests");
+        return suite;
+    }
+
+    public void testInterpolateLinearDegenerateTwoSegment()
+        throws MathException {
+        System.out.println(" deg 2 seg");
+        double xval[] = { 0.0, 0.5, 1.0 };
+        double yval[] = { 0.0, 0.5, 1.0 };
+        UnivariateRealInterpolator i = new SplineInterpolator();
+        UnivariateRealFunction f = i.interpolate(xval, yval);
+        double x;
+        x = 0.0;
+        System.out.println(
+            "x="
+                + x
+                + " y="
+                + f.value(x)
+                + " y'="
+                + f.firstDerivative(x)
+                + " y''="
+                + f.secondDerivative(x));
+        x = 0.5;
+        System.out.println(
+            "x="
+                + x
+                + " y="
+                + f.value(x)
+                + " y'="
+                + f.firstDerivative(x)
+                + " y''="
+                + f.secondDerivative(x));
+        x = 1 - 1E-6;
+        System.out.println(
+            "x="
+                + x
+                + " y="
+                + f.value(x)
+                + " y'="
+                + f.firstDerivative(x)
+                + " y''="
+                + f.secondDerivative(x));
+    }
+
+    public void testInterpolateLinearDegenerateThreeSegment()
+        throws MathException {
+        System.out.println(" deg 3 seg");
+        double xval[] = { 0.0, 0.5, 1.0, 1.5 };
+        double yval[] = { 0.0, 0.5, 1.0, 1.5 };
+        UnivariateRealInterpolator i = new SplineInterpolator();
+        UnivariateRealFunction f = i.interpolate(xval, yval);
+        double x;
+        x = 0.0;
+        System.out.println(
+            "x="
+                + x
+                + " y="
+                + f.value(x)
+                + " y'="
+                + f.firstDerivative(x)
+                + " y''="
+                + f.secondDerivative(x));
+        x = 0.5 - 1E-6;
+        System.out.println(
+            "x="
+                + x
+                + " y="
+                + f.value(x)
+                + " y'="
+                + f.firstDerivative(x)
+                + " y''="
+                + f.secondDerivative(x));
+        x = 0.5;
+        System.out.println(
+            "x="
+                + x
+                + " y="
+                + f.value(x)
+                + " y'="
+                + f.firstDerivative(x)
+                + " y''="
+                + f.secondDerivative(x));
+        x = 1 - 1E-6;
+        System.out.println(
+            "x="
+                + x
+                + " y="
+                + f.value(x)
+                + " y'="
+                + f.firstDerivative(x)
+                + " y''="
+                + f.secondDerivative(x));
+        x = 1;
+        System.out.println(
+            "x="
+                + x
+                + " y="
+                + f.value(x)
+                + " y'="
+                + f.firstDerivative(x)
+                + " y''="
+                + f.secondDerivative(x));
+        x = 1.5 - 1E-6;
+        System.out.println(
+            "x="
+                + x
+                + " y="
+                + f.value(x)
+                + " y'="
+                + f.firstDerivative(x)
+                + " y''="
+                + f.secondDerivative(x));
+    }
+
+    public void testInterpolateLinear() throws MathException {
+        System.out.println(" triang 2 seg");
+        double xval[] = { 0.0, 0.5, 1.0 };
+        double yval[] = { 0.0, 0.5, 0.0 };
+        UnivariateRealInterpolator i = new SplineInterpolator();
+        UnivariateRealFunction f = i.interpolate(xval, yval);
+        double x;
+        x = 0.0;
+        System.out.println(
+            "x="
+                + x
+                + " y="
+                + f.value(x)
+                + " y'="
+                + f.firstDerivative(x)
+                + " y''="
+                + f.secondDerivative(x));
+        x = 0.5 - 1E-6;
+        System.out.println(
+            "x="
+                + x
+                + " y="
+                + f.value(x)
+                + " y'="
+                + f.firstDerivative(x)
+                + " y''="
+                + f.secondDerivative(x));
+        x = 0.5;
+        System.out.println(
+            "x="
+                + x
+                + " y="
+                + f.value(x)
+                + " y'="
+                + f.firstDerivative(x)
+                + " y''="
+                + f.secondDerivative(x));
+        x = 1 - 1E-6;
+        System.out.println(
+            "x="
+                + x
+                + " y="
+                + f.value(x)
+                + " y'="
+                + f.firstDerivative(x)
+                + " y''="
+                + f.secondDerivative(x));
+    }
+
+    public void testInterpolateSin() throws MathException {
+        System.out.println(" sin");
+        double xval[] =
+            {
+                0.0,
+                Math.PI / 6.0,
+                Math.PI / 2.0,
+                5.0 * Math.PI / 6.0,
+                Math.PI,
+                7.0 * Math.PI / 6.0,
+                3.0 * Math.PI / 2.0,
+                11.0 * Math.PI / 6.0,
+                2.0 * Math.PI };
+        double yval[] = { 0.0, 0.5, 1.0, 0.5, 0.0, -0.5, -1.0, -0.5, 0.0 };
+
+        System.out.println("n=" + xval.length);
+        UnivariateRealInterpolator i = new SplineInterpolator();
+        UnivariateRealFunction f = i.interpolate(xval, yval);
+        double x;
+        x = 0.0;
+        System.out.println(
+            "x="
+                + x
+                + " y="
+                + f.value(x)
+                + " y'="
+                + f.firstDerivative(x)
+                + " y''="
+                + f.secondDerivative(x));
+        x = Math.PI / 6.0 - 1E-6;
+        System.out.println(
+            "x="
+                + x
+                + " y="
+                + f.value(x)
+                + " y'="
+                + f.firstDerivative(x)
+                + " y''="
+                + f.secondDerivative(x));
+        x = Math.PI / 6.0 + 1E-6;
+        System.out.println(
+            "x="
+                + x
+                + " y="
+                + f.value(x)
+                + " y'="
+                + f.firstDerivative(x)
+                + " y''="
+                + f.secondDerivative(x));
+        x = Math.PI / 2 - 1E-6;
+        System.out.println(
+            "x="
+                + x
+                + " y="
+                + f.value(x)
+                + " y'="
+                + f.firstDerivative(x)
+                + " y''="
+                + f.secondDerivative(x));
+        x = Math.PI / 2 + 1E-6;
+        System.out.println(
+            "x="
+                + x
+                + " y="
+                + f.value(x)
+                + " y'="
+                + f.firstDerivative(x)
+                + " y''="
+                + f.secondDerivative(x));
+        x = Math.PI - 1E-6;
+        System.out.println(
+            "x="
+                + x
+                + " y="
+                + f.value(x)
+                + " y'="
+                + f.firstDerivative(x)
+                + " y''="
+                + f.secondDerivative(x));
+        x = Math.PI + 1E-6;
+        System.out.println(
+            "x="
+                + x
+                + " y="
+                + f.value(x)
+                + " y'="
+                + f.firstDerivative(x)
+                + " y''="
+                + f.secondDerivative(x));
+        x = 2.0 * Math.PI - 1E-6;
+        System.out.println(
+            "x="
+                + x
+                + " y="
+                + f.value(x)
+                + " y'="
+                + f.firstDerivative(x)
+                + " y''="
+                + f.secondDerivative(x));
+        //assertEquals(0.5,f.value(Math.PI/6.0),)
+    }
+
+    public void testIllegalArguments() throws MathException {
+        // Data set arrays of different size.
+        UnivariateRealInterpolator i = new SplineInterpolator();
+        try {
+            double xval[] = { 0.0, 1.0 };
+            double yval[] = { 0.0, 1.0, 2.0 };
+            i.interpolate(xval, yval);
+            fail("Failed to detect data set array with different sizes.");
+        } catch (IllegalArgumentException iae) {
+        }
+        // X values not sorted.
+        try {
+            double xval[] = { 0.0, 1.0, 0.5 };
+            double yval[] = { 0.0, 1.0, 2.0 };
+            i.interpolate(xval, yval);
+            fail("Failed to detect unsorted arguments.");
+        } catch (IllegalArgumentException iae) {
+        }
+    }
+}
diff --git a/src/test/org/apache/commons/math/analysis/QuinticFunction.java b/src/test/org/apache/commons/math/analysis/QuinticFunction.java
new file mode 100644
index 0000000..e397c6a
--- /dev/null
+++ b/src/test/org/apache/commons/math/analysis/QuinticFunction.java
@@ -0,0 +1,87 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.commons.math.analysis;
+
+import org.apache.commons.math.MathException;
+
+/**
+ * Auxillary class for testing solvers.
+ *
+ * @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:17 $ 
+ */
+public class QuinticFunction implements UnivariateRealFunction {
+
+    /* Evaluate quintic.
+     * @see org.apache.commons.math.UnivariateRealFunction#value(double)
+     */
+    public double value(double x) throws MathException {
+        return (x-1)*(x-0.5)*x*(x+0.5)*(x+1);
+    }
+
+    /* First derivative of quintic.
+     * @see org.apache.commons.math.UnivariateRealFunction#firstDerivative(double)
+     */
+    public double firstDerivative(double x) throws MathException {
+        return (5*x*x-3.75)*x*x+0.25;
+    }
+
+    /* Second order derivative of quintic.
+     * Unsupported.
+     * @see org.apache.commons.math.UnivariateRealFunction#secondDerivative(double)
+     */
+    public double secondDerivative(double x) throws MathException {
+        throw new UnsupportedOperationException();
+    }
+
+}
diff --git a/src/test/org/apache/commons/math/analysis/RealSolverTest.java b/src/test/org/apache/commons/math/analysis/RealSolverTest.java
new file mode 100644
index 0000000..ab2e247
--- /dev/null
+++ b/src/test/org/apache/commons/math/analysis/RealSolverTest.java
@@ -0,0 +1,307 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.commons.math.analysis;
+
+import org.apache.commons.math.MathException;
+
+import junit.framework.Assert;
+import junit.framework.Test;
+import junit.framework.TestCase;
+import junit.framework.TestSuite;
+
+/**
+ * Testcase for UnivariateRealSolver.
+ * Because Brent-Dekker is guaranteed to converge in less than the default
+ * maximum iteration count due to bisection fallback, it is quite hard to
+ * debug. I include measured iteration counts plus one in order to detect
+ * regressions. On average Brent-Dekker should use 4..5 iterations for the
+ * default absolute accuracy of 10E-8 for sinus and the quintic function around
+ * zero, and 5..10 iterations for the other zeros.
+ * 
+ * @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:16 $
+ */
+public final class RealSolverTest extends TestCase {
+
+    public RealSolverTest(String name) {
+        super(name);
+    }
+
+    public static Test suite() {
+        TestSuite suite = new TestSuite(RealSolverTest.class);
+        suite.setName("UnivariateRealSolver Tests");
+        return suite;
+    }
+
+    public void testSinZero() throws MathException {
+        // The sinus function is behaved well around the root at #pi. The second
+        // order derivative is zero, which means linar approximating methods will
+        // still converge quadratically. 
+        UnivariateRealFunction f = new SinFunction();
+        double result;
+        UnivariateRealSolver solver = new BrentSolver(f);
+        // Somewhat benign interval. The function is monotonous.
+        result = solver.solve(3, 4);
+        System.out.println(
+            "Root: " + result + " Iterations: " + solver.getIterationCount());
+        assertEquals(result, Math.PI, solver.getAbsoluteAccuracy());
+        // 4 iterations on i586 JDK 1.4.1.
+        assertTrue(solver.getIterationCount() <= 5);
+        // Larger and somewhat less benign interval. The function is grows first.
+        result = solver.solve(1, 4);
+        System.out.println(
+            "Root: " + result + " Iterations: " + solver.getIterationCount());
+        assertEquals(result, Math.PI, solver.getAbsoluteAccuracy());
+        // 5 iterations on i586 JDK 1.4.1.
+        assertTrue(solver.getIterationCount() <= 6);
+        solver = new SecantSolver(f);
+        result = solver.solve(3, 4);
+        System.out.println(
+            "Root: " + result + " Iterations: " + solver.getIterationCount());
+        assertEquals(result, Math.PI, solver.getAbsoluteAccuracy());
+        // 4 iterations on i586 JDK 1.4.1.
+        assertTrue(solver.getIterationCount() <= 5);
+        result = solver.solve(1, 4);
+        System.out.println(
+            "Root: " + result + " Iterations: " + solver.getIterationCount());
+        assertEquals(result, Math.PI, solver.getAbsoluteAccuracy());
+        // 5 iterations on i586 JDK 1.4.1.
+        assertTrue(solver.getIterationCount() <= 6);
+    }
+
+    public void testQuinticZero() throws MathException {
+        // The quintic function has zeroes at 0, +-0.5 and +-1.
+        // Around the root of 0 the function is well behaved, with a second derivative
+        // of zero a 0.
+        // The other roots are less well to find, in particular the root at 1, because
+        // the function grows fast for x>1.
+        // The function has extrema (first derivative is zero) at 0.27195613 and 0.82221643,
+        // intervals containing these values are harder for the solvers.
+        UnivariateRealFunction f = new QuinticFunction();
+        double result;
+        // Brent-Dekker solver.
+        UnivariateRealSolver solver = new BrentSolver(f);
+        // Symmetric bracket around 0. Test whether solvers can handle hitting
+        // the root in the first iteration.
+        result = solver.solve(-0.2, 0.2);
+        System.out.println(
+            "Root: " + result + " Iterations: " + solver.getIterationCount());
+        assertEquals(result, 0, solver.getAbsoluteAccuracy());
+        assertTrue(solver.getIterationCount() <= 2);
+        // 1 iterations on i586 JDK 1.4.1.
+        // Asymmetric bracket around 0, just for fun. Contains extremum.
+        result = solver.solve(-0.1, 0.3);
+        System.out.println(
+            "Root: " + result + " Iterations: " + solver.getIterationCount());
+        assertEquals(result, 0, solver.getAbsoluteAccuracy());
+        // 5 iterations on i586 JDK 1.4.1.
+        assertTrue(solver.getIterationCount() <= 6);
+        // Large bracket around 0. Contains two extrema.
+        result = solver.solve(-0.3, 0.45);
+        System.out.println(
+            "Root: " + result + " Iterations: " + solver.getIterationCount());
+        assertEquals(result, 0, solver.getAbsoluteAccuracy());
+        // 6 iterations on i586 JDK 1.4.1.
+        assertTrue(solver.getIterationCount() <= 7);
+        // Benign bracket around 0.5, function is monotonous.
+        result = solver.solve(0.3, 0.7);
+        System.out.println(
+            "Root: " + result + " Iterations: " + solver.getIterationCount());
+        assertEquals(result, 0.5, solver.getAbsoluteAccuracy());
+        // 6 iterations on i586 JDK 1.4.1.
+        assertTrue(solver.getIterationCount() <= 7);
+        // Less benign bracket around 0.5, contains one extremum.
+        result = solver.solve(0.2, 0.6);
+        System.out.println(
+            "Root: " + result + " Iterations: " + solver.getIterationCount());
+        assertEquals(result, 0.5, solver.getAbsoluteAccuracy());
+        // 6 iterations on i586 JDK 1.4.1.
+        assertTrue(solver.getIterationCount() <= 7);
+        // Large, less benign bracket around 0.5, contains both extrema.
+        result = solver.solve(0.05, 0.95);
+        System.out.println(
+            "Root: " + result + " Iterations: " + solver.getIterationCount());
+        assertEquals(result, 0.5, solver.getAbsoluteAccuracy());
+        // 8 iterations on i586 JDK 1.4.1.
+        assertTrue(solver.getIterationCount() <= 9);
+        // Relatively benign bracket around 1, function is monotonous. Fast growth for x>1
+        // is still a problem.
+        result = solver.solve(0.85, 1.25);
+        System.out.println(
+            "Root: " + result + " Iterations: " + solver.getIterationCount());
+        assertEquals(result, 1.0, solver.getAbsoluteAccuracy());
+        // 8 iterations on i586 JDK 1.4.1.
+        assertTrue(solver.getIterationCount() <= 9);
+        // Less benign bracket around 1 with extremum.
+        result = solver.solve(0.8, 1.2);
+        System.out.println(
+            "Root: " + result + " Iterations: " + solver.getIterationCount());
+        assertEquals(result, 1.0, solver.getAbsoluteAccuracy());
+        // 8 iterations on i586 JDK 1.4.1.
+        assertTrue(solver.getIterationCount() <= 9);
+        // Large bracket around 1. Monotonous.
+        result = solver.solve(0.85, 1.75);
+        System.out.println(
+            "Root: " + result + " Iterations: " + solver.getIterationCount());
+        assertEquals(result, 1.0, solver.getAbsoluteAccuracy());
+        // 10 iterations on i586 JDK 1.4.1.
+        assertTrue(solver.getIterationCount() <= 11);
+        // Large bracket around 1. Interval contains extremum.
+        result = solver.solve(0.55, 1.45);
+        System.out.println(
+            "Root: " + result + " Iterations: " + solver.getIterationCount());
+        assertEquals(result, 1.0, solver.getAbsoluteAccuracy());
+        // 7 iterations on i586 JDK 1.4.1.
+        assertTrue(solver.getIterationCount() <= 8);
+        // Very large bracket around 1 for testing fast growth behaviour.
+        result = solver.solve(0.85, 5);
+        System.out.println(
+            "Root: " + result + " Iterations: " + solver.getIterationCount());
+        assertEquals(result, 1.0, solver.getAbsoluteAccuracy());
+        // 12 iterations on i586 JDK 1.4.1.
+        assertTrue(solver.getIterationCount() <= 13);
+        // Secant solver.
+        solver = new SecantSolver(f);
+        result = solver.solve(-0.2, 0.2);
+        System.out.println(
+            "Root: " + result + " Iterations: " + solver.getIterationCount());
+        assertEquals(result, 0, solver.getAbsoluteAccuracy());
+        // 1 iterations on i586 JDK 1.4.1.
+        assertTrue(solver.getIterationCount() <= 2);
+        result = solver.solve(-0.1, 0.3);
+        System.out.println(
+            "Root: " + result + " Iterations: " + solver.getIterationCount());
+        assertEquals(result, 0, solver.getAbsoluteAccuracy());
+        // 5 iterations on i586 JDK 1.4.1.
+        assertTrue(solver.getIterationCount() <= 6);
+        result = solver.solve(-0.3, 0.45);
+        System.out.println(
+            "Root: " + result + " Iterations: " + solver.getIterationCount());
+        assertEquals(result, 0, solver.getAbsoluteAccuracy());
+        // 6 iterations on i586 JDK 1.4.1.
+        assertTrue(solver.getIterationCount() <= 7);
+        result = solver.solve(0.3, 0.7);
+        System.out.println(
+            "Root: " + result + " Iterations: " + solver.getIterationCount());
+        assertEquals(result, 0.5, solver.getAbsoluteAccuracy());
+        // 7 iterations on i586 JDK 1.4.1.
+        assertTrue(solver.getIterationCount() <= 8);
+        result = solver.solve(0.2, 0.6);
+        System.out.println(
+            "Root: " + result + " Iterations: " + solver.getIterationCount());
+        assertEquals(result, 0.5, solver.getAbsoluteAccuracy());
+        // 6 iterations on i586 JDK 1.4.1.
+        assertTrue(solver.getIterationCount() <= 7);
+        result = solver.solve(0.05, 0.95);
+        System.out.println(
+            "Root: " + result + " Iterations: " + solver.getIterationCount());
+        assertEquals(result, 0.5, solver.getAbsoluteAccuracy());
+        // 8 iterations on i586 JDK 1.4.1.
+        assertTrue(solver.getIterationCount() <= 9);
+        result = solver.solve(0.85, 1.25);
+        System.out.println(
+            "Root: " + result + " Iterations: " + solver.getIterationCount());
+        assertEquals(result, 1.0, solver.getAbsoluteAccuracy());
+        // 10 iterations on i586 JDK 1.4.1.
+        assertTrue(solver.getIterationCount() <= 11);
+        result = solver.solve(0.8, 1.2);
+        System.out.println(
+            "Root: " + result + " Iterations: " + solver.getIterationCount());
+        assertEquals(result, 1.0, solver.getAbsoluteAccuracy());
+        // 8 iterations on i586 JDK 1.4.1.
+        assertTrue(solver.getIterationCount() <= 9);
+        result = solver.solve(0.85, 1.75);
+        System.out.println(
+            "Root: " + result + " Iterations: " + solver.getIterationCount());
+        assertEquals(result, 1.0, solver.getAbsoluteAccuracy());
+        // 14 iterations on i586 JDK 1.4.1.
+        assertTrue(solver.getIterationCount() <= 15);
+        // The followig is especially slow because the solver first has to reduce
+        // the bracket to exclude the extremum. After that, convergence is rapide.
+        result = solver.solve(0.55, 1.45);
+        System.out.println(
+            "Root: " + result + " Iterations: " + solver.getIterationCount());
+        assertEquals(result, 1.0, solver.getAbsoluteAccuracy());
+        // 7 iterations on i586 JDK 1.4.1.
+        assertTrue(solver.getIterationCount() <= 8);
+        result = solver.solve(0.85, 5);
+        System.out.println(
+            "Root: " + result + " Iterations: " + solver.getIterationCount());
+        assertEquals(result, 1.0, solver.getAbsoluteAccuracy());
+        // 14 iterations on i586 JDK 1.4.1.
+        assertTrue(solver.getIterationCount() <= 15);
+        // Static solve method
+        result = UnivariateRealSolverUtils.solve(f, -0.2, 0.2);
+        assertEquals(result, 0, solver.getAbsoluteAccuracy());
+        result = UnivariateRealSolverUtils.solve(f, -0.1, 0.3);
+        Assert.assertEquals(result, 0, 1E-8);
+        result = UnivariateRealSolverUtils.solve(f, -0.3, 0.45);
+        Assert.assertEquals(result, 0, 1E-6);
+        result = UnivariateRealSolverUtils.solve(f, 0.3, 0.7);
+        Assert.assertEquals(result, 0.5, 1E-6);
+        result = UnivariateRealSolverUtils.solve(f, 0.2, 0.6);
+        Assert.assertEquals(result, 0.5, 1E-6);
+        result = UnivariateRealSolverUtils.solve(f, 0.05, 0.95);
+        Assert.assertEquals(result, 0.5, 1E-6);
+        result = UnivariateRealSolverUtils.solve(f, 0.85, 1.25);
+        Assert.assertEquals(result, 1.0, 1E-6);
+        result = UnivariateRealSolverUtils.solve(f, 0.8, 1.2);
+        Assert.assertEquals(result, 1.0, 1E-6);
+        result = UnivariateRealSolverUtils.solve(f, 0.85, 1.75);
+        Assert.assertEquals(result, 1.0, 1E-6);
+        result = UnivariateRealSolverUtils.solve(f, 0.55, 1.45);
+        Assert.assertEquals(result, 1.0, 1E-6);
+        result = UnivariateRealSolverUtils.solve(f, 0.85, 5);
+        Assert.assertEquals(result, 1.0, 1E-6);
+    }
+}
diff --git a/src/test/org/apache/commons/math/analysis/SinFunction.java b/src/test/org/apache/commons/math/analysis/SinFunction.java
new file mode 100644
index 0000000..d3d90f3
--- /dev/null
+++ b/src/test/org/apache/commons/math/analysis/SinFunction.java
@@ -0,0 +1,92 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.commons.math.analysis;
+
+import org.apache.commons.math.MathException;
+
+/**
+ * Auxillary class for testing solvers.
+ *
+ * The function is extraordinarily well behaved around zero roots: it
+ * has an inflection point there (second order derivative is zero),
+ * which means linear approximation (Regula Falsi) will converge
+ * quadratically.
+ * 
+ * @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:17 $
+ */
+public class SinFunction implements UnivariateRealFunction {
+
+    /* Evaluate sinus fuction.
+     * @see org.apache.commons.math.UnivariateRealFunction#value(double)
+     */
+    public double value(double x) throws MathException {
+        return Math.sin(x);
+    }
+
+    /* First derivative of sinus function
+     * @see org.apache.commons.math.UnivariateRealFunction#firstDerivative(double)
+     */
+    public double firstDerivative(double x) throws MathException {
+        return Math.cos(x);
+    }
+
+    /* Second derivative of sinus function.
+     * Unsupported.
+     * @see org.apache.commons.math.UnivariateRealFunction#secondDerivative(double)
+     */
+    public double secondDerivative(double x) throws MathException {
+        throw new UnsupportedOperationException();
+    }
+
+}
diff --git a/src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java b/src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java
new file mode 100644
index 0000000..eb0f71a
--- /dev/null
+++ b/src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java
@@ -0,0 +1,120 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+
+package org.apache.commons.math.analysis;
+
+import org.apache.commons.math.MathException;
+
+import junit.framework.TestCase;
+
+/**
+ * @version $Revision: 1.5 $ $Date: 2003/11/14 22:22:17 $
+ */
+public class UnivariateRealSolverUtilsTest extends TestCase {
+    /**
+     * 
+     */
+    public void testSolveNull(){
+        try {
+            UnivariateRealSolverUtils.solve(null, 0.0, 4.0);
+            fail();
+        } catch(MathException ex){
+            fail("math exception should no be thrown.");
+        } catch(IllegalArgumentException ex){
+            // success
+        }
+    }
+    
+    /**
+     * 
+     */
+    public void testSolveSin(){
+        try {
+            double x = UnivariateRealSolverUtils.solve(new SinFunction(), 1.0,
+                4.0);
+            assertEquals(Math.PI, x, 1.0e-4);
+        } catch(MathException ex){
+            fail("math exception should no be thrown.");
+        }
+    }
+
+    /**
+     * 
+     */
+    public void testSolveAccuracyNull(){
+        try {
+            double accuracy = 1.0e-6;
+            UnivariateRealSolverUtils.solve(null, 0.0, 4.0, accuracy);
+            fail();
+        } catch(MathException ex){
+            fail("math exception should no be thrown.");
+        } catch(IllegalArgumentException ex){
+            // success
+        }
+    }
+    
+    /**
+     * 
+     */
+    public void testSolveAccuracySin(){
+        try {
+            double accuracy = 1.0e-6;
+            double x = UnivariateRealSolverUtils.solve(new SinFunction(), 1.0,
+                4.0, accuracy);
+            assertEquals(Math.PI, x, accuracy);
+        } catch(MathException ex){
+            fail("math exception should no be thrown.");
+        }
+    }
+}
diff --git a/src/test/org/apache/commons/math/beans/Patient.java b/src/test/org/apache/commons/math/beans/Patient.java
new file mode 100644
index 0000000..f6b883e
--- /dev/null
+++ b/src/test/org/apache/commons/math/beans/Patient.java
@@ -0,0 +1,87 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.commons.math.beans;
+
+/**
+ * @version $Revision: 1.6 $ $Date: 2003/11/14 22:22:22 $
+ */
+public class Patient {
+
+    private VitalStats vitalStats;
+    private Integer age;
+
+    public Patient() {
+    }
+
+    public Patient(VitalStats vitalStats, Integer age) {
+        setVitalStats( vitalStats );
+        setAge( age );
+    }
+
+    public VitalStats getVitalStats() {
+        return( vitalStats );
+    }
+
+    public void setVitalStats(VitalStats vitalStats) {
+        this.vitalStats = vitalStats;
+    }
+
+    public Integer getAge() {
+        return age;
+    }
+
+    public void setAge(Integer age) {
+        this.age = age;
+    }
+}
diff --git a/src/test/org/apache/commons/math/beans/VitalStats.java b/src/test/org/apache/commons/math/beans/VitalStats.java
new file mode 100644
index 0000000..93476bd
--- /dev/null
+++ b/src/test/org/apache/commons/math/beans/VitalStats.java
@@ -0,0 +1,87 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.commons.math.beans;
+
+/**
+ * @version $Revision: 1.6 $ $Date: 2003/11/14 22:22:22 $
+ */
+public class VitalStats {
+
+    private Double heartrate;
+    private Double temperature;
+
+    public VitalStats() {
+    }
+
+    public VitalStats(Double heartrate, Double temperature) {
+        setHeartRate( heartrate );
+        setTemperature( temperature );
+    }
+
+    public Double getHeartRate() {
+        return heartrate;
+    }
+
+    public void setHeartRate(Double heartrate) {
+        this.heartrate = heartrate;
+    }
+
+    public Double getTemperature() {
+        return temperature;
+    }
+
+    public void setTemperature(Double temperature) {
+        this.temperature = temperature;
+    }
+}
diff --git a/src/test/org/apache/commons/math/complex/ComplexTest.java b/src/test/org/apache/commons/math/complex/ComplexTest.java
new file mode 100644
index 0000000..43091f1
--- /dev/null
+++ b/src/test/org/apache/commons/math/complex/ComplexTest.java
@@ -0,0 +1,167 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution,
+ *    if any, must include the following acknowledgment:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgment may appear in the software itself,
+ *    if and wherever such third-party acknowledgments normally appear.
+ *
+ * 4. The names "Apache" and "Apache Software Foundation" and
+ *    "Apache Geronimo" must not be used to endorse or promote products
+ *    derived from this software without prior written permission. For
+ *    written permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache",
+ *    "Apache Geronimo", nor may "Apache" appear in their name, without
+ *    prior written permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ *
+ * ====================================================================
+ */
+
+package org.apache.commons.math.complex;
+
+import junit.framework.TestCase;
+
+/**
+ * @version $Revision: 1.3 $ $Date: 2003/11/14 22:22:24 $
+ */
+public class ComplexTest extends TestCase {
+    
+    public void testConstructor() {
+        Complex z = new Complex(3.0, 4.0);
+        assertEquals(3.0, z.getReal(), 1.0e-5);
+        assertEquals(4.0, z.getImaginary(), 1.0e-5);
+    }
+    
+    public void testConstructorNaN() {
+        Complex z = new Complex(3.0, Double.NaN);
+        assertTrue(z.isNaN());
+
+        z = new Complex(Double.NaN, 4.0);
+        assertTrue(z.isNaN());
+
+        z = new Complex(3.0, 4.0);
+        assertFalse(z.isNaN());
+    }
+    
+    public void testAbs() {
+        Complex z = new Complex(3.0, 4.0);
+        assertEquals(5.0, z.abs(), 1.0e-5);
+    }
+    
+    public void testAdd() {
+        Complex x = new Complex(3.0, 4.0);
+        Complex y = new Complex(5.0, 6.0);
+        Complex z = x.add(y);
+        assertEquals(8.0, z.getReal(), 1.0e-5);
+        assertEquals(10.0, z.getImaginary(), 1.0e-5);
+    }
+    
+    public void testAddNaN() {
+        Complex x = new Complex(3.0, 4.0);
+        Complex z = x.add(Complex.NaN);
+        assertTrue(z.isNaN());
+    }
+    
+    public void testConjugate() {
+        Complex x = new Complex(3.0, 4.0);
+        Complex z = x.conjugate();
+        assertEquals(3.0, z.getReal(), 1.0e-5);
+        assertEquals(-4.0, z.getImaginary(), 1.0e-5);
+    }
+    
+    public void testConjugateNaN() {
+        Complex z = Complex.NaN.conjugate();
+        assertTrue(z.isNaN());
+    }
+    
+    public void testDivide() {
+        Complex x = new Complex(3.0, 4.0);
+        Complex y = new Complex(5.0, 6.0);
+        Complex z = x.divide(y);
+        assertEquals(39.0 / 61.0, z.getReal(), 1.0e-5);
+        assertEquals(2.0 / 61.0, z.getImaginary(), 1.0e-5);
+    }
+    
+    public void testDivideNaN() {
+        Complex x = new Complex(3.0, 4.0);
+        Complex z = x.divide(Complex.NaN);
+        assertTrue(z.isNaN());
+    }
+    
+    public void testMultiply() {
+        Complex x = new Complex(3.0, 4.0);
+        Complex y = new Complex(5.0, 6.0);
+        Complex z = x.multiply(y);
+        assertEquals(-9.0, z.getReal(), 1.0e-5);
+        assertEquals(38.0, z.getImaginary(), 1.0e-5);
+    }
+    
+    public void testMultiplyNaN() {
+        Complex x = new Complex(3.0, 4.0);
+        Complex z = x.multiply(Complex.NaN);
+        assertTrue(z.isNaN());
+    }
+    
+    public void testNegate() {
+        Complex x = new Complex(3.0, 4.0);
+        Complex z = x.negate();
+        assertEquals(-3.0, z.getReal(), 1.0e-5);
+        assertEquals(-4.0, z.getImaginary(), 1.0e-5);
+    }
+    
+    public void testNegateNaN() {
+        Complex z = Complex.NaN.negate();
+        assertTrue(z.isNaN());
+    }
+    
+    public void testSubtract() {
+        Complex x = new Complex(3.0, 4.0);
+        Complex y = new Complex(5.0, 6.0);
+        Complex z = x.subtract(y);
+        assertEquals(-2.0, z.getReal(), 1.0e-5);
+        assertEquals(-2.0, z.getImaginary(), 1.0e-5);
+    }
+    
+    public void testSubtractNaN() {
+        Complex x = new Complex(3.0, 4.0);
+        Complex z = x.subtract(Complex.NaN);
+        assertTrue(z.isNaN());
+    }
+}
diff --git a/src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java b/src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java
new file mode 100644
index 0000000..46036f3
--- /dev/null
+++ b/src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java
@@ -0,0 +1,163 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.commons.math.stat.distribution;
+
+import junit.framework.TestCase;
+
+/**
+ * @version $Revision: 1.7 $ $Date: 2003/11/14 22:22:22 $
+ */
+public class BinomialDistributionTest extends TestCase {
+    private BinomialDistribution b;
+    
+    /**
+     * Constructor for ChiSquareDistributionTest.
+     * @param name
+     */
+    public BinomialDistributionTest(String name) {
+        super(name);
+    }
+
+    /*
+     * @see TestCase#setUp()
+     */
+    protected void setUp() throws Exception {
+        super.setUp();
+        b = DistributionFactory.newInstance().createBinomialDistribution(10, 0.70);
+    }
+
+    /*
+     * @see TestCase#tearDown()
+     */
+    protected void tearDown() throws Exception {
+        b = null;
+        super.tearDown();
+    }
+
+    public void testInverseCummulativeProbability001() {
+        testValue(1, .001);
+    }
+    
+    public void testInverseCumulativeProbability010() {
+        testValue(2, .010);
+    }
+    
+    public void testInverseCumulativeProbability025() {
+        testValue(3, .025);
+    }
+
+    public void testInverseCumulativeProbability050() {
+        testValue(4, .050);
+    }
+    
+    public void testInverseCumulativeProbability100() {
+        testValue(4, .100);
+    }
+
+    public void testInverseCummulativeProbability999() {
+        testValue(9, .999);
+    }
+    
+    public void testInverseCumulativeProbability990() {
+        testValue(9, .990);
+    }
+    
+    public void testInverseCumulativeProbability975() {
+        testValue(9, .975);
+    }
+
+    public void testInverseCumulativeProbability950() {
+        testValue(8, .950);
+    }
+    
+    public void testInverseCumulativeProbability900() {
+        testValue(8, .900);
+    }
+
+    public void testCummulativeProbability1() {
+        testProbability(1, .00014);
+    }
+    
+    public void testCumulativeProbability2() {
+        testProbability(2, .00159);
+    }
+    
+    public void testCumulativeProbability3() {
+        testProbability(3, .01059);
+    }
+
+    public void testCumulativeProbability4() {
+        testProbability(4, .04735);
+    }
+    
+    public void testCumulativeProbability9() {
+        testProbability(9, .97175);
+    }
+
+    public void testCummulativeProbability8() {
+        testProbability(8, .85069);
+    }
+    
+    private void testProbability(int x, double expected){
+        double actual = b.cummulativeProbability(x);
+        assertEquals(expected, actual, 10e-4);
+    }
+    
+    private void testValue(int expected, double p){
+        int actual = b.inverseCummulativeProbability(p);
+        assertEquals(expected, actual);
+        assertTrue(b.cummulativeProbability(actual) <= p);
+        assertTrue(b.cummulativeProbability(actual + 1) >= p);
+    }
+}
diff --git a/src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java b/src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java
new file mode 100644
index 0000000..1d8fff3
--- /dev/null
+++ b/src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java
@@ -0,0 +1,130 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+
+package org.apache.commons.math.stat.distribution;
+
+import junit.framework.TestCase;
+
+/**
+ * @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:22 $
+ */
+public class ChiSquareDistributionTest extends TestCase {
+    private ChiSquaredDistribution chiSquare;
+    
+	/**
+	 * Constructor for ChiSquareDistributionTest.
+	 * @param name
+	 */
+	public ChiSquareDistributionTest(String name) {
+		super(name);
+	}
+
+	/*
+	 * @see TestCase#setUp()
+	 */
+	protected void setUp() throws Exception {
+		super.setUp();
+        chiSquare = DistributionFactory.newInstance().createChiSquareDistribution(5.0);
+	}
+
+	/*
+	 * @see TestCase#tearDown()
+	 */
+	protected void tearDown() throws Exception {
+        chiSquare = null;
+		super.tearDown();
+	}
+
+    public void testLowerTailProbability(){
+        testProbability( .210, .001);
+        testProbability( .554, .010);
+        testProbability( .831, .025);
+        testProbability(1.145, .050);
+        testProbability(1.610, .100);
+    }
+
+    public void testUpperTailProbability(){
+        testProbability(20.515, .999);
+        testProbability(15.086, .990);
+        testProbability(12.833, .975);
+        testProbability(11.070, .950);
+        testProbability( 9.236, .900);
+    }
+    
+    public void testLowerTailValues(){
+        testValue(.001,  .210);
+        testValue(.010,  .554);
+        testValue(.025,  .831);
+        testValue(.050, 1.145);
+        testValue(.100, 1.610);
+    }
+    
+    public void testUpperTailValues(){
+        testValue(.999, 20.515);
+        testValue(.990, 15.086);
+        testValue(.975, 12.833);
+        testValue(.950, 11.070);
+        testValue(.900,  9.236);
+    }
+    
+    private void testProbability(double x, double expected){
+        double actual = chiSquare.cummulativeProbability(x);
+        assertEquals("probability for " + x, expected, actual, 10e-4);
+    }
+    
+    private void testValue(double p, double expected){
+        double actual = chiSquare.inverseCummulativeProbability(p);
+        assertEquals("value for " + p, expected, actual, 10e-4);
+    }
+}
diff --git a/src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java b/src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java
new file mode 100644
index 0000000..f59578a
--- /dev/null
+++ b/src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java
@@ -0,0 +1,358 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+
+package org.apache.commons.math.stat.distribution;
+
+import junit.framework.TestCase;
+
+/**
+ * @version $Revision: 1.13 $ $Date: 2003/11/14 22:22:22 $
+ */
+public class DistributionFactoryImplTest extends TestCase {
+    /** */
+    private DistributionFactory factory;
+    
+	/**
+	 * Constructor for DistributionFactoryImplTest.
+	 * @param name
+	 */
+	public DistributionFactoryImplTest(String name) {
+		super(name);
+	}
+	/**
+	 * @throws java.lang.Exception
+	 */
+	protected void setUp() throws Exception {
+		super.setUp();
+        factory = new DistributionFactoryImpl();
+	}
+
+	/**
+	 * @throws java.lang.Exception
+	 */
+	protected void tearDown() throws Exception {
+        factory = null;
+		super.tearDown();
+	}
+    
+    public void testCreateChiSquareDistributionNegative(){
+        try {
+            factory.createChiSquareDistribution(-1.0);
+            fail("negative degrees of freedom.  IllegalArgumentException expected");
+        } catch (IllegalArgumentException ex) {
+            ;
+        }
+    }
+    
+    public void testCreateChiSquareDistributionZero(){
+        try {
+            factory.createChiSquareDistribution(0.0);
+            fail("zero degrees of freedom.  IllegalArgumentException expected");
+        } catch (IllegalArgumentException ex) {
+            ;
+        }
+    }
+    
+    public void testCreateChiSquareDistributionPositive(){
+        try {
+            factory.createChiSquareDistribution(1.0);
+        } catch (IllegalArgumentException ex) {
+            fail("positive degrees of freedom.  IllegalArgumentException is not expected");
+        }
+    }
+    
+    public void testCreateFDistributionNegativePositive(){
+        try {
+            factory.createFDistribution(-1.0, 1.0);
+            fail("negative degrees of freedom.  IllegalArgumentException expected");
+        } catch (IllegalArgumentException ex) {
+            ;
+        }
+    }
+    
+    public void testCreateFDistributionZeroPositive(){
+        try {
+            factory.createFDistribution(0.0, 1.0);
+            fail("zero degrees of freedom.  IllegalArgumentException expected");
+        } catch (IllegalArgumentException ex) {
+            ;
+        }
+    }
+    
+    public void testCreateFDistributionPositiveNegative(){
+        try {
+            factory.createFDistribution(1.0, -1.0);
+            fail("negative degrees of freedom.  IllegalArgumentException expected");
+        } catch (IllegalArgumentException ex) {
+            ;
+        }
+    }
+    
+    public void testCreateFDistributionPositiveZero(){
+        try {
+            factory.createFDistribution(1.0, 0.0);
+            fail("zero degrees of freedom.  IllegalArgumentException expected");
+        } catch (IllegalArgumentException ex) {
+            ;
+        }
+    }
+    
+    public void testCreateFDistributionPositivePositive(){
+        try {
+            factory.createFDistribution(1.0, 1.0);
+        } catch (IllegalArgumentException ex) {
+            fail("positive degrees of freedom.  IllegalArgumentException is not expected");
+        }
+    }
+    
+    public void testCreateExponentialDistributionNegative(){
+        try {
+            factory.createExponentialDistribution(-1.0);
+            fail("negative mean.  IllegalArgumentException expected");
+        } catch (IllegalArgumentException ex) {
+            ;
+        }
+    }
+    
+    public void testCreateExponentialDistributionZero(){
+        try {
+            factory.createExponentialDistribution(0.0);
+            fail("zero mean.  IllegalArgumentException expected");
+        } catch (IllegalArgumentException ex) {
+            ;
+        }
+    }
+    
+    public void testCreateExponentialDistributionPositive(){
+        try {
+            factory.createExponentialDistribution(1.0);
+        } catch (IllegalArgumentException ex) {
+            fail("positive mean.  IllegalArgumentException is not expected");
+        }
+    }
+    
+    public void testCreateGammaDistributionNegativePositive(){
+        try {
+            factory.createGammaDistribution(-1.0, 1.0);
+            fail("negative alpha.  IllegalArgumentException expected");
+        } catch (IllegalArgumentException ex) {
+            ;
+        }
+    }
+    
+    public void testCreateGammaDistributionZeroPositive(){
+        try {
+            factory.createGammaDistribution(0.0, 1.0);
+            fail("zero alpha.  IllegalArgumentException expected");
+        } catch (IllegalArgumentException ex) {
+            ;
+        }
+    }
+    
+    public void testCreateGammaDistributionPositiveNegative(){
+        try {
+            factory.createGammaDistribution(1.0, -1.0);
+            fail("negative beta.  IllegalArgumentException expected");
+        } catch (IllegalArgumentException ex) {
+            ;
+        }
+    }
+    
+    public void testCreateGammaDistributionPositiveZero(){
+        try {
+            factory.createGammaDistribution(1.0, 0.0);
+            fail("zero beta.  IllegalArgumentException expected");
+        } catch (IllegalArgumentException ex) {
+            ;
+        }
+    }
+    
+    public void testCreateGammaDistributionPositivePositive(){
+        try {
+            factory.createGammaDistribution(1.0, 1.0);
+        } catch (IllegalArgumentException ex) {
+            fail("positive alpah and beta.  IllegalArgumentException is not expected");
+        }
+    }
+    
+    public void testCreateTDistributionNegative(){
+        try {
+            factory.createTDistribution(-1.0);
+            fail("negative degrees of freedom.  IllegalArgumentException expected");
+        } catch (IllegalArgumentException ex) {
+            ;
+        }
+    }
+    
+    public void testCreateTDistributionZero(){
+        try {
+            factory.createTDistribution(0.0);
+            fail("zero degrees of freedom.  IllegalArgumentException expected");
+        } catch (IllegalArgumentException ex) {
+            ;
+        }
+    }
+    
+    public void testCreateTDistributionPositive(){
+        try {
+            factory.createTDistribution(1.0);
+        } catch (IllegalArgumentException ex) {
+            fail("positive degrees of freedom.  IllegalArgumentException is not expected");
+        }
+    }
+    
+    public void testBinomialDistributionNegativePositive(){
+        try {
+            factory.createBinomialDistribution(-1, 0.5);
+            fail("negative number of trials.  IllegalArgumentException expected");
+        } catch (IllegalArgumentException ex ) {
+        }
+    }
+    
+    public void testBinomialDistributionZeroPositive(){
+        try {
+            factory.createBinomialDistribution(0, 0.5);
+        } catch (IllegalArgumentException ex ) {
+            fail("zero number of trials.  IllegalArgumentException is not expected");
+        }
+    }
+    
+    public void testBinomialDistributionPositivePositive(){
+        try {
+            factory.createBinomialDistribution(10, 0.5);
+        } catch (IllegalArgumentException ex ) {
+            fail("positive number of trials.  IllegalArgumentException is not expected");
+        }
+    }
+    
+    public void testBinomialDistributionPositiveNegative(){
+        try {
+            factory.createBinomialDistribution(10, -0.5);
+            fail("negative probability of success.  IllegalArgumentException expected");
+        } catch (IllegalArgumentException ex ) {
+        }
+    }
+    
+    public void testBinomialDistributionPositiveZero(){
+        try {
+            factory.createBinomialDistribution(10, 0.0);
+        } catch (IllegalArgumentException ex ) {
+            fail("zero probability of success.  IllegalArgumentException is not expected");
+        }
+    }
+    
+    public void testBinomialDistributionPositiveOne(){
+        try {
+            factory.createBinomialDistribution(10, 1.0);
+        } catch (IllegalArgumentException ex ) {
+            fail("valid probability of success.  IllegalArgumentException is not expected");
+        }
+    }
+    
+    public void testBinomialDistributionPositiveTwo(){
+        try {
+            factory.createBinomialDistribution(10, 2.0);
+            fail("high probability of success.  IllegalArgumentException expected");
+        } catch (IllegalArgumentException ex ) {
+        }
+    }
+    
+    public void testHypergeometricDistributionNegativePositivePositive(){
+        try {
+            factory.createHypergeometricDistribution(-1, 10, 10);
+            fail("negative population size.  IllegalArgumentException expected");
+        } catch(IllegalArgumentException ex) {
+        }
+    }
+    
+    public void testHypergeometricDistributionZeroPositivePositive(){
+        try {
+            factory.createHypergeometricDistribution(0, 10, 10);
+            fail("zero population size.  IllegalArgumentException expected");
+        } catch(IllegalArgumentException ex) {
+        }
+    }
+    
+    public void testHypergeometricDistributionPositiveNegativePositive(){
+        try {
+            factory.createHypergeometricDistribution(20, -1, 10);
+            fail("negative number of successes.  IllegalArgumentException expected");
+        } catch(IllegalArgumentException ex) {
+        }
+    }
+    
+    public void testHypergeometricDistributionPositiveZeroPositive(){
+        try {
+            factory.createHypergeometricDistribution(20, 0, 10);
+        } catch(IllegalArgumentException ex) {
+            fail("valid number of successes.  IllegalArgumentException is not expected");
+        }
+    }
+    
+    public void testHypergeometricDistributionPositivePositiveNegative(){
+        try {
+            factory.createHypergeometricDistribution(20, 10, -1);
+            fail("negative sample size.  IllegalArgumentException expected");
+        } catch(IllegalArgumentException ex) {
+        }
+    }
+    
+    public void testHypergeometricDistributionPositivePositiveZero(){
+        try {
+            factory.createHypergeometricDistribution(20, 10, 0);
+        } catch(IllegalArgumentException ex) {
+            fail("valid sample size.  IllegalArgumentException is not expected");
+        }
+    }
+}
diff --git a/src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java b/src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java
new file mode 100644
index 0000000..a94cbf8
--- /dev/null
+++ b/src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java
@@ -0,0 +1,208 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.commons.math.stat.distribution;
+
+import org.apache.commons.math.TestUtils;
+
+import junit.framework.TestCase;
+
+/**
+ * @version $Revision: 1.7 $ $Date: 2003/11/14 22:22:22 $
+ */
+public class ExponentialDistributionTest extends TestCase {
+    private ExponentialDistribution exp;
+    
+    /**
+     * Constructor for ChiSquareDistributionTest.
+     * @param name
+     */
+    public ExponentialDistributionTest(String name) {
+        super(name);
+    }
+
+    /*
+     * @see TestCase#setUp()
+     */
+    protected void setUp() throws Exception {
+        super.setUp();
+        exp = DistributionFactory.newInstance().createExponentialDistribution(5.0);
+    }
+
+    /*
+     * @see TestCase#tearDown()
+     */
+    protected void tearDown() throws Exception {
+        exp = null;
+        super.tearDown();
+    }
+
+    public void testInverseCummulativeProbability001() {
+        testValue(.005003, .001);
+    }
+    
+    public void testInverseCummulativeProbability010() {
+        testValue(0.050252, .010);
+    }
+    
+    public void testInverseCummulativeProbability025() {
+        testValue(0.126589, .025);
+    }
+
+    public void testInverseCummulativeProbability050() {
+        testValue(0.256566, .050);
+    }
+    
+    public void testInverseCummulativeProbability100() {
+        testValue(0.526803, .100);
+    }
+
+    public void testInverseCummulativeProbability999() {
+        testValue(34.5388, .999);
+    }
+    
+    public void testInverseCummulativeProbability990() {
+        testValue(23.0259, .990);
+    }
+    
+    public void testInverseCummulativeProbability975() {
+        testValue(18.4444, .975);
+    }
+
+    public void testInverseCummulativeProbability950() {
+        testValue(14.9787, .950);
+    }
+    
+    public void testInverseCummulativeProbability900() {
+        testValue(11.5129, .900);
+    }
+
+    public void testCummulativeProbability001() {
+        testProbability(0.005003, .001);
+    }
+    
+    public void testCummulativeProbability010() {
+        testProbability(0.050252, .010);
+    }
+    
+    public void testCummulativeProbability025() {
+        testProbability(0.126589, .025);
+    }
+
+    public void testCummulativeProbability050() {
+        testProbability(0.256566, .050);
+    }
+    
+    public void testCummulativeProbability100() {
+        testProbability(0.526803, .100);
+    }
+
+    public void testCummulativeProbability999() {
+        testProbability(34.5388, .999);
+    }
+    
+    public void testCummulativeProbability990() {
+        testProbability(23.0259, .990);
+    }
+    
+    public void testCummulativeProbability975() {
+        testProbability(18.4444, .975);
+    }
+
+    public void testCummulativeProbability950() {
+        testProbability(14.9787, .950);
+    }
+    
+    public void testCummulativeProbability900() {
+        testProbability(11.5129, .900);
+    }
+
+    public void testCummulativeProbabilityNegative() {
+        testProbability(-1.0, 0.0);
+    }
+
+    public void testCummulativeProbabilityZero() {
+        testProbability(0.0, 0.0);
+    }
+
+    public void testInverseCummulativeProbabilityNegative() {
+        testValue(Double.NaN, -1.0);
+    }
+
+    public void testInverseCummulativeProbabilityZero() {
+        testValue(0.0, 0.0);
+    }
+
+    public void testInverseCummulativeProbabilityOne() {
+        testValue(Double.POSITIVE_INFINITY, 1.0);
+    }
+
+    public void testInverseCummulativeProbabilityPositive() {
+        testValue(Double.NaN, 2.0);
+    }
+    
+    public void testCummulativeProbability2() {
+        double actual = exp.cummulativeProbability(0.25, 0.75);
+        assertEquals(0.0905214, actual, 10e-4);
+    }
+    
+    private void testProbability(double x, double expected){
+        double actual = exp.cummulativeProbability(x);
+        TestUtils.assertEquals(expected, actual, 10e-4);
+    }
+    
+    private void testValue(double expected, double p){
+        double actual = exp.inverseCummulativeProbability(p);
+        TestUtils.assertEquals(expected, actual, 10e-4);
+    }
+}
diff --git a/src/test/org/apache/commons/math/distribution/FDistributionTest.java b/src/test/org/apache/commons/math/distribution/FDistributionTest.java
new file mode 100644
index 0000000..23f8636
--- /dev/null
+++ b/src/test/org/apache/commons/math/distribution/FDistributionTest.java
@@ -0,0 +1,125 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.commons.math.stat.distribution;
+
+import junit.framework.TestCase;
+
+/**
+ * @version $Revision: 1.6 $ $Date: 2003/11/14 22:22:22 $
+ */
+public class FDistributionTest extends TestCase {
+    private FDistribution f;
+    
+    /**
+     * Constructor for ChiSquareDistributionTest.
+     * @param name
+     */
+    public FDistributionTest(String name) {
+        super(name);
+    }
+
+    /*
+     * @see TestCase#setUp()
+     */
+    protected void setUp() throws Exception {
+        super.setUp();
+        f = DistributionFactory.newInstance().createFDistribution(5.0, 6.0);
+    }
+
+    /*
+     * @see TestCase#tearDown()
+     */
+    protected void tearDown() throws Exception {
+        f = null;
+        super.tearDown();
+    }
+
+    public void testLowerTailProbability(){
+        testProbability(1.0 / 10.67, .010);
+        testProbability(1.0 /  6.98, .025);
+        testProbability(1.0 /  4.95, .050);
+        testProbability(1.0 /  3.40, .100);
+    }
+
+    public void testUpperTailProbability(){
+        testProbability(8.75, .990);
+        testProbability(5.99, .975);
+        testProbability(4.39, .950);
+        testProbability(3.11, .900);
+    }
+    
+    public void testLowerTailValues(){
+        testValue(1.0 / 10.67, .010);
+        testValue(1.0 /  6.98, .025);
+        testValue(1.0 /  4.95, .050);
+        testValue(1.0 /  3.40, .100);
+    }
+    
+    public void testUpperTailValues(){
+        testValue(8.75, .990);
+        testValue(5.99, .975);
+        testValue(4.39, .950);
+        testValue(3.11, .900);
+    }
+    
+    private void testProbability(double x, double expected){
+        double actual = f.cummulativeProbability(x);
+        assertEquals("probability for " + x, expected, actual, 1e-3);
+    }
+    
+    private void testValue(double expected, double p){
+        double actual = f.inverseCummulativeProbability(p);
+        assertEquals("value for " + p, expected, actual, 1e-2);
+    }
+}
diff --git a/src/test/org/apache/commons/math/distribution/GammaDistributionTest.java b/src/test/org/apache/commons/math/distribution/GammaDistributionTest.java
new file mode 100644
index 0000000..1f23666
--- /dev/null
+++ b/src/test/org/apache/commons/math/distribution/GammaDistributionTest.java
@@ -0,0 +1,87 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+
+package org.apache.commons.math.stat.distribution;
+
+import junit.framework.TestCase;
+
+/**
+ * @version $Revision: 1.9 $ $Date: 2003/11/14 22:22:22 $
+ */
+public class GammaDistributionTest extends TestCase {
+    public void testProbabilities(){
+        testProbability(-1.000, 4.0, 2.0, .0000);
+        testProbability(15.501, 4.0, 2.0, .9499);
+        testProbability( 0.504, 4.0, 1.0, .0018);
+        testProbability(10.011, 1.0, 2.0, .9933);
+        testProbability( 5.000, 2.0, 2.0, .7127);
+    }
+    
+    public void testValues(){
+        testValue(15.501, 4.0, 2.0, .9499);
+        testValue( 0.504, 4.0, 1.0, .0018);
+        testValue(10.011, 1.0, 2.0, .9933);
+        testValue( 5.000, 2.0, 2.0, .7127);
+    }
+            
+    private void testProbability(double x, double a, double b, double expected){
+        double actual = DistributionFactory.newInstance().createGammaDistribution(a, b).cummulativeProbability(x);
+        assertEquals("probability for " + x, expected, actual, 10e-4);
+    }
+
+    private void testValue(double expected, double a, double b, double p){
+        double actual = DistributionFactory.newInstance().createGammaDistribution(a, b).inverseCummulativeProbability(p);
+        assertEquals("critical value for " + p, expected, actual, 10e-4);
+    }
+}
diff --git a/src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java b/src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java
new file mode 100644
index 0000000..211e02e
--- /dev/null
+++ b/src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java
@@ -0,0 +1,164 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+
+package org.apache.commons.math.stat.distribution;
+
+import junit.framework.TestCase;
+
+/**
+ * @version $Revision: 1.5 $ $Date: 2003/11/14 22:22:22 $
+ */
+public class HypergeometricDistributionTest extends TestCase {
+    private HypergeometricDistribution h;
+    
+    /**
+     * Constructor for ChiSquareDistributionTest.
+     * @param name
+     */
+    public HypergeometricDistributionTest(String name) {
+        super(name);
+    }
+
+    /*
+     * @see TestCase#setUp()
+     */
+    protected void setUp() throws Exception {
+        super.setUp();
+        h = DistributionFactory.newInstance().createHypergeometricDistribution(10, 5, 5);
+    }
+
+    /*
+     * @see TestCase#tearDown()
+     */
+    protected void tearDown() throws Exception {
+        h = null;
+        super.tearDown();
+    }
+
+    public void testInverseCummulativeProbability001() {
+        testValue(-1, .001);
+    }
+    
+    public void testInverseCumulativeProbability010() {
+        testValue(0, .010);
+    }
+    
+    public void testInverseCumulativeProbability025() {
+        testValue(0, .025);
+    }
+
+    public void testInverseCumulativeProbability050() {
+        testValue(0, .050);
+    }
+    
+    public void testInverseCumulativeProbability100() {
+        testValue(0, .100);
+    }
+
+    public void testInverseCummulativeProbability999() {
+        testValue(4, .999);
+    }
+    
+    public void testInverseCumulativeProbability990() {
+        testValue(3, .990);
+    }
+    
+    public void testInverseCumulativeProbability975() {
+        testValue(3, .975);
+    }
+
+    public void testInverseCumulativeProbability950() {
+        testValue(3, .950);
+    }
+    
+    public void testInverseCumulativeProbability900() {
+        testValue(3, .900);
+    }
+
+    public void testCummulativeProbability0() {
+        testProbability(0, .00400);
+    }
+
+    public void testCummulativeProbability1() {
+        testProbability(1, .10318);
+    }
+    
+    public void testCumulativeProbability2() {
+        testProbability(2, .50000);
+    }
+    
+    public void testCumulativeProbability3() {
+        testProbability(3, .89683);
+    }
+
+    public void testCumulativeProbability4() {
+        testProbability(4, .99603);
+    }
+    
+    public void testCumulativeProbability5() {
+        testProbability(5, 1.00000);
+    }
+
+    private void testProbability(int x, double expected){
+        double actual = h.cummulativeProbability(x);
+        assertEquals(expected, actual, 10e-4);
+    }
+    
+    private void testValue(int expected, double p){
+        int actual = h.inverseCummulativeProbability(p);
+        assertEquals(expected, actual);
+        assertTrue(h.cummulativeProbability(actual) <= p);
+        assertTrue(h.cummulativeProbability(actual + 1) >= p);
+    }
+}
diff --git a/src/test/org/apache/commons/math/distribution/TDistributionTest.java b/src/test/org/apache/commons/math/distribution/TDistributionTest.java
new file mode 100644
index 0000000..24a6376
--- /dev/null
+++ b/src/test/org/apache/commons/math/distribution/TDistributionTest.java
@@ -0,0 +1,177 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.commons.math.stat.distribution;
+
+import junit.framework.TestCase;
+
+/**
+ * @version $Revision: 1.7 $ $Date: 2003/11/14 22:22:22 $
+ */
+public class TDistributionTest extends TestCase {
+    private TDistribution t;
+    
+    /**
+     * Constructor for ChiSquareDistributionTest.
+     * @param name
+     */
+    public TDistributionTest(String name) {
+        super(name);
+    }
+
+    /*
+     * @see TestCase#setUp()
+     */
+    protected void setUp() throws Exception {
+        super.setUp();
+        t = DistributionFactory.newInstance().createTDistribution(5.0);
+    }
+
+    /*
+     * @see TestCase#tearDown()
+     */
+    protected void tearDown() throws Exception {
+        t = null;
+        super.tearDown();
+    }
+
+    public void testInverseCummulativeProbability001() {
+        testValue(-5.893, .001);
+    }
+    
+    public void testInverseCumulativeProbability010() {
+        testValue(-3.365, .010);
+    }
+    
+    public void testInverseCumulativeProbability025() {
+        testValue(-2.571, .025);
+    }
+
+    public void testInverseCumulativeProbability050() {
+        testValue(-2.015, .050);
+    }
+    
+    public void testInverseCumulativeProbability100() {
+        testValue(-1.476, .100);
+    }
+
+    public void testInverseCummulativeProbability999() {
+        testValue(5.893, .999);
+    }
+    
+    public void testInverseCumulativeProbability990() {
+        testValue(3.365, .990);
+    }
+    
+    public void testInverseCumulativeProbability975() {
+        testValue(2.571, .975);
+    }
+
+    public void testInverseCumulativeProbability950() {
+        testValue(2.015, .950);
+    }
+    
+    public void testInverseCumulativeProbability900() {
+        testValue(1.476, .900);
+    }
+
+    public void testCummulativeProbability001() {
+        testProbability(-5.893, .001);
+    }
+    
+    public void testCumulativeProbability010() {
+        testProbability(-3.365, .010);
+    }
+    
+    public void testCumulativeProbability025() {
+        testProbability(-2.571, .025);
+    }
+
+    public void testCumulativeProbability050() {
+        testProbability(-2.015, .050);
+    }
+    
+    public void testCumulativeProbability100() {
+        testProbability(-1.476, .100);
+    }
+
+    public void testCummulativeProbability999() {
+        testProbability(5.893, .999);
+    }
+    
+    public void testCumulativeProbability990() {
+        testProbability(3.365, .990);
+    }
+    
+    public void testCumulativeProbability975() {
+        testProbability(2.571, .975);
+    }
+
+    public void testCumulativeProbability950() {
+        testProbability(2.015, .950);
+    }
+    
+    public void testCumulativeProbability900() {
+        testProbability(1.476, .900);
+    }
+    
+    private void testProbability(double x, double expected){
+        double actual = t.cummulativeProbability(x);
+        assertEquals(expected, actual, 10e-4);
+    }
+    
+    private void testValue(double expected, double p){
+        double actual = t.inverseCummulativeProbability(p);
+        assertEquals(expected, actual, 10e-4);
+    }
+}
diff --git a/src/test/org/apache/commons/math/linear/RealMatrixImplTest.java b/src/test/org/apache/commons/math/linear/RealMatrixImplTest.java
new file mode 100644
index 0000000..fe7f11f
--- /dev/null
+++ b/src/test/org/apache/commons/math/linear/RealMatrixImplTest.java
@@ -0,0 +1,412 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.commons.math.linear;
+
+import junit.framework.Test;
+import junit.framework.TestCase;
+import junit.framework.TestSuite;
+
+/**
+ * Test cases for the {@link RealMatrixImpl} class.
+ *
+ * @version $Revision: 1.7 $ $Date: 2003/11/14 22:22:19 $
+ */
+
+public final class RealMatrixImplTest extends TestCase {
+    
+    private double[][] testData = { {1d,2d,3d}, {2d,5d,3d}, {1d,0d,8d} };
+    private double[][] testDataPlus2 = { {3d,4d,5d}, {4d,7d,5d}, {3d,2d,10d} };
+    private double[][] testDataMinus = { {-1d,-2d,-3d}, {-2d,-5d,-3d}, 
+       {-1d,0d,-8d} };
+    private double[] testDataRow1 = {1d,2d,3d};
+    private double[] testDataCol3 = {3d,3d,8d};
+    private double[][] testDataInv = 
+        { {-40d,16d,9d}, {13d,-5d,-3d}, {5d,-2d,-1d} };
+    private double[][] preMultTest = {{8,12,33}};
+    private double[][] testData2 ={ {1d,2d,3d}, {2d,5d,3d}};
+    private double[][] testData2T = { {1d,2d}, {2d,5d}, {3d,3d}};
+    private double[][] testDataPlusInv = 
+        { {-39d,18d,12d}, {15d,0d,0d}, {6d,-2d,7d} };
+    private double[][] id = { {1d,0d,0d}, {0d,1d,0d}, {0d,0d,1d} };
+    private double[][] luData = { {2d,3d,3d}, {0d,5d,7d}, {6d,9d,8d} };
+    private double[][] singular = { {2d,3d}, {2d,3d} };
+    private double[][] bigSingular = {{1d,2d,3d,4d}, {2d,5d,3d,4d},
+        {7d,3d,256d,1930d}, {3d,7d,6d,8d}}; // 4th row = 1st + 2nd
+    private double[][] detData = { {1d,2d,3d}, {4d,5d,6d}, {7d,8d,10d} };
+    private double[] testVector = {1,2,3};
+    private double[] testVector2 = {1,2,3,4};
+    private double entryTolerance = 10E-16;
+    private double normTolerance = 10E-14;
+    
+    public RealMatrixImplTest(String name) {
+        super(name);
+    }
+    
+    public void setUp() {
+        
+    }
+    
+    public static Test suite() {
+        TestSuite suite = new TestSuite(RealMatrixImplTest.class);
+        suite.setName("RealMatrixImpl Tests");
+        return suite;
+    }
+    
+    /** test dimensions */
+    public void testDimensions() {
+        RealMatrixImpl m = new RealMatrixImpl(testData);
+        RealMatrixImpl m2 = new RealMatrixImpl(testData2);
+        assertEquals("testData row dimension",3,m.getRowDimension());
+        assertEquals("testData column dimension",3,m.getColumnDimension());
+        assertTrue("testData is square",m.isSquare());
+        assertEquals("testData2 row dimension",m2.getRowDimension(),2);
+        assertEquals("testData2 column dimension",m2.getColumnDimension(),3);
+        assertTrue("testData2 is not square",!m2.isSquare());
+        RealMatrixImpl m3 = new RealMatrixImpl();
+        m3.setData(testData);
+    } 
+    
+    /** test copy functions */
+    public void testCopyFunctions() {
+        RealMatrixImpl m = new RealMatrixImpl(testData);
+        RealMatrixImpl m2 = new RealMatrixImpl(testData2);
+        m2.setData(m.getData());
+        assertClose("getData",m2,m,entryTolerance);
+        // no dangling reference...
+        m2.setEntry(1,1,2000d);
+        RealMatrixImpl m3 = new RealMatrixImpl(testData);
+        assertClose("no getData side effect",m,m3,entryTolerance);
+        m3 = (RealMatrixImpl) m.copy();
+        double[][] stompMe = {{1d,2d,3d}};
+        m3.setDataRef(stompMe);
+        assertClose("no copy side effect",m,new RealMatrixImpl(testData),
+            entryTolerance);
+    }           
+    
+    /** test add */
+    public void testAdd() {
+        RealMatrixImpl m = new RealMatrixImpl(testData);
+        RealMatrixImpl mInv = new RealMatrixImpl(testDataInv);
+        RealMatrixImpl mPlusMInv = (RealMatrixImpl)m.add(mInv);
+        double[][] sumEntries = mPlusMInv.getData();
+        for (int row = 0; row < m.getRowDimension(); row++) {
+            for (int col = 0; col < m.getColumnDimension(); col++) {
+                assertEquals("sum entry entry",
+                    testDataPlusInv[row][col],sumEntries[row][col],
+                        entryTolerance);
+            }
+        }    
+    }
+    
+    /** test add failure */
+    public void testAddFail() {
+        RealMatrixImpl m = new RealMatrixImpl(testData);
+        RealMatrixImpl m2 = new RealMatrixImpl(testData2);
+        try {
+            RealMatrixImpl mPlusMInv = (RealMatrixImpl)m.add(m2);
+            fail("IllegalArgumentException expected");
+        } catch (IllegalArgumentException ex) {
+            ;
+        }
+    }
+    
+    /** test norm */
+    public void testNorm() {
+        RealMatrixImpl m = new RealMatrixImpl(testData);
+        RealMatrixImpl m2 = new RealMatrixImpl(testData2);
+        assertEquals("testData norm",14d,m.getNorm(),entryTolerance);
+        assertEquals("testData2 norm",7d,m2.getNorm(),entryTolerance);
+    }
+    
+     /** test m-n = m + -n */
+    public void testPlusMinus() {
+        RealMatrixImpl m = new RealMatrixImpl(testData);
+        RealMatrixImpl m2 = new RealMatrixImpl(testDataInv);
+        assertClose("m-n = m + -n",m.subtract(m2),
+            m2.scalarMultiply(-1d).add(m),entryTolerance);        
+        try {
+            RealMatrix a = m.subtract(new RealMatrixImpl(testData2));
+            fail("Expecting illegalArgumentException");
+        } catch (IllegalArgumentException ex) {
+            ;
+        }      
+    }
+    
+    /** test multiply */
+     public void testMultiply() {
+        RealMatrixImpl m = new RealMatrixImpl(testData);
+        RealMatrixImpl mInv = new RealMatrixImpl(testDataInv);
+        RealMatrixImpl identity = new RealMatrixImpl(id);
+        RealMatrixImpl m2 = new RealMatrixImpl(testData2);
+        assertClose("inverse multiply",m.multiply(mInv),
+            identity,entryTolerance);
+        assertClose("inverse multiply",mInv.multiply(m),
+            identity,entryTolerance);
+        assertClose("identity multiply",m.multiply(identity),
+            m,entryTolerance);
+        assertClose("identity multiply",identity.multiply(mInv),
+            mInv,entryTolerance);
+        assertClose("identity multiply",m2.multiply(identity),
+            m2,entryTolerance); 
+        try {
+            RealMatrix a = m.multiply(new RealMatrixImpl(bigSingular));
+            fail("Expecting illegalArgumentException");
+        } catch (IllegalArgumentException ex) {
+            ;
+        }      
+    }   
+        
+    /** test isSingular */
+    public void testIsSingular() {
+        RealMatrixImpl m = new RealMatrixImpl(singular);
+        assertTrue("singular",m.isSingular());
+        m = new RealMatrixImpl(bigSingular);
+        assertTrue("big singular",m.isSingular());
+        m = new RealMatrixImpl(id);
+        assertTrue("identity nonsingular",!m.isSingular());
+        m = new RealMatrixImpl(testData);
+        assertTrue("testData nonsingular",!m.isSingular());
+    }
+        
+    /** test inverse */
+    public void testInverse() {
+        RealMatrixImpl m = new RealMatrixImpl(testData);
+        RealMatrix mInv = new RealMatrixImpl(testDataInv);
+        assertClose("inverse",mInv,m.inverse(),normTolerance);
+        assertClose("inverse^2",m,m.inverse().inverse(),10E-12);
+    }
+    
+    /** test solve */
+    public void testSolve() {
+        RealMatrixImpl m = new RealMatrixImpl(testData);
+        RealMatrix mInv = new RealMatrixImpl(testDataInv);
+        // being a bit slothful here -- actually testing that X = A^-1 * B
+        assertClose("inverse-operate",mInv.operate(testVector),
+            m.solve(testVector),normTolerance);
+        try {
+            double[] x = m.solve(testVector2);
+            fail("expecting IllegalArgumentException");
+        } catch (IllegalArgumentException ex) {
+            ;
+        }       
+        RealMatrix bs = new RealMatrixImpl(bigSingular);
+        try {
+            RealMatrix a = bs.solve(bs);
+            fail("Expecting illegalArgumentException");
+        } catch (IllegalArgumentException ex) {
+            ;
+        }
+        try {
+            RealMatrix a = m.solve(bs);
+            fail("Expecting illegalArgumentException");
+        } catch (IllegalArgumentException ex) {
+            ;
+        }
+        try {
+            RealMatrix a = (new RealMatrixImpl(testData2)).solve(bs);
+            fail("Expecting illegalArgumentException");
+        } catch (IllegalArgumentException ex) {
+            ;
+        } 
+        try {
+            (new RealMatrixImpl(testData2)).LUDecompose();
+            fail("Expecting illegalArgumentException");
+        } catch (IllegalArgumentException ex) {
+            ;
+        }  
+    }
+    
+    /** test determinant */
+    public void testDeterminant() {       
+        RealMatrix m = new RealMatrixImpl(bigSingular);
+        assertEquals("singular determinant",0,m.getDeterminant(),0);
+        m = new RealMatrixImpl(detData);
+        assertEquals("nonsingular test",-3d,m.getDeterminant(),normTolerance);
+        try {
+            double a = new RealMatrixImpl(testData2).getDeterminant();
+            fail("Expecting illegalArgumentException");
+        } catch (IllegalArgumentException ex) {
+            ;
+        }      
+    }
+    
+    /** test trace */
+    public void testTrace() {
+        RealMatrix m = new RealMatrixImpl(id);
+        assertEquals("identity trace",3d,m.getTrace(),entryTolerance);
+        m = new RealMatrixImpl(testData2);
+        try {
+            double x = m.getTrace();
+            fail("Expecting illegalArgumentException");
+        } catch (IllegalArgumentException ex) {
+            ;
+        }      
+    }
+    
+    /** test sclarAdd */
+    public void testScalarAdd() {
+        RealMatrix m = new RealMatrixImpl(testData);
+        assertClose("scalar add",new RealMatrixImpl(testDataPlus2),
+            m.scalarAdd(2d),entryTolerance);
+    }
+                    
+    /** test operate */
+    public void testOperate() {
+        RealMatrix m = new RealMatrixImpl(id);
+        double[] x = m.operate(testVector);
+        assertClose("identity operate",testVector,x,entryTolerance);
+        m = new RealMatrixImpl(bigSingular);
+        try {
+            x = m.operate(testVector);
+            fail("Expecting illegalArgumentException");
+        } catch (IllegalArgumentException ex) {
+            ;
+        }      
+    }
+    
+    /** test transpose */
+    public void testTranspose() {
+        RealMatrix m = new RealMatrixImpl(testData); 
+        assertClose("inverse-transpose",m.inverse().transpose(),
+            m.transpose().inverse(),normTolerance);
+        m = new RealMatrixImpl(testData2);
+        RealMatrix mt = new RealMatrixImpl(testData2T);
+        assertClose("transpose",mt,m.transpose(),normTolerance);
+    }
+    
+    /** test preMultiply */
+    public void testPremultiply() {
+        RealMatrix m = new RealMatrixImpl(testData);
+        RealMatrix mp = new RealMatrixImpl(preMultTest);
+        assertClose("premultiply",m.preMultiply(testVector),mp,normTolerance);
+        m = new RealMatrixImpl(bigSingular);
+        try {
+            RealMatrix x = m.preMultiply(testVector);
+            fail("expecting IllegalArgumentException");
+        } catch (IllegalArgumentException ex) {
+            ;
+        }
+    }
+    
+    public void testGetVectors() {
+        RealMatrix m = new RealMatrixImpl(testData);
+        assertClose("get row",m.getRow(1),testDataRow1,entryTolerance);
+        assertClose("get col",m.getColumn(3),testDataCol3,entryTolerance);
+        try {
+            double[] x = m.getRow(10);
+            fail("expecting IllegalArgumentException");
+        } catch (IllegalArgumentException ex) {
+            ;
+        }
+        try {
+            double[] x = m.getColumn(-1);
+            fail("expecting IllegalArgumentException");
+        } catch (IllegalArgumentException ex) {
+            ;
+        }
+    }
+    
+    public void testEntryMutators() {
+        RealMatrix m = new RealMatrixImpl(testData);
+        assertEquals("get entry",m.getEntry(1,2),2d,entryTolerance);
+        m.setEntry(1,2,100d);
+        assertEquals("get entry",m.getEntry(1,2),100d,entryTolerance);
+        try {
+            double x = m.getEntry(0,2);
+            fail("expecting IllegalArgumentException");
+        } catch (IllegalArgumentException ex) {
+            ;
+        }
+        try {
+            m.setEntry(1,4,200d);
+            fail("expecting IllegalArgumentException");
+        } catch (IllegalArgumentException ex) {
+            ;
+        }
+    }
+        
+    
+    //--------------- -----------------Private methods
+        
+    /** verifies that two matrices are close (1-norm) */              
+    private void assertClose(String msg, RealMatrix m, RealMatrix n,
+        double tolerance) {
+        assertTrue(msg,m.subtract(n).getNorm() < tolerance);
+    }
+    
+    /** verifies that two vectors are close (sup norm) */
+    private void assertClose(String msg, double[] m, double[] n,
+        double tolerance) {
+        if (m.length != n.length) {
+            fail("vectors not same length");
+        }
+        for (int i = 0; i < m.length; i++) {
+            assertEquals(msg + " " +  i + " elements differ", 
+                m[i],n[i],tolerance);
+        }
+    }
+    
+    /** Useful for debugging */
+    private void dumpMatrix(RealMatrix m) {
+          for (int i = 0; i < m.getRowDimension(); i++) {
+              String os = "";
+              for (int j = 0; j < m.getColumnDimension(); j++) {
+                  os += m.getEntry(i+1, j+1) + " ";
+              }
+              System.out.println(os);
+          }
+    }
+        
+}
+
diff --git a/src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java b/src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java
new file mode 100644
index 0000000..cf11c70
--- /dev/null
+++ b/src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java
@@ -0,0 +1,163 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.commons.math.random;
+
+import junit.framework.Test;
+import junit.framework.TestCase;
+import junit.framework.TestSuite;
+import java.io.File;
+import java.net.URL;
+
+import org.apache.commons.math.stat.Univariate;
+import org.apache.commons.math.stat.UnivariateImpl;
+
+/**
+ * Test cases for the EmpiricalDistribution class
+ *
+ * @version $Revision: 1.6 $ $Date: 2003/11/14 22:22:22 $
+ */
+
+public final class EmpiricalDistributionTest extends TestCase {
+
+    private EmpiricalDistribution empiricalDistribution = null;
+    private File file = null;
+    
+    public EmpiricalDistributionTest(String name) {
+        super(name);
+    }
+
+    public void setUp() {
+        empiricalDistribution = new EmpiricalDistributionImpl(100);
+        URL url = getClass().getResource("testData.txt");
+        file = new File(url.getFile());
+    }
+
+    public static Test suite() {
+        TestSuite suite = new TestSuite(EmpiricalDistributionTest.class);
+        suite.setName("EmpiricalDistribution Tests");
+        return suite;
+    }
+
+    /**
+     * Test EmpiricalDistrbution.load() using sample data file.<br> 
+     * Check that the sampleCount, mu and sigma match data in 
+     * the sample data file.
+     */
+    public void testLoad() throws Exception {
+        empiricalDistribution.load(file);   
+        // testData File has 10000 values, with mean ~ 5.0, std dev ~ 1
+        // Make sure that loaded distribution matches this
+        assertEquals(empiricalDistribution.getSampleStats().getN(),1000,10E-7);
+        //TODO: replace with statistical tests
+        assertEquals
+            (empiricalDistribution.getSampleStats().getMean(),
+                5.069831575018909,10E-7);
+        assertEquals
+          (empiricalDistribution.getSampleStats().getStandardDeviation(),
+                1.0173699343977738,10E-7);
+    }
+    
+    /** 
+      * Generate 1000 random values and make sure they look OK.<br>
+      * Note that there is a non-zero (but very small) probability that
+      * these tests will fail even if the code is working as designed.
+      */
+    public void testNext() throws Exception {
+        tstGen(0.1);
+    }
+    
+    /**
+      * Make sure exception thrown if digest getNext is attempted
+      * before loading empiricalDistribution.
+     */
+    public void testNexFail() {
+        try {
+            empiricalDistribution.getNextValue();
+            fail("Expecting IllegalStateException");
+        } catch (IllegalStateException ex) {;}
+    }
+    
+    /**
+     * Make sure we can handle a grid size that is too fine
+     */
+    public void testGridTooFine() throws Exception {
+        empiricalDistribution = new EmpiricalDistributionImpl(10000);
+        tstGen(0.1);    
+    }
+    
+    /**
+     * How about too fat?
+     */
+    public void testGridTooFat() throws Exception {
+        empiricalDistribution = new EmpiricalDistributionImpl(1);
+        tstGen(5); // ridiculous tolerance; but ridiculous grid size
+                   // really just checking to make sure we do not bomb
+    }
+    
+    private void tstGen(double tolerance)throws Exception {
+        empiricalDistribution.load(file);   
+        Univariate stats = new UnivariateImpl();
+        for (int i = 1; i < 1000; i++) {
+            stats.addValue(empiricalDistribution.getNextValue());
+        }
+        //TODO: replace these with statistical tests -- refactor as necessary
+        assertEquals("mean", stats.getMean(),5.069831575018909,tolerance);
+        assertEquals
+         ("std dev", stats.getStandardDeviation(),1.0173699343977738,tolerance);
+    }
+        
+        
+       
+        
+}
diff --git a/src/test/org/apache/commons/math/random/RandomDataTest.java b/src/test/org/apache/commons/math/random/RandomDataTest.java
new file mode 100644
index 0000000..2a76088
--- /dev/null
+++ b/src/test/org/apache/commons/math/random/RandomDataTest.java
@@ -0,0 +1,638 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.commons.math.random;
+
+import junit.framework.Test;
+import junit.framework.TestCase;
+import junit.framework.TestSuite;
+import java.security.NoSuchProviderException;
+import java.security.NoSuchAlgorithmException;
+import java.util.HashSet;
+
+import org.apache.commons.math.stat.Frequency;
+import org.apache.commons.math.stat.TestStatisticImpl;
+import org.apache.commons.math.stat.Univariate;
+import org.apache.commons.math.stat.UnivariateImpl;
+
+/**
+ * Test cases for the RandomData class.
+ *
+ * @version $Revision: 1.7 $ $Date: 2003/11/14 22:22:22 $
+ */
+
+public final class RandomDataTest extends TestCase {
+
+    public RandomDataTest(String name) {
+        super(name);
+    }
+
+    private long smallSampleSize = 1000;
+    private double[] expected = {250,250,250,250};
+    private int largeSampleSize = 10000;
+    private int tolerance = 50;
+    private String[] hex = 
+        {"0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f"}; 
+    private RandomDataImpl randomData = new RandomDataImpl(); 
+    private TestStatisticImpl testStatistic = new TestStatisticImpl();
+    
+    
+    public void setUp() { 
+    }
+
+    public static Test suite() {
+        TestSuite suite = new TestSuite(RandomDataTest.class);
+        suite.setName("RandomData Tests");
+        return suite;
+    }
+
+    /** test dispersion and failure modes for nextInt() */
+    public void testNextInt() {
+        try {
+            int x = randomData.nextInt(4,3);
+            fail("IllegalArgumentException expected");
+        } catch (IllegalArgumentException ex) {
+            ;
+        }
+        Frequency freq = new Frequency();
+        int value = 0;
+        for (int i=0;i<smallSampleSize;i++) {
+            value = randomData.nextInt(0,3);
+            assertTrue("nextInt range",(value >= 0) && (value <= 3));
+            freq.addValue(value);  
+        }
+        double[] observed = new double[4];
+        for (int i=0; i<4; i++) {
+            String iString = new Integer(i).toString();
+            observed[i] = freq.getCount(iString);
+        } 
+        
+        /* Use ChiSquare dist with df = 4-1 = 3, alpha = .001
+         * Change to 11.34 for alpha = .01
+         */
+        assertTrue("chi-square test -- will fail about 1 in 1000 times",
+            testStatistic.chiSquare(expected,observed) < 16.27);    
+    }
+    
+    /** test dispersion and failure modes for nextLong() */
+    public void testNextLong() {
+       try {
+            long x = randomData.nextLong(4,3);
+            fail("IllegalArgumentException expected");
+        } catch (IllegalArgumentException ex) {
+            ;
+        }
+       Frequency freq = new Frequency();
+       long value = 0;
+        for (int i=0;i<smallSampleSize;i++) {
+            value = randomData.nextLong(0,3);
+            assertTrue("nextInt range",(value >= 0) && (value <= 3));
+            freq.addValue(value);  
+        }
+        double[] observed = new double[4];
+        for (int i=0; i<4; i++) {
+            String iString = new Integer(i).toString();
+            observed[i] = freq.getCount(iString);
+        } 
+        
+        /* Use ChiSquare dist with df = 4-1 = 3, alpha = .001
+         * Change to 11.34 for alpha = .01
+         */
+        assertTrue("chi-square test -- will fail about 1 in 1000 times",
+            testStatistic.chiSquare(expected,observed) < 16.27);    
+    }
+    
+    /** test dispersion and failure modes for nextSecureLong() */
+    public void testNextSecureLong() {
+        try {
+            long x = randomData.nextSecureLong(4,3);
+            fail("IllegalArgumentException expected");
+        } catch (IllegalArgumentException ex) {
+            ;
+        }
+        Frequency freq = new Frequency();
+        long value = 0;
+        for (int i=0;i<smallSampleSize;i++) {
+            value = randomData.nextSecureLong(0,3);
+            assertTrue("nextInt range",(value >= 0) && (value <= 3));
+            freq.addValue(value);  
+        }
+        double[] observed = new double[4];
+        for (int i=0; i<4; i++) {
+            String iString = new Integer(i).toString();
+            observed[i] = freq.getCount(iString);
+        } 
+        
+        /* Use ChiSquare dist with df = 4-1 = 3, alpha = .001
+         * Change to 11.34 for alpha = .01
+         */
+        assertTrue("chi-square test -- will fail about 1 in 1000 times",
+            testStatistic.chiSquare(expected,observed) < 16.27);    
+    }
+    
+    /** test dispersion and failure modes for nextSecureInt() */
+    public void testNextSecureInt() {
+        try {
+            long x = randomData.nextSecureInt(4,3);
+            fail("IllegalArgumentException expected");
+        } catch (IllegalArgumentException ex) {
+            ;
+        }
+        Frequency freq = new Frequency();
+        int value = 0;
+        for (int i=0;i<smallSampleSize;i++) {
+            value = randomData.nextSecureInt(0,3);
+            assertTrue("nextInt range",(value >= 0) && (value <= 3));
+            freq.addValue(value);  
+        }
+        double[] observed = new double[4];
+        for (int i=0; i<4; i++) {
+            String iString = new Integer(i).toString();
+            observed[i] = freq.getCount(iString);
+        } 
+        
+        /* Use ChiSquare dist with df = 4-1 = 3, alpha = .001
+         * Change to 11.34 for alpha = .01
+         */
+        assertTrue("chi-square test -- will fail about 1 in 1000 times",
+            testStatistic.chiSquare(expected,observed) < 16.27);    
+    }
+    
+    /** 
+     * Make sure that empirical distribution of random Poisson(4)'s 
+     * has P(X <= 5) close to actual cumulative Poisson probablity
+     * and that nextPoisson fails when mean is non-positive
+     * TODO: replace with statistical test, adding test stat to TestStatistic
+     */
+    public void testNextPoisson() {
+        try {
+            long x = randomData.nextPoisson(0);
+            fail("zero mean -- expecting IllegalArgumentException");
+        } catch (IllegalArgumentException ex) {
+            ;
+        }
+        Frequency f = new Frequency();
+        long v = 0;
+        for (int i = 0; i<largeSampleSize; i++) {
+            try {
+                f.addValue(randomData.nextPoisson(4.0d));
+            } catch (Exception ex) {
+                fail(ex.getMessage());
+            }
+        }
+        long cumFreq = f.getCount("0") + f.getCount("1") + f.getCount("2") + 
+                        f.getCount("3") + f.getCount("4") + f.getCount("5");
+        long sumFreq = f.getSumFreq();
+        double cumPct = 
+            new Double(cumFreq).doubleValue()/new Double(sumFreq).doubleValue();
+        assertEquals("cum Poisson(4)",cumPct,0.7851,0.2);
+        try {
+            long x = randomData.nextPoisson(-1);
+            fail("negative mean supplied -- IllegalArgumentException expected");
+        } catch (IllegalArgumentException ex) {
+            ;
+        }
+        try {
+            long x = randomData.nextPoisson(0);
+            fail("0 mean supplied -- IllegalArgumentException expected");
+        } catch (IllegalArgumentException ex) {
+            ;
+        }
+        
+    }
+    
+    /** test dispersion and failute modes for nextHex() */
+    public void testNextHex() {
+        try {
+            String x = randomData.nextHexString(-1);
+            fail("negative length supplied -- IllegalArgumentException expected");
+        } catch (IllegalArgumentException ex) {
+            ;
+        }
+        try {
+            String x = randomData.nextHexString(0);
+            fail("zero length supplied -- IllegalArgumentException expected");
+        } catch (IllegalArgumentException ex) {
+            ;
+        }
+        String hexString = randomData.nextHexString(3);
+        if (hexString.length() != 3) {
+                fail("incorrect length for generated string");
+        }
+        hexString = randomData.nextHexString(1);
+        if (hexString.length() != 1) {
+                fail("incorrect length for generated string");
+        }
+        try {
+            hexString = randomData.nextHexString(0);
+            fail("zero length requested -- expecting IllegalArgumentException");
+        } catch (IllegalArgumentException ex) {
+            ;
+        }
+        if (hexString.length() != 1) {
+                fail("incorrect length for generated string");
+        }      
+        Frequency f = new Frequency();
+        for (int i = 0; i < smallSampleSize; i++) {
+            hexString = randomData.nextHexString(100);
+            if (hexString.length() != 100) {
+                fail("incorrect length for generated string");
+            }
+            for (int j = 0; j < hexString.length(); j++) {
+                f.addValue(hexString.substring(j,j+1));
+            }
+        }
+        double[] expected = new double[16];
+        double[] observed = new double[16];
+        for (int i = 0; i < 16; i++) {
+            expected[i] = (double)smallSampleSize*100/(double)16;
+            observed[i] = f.getCount(hex[i]);
+        }
+        /* Use ChiSquare dist with df = 16-1 = 15, alpha = .001
+         * Change to 30.58 for alpha = .01
+         */
+        assertTrue("chi-square test -- will fail about 1 in 1000 times",
+            testStatistic.chiSquare(expected,observed) < 37.70);    
+    }
+    
+    /** test dispersion and failute modes for nextHex() */
+    public void testNextSecureHex() {
+        try {
+            String x = randomData.nextSecureHexString(-1);
+            fail("negative length -- IllegalArgumentException expected");
+        } catch (IllegalArgumentException ex) {
+            ;
+        }
+        try {
+            String x = randomData.nextSecureHexString(0);
+            fail("zero length -- IllegalArgumentException expected");
+        } catch (IllegalArgumentException ex) {
+            ;
+        }
+        String hexString = randomData.nextSecureHexString(3);
+        if (hexString.length() != 3) {
+                fail("incorrect length for generated string");
+        }
+        hexString = randomData.nextSecureHexString(1);
+        if (hexString.length() != 1) {
+                fail("incorrect length for generated string");
+        }
+        try {
+            hexString = randomData.nextSecureHexString(0);
+            fail("zero length requested -- expecting IllegalArgumentException");
+        } catch (IllegalArgumentException ex) {
+            ;
+        }
+        if (hexString.length() != 1) {
+                fail("incorrect length for generated string");
+        }      
+        Frequency f = new Frequency();
+        for (int i = 0; i < smallSampleSize; i++) {
+            hexString = randomData.nextSecureHexString(100);
+            if (hexString.length() != 100) {
+                fail("incorrect length for generated string");
+            }
+            for (int j = 0; j < hexString.length(); j++) {
+                f.addValue(hexString.substring(j,j+1));
+            }
+        }
+        double[] expected = new double[16];
+        double[] observed = new double[16];
+        for (int i = 0; i < 16; i++) {
+            expected[i] = (double)smallSampleSize*100/(double)16;
+            observed[i] = f.getCount(hex[i]);
+        }
+        /* Use ChiSquare dist with df = 16-1 = 15, alpha = .001
+         * Change to 30.58 for alpha = .01
+         */
+        assertTrue("chi-square test -- will fail about 1 in 1000 times",
+            testStatistic.chiSquare(expected,observed) < 37.70);    
+    }
+    
+    /** test failure modes and dispersion of nextUniform() */  
+    public void testNextUniform() {    
+        try {
+            double x = randomData.nextUniform(4,3);
+            fail("IllegalArgumentException expected");
+        } catch (IllegalArgumentException ex) {
+            ;
+        }
+        try {
+            double x = randomData.nextUniform(3,3);
+            fail("IllegalArgumentException expected");
+        } catch (IllegalArgumentException ex) {
+            ;
+        }
+        double[] expected = new double[] {500,500};
+        double[] observed = new double[] {0,0};
+        double lower = -1d;
+        double upper = 20d;
+        double midpoint = (lower + upper)/2d;
+        double result = 0;
+        for (int i = 0; i < 1000; i++) {
+            result = randomData.nextUniform(lower,upper);
+            if ((result == lower) || (result == upper)) {
+                fail("generated value equal to an endpoint: " + result);
+            } 
+            if (result < midpoint) {
+                observed[0]++;
+            } else {
+                observed[1]++;
+            }
+        }
+        /* Use ChiSquare dist with df = 2-1 = 1, alpha = .001
+         * Change to 6.64 for alpha = .01
+         */
+        assertTrue("chi-square test -- will fail about 1 in 1000 times",
+            testStatistic.chiSquare(expected,observed) < 10.83);  
+    }
+    
+    /** test failure modes and distribution of nextGaussian() */  
+    public void testNextGaussian() { 
+        try {
+            double x = randomData.nextGaussian(0,0);
+            fail("zero sigma -- IllegalArgumentException expected");
+        } catch (IllegalArgumentException ex) {
+            ;
+        }
+        Univariate u = new UnivariateImpl();
+        for (int i = 0; i<largeSampleSize; i++) {
+            u.addValue(randomData.nextGaussian(0,1));
+        }
+        double xbar = u.getMean();
+        double s = u.getStandardDeviation();
+        double n = (double) u.getN(); 
+        /* t-test at .001-level TODO: replace with externalized t-test, with
+         * test statistic defined in TestStatistic
+         */
+        assertTrue(Math.abs(xbar)/(s/Math.sqrt(n))< 3.29);
+    }
+    
+    /** test failure modes and distribution of nextExponential() */  
+    public void testNextExponential() {
+        try {
+            double x = randomData.nextExponential(-1);
+            fail("negative mean -- expecting IllegalArgumentException");
+        } catch (IllegalArgumentException ex) {
+            ;
+        }
+        assertEquals("0 mean", 0,randomData.nextExponential(0),10E-8); 
+        long cumFreq = 0;
+        double v = 0;
+        for (int i = 0; i < largeSampleSize; i++) {
+            v = randomData.nextExponential(1);
+            assertTrue("exponential deviate postive", v > 0);
+            if (v < 2) cumFreq++;
+        }
+        /* TODO: Replace with a statistical test, with statistic added to
+         * TestStatistic.  Check below compares observed cumulative distribution
+         * evaluated at 2 with exponential CDF 
+         */
+        assertEquals("exponential cumulative distribution",
+            (double)cumFreq/(double)largeSampleSize,0.8646647167633873,.2);
+    } 
+    
+    /** test reseeding, algorithm/provider games */
+    public void testConfig() throws NoSuchProviderException, 
+      NoSuchAlgorithmException{
+        randomData.reSeed(1000);
+        double v = randomData.nextUniform(0,1);
+        randomData.reSeed();
+        assertTrue("different seeds", 
+            Math.abs(v - randomData.nextUniform(0,1)) > 10E-12);
+        randomData.reSeed(1000);
+        assertEquals("same seeds",v,randomData.nextUniform(0,1),10E-12);
+        randomData.reSeedSecure(1000);
+        String hex = randomData.nextSecureHexString(40);
+        randomData.reSeedSecure();
+        assertTrue("different seeds",
+            !hex.equals(randomData.nextSecureHexString(40)));
+        randomData.reSeedSecure(1000);
+        assertTrue("same seeds",
+            !hex.equals(randomData.nextSecureHexString(40))); 
+        
+        /* remove this test back soon,
+         * since it takes about 4 seconds */
+         
+        randomData.setSecureAlgorithm("SHA1PRNG","SUN");
+        assertTrue("different seeds",
+            !hex.equals(randomData.nextSecureHexString(40)));
+        try {
+            randomData.setSecureAlgorithm("NOSUCHTHING","SUN");
+            fail("expecting NoSuchAlgorithmException");
+        } catch (NoSuchAlgorithmException ex) {
+            ;
+        }
+        
+        try {
+            randomData.setSecureAlgorithm("SHA1PRNG","NOSUCHPROVIDER");
+            fail("expecting NoSuchProviderException");
+        } catch (NoSuchProviderException ex) {
+            ;
+        } 
+        
+        // test reseeding without first using the generators
+        RandomDataImpl rd = new RandomDataImpl();
+        rd.reSeed(100);
+        double ret = rd.nextLong(1,2);
+        RandomDataImpl rd2 = new RandomDataImpl();
+        rd2.reSeedSecure(2000);
+        ret = rd2.nextSecureLong(1,2);
+        rd = new RandomDataImpl();
+        rd.reSeed();
+        ret = rd.nextLong(1,2);
+        rd2 = new RandomDataImpl();
+        rd2.reSeedSecure();
+        ret = rd2.nextSecureLong(1,2);
+    }
+    
+    /** tests for nextSample() sampling from Collection */
+    public void testNextSample() {
+       Object[][] c = {{"0","1"},{"0","2"},{"0","3"},{"0","4"},{"1","2"},
+                        {"1","3"},{"1","4"},{"2","3"},{"2","4"},{"3","4"}};
+       double[] observed = {0,0,0,0,0,0,0,0,0,0};
+       double[] expected = {100,100,100,100,100,100,100,100,100,100};
+       
+       HashSet cPop = new HashSet();  //{0,1,2,3,4}
+       for (int i = 0; i < 5; i++) {
+           cPop.add(Integer.toString(i));
+       }
+       
+       Object[] sets = new Object[10]; // 2-sets from 5
+       for (int i = 0; i < 10; i ++) {
+           HashSet hs = new HashSet();
+           hs.add(c[i][0]);
+           hs.add(c[i][1]);
+           sets[i] = hs;
+       }
+       
+       for (int i = 0; i < 1000; i ++) {
+           Object[] cSamp = randomData.nextSample(cPop,2);
+           observed[findSample(sets,cSamp)]++;
+       }
+       
+        /* Use ChiSquare dist with df = 10-1 = 9, alpha = .001
+         * Change to 21.67 for alpha = .01
+         */
+        assertTrue("chi-square test -- will fail about 1 in 1000 times",
+            testStatistic.chiSquare(expected,observed) < 27.88);  
+       
+       // Make sure sample of size = size of collection returns same collection
+       HashSet hs = new HashSet();
+       hs.add("one");
+       Object[] one = randomData.nextSample(hs,1);
+       String oneString = (String) one[0];
+       if ((one.length != 1) || !oneString.equals("one")){
+           fail("bad sample for set size = 1, sample size = 1");
+       }
+       
+       // Make sure we fail for sample size > collection size
+       try {
+           one = randomData.nextSample(hs,2);
+           fail("sample size > set size, expecting IllegalArgumentException");
+       } catch (IllegalArgumentException ex) {
+           ;
+       }
+       
+       // Make sure we fail for empty collection
+       try {
+           hs = new HashSet();
+           one = randomData.nextSample(hs,0);
+           fail("n = k = 0, expecting IllegalArgumentException");
+       } catch (IllegalArgumentException ex) {
+           ;
+       }
+    }
+    
+    private int findSample(Object[] u, Object[] samp) {
+        int result = -1;
+        for (int i = 0; i < u.length; i++) {
+            HashSet set = (HashSet) u[i];
+            HashSet sampSet = new HashSet();
+            for (int j = 0; j < samp.length; j++) {
+                sampSet.add(samp[j]);
+            }
+            if (set.equals(sampSet)) {                 
+               return i;
+           }
+        }
+        fail("sample not found:{" + samp[0] + "," + samp[1] + "}");
+        return -1;
+    }
+    
+    /** tests for nextPermutation */
+    public void testNextPermutation() {
+         int[][] p = {{0,1,2},{0,2,1},{1,0,2},{1,2,0},{2,0,1},{2,1,0}};
+         double[] observed = {0,0,0,0,0,0,};
+         double[] expected = {100,100,100,100,100,100};
+         
+         for (int i = 0; i < 600; i++) {
+             int[] perm = randomData.nextPermutation(3,3);
+             observed[findPerm(p,perm)]++;
+         }  
+         
+        /* Use ChiSquare dist with df = 6-1 = 5, alpha = .001
+         * Change to 15.09 for alpha = .01
+         */
+        assertTrue("chi-square test -- will fail about 1 in 1000 times",
+            testStatistic.chiSquare(expected,observed) < 20.52); 
+         
+         // Check size = 1 boundary case
+         int[] perm = randomData.nextPermutation(1,1);
+         if ((perm.length != 1) || (perm[0] != 0)){
+           fail("bad permutation for n = 1, sample k = 1");
+           
+        // Make sure we fail for k size > n 
+        try {
+           perm = randomData.nextPermutation(2,3);
+           fail("permutation k > n, expecting IllegalArgumentException");
+        } catch (IllegalArgumentException ex) {
+           ;
+        }
+           
+        // Make sure we fail for n = 0
+        try {
+           perm = randomData.nextPermutation(0,0);
+           fail("permutation k = n = 0, expecting IllegalArgumentException");
+        } catch (IllegalArgumentException ex) {
+           ;
+        }
+           
+        
+       }
+         
+    }
+    
+    private int findPerm(int[][] p, int[] samp) {
+        int result = -1;
+        for (int i = 0; i < p.length; i++) {
+            boolean good = true;
+            for (int j = 0; j < samp.length; j++) {
+                if (samp[j] != p[i][j]) {
+                    good = false;
+                }
+            }
+            if (good)  {
+                return i;
+            }
+        }        
+        fail("permutation not found");
+        return -1;
+    }
+                
+                       
+            
+        
+    
+}
+
diff --git a/src/test/org/apache/commons/math/random/ValueServerTest.java b/src/test/org/apache/commons/math/random/ValueServerTest.java
new file mode 100644
index 0000000..8946c21
--- /dev/null
+++ b/src/test/org/apache/commons/math/random/ValueServerTest.java
@@ -0,0 +1,241 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.commons.math.random;
+
+import junit.framework.Test;
+import junit.framework.TestCase;
+import junit.framework.TestSuite;
+import java.net.URL;
+
+import org.apache.commons.math.stat.Univariate;
+import org.apache.commons.math.stat.UnivariateImpl;
+ 
+/**
+ * Test cases for the ValueServer class.
+ *
+ * @version $Revision: 1.7 $ $Date: 2003/11/14 22:22:22 $
+ */
+
+public final class ValueServerTest extends TestCase {
+
+    private ValueServer vs = new ValueServer();
+    
+    public ValueServerTest(String name) {
+        super(name);
+    }
+
+    public void setUp() {
+        vs.setMode(ValueServer.DIGEST_MODE);
+        try {
+            URL url = getClass().getResource("testData.txt");
+            vs.setValuesFileURL(url.toExternalForm()); 
+        } catch (Exception ex) {
+            fail("malformed test URL");
+        }
+    }
+
+    public static Test suite() {
+        TestSuite suite = new TestSuite(ValueServerTest.class);
+        suite.setName("ValueServer Tests");
+        return suite;
+    }
+
+   
+    /** 
+      * Generate 1000 random values and make sure they look OK.<br>
+      * Note that there is a non-zero (but very small) probability that
+      * these tests will fail even if the code is working as designed.
+      */
+    public void testNextDigest() throws Exception{
+        double next = 0.0;
+        double tolerance = 0.1;
+        vs.computeDistribution();
+        assertTrue("empirical distribution property", 
+            vs.getEmpiricalDistribution() != null);
+        Univariate stats = new UnivariateImpl();
+        for (int i = 1; i < 1000; i++) {
+            next = vs.getNext();
+            stats.addValue(next);
+        }    
+        assertEquals("mean", 5.069831575018909, stats.getMean(), tolerance);
+        assertEquals
+         ("std dev", 1.0173699343977738, stats.getStandardDeviation(), 
+            tolerance);
+        
+        vs.computeDistribution(500);
+        stats = new UnivariateImpl();
+        for (int i = 1; i < 1000; i++) {
+            next = vs.getNext();
+            stats.addValue(next);
+        }    
+        assertEquals("mean", 5.069831575018909, stats.getMean(), tolerance);
+        assertEquals
+         ("std dev", 1.0173699343977738, stats.getStandardDeviation(), 
+            tolerance);
+        
+    }
+    
+    /**
+      * Make sure exception thrown if digest getNext is attempted
+      * before loading empiricalDistribution.
+      */
+    public void testNextDigestFail() throws Exception {
+        try {
+            vs.getNext();
+            fail("Expecting IllegalStateException");
+        } catch (IllegalStateException ex) {;}
+    }
+    
+    /**
+      * Make sure exception thrown if nextReplay() is attempted
+      * before opening replay file.
+      */
+    public void testNextReplayFail() throws Exception {
+        try {
+            vs.setMode(ValueServer.REPLAY_MODE);
+            vs.getNext();
+            fail("Expecting IllegalStateException");
+        } catch (IllegalStateException ex) {;}
+    }
+    
+    /**
+     * Test ValueServer REPLAY_MODE using values in testData file.<br> 
+     * Check that the values 1,2,1001,1002 match data file values 1 and 2.
+     * the sample data file.
+     */
+    public void testReplay() throws Exception {
+        double firstDataValue = 4.038625496201205;
+        double secondDataValue = 3.6485326248346936;
+        double tolerance = 10E-15;
+        double compareValue = 0.0d;
+        vs.setMode(ValueServer.REPLAY_MODE);
+        vs.openReplayFile();
+        compareValue = vs.getNext();
+        assertEquals(compareValue,firstDataValue,tolerance);
+        compareValue = vs.getNext();
+        assertEquals(compareValue,secondDataValue,tolerance);
+        for (int i = 3; i < 1001; i++) {
+           compareValue = vs.getNext();
+        }
+        compareValue = vs.getNext();
+        assertEquals(compareValue,firstDataValue,tolerance);
+        compareValue = vs.getNext();
+        assertEquals(compareValue,secondDataValue,tolerance);
+        vs.closeReplayFile();
+        // make sure no NPE
+        vs.closeReplayFile();
+    }
+    
+    /** 
+     * Test other ValueServer modes
+     */
+    public void testModes() throws Exception {
+        vs.setMode(ValueServer.CONSTANT_MODE);
+        vs.setMu(0);
+        assertEquals("constant mode test",vs.getMu(),vs.getNext(),Double.MIN_VALUE);
+        vs.setMode(ValueServer.UNIFORM_MODE);
+        vs.setMu(2);
+        double val = vs.getNext();
+        assertTrue(val > 0 && val < 4);
+        vs.setSigma(1);
+        vs.setMode(ValueServer.GAUSSIAN_MODE);
+        val = vs.getNext();
+        assertTrue("gaussian value close enough to mean",
+            val < vs.getMu() + 100*vs.getSigma());
+        vs.setMode(ValueServer.EXPONENTIAL_MODE);
+        val = vs.getNext();
+        assertTrue(val > 0);
+        try {
+            vs.setMode(1000);
+            vs.getNext();
+            fail("bad mode, expecting IllegalStateException");
+        } catch (IllegalStateException ex) {
+            ;
+        }
+    }
+    
+    /**
+     * Test fill
+     */
+    public void testFill() throws Exception {
+        vs.setMode(ValueServer.CONSTANT_MODE);
+        vs.setMu(2);
+        double[] val = new double[5];
+        vs.fill(val);
+        for (int i = 0; i < 5; i++) {
+            assertEquals("fill test in place",2,val[i],Double.MIN_VALUE);
+        }
+        double v2[] = vs.fill(3);
+        for (int i = 0; i < 3; i++) {
+            assertEquals("fill test in place",2,v2[i],Double.MIN_VALUE);
+        }
+    }
+    
+    /**
+     * Test getters to make Clover happy
+     */
+    public void testProperties() throws Exception {
+        vs.setMode(ValueServer.CONSTANT_MODE);
+        assertEquals("mode test",ValueServer.CONSTANT_MODE,vs.getMode());
+        vs.setValuesFileURL("http://www.apache.org");
+        String s = vs.getValuesFileURL();
+        assertEquals("valuesFileURL test","http://www.apache.org",s);
+    }
+        
+        
+        
+        
+        
+        
+}
diff --git a/src/test/org/apache/commons/math/random/testData.txt b/src/test/org/apache/commons/math/random/testData.txt
new file mode 100644
index 0000000..4a10132
--- /dev/null
+++ b/src/test/org/apache/commons/math/random/testData.txt
@@ -0,0 +1,1000 @@
+4.038625496201205
+3.6485326248346936
+3.6651209675932845
+5.814896279561131
+5.384126469824717
+5.251190723365563
+4.465213440111648
+4.736608014129308
+5.566383814840726
+3.8872277480629114
+5.246598498086048
+3.7511487364188176
+6.733371385175343
+5.388632419618035
+6.036263402962769
+3.8105605069222905
+5.738599503606028
+4.994552792425298
+2.945504336988336
+4.095314381239862
+5.760924710543879
+3.889753944419315
+3.808861160991701
+5.084302950012555
+6.370292933705698
+5.9615431859588455
+4.8790354385481445
+4.068164663649243
+4.26491661935213
+5.911067976258105
+4.1316140545022115
+4.0479985648577115
+5.560425919351912
+5.7777862258090265
+4.6491664757229145
+5.322284766164775
+3.9643060017297818
+3.3374606422520423
+4.070818520139152
+5.162814971692577
+4.68959876937858
+5.729533112912969
+7.160010937980058
+5.154920628387343
+5.992604820701763
+5.317279162752973
+6.3388993007264
+4.38451874656454
+5.024014917973479
+3.7534872319471946
+5.042363342784924
+5.528064915562473
+4.645749024871185
+2.5572755520373756
+3.953716919712825
+3.479482401208564
+4.676100783445583
+4.602236051449888
+7.136692300563229
+3.2411466558895095
+4.188618724984135
+3.6403999184454445
+3.4104206071160776
+4.807963390662261
+4.039073733966207
+4.201017826594899
+4.381868005163936
+5.0635235098658935
+5.9840760229548735
+4.195400406346137
+5.649256144660377
+4.679088153774095
+4.169683379901892
+5.671299804360453
+6.159089864893807
+5.315685219074694
+6.3327786025390305
+5.57348047674858
+6.124073677151904
+4.599177837977919
+4.792320274522308
+5.670142645005109
+5.479531549270221
+4.7740747976996705
+4.99464290442364
+5.474337090086012
+5.232353744280737
+6.411298157619626
+4.757268066271138
+5.217779158748026
+5.07395379944902
+5.5759984176628965
+4.521182520094989
+5.738026445940142
+4.742204968903384
+4.670762511507285
+4.884925361512115
+3.2573282568729462
+4.548387675110013
+4.337950021352034
+3.7875587274144618
+3.6055586455442974
+7.361861332197413
+4.834945622163155
+6.019473054836964
+4.453304225895349
+3.258695681592217
+5.794572588445252
+3.706438851580378
+6.079300672323756
+4.828008457182361
+5.315261102210712
+3.981847695058188
+4.039767325290114
+5.790863349525503
+5.160671471128728
+4.835236459763434
+4.405281184174698
+6.036293520404953
+5.889067983920324
+4.645514887430352
+4.347244670972515
+6.447181244432997
+6.564267268399325
+5.1013992003059885
+4.123378901103389
+2.7101740954226283
+4.209200680057913
+5.085704888132955
+4.26810090240086
+5.54254381015526
+4.721081268239747
+6.890088385585999
+3.9983110493877954
+5.321006894021748
+4.316867375040024
+3.694764624577479
+5.453875921043777
+3.7798857421649927
+3.7228653199742623
+4.807698651287013
+3.953745662132547
+4.821189486606762
+4.453489509051613
+6.4517275696030225
+4.823034188588044
+4.722822481625316
+5.810689805246644
+2.79248319144007
+4.928162269110059
+4.661918219482871
+4.574123379557206
+5.241478194631993
+5.8345087395944155
+7.024415739565572
+3.5536052565954
+6.095523994939967
+5.714650096778455
+4.846741263282074
+6.002769586957791
+5.982356840660745
+5.045480762532407
+6.461077219605347
+4.806649266171423
+6.350848113862498
+6.402679936682352
+3.8190196431210914
+4.189064677946727
+4.868517260374518
+2.145198341547173
+5.9469461091347
+5.88772432287321
+4.258280909990726
+6.740134075161574
+4.6047650031608445
+3.9273659909763774
+4.291244045368331
+5.183827109845055
+5.696810583954774
+3.608472134466666
+4.169004030425733
+3.9965477474540467
+3.7571221568428017
+5.575534565152322
+5.0764208309825065
+5.3185446180363485
+5.157450995663762
+4.961815558094033
+5.687338919107788
+4.185906295178724
+4.382007991332045
+3.5280961455873676
+4.531506809760329
+4.5870808989545635
+4.1932173503939625
+7.213813469684956
+3.1814836225682908
+4.647297462243001
+5.223975935315364
+5.585001659776854
+5.120918864744974
+5.026571594328509
+6.348097968923147
+6.50023470519147
+5.712556147497515
+5.206026515338916
+5.749621140061565
+3.0714726650374033
+6.576852312067237
+7.873101351668455
+6.565410149266118
+6.42923283018875
+4.576910183319347
+4.891822273316748
+6.059357175219146
+3.5324494806223328
+5.02539429500825
+6.078049839679652
+4.395054417468175
+5.710022806162443
+5.577091376894232
+3.131753802875934
+5.4869998928318
+6.413992453090146
+6.368380820674971
+6.052068461844252
+5.480278219624535
+7.051236227914206
+4.748415087916627
+4.559239556696287
+4.780665068784505
+5.349223485326002
+4.522305152002386
+5.678473361027541
+6.734219964637535
+6.713281662687456
+6.22214905332774
+5.716102543806569
+6.336616632829493
+4.8399311234283635
+5.811391244308217
+4.3965755331585905
+5.297963707368242
+5.021726117260926
+4.497125082388555
+4.735667209277485
+6.048804114181307
+4.264048138073914
+7.181013762432201
+4.781684059171574
+5.779533272721499
+4.164421460389599
+3.6986809242837757
+4.8415576143236185
+4.924528568365373
+4.758045335351253
+5.628351489493518
+5.7967639104855415
+4.491988822693669
+2.776750089391839
+4.704679957076673
+4.039607278211126
+5.660350110077993
+4.955611684289963
+3.0641653090331107
+4.896101875253389
+3.6528358436331603
+5.552472713484715
+4.857203367367906
+6.698826102960048
+4.485176970803183
+3.359916665137426
+4.036570806638963
+3.48793689188148
+4.19214761961293
+3.9792199677002866
+6.760873252923419
+4.333561067615548
+5.018626873497648
+3.377671327382937
+4.426183834007672
+8.806961710969402
+5.2068790380550265
+5.483008251803699
+4.287267636533901
+5.931330465014387
+5.257260104496106
+4.623908313559696
+4.365112456604631
+5.600514050451817
+6.184093404453588
+4.9116883675838485
+6.019780977080248
+7.485280872899538
+3.5982660410679284
+4.232210941334369
+5.446496617538108
+6.487976163896015
+3.3960660696641156
+4.733884295853101
+5.352545256764909
+4.107747627715545
+3.949506252011129
+5.017847997679714
+4.24906287118262
+6.720303792581198
+5.832137142236708
+5.010377506040941
+6.458070081692352
+6.501223021355141
+4.612768564431788
+3.801740464538825
+4.469721893125596
+5.061713024524103
+6.872685648715577
+6.145993249521355
+4.638532388190405
+4.70471535512485
+6.417576222531886
+4.118577249932789
+4.431328683019108
+4.747884983644578
+4.495605382683923
+3.5972439735401767
+5.210796056817244
+2.9160129894156026
+3.4596190721900797
+3.972452277026154
+5.5237190584690214
+6.104711796147512
+4.787324556447702
+4.548676032231089
+6.356843891618192
+3.6148998030697816
+4.760679260180754
+4.698041709266617
+4.244003753086054
+5.595546833817678
+3.2784025595193267
+5.326657347561453
+6.213858447402109
+5.213011705084566
+7.232075882741927
+4.806572191866972
+4.680144670146755
+3.946663831660007
+3.6143084085883554
+7.789315918667734
+7.099181638561095
+3.672742516732736
+5.953845998789752
+6.28847712720666
+6.946689084108734
+6.325454389782429
+4.334133006331358
+3.039424552213366
+4.847328734611504
+4.249781519880862
+6.126424188695286
+3.3823135936253257
+6.3280255743100025
+6.150431997847958
+5.4226742397784005
+5.94864601826791
+4.425906835511732
+4.897545227095195
+6.26027333638832
+3.647858418615367
+5.276322437292433
+4.176876069581277
+4.346107259567459
+3.1384418250329995
+4.212957347421948
+4.637757894698186
+6.535589923573854
+5.193072556110316
+5.017309492685374
+5.1750466093509
+4.6381038872450375
+6.071604634493695
+4.357240286904764
+5.122391923621759
+6.556903940099011
+3.8006848201076036
+4.522363890394659
+6.2456602471550635
+5.829300589393535
+4.452647643620209
+5.371890862621703
+4.948677662633424
+5.661113800822228
+5.773629402623548
+6.139823333391851
+6.093004328053013
+5.362399773949667
+6.915042845179306
+5.394739321037944
+5.141451574018252
+5.053294383161769
+4.9834920876470665
+6.812746808763125
+3.5705971688428266
+4.664119854301202
+6.310596552569324
+5.674835228932813
+3.4639740645984807
+4.788956793299906
+5.1005488900135845
+4.534989910256703
+3.931742089464332
+3.572625977535623
+5.374511045697475
+3.859408179493194
+5.767053789854141
+5.1414168750827285
+4.7490168496463525
+7.481142748403815
+4.5189492261011575
+5.40235395980428
+6.700234279658992
+3.5063554778412183
+3.9690452319798735
+3.00630763890251
+7.23611608840341
+5.018006325958164
+4.523410620276403
+4.076684362167451
+5.916234395538267
+7.047286572236027
+3.8682363461132017
+4.390658924201581
+4.5292330092964255
+5.07906584568947
+4.671213490610071
+4.095193931403399
+4.054590162572947
+3.2227278245030027
+6.132646335444107
+2.8407359953623814
+4.7279370282096655
+5.593872406613741
+3.382542536766184
+5.85844025043303
+6.461000354065181
+3.4994741020969773
+4.132683344034104
+5.647894883473891
+5.011301190267978
+4.401435886120444
+3.3496957519609927
+6.119687677370172
+4.644762759286699
+4.5205629205178735
+3.0320051244977195
+4.596487037061894
+5.14520534308978
+5.282269168918912
+5.761372455401502
+4.148416743583162
+6.372742039103559
+5.649143130777574
+5.084494528193606
+4.811163551671385
+3.9806520282362476
+4.411511792047385
+4.670987670787611
+5.768451736319585
+3.984558689428816
+5.3293696591099975
+5.413539058295544
+6.40970782426591
+5.481145473625602
+4.36515208836978
+5.161811987273001
+3.963554978392394
+5.098946908474979
+7.786683053797615
+4.927631219070586
+5.524180021898693
+4.523736107490982
+3.557364094609177
+6.128701594561169
+4.2509207146594115
+3.944944115965259
+4.966138264389299
+5.394430219583224
+6.77531735530901
+4.128069102169693
+5.2683457909620355
+3.8872836447608496
+4.486696800422189
+6.5335585640393825
+4.916400608546338
+4.270979919569207
+4.311416898242187
+4.498167295277512
+6.132808180917634
+5.1041291367018875
+5.498388642491546
+5.584526454067219
+6.142894025331306
+4.944671156061267
+4.1686843376349945
+4.818977261651865
+6.235820918635881
+3.3212806573760028
+5.68435151611855
+6.189749316228399
+3.591267557367338
+5.043902793214377
+7.818905185451641
+4.768708643560666
+5.669288800286096
+6.398657810380692
+5.3717200778027605
+5.2573487416126525
+4.822935237131512
+6.182572962936934
+5.6072955002277105
+3.9675191626756288
+6.350858167126948
+6.283995295688788
+4.445782391191543
+6.877548745307459
+5.3208290700871315
+6.09847688940267
+6.434994026138841
+4.32779758193763
+7.2924037238697
+5.419935895280957
+4.288818201810987
+7.242433265647824
+4.947890367713541
+5.916218606455959
+6.490437527083841
+4.617582424838291
+7.957708355752131
+4.879357620439287
+6.103294400805588
+5.639488259504568
+4.335236791293937
+5.202542624850618
+5.4406339076225505
+5.782530244910674
+4.055314639567904
+5.552293301411749
+5.290496801505254
+4.022580394801182
+4.625571974654451
+5.5086593656510825
+4.913637297182931
+4.906396844626936
+6.439485089212817
+5.7942799739945325
+7.158136207286507
+4.280431104751667
+3.9206066719991517
+5.127791240556268
+6.70098532482022
+4.657147097255419
+4.524267698037553
+4.647534545829241
+4.839690189371444
+6.798322548455047
+5.094754599613737
+5.916399329150566
+5.767837713902285
+5.294550523894544
+4.161295164684424
+5.233358678928891
+5.546871474458429
+4.897048191655597
+3.939430251326603
+5.005888208270397
+3.2926576330038655
+4.0159694347757835
+5.056229917378723
+6.568879235955665
+4.497327615853924
+4.690014685240942
+4.746884105330737
+4.841384111334085
+4.14796180246966
+5.461902744235217
+5.869304766250897
+3.52354738655413
+5.582741221891035
+4.997825621424692
+5.439611672191855
+4.819402835865619
+5.76136287301575
+6.143090288547951
+5.976125217642891
+6.157007787875113
+4.912778652906766
+6.540414953620538
+3.8210262932626495
+4.727149320768898
+4.955255599543759
+5.7983414047818265
+5.167409288825197
+5.059246623397723
+6.965380962189423
+5.531311904089661
+5.4022568784996885
+4.344352255655229
+5.745261070226892
+5.118820012265567
+4.960430609470355
+4.487905086804239
+3.8537512154805835
+4.839114062528739
+5.367538410451759
+6.202050661574205
+4.001800559371117
+6.119617239220475
+3.236283913097008
+5.610134770285298
+5.757041556538514
+4.083399027093518
+5.055588718117847
+4.580930359877383
+6.545516697552579
+5.916270431823864
+3.761559453909257
+6.037777237143994
+7.29718541816528
+4.8965176227762734
+3.941358569293476
+3.9289815988008847
+3.2604315357316436
+4.639329221347256
+6.570997662310685
+3.851958625190621
+5.859087244914328
+4.647365626452129
+6.076778087850363
+4.627936340272149
+4.422345848512504
+6.2183675417422
+5.243889853389288
+5.90909311946919
+6.09260484846961
+6.0271781583360475
+6.913810502971691
+5.285845705409185
+5.318460367681083
+5.179580543035928
+4.6834977896331615
+5.382546996207003
+4.606307320228796
+4.038858683454586
+6.271279252908354
+6.0668723017439365
+5.713564644555386
+5.144428649779485
+5.2496039700779615
+3.8392027391676207
+4.7050632415088876
+7.137275712725372
+4.208879180827962
+4.81480733241727
+4.699941077536472
+4.423440083005291
+5.742161495602944
+4.592506326637019
+6.224046541049566
+4.611093653533141
+6.1166037746546165
+5.904004955760586
+5.589433336321981
+4.57489510266225
+5.500028469975376
+4.382479722617695
+4.257470376496386
+6.373209588018213
+5.375461447759072
+2.8662337475774584
+4.699832117278568
+3.102810935311515
+6.501460955698313
+4.550333534073201
+7.944860661426514
+5.69020177364993
+4.006199611798767
+5.11813341012065
+4.896479097282944
+4.816212778128475
+4.940296064591277
+5.419056166663748
+3.4659391357743616
+7.246324501631043
+5.907112751874067
+5.614502217435809
+4.750614593197476
+7.0951293897280205
+4.3819944682346055
+4.958360318480322
+4.962367933857186
+5.715499159595656
+5.220101872658552
+6.088622700649866
+5.491586360474799
+4.656477235994459
+3.8695533953710326
+3.7143742249025538
+3.7411936672155304
+6.603415889834424
+5.62928670505705
+5.5959396553858785
+5.6577330557176095
+6.003846653929077
+4.508563176717718
+5.549881486113916
+4.953305865372426
+6.203554032873964
+5.612208234244517
+4.854464793588011
+5.263585016371758
+3.897600440182904
+5.981235398882815
+5.531277293213279
+4.8817070690071445
+3.712544699529063
+3.513432242611217
+5.006035295792077
+7.124520658535316
+3.4782033127607037
+4.829578059223972
+5.742892584711905
+4.361333503197903
+4.601687049512891
+6.035189727259647
+4.711273209758127
+4.272043208125593
+4.447702393976457
+5.17487393756583
+4.741015989802225
+4.953808452791662
+4.6645084492292765
+4.276788530554644
+7.325515154525428
+4.602597440231014
+5.082884146093998
+3.068409439905545
+4.809983425115099
+3.8747882947708083
+4.893233436073575
+5.376932606908371
+6.239910432522629
+6.041695571547008
+5.317735375674715
+5.160517819092331
+5.283748111202239
+6.5357867130743745
+5.537247902605441
+5.4185896683530235
+5.287616337544387
+5.981700012459223
+5.992385624329782
+5.758772999982491
+4.599744432168506
+5.7237660286844605
+2.5862937961454855
+4.319918124665613
+7.566860260437548
+3.202784785619934
+6.67642720284947
+5.215802050091852
+5.452814592454087
+4.192858032386887
+5.299199379721475
+3.291677765243241
+4.632695766333648
+5.115714853147839
+4.996260485718097
+3.5271286032511773
+4.659715887897552
+6.587392147323261
+5.989132075359954
+3.8378063660060056
+4.975951043892332
+3.90853196371359
+5.708783809093124
+6.591895462100242
+5.653528117636727
+3.665428787393319
+4.324537690925271
+6.234413976864244
+4.053504794002944
+5.713371183460703
+4.670243561862966
+3.352660528859447
+4.020147292531281
+5.121933145078237
+4.282377411958472
+4.088770874857499
+4.275716553910016
+4.284046155337823
+6.449567142111275
+3.3275914286077084
+4.837717853228399
+5.261182985672333
+6.073443097165901
+5.40483608136289
+4.690566013556853
+4.222184746341714
+5.790245443382679
+5.020060832906476
+5.576527321711127
+5.340393035828579
+5.301460661931292
+5.076040366457228
+6.296482877500045
+3.037720796600903
+6.321850760102656
+5.701339165316606
+4.991940459105436
+5.758970102557518
+4.322111367356909
+5.721255109646473
+5.511881303620453
+4.9563635195228954
+6.861001584068987
+3.8299029968884195
+4.322974731453332
+5.3047403550360634
+6.0756269754391825
+6.117153630436378
+4.5085862451026495
+4.832132638553977
+4.699215334058029
+7.982648077178181
+3.303778194960711
+6.845166964779691
+5.175136241842978
+5.611538016661082
+4.293354218279116
+6.2617605857039775
+4.646868778200023
+5.596211970851805
+6.4731028962866635
+5.9737535333484795
+6.411386536458501
+2.7695062051965302
+3.5560570906765894
+5.451690061978083
+6.503535887841675
+4.695530301460264
+4.706120568510652
+2.800841111510871
+5.364729318170148
+5.1911558656154835
+5.947415408072919
+4.777513714112934
+4.596459418828304
+5.043317097051506
+5.174749896541634
+5.258257882159918
+3.887023257269741
+5.131383317673293
+5.843231353166214
+6.472487193651527
+5.763704927517821
+6.024396779444038
+4.926879229092987
+6.558645082464584
+5.447575064546803
+4.286751335276036
+3.9071252303818644
+4.618489035299945
+5.088217807208579
+3.808752600228301
+5.861810119867259
+4.033532296400091
+5.74542761207288
+4.925806147050348
+3.679404591586196
+4.05604604887352
+5.87881882930846
+4.513573760688276
+4.915009783906388
+3.654483449601882
+4.912095784340134
+3.3774256594506396
+4.188548007093734
+5.4860540834510445
+4.483111427918742
+6.091604204270534
+4.913639044459108
+6.347957296069254
+5.777137740280461
+4.996625717628335
+3.357832000765961
+4.529640780144531
+6.655383658310578
+5.187418414545693
+5.275067584707507
+5.50723064248028
+4.636201988408981
+4.947416066568987
+7.027581910469225
+4.570962245627946
+5.947355941474328
+4.7057667163042245
+4.786943520378938
+5.615852784022176
+4.645129057815488
+5.263882354785195
+3.844951724466573
+5.554260404852657
+4.684091248268045
+5.13336102667963
+3.417837773686996
+4.392489033666552
+6.270027300253521
+6.102372796945901
+4.219653651099504
+5.076173402237902
+4.383422445264855
+3.0437995085361025
+5.377941796580727
+6.276975902314367
+4.315133675763909
+5.507204150696545
+4.886780791403244
+7.147240935203286
+3.900457465197911
+5.102470142455588
+7.084247234995372
+5.457300111792919
+4.60867925423519
+6.2840312118540815
+7.236947706509271
+7.133509547170027
+4.3015318378968
+5.043756433592529
+5.108881706267525
+5.5240023845728645
+5.858632364389344
+5.981971317600007
+6.259948473084726
+4.062783955426871
+5.218852203995356
+3.8038254404258813
+4.758585778361602
+4.376196481713867
+4.458880802424765
+3.96326498727664
+3.6778134622710104
+4.374934998721925
+7.489468914416122
+5.700987063590436
+3.3100952240676955
+5.1696122166092415
+6.541584919841012
+4.4595571152023465
+4.366611842258099
+5.382259676070623
+4.7794428978336825
+3.757838857759169
+6.545307984939696
+4.881890171568036
+5.7063933726311165
+4.7730257133517116
+3.873677842944983
+3.840259191338565
+4.593661080441791
+4.511107632929962
+5.5385052402039605
+5.441167937479936
+5.984890322415174
+5.403820054129332
+5.148546201719365
+4.838476271562129
+6.2440438844133075
+3.9741885421050913
+6.327490860577795
+4.633940514497735
+5.232122748521683
+4.456999940494487
+5.576626928088951
+3.2818610857426584
+5.134684374559793
+4.602466559265273
+5.891324885962796
+5.517816321593768
+6.624687761337339
+5.2683180340267874
+4.662418552035468
+4.622236368091395
+5.536060664096081
+3.272870360657461
+3.9899131914173696
+5.121549579739896
+5.928806028927443
+4.259133981719825
+5.313734011651727
+5.635277610987355
+4.524627655490917
diff --git a/src/test/org/apache/commons/math/special/BetaTest.java b/src/test/org/apache/commons/math/special/BetaTest.java
new file mode 100644
index 0000000..aae32ff
--- /dev/null
+++ b/src/test/org/apache/commons/math/special/BetaTest.java
@@ -0,0 +1,156 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.commons.math.special;
+
+import org.apache.commons.math.MathException;
+import org.apache.commons.math.TestUtils;
+
+import junit.framework.TestCase;
+
+/**
+ * @version $Revision: 1.6 $ $Date: 2003/11/14 22:22:23 $
+ */
+public class BetaTest extends TestCase {
+    /**
+     * Constructor for BetaTest.
+     * @param name
+     */
+    public BetaTest(String name) {
+        super(name);
+    }
+
+    private void testRegularizedBeta(double expected, double x, double a,
+        double b)
+    {
+        try {
+            double actual = Beta.regularizedBeta(x, a, b);
+            TestUtils.assertEquals(expected, actual, 10e-5);
+        } catch(MathException ex){
+            fail(ex.getMessage());
+        }
+    }
+
+    private void testLogBeta(double expected, double a, double b) {
+        double actual = Beta.logBeta(a, b);
+        TestUtils.assertEquals(expected, actual, 10e-5);
+    }
+
+    public void testRegularizedBetaNanPositivePositive() {
+        testRegularizedBeta(Double.NaN, Double.NaN, 1.0, 1.0);
+    }
+
+    public void testRegularizedBetaPositiveNanPositive() {
+        testRegularizedBeta(Double.NaN, 0.5, Double.NaN, 1.0);
+    }
+
+    public void testRegularizedBetaPositivePositiveNan() {
+        testRegularizedBeta(Double.NaN, 0.5, 1.0, Double.NaN);
+    }
+    
+    public void testRegularizedBetaNegativePositivePositive() {
+        testRegularizedBeta(Double.NaN, -0.5, 1.0, 2.0);
+    }
+    
+    public void testRegularizedBetaPositiveNegativePositive() {
+        testRegularizedBeta(Double.NaN, 0.5, -1.0, 2.0);
+    }
+    
+    public void testRegularizedBetaPositivePositiveNegative() {
+        testRegularizedBeta(Double.NaN, 0.5, 1.0, -2.0);
+    }
+    
+    public void testRegularizedBetaZeroPositivePositive() {
+        testRegularizedBeta(0.0, 0.0, 1.0, 2.0);
+    }
+    
+    public void testRegularizedBetaPositiveZeroPositive() {
+        testRegularizedBeta(Double.NaN, 0.5, 0.0, 2.0);
+    }
+    
+    public void testRegularizedBetaPositivePositiveZero() {
+        testRegularizedBeta(Double.NaN, 0.5, 1.0, 0.0);
+    }
+    
+    public void testRegularizedBetaPositivePositivePositive() {
+        testRegularizedBeta(0.75, 0.5, 1.0, 2.0);
+    }
+    
+    public void testLogBetaNanPositive() {
+        testLogBeta(Double.NaN, Double.NaN, 2.0);
+    }
+    
+    public void testLogBetaPositiveNan() {
+        testLogBeta(Double.NaN, 1.0, Double.NaN);
+    }
+    
+    public void testLogBetaNegativePositive() {
+        testLogBeta(Double.NaN, -1.0, 2.0);
+    }
+    
+    public void testLogBetaPositiveNegative() {
+        testLogBeta(Double.NaN, 1.0, -2.0);
+    }
+    
+    public void testLogBetaZeroPositive() {
+        testLogBeta(Double.NaN, 0.0, 2.0);
+    }
+    
+    public void testLogBetaPositiveZero() {
+        testLogBeta(Double.NaN, 1.0, 0.0);
+    }
+    
+    public void testLogBetaPositivePositive() {
+        testLogBeta(-0.693147, 1.0, 2.0);
+    }
+}
\ No newline at end of file
diff --git a/src/test/org/apache/commons/math/special/GammaTest.java b/src/test/org/apache/commons/math/special/GammaTest.java
new file mode 100644
index 0000000..14c0e87
--- /dev/null
+++ b/src/test/org/apache/commons/math/special/GammaTest.java
@@ -0,0 +1,130 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.commons.math.special;
+
+import org.apache.commons.math.MathException;
+import org.apache.commons.math.TestUtils;
+
+import junit.framework.TestCase;
+
+/**
+ * @version $Revision: 1.7 $ $Date: 2003/11/14 22:22:23 $
+ */
+public class GammaTest extends TestCase {
+    /**
+     * Constructor for BetaTest.
+     * @param name
+     */
+    public GammaTest(String name) {
+        super(name);
+    }
+
+    private void testRegularizedGamma(double expected, double a, double x) {
+        try {
+            double actual = Gamma.regularizedGammaP(a, x);
+            TestUtils.assertEquals(expected, actual, 10e-5);
+        } catch(MathException ex){
+            fail(ex.getMessage());
+        }
+    }
+
+    private void testLogGamma(double expected, double x) {
+        double actual = Gamma.logGamma(x);
+        TestUtils.assertEquals(expected, actual, 10e-5);
+    }
+
+    public void testRegularizedGammaNanPositive() {
+        testRegularizedGamma(Double.NaN, Double.NaN, 1.0);
+    }
+
+    public void testRegularizedGammaPositiveNan() {
+        testRegularizedGamma(Double.NaN, 1.0, Double.NaN);
+    }
+    
+    public void testRegularizedGammaNegativePositive() {
+        testRegularizedGamma(Double.NaN, -1.5, 1.0);
+    }
+    
+    public void testRegularizedGammaPositiveNegative() {
+        testRegularizedGamma(Double.NaN, 1.0, -1.0);
+    }
+    
+    public void testRegularizedGammaZeroPositive() {
+        testRegularizedGamma(Double.NaN, 0.0, 1.0);
+    }
+    
+    public void testRegularizedGammaPositiveZero() {
+        testRegularizedGamma(0.0, 1.0, 0.0);
+    }
+    
+    public void testRegularizedGammaPositivePositive() {
+        testRegularizedGamma(0.632121, 1.0, 1.0);
+    }
+    
+    public void testLogGammaNan() {
+        testLogGamma(Double.NaN, Double.NaN);
+    }
+    
+    public void testLogGammaNegative() {
+        testLogGamma(Double.NaN, -1.0);
+    }
+    
+    public void testLogGammaZero() {
+        testLogGamma(Double.NaN, 0.0);
+    }
+    
+    public void testLogGammaPositive() {
+        testLogGamma(0.693147, 3.0);
+    }
+}
diff --git a/src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java b/src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java
new file mode 100644
index 0000000..40bcf68
--- /dev/null
+++ b/src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java
@@ -0,0 +1,148 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.commons.math.stat;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import junit.framework.Test;
+import junit.framework.TestCase;
+import junit.framework.TestSuite;
+
+import org.apache.commons.math.beans.*;
+
+/**
+ * Test cases for the {@link BeanListUnivariateImpl} class.
+ *
+ * @version $Revision: 1.9 $ $Date: 2003/11/14 22:22:18 $
+ */
+
+public final class BeanListUnivariateImplTest extends TestCase {
+    
+    private List patientList = null;
+    private double tolerance = Double.MIN_VALUE;
+    
+    public BeanListUnivariateImplTest(String name) {
+        super(name);
+    }
+    
+    public void setUp() {  
+        patientList = new ArrayList();
+
+        // Create and add patient bean 1
+        VitalStats vs1 = new VitalStats( new Double(120.0), 
+                                         new Double(96.4) );
+        Patient p1 = new Patient( vs1, new Integer( 35 ) );
+        patientList.add( p1 );
+
+        // Create and add patient bean 2
+        VitalStats vs2 = new VitalStats( new Double(70.0), 
+                                         new Double(97.4) );
+        Patient p2 = new Patient( vs2, new Integer( 23 ) );
+        patientList.add( p2 );
+
+        // Create and add patient bean 3
+        VitalStats vs3 = new VitalStats( new Double(90.0), 
+                                         new Double(98.6) );
+        Patient p3 = new Patient( vs3, new Integer( 42 ) );
+        patientList.add( p3 );
+    }
+    
+    public static Test suite() {
+        TestSuite suite = new TestSuite(BeanListUnivariateImplTest.class);
+        suite.setName("Frequency Tests");
+        return suite;
+    }
+    
+    /** test stats */
+    public void testStats() {
+    	
+        StoreUnivariate u = new BeanListUnivariateImpl( patientList ); 
+
+        assertEquals("total count",3,u.getN(),tolerance);
+
+        u.clear();
+        assertEquals("total count",0,u.getN(),tolerance);    
+    }     
+    
+    public void testPropStats() {
+
+        StoreUnivariate heartU = new BeanListUnivariateImpl( patientList,
+                                          "vitalStats.heartRate" );
+
+        
+
+        assertEquals( "Mean heart rate unexpected", 93.333, 
+                      heartU.getMean(), 0.001 );
+        assertEquals( "Max heart rate unexpected", 120.0, 
+                      heartU.getMax(), 0.001 );
+
+        StoreUnivariate ageU = new BeanListUnivariateImpl( patientList,
+                                                           "age" );
+
+        assertEquals( "Mean age unexpected", 33.333,
+                      ageU.getMean(), 0.001 );
+        assertEquals( "Max age unexpected", 42.0,
+                      ageU.getMax(), 0.001 );
+
+    }
+    
+    public void testSetPropertyName(){
+        BeanListUnivariateImpl u = new BeanListUnivariateImpl(null);
+        String expected = "property";
+        u.setPropertyName(expected);
+        assertEquals(expected, u.getPropertyName());
+    }
+}
+
diff --git a/src/test/org/apache/commons/math/stat/BivariateRegressionTest.java b/src/test/org/apache/commons/math/stat/BivariateRegressionTest.java
new file mode 100644
index 0000000..41fbdb5
--- /dev/null
+++ b/src/test/org/apache/commons/math/stat/BivariateRegressionTest.java
@@ -0,0 +1,263 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.commons.math.stat;
+
+import junit.framework.Test;
+import junit.framework.TestCase;
+import junit.framework.TestSuite;
+/**
+ * Test cases for the TestStatistic class.
+ *
+ * @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:18 $
+ */
+
+public final class BivariateRegressionTest extends TestCase {
+
+    /* 
+     * NIST "Norris" refernce data set from 
+     * http://www.itl.nist.gov/div898/strd/lls/data/LINKS/DATA/Norris.dat
+     * Strangely, order is {y,x}
+     */
+    private double[][] data = {{0.1,0.2},{338.8,337.4},{118.1,118.2},
+        {888.0,884.6},{9.2,10.1},{228.1,226.5},{668.5,666.3},{998.5,996.3},
+        {449.1,448.6},{778.9,777.0},{559.2,558.2},{0.3,0.4},{0.1,0.6},
+        {778.1,775.5},{668.8,666.9},{339.3,338.0},{448.9,447.5},{10.8,11.6},
+        {557.7,556.0},{228.3,228.1},{998.0,995.8},{888.8,887.6},{119.6,120.2},
+        {0.3,0.3},{0.6,0.3},{557.6,556.8},{339.3,339.1},{888.0,887.2},
+        {998.5,999.0},{778.9,779.0},{10.2,11.1},{117.6,118.3},{228.9,229.2},
+        {668.4,669.1},{449.2,448.9},{0.2,0.5}}; 
+        
+    /* 
+     * Correlation example from 
+     * http://www.xycoon.com/correlation.htm
+     */
+    private double[][] corrData = {{101.0,99.2},{100.1,99.0},{100.0,100.0},
+        {90.6,111.6},{86.5,122.2},{89.7,117.6},{90.6,121.1},{82.8,136.0},
+        {70.1,154.2},{65.4,153.6},{61.3,158.5},{62.5,140.6},{63.6,136.2},
+        {52.6,168.0},{59.7,154.3},{59.5,149.0},{61.3,165.5}};
+        
+    /*
+     * From Moore and Mcabe, "Introduction to the Practice of Statistics"
+     * Example 10.3 
+     */
+    private double[][] infData = {{15.6,5.2},{26.8,6.1},{37.8,8.7},{36.4,8.5},
+    {35.5,8.8},{18.6,4.9},{15.3,4.5},{7.9,2.5},{0.0,1.1}};
+    
+    /*
+     * From http://www.xycoon.com/simple_linear_regression.htm
+     */
+    private double[][] infData2 = {{1,3},{2,5},{3,7},{4,14},{5,11}};
+    
+    public BivariateRegressionTest(String name) {
+        super(name);
+    }
+    
+    public void setUp() { 
+    }
+
+    public static Test suite() {
+        TestSuite suite = new TestSuite(BivariateRegressionTest.class);
+        suite.setName("BivariateRegression Tests");
+        return suite;
+    }
+    
+    public void testNorris() {
+       BivariateRegression regression = new BivariateRegression();
+       for (int i = 0; i < data.length; i++) {
+           regression.addData(data[i][1],data[i][0]);
+       }
+       assertEquals("slope",1.00211681802045, 
+            regression.getSlope(),10E-12);
+       assertEquals("slope std err",0.429796848199937E-03, 
+            regression.getSlopeStdErr(),10E-12);
+       assertEquals("number of observations",36,regression.getN());
+       assertEquals("intercept", -0.262323073774029,
+            regression.getIntercept(),10E-12);
+       assertEquals("std err intercept", 0.232818234301152, 
+            regression.getInterceptStdErr(),10E-12);
+       assertEquals("r-square",0.999993745883712,
+            regression.getRSquare(),10E-12);
+       assertEquals("SSR",4255954.13232369, 
+            regression.getRegressionSumSquares(),10E-9);
+       assertEquals("MSE",0.782864662630069, 
+            regression.getMeanSquareError(),10E-10);
+       assertEquals("SSE",26.6173985294224, 
+            regression.getSumSquaredErrors(),10E-9);
+       assertEquals("predict(0)",-0.262323073774029,
+            regression.predict(0),10E-12);
+       assertEquals("predict(1)",1.00211681802045-0.262323073774029,
+            regression.predict(1),10E-12);
+    }
+    
+    public void testCorr() {
+       BivariateRegression regression = new BivariateRegression();
+       regression.addData(corrData);
+       assertEquals("number of observations",17,regression.getN());
+       assertEquals("r-square",.896123,
+            regression.getRSquare(),10E-6);
+       assertEquals("r",-.946638, 
+            regression.getR(),10E-6);
+    }  
+    
+    public void testNaNs() {
+        
+        BivariateRegression regression = new BivariateRegression();
+        
+        assertTrue("intercept not NaN",Double.isNaN(regression.getIntercept()));
+        assertTrue("slope not NaN",Double.isNaN(regression.getSlope()));
+        assertTrue("slope std err not NaN",
+            Double.isNaN(regression.getSlopeStdErr()));
+        assertTrue("intercept std err not NaN",
+            Double.isNaN(regression.getInterceptStdErr()));
+        assertTrue("MSE not NaN",Double.isNaN(regression.getMeanSquareError()));
+        assertTrue("e not NaN",Double.isNaN(regression.getR()));
+        assertTrue("r-square not NaN",Double.isNaN(regression.getRSquare()));
+        assertTrue("RSS not NaN",
+            Double.isNaN(regression.getRegressionSumSquares()));
+        assertTrue("SSE not NaN",Double.isNaN(regression.getSumSquaredErrors()));
+        assertTrue("SSTO not NaN",Double.isNaN(regression.getTotalSumSquares()));
+        assertTrue("predict not NaN",Double.isNaN(regression.predict(0)));
+        
+        regression.addData(1,2);
+        regression.addData(1,3);
+        
+        // No x variation, so these should still blow...
+        assertTrue("intercept not NaN",Double.isNaN(regression.getIntercept()));
+        assertTrue("slope not NaN",Double.isNaN(regression.getSlope()));
+        assertTrue("slope std err not NaN",
+            Double.isNaN(regression.getSlopeStdErr()));
+        assertTrue("intercept std err not NaN",
+            Double.isNaN(regression.getInterceptStdErr()));
+        assertTrue("MSE not NaN",Double.isNaN(regression.getMeanSquareError()));
+        assertTrue("e not NaN",Double.isNaN(regression.getR()));
+        assertTrue("r-square not NaN",Double.isNaN(regression.getRSquare()));
+        assertTrue("RSS not NaN",
+            Double.isNaN(regression.getRegressionSumSquares()));
+        assertTrue("SSE not NaN",Double.isNaN(regression.getSumSquaredErrors()));
+        assertTrue("predict not NaN",Double.isNaN(regression.predict(0)));
+        
+        // but SSTO should be OK
+         assertTrue("SSTO NaN",!Double.isNaN(regression.getTotalSumSquares()));
+        
+        regression = new BivariateRegression();
+        
+        regression.addData(1,2);
+        regression.addData(3,3);
+        
+        // All should be OK except MSE, s(b0), s(b1) which need one more df 
+        assertTrue("interceptNaN",!Double.isNaN(regression.getIntercept()));
+        assertTrue("slope NaN",!Double.isNaN(regression.getSlope()));
+        assertTrue("slope std err not NaN",
+            Double.isNaN(regression.getSlopeStdErr()));
+        assertTrue("intercept std err not NaN",
+            Double.isNaN(regression.getInterceptStdErr()));
+        assertTrue("MSE not NaN",Double.isNaN(regression.getMeanSquareError()));
+        assertTrue("r NaN",!Double.isNaN(regression.getR()));
+        assertTrue("r-square NaN",!Double.isNaN(regression.getRSquare()));
+        assertTrue("RSS NaN",
+            !Double.isNaN(regression.getRegressionSumSquares()));
+        assertTrue("SSE NaN",!Double.isNaN(regression.getSumSquaredErrors()));
+        assertTrue("SSTO NaN",!Double.isNaN(regression.getTotalSumSquares()));
+        assertTrue("predict NaN",!Double.isNaN(regression.predict(0)));
+        
+        regression.addData(1,4);
+        
+        // MSE, MSE, s(b0), s(b1) should all be OK now
+        assertTrue("MSE NaN",!Double.isNaN(regression.getMeanSquareError()));
+        assertTrue("slope std err NaN",
+            !Double.isNaN(regression.getSlopeStdErr()));
+        assertTrue("intercept std err NaN",
+            !Double.isNaN(regression.getInterceptStdErr()));
+    }
+    
+    public void testClear() {
+       BivariateRegression regression = new BivariateRegression();
+       regression.addData(corrData);
+       assertEquals("number of observations",17,regression.getN());
+       regression.clear();
+       assertEquals("number of observations",0,regression.getN());
+       regression.addData(corrData);
+       assertEquals("r-square",.896123,regression.getRSquare(),10E-6);
+       regression.addData(data);
+       assertEquals("number of observations",53,regression.getN());
+    }
+    
+    public void testInference() {
+       BivariateRegression regression = new BivariateRegression();
+       regression.addData(infData);
+       assertEquals("slope confidence interval", 0.0271,
+            regression.getSlopeConfidenceInterval(),0.0001);
+       assertEquals("slope std err",0.01146,
+            regression.getSlopeStdErr(),0.0001);
+       
+       regression = new BivariateRegression();
+       regression.addData(infData2);
+       assertEquals("significance", 0.023331,
+            regression.getSignificance(),0.0001);
+       
+       //FIXME: get a real example to test against with alpha = .01
+       assertTrue("tighter means wider",
+            regression.getSlopeConfidenceInterval() < 
+            regression.getSlopeConfidenceInterval(0.01));
+       
+       try {
+           double x = regression.getSlopeConfidenceInterval(1);
+           fail("expecting IllegalArgumentException for alpha = 1");
+       } catch (IllegalArgumentException ex) {
+           ;
+       }
+       
+    }                                        
+}
+
diff --git a/src/test/org/apache/commons/math/stat/CertifiedDataTest.java b/src/test/org/apache/commons/math/stat/CertifiedDataTest.java
new file mode 100644
index 0000000..618f320
--- /dev/null
+++ b/src/test/org/apache/commons/math/stat/CertifiedDataTest.java
@@ -0,0 +1,223 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.commons.math.stat;
+
+import junit.framework.Test;
+import junit.framework.TestCase;
+import junit.framework.TestSuite;
+
+import java.io.BufferedReader;
+import java.io.FileNotFoundException;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import org.apache.commons.logging.*;
+/**
+ * Test cases for the {@link Univariate} class.
+ * @version $Revision: 1.11 $ $Date: 2003/11/14 22:22:18 $
+ */
+public class CertifiedDataTest extends TestCase {
+
+	protected Univariate u = null;
+
+	protected double mean = Double.NaN;
+
+	protected double std = Double.NaN;
+
+	protected Log log = LogFactory.getLog(this.getClass());
+
+	/**
+	 * Certified Data Test Constructor
+	 * @param name
+	 */
+	public CertifiedDataTest(String name) {
+		super(name);
+	}
+
+	/* (non-Javadoc)
+	 * @see junit.framework.TestCase#setUp()
+	 */
+	public void setUp() {
+	}
+
+	/**
+	 * @return The test suite
+	 */
+	public static Test suite() {
+		TestSuite suite = new TestSuite(CertifiedDataTest.class);
+		suite.setName("Certified Tests");
+		return suite;
+	}
+
+	/**
+	 * Test UnivariateImpl
+	*/
+	public void testUnivariateImpl() {
+
+		u = new UnivariateImpl();
+
+		loadStats("data/Lew.txt");
+		assertEquals("Lew: std", std, u.getStandardDeviation(), .000000000001);
+		assertEquals("Lew: mean", mean, u.getMean(), .000000000001);
+		
+		loadStats("data/Lottery.txt");
+		assertEquals("Lottery: std", std, u.getStandardDeviation(), .000000000001);
+		assertEquals("Lottery: mean", mean, u.getMean(), .000000000001);	
+		
+		loadStats("data/PiDigits.txt");
+		assertEquals("PiDigits: std", std, u.getStandardDeviation(), .0000000000001);
+		assertEquals("PiDigits: mean", mean, u.getMean(), .0000000000001);	
+
+		loadStats("data/Mavro.txt");
+		assertEquals("Mavro: std", std, u.getStandardDeviation(), .00000000000001);
+		assertEquals("Mavro: mean", mean, u.getMean(), .00000000000001);
+		
+		//loadStats("data/Michelso.txt");
+		//assertEquals("Michelso: std", std, u.getStandardDeviation(), .00000000000001);
+		//assertEquals("Michelso: mean", mean, u.getMean(), .00000000000001);	
+										
+		loadStats("data/NumAcc1.txt");
+		assertEquals("NumAcc1: std", std, u.getStandardDeviation(), .00000000000001);
+		assertEquals("NumAcc1: mean", mean, u.getMean(), .00000000000001);
+		
+		//loadStats("data/NumAcc2.txt");
+		//assertEquals("NumAcc2: std", std, u.getStandardDeviation(), .000000001);
+		//assertEquals("NumAcc2: mean", mean, u.getMean(), .00000000000001);
+	}
+
+	/**
+	 * Test UnivariateImpl
+	 */
+	public void testStoredUnivariateImpl() {
+
+		u = new StoreUnivariateImpl();
+		
+		loadStats("data/Lew.txt");
+		assertEquals("Lew: std", std, u.getStandardDeviation(), .000000000001);
+		assertEquals("Lew: mean", mean, u.getMean(), .000000000001);
+		
+		loadStats("data/Lottery.txt");
+		assertEquals("Lottery: std", std, u.getStandardDeviation(), .000000000001);
+		assertEquals("Lottery: mean", mean, u.getMean(), .000000000001);		
+																  
+		loadStats("data/PiDigits.txt");
+		assertEquals("PiDigits: std", std, u.getStandardDeviation(), .0000000000001);
+		assertEquals("PiDigits: mean", mean, u.getMean(), .0000000000001);
+		
+		loadStats("data/Mavro.txt");
+		assertEquals("Mavro: std", std, u.getStandardDeviation(), .00000000000001);
+		assertEquals("Mavro: mean", mean, u.getMean(), .00000000000001);		
+		
+		//loadStats("data/Michelso.txt");
+		//assertEquals("Michelso: std", std, u.getStandardDeviation(), .00000000000001);
+		//assertEquals("Michelso: mean", mean, u.getMean(), .00000000000001);	
+
+		loadStats("data/NumAcc1.txt");
+		assertEquals("NumAcc1: std", std, u.getStandardDeviation(), .00000000000001);
+		assertEquals("NumAcc1: mean", mean, u.getMean(), .00000000000001);
+		
+		//loadStats("data/NumAcc2.txt");
+		//assertEquals("NumAcc2: std", std, u.getStandardDeviation(), .000000001);
+		//assertEquals("NumAcc2: mean", mean, u.getMean(), .00000000000001);
+	}
+
+	/**
+	 * loads a Univariate off of a test file
+	 * @param file
+	 */
+	private void loadStats(String resource) {
+
+		try {
+
+			u.clear();
+			mean = Double.NaN;
+			std = Double.NaN;
+
+			BufferedReader in =
+				new BufferedReader(
+					new InputStreamReader(
+						getClass().getResourceAsStream(resource)));
+
+			String line = null;
+
+			for (int j = 0; j < 60; j++) {
+				line = in.readLine();
+				if (j == 40) {
+					mean =
+						Double.parseDouble(
+							line.substring(line.lastIndexOf(":") + 1).trim());
+				}
+				if (j == 41) {
+					std =
+						Double.parseDouble(
+							line.substring(line.lastIndexOf(":") + 1).trim());
+				}
+			}
+
+			line = in.readLine();
+
+			while (line != null) {
+
+				u.addValue(Double.parseDouble(line.trim()));
+				line = in.readLine();
+			}
+
+			in.close();
+
+		} catch (FileNotFoundException fnfe) {
+			log.error(fnfe.getMessage(), fnfe);
+		} catch (IOException ioe) {
+			log.error(ioe.getMessage(), ioe);
+		}
+	}
+}
diff --git a/src/test/org/apache/commons/math/stat/FrequencyTest.java b/src/test/org/apache/commons/math/stat/FrequencyTest.java
new file mode 100644
index 0000000..e49ec9c
--- /dev/null
+++ b/src/test/org/apache/commons/math/stat/FrequencyTest.java
@@ -0,0 +1,165 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.commons.math.stat;
+
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.StringReader;
+
+import junit.framework.Test;
+import junit.framework.TestCase;
+import junit.framework.TestSuite;
+
+/**
+ * Test cases for the {@link Frequency} class.
+ *
+ * @version $Revision: 1.7 $ $Date: 2003/11/14 22:22:18 $
+ */
+
+public final class FrequencyTest extends TestCase {
+    private long oneL = 1;
+    private long twoL = 2;
+    private int oneI = 1;
+    private int twoI = 2;
+    private String oneS = "1";
+    private String twoS = "2";
+    private double tolerance = 10E-15;
+    
+    public FrequencyTest(String name) {
+        super(name);
+    }
+    
+    public void setUp() {  
+    }
+    
+    public static Test suite() {
+        TestSuite suite = new TestSuite(FrequencyTest.class);
+        suite.setName("Frequency Tests");
+        return suite;
+    }
+    
+    /** test freq counts */
+    public void testCounts() {
+        Frequency f = new Frequency("test counts"); 
+        assertEquals("total count",0,f.getSumFreq());
+        f.addValue(oneL);
+        f.addValue(twoL);
+        f.addValue(oneS);
+        f.addValue(oneI);
+        assertEquals("one frequency count",3,f.getCount("1"));
+        assertEquals("two frequency count",1,f.getCount("2"));
+        assertEquals("foo frequency count",0,f.getCount("foo"));
+        assertEquals("total count",4,f.getSumFreq());
+        f.clear();
+        assertEquals("total count",0,f.getSumFreq());
+    }     
+    
+    /** test pcts */
+    public void testPcts() {
+        Frequency f = new Frequency("test pcts"); 
+        f.addValue(oneL);
+        f.addValue(twoL);
+        f.addValue(oneI);
+        f.addValue(twoI);
+        f.addValue("foo");
+        f.addValue("foo");
+        f.addValue("foo");
+        f.addValue("foo");
+        assertEquals("one pct",0.25,f.getPct("1"),tolerance);
+        assertEquals("two pct",0.25,f.getPct("2"),tolerance);
+        assertEquals("foo pct",0.5,f.getPct("foo"),tolerance);
+        assertEquals("bar pct",0,f.getPct("bar"),tolerance);
+    }
+    
+    /**
+     * 
+     */
+    public void testToString(){
+        Frequency f = new Frequency("test toString"); 
+        f.addValue(oneL);
+        f.addValue(twoL);
+        f.addValue(oneI);
+        f.addValue(twoI);
+        
+        String s = f.toString();
+        assertNotNull(s);
+        BufferedReader reader = new BufferedReader(new StringReader(s));
+        try {
+            String line = reader.readLine(); // header line
+            assertNotNull(line);
+            
+            line = reader.readLine(); // one's or two's line
+            assertNotNull(line);
+                        
+            line = reader.readLine(); // one's or two's line
+            assertNotNull(line);
+
+            line = reader.readLine(); // no more elements
+            assertNull(line);
+        } catch(IOException ex){
+            fail(ex.getMessage());
+        }        
+    }
+    
+    /**
+     * 
+     */
+    public void testSetName(){
+        String name = "name";
+        Frequency f = new Frequency();
+        f.setName(name);
+        assertEquals(name, f.getName());
+    }              
+}
+
diff --git a/src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java b/src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java
new file mode 100644
index 0000000..47c1aa4
--- /dev/null
+++ b/src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java
@@ -0,0 +1,178 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.commons.math.stat;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import junit.framework.Test;
+import junit.framework.TestCase;
+import junit.framework.TestSuite;
+
+/**
+ * Test cases for the {@link Univariate} class.
+ *
+ * @version $Revision: 1.9 $ $Date: 2003/11/14 22:22:18 $
+ */
+
+public final class ListUnivariateImplTest extends TestCase {
+    private double one = 1;
+    private float two = 2;
+    private int three = 3;
+
+    private double mean = 2;
+    private double sumSq = 18;
+    private double sum = 8;
+    private double var = 0.666666666666666666667;
+    private double std = Math.sqrt(var);
+    private double n = 4;
+    private double min = 1;
+    private double max = 3;
+    private double skewness = 0;
+    private double kurtosis = 0.5;
+    private int kClass = StoreUnivariate.LEPTOKURTIC;
+    private double tolerance = 10E-15;
+    
+    public ListUnivariateImplTest(String name) {
+        super(name);
+    }
+    
+    public void setUp() {  
+    }
+    
+    public static Test suite() {
+        TestSuite suite = new TestSuite(ListUnivariateImplTest.class);
+        suite.setName("Frequency Tests");
+        return suite;
+    }
+    
+    /** test stats */
+    public void testStats() {
+    	List externalList = new ArrayList();
+    	
+        StoreUnivariate u = new ListUnivariateImpl( externalList ); 
+
+        assertEquals("total count",0,u.getN(),tolerance);
+        u.addValue(one);
+        u.addValue(two);
+        u.addValue(two);
+        u.addValue(three);
+        assertEquals("N",n,u.getN(),tolerance);
+        assertEquals("sum",sum,u.getSum(),tolerance);
+        assertEquals("sumsq",sumSq,u.getSumsq(),tolerance);
+        assertEquals("var",var,u.getVariance(),tolerance);
+        assertEquals("std",std,u.getStandardDeviation(),tolerance);
+        assertEquals("mean",mean,u.getMean(),tolerance);
+        assertEquals("min",min,u.getMin(),tolerance);
+        assertEquals("max",max,u.getMax(),tolerance);
+        u.clear();
+        assertEquals("total count",0,u.getN(),tolerance);    
+    }     
+    
+    public void testN0andN1Conditions() throws Exception {
+    	List list = new ArrayList();
+    	
+    	StoreUnivariate u = new ListUnivariateImpl( list );
+    	    	
+		assertTrue("Mean of n = 0 set should be NaN", Double.isNaN( u.getMean() ) );
+		assertTrue("Standard Deviation of n = 0 set should be NaN", Double.isNaN( u.getStandardDeviation() ) );
+		assertTrue("Variance of n = 0 set should be NaN", Double.isNaN(u.getVariance() ) );
+
+		list.add( new Double(one));
+
+		assertTrue( "Mean of n = 1 set should be value of single item n1", u.getMean() == one);
+		assertTrue( "StdDev of n = 1 set should be zero, instead it is: " + u.getStandardDeviation(), u.getStandardDeviation() == 0);
+		assertTrue( "Variance of n = 1 set should be zero", u.getVariance() == 0);	
+    }
+    
+    public void testSkewAndKurtosis() {
+    	StoreUnivariate u = new StoreUnivariateImpl();
+    	
+    	double[] testArray = { 12.5, 12, 11.8, 14.2, 14.9, 14.5, 21, 8.2, 10.3, 11.3, 14.1,
+  	  										 9.9, 12.2, 12, 12.1, 11, 19.8, 11, 10, 8.8, 9, 12.3 };
+  	  	for( int i = 0; i < testArray.length; i++) {
+  	  		u.addValue( testArray[i]);
+  	  	}
+  	  	
+		assertEquals("mean", 12.40455, u.getMean(), 0.0001);
+		assertEquals("variance", 10.00236, u.getVariance(), 0.0001);
+		assertEquals("skewness", 1.437424, u.getSkewness(), 0.0001);
+  	  	assertEquals("kurtosis", 2.37719, u.getKurtosis(), 0.0001);
+    }
+
+    public void testProductAndGeometricMean() throws Exception {
+    	ListUnivariateImpl u = new ListUnivariateImpl(new ArrayList());
+        u.setWindowSize(10);
+    	    	
+        u.addValue( 1.0 );
+        u.addValue( 2.0 );
+        u.addValue( 3.0 );
+        u.addValue( 4.0 );
+
+        assertEquals( "Geometric mean not expected", 2.213364, u.getGeometricMean(), 0.00001 );
+
+        // Now test rolling - UnivariateImpl should discount the contribution
+        // of a discarded element
+        for( int i = 0; i < 10; i++ ) {
+            u.addValue( i + 2 );
+        }
+        // Values should be (2,3,4,5,6,7,8,9,10,11)
+        
+        assertEquals( "Geometric mean not expected", 5.755931, u.getGeometricMean(), 0.00001 );
+
+
+    }
+
+}
+
diff --git a/src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java b/src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java
new file mode 100644
index 0000000..afc9591
--- /dev/null
+++ b/src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java
@@ -0,0 +1,245 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.commons.math.stat;
+
+import java.util.ArrayList;
+import java.util.List;
+import org.apache.commons.math.util.NumberTransformer;
+import org.apache.commons.math.util.TransformerMap;
+import junit.framework.Test;
+import junit.framework.TestCase;
+import junit.framework.TestSuite;
+
+/**
+ * Test cases for the {@link Univariate} class.
+ *
+ * @version $Revision: 1.5 $ $Date: 2003/11/14 22:22:18 $
+ */
+
+public final class MixedListUnivariateImplTest extends TestCase {
+    private double one = 1;
+    private float two = 2;
+    private int three = 3;
+
+    private double mean = 2;
+    private double sumSq = 18;
+    private double sum = 8;
+    private double var = 0.666666666666666666667;
+    private double std = Math.sqrt(var);
+    private double n = 4;
+    private double min = 1;
+    private double max = 3;
+    private double skewness = 0;
+    private double kurtosis = 0.5;
+    private int kClass = StoreUnivariate.LEPTOKURTIC;
+    private double tolerance = 10E-15;
+
+    private TransformerMap transformers = new TransformerMap();
+    
+    public MixedListUnivariateImplTest(String name) {
+        super(name);
+        transformers = new TransformerMap();
+
+        transformers.putTransformer(Foo.class, new NumberTransformer() {
+            public double transform(Object o) {
+                return Double.parseDouble(((Foo) o).heresFoo());
+            }
+        });
+
+        transformers.putTransformer(Bar.class, new NumberTransformer() {
+            public double transform(Object o) {
+                return Double.parseDouble(((Bar) o).heresBar());
+            }
+
+        });
+
+    }
+
+    public void setUp() {
+    }
+
+    public static Test suite() {
+        TestSuite suite = new TestSuite(MixedListUnivariateImplTest.class);
+        suite.setName("Mixed List Tests");
+        return suite;
+    }
+
+    /** test stats */
+    public void testStats() {
+        List externalList = new ArrayList();
+
+        StoreUnivariate u = new ListUnivariateImpl(externalList,transformers);
+
+        assertEquals("total count", 0, u.getN(), tolerance);
+        u.addValue(one);
+        u.addValue(two);
+        u.addValue(two);
+        u.addValue(three);
+        assertEquals("N", n, u.getN(), tolerance);
+        assertEquals("sum", sum, u.getSum(), tolerance);
+        assertEquals("sumsq", sumSq, u.getSumsq(), tolerance);
+        assertEquals("var", var, u.getVariance(), tolerance);
+        assertEquals("std", std, u.getStandardDeviation(), tolerance);
+        assertEquals("mean", mean, u.getMean(), tolerance);
+        assertEquals("min", min, u.getMin(), tolerance);
+        assertEquals("max", max, u.getMax(), tolerance);
+        u.clear();
+        assertEquals("total count", 0, u.getN(), tolerance);
+    }
+
+    public void testN0andN1Conditions() throws Exception {
+        List list = new ArrayList();
+
+        StoreUnivariate u = new ListUnivariateImpl(new ArrayList(),transformers);
+
+        assertTrue(
+            "Mean of n = 0 set should be NaN",
+            Double.isNaN(u.getMean()));
+        assertTrue(
+            "Standard Deviation of n = 0 set should be NaN",
+            Double.isNaN(u.getStandardDeviation()));
+        assertTrue(
+            "Variance of n = 0 set should be NaN",
+            Double.isNaN(u.getVariance()));
+
+        u.addValue(one);
+
+        assertTrue(
+            "Mean of n = 1 set should be value of single item n1, instead it is " + u.getMean() ,
+            u.getMean() == one);
+            
+        assertTrue(
+            "StdDev of n = 1 set should be zero, instead it is: "
+                + u.getStandardDeviation(),
+            u.getStandardDeviation() == 0);
+        assertTrue(
+            "Variance of n = 1 set should be zero",
+            u.getVariance() == 0);
+    }
+
+    public void testSkewAndKurtosis() {
+        ListUnivariateImpl u =
+            new ListUnivariateImpl(new ArrayList(), transformers);
+
+        u.addObject("12.5");
+        u.addObject(new Integer(12));
+        u.addObject("11.8");
+        u.addObject("14.2");
+        u.addObject(new Foo());
+        u.addObject("14.5");
+        u.addObject(new Long(21));
+        u.addObject("8.2");
+        u.addObject("10.3");
+        u.addObject("11.3");
+        u.addObject(new Float(14.1));
+        u.addObject("9.9");
+        u.addObject("12.2");
+        u.addObject(new Bar());
+        u.addObject("12.1");
+        u.addObject("11");
+        u.addObject(new Double(19.8));
+        u.addObject("11");
+        u.addObject("10");
+        u.addObject("8.8");
+        u.addObject("9");
+        u.addObject("12.3");
+
+
+        assertEquals("mean", 12.40455, u.getMean(), 0.0001);
+        assertEquals("variance", 10.00236, u.getVariance(), 0.0001);
+        assertEquals("skewness", 1.437424, u.getSkewness(), 0.0001);
+        assertEquals("kurtosis", 2.37719, u.getKurtosis(), 0.0001);
+    }
+
+    public void testProductAndGeometricMean() throws Exception {
+        ListUnivariateImpl u = new ListUnivariateImpl(new ArrayList(),transformers);
+        u.setWindowSize(10);
+
+        u.addValue(1.0);
+        u.addValue(2.0);
+        u.addValue(3.0);
+        u.addValue(4.0);
+
+        assertEquals(
+            "Geometric mean not expected",
+            2.213364,
+            u.getGeometricMean(),
+            0.00001);
+
+        // Now test rolling - UnivariateImpl should discount the contribution
+        // of a discarded element
+        for (int i = 0; i < 10; i++) {
+            u.addValue(i + 2);
+        }
+        // Values should be (2,3,4,5,6,7,8,9,10,11)
+        assertEquals(
+            "Geometric mean not expected",
+            5.755931,
+            u.getGeometricMean(),
+            0.00001);
+
+    }
+
+    public final class Foo {
+        public String heresFoo() {
+            return "14.9";
+        }
+    }
+
+    public final class Bar {
+        public String heresBar() {
+            return "12.0";
+        }
+    }
+}
diff --git a/src/test/org/apache/commons/math/stat/StatUtilsTest.java b/src/test/org/apache/commons/math/stat/StatUtilsTest.java
new file mode 100644
index 0000000..03d14b9
--- /dev/null
+++ b/src/test/org/apache/commons/math/stat/StatUtilsTest.java
@@ -0,0 +1,202 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.commons.math.stat;
+
+import junit.framework.Test;
+import junit.framework.TestCase;
+import junit.framework.TestSuite;
+
+/**
+ * Test cases for the {@link StatUtils} class.
+ * @version $Revision: 1.10 $ $Date: 2003/11/14 22:22:18 $
+ */
+
+public final class StatUtilsTest extends TestCase {
+
+    private double one = 1;
+    private float two = 2;
+    private int three = 3;
+    private double mean = 2;
+    private double sumSq = 18;
+    private double sum = 8;
+    private double var = 0.666666666666666666667;
+    private double std = Math.sqrt(var);
+    private double n = 4;
+    private double min = 1;
+    private double max = 3;
+    private double skewness = 0;
+    private double kurtosis = 0.5;
+    private int kClass = StoreUnivariate.LEPTOKURTIC;
+    private double tolerance = 10E-15;
+
+    public StatUtilsTest(String name) {
+        super(name);
+    }
+
+    public void setUp() {
+    }
+
+    public static Test suite() {
+        TestSuite suite = new TestSuite(StatUtilsTest.class);
+        suite.setName("StatUtil Tests");
+        return suite;
+    }
+
+    /** test stats */
+    public void testStats() {
+        double[] values = new double[] { one, two, two, three };
+        assertEquals("sum", sum, StatUtils.sum(values), tolerance);
+        assertEquals("sumsq", sumSq, StatUtils.sumSq(values), tolerance);
+        assertEquals("var", var, StatUtils.variance(values), tolerance);
+        assertEquals("mean", mean, StatUtils.mean(values), tolerance);
+        assertEquals("min", min, StatUtils.min(values), tolerance);
+        assertEquals("max", max, StatUtils.max(values), tolerance);
+    }
+
+    public void testN0andN1Conditions() throws Exception {
+        double[] values = new double[0];
+
+        assertTrue(
+            "Mean of n = 0 set should be NaN",
+            Double.isNaN(StatUtils.mean(values)));
+        assertTrue(
+            "Variance of n = 0 set should be NaN",
+            Double.isNaN(StatUtils.variance(values)));
+
+        values = new double[] { one };
+
+        assertTrue(
+            "Mean of n = 1 set should be value of single item n1",
+            StatUtils.mean(values) == one);
+        assertTrue(
+            "Variance of n = 1 set should be zero",
+            StatUtils.variance(values) == 0);
+    }
+
+    public void testSkewAndKurtosis() {
+
+        double[] values =
+            {
+                12.5,
+                12,
+                11.8,
+                14.2,
+                14.9,
+                14.5,
+                21,
+                8.2,
+                10.3,
+                11.3,
+                14.1,
+                9.9,
+                12.2,
+                12,
+                12.1,
+                11,
+                19.8,
+                11,
+                10,
+                8.8,
+                9,
+                12.3 };
+
+        assertEquals("mean", 12.40455, StatUtils.mean(values), 0.0001);
+        assertEquals("variance", 10.00236, StatUtils.variance(values), 0.0001);
+    }
+
+    public void testProductAndGeometricMean() throws Exception {
+        double[] values = { 1.0, 2.0, 3.0, 4.0 };
+
+        assertEquals(
+            "Product not expected",
+            24.0,
+            StatUtils.product(values),
+            Double.MIN_VALUE);
+    }
+
+    public void testArrayIndexConditions() throws Exception {
+        double[] values = { 1.0, 2.0, 3.0, 4.0 };
+
+        assertEquals(
+            "Sum not expected",
+            5.0,
+            StatUtils.sum(values, 1, 2),
+            Double.MIN_VALUE);
+        assertEquals(
+            "Sum not expected",
+            3.0,
+            StatUtils.sum(values, 0, 2),
+            Double.MIN_VALUE);
+        assertEquals(
+            "Sum not expected",
+            7.0,
+            StatUtils.sum(values, 2, 2),
+            Double.MIN_VALUE);
+
+        try {
+            StatUtils.sum(values, 2, 3);
+            assertTrue("Didn't throw exception", false);
+        } catch (Exception e) {
+            assertTrue(true);
+        }
+
+        try {
+            StatUtils.sum(values, -1, 2);
+            assertTrue("Didn't throw exception", false);
+        } catch (Exception e) {
+            assertTrue(true);
+        }
+
+    }
+}
\ No newline at end of file
diff --git a/src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java b/src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java
new file mode 100644
index 0000000..9190a32
--- /dev/null
+++ b/src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java
@@ -0,0 +1,291 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.commons.math.stat;
+
+import junit.framework.Test;
+import junit.framework.TestCase;
+import junit.framework.TestSuite;
+
+import org.apache.commons.math.random.RandomData;
+import org.apache.commons.math.random.RandomDataImpl;
+
+/**
+ * Test cases for the {@link Univariate} class.
+ *
+ * @version $Revision: 1.9 $ $Date: 2003/11/14 22:22:18 $
+ */
+
+public final class StoreUnivariateImplTest extends TestCase {
+    private double one = 1;
+    private float two = 2;
+    private int three = 3;
+    private double mean = 2;
+    private double sumSq = 18;
+    private double sum = 8;
+    private double var = 0.666666666666666666667;
+    private double std = Math.sqrt(var);
+    private double n = 4;
+    private double min = 1;
+    private double max = 3;
+    private double skewness = 0;
+    private double kurtosis = 0.5;
+    private int kClass = StoreUnivariate.LEPTOKURTIC;
+    private double tolerance = 10E-15;
+    
+    public StoreUnivariateImplTest(String name) {
+        super(name);
+    }
+    
+    public void setUp() {  
+    }
+    
+    public static Test suite() {
+        TestSuite suite = new TestSuite(StoreUnivariateImplTest.class);
+        suite.setName("Frequency Tests");
+        return suite;
+    }
+    
+    /** test stats */
+    public void testStats() {
+        StoreUnivariate u = new StoreUnivariateImpl(); 
+        assertEquals("total count",0,u.getN(),tolerance);
+        u.addValue(one);
+        u.addValue(two);
+        u.addValue(two);
+        u.addValue(three);
+        assertEquals("N",n,u.getN(),tolerance);
+        assertEquals("sum",sum,u.getSum(),tolerance);
+        assertEquals("sumsq",sumSq,u.getSumsq(),tolerance);
+        assertEquals("var",var,u.getVariance(),tolerance);
+        assertEquals("std",std,u.getStandardDeviation(),tolerance);
+        assertEquals("mean",mean,u.getMean(),tolerance);
+        assertEquals("min",min,u.getMin(),tolerance);
+        assertEquals("max",max,u.getMax(),tolerance);
+        u.clear();
+        assertEquals("total count",0,u.getN(),tolerance);    
+    }     
+    
+    public void testN0andN1Conditions() throws Exception {
+    	StoreUnivariate u = new StoreUnivariateImpl();
+    	    	
+            assertTrue("Mean of n = 0 set should be NaN", 
+                Double.isNaN( u.getMean() ) );
+            assertTrue("Standard Deviation of n = 0 set should be NaN", 
+                Double.isNaN( u.getStandardDeviation() ) );
+            assertTrue("Variance of n = 0 set should be NaN",
+                Double.isNaN(u.getVariance() ) );
+
+            u.addValue(one);
+
+            assertTrue( "Mean of n = 1 set should be value of single item n1",
+                u.getMean() == one);
+            assertTrue( "StdDev of n = 1 set should be zero, instead it is: " 
+                + u.getStandardDeviation(), u.getStandardDeviation() == 0);
+            assertTrue( "Variance of n = 1 set should be zero", 
+                u.getVariance() == 0);	
+    }
+    
+    public void testSkewAndKurtosis() {
+    	StoreUnivariate u = new StoreUnivariateImpl();
+    	
+    	double[] testArray = 
+        { 12.5, 12, 11.8, 14.2, 14.9, 14.5, 21, 8.2, 10.3, 11.3, 14.1,
+          9.9, 12.2, 12, 12.1, 11, 19.8, 11, 10, 8.8, 9, 12.3 };
+  	  	for( int i = 0; i < testArray.length; i++) {
+  	  		u.addValue( testArray[i]);
+  	  	}
+  	  	
+		assertEquals("mean", 12.40455, u.getMean(), 0.0001);
+		assertEquals("variance", 10.00236, u.getVariance(), 0.0001);
+		assertEquals("skewness", 1.437424, u.getSkewness(), 0.0001);
+  	  	assertEquals("kurtosis", 2.37719, u.getKurtosis(), 0.0001);
+    }
+
+    public void testProductAndGeometricMean() throws Exception {
+    	StoreUnivariateImpl u = new StoreUnivariateImpl();
+        u.setWindowSize(10);
+    	    	
+        u.addValue( 1.0 );
+        u.addValue( 2.0 );
+        u.addValue( 3.0 );
+        u.addValue( 4.0 );
+
+        //assertEquals( "Product not expected", 
+        //    24.0, u.getProduct(), Double.MIN_VALUE );
+        assertEquals( "Geometric mean not expected", 
+            2.213364, u.getGeometricMean(), 0.00001 );
+
+        // Now test rolling - UnivariateImpl should discount the contribution
+        // of a discarded element
+        for( int i = 0; i < 10; i++ ) {
+            u.addValue( i + 2 );
+        }
+        // Values should be (2,3,4,5,6,7,8,9,10,11)
+        
+        //assertEquals( "Product not expected", 39916800.0, 
+        //    u.getProduct(), 0.00001 );
+        assertEquals( "Geometric mean not expected", 5.755931, 
+            u.getGeometricMean(), 0.00001 );
+    }
+    
+    public void testGetSortedValues() {
+        double[] test1 = {5,4,3,2,1};
+        double[] test2 = {5,2,1,3,4,0};
+        double[] test3 = {1};
+        int[] testi = null;
+        double[] test4 = null;
+        RandomData rd = new RandomDataImpl();
+        tstGetSortedValues(test1);
+        tstGetSortedValues(test2);
+        tstGetSortedValues(test3);
+        for (int i = 0; i < 10; i++) {
+            testi = rd.nextPermutation(10,6);
+            test4 = new double[6];
+            for (int j = 0; j < testi.length; j++) {
+                test4[j] = (double) testi[j];
+            }
+            tstGetSortedValues(test4);
+        }
+        for (int i = 0; i < 10; i++) {
+            testi = rd.nextPermutation(10,5);
+            test4 = new double[5];
+            for (int j = 0; j < testi.length; j++) {
+                test4[j] = (double) testi[j];
+            }
+            tstGetSortedValues(test4);
+        }        
+    }
+    
+        
+    private void tstGetSortedValues(double[] test) {
+        StoreUnivariateImpl u = new StoreUnivariateImpl();
+        for (int i = 0; i < test.length; i++) {
+            u.addValue(test[i]);
+        }
+        double[] sorted = u.getSortedValues();
+        if (sorted.length != test.length) {
+            fail("wrong length for sorted values array");
+        }
+        for (int i = 0; i < sorted.length-1; i++) {
+            if (sorted[i] > sorted[i+1]) {
+                fail("sorted values out of sequence");
+            }
+        }
+    }
+    
+    public void testPercentiles() {
+        double[] test = {5,4,3,2,1};
+        StoreUnivariateImpl u = new StoreUnivariateImpl();
+        for (int i = 0; i < test.length; i++) {
+            u.addValue(test[i]);
+        }
+        assertEquals("expecting min",1,u.getPercentile(5),10E-12);
+        assertEquals("expecting max",5,u.getPercentile(99),10E-12);
+        assertEquals("expecting middle",3,u.getPercentile(50),10E-12);
+        try {
+            double x = u.getPercentile(0);
+            fail("expecting IllegalArgumentException for getPercentile(0)");
+        } catch (IllegalArgumentException ex) {
+            ;
+        }
+        try {
+            double x = u.getPercentile(120);
+            fail("expecting IllegalArgumentException for getPercentile(120)");
+        } catch (IllegalArgumentException ex) {
+            ;
+        }
+        
+        u.clear();
+        double[] test2 = {1,2,3,4};
+        for (int i = 0; i < test2.length; i++) {
+            u.addValue(test2[i]);
+        }
+        assertEquals("Q1",1.25,u.getPercentile(25),10E-12);
+        assertEquals("Q3",3.75,u.getPercentile(75),10E-12);
+        assertEquals("Q2",2.5,u.getPercentile(50),10E-12);
+        
+        u.clear();
+        double[] test3 = {1};
+        for (int i = 0; i < test3.length; i++) {
+            u.addValue(test3[i]);
+        }
+        assertEquals("Q1",1,u.getPercentile(25),10E-12);
+        assertEquals("Q3",1,u.getPercentile(75),10E-12);
+        assertEquals("Q2",1,u.getPercentile(50),10E-12);
+        
+        u.clear();
+        RandomData rd = new RandomDataImpl();
+        int[] testi = rd.nextPermutation(100,100); // will contain 0-99
+        for (int j = 0; j < testi.length; j++) {
+            u.addValue((double) testi[j]);  //OK, laugh at me for the cast
+        }
+        for (int i = 1; i < 100; i++) {
+            assertEquals("percentile " + i,
+                (double) i-1 + (double) i*(.01), u.getPercentile(i),10E-12);
+        }
+        
+        u.clear();
+        double[] test4 = {1,2,3,4,100};
+        for (int i = 0; i < test4.length; i++) {
+            u.addValue(test4[i]);
+        }
+        assertEquals("80th",80.8,u.getPercentile(80),10E-12);
+        
+        u.clear();
+        assertTrue("empty value set should return NaN",
+            Double.isNaN(u.getPercentile(50)));
+    }
+                                     
+}
+
diff --git a/src/test/org/apache/commons/math/stat/TestStatisticTest.java b/src/test/org/apache/commons/math/stat/TestStatisticTest.java
new file mode 100644
index 0000000..c8b7340
--- /dev/null
+++ b/src/test/org/apache/commons/math/stat/TestStatisticTest.java
@@ -0,0 +1,332 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.commons.math.stat;
+
+import junit.framework.Test;
+import junit.framework.TestCase;
+import junit.framework.TestSuite;
+/**
+ * Test cases for the TestStatistic class.
+ *
+ * @version $Revision: 1.7 $ $Date: 2003/11/14 22:22:18 $
+ */
+
+public final class TestStatisticTest extends TestCase {
+
+    private TestStatisticImpl testStatistic = new TestStatisticImpl();
+    
+    public TestStatisticTest(String name) {
+        super(name);
+    }
+    
+    
+    public void setUp() { 
+    }
+
+    public static Test suite() {
+        TestSuite suite = new TestSuite(TestStatisticTest.class);
+        suite.setName("TestStatistic Tests");
+        return suite;
+    }
+
+    public void testChiSquare() {
+       double[] observed = {11,24,69,96};
+       double[] expected = {8.2,25.2,65.8,100.8};
+       assertEquals("chi-square statistic", 
+           1.39743495,testStatistic.chiSquare(expected,observed),10E-5);
+       
+       double[] tooShortObs = {0};
+       double[] tooShortEx = {1};
+       try {
+           testStatistic.chiSquare(tooShortObs,tooShortEx);
+           fail("arguments too short, IllegalArgumentException expected");
+       } catch (IllegalArgumentException ex) {
+           ;
+       }
+       
+       try {
+           testStatistic.chiSquareTest(tooShortObs,tooShortEx);
+           fail("arguments too short, IllegalArgumentException expected");
+       } catch (IllegalArgumentException ex) {
+           ;
+       }
+       
+       double[] unMatchedObs = {0,1,2,3};
+       double[] unMatchedEx = {1,1,2};
+       try {
+           testStatistic.chiSquare(unMatchedEx,unMatchedObs);
+           fail("arrays have different lengths," + 
+                " IllegalArgumentException expected");
+       } catch (IllegalArgumentException ex) {
+           ;
+       }       
+       expected[0] = 0;
+       try {
+           testStatistic.chiSquareTest(expected, observed, .01);
+           fail("bad expected count, IllegalArgumentException expected");
+       } catch (IllegalArgumentException ex) {
+           ;
+       }     
+       /** from http://www.vsenvirginia.org/stat/classpractice/Voter_Preferences_CP.pdf */
+       double[] observed1 = {504, 523, 72, 70, 31};
+       double[] expected1 = {480, 540, 84, 60, 36};
+       assertEquals("chi-square test statistic", 5.81,
+            testStatistic.chiSquare(expected1,observed1),10E-2);
+       assertEquals("chi-square p-value", 0.21, 
+        testStatistic.chiSquareTest(expected1, observed1),10E-2); 
+       assertTrue("chi-square test reject", 
+        testStatistic.chiSquareTest(expected1, observed1, 0.3));
+       assertTrue("chi-square test accept", 
+        !testStatistic.chiSquareTest(expected1, observed1, 0.1));  
+       try {
+           testStatistic.chiSquareTest(expected1, observed1, 95);
+           fail("alpha out of range, IllegalArgumentException expected");
+       } catch (IllegalArgumentException ex) {
+           ;
+       }
+    }
+       
+    public void testT(){
+	double[] observed = {93.0, 103.0, 95.0, 101.0, 91.0, 105.0, 96.0,
+            94.0, 101.0, 88.0, 98.0, 94.0, 101.0, 92.0, 95.0};
+        double mu = 100.0;
+        Univariate sampleStats = new UnivariateImpl();
+        for (int i = 0; i < observed.length; i++) {
+            sampleStats.addValue(observed[i]);
+        }
+        
+        assertEquals("t statistic", -2.82, testStatistic.t(mu, observed),
+            10E-3);
+        assertEquals("t statistic", -2.82, testStatistic.t(mu, sampleStats),
+            10E-3);
+        
+        double[] nullObserved = null;
+        try {
+            testStatistic.t(mu, nullObserved);
+            fail("arguments too short, IllegalArgumentException expected");
+        } catch (IllegalArgumentException ex) {
+            ;
+        }
+        
+        UnivariateImpl nullStats = null;
+        try {
+            testStatistic.t(mu, nullStats);
+            fail("arguments too short, IllegalArgumentException expected");
+        } catch (IllegalArgumentException ex) {
+            ;
+        }
+        
+        double[] emptyObs = {};
+        try {
+            testStatistic.t(mu, emptyObs);
+            fail("arguments too short, IllegalArgumentException expected");
+        } catch (IllegalArgumentException ex) {
+            ;
+        }
+        
+        Univariate emptyStats = new UnivariateImpl();
+        try {
+            testStatistic.t(mu, emptyStats);
+            fail("arguments too short, IllegalArgumentException expected");
+        } catch (IllegalArgumentException ex) {
+            ;
+        }
+        
+        double[] tooShortObs = {1.0};
+        try {
+            testStatistic.t(mu, tooShortObs);
+            fail("arguments too short, IllegalArgumentException expected");
+        } catch (IllegalArgumentException ex) {
+            ;
+        }
+        try {
+            testStatistic.tTest(mu, tooShortObs);
+            fail("arguments too short, IllegalArgumentException expected");
+        } catch (IllegalArgumentException ex) {
+            ;
+        }
+        
+        Univariate tooShortStats = new UnivariateImpl();
+        tooShortStats.addValue(0d);
+        tooShortStats.addValue(2d);
+        try {
+            testStatistic.t(mu, tooShortStats);
+            fail("arguments too short, IllegalArgumentException expected");
+        } catch (IllegalArgumentException ex) {
+            ;
+        }
+        try {
+            testStatistic.tTest(mu, tooShortStats);
+            fail("arguments too short, IllegalArgumentException expected");
+        } catch (IllegalArgumentException ex) {
+            ;
+        }
+            
+        /** Moore and McCabe Example 8.3, p 516 */
+        double[] oneSidedP = {2d, 0d, 6d, 6d, 3d, 3d, 2d, 3d, -6d, 6d, 6d, 
+            6d, 3d, 0d, 1d, 1d, 0d, 2d, 3d, 3d};
+        Univariate oneSidedPStats = new UnivariateImpl();
+        for (int i = 0; i < oneSidedP.length; i++) {
+            oneSidedPStats.addValue(oneSidedP[i]);
+        }
+        assertEquals("one sample t stat",3.86,
+            testStatistic.t(0d,oneSidedP),0.01);
+        assertEquals("one sample t stat",3.86,
+            testStatistic.t(0d,oneSidedPStats),0.01);
+        assertEquals("one sample p value",0.00052,
+            testStatistic.tTest(0d,oneSidedP)/2d,10E-5);
+        assertEquals("one sample p value",0.00052,
+            testStatistic.tTest(0d,oneSidedPStats)/2d,10E-5);
+        assertTrue("one sample t-test reject",
+            testStatistic.tTest(0d,oneSidedP,0.01));
+        assertTrue("one sample t-test reject",
+            testStatistic.tTest(0d,oneSidedPStats,0.01));
+        assertTrue("one sample t-test accept",
+            !testStatistic.tTest(0d,oneSidedP,0.0001));
+        assertTrue("one sample t-test accept",
+            !testStatistic.tTest(0d,oneSidedPStats,0.0001));
+        try {
+           testStatistic.tTest(0d,oneSidedP, 95);
+           fail("alpha out of range, IllegalArgumentException expected");
+        } catch (IllegalArgumentException ex) {
+           ;
+        }
+        try {
+           testStatistic.tTest(0d,oneSidedPStats, 95);
+           fail("alpha out of range, IllegalArgumentException expected");
+        } catch (IllegalArgumentException ex) {
+           ;
+        }   
+        
+        /** Moore and McCabe Example 8.12, p 552 */
+        double[] sample1 = {7d, -4d, 18d, 17d, -3d, -5d, 1d, 10d, 11d, -2d};
+        double[] sample2 = {-1d, 12d, -1d, -3d, 3d, -5d, 5d, 2d, -11d, -1d, -3d};
+        Univariate sampleStats1 = new UnivariateImpl();
+        for (int i = 0; i < sample1.length; i++) {
+            sampleStats1.addValue(sample1[i]);
+        }
+        Univariate sampleStats2 = new UnivariateImpl();
+        for (int i = 0; i < sample2.length; i++) {
+            sampleStats2.addValue(sample2[i]);
+        }
+        //FIXME: textbook example reported t stat uses pooled variance
+        // should replace with R-verified example
+        assertEquals("two sample t stat",1.634,
+            testStatistic.t(sample1, sample2), 0.1); 
+        assertEquals("two sample t stat",1.634,
+            testStatistic.t(sampleStats1, sampleStats2), 0.1); 
+        // This test is OK, since book reports non-pooled exact p-value
+        assertEquals("two sample p value",0.059, 
+            testStatistic.tTest(sample1, sample2)/2d, 10E-3);
+        assertEquals("two sample p value",0.059, 
+            testStatistic.tTest(sampleStats1, sampleStats2)/2d, 10E-3);
+        assertTrue("two sample t-test reject",
+            testStatistic.tTest(sample1, sample2, 0.2));
+        assertTrue("two sample t-test reject",
+            testStatistic.tTest(sampleStats1, sampleStats2, 0.2));
+        assertTrue("two sample t-test accept",
+            !testStatistic.tTest(sample1, sample2,0.1));  
+        assertTrue("two sample t-test accept",
+            !testStatistic.tTest(sampleStats1, sampleStats2,0.1));  
+        try {
+           testStatistic.tTest(sample1, sample2, 95);
+           fail("alpha out of range, IllegalArgumentException expected");
+        } catch (IllegalArgumentException ex) {
+           ;
+        }
+        try {
+           testStatistic.tTest(sampleStats1, sampleStats2, 95);
+           fail("alpha out of range, IllegalArgumentException expected");
+        } catch (IllegalArgumentException ex) {
+           ;
+        }
+        try {
+           testStatistic.tTest(sample1, tooShortObs, .01);
+           fail("insufficient data, IllegalArgumentException expected");
+        } catch (IllegalArgumentException ex) {
+           ;
+        }
+        try {
+           testStatistic.tTest(sampleStats1, tooShortStats, .01);
+           fail("insufficient data, IllegalArgumentException expected");
+        } catch (IllegalArgumentException ex) {
+           ;
+        }
+        try {
+           testStatistic.tTest(sample1, tooShortObs);
+           fail("insufficient data, IllegalArgumentException expected");
+        } catch (IllegalArgumentException ex) {
+           ;
+        }
+        try {
+           testStatistic.tTest(sampleStats1, tooShortStats);
+           fail("insufficient data, IllegalArgumentException expected");
+        } catch (IllegalArgumentException ex) {
+           ;
+        }
+        try {
+           testStatistic.t(sample1, tooShortObs);
+           fail("insufficient data, IllegalArgumentException expected");
+        } catch (IllegalArgumentException ex) {
+           ;
+        }
+        try {
+           testStatistic.t(sampleStats1, tooShortStats);
+           fail("insufficient data, IllegalArgumentException expected");
+        } catch (IllegalArgumentException ex) {
+           ;
+        }
+    }
+}
+
diff --git a/src/test/org/apache/commons/math/stat/UnivariateImplTest.java b/src/test/org/apache/commons/math/stat/UnivariateImplTest.java
new file mode 100644
index 0000000..305b7ac
--- /dev/null
+++ b/src/test/org/apache/commons/math/stat/UnivariateImplTest.java
@@ -0,0 +1,247 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.commons.math.stat;
+
+import junit.framework.Test;
+import junit.framework.TestCase;
+import junit.framework.TestSuite;
+
+/**
+ * Test cases for the {@link Univariate} class.
+ *
+ * @version $Revision: 1.11 $ $Date: 2003/11/14 22:22:18 $
+ */
+
+public final class UnivariateImplTest extends TestCase {
+    private double one = 1;
+    private float twoF = 2;
+    private long twoL = 2;
+    private int three = 3;
+    private double mean = 2;
+    private double sumSq = 18;
+    private double sum = 8;
+    private double var = 0.666666666666666666667;
+    private double std = Math.sqrt(var);
+    private double n = 4;
+    private double min = 1;
+    private double max = 3;
+    private double tolerance = 10E-15;
+    
+    public UnivariateImplTest(String name) {
+        super(name);
+    }
+    
+    public void setUp() {  
+    }
+    
+    public static Test suite() {
+        TestSuite suite = new TestSuite(UnivariateImplTest.class);
+        suite.setName("Frequency Tests");
+        return suite;
+    }
+    
+    /** test stats */
+    public void testStats() {
+        UnivariateImpl u = new UnivariateImpl(); 
+        assertEquals("total count",0,u.getN(),tolerance);
+        u.addValue(one);
+        u.addValue(twoF);
+        u.addValue(twoL);
+        u.addValue(three);
+        assertEquals("N",n,u.getN(),tolerance);
+        assertEquals("sum",sum,u.getSum(),tolerance);
+        assertEquals("sumsq",sumSq,u.getSumsq(),tolerance);
+        assertEquals("var",var,u.getVariance(),tolerance);
+        assertEquals("std",std,u.getStandardDeviation(),tolerance);
+        assertEquals("mean",mean,u.getMean(),tolerance);
+        assertEquals("min",min,u.getMin(),tolerance);
+        assertEquals("max",max,u.getMax(),tolerance);
+        u.clear();
+        assertEquals("total count",0,u.getN(),tolerance);    
+    }     
+    
+    public void testN0andN1Conditions() throws Exception {
+    	UnivariateImpl u = new UnivariateImpl();
+        assertTrue("Mean of n = 0 set should be NaN", 
+            Double.isNaN( u.getMean() ) );
+		assertTrue("Standard Deviation of n = 0 set should be NaN", 
+            Double.isNaN( u.getStandardDeviation() ) );
+		assertTrue("Variance of n = 0 set should be NaN", 
+            Double.isNaN(u.getVariance() ) );
+		assertTrue("skew of n = 0 set should be NaN",
+			Double.isNaN(u.getSkewness() ) );	
+		assertTrue("kurtosis of n = 0 set should be NaN", 
+			Double.isNaN(u.getKurtosis() ) );		
+		
+	
+		/* n=1 */
+		u.addValue(one);
+		assertTrue("mean should be one (n = 1)", 
+			u.getMean() == one);
+		assertTrue("geometric should be one (n = 1) instead it is " + u.getGeometricMean(), 
+			u.getGeometricMean() == one);
+		assertTrue("Std should be zero (n = 1)", 
+			u.getStandardDeviation() == 0.0);
+		assertTrue("variance should be zero (n = 1)", 
+			u.getVariance() == 0.0);
+		assertTrue("skew should be zero (n = 1)", 
+			u.getSkewness() == 0.0);
+		assertTrue("kurtosis should be zero (n = 1)", 
+			u.getKurtosis() == 0.0);		
+					
+		/* n=2 */				
+		u.addValue(twoF);
+		assertTrue("Std should not be zero (n = 2)", 
+			u.getStandardDeviation() != 0.0);
+		assertTrue("variance should not be zero (n = 2)", 
+			u.getVariance() != 0.0);
+		assertTrue("skew should not be zero (n = 2)", 
+			u.getSkewness() == 0.0);
+		assertTrue("kurtosis should be zero (n = 2)", 
+			u.getKurtosis() == 0.0);
+
+		/* n=3 */
+		u.addValue(twoL);
+		assertTrue("skew should not be zero (n = 3)", 
+			u.getSkewness() != 0.0);
+		assertTrue("kurtosis should be zero (n = 3)", 
+			u.getKurtosis() == 0.0);
+        
+		/* n=4 */
+		u.addValue(three);
+		assertTrue("kurtosis should not be zero (n = 4)", 
+			u.getKurtosis() != 0.0);        
+            
+    }
+
+    public void testProductAndGeometricMean() throws Exception {
+    	UnivariateImpl u = new UnivariateImpl(10);
+    	    	
+        u.addValue( 1.0 );
+        u.addValue( 2.0 );
+        u.addValue( 3.0 );
+        u.addValue( 4.0 );
+
+        assertEquals( "Geometric mean not expected", 2.213364, 
+            u.getGeometricMean(), 0.00001 );
+
+        // Now test rolling - UnivariateImpl should discount the contribution
+        // of a discarded element
+        for( int i = 0; i < 10; i++ ) {
+            u.addValue( i + 2 );
+        }
+        // Values should be (2,3,4,5,6,7,8,9,10,11)
+        
+        assertEquals( "Geometric mean not expected", 5.755931, 
+            u.getGeometricMean(), 0.00001 );
+    }
+    
+    public void testRollingMinMax() {
+        UnivariateImpl u = new UnivariateImpl(3);
+        u.addValue( 1.0 );
+        u.addValue( 5.0 );
+        u.addValue( 3.0 );
+        u.addValue( 4.0 ); // discarding min
+        assertEquals( "min not expected", 3.0, 
+            u.getMin(), Double.MIN_VALUE);
+        u.addValue(1.0);  // discarding max
+        assertEquals( "max not expected", 4.0, 
+            u.getMax(), Double.MIN_VALUE);
+    }
+    
+    public void testNaNContracts() {
+        UnivariateImpl u = new UnivariateImpl();
+        double nan = Double.NaN;
+        assertTrue("mean not NaN",Double.isNaN(u.getMean())); 
+        assertTrue("min not NaN",Double.isNaN(u.getMin())); 
+        assertTrue("std dev not NaN",Double.isNaN(u.getStandardDeviation())); 
+        assertTrue("var not NaN",Double.isNaN(u.getVariance())); 
+        assertTrue("geom mean not NaN",Double.isNaN(u.getGeometricMean()));
+        
+        u.addValue(1.0);
+        
+        assertEquals( "mean not expected", 1.0, 
+            u.getMean(), Double.MIN_VALUE);
+        assertEquals( "variance not expected", 0.0, 
+            u.getVariance(), Double.MIN_VALUE);
+        assertEquals( "geometric mean not expected", 1.0, 
+            u.getGeometricMean(), Double.MIN_VALUE);
+        
+        u.addValue(-1.0);
+        
+        assertTrue("geom mean not NaN",Double.isNaN(u.getGeometricMean()));
+        
+        u.addValue(0.0);
+        
+        assertTrue("geom mean not NaN",Double.isNaN(u.getGeometricMean()));
+        
+        //FiXME: test all other NaN contract specs
+    }
+
+    public void testSkewAndKurtosis() {
+        Univariate u = new UnivariateImpl();
+        
+        double[] testArray = 
+        { 12.5, 12, 11.8, 14.2, 14.9, 14.5, 21, 8.2, 10.3, 11.3, 14.1,
+          9.9, 12.2, 12, 12.1, 11, 19.8, 11, 10, 8.8, 9, 12.3 };
+        for( int i = 0; i < testArray.length; i++) {
+            u.addValue( testArray[i]);
+        }
+        
+        assertEquals("mean", 12.40455, u.getMean(), 0.0001);
+        assertEquals("variance", 10.00236, u.getVariance(), 0.0001);
+        assertEquals("skewness", 1.437424, u.getSkewness(), 0.0001);
+        assertEquals("kurtosis", 2.37719, u.getKurtosis(), 0.0001);
+    }
+}
diff --git a/src/test/org/apache/commons/math/stat/data/Lew.dat b/src/test/org/apache/commons/math/stat/data/Lew.dat
new file mode 100644
index 0000000..90ae820
--- /dev/null
+++ b/src/test/org/apache/commons/math/stat/data/Lew.dat
@@ -0,0 +1,260 @@
+File Name:     Lew.dat
+
+File Format:   ASCII
+               Header          : lines  1 to  60     (=  60)
+               Certified Values: lines 41 to  43     (=   3)
+               Data            : lines 61 to 260     (= 200)
+
+Dataset Name:  Lew (Beam Deflection Data)
+
+Description:   This is an observed/"real world" data set
+               consisting of 200 deflections of a steel-concrete
+               beam while subjected to periodic pressure.
+               The experimenter was H. S. Lew of the
+               Center for Building Technology at NIST.
+               We here use this data to test accuracy
+               in summary statistics calculations.
+
+Stat Category: Univariate: Summary Statistics
+
+Reference:     None
+
+Data:          "Real World"
+               1    Response          : y = beam deflection
+               0    Predictors
+               200  Observations
+
+Model:         Lower Level of Difficulty
+               2    Parameters        : mu, sigma
+               1    Response Variable : y
+               0    Predictor Variables
+
+               y    = mu + e
+
+
+
+
+
+
+
+                                                  Certified Values
+Sample Mean                                ybar:  -177.435000000000
+Sample Standard Deviation (denom. = n-1)      s:   277.332168044316
+Sample Autocorrelation Coefficient (lag 1) r(1):  -0.307304800605679
+
+Number of Observations:                             200
+
+
+
+
+
+
+
+
+
+
+
+
+
+Data: Y
+----------
+    -213
+    -564
+     -35
+     -15
+     141
+     115
+    -420
+    -360
+     203
+    -338
+    -431
+     194
+    -220
+    -513
+     154
+    -125
+    -559
+      92
+     -21
+    -579
+     -52
+      99
+    -543
+    -175
+     162
+    -457
+    -346
+     204
+    -300
+    -474
+     164
+    -107
+    -572
+      -8
+      83
+    -541
+    -224
+     180
+    -420
+    -374
+     201
+    -236
+    -531
+      83
+      27
+    -564
+    -112
+     131
+    -507
+    -254
+     199
+    -311
+    -495
+     143
+     -46
+    -579
+     -90
+     136
+    -472
+    -338
+     202
+    -287
+    -477
+     169
+    -124
+    -568
+      17
+      48
+    -568
+    -135
+     162
+    -430
+    -422
+     172
+     -74
+    -577
+     -13
+      92
+    -534
+    -243
+     194
+    -355
+    -465
+     156
+     -81
+    -578
+     -64
+     139
+    -449
+    -384
+     193
+    -198
+    -538
+     110
+     -44
+    -577
+      -6
+      66
+    -552
+    -164
+     161
+    -460
+    -344
+     205
+    -281
+    -504
+     134
+     -28
+    -576
+    -118
+     156
+    -437
+    -381
+     200
+    -220
+    -540
+      83
+      11
+    -568
+    -160
+     172
+    -414
+    -408
+     188
+    -125
+    -572
+     -32
+     139
+    -492
+    -321
+     205
+    -262
+    -504
+     142
+     -83
+    -574
+       0
+      48
+    -571
+    -106
+     137
+    -501
+    -266
+     190
+    -391
+    -406
+     194
+    -186
+    -553
+      83
+     -13
+    -577
+     -49
+     103
+    -515
+    -280
+     201
+     300
+    -506
+     131
+     -45
+    -578
+     -80
+     138
+    -462
+    -361
+     201
+    -211
+    -554
+      32
+      74
+    -533
+    -235
+     187
+    -372
+    -442
+     182
+    -147
+    -566
+      25
+      68
+    -535
+    -244
+     194
+    -351
+    -463
+     174
+    -125
+    -570
+      15
+      72
+    -550
+    -190
+     172
+    -424
+    -385
+     198
+    -218
+    -536
+      96
diff --git a/src/test/org/apache/commons/math/stat/data/Lew.txt b/src/test/org/apache/commons/math/stat/data/Lew.txt
new file mode 100644
index 0000000..6840f86
--- /dev/null
+++ b/src/test/org/apache/commons/math/stat/data/Lew.txt
@@ -0,0 +1,260 @@
+File Name:     Lew.dat
+
+File Format:   ASCII
+               Header          : lines  1 to  60     (=  60)
+               Certified Values: lines 41 to  43     (=   3)
+               Data            : lines 61 to 260     (= 200)
+
+Dataset Name:  Lew (Beam Deflection Data)
+
+Description:   This is an observed/"real world" data set
+               consisting of 200 deflections of a steel-concrete
+               beam while subjected to periodic pressure.
+               The experimenter was H. S. Lew of the
+               Center for Building Technology at NIST.
+               We here use this data to test accuracy
+               in summary statistics calculations.
+
+Stat Category: Univariate: Summary Statistics
+
+Reference:     None
+
+Data:          "Real World"
+               1    Response          : y = beam deflection
+               0    Predictors
+               200  Observations
+
+Model:         Lower Level of Difficulty
+               2    Parameters        : mu, sigma
+               1    Response Variable : y
+               0    Predictor Variables
+
+               y    = mu + e
+
+
+
+
+
+
+
+                                                  Certified Values
+Sample Mean                                ybar:  -177.435000000000
+Sample Standard Deviation (denom. = n-1)      s:   277.332168044316
+Sample Autocorrelation Coefficient (lag 1) r(1):  -0.307304800605679
+
+Number of Observations:                             200
+
+
+
+
+
+
+
+
+
+
+
+
+
+Data: Y
+----------
+    -213
+    -564
+     -35
+     -15
+     141
+     115
+    -420
+    -360
+     203
+    -338
+    -431
+     194
+    -220
+    -513
+     154
+    -125
+    -559
+      92
+     -21
+    -579
+     -52
+      99
+    -543
+    -175
+     162
+    -457
+    -346
+     204
+    -300
+    -474
+     164
+    -107
+    -572
+      -8
+      83
+    -541
+    -224
+     180
+    -420
+    -374
+     201
+    -236
+    -531
+      83
+      27
+    -564
+    -112
+     131
+    -507
+    -254
+     199
+    -311
+    -495
+     143
+     -46
+    -579
+     -90
+     136
+    -472
+    -338
+     202
+    -287
+    -477
+     169
+    -124
+    -568
+      17
+      48
+    -568
+    -135
+     162
+    -430
+    -422
+     172
+     -74
+    -577
+     -13
+      92
+    -534
+    -243
+     194
+    -355
+    -465
+     156
+     -81
+    -578
+     -64
+     139
+    -449
+    -384
+     193
+    -198
+    -538
+     110
+     -44
+    -577
+      -6
+      66
+    -552
+    -164
+     161
+    -460
+    -344
+     205
+    -281
+    -504
+     134
+     -28
+    -576
+    -118
+     156
+    -437
+    -381
+     200
+    -220
+    -540
+      83
+      11
+    -568
+    -160
+     172
+    -414
+    -408
+     188
+    -125
+    -572
+     -32
+     139
+    -492
+    -321
+     205
+    -262
+    -504
+     142
+     -83
+    -574
+       0
+      48
+    -571
+    -106
+     137
+    -501
+    -266
+     190
+    -391
+    -406
+     194
+    -186
+    -553
+      83
+     -13
+    -577
+     -49
+     103
+    -515
+    -280
+     201
+     300
+    -506
+     131
+     -45
+    -578
+     -80
+     138
+    -462
+    -361
+     201
+    -211
+    -554
+      32
+      74
+    -533
+    -235
+     187
+    -372
+    -442
+     182
+    -147
+    -566
+      25
+      68
+    -535
+    -244
+     194
+    -351
+    -463
+     174
+    -125
+    -570
+      15
+      72
+    -550
+    -190
+     172
+    -424
+    -385
+     198
+    -218
+    -536
+      96
diff --git a/src/test/org/apache/commons/math/stat/data/Lottery.dat b/src/test/org/apache/commons/math/stat/data/Lottery.dat
new file mode 100644
index 0000000..53ffefd
--- /dev/null
+++ b/src/test/org/apache/commons/math/stat/data/Lottery.dat
@@ -0,0 +1,278 @@
+File Name:     Lottery.dat
+
+File Format:   ASCII
+               Header          : lines  1 to  60     (=  60)
+               Certified Values: lines 41 to  43     (=   3)
+               Data            : lines 61 to 278     (= 218)
+
+Dataset Name:  Lottery
+
+Description:   This is an observed/"real world" data set
+               consisting of 218 lottery values
+               from September 3, 1989 to April 14, 1990 (32 weeks).
+               One 3-digit random number (from 000 to 999)
+               is drawn per day, 7 days per week for most
+               weeks, but fewer days per week for some weeks.
+               We here use this data to test accuracy
+               in summary statistics calculations.
+
+Stat Category: Univariate: Summary Statistics
+
+Reference:     None
+
+Data:          "Real World"
+               1    Response          : y = 3-digit random number
+               0    Predictors
+               218  Observations
+
+Model:         Lower Level of Difficulty
+               2    Parameters        : mu, sigma
+               1    Response Variable : y
+               0    Predictor Variables
+
+               y    = mu + e
+
+
+
+
+
+
+                                                  Certified Values
+Sample Mean                                ybar:  518.958715596330
+Sample Standard Deviation (denom. = n-1)      s:  291.699727470969
+Sample Autocorrelation Coefficient (lag 1) r(1):  -0.120948622967393
+
+Number of Observations:                             218
+
+
+
+
+
+
+
+
+
+
+
+
+
+Data: Y
+----------
+     162
+     671
+     933
+     414
+     788
+     730
+     817
+      33
+     536
+     875
+     670
+     236
+     473
+     167
+     877
+     980
+     316
+     950
+     456
+      92
+     517
+     557
+     956
+     954
+     104
+     178
+     794
+     278
+     147
+     773
+     437
+     435
+     502
+     610
+     582
+     780
+     689
+     562
+     964
+     791
+      28
+      97
+     848
+     281
+     858
+     538
+     660
+     972
+     671
+     613
+     867
+     448
+     738
+     966
+     139
+     636
+     847
+     659
+     754
+     243
+     122
+     455
+     195
+     968
+     793
+      59
+     730
+     361
+     574
+     522
+      97
+     762
+     431
+     158
+     429
+     414
+      22
+     629
+     788
+     999
+     187
+     215
+     810
+     782
+      47
+      34
+     108
+     986
+      25
+     644
+     829
+     630
+     315
+     567
+     919
+     331
+     207
+     412
+     242
+     607
+     668
+     944
+     749
+     168
+     864
+     442
+     533
+     805
+     372
+      63
+     458
+     777
+     416
+     340
+     436
+     140
+     919
+     350
+     510
+     572
+     905
+     900
+      85
+     389
+     473
+     758
+     444
+     169
+     625
+     692
+     140
+     897
+     672
+     288
+     312
+     860
+     724
+     226
+     884
+     508
+     976
+     741
+     476
+     417
+     831
+      15
+     318
+     432
+     241
+     114
+     799
+     955
+     833
+     358
+     935
+     146
+     630
+     830
+     440
+     642
+     356
+     373
+     271
+     715
+     367
+     393
+     190
+     669
+       8
+     861
+     108
+     795
+     269
+     590
+     326
+     866
+      64
+     523
+     862
+     840
+     219
+     382
+     998
+       4
+     628
+     305
+     747
+     247
+      34
+     747
+     729
+     645
+     856
+     974
+      24
+     568
+      24
+     694
+     608
+     480
+     410
+     729
+     947
+     293
+      53
+     930
+     223
+     203
+     677
+     227
+      62
+     455
+     387
+     318
+     562
+     242
+     428
+     968
diff --git a/src/test/org/apache/commons/math/stat/data/Lottery.txt b/src/test/org/apache/commons/math/stat/data/Lottery.txt
new file mode 100644
index 0000000..ffa1c9b
--- /dev/null
+++ b/src/test/org/apache/commons/math/stat/data/Lottery.txt
@@ -0,0 +1,278 @@
+File Name:     Lottery.dat
+
+File Format:   ASCII
+               Header          : lines  1 to  60     (=  60)
+               Certified Values: lines 41 to  43     (=   3)
+               Data            : lines 61 to 278     (= 218)
+
+Dataset Name:  Lottery
+
+Description:   This is an observed/"real world" data set
+               consisting of 218 lottery values
+               from September 3, 1989 to April 14, 1990 (32 weeks).
+               One 3-digit random number (from 000 to 999)
+               is drawn per day, 7 days per week for most
+               weeks, but fewer days per week for some weeks.
+               We here use this data to test accuracy
+               in summary statistics calculations.
+
+Stat Category: Univariate: Summary Statistics
+
+Reference:     None
+
+Data:          "Real World"
+               1    Response          : y = 3-digit random number
+               0    Predictors
+               218  Observations
+
+Model:         Lower Level of Difficulty
+               2    Parameters        : mu, sigma
+               1    Response Variable : y
+               0    Predictor Variables
+
+               y    = mu + e
+
+
+
+
+
+
+                                                  Certified Values
+Sample Mean                                ybar:  518.958715596330
+Sample Standard Deviation (denom. = n-1)      s:  291.699727470969
+Sample Autocorrelation Coefficient (lag 1) r(1):  -0.120948622967393
+
+Number of Observations:                             218
+
+
+
+
+
+
+
+
+
+
+
+
+
+Data: Y
+----------
+     162
+     671
+     933
+     414
+     788
+     730
+     817
+      33
+     536
+     875
+     670
+     236
+     473
+     167
+     877
+     980
+     316
+     950
+     456
+      92
+     517
+     557
+     956
+     954
+     104
+     178
+     794
+     278
+     147
+     773
+     437
+     435
+     502
+     610
+     582
+     780
+     689
+     562
+     964
+     791
+      28
+      97
+     848
+     281
+     858
+     538
+     660
+     972
+     671
+     613
+     867
+     448
+     738
+     966
+     139
+     636
+     847
+     659
+     754
+     243
+     122
+     455
+     195
+     968
+     793
+      59
+     730
+     361
+     574
+     522
+      97
+     762
+     431
+     158
+     429
+     414
+      22
+     629
+     788
+     999
+     187
+     215
+     810
+     782
+      47
+      34
+     108
+     986
+      25
+     644
+     829
+     630
+     315
+     567
+     919
+     331
+     207
+     412
+     242
+     607
+     668
+     944
+     749
+     168
+     864
+     442
+     533
+     805
+     372
+      63
+     458
+     777
+     416
+     340
+     436
+     140
+     919
+     350
+     510
+     572
+     905
+     900
+      85
+     389
+     473
+     758
+     444
+     169
+     625
+     692
+     140
+     897
+     672
+     288
+     312
+     860
+     724
+     226
+     884
+     508
+     976
+     741
+     476
+     417
+     831
+      15
+     318
+     432
+     241
+     114
+     799
+     955
+     833
+     358
+     935
+     146
+     630
+     830
+     440
+     642
+     356
+     373
+     271
+     715
+     367
+     393
+     190
+     669
+       8
+     861
+     108
+     795
+     269
+     590
+     326
+     866
+      64
+     523
+     862
+     840
+     219
+     382
+     998
+       4
+     628
+     305
+     747
+     247
+      34
+     747
+     729
+     645
+     856
+     974
+      24
+     568
+      24
+     694
+     608
+     480
+     410
+     729
+     947
+     293
+      53
+     930
+     223
+     203
+     677
+     227
+      62
+     455
+     387
+     318
+     562
+     242
+     428
+     968
diff --git a/src/test/org/apache/commons/math/stat/data/Mavro.dat b/src/test/org/apache/commons/math/stat/data/Mavro.dat
new file mode 100644
index 0000000..3f15e43
--- /dev/null
+++ b/src/test/org/apache/commons/math/stat/data/Mavro.dat
@@ -0,0 +1,110 @@
+File Name:     Mavro.dat
+
+File Format:   ASCII
+               Header          : lines  1 to  60     (= 60)
+               Certified Values: lines 41 to  43     (=  3)
+               Data            : lines 61 to 110     (= 50)
+
+Dataset Name:  Mavro (Filter Transmittance Data)
+
+Description:   This is an observed/"real world" data set
+               consisting of 50 transmittance measurements
+               (at a sampling rate of 10 observations per second)
+               from a filter with a nominal value of 2.
+               The experimenter was Radu Mavrodineaunu,
+               a member of the chemistry staff at NIST.
+               We here use this data to test accuracy
+               in summary statistics calculations.
+
+Stat Category: Univariate: Summary Statistics
+
+Reference:     None
+
+Data:          "Real World"
+               1    Response          : y = transmittance
+               0    Predictors
+               50   Observations
+
+Model:         Lower Level of Difficulty
+               2    Parameters        : mu, sigma
+               1    Response Variable : y
+               0    Predictor Variables
+
+               y    = mu + e
+
+
+
+
+
+
+                                                  Certified Values
+Sample Mean                                ybar:  2.00185600000000
+Sample Standard Deviation (denom. = n-1)      s:  0.000429123454003053
+Sample Autocorrelation Coefficient (lag 1) r(1):  0.937989183438248
+
+Number of Observations:                              50
+
+
+
+
+
+
+
+
+
+
+
+
+
+Data: Y
+-------------
+   2.00180
+   2.00170
+   2.00180
+   2.00190
+   2.00180
+   2.00170
+   2.00150
+   2.00140
+   2.00150
+   2.00150
+   2.00170
+   2.00180
+   2.00180
+   2.00190
+   2.00190
+   2.00210
+   2.00200
+   2.00160
+   2.00140
+   2.00130
+   2.00130
+   2.00150
+   2.00150
+   2.00160
+   2.00150
+   2.00140
+   2.00130
+   2.00140
+   2.00150
+   2.00140
+   2.00150
+   2.00160
+   2.00150
+   2.00160
+   2.00190
+   2.00200
+   2.00200
+   2.00210
+   2.00220
+   2.00230
+   2.00240
+   2.00250
+   2.00270
+   2.00260
+   2.00260
+   2.00260
+   2.00270
+   2.00260
+   2.00250
+   2.00240
diff --git a/src/test/org/apache/commons/math/stat/data/Mavro.txt b/src/test/org/apache/commons/math/stat/data/Mavro.txt
new file mode 100644
index 0000000..a3f7c7a
--- /dev/null
+++ b/src/test/org/apache/commons/math/stat/data/Mavro.txt
@@ -0,0 +1,110 @@
+File Name:     Mavro.dat
+
+File Format:   ASCII
+               Header          : lines  1 to  60     (= 60)
+               Certified Values: lines 41 to  43     (=  3)
+               Data            : lines 61 to 110     (= 50)
+
+Dataset Name:  Mavro (Filter Transmittance Data)
+
+Description:   This is an observed/"real world" data set
+               consisting of 50 transmittance measurements
+               (at a sampling rate of 10 observations per second)
+               from a filter with a nominal value of 2.
+               The experimenter was Radu Mavrodineaunu,
+               a member of the chemistry staff at NIST.
+               We here use this data to test accuracy
+               in summary statistics calculations.
+
+Stat Category: Univariate: Summary Statistics
+
+Reference:     None
+
+Data:          "Real World"
+               1    Response          : y = transmittance
+               0    Predictors
+               50   Observations
+
+Model:         Lower Level of Difficulty
+               2    Parameters        : mu, sigma
+               1    Response Variable : y
+               0    Predictor Variables
+
+               y    = mu + e
+
+
+
+
+
+
+                                                  Certified Values
+Sample Mean                                ybar:  2.00185600000000
+Sample Standard Deviation (denom. = n-1)      s:  0.000429123454003053
+Sample Autocorrelation Coefficient (lag 1) r(1):  0.937989183438248
+
+Number of Observations:                              50
+
+
+
+
+
+
+
+
+
+
+
+
+
+Data: Y
+-------------
+   2.00180
+   2.00170
+   2.00180
+   2.00190
+   2.00180
+   2.00170
+   2.00150
+   2.00140
+   2.00150
+   2.00150
+   2.00170
+   2.00180
+   2.00180
+   2.00190
+   2.00190
+   2.00210
+   2.00200
+   2.00160
+   2.00140
+   2.00130
+   2.00130
+   2.00150
+   2.00150
+   2.00160
+   2.00150
+   2.00140
+   2.00130
+   2.00140
+   2.00150
+   2.00140
+   2.00150
+   2.00160
+   2.00150
+   2.00160
+   2.00190
+   2.00200
+   2.00200
+   2.00210
+   2.00220
+   2.00230
+   2.00240
+   2.00250
+   2.00270
+   2.00260
+   2.00260
+   2.00260
+   2.00270
+   2.00260
+   2.00250
+   2.00240
diff --git a/src/test/org/apache/commons/math/stat/data/Michelso.dat b/src/test/org/apache/commons/math/stat/data/Michelso.dat
new file mode 100644
index 0000000..f1c2dc8
--- /dev/null
+++ b/src/test/org/apache/commons/math/stat/data/Michelso.dat
@@ -0,0 +1,160 @@
+File Name:     Michelso.dat
+
+File Format:   ASCII
+               Header          : lines  1 to  60     (=  60)
+               Certified Values: lines 41 to  43     (=   3)
+               Data            : lines 61 to 160     (= 100)
+
+Dataset Name:  Michelso (Speed of Light Data, in millions of meters per second)
+
+Description:   This is an observed/"real world" data set
+               consisting of 100 measurements of the
+               speed of light in air.  This classic experiment
+               was carried out by Michelson is 1879.
+               We here use this data to test accuracy
+               in summary statistics calculations.
+
+Stat Category: Univariate: Summary Statistics
+
+Reference:     Dorsey, Ernest N. (1944). The Velocity of Light.
+               Transactions of the American Philiosophical
+               Society, Volume 34, Part 1, Pages 1-110, Table 22.
+
+               y    = mu + e
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+                                                  Certified Values
+Sample Mean                                ybar:  299.852400000000
+Sample Standard Deviation (denom. = n-1)      s:  0.0790105478190518
+Sample Autocorrelation Coefficient (lag 1) r(1):  0.535199668621283
+
+Number of Observations:                             100
+
+
+
+
+
+
+
+
+
+
+
+
+
+Data: Y
+----------
+  299.85
+  299.74
+  299.90
+  300.07
+  299.93
+  299.85
+  299.95
+  299.98
+  299.98
+  299.88
+  300.00
+  299.98
+  299.93
+  299.65
+  299.76
+  299.81
+  300.00
+  300.00
+  299.96
+  299.96
+  299.96
+  299.94
+  299.96
+  299.94
+  299.88
+  299.80
+  299.85
+  299.88
+  299.90
+  299.84
+  299.83
+  299.79
+  299.81
+  299.88
+  299.88
+  299.83
+  299.80
+  299.79
+  299.76
+  299.80
+  299.88
+  299.88
+  299.88
+  299.86
+  299.72
+  299.72
+  299.62
+  299.86
+  299.97
+  299.95
+  299.88
+  299.91
+  299.85
+  299.87
+  299.84
+  299.84
+  299.85
+  299.84
+  299.84
+  299.84
+  299.89
+  299.81
+  299.81
+  299.82
+  299.80
+  299.77
+  299.76
+  299.74
+  299.75
+  299.76
+  299.91
+  299.92
+  299.89
+  299.86
+  299.88
+  299.72
+  299.84
+  299.85
+  299.85
+  299.78
+  299.89
+  299.84
+  299.78
+  299.81
+  299.76
+  299.81
+  299.79
+  299.81
+  299.82
+  299.85
+  299.87
+  299.87
+  299.81
+  299.74
+  299.81
+  299.94
+  299.95
+  299.80
+  299.81
+  299.87
diff --git a/src/test/org/apache/commons/math/stat/data/Michelso.txt b/src/test/org/apache/commons/math/stat/data/Michelso.txt
new file mode 100644
index 0000000..91322cd
--- /dev/null
+++ b/src/test/org/apache/commons/math/stat/data/Michelso.txt
@@ -0,0 +1,160 @@
+File Name:     Michelso.dat
+
+File Format:   ASCII
+               Header          : lines  1 to  60     (=  60)
+               Certified Values: lines 41 to  43     (=   3)
+               Data            : lines 61 to 160     (= 100)
+
+Dataset Name:  Michelso (Speed of Light Data, in millions of meters per second)
+
+Description:   This is an observed/"real world" data set
+               consisting of 100 measurements of the
+               speed of light in air.  This classic experiment
+               was carried out by Michelson is 1879.
+               We here use this data to test accuracy
+               in summary statistics calculations.
+
+Stat Category: Univariate: Summary Statistics
+
+Reference:     Dorsey, Ernest N. (1944). The Velocity of Light.
+               Transactions of the American Philiosophical
+               Society, Volume 34, Part 1, Pages 1-110, Table 22.
+
+               y    = mu + e
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+                                                  Certified Values
+Sample Mean                                ybar:  299.852400000000
+Sample Standard Deviation (denom. = n-1)      s:  0.0790105478190518
+Sample Autocorrelation Coefficient (lag 1) r(1):  0.535199668621283
+
+Number of Observations:                             100
+
+
+
+
+
+
+
+
+
+
+
+
+
+Data: Y
+----------
+  299.85
+  299.74
+  299.90
+  300.07
+  299.93
+  299.85
+  299.95
+  299.98
+  299.98
+  299.88
+  300.00
+  299.98
+  299.93
+  299.65
+  299.76
+  299.81
+  300.00
+  300.00
+  299.96
+  299.96
+  299.96
+  299.94
+  299.96
+  299.94
+  299.88
+  299.80
+  299.85
+  299.88
+  299.90
+  299.84
+  299.83
+  299.79
+  299.81
+  299.88
+  299.88
+  299.83
+  299.80
+  299.79
+  299.76
+  299.80
+  299.88
+  299.88
+  299.88
+  299.86
+  299.72
+  299.72
+  299.62
+  299.86
+  299.97
+  299.95
+  299.88
+  299.91
+  299.85
+  299.87
+  299.84
+  299.84
+  299.85
+  299.84
+  299.84
+  299.84
+  299.89
+  299.81
+  299.81
+  299.82
+  299.80
+  299.77
+  299.76
+  299.74
+  299.75
+  299.76
+  299.91
+  299.92
+  299.89
+  299.86
+  299.88
+  299.72
+  299.84
+  299.85
+  299.85
+  299.78
+  299.89
+  299.84
+  299.78
+  299.81
+  299.76
+  299.81
+  299.79
+  299.81
+  299.82
+  299.85
+  299.87
+  299.87
+  299.81
+  299.74
+  299.81
+  299.94
+  299.95
+  299.80
+  299.81
+  299.87
diff --git a/src/test/org/apache/commons/math/stat/data/NumAcc1.dat b/src/test/org/apache/commons/math/stat/data/NumAcc1.dat
new file mode 100644
index 0000000..65829df
--- /dev/null
+++ b/src/test/org/apache/commons/math/stat/data/NumAcc1.dat
@@ -0,0 +1,63 @@
+File Name:     NumAcc1.dat
+
+File Format:   ASCII
+               Header          : lines  1 to 60       (= 60)
+               Certified Values: lines 41 to 43       (=  3)
+               Data            : lines 61 to 63       (=  3)
+
+Dataset Name:  NumAcc1
+
+Description:   This is a constructed/fabricated data set
+               to test accuracy in summary statistic calculations.
+               The numbers are large (8-digit integers) and
+               differ only in the last decimal place.
+               Note--by construction, this data set has
+                     sample mean                  = 10000002 (exact)
+                     sample standard deviation    =        1 (exact)
+                     sample autocorrelation coef. =     -0.5 (exact)
+
+Stat Category: Univariate: Summary Statistics
+
+Reference:     Simon, Stephen D. and Lesage, James P. (1989).
+               Assessing the Accuracy of ANOVA Caluclations
+               in Statistical Software", Computational
+               Statistics & data Analysis, 8, pp. 325-332.
+
+Data:          Constructed
+               1    Response           : y
+               0    Predictors
+               3    Observations
+
+Model:         Lower Level of Difficulty
+               2    Parameters         : mu, sigma
+               1    Response Variable  : y
+               0    Predictor Variables
+
+               y    = mu + e
+
+
+
+                                                  Certified Values
+Sample Mean                                ybar:  10000002 
+Sample Standard Deviation (denom. = n-1)      s:         1 
+Sample Autocorrelation Coefficient (lag 1) r(1):      -0.5 
+
+Number of Observations:                                       3
+
+
+
+
+
+
+
+
+
+
+
+
+
+Data: Y
+---------
+10000001
+10000003
+10000002
diff --git a/src/test/org/apache/commons/math/stat/data/NumAcc1.txt b/src/test/org/apache/commons/math/stat/data/NumAcc1.txt
new file mode 100644
index 0000000..b7a368e
--- /dev/null
+++ b/src/test/org/apache/commons/math/stat/data/NumAcc1.txt
@@ -0,0 +1,63 @@
+File Name:     NumAcc1.dat
+
+File Format:   ASCII
+               Header          : lines  1 to 60       (= 60)
+               Certified Values: lines 41 to 43       (=  3)
+               Data            : lines 61 to 63       (=  3)
+
+Dataset Name:  NumAcc1
+
+Description:   This is a constructed/fabricated data set
+               to test accuracy in summary statistic calculations.
+               The numbers are large (8-digit integers) and
+               differ only in the last decimal place.
+               Note--by construction, this data set has
+                     sample mean                  = 10000002 (exact)
+                     sample standard deviation    =        1 (exact)
+                     sample autocorrelation coef. =     -0.5 (exact)
+
+Stat Category: Univariate: Summary Statistics
+
+Reference:     Simon, Stephen D. and Lesage, James P. (1989).
+               Assessing the Accuracy of ANOVA Caluclations
+               in Statistical Software", Computational
+               Statistics & data Analysis, 8, pp. 325-332.
+
+Data:          Constructed
+               1    Response           : y
+               0    Predictors
+               3    Observations
+
+Model:         Lower Level of Difficulty
+               2    Parameters         : mu, sigma
+               1    Response Variable  : y
+               0    Predictor Variables
+
+               y    = mu + e
+
+
+
+                                                  Certified Values
+Sample Mean                                ybar:  10000002 
+Sample Standard Deviation (denom. = n-1)      s:         1 
+Sample Autocorrelation Coefficient (lag 1) r(1):      -0.5 
+
+Number of Observations:                                       3
+
+
+
+
+
+
+
+
+
+
+
+
+
+Data: Y
+---------
+10000001
+10000003
+10000002
diff --git a/src/test/org/apache/commons/math/stat/data/NumAcc2.dat b/src/test/org/apache/commons/math/stat/data/NumAcc2.dat
new file mode 100644
index 0000000..3420504
--- /dev/null
+++ b/src/test/org/apache/commons/math/stat/data/NumAcc2.dat
@@ -0,0 +1,1061 @@
+File Name:     NumAcc2.dat
+
+File Format:   ASCII
+               Header          : lines  1 to   60     (=   60)
+               Certified Values: lines 41 to   43     (=    3)
+               Data            : lines 61 to 1061     (= 1001)
+
+Dataset Name:  NumAcc2
+
+Description:   This is a constructed/fabricated data set
+               to test accuracy in summary statistic calculations.
+               The numbers are 2-digit floating point values and
+               differ only in the last decimal place.
+               Note--by construction, this data set has
+                     sample mean                  =  1.2   (exact)
+                     sample standard deviation    =  0.1   (exact)
+                     sample autocorrelation coef. = -0.999 (exact)
+
+Stat Category: Univariate
+
+Reference:     Simon, Stephen D. and Lesage, James P. (1989).
+               Assessing the Accuracy of ANOVA Caluclations
+               in Statistical Software", Computational
+               Statistics & data Analysis, 8, pp. 325-332.
+
+
+Data:          Constructed
+               1    Response           : y
+               0    Predictors
+               1001 Observations
+
+Model:         Average Level of Difficulty
+               2    Parameters         : mu, sigma
+               1    Response Variable  : y
+               0    Predictor Variables
+
+               y    = mu + e
+
+
+                                                  Certified Values
+Sample Mean                                ybar:  1.2   
+Sample Standard Deviation (denom. = n-1)      s:  0.1    
+Sample Autocorrelation Coefficient (lag 1) r(1):  -0.999 
+
+Number of Observations:                             1001
+
+
+
+
+
+
+
+
+
+
+
+
+
+Data: Y
+---------
+     1.2
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
diff --git a/src/test/org/apache/commons/math/stat/data/NumAcc2.txt b/src/test/org/apache/commons/math/stat/data/NumAcc2.txt
new file mode 100644
index 0000000..0efde02
--- /dev/null
+++ b/src/test/org/apache/commons/math/stat/data/NumAcc2.txt
@@ -0,0 +1,1061 @@
+File Name:     NumAcc2.dat
+
+File Format:   ASCII
+               Header          : lines  1 to   60     (=   60)
+               Certified Values: lines 41 to   43     (=    3)
+               Data            : lines 61 to 1061     (= 1001)
+
+Dataset Name:  NumAcc2
+
+Description:   This is a constructed/fabricated data set
+               to test accuracy in summary statistic calculations.
+               The numbers are 2-digit floating point values and
+               differ only in the last decimal place.
+               Note--by construction, this data set has
+                     sample mean                  =  1.2   (exact)
+                     sample standard deviation    =  0.1   (exact)
+                     sample autocorrelation coef. = -0.999 (exact)
+
+Stat Category: Univariate
+
+Reference:     Simon, Stephen D. and Lesage, James P. (1989).
+               Assessing the Accuracy of ANOVA Caluclations
+               in Statistical Software", Computational
+               Statistics & data Analysis, 8, pp. 325-332.
+
+
+Data:          Constructed
+               1    Response           : y
+               0    Predictors
+               1001 Observations
+
+Model:         Average Level of Difficulty
+               2    Parameters         : mu, sigma
+               1    Response Variable  : y
+               0    Predictor Variables
+
+               y    = mu + e
+
+
+                                                  Certified Values
+Sample Mean                                ybar:  1.2   
+Sample Standard Deviation (denom. = n-1)      s:  0.1    
+Sample Autocorrelation Coefficient (lag 1) r(1):  -0.999 
+
+Number of Observations:                             1001
+
+
+
+
+
+
+
+
+
+
+
+
+
+Data: Y
+---------
+     1.2
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
+     1.1
+     1.3
diff --git a/src/test/org/apache/commons/math/stat/data/NumAcc3.dat b/src/test/org/apache/commons/math/stat/data/NumAcc3.dat
new file mode 100644
index 0000000..63382ca
--- /dev/null
+++ b/src/test/org/apache/commons/math/stat/data/NumAcc3.dat
@@ -0,0 +1,1061 @@
+File Name:     NumAcc3.dat
+
+File Format:   ASCII
+               Header          : lines  1 to   60     (=   60)
+               Certified Values: lines 41 to   43     (=    3)
+               Data            : lines 61 to 1061     (= 1001)
+
+Dataset Name:  NumAcc3
+
+Description:   This is a constructed/fabricated data set
+               to test accuracy in summary statistic calculations.
+               The numbers are 8-digit floating point values and
+               differ only in the last decimal place.
+               Note--by construction, this data set has
+                     sample mean            =  1000000.2   (exact)
+                     sample standard dev.   =        0.1   (exact)
+                     sample autocorr. coef. =     -0.999   (exact)
+
+Stat Category: Univariate: Summary Statistics
+
+Reference:     Simon, Stephen D. and Lesage, James P. (1989).
+               Assessing the Accuracy of ANOVA Caluclations
+               in Statistical Software", Computational
+               Statistics & data Analysis, 8, pp. 325-332.
+
+
+Data:          Constructed
+               1    Response           : y
+               0    Predictors
+               1001 Observations
+
+Model:         Average Level of Difficulty
+               2    Parameters         : mu, sigma
+               1    Response Variable  : y
+               0    Predictor Variables
+
+               y    = mu + e
+
+
+                                                  Certified Values
+Sample Mean                                ybar:  1000000.2 
+Sample Standard Deviation (denom. = n-1)      s:  0.1       
+Sample Autocorrelation Coefficient (lag 1) r(1): -0.999     
+
+Number of Observations:                             1001
+
+
+
+
+
+
+
+
+
+
+
+
+
+Data: Y
+-------------
+  1000000.2
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
diff --git a/src/test/org/apache/commons/math/stat/data/NumAcc3.txt b/src/test/org/apache/commons/math/stat/data/NumAcc3.txt
new file mode 100644
index 0000000..292d8e0
--- /dev/null
+++ b/src/test/org/apache/commons/math/stat/data/NumAcc3.txt
@@ -0,0 +1,1061 @@
+File Name:     NumAcc3.dat
+
+File Format:   ASCII
+               Header          : lines  1 to   60     (=   60)
+               Certified Values: lines 41 to   43     (=    3)
+               Data            : lines 61 to 1061     (= 1001)
+
+Dataset Name:  NumAcc3
+
+Description:   This is a constructed/fabricated data set
+               to test accuracy in summary statistic calculations.
+               The numbers are 8-digit floating point values and
+               differ only in the last decimal place.
+               Note--by construction, this data set has
+                     sample mean            =  1000000.2   (exact)
+                     sample standard dev.   =        0.1   (exact)
+                     sample autocorr. coef. =     -0.999   (exact)
+
+Stat Category: Univariate: Summary Statistics
+
+Reference:     Simon, Stephen D. and Lesage, James P. (1989).
+               Assessing the Accuracy of ANOVA Caluclations
+               in Statistical Software", Computational
+               Statistics & data Analysis, 8, pp. 325-332.
+
+
+Data:          Constructed
+               1    Response           : y
+               0    Predictors
+               1001 Observations
+
+Model:         Average Level of Difficulty
+               2    Parameters         : mu, sigma
+               1    Response Variable  : y
+               0    Predictor Variables
+
+               y    = mu + e
+
+
+                                                  Certified Values
+Sample Mean                                ybar:  1000000.2 
+Sample Standard Deviation (denom. = n-1)      s:  0.1       
+Sample Autocorrelation Coefficient (lag 1) r(1): -0.999     
+
+Number of Observations:                             1001
+
+
+
+
+
+
+
+
+
+
+
+
+
+Data: Y
+-------------
+  1000000.2
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
+  1000000.1
+  1000000.3
diff --git a/src/test/org/apache/commons/math/stat/data/NumAcc4.dat b/src/test/org/apache/commons/math/stat/data/NumAcc4.dat
new file mode 100644
index 0000000..709f2fa
--- /dev/null
+++ b/src/test/org/apache/commons/math/stat/data/NumAcc4.dat
@@ -0,0 +1,1061 @@
+File Name:     NumAcc4.dat
+
+File Format:   ASCII
+               Header          : lines  1 to   60     (=   60)
+               Certified Values: lines 41 to   43     (=    3)
+               Data            : lines 61 to 1061     (= 1001)
+
+Dataset Name:  NumAcc4
+
+Description:   This is a constructed/fabricated data set
+               to test accuracy in summary statistic calculations.
+               The numbers are 9-digit floating point values and
+               differ only in the last decimal place.
+                     sample mean            =  10000000.2   (exact)
+                     sample standard dev.   =         0.1   (exact)
+                     sample autocorr. coef. =      -0.999   (exact)
+
+Stat Category: Univariate
+
+Reference:     Simon, Stephen D. and Lesage, James P. (1989).
+               Assessing the Accuracy of ANOVA Caluclations
+               in Statistical Software", Computational
+               Statistics & data Analysis, 8, pp. 325-332.
+
+Data:          Constructed
+               1    Response           : y
+               0    Predictors
+               1001 Observations
+
+Model:         Higher Level of Difficulty
+               2    Parameters         : mu, sigma
+               1    Response Variable  : y
+               0    Predictor Variables
+
+               y    = mu + e
+
+
+
+
+                                                  Certified Values
+Sample Mean                                ybar:   10000000.2 
+Sample Standard Deviation (denom. = n-1)      s:   0.1        
+Sample Autocorrelation Coefficient (lag 1) r(1):   -0.999     
+
+Number of Observations:                             1001
+
+
+
+
+
+
+
+
+
+
+
+
+
+Data: Y
+--------------
+  10000000.2
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
diff --git a/src/test/org/apache/commons/math/stat/data/NumAcc4.txt b/src/test/org/apache/commons/math/stat/data/NumAcc4.txt
new file mode 100644
index 0000000..382c040
--- /dev/null
+++ b/src/test/org/apache/commons/math/stat/data/NumAcc4.txt
@@ -0,0 +1,1061 @@
+File Name:     NumAcc4.dat
+
+File Format:   ASCII
+               Header          : lines  1 to   60     (=   60)
+               Certified Values: lines 41 to   43     (=    3)
+               Data            : lines 61 to 1061     (= 1001)
+
+Dataset Name:  NumAcc4
+
+Description:   This is a constructed/fabricated data set
+               to test accuracy in summary statistic calculations.
+               The numbers are 9-digit floating point values and
+               differ only in the last decimal place.
+                     sample mean            =  10000000.2   (exact)
+                     sample standard dev.   =         0.1   (exact)
+                     sample autocorr. coef. =      -0.999   (exact)
+
+Stat Category: Univariate
+
+Reference:     Simon, Stephen D. and Lesage, James P. (1989).
+               Assessing the Accuracy of ANOVA Caluclations
+               in Statistical Software", Computational
+               Statistics & data Analysis, 8, pp. 325-332.
+
+Data:          Constructed
+               1    Response           : y
+               0    Predictors
+               1001 Observations
+
+Model:         Higher Level of Difficulty
+               2    Parameters         : mu, sigma
+               1    Response Variable  : y
+               0    Predictor Variables
+
+               y    = mu + e
+
+
+
+
+                                                  Certified Values
+Sample Mean                                ybar:   10000000.2 
+Sample Standard Deviation (denom. = n-1)      s:   0.1        
+Sample Autocorrelation Coefficient (lag 1) r(1):   -0.999     
+
+Number of Observations:                             1001
+
+
+
+
+
+
+
+
+
+
+
+
+
+Data: Y
+--------------
+  10000000.2
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
+  10000000.1
+  10000000.3
diff --git a/src/test/org/apache/commons/math/stat/data/PiDigits.dat b/src/test/org/apache/commons/math/stat/data/PiDigits.dat
new file mode 100644
index 0000000..800c58d
--- /dev/null
+++ b/src/test/org/apache/commons/math/stat/data/PiDigits.dat
@@ -0,0 +1,5060 @@
+File Name:     PiDigits.dat
+
+File Format:   ASCII
+               Header          : lines  1 to   60     (=   60)
+               Certified Values: lines 41 to   43     (=    3)
+               Data            : lines 61 to 5060     (= 5000)
+
+Dataset Name:  PiDigits
+
+Description:   This is a constructed/fabricated data set
+               to test accuracy in summary statistic calculations.
+               The numbers are the first 5000 digits of the
+               mathematical constant pi (= 3.1415926535897932384...).
+
+Stat Category: Univariate
+
+Reference:     Mathematics of Computation.
+               January 1962, page 76.
+
+Data:          Constructed Variable
+               -->    1 Response           : y = pi digits
+               -->    0 Predictors
+               --> 5000 Observations
+
+Model:         Lower Level of Difficulty
+               -->    2 Parameters         : mu, sigma
+               -->    1 Response  Variable : y
+               -->    0 Predictor Variables
+
+               y    = mu + e
+
+
+
+
+
+
+
+
+
+                                                  Certified Values
+Sample Mean                                ybar:  4.53480000000000
+Sample Standard Deviation (denom. = n-1)      s:  2.86733906028871
+Sample Autocorrelation Coefficient (lag 1) r(1): -0.00355099287237972
+
+Number of Observations:                           5000
+
+
+
+
+
+
+
+
+
+
+
+
+
+Data: Y
+---------
+      3
+      1
+      4
+      1
+      5
+      9
+      2
+      6
+      5
+      3
+      5
+      8
+      9
+      7
+      9
+      3
+      2
+      3
+      8
+      4
+      6
+      2
+      6
+      4
+      3
+      3
+      8
+      3
+      2
+      7
+      9
+      5
+      0
+      2
+      8
+      8
+      4
+      1
+      9
+      7
+      1
+      6
+      9
+      3
+      9
+      9
+      3
+      7
+      5
+      1
+      0
+      5
+      8
+      2
+      0
+      9
+      7
+      4
+      9
+      4
+      4
+      5
+      9
+      2
+      3
+      0
+      7
+      8
+      1
+      6
+      4
+      0
+      6
+      2
+      8
+      6
+      2
+      0
+      8
+      9
+      9
+      8
+      6
+      2
+      8
+      0
+      3
+      4
+      8
+      2
+      5
+      3
+      4
+      2
+      1
+      1
+      7
+      0
+      6
+      7
+      9
+      8
+      2
+      1
+      4
+      8
+      0
+      8
+      6
+      5
+      1
+      3
+      2
+      8
+      2
+      3
+      0
+      6
+      6
+      4
+      7
+      0
+      9
+      3
+      8
+      4
+      4
+      6
+      0
+      9
+      5
+      5
+      0
+      5
+      8
+      2
+      2
+      3
+      1
+      7
+      2
+      5
+      3
+      5
+      9
+      4
+      0
+      8
+      1
+      2
+      8
+      4
+      8
+      1
+      1
+      1
+      7
+      4
+      5
+      0
+      2
+      8
+      4
+      1
+      0
+      2
+      7
+      0
+      1
+      9
+      3
+      8
+      5
+      2
+      1
+      1
+      0
+      5
+      5
+      5
+      9
+      6
+      4
+      4
+      6
+      2
+      2
+      9
+      4
+      8
+      9
+      5
+      4
+      9
+      3
+      0
+      3
+      8
+      1
+      9
+      6
+      4
+      4
+      2
+      8
+      8
+      1
+      0
+      9
+      7
+      5
+      6
+      6
+      5
+      9
+      3
+      3
+      4
+      4
+      6
+      1
+      2
+      8
+      4
+      7
+      5
+      6
+      4
+      8
+      2
+      3
+      3
+      7
+      8
+      6
+      7
+      8
+      3
+      1
+      6
+      5
+      2
+      7
+      1
+      2
+      0
+      1
+      9
+      0
+      9
+      1
+      4
+      5
+      6
+      4
+      8
+      5
+      6
+      6
+      9
+      2
+      3
+      4
+      6
+      0
+      3
+      4
+      8
+      6
+      1
+      0
+      4
+      5
+      4
+      3
+      2
+      6
+      6
+      4
+      8
+      2
+      1
+      3
+      3
+      9
+      3
+      6
+      0
+      7
+      2
+      6
+      0
+      2
+      4
+      9
+      1
+      4
+      1
+      2
+      7
+      3
+      7
+      2
+      4
+      5
+      8
+      7
+      0
+      0
+      6
+      6
+      0
+      6
+      3
+      1
+      5
+      5
+      8
+      8
+      1
+      7
+      4
+      8
+      8
+      1
+      5
+      2
+      0
+      9
+      2
+      0
+      9
+      6
+      2
+      8
+      2
+      9
+      2
+      5
+      4
+      0
+      9
+      1
+      7
+      1
+      5
+      3
+      6
+      4
+      3
+      6
+      7
+      8
+      9
+      2
+      5
+      9
+      0
+      3
+      6
+      0
+      0
+      1
+      1
+      3
+      3
+      0
+      5
+      3
+      0
+      5
+      4
+      8
+      8
+      2
+      0
+      4
+      6
+      6
+      5
+      2
+      1
+      3
+      8
+      4
+      1
+      4
+      6
+      9
+      5
+      1
+      9
+      4
+      1
+      5
+      1
+      1
+      6
+      0
+      9
+      4
+      3
+      3
+      0
+      5
+      7
+      2
+      7
+      0
+      3
+      6
+      5
+      7
+      5
+      9
+      5
+      9
+      1
+      9
+      5
+      3
+      0
+      9
+      2
+      1
+      8
+      6
+      1
+      1
+      7
+      3
+      8
+      1
+      9
+      3
+      2
+      6
+      1
+      1
+      7
+      9
+      3
+      1
+      0
+      5
+      1
+      1
+      8
+      5
+      4
+      8
+      0
+      7
+      4
+      4
+      6
+      2
+      3
+      7
+      9
+      9
+      6
+      2
+      7
+      4
+      9
+      5
+      6
+      7
+      3
+      5
+      1
+      8
+      8
+      5
+      7
+      5
+      2
+      7
+      2
+      4
+      8
+      9
+      1
+      2
+      2
+      7
+      9
+      3
+      8
+      1
+      8
+      3
+      0
+      1
+      1
+      9
+      4
+      9
+      1
+      2
+      9
+      8
+      3
+      3
+      6
+      7
+      3
+      3
+      6
+      2
+      4
+      4
+      0
+      6
+      5
+      6
+      6
+      4
+      3
+      0
+      8
+      6
+      0
+      2
+      1
+      3
+      9
+      4
+      9
+      4
+      6
+      3
+      9
+      5
+      2
+      2
+      4
+      7
+      3
+      7
+      1
+      9
+      0
+      7
+      0
+      2
+      1
+      7
+      9
+      8
+      6
+      0
+      9
+      4
+      3
+      7
+      0
+      2
+      7
+      7
+      0
+      5
+      3
+      9
+      2
+      1
+      7
+      1
+      7
+      6
+      2
+      9
+      3
+      1
+      7
+      6
+      7
+      5
+      2
+      3
+      8
+      4
+      6
+      7
+      4
+      8
+      1
+      8
+      4
+      6
+      7
+      6
+      6
+      9
+      4
+      0
+      5
+      1
+      3
+      2
+      0
+      0
+      0
+      5
+      6
+      8
+      1
+      2
+      7
+      1
+      4
+      5
+      2
+      6
+      3
+      5
+      6
+      0
+      8
+      2
+      7
+      7
+      8
+      5
+      7
+      7
+      1
+      3
+      4
+      2
+      7
+      5
+      7
+      7
+      8
+      9
+      6
+      0
+      9
+      1
+      7
+      3
+      6
+      3
+      7
+      1
+      7
+      8
+      7
+      2
+      1
+      4
+      6
+      8
+      4
+      4
+      0
+      9
+      0
+      1
+      2
+      2
+      4
+      9
+      5
+      3
+      4
+      3
+      0
+      1
+      4
+      6
+      5
+      4
+      9
+      5
+      8
+      5
+      3
+      7
+      1
+      0
+      5
+      0
+      7
+      9
+      2
+      2
+      7
+      9
+      6
+      8
+      9
+      2
+      5
+      8
+      9
+      2
+      3
+      5
+      4
+      2
+      0
+      1
+      9
+      9
+      5
+      6
+      1
+      1
+      2
+      1
+      2
+      9
+      0
+      2
+      1
+      9
+      6
+      0
+      8
+      6
+      4
+      0
+      3
+      4
+      4
+      1
+      8
+      1
+      5
+      9
+      8
+      1
+      3
+      6
+      2
+      9
+      7
+      7
+      4
+      7
+      7
+      1
+      3
+      0
+      9
+      9
+      6
+      0
+      5
+      1
+      8
+      7
+      0
+      7
+      2
+      1
+      1
+      3
+      4
+      9
+      9
+      9
+      9
+      9
+      9
+      8
+      3
+      7
+      2
+      9
+      7
+      8
+      0
+      4
+      9
+      9
+      5
+      1
+      0
+      5
+      9
+      7
+      3
+      1
+      7
+      3
+      2
+      8
+      1
+      6
+      0
+      9
+      6
+      3
+      1
+      8
+      5
+      9
+      5
+      0
+      2
+      4
+      4
+      5
+      9
+      4
+      5
+      5
+      3
+      4
+      6
+      9
+      0
+      8
+      3
+      0
+      2
+      6
+      4
+      2
+      5
+      2
+      2
+      3
+      0
+      8
+      2
+      5
+      3
+      3
+      4
+      4
+      6
+      8
+      5
+      0
+      3
+      5
+      2
+      6
+      1
+      9
+      3
+      1
+      1
+      8
+      8
+      1
+      7
+      1
+      0
+      1
+      0
+      0
+      0
+      3
+      1
+      3
+      7
+      8
+      3
+      8
+      7
+      5
+      2
+      8
+      8
+      6
+      5
+      8
+      7
+      5
+      3
+      3
+      2
+      0
+      8
+      3
+      8
+      1
+      4
+      2
+      0
+      6
+      1
+      7
+      1
+      7
+      7
+      6
+      6
+      9
+      1
+      4
+      7
+      3
+      0
+      3
+      5
+      9
+      8
+      2
+      5
+      3
+      4
+      9
+      0
+      4
+      2
+      8
+      7
+      5
+      5
+      4
+      6
+      8
+      7
+      3
+      1
+      1
+      5
+      9
+      5
+      6
+      2
+      8
+      6
+      3
+      8
+      8
+      2
+      3
+      5
+      3
+      7
+      8
+      7
+      5
+      9
+      3
+      7
+      5
+      1
+      9
+      5
+      7
+      7
+      8
+      1
+      8
+      5
+      7
+      7
+      3
+      0
+      5
+      3
+      2
+      1
+      7
+      1
+      2
+      2
+      6
+      8
+      0
+      6
+      6
+      1
+      3
+      0
+      0
+      1
+      9
+      2
+      7
+      8
+      7
+      6
+      6
+      1
+      1
+      1
+      9
+      5
+      9
+      0
+      9
+      2
+      1
+      6
+      4
+      2
+      0
+      1
+      9
+      8
+      9
+      3
+      8
+      0
+      9
+      5
+      2
+      5
+      7
+      2
+      0
+      1
+      0
+      6
+      5
+      4
+      8
+      5
+      8
+      6
+      3
+      2
+      7
+      8
+      8
+      6
+      5
+      9
+      3
+      6
+      1
+      5
+      3
+      3
+      8
+      1
+      8
+      2
+      7
+      9
+      6
+      8
+      2
+      3
+      0
+      3
+      0
+      1
+      9
+      5
+      2
+      0
+      3
+      5
+      3
+      0
+      1
+      8
+      5
+      2
+      9
+      6
+      8
+      9
+      9
+      5
+      7
+      7
+      3
+      6
+      2
+      2
+      5
+      9
+      9
+      4
+      1
+      3
+      8
+      9
+      1
+      2
+      4
+      9
+      7
+      2
+      1
+      7
+      7
+      5
+      2
+      8
+      3
+      4
+      7
+      9
+      1
+      3
+      1
+      5
+      1
+      5
+      5
+      7
+      4
+      8
+      5
+      7
+      2
+      4
+      2
+      4
+      5
+      4
+      1
+      5
+      0
+      6
+      9
+      5
+      9
+      5
+      0
+      8
+      2
+      9
+      5
+      3
+      3
+      1
+      1
+      6
+      8
+      6
+      1
+      7
+      2
+      7
+      8
+      5
+      5
+      8
+      8
+      9
+      0
+      7
+      5
+      0
+      9
+      8
+      3
+      8
+      1
+      7
+      5
+      4
+      6
+      3
+      7
+      4
+      6
+      4
+      9
+      3
+      9
+      3
+      1
+      9
+      2
+      5
+      5
+      0
+      6
+      0
+      4
+      0
+      0
+      9
+      2
+      7
+      7
+      0
+      1
+      6
+      7
+      1
+      1
+      3
+      9
+      0
+      0
+      9
+      8
+      4
+      8
+      8
+      2
+      4
+      0
+      1
+      2
+      8
+      5
+      8
+      3
+      6
+      1
+      6
+      0
+      3
+      5
+      6
+      3
+      7
+      0
+      7
+      6
+      6
+      0
+      1
+      0
+      4
+      7
+      1
+      0
+      1
+      8
+      1
+      9
+      4
+      2
+      9
+      5
+      5
+      5
+      9
+      6
+      1
+      9
+      8
+      9
+      4
+      6
+      7
+      6
+      7
+      8
+      3
+      7
+      4
+      4
+      9
+      4
+      4
+      8
+      2
+      5
+      5
+      3
+      7
+      9
+      7
+      7
+      4
+      7
+      2
+      6
+      8
+      4
+      7
+      1
+      0
+      4
+      0
+      4
+      7
+      5
+      3
+      4
+      6
+      4
+      6
+      2
+      0
+      8
+      0
+      4
+      6
+      6
+      8
+      4
+      2
+      5
+      9
+      0
+      6
+      9
+      4
+      9
+      1
+      2
+      9
+      3
+      3
+      1
+      3
+      6
+      7
+      7
+      0
+      2
+      8
+      9
+      8
+      9
+      1
+      5
+      2
+      1
+      0
+      4
+      7
+      5
+      2
+      1
+      6
+      2
+      0
+      5
+      6
+      9
+      6
+      6
+      0
+      2
+      4
+      0
+      5
+      8
+      0
+      3
+      8
+      1
+      5
+      0
+      1
+      9
+      3
+      5
+      1
+      1
+      2
+      5
+      3
+      3
+      8
+      2
+      4
+      3
+      0
+      0
+      3
+      5
+      5
+      8
+      7
+      6
+      4
+      0
+      2
+      4
+      7
+      4
+      9
+      6
+      4
+      7
+      3
+      2
+      6
+      3
+      9
+      1
+      4
+      1
+      9
+      9
+      2
+      7
+      2
+      6
+      0
+      4
+      2
+      6
+      9
+      9
+      2
+      2
+      7
+      9
+      6
+      7
+      8
+      2
+      3
+      5
+      4
+      7
+      8
+      1
+      6
+      3
+      6
+      0
+      0
+      9
+      3
+      4
+      1
+      7
+      2
+      1
+      6
+      4
+      1
+      2
+      1
+      9
+      9
+      2
+      4
+      5
+      8
+      6
+      3
+      1
+      5
+      0
+      3
+      0
+      2
+      8
+      6
+      1
+      8
+      2
+      9
+      7
+      4
+      5
+      5
+      5
+      7
+      0
+      6
+      7
+      4
+      9
+      8
+      3
+      8
+      5
+      0
+      5
+      4
+      9
+      4
+      5
+      8
+      8
+      5
+      8
+      6
+      9
+      2
+      6
+      9
+      9
+      5
+      6
+      9
+      0
+      9
+      2
+      7
+      2
+      1
+      0
+      7
+      9
+      7
+      5
+      0
+      9
+      3
+      0
+      2
+      9
+      5
+      5
+      3
+      2
+      1
+      1
+      6
+      5
+      3
+      4
+      4
+      9
+      8
+      7
+      2
+      0
+      2
+      7
+      5
+      5
+      9
+      6
+      0
+      2
+      3
+      6
+      4
+      8
+      0
+      6
+      6
+      5
+      4
+      9
+      9
+      1
+      1
+      9
+      8
+      8
+      1
+      8
+      3
+      4
+      7
+      9
+      7
+      7
+      5
+      3
+      5
+      6
+      6
+      3
+      6
+      9
+      8
+      0
+      7
+      4
+      2
+      6
+      5
+      4
+      2
+      5
+      2
+      7
+      8
+      6
+      2
+      5
+      5
+      1
+      8
+      1
+      8
+      4
+      1
+      7
+      5
+      7
+      4
+      6
+      7
+      2
+      8
+      9
+      0
+      9
+      7
+      7
+      7
+      7
+      2
+      7
+      9
+      3
+      8
+      0
+      0
+      0
+      8
+      1
+      6
+      4
+      7
+      0
+      6
+      0
+      0
+      1
+      6
+      1
+      4
+      5
+      2
+      4
+      9
+      1
+      9
+      2
+      1
+      7
+      3
+      2
+      1
+      7
+      2
+      1
+      4
+      7
+      7
+      2
+      3
+      5
+      0
+      1
+      4
+      1
+      4
+      4
+      1
+      9
+      7
+      3
+      5
+      6
+      8
+      5
+      4
+      8
+      1
+      6
+      1
+      3
+      6
+      1
+      1
+      5
+      7
+      3
+      5
+      2
+      5
+      5
+      2
+      1
+      3
+      3
+      4
+      7
+      5
+      7
+      4
+      1
+      8
+      4
+      9
+      4
+      6
+      8
+      4
+      3
+      8
+      5
+      2
+      3
+      3
+      2
+      3
+      9
+      0
+      7
+      3
+      9
+      4
+      1
+      4
+      3
+      3
+      3
+      4
+      5
+      4
+      7
+      7
+      6
+      2
+      4
+      1
+      6
+      8
+      6
+      2
+      5
+      1
+      8
+      9
+      8
+      3
+      5
+      6
+      9
+      4
+      8
+      5
+      5
+      6
+      2
+      0
+      9
+      9
+      2
+      1
+      9
+      2
+      2
+      2
+      1
+      8
+      4
+      2
+      7
+      2
+      5
+      5
+      0
+      2
+      5
+      4
+      2
+      5
+      6
+      8
+      8
+      7
+      6
+      7
+      1
+      7
+      9
+      0
+      4
+      9
+      4
+      6
+      0
+      1
+      6
+      5
+      3
+      4
+      6
+      6
+      8
+      0
+      4
+      9
+      8
+      8
+      6
+      2
+      7
+      2
+      3
+      2
+      7
+      9
+      1
+      7
+      8
+      6
+      0
+      8
+      5
+      7
+      8
+      4
+      3
+      8
+      3
+      8
+      2
+      7
+      9
+      6
+      7
+      9
+      7
+      6
+      6
+      8
+      1
+      4
+      5
+      4
+      1
+      0
+      0
+      9
+      5
+      3
+      8
+      8
+      3
+      7
+      8
+      6
+      3
+      6
+      0
+      9
+      5
+      0
+      6
+      8
+      0
+      0
+      6
+      4
+      2
+      2
+      5
+      1
+      2
+      5
+      2
+      0
+      5
+      1
+      1
+      7
+      3
+      9
+      2
+      9
+      8
+      4
+      8
+      9
+      6
+      0
+      8
+      4
+      1
+      2
+      8
+      4
+      8
+      8
+      6
+      2
+      6
+      9
+      4
+      5
+      6
+      0
+      4
+      2
+      4
+      1
+      9
+      6
+      5
+      2
+      8
+      5
+      0
+      2
+      2
+      2
+      1
+      0
+      6
+      6
+      1
+      1
+      8
+      6
+      3
+      0
+      6
+      7
+      4
+      4
+      2
+      7
+      8
+      6
+      2
+      2
+      0
+      3
+      9
+      1
+      9
+      4
+      9
+      4
+      5
+      0
+      4
+      7
+      1
+      2
+      3
+      7
+      1
+      3
+      7
+      8
+      6
+      9
+      6
+      0
+      9
+      5
+      6
+      3
+      6
+      4
+      3
+      7
+      1
+      9
+      1
+      7
+      2
+      8
+      7
+      4
+      6
+      7
+      7
+      6
+      4
+      6
+      5
+      7
+      5
+      7
+      3
+      9
+      6
+      2
+      4
+      1
+      3
+      8
+      9
+      0
+      8
+      6
+      5
+      8
+      3
+      2
+      6
+      4
+      5
+      9
+      9
+      5
+      8
+      1
+      3
+      3
+      9
+      0
+      4
+      7
+      8
+      0
+      2
+      7
+      5
+      9
+      0
+      0
+      9
+      9
+      4
+      6
+      5
+      7
+      6
+      4
+      0
+      7
+      8
+      9
+      5
+      1
+      2
+      6
+      9
+      4
+      6
+      8
+      3
+      9
+      8
+      3
+      5
+      2
+      5
+      9
+      5
+      7
+      0
+      9
+      8
+      2
+      5
+      8
+      2
+      2
+      6
+      2
+      0
+      5
+      2
+      2
+      4
+      8
+      9
+      4
+      0
+      7
+      7
+      2
+      6
+      7
+      1
+      9
+      4
+      7
+      8
+      2
+      6
+      8
+      4
+      8
+      2
+      6
+      0
+      1
+      4
+      7
+      6
+      9
+      9
+      0
+      9
+      0
+      2
+      6
+      4
+      0
+      1
+      3
+      6
+      3
+      9
+      4
+      4
+      3
+      7
+      4
+      5
+      5
+      3
+      0
+      5
+      0
+      6
+      8
+      2
+      0
+      3
+      4
+      9
+      6
+      2
+      5
+      2
+      4
+      5
+      1
+      7
+      4
+      9
+      3
+      9
+      9
+      6
+      5
+      1
+      4
+      3
+      1
+      4
+      2
+      9
+      8
+      0
+      9
+      1
+      9
+      0
+      6
+      5
+      9
+      2
+      5
+      0
+      9
+      3
+      7
+      2
+      2
+      1
+      6
+      9
+      6
+      4
+      6
+      1
+      5
+      1
+      5
+      7
+      0
+      9
+      8
+      5
+      8
+      3
+      8
+      7
+      4
+      1
+      0
+      5
+      9
+      7
+      8
+      8
+      5
+      9
+      5
+      9
+      7
+      7
+      2
+      9
+      7
+      5
+      4
+      9
+      8
+      9
+      3
+      0
+      1
+      6
+      1
+      7
+      5
+      3
+      9
+      2
+      8
+      4
+      6
+      8
+      1
+      3
+      8
+      2
+      6
+      8
+      6
+      8
+      3
+      8
+      6
+      8
+      9
+      4
+      2
+      7
+      7
+      4
+      1
+      5
+      5
+      9
+      9
+      1
+      8
+      5
+      5
+      9
+      2
+      5
+      2
+      4
+      5
+      9
+      5
+      3
+      9
+      5
+      9
+      4
+      3
+      1
+      0
+      4
+      9
+      9
+      7
+      2
+      5
+      2
+      4
+      6
+      8
+      0
+      8
+      4
+      5
+      9
+      8
+      7
+      2
+      7
+      3
+      6
+      4
+      4
+      6
+      9
+      5
+      8
+      4
+      8
+      6
+      5
+      3
+      8
+      3
+      6
+      7
+      3
+      6
+      2
+      2
+      2
+      6
+      2
+      6
+      0
+      9
+      9
+      1
+      2
+      4
+      6
+      0
+      8
+      0
+      5
+      1
+      2
+      4
+      3
+      8
+      8
+      4
+      3
+      9
+      0
+      4
+      5
+      1
+      2
+      4
+      4
+      1
+      3
+      6
+      5
+      4
+      9
+      7
+      6
+      2
+      7
+      8
+      0
+      7
+      9
+      7
+      7
+      1
+      5
+      6
+      9
+      1
+      4
+      3
+      5
+      9
+      9
+      7
+      7
+      0
+      0
+      1
+      2
+      9
+      6
+      1
+      6
+      0
+      8
+      9
+      4
+      4
+      1
+      6
+      9
+      4
+      8
+      6
+      8
+      5
+      5
+      5
+      8
+      4
+      8
+      4
+      0
+      6
+      3
+      5
+      3
+      4
+      2
+      2
+      0
+      7
+      2
+      2
+      2
+      5
+      8
+      2
+      8
+      4
+      8
+      8
+      6
+      4
+      8
+      1
+      5
+      8
+      4
+      5
+      6
+      0
+      2
+      8
+      5
+      0
+      6
+      0
+      1
+      6
+      8
+      4
+      2
+      7
+      3
+      9
+      4
+      5
+      2
+      2
+      6
+      7
+      4
+      6
+      7
+      6
+      7
+      8
+      8
+      9
+      5
+      2
+      5
+      2
+      1
+      3
+      8
+      5
+      2
+      2
+      5
+      4
+      9
+      9
+      5
+      4
+      6
+      6
+      6
+      7
+      2
+      7
+      8
+      2
+      3
+      9
+      8
+      6
+      4
+      5
+      6
+      5
+      9
+      6
+      1
+      1
+      6
+      3
+      5
+      4
+      8
+      8
+      6
+      2
+      3
+      0
+      5
+      7
+      7
+      4
+      5
+      6
+      4
+      9
+      8
+      0
+      3
+      5
+      5
+      9
+      3
+      6
+      3
+      4
+      5
+      6
+      8
+      1
+      7
+      4
+      3
+      2
+      4
+      1
+      1
+      2
+      5
+      1
+      5
+      0
+      7
+      6
+      0
+      6
+      9
+      4
+      7
+      9
+      4
+      5
+      1
+      0
+      9
+      6
+      5
+      9
+      6
+      0
+      9
+      4
+      0
+      2
+      5
+      2
+      2
+      8
+      8
+      7
+      9
+      7
+      1
+      0
+      8
+      9
+      3
+      1
+      4
+      5
+      6
+      6
+      9
+      1
+      3
+      6
+      8
+      6
+      7
+      2
+      2
+      8
+      7
+      4
+      8
+      9
+      4
+      0
+      5
+      6
+      0
+      1
+      0
+      1
+      5
+      0
+      3
+      3
+      0
+      8
+      6
+      1
+      7
+      9
+      2
+      8
+      6
+      8
+      0
+      9
+      2
+      0
+      8
+      7
+      4
+      7
+      6
+      0
+      9
+      1
+      7
+      8
+      2
+      4
+      9
+      3
+      8
+      5
+      8
+      9
+      0
+      0
+      9
+      7
+      1
+      4
+      9
+      0
+      9
+      6
+      7
+      5
+      9
+      8
+      5
+      2
+      6
+      1
+      3
+      6
+      5
+      5
+      4
+      9
+      7
+      8
+      1
+      8
+      9
+      3
+      1
+      2
+      9
+      7
+      8
+      4
+      8
+      2
+      1
+      6
+      8
+      2
+      9
+      9
+      8
+      9
+      4
+      8
+      7
+      2
+      2
+      6
+      5
+      8
+      8
+      0
+      4
+      8
+      5
+      7
+      5
+      6
+      4
+      0
+      1
+      4
+      2
+      7
+      0
+      4
+      7
+      7
+      5
+      5
+      5
+      1
+      3
+      2
+      3
+      7
+      9
+      6
+      4
+      1
+      4
+      5
+      1
+      5
+      2
+      3
+      7
+      4
+      6
+      2
+      3
+      4
+      3
+      6
+      4
+      5
+      4
+      2
+      8
+      5
+      8
+      4
+      4
+      4
+      7
+      9
+      5
+      2
+      6
+      5
+      8
+      6
+      7
+      8
+      2
+      1
+      0
+      5
+      1
+      1
+      4
+      1
+      3
+      5
+      4
+      7
+      3
+      5
+      7
+      3
+      9
+      5
+      2
+      3
+      1
+      1
+      3
+      4
+      2
+      7
+      1
+      6
+      6
+      1
+      0
+      2
+      1
+      3
+      5
+      9
+      6
+      9
+      5
+      3
+      6
+      2
+      3
+      1
+      4
+      4
+      2
+      9
+      5
+      2
+      4
+      8
+      4
+      9
+      3
+      7
+      1
+      8
+      7
+      1
+      1
+      0
+      1
+      4
+      5
+      7
+      6
+      5
+      4
+      0
+      3
+      5
+      9
+      0
+      2
+      7
+      9
+      9
+      3
+      4
+      4
+      0
+      3
+      7
+      4
+      2
+      0
+      0
+      7
+      3
+      1
+      0
+      5
+      7
+      8
+      5
+      3
+      9
+      0
+      6
+      2
+      1
+      9
+      8
+      3
+      8
+      7
+      4
+      4
+      7
+      8
+      0
+      8
+      4
+      7
+      8
+      4
+      8
+      9
+      6
+      8
+      3
+      3
+      2
+      1
+      4
+      4
+      5
+      7
+      1
+      3
+      8
+      6
+      8
+      7
+      5
+      1
+      9
+      4
+      3
+      5
+      0
+      6
+      4
+      3
+      0
+      2
+      1
+      8
+      4
+      5
+      3
+      1
+      9
+      1
+      0
+      4
+      8
+      4
+      8
+      1
+      0
+      0
+      5
+      3
+      7
+      0
+      6
+      1
+      4
+      6
+      8
+      0
+      6
+      7
+      4
+      9
+      1
+      9
+      2
+      7
+      8
+      1
+      9
+      1
+      1
+      9
+      7
+      9
+      3
+      9
+      9
+      5
+      2
+      0
+      6
+      1
+      4
+      1
+      9
+      6
+      6
+      3
+      4
+      2
+      8
+      7
+      5
+      4
+      4
+      4
+      0
+      6
+      4
+      3
+      7
+      4
+      5
+      1
+      2
+      3
+      7
+      1
+      8
+      1
+      9
+      2
+      1
+      7
+      9
+      9
+      9
+      8
+      3
+      9
+      1
+      0
+      1
+      5
+      9
+      1
+      9
+      5
+      6
+      1
+      8
+      1
+      4
+      6
+      7
+      5
+      1
+      4
+      2
+      6
+      9
+      1
+      2
+      3
+      9
+      7
+      4
+      8
+      9
+      4
+      0
+      9
+      0
+      7
+      1
+      8
+      6
+      4
+      9
+      4
+      2
+      3
+      1
+      9
+      6
+      1
+      5
+      6
+      7
+      9
+      4
+      5
+      2
+      0
+      8
+      0
+      9
+      5
+      1
+      4
+      6
+      5
+      5
+      0
+      2
+      2
+      5
+      2
+      3
+      1
+      6
+      0
+      3
+      8
+      8
+      1
+      9
+      3
+      0
+      1
+      4
+      2
+      0
+      9
+      3
+      7
+      6
+      2
+      1
+      3
+      7
+      8
+      5
+      5
+      9
+      5
+      6
+      6
+      3
+      8
+      9
+      3
+      7
+      7
+      8
+      7
+      0
+      8
+      3
+      0
+      3
+      9
+      0
+      6
+      9
+      7
+      9
+      2
+      0
+      7
+      7
+      3
+      4
+      6
+      7
+      2
+      2
+      1
+      8
+      2
+      5
+      6
+      2
+      5
+      9
+      9
+      6
+      6
+      1
+      5
+      0
+      1
+      4
+      2
+      1
+      5
+      0
+      3
+      0
+      6
+      8
+      0
+      3
+      8
+      4
+      4
+      7
+      7
+      3
+      4
+      5
+      4
+      9
+      2
+      0
+      2
+      6
+      0
+      5
+      4
+      1
+      4
+      6
+      6
+      5
+      9
+      2
+      5
+      2
+      0
+      1
+      4
+      9
+      7
+      4
+      4
+      2
+      8
+      5
+      0
+      7
+      3
+      2
+      5
+      1
+      8
+      6
+      6
+      6
+      0
+      0
+      2
+      1
+      3
+      2
+      4
+      3
+      4
+      0
+      8
+      8
+      1
+      9
+      0
+      7
+      1
+      0
+      4
+      8
+      6
+      3
+      3
+      1
+      7
+      3
+      4
+      6
+      4
+      9
+      6
+      5
+      1
+      4
+      5
+      3
+      9
+      0
+      5
+      7
+      9
+      6
+      2
+      6
+      8
+      5
+      6
+      1
+      0
+      0
+      5
+      5
+      0
+      8
+      1
+      0
+      6
+      6
+      5
+      8
+      7
+      9
+      6
+      9
+      9
+      8
+      1
+      6
+      3
+      5
+      7
+      4
+      7
+      3
+      6
+      3
+      8
+      4
+      0
+      5
+      2
+      5
+      7
+      1
+      4
+      5
+      9
+      1
+      0
+      2
+      8
+      9
+      7
+      0
+      6
+      4
+      1
+      4
+      0
+      1
+      1
+      0
+      9
+      7
+      1
+      2
+      0
+      6
+      2
+      8
+      0
+      4
+      3
+      9
+      0
+      3
+      9
+      7
+      5
+      9
+      5
+      1
+      5
+      6
+      7
+      7
+      1
+      5
+      7
+      7
+      0
+      0
+      4
+      2
+      0
+      3
+      3
+      7
+      8
+      6
+      9
+      9
+      3
+      6
+      0
+      0
+      7
+      2
+      3
+      0
+      5
+      5
+      8
+      7
+      6
+      3
+      1
+      7
+      6
+      3
+      5
+      9
+      4
+      2
+      1
+      8
+      7
+      3
+      1
+      2
+      5
+      1
+      4
+      7
+      1
+      2
+      0
+      5
+      3
+      2
+      9
+      2
+      8
+      1
+      9
+      1
+      8
+      2
+      6
+      1
+      8
+      6
+      1
+      2
+      5
+      8
+      6
+      7
+      3
+      2
+      1
+      5
+      7
+      9
+      1
+      9
+      8
+      4
+      1
+      4
+      8
+      4
+      8
+      8
+      2
+      9
+      1
+      6
+      4
+      4
+      7
+      0
+      6
+      0
+      9
+      5
+      7
+      5
+      2
+      7
+      0
+      6
+      9
+      5
+      7
+      2
+      2
+      0
+      9
+      1
+      7
+      5
+      6
+      7
+      1
+      1
+      6
+      7
+      2
+      2
+      9
+      1
+      0
+      9
+      8
+      1
+      6
+      9
+      0
+      9
+      1
+      5
+      2
+      8
+      0
+      1
+      7
+      3
+      5
+      0
+      6
+      7
+      1
+      2
+      7
+      4
+      8
+      5
+      8
+      3
+      2
+      2
+      2
+      8
+      7
+      1
+      8
+      3
+      5
+      2
+      0
+      9
+      3
+      5
+      3
+      9
+      6
+      5
+      7
+      2
+      5
+      1
+      2
+      1
+      0
+      8
+      3
+      5
+      7
+      9
+      1
+      5
+      1
+      3
+      6
+      9
+      8
+      8
+      2
+      0
+      9
+      1
+      4
+      4
+      4
+      2
+      1
+      0
+      0
+      6
+      7
+      5
+      1
+      0
+      3
+      3
+      4
+      6
+      7
+      1
+      1
+      0
+      3
+      1
+      4
+      1
+      2
+      6
+      7
+      1
+      1
+      1
+      3
+      6
+      9
+      9
+      0
+      8
+      6
+      5
+      8
+      5
+      1
+      6
+      3
+      9
+      8
+      3
+      1
+      5
+      0
+      1
+      9
+      7
+      0
+      1
+      6
+      5
+      1
+      5
+      1
+      1
+      6
+      8
+      5
+      1
+      7
+      1
+      4
+      3
+      7
+      6
+      5
+      7
+      6
+      1
+      8
+      3
+      5
+      1
+      5
+      5
+      6
+      5
+      0
+      8
+      8
+      4
+      9
+      0
+      9
+      9
+      8
+      9
+      8
+      5
+      9
+      9
+      8
+      2
+      3
+      8
+      7
+      3
+      4
+      5
+      5
+      2
+      8
+      3
+      3
+      1
+      6
+      3
+      5
+      5
+      0
+      7
+      6
+      4
+      7
+      9
+      1
+      8
+      5
+      3
+      5
+      8
+      9
+      3
+      2
+      2
+      6
+      1
+      8
+      5
+      4
+      8
+      9
+      6
+      3
+      2
+      1
+      3
+      2
+      9
+      3
+      3
+      0
+      8
+      9
+      8
+      5
+      7
+      0
+      6
+      4
+      2
+      0
+      4
+      6
+      7
+      5
+      2
+      5
+      9
+      0
+      7
+      0
+      9
+      1
+      5
+      4
+      8
+      1
+      4
+      1
+      6
+      5
+      4
+      9
+      8
+      5
+      9
+      4
+      6
+      1
+      6
+      3
+      7
+      1
+      8
+      0
+      2
+      7
+      0
+      9
+      8
+      1
+      9
+      9
+      4
+      3
+      0
+      9
+      9
+      2
+      4
+      4
+      8
+      8
+      9
+      5
+      7
+      5
+      7
+      1
+      2
+      8
+      2
+      8
+      9
+      0
+      5
+      9
+      2
+      3
+      2
+      3
+      3
+      2
+      6
+      0
+      9
+      7
+      2
+      9
+      9
+      7
+      1
+      2
+      0
+      8
+      4
+      4
+      3
+      3
+      5
+      7
+      3
+      2
+      6
+      5
+      4
+      8
+      9
+      3
+      8
+      2
+      3
+      9
+      1
+      1
+      9
+      3
+      2
+      5
+      9
+      7
+      4
+      6
+      3
+      6
+      6
+      7
+      3
+      0
+      5
+      8
+      3
+      6
+      0
+      4
+      1
+      4
+      2
+      8
+      1
+      3
+      8
+      8
+      3
+      0
+      3
+      2
+      0
+      3
+      8
+      2
+      4
+      9
+      0
+      3
+      7
+      5
+      8
+      9
+      8
+      5
+      2
+      4
+      3
+      7
+      4
+      4
+      1
+      7
+      0
+      2
+      9
+      1
+      3
+      2
+      7
+      6
+      5
+      6
+      1
+      8
+      0
+      9
+      3
+      7
+      7
+      3
+      4
+      4
+      4
+      0
+      3
+      0
+      7
+      0
+      7
+      4
+      6
+      9
+      2
+      1
+      1
+      2
+      0
+      1
+      9
+      1
+      3
+      0
+      2
+      0
+      3
+      3
+      0
+      3
+      8
+      0
+      1
+      9
+      7
+      6
+      2
+      1
+      1
+      0
+      1
+      1
+      0
+      0
+      4
+      4
+      9
+      2
+      9
+      3
+      2
+      1
+      5
+      1
+      6
+      0
+      8
+      4
+      2
+      4
+      4
+      4
+      8
+      5
+      9
+      6
+      3
+      7
+      6
+      6
+      9
+      8
+      3
+      8
+      9
+      5
+      2
+      2
+      8
+      6
+      8
+      4
+      7
+      8
+      3
+      1
+      2
+      3
+      5
+      5
+      2
+      6
+      5
+      8
+      2
+      1
+      3
+      1
+      4
+      4
+      9
+      5
+      7
+      6
+      8
+      5
+      7
+      2
+      6
+      2
+      4
+      3
+      3
+      4
+      4
+      1
+      8
+      9
+      3
+      0
+      3
+      9
+      6
+      8
+      6
+      4
+      2
+      6
+      2
+      4
+      3
+      4
+      1
+      0
+      7
+      7
+      3
+      2
+      2
+      6
+      9
+      7
+      8
+      0
+      2
+      8
+      0
+      7
+      3
+      1
+      8
+      9
+      1
+      5
+      4
+      4
+      1
+      1
+      0
+      1
+      0
+      4
+      4
+      6
+      8
+      2
+      3
+      2
+      5
+      2
+      7
+      1
+      6
+      2
+      0
+      1
+      0
+      5
+      2
+      6
+      5
+      2
+      2
+      7
+      2
+      1
+      1
+      1
+      6
+      6
+      0
+      3
+      9
+      6
+      6
+      6
+      5
+      5
+      7
+      3
+      0
+      9
+      2
+      5
+      4
+      7
+      1
+      1
+      0
+      5
+      5
+      7
+      8
+      5
+      3
+      7
+      6
+      3
+      4
+      6
+      6
+      8
+      2
+      0
+      6
+      5
+      3
+      1
+      0
+      9
+      8
+      9
+      6
+      5
+      2
+      6
+      9
+      1
+      8
+      6
+      2
+      0
+      5
+      6
+      4
+      7
+      6
+      9
+      3
+      1
+      2
+      5
+      7
+      0
+      5
+      8
+      6
+      3
+      5
+      6
+      6
+      2
+      0
+      1
+      8
+      5
+      5
+      8
+      1
+      0
+      0
+      7
+      2
+      9
+      3
+      6
+      0
+      6
+      5
+      9
+      8
+      7
+      6
+      4
+      8
+      6
+      1
+      1
+      7
+      9
+      1
+      0
+      4
+      5
+      3
+      3
+      4
+      8
+      8
+      5
+      0
+      3
+      4
+      6
+      1
+      1
+      3
+      6
+      5
+      7
+      6
+      8
+      6
+      7
+      5
+      3
+      2
+      4
+      9
+      4
+      4
+      1
+      6
+      6
+      8
+      0
+      3
+      9
+      6
+      2
+      6
+      5
+      7
+      9
+      7
+      8
+      7
+      7
+      1
+      8
+      5
+      5
+      6
+      0
+      8
+      4
+      5
+      5
+      2
+      9
+      6
+      5
+      4
+      1
+      2
+      6
+      6
+      5
+      4
+      0
+      8
+      5
+      3
+      0
+      6
+      1
+      4
+      3
+      4
+      4
+      4
+      3
+      1
+      8
+      5
+      8
+      6
+      7
+      6
+      9
+      7
+      5
+      1
+      4
+      5
+      6
+      6
+      1
+      4
+      0
+      6
+      8
+      0
+      0
+      7
+      0
+      0
+      2
+      3
+      7
+      8
+      7
+      7
+      6
+      5
+      9
+      1
+      3
+      4
+      4
+      0
+      1
+      7
+      1
+      2
+      7
+      4
+      9
+      4
+      7
+      0
+      4
+      2
+      0
+      5
+      6
+      2
+      2
+      3
+      0
+      5
+      3
+      8
+      9
+      9
+      4
+      5
+      6
+      1
+      3
+      1
+      4
+      0
+      7
+      1
+      1
+      2
+      7
+      0
+      0
+      0
+      4
+      0
+      7
+      8
+      5
+      4
+      7
+      3
+      3
+      2
+      6
+      9
+      9
+      3
+      9
+      0
+      8
+      1
+      4
+      5
+      4
+      6
+      6
+      4
+      6
+      4
+      5
+      8
+      8
+      0
+      7
+      9
+      7
+      2
+      7
+      0
+      8
+      2
+      6
+      6
+      8
+      3
+      0
+      6
+      3
+      4
+      3
+      2
+      8
+      5
+      8
+      7
+      8
+      5
+      6
+      9
+      8
+      3
+      0
+      5
+      2
+      3
+      5
+      8
+      0
+      8
+      9
+      3
+      3
+      0
+      6
+      5
+      7
+      5
+      7
+      4
+      0
+      6
+      7
+      9
+      5
+      4
+      5
+      7
+      1
+      6
+      3
+      7
+      7
+      5
+      2
+      5
+      4
+      2
+      0
+      2
+      1
+      1
+      4
+      9
+      5
+      5
+      7
+      6
+      1
+      5
+      8
+      1
+      4
+      0
+      0
+      2
+      5
+      0
+      1
+      2
+      6
+      2
+      2
+      8
+      5
+      9
+      4
+      1
+      3
+      0
+      2
+      1
+      6
+      4
+      7
+      1
+      5
+      5
+      0
+      9
+      7
+      9
+      2
+      5
+      9
+      2
+      3
+      0
+      9
+      9
+      0
+      7
+      9
+      6
+      5
+      4
+      7
+      3
+      7
+      6
+      1
+      2
+      5
+      5
+      1
+      7
+      6
+      5
+      6
+      7
+      5
+      1
+      3
+      5
+      7
+      5
+      1
+      7
+      8
+      2
+      9
+      6
+      6
+      6
+      4
+      5
+      4
+      7
+      7
+      9
+      1
+      7
+      4
+      5
+      0
+      1
+      1
+      2
+      9
+      9
+      6
+      1
+      4
+      8
+      9
+      0
+      3
+      0
+      4
+      6
+      3
+      9
+      9
+      4
+      7
+      1
+      3
+      2
+      9
+      6
+      2
+      1
+      0
+      7
+      3
+      4
+      0
+      4
+      3
+      7
+      5
+      1
+      8
+      9
+      5
+      7
+      3
+      5
+      9
+      6
+      1
+      4
+      5
+      8
+      9
+      0
+      1
+      9
+      3
+      8
+      9
+      7
+      1
+      3
+      1
+      1
+      1
+      7
+      9
+      0
+      4
+      2
+      9
+      7
+      8
+      2
+      8
+      5
+      6
+      4
+      7
+      5
+      0
+      3
+      2
+      0
+      3
+      1
+      9
+      8
+      6
+      9
+      1
+      5
+      1
+      4
+      0
+      2
+      8
+      7
+      0
+      8
+      0
+      8
+      5
+      9
+      9
+      0
+      4
+      8
+      0
+      1
+      0
+      9
+      4
+      1
+      2
+      1
+      4
+      7
+      2
+      2
+      1
+      3
+      1
+      7
+      9
+      4
+      7
+      6
+      4
+      7
+      7
+      7
+      2
+      6
+      2
+      2
+      4
+      1
+      4
+      2
+      5
+      4
+      8
+      5
+      4
+      5
+      4
+      0
+      3
+      3
+      2
+      1
+      5
+      7
+      1
+      8
+      5
+      3
+      0
+      6
+      1
+      4
+      2
+      2
+      8
+      8
+      1
+      3
+      7
+      5
+      8
+      5
+      0
+      4
+      3
+      0
+      6
+      3
+      3
+      2
+      1
+      7
+      5
+      1
+      8
+      2
+      9
+      7
+      9
+      8
+      6
+      6
+      2
+      2
+      3
+      7
+      1
+      7
+      2
+      1
+      5
+      9
+      1
+      6
+      0
+      7
+      7
+      1
+      6
+      6
+      9
+      2
+      5
+      4
+      7
+      4
+      8
+      7
+      3
+      8
+      9
+      8
+      6
+      6
+      5
+      4
+      9
+      4
+      9
+      4
+      5
+      0
+      1
+      1
+      4
+      6
+      5
+      4
+      0
+      6
+      2
+      8
+      4
+      3
+      3
+      6
+      6
+      3
+      9
+      3
+      7
+      9
+      0
+      0
+      3
+      9
+      7
+      6
+      9
+      2
+      6
+      5
+      6
+      7
+      2
+      1
+      4
+      6
+      3
+      8
+      5
+      3
+      0
+      6
+      7
+      3
+      6
+      0
+      9
+      6
+      5
+      7
+      1
+      2
+      0
+      9
+      1
+      8
+      0
+      7
+      6
+      3
+      8
+      3
+      2
+      7
+      1
+      6
+      6
+      4
+      1
+      6
+      2
+      7
+      4
+      8
+      8
+      8
+      8
+      0
+      0
+      7
+      8
+      6
+      9
+      2
+      5
+      6
+      0
+      2
+      9
+      0
+      2
+      2
+      8
+      4
+      7
+      2
+      1
+      0
+      4
+      0
+      3
+      1
+      7
+      2
+      1
+      1
+      8
+      6
+      0
+      8
+      2
+      0
+      4
+      1
+      9
+      0
+      0
+      0
+      4
+      2
+      2
+      9
+      6
+      6
+      1
+      7
+      1
+      1
+      9
+      6
+      3
+      7
+      7
+      9
+      2
+      1
+      3
+      3
+      7
+      5
+      7
+      5
+      1
+      1
+      4
+      9
+      5
+      9
+      5
+      0
+      1
+      5
+      6
+      6
+      0
+      4
+      9
+      6
+      3
+      1
+      8
+      6
+      2
+      9
+      4
+      7
+      2
+      6
+      5
+      4
+      7
+      3
+      6
+      4
+      2
+      5
+      2
+      3
+      0
+      8
+      1
+      7
+      7
+      0
+      3
+      6
+      7
+      5
+      1
+      5
+      9
+      0
+      6
+      7
+      3
+      5
+      0
+      2
+      3
+      5
+      0
+      7
+      2
+      8
+      3
+      5
+      4
+      0
+      5
+      6
+      7
+      0
+      4
+      0
+      3
+      8
+      6
+      7
+      4
+      3
+      5
+      1
+      3
+      6
+      2
+      2
+      2
+      2
+      4
+      7
+      7
+      1
+      5
+      8
+      9
+      1
+      5
+      0
+      4
+      9
+      5
+      3
+      0
+      9
+      8
+      4
+      4
+      4
+      8
+      9
+      3
+      3
+      3
+      0
+      9
+      6
+      3
+      4
+      0
+      8
+      7
+      8
+      0
+      7
+      6
+      9
+      3
+      2
+      5
+      9
+      9
+      3
+      9
+      7
+      8
+      0
+      5
+      4
+      1
+      9
+      3
+      4
+      1
+      4
+      4
+      7
+      3
+      7
+      7
+      4
+      4
+      1
+      8
+      4
+      2
+      6
+      3
+      1
+      2
+      9
+      8
+      6
+      0
+      8
+      0
+      9
+      9
+      8
+      8
+      8
+      6
+      8
+      7
+      4
+      1
+      3
+      2
+      6
+      0
+      4
+      7
+      2
diff --git a/src/test/org/apache/commons/math/stat/data/PiDigits.txt b/src/test/org/apache/commons/math/stat/data/PiDigits.txt
new file mode 100644
index 0000000..1e407b6
--- /dev/null
+++ b/src/test/org/apache/commons/math/stat/data/PiDigits.txt
@@ -0,0 +1,5060 @@
+File Name:     PiDigits.dat
+
+File Format:   ASCII
+               Header          : lines  1 to   60     (=   60)
+               Certified Values: lines 41 to   43     (=    3)
+               Data            : lines 61 to 5060     (= 5000)
+
+Dataset Name:  PiDigits
+
+Description:   This is a constructed/fabricated data set
+               to test accuracy in summary statistic calculations.
+               The numbers are the first 5000 digits of the
+               mathematical constant pi (= 3.1415926535897932384...).
+
+Stat Category: Univariate
+
+Reference:     Mathematics of Computation.
+               January 1962, page 76.
+
+Data:          Constructed Variable
+               -->    1 Response           : y = pi digits
+               -->    0 Predictors
+               --> 5000 Observations
+
+Model:         Lower Level of Difficulty
+               -->    2 Parameters         : mu, sigma
+               -->    1 Response  Variable : y
+               -->    0 Predictor Variables
+
+               y    = mu + e
+
+
+
+
+
+
+
+
+
+                                                  Certified Values
+Sample Mean                                ybar:  4.53480000000000
+Sample Standard Deviation (denom. = n-1)      s:  2.86733906028871
+Sample Autocorrelation Coefficient (lag 1) r(1): -0.00355099287237972
+
+Number of Observations:                           5000
+
+
+
+
+
+
+
+
+
+
+
+
+
+Data: Y
+---------
+      3
+      1
+      4
+      1
+      5
+      9
+      2
+      6
+      5
+      3
+      5
+      8
+      9
+      7
+      9
+      3
+      2
+      3
+      8
+      4
+      6
+      2
+      6
+      4
+      3
+      3
+      8
+      3
+      2
+      7
+      9
+      5
+      0
+      2
+      8
+      8
+      4
+      1
+      9
+      7
+      1
+      6
+      9
+      3
+      9
+      9
+      3
+      7
+      5
+      1
+      0
+      5
+      8
+      2
+      0
+      9
+      7
+      4
+      9
+      4
+      4
+      5
+      9
+      2
+      3
+      0
+      7
+      8
+      1
+      6
+      4
+      0
+      6
+      2
+      8
+      6
+      2
+      0
+      8
+      9
+      9
+      8
+      6
+      2
+      8
+      0
+      3
+      4
+      8
+      2
+      5
+      3
+      4
+      2
+      1
+      1
+      7
+      0
+      6
+      7
+      9
+      8
+      2
+      1
+      4
+      8
+      0
+      8
+      6
+      5
+      1
+      3
+      2
+      8
+      2
+      3
+      0
+      6
+      6
+      4
+      7
+      0
+      9
+      3
+      8
+      4
+      4
+      6
+      0
+      9
+      5
+      5
+      0
+      5
+      8
+      2
+      2
+      3
+      1
+      7
+      2
+      5
+      3
+      5
+      9
+      4
+      0
+      8
+      1
+      2
+      8
+      4
+      8
+      1
+      1
+      1
+      7
+      4
+      5
+      0
+      2
+      8
+      4
+      1
+      0
+      2
+      7
+      0
+      1
+      9
+      3
+      8
+      5
+      2
+      1
+      1
+      0
+      5
+      5
+      5
+      9
+      6
+      4
+      4
+      6
+      2
+      2
+      9
+      4
+      8
+      9
+      5
+      4
+      9
+      3
+      0
+      3
+      8
+      1
+      9
+      6
+      4
+      4
+      2
+      8
+      8
+      1
+      0
+      9
+      7
+      5
+      6
+      6
+      5
+      9
+      3
+      3
+      4
+      4
+      6
+      1
+      2
+      8
+      4
+      7
+      5
+      6
+      4
+      8
+      2
+      3
+      3
+      7
+      8
+      6
+      7
+      8
+      3
+      1
+      6
+      5
+      2
+      7
+      1
+      2
+      0
+      1
+      9
+      0
+      9
+      1
+      4
+      5
+      6
+      4
+      8
+      5
+      6
+      6
+      9
+      2
+      3
+      4
+      6
+      0
+      3
+      4
+      8
+      6
+      1
+      0
+      4
+      5
+      4
+      3
+      2
+      6
+      6
+      4
+      8
+      2
+      1
+      3
+      3
+      9
+      3
+      6
+      0
+      7
+      2
+      6
+      0
+      2
+      4
+      9
+      1
+      4
+      1
+      2
+      7
+      3
+      7
+      2
+      4
+      5
+      8
+      7
+      0
+      0
+      6
+      6
+      0
+      6
+      3
+      1
+      5
+      5
+      8
+      8
+      1
+      7
+      4
+      8
+      8
+      1
+      5
+      2
+      0
+      9
+      2
+      0
+      9
+      6
+      2
+      8
+      2
+      9
+      2
+      5
+      4
+      0
+      9
+      1
+      7
+      1
+      5
+      3
+      6
+      4
+      3
+      6
+      7
+      8
+      9
+      2
+      5
+      9
+      0
+      3
+      6
+      0
+      0
+      1
+      1
+      3
+      3
+      0
+      5
+      3
+      0
+      5
+      4
+      8
+      8
+      2
+      0
+      4
+      6
+      6
+      5
+      2
+      1
+      3
+      8
+      4
+      1
+      4
+      6
+      9
+      5
+      1
+      9
+      4
+      1
+      5
+      1
+      1
+      6
+      0
+      9
+      4
+      3
+      3
+      0
+      5
+      7
+      2
+      7
+      0
+      3
+      6
+      5
+      7
+      5
+      9
+      5
+      9
+      1
+      9
+      5
+      3
+      0
+      9
+      2
+      1
+      8
+      6
+      1
+      1
+      7
+      3
+      8
+      1
+      9
+      3
+      2
+      6
+      1
+      1
+      7
+      9
+      3
+      1
+      0
+      5
+      1
+      1
+      8
+      5
+      4
+      8
+      0
+      7
+      4
+      4
+      6
+      2
+      3
+      7
+      9
+      9
+      6
+      2
+      7
+      4
+      9
+      5
+      6
+      7
+      3
+      5
+      1
+      8
+      8
+      5
+      7
+      5
+      2
+      7
+      2
+      4
+      8
+      9
+      1
+      2
+      2
+      7
+      9
+      3
+      8
+      1
+      8
+      3
+      0
+      1
+      1
+      9
+      4
+      9
+      1
+      2
+      9
+      8
+      3
+      3
+      6
+      7
+      3
+      3
+      6
+      2
+      4
+      4
+      0
+      6
+      5
+      6
+      6
+      4
+      3
+      0
+      8
+      6
+      0
+      2
+      1
+      3
+      9
+      4
+      9
+      4
+      6
+      3
+      9
+      5
+      2
+      2
+      4
+      7
+      3
+      7
+      1
+      9
+      0
+      7
+      0
+      2
+      1
+      7
+      9
+      8
+      6
+      0
+      9
+      4
+      3
+      7
+      0
+      2
+      7
+      7
+      0
+      5
+      3
+      9
+      2
+      1
+      7
+      1
+      7
+      6
+      2
+      9
+      3
+      1
+      7
+      6
+      7
+      5
+      2
+      3
+      8
+      4
+      6
+      7
+      4
+      8
+      1
+      8
+      4
+      6
+      7
+      6
+      6
+      9
+      4
+      0
+      5
+      1
+      3
+      2
+      0
+      0
+      0
+      5
+      6
+      8
+      1
+      2
+      7
+      1
+      4
+      5
+      2
+      6
+      3
+      5
+      6
+      0
+      8
+      2
+      7
+      7
+      8
+      5
+      7
+      7
+      1
+      3
+      4
+      2
+      7
+      5
+      7
+      7
+      8
+      9
+      6
+      0
+      9
+      1
+      7
+      3
+      6
+      3
+      7
+      1
+      7
+      8
+      7
+      2
+      1
+      4
+      6
+      8
+      4
+      4
+      0
+      9
+      0
+      1
+      2
+      2
+      4
+      9
+      5
+      3
+      4
+      3
+      0
+      1
+      4
+      6
+      5
+      4
+      9
+      5
+      8
+      5
+      3
+      7
+      1
+      0
+      5
+      0
+      7
+      9
+      2
+      2
+      7
+      9
+      6
+      8
+      9
+      2
+      5
+      8
+      9
+      2
+      3
+      5
+      4
+      2
+      0
+      1
+      9
+      9
+      5
+      6
+      1
+      1
+      2
+      1
+      2
+      9
+      0
+      2
+      1
+      9
+      6
+      0
+      8
+      6
+      4
+      0
+      3
+      4
+      4
+      1
+      8
+      1
+      5
+      9
+      8
+      1
+      3
+      6
+      2
+      9
+      7
+      7
+      4
+      7
+      7
+      1
+      3
+      0
+      9
+      9
+      6
+      0
+      5
+      1
+      8
+      7
+      0
+      7
+      2
+      1
+      1
+      3
+      4
+      9
+      9
+      9
+      9
+      9
+      9
+      8
+      3
+      7
+      2
+      9
+      7
+      8
+      0
+      4
+      9
+      9
+      5
+      1
+      0
+      5
+      9
+      7
+      3
+      1
+      7
+      3
+      2
+      8
+      1
+      6
+      0
+      9
+      6
+      3
+      1
+      8
+      5
+      9
+      5
+      0
+      2
+      4
+      4
+      5
+      9
+      4
+      5
+      5
+      3
+      4
+      6
+      9
+      0
+      8
+      3
+      0
+      2
+      6
+      4
+      2
+      5
+      2
+      2
+      3
+      0
+      8
+      2
+      5
+      3
+      3
+      4
+      4
+      6
+      8
+      5
+      0
+      3
+      5
+      2
+      6
+      1
+      9
+      3
+      1
+      1
+      8
+      8
+      1
+      7
+      1
+      0
+      1
+      0
+      0
+      0
+      3
+      1
+      3
+      7
+      8
+      3
+      8
+      7
+      5
+      2
+      8
+      8
+      6
+      5
+      8
+      7
+      5
+      3
+      3
+      2
+      0
+      8
+      3
+      8
+      1
+      4
+      2
+      0
+      6
+      1
+      7
+      1
+      7
+      7
+      6
+      6
+      9
+      1
+      4
+      7
+      3
+      0
+      3
+      5
+      9
+      8
+      2
+      5
+      3
+      4
+      9
+      0
+      4
+      2
+      8
+      7
+      5
+      5
+      4
+      6
+      8
+      7
+      3
+      1
+      1
+      5
+      9
+      5
+      6
+      2
+      8
+      6
+      3
+      8
+      8
+      2
+      3
+      5
+      3
+      7
+      8
+      7
+      5
+      9
+      3
+      7
+      5
+      1
+      9
+      5
+      7
+      7
+      8
+      1
+      8
+      5
+      7
+      7
+      3
+      0
+      5
+      3
+      2
+      1
+      7
+      1
+      2
+      2
+      6
+      8
+      0
+      6
+      6
+      1
+      3
+      0
+      0
+      1
+      9
+      2
+      7
+      8
+      7
+      6
+      6
+      1
+      1
+      1
+      9
+      5
+      9
+      0
+      9
+      2
+      1
+      6
+      4
+      2
+      0
+      1
+      9
+      8
+      9
+      3
+      8
+      0
+      9
+      5
+      2
+      5
+      7
+      2
+      0
+      1
+      0
+      6
+      5
+      4
+      8
+      5
+      8
+      6
+      3
+      2
+      7
+      8
+      8
+      6
+      5
+      9
+      3
+      6
+      1
+      5
+      3
+      3
+      8
+      1
+      8
+      2
+      7
+      9
+      6
+      8
+      2
+      3
+      0
+      3
+      0
+      1
+      9
+      5
+      2
+      0
+      3
+      5
+      3
+      0
+      1
+      8
+      5
+      2
+      9
+      6
+      8
+      9
+      9
+      5
+      7
+      7
+      3
+      6
+      2
+      2
+      5
+      9
+      9
+      4
+      1
+      3
+      8
+      9
+      1
+      2
+      4
+      9
+      7
+      2
+      1
+      7
+      7
+      5
+      2
+      8
+      3
+      4
+      7
+      9
+      1
+      3
+      1
+      5
+      1
+      5
+      5
+      7
+      4
+      8
+      5
+      7
+      2
+      4
+      2
+      4
+      5
+      4
+      1
+      5
+      0
+      6
+      9
+      5
+      9
+      5
+      0
+      8
+      2
+      9
+      5
+      3
+      3
+      1
+      1
+      6
+      8
+      6
+      1
+      7
+      2
+      7
+      8
+      5
+      5
+      8
+      8
+      9
+      0
+      7
+      5
+      0
+      9
+      8
+      3
+      8
+      1
+      7
+      5
+      4
+      6
+      3
+      7
+      4
+      6
+      4
+      9
+      3
+      9
+      3
+      1
+      9
+      2
+      5
+      5
+      0
+      6
+      0
+      4
+      0
+      0
+      9
+      2
+      7
+      7
+      0
+      1
+      6
+      7
+      1
+      1
+      3
+      9
+      0
+      0
+      9
+      8
+      4
+      8
+      8
+      2
+      4
+      0
+      1
+      2
+      8
+      5
+      8
+      3
+      6
+      1
+      6
+      0
+      3
+      5
+      6
+      3
+      7
+      0
+      7
+      6
+      6
+      0
+      1
+      0
+      4
+      7
+      1
+      0
+      1
+      8
+      1
+      9
+      4
+      2
+      9
+      5
+      5
+      5
+      9
+      6
+      1
+      9
+      8
+      9
+      4
+      6
+      7
+      6
+      7
+      8
+      3
+      7
+      4
+      4
+      9
+      4
+      4
+      8
+      2
+      5
+      5
+      3
+      7
+      9
+      7
+      7
+      4
+      7
+      2
+      6
+      8
+      4
+      7
+      1
+      0
+      4
+      0
+      4
+      7
+      5
+      3
+      4
+      6
+      4
+      6
+      2
+      0
+      8
+      0
+      4
+      6
+      6
+      8
+      4
+      2
+      5
+      9
+      0
+      6
+      9
+      4
+      9
+      1
+      2
+      9
+      3
+      3
+      1
+      3
+      6
+      7
+      7
+      0
+      2
+      8
+      9
+      8
+      9
+      1
+      5
+      2
+      1
+      0
+      4
+      7
+      5
+      2
+      1
+      6
+      2
+      0
+      5
+      6
+      9
+      6
+      6
+      0
+      2
+      4
+      0
+      5
+      8
+      0
+      3
+      8
+      1
+      5
+      0
+      1
+      9
+      3
+      5
+      1
+      1
+      2
+      5
+      3
+      3
+      8
+      2
+      4
+      3
+      0
+      0
+      3
+      5
+      5
+      8
+      7
+      6
+      4
+      0
+      2
+      4
+      7
+      4
+      9
+      6
+      4
+      7
+      3
+      2
+      6
+      3
+      9
+      1
+      4
+      1
+      9
+      9
+      2
+      7
+      2
+      6
+      0
+      4
+      2
+      6
+      9
+      9
+      2
+      2
+      7
+      9
+      6
+      7
+      8
+      2
+      3
+      5
+      4
+      7
+      8
+      1
+      6
+      3
+      6
+      0
+      0
+      9
+      3
+      4
+      1
+      7
+      2
+      1
+      6
+      4
+      1
+      2
+      1
+      9
+      9
+      2
+      4
+      5
+      8
+      6
+      3
+      1
+      5
+      0
+      3
+      0
+      2
+      8
+      6
+      1
+      8
+      2
+      9
+      7
+      4
+      5
+      5
+      5
+      7
+      0
+      6
+      7
+      4
+      9
+      8
+      3
+      8
+      5
+      0
+      5
+      4
+      9
+      4
+      5
+      8
+      8
+      5
+      8
+      6
+      9
+      2
+      6
+      9
+      9
+      5
+      6
+      9
+      0
+      9
+      2
+      7
+      2
+      1
+      0
+      7
+      9
+      7
+      5
+      0
+      9
+      3
+      0
+      2
+      9
+      5
+      5
+      3
+      2
+      1
+      1
+      6
+      5
+      3
+      4
+      4
+      9
+      8
+      7
+      2
+      0
+      2
+      7
+      5
+      5
+      9
+      6
+      0
+      2
+      3
+      6
+      4
+      8
+      0
+      6
+      6
+      5
+      4
+      9
+      9
+      1
+      1
+      9
+      8
+      8
+      1
+      8
+      3
+      4
+      7
+      9
+      7
+      7
+      5
+      3
+      5
+      6
+      6
+      3
+      6
+      9
+      8
+      0
+      7
+      4
+      2
+      6
+      5
+      4
+      2
+      5
+      2
+      7
+      8
+      6
+      2
+      5
+      5
+      1
+      8
+      1
+      8
+      4
+      1
+      7
+      5
+      7
+      4
+      6
+      7
+      2
+      8
+      9
+      0
+      9
+      7
+      7
+      7
+      7
+      2
+      7
+      9
+      3
+      8
+      0
+      0
+      0
+      8
+      1
+      6
+      4
+      7
+      0
+      6
+      0
+      0
+      1
+      6
+      1
+      4
+      5
+      2
+      4
+      9
+      1
+      9
+      2
+      1
+      7
+      3
+      2
+      1
+      7
+      2
+      1
+      4
+      7
+      7
+      2
+      3
+      5
+      0
+      1
+      4
+      1
+      4
+      4
+      1
+      9
+      7
+      3
+      5
+      6
+      8
+      5
+      4
+      8
+      1
+      6
+      1
+      3
+      6
+      1
+      1
+      5
+      7
+      3
+      5
+      2
+      5
+      5
+      2
+      1
+      3
+      3
+      4
+      7
+      5
+      7
+      4
+      1
+      8
+      4
+      9
+      4
+      6
+      8
+      4
+      3
+      8
+      5
+      2
+      3
+      3
+      2
+      3
+      9
+      0
+      7
+      3
+      9
+      4
+      1
+      4
+      3
+      3
+      3
+      4
+      5
+      4
+      7
+      7
+      6
+      2
+      4
+      1
+      6
+      8
+      6
+      2
+      5
+      1
+      8
+      9
+      8
+      3
+      5
+      6
+      9
+      4
+      8
+      5
+      5
+      6
+      2
+      0
+      9
+      9
+      2
+      1
+      9
+      2
+      2
+      2
+      1
+      8
+      4
+      2
+      7
+      2
+      5
+      5
+      0
+      2
+      5
+      4
+      2
+      5
+      6
+      8
+      8
+      7
+      6
+      7
+      1
+      7
+      9
+      0
+      4
+      9
+      4
+      6
+      0
+      1
+      6
+      5
+      3
+      4
+      6
+      6
+      8
+      0
+      4
+      9
+      8
+      8
+      6
+      2
+      7
+      2
+      3
+      2
+      7
+      9
+      1
+      7
+      8
+      6
+      0
+      8
+      5
+      7
+      8
+      4
+      3
+      8
+      3
+      8
+      2
+      7
+      9
+      6
+      7
+      9
+      7
+      6
+      6
+      8
+      1
+      4
+      5
+      4
+      1
+      0
+      0
+      9
+      5
+      3
+      8
+      8
+      3
+      7
+      8
+      6
+      3
+      6
+      0
+      9
+      5
+      0
+      6
+      8
+      0
+      0
+      6
+      4
+      2
+      2
+      5
+      1
+      2
+      5
+      2
+      0
+      5
+      1
+      1
+      7
+      3
+      9
+      2
+      9
+      8
+      4
+      8
+      9
+      6
+      0
+      8
+      4
+      1
+      2
+      8
+      4
+      8
+      8
+      6
+      2
+      6
+      9
+      4
+      5
+      6
+      0
+      4
+      2
+      4
+      1
+      9
+      6
+      5
+      2
+      8
+      5
+      0
+      2
+      2
+      2
+      1
+      0
+      6
+      6
+      1
+      1
+      8
+      6
+      3
+      0
+      6
+      7
+      4
+      4
+      2
+      7
+      8
+      6
+      2
+      2
+      0
+      3
+      9
+      1
+      9
+      4
+      9
+      4
+      5
+      0
+      4
+      7
+      1
+      2
+      3
+      7
+      1
+      3
+      7
+      8
+      6
+      9
+      6
+      0
+      9
+      5
+      6
+      3
+      6
+      4
+      3
+      7
+      1
+      9
+      1
+      7
+      2
+      8
+      7
+      4
+      6
+      7
+      7
+      6
+      4
+      6
+      5
+      7
+      5
+      7
+      3
+      9
+      6
+      2
+      4
+      1
+      3
+      8
+      9
+      0
+      8
+      6
+      5
+      8
+      3
+      2
+      6
+      4
+      5
+      9
+      9
+      5
+      8
+      1
+      3
+      3
+      9
+      0
+      4
+      7
+      8
+      0
+      2
+      7
+      5
+      9
+      0
+      0
+      9
+      9
+      4
+      6
+      5
+      7
+      6
+      4
+      0
+      7
+      8
+      9
+      5
+      1
+      2
+      6
+      9
+      4
+      6
+      8
+      3
+      9
+      8
+      3
+      5
+      2
+      5
+      9
+      5
+      7
+      0
+      9
+      8
+      2
+      5
+      8
+      2
+      2
+      6
+      2
+      0
+      5
+      2
+      2
+      4
+      8
+      9
+      4
+      0
+      7
+      7
+      2
+      6
+      7
+      1
+      9
+      4
+      7
+      8
+      2
+      6
+      8
+      4
+      8
+      2
+      6
+      0
+      1
+      4
+      7
+      6
+      9
+      9
+      0
+      9
+      0
+      2
+      6
+      4
+      0
+      1
+      3
+      6
+      3
+      9
+      4
+      4
+      3
+      7
+      4
+      5
+      5
+      3
+      0
+      5
+      0
+      6
+      8
+      2
+      0
+      3
+      4
+      9
+      6
+      2
+      5
+      2
+      4
+      5
+      1
+      7
+      4
+      9
+      3
+      9
+      9
+      6
+      5
+      1
+      4
+      3
+      1
+      4
+      2
+      9
+      8
+      0
+      9
+      1
+      9
+      0
+      6
+      5
+      9
+      2
+      5
+      0
+      9
+      3
+      7
+      2
+      2
+      1
+      6
+      9
+      6
+      4
+      6
+      1
+      5
+      1
+      5
+      7
+      0
+      9
+      8
+      5
+      8
+      3
+      8
+      7
+      4
+      1
+      0
+      5
+      9
+      7
+      8
+      8
+      5
+      9
+      5
+      9
+      7
+      7
+      2
+      9
+      7
+      5
+      4
+      9
+      8
+      9
+      3
+      0
+      1
+      6
+      1
+      7
+      5
+      3
+      9
+      2
+      8
+      4
+      6
+      8
+      1
+      3
+      8
+      2
+      6
+      8
+      6
+      8
+      3
+      8
+      6
+      8
+      9
+      4
+      2
+      7
+      7
+      4
+      1
+      5
+      5
+      9
+      9
+      1
+      8
+      5
+      5
+      9
+      2
+      5
+      2
+      4
+      5
+      9
+      5
+      3
+      9
+      5
+      9
+      4
+      3
+      1
+      0
+      4
+      9
+      9
+      7
+      2
+      5
+      2
+      4
+      6
+      8
+      0
+      8
+      4
+      5
+      9
+      8
+      7
+      2
+      7
+      3
+      6
+      4
+      4
+      6
+      9
+      5
+      8
+      4
+      8
+      6
+      5
+      3
+      8
+      3
+      6
+      7
+      3
+      6
+      2
+      2
+      2
+      6
+      2
+      6
+      0
+      9
+      9
+      1
+      2
+      4
+      6
+      0
+      8
+      0
+      5
+      1
+      2
+      4
+      3
+      8
+      8
+      4
+      3
+      9
+      0
+      4
+      5
+      1
+      2
+      4
+      4
+      1
+      3
+      6
+      5
+      4
+      9
+      7
+      6
+      2
+      7
+      8
+      0
+      7
+      9
+      7
+      7
+      1
+      5
+      6
+      9
+      1
+      4
+      3
+      5
+      9
+      9
+      7
+      7
+      0
+      0
+      1
+      2
+      9
+      6
+      1
+      6
+      0
+      8
+      9
+      4
+      4
+      1
+      6
+      9
+      4
+      8
+      6
+      8
+      5
+      5
+      5
+      8
+      4
+      8
+      4
+      0
+      6
+      3
+      5
+      3
+      4
+      2
+      2
+      0
+      7
+      2
+      2
+      2
+      5
+      8
+      2
+      8
+      4
+      8
+      8
+      6
+      4
+      8
+      1
+      5
+      8
+      4
+      5
+      6
+      0
+      2
+      8
+      5
+      0
+      6
+      0
+      1
+      6
+      8
+      4
+      2
+      7
+      3
+      9
+      4
+      5
+      2
+      2
+      6
+      7
+      4
+      6
+      7
+      6
+      7
+      8
+      8
+      9
+      5
+      2
+      5
+      2
+      1
+      3
+      8
+      5
+      2
+      2
+      5
+      4
+      9
+      9
+      5
+      4
+      6
+      6
+      6
+      7
+      2
+      7
+      8
+      2
+      3
+      9
+      8
+      6
+      4
+      5
+      6
+      5
+      9
+      6
+      1
+      1
+      6
+      3
+      5
+      4
+      8
+      8
+      6
+      2
+      3
+      0
+      5
+      7
+      7
+      4
+      5
+      6
+      4
+      9
+      8
+      0
+      3
+      5
+      5
+      9
+      3
+      6
+      3
+      4
+      5
+      6
+      8
+      1
+      7
+      4
+      3
+      2
+      4
+      1
+      1
+      2
+      5
+      1
+      5
+      0
+      7
+      6
+      0
+      6
+      9
+      4
+      7
+      9
+      4
+      5
+      1
+      0
+      9
+      6
+      5
+      9
+      6
+      0
+      9
+      4
+      0
+      2
+      5
+      2
+      2
+      8
+      8
+      7
+      9
+      7
+      1
+      0
+      8
+      9
+      3
+      1
+      4
+      5
+      6
+      6
+      9
+      1
+      3
+      6
+      8
+      6
+      7
+      2
+      2
+      8
+      7
+      4
+      8
+      9
+      4
+      0
+      5
+      6
+      0
+      1
+      0
+      1
+      5
+      0
+      3
+      3
+      0
+      8
+      6
+      1
+      7
+      9
+      2
+      8
+      6
+      8
+      0
+      9
+      2
+      0
+      8
+      7
+      4
+      7
+      6
+      0
+      9
+      1
+      7
+      8
+      2
+      4
+      9
+      3
+      8
+      5
+      8
+      9
+      0
+      0
+      9
+      7
+      1
+      4
+      9
+      0
+      9
+      6
+      7
+      5
+      9
+      8
+      5
+      2
+      6
+      1
+      3
+      6
+      5
+      5
+      4
+      9
+      7
+      8
+      1
+      8
+      9
+      3
+      1
+      2
+      9
+      7
+      8
+      4
+      8
+      2
+      1
+      6
+      8
+      2
+      9
+      9
+      8
+      9
+      4
+      8
+      7
+      2
+      2
+      6
+      5
+      8
+      8
+      0
+      4
+      8
+      5
+      7
+      5
+      6
+      4
+      0
+      1
+      4
+      2
+      7
+      0
+      4
+      7
+      7
+      5
+      5
+      5
+      1
+      3
+      2
+      3
+      7
+      9
+      6
+      4
+      1
+      4
+      5
+      1
+      5
+      2
+      3
+      7
+      4
+      6
+      2
+      3
+      4
+      3
+      6
+      4
+      5
+      4
+      2
+      8
+      5
+      8
+      4
+      4
+      4
+      7
+      9
+      5
+      2
+      6
+      5
+      8
+      6
+      7
+      8
+      2
+      1
+      0
+      5
+      1
+      1
+      4
+      1
+      3
+      5
+      4
+      7
+      3
+      5
+      7
+      3
+      9
+      5
+      2
+      3
+      1
+      1
+      3
+      4
+      2
+      7
+      1
+      6
+      6
+      1
+      0
+      2
+      1
+      3
+      5
+      9
+      6
+      9
+      5
+      3
+      6
+      2
+      3
+      1
+      4
+      4
+      2
+      9
+      5
+      2
+      4
+      8
+      4
+      9
+      3
+      7
+      1
+      8
+      7
+      1
+      1
+      0
+      1
+      4
+      5
+      7
+      6
+      5
+      4
+      0
+      3
+      5
+      9
+      0
+      2
+      7
+      9
+      9
+      3
+      4
+      4
+      0
+      3
+      7
+      4
+      2
+      0
+      0
+      7
+      3
+      1
+      0
+      5
+      7
+      8
+      5
+      3
+      9
+      0
+      6
+      2
+      1
+      9
+      8
+      3
+      8
+      7
+      4
+      4
+      7
+      8
+      0
+      8
+      4
+      7
+      8
+      4
+      8
+      9
+      6
+      8
+      3
+      3
+      2
+      1
+      4
+      4
+      5
+      7
+      1
+      3
+      8
+      6
+      8
+      7
+      5
+      1
+      9
+      4
+      3
+      5
+      0
+      6
+      4
+      3
+      0
+      2
+      1
+      8
+      4
+      5
+      3
+      1
+      9
+      1
+      0
+      4
+      8
+      4
+      8
+      1
+      0
+      0
+      5
+      3
+      7
+      0
+      6
+      1
+      4
+      6
+      8
+      0
+      6
+      7
+      4
+      9
+      1
+      9
+      2
+      7
+      8
+      1
+      9
+      1
+      1
+      9
+      7
+      9
+      3
+      9
+      9
+      5
+      2
+      0
+      6
+      1
+      4
+      1
+      9
+      6
+      6
+      3
+      4
+      2
+      8
+      7
+      5
+      4
+      4
+      4
+      0
+      6
+      4
+      3
+      7
+      4
+      5
+      1
+      2
+      3
+      7
+      1
+      8
+      1
+      9
+      2
+      1
+      7
+      9
+      9
+      9
+      8
+      3
+      9
+      1
+      0
+      1
+      5
+      9
+      1
+      9
+      5
+      6
+      1
+      8
+      1
+      4
+      6
+      7
+      5
+      1
+      4
+      2
+      6
+      9
+      1
+      2
+      3
+      9
+      7
+      4
+      8
+      9
+      4
+      0
+      9
+      0
+      7
+      1
+      8
+      6
+      4
+      9
+      4
+      2
+      3
+      1
+      9
+      6
+      1
+      5
+      6
+      7
+      9
+      4
+      5
+      2
+      0
+      8
+      0
+      9
+      5
+      1
+      4
+      6
+      5
+      5
+      0
+      2
+      2
+      5
+      2
+      3
+      1
+      6
+      0
+      3
+      8
+      8
+      1
+      9
+      3
+      0
+      1
+      4
+      2
+      0
+      9
+      3
+      7
+      6
+      2
+      1
+      3
+      7
+      8
+      5
+      5
+      9
+      5
+      6
+      6
+      3
+      8
+      9
+      3
+      7
+      7
+      8
+      7
+      0
+      8
+      3
+      0
+      3
+      9
+      0
+      6
+      9
+      7
+      9
+      2
+      0
+      7
+      7
+      3
+      4
+      6
+      7
+      2
+      2
+      1
+      8
+      2
+      5
+      6
+      2
+      5
+      9
+      9
+      6
+      6
+      1
+      5
+      0
+      1
+      4
+      2
+      1
+      5
+      0
+      3
+      0
+      6
+      8
+      0
+      3
+      8
+      4
+      4
+      7
+      7
+      3
+      4
+      5
+      4
+      9
+      2
+      0
+      2
+      6
+      0
+      5
+      4
+      1
+      4
+      6
+      6
+      5
+      9
+      2
+      5
+      2
+      0
+      1
+      4
+      9
+      7
+      4
+      4
+      2
+      8
+      5
+      0
+      7
+      3
+      2
+      5
+      1
+      8
+      6
+      6
+      6
+      0
+      0
+      2
+      1
+      3
+      2
+      4
+      3
+      4
+      0
+      8
+      8
+      1
+      9
+      0
+      7
+      1
+      0
+      4
+      8
+      6
+      3
+      3
+      1
+      7
+      3
+      4
+      6
+      4
+      9
+      6
+      5
+      1
+      4
+      5
+      3
+      9
+      0
+      5
+      7
+      9
+      6
+      2
+      6
+      8
+      5
+      6
+      1
+      0
+      0
+      5
+      5
+      0
+      8
+      1
+      0
+      6
+      6
+      5
+      8
+      7
+      9
+      6
+      9
+      9
+      8
+      1
+      6
+      3
+      5
+      7
+      4
+      7
+      3
+      6
+      3
+      8
+      4
+      0
+      5
+      2
+      5
+      7
+      1
+      4
+      5
+      9
+      1
+      0
+      2
+      8
+      9
+      7
+      0
+      6
+      4
+      1
+      4
+      0
+      1
+      1
+      0
+      9
+      7
+      1
+      2
+      0
+      6
+      2
+      8
+      0
+      4
+      3
+      9
+      0
+      3
+      9
+      7
+      5
+      9
+      5
+      1
+      5
+      6
+      7
+      7
+      1
+      5
+      7
+      7
+      0
+      0
+      4
+      2
+      0
+      3
+      3
+      7
+      8
+      6
+      9
+      9
+      3
+      6
+      0
+      0
+      7
+      2
+      3
+      0
+      5
+      5
+      8
+      7
+      6
+      3
+      1
+      7
+      6
+      3
+      5
+      9
+      4
+      2
+      1
+      8
+      7
+      3
+      1
+      2
+      5
+      1
+      4
+      7
+      1
+      2
+      0
+      5
+      3
+      2
+      9
+      2
+      8
+      1
+      9
+      1
+      8
+      2
+      6
+      1
+      8
+      6
+      1
+      2
+      5
+      8
+      6
+      7
+      3
+      2
+      1
+      5
+      7
+      9
+      1
+      9
+      8
+      4
+      1
+      4
+      8
+      4
+      8
+      8
+      2
+      9
+      1
+      6
+      4
+      4
+      7
+      0
+      6
+      0
+      9
+      5
+      7
+      5
+      2
+      7
+      0
+      6
+      9
+      5
+      7
+      2
+      2
+      0
+      9
+      1
+      7
+      5
+      6
+      7
+      1
+      1
+      6
+      7
+      2
+      2
+      9
+      1
+      0
+      9
+      8
+      1
+      6
+      9
+      0
+      9
+      1
+      5
+      2
+      8
+      0
+      1
+      7
+      3
+      5
+      0
+      6
+      7
+      1
+      2
+      7
+      4
+      8
+      5
+      8
+      3
+      2
+      2
+      2
+      8
+      7
+      1
+      8
+      3
+      5
+      2
+      0
+      9
+      3
+      5
+      3
+      9
+      6
+      5
+      7
+      2
+      5
+      1
+      2
+      1
+      0
+      8
+      3
+      5
+      7
+      9
+      1
+      5
+      1
+      3
+      6
+      9
+      8
+      8
+      2
+      0
+      9
+      1
+      4
+      4
+      4
+      2
+      1
+      0
+      0
+      6
+      7
+      5
+      1
+      0
+      3
+      3
+      4
+      6
+      7
+      1
+      1
+      0
+      3
+      1
+      4
+      1
+      2
+      6
+      7
+      1
+      1
+      1
+      3
+      6
+      9
+      9
+      0
+      8
+      6
+      5
+      8
+      5
+      1
+      6
+      3
+      9
+      8
+      3
+      1
+      5
+      0
+      1
+      9
+      7
+      0
+      1
+      6
+      5
+      1
+      5
+      1
+      1
+      6
+      8
+      5
+      1
+      7
+      1
+      4
+      3
+      7
+      6
+      5
+      7
+      6
+      1
+      8
+      3
+      5
+      1
+      5
+      5
+      6
+      5
+      0
+      8
+      8
+      4
+      9
+      0
+      9
+      9
+      8
+      9
+      8
+      5
+      9
+      9
+      8
+      2
+      3
+      8
+      7
+      3
+      4
+      5
+      5
+      2
+      8
+      3
+      3
+      1
+      6
+      3
+      5
+      5
+      0
+      7
+      6
+      4
+      7
+      9
+      1
+      8
+      5
+      3
+      5
+      8
+      9
+      3
+      2
+      2
+      6
+      1
+      8
+      5
+      4
+      8
+      9
+      6
+      3
+      2
+      1
+      3
+      2
+      9
+      3
+      3
+      0
+      8
+      9
+      8
+      5
+      7
+      0
+      6
+      4
+      2
+      0
+      4
+      6
+      7
+      5
+      2
+      5
+      9
+      0
+      7
+      0
+      9
+      1
+      5
+      4
+      8
+      1
+      4
+      1
+      6
+      5
+      4
+      9
+      8
+      5
+      9
+      4
+      6
+      1
+      6
+      3
+      7
+      1
+      8
+      0
+      2
+      7
+      0
+      9
+      8
+      1
+      9
+      9
+      4
+      3
+      0
+      9
+      9
+      2
+      4
+      4
+      8
+      8
+      9
+      5
+      7
+      5
+      7
+      1
+      2
+      8
+      2
+      8
+      9
+      0
+      5
+      9
+      2
+      3
+      2
+      3
+      3
+      2
+      6
+      0
+      9
+      7
+      2
+      9
+      9
+      7
+      1
+      2
+      0
+      8
+      4
+      4
+      3
+      3
+      5
+      7
+      3
+      2
+      6
+      5
+      4
+      8
+      9
+      3
+      8
+      2
+      3
+      9
+      1
+      1
+      9
+      3
+      2
+      5
+      9
+      7
+      4
+      6
+      3
+      6
+      6
+      7
+      3
+      0
+      5
+      8
+      3
+      6
+      0
+      4
+      1
+      4
+      2
+      8
+      1
+      3
+      8
+      8
+      3
+      0
+      3
+      2
+      0
+      3
+      8
+      2
+      4
+      9
+      0
+      3
+      7
+      5
+      8
+      9
+      8
+      5
+      2
+      4
+      3
+      7
+      4
+      4
+      1
+      7
+      0
+      2
+      9
+      1
+      3
+      2
+      7
+      6
+      5
+      6
+      1
+      8
+      0
+      9
+      3
+      7
+      7
+      3
+      4
+      4
+      4
+      0
+      3
+      0
+      7
+      0
+      7
+      4
+      6
+      9
+      2
+      1
+      1
+      2
+      0
+      1
+      9
+      1
+      3
+      0
+      2
+      0
+      3
+      3
+      0
+      3
+      8
+      0
+      1
+      9
+      7
+      6
+      2
+      1
+      1
+      0
+      1
+      1
+      0
+      0
+      4
+      4
+      9
+      2
+      9
+      3
+      2
+      1
+      5
+      1
+      6
+      0
+      8
+      4
+      2
+      4
+      4
+      4
+      8
+      5
+      9
+      6
+      3
+      7
+      6
+      6
+      9
+      8
+      3
+      8
+      9
+      5
+      2
+      2
+      8
+      6
+      8
+      4
+      7
+      8
+      3
+      1
+      2
+      3
+      5
+      5
+      2
+      6
+      5
+      8
+      2
+      1
+      3
+      1
+      4
+      4
+      9
+      5
+      7
+      6
+      8
+      5
+      7
+      2
+      6
+      2
+      4
+      3
+      3
+      4
+      4
+      1
+      8
+      9
+      3
+      0
+      3
+      9
+      6
+      8
+      6
+      4
+      2
+      6
+      2
+      4
+      3
+      4
+      1
+      0
+      7
+      7
+      3
+      2
+      2
+      6
+      9
+      7
+      8
+      0
+      2
+      8
+      0
+      7
+      3
+      1
+      8
+      9
+      1
+      5
+      4
+      4
+      1
+      1
+      0
+      1
+      0
+      4
+      4
+      6
+      8
+      2
+      3
+      2
+      5
+      2
+      7
+      1
+      6
+      2
+      0
+      1
+      0
+      5
+      2
+      6
+      5
+      2
+      2
+      7
+      2
+      1
+      1
+      1
+      6
+      6
+      0
+      3
+      9
+      6
+      6
+      6
+      5
+      5
+      7
+      3
+      0
+      9
+      2
+      5
+      4
+      7
+      1
+      1
+      0
+      5
+      5
+      7
+      8
+      5
+      3
+      7
+      6
+      3
+      4
+      6
+      6
+      8
+      2
+      0
+      6
+      5
+      3
+      1
+      0
+      9
+      8
+      9
+      6
+      5
+      2
+      6
+      9
+      1
+      8
+      6
+      2
+      0
+      5
+      6
+      4
+      7
+      6
+      9
+      3
+      1
+      2
+      5
+      7
+      0
+      5
+      8
+      6
+      3
+      5
+      6
+      6
+      2
+      0
+      1
+      8
+      5
+      5
+      8
+      1
+      0
+      0
+      7
+      2
+      9
+      3
+      6
+      0
+      6
+      5
+      9
+      8
+      7
+      6
+      4
+      8
+      6
+      1
+      1
+      7
+      9
+      1
+      0
+      4
+      5
+      3
+      3
+      4
+      8
+      8
+      5
+      0
+      3
+      4
+      6
+      1
+      1
+      3
+      6
+      5
+      7
+      6
+      8
+      6
+      7
+      5
+      3
+      2
+      4
+      9
+      4
+      4
+      1
+      6
+      6
+      8
+      0
+      3
+      9
+      6
+      2
+      6
+      5
+      7
+      9
+      7
+      8
+      7
+      7
+      1
+      8
+      5
+      5
+      6
+      0
+      8
+      4
+      5
+      5
+      2
+      9
+      6
+      5
+      4
+      1
+      2
+      6
+      6
+      5
+      4
+      0
+      8
+      5
+      3
+      0
+      6
+      1
+      4
+      3
+      4
+      4
+      4
+      3
+      1
+      8
+      5
+      8
+      6
+      7
+      6
+      9
+      7
+      5
+      1
+      4
+      5
+      6
+      6
+      1
+      4
+      0
+      6
+      8
+      0
+      0
+      7
+      0
+      0
+      2
+      3
+      7
+      8
+      7
+      7
+      6
+      5
+      9
+      1
+      3
+      4
+      4
+      0
+      1
+      7
+      1
+      2
+      7
+      4
+      9
+      4
+      7
+      0
+      4
+      2
+      0
+      5
+      6
+      2
+      2
+      3
+      0
+      5
+      3
+      8
+      9
+      9
+      4
+      5
+      6
+      1
+      3
+      1
+      4
+      0
+      7
+      1
+      1
+      2
+      7
+      0
+      0
+      0
+      4
+      0
+      7
+      8
+      5
+      4
+      7
+      3
+      3
+      2
+      6
+      9
+      9
+      3
+      9
+      0
+      8
+      1
+      4
+      5
+      4
+      6
+      6
+      4
+      6
+      4
+      5
+      8
+      8
+      0
+      7
+      9
+      7
+      2
+      7
+      0
+      8
+      2
+      6
+      6
+      8
+      3
+      0
+      6
+      3
+      4
+      3
+      2
+      8
+      5
+      8
+      7
+      8
+      5
+      6
+      9
+      8
+      3
+      0
+      5
+      2
+      3
+      5
+      8
+      0
+      8
+      9
+      3
+      3
+      0
+      6
+      5
+      7
+      5
+      7
+      4
+      0
+      6
+      7
+      9
+      5
+      4
+      5
+      7
+      1
+      6
+      3
+      7
+      7
+      5
+      2
+      5
+      4
+      2
+      0
+      2
+      1
+      1
+      4
+      9
+      5
+      5
+      7
+      6
+      1
+      5
+      8
+      1
+      4
+      0
+      0
+      2
+      5
+      0
+      1
+      2
+      6
+      2
+      2
+      8
+      5
+      9
+      4
+      1
+      3
+      0
+      2
+      1
+      6
+      4
+      7
+      1
+      5
+      5
+      0
+      9
+      7
+      9
+      2
+      5
+      9
+      2
+      3
+      0
+      9
+      9
+      0
+      7
+      9
+      6
+      5
+      4
+      7
+      3
+      7
+      6
+      1
+      2
+      5
+      5
+      1
+      7
+      6
+      5
+      6
+      7
+      5
+      1
+      3
+      5
+      7
+      5
+      1
+      7
+      8
+      2
+      9
+      6
+      6
+      6
+      4
+      5
+      4
+      7
+      7
+      9
+      1
+      7
+      4
+      5
+      0
+      1
+      1
+      2
+      9
+      9
+      6
+      1
+      4
+      8
+      9
+      0
+      3
+      0
+      4
+      6
+      3
+      9
+      9
+      4
+      7
+      1
+      3
+      2
+      9
+      6
+      2
+      1
+      0
+      7
+      3
+      4
+      0
+      4
+      3
+      7
+      5
+      1
+      8
+      9
+      5
+      7
+      3
+      5
+      9
+      6
+      1
+      4
+      5
+      8
+      9
+      0
+      1
+      9
+      3
+      8
+      9
+      7
+      1
+      3
+      1
+      1
+      1
+      7
+      9
+      0
+      4
+      2
+      9
+      7
+      8
+      2
+      8
+      5
+      6
+      4
+      7
+      5
+      0
+      3
+      2
+      0
+      3
+      1
+      9
+      8
+      6
+      9
+      1
+      5
+      1
+      4
+      0
+      2
+      8
+      7
+      0
+      8
+      0
+      8
+      5
+      9
+      9
+      0
+      4
+      8
+      0
+      1
+      0
+      9
+      4
+      1
+      2
+      1
+      4
+      7
+      2
+      2
+      1
+      3
+      1
+      7
+      9
+      4
+      7
+      6
+      4
+      7
+      7
+      7
+      2
+      6
+      2
+      2
+      4
+      1
+      4
+      2
+      5
+      4
+      8
+      5
+      4
+      5
+      4
+      0
+      3
+      3
+      2
+      1
+      5
+      7
+      1
+      8
+      5
+      3
+      0
+      6
+      1
+      4
+      2
+      2
+      8
+      8
+      1
+      3
+      7
+      5
+      8
+      5
+      0
+      4
+      3
+      0
+      6
+      3
+      3
+      2
+      1
+      7
+      5
+      1
+      8
+      2
+      9
+      7
+      9
+      8
+      6
+      6
+      2
+      2
+      3
+      7
+      1
+      7
+      2
+      1
+      5
+      9
+      1
+      6
+      0
+      7
+      7
+      1
+      6
+      6
+      9
+      2
+      5
+      4
+      7
+      4
+      8
+      7
+      3
+      8
+      9
+      8
+      6
+      6
+      5
+      4
+      9
+      4
+      9
+      4
+      5
+      0
+      1
+      1
+      4
+      6
+      5
+      4
+      0
+      6
+      2
+      8
+      4
+      3
+      3
+      6
+      6
+      3
+      9
+      3
+      7
+      9
+      0
+      0
+      3
+      9
+      7
+      6
+      9
+      2
+      6
+      5
+      6
+      7
+      2
+      1
+      4
+      6
+      3
+      8
+      5
+      3
+      0
+      6
+      7
+      3
+      6
+      0
+      9
+      6
+      5
+      7
+      1
+      2
+      0
+      9
+      1
+      8
+      0
+      7
+      6
+      3
+      8
+      3
+      2
+      7
+      1
+      6
+      6
+      4
+      1
+      6
+      2
+      7
+      4
+      8
+      8
+      8
+      8
+      0
+      0
+      7
+      8
+      6
+      9
+      2
+      5
+      6
+      0
+      2
+      9
+      0
+      2
+      2
+      8
+      4
+      7
+      2
+      1
+      0
+      4
+      0
+      3
+      1
+      7
+      2
+      1
+      1
+      8
+      6
+      0
+      8
+      2
+      0
+      4
+      1
+      9
+      0
+      0
+      0
+      4
+      2
+      2
+      9
+      6
+      6
+      1
+      7
+      1
+      1
+      9
+      6
+      3
+      7
+      7
+      9
+      2
+      1
+      3
+      3
+      7
+      5
+      7
+      5
+      1
+      1
+      4
+      9
+      5
+      9
+      5
+      0
+      1
+      5
+      6
+      6
+      0
+      4
+      9
+      6
+      3
+      1
+      8
+      6
+      2
+      9
+      4
+      7
+      2
+      6
+      5
+      4
+      7
+      3
+      6
+      4
+      2
+      5
+      2
+      3
+      0
+      8
+      1
+      7
+      7
+      0
+      3
+      6
+      7
+      5
+      1
+      5
+      9
+      0
+      6
+      7
+      3
+      5
+      0
+      2
+      3
+      5
+      0
+      7
+      2
+      8
+      3
+      5
+      4
+      0
+      5
+      6
+      7
+      0
+      4
+      0
+      3
+      8
+      6
+      7
+      4
+      3
+      5
+      1
+      3
+      6
+      2
+      2
+      2
+      2
+      4
+      7
+      7
+      1
+      5
+      8
+      9
+      1
+      5
+      0
+      4
+      9
+      5
+      3
+      0
+      9
+      8
+      4
+      4
+      4
+      8
+      9
+      3
+      3
+      3
+      0
+      9
+      6
+      3
+      4
+      0
+      8
+      7
+      8
+      0
+      7
+      6
+      9
+      3
+      2
+      5
+      9
+      9
+      3
+      9
+      7
+      8
+      0
+      5
+      4
+      1
+      9
+      3
+      4
+      1
+      4
+      4
+      7
+      3
+      7
+      7
+      4
+      4
+      1
+      8
+      4
+      2
+      6
+      3
+      1
+      2
+      9
+      8
+      6
+      0
+      8
+      0
+      9
+      9
+      8
+      8
+      8
+      6
+      8
+      7
+      4
+      1
+      3
+      2
+      6
+      0
+      4
+      7
+      2
diff --git a/src/test/org/apache/commons/math/stat/univariate/InteractionTest.java b/src/test/org/apache/commons/math/stat/univariate/InteractionTest.java
new file mode 100644
index 0000000..a9384f8
--- /dev/null
+++ b/src/test/org/apache/commons/math/stat/univariate/InteractionTest.java
@@ -0,0 +1,129 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.commons.math.stat.univariate;
+
+import org.apache.commons.math.stat.univariate.moment.FourthMoment;
+import org.apache.commons.math.stat.univariate.moment.Kurtosis;
+import org.apache.commons.math.stat.univariate.moment.Mean;
+import org.apache.commons.math.stat.univariate.moment.Skewness;
+import org.apache.commons.math.stat.univariate.moment.Variance;
+
+import junit.framework.TestCase;
+
+/**
+ * @version $Revision: 1.7 $ $Date: 2003/11/14 22:22:23 $
+ */
+public class InteractionTest extends TestCase {
+
+    protected double mean = 12.40454545454550;
+    protected double var = 10.00235930735930;
+    protected double skew = 1.437423729196190;
+    protected double kurt = 2.377191264804700;
+
+    protected double tolerance = 10E-12;
+
+    protected double[] testArray =
+        {
+            12.5,
+            12,
+            11.8,
+            14.2,
+            14.9,
+            14.5,
+            21,
+            8.2,
+            10.3,
+            11.3,
+            14.1,
+            9.9,
+            12.2,
+            12,
+            12.1,
+            11,
+            19.8,
+            11,
+            10,
+            8.8,
+            9,
+            12.3 };
+
+    public InteractionTest(String name) {
+        super(name);
+    }
+
+
+    public void testInteraction() {
+        
+        FourthMoment m4 = new FourthMoment();
+        Mean m = new Mean(m4);
+        Variance v = new Variance(m4);
+        Skewness s= new Skewness(m4);
+        Kurtosis k = new Kurtosis(m4);
+
+        for (int i = 0; i < testArray.length; i++){
+            m4.increment(testArray[i]);
+            m.increment(testArray[i]);
+            v.increment(testArray[i]);
+            s.increment(testArray[i]);
+            k.increment(testArray[i]);
+        }
+        
+        assertEquals(mean,m.getResult(),tolerance);
+        assertEquals(var,v.getResult(),tolerance);
+        assertEquals(skew ,s.getResult(),tolerance);
+        assertEquals(kurt,k.getResult(),tolerance);
+
+    }
+
+}
diff --git a/src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java b/src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java
new file mode 100644
index 0000000..e390bac
--- /dev/null
+++ b/src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java
@@ -0,0 +1,91 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.commons.math.stat.univariate;
+
+
+/**
+ * Test cases for the {@link UnivariateStatistic} class.
+ * @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:23 $
+ */
+public abstract class StorelessUnivariateStatisticAbstractTest
+    extends UnivariateStatisticAbstractTest {
+
+    public StorelessUnivariateStatisticAbstractTest(String name) {
+        super(name);
+    }
+
+    public abstract UnivariateStatistic getUnivariateStatistic();
+
+    public abstract double expectedValue();
+
+    public void testIncrementation() throws Exception {
+
+        StorelessUnivariateStatistic statistic =
+            (StorelessUnivariateStatistic) getUnivariateStatistic();
+
+        statistic.clear();
+
+        for (int i = 0; i < testArray.length; i++) {
+            statistic.increment(testArray[i]);
+        }
+
+        assertEquals(expectedValue(), statistic.getResult(), getTolerance());
+        
+        statistic.clear();
+
+        assertTrue(Double.isNaN(statistic.getResult()));
+        
+    }
+
+}
diff --git a/src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java b/src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java
new file mode 100644
index 0000000..3383a6c
--- /dev/null
+++ b/src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java
@@ -0,0 +1,129 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.commons.math.stat.univariate;
+
+import junit.framework.TestCase;
+
+/**
+ * Test cases for the {@link UnivariateStatistic} class.
+ * @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:23 $
+ */
+public abstract class UnivariateStatisticAbstractTest extends TestCase {
+
+    protected double mean = 12.40454545454550;
+    protected double geoMean = 12.070589161633011;
+
+    protected double var = 10.00235930735930;
+    protected double std = Math.sqrt(var);
+    protected double skew = 1.437423729196190;
+    protected double kurt = 2.377191264804700;
+
+    protected double min = 8.2;
+    protected double max = 21;
+    protected double median = 12;
+    protected double percentile5 = 8.81;
+    protected double percentile95 = 19.555;
+
+    protected double product = 628096400563833200000000.0;
+    protected double sumLog = 54.79698061164520;
+    protected double sumSq = 3595.250;
+    protected double sum = 272.90;
+
+    protected double tolerance = 10E-12;
+
+    protected double[] testArray =
+        {
+            12.5,
+            12,
+            11.8,
+            14.2,
+            14.9,
+            14.5,
+            21,
+            8.2,
+            10.3,
+            11.3,
+            14.1,
+            9.9,
+            12.2,
+            12,
+            12.1,
+            11,
+            19.8,
+            11,
+            10,
+            8.8,
+            9,
+            12.3 };
+
+    public UnivariateStatisticAbstractTest(String name) {
+        super(name);
+    }
+
+    public abstract UnivariateStatistic getUnivariateStatistic();
+
+    public abstract double expectedValue();
+
+    public double getTolerance() {
+        return tolerance;
+    }
+
+    public void testEvaluation() throws Exception {
+        assertEquals(
+            expectedValue(),
+            getUnivariateStatistic().evaluate(testArray),
+            getTolerance());
+    }
+    
+}
diff --git a/src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java b/src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java
new file mode 100644
index 0000000..c8e7cda
--- /dev/null
+++ b/src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java
@@ -0,0 +1,101 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.commons.math.stat.univariate.moment;
+
+import junit.framework.Test;
+import junit.framework.TestSuite;
+
+import org.apache.commons.math.stat.univariate.StorelessUnivariateStatisticAbstractTest;
+import org.apache.commons.math.stat.univariate.UnivariateStatistic;
+
+/**
+ * Test cases for the {@link UnivariateStatistic} class.
+ * @version $Revision: 1.7 $ $Date: 2003/11/14 22:22:21 $
+ */
+public class GeometricMeanTest extends StorelessUnivariateStatisticAbstractTest{
+
+    protected GeometricMean stat;
+    
+    /**
+     * @param name
+     */
+    public GeometricMeanTest(String name) {
+        super(name);
+    }
+
+    public static Test suite() {
+        TestSuite suite = new TestSuite(GeometricMeanTest.class);
+        suite.setName("Mean  Tests");
+        return suite;
+    }
+    
+    /* (non-Javadoc)
+     * @see org.apache.commons.math.stat.univariate.UnivariateStatisticAbstractTest#getUnivariateStatistic()
+     */
+    public UnivariateStatistic getUnivariateStatistic() {
+       
+        if(stat == null)
+            stat = new GeometricMean();
+            
+        return stat;
+    }
+
+    /* (non-Javadoc)
+     * @see org.apache.commons.math.stat.univariate.UnivariateStatisticAbstractTest#expectedValue()
+     */
+    public double expectedValue() {
+        return this.geoMean;
+    }
+
+}
diff --git a/src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java b/src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java
new file mode 100644
index 0000000..7eee98b
--- /dev/null
+++ b/src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java
@@ -0,0 +1,101 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.commons.math.stat.univariate.moment;
+
+import junit.framework.Test;
+import junit.framework.TestSuite;
+
+import org.apache.commons.math.stat.univariate.StorelessUnivariateStatisticAbstractTest;
+import org.apache.commons.math.stat.univariate.UnivariateStatistic;
+
+/**
+ * Test cases for the {@link UnivariateStatistic} class.
+ * @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:21 $
+ */
+public class KurtosisTest extends StorelessUnivariateStatisticAbstractTest{
+
+    protected Kurtosis stat;
+    
+    /**
+     * @param name
+     */
+    public KurtosisTest(String name) {
+        super(name);
+    }
+    
+    public static Test suite() {
+        TestSuite suite = new TestSuite(KurtosisTest.class);
+        suite.setName("Kurtosis  Tests");
+        return suite;
+    }
+
+    /* (non-Javadoc)
+     * @see org.apache.commons.math.stat.univariate.UnivariateStatisticAbstractTest#getUnivariateStatistic()
+     */
+    public UnivariateStatistic getUnivariateStatistic() {
+       
+        if(stat == null)
+            stat = new Kurtosis();
+            
+        return stat;
+    }
+
+    /* (non-Javadoc)
+     * @see org.apache.commons.math.stat.univariate.UnivariateStatisticAbstractTest#expectedValue()
+     */
+    public double expectedValue() {
+        return this.kurt;
+    }
+
+}
diff --git a/src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java b/src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java
new file mode 100644
index 0000000..c252b87
--- /dev/null
+++ b/src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java
@@ -0,0 +1,101 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.commons.math.stat.univariate.moment;
+
+import junit.framework.Test;
+import junit.framework.TestSuite;
+
+import org.apache.commons.math.stat.univariate.StorelessUnivariateStatisticAbstractTest;
+import org.apache.commons.math.stat.univariate.UnivariateStatistic;
+
+/**
+ * Test cases for the {@link UnivariateStatistic} class.
+ * @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:21 $
+ */
+public class MeanTest extends StorelessUnivariateStatisticAbstractTest{
+
+    protected Mean stat;
+    
+    /**
+     * @param name
+     */
+    public MeanTest(String name) {
+        super(name);
+    }
+
+    public static Test suite() {
+        TestSuite suite = new TestSuite(MeanTest.class);
+        suite.setName("Mean  Tests");
+        return suite;
+    }
+    
+    /* (non-Javadoc)
+     * @see org.apache.commons.math.stat.univariate.UnivariateStatisticAbstractTest#getUnivariateStatistic()
+     */
+    public UnivariateStatistic getUnivariateStatistic() {
+       
+        if(stat == null)
+            stat = new Mean();
+            
+        return stat;
+    }
+
+    /* (non-Javadoc)
+     * @see org.apache.commons.math.stat.univariate.UnivariateStatisticAbstractTest#expectedValue()
+     */
+    public double expectedValue() {
+        return this.mean;
+    }
+
+}
diff --git a/src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java b/src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java
new file mode 100644
index 0000000..cb51526
--- /dev/null
+++ b/src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java
@@ -0,0 +1,102 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.commons.math.stat.univariate.moment;
+
+import junit.framework.Test;
+import junit.framework.TestSuite;
+
+import org.apache.commons.math.stat.univariate.StorelessUnivariateStatisticAbstractTest;
+import org.apache.commons.math.stat.univariate.UnivariateStatistic;
+
+/**
+ * Test cases for the {@link UnivariateStatistic} class.
+ * 
+ * @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:21 $
+ */
+public class SkewnessTest extends StorelessUnivariateStatisticAbstractTest{
+
+    protected Skewness stat;
+    
+    /**
+     * @param name
+     */
+    public SkewnessTest(String name) {
+        super(name);
+    }
+
+    /* (non-Javadoc)
+     * @see org.apache.commons.math.stat.univariate.UnivariateStatisticAbstractTest#getUnivariateStatistic()
+     */
+    public UnivariateStatistic getUnivariateStatistic() {
+       
+        if(stat == null)
+            stat = new Skewness();
+            
+        return stat;
+    }
+
+    public static Test suite() {
+        TestSuite suite = new TestSuite(SkewnessTest.class);
+        suite.setName("Skewness Tests");
+        return suite;
+    }
+    
+    /* (non-Javadoc)
+     * @see org.apache.commons.math.stat.univariate.UnivariateStatisticAbstractTest#expectedValue()
+     */
+    public double expectedValue() {
+        return this.skew;
+    }
+
+}
diff --git a/src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java b/src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java
new file mode 100644
index 0000000..8aca655
--- /dev/null
+++ b/src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java
@@ -0,0 +1,102 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.commons.math.stat.univariate.moment;
+
+import junit.framework.Test;
+import junit.framework.TestSuite;
+
+import org.apache.commons.math.stat.univariate.StorelessUnivariateStatisticAbstractTest;
+import org.apache.commons.math.stat.univariate.UnivariateStatistic;
+
+/**
+ * Test cases for the {@link UnivariateStatistic} class.
+ * 
+ * @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:21 $
+ */
+public class StandardDeviationTest extends StorelessUnivariateStatisticAbstractTest{
+
+    protected StandardDeviation stat;
+    
+    /**
+     * @param name
+     */
+    public StandardDeviationTest(String name) {
+        super(name);
+    }
+
+    /* (non-Javadoc)
+     * @see org.apache.commons.math.stat.univariate.UnivariateStatisticAbstractTest#getUnivariateStatistic()
+     */
+    public UnivariateStatistic getUnivariateStatistic() {
+       
+        if(stat == null)
+            stat = new StandardDeviation();
+            
+        return stat;
+    }
+
+    public static Test suite() {
+        TestSuite suite = new TestSuite(StandardDeviationTest.class);
+        suite.setName("StandardDeviation Tests");
+        return suite;
+    }
+    
+    /* (non-Javadoc)
+     * @see org.apache.commons.math.stat.univariate.UnivariateStatisticAbstractTest#expectedValue()
+     */
+    public double expectedValue() {
+        return this.std;
+    }
+
+}
diff --git a/src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java b/src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java
new file mode 100644
index 0000000..7a441c0
--- /dev/null
+++ b/src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java
@@ -0,0 +1,102 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.commons.math.stat.univariate.moment;
+
+import junit.framework.Test;
+import junit.framework.TestSuite;
+
+import org.apache.commons.math.stat.univariate.StorelessUnivariateStatisticAbstractTest;
+import org.apache.commons.math.stat.univariate.UnivariateStatistic;
+
+/**
+ * Test cases for the {@link UnivariateStatistic} class.
+ * 
+ * @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:21 $
+ */
+public class VarianceTest extends StorelessUnivariateStatisticAbstractTest{
+
+    protected Variance stat;
+    
+    /**
+     * @param name
+     */
+    public VarianceTest(String name) {
+        super(name);
+    }
+
+    /* (non-Javadoc)
+     * @see org.apache.commons.math.stat.univariate.UnivariateStatisticAbstractTest#getUnivariateStatistic()
+     */
+    public UnivariateStatistic getUnivariateStatistic() {
+       
+        if(stat == null)
+            stat = new Variance();
+            
+        return stat;
+    }
+
+    public static Test suite() {
+        TestSuite suite = new TestSuite(VarianceTest.class);
+        suite.setName("Variance Tests");
+        return suite;
+    }
+    
+    /* (non-Javadoc)
+     * @see org.apache.commons.math.stat.univariate.UnivariateStatisticAbstractTest#expectedValue()
+     */
+    public double expectedValue() {
+        return this.var;
+    }
+
+}
diff --git a/src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java b/src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java
new file mode 100644
index 0000000..402ab8f
--- /dev/null
+++ b/src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java
@@ -0,0 +1,101 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.commons.math.stat.univariate.rank;
+
+import junit.framework.Test;
+import junit.framework.TestSuite;
+
+import org.apache.commons.math.stat.univariate.StorelessUnivariateStatisticAbstractTest;
+import org.apache.commons.math.stat.univariate.UnivariateStatistic;
+
+/**
+ * Test cases for the {@link UnivariateStatistic} class.
+ * @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:21 $
+ */
+public class MaxTest extends StorelessUnivariateStatisticAbstractTest{
+
+    protected Max stat;
+    
+    /**
+     * @param name
+     */
+    public MaxTest(String name) {
+        super(name);
+    }
+
+    public static Test suite() {
+        TestSuite suite = new TestSuite(MaxTest.class);
+        suite.setName("Max  Tests");
+        return suite;
+    }
+    
+    /* (non-Javadoc)
+     * @see org.apache.commons.math.stat.univariate.UnivariateStatisticAbstractTest#getUnivariateStatistic()
+     */
+    public UnivariateStatistic getUnivariateStatistic() {
+       
+        if(stat == null)
+            stat = new Max();
+            
+        return stat;
+    }
+
+    /* (non-Javadoc)
+     * @see org.apache.commons.math.stat.univariate.UnivariateStatisticAbstractTest#expectedValue()
+     */
+    public double expectedValue() {
+        return this.max;
+    }
+
+}
diff --git a/src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java b/src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java
new file mode 100644
index 0000000..bb3d20f
--- /dev/null
+++ b/src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java
@@ -0,0 +1,101 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.commons.math.stat.univariate.rank;
+
+import junit.framework.Test;
+import junit.framework.TestSuite;
+
+import org.apache.commons.math.stat.univariate.UnivariateStatistic;
+import org.apache.commons.math.stat.univariate.UnivariateStatisticAbstractTest;
+
+/**
+ * Test cases for the {@link UnivariateStatistic} class.
+ * @version $Revision: 1.7 $ $Date: 2003/11/14 22:22:21 $
+ */
+public class MedianTest extends UnivariateStatisticAbstractTest{
+
+    protected Median stat;
+    
+    /**
+     * @param name
+     */
+    public MedianTest(String name) {
+        super(name);
+    }
+
+    public static Test suite() {
+        TestSuite suite = new TestSuite(MedianTest.class);
+        suite.setName("Median  Tests");
+        return suite;
+    }
+    
+    /* (non-Javadoc)
+     * @see org.apache.commons.math.stat.univariate.UnivariateStatisticAbstractTest#getUnivariateStatistic()
+     */
+    public UnivariateStatistic getUnivariateStatistic() {
+       
+        if(stat == null)
+            stat = new Median();
+            
+        return stat;
+    }
+
+    /* (non-Javadoc)
+     * @see org.apache.commons.math.stat.univariate.UnivariateStatisticAbstractTest#expectedValue()
+     */
+    public double expectedValue() {
+        return this.median;
+    }
+
+}
diff --git a/src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java b/src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java
new file mode 100644
index 0000000..926552b
--- /dev/null
+++ b/src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java
@@ -0,0 +1,101 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.commons.math.stat.univariate.rank;
+
+import junit.framework.Test;
+import junit.framework.TestSuite;
+
+import org.apache.commons.math.stat.univariate.StorelessUnivariateStatisticAbstractTest;
+import org.apache.commons.math.stat.univariate.UnivariateStatistic;
+
+/**
+ * Test cases for the {@link UnivariateStatistic} class.
+ * @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:21 $
+ */
+public class MinTest extends StorelessUnivariateStatisticAbstractTest{
+
+    protected Min stat;
+    
+    /**
+     * @param name
+     */
+    public MinTest(String name) {
+        super(name);
+    }
+
+    public static Test suite() {
+        TestSuite suite = new TestSuite(MinTest.class);
+        suite.setName("Min  Tests");
+        return suite;
+    }
+    
+    /* (non-Javadoc)
+     * @see org.apache.commons.math.stat.univariate.UnivariateStatisticAbstractTest#getUnivariateStatistic()
+     */
+    public UnivariateStatistic getUnivariateStatistic() {
+       
+        if(stat == null)
+            stat = new Min();
+            
+        return stat;
+    }
+
+    /* (non-Javadoc)
+     * @see org.apache.commons.math.stat.univariate.UnivariateStatisticAbstractTest#expectedValue()
+     */
+    public double expectedValue() {
+        return this.min;
+    }
+
+}
diff --git a/src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java b/src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java
new file mode 100644
index 0000000..09f2edf
--- /dev/null
+++ b/src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java
@@ -0,0 +1,107 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.commons.math.stat.univariate.rank;
+
+import junit.framework.Test;
+import junit.framework.TestSuite;
+
+import org.apache.commons.math.stat.univariate.UnivariateStatistic;
+import org.apache.commons.math.stat.univariate.UnivariateStatisticAbstractTest;
+
+/**
+ * Test cases for the {@link UnivariateStatistic} class.
+ * @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:21 $
+ */
+public class PercentileTest extends UnivariateStatisticAbstractTest{
+
+    protected Percentile stat;
+    
+    /**
+     * @param name
+     */
+    public PercentileTest(String name) {
+        super(name);
+    }
+
+    public static Test suite() {
+        TestSuite suite = new TestSuite(PercentileTest.class);
+        suite.setName("Percentile Tests");
+        return suite;
+    }
+    
+    /* (non-Javadoc)
+     * @see org.apache.commons.math.stat.univariate.UnivariateStatisticAbstractTest#getUnivariateStatistic()
+     */
+    public UnivariateStatistic getUnivariateStatistic() {
+       
+        if(stat == null)
+            stat = new Percentile(95.0);
+            
+        return stat;
+    }
+
+    /* (non-Javadoc)
+     * @see org.apache.commons.math.stat.univariate.UnivariateStatisticAbstractTest#expectedValue()
+     */
+    public double expectedValue() {
+        // TODO: fix this bad calculation in Percentile
+        return 20.82;
+    }
+
+    public void testHighPercentile(){
+        double[] d = new double[]{1, 2, 3};
+        Percentile p = new Percentile(75);
+        assertEquals(3.0, p.evaluate(d), 1.0e-5);
+    }
+}
diff --git a/src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java b/src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java
new file mode 100644
index 0000000..03193c4
--- /dev/null
+++ b/src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java
@@ -0,0 +1,101 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.commons.math.stat.univariate.summary;
+
+import junit.framework.Test;
+import junit.framework.TestSuite;
+
+import org.apache.commons.math.stat.univariate.StorelessUnivariateStatisticAbstractTest;
+import org.apache.commons.math.stat.univariate.UnivariateStatistic;
+
+/**
+ * Test cases for the {@link UnivariateStatistic} class.
+ * @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:22 $
+ */
+public class ProductTest extends StorelessUnivariateStatisticAbstractTest{
+
+    protected Product stat;
+    
+    /**
+     * @param name
+     */
+    public ProductTest(String name) {
+        super(name);
+    }
+
+    public static Test suite() {
+        TestSuite suite = new TestSuite(ProductTest.class);
+        suite.setName("Product Tests");
+        return suite;
+    }
+    
+    /* (non-Javadoc)
+     * @see org.apache.commons.math.stat.univariate.UnivariateStatisticAbstractTest#getUnivariateStatistic()
+     */
+    public UnivariateStatistic getUnivariateStatistic() {
+       
+        if(stat == null)
+            stat = new Product();
+            
+        return stat;
+    }
+
+    /* (non-Javadoc)
+     * @see org.apache.commons.math.stat.univariate.UnivariateStatisticAbstractTest#expectedValue()
+     */
+    public double expectedValue() {
+        return this.product;
+    }
+
+}
diff --git a/src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java b/src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java
new file mode 100644
index 0000000..a3471ef
--- /dev/null
+++ b/src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java
@@ -0,0 +1,101 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.commons.math.stat.univariate.summary;
+
+import junit.framework.Test;
+import junit.framework.TestSuite;
+
+import org.apache.commons.math.stat.univariate.StorelessUnivariateStatisticAbstractTest;
+import org.apache.commons.math.stat.univariate.UnivariateStatistic;
+
+/**
+ * Test cases for the {@link UnivariateStatistic} class.
+ * @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:22 $
+ */
+public class SumLogTest extends StorelessUnivariateStatisticAbstractTest{
+
+    protected SumOfLogs stat;
+    
+    /**
+     * @param name
+     */
+    public SumLogTest(String name) {
+        super(name);
+    }
+
+    public static Test suite() {
+        TestSuite suite = new TestSuite(SumLogTest.class);
+        suite.setName("SumLog Tests");
+        return suite;
+    }
+    
+    /* (non-Javadoc)
+     * @see org.apache.commons.math.stat.univariate.UnivariateStatisticAbstractTest#getUnivariateStatistic()
+     */
+    public UnivariateStatistic getUnivariateStatistic() {
+       
+        if(stat == null)
+            stat = new SumOfLogs();
+            
+        return stat;
+    }
+
+    /* (non-Javadoc)
+     * @see org.apache.commons.math.stat.univariate.UnivariateStatisticAbstractTest#expectedValue()
+     */
+    public double expectedValue() {
+        return this.sumLog;
+    }
+
+}
diff --git a/src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java b/src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java
new file mode 100644
index 0000000..c8a9d02
--- /dev/null
+++ b/src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java
@@ -0,0 +1,101 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.commons.math.stat.univariate.summary;
+
+import junit.framework.Test;
+import junit.framework.TestSuite;
+
+import org.apache.commons.math.stat.univariate.StorelessUnivariateStatisticAbstractTest;
+import org.apache.commons.math.stat.univariate.UnivariateStatistic;
+
+/**
+ * Test cases for the {@link UnivariateStatistic} class.
+ * @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:22 $
+ */
+public class SumSqTest extends StorelessUnivariateStatisticAbstractTest{
+
+    protected SumOfSquares stat;
+    
+    /**
+     * @param name
+     */
+    public SumSqTest(String name) {
+        super(name);
+    }
+
+    public static Test suite() {
+        TestSuite suite = new TestSuite(SumSqTest.class);
+        suite.setName("SumSq Tests");
+        return suite;
+    }
+    
+    /* (non-Javadoc)
+     * @see org.apache.commons.math.stat.univariate.UnivariateStatisticAbstractTest#getUnivariateStatistic()
+     */
+    public UnivariateStatistic getUnivariateStatistic() {
+       
+        if(stat == null)
+            stat = new SumOfSquares();
+            
+        return stat;
+    }
+
+    /* (non-Javadoc)
+     * @see org.apache.commons.math.stat.univariate.UnivariateStatisticAbstractTest#expectedValue()
+     */
+    public double expectedValue() {
+        return this.sumSq;
+    }
+
+}
diff --git a/src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java b/src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java
new file mode 100644
index 0000000..2d11f06
--- /dev/null
+++ b/src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java
@@ -0,0 +1,101 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.commons.math.stat.univariate.summary;
+
+import junit.framework.Test;
+import junit.framework.TestSuite;
+
+import org.apache.commons.math.stat.univariate.StorelessUnivariateStatisticAbstractTest;
+import org.apache.commons.math.stat.univariate.UnivariateStatistic;
+
+/**
+ * Test cases for the {@link UnivariateStatistic} class.
+ * @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:22 $
+ */
+public class SumTest extends StorelessUnivariateStatisticAbstractTest{
+
+    protected Sum stat;
+    
+    /**
+     * @param name
+     */
+    public SumTest(String name) {
+        super(name);
+    }
+
+    public static Test suite() {
+        TestSuite suite = new TestSuite(SumTest.class);
+        suite.setName("Sum Tests");
+        return suite;
+    }
+    
+    /* (non-Javadoc)
+     * @see org.apache.commons.math.stat.univariate.UnivariateStatisticAbstractTest#getUnivariateStatistic()
+     */
+    public UnivariateStatistic getUnivariateStatistic() {
+       
+        if(stat == null)
+            stat = new Sum();
+            
+        return stat;
+    }
+
+    /* (non-Javadoc)
+     * @see org.apache.commons.math.stat.univariate.UnivariateStatisticAbstractTest#expectedValue()
+     */
+    public double expectedValue() {
+        return this.sum;
+    }
+
+}
diff --git a/src/test/org/apache/commons/math/util/BeanTransformerTest.java b/src/test/org/apache/commons/math/util/BeanTransformerTest.java
new file mode 100644
index 0000000..2cad6b6
--- /dev/null
+++ b/src/test/org/apache/commons/math/util/BeanTransformerTest.java
@@ -0,0 +1,136 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+
+package org.apache.commons.math.util;
+
+import org.apache.commons.math.TestUtils;
+
+import junit.framework.TestCase;
+
+/**
+ * @version $Revision: 1.5 $ $Date: 2003/11/14 22:22:23 $
+ */
+public class BeanTransformerTest extends TestCase {
+    
+    /**
+     *
+     */
+    public void testConstructor(){
+        BeanTransformer b = new BeanTransformer();
+        assertNull(b.getPropertyName());
+    }
+    
+    /**
+     *
+     */
+    public void testConstructorString(){
+        String name = "property";
+        BeanTransformer b = new BeanTransformer(name);
+        assertEquals(name, b.getPropertyName());
+    }
+    
+    /**
+     *
+     */
+    public void testSetPropertyName(){
+        String name = "property";
+        BeanTransformer b = new BeanTransformer();
+        b.setPropertyName(name);
+        assertEquals(name, b.getPropertyName());
+    }
+    
+    /**
+     * 
+     */
+    public void testTransformNoSuchMethod(){
+        BeanTransformer b = new BeanTransformer("z");
+        TestBean target = new TestBean();
+        double value = b.transform(target);
+        TestUtils.assertEquals(Double.NaN, value, 1.0e-2);
+    }
+    
+    /**
+     * 
+     */
+    public void testTransform(){
+        BeanTransformer b = new BeanTransformer("x");
+        TestBean target = new TestBean();
+        double value = b.transform(target);
+        TestUtils.assertEquals(1.0, value, 1.0e-2);
+    }
+    
+    /**
+     * 
+     */
+    public void testTransformInvocationError(){
+        BeanTransformer b = new BeanTransformer("z");
+        TestBean target = new TestBean();
+        double value = b.transform(target);
+        TestUtils.assertEquals(Double.NaN, value, 1.0e-2);
+    }
+    
+    /**
+     * 
+     */
+    public void testTransformInvalidType(){
+        BeanTransformer b = new BeanTransformer("y");
+        TestBean target = new TestBean();
+        try {
+            b.transform(target);
+            fail();
+        } catch(ClassCastException ex){
+            // success
+        }
+    }
+}
diff --git a/src/test/org/apache/commons/math/util/ContinuedFractionTest.java b/src/test/org/apache/commons/math/util/ContinuedFractionTest.java
new file mode 100644
index 0000000..4ec908a
--- /dev/null
+++ b/src/test/org/apache/commons/math/util/ContinuedFractionTest.java
@@ -0,0 +1,90 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.commons.math.util;
+
+import org.apache.commons.math.MathException;
+
+import junit.framework.TestCase;
+
+/**
+ * @version $Revision: 1.6 $ $Date: 2003/11/14 22:22:23 $
+ */
+public class ContinuedFractionTest extends TestCase {
+	/**
+	 * Constructor for ContinuedFractionTest.
+	 * @param name
+	 */
+	public ContinuedFractionTest(String name) {
+		super(name);
+	}
+
+	public void testGoldenRation(){
+        ContinuedFraction cf = new ContinuedFraction() {
+			public double getA(int n, double x) {
+				return 1.0;
+			}
+
+			public double getB(int n, double x) {
+				return 1.0;
+			}
+		};
+        
+        try {
+            double gr = cf.evaluate(0.0, 10e-9);
+            assertEquals(1.61803399, gr, 10e-9);
+        } catch (MathException e) {
+            fail(e.getMessage());
+        }
+	}
+}
diff --git a/src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java b/src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java
new file mode 100644
index 0000000..ae1c682
--- /dev/null
+++ b/src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java
@@ -0,0 +1,76 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.commons.math.util;
+
+
+/**
+ * This class contains test cases for the ExpandableDoubleArray.
+ * 
+ * @version $Revision: 1.6 $ $Date: 2003/11/14 22:22:23 $
+ */
+public class ContractableDoubleArrayTest extends ExpandableDoubleArrayTest {
+
+	public ContractableDoubleArrayTest(String name) {
+		super( name );
+	}
+	
+	/* (non-Javadoc)
+	 * @see junit.framework.TestCase#setUp()
+	 */
+	protected void setUp() throws Exception {
+		da = new ContractableDoubleArray();
+		ra = new ContractableDoubleArray();
+	}
+
+}
diff --git a/src/test/org/apache/commons/math/util/DefaultTransformerTest.java b/src/test/org/apache/commons/math/util/DefaultTransformerTest.java
new file mode 100644
index 0000000..69375e2
--- /dev/null
+++ b/src/test/org/apache/commons/math/util/DefaultTransformerTest.java
@@ -0,0 +1,125 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+
+package org.apache.commons.math.util;
+
+import java.math.BigDecimal;
+
+import org.apache.commons.math.TestUtils;
+
+import junit.framework.TestCase;
+
+/**
+ * @version $Revision: 1.5 $ $Date: 2003/11/14 22:22:23 $
+ */
+public class DefaultTransformerTest extends TestCase {
+    /**
+     * 
+     */
+    public void testTransformDouble(){
+        double expected = 1.0;
+        Double input = new Double(expected);
+        DefaultTransformer t = new DefaultTransformer();
+        assertEquals(expected, t.transform(input), 1.0e-4);
+    }
+    
+    /**
+     * 
+     */
+    public void testTransformNull(){
+        double expected = Double.NaN;
+        DefaultTransformer t = new DefaultTransformer();
+        TestUtils.assertEquals(expected, t.transform(null), 1.0e-4);
+    }
+    
+    /**
+     * 
+     */
+    public void testTransformInteger(){
+        double expected = 1.0;
+        Integer input = new Integer(1);
+        DefaultTransformer t = new DefaultTransformer();
+        assertEquals(expected, t.transform(input), 1.0e-4);
+    }        
+    
+    /**
+     * 
+     */
+    public void testTransformBigDecimal(){
+        double expected = 1.0;
+        BigDecimal input = new BigDecimal("1.0");
+        DefaultTransformer t = new DefaultTransformer();
+        assertEquals(expected, t.transform(input), 1.0e-4);
+    }        
+    
+    /**
+     * 
+     */
+    public void testTransformString(){
+        double expected = 1.0;
+        String input = "1.0";
+        DefaultTransformer t = new DefaultTransformer();
+        assertEquals(expected, t.transform(input), 1.0e-4);
+    }
+    
+    /**
+     * 
+     */
+    public void testTransformObject(){
+        double expected = Double.NaN;
+        Boolean input = Boolean.TRUE;
+        DefaultTransformer t = new DefaultTransformer();
+        TestUtils.assertEquals(expected, t.transform(input), 1.0e-4);
+    }
+}
diff --git a/src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java b/src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java
new file mode 100644
index 0000000..861253c
--- /dev/null
+++ b/src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java
@@ -0,0 +1,169 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.commons.math.util;
+
+import org.apache.commons.math.stat.StatUtils;
+
+import junit.framework.TestCase;
+
+/**
+ * This class contains test cases for the ExpandableDoubleArray.
+ * 
+ * @version $Revision: 1.7 $ $Date: 2003/11/14 22:22:23 $
+ */
+public abstract class DoubleArrayAbstractTest extends TestCase {
+
+	protected DoubleArray da = null;
+
+	// Array used to test rolling
+	protected DoubleArray ra = null;
+
+	public DoubleArrayAbstractTest(String name) {
+		super(name);
+	}
+
+	public void testAdd1000() {
+
+		for (int i = 0; i < 1000; i++) {
+			da.addElement(i);
+		}
+
+		assertEquals(
+			"Number of elements should be equal to 1000 after adding 1000 values",
+			1000,
+			da.getNumElements());
+
+		assertEquals(
+			"The element at the 56th index should be 56",
+			56.0,
+			da.getElement(56),
+			Double.MIN_VALUE);
+
+	}
+
+	public void testGetValues() {
+		double[] controlArray = { 2.0, 4.0, 6.0 };
+
+		da.addElement(2.0);
+		da.addElement(4.0);
+		da.addElement(6.0);
+		double[] testArray = da.getElements();
+
+		for (int i = 0; i < da.getNumElements(); i++) {
+			assertEquals(
+				"The testArray values should equal the controlArray values, index i: "
+					+ i
+					+ " does not match",
+				testArray[i],
+				controlArray[i],
+				Double.MIN_VALUE);
+		}
+
+	}
+
+	public void testAddElementRolling() {
+		ra.addElement(0.5);
+		ra.addElement(1.0);
+		ra.addElement(1.0);
+		ra.addElement(1.0);
+		ra.addElement(1.0);
+		ra.addElement(1.0);
+		ra.addElementRolling(2.0);
+
+		assertEquals(
+			"There should be 6 elements in the eda",
+			6,
+			ra.getNumElements());
+		assertEquals(
+			"The max element should be 2.0",
+			2.0,
+            StatUtils.max(ra.getElements()),
+			Double.MIN_VALUE);
+		assertEquals(
+			"The min element should be 1.0",
+			1.0,
+            StatUtils.min(ra.getElements()),
+			Double.MIN_VALUE);
+
+		for (int i = 0; i < 1024; i++) {
+			ra.addElementRolling(i);
+		}
+
+		assertEquals(
+			"We just inserted 1024 rolling elements, num elements should still be 6",
+			6,
+			ra.getNumElements());
+	}
+
+	public void testMinMax() {
+		da.addElement(2.0);
+		da.addElement(22.0);
+		da.addElement(-2.0);
+		da.addElement(21.0);
+		da.addElement(22.0);
+		da.addElement(42.0);
+		da.addElement(62.0);
+		da.addElement(22.0);
+		da.addElement(122.0);
+		da.addElement(1212.0);
+
+		assertEquals("Min should be -2.0", -2.0, StatUtils.min(da.getElements()), Double.MIN_VALUE);
+		assertEquals(
+			"Max should be 1212.0",
+			1212.0,
+            StatUtils.max(da.getElements()),
+			Double.MIN_VALUE);
+	}
+
+}
diff --git a/src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java b/src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java
new file mode 100644
index 0000000..2b38fa2
--- /dev/null
+++ b/src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java
@@ -0,0 +1,278 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.commons.math.util;
+
+
+/**
+ * This class contains test cases for the ExpandableDoubleArray.
+ * 
+ * @version $Revision: 1.7 $ $Date: 2003/11/14 22:22:23 $
+ */
+public class ExpandableDoubleArrayTest extends DoubleArrayAbstractTest {
+
+	public ExpandableDoubleArrayTest(String name) {
+		super( name );
+	}
+	
+	/* (non-Javadoc)
+	 * @see junit.framework.TestCase#setUp()
+	 */
+	protected void setUp() throws Exception {
+		da = new ExpandableDoubleArray();
+		ra = new ExpandableDoubleArray();
+	}
+
+	/* (non-Javadoc)
+	 * @see junit.framework.TestCase#tearDown()
+	 */
+	protected void tearDown() throws Exception {
+		da = null;
+		ra = null;
+	}
+	
+	
+	/** TEST NORMAL OPERATIONS - calling super class test and then checking internal
+	 *   storage **/
+	
+	
+	public void testSetElementArbitraryExpansion() {
+		double[] controlArray = {2.0, 4.0, 6.0};
+		
+		da.addElement(2.0);
+		da.addElement(4.0);
+		da.addElement(6.0);
+		da.setElement(1, 3.0);
+		
+		// Expand the array arbitrarily to 1000 items
+		da.setElement(1000, 3.4);
+
+		assertEquals( "The number of elements should now be 1001, it isn't", da.getNumElements(), 1001);
+		
+		assertEquals( "Uninitialized Elements are default value of 0.0, index 766 wasn't", 0.0,
+							da.getElement( 760 ), Double.MIN_VALUE );
+		
+		assertEquals( "The 1000th index should be 3.4, it isn't", 3.4, da.getElement(1000), Double.MIN_VALUE );
+		assertEquals( "The 0th index should be 2.0, it isn't", 2.0, da.getElement(0), Double.MIN_VALUE);		
+		
+	}
+		
+	public void testAdd1000() {
+		super.testAdd1000();
+		assertEquals("Internal Storage length should be 1024 if we started out with initial capacity of " +
+			"16 and an expansion factor of 2.0",
+							1024, ((ExpandableDoubleArray) da).getInternalLength());
+	}
+	
+	public void testAddElementRolling() {
+		super.testAddElementRolling();
+	}
+
+	public void testSetNumberOfElements() {
+		da.addElement( 1.0 );
+		da.addElement( 1.0 );
+		da.addElement( 1.0 );
+		da.addElement( 1.0 );
+		da.addElement( 1.0 );
+		da.addElement( 1.0 );
+		assertEquals( "Number of elements should equal 6", da.getNumElements(), 6);
+		
+		((ExpandableDoubleArray) da).setNumElements( 3 );
+		assertEquals( "Number of elements should equal 3", da.getNumElements(), 3);
+		
+		try {
+			((ExpandableDoubleArray) da).setNumElements( -3 );
+			fail( "Setting number of elements to negative should've thrown an exception");
+		} catch( IllegalArgumentException iae ) {
+		}
+
+		((ExpandableDoubleArray) da).setNumElements(1024);
+		assertEquals( "Number of elements should now be 1024", da.getNumElements(), 1024);
+		assertEquals( "Element 453 should be a default double", da.getElement( 453 ), 0.0, Double.MIN_VALUE);
+				
+	}
+
+	/** TESTS WHICH FOCUS ON ExpandableSpecific internal storage */
+
+	public void testWithInitialCapacity() {
+
+		ExpandableDoubleArray eDA2 = new ExpandableDoubleArray(2);
+		assertEquals("Initial number of elements should be 0", 0, eDA2.getNumElements());
+
+		int iterations = (int) Math.pow(2.0, 15.0);
+
+		for( int i = 0; i < iterations; i++) {
+			eDA2.addElement( i );
+		}
+		
+		assertEquals("Number of elements should be equal to 2^15", (int) Math.pow(2.0, 15.0), eDA2.getNumElements());
+		
+		eDA2.addElement( 2.0 );
+		
+		assertEquals("Number of elements should be equals to 2^15 + 1",
+		        ( (int) Math.pow(2.0, 15.0) + 1 ), eDA2.getNumElements() );
+	}
+
+	public void testWithInitialCapacityAndExpansionFactor() {
+
+		ExpandableDoubleArray eDA3 = new ExpandableDoubleArray(3, 3.0f);
+		assertEquals("Initial number of elements should be 0", 0, eDA3.getNumElements() );
+
+		int iterations = (int) Math.pow(3.0, 7.0);
+
+		for( int i = 0; i < iterations; i++) {
+			eDA3.addElement( i );
+		}
+		
+		assertEquals("Number of elements should be equal to 3^7", (int) Math.pow(3.0, 7.0), eDA3.getNumElements());
+		
+		eDA3.addElement( 2.0 );
+		
+		assertEquals("Number of elements should be equals to 3^7 + 1",
+			( (int) Math.pow(3.0, 7.0) + 1 ), eDA3.getNumElements() );
+						   
+		assertEquals("Expansion factor should equal 3.0", 3.0f, eDA3.getExpansionFactor(), Double.MIN_VALUE);
+	}
+	
+	public void testDiscard() {
+		da.addElement(2.0);
+		da.addElement(2.0);
+		da.addElement(2.0);
+		da.addElement(2.0);
+		da.addElement(2.0);
+		da.addElement(2.0);
+		da.addElement(2.0);
+		da.addElement(2.0);
+		da.addElement(2.0);
+		da.addElement(2.0);
+		da.addElement(2.0);
+		assertEquals( "Number of elements should be 11", 11, da.getNumElements());
+		
+		((ExpandableDoubleArray)da).discardFrontElements(5);
+		assertEquals( "Number of elements should be 6", 6, da.getNumElements());
+		
+		try {
+            ((ExpandableDoubleArray)da).discardFrontElements(-1);
+			fail( "Trying to discard a negative number of element is not allowed");
+		} catch( Exception e ){
+		}
+		
+		try {
+            ((ExpandableDoubleArray)da).discardFrontElements( 10000 );
+			fail( "You can't discard more elements than the array contains");
+		} catch( Exception e ){
+		}
+		
+	}
+		
+	/** TEST ERROR CONDITIONS **/
+
+	public void testIllegalInitialCapacity() {
+		try {
+			ExpandableDoubleArray eDA = new ExpandableDoubleArray(-3, 2.0f);
+			fail( "That constructor should have thrown an IllegalArgumentException because " +
				"the initialCapacity was negative, if it didn't then" +
				" the range checking of initialCapacity is not working properly" );
+		} catch( IllegalArgumentException iae ) {
+		}
+		try {
+			ExpandableDoubleArray eDA = new ExpandableDoubleArray(0, 2.0f);
+			fail( "That constructor should have thrown an IllegalArgumentException because " +
+				"the initialCapacity was ZERO if it didn't then" +
+				" the range checking of initialCapacity is not working properly" );
+		} catch( IllegalArgumentException iae ) {
+		}
+	}
+	
+	public void testIllegalExpansionFactor() {
+		try {
+			ExpandableDoubleArray eDA = new ExpandableDoubleArray(3, 0.66f);
+			fail( "That constructor should have thrown an IllegalArgumentException because " +
				"the expansionFactor for 0.66 which would shrink the array instead of expand the array");
+		} catch( IllegalArgumentException iae ) {
+		}
+		try {
+			ExpandableDoubleArray eDA = new ExpandableDoubleArray(3, 0.0f);
+			fail( "That constructor should have thrown an IllegalArgumentException because " +
+				"the expansionFactor for 0.0");
+		} catch( IllegalArgumentException iae) {
+		}
+		
+		try {
+			ExpandableDoubleArray eDA = new ExpandableDoubleArray(3, -4.35f);
+			fail( "That constructor should have thrown an IllegalArgumentException because " +
+				"the expansionFactor for -4.35");
+		} catch( IllegalArgumentException iae) {
+		}
+	}
+	
+	public void testSetOutOfBounds() {
+			try {
+				da.setElement( -1, 2.0);
+				fail( "Cannot set a negative index");	
+			} catch( Exception e ){
+			}
+	}
+	
+	public void testGetOutOfBounds() {
+		try {
+			da.getElement(10000);
+			fail( "Cannot get an element that is larger than the number of elements");
+		} catch( Exception e ) {
+		}
+		
+		try {
+			da.getElement(-3);
+			fail("Cannot get a negative index");
+		} catch( Exception e ){
+		}
+	}
+	
+}
diff --git a/src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java b/src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java
new file mode 100644
index 0000000..c01a85c
--- /dev/null
+++ b/src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java
@@ -0,0 +1,175 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.commons.math.util;
+
+
+/**
+ * This class contains test cases for the ExpandableDoubleArray.
+ * 
+ * @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:23 $
+ */
+public class FixedDoubleArrayTest extends DoubleArrayAbstractTest {
+
+	public FixedDoubleArrayTest(String name) {
+		super( name );
+	}
+	
+	/* (non-Javadoc)
+	 * @see junit.framework.TestCase#setUp()
+	 */
+	protected void setUp() throws Exception {
+		da = new FixedDoubleArray(4000);
+	}
+
+	/* (non-Javadoc)
+	 * @see junit.framework.TestCase#tearDown()
+	 */
+	protected void tearDown() throws Exception {
+		da = null;
+	}
+	
+	
+	/** TEST NORMAL OPERATIONS - calling super class test and then checking internal
+	 *   storage **/
+	
+	public void testAddElementRolling() {
+		ra = new FixedDoubleArray(6);
+
+		super.testAddElementRolling();
+		
+		assertEquals( "FixedDoubleArray should have 6 size internal storage", 
+								6, ((FixedDoubleArray) ra).getValues().length);		
+	}
+	
+	public void testExceedingElements() {
+		
+		for( int i = 0; i < 3999; i++) {
+			da.addElement( 1.0 );
+		}
+
+		da.addElement( 1.0 );
+		
+		try {
+			da.addElement( 2.0 );
+			fail( " Adding more than 4000 elements should cause an exception ");
+		} catch( Exception e ) {
+		}
+		
+		da.addElementRolling(2.0);
+		assertEquals( "This is the first rolling add, the first element should be 2.0",
+								2.0, da.getElement(0), Double.MIN_VALUE);
+	}
+	
+	public void testGetExceeding() {
+		try {
+			da.getElement(100);
+			fail( "I haven't added 100 elements to the list yet, trying to getElement(100) should " +
				"thrown an error");
+		} catch (Exception e ){ 
+		}
+		
+	}
+
+	public void testSetElement() {
+		da.addElement( 1.0 );
+		da.addElement( 1.0 );
+		da.addElement( 1.0 );
+		da.addElement( 1.0 );
+		da.addElement( 1.0 );
+		da.addElement( 1.0 );
+		da.addElement( 1.0 );
+		
+		da.setElement( 2, 4.0 );
+		assertEquals( "Index 2 should be 4.0", 4.0, da.getElement(2), Double.MIN_VALUE);
+		
+		try {
+			da.setElement(2000, 45.0);
+			fail( "The array does not contain 2000 elements yet, setting this element should" +
				" cause an excpetion");
+		} catch(Exception e) {
+		}
+		
+	}
+
+	public void testOnlyRolling() {
+		for( int i = 0; i < 8000; i++) {
+			da.addElementRolling( i );
+		}
+		
+		assertEquals( "The 2000th element should equal 6000",
+			6000.0, da.getElement(2000), Double.MIN_VALUE);
+	}
+	
+	public void testClear() {
+		for( int i = 0; i < 10; i++) {
+			da.addElementRolling(1.0);
+		}
+		
+		assertEquals( "There should be ten elements in the array",
+								10, da.getNumElements() );
+		
+		da.clear();
+
+		assertEquals( "There should be zero elements in the array",
+								0, da.getNumElements() );
+
+		for( int i = 0; i < 10; i++) {
+			da.addElementRolling(1.0);
+		}
+		
+		assertEquals( "There should be ten elements in the array",
+								10, da.getNumElements() );
+				
+	}
+	
+		
+}
diff --git a/src/test/org/apache/commons/math/util/MathUtilsTest.java b/src/test/org/apache/commons/math/util/MathUtilsTest.java
new file mode 100644
index 0000000..b6c624a
--- /dev/null
+++ b/src/test/org/apache/commons/math/util/MathUtilsTest.java
@@ -0,0 +1,352 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.commons.math.util;
+
+import junit.framework.Test;
+import junit.framework.TestCase;
+import junit.framework.TestSuite;
+
+/**
+ * Test cases for the MathUtils class.
+ *
+ * @version $Revision: 1.6 $ $Date: 2003/11/14 22:22:23 $
+ */
+
+public final class MathUtilsTest extends TestCase {
+
+    public MathUtilsTest(String name) {
+        super(name);
+    }
+
+    public void setUp() {
+    }
+
+    public static Test suite() {
+        TestSuite suite = new TestSuite(MathUtilsTest.class);
+        suite.setName("MathUtils Tests");
+        return suite;
+    }
+    
+    public void testBinomialCoefficient() {
+        long[] bcoef5 = {1,5,10,10,5,1};
+        long[] bcoef6 = {1,6,15,20,15,6,1};
+        for (int i = 0; i < 6; i++) {
+            assertEquals("5 choose " + i, bcoef5[i], 
+                MathUtils.binomialCoefficient(5,i));
+        }
+        for (int i = 0; i < 7; i++) {
+            assertEquals("6 choose " + i, bcoef6[i], 
+                MathUtils.binomialCoefficient(6,i));
+        }
+        
+        for (int n = 1; n < 10; n++) {
+            for (int k = 0; k <= n; k++) {
+                assertEquals(n + " choose " + k, binomialCoefficient(n, k), 
+                    MathUtils.binomialCoefficient(n, k));
+                assertEquals(n + " choose " + k,(double) binomialCoefficient(n, k), 
+                    MathUtils.binomialCoefficientDouble(n, k),Double.MIN_VALUE);
+                assertEquals(n + " choose " + k,
+                    Math.log((double) binomialCoefficient(n, k)), 
+                    MathUtils.binomialCoefficientLog(n, k),10E-12);
+            }
+        }
+      
+      /* 
+       * Takes a long time for recursion to unwind, but succeeds 
+       * and yields exact value = 2,333,606,220
+        
+        assertEquals(MathUtils.binomialCoefficient(34,17),
+            binomialCoefficient(34,17));
+       */
+    }
+    
+    public void testBinomialCoefficientFail() {
+        try {
+            long x = MathUtils.binomialCoefficient(0,0);
+            fail ("expecting IllegalArgumentException");
+        } catch (IllegalArgumentException ex) {
+            ;
+        }
+        try {
+            long x = MathUtils.binomialCoefficient(4,5);
+            fail ("expecting IllegalArgumentException");
+        } catch (IllegalArgumentException ex) {
+            ;
+        }
+        try {
+            double x = MathUtils.binomialCoefficientDouble(0,0);
+            fail ("expecting IllegalArgumentException");
+        } catch (IllegalArgumentException ex) {
+            ;
+        }
+        try {
+            double x = MathUtils.binomialCoefficientDouble(4,5);
+            fail ("expecting IllegalArgumentException");
+        } catch (IllegalArgumentException ex) {
+            ;
+        }
+        try {
+            double x = MathUtils.binomialCoefficientLog(0,0);
+            fail ("expecting IllegalArgumentException");
+        } catch (IllegalArgumentException ex) {
+            ;
+        }
+        try {
+            double x = MathUtils.binomialCoefficientLog(4,5);
+            fail ("expecting IllegalArgumentException");
+        } catch (IllegalArgumentException ex) {
+            ;
+        }
+        try {
+            long x = MathUtils.binomialCoefficient(67,34);
+            fail ("expecting ArithmeticException");
+        } catch (ArithmeticException ex) {
+            ;
+        }
+        double x = MathUtils.binomialCoefficientDouble(1030,515);
+        assertTrue("expecting infinite binomial coefficient",
+            Double.isInfinite(x));
+    }
+
+    public void testFactorial() {
+        for (int i = 1; i < 10; i++) {
+            assertEquals(i + "! ",factorial(i),MathUtils.factorial(i));
+            assertEquals(i + "! ",(double)factorial(i),
+                MathUtils.factorialDouble(i),Double.MIN_VALUE);
+            assertEquals(i + "! ",Math.log((double)factorial(i)),
+                MathUtils.factorialLog(i),10E-12);
+        }
+    }
+
+    public void testFactorialFail() {
+        try {
+            long x = MathUtils.factorial(0);
+            fail ("expecting IllegalArgumentException");
+        } catch (IllegalArgumentException ex) {
+            ;
+        }
+        try {
+            double x = MathUtils.factorialDouble(0);
+            fail ("expecting IllegalArgumentException");
+        } catch (IllegalArgumentException ex) {
+            ;
+        }
+        try {
+            double x = MathUtils.factorialLog(0);
+            fail ("expecting IllegalArgumentException");
+        } catch (IllegalArgumentException ex) {
+            ;
+        }
+        try {
+            double x = MathUtils.factorial(21);
+            fail ("expecting ArithmeticException");
+        } catch (ArithmeticException ex) {
+            ;
+        }
+        assertTrue("expecting infinite factorial value",
+            Double.isInfinite(MathUtils.factorialDouble(171)));
+
+    }
+
+
+    /**
+     * Exact recursive implementation to test against
+     */
+    private long binomialCoefficient(int n, int k) {
+        if ((n == k) || (k == 0)) {
+            return 1;
+        }
+        if ((k == 1) || (k == n - 1)) {
+            return n;
+        }
+        return binomialCoefficient(n - 1, k - 1) +
+            binomialCoefficient(n - 1, k);
+    }
+
+    /**
+     * Finds the largest values of n for which binomialCoefficient and
+     * binomialCoefficientDouble will return values that fit in a long, double,
+     * resp.  Remove comments around test below to get this in test-report
+     *
+        public void testLimits() {
+            findBinomialLimits();
+        }
+     */
+
+    private void findBinomialLimits() {
+        /**
+         * will kick out 66 as the limit for long
+         */
+        boolean foundLimit = false;
+        int test = 10;
+        while (!foundLimit) {
+            try {
+                double x = MathUtils.binomialCoefficient(test, test / 2);
+            } catch (ArithmeticException ex) {
+                foundLimit = true;
+                System.out.println
+                    ("largest n for binomialCoefficient = " + (test - 1) );
+            }
+            test++;
+        }
+
+       /**
+        * will kick out 1029 as the limit for double
+        */
+        foundLimit = false;
+        test = 10;
+        while (!foundLimit) {
+            double x = MathUtils.binomialCoefficientDouble(test, test / 2);
+            if (Double.isInfinite(x)) {
+                foundLimit = true;
+                System.out.println
+                    ("largest n for binomialCoefficientD = " + (test - 1) );
+            }
+            test++;
+        }
+    }
+
+    /**
+     * Finds the largest values of n for which factiorial and
+     * factorialDouble will return values that fit in a long, double,
+     * resp.  Remove comments around test below to get this in test-report
+
+        public void testFactiorialLimits() {
+            findFactorialLimits();
+        }
+     */
+
+    private void findFactorialLimits() {
+        /**
+         * will kick out 20 as the limit for long
+         */
+        boolean foundLimit = false;
+        int test = 10;
+        while (!foundLimit) {
+            try {
+                double x = MathUtils.factorial(test);
+            } catch (ArithmeticException ex) {
+                foundLimit = true;
+                System.out.println
+                    ("largest n for factorial = " + (test - 1) );
+            }
+            test++;
+        }
+
+       /**
+        * will kick out 170 as the limit for double
+        */
+        foundLimit = false;
+        test = 10;
+        while (!foundLimit) {
+            double x = MathUtils.factorialDouble(test);
+            if (Double.isInfinite(x)) {
+                foundLimit = true;
+                System.out.println
+                    ("largest n for factorialDouble = " + (test - 1) );
+            }
+            test++;
+        }
+    }
+
+
+    /**
+     * Exact direct multiplication implementation to test against
+     */
+    private long factorial(int n) {
+        long result = 1;
+        for (int i = 2; i <= n; i++) {
+            result *= i;
+        }
+        return result;
+    }
+
+
+    public void testSignDouble() {
+        double delta = 0.0 ;
+        assertEquals( 1.0, MathUtils.sign( 2.0 ), delta ) ;
+        assertEquals( -1.0, MathUtils.sign( -2.0 ), delta ) ;
+    }
+
+
+    public void testSignFloat() {
+        float delta = 0.0F ;
+        assertEquals( 1.0F, MathUtils.sign( 2.0F ), delta ) ;
+        assertEquals( -1.0F, MathUtils.sign( -2.0F ), delta ) ;
+    }
+
+
+    public void testSignByte() {
+        assertEquals( (byte)1, MathUtils.sign( (byte)2 ) ) ;
+        assertEquals( (byte)(-1), MathUtils.sign( (byte)(-2) ) ) ;
+    }
+
+
+    public void testSignShort() {
+        assertEquals( (short)1, MathUtils.sign( (short)2 ) ) ;
+        assertEquals( (short)(-1), MathUtils.sign( (short)(-2) ) ) ;
+    }
+
+
+    public void testSignInt() {
+        assertEquals( (int)1, MathUtils.sign( (int)(2) ) ) ;
+        assertEquals( (int)(-1), MathUtils.sign( (int)(-2) ) ) ;
+    }
+
+
+    public void testSignLong() {
+        assertEquals( 1L, MathUtils.sign( 2L ) ) ;
+        assertEquals( -1L, MathUtils.sign( -2L ) ) ;
+    }
+}
\ No newline at end of file
diff --git a/src/test/org/apache/commons/math/util/TestBean.java b/src/test/org/apache/commons/math/util/TestBean.java
new file mode 100644
index 0000000..af269a1
--- /dev/null
+++ b/src/test/org/apache/commons/math/util/TestBean.java
@@ -0,0 +1,109 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+
+package org.apache.commons.math.util;
+
+/**
+ * @version $Revision: 1.5 $ $Date: 2003/11/14 22:22:23 $
+ */
+public class TestBean {
+    private Double x = new Double(1.0);
+    
+    private String y = "1.0";
+    
+    private Double z = new Double(2.0);
+    
+    /**
+     * 
+     */
+    public Double getX() {
+        return x;
+    }
+
+    /**
+     * 
+     */
+    public String getY() {
+        return y;
+    }
+
+    /**
+     * 
+     */
+    public void setX(Double double1) {
+        x = double1;
+    }
+
+    /**
+     * 
+     */
+    public void setY(String string) {
+        y = string;
+    }
+    
+    /**
+     * 
+     */
+    public Double getZ() {
+        throw new RuntimeException();
+    }
+
+    /**
+     * 
+     */
+    public void setZ(Double double1) {
+        z = double1;
+    }
+
+}
diff --git a/src/test/org/apache/commons/math/util/TransformerMapTest.java b/src/test/org/apache/commons/math/util/TransformerMapTest.java
new file mode 100644
index 0000000..14cd492
--- /dev/null
+++ b/src/test/org/apache/commons/math/util/TransformerMapTest.java
@@ -0,0 +1,141 @@
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their name without prior written
+ *    permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+
+package org.apache.commons.math.util;
+
+import junit.framework.TestCase;
+
+/**
+ * @version $Revision: 1.5 $ $Date: 2003/11/14 22:22:23 $
+ */
+public class TransformerMapTest extends TestCase {
+    /**
+     * 
+     */
+    public void testPutTransformer(){
+        NumberTransformer expected = new DefaultTransformer();
+        
+        TransformerMap map = new TransformerMap();
+        map.putTransformer(TransformerMapTest.class, expected);
+        assertEquals(expected, map.getTransformer(TransformerMapTest.class));
+    }
+    
+    /**
+     * 
+     */
+    public void testContainsClass(){
+        NumberTransformer expected = new DefaultTransformer();
+        TransformerMap map = new TransformerMap();
+        map.putTransformer(TransformerMapTest.class, expected);
+        assertTrue(map.containsClass(TransformerMapTest.class));
+    }
+    
+    /**
+     * 
+     */
+    public void testContainsTransformer(){
+        NumberTransformer expected = new DefaultTransformer();
+        TransformerMap map = new TransformerMap();
+        map.putTransformer(TransformerMapTest.class, expected);
+        assertTrue(map.containsTransformer(expected));
+    }
+
+    /**
+     * 
+     */
+    public void testRemoveTransformer(){
+        NumberTransformer expected = new DefaultTransformer();
+        
+        TransformerMap map = new TransformerMap();
+        map.putTransformer(TransformerMapTest.class, expected);
+        assertTrue(map.containsClass(TransformerMapTest.class));
+        assertTrue(map.containsTransformer(expected));
+        map.removeTransformer(TransformerMapTest.class);
+        assertFalse(map.containsClass(TransformerMapTest.class));
+        assertFalse(map.containsTransformer(expected));
+    }
+
+    /**
+     * 
+     */
+    public void testClear(){
+        NumberTransformer expected = new DefaultTransformer();
+        
+        TransformerMap map = new TransformerMap();
+        map.putTransformer(TransformerMapTest.class, expected);
+        assertTrue(map.containsClass(TransformerMapTest.class));
+        map.clear();
+        assertFalse(map.containsClass(TransformerMapTest.class));
+    }
+    
+    /**
+     * 
+     */
+    public void testClasses(){
+        NumberTransformer expected = new DefaultTransformer();
+        TransformerMap map = new TransformerMap();
+        map.putTransformer(TransformerMapTest.class, expected);
+        assertTrue(map.classes().contains(TransformerMapTest.class));
+    }
+    
+    /**
+     * 
+     */
+    public void testTransformers(){
+        NumberTransformer expected = new DefaultTransformer();
+        TransformerMap map = new TransformerMap();
+        map.putTransformer(TransformerMapTest.class, expected);
+        assertTrue(map.transformers().contains(expected));
+    }
+}
diff --git a/xdocs/.cvsignore b/xdocs/.cvsignore
new file mode 100644
index 0000000..cb6131b
--- /dev/null
+++ b/xdocs/.cvsignore
@@ -0,0 +1 @@
+stylesheets
