{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "/home/liumengjiao/Desktop/CI/Benchmark/data/changesInfo/",
  "properties": {
    "trigger.tests": "org.apache.commons.math.util.MathUtilsTest::testFactorial",
    "test.dir": "src/test",
    "clz.modified": "org.apache.commons.math.util.MathUtils",
    "src.dir": "src/java"
  },
  "timeoutSecond": 100,
  "proj": "Math",
  "id": "93",
  "workingDir": "../bugs/Math_93_buggy",
  "buggyCommit": "3112f69e1d789e00fb21a1dde901b313547fed60",
  "inducingCommit": "0a904461932f2c0455611e77ec6a8d8aced2980b",
  "originalCommit": "d5e5ca813228dac93f3111b3879e44e1642bf0cf",
  "bug_name": "Math_93",
  "derive": "defects4j",
  "original_fixing_commit": "7cd3d822b65b7acdd1f6e1c82b291cd994f4fe05",
  "buildFiles_changed": false,
  "regression": false,
  "inducing_changes": [],
  "inducing_type": {
    "add_classes": {
      "qualified_names": [
        "src/java/org/apache/commons/math/ConvergenceException.java",
        "src/java/org/apache/commons/math/MathConfigurationException.java",
        "src/java/org/apache/commons/math/MathException.java",
        "src/java/org/apache/commons/math/analysis/BisectionSolver.java",
        "src/java/org/apache/commons/math/analysis/BrentSolver.java",
        "src/java/org/apache/commons/math/analysis/ConvergenceException.java",
        "src/java/org/apache/commons/math/analysis/CubicSplineFunction.java",
        "src/java/org/apache/commons/math/analysis/QuinticFunction.java",
        "src/java/org/apache/commons/math/analysis/RootFinding.java",
        "src/java/org/apache/commons/math/analysis/SecantSolver.java",
        "src/java/org/apache/commons/math/analysis/SinFunction.java",
        "src/java/org/apache/commons/math/analysis/SplineInterpolator.java",
        "src/java/org/apache/commons/math/analysis/UnivariateFunction.java",
        "src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java",
        "src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java",
        "src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java",
        "src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java",
        "src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java",
        "src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java",
        "src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java",
        "src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java",
        "src/java/org/apache/commons/math/complex/Complex.java",
        "src/java/org/apache/commons/math/complex/ComplexMath.java",
        "src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java",
        "src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java",
        "src/java/org/apache/commons/math/distribution/BinomialDistribution.java",
        "src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java",
        "src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java",
        "src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java",
        "src/java/org/apache/commons/math/distribution/ContinuousDistribution.java",
        "src/java/org/apache/commons/math/distribution/DiscreteDistribution.java",
        "src/java/org/apache/commons/math/distribution/DistributionFactory.java",
        "src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java",
        "src/java/org/apache/commons/math/distribution/ExponentialDistribution.java",
        "src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java",
        "src/java/org/apache/commons/math/distribution/FDistribution.java",
        "src/java/org/apache/commons/math/distribution/FDistributionImpl.java",
        "src/java/org/apache/commons/math/distribution/GammaDistribution.java",
        "src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java",
        "src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java",
        "src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java",
        "src/java/org/apache/commons/math/distribution/TDistribution.java",
        "src/java/org/apache/commons/math/distribution/TDistributionImpl.java",
        "src/java/org/apache/commons/math/linear/RealMatrix.java",
        "src/java/org/apache/commons/math/linear/RealMatrixImpl.java",
        "src/java/org/apache/commons/math/random/EmpiricalDistribution.java",
        "src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java",
        "src/java/org/apache/commons/math/random/RandomData.java",
        "src/java/org/apache/commons/math/random/RandomDataImpl.java",
        "src/java/org/apache/commons/math/random/ValueServer.java",
        "src/java/org/apache/commons/math/special/Beta.java",
        "src/java/org/apache/commons/math/special/Gamma.java",
        "src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java",
        "src/java/org/apache/commons/math/stat/AbstractUnivariate.java",
        "src/java/org/apache/commons/math/stat/Applyable.java",
        "src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java",
        "src/java/org/apache/commons/math/stat/BivariateRegression.java",
        "src/java/org/apache/commons/math/stat/Frequency.java",
        "src/java/org/apache/commons/math/stat/ListUnivariateImpl.java",
        "src/java/org/apache/commons/math/stat/StatUtils.java",
        "src/java/org/apache/commons/math/stat/StoreUnivariate.java",
        "src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java",
        "src/java/org/apache/commons/math/stat/TestStatistic.java",
        "src/java/org/apache/commons/math/stat/TestStatisticImpl.java",
        "src/java/org/apache/commons/math/stat/Univariate.java",
        "src/java/org/apache/commons/math/stat/UnivariateImpl.java",
        "src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java",
        "src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java",
        "src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java",
        "src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java",
        "src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java",
        "src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java",
        "src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java",
        "src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java",
        "src/java/org/apache/commons/math/stat/univariate/moment/Mean.java",
        "src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java",
        "src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java",
        "src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java",
        "src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java",
        "src/java/org/apache/commons/math/stat/univariate/moment/Variance.java",
        "src/java/org/apache/commons/math/stat/univariate/rank/Max.java",
        "src/java/org/apache/commons/math/stat/univariate/rank/Median.java",
        "src/java/org/apache/commons/math/stat/univariate/rank/Min.java",
        "src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java",
        "src/java/org/apache/commons/math/stat/univariate/summary/Product.java",
        "src/java/org/apache/commons/math/stat/univariate/summary/Sum.java",
        "src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java",
        "src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java",
        "src/java/org/apache/commons/math/util/BeanTransformer.java",
        "src/java/org/apache/commons/math/util/ContinuedFraction.java",
        "src/java/org/apache/commons/math/util/ContractableDoubleArray.java",
        "src/java/org/apache/commons/math/util/DefaultTransformer.java",
        "src/java/org/apache/commons/math/util/DoubleArray.java",
        "src/java/org/apache/commons/math/util/ExpandableDoubleArray.java",
        "src/java/org/apache/commons/math/util/FixedDoubleArray.java",
        "src/java/org/apache/commons/math/util/MathUtils.java",
        "src/java/org/apache/commons/math/util/NumberTransformer.java",
        "src/java/org/apache/commons/math/util/TransformerMap.java"
      ],
      "num": 98
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  },
  "trigger_tests": [
    {
      "test_class": "org.apache.commons.math.util.MathUtilsTest",
      "test_function": "testFactorial",
      "assertion_line": "237",
      "exception": "junit.framework.AssertionFailedError",
      "message": "17!  expected:\u003c3.55687428096E14\u003e but was:\u003c3.55687428096001E14\u003e"
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/math/util/MathUtils.java",
        "src/java/org/apache/commons/math/util/MathUtils.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.math.util.MathUtils:factorial:[final int n]:long",
            "org.apache.commons.math.util.MathUtils:factorialLog:[final int n]:double",
            "org.apache.commons.math.util.MathUtils:equals:[double[] x, double[] y]:boolean",
            "org.apache.commons.math.util.MathUtils:factorialDouble:[final int n]:double"
          ],
          "num": 4
        },
        {
          "qualified_names": [
            "org.apache.commons.math.util.MathUtils:factorialDouble:[final int n]:double",
            "org.apache.commons.math.util.MathUtils:factorialLog:[final int n]:double",
            "org.apache.commons.math.util.MathUtils:factorial:[final int n]:long"
          ],
          "num": 3
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "313",
            "338",
            "339",
            "340",
            "341",
            "343",
            "369",
            "389"
          ],
          "num": 8
        },
        {
          "qualified_names": [
            "314",
            "315",
            "316",
            "317",
            "318",
            "319",
            "320",
            "345",
            "346",
            "348",
            "349",
            "350",
            "351",
            "352",
            "379",
            "380",
            "381",
            "402",
            "403",
            "404"
          ],
          "num": 20
        }
      ],
      "diff": "diff --git a/src/java/org/apache/commons/math/util/MathUtils.java b/src/java/org/apache/commons/math/util/MathUtils.java\nindex 50ed22a..1389d5a 100644\n--- a/src/java/org/apache/commons/math/util/MathUtils.java\n+++ b/src/java/org/apache/commons/math/util/MathUtils.java\n@@ -311,6 +311,13 @@\n         }\n         return true;\n     }\n+    \n+    /** All long-representable factorials */\n+    private static final long[] factorials \u003d new long[] \n+       {1, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880, 3628800, 39916800,\n+        479001600, 6227020800l, 87178291200l, 1307674368000l, 20922789888000l,\n+        355687428096000l, 6402373705728000l, 121645100408832000l,\n+        2432902008176640000l};\n \n     /**\n      * Returns n!. Shorthand for \u003ccode\u003en\u003c/code\u003e \u003ca\n@@ -335,12 +342,14 @@\n      * @throws IllegalArgumentException if n \u003c 0\n      */\n     public static long factorial(final int n) {\n-        long result \u003d Math.round(factorialDouble(n));\n-        if (result \u003d\u003d Long.MAX_VALUE) {\n-            throw new ArithmeticException(\n-                \"result too large to represent in a long integer\");\n+        if (n \u003c 0) {\n+            throw new IllegalArgumentException(\"must have n \u003e\u003d 0 for n!\");\n         }\n-        return result;\n+        if (n \u003e 20) {\n+            throw new ArithmeticException(\n+                    \"factorial value is too large to fit in a long\");\n+        }\n+        return factorials[n];\n     }\n \n     /**\n@@ -367,6 +376,9 @@\n         if (n \u003c 0) {\n             throw new IllegalArgumentException(\"must have n \u003e\u003d 0 for n!\");\n         }\n+        if (n \u003c 21) {\n+            return factorial(n);\n+        }\n         return Math.floor(Math.exp(factorialLog(n)) + 0.5);\n     }\n \n@@ -387,6 +399,9 @@\n         if (n \u003c 0) {\n             throw new IllegalArgumentException(\"must have n \u003e 0 for n!\");\n         }\n+        if (n \u003c 21) {\n+            return Math.log(factorial(n));\n+        }\n         double logSum \u003d 0;\n         for (int i \u003d 2; i \u003c\u003d n; i++) {\n             logSum +\u003d Math.log((double)i);\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldDeclaration [10453,10800]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [11770,11867]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [13027,13083]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [13694,13760]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ArrayAccess [12028,12041]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "NumberLiteral: 20 [11884,11886]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [11413,11458]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "QualifiedName: Long.MAX_VALUE [11481,11495]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: result [11635,11641]",
          "to": ""
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [
        "org.apache.commons.math.util.MathUtils:equals:[double[] x, double[] y]:boolean"
      ],
      "num": 1
    }
  },
  "patch_changed_mths": {
    "qualified_names": [],
    "num": 0
  }
}