===
insert-tree
---
ImportDeclaration [1043,1087]
    QualifiedName: java.io.UnsupportedEncodingException [1050,1086]
to
CompilationUnit [0,21206]
at 5
===
insert-tree
---
FieldDeclaration [2587,2772]
    Javadoc [2587,2738]
        TagElement [2598,2730]
            TextElement: Line length for encoding.  Not used when decoding.  Any value of zero or less implies [2598,2683]
            TextElement: so chunking of the base64 encoded data. [2691,2730]
    Modifier: private [2743,2750]
    Modifier: final [2751,2756]
    PrimitiveType: int [2757,2760]
    VariableDeclarationFragment [2761,2771]
        SimpleName: lineLength [2761,2771]
to
TypeDeclaration [1073,21205]
at 16
===
insert-tree
---
FieldDeclaration [2778,2921]
    Javadoc [2778,2881]
        TagElement [2789,2873]
            TextElement: Line separator for encoding.  Not used when decoding.  Only used if lineLength >= 1. [2789,2873]
    Modifier: private [2886,2893]
    Modifier: final [2894,2899]
    ArrayType [2900,2906]
        PrimitiveType: byte [2900,2904]
        Dimension [2904,2906]
    VariableDeclarationFragment [2907,2920]
        SimpleName: lineSeparator [2907,2920]
to
TypeDeclaration [1073,21205]
at 17
===
insert-tree
---
FieldDeclaration [2927,3145]
    Javadoc [2927,3111]
        TagElement [2938,3103]
            TextElement: Convenience variable to help us determine when our buffer is going to run out of [2938,3018]
            TextElement: room and needs resizing.  <code>decodeSize = 3 + lineSeparator.length;</code> [3026,3103]
    Modifier: private [3116,3123]
    Modifier: final [3124,3129]
    PrimitiveType: int [3130,3133]
    VariableDeclarationFragment [3134,3144]
        SimpleName: decodeSize [3134,3144]
to
TypeDeclaration [1073,21205]
at 18
===
insert-tree
---
FieldDeclaration [3151,3369]
    Javadoc [3151,3335]
        TagElement [3162,3327]
            TextElement: Convenience variable to help us determine when our buffer is going to run out of [3162,3242]
            TextElement: room and needs resizing.  <code>encodeSize = 4 + lineSeparator.length;</code> [3250,3327]
    Modifier: private [3340,3347]
    Modifier: final [3348,3353]
    PrimitiveType: int [3354,3357]
    VariableDeclarationFragment [3358,3368]
        SimpleName: encodeSize [3358,3368]
to
TypeDeclaration [1073,21205]
at 19
===
insert-tree
---
FieldDeclaration [3375,3440]
    Javadoc [3375,3416]
        TagElement [3386,3408]
            TextElement: Buffer for streaming.  [3386,3408]
    Modifier: private [3421,3428]
    ArrayType [3429,3435]
        PrimitiveType: byte [3429,3433]
        Dimension [3433,3435]
    VariableDeclarationFragment [3436,3439]
        SimpleName: buf [3436,3439]
to
TypeDeclaration [1073,21205]
at 20
===
insert-node
---
FieldDeclaration [3446,3548]
to
TypeDeclaration [1073,21205]
at 21
===
insert-node
---
FieldDeclaration [3554,3659]
to
TypeDeclaration [1073,21205]
at 22
===
insert-tree
---
FieldDeclaration [3665,3922]
    Javadoc [3665,3890]
        TagElement [3676,3882]
            TextElement: Variable tracks how many characters have been written to the current line. [3676,3750]
            TextElement: Only used when encoding.  We use it to make sure each encoded line never [3758,3830]
            TextElement: goes beyond lineLength (if lineLength >= 0). [3838,3882]
    Modifier: private [3895,3902]
    PrimitiveType: int [3903,3906]
    VariableDeclarationFragment [3907,3921]
        SimpleName: currentLinePos [3907,3921]
to
TypeDeclaration [1073,21205]
at 23
===
insert-tree
---
FieldDeclaration [3928,4110]
    Javadoc [3928,4085]
        TagElement [3939,4077]
            TextElement: Writes to the buffer only occur after every 3 reads when encoding, an [3939,4008]
            TextElement: every 4 reads when decoding.  This variable helps track that. [4016,4077]
    Modifier: private [4090,4097]
    PrimitiveType: int [4098,4101]
    VariableDeclarationFragment [4102,4109]
        SimpleName: modulus [4102,4109]
to
TypeDeclaration [1073,21205]
at 24
===
insert-tree
---
FieldDeclaration [4116,4306]
    Javadoc [4116,4281]
        TagElement [4127,4273]
            TextElement: Boolean flag to indicate the EOF has been reached.  Once EOF has been [4127,4196]
            TextElement: reached, this Base64 object becomes useless, and must be thrown away. [4204,4273]
    Modifier: private [4286,4293]
    PrimitiveType: boolean [4294,4301]
    VariableDeclarationFragment [4302,4305]
        SimpleName: eof [4302,4305]
to
TypeDeclaration [1073,21205]
at 25
===
insert-tree
---
FieldDeclaration [4312,4522]
    Javadoc [4312,4503]
        TagElement [4323,4495]
            TextElement: Place holder for the 3 bytes we're dealing with for our base64 logic. [4323,4392]
            TextElement: Bitwise operations store and extract the base64 encoding or decoding from [4400,4473]
            TextElement: this variable. [4481,4495]
    Modifier: private [4508,4515]
    PrimitiveType: int [4516,4519]
    VariableDeclarationFragment [4520,4521]
        SimpleName: x [4520,4521]
to
TypeDeclaration [1073,21205]
at 26
===
insert-tree
---
MethodDeclaration [4528,4732]
    Javadoc [4528,4668]
        TagElement [4539,4660]
            TextElement: Default constructor:  lineLength is 76, and the lineSeparator is CRLF [4539,4608]
            TextElement: when encoding, and all forms can be decoded. [4616,4660]
    SimpleName: Base64 [4673,4679]
    Block [4682,4732]
        ConstructorInvocation [4692,4726]
            SimpleName: CHUNK_SIZE [4697,4707]
            SimpleName: CHUNK_SEPARATOR [4709,4724]
to
TypeDeclaration [1073,21205]
at 27
===
insert-tree
---
MethodDeclaration [4738,5319]
    Javadoc [4738,5241]
        TagElement [4749,5079]
            TextElement: <p> [4749,4752]
            TextElement: Consumer can use this constructor to choose a different lineLength [4760,4826]
            TextElement: when encoding (lineSeparator is still CRLF).  All forms of data can [4834,4901]
            TextElement: be decoded. [4909,4920]
            TextElement: </p><p> [4928,4935]
            TextElement: Note:  lineLengths that aren't multiples of 4 will still essentially [4943,5011]
            TextElement: end up being multiples of 4 in the encoded data. [5019,5067]
            TextElement: </p> [5075,5079]
        TagElement [5094,5233]
            SimpleName: lineLength [5101,5111]
            TextElement:  each line of encoded data will be at most this long [5111,5163]
            TextElement: (rounded up to nearest multiple of 4).  Ignored when decoding. [5171,5233]
    SimpleName: Base64 [5246,5252]
    SingleVariableDeclaration [5253,5267]
        PrimitiveType: int [5253,5256]
        SimpleName: lineLength [5257,5267]
    Block [5269,5319]
        ConstructorInvocation [5279,5313]
            SimpleName: lineLength [5284,5294]
            SimpleName: CHUNK_SEPARATOR [5296,5311]
to
TypeDeclaration [1073,21205]
at 28
===
insert-tree
---
MethodDeclaration [5325,6930]
    Javadoc [5325,6120]
        TagElement [5336,5654]
            TextElement: <p> [5336,5339]
            TextElement: Consumer can use this constructor to choose a different lineLength [5347,5413]
            TextElement: and lineSeparator when encoding.  All forms of data can [5421,5476]
            TextElement: be decoded. [5484,5495]
            TextElement: </p><p> [5503,5510]
            TextElement: Note:  lineLengths that aren't multiples of 4 will still essentially [5518,5586]
            TextElement: end up being multiples of 4 in the encoded data. [5594,5642]
            TextElement: </p> [5650,5654]
        TagElement [5662,5825]
            SimpleName: lineLength [5669,5679]
            TextElement:     Each line of encoded data will be at most this long [5679,5734]
            TextElement: (rounded up to nearest multiple of 4).  Ignored when decoding. [5763,5825]
        TagElement [5833,5945]
            SimpleName: lineSeparator [5840,5853]
            TextElement:  Each line of encoded data will end with this [5853,5898]
            TextElement: sequence of bytes. [5927,5945]
        TagElement [5953,6112]
            SimpleName: IllegalArgumentException [5961,5985]
            TextElement:  The provided lineSeparator included [5985,6021]
            TextElement: some base64 characters.  That's not going to work! [6062,6112]
    SimpleName: Base64 [6125,6131]
    SingleVariableDeclaration [6132,6146]
        PrimitiveType: int [6132,6135]
        SimpleName: lineLength [6136,6146]
    SingleVariableDeclaration [6148,6168]
        ArrayType [6148,6154]
            PrimitiveType: byte [6148,6152]
            Dimension [6152,6154]
        SimpleName: lineSeparator [6155,6168]
    Block [6170,6930]
        ExpressionStatement [6180,6209]
            Assignment [6180,6208]
                FieldAccess [6180,6195]
                    ThisExpression [6180,6184]
                    SimpleName: lineLength [6185,6195]
                ASSIGNMENT_OPERATOR: = [6196,6197]
                SimpleName: lineLength [6198,6208]
        ExpressionStatement [6218,6253]
            Assignment [6218,6252]
                FieldAccess [6218,6236]
                    ThisExpression [6218,6222]
                    SimpleName: lineSeparator [6223,6236]
                ASSIGNMENT_OPERATOR: = [6237,6238]
                SimpleName: lineSeparator [6239,6252]
        IfStatement [6262,6408]
            InfixExpression [6266,6280]
                SimpleName: lineLength [6266,6276]
                INFIX_EXPRESSION_OPERATOR: > [6277,6278]
                NumberLiteral: 0 [6279,6280]
            Block [6282,6358]
                ExpressionStatement [6296,6348]
                    Assignment [6296,6347]
                        FieldAccess [6296,6311]
                            ThisExpression [6296,6300]
                            SimpleName: encodeSize [6301,6311]
                        ASSIGNMENT_OPERATOR: = [6312,6313]
                        CastExpression [6314,6347]
                            PrimitiveType: byte [6315,6319]
                            ParenthesizedExpression [6321,6347]
                                InfixExpression [6322,6346]
                                    NumberLiteral: 4 [6322,6323]
                                    INFIX_EXPRESSION_OPERATOR: + [6324,6325]
                                    QualifiedName: lineSeparator.length [6326,6346]
            Block [6364,6408]
                ExpressionStatement [6378,6398]
                    Assignment [6378,6397]
                        FieldAccess [6378,6393]
                            ThisExpression [6378,6382]
                            SimpleName: encodeSize [6383,6393]
                        ASSIGNMENT_OPERATOR: = [6394,6395]
                        NumberLiteral: 4 [6396,6397]
        ExpressionStatement [6417,6450]
            Assignment [6417,6449]
                FieldAccess [6417,6432]
                    ThisExpression [6417,6421]
                    SimpleName: decodeSize [6422,6432]
                ASSIGNMENT_OPERATOR: = [6433,6434]
                InfixExpression [6435,6449]
                    SimpleName: encodeSize [6435,6445]
                    INFIX_EXPRESSION_OPERATOR: - [6446,6447]
                    NumberLiteral: 1 [6448,6449]
        VariableDeclarationStatement [6459,6511]
            ArrayType [6459,6465]
                PrimitiveType: byte [6459,6463]
                Dimension [6463,6465]
            VariableDeclarationFragment [6466,6510]
                SimpleName: separator [6466,6475]
                MethodInvocation [6478,6510]
                    SimpleName: discardWhitespace [6478,6495]
                    METHOD_INVOCATION_ARGUMENTS [6496,6509]
                        SimpleName: lineSeparator [6496,6509]
        IfStatement [6520,6924]
            InfixExpression [6524,6576]
                InfixExpression [6524,6544]
                    QualifiedName: separator.length [6524,6540]
                    INFIX_EXPRESSION_OPERATOR: > [6541,6542]
                    NumberLiteral: 0 [6543,6544]
                INFIX_EXPRESSION_OPERATOR: && [6545,6547]
                MethodInvocation [6548,6576]
                    SimpleName: isArrayByteBase64 [6548,6565]
                    METHOD_INVOCATION_ARGUMENTS [6566,6575]
                        SimpleName: separator [6566,6575]
            Block [6578,6924]
                VariableDeclarationStatement [6592,6603]
                    SimpleType [6592,6598]
                        SimpleName: String [6592,6598]
                    VariableDeclarationFragment [6599,6602]
                        SimpleName: sep [6599,6602]
                TryStatement [6616,6799]
                    Block [6620,6693]
                        ExpressionStatement [6638,6679]
                            Assignment [6638,6678]
                                SimpleName: sep [6638,6641]
                                ASSIGNMENT_OPERATOR: = [6642,6643]
                                ClassInstanceCreation [6644,6678]
                                    SimpleType [6648,6654]
                                        SimpleName: String [6648,6654]
                                    SimpleName: lineSeparator [6655,6668]
                                    StringLiteral: "UTF-8" [6670,6677]
                    CatchClause [6694,6799]
                        SingleVariableDeclaration [6701,6733]
                            SimpleType [6701,6729]
                                SimpleName: UnsupportedEncodingException [6701,6729]
                            SimpleName: uee [6730,6733]
                        Block [6735,6799]
                            ExpressionStatement [6753,6785]
                                Assignment [6753,6784]
                                    SimpleName: sep [6753,6756]
                                    ASSIGNMENT_OPERATOR: = [6757,6758]
                                    ClassInstanceCreation [6759,6784]
                                        SimpleType [6763,6769]
                                            SimpleName: String [6763,6769]
                                        SimpleName: lineSeparator [6770,6783]
                ThrowStatement [6812,6914]
                    ClassInstanceCreation [6818,6913]
                        SimpleType [6822,6846]
                            SimpleName: IllegalArgumentException [6822,6846]
                        InfixExpression [6847,6912]
                            StringLiteral: "lineSeperator must not contain base64 characters: [" [6847,6900]
                            INFIX_EXPRESSION_OPERATOR: + [6901,6902]
                            SimpleName: sep [6903,6906]
                            StringLiteral: "]" [6909,6912]
to
TypeDeclaration [1073,21205]
at 29
===
insert-tree
---
FieldDeclaration [6936,7715]
    Javadoc [6936,7281]
        TagElement [6947,7273]
            TextElement: This array is a lookup table that translates 6-bit positive integer [6947,7014]
            TextElement: index values into their "Base64 Alphabet" equivalents as specified [7022,7088]
            TextElement: in Table 1 of RFC 2045. [7096,7119]
            TextElement: Thanks to "commons" project in ws.apache.org for this code.  [7134,7194]
            TextElement: http://svn.apache.org/repos/asf/webservices/commons/trunk/modules/util/ [7202,7273]
    Modifier: private [7286,7293]
    Modifier: static [7294,7300]
    Modifier: final [7301,7306]
    ArrayType [7307,7313]
        PrimitiveType: byte [7307,7311]
        Dimension [7311,7313]
    VariableDeclarationFragment [7314,7714]
        SimpleName: intToBase64 [7314,7325]
        ArrayInitializer [7328,7714]
            CharacterLiteral: 'A' [7342,7345]
            CharacterLiteral: 'B' [7347,7350]
            CharacterLiteral: 'C' [7352,7355]
            CharacterLiteral: 'D' [7357,7360]
            CharacterLiteral: 'E' [7362,7365]
            CharacterLiteral: 'F' [7367,7370]
            CharacterLiteral: 'G' [7372,7375]
            CharacterLiteral: 'H' [7377,7380]
            CharacterLiteral: 'I' [7382,7385]
            CharacterLiteral: 'J' [7387,7390]
            CharacterLiteral: 'K' [7392,7395]
            CharacterLiteral: 'L' [7397,7400]
            CharacterLiteral: 'M' [7402,7405]
            CharacterLiteral: 'N' [7419,7422]
            CharacterLiteral: 'O' [7424,7427]
            CharacterLiteral: 'P' [7429,7432]
            CharacterLiteral: 'Q' [7434,7437]
            CharacterLiteral: 'R' [7439,7442]
            CharacterLiteral: 'S' [7444,7447]
            CharacterLiteral: 'T' [7449,7452]
            CharacterLiteral: 'U' [7454,7457]
            CharacterLiteral: 'V' [7459,7462]
            CharacterLiteral: 'W' [7464,7467]
            CharacterLiteral: 'X' [7469,7472]
            CharacterLiteral: 'Y' [7474,7477]
            CharacterLiteral: 'Z' [7479,7482]
            CharacterLiteral: 'a' [7496,7499]
            CharacterLiteral: 'b' [7501,7504]
            CharacterLiteral: 'c' [7506,7509]
            CharacterLiteral: 'd' [7511,7514]
            CharacterLiteral: 'e' [7516,7519]
            CharacterLiteral: 'f' [7521,7524]
            CharacterLiteral: 'g' [7526,7529]
            CharacterLiteral: 'h' [7531,7534]
            CharacterLiteral: 'i' [7536,7539]
            CharacterLiteral: 'j' [7541,7544]
            CharacterLiteral: 'k' [7546,7549]
            CharacterLiteral: 'l' [7551,7554]
            CharacterLiteral: 'm' [7556,7559]
            CharacterLiteral: 'n' [7573,7576]
            CharacterLiteral: 'o' [7578,7581]
            CharacterLiteral: 'p' [7583,7586]
            CharacterLiteral: 'q' [7588,7591]
            CharacterLiteral: 'r' [7593,7596]
            CharacterLiteral: 's' [7598,7601]
            CharacterLiteral: 't' [7603,7606]
            CharacterLiteral: 'u' [7608,7611]
            CharacterLiteral: 'v' [7613,7616]
            CharacterLiteral: 'w' [7618,7621]
            CharacterLiteral: 'x' [7623,7626]
            CharacterLiteral: 'y' [7628,7631]
            CharacterLiteral: 'z' [7633,7636]
            CharacterLiteral: '0' [7650,7653]
            CharacterLiteral: '1' [7655,7658]
            CharacterLiteral: '2' [7660,7663]
            CharacterLiteral: '3' [7665,7668]
            CharacterLiteral: '4' [7670,7673]
            CharacterLiteral: '5' [7675,7678]
            CharacterLiteral: '6' [7680,7683]
            CharacterLiteral: '7' [7685,7688]
            CharacterLiteral: '8' [7690,7693]
            CharacterLiteral: '9' [7695,7698]
            CharacterLiteral: '+' [7700,7703]
            CharacterLiteral: '/' [7705,7708]
to
TypeDeclaration [1073,21205]
at 30
===
insert-tree
---
FieldDeclaration [7721,8833]
    Javadoc [7721,8213]
        TagElement [7732,8205]
            TextElement: This array is a lookup table that translates unicode characters [7732,7795]
            TextElement: drawn from the "Base64 Alphabet" (as specified in Table 1 of RFC 2045) [7803,7873]
            TextElement: into their 6-bit positive integer equivalents.  Characters that [7881,7944]
            TextElement: are not in the Base64 alphabet but fall within the bounds of the [7952,8016]
            TextElement: array are translated to -1. [8024,8051]
            TextElement: Thanks to "commons" project in ws.apache.org for this code. [8066,8125]
            TextElement: http://svn.apache.org/repos/asf/webservices/commons/trunk/modules/util/  [8133,8205]
    Modifier: private [8218,8225]
    Modifier: static [8226,8232]
    Modifier: final [8233,8238]
    ArrayType [8239,8245]
        PrimitiveType: byte [8239,8243]
        Dimension [8243,8245]
    VariableDeclarationFragment [8246,8832]
        SimpleName: base64ToInt [8246,8257]
        ArrayInitializer [8260,8832]
            PrefixExpression [8274,8276]
                PREFIX_EXPRESSION_OPERATOR: - [8274,8275]
                NumberLiteral: 1 [8275,8276]
            PrefixExpression [8278,8280]
                PREFIX_EXPRESSION_OPERATOR: - [8278,8279]
                NumberLiteral: 1 [8279,8280]
            PrefixExpression [8282,8284]
                PREFIX_EXPRESSION_OPERATOR: - [8282,8283]
                NumberLiteral: 1 [8283,8284]
            PrefixExpression [8286,8288]
                PREFIX_EXPRESSION_OPERATOR: - [8286,8287]
                NumberLiteral: 1 [8287,8288]
            PrefixExpression [8290,8292]
                PREFIX_EXPRESSION_OPERATOR: - [8290,8291]
                NumberLiteral: 1 [8291,8292]
            PrefixExpression [8294,8296]
                PREFIX_EXPRESSION_OPERATOR: - [8294,8295]
                NumberLiteral: 1 [8295,8296]
            PrefixExpression [8298,8300]
                PREFIX_EXPRESSION_OPERATOR: - [8298,8299]
                NumberLiteral: 1 [8299,8300]
            PrefixExpression [8302,8304]
                PREFIX_EXPRESSION_OPERATOR: - [8302,8303]
                NumberLiteral: 1 [8303,8304]
            PrefixExpression [8306,8308]
                PREFIX_EXPRESSION_OPERATOR: - [8306,8307]
                NumberLiteral: 1 [8307,8308]
            PrefixExpression [8310,8312]
                PREFIX_EXPRESSION_OPERATOR: - [8310,8311]
                NumberLiteral: 1 [8311,8312]
            PrefixExpression [8314,8316]
                PREFIX_EXPRESSION_OPERATOR: - [8314,8315]
                NumberLiteral: 1 [8315,8316]
            PrefixExpression [8318,8320]
                PREFIX_EXPRESSION_OPERATOR: - [8318,8319]
                NumberLiteral: 1 [8319,8320]
            PrefixExpression [8322,8324]
                PREFIX_EXPRESSION_OPERATOR: - [8322,8323]
                NumberLiteral: 1 [8323,8324]
            PrefixExpression [8326,8328]
                PREFIX_EXPRESSION_OPERATOR: - [8326,8327]
                NumberLiteral: 1 [8327,8328]
            PrefixExpression [8330,8332]
                PREFIX_EXPRESSION_OPERATOR: - [8330,8331]
                NumberLiteral: 1 [8331,8332]
            PrefixExpression [8334,8336]
                PREFIX_EXPRESSION_OPERATOR: - [8334,8335]
                NumberLiteral: 1 [8335,8336]
            PrefixExpression [8338,8340]
                PREFIX_EXPRESSION_OPERATOR: - [8338,8339]
                NumberLiteral: 1 [8339,8340]
            PrefixExpression [8354,8356]
                PREFIX_EXPRESSION_OPERATOR: - [8354,8355]
                NumberLiteral: 1 [8355,8356]
            PrefixExpression [8358,8360]
                PREFIX_EXPRESSION_OPERATOR: - [8358,8359]
                NumberLiteral: 1 [8359,8360]
            PrefixExpression [8362,8364]
                PREFIX_EXPRESSION_OPERATOR: - [8362,8363]
                NumberLiteral: 1 [8363,8364]
            PrefixExpression [8366,8368]
                PREFIX_EXPRESSION_OPERATOR: - [8366,8367]
                NumberLiteral: 1 [8367,8368]
            PrefixExpression [8370,8372]
                PREFIX_EXPRESSION_OPERATOR: - [8370,8371]
                NumberLiteral: 1 [8371,8372]
            PrefixExpression [8374,8376]
                PREFIX_EXPRESSION_OPERATOR: - [8374,8375]
                NumberLiteral: 1 [8375,8376]
            PrefixExpression [8378,8380]
                PREFIX_EXPRESSION_OPERATOR: - [8378,8379]
                NumberLiteral: 1 [8379,8380]
            PrefixExpression [8382,8384]
                PREFIX_EXPRESSION_OPERATOR: - [8382,8383]
                NumberLiteral: 1 [8383,8384]
            PrefixExpression [8386,8388]
                PREFIX_EXPRESSION_OPERATOR: - [8386,8387]
                NumberLiteral: 1 [8387,8388]
            PrefixExpression [8390,8392]
                PREFIX_EXPRESSION_OPERATOR: - [8390,8391]
                NumberLiteral: 1 [8391,8392]
            PrefixExpression [8394,8396]
                PREFIX_EXPRESSION_OPERATOR: - [8394,8395]
                NumberLiteral: 1 [8395,8396]
            PrefixExpression [8398,8400]
                PREFIX_EXPRESSION_OPERATOR: - [8398,8399]
                NumberLiteral: 1 [8399,8400]
            PrefixExpression [8402,8404]
                PREFIX_EXPRESSION_OPERATOR: - [8402,8403]
                NumberLiteral: 1 [8403,8404]
            PrefixExpression [8406,8408]
                PREFIX_EXPRESSION_OPERATOR: - [8406,8407]
                NumberLiteral: 1 [8407,8408]
            PrefixExpression [8410,8412]
                PREFIX_EXPRESSION_OPERATOR: - [8410,8411]
                NumberLiteral: 1 [8411,8412]
            PrefixExpression [8414,8416]
                PREFIX_EXPRESSION_OPERATOR: - [8414,8415]
                NumberLiteral: 1 [8415,8416]
            PrefixExpression [8418,8420]
                PREFIX_EXPRESSION_OPERATOR: - [8418,8419]
                NumberLiteral: 1 [8419,8420]
            PrefixExpression [8434,8436]
                PREFIX_EXPRESSION_OPERATOR: - [8434,8435]
                NumberLiteral: 1 [8435,8436]
            PrefixExpression [8438,8440]
                PREFIX_EXPRESSION_OPERATOR: - [8438,8439]
                NumberLiteral: 1 [8439,8440]
            PrefixExpression [8442,8444]
                PREFIX_EXPRESSION_OPERATOR: - [8442,8443]
                NumberLiteral: 1 [8443,8444]
            PrefixExpression [8446,8448]
                PREFIX_EXPRESSION_OPERATOR: - [8446,8447]
                NumberLiteral: 1 [8447,8448]
            PrefixExpression [8450,8452]
                PREFIX_EXPRESSION_OPERATOR: - [8450,8451]
                NumberLiteral: 1 [8451,8452]
            PrefixExpression [8454,8456]
                PREFIX_EXPRESSION_OPERATOR: - [8454,8455]
                NumberLiteral: 1 [8455,8456]
            PrefixExpression [8458,8460]
                PREFIX_EXPRESSION_OPERATOR: - [8458,8459]
                NumberLiteral: 1 [8459,8460]
            PrefixExpression [8462,8464]
                PREFIX_EXPRESSION_OPERATOR: - [8462,8463]
                NumberLiteral: 1 [8463,8464]
            PrefixExpression [8466,8468]
                PREFIX_EXPRESSION_OPERATOR: - [8466,8467]
                NumberLiteral: 1 [8467,8468]
            NumberLiteral: 62 [8470,8472]
            PrefixExpression [8474,8476]
                PREFIX_EXPRESSION_OPERATOR: - [8474,8475]
                NumberLiteral: 1 [8475,8476]
            PrefixExpression [8478,8480]
                PREFIX_EXPRESSION_OPERATOR: - [8478,8479]
                NumberLiteral: 1 [8479,8480]
            PrefixExpression [8482,8484]
                PREFIX_EXPRESSION_OPERATOR: - [8482,8483]
                NumberLiteral: 1 [8483,8484]
            NumberLiteral: 63 [8486,8488]
            NumberLiteral: 52 [8490,8492]
            NumberLiteral: 53 [8494,8496]
            NumberLiteral: 54 [8498,8500]
            NumberLiteral: 55 [8514,8516]
            NumberLiteral: 56 [8518,8520]
            NumberLiteral: 57 [8522,8524]
            NumberLiteral: 58 [8526,8528]
            NumberLiteral: 59 [8530,8532]
            NumberLiteral: 60 [8534,8536]
            NumberLiteral: 61 [8538,8540]
            PrefixExpression [8542,8544]
                PREFIX_EXPRESSION_OPERATOR: - [8542,8543]
                NumberLiteral: 1 [8543,8544]
            PrefixExpression [8546,8548]
                PREFIX_EXPRESSION_OPERATOR: - [8546,8547]
                NumberLiteral: 1 [8547,8548]
            PrefixExpression [8550,8552]
                PREFIX_EXPRESSION_OPERATOR: - [8550,8551]
                NumberLiteral: 1 [8551,8552]
            PrefixExpression [8554,8556]
                PREFIX_EXPRESSION_OPERATOR: - [8554,8555]
                NumberLiteral: 1 [8555,8556]
            PrefixExpression [8558,8560]
                PREFIX_EXPRESSION_OPERATOR: - [8558,8559]
                NumberLiteral: 1 [8559,8560]
            PrefixExpression [8562,8564]
                PREFIX_EXPRESSION_OPERATOR: - [8562,8563]
                NumberLiteral: 1 [8563,8564]
            PrefixExpression [8566,8568]
                PREFIX_EXPRESSION_OPERATOR: - [8566,8567]
                NumberLiteral: 1 [8567,8568]
            NumberLiteral: 0 [8570,8571]
            NumberLiteral: 1 [8573,8574]
            NumberLiteral: 2 [8576,8577]
            NumberLiteral: 3 [8579,8580]
            NumberLiteral: 4 [8582,8583]
            NumberLiteral: 5 [8597,8598]
            NumberLiteral: 6 [8600,8601]
            NumberLiteral: 7 [8603,8604]
            NumberLiteral: 8 [8606,8607]
            NumberLiteral: 9 [8609,8610]
            NumberLiteral: 10 [8612,8614]
            NumberLiteral: 11 [8616,8618]
            NumberLiteral: 12 [8620,8622]
            NumberLiteral: 13 [8624,8626]
            NumberLiteral: 14 [8628,8630]
            NumberLiteral: 15 [8632,8634]
            NumberLiteral: 16 [8636,8638]
            NumberLiteral: 17 [8640,8642]
            NumberLiteral: 18 [8644,8646]
            NumberLiteral: 19 [8648,8650]
            NumberLiteral: 20 [8652,8654]
            NumberLiteral: 21 [8656,8658]
            NumberLiteral: 22 [8660,8662]
            NumberLiteral: 23 [8664,8666]
            NumberLiteral: 24 [8680,8682]
            NumberLiteral: 25 [8684,8686]
            PrefixExpression [8688,8690]
                PREFIX_EXPRESSION_OPERATOR: - [8688,8689]
                NumberLiteral: 1 [8689,8690]
            PrefixExpression [8692,8694]
                PREFIX_EXPRESSION_OPERATOR: - [8692,8693]
                NumberLiteral: 1 [8693,8694]
            PrefixExpression [8696,8698]
                PREFIX_EXPRESSION_OPERATOR: - [8696,8697]
                NumberLiteral: 1 [8697,8698]
            PrefixExpression [8700,8702]
                PREFIX_EXPRESSION_OPERATOR: - [8700,8701]
                NumberLiteral: 1 [8701,8702]
            PrefixExpression [8704,8706]
                PREFIX_EXPRESSION_OPERATOR: - [8704,8705]
                NumberLiteral: 1 [8705,8706]
            PrefixExpression [8708,8710]
                PREFIX_EXPRESSION_OPERATOR: - [8708,8709]
                NumberLiteral: 1 [8709,8710]
            NumberLiteral: 26 [8712,8714]
            NumberLiteral: 27 [8716,8718]
            NumberLiteral: 28 [8720,8722]
            NumberLiteral: 29 [8724,8726]
            NumberLiteral: 30 [8728,8730]
            NumberLiteral: 31 [8732,8734]
            NumberLiteral: 32 [8736,8738]
            NumberLiteral: 33 [8740,8742]
            NumberLiteral: 34 [8744,8746]
            NumberLiteral: 35 [8760,8762]
            NumberLiteral: 36 [8764,8766]
            NumberLiteral: 37 [8768,8770]
            NumberLiteral: 38 [8772,8774]
            NumberLiteral: 39 [8776,8778]
            NumberLiteral: 40 [8780,8782]
            NumberLiteral: 41 [8784,8786]
            NumberLiteral: 42 [8788,8790]
            NumberLiteral: 43 [8792,8794]
            NumberLiteral: 44 [8796,8798]
            NumberLiteral: 45 [8800,8802]
            NumberLiteral: 46 [8804,8806]
            NumberLiteral: 47 [8808,8810]
            NumberLiteral: 48 [8812,8814]
            NumberLiteral: 49 [8816,8818]
            NumberLiteral: 50 [8820,8822]
            NumberLiteral: 51 [8824,8826]
to
TypeDeclaration [1073,21205]
at 31
===
insert-tree
---
MethodDeclaration [8839,9051]
    Javadoc [8839,9005]
        TagElement [8850,8915]
            TextElement: Returns true if this Base64 object has buffered data for reading. [8850,8915]
        TagElement [8930,8997]
            TextElement:  true if there is Base64 object still available for reading. [8937,8997]
    PrimitiveType: boolean [9010,9017]
    SimpleName: hasData [9018,9025]
    Block [9028,9051]
        ReturnStatement [9030,9049]
            InfixExpression [9037,9048]
                SimpleName: buf [9037,9040]
                INFIX_EXPRESSION_OPERATOR: != [9041,9043]
                NullLiteral [9044,9048]
to
TypeDeclaration [1073,21205]
at 32
===
insert-node
---
MethodDeclaration [9057,9267]
to
TypeDeclaration [1073,21205]
at 33
===
insert-tree
---
MethodDeclaration [9273,9596]
    Javadoc [9273,9299]
        TagElement [9277,9297]
            TextElement: Doubles our buffer.  [9277,9297]
    Modifier: private [9304,9311]
    PrimitiveType: void [9312,9316]
    SimpleName: resizeBuf [9317,9326]
    Block [9329,9596]
        IfStatement [9339,9590]
            InfixExpression [9343,9354]
                SimpleName: buf [9343,9346]
                INFIX_EXPRESSION_OPERATOR: == [9347,9349]
                NullLiteral [9350,9354]
            Block [9356,9447]
                ExpressionStatement [9370,9391]
                    Assignment [9370,9390]
                        SimpleName: buf [9370,9373]
                        ASSIGNMENT_OPERATOR: = [9374,9375]
                        ArrayCreation [9376,9390]
                            ArrayType [9380,9390]
                                PrimitiveType: byte [9380,9384]
                                Dimension [9384,9390]
                                    NumberLiteral: 8192 [9385,9389]
                ExpressionStatement [9404,9412]
                    Assignment [9404,9411]
                        SimpleName: pos [9404,9407]
                        ASSIGNMENT_OPERATOR: = [9408,9409]
                        NumberLiteral: 0 [9410,9411]
                ExpressionStatement [9425,9437]
                    Assignment [9425,9436]
                        SimpleName: readPos [9425,9432]
                        ASSIGNMENT_OPERATOR: = [9433,9434]
                        NumberLiteral: 0 [9435,9436]
            Block [9453,9590]
                VariableDeclarationStatement [9467,9503]
                    ArrayType [9467,9473]
                        PrimitiveType: byte [9467,9471]
                        Dimension [9471,9473]
                    VariableDeclarationFragment [9474,9502]
                        SimpleName: b [9474,9475]
                        ArrayCreation [9478,9502]
                            ArrayType [9482,9502]
                                PrimitiveType: byte [9482,9486]
                                Dimension [9486,9502]
                                    InfixExpression [9487,9501]
                                        QualifiedName: buf.length [9487,9497]
                                        INFIX_EXPRESSION_OPERATOR: * [9498,9499]
                                        NumberLiteral: 2 [9500,9501]
                ExpressionStatement [9516,9559]
                    MethodInvocation [9516,9558]
                        METHOD_INVOCATION_RECEIVER [9516,9522]
                            SimpleName: System [9516,9522]
                        SimpleName: arraycopy [9523,9532]
                        METHOD_INVOCATION_ARGUMENTS [9533,9557]
                            SimpleName: buf [9533,9536]
                            NumberLiteral: 0 [9538,9539]
                            SimpleName: b [9541,9542]
                            NumberLiteral: 0 [9544,9545]
                            QualifiedName: buf.length [9547,9557]
                ExpressionStatement [9572,9580]
                    Assignment [9572,9579]
                        SimpleName: buf [9572,9575]
                        ASSIGNMENT_OPERATOR: = [9576,9577]
                        SimpleName: b [9578,9579]
to
TypeDeclaration [1073,21205]
at 34
===
insert-node
---
MethodDeclaration [9602,10789]
to
TypeDeclaration [1073,21205]
at 35
===
insert-node
---
MethodDeclaration [10795,11532]
to
TypeDeclaration [1073,21205]
at 36
===
insert-tree
---
MethodDeclaration [11538,14383]
    Javadoc [11538,12269]
        TagElement [11549,12061]
            TextElement: <p> [11549,11552]
            TextElement: Encodes all of the provided data, starting at inPos, for inAvail bytes. [11560,11631]
            TextElement: Must be called at least twice:  once with the data to encode, and once [11639,11709]
            TextElement: with inAvail set to "-1" to alert encoder that EOF has been reached, [11717,11785]
            TextElement: so flush last remaining bytes (if not multiple of 3). [11793,11846]
            TextElement: </p><p> [11854,11861]
            TextElement: Thanks to "commons" project in ws.apache.org for the bitwise operations, [11869,11941]
            TextElement: and general approach. [11949,11970]
            TextElement: http://svn.apache.org/repos/asf/webservices/commons/trunk/modules/util/ [11978,12049]
            TextElement: </p> [12057,12061]
        TagElement [12076,12131]
            SimpleName: in [12083,12085]
            TextElement:  byte[] array of binary data to base64 encode. [12085,12131]
        TagElement [12139,12188]
            SimpleName: inPos [12146,12151]
            TextElement:  Position to start reading data from. [12151,12188]
        TagElement [12196,12261]
            SimpleName: inAvail [12203,12210]
            TextElement:  Amount of bytes available from input for encoding. [12210,12261]
    PrimitiveType: void [12274,12278]
    SimpleName: encode [12279,12285]
    SingleVariableDeclaration [12286,12295]
        ArrayType [12286,12292]
            PrimitiveType: byte [12286,12290]
            Dimension [12290,12292]
        SimpleName: in [12293,12295]
    SingleVariableDeclaration [12297,12306]
        PrimitiveType: int [12297,12300]
        SimpleName: inPos [12301,12306]
    SingleVariableDeclaration [12308,12319]
        PrimitiveType: int [12308,12311]
        SimpleName: inAvail [12312,12319]
    Block [12321,14383]
        IfStatement [12331,12371]
            SimpleName: eof [12335,12338]
            Block [12340,12371]
                ReturnStatement [12354,12361]
        IfStatement [12483,14377]
            InfixExpression [12487,12498]
                SimpleName: inAvail [12487,12494]
                INFIX_EXPRESSION_OPERATOR: < [12495,12496]
                NumberLiteral: 0 [12497,12498]
            Block [12500,13397]
                ExpressionStatement [12514,12525]
                    Assignment [12514,12524]
                        SimpleName: eof [12514,12517]
                        ASSIGNMENT_OPERATOR: = [12518,12519]
                        BooleanLiteral: true [12520,12524]
                IfStatement [12538,12632]
                    InfixExpression [12542,12586]
                        InfixExpression [12542,12553]
                            SimpleName: buf [12542,12545]
                            INFIX_EXPRESSION_OPERATOR: == [12546,12548]
                            NullLiteral [12549,12553]
                        INFIX_EXPRESSION_OPERATOR: || [12554,12556]
                        InfixExpression [12557,12586]
                            InfixExpression [12557,12573]
                                QualifiedName: buf.length [12557,12567]
                                INFIX_EXPRESSION_OPERATOR: - [12568,12569]
                                SimpleName: pos [12570,12573]
                            INFIX_EXPRESSION_OPERATOR: < [12574,12575]
                            SimpleName: encodeSize [12576,12586]
                    Block [12588,12632]
                        ExpressionStatement [12606,12618]
                            MethodInvocation [12606,12617]
                                SimpleName: resizeBuf [12606,12615]
                SwitchStatement [12645,13210]
                    SimpleName: modulus [12653,12660]
                    SwitchCase [12680,12687]
                        NumberLiteral: 1 [12685,12686]
                    ExpressionStatement [12708,12750]
                        Assignment [12708,12749]
                            ArrayAccess [12708,12718]
                                SimpleName: buf [12708,12711]
                                PostfixExpression [12712,12717]
                                    SimpleName: pos [12712,12715]
                                    POSTFIX_EXPRESSION_OPERATOR: ++ [12715,12717]
                            ASSIGNMENT_OPERATOR: = [12719,12720]
                            ArrayAccess [12721,12749]
                                SimpleName: intToBase64 [12721,12732]
                                InfixExpression [12733,12748]
                                    ParenthesizedExpression [12733,12741]
                                        InfixExpression [12734,12740]
                                            SimpleName: x [12734,12735]
                                            INFIX_EXPRESSION_OPERATOR: >> [12736,12738]
                                            NumberLiteral: 2 [12739,12740]
                                    INFIX_EXPRESSION_OPERATOR: & [12742,12743]
                                    NumberLiteral: 0x3f [12744,12748]
                    ExpressionStatement [12771,12813]
                        Assignment [12771,12812]
                            ArrayAccess [12771,12781]
                                SimpleName: buf [12771,12774]
                                PostfixExpression [12775,12780]
                                    SimpleName: pos [12775,12778]
                                    POSTFIX_EXPRESSION_OPERATOR: ++ [12778,12780]
                            ASSIGNMENT_OPERATOR: = [12782,12783]
                            ArrayAccess [12784,12812]
                                SimpleName: intToBase64 [12784,12795]
                                InfixExpression [12796,12811]
                                    ParenthesizedExpression [12796,12804]
                                        InfixExpression [12797,12803]
                                            SimpleName: x [12797,12798]
                                            INFIX_EXPRESSION_OPERATOR: << [12799,12801]
                                            NumberLiteral: 4 [12802,12803]
                                    INFIX_EXPRESSION_OPERATOR: & [12805,12806]
                                    NumberLiteral: 0x3f [12807,12811]
                    ExpressionStatement [12834,12851]
                        Assignment [12834,12850]
                            ArrayAccess [12834,12844]
                                SimpleName: buf [12834,12837]
                                PostfixExpression [12838,12843]
                                    SimpleName: pos [12838,12841]
                                    POSTFIX_EXPRESSION_OPERATOR: ++ [12841,12843]
                            ASSIGNMENT_OPERATOR: = [12845,12846]
                            SimpleName: PAD [12847,12850]
                    ExpressionStatement [12872,12889]
                        Assignment [12872,12888]
                            ArrayAccess [12872,12882]
                                SimpleName: buf [12872,12875]
                                PostfixExpression [12876,12881]
                                    SimpleName: pos [12876,12879]
                                    POSTFIX_EXPRESSION_OPERATOR: ++ [12879,12881]
                            ASSIGNMENT_OPERATOR: = [12883,12884]
                            SimpleName: PAD [12885,12888]
                    BreakStatement [12910,12916]
                    SwitchCase [12934,12941]
                        NumberLiteral: 2 [12939,12940]
                    ExpressionStatement [12962,13005]
                        Assignment [12962,13004]
                            ArrayAccess [12962,12972]
                                SimpleName: buf [12962,12965]
                                PostfixExpression [12966,12971]
                                    SimpleName: pos [12966,12969]
                                    POSTFIX_EXPRESSION_OPERATOR: ++ [12969,12971]
                            ASSIGNMENT_OPERATOR: = [12973,12974]
                            ArrayAccess [12975,13004]
                                SimpleName: intToBase64 [12975,12986]
                                InfixExpression [12987,13003]
                                    ParenthesizedExpression [12987,12996]
                                        InfixExpression [12988,12995]
                                            SimpleName: x [12988,12989]
                                            INFIX_EXPRESSION_OPERATOR: >> [12990,12992]
                                            NumberLiteral: 10 [12993,12995]
                                    INFIX_EXPRESSION_OPERATOR: & [12997,12998]
                                    NumberLiteral: 0x3f [12999,13003]
                    ExpressionStatement [13026,13068]
                        Assignment [13026,13067]
                            ArrayAccess [13026,13036]
                                SimpleName: buf [13026,13029]
                                PostfixExpression [13030,13035]
                                    SimpleName: pos [13030,13033]
                                    POSTFIX_EXPRESSION_OPERATOR: ++ [13033,13035]
                            ASSIGNMENT_OPERATOR: = [13037,13038]
                            ArrayAccess [13039,13067]
                                SimpleName: intToBase64 [13039,13050]
                                InfixExpression [13051,13066]
                                    ParenthesizedExpression [13051,13059]
                                        InfixExpression [13052,13058]
                                            SimpleName: x [13052,13053]
                                            INFIX_EXPRESSION_OPERATOR: >> [13054,13056]
                                            NumberLiteral: 4 [13057,13058]
                                    INFIX_EXPRESSION_OPERATOR: & [13060,13061]
                                    NumberLiteral: 0x3f [13062,13066]
                    ExpressionStatement [13089,13131]
                        Assignment [13089,13130]
                            ArrayAccess [13089,13099]
                                SimpleName: buf [13089,13092]
                                PostfixExpression [13093,13098]
                                    SimpleName: pos [13093,13096]
                                    POSTFIX_EXPRESSION_OPERATOR: ++ [13096,13098]
                            ASSIGNMENT_OPERATOR: = [13100,13101]
                            ArrayAccess [13102,13130]
                                SimpleName: intToBase64 [13102,13113]
                                InfixExpression [13114,13129]
                                    ParenthesizedExpression [13114,13122]
                                        InfixExpression [13115,13121]
                                            SimpleName: x [13115,13116]
                                            INFIX_EXPRESSION_OPERATOR: << [13117,13119]
                                            NumberLiteral: 2 [13120,13121]
                                    INFIX_EXPRESSION_OPERATOR: & [13123,13124]
                                    NumberLiteral: 0x3f [13125,13129]
                    ExpressionStatement [13152,13169]
                        Assignment [13152,13168]
                            ArrayAccess [13152,13162]
                                SimpleName: buf [13152,13155]
                                PostfixExpression [13156,13161]
                                    SimpleName: pos [13156,13159]
                                    POSTFIX_EXPRESSION_OPERATOR: ++ [13159,13161]
                            ASSIGNMENT_OPERATOR: = [13163,13164]
                            SimpleName: PAD [13165,13168]
                    BreakStatement [13190,13196]
                IfStatement [13223,13387]
                    InfixExpression [13227,13241]
                        SimpleName: lineLength [13227,13237]
                        INFIX_EXPRESSION_OPERATOR: > [13238,13239]
                        NumberLiteral: 0 [13240,13241]
                    Block [13243,13387]
                        ExpressionStatement [13261,13328]
                            MethodInvocation [13261,13327]
                                METHOD_INVOCATION_RECEIVER [13261,13267]
                                    SimpleName: System [13261,13267]
                                SimpleName: arraycopy [13268,13277]
                                METHOD_INVOCATION_ARGUMENTS [13278,13326]
                                    SimpleName: lineSeparator [13278,13291]
                                    NumberLiteral: 0 [13293,13294]
                                    SimpleName: buf [13296,13299]
                                    SimpleName: pos [13301,13304]
                                    QualifiedName: lineSeparator.length [13306,13326]
                        ExpressionStatement [13345,13373]
                            Assignment [13345,13372]
                                SimpleName: pos [13345,13348]
                                ASSIGNMENT_OPERATOR: += [13349,13351]
                                QualifiedName: lineSeparator.length [13352,13372]
            Block [13403,14377]
                ForStatement [13417,14367]
                    VariableDeclarationExpression [13422,13431]
                        PrimitiveType: int [13422,13425]
                        VariableDeclarationFragment [13426,13431]
                            SimpleName: i [13426,13427]
                            NumberLiteral: 0 [13430,13431]
                    InfixExpression [13433,13444]
                        SimpleName: i [13433,13434]
                        INFIX_EXPRESSION_OPERATOR: < [13435,13436]
                        SimpleName: inAvail [13437,13444]
                    PostfixExpression [13446,13449]
                        SimpleName: i [13446,13447]
                        POSTFIX_EXPRESSION_OPERATOR: ++ [13447,13449]
                    Block [13451,14367]
                        IfStatement [13469,13571]
                            InfixExpression [13473,13517]
                                InfixExpression [13473,13484]
                                    SimpleName: buf [13473,13476]
                                    INFIX_EXPRESSION_OPERATOR: == [13477,13479]
                                    NullLiteral [13480,13484]
                                INFIX_EXPRESSION_OPERATOR: || [13485,13487]
                                InfixExpression [13488,13517]
                                    InfixExpression [13488,13504]
                                        QualifiedName: buf.length [13488,13498]
                                        INFIX_EXPRESSION_OPERATOR: - [13499,13500]
                                        SimpleName: pos [13501,13504]
                                    INFIX_EXPRESSION_OPERATOR: < [13505,13506]
                                    SimpleName: encodeSize [13507,13517]
                            Block [13519,13571]
                                ExpressionStatement [13541,13553]
                                    MethodInvocation [13541,13552]
                                        SimpleName: resizeBuf [13541,13550]
                        ExpressionStatement [13588,13614]
                            Assignment [13588,13613]
                                SimpleName: modulus [13588,13595]
                                ASSIGNMENT_OPERATOR: = [13596,13597]
                                InfixExpression [13598,13613]
                                    ParenthesizedExpression [13598,13609]
                                        PrefixExpression [13599,13608]
                                            PREFIX_EXPRESSION_OPERATOR: ++ [13599,13601]
                                            SimpleName: modulus [13601,13608]
                                    INFIX_EXPRESSION_OPERATOR: % [13610,13611]
                                    NumberLiteral: 3 [13612,13613]
                        VariableDeclarationStatement [13631,13651]
                            PrimitiveType: int [13631,13634]
                            VariableDeclarationFragment [13635,13650]
                                SimpleName: b [13635,13636]
                                ArrayAccess [13639,13650]
                                    SimpleName: in [13639,13641]
                                    PostfixExpression [13642,13649]
                                        SimpleName: inPos [13642,13647]
                                        POSTFIX_EXPRESSION_OPERATOR: ++ [13647,13649]
                        IfStatement [13668,13692]
                            InfixExpression [13672,13677]
                                SimpleName: b [13672,13673]
                                INFIX_EXPRESSION_OPERATOR: < [13674,13675]
                                NumberLiteral: 0 [13676,13677]
                            Block [13679,13692]
                                ExpressionStatement [13681,13690]
                                    Assignment [13681,13689]
                                        SimpleName: b [13681,13682]
                                        ASSIGNMENT_OPERATOR: += [13683,13685]
                                        NumberLiteral: 256 [13686,13689]
                        ExpressionStatement [13709,13726]
                            Assignment [13709,13725]
                                SimpleName: x [13709,13710]
                                ASSIGNMENT_OPERATOR: = [13711,13712]
                                InfixExpression [13713,13725]
                                    ParenthesizedExpression [13713,13721]
                                        InfixExpression [13714,13720]
                                            SimpleName: x [13714,13715]
                                            INFIX_EXPRESSION_OPERATOR: << [13716,13718]
                                            NumberLiteral: 8 [13719,13720]
                                    INFIX_EXPRESSION_OPERATOR: + [13722,13723]
                                    SimpleName: b [13724,13725]
                        IfStatement [13743,14353]
                            InfixExpression [13747,13759]
                                NumberLiteral: 0 [13747,13748]
                                INFIX_EXPRESSION_OPERATOR: == [13749,13751]
                                SimpleName: modulus [13752,13759]
                            Block [13761,14353]
                                ExpressionStatement [13783,13826]
                                    Assignment [13783,13825]
                                        ArrayAccess [13783,13793]
                                            SimpleName: buf [13783,13786]
                                            PostfixExpression [13787,13792]
                                                SimpleName: pos [13787,13790]
                                                POSTFIX_EXPRESSION_OPERATOR: ++ [13790,13792]
                                        ASSIGNMENT_OPERATOR: = [13794,13795]
                                        ArrayAccess [13796,13825]
                                            SimpleName: intToBase64 [13796,13807]
                                            InfixExpression [13808,13824]
                                                ParenthesizedExpression [13808,13817]
                                                    InfixExpression [13809,13816]
                                                        SimpleName: x [13809,13810]
                                                        INFIX_EXPRESSION_OPERATOR: >> [13811,13813]
                                                        NumberLiteral: 18 [13814,13816]
                                                INFIX_EXPRESSION_OPERATOR: & [13818,13819]
                                                NumberLiteral: 0x3f [13820,13824]
                                ExpressionStatement [13847,13890]
                                    Assignment [13847,13889]
                                        ArrayAccess [13847,13857]
                                            SimpleName: buf [13847,13850]
                                            PostfixExpression [13851,13856]
                                                SimpleName: pos [13851,13854]
                                                POSTFIX_EXPRESSION_OPERATOR: ++ [13854,13856]
                                        ASSIGNMENT_OPERATOR: = [13858,13859]
                                        ArrayAccess [13860,13889]
                                            SimpleName: intToBase64 [13860,13871]
                                            InfixExpression [13872,13888]
                                                ParenthesizedExpression [13872,13881]
                                                    InfixExpression [13873,13880]
                                                        SimpleName: x [13873,13874]
                                                        INFIX_EXPRESSION_OPERATOR: >> [13875,13877]
                                                        NumberLiteral: 12 [13878,13880]
                                                INFIX_EXPRESSION_OPERATOR: & [13882,13883]
                                                NumberLiteral: 0x3f [13884,13888]
                                ExpressionStatement [13911,13953]
                                    Assignment [13911,13952]
                                        ArrayAccess [13911,13921]
                                            SimpleName: buf [13911,13914]
                                            PostfixExpression [13915,13920]
                                                SimpleName: pos [13915,13918]
                                                POSTFIX_EXPRESSION_OPERATOR: ++ [13918,13920]
                                        ASSIGNMENT_OPERATOR: = [13922,13923]
                                        ArrayAccess [13924,13952]
                                            SimpleName: intToBase64 [13924,13935]
                                            InfixExpression [13936,13951]
                                                ParenthesizedExpression [13936,13944]
                                                    InfixExpression [13937,13943]
                                                        SimpleName: x [13937,13938]
                                                        INFIX_EXPRESSION_OPERATOR: >> [13939,13941]
                                                        NumberLiteral: 6 [13942,13943]
                                                INFIX_EXPRESSION_OPERATOR: & [13945,13946]
                                                NumberLiteral: 0x3f [13947,13951]
                                ExpressionStatement [13974,14009]
                                    Assignment [13974,14008]
                                        ArrayAccess [13974,13984]
                                            SimpleName: buf [13974,13977]
                                            PostfixExpression [13978,13983]
                                                SimpleName: pos [13978,13981]
                                                POSTFIX_EXPRESSION_OPERATOR: ++ [13981,13983]
                                        ASSIGNMENT_OPERATOR: = [13985,13986]
                                        ArrayAccess [13987,14008]
                                            SimpleName: intToBase64 [13987,13998]
                                            InfixExpression [13999,14007]
                                                SimpleName: x [13999,14000]
                                                INFIX_EXPRESSION_OPERATOR: & [14001,14002]
                                                NumberLiteral: 0x3f [14003,14007]
                                ExpressionStatement [14030,14050]
                                    Assignment [14030,14049]
                                        SimpleName: currentLinePos [14030,14044]
                                        ASSIGNMENT_OPERATOR: += [14045,14047]
                                        NumberLiteral: 4 [14048,14049]
                                IfStatement [14071,14335]
                                    InfixExpression [14075,14121]
                                        InfixExpression [14075,14089]
                                            SimpleName: lineLength [14075,14085]
                                            INFIX_EXPRESSION_OPERATOR: > [14086,14087]
                                            NumberLiteral: 0 [14088,14089]
                                        INFIX_EXPRESSION_OPERATOR: && [14090,14092]
                                        InfixExpression [14093,14121]
                                            SimpleName: lineLength [14093,14103]
                                            INFIX_EXPRESSION_OPERATOR: <= [14104,14106]
                                            SimpleName: currentLinePos [14107,14121]
                                    Block [14123,14335]
                                        ExpressionStatement [14149,14216]
                                            MethodInvocation [14149,14215]
                                                METHOD_INVOCATION_RECEIVER [14149,14155]
                                                    SimpleName: System [14149,14155]
                                                SimpleName: arraycopy [14156,14165]
                                                METHOD_INVOCATION_ARGUMENTS [14166,14214]
                                                    SimpleName: lineSeparator [14166,14179]
                                                    NumberLiteral: 0 [14181,14182]
                                                    SimpleName: buf [14184,14187]
                                                    SimpleName: pos [14189,14192]
                                                    QualifiedName: lineSeparator.length [14194,14214]
                                        ExpressionStatement [14241,14269]
                                            Assignment [14241,14268]
                                                SimpleName: pos [14241,14244]
                                                ASSIGNMENT_OPERATOR: += [14245,14247]
                                                QualifiedName: lineSeparator.length [14248,14268]
                                        ExpressionStatement [14294,14313]
                                            Assignment [14294,14312]
                                                SimpleName: currentLinePos [14294,14308]
                                                ASSIGNMENT_OPERATOR: = [14309,14310]
                                                NumberLiteral: 0 [14311,14312]
to
TypeDeclaration [1073,21205]
at 37
===
insert-tree
---
MethodDeclaration [14389,17014]
    Javadoc [14389,15471]
        TagElement [14400,15270]
            TextElement: <p> [14400,14403]
            TextElement: Decodes all of the provided data, starting at inPos, for inAvail bytes. [14411,14482]
            TextElement: Should be called at least twice:  once with the data to decode, and once [14490,14562]
            TextElement: with inAvail set to "-1" to alert decoder that EOF has been reached. [14570,14638]
            TextElement: The "-1" call is not necessary when decoding, but it doesn't hurt, either. [14646,14720]
            TextElement: </p><p> [14728,14735]
            TextElement: Ignores all non-base64 characters.  This is how chunked (e.g. 76 character) [14743,14818]
            TextElement: data is handled, since CR and LF are silently ignored, but has implications [14826,14901]
            TextElement: for other bytes, too.  This method subscribes to the garbage-in, garbage-out [14909,14985]
            TextElement: philosophy:  it will not check the provided data for validity. [14993,15055]
            TextElement: </p><p> [15063,15070]
            TextElement: Thanks to "commons" project in ws.apache.org for the bitwise operations, [15078,15150]
            TextElement: and general approach. [15158,15179]
            TextElement: http://svn.apache.org/repos/asf/webservices/commons/trunk/modules/util/ [15187,15258]
            TextElement: </p> [15266,15270]
        TagElement [15279,15333]
            SimpleName: in [15286,15288]
            TextElement:  byte[] array of ascii data to base64 decode. [15288,15333]
        TagElement [15341,15390]
            SimpleName: inPos [15348,15353]
            TextElement:  Position to start reading data from. [15353,15390]
        TagElement [15398,15463]
            SimpleName: inAvail [15405,15412]
            TextElement:  Amount of bytes available from input for encoding. [15412,15463]
    PrimitiveType: void [15480,15484]
    SimpleName: decode [15485,15491]
    SingleVariableDeclaration [15492,15501]
        ArrayType [15492,15498]
            PrimitiveType: byte [15492,15496]
            Dimension [15496,15498]
        SimpleName: in [15499,15501]
    SingleVariableDeclaration [15503,15512]
        PrimitiveType: int [15503,15506]
        SimpleName: inPos [15507,15512]
    SingleVariableDeclaration [15514,15525]
        PrimitiveType: int [15514,15517]
        SimpleName: inAvail [15518,15525]
    Block [15527,17014]
        IfStatement [15537,15577]
            SimpleName: eof [15541,15544]
            Block [15546,15577]
                ReturnStatement [15560,15567]
        IfStatement [15586,15638]
            InfixExpression [15590,15601]
                SimpleName: inAvail [15590,15597]
                INFIX_EXPRESSION_OPERATOR: < [15598,15599]
                NumberLiteral: 0 [15600,15601]
            Block [15603,15638]
                ExpressionStatement [15617,15628]
                    Assignment [15617,15627]
                        SimpleName: eof [15617,15620]
                        ASSIGNMENT_OPERATOR: = [15621,15622]
                        BooleanLiteral: true [15623,15627]
        ForStatement [15647,17008]
            VariableDeclarationExpression [15652,15661]
                PrimitiveType: int [15652,15655]
                VariableDeclarationFragment [15656,15661]
                    SimpleName: i [15656,15657]
                    NumberLiteral: 0 [15660,15661]
            InfixExpression [15663,15674]
                SimpleName: i [15663,15664]
                INFIX_EXPRESSION_OPERATOR: < [15665,15666]
                SimpleName: inAvail [15667,15674]
            PostfixExpression [15676,15679]
                SimpleName: i [15676,15677]
                POSTFIX_EXPRESSION_OPERATOR: ++ [15677,15679]
            Block [15681,17008]
                IfStatement [15695,15789]
                    InfixExpression [15699,15743]
                        InfixExpression [15699,15710]
                            SimpleName: buf [15699,15702]
                            INFIX_EXPRESSION_OPERATOR: == [15703,15705]
                            NullLiteral [15706,15710]
                        INFIX_EXPRESSION_OPERATOR: || [15711,15713]
                        InfixExpression [15714,15743]
                            InfixExpression [15714,15730]
                                QualifiedName: buf.length [15714,15724]
                                INFIX_EXPRESSION_OPERATOR: - [15725,15726]
                                SimpleName: pos [15727,15730]
                            INFIX_EXPRESSION_OPERATOR: < [15731,15732]
                            SimpleName: decodeSize [15733,15743]
                    Block [15745,15789]
                        ExpressionStatement [15763,15775]
                            MethodInvocation [15763,15774]
                                SimpleName: resizeBuf [15763,15772]
                VariableDeclarationStatement [15802,15823]
                    PrimitiveType: byte [15802,15806]
                    VariableDeclarationFragment [15807,15822]
                        SimpleName: b [15807,15808]
                        ArrayAccess [15811,15822]
                            SimpleName: in [15811,15813]
                            PostfixExpression [15814,15821]
                                SimpleName: inPos [15814,15819]
                                POSTFIX_EXPRESSION_OPERATOR: ++ [15819,15821]
                IfStatement [15836,16998]
                    InfixExpression [15840,15848]
                        SimpleName: b [15840,15841]
                        INFIX_EXPRESSION_OPERATOR: == [15842,15844]
                        SimpleName: PAD [15845,15848]
                    Block [15850,16421]
                        ExpressionStatement [15868,15894]
                            Assignment [15868,15893]
                                SimpleName: modulus [15868,15875]
                                ASSIGNMENT_OPERATOR: = [15876,15877]
                                InfixExpression [15878,15893]
                                    ParenthesizedExpression [15878,15889]
                                        PrefixExpression [15879,15888]
                                            PREFIX_EXPRESSION_OPERATOR: ++ [15879,15881]
                                            SimpleName: modulus [15881,15888]
                                    INFIX_EXPRESSION_OPERATOR: % [15890,15891]
                                    NumberLiteral: 4 [15892,15893]
                        ExpressionStatement [15911,15922]
                            Assignment [15911,15921]
                                SimpleName: x [15911,15912]
                                ASSIGNMENT_OPERATOR: = [15913,15914]
                                InfixExpression [15915,15921]
                                    SimpleName: x [15915,15916]
                                    INFIX_EXPRESSION_OPERATOR: << [15917,15919]
                                    NumberLiteral: 6 [15920,15921]
                        SwitchStatement [15939,16407]
                            SimpleName: modulus [15947,15954]
                            SwitchCase [15978,15985]
                                NumberLiteral: 3 [15983,15984]
                            ExpressionStatement [16010,16021]
                                Assignment [16010,16020]
                                    SimpleName: x [16010,16011]
                                    ASSIGNMENT_OPERATOR: = [16012,16013]
                                    InfixExpression [16014,16020]
                                        SimpleName: x [16014,16015]
                                        INFIX_EXPRESSION_OPERATOR: << [16016,16018]
                                        NumberLiteral: 6 [16019,16020]
                            SwitchCase [16042,16049]
                                NumberLiteral: 0 [16047,16048]
                            ExpressionStatement [16074,16113]
                                Assignment [16074,16112]
                                    ArrayAccess [16074,16084]
                                        SimpleName: buf [16074,16077]
                                        PostfixExpression [16078,16083]
                                            SimpleName: pos [16078,16081]
                                            POSTFIX_EXPRESSION_OPERATOR: ++ [16081,16083]
                                    ASSIGNMENT_OPERATOR: = [16085,16086]
                                    CastExpression [16087,16112]
                                        PrimitiveType: byte [16088,16092]
                                        ParenthesizedExpression [16094,16112]
                                            InfixExpression [16095,16111]
                                                ParenthesizedExpression [16095,16104]
                                                    InfixExpression [16096,16103]
                                                        SimpleName: x [16096,16097]
                                                        INFIX_EXPRESSION_OPERATOR: >> [16098,16100]
                                                        NumberLiteral: 16 [16101,16103]
                                                INFIX_EXPRESSION_OPERATOR: & [16105,16106]
                                                NumberLiteral: 0xff [16107,16111]
                            IfStatement [16138,16250]
                                InfixExpression [16142,16154]
                                    SimpleName: modulus [16142,16149]
                                    INFIX_EXPRESSION_OPERATOR: == [16150,16152]
                                    NumberLiteral: 0 [16153,16154]
                                Block [16156,16250]
                                    ExpressionStatement [16186,16224]
                                        Assignment [16186,16223]
                                            ArrayAccess [16186,16196]
                                                SimpleName: buf [16186,16189]
                                                PostfixExpression [16190,16195]
                                                    SimpleName: pos [16190,16193]
                                                    POSTFIX_EXPRESSION_OPERATOR: ++ [16193,16195]
                                            ASSIGNMENT_OPERATOR: = [16197,16198]
                                            CastExpression [16199,16223]
                                                PrimitiveType: byte [16200,16204]
                                                ParenthesizedExpression [16206,16223]
                                                    InfixExpression [16207,16222]
                                                        ParenthesizedExpression [16207,16215]
                                                            InfixExpression [16208,16214]
                                                                SimpleName: x [16208,16209]
                                                                INFIX_EXPRESSION_OPERATOR: >> [16210,16212]
                                                                NumberLiteral: 8 [16213,16214]
                                                        INFIX_EXPRESSION_OPERATOR: & [16216,16217]
                                                        NumberLiteral: 0xff [16218,16222]
                            SwitchCase [16271,16279]
                            ExpressionStatement [16346,16357]
                                Assignment [16346,16356]
                                    SimpleName: eof [16346,16349]
                                    ASSIGNMENT_OPERATOR: = [16350,16351]
                                    BooleanLiteral: true [16352,16356]
                            ReturnStatement [16382,16389]
                    Block [16427,16998]
                        IfStatement [16445,16984]
                            InfixExpression [16449,16481]
                                InfixExpression [16449,16455]
                                    SimpleName: b [16449,16450]
                                    INFIX_EXPRESSION_OPERATOR: >= [16451,16453]
                                    NumberLiteral: 0 [16454,16455]
                                INFIX_EXPRESSION_OPERATOR: && [16456,16458]
                                InfixExpression [16459,16481]
                                    SimpleName: b [16459,16460]
                                    INFIX_EXPRESSION_OPERATOR: < [16461,16462]
                                    QualifiedName: base64ToInt.length [16463,16481]
                            Block [16483,16984]
                                VariableDeclarationStatement [16505,16533]
                                    PrimitiveType: int [16505,16508]
                                    VariableDeclarationFragment [16509,16532]
                                        SimpleName: result [16509,16515]
                                        ArrayAccess [16518,16532]
                                            SimpleName: base64ToInt [16518,16529]
                                            SimpleName: b [16530,16531]
                                IfStatement [16554,16966]
                                    InfixExpression [16558,16569]
                                        SimpleName: result [16558,16564]
                                        INFIX_EXPRESSION_OPERATOR: >= [16565,16567]
                                        NumberLiteral: 0 [16568,16569]
                                    Block [16571,16966]
                                        ExpressionStatement [16597,16632]
                                            Assignment [16597,16631]
                                                SimpleName: modulus [16597,16604]
                                                ASSIGNMENT_OPERATOR: = [16605,16606]
                                                CastExpression [16607,16631]
                                                    PrimitiveType: byte [16608,16612]
                                                    ParenthesizedExpression [16614,16631]
                                                        InfixExpression [16615,16630]
                                                            ParenthesizedExpression [16615,16626]
                                                                PrefixExpression [16616,16625]
                                                                    PREFIX_EXPRESSION_OPERATOR: ++ [16616,16618]
                                                                    SimpleName: modulus [16618,16625]
                                                            INFIX_EXPRESSION_OPERATOR: % [16627,16628]
                                                            NumberLiteral: 4 [16629,16630]
                                        ExpressionStatement [16657,16679]
                                            Assignment [16657,16678]
                                                SimpleName: x [16657,16658]
                                                ASSIGNMENT_OPERATOR: = [16659,16660]
                                                InfixExpression [16661,16678]
                                                    ParenthesizedExpression [16661,16669]
                                                        InfixExpression [16662,16668]
                                                            SimpleName: x [16662,16663]
                                                            INFIX_EXPRESSION_OPERATOR: << [16664,16666]
                                                            NumberLiteral: 6 [16667,16668]
                                                    INFIX_EXPRESSION_OPERATOR: + [16670,16671]
                                                    SimpleName: result [16672,16678]
                                        IfStatement [16704,16944]
                                            InfixExpression [16708,16720]
                                                SimpleName: modulus [16708,16715]
                                                INFIX_EXPRESSION_OPERATOR: == [16716,16718]
                                                NumberLiteral: 0 [16719,16720]
                                            Block [16722,16944]
                                                ExpressionStatement [16752,16791]
                                                    Assignment [16752,16790]
                                                        ArrayAccess [16752,16762]
                                                            SimpleName: buf [16752,16755]
                                                            PostfixExpression [16756,16761]
                                                                SimpleName: pos [16756,16759]
                                                                POSTFIX_EXPRESSION_OPERATOR: ++ [16759,16761]
                                                        ASSIGNMENT_OPERATOR: = [16763,16764]
                                                        CastExpression [16765,16790]
                                                            PrimitiveType: byte [16766,16770]
                                                            ParenthesizedExpression [16772,16790]
                                                                InfixExpression [16773,16789]
                                                                    ParenthesizedExpression [16773,16782]
                                                                        InfixExpression [16774,16781]
                                                                            SimpleName: x [16774,16775]
                                                                            INFIX_EXPRESSION_OPERATOR: >> [16776,16778]
                                                                            NumberLiteral: 16 [16779,16781]
                                                                    INFIX_EXPRESSION_OPERATOR: & [16783,16784]
                                                                    NumberLiteral: 0xff [16785,16789]
                                                ExpressionStatement [16820,16858]
                                                    Assignment [16820,16857]
                                                        ArrayAccess [16820,16830]
                                                            SimpleName: buf [16820,16823]
                                                            PostfixExpression [16824,16829]
                                                                SimpleName: pos [16824,16827]
                                                                POSTFIX_EXPRESSION_OPERATOR: ++ [16827,16829]
                                                        ASSIGNMENT_OPERATOR: = [16831,16832]
                                                        CastExpression [16833,16857]
                                                            PrimitiveType: byte [16834,16838]
                                                            ParenthesizedExpression [16840,16857]
                                                                InfixExpression [16841,16856]
                                                                    ParenthesizedExpression [16841,16849]
                                                                        InfixExpression [16842,16848]
                                                                            SimpleName: x [16842,16843]
                                                                            INFIX_EXPRESSION_OPERATOR: >> [16844,16846]
                                                                            NumberLiteral: 8 [16847,16848]
                                                                    INFIX_EXPRESSION_OPERATOR: & [16850,16851]
                                                                    NumberLiteral: 0xff [16852,16856]
                                                ExpressionStatement [16887,16918]
                                                    Assignment [16887,16917]
                                                        ArrayAccess [16887,16897]
                                                            SimpleName: buf [16887,16890]
                                                            PostfixExpression [16891,16896]
                                                                SimpleName: pos [16891,16894]
                                                                POSTFIX_EXPRESSION_OPERATOR: ++ [16894,16896]
                                                        ASSIGNMENT_OPERATOR: = [16898,16899]
                                                        CastExpression [16900,16917]
                                                            PrimitiveType: byte [16901,16905]
                                                            ParenthesizedExpression [16907,16917]
                                                                InfixExpression [16908,16916]
                                                                    SimpleName: x [16908,16909]
                                                                    INFIX_EXPRESSION_OPERATOR: & [16910,16911]
                                                                    NumberLiteral: 0xff [16912,16916]
to
TypeDeclaration [1073,21205]
at 38
===
insert-tree
---
Javadoc [3446,3527]
    TagElement [3457,3519]
        TextElement: Position where next character should be written in the buffer. [3457,3519]
to
FieldDeclaration [3446,3548]
at 0
===
insert-node
---
Modifier: private [3532,3539]
to
FieldDeclaration [3446,3548]
at 1
===
move-tree
---
PrimitiveType: int [9060,9063]
to
FieldDeclaration [3446,3548]
at 2
===
move-tree
---
VariableDeclarationFragment [9064,9079]
    SimpleName: chunckCount [9064,9075]
    NumberLiteral: 0 [9078,9079]
to
FieldDeclaration [3446,3548]
at 3
===
insert-tree
---
Javadoc [3554,3634]
    TagElement [3565,3626]
        TextElement: Position where next character should be read from the buffer. [3565,3626]
to
FieldDeclaration [3554,3659]
at 0
===
insert-node
---
Modifier: private [3639,3646]
to
FieldDeclaration [3554,3659]
at 1
===
insert-tree
---
Javadoc [9057,9207]
    TagElement [9068,9126]
        TextElement: Returns the amount of buffered data available for reading. [9068,9126]
    TagElement [9141,9199]
        TextElement:  The amount of buffered data available for reading. [9148,9199]
to
MethodDeclaration [9057,9267]
at 0
===
insert-node
---
PrimitiveType: int [9212,9215]
to
MethodDeclaration [9057,9267]
at 1
===
insert-node
---
SimpleName: avail [9216,9221]
to
MethodDeclaration [9057,9267]
at 2
===
insert-node
---
Block [9224,9267]
to
MethodDeclaration [9057,9267]
at 3
===
insert-tree
---
Javadoc [9602,10181]
    TagElement [9613,9790]
        TextElement: Extracts buffered data into the provided byte[] array, starting [9613,9676]
        TextElement: at position bPos, up to a maximum of bAvail bytes.  Returns how [9684,9747]
        TextElement: many bytes were actually extracted. [9755,9790]
    TagElement [9805,9866]
        SimpleName: b [9812,9813]
        TextElement:       byte[] array to extract the buffered data into. [9813,9866]
    TagElement [9874,9936]
        SimpleName: bPos [9881,9885]
        TextElement:    position in byte[] array to start extraction at. [9885,9936]
    TagElement [9944,10068]
        SimpleName: bAvail [9951,9957]
        TextElement:  amount of bytes we're allowed to extract.  We may extract [9957,10015]
        TextElement: fewer (if fewer are available). [10037,10068]
    TagElement [10076,10173]
        TextElement:  The number of bytes successfully extracted into the provided [10083,10144]
        TextElement: byte[] array. [10160,10173]
to
MethodDeclaration [9602,10789]
at 0
===
insert-node
---
PrimitiveType: int [10186,10189]
to
MethodDeclaration [9602,10789]
at 1
===
insert-node
---
SimpleName: readResults [10190,10201]
to
MethodDeclaration [9602,10789]
at 2
===
insert-tree
---
SingleVariableDeclaration [10202,10210]
    ArrayType [10202,10208]
        PrimitiveType: byte [10202,10206]
        Dimension [10206,10208]
    SimpleName: b [10209,10210]
to
MethodDeclaration [9602,10789]
at 3
===
insert-tree
---
SingleVariableDeclaration [10212,10220]
    PrimitiveType: int [10212,10215]
    SimpleName: bPos [10216,10220]
to
MethodDeclaration [9602,10789]
at 4
===
insert-tree
---
SingleVariableDeclaration [10222,10232]
    PrimitiveType: int [10222,10225]
    SimpleName: bAvail [10226,10232]
to
MethodDeclaration [9602,10789]
at 5
===
insert-node
---
Block [10234,10789]
to
MethodDeclaration [9602,10789]
at 6
===
insert-tree
---
Javadoc [10795,11185]
    TagElement [10806,10990]
        TextElement: Small optimization where we try to buffer directly to the consumer's [10806,10874]
        TextElement: output array for one round (if consumer calls this method first!) instead [10882,10955]
        TextElement: of starting our own buffer. [10963,10990]
    TagElement [11005,11051]
        SimpleName: out [11012,11015]
        TextElement:  byte[] array to buffer directly to. [11015,11051]
    TagElement [11059,11106]
        SimpleName: outPos [11066,11072]
        TextElement:  Position to start buffering into. [11072,11106]
    TagElement [11114,11177]
        SimpleName: outAvail [11121,11129]
        TextElement:  Amount of bytes available for direct buffering. [11129,11177]
to
MethodDeclaration [10795,11532]
at 0
===
insert-node
---
PrimitiveType: void [11190,11194]
to
MethodDeclaration [10795,11532]
at 1
===
insert-node
---
SimpleName: setInitialBuffer [11195,11211]
to
MethodDeclaration [10795,11532]
at 2
===
insert-tree
---
SingleVariableDeclaration [11212,11222]
    ArrayType [11212,11218]
        PrimitiveType: byte [11212,11216]
        Dimension [11216,11218]
    SimpleName: out [11219,11222]
to
MethodDeclaration [10795,11532]
at 3
===
insert-tree
---
SingleVariableDeclaration [11224,11234]
    PrimitiveType: int [11224,11227]
    SimpleName: outPos [11228,11234]
to
MethodDeclaration [10795,11532]
at 4
===
insert-tree
---
SingleVariableDeclaration [11236,11248]
    PrimitiveType: int [11236,11239]
    SimpleName: outAvail [11240,11248]
to
MethodDeclaration [10795,11532]
at 5
===
insert-node
---
Block [11250,11532]
to
MethodDeclaration [10795,11532]
at 6
===
update-node
---
SimpleName: chunckCount [9064,9075]
replace chunckCount by pos
===
insert-node
---
ReturnStatement [9226,9265]
to
Block [9224,9267]
at 0
===
insert-node
---
IfStatement [10244,10783]
to
Block [10234,10789]
at 0
===
insert-node
---
IfStatement [11393,11526]
to
Block [11250,11532]
at 0
===
insert-node
---
ReturnStatement [17354,17452]
to
Block [5309,5513]
at 0
===
insert-node
---
IfStatement [20722,20814]
to
Block [8767,13754]
at 0
===
insert-tree
---
VariableDeclarationStatement [20823,20877]
    SimpleType [20823,20829]
        SimpleName: Base64 [20823,20829]
    VariableDeclarationFragment [20830,20876]
        SimpleName: b64 [20830,20833]
        ConditionalExpression [20836,20876]
            SimpleName: isChunked [20836,20845]
            ClassInstanceCreation [20848,20860]
                SimpleType [20852,20858]
                    SimpleName: Base64 [20852,20858]
            ClassInstanceCreation [20863,20876]
                SimpleType [20867,20873]
                    SimpleName: Base64 [20867,20873]
                NumberLiteral: 0 [20874,20875]
to
Block [8767,13754]
at 1
===
insert-tree
---
VariableDeclarationStatement [20887,20926]
    PrimitiveType: long [20887,20891]
    VariableDeclarationFragment [20892,20925]
        SimpleName: len [20892,20895]
        InfixExpression [20898,20925]
            ParenthesizedExpression [20898,20921]
                InfixExpression [20899,20920]
                    QualifiedName: binaryData.length [20899,20916]
                    INFIX_EXPRESSION_OPERATOR: * [20917,20918]
                    NumberLiteral: 4 [20919,20920]
            INFIX_EXPRESSION_OPERATOR: / [20922,20923]
            NumberLiteral: 3 [20924,20925]
to
Block [8767,13754]
at 2
===
insert-node
---
VariableDeclarationStatement [20935,20954]
to
Block [8767,13754]
at 3
===
insert-node
---
IfStatement [20963,21016]
to
Block [8767,13754]
at 4
===
insert-tree
---
VariableDeclarationStatement [21346,21379]
    ArrayType [21346,21352]
        PrimitiveType: byte [21346,21350]
        Dimension [21350,21352]
    VariableDeclarationFragment [21353,21378]
        SimpleName: buf [21353,21356]
        ArrayCreation [21359,21378]
            ArrayType [21363,21378]
                PrimitiveType: byte [21363,21367]
                Dimension [21367,21378]
                    CastExpression [21368,21377]
                        PrimitiveType: int [21369,21372]
                        SimpleName: len [21374,21377]
to
Block [8767,13754]
at 14
===
insert-node
---
ExpressionStatement [21388,21429]
to
Block [8767,13754]
at 15
===
insert-tree
---
ExpressionStatement [21438,21483]
    MethodInvocation [21438,21482]
        METHOD_INVOCATION_RECEIVER [21438,21441]
            SimpleName: b64 [21438,21441]
        SimpleName: encode [21442,21448]
        METHOD_INVOCATION_ARGUMENTS [21449,21481]
            SimpleName: binaryData [21449,21459]
            NumberLiteral: 0 [21461,21462]
            QualifiedName: binaryData.length [21464,21481]
to
Block [8767,13754]
at 16
===
insert-tree
---
ExpressionStatement [21492,21522]
    MethodInvocation [21492,21521]
        METHOD_INVOCATION_RECEIVER [21492,21495]
            SimpleName: b64 [21492,21495]
        SimpleName: encode [21496,21502]
        METHOD_INVOCATION_ARGUMENTS [21503,21520]
            SimpleName: binaryData [21503,21513]
            NumberLiteral: 0 [21515,21516]
            PrefixExpression [21518,21520]
                PREFIX_EXPRESSION_OPERATOR: - [21518,21519]
                NumberLiteral: 1 [21519,21520]
to
Block [8767,13754]
at 17
===
insert-node
---
IfStatement [21629,21709]
to
Block [8767,13754]
at 18
===
insert-tree
---
ReturnStatement [21718,21729]
    SimpleName: buf [21725,21728]
to
Block [8767,13754]
at 19
===
insert-node
---
IfStatement [21972,22064]
to
Block [14000,16207]
at 0
===
insert-tree
---
VariableDeclarationStatement [22073,22099]
    SimpleType [22073,22079]
        SimpleName: Base64 [22073,22079]
    VariableDeclarationFragment [22080,22098]
        SimpleName: b64 [22080,22083]
        ClassInstanceCreation [22086,22098]
            SimpleType [22090,22096]
                SimpleName: Base64 [22090,22096]
to
Block [14000,16207]
at 1
===
insert-tree
---
VariableDeclarationStatement [22109,22148]
    PrimitiveType: long [22109,22113]
    VariableDeclarationFragment [22114,22147]
        SimpleName: len [22114,22117]
        InfixExpression [22120,22147]
            ParenthesizedExpression [22120,22143]
                InfixExpression [22121,22142]
                    QualifiedName: base64Data.length [22121,22138]
                    INFIX_EXPRESSION_OPERATOR: * [22139,22140]
                    NumberLiteral: 3 [22141,22142]
            INFIX_EXPRESSION_OPERATOR: / [22144,22145]
            NumberLiteral: 4 [22146,22147]
to
Block [14000,16207]
at 2
===
insert-node
---
VariableDeclarationStatement [22157,22190]
to
Block [14000,16207]
at 3
===
insert-node
---
ExpressionStatement [22199,22240]
to
Block [14000,16207]
at 4
===
insert-tree
---
ExpressionStatement [22249,22294]
    MethodInvocation [22249,22293]
        METHOD_INVOCATION_RECEIVER [22249,22252]
            SimpleName: b64 [22249,22252]
        SimpleName: decode [22253,22259]
        METHOD_INVOCATION_ARGUMENTS [22260,22292]
            SimpleName: base64Data [22260,22270]
            NumberLiteral: 0 [22272,22273]
            QualifiedName: base64Data.length [22275,22292]
to
Block [14000,16207]
at 5
===
insert-tree
---
ExpressionStatement [22303,22333]
    MethodInvocation [22303,22332]
        METHOD_INVOCATION_RECEIVER [22303,22306]
            SimpleName: b64 [22303,22306]
        SimpleName: decode [22307,22313]
        METHOD_INVOCATION_ARGUMENTS [22314,22331]
            SimpleName: base64Data [22314,22324]
            NumberLiteral: 0 [22326,22327]
            PrefixExpression [22329,22331]
                PREFIX_EXPRESSION_OPERATOR: - [22329,22330]
                NumberLiteral: 1 [22330,22331]
to
Block [14000,16207]
at 6
===
insert-tree
---
VariableDeclarationStatement [22486,22520]
    ArrayType [22486,22492]
        PrimitiveType: byte [22486,22490]
        Dimension [22490,22492]
    VariableDeclarationFragment [22493,22519]
        SimpleName: result [22493,22499]
        ArrayCreation [22502,22519]
            ArrayType [22506,22519]
                PrimitiveType: byte [22506,22510]
                Dimension [22510,22519]
                    QualifiedName: b64.pos [22511,22518]
to
Block [14000,16207]
at 7
===
insert-tree
---
ExpressionStatement [22529,22571]
    MethodInvocation [22529,22570]
        METHOD_INVOCATION_RECEIVER [22529,22532]
            SimpleName: b64 [22529,22532]
        SimpleName: readResults [22533,22544]
        METHOD_INVOCATION_ARGUMENTS [22545,22569]
            SimpleName: result [22545,22551]
            NumberLiteral: 0 [22553,22554]
            QualifiedName: result.length [22556,22569]
to
Block [14000,16207]
at 8
===
insert-tree
---
ReturnStatement [22580,22594]
    SimpleName: result [22587,22593]
to
Block [14000,16207]
at 9
===
insert-node
---
ConditionalExpression [9233,9264]
to
ReturnStatement [9226,9265]
at 0
===
insert-tree
---
InfixExpression [10248,10259]
    SimpleName: buf [10248,10251]
    INFIX_EXPRESSION_OPERATOR: != [10252,10254]
    NullLiteral [10255,10259]
to
IfStatement [10244,10783]
at 0
===
move-tree
---
Block [13420,13719]
    IfStatement [13504,13709]
        InfixExpression [13508,13533]
            SimpleName: chunksSoFar [13508,13519]
            INFIX_EXPRESSION_OPERATOR: < [13520,13521]
            SimpleName: chunckCount [13522,13533]
        Block [13535,13709]
            ExpressionStatement [13553,13695]
                MethodInvocation [13553,13694]
                    METHOD_INVOCATION_RECEIVER [13553,13559]
                        SimpleName: System [13553,13559]
                    SimpleName: arraycopy [13560,13569]
                    METHOD_INVOCATION_ARGUMENTS [13570,13693]
                        SimpleName: CHUNK_SEPARATOR [13570,13585]
                        NumberLiteral: 0 [13587,13588]
                        SimpleName: encodedData [13590,13601]
                        InfixExpression [13603,13645]
                            SimpleName: encodedDataLength [13603,13620]
                            INFIX_EXPRESSION_OPERATOR: - [13621,13622]
                            QualifiedName: CHUNK_SEPARATOR.length [13623,13645]
                        QualifiedName: CHUNK_SEPARATOR.length [13671,13693]
to
IfStatement [10244,10783]
at 1
===
insert-tree
---
Block [10739,10783]
    ReturnStatement [10753,10773]
        ConditionalExpression [10760,10772]
            SimpleName: eof [10760,10763]
            PrefixExpression [10766,10768]
                PREFIX_EXPRESSION_OPERATOR: - [10766,10767]
                NumberLiteral: 1 [10767,10768]
            NumberLiteral: 0 [10771,10772]
to
IfStatement [10244,10783]
at 2
===
insert-tree
---
InfixExpression [11397,11434]
    InfixExpression [11397,11408]
        SimpleName: out [11397,11400]
        INFIX_EXPRESSION_OPERATOR: != [11401,11403]
        NullLiteral [11404,11408]
    INFIX_EXPRESSION_OPERATOR: && [11409,11411]
    InfixExpression [11412,11434]
        QualifiedName: out.length [11412,11422]
        INFIX_EXPRESSION_OPERATOR: == [11423,11425]
        SimpleName: outAvail [11426,11434]
to
IfStatement [11393,11526]
at 0
===
insert-node
---
InfixExpression [17361,17451]
to
ReturnStatement [17354,17452]
at 0
===
insert-tree
---
InfixExpression [20726,20770]
    InfixExpression [20726,20744]
        SimpleName: binaryData [20726,20736]
        INFIX_EXPRESSION_OPERATOR: == [20737,20739]
        NullLiteral [20740,20744]
    INFIX_EXPRESSION_OPERATOR: || [20745,20747]
    InfixExpression [20748,20770]
        QualifiedName: binaryData.length [20748,20765]
        INFIX_EXPRESSION_OPERATOR: == [20766,20768]
        NumberLiteral: 0 [20769,20770]
to
IfStatement [20722,20814]
at 0
===
insert-node
---
Block [20772,20814]
to
IfStatement [20722,20814]
at 1
===
insert-node
---
PrimitiveType: long [20935,20939]
to
VariableDeclarationStatement [20935,20954]
at 0
===
insert-node
---
VariableDeclarationFragment [20940,20953]
to
VariableDeclarationStatement [20935,20954]
at 1
===
insert-tree
---
InfixExpression [20967,20975]
    SimpleName: mod [20967,20970]
    INFIX_EXPRESSION_OPERATOR: != [20971,20973]
    NumberLiteral: 0 [20974,20975]
to
IfStatement [20963,21016]
at 0
===
move-tree
---
Block [10458,12104]
    ExpressionStatement [10472,10490]
        Assignment [10472,10489]
            SimpleName: dataIndex [10472,10481]
            ASSIGNMENT_OPERATOR: = [10482,10483]
            InfixExpression [10484,10489]
                SimpleName: i [10484,10485]
                INFIX_EXPRESSION_OPERATOR: * [10486,10487]
                NumberLiteral: 3 [10488,10489]
    ExpressionStatement [10503,10530]
        Assignment [10503,10529]
            SimpleName: b1 [10503,10505]
            ASSIGNMENT_OPERATOR: = [10506,10507]
            ArrayAccess [10508,10529]
                SimpleName: binaryData [10508,10518]
                SimpleName: dataIndex [10519,10528]
    ExpressionStatement [10543,10574]
        Assignment [10543,10573]
            SimpleName: b2 [10543,10545]
            ASSIGNMENT_OPERATOR: = [10546,10547]
            ArrayAccess [10548,10573]
                SimpleName: binaryData [10548,10558]
                InfixExpression [10559,10572]
                    SimpleName: dataIndex [10559,10568]
                    INFIX_EXPRESSION_OPERATOR: + [10569,10570]
                    NumberLiteral: 1 [10571,10572]
    ExpressionStatement [10587,10618]
        Assignment [10587,10617]
            SimpleName: b3 [10587,10589]
            ASSIGNMENT_OPERATOR: = [10590,10591]
            ArrayAccess [10592,10617]
                SimpleName: binaryData [10592,10602]
                InfixExpression [10603,10616]
                    SimpleName: dataIndex [10603,10612]
                    INFIX_EXPRESSION_OPERATOR: + [10613,10614]
                    NumberLiteral: 2 [10615,10616]
    ExpressionStatement [10703,10726]
        Assignment [10703,10725]
            SimpleName: l [10703,10704]
            ASSIGNMENT_OPERATOR: = [10705,10706]
            CastExpression [10707,10725]
                PrimitiveType: byte [10708,10712]
                ParenthesizedExpression [10714,10725]
                    InfixExpression [10715,10724]
                        SimpleName: b2 [10715,10717]
                        INFIX_EXPRESSION_OPERATOR: & [10718,10719]
                        NumberLiteral: 0x0f [10720,10724]
    ExpressionStatement [10739,10762]
        Assignment [10739,10761]
            SimpleName: k [10739,10740]
            ASSIGNMENT_OPERATOR: = [10741,10742]
            CastExpression [10743,10761]
                PrimitiveType: byte [10744,10748]
                ParenthesizedExpression [10750,10761]
                    InfixExpression [10751,10760]
                        SimpleName: b1 [10751,10753]
                        INFIX_EXPRESSION_OPERATOR: & [10754,10755]
                        NumberLiteral: 0x03 [10756,10760]
    VariableDeclarationStatement [10776,10854]
        PrimitiveType: byte [10776,10780]
        VariableDeclarationFragment [10781,10853]
            SimpleName: val1 [10781,10785]
            ConditionalExpression [10788,10853]
                ParenthesizedExpression [10788,10806]
                    InfixExpression [10789,10805]
                        ParenthesizedExpression [10789,10800]
                            InfixExpression [10790,10799]
                                SimpleName: b1 [10790,10792]
                                INFIX_EXPRESSION_OPERATOR: & [10793,10794]
                                SimpleName: SIGN [10795,10799]
                        INFIX_EXPRESSION_OPERATOR: == [10801,10803]
                        NumberLiteral: 0 [10804,10805]
                CastExpression [10809,10825]
                    PrimitiveType: byte [10810,10814]
                    ParenthesizedExpression [10816,10825]
                        InfixExpression [10817,10824]
                            SimpleName: b1 [10817,10819]
                            INFIX_EXPRESSION_OPERATOR: >> [10820,10822]
                            NumberLiteral: 2 [10823,10824]
                CastExpression [10828,10853]
                    PrimitiveType: byte [10829,10833]
                    ParenthesizedExpression [10835,10853]
                        InfixExpression [10836,10852]
                            InfixExpression [10836,10845]
                                ParenthesizedExpression [10836,10840]
                                    SimpleName: b1 [10837,10839]
                                INFIX_EXPRESSION_OPERATOR: >> [10841,10843]
                                NumberLiteral: 2 [10844,10845]
                            INFIX_EXPRESSION_OPERATOR: ^ [10846,10847]
                            NumberLiteral: 0xc0 [10848,10852]
    VariableDeclarationStatement [10867,10945]
        PrimitiveType: byte [10867,10871]
        VariableDeclarationFragment [10872,10944]
            SimpleName: val2 [10872,10876]
            ConditionalExpression [10879,10944]
                ParenthesizedExpression [10879,10897]
                    InfixExpression [10880,10896]
                        ParenthesizedExpression [10880,10891]
                            InfixExpression [10881,10890]
                                SimpleName: b2 [10881,10883]
                                INFIX_EXPRESSION_OPERATOR: & [10884,10885]
                                SimpleName: SIGN [10886,10890]
                        INFIX_EXPRESSION_OPERATOR: == [10892,10894]
                        NumberLiteral: 0 [10895,10896]
                CastExpression [10900,10916]
                    PrimitiveType: byte [10901,10905]
                    ParenthesizedExpression [10907,10916]
                        InfixExpression [10908,10915]
                            SimpleName: b2 [10908,10910]
                            INFIX_EXPRESSION_OPERATOR: >> [10911,10913]
                            NumberLiteral: 4 [10914,10915]
                CastExpression [10919,10944]
                    PrimitiveType: byte [10920,10924]
                    ParenthesizedExpression [10926,10944]
                        InfixExpression [10927,10943]
                            InfixExpression [10927,10936]
                                ParenthesizedExpression [10927,10931]
                                    SimpleName: b2 [10928,10930]
                                INFIX_EXPRESSION_OPERATOR: >> [10932,10934]
                                NumberLiteral: 4 [10935,10936]
                            INFIX_EXPRESSION_OPERATOR: ^ [10937,10938]
                            NumberLiteral: 0xf0 [10939,10943]
    VariableDeclarationStatement [10958,11036]
        PrimitiveType: byte [10958,10962]
        VariableDeclarationFragment [10963,11035]
            SimpleName: val3 [10963,10967]
            ConditionalExpression [10970,11035]
                ParenthesizedExpression [10970,10988]
                    InfixExpression [10971,10987]
                        ParenthesizedExpression [10971,10982]
                            InfixExpression [10972,10981]
                                SimpleName: b3 [10972,10974]
                                INFIX_EXPRESSION_OPERATOR: & [10975,10976]
                                SimpleName: SIGN [10977,10981]
                        INFIX_EXPRESSION_OPERATOR: == [10983,10985]
                        NumberLiteral: 0 [10986,10987]
                CastExpression [10991,11007]
                    PrimitiveType: byte [10992,10996]
                    ParenthesizedExpression [10998,11007]
                        InfixExpression [10999,11006]
                            SimpleName: b3 [10999,11001]
                            INFIX_EXPRESSION_OPERATOR: >> [11002,11004]
                            NumberLiteral: 6 [11005,11006]
                CastExpression [11010,11035]
                    PrimitiveType: byte [11011,11015]
                    ParenthesizedExpression [11017,11035]
                        InfixExpression [11018,11034]
                            InfixExpression [11018,11027]
                                ParenthesizedExpression [11018,11022]
                                    SimpleName: b3 [11019,11021]
                                INFIX_EXPRESSION_OPERATOR: >> [11023,11025]
                                NumberLiteral: 6 [11026,11027]
                            INFIX_EXPRESSION_OPERATOR: ^ [11028,11029]
                            NumberLiteral: 0xfc [11030,11034]
    ExpressionStatement [11050,11105]
        Assignment [11050,11104]
            ArrayAccess [11050,11075]
                SimpleName: encodedData [11050,11061]
                SimpleName: encodedIndex [11062,11074]
            ASSIGNMENT_OPERATOR: = [11076,11077]
            ArrayAccess [11078,11104]
                SimpleName: lookUpBase64Alphabet [11078,11098]
                SimpleName: val1 [11099,11103]
    ExpressionStatement [11266,11336]
        Assignment [11266,11335]
            ArrayAccess [11266,11295]
                SimpleName: encodedData [11266,11277]
                InfixExpression [11278,11294]
                    SimpleName: encodedIndex [11278,11290]
                    INFIX_EXPRESSION_OPERATOR: + [11291,11292]
                    NumberLiteral: 1 [11293,11294]
            ASSIGNMENT_OPERATOR: = [11296,11297]
            ArrayAccess [11298,11335]
                SimpleName: lookUpBase64Alphabet [11298,11318]
                InfixExpression [11319,11334]
                    SimpleName: val2 [11319,11323]
                    INFIX_EXPRESSION_OPERATOR: | [11324,11325]
                    ParenthesizedExpression [11326,11334]
                        InfixExpression [11327,11333]
                            SimpleName: k [11327,11328]
                            INFIX_EXPRESSION_OPERATOR: << [11329,11331]
                            NumberLiteral: 4 [11332,11333]
    ExpressionStatement [11349,11419]
        Assignment [11349,11418]
            ArrayAccess [11349,11378]
                SimpleName: encodedData [11349,11360]
                InfixExpression [11361,11377]
                    SimpleName: encodedIndex [11361,11373]
                    INFIX_EXPRESSION_OPERATOR: + [11374,11375]
                    NumberLiteral: 2 [11376,11377]
            ASSIGNMENT_OPERATOR: = [11379,11380]
            ArrayAccess [11381,11418]
                SimpleName: lookUpBase64Alphabet [11381,11401]
                InfixExpression [11402,11417]
                    ParenthesizedExpression [11402,11410]
                        InfixExpression [11403,11409]
                            SimpleName: l [11403,11404]
                            INFIX_EXPRESSION_OPERATOR: << [11405,11407]
                            NumberLiteral: 2 [11408,11409]
                    INFIX_EXPRESSION_OPERATOR: | [11411,11412]
                    SimpleName: val3 [11413,11417]
    ExpressionStatement [11432,11496]
        Assignment [11432,11495]
            ArrayAccess [11432,11461]
                SimpleName: encodedData [11432,11443]
                InfixExpression [11444,11460]
                    SimpleName: encodedIndex [11444,11456]
                    INFIX_EXPRESSION_OPERATOR: + [11457,11458]
                    NumberLiteral: 3 [11459,11460]
            ASSIGNMENT_OPERATOR: = [11462,11463]
            ArrayAccess [11464,11495]
                SimpleName: lookUpBase64Alphabet [11464,11484]
                InfixExpression [11485,11494]
                    SimpleName: b3 [11485,11487]
                    INFIX_EXPRESSION_OPERATOR: & [11488,11489]
                    NumberLiteral: 0x3f [11490,11494]
    ExpressionStatement [11510,11528]
        Assignment [11510,11527]
            SimpleName: encodedIndex [11510,11522]
            ASSIGNMENT_OPERATOR: += [11523,11525]
            NumberLiteral: 4 [11526,11527]
    IfStatement [11611,12094]
        SimpleName: isChunked [11615,11624]
        Block [11626,12094]
            IfStatement [11701,12080]
                InfixExpression [11705,11739]
                    SimpleName: encodedIndex [11705,11717]
                    INFIX_EXPRESSION_OPERATOR: == [11718,11720]
                    SimpleName: nextSeparatorIndex [11721,11739]
                Block [11741,12080]
                    ExpressionStatement [11763,11851]
                        MethodInvocation [11763,11850]
                            METHOD_INVOCATION_RECEIVER [11763,11769]
                                SimpleName: System [11763,11769]
                            SimpleName: arraycopy [11770,11779]
                            METHOD_INVOCATION_ARGUMENTS [11780,11849]
                                SimpleName: CHUNK_SEPARATOR [11780,11795]
                                NumberLiteral: 0 [11797,11798]
                                SimpleName: encodedData [11800,11811]
                                SimpleName: encodedIndex [11813,11825]
                                QualifiedName: CHUNK_SEPARATOR.length [11827,11849]
                    ExpressionStatement [11872,11886]
                        PostfixExpression [11872,11885]
                            SimpleName: chunksSoFar [11872,11883]
                            POSTFIX_EXPRESSION_OPERATOR: ++ [11883,11885]
                    ExpressionStatement [11907,12002]
                        Assignment [11907,12001]
                            SimpleName: nextSeparatorIndex [11907,11925]
                            ASSIGNMENT_OPERATOR: = [11926,11927]
                            InfixExpression [11928,12001]
                                ParenthesizedExpression [11928,11960]
                                    InfixExpression [11929,11959]
                                        SimpleName: CHUNK_SIZE [11929,11939]
                                        INFIX_EXPRESSION_OPERATOR: * [11940,11941]
                                        ParenthesizedExpression [11942,11959]
                                            InfixExpression [11943,11958]
                                                SimpleName: chunksSoFar [11943,11954]
                                                INFIX_EXPRESSION_OPERATOR: + [11955,11956]
                                                NumberLiteral: 1 [11957,11958]
                                INFIX_EXPRESSION_OPERATOR: + [11961,11962]
                                ParenthesizedExpression [11963,12001]
                                    InfixExpression [11964,12000]
                                        SimpleName: chunksSoFar [11964,11975]
                                        INFIX_EXPRESSION_OPERATOR: * [11976,11977]
                                        QualifiedName: CHUNK_SEPARATOR.length [11978,12000]
                    ExpressionStatement [12023,12062]
                        Assignment [12023,12061]
                            SimpleName: encodedIndex [12023,12035]
                            ASSIGNMENT_OPERATOR: += [12036,12038]
                            QualifiedName: CHUNK_SEPARATOR.length [12039,12061]
to
IfStatement [20963,21016]
at 1
===
insert-node
---
MethodInvocation [21388,21428]
to
ExpressionStatement [21388,21429]
at 0
===
insert-tree
---
InfixExpression [21633,21647]
    QualifiedName: b64.buf [21633,21640]
    INFIX_EXPRESSION_OPERATOR: != [21641,21643]
    SimpleName: buf [21644,21647]
to
IfStatement [21629,21709]
at 0
===
move-tree
---
Block [9116,9231]
    ExpressionStatement [9174,9221]
        Assignment [9174,9220]
            SimpleName: encodedDataLengthLong [9174,9195]
            ASSIGNMENT_OPERATOR: = [9196,9197]
            InfixExpression [9198,9220]
                ParenthesizedExpression [9198,9216]
                    InfixExpression [9199,9215]
                        SimpleName: tripletCount [9199,9211]
                        INFIX_EXPRESSION_OPERATOR: + [9212,9213]
                        NumberLiteral: 1 [9214,9215]
                INFIX_EXPRESSION_OPERATOR: * [9217,9218]
                NumberLiteral: 4 [9219,9220]
to
IfStatement [21629,21709]
at 1
===
update-node
---
TextElement: Byte array containing Base64 data [13855,13888]
replace Byte array containing Base64 data by  Byte array containing Base64 data
===
insert-tree
---
InfixExpression [21976,22020]
    InfixExpression [21976,21994]
        SimpleName: base64Data [21976,21986]
        INFIX_EXPRESSION_OPERATOR: == [21987,21989]
        NullLiteral [21990,21994]
    INFIX_EXPRESSION_OPERATOR: || [21995,21997]
    InfixExpression [21998,22020]
        QualifiedName: base64Data.length [21998,22015]
        INFIX_EXPRESSION_OPERATOR: == [22016,22018]
        NumberLiteral: 0 [22019,22020]
to
IfStatement [21972,22064]
at 0
===
insert-node
---
Block [22022,22064]
to
IfStatement [21972,22064]
at 1
===
insert-tree
---
ArrayType [22157,22163]
    PrimitiveType: byte [22157,22161]
    Dimension [22161,22163]
to
VariableDeclarationStatement [22157,22190]
at 0
===
insert-node
---
VariableDeclarationFragment [22164,22189]
to
VariableDeclarationStatement [22157,22190]
at 1
===
insert-node
---
MethodInvocation [22199,22239]
to
ExpressionStatement [22199,22240]
at 0
===
insert-tree
---
InfixExpression [9233,9244]
    SimpleName: buf [9233,9236]
    INFIX_EXPRESSION_OPERATOR: != [9237,9239]
    NullLiteral [9240,9244]
to
ConditionalExpression [9233,9264]
at 0
===
insert-tree
---
InfixExpression [9247,9260]
    SimpleName: pos [9247,9250]
    INFIX_EXPRESSION_OPERATOR: - [9251,9252]
    SimpleName: readPos [9253,9260]
to
ConditionalExpression [9233,9264]
at 1
===
move-tree
---
NumberLiteral: 0 [10227,10228]
to
ConditionalExpression [9233,9264]
at 2
===
insert-tree
---
VariableDeclarationStatement [10275,10311]
    PrimitiveType: int [10275,10278]
    VariableDeclarationFragment [10279,10310]
        SimpleName: len [10279,10282]
        MethodInvocation [10285,10310]
            METHOD_INVOCATION_RECEIVER [10285,10289]
                SimpleName: Math [10285,10289]
            SimpleName: min [10290,10293]
            METHOD_INVOCATION_ARGUMENTS [10294,10309]
                MethodInvocation [10294,10301]
                    SimpleName: avail [10294,10299]
                SimpleName: bAvail [10303,10309]
to
Block [13420,13719]
at 0
===
move-tree
---
IfStatement [9090,9329]
    InfixExpression [9094,9114]
        SimpleName: fewerThan24bits [9094,9109]
        INFIX_EXPRESSION_OPERATOR: != [9110,9112]
        NumberLiteral: 0 [9113,9114]
    Block [9116,9231]
        ExpressionStatement [9174,9221]
            Assignment [9174,9220]
                SimpleName: encodedDataLengthLong [9174,9195]
                ASSIGNMENT_OPERATOR: = [9196,9197]
                InfixExpression [9198,9220]
                    ParenthesizedExpression [9198,9216]
                        InfixExpression [9199,9215]
                            SimpleName: tripletCount [9199,9211]
                            INFIX_EXPRESSION_OPERATOR: + [9212,9213]
                            NumberLiteral: 1 [9214,9215]
                    INFIX_EXPRESSION_OPERATOR: * [9217,9218]
                    NumberLiteral: 4 [9219,9220]
    Block [9237,9329]
        ExpressionStatement [9278,9319]
            Assignment [9278,9318]
                SimpleName: encodedDataLengthLong [9278,9299]
                ASSIGNMENT_OPERATOR: = [9300,9301]
                InfixExpression [9302,9318]
                    SimpleName: tripletCount [9302,9314]
                    INFIX_EXPRESSION_OPERATOR: * [9315,9316]
                    NumberLiteral: 4 [9317,9318]
to
Block [13420,13719]
at 1
===
insert-tree
---
ReturnStatement [10712,10723]
    SimpleName: len [10719,10722]
to
Block [13420,13719]
at 2
===
insert-tree
---
ExpressionStatement [11473,11486]
    Assignment [11473,11485]
        SimpleName: pos [11473,11476]
        ASSIGNMENT_OPERATOR: = [11477,11478]
        SimpleName: outPos [11479,11485]
to
root
at 0
===
insert-tree
---
ExpressionStatement [11499,11516]
    Assignment [11499,11515]
        SimpleName: readPos [11499,11506]
        ASSIGNMENT_OPERATOR: = [11507,11508]
        SimpleName: outPos [11509,11515]
to
root
at 0
===
move-tree
---
InfixExpression [5323,5336]
    SimpleName: octect [5323,5329]
    INFIX_EXPRESSION_OPERATOR: == [5330,5332]
    SimpleName: PAD [5333,5336]
to
InfixExpression [17361,17451]
at 0
===
insert-node
---
INFIX_EXPRESSION_OPERATOR: || [17375,17377]
to
InfixExpression [17361,17451]
at 1
===
insert-tree
---
ParenthesizedExpression [17378,17451]
    InfixExpression [17379,17450]
        InfixExpression [17379,17421]
            InfixExpression [17379,17390]
                SimpleName: octect [17379,17385]
                INFIX_EXPRESSION_OPERATOR: >= [17386,17388]
                NumberLiteral: 0 [17389,17390]
            INFIX_EXPRESSION_OPERATOR: && [17391,17393]
            InfixExpression [17394,17421]
                SimpleName: octect [17394,17400]
                INFIX_EXPRESSION_OPERATOR: < [17401,17402]
                QualifiedName: base64ToInt.length [17403,17421]
        INFIX_EXPRESSION_OPERATOR: && [17422,17424]
        InfixExpression [17425,17450]
            ArrayAccess [17425,17444]
                SimpleName: base64ToInt [17425,17436]
                SimpleName: octect [17437,17443]
            INFIX_EXPRESSION_OPERATOR: != [17445,17447]
            PrefixExpression [17448,17450]
                PREFIX_EXPRESSION_OPERATOR: - [17448,17449]
                NumberLiteral: 1 [17449,17450]
to
InfixExpression [17361,17451]
at 2
===
move-tree
---
ReturnStatement [13729,13748]
    SimpleName: encodedData [13736,13747]
to
Block [20772,20814]
at 0
===
insert-node
---
SimpleName: mod [20940,20943]
to
VariableDeclarationFragment [20940,20953]
at 0
===
insert-node
---
InfixExpression [20946,20953]
to
VariableDeclarationFragment [20940,20953]
at 1
===
insert-tree
---
ExpressionStatement [21054,21111]
    Assignment [21054,21110]
        SimpleName: len [21054,21057]
        ASSIGNMENT_OPERATOR: += [21058,21060]
        InfixExpression [21061,21110]
            ParenthesizedExpression [21061,21085]
                InfixExpression [21062,21084]
                    NumberLiteral: 1 [21062,21063]
                    INFIX_EXPRESSION_OPERATOR: + [21064,21065]
                    ParenthesizedExpression [21066,21084]
                        InfixExpression [21067,21083]
                            SimpleName: len [21067,21070]
                            INFIX_EXPRESSION_OPERATOR: / [21071,21072]
                            SimpleName: CHUNK_SIZE [21073,21083]
            INFIX_EXPRESSION_OPERATOR: * [21086,21087]
            QualifiedName: CHUNK_SEPARATOR.length [21088,21110]
to
Block [9562,9793]
at 0
===
update-node
---
SimpleName: encodedDataLengthLong [9807,9828]
replace encodedDataLengthLong by len
===
insert-tree
---
METHOD_INVOCATION_RECEIVER [21388,21391]
    SimpleName: b64 [21388,21391]
to
MethodInvocation [21388,21428]
at 0
===
insert-node
---
SimpleName: setInitialBuffer [21392,21408]
to
MethodInvocation [21388,21428]
at 1
===
insert-node
---
METHOD_INVOCATION_ARGUMENTS [21409,21427]
to
MethodInvocation [21388,21428]
at 2
===
insert-node
---
ExpressionStatement [21663,21699]
to
Block [9116,9231]
at 0
===
move-tree
---
ReturnStatement [16182,16201]
    SimpleName: decodedData [16189,16200]
to
Block [22022,22064]
at 0
===
insert-node
---
SimpleName: buf [22164,22167]
to
VariableDeclarationFragment [22164,22189]
at 0
===
insert-node
---
ArrayCreation [22170,22189]
to
VariableDeclarationFragment [22164,22189]
at 1
===
insert-tree
---
METHOD_INVOCATION_RECEIVER [22199,22202]
    SimpleName: b64 [22199,22202]
to
MethodInvocation [22199,22239]
at 0
===
insert-node
---
SimpleName: setInitialBuffer [22203,22219]
to
MethodInvocation [22199,22239]
at 1
===
insert-node
---
METHOD_INVOCATION_ARGUMENTS [22220,22238]
to
MethodInvocation [22199,22239]
at 2
===
move-tree
---
Block [13535,13709]
    ExpressionStatement [13553,13695]
        MethodInvocation [13553,13694]
            METHOD_INVOCATION_RECEIVER [13553,13559]
                SimpleName: System [13553,13559]
            SimpleName: arraycopy [13560,13569]
            METHOD_INVOCATION_ARGUMENTS [13570,13693]
                SimpleName: CHUNK_SEPARATOR [13570,13585]
                NumberLiteral: 0 [13587,13588]
                SimpleName: encodedData [13590,13601]
                InfixExpression [13603,13645]
                    SimpleName: encodedDataLength [13603,13620]
                    INFIX_EXPRESSION_OPERATOR: - [13621,13622]
                    QualifiedName: CHUNK_SEPARATOR.length [13623,13645]
                QualifiedName: CHUNK_SEPARATOR.length [13671,13693]
to
IfStatement [9090,9329]
at 1
===
update-node
---
SimpleName: encodedData [13736,13747]
replace encodedData by binaryData
===
insert-node
---
SimpleName: len [20946,20949]
to
InfixExpression [20946,20953]
at 0
===
insert-node
---
INFIX_EXPRESSION_OPERATOR: % [20950,20951]
to
InfixExpression [20946,20953]
at 1
===
move-tree
---
NumberLiteral: 4 [9317,9318]
to
InfixExpression [20946,20953]
at 2
===
insert-node
---
SimpleName: buf [21409,21412]
to
METHOD_INVOCATION_ARGUMENTS [21409,21427]
at 0
===
insert-node
---
QualifiedName: buf.length [21417,21427]
to
METHOD_INVOCATION_ARGUMENTS [21409,21427]
at 1
===
insert-node
---
MethodInvocation [21663,21698]
to
ExpressionStatement [21663,21699]
at 0
===
update-node
---
SimpleName: decodedData [16189,16200]
replace decodedData by base64Data
===
insert-node
---
ArrayType [22174,22189]
to
ArrayCreation [22170,22189]
at 0
===
insert-node
---
SimpleName: buf [22220,22223]
to
METHOD_INVOCATION_ARGUMENTS [22220,22238]
at 0
===
insert-node
---
QualifiedName: buf.length [22228,22238]
to
METHOD_INVOCATION_ARGUMENTS [22220,22238]
at 1
===
update-node
---
SimpleName: fewerThan24bits [9094,9109]
replace fewerThan24bits by buf
===
insert-node
---
SimpleName: b [10335,10336]
to
InfixExpression [9094,9114]
at 2
===
move-tree
---
ExpressionStatement [12023,12062]
    Assignment [12023,12061]
        SimpleName: encodedIndex [12023,12035]
        ASSIGNMENT_OPERATOR: += [12036,12038]
        QualifiedName: CHUNK_SEPARATOR.length [12039,12061]
to
Block [13535,13709]
at 1
===
move-tree
---
IfStatement [12734,13395]
    InfixExpression [12738,12767]
        SimpleName: fewerThan24bits [12738,12753]
        INFIX_EXPRESSION_OPERATOR: == [12754,12756]
        SimpleName: SIXTEENBIT [12757,12767]
    Block [12769,13395]
        ExpressionStatement [12784,12811]
            Assignment [12784,12810]
                SimpleName: b1 [12784,12786]
                ASSIGNMENT_OPERATOR: = [12787,12788]
                ArrayAccess [12789,12810]
                    SimpleName: binaryData [12789,12799]
                    SimpleName: dataIndex [12800,12809]
        ExpressionStatement [12824,12855]
            Assignment [12824,12854]
                SimpleName: b2 [12824,12826]
                ASSIGNMENT_OPERATOR: = [12827,12828]
                ArrayAccess [12829,12854]
                    SimpleName: binaryData [12829,12839]
                    InfixExpression [12840,12853]
                        SimpleName: dataIndex [12840,12849]
                        INFIX_EXPRESSION_OPERATOR: + [12850,12851]
                        NumberLiteral: 1 [12852,12853]
        ExpressionStatement [12868,12891]
            Assignment [12868,12890]
                SimpleName: l [12868,12869]
                ASSIGNMENT_OPERATOR: = [12870,12871]
                CastExpression [12872,12890]
                    PrimitiveType: byte [12873,12877]
                    ParenthesizedExpression [12879,12890]
                        InfixExpression [12880,12889]
                            SimpleName: b2 [12880,12882]
                            INFIX_EXPRESSION_OPERATOR: & [12883,12884]
                            NumberLiteral: 0x0f [12885,12889]
        ExpressionStatement [12904,12927]
            Assignment [12904,12926]
                SimpleName: k [12904,12905]
                ASSIGNMENT_OPERATOR: = [12906,12907]
                CastExpression [12908,12926]
                    PrimitiveType: byte [12909,12913]
                    ParenthesizedExpression [12915,12926]
                        InfixExpression [12916,12925]
                            SimpleName: b1 [12916,12918]
                            INFIX_EXPRESSION_OPERATOR: & [12919,12920]
                            NumberLiteral: 0x03 [12921,12925]
        VariableDeclarationStatement [12941,13019]
            PrimitiveType: byte [12941,12945]
            VariableDeclarationFragment [12946,13018]
                SimpleName: val1 [12946,12950]
                ConditionalExpression [12953,13018]
                    ParenthesizedExpression [12953,12971]
                        InfixExpression [12954,12970]
                            ParenthesizedExpression [12954,12965]
                                InfixExpression [12955,12964]
                                    SimpleName: b1 [12955,12957]
                                    INFIX_EXPRESSION_OPERATOR: & [12958,12959]
                                    SimpleName: SIGN [12960,12964]
                            INFIX_EXPRESSION_OPERATOR: == [12966,12968]
                            NumberLiteral: 0 [12969,12970]
                    CastExpression [12974,12990]
                        PrimitiveType: byte [12975,12979]
                        ParenthesizedExpression [12981,12990]
                            InfixExpression [12982,12989]
                                SimpleName: b1 [12982,12984]
                                INFIX_EXPRESSION_OPERATOR: >> [12985,12987]
                                NumberLiteral: 2 [12988,12989]
                    CastExpression [12993,13018]
                        PrimitiveType: byte [12994,12998]
                        ParenthesizedExpression [13000,13018]
                            InfixExpression [13001,13017]
                                InfixExpression [13001,13010]
                                    ParenthesizedExpression [13001,13005]
                                        SimpleName: b1 [13002,13004]
                                    INFIX_EXPRESSION_OPERATOR: >> [13006,13008]
                                    NumberLiteral: 2 [13009,13010]
                                INFIX_EXPRESSION_OPERATOR: ^ [13011,13012]
                                NumberLiteral: 0xc0 [13013,13017]
        VariableDeclarationStatement [13032,13110]
            PrimitiveType: byte [13032,13036]
            VariableDeclarationFragment [13037,13109]
                SimpleName: val2 [13037,13041]
                ConditionalExpression [13044,13109]
                    ParenthesizedExpression [13044,13062]
                        InfixExpression [13045,13061]
                            ParenthesizedExpression [13045,13056]
                                InfixExpression [13046,13055]
                                    SimpleName: b2 [13046,13048]
                                    INFIX_EXPRESSION_OPERATOR: & [13049,13050]
                                    SimpleName: SIGN [13051,13055]
                            INFIX_EXPRESSION_OPERATOR: == [13057,13059]
                            NumberLiteral: 0 [13060,13061]
                    CastExpression [13065,13081]
                        PrimitiveType: byte [13066,13070]
                        ParenthesizedExpression [13072,13081]
                            InfixExpression [13073,13080]
                                SimpleName: b2 [13073,13075]
                                INFIX_EXPRESSION_OPERATOR: >> [13076,13078]
                                NumberLiteral: 4 [13079,13080]
                    CastExpression [13084,13109]
                        PrimitiveType: byte [13085,13089]
                        ParenthesizedExpression [13091,13109]
                            InfixExpression [13092,13108]
                                InfixExpression [13092,13101]
                                    ParenthesizedExpression [13092,13096]
                                        SimpleName: b2 [13093,13095]
                                    INFIX_EXPRESSION_OPERATOR: >> [13097,13099]
                                    NumberLiteral: 4 [13100,13101]
                                INFIX_EXPRESSION_OPERATOR: ^ [13102,13103]
                                NumberLiteral: 0xf0 [13104,13108]
        ExpressionStatement [13124,13179]
            Assignment [13124,13178]
                ArrayAccess [13124,13149]
                    SimpleName: encodedData [13124,13135]
                    SimpleName: encodedIndex [13136,13148]
                ASSIGNMENT_OPERATOR: = [13150,13151]
                ArrayAccess [13152,13178]
                    SimpleName: lookUpBase64Alphabet [13152,13172]
                    SimpleName: val1 [13173,13177]
        ExpressionStatement [13192,13262]
            Assignment [13192,13261]
                ArrayAccess [13192,13221]
                    SimpleName: encodedData [13192,13203]
                    InfixExpression [13204,13220]
                        SimpleName: encodedIndex [13204,13216]
                        INFIX_EXPRESSION_OPERATOR: + [13217,13218]
                        NumberLiteral: 1 [13219,13220]
                ASSIGNMENT_OPERATOR: = [13222,13223]
                ArrayAccess [13224,13261]
                    SimpleName: lookUpBase64Alphabet [13224,13244]
                    InfixExpression [13245,13260]
                        SimpleName: val2 [13245,13249]
                        INFIX_EXPRESSION_OPERATOR: | [13250,13251]
                        ParenthesizedExpression [13252,13260]
                            InfixExpression [13253,13259]
                                SimpleName: k [13253,13254]
                                INFIX_EXPRESSION_OPERATOR: << [13255,13257]
                                NumberLiteral: 4 [13258,13259]
        ExpressionStatement [13275,13336]
            Assignment [13275,13335]
                ArrayAccess [13275,13304]
                    SimpleName: encodedData [13275,13286]
                    InfixExpression [13287,13303]
                        SimpleName: encodedIndex [13287,13299]
                        INFIX_EXPRESSION_OPERATOR: + [13300,13301]
                        NumberLiteral: 2 [13302,13303]
                ASSIGNMENT_OPERATOR: = [13305,13306]
                ArrayAccess [13307,13335]
                    SimpleName: lookUpBase64Alphabet [13307,13327]
                    InfixExpression [13328,13334]
                        SimpleName: l [13328,13329]
                        INFIX_EXPRESSION_OPERATOR: << [13330,13332]
                        NumberLiteral: 2 [13333,13334]
        ExpressionStatement [13349,13385]
            Assignment [13349,13384]
                ArrayAccess [13349,13378]
                    SimpleName: encodedData [13349,13360]
                    InfixExpression [13361,13377]
                        SimpleName: encodedIndex [13361,13373]
                        INFIX_EXPRESSION_OPERATOR: + [13374,13375]
                        NumberLiteral: 3 [13376,13377]
                ASSIGNMENT_OPERATOR: = [13379,13380]
                SimpleName: PAD [13381,13384]
to
Block [13535,13709]
at 2
===
move-tree
---
ExpressionStatement [12633,12669]
    Assignment [12633,12668]
        ArrayAccess [12633,12662]
            SimpleName: encodedData [12633,12644]
            InfixExpression [12645,12661]
                SimpleName: encodedIndex [12645,12657]
                INFIX_EXPRESSION_OPERATOR: + [12658,12659]
                NumberLiteral: 2 [12660,12661]
        ASSIGNMENT_OPERATOR: = [12663,12664]
        SimpleName: PAD [12665,12668]
to
Block [9237,9329]
at 0
===
insert-node
---
SimpleName: out [11456,11459]
to
root
at 0
===
update-node
---
SimpleName: encodedIndex [11510,11522]
replace encodedIndex by len
===
insert-node
---
InfixExpression [20998,21005]
to
Assignment [11510,11527]
at 2
===
insert-tree
---
METHOD_INVOCATION_RECEIVER [21663,21666]
    SimpleName: b64 [21663,21666]
to
MethodInvocation [21663,21698]
at 0
===
insert-node
---
SimpleName: readResults [21667,21678]
to
MethodInvocation [21663,21698]
at 1
===
insert-node
---
METHOD_INVOCATION_ARGUMENTS [21679,21697]
to
MethodInvocation [21663,21698]
at 2
===
move-tree
---
PrimitiveType: byte [14260,14264]
to
ArrayType [22174,22189]
at 0
===
insert-tree
---
Dimension [22178,22189]
    CastExpression [22179,22188]
        PrimitiveType: int [22180,22183]
        SimpleName: len [22185,22188]
to
ArrayType [22174,22189]
at 1
===
move-tree
---
ASSIGNMENT_OPERATOR: = [12663,12664]
to
Assignment [12633,12668]
at 2
===
move-tree
---
NumberLiteral: 4 [11526,11527]
to
InfixExpression [20998,21005]
at 0
===
insert-node
---
INFIX_EXPRESSION_OPERATOR: - [21000,21001]
to
InfixExpression [20998,21005]
at 1
===
insert-node
---
SimpleName: mod [21002,21005]
to
InfixExpression [20998,21005]
at 2
===
insert-node
---
SimpleName: buf [21679,21682]
to
METHOD_INVOCATION_ARGUMENTS [21679,21697]
at 0
===
move-tree
---
NumberLiteral: 0 [13587,13588]
to
METHOD_INVOCATION_ARGUMENTS [21679,21697]
at 1
===
insert-node
---
QualifiedName: buf.length [21687,21697]
to
METHOD_INVOCATION_ARGUMENTS [21679,21697]
at 2
===
update-node
---
SimpleName: encodedIndex [12023,12035]
replace encodedIndex by readPos
===
insert-node
---
SimpleName: len [10429,10432]
to
Assignment [12023,12061]
at 2
===
update-node
---
SimpleName: fewerThan24bits [12738,12753]
replace fewerThan24bits by readPos
===
update-node
---
INFIX_EXPRESSION_OPERATOR: == [12754,12756]
replace == by >=
===
update-node
---
SimpleName: SIXTEENBIT [12757,12767]
replace SIXTEENBIT by pos
===
update-node
---
SimpleName: PAD [12665,12668]
replace PAD by buf
===
insert-node
---
NullLiteral [10680,10684]
to
Assignment [12633,12668]
at 3
===
update-node
---
SimpleName: CHUNK_SEPARATOR [13570,13585]
replace CHUNK_SEPARATOR by buf
===
update-node
---
SimpleName: encodedData [13590,13601]
replace encodedData by readPos
===
insert-node
---
SimpleName: b [10387,10388]
to
METHOD_INVOCATION_ARGUMENTS [13570,13693]
at 2
===
insert-node
---
SimpleName: bPos [10390,10394]
to
METHOD_INVOCATION_ARGUMENTS [13570,13693]
at 3
===
insert-node
---
SimpleName: len [10396,10399]
to
METHOD_INVOCATION_ARGUMENTS [13570,13693]
at 4
===
move-tree
---
ASSIGNMENT_OPERATOR: = [13379,13380]
to
Assignment [13349,13384]
at 2
===
update-node
---
SimpleName: PAD [13381,13384]
replace PAD by buf
===
insert-node
---
NullLiteral [10498,10502]
to
Assignment [13349,13384]
at 3
===
delete-tree
---
FieldDeclaration [2180,2262]
    Javadoc [2180,2215]
        TagElement [2191,2207]
            TextElement: The base length. [2191,2207]
    Modifier: private [2220,2227]
    Modifier: static [2228,2234]
    Modifier: final [2235,2240]
    PrimitiveType: int [2241,2244]
    VariableDeclarationFragment [2245,2261]
        SimpleName: BASELENGTH [2245,2255]
        NumberLiteral: 255 [2258,2261]
===
delete-tree
---
FieldDeclaration [2268,2349]
    Javadoc [2268,2301]
        TagElement [2279,2293]
            TextElement: Lookup length. [2279,2293]
    Modifier: private [2306,2313]
    Modifier: static [2314,2320]
    Modifier: final [2321,2326]
    PrimitiveType: int [2327,2330]
    VariableDeclarationFragment [2331,2348]
        SimpleName: LOOKUPLENGTH [2331,2343]
        NumberLiteral: 64 [2346,2348]
===
delete-tree
---
FieldDeclaration [2355,2464]
    Javadoc [2355,2421]
        TagElement [2366,2413]
            TextElement: Used to calculate the number of bits in a byte. [2366,2413]
    Modifier: private [2426,2433]
    Modifier: static [2434,2440]
    Modifier: final [2441,2446]
    PrimitiveType: int [2447,2450]
    VariableDeclarationFragment [2451,2463]
        SimpleName: EIGHTBIT [2451,2459]
        NumberLiteral: 8 [2462,2463]
===
delete-tree
---
FieldDeclaration [2470,2593]
    Javadoc [2470,2547]
        TagElement [2481,2539]
            TextElement: Used when encoding something which has fewer than 24 bits. [2481,2539]
    Modifier: private [2552,2559]
    Modifier: static [2560,2566]
    Modifier: final [2567,2572]
    PrimitiveType: int [2573,2576]
    VariableDeclarationFragment [2577,2592]
        SimpleName: SIXTEENBIT [2577,2587]
        NumberLiteral: 16 [2590,2592]
===
delete-tree
---
FieldDeclaration [2599,2718]
    Javadoc [2599,2664]
        TagElement [2610,2656]
            TextElement: Used to determine how many bits data contains. [2610,2656]
    Modifier: private [2669,2676]
    Modifier: static [2677,2683]
    Modifier: final [2684,2689]
    PrimitiveType: int [2690,2693]
    VariableDeclarationFragment [2694,2717]
        SimpleName: TWENTYFOURBITGROUP [2694,2712]
        NumberLiteral: 24 [2715,2717]
===
delete-tree
---
FieldDeclaration [2724,2823]
    Javadoc [2724,2780]
        TagElement [2735,2772]
            TextElement: Used to get the number of Quadruples. [2735,2772]
    Modifier: private [2785,2792]
    Modifier: static [2793,2799]
    Modifier: final [2800,2805]
    PrimitiveType: int [2806,2809]
    VariableDeclarationFragment [2810,2822]
        SimpleName: FOURBYTE [2810,2818]
        NumberLiteral: 4 [2821,2822]
===
delete-tree
---
FieldDeclaration [2829,2922]
    Javadoc [2829,2880]
        TagElement [2840,2872]
            TextElement: Used to test the sign of a byte. [2840,2872]
    Modifier: private [2885,2892]
    Modifier: static [2893,2899]
    Modifier: final [2900,2905]
    PrimitiveType: int [2906,2909]
    VariableDeclarationFragment [2910,2921]
        SimpleName: SIGN [2910,2914]
        PrefixExpression [2917,2921]
            PREFIX_EXPRESSION_OPERATOR: - [2917,2918]
            NumberLiteral: 128 [2918,2921]
===
delete-node
---
NumberLiteral: 0 [9113,9114]
===
===
delete-tree
---
InfixExpression [13603,13645]
    SimpleName: encodedDataLength [13603,13620]
    INFIX_EXPRESSION_OPERATOR: - [13621,13622]
    QualifiedName: CHUNK_SEPARATOR.length [13623,13645]
===
delete-node
---
QualifiedName: CHUNK_SEPARATOR.length [13671,13693]
===
===
delete-node
---
QualifiedName: CHUNK_SEPARATOR.length [12039,12061]
===
===
delete-tree
---
ExpressionStatement [12784,12811]
    Assignment [12784,12810]
        SimpleName: b1 [12784,12786]
        ASSIGNMENT_OPERATOR: = [12787,12788]
        ArrayAccess [12789,12810]
            SimpleName: binaryData [12789,12799]
            SimpleName: dataIndex [12800,12809]
===
delete-tree
---
ExpressionStatement [12824,12855]
    Assignment [12824,12854]
        SimpleName: b2 [12824,12826]
        ASSIGNMENT_OPERATOR: = [12827,12828]
        ArrayAccess [12829,12854]
            SimpleName: binaryData [12829,12839]
            InfixExpression [12840,12853]
                SimpleName: dataIndex [12840,12849]
                INFIX_EXPRESSION_OPERATOR: + [12850,12851]
                NumberLiteral: 1 [12852,12853]
===
delete-tree
---
ExpressionStatement [12868,12891]
    Assignment [12868,12890]
        SimpleName: l [12868,12869]
        ASSIGNMENT_OPERATOR: = [12870,12871]
        CastExpression [12872,12890]
            PrimitiveType: byte [12873,12877]
            ParenthesizedExpression [12879,12890]
                InfixExpression [12880,12889]
                    SimpleName: b2 [12880,12882]
                    INFIX_EXPRESSION_OPERATOR: & [12883,12884]
                    NumberLiteral: 0x0f [12885,12889]
===
delete-tree
---
ExpressionStatement [12904,12927]
    Assignment [12904,12926]
        SimpleName: k [12904,12905]
        ASSIGNMENT_OPERATOR: = [12906,12907]
        CastExpression [12908,12926]
            PrimitiveType: byte [12909,12913]
            ParenthesizedExpression [12915,12926]
                InfixExpression [12916,12925]
                    SimpleName: b1 [12916,12918]
                    INFIX_EXPRESSION_OPERATOR: & [12919,12920]
                    NumberLiteral: 0x03 [12921,12925]
===
delete-tree
---
VariableDeclarationStatement [12941,13019]
    PrimitiveType: byte [12941,12945]
    VariableDeclarationFragment [12946,13018]
        SimpleName: val1 [12946,12950]
        ConditionalExpression [12953,13018]
            ParenthesizedExpression [12953,12971]
                InfixExpression [12954,12970]
                    ParenthesizedExpression [12954,12965]
                        InfixExpression [12955,12964]
                            SimpleName: b1 [12955,12957]
                            INFIX_EXPRESSION_OPERATOR: & [12958,12959]
                            SimpleName: SIGN [12960,12964]
                    INFIX_EXPRESSION_OPERATOR: == [12966,12968]
                    NumberLiteral: 0 [12969,12970]
            CastExpression [12974,12990]
                PrimitiveType: byte [12975,12979]
                ParenthesizedExpression [12981,12990]
                    InfixExpression [12982,12989]
                        SimpleName: b1 [12982,12984]
                        INFIX_EXPRESSION_OPERATOR: >> [12985,12987]
                        NumberLiteral: 2 [12988,12989]
            CastExpression [12993,13018]
                PrimitiveType: byte [12994,12998]
                ParenthesizedExpression [13000,13018]
                    InfixExpression [13001,13017]
                        InfixExpression [13001,13010]
                            ParenthesizedExpression [13001,13005]
                                SimpleName: b1 [13002,13004]
                            INFIX_EXPRESSION_OPERATOR: >> [13006,13008]
                            NumberLiteral: 2 [13009,13010]
                        INFIX_EXPRESSION_OPERATOR: ^ [13011,13012]
                        NumberLiteral: 0xc0 [13013,13017]
===
delete-tree
---
VariableDeclarationStatement [13032,13110]
    PrimitiveType: byte [13032,13036]
    VariableDeclarationFragment [13037,13109]
        SimpleName: val2 [13037,13041]
        ConditionalExpression [13044,13109]
            ParenthesizedExpression [13044,13062]
                InfixExpression [13045,13061]
                    ParenthesizedExpression [13045,13056]
                        InfixExpression [13046,13055]
                            SimpleName: b2 [13046,13048]
                            INFIX_EXPRESSION_OPERATOR: & [13049,13050]
                            SimpleName: SIGN [13051,13055]
                    INFIX_EXPRESSION_OPERATOR: == [13057,13059]
                    NumberLiteral: 0 [13060,13061]
            CastExpression [13065,13081]
                PrimitiveType: byte [13066,13070]
                ParenthesizedExpression [13072,13081]
                    InfixExpression [13073,13080]
                        SimpleName: b2 [13073,13075]
                        INFIX_EXPRESSION_OPERATOR: >> [13076,13078]
                        NumberLiteral: 4 [13079,13080]
            CastExpression [13084,13109]
                PrimitiveType: byte [13085,13089]
                ParenthesizedExpression [13091,13109]
                    InfixExpression [13092,13108]
                        InfixExpression [13092,13101]
                            ParenthesizedExpression [13092,13096]
                                SimpleName: b2 [13093,13095]
                            INFIX_EXPRESSION_OPERATOR: >> [13097,13099]
                            NumberLiteral: 4 [13100,13101]
                        INFIX_EXPRESSION_OPERATOR: ^ [13102,13103]
                        NumberLiteral: 0xf0 [13104,13108]
===
delete-tree
---
ExpressionStatement [13124,13179]
    Assignment [13124,13178]
        ArrayAccess [13124,13149]
            SimpleName: encodedData [13124,13135]
            SimpleName: encodedIndex [13136,13148]
        ASSIGNMENT_OPERATOR: = [13150,13151]
        ArrayAccess [13152,13178]
            SimpleName: lookUpBase64Alphabet [13152,13172]
            SimpleName: val1 [13173,13177]
===
delete-tree
---
ExpressionStatement [13192,13262]
    Assignment [13192,13261]
        ArrayAccess [13192,13221]
            SimpleName: encodedData [13192,13203]
            InfixExpression [13204,13220]
                SimpleName: encodedIndex [13204,13216]
                INFIX_EXPRESSION_OPERATOR: + [13217,13218]
                NumberLiteral: 1 [13219,13220]
        ASSIGNMENT_OPERATOR: = [13222,13223]
        ArrayAccess [13224,13261]
            SimpleName: lookUpBase64Alphabet [13224,13244]
            InfixExpression [13245,13260]
                SimpleName: val2 [13245,13249]
                INFIX_EXPRESSION_OPERATOR: | [13250,13251]
                ParenthesizedExpression [13252,13260]
                    InfixExpression [13253,13259]
                        SimpleName: k [13253,13254]
                        INFIX_EXPRESSION_OPERATOR: << [13255,13257]
                        NumberLiteral: 4 [13258,13259]
===
delete-tree
---
ExpressionStatement [13275,13336]
    Assignment [13275,13335]
        ArrayAccess [13275,13304]
            SimpleName: encodedData [13275,13286]
            InfixExpression [13287,13303]
                SimpleName: encodedIndex [13287,13299]
                INFIX_EXPRESSION_OPERATOR: + [13300,13301]
                NumberLiteral: 2 [13302,13303]
        ASSIGNMENT_OPERATOR: = [13305,13306]
        ArrayAccess [13307,13335]
            SimpleName: lookUpBase64Alphabet [13307,13327]
            InfixExpression [13328,13334]
                SimpleName: l [13328,13329]
                INFIX_EXPRESSION_OPERATOR: << [13330,13332]
                NumberLiteral: 2 [13333,13334]
===
delete-tree
---
ArrayAccess [13349,13378]
    SimpleName: encodedData [13349,13360]
    InfixExpression [13361,13377]
        SimpleName: encodedIndex [13361,13373]
        INFIX_EXPRESSION_OPERATOR: + [13374,13375]
        NumberLiteral: 3 [13376,13377]
===
delete-tree
---
ArrayAccess [12633,12662]
    SimpleName: encodedData [12633,12644]
    InfixExpression [12645,12661]
        SimpleName: encodedIndex [12645,12657]
        INFIX_EXPRESSION_OPERATOR: + [12658,12659]
        NumberLiteral: 2 [12660,12661]
===
delete-node
---
SimpleName: encodedDataLengthLong [9278,9299]
===
===
delete-node
---
ASSIGNMENT_OPERATOR: = [9300,9301]
===
===
delete-node
---
SimpleName: tripletCount [9302,9314]
===
===
delete-node
---
INFIX_EXPRESSION_OPERATOR: * [9315,9316]
===
===
delete-node
---
InfixExpression [9302,9318]
===
===
delete-node
---
Assignment [9278,9318]
===
===
delete-node
---
ExpressionStatement [9278,9319]
===
===
delete-tree
---
InfixExpression [13508,13533]
    SimpleName: chunksSoFar [13508,13519]
    INFIX_EXPRESSION_OPERATOR: < [13520,13521]
    SimpleName: chunckCount [13522,13533]
===
delete-node
---
IfStatement [13504,13709]
===
===
delete-tree
---
FieldDeclaration [3025,3421]
    Javadoc [3025,3350]
        TagElement [3036,3342]
            TextElement: Contains the Base64 values <code>0</code> through <code>63</code> accessed by using character encodings as [3036,3142]
            TextElement: indices. [3150,3158]
            TextElement: <p> [3166,3169]
            TextElement: For example, <code>base64Alphabet['+']</code> returns <code>62</code>. [3177,3247]
            TextElement: </p> [3255,3259]
            TextElement: <p> [3267,3270]
            TextElement: The value of undefined encodings is <code>-1</code>. [3278,3330]
            TextElement: </p> [3338,3342]
    Modifier: private [3355,3362]
    Modifier: static [3363,3369]
    Modifier: final [3370,3375]
    ArrayType [3376,3382]
        PrimitiveType: byte [3376,3380]
        Dimension [3380,3382]
    VariableDeclarationFragment [3383,3420]
        SimpleName: base64Alphabet [3383,3397]
        ArrayCreation [3400,3420]
            ArrayType [3404,3420]
                PrimitiveType: byte [3404,3408]
                Dimension [3408,3420]
                    SimpleName: BASELENGTH [3409,3419]
===
delete-tree
---
FieldDeclaration [3427,3979]
    Javadoc [3427,3900]
        TagElement [3438,3892]
            TextElement: <p> [3438,3441]
            TextElement: Contains the Base64 encodings <code>A</code> through <code>Z</code>, followed by <code>a</code> through [3449,3552]
            TextElement: <code>z</code>, followed by <code>0</code> through <code>9</code>, followed by <code>+</code>, and [3560,3658]
            TextElement: <code>/</code>. [3666,3681]
            TextElement: </p> [3689,3693]
            TextElement: <p> [3701,3704]
            TextElement: This array is accessed by using character values as indices. [3712,3772]
            TextElement: </p> [3780,3784]
            TextElement: <p> [3792,3795]
            TextElement: For example, <code>lookUpBase64Alphabet[62] </code> returns <code>'+'</code>. [3803,3880]
            TextElement: </p> [3888,3892]
    Modifier: private [3905,3912]
    Modifier: static [3913,3919]
    Modifier: final [3920,3925]
    ArrayType [3926,3932]
        PrimitiveType: byte [3926,3930]
        Dimension [3930,3932]
    VariableDeclarationFragment [3933,3978]
        SimpleName: lookUpBase64Alphabet [3933,3953]
        ArrayCreation [3956,3978]
            ArrayType [3960,3978]
                PrimitiveType: byte [3960,3964]
                Dimension [3964,3978]
                    SimpleName: LOOKUPLENGTH [3965,3977]
===
delete-tree
---
Initializer [4035,4979]
    Modifier: static [4035,4041]
    Block [4042,4979]
        ForStatement [4052,4143]
            VariableDeclarationExpression [4057,4066]
                PrimitiveType: int [4057,4060]
                VariableDeclarationFragment [4061,4066]
                    SimpleName: i [4061,4062]
                    NumberLiteral: 0 [4065,4066]
            InfixExpression [4068,4082]
                SimpleName: i [4068,4069]
                INFIX_EXPRESSION_OPERATOR: < [4070,4071]
                SimpleName: BASELENGTH [4072,4082]
            PostfixExpression [4084,4087]
                SimpleName: i [4084,4085]
                POSTFIX_EXPRESSION_OPERATOR: ++ [4085,4087]
            Block [4089,4143]
                ExpressionStatement [4103,4133]
                    Assignment [4103,4132]
                        ArrayAccess [4103,4120]
                            SimpleName: base64Alphabet [4103,4117]
                            SimpleName: i [4118,4119]
                        ASSIGNMENT_OPERATOR: = [4121,4122]
                        CastExpression [4123,4132]
                            PrimitiveType: byte [4124,4128]
                            PrefixExpression [4130,4132]
                                PREFIX_EXPRESSION_OPERATOR: - [4130,4131]
                                NumberLiteral: 1 [4131,4132]
        ForStatement [4152,4246]
            VariableDeclarationExpression [4157,4168]
                PrimitiveType: int [4157,4160]
                VariableDeclarationFragment [4161,4168]
                    SimpleName: i [4161,4162]
                    CharacterLiteral: 'Z' [4165,4168]
            InfixExpression [4170,4178]
                SimpleName: i [4170,4171]
                INFIX_EXPRESSION_OPERATOR: >= [4172,4174]
                CharacterLiteral: 'A' [4175,4178]
            PostfixExpression [4180,4183]
                SimpleName: i [4180,4181]
                POSTFIX_EXPRESSION_OPERATOR: -- [4181,4183]
            Block [4185,4246]
                ExpressionStatement [4199,4236]
                    Assignment [4199,4235]
                        ArrayAccess [4199,4216]
                            SimpleName: base64Alphabet [4199,4213]
                            SimpleName: i [4214,4215]
                        ASSIGNMENT_OPERATOR: = [4217,4218]
                        CastExpression [4219,4235]
                            PrimitiveType: byte [4220,4224]
                            ParenthesizedExpression [4226,4235]
                                InfixExpression [4227,4234]
                                    SimpleName: i [4227,4228]
                                    INFIX_EXPRESSION_OPERATOR: - [4229,4230]
                                    CharacterLiteral: 'A' [4231,4234]
        ForStatement [4255,4354]
            VariableDeclarationExpression [4260,4271]
                PrimitiveType: int [4260,4263]
                VariableDeclarationFragment [4264,4271]
                    SimpleName: i [4264,4265]
                    CharacterLiteral: 'z' [4268,4271]
            InfixExpression [4273,4281]
                SimpleName: i [4273,4274]
                INFIX_EXPRESSION_OPERATOR: >= [4275,4277]
                CharacterLiteral: 'a' [4278,4281]
            PostfixExpression [4283,4286]
                SimpleName: i [4283,4284]
                POSTFIX_EXPRESSION_OPERATOR: -- [4284,4286]
            Block [4288,4354]
                ExpressionStatement [4302,4344]
                    Assignment [4302,4343]
                        ArrayAccess [4302,4319]
                            SimpleName: base64Alphabet [4302,4316]
                            SimpleName: i [4317,4318]
                        ASSIGNMENT_OPERATOR: = [4320,4321]
                        CastExpression [4322,4343]
                            PrimitiveType: byte [4323,4327]
                            ParenthesizedExpression [4329,4343]
                                InfixExpression [4330,4342]
                                    InfixExpression [4330,4337]
                                        SimpleName: i [4330,4331]
                                        INFIX_EXPRESSION_OPERATOR: - [4332,4333]
                                        CharacterLiteral: 'a' [4334,4337]
                                    INFIX_EXPRESSION_OPERATOR: + [4338,4339]
                                    NumberLiteral: 26 [4340,4342]
        ForStatement [4363,4462]
            VariableDeclarationExpression [4368,4379]
                PrimitiveType: int [4368,4371]
                VariableDeclarationFragment [4372,4379]
                    SimpleName: i [4372,4373]
                    CharacterLiteral: '9' [4376,4379]
            InfixExpression [4381,4389]
                SimpleName: i [4381,4382]
                INFIX_EXPRESSION_OPERATOR: >= [4383,4385]
                CharacterLiteral: '0' [4386,4389]
            PostfixExpression [4391,4394]
                SimpleName: i [4391,4392]
                POSTFIX_EXPRESSION_OPERATOR: -- [4392,4394]
            Block [4396,4462]
                ExpressionStatement [4410,4452]
                    Assignment [4410,4451]
                        ArrayAccess [4410,4427]
                            SimpleName: base64Alphabet [4410,4424]
                            SimpleName: i [4425,4426]
                        ASSIGNMENT_OPERATOR: = [4428,4429]
                        CastExpression [4430,4451]
                            PrimitiveType: byte [4431,4435]
                            ParenthesizedExpression [4437,4451]
                                InfixExpression [4438,4450]
                                    InfixExpression [4438,4445]
                                        SimpleName: i [4438,4439]
                                        INFIX_EXPRESSION_OPERATOR: - [4440,4441]
                                        CharacterLiteral: '0' [4442,4445]
                                    INFIX_EXPRESSION_OPERATOR: + [4446,4447]
                                    NumberLiteral: 52 [4448,4450]
        ExpressionStatement [4472,4497]
            Assignment [4472,4496]
                ArrayAccess [4472,4491]
                    SimpleName: base64Alphabet [4472,4486]
                    CharacterLiteral: '+' [4487,4490]
                ASSIGNMENT_OPERATOR: = [4492,4493]
                NumberLiteral: 62 [4494,4496]
        ExpressionStatement [4506,4531]
            Assignment [4506,4530]
                ArrayAccess [4506,4525]
                    SimpleName: base64Alphabet [4506,4520]
                    CharacterLiteral: '/' [4521,4524]
                ASSIGNMENT_OPERATOR: = [4526,4527]
                NumberLiteral: 63 [4528,4530]
        ForStatement [4541,4638]
            VariableDeclarationExpression [4546,4555]
                PrimitiveType: int [4546,4549]
                VariableDeclarationFragment [4550,4555]
                    SimpleName: i [4550,4551]
                    NumberLiteral: 0 [4554,4555]
            InfixExpression [4557,4564]
                SimpleName: i [4557,4558]
                INFIX_EXPRESSION_OPERATOR: <= [4559,4561]
                NumberLiteral: 25 [4562,4564]
            PostfixExpression [4566,4569]
                SimpleName: i [4566,4567]
                POSTFIX_EXPRESSION_OPERATOR: ++ [4567,4569]
            Block [4571,4638]
                ExpressionStatement [4585,4628]
                    Assignment [4585,4627]
                        ArrayAccess [4585,4608]
                            SimpleName: lookUpBase64Alphabet [4585,4605]
                            SimpleName: i [4606,4607]
                        ASSIGNMENT_OPERATOR: = [4609,4610]
                        CastExpression [4611,4627]
                            PrimitiveType: byte [4612,4616]
                            ParenthesizedExpression [4618,4627]
                                InfixExpression [4619,4626]
                                    CharacterLiteral: 'A' [4619,4622]
                                    INFIX_EXPRESSION_OPERATOR: + [4623,4624]
                                    SimpleName: i [4625,4626]
        ForStatement [4648,4758]
            VariableDeclarationExpression [4653,4670]
                PrimitiveType: int [4653,4656]
                VariableDeclarationFragment [4657,4663]
                    SimpleName: i [4657,4658]
                    NumberLiteral: 26 [4661,4663]
                VariableDeclarationFragment [4665,4670]
                    SimpleName: j [4665,4666]
                    NumberLiteral: 0 [4669,4670]
            InfixExpression [4672,4679]
                SimpleName: i [4672,4673]
                INFIX_EXPRESSION_OPERATOR: <= [4674,4676]
                NumberLiteral: 51 [4677,4679]
            PostfixExpression [4681,4684]
                SimpleName: i [4681,4682]
                POSTFIX_EXPRESSION_OPERATOR: ++ [4682,4684]
            PostfixExpression [4686,4689]
                SimpleName: j [4686,4687]
                POSTFIX_EXPRESSION_OPERATOR: ++ [4687,4689]
            Block [4691,4758]
                ExpressionStatement [4705,4748]
                    Assignment [4705,4747]
                        ArrayAccess [4705,4728]
                            SimpleName: lookUpBase64Alphabet [4705,4725]
                            SimpleName: i [4726,4727]
                        ASSIGNMENT_OPERATOR: = [4729,4730]
                        CastExpression [4731,4747]
                            PrimitiveType: byte [4732,4736]
                            ParenthesizedExpression [4738,4747]
                                InfixExpression [4739,4746]
                                    CharacterLiteral: 'a' [4739,4742]
                                    INFIX_EXPRESSION_OPERATOR: + [4743,4744]
                                    SimpleName: j [4745,4746]
        ForStatement [4768,4878]
            VariableDeclarationExpression [4773,4790]
                PrimitiveType: int [4773,4776]
                VariableDeclarationFragment [4777,4783]
                    SimpleName: i [4777,4778]
                    NumberLiteral: 52 [4781,4783]
                VariableDeclarationFragment [4785,4790]
                    SimpleName: j [4785,4786]
                    NumberLiteral: 0 [4789,4790]
            InfixExpression [4792,4799]
                SimpleName: i [4792,4793]
                INFIX_EXPRESSION_OPERATOR: <= [4794,4796]
                NumberLiteral: 61 [4797,4799]
            PostfixExpression [4801,4804]
                SimpleName: i [4801,4802]
                POSTFIX_EXPRESSION_OPERATOR: ++ [4802,4804]
            PostfixExpression [4806,4809]
                SimpleName: j [4806,4807]
                POSTFIX_EXPRESSION_OPERATOR: ++ [4807,4809]
            Block [4811,4878]
                ExpressionStatement [4825,4868]
                    Assignment [4825,4867]
                        ArrayAccess [4825,4848]
                            SimpleName: lookUpBase64Alphabet [4825,4845]
                            SimpleName: i [4846,4847]
                        ASSIGNMENT_OPERATOR: = [4849,4850]
                        CastExpression [4851,4867]
                            PrimitiveType: byte [4852,4856]
                            ParenthesizedExpression [4858,4867]
                                InfixExpression [4859,4866]
                                    CharacterLiteral: '0' [4859,4862]
                                    INFIX_EXPRESSION_OPERATOR: + [4863,4864]
                                    SimpleName: j [4865,4866]
        ExpressionStatement [4888,4926]
            Assignment [4888,4925]
                ArrayAccess [4888,4912]
                    SimpleName: lookUpBase64Alphabet [4888,4908]
                    NumberLiteral: 62 [4909,4911]
                ASSIGNMENT_OPERATOR: = [4913,4914]
                CastExpression [4915,4925]
                    PrimitiveType: byte [4916,4920]
                    CharacterLiteral: '+' [4922,4925]
        ExpressionStatement [4935,4973]
            Assignment [4935,4972]
                ArrayAccess [4935,4959]
                    SimpleName: lookUpBase64Alphabet [4935,4955]
                    NumberLiteral: 63 [4956,4958]
                ASSIGNMENT_OPERATOR: = [4960,4961]
                CastExpression [4962,4972]
                    PrimitiveType: byte [4963,4967]
                    CharacterLiteral: '/' [4969,4972]
===
delete-tree
---
Block [5338,5374]
    ReturnStatement [5352,5364]
        BooleanLiteral: true [5359,5363]
===
delete-tree
---
IfStatement [5380,5507]
    InfixExpression [5384,5426]
        InfixExpression [5384,5394]
            SimpleName: octect [5384,5390]
            INFIX_EXPRESSION_OPERATOR: < [5391,5392]
            NumberLiteral: 0 [5393,5394]
        INFIX_EXPRESSION_OPERATOR: || [5395,5397]
        InfixExpression [5398,5426]
            ArrayAccess [5398,5420]
                SimpleName: base64Alphabet [5398,5412]
                SimpleName: octect [5413,5419]
            INFIX_EXPRESSION_OPERATOR: == [5421,5423]
            PrefixExpression [5424,5426]
                PREFIX_EXPRESSION_OPERATOR: - [5424,5425]
                NumberLiteral: 1 [5425,5426]
    Block [5428,5465]
        ReturnStatement [5442,5455]
            BooleanLiteral: false [5449,5454]
    Block [5471,5507]
        ReturnStatement [5485,5497]
            BooleanLiteral: true [5492,5496]
===
delete-node
---
IfStatement [5319,5507]
===
===
delete-tree
---
ExpressionStatement [10472,10490]
    Assignment [10472,10489]
        SimpleName: dataIndex [10472,10481]
        ASSIGNMENT_OPERATOR: = [10482,10483]
        InfixExpression [10484,10489]
            SimpleName: i [10484,10485]
            INFIX_EXPRESSION_OPERATOR: * [10486,10487]
            NumberLiteral: 3 [10488,10489]
===
delete-tree
---
ExpressionStatement [10503,10530]
    Assignment [10503,10529]
        SimpleName: b1 [10503,10505]
        ASSIGNMENT_OPERATOR: = [10506,10507]
        ArrayAccess [10508,10529]
            SimpleName: binaryData [10508,10518]
            SimpleName: dataIndex [10519,10528]
===
delete-tree
---
ExpressionStatement [10543,10574]
    Assignment [10543,10573]
        SimpleName: b2 [10543,10545]
        ASSIGNMENT_OPERATOR: = [10546,10547]
        ArrayAccess [10548,10573]
            SimpleName: binaryData [10548,10558]
            InfixExpression [10559,10572]
                SimpleName: dataIndex [10559,10568]
                INFIX_EXPRESSION_OPERATOR: + [10569,10570]
                NumberLiteral: 1 [10571,10572]
===
delete-tree
---
ExpressionStatement [10587,10618]
    Assignment [10587,10617]
        SimpleName: b3 [10587,10589]
        ASSIGNMENT_OPERATOR: = [10590,10591]
        ArrayAccess [10592,10617]
            SimpleName: binaryData [10592,10602]
            InfixExpression [10603,10616]
                SimpleName: dataIndex [10603,10612]
                INFIX_EXPRESSION_OPERATOR: + [10613,10614]
                NumberLiteral: 2 [10615,10616]
===
delete-tree
---
ExpressionStatement [10703,10726]
    Assignment [10703,10725]
        SimpleName: l [10703,10704]
        ASSIGNMENT_OPERATOR: = [10705,10706]
        CastExpression [10707,10725]
            PrimitiveType: byte [10708,10712]
            ParenthesizedExpression [10714,10725]
                InfixExpression [10715,10724]
                    SimpleName: b2 [10715,10717]
                    INFIX_EXPRESSION_OPERATOR: & [10718,10719]
                    NumberLiteral: 0x0f [10720,10724]
===
delete-tree
---
ExpressionStatement [10739,10762]
    Assignment [10739,10761]
        SimpleName: k [10739,10740]
        ASSIGNMENT_OPERATOR: = [10741,10742]
        CastExpression [10743,10761]
            PrimitiveType: byte [10744,10748]
            ParenthesizedExpression [10750,10761]
                InfixExpression [10751,10760]
                    SimpleName: b1 [10751,10753]
                    INFIX_EXPRESSION_OPERATOR: & [10754,10755]
                    NumberLiteral: 0x03 [10756,10760]
===
delete-tree
---
VariableDeclarationStatement [10776,10854]
    PrimitiveType: byte [10776,10780]
    VariableDeclarationFragment [10781,10853]
        SimpleName: val1 [10781,10785]
        ConditionalExpression [10788,10853]
            ParenthesizedExpression [10788,10806]
                InfixExpression [10789,10805]
                    ParenthesizedExpression [10789,10800]
                        InfixExpression [10790,10799]
                            SimpleName: b1 [10790,10792]
                            INFIX_EXPRESSION_OPERATOR: & [10793,10794]
                            SimpleName: SIGN [10795,10799]
                    INFIX_EXPRESSION_OPERATOR: == [10801,10803]
                    NumberLiteral: 0 [10804,10805]
            CastExpression [10809,10825]
                PrimitiveType: byte [10810,10814]
                ParenthesizedExpression [10816,10825]
                    InfixExpression [10817,10824]
                        SimpleName: b1 [10817,10819]
                        INFIX_EXPRESSION_OPERATOR: >> [10820,10822]
                        NumberLiteral: 2 [10823,10824]
            CastExpression [10828,10853]
                PrimitiveType: byte [10829,10833]
                ParenthesizedExpression [10835,10853]
                    InfixExpression [10836,10852]
                        InfixExpression [10836,10845]
                            ParenthesizedExpression [10836,10840]
                                SimpleName: b1 [10837,10839]
                            INFIX_EXPRESSION_OPERATOR: >> [10841,10843]
                            NumberLiteral: 2 [10844,10845]
                        INFIX_EXPRESSION_OPERATOR: ^ [10846,10847]
                        NumberLiteral: 0xc0 [10848,10852]
===
delete-tree
---
VariableDeclarationStatement [10867,10945]
    PrimitiveType: byte [10867,10871]
    VariableDeclarationFragment [10872,10944]
        SimpleName: val2 [10872,10876]
        ConditionalExpression [10879,10944]
            ParenthesizedExpression [10879,10897]
                InfixExpression [10880,10896]
                    ParenthesizedExpression [10880,10891]
                        InfixExpression [10881,10890]
                            SimpleName: b2 [10881,10883]
                            INFIX_EXPRESSION_OPERATOR: & [10884,10885]
                            SimpleName: SIGN [10886,10890]
                    INFIX_EXPRESSION_OPERATOR: == [10892,10894]
                    NumberLiteral: 0 [10895,10896]
            CastExpression [10900,10916]
                PrimitiveType: byte [10901,10905]
                ParenthesizedExpression [10907,10916]
                    InfixExpression [10908,10915]
                        SimpleName: b2 [10908,10910]
                        INFIX_EXPRESSION_OPERATOR: >> [10911,10913]
                        NumberLiteral: 4 [10914,10915]
            CastExpression [10919,10944]
                PrimitiveType: byte [10920,10924]
                ParenthesizedExpression [10926,10944]
                    InfixExpression [10927,10943]
                        InfixExpression [10927,10936]
                            ParenthesizedExpression [10927,10931]
                                SimpleName: b2 [10928,10930]
                            INFIX_EXPRESSION_OPERATOR: >> [10932,10934]
                            NumberLiteral: 4 [10935,10936]
                        INFIX_EXPRESSION_OPERATOR: ^ [10937,10938]
                        NumberLiteral: 0xf0 [10939,10943]
===
delete-tree
---
VariableDeclarationStatement [10958,11036]
    PrimitiveType: byte [10958,10962]
    VariableDeclarationFragment [10963,11035]
        SimpleName: val3 [10963,10967]
        ConditionalExpression [10970,11035]
            ParenthesizedExpression [10970,10988]
                InfixExpression [10971,10987]
                    ParenthesizedExpression [10971,10982]
                        InfixExpression [10972,10981]
                            SimpleName: b3 [10972,10974]
                            INFIX_EXPRESSION_OPERATOR: & [10975,10976]
                            SimpleName: SIGN [10977,10981]
                    INFIX_EXPRESSION_OPERATOR: == [10983,10985]
                    NumberLiteral: 0 [10986,10987]
            CastExpression [10991,11007]
                PrimitiveType: byte [10992,10996]
                ParenthesizedExpression [10998,11007]
                    InfixExpression [10999,11006]
                        SimpleName: b3 [10999,11001]
                        INFIX_EXPRESSION_OPERATOR: >> [11002,11004]
                        NumberLiteral: 6 [11005,11006]
            CastExpression [11010,11035]
                PrimitiveType: byte [11011,11015]
                ParenthesizedExpression [11017,11035]
                    InfixExpression [11018,11034]
                        InfixExpression [11018,11027]
                            ParenthesizedExpression [11018,11022]
                                SimpleName: b3 [11019,11021]
                            INFIX_EXPRESSION_OPERATOR: >> [11023,11025]
                            NumberLiteral: 6 [11026,11027]
                        INFIX_EXPRESSION_OPERATOR: ^ [11028,11029]
                        NumberLiteral: 0xfc [11030,11034]
===
delete-tree
---
ExpressionStatement [11050,11105]
    Assignment [11050,11104]
        ArrayAccess [11050,11075]
            SimpleName: encodedData [11050,11061]
            SimpleName: encodedIndex [11062,11074]
        ASSIGNMENT_OPERATOR: = [11076,11077]
        ArrayAccess [11078,11104]
            SimpleName: lookUpBase64Alphabet [11078,11098]
            SimpleName: val1 [11099,11103]
===
delete-tree
---
ExpressionStatement [11266,11336]
    Assignment [11266,11335]
        ArrayAccess [11266,11295]
            SimpleName: encodedData [11266,11277]
            InfixExpression [11278,11294]
                SimpleName: encodedIndex [11278,11290]
                INFIX_EXPRESSION_OPERATOR: + [11291,11292]
                NumberLiteral: 1 [11293,11294]
        ASSIGNMENT_OPERATOR: = [11296,11297]
        ArrayAccess [11298,11335]
            SimpleName: lookUpBase64Alphabet [11298,11318]
            InfixExpression [11319,11334]
                SimpleName: val2 [11319,11323]
                INFIX_EXPRESSION_OPERATOR: | [11324,11325]
                ParenthesizedExpression [11326,11334]
                    InfixExpression [11327,11333]
                        SimpleName: k [11327,11328]
                        INFIX_EXPRESSION_OPERATOR: << [11329,11331]
                        NumberLiteral: 4 [11332,11333]
===
delete-tree
---
ExpressionStatement [11349,11419]
    Assignment [11349,11418]
        ArrayAccess [11349,11378]
            SimpleName: encodedData [11349,11360]
            InfixExpression [11361,11377]
                SimpleName: encodedIndex [11361,11373]
                INFIX_EXPRESSION_OPERATOR: + [11374,11375]
                NumberLiteral: 2 [11376,11377]
        ASSIGNMENT_OPERATOR: = [11379,11380]
        ArrayAccess [11381,11418]
            SimpleName: lookUpBase64Alphabet [11381,11401]
            InfixExpression [11402,11417]
                ParenthesizedExpression [11402,11410]
                    InfixExpression [11403,11409]
                        SimpleName: l [11403,11404]
                        INFIX_EXPRESSION_OPERATOR: << [11405,11407]
                        NumberLiteral: 2 [11408,11409]
                INFIX_EXPRESSION_OPERATOR: | [11411,11412]
                SimpleName: val3 [11413,11417]
===
delete-tree
---
ExpressionStatement [11432,11496]
    Assignment [11432,11495]
        ArrayAccess [11432,11461]
            SimpleName: encodedData [11432,11443]
            InfixExpression [11444,11460]
                SimpleName: encodedIndex [11444,11456]
                INFIX_EXPRESSION_OPERATOR: + [11457,11458]
                NumberLiteral: 3 [11459,11460]
        ASSIGNMENT_OPERATOR: = [11462,11463]
        ArrayAccess [11464,11495]
            SimpleName: lookUpBase64Alphabet [11464,11484]
            InfixExpression [11485,11494]
                SimpleName: b3 [11485,11487]
                INFIX_EXPRESSION_OPERATOR: & [11488,11489]
                NumberLiteral: 0x3f [11490,11494]
===
delete-node
---
SimpleName: isChunked [11615,11624]
===
===
delete-tree
---
InfixExpression [11705,11739]
    SimpleName: encodedIndex [11705,11717]
    INFIX_EXPRESSION_OPERATOR: == [11718,11720]
    SimpleName: nextSeparatorIndex [11721,11739]
===
delete-tree
---
ExpressionStatement [11763,11851]
    MethodInvocation [11763,11850]
        METHOD_INVOCATION_RECEIVER [11763,11769]
            SimpleName: System [11763,11769]
        SimpleName: arraycopy [11770,11779]
        METHOD_INVOCATION_ARGUMENTS [11780,11849]
            SimpleName: CHUNK_SEPARATOR [11780,11795]
            NumberLiteral: 0 [11797,11798]
            SimpleName: encodedData [11800,11811]
            SimpleName: encodedIndex [11813,11825]
            QualifiedName: CHUNK_SEPARATOR.length [11827,11849]
===
delete-tree
---
ExpressionStatement [11872,11886]
    PostfixExpression [11872,11885]
        SimpleName: chunksSoFar [11872,11883]
        POSTFIX_EXPRESSION_OPERATOR: ++ [11883,11885]
===
delete-tree
---
ExpressionStatement [11907,12002]
    Assignment [11907,12001]
        SimpleName: nextSeparatorIndex [11907,11925]
        ASSIGNMENT_OPERATOR: = [11926,11927]
        InfixExpression [11928,12001]
            ParenthesizedExpression [11928,11960]
                InfixExpression [11929,11959]
                    SimpleName: CHUNK_SIZE [11929,11939]
                    INFIX_EXPRESSION_OPERATOR: * [11940,11941]
                    ParenthesizedExpression [11942,11959]
                        InfixExpression [11943,11958]
                            SimpleName: chunksSoFar [11943,11954]
                            INFIX_EXPRESSION_OPERATOR: + [11955,11956]
                            NumberLiteral: 1 [11957,11958]
            INFIX_EXPRESSION_OPERATOR: + [11961,11962]
            ParenthesizedExpression [11963,12001]
                InfixExpression [11964,12000]
                    SimpleName: chunksSoFar [11964,11975]
                    INFIX_EXPRESSION_OPERATOR: * [11976,11977]
                    QualifiedName: CHUNK_SEPARATOR.length [11978,12000]
===
delete-node
---
Block [11741,12080]
===
===
delete-node
---
IfStatement [11701,12080]
===
===
delete-node
---
Block [11626,12094]
===
===
delete-node
---
IfStatement [11611,12094]
===
===
delete-tree
---
VariableDeclarationStatement [8777,8819]
    PrimitiveType: long [8777,8781]
    VariableDeclarationFragment [8782,8818]
        SimpleName: binaryDataLength [8782,8798]
        QualifiedName: binaryData.length [8801,8818]
===
delete-tree
---
VariableDeclarationStatement [8828,8878]
    PrimitiveType: long [8828,8832]
    VariableDeclarationFragment [8833,8877]
        SimpleName: lengthDataBits [8833,8847]
        InfixExpression [8850,8877]
            SimpleName: binaryDataLength [8850,8866]
            INFIX_EXPRESSION_OPERATOR: * [8867,8868]
            SimpleName: EIGHTBIT [8869,8877]
===
delete-tree
---
VariableDeclarationStatement [8887,8946]
    PrimitiveType: long [8887,8891]
    VariableDeclarationFragment [8892,8945]
        SimpleName: fewerThan24bits [8892,8907]
        InfixExpression [8910,8945]
            SimpleName: lengthDataBits [8910,8924]
            INFIX_EXPRESSION_OPERATOR: % [8925,8926]
            SimpleName: TWENTYFOURBITGROUP [8927,8945]
===
delete-tree
---
VariableDeclarationStatement [8955,9011]
    PrimitiveType: long [8955,8959]
    VariableDeclarationFragment [8960,9010]
        SimpleName: tripletCount [8960,8972]
        InfixExpression [8975,9010]
            SimpleName: lengthDataBits [8975,8989]
            INFIX_EXPRESSION_OPERATOR: / [8990,8991]
            SimpleName: TWENTYFOURBITGROUP [8992,9010]
===
delete-tree
---
VariableDeclarationStatement [9020,9051]
    PrimitiveType: long [9020,9024]
    VariableDeclarationFragment [9025,9050]
        SimpleName: encodedDataLengthLong [9025,9046]
        NumberLiteral: 0 [9049,9050]
===
delete-node
---
VariableDeclarationStatement [9060,9080]
===
===
delete-tree
---
ExpressionStatement [9577,9708]
    Assignment [9577,9707]
        SimpleName: chunckCount [9577,9588]
        ASSIGNMENT_OPERATOR: = [9589,9590]
        ParenthesizedExpression [9591,9707]
            ConditionalExpression [9592,9706]
                InfixExpression [9592,9619]
                    QualifiedName: CHUNK_SEPARATOR.length [9592,9614]
                    INFIX_EXPRESSION_OPERATOR: == [9615,9617]
                    NumberLiteral: 0 [9618,9619]
                NumberLiteral: 0 [9622,9623]
                CastExpression [9626,9706]
                    PrimitiveType: int [9627,9630]
                    MethodInvocation [9632,9706]
                        METHOD_INVOCATION_RECEIVER [9632,9636]
                            SimpleName: Math [9632,9636]
                        SimpleName: ceil [9658,9662]
                        METHOD_INVOCATION_ARGUMENTS [9663,9705]
                            InfixExpression [9663,9705]
                                CastExpression [9663,9692]
                                    PrimitiveType: float [9664,9669]
                                    SimpleName: encodedDataLengthLong [9671,9692]
                                INFIX_EXPRESSION_OPERATOR: / [9693,9694]
                                SimpleName: CHUNK_SIZE [9695,9705]
===
delete-tree
---
ExpressionStatement [9721,9783]
    Assignment [9721,9782]
        SimpleName: encodedDataLengthLong [9721,9742]
        ASSIGNMENT_OPERATOR: += [9743,9745]
        InfixExpression [9746,9782]
            SimpleName: chunckCount [9746,9757]
            INFIX_EXPRESSION_OPERATOR: * [9758,9759]
            QualifiedName: CHUNK_SEPARATOR.length [9760,9782]
===
delete-tree
---
ExpressionStatement [9174,9221]
    Assignment [9174,9220]
        SimpleName: encodedDataLengthLong [9174,9195]
        ASSIGNMENT_OPERATOR: = [9196,9197]
        InfixExpression [9198,9220]
            ParenthesizedExpression [9198,9216]
                InfixExpression [9199,9215]
                    SimpleName: tripletCount [9199,9211]
                    INFIX_EXPRESSION_OPERATOR: + [9212,9213]
                    NumberLiteral: 1 [9214,9215]
            INFIX_EXPRESSION_OPERATOR: * [9217,9218]
            NumberLiteral: 4 [9219,9220]
===
delete-tree
---
VariableDeclarationStatement [10036,10088]
    PrimitiveType: int [10036,10039]
    VariableDeclarationFragment [10040,10087]
        SimpleName: encodedDataLength [10040,10057]
        CastExpression [10060,10087]
            PrimitiveType: int [10061,10064]
            SimpleName: encodedDataLengthLong [10066,10087]
===
delete-tree
---
VariableDeclarationStatement [10097,10146]
    PrimitiveType: byte [10097,10101]
    VariableDeclarationFragment [10102,10145]
        SimpleName: encodedData [10102,10113]
        Dimension [10113,10115]
        ArrayCreation [10118,10145]
            ArrayType [10122,10145]
                PrimitiveType: byte [10122,10126]
                Dimension [10126,10145]
                    SimpleName: encodedDataLength [10127,10144]
===
delete-tree
---
VariableDeclarationStatement [10156,10198]
    PrimitiveType: byte [10156,10160]
    VariableDeclarationFragment [10161,10166]
        SimpleName: k [10161,10162]
        NumberLiteral: 0 [10165,10166]
    VariableDeclarationFragment [10168,10173]
        SimpleName: l [10168,10169]
        NumberLiteral: 0 [10172,10173]
    VariableDeclarationFragment [10175,10181]
        SimpleName: b1 [10175,10177]
        NumberLiteral: 0 [10180,10181]
    VariableDeclarationFragment [10183,10189]
        SimpleName: b2 [10183,10185]
        NumberLiteral: 0 [10188,10189]
    VariableDeclarationFragment [10191,10197]
        SimpleName: b3 [10191,10193]
        NumberLiteral: 0 [10196,10197]
===
delete-node
---
PrimitiveType: int [10208,10211]
===
===
delete-node
---
SimpleName: encodedIndex [10212,10224]
===
===
delete-node
---
VariableDeclarationFragment [10212,10228]
===
===
delete-node
---
VariableDeclarationStatement [10208,10229]
===
===
delete-tree
---
VariableDeclarationStatement [10238,10256]
    PrimitiveType: int [10238,10241]
    VariableDeclarationFragment [10242,10255]
        SimpleName: dataIndex [10242,10251]
        NumberLiteral: 0 [10254,10255]
===
delete-tree
---
VariableDeclarationStatement [10265,10275]
    PrimitiveType: int [10265,10268]
    VariableDeclarationFragment [10269,10274]
        SimpleName: i [10269,10270]
        NumberLiteral: 0 [10273,10274]
===
delete-tree
---
VariableDeclarationStatement [10284,10320]
    PrimitiveType: int [10284,10287]
    VariableDeclarationFragment [10288,10319]
        SimpleName: nextSeparatorIndex [10288,10306]
        SimpleName: CHUNK_SIZE [10309,10319]
===
delete-node
---
VariableDeclarationStatement [10329,10349]
===
===
delete-tree
---
Assignment [10428,10433]
    SimpleName: i [10428,10429]
    ASSIGNMENT_OPERATOR: = [10430,10431]
    NumberLiteral: 0 [10432,10433]
===
delete-tree
---
InfixExpression [10435,10451]
    SimpleName: i [10435,10436]
    INFIX_EXPRESSION_OPERATOR: < [10437,10438]
    SimpleName: tripletCount [10439,10451]
===
delete-tree
---
PostfixExpression [10453,10456]
    SimpleName: i [10453,10454]
    POSTFIX_EXPRESSION_OPERATOR: ++ [10454,10456]
===
delete-node
---
ForStatement [10423,12104]
===
===
delete-tree
---
ExpressionStatement [12162,12180]
    Assignment [12162,12179]
        SimpleName: dataIndex [12162,12171]
        ASSIGNMENT_OPERATOR: = [12172,12173]
        InfixExpression [12174,12179]
            SimpleName: i [12174,12175]
            INFIX_EXPRESSION_OPERATOR: * [12176,12177]
            NumberLiteral: 3 [12178,12179]
===
delete-tree
---
InfixExpression [12194,12221]
    SimpleName: fewerThan24bits [12194,12209]
    INFIX_EXPRESSION_OPERATOR: == [12210,12212]
    SimpleName: EIGHTBIT [12213,12221]
===
delete-tree
---
ArrayAccess [12242,12263]
    SimpleName: binaryData [12242,12252]
    SimpleName: dataIndex [12253,12262]
===
delete-tree
---
ExpressionStatement [12277,12300]
    Assignment [12277,12299]
        SimpleName: k [12277,12278]
        ASSIGNMENT_OPERATOR: = [12279,12280]
        CastExpression [12281,12299]
            PrimitiveType: byte [12282,12286]
            ParenthesizedExpression [12288,12299]
                InfixExpression [12289,12298]
                    SimpleName: b1 [12289,12291]
                    INFIX_EXPRESSION_OPERATOR: & [12292,12293]
                    NumberLiteral: 0x03 [12294,12298]
===
delete-tree
---
VariableDeclarationStatement [12400,12478]
    PrimitiveType: byte [12400,12404]
    VariableDeclarationFragment [12405,12477]
        SimpleName: val1 [12405,12409]
        ConditionalExpression [12412,12477]
            ParenthesizedExpression [12412,12430]
                InfixExpression [12413,12429]
                    ParenthesizedExpression [12413,12424]
                        InfixExpression [12414,12423]
                            SimpleName: b1 [12414,12416]
                            INFIX_EXPRESSION_OPERATOR: & [12417,12418]
                            SimpleName: SIGN [12419,12423]
                    INFIX_EXPRESSION_OPERATOR: == [12425,12427]
                    NumberLiteral: 0 [12428,12429]
            CastExpression [12433,12449]
                PrimitiveType: byte [12434,12438]
                ParenthesizedExpression [12440,12449]
                    InfixExpression [12441,12448]
                        SimpleName: b1 [12441,12443]
                        INFIX_EXPRESSION_OPERATOR: >> [12444,12446]
                        NumberLiteral: 2 [12447,12448]
            CastExpression [12452,12477]
                PrimitiveType: byte [12453,12457]
                ParenthesizedExpression [12459,12477]
                    InfixExpression [12460,12476]
                        InfixExpression [12460,12469]
                            ParenthesizedExpression [12460,12464]
                                SimpleName: b1 [12461,12463]
                            INFIX_EXPRESSION_OPERATOR: >> [12465,12467]
                            NumberLiteral: 2 [12468,12469]
                        INFIX_EXPRESSION_OPERATOR: ^ [12470,12471]
                        NumberLiteral: 0xc0 [12472,12476]
===
delete-tree
---
ExpressionStatement [12491,12546]
    Assignment [12491,12545]
        ArrayAccess [12491,12516]
            SimpleName: encodedData [12491,12502]
            SimpleName: encodedIndex [12503,12515]
        ASSIGNMENT_OPERATOR: = [12517,12518]
        ArrayAccess [12519,12545]
            SimpleName: lookUpBase64Alphabet [12519,12539]
            SimpleName: val1 [12540,12544]
===
delete-tree
---
ExpressionStatement [12559,12620]
    Assignment [12559,12619]
        ArrayAccess [12559,12588]
            SimpleName: encodedData [12559,12570]
            InfixExpression [12571,12587]
                SimpleName: encodedIndex [12571,12583]
                INFIX_EXPRESSION_OPERATOR: + [12584,12585]
                NumberLiteral: 1 [12586,12587]
        ASSIGNMENT_OPERATOR: = [12589,12590]
        ArrayAccess [12591,12619]
            SimpleName: lookUpBase64Alphabet [12591,12611]
            InfixExpression [12612,12618]
                SimpleName: k [12612,12613]
                INFIX_EXPRESSION_OPERATOR: << [12614,12616]
                NumberLiteral: 4 [12617,12618]
===
delete-tree
---
ExpressionStatement [12682,12718]
    Assignment [12682,12717]
        ArrayAccess [12682,12711]
            SimpleName: encodedData [12682,12693]
            InfixExpression [12694,12710]
                SimpleName: encodedIndex [12694,12706]
                INFIX_EXPRESSION_OPERATOR: + [12707,12708]
                NumberLiteral: 3 [12709,12710]
        ASSIGNMENT_OPERATOR: = [12712,12713]
        SimpleName: PAD [12714,12717]
===
delete-node
---
IfStatement [12190,13395]
===
===
delete-node
---
SimpleName: isChunked [13409,13418]
===
===
delete-node
---
IfStatement [13405,13719]
===
===
delete-tree
---
ExpressionStatement [14081,14123]
    Assignment [14081,14122]
        SimpleName: base64Data [14081,14091]
        ASSIGNMENT_OPERATOR: = [14092,14093]
        MethodInvocation [14094,14122]
            SimpleName: discardNonBase64 [14094,14110]
            METHOD_INVOCATION_ARGUMENTS [14111,14121]
                SimpleName: base64Data [14111,14121]
===
delete-tree
---
InfixExpression [14211,14233]
    QualifiedName: base64Data.length [14211,14228]
    INFIX_EXPRESSION_OPERATOR: == [14229,14231]
    NumberLiteral: 0 [14232,14233]
===
delete-tree
---
Dimension [14264,14267]
    NumberLiteral: 0 [14265,14266]
===
delete-node
---
ArrayType [14260,14267]
===
===
delete-node
---
ArrayCreation [14256,14267]
===
===
delete-node
---
ReturnStatement [14249,14268]
===
===
delete-node
---
IfStatement [14207,14278]
===
===
delete-tree
---
VariableDeclarationStatement [14288,14339]
    PrimitiveType: int [14288,14291]
    VariableDeclarationFragment [14292,14338]
        SimpleName: numberQuadruple [14292,14307]
        InfixExpression [14310,14338]
            QualifiedName: base64Data.length [14310,14327]
            INFIX_EXPRESSION_OPERATOR: / [14328,14329]
            SimpleName: FOURBYTE [14330,14338]
===
delete-tree
---
VariableDeclarationStatement [14348,14374]
    PrimitiveType: byte [14348,14352]
    VariableDeclarationFragment [14353,14373]
        SimpleName: decodedData [14353,14364]
        Dimension [14364,14366]
        NullLiteral [14369,14373]
===
delete-tree
---
VariableDeclarationStatement [14383,14445]
    PrimitiveType: byte [14383,14387]
    VariableDeclarationFragment [14388,14394]
        SimpleName: b1 [14388,14390]
        NumberLiteral: 0 [14393,14394]
    VariableDeclarationFragment [14396,14402]
        SimpleName: b2 [14396,14398]
        NumberLiteral: 0 [14401,14402]
    VariableDeclarationFragment [14404,14410]
        SimpleName: b3 [14404,14406]
        NumberLiteral: 0 [14409,14410]
    VariableDeclarationFragment [14412,14418]
        SimpleName: b4 [14412,14414]
        NumberLiteral: 0 [14417,14418]
    VariableDeclarationFragment [14420,14431]
        SimpleName: marker0 [14420,14427]
        NumberLiteral: 0 [14430,14431]
    VariableDeclarationFragment [14433,14444]
        SimpleName: marker1 [14433,14440]
        NumberLiteral: 0 [14443,14444]
===
delete-node
---
VariableDeclarationStatement [14505,14526]
===
===
delete-node
---
PrimitiveType: int [14535,14538]
===
===
delete-node
---
SimpleName: dataIndex [14539,14548]
===
===
delete-node
---
VariableDeclarationFragment [14539,14552]
===
===
delete-node
---
VariableDeclarationStatement [14535,14553]
===
===
delete-tree
---
Block [14562,14944]
    VariableDeclarationStatement [14634,14667]
        PrimitiveType: int [14634,14637]
        VariableDeclarationFragment [14638,14666]
            SimpleName: lastData [14638,14646]
            QualifiedName: base64Data.length [14649,14666]
    WhileStatement [14718,14870]
        InfixExpression [14725,14756]
            ArrayAccess [14725,14749]
                SimpleName: base64Data [14725,14735]
                InfixExpression [14736,14748]
                    SimpleName: lastData [14736,14744]
                    INFIX_EXPRESSION_OPERATOR: - [14745,14746]
                    NumberLiteral: 1 [14747,14748]
            INFIX_EXPRESSION_OPERATOR: == [14750,14752]
            SimpleName: PAD [14753,14756]
        Block [14758,14870]
            IfStatement [14776,14856]
                InfixExpression [14780,14795]
                    PrefixExpression [14780,14790]
                        PREFIX_EXPRESSION_OPERATOR: -- [14780,14782]
                        SimpleName: lastData [14782,14790]
                    INFIX_EXPRESSION_OPERATOR: == [14791,14793]
                    NumberLiteral: 0 [14794,14795]
                Block [14797,14856]
                    ReturnStatement [14819,14838]
                        ArrayCreation [14826,14837]
                            ArrayType [14830,14837]
                                PrimitiveType: byte [14830,14834]
                                Dimension [14834,14837]
                                    NumberLiteral: 0 [14835,14836]
    ExpressionStatement [14883,14934]
        Assignment [14883,14933]
            SimpleName: decodedData [14883,14894]
            ASSIGNMENT_OPERATOR: = [14895,14896]
            ArrayCreation [14897,14933]
                ArrayType [14901,14933]
                    PrimitiveType: byte [14901,14905]
                    Dimension [14905,14933]
                        InfixExpression [14906,14932]
                            SimpleName: lastData [14906,14914]
                            INFIX_EXPRESSION_OPERATOR: - [14915,14916]
                            SimpleName: numberQuadruple [14917,14932]
===
delete-tree
---
VariableDeclarationExpression [14959,14968]
    PrimitiveType: int [14959,14962]
    VariableDeclarationFragment [14963,14968]
        SimpleName: i [14963,14964]
        NumberLiteral: 0 [14967,14968]
===
delete-tree
---
InfixExpression [14970,14989]
    SimpleName: i [14970,14971]
    INFIX_EXPRESSION_OPERATOR: < [14972,14973]
    SimpleName: numberQuadruple [14974,14989]
===
delete-tree
---
PostfixExpression [14991,14994]
    SimpleName: i [14991,14992]
    POSTFIX_EXPRESSION_OPERATOR: ++ [14992,14994]
===
delete-tree
---
InfixExpression [15022,15027]
    SimpleName: i [15022,15023]
    INFIX_EXPRESSION_OPERATOR: * [15024,15025]
    NumberLiteral: 4 [15026,15027]
===
delete-tree
---
ExpressionStatement [15041,15077]
    Assignment [15041,15076]
        SimpleName: marker0 [15041,15048]
        ASSIGNMENT_OPERATOR: = [15049,15050]
        ArrayAccess [15051,15076]
            SimpleName: base64Data [15051,15061]
            InfixExpression [15062,15075]
                SimpleName: dataIndex [15062,15071]
                INFIX_EXPRESSION_OPERATOR: + [15072,15073]
                NumberLiteral: 2 [15074,15075]
===
delete-tree
---
ExpressionStatement [15090,15126]
    Assignment [15090,15125]
        SimpleName: marker1 [15090,15097]
        ASSIGNMENT_OPERATOR: = [15098,15099]
        ArrayAccess [15100,15125]
            SimpleName: base64Data [15100,15110]
            InfixExpression [15111,15124]
                SimpleName: dataIndex [15111,15120]
                INFIX_EXPRESSION_OPERATOR: + [15121,15122]
                NumberLiteral: 3 [15123,15124]
===
delete-tree
---
ExpressionStatement [15140,15183]
    Assignment [15140,15182]
        SimpleName: b1 [15140,15142]
        ASSIGNMENT_OPERATOR: = [15143,15144]
        ArrayAccess [15145,15182]
            SimpleName: base64Alphabet [15145,15159]
            ArrayAccess [15160,15181]
                SimpleName: base64Data [15160,15170]
                SimpleName: dataIndex [15171,15180]
===
delete-tree
---
ExpressionStatement [15196,15243]
    Assignment [15196,15242]
        SimpleName: b2 [15196,15198]
        ASSIGNMENT_OPERATOR: = [15199,15200]
        ArrayAccess [15201,15242]
            SimpleName: base64Alphabet [15201,15215]
            ArrayAccess [15216,15241]
                SimpleName: base64Data [15216,15226]
                InfixExpression [15227,15240]
                    SimpleName: dataIndex [15227,15236]
                    INFIX_EXPRESSION_OPERATOR: + [15237,15238]
                    NumberLiteral: 1 [15239,15240]
===
delete-tree
---
IfStatement [15257,16132]
    InfixExpression [15261,15293]
        InfixExpression [15261,15275]
            SimpleName: marker0 [15261,15268]
            INFIX_EXPRESSION_OPERATOR: != [15269,15271]
            SimpleName: PAD [15272,15275]
        INFIX_EXPRESSION_OPERATOR: && [15276,15278]
        InfixExpression [15279,15293]
            SimpleName: marker1 [15279,15286]
            INFIX_EXPRESSION_OPERATOR: != [15287,15289]
            SimpleName: PAD [15290,15293]
    Block [15295,15677]
        ExpressionStatement [15348,15377]
            Assignment [15348,15376]
                SimpleName: b3 [15348,15350]
                ASSIGNMENT_OPERATOR: = [15351,15352]
                ArrayAccess [15353,15376]
                    SimpleName: base64Alphabet [15353,15367]
                    SimpleName: marker0 [15368,15375]
        ExpressionStatement [15394,15423]
            Assignment [15394,15422]
                SimpleName: b4 [15394,15396]
                ASSIGNMENT_OPERATOR: = [15397,15398]
                ArrayAccess [15399,15422]
                    SimpleName: base64Alphabet [15399,15413]
                    SimpleName: marker1 [15414,15421]
        ExpressionStatement [15441,15496]
            Assignment [15441,15495]
                ArrayAccess [15441,15466]
                    SimpleName: decodedData [15441,15452]
                    SimpleName: encodedIndex [15453,15465]
                ASSIGNMENT_OPERATOR: = [15467,15468]
                CastExpression [15469,15495]
                    PrimitiveType: byte [15470,15474]
                    ParenthesizedExpression [15476,15495]
                        InfixExpression [15477,15494]
                            InfixExpression [15477,15484]
                                SimpleName: b1 [15477,15479]
                                INFIX_EXPRESSION_OPERATOR: << [15480,15482]
                                NumberLiteral: 2 [15483,15484]
                            INFIX_EXPRESSION_OPERATOR: | [15485,15486]
                            InfixExpression [15487,15494]
                                SimpleName: b2 [15487,15489]
                                INFIX_EXPRESSION_OPERATOR: >> [15490,15492]
                                NumberLiteral: 4 [15493,15494]
        ExpressionStatement [15513,15592]
            Assignment [15513,15591]
                ArrayAccess [15513,15542]
                    SimpleName: decodedData [15513,15524]
                    InfixExpression [15525,15541]
                        SimpleName: encodedIndex [15525,15537]
                        INFIX_EXPRESSION_OPERATOR: + [15538,15539]
                        NumberLiteral: 1 [15540,15541]
                ASSIGNMENT_OPERATOR: = [15543,15544]
                CastExpression [15545,15591]
                    PrimitiveType: byte [15546,15550]
                    ParenthesizedExpression [15552,15591]
                        InfixExpression [15553,15590]
                            ParenthesizedExpression [15553,15570]
                                InfixExpression [15554,15569]
                                    ParenthesizedExpression [15554,15564]
                                        InfixExpression [15555,15563]
                                            SimpleName: b2 [15555,15557]
                                            INFIX_EXPRESSION_OPERATOR: & [15558,15559]
                                            NumberLiteral: 0xf [15560,15563]
                                    INFIX_EXPRESSION_OPERATOR: << [15565,15567]
                                    NumberLiteral: 4 [15568,15569]
                            INFIX_EXPRESSION_OPERATOR: | [15571,15572]
                            ParenthesizedExpression [15573,15590]
                                InfixExpression [15574,15589]
                                    ParenthesizedExpression [15574,15583]
                                        InfixExpression [15575,15582]
                                            SimpleName: b3 [15575,15577]
                                            INFIX_EXPRESSION_OPERATOR: >> [15578,15580]
                                            NumberLiteral: 2 [15581,15582]
                                    INFIX_EXPRESSION_OPERATOR: & [15584,15585]
                                    NumberLiteral: 0xf [15586,15589]
        ExpressionStatement [15609,15663]
            Assignment [15609,15662]
                ArrayAccess [15609,15638]
                    SimpleName: decodedData [15609,15620]
                    InfixExpression [15621,15637]
                        SimpleName: encodedIndex [15621,15633]
                        INFIX_EXPRESSION_OPERATOR: + [15634,15635]
                        NumberLiteral: 2 [15636,15637]
                ASSIGNMENT_OPERATOR: = [15639,15640]
                CastExpression [15641,15662]
                    PrimitiveType: byte [15642,15646]
                    ParenthesizedExpression [15648,15662]
                        InfixExpression [15649,15661]
                            InfixExpression [15649,15656]
                                SimpleName: b3 [15649,15651]
                                INFIX_EXPRESSION_OPERATOR: << [15652,15654]
                                NumberLiteral: 6 [15655,15656]
                            INFIX_EXPRESSION_OPERATOR: | [15657,15658]
                            SimpleName: b4 [15659,15661]
    IfStatement [15683,16132]
        InfixExpression [15687,15701]
            SimpleName: marker0 [15687,15694]
            INFIX_EXPRESSION_OPERATOR: == [15695,15697]
            SimpleName: PAD [15698,15701]
        Block [15703,15835]
            ExpressionStatement [15766,15821]
                Assignment [15766,15820]
                    ArrayAccess [15766,15791]
                        SimpleName: decodedData [15766,15777]
                        SimpleName: encodedIndex [15778,15790]
                    ASSIGNMENT_OPERATOR: = [15792,15793]
                    CastExpression [15794,15820]
                        PrimitiveType: byte [15795,15799]
                        ParenthesizedExpression [15801,15820]
                            InfixExpression [15802,15819]
                                InfixExpression [15802,15809]
                                    SimpleName: b1 [15802,15804]
                                    INFIX_EXPRESSION_OPERATOR: << [15805,15807]
                                    NumberLiteral: 2 [15808,15809]
                                INFIX_EXPRESSION_OPERATOR: | [15810,15811]
                                InfixExpression [15812,15819]
                                    SimpleName: b2 [15812,15814]
                                    INFIX_EXPRESSION_OPERATOR: >> [15815,15817]
                                    NumberLiteral: 4 [15818,15819]
        IfStatement [15841,16132]
            InfixExpression [15845,15859]
                SimpleName: marker1 [15845,15852]
                INFIX_EXPRESSION_OPERATOR: == [15853,15855]
                SimpleName: PAD [15856,15859]
            Block [15861,16132]
                ExpressionStatement [15920,15949]
                    Assignment [15920,15948]
                        SimpleName: b3 [15920,15922]
                        ASSIGNMENT_OPERATOR: = [15923,15924]
                        ArrayAccess [15925,15948]
                            SimpleName: base64Alphabet [15925,15939]
                            SimpleName: marker0 [15940,15947]
                ExpressionStatement [15967,16022]
                    Assignment [15967,16021]
                        ArrayAccess [15967,15992]
                            SimpleName: decodedData [15967,15978]
                            SimpleName: encodedIndex [15979,15991]
                        ASSIGNMENT_OPERATOR: = [15993,15994]
                        CastExpression [15995,16021]
                            PrimitiveType: byte [15996,16000]
                            ParenthesizedExpression [16002,16021]
                                InfixExpression [16003,16020]
                                    InfixExpression [16003,16010]
                                        SimpleName: b1 [16003,16005]
                                        INFIX_EXPRESSION_OPERATOR: << [16006,16008]
                                        NumberLiteral: 2 [16009,16010]
                                    INFIX_EXPRESSION_OPERATOR: | [16011,16012]
                                    InfixExpression [16013,16020]
                                        SimpleName: b2 [16013,16015]
                                        INFIX_EXPRESSION_OPERATOR: >> [16016,16018]
                                        NumberLiteral: 4 [16019,16020]
                ExpressionStatement [16039,16118]
                    Assignment [16039,16117]
                        ArrayAccess [16039,16068]
                            SimpleName: decodedData [16039,16050]
                            InfixExpression [16051,16067]
                                SimpleName: encodedIndex [16051,16063]
                                INFIX_EXPRESSION_OPERATOR: + [16064,16065]
                                NumberLiteral: 1 [16066,16067]
                        ASSIGNMENT_OPERATOR: = [16069,16070]
                        CastExpression [16071,16117]
                            PrimitiveType: byte [16072,16076]
                            ParenthesizedExpression [16078,16117]
                                InfixExpression [16079,16116]
                                    ParenthesizedExpression [16079,16096]
                                        InfixExpression [16080,16095]
                                            ParenthesizedExpression [16080,16090]
                                                InfixExpression [16081,16089]
                                                    SimpleName: b2 [16081,16083]
                                                    INFIX_EXPRESSION_OPERATOR: & [16084,16085]
                                                    NumberLiteral: 0xf [16086,16089]
                                            INFIX_EXPRESSION_OPERATOR: << [16091,16093]
                                            NumberLiteral: 4 [16094,16095]
                                    INFIX_EXPRESSION_OPERATOR: | [16097,16098]
                                    ParenthesizedExpression [16099,16116]
                                        InfixExpression [16100,16115]
                                            ParenthesizedExpression [16100,16109]
                                                InfixExpression [16101,16108]
                                                    SimpleName: b3 [16101,16103]
                                                    INFIX_EXPRESSION_OPERATOR: >> [16104,16106]
                                                    NumberLiteral: 2 [16107,16108]
                                            INFIX_EXPRESSION_OPERATOR: & [16110,16111]
                                            NumberLiteral: 0xf [16112,16115]
===
delete-tree
---
ExpressionStatement [16145,16163]
    Assignment [16145,16162]
        SimpleName: encodedIndex [16145,16157]
        ASSIGNMENT_OPERATOR: += [16158,16160]
        NumberLiteral: 3 [16161,16162]
===
delete-node
---
Block [14996,16173]
===
===
delete-node
---
ForStatement [14954,16173]
===
===
multi-move-tree
---
PrimitiveType: int [14505,14508]
to
PrimitiveType: int [3647,3650]
at -1
===
multi-move-tree
---
PrimitiveType: int [10329,10332]
to
PrimitiveType: int [3647,3650]
at -1
===
multi-move-tree
---
ExpressionStatement [15010,15028]
    Assignment [15010,15027]
        SimpleName: dataIndex [15010,15019]
        ASSIGNMENT_OPERATOR: = [15020,15021]
        InfixExpression [15022,15027]
            SimpleName: i [15022,15023]
            INFIX_EXPRESSION_OPERATOR: * [15024,15025]
            NumberLiteral: 4 [15026,15027]
to
ExpressionStatement [11450,11460]
at -1
===
multi-move-tree
---
ExpressionStatement [12237,12264]
    Assignment [12237,12263]
        SimpleName: b1 [12237,12239]
        ASSIGNMENT_OPERATOR: = [12240,12241]
        ArrayAccess [12242,12263]
            SimpleName: binaryData [12242,12252]
            SimpleName: dataIndex [12253,12262]
to
ExpressionStatement [11450,11460]
at -1
===
multi-move-tree
---
NumberLiteral: 0 [14551,14552]
to
NumberLiteral: 0 [22225,22226]
at -1
===
multi-move-tree
---
NumberLiteral: 0 [14524,14525]
to
NumberLiteral: 0 [22225,22226]
at -1
===
multi-move-tree
---
ASSIGNMENT_OPERATOR: = [15020,15021]
to
ASSIGNMENT_OPERATOR: = [11454,11455]
at -1
===
multi-move-tree
---
ASSIGNMENT_OPERATOR: = [12240,12241]
to
ASSIGNMENT_OPERATOR: = [11454,11455]
at -1
===
multi-move-tree
---
SimpleName: dataIndex [15010,15019]
to
SimpleName: buf [11450,11453]
at -1
===
multi-move-tree
---
SimpleName: b1 [12237,12239]
to
SimpleName: buf [11450,11453]
at -1
===
multi-move-tree
---
VariableDeclarationFragment [10333,10348]
    SimpleName: chunksSoFar [10333,10344]
    NumberLiteral: 0 [10347,10348]
to
VariableDeclarationFragment [3651,3658]
at -1
===
multi-move-tree
---
VariableDeclarationFragment [14509,14525]
    SimpleName: encodedIndex [14509,14521]
    NumberLiteral: 0 [14524,14525]
to
VariableDeclarationFragment [3651,3658]
at -1
===
multi-move-tree
---
Assignment [12237,12263]
    SimpleName: b1 [12237,12239]
    ASSIGNMENT_OPERATOR: = [12240,12241]
    ArrayAccess [12242,12263]
        SimpleName: binaryData [12242,12252]
        SimpleName: dataIndex [12253,12262]
to
Assignment [11450,11459]
at -1
===
multi-move-tree
---
Assignment [15010,15027]
    SimpleName: dataIndex [15010,15019]
    ASSIGNMENT_OPERATOR: = [15020,15021]
    InfixExpression [15022,15027]
        SimpleName: i [15022,15023]
        INFIX_EXPRESSION_OPERATOR: * [15024,15025]
        NumberLiteral: 4 [15026,15027]
to
Assignment [11450,11459]
at -1
===
multi-move-tree
---
Block [14235,14278]
    ReturnStatement [14249,14268]
        ArrayCreation [14256,14267]
            ArrayType [14260,14267]
                PrimitiveType: byte [14260,14264]
                Dimension [14264,14267]
                    NumberLiteral: 0 [14265,14266]
to
Block [11436,11526]
at -1
===
multi-move-tree
---
Block [12223,12728]
    ExpressionStatement [12237,12264]
        Assignment [12237,12263]
            SimpleName: b1 [12237,12239]
            ASSIGNMENT_OPERATOR: = [12240,12241]
            ArrayAccess [12242,12263]
                SimpleName: binaryData [12242,12252]
                SimpleName: dataIndex [12253,12262]
    ExpressionStatement [12277,12300]
        Assignment [12277,12299]
            SimpleName: k [12277,12278]
            ASSIGNMENT_OPERATOR: = [12279,12280]
            CastExpression [12281,12299]
                PrimitiveType: byte [12282,12286]
                ParenthesizedExpression [12288,12299]
                    InfixExpression [12289,12298]
                        SimpleName: b1 [12289,12291]
                        INFIX_EXPRESSION_OPERATOR: & [12292,12293]
                        NumberLiteral: 0x03 [12294,12298]
    VariableDeclarationStatement [12400,12478]
        PrimitiveType: byte [12400,12404]
        VariableDeclarationFragment [12405,12477]
            SimpleName: val1 [12405,12409]
            ConditionalExpression [12412,12477]
                ParenthesizedExpression [12412,12430]
                    InfixExpression [12413,12429]
                        ParenthesizedExpression [12413,12424]
                            InfixExpression [12414,12423]
                                SimpleName: b1 [12414,12416]
                                INFIX_EXPRESSION_OPERATOR: & [12417,12418]
                                SimpleName: SIGN [12419,12423]
                        INFIX_EXPRESSION_OPERATOR: == [12425,12427]
                        NumberLiteral: 0 [12428,12429]
                CastExpression [12433,12449]
                    PrimitiveType: byte [12434,12438]
                    ParenthesizedExpression [12440,12449]
                        InfixExpression [12441,12448]
                            SimpleName: b1 [12441,12443]
                            INFIX_EXPRESSION_OPERATOR: >> [12444,12446]
                            NumberLiteral: 2 [12447,12448]
                CastExpression [12452,12477]
                    PrimitiveType: byte [12453,12457]
                    ParenthesizedExpression [12459,12477]
                        InfixExpression [12460,12476]
                            InfixExpression [12460,12469]
                                ParenthesizedExpression [12460,12464]
                                    SimpleName: b1 [12461,12463]
                                INFIX_EXPRESSION_OPERATOR: >> [12465,12467]
                                NumberLiteral: 2 [12468,12469]
                            INFIX_EXPRESSION_OPERATOR: ^ [12470,12471]
                            NumberLiteral: 0xc0 [12472,12476]
    ExpressionStatement [12491,12546]
        Assignment [12491,12545]
            ArrayAccess [12491,12516]
                SimpleName: encodedData [12491,12502]
                SimpleName: encodedIndex [12503,12515]
            ASSIGNMENT_OPERATOR: = [12517,12518]
            ArrayAccess [12519,12545]
                SimpleName: lookUpBase64Alphabet [12519,12539]
                SimpleName: val1 [12540,12544]
    ExpressionStatement [12559,12620]
        Assignment [12559,12619]
            ArrayAccess [12559,12588]
                SimpleName: encodedData [12559,12570]
                InfixExpression [12571,12587]
                    SimpleName: encodedIndex [12571,12583]
                    INFIX_EXPRESSION_OPERATOR: + [12584,12585]
                    NumberLiteral: 1 [12586,12587]
            ASSIGNMENT_OPERATOR: = [12589,12590]
            ArrayAccess [12591,12619]
                SimpleName: lookUpBase64Alphabet [12591,12611]
                InfixExpression [12612,12618]
                    SimpleName: k [12612,12613]
                    INFIX_EXPRESSION_OPERATOR: << [12614,12616]
                    NumberLiteral: 4 [12617,12618]
    ExpressionStatement [12633,12669]
        Assignment [12633,12668]
            ArrayAccess [12633,12662]
                SimpleName: encodedData [12633,12644]
                InfixExpression [12645,12661]
                    SimpleName: encodedIndex [12645,12657]
                    INFIX_EXPRESSION_OPERATOR: + [12658,12659]
                    NumberLiteral: 2 [12660,12661]
            ASSIGNMENT_OPERATOR: = [12663,12664]
            SimpleName: PAD [12665,12668]
    ExpressionStatement [12682,12718]
        Assignment [12682,12717]
            ArrayAccess [12682,12711]
                SimpleName: encodedData [12682,12693]
                InfixExpression [12694,12710]
                    SimpleName: encodedIndex [12694,12706]
                    INFIX_EXPRESSION_OPERATOR: + [12707,12708]
                    NumberLiteral: 3 [12709,12710]
            ASSIGNMENT_OPERATOR: = [12712,12713]
            SimpleName: PAD [12714,12717]
to
Block [11436,11526]
at -1
===
multi-move-tree
---
NumberLiteral: 0 [9078,9079]
to
NumberLiteral: 0 [21414,21415]
at -1
===
multi-move-tree
---
NumberLiteral: 0 [10347,10348]
to
NumberLiteral: 0 [21414,21415]
at -1
===
multi-move-tree
---
SimpleName: encodedIndex [14509,14521]
to
SimpleName: readPos [3651,3658]
at -1
===
multi-move-tree
---
SimpleName: chunksSoFar [10333,10344]
to
SimpleName: readPos [3651,3658]
at -1
