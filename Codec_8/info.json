{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "data/changesInfo/",
  "timeoutSecond": 300,
  "proj": "Codec",
  "id": "8",
  "workingDir": "../bugs/Codec_8_buggy",
  "inducingCommit": "e2df85024e2ab99645a788b4b2836ba1cfdb87f5",
  "originalCommit": "a7a30fac492f9f72bc2970d145691a7357674839",
  "bug_name": "Codec_8",
  "derive": "defects4j",
  "original_fixing_commit": "2c13032a16e37b7bc9e0272d25fc185b5c82b42e",
  "buildFiles_changed": false,
  "inducing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/codec/binary/Base64.java",
        "src/java/org/apache/commons/codec/binary/Base64.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "decodeBase64",
            "encodeBase64",
            "isBase64"
          ],
          "num": 3
        },
        {
          "qualified_names": [
            "setInitialBuffer",
            "readResults",
            "Base64",
            "resizeBuf",
            "decode",
            "hasData",
            "isBase64",
            "encodeBase64",
            "encode",
            "avail",
            "Base64",
            "Base64",
            "decodeBase64"
          ],
          "num": 13
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "24",
            "41",
            "62",
            "63",
            "64",
            "65",
            "66",
            "67",
            "68",
            "69",
            "70",
            "71",
            "72",
            "73",
            "74",
            "75",
            "76",
            "77",
            "78",
            "79",
            "80",
            "81",
            "82",
            "83",
            "84",
            "85",
            "86",
            "87",
            "88",
            "89",
            "90",
            "91",
            "92",
            "93",
            "94",
            "95",
            "96",
            "102",
            "103",
            "104",
            "105",
            "106",
            "107",
            "108",
            "109",
            "111",
            "115",
            "116",
            "117",
            "119",
            "120",
            "121",
            "122",
            "123",
            "124",
            "126",
            "128",
            "129",
            "130",
            "131",
            "133",
            "134",
            "136",
            "137",
            "139",
            "140",
            "143",
            "144",
            "146",
            "147",
            "150",
            "151",
            "153",
            "154",
            "155",
            "157",
            "158",
            "159",
            "170",
            "171",
            "172",
            "173",
            "174",
            "175",
            "176",
            "267",
            "268",
            "269",
            "270",
            "271",
            "272",
            "273",
            "274",
            "275",
            "276",
            "277",
            "278",
            "279",
            "282",
            "283",
            "284",
            "286",
            "287",
            "288",
            "289",
            "292",
            "296",
            "297",
            "299",
            "300",
            "301",
            "302",
            "303",
            "304",
            "305",
            "306",
            "307",
            "308",
            "309",
            "310",
            "311",
            "312",
            "313",
            "314",
            "315",
            "316",
            "317",
            "318",
            "319",
            "320",
            "321",
            "322",
            "323",
            "324",
            "325",
            "326",
            "327",
            "328",
            "329",
            "330",
            "331",
            "332",
            "333",
            "334",
            "335",
            "336",
            "337",
            "338",
            "339",
            "340",
            "341",
            "342",
            "344",
            "345",
            "346",
            "347",
            "348",
            "349",
            "350",
            "351",
            "352",
            "353",
            "354",
            "355",
            "356",
            "357",
            "358",
            "359",
            "360",
            "361",
            "362",
            "363",
            "364",
            "365",
            "366",
            "367",
            "368",
            "369",
            "370",
            "371",
            "372",
            "373",
            "374",
            "375",
            "376",
            "377",
            "378",
            "379",
            "380",
            "381",
            "382",
            "387",
            "388",
            "389",
            "393",
            "394",
            "395",
            "396",
            "397",
            "398",
            "401",
            "402",
            "403",
            "405",
            "406",
            "407",
            "408",
            "409",
            "410",
            "411",
            "412",
            "413",
            "414",
            "415",
            "416",
            "417",
            "418",
            "419",
            "420",
            "421",
            "422",
            "423",
            "424",
            "425",
            "426",
            "427",
            "428",
            "429",
            "430",
            "431",
            "432",
            "433",
            "434",
            "435",
            "436",
            "437",
            "438",
            "439",
            "440",
            "441",
            "442",
            "443",
            "444",
            "445",
            "446",
            "447",
            "448",
            "449"
          ],
          "num": 248
        },
        {
          "qualified_names": [
            "25",
            "39",
            "66",
            "67",
            "68",
            "69",
            "70",
            "71",
            "73",
            "74",
            "76",
            "77",
            "78",
            "79",
            "80",
            "81",
            "82",
            "83",
            "84",
            "85",
            "86",
            "87",
            "88",
            "89",
            "90",
            "91",
            "92",
            "93",
            "94",
            "95",
            "96",
            "97",
            "98",
            "99",
            "100",
            "101",
            "102",
            "103",
            "104",
            "105",
            "106",
            "107",
            "108",
            "109",
            "110",
            "111",
            "112",
            "113",
            "114",
            "115",
            "116",
            "117",
            "118",
            "119",
            "120",
            "121",
            "122",
            "123",
            "124",
            "125",
            "126",
            "127",
            "128",
            "129",
            "130",
            "131",
            "132",
            "133",
            "134",
            "135",
            "136",
            "137",
            "138",
            "139",
            "140",
            "141",
            "142",
            "146",
            "147",
            "148",
            "149",
            "150",
            "151",
            "153",
            "154",
            "155",
            "157",
            "158",
            "159",
            "161",
            "162",
            "163",
            "164",
            "165",
            "166",
            "167",
            "168",
            "169",
            "170",
            "171",
            "172",
            "173",
            "174",
            "175",
            "176",
            "177",
            "178",
            "179",
            "180",
            "181",
            "182",
            "183",
            "185",
            "186",
            "187",
            "188",
            "189",
            "190",
            "191",
            "192",
            "193",
            "194",
            "196",
            "197",
            "198",
            "199",
            "200",
            "201",
            "202",
            "203",
            "204",
            "205",
            "206",
            "207",
            "208",
            "209",
            "210",
            "211",
            "212",
            "213",
            "214",
            "215",
            "216",
            "217",
            "218",
            "219",
            "220",
            "221",
            "222",
            "223",
            "224",
            "225",
            "226",
            "227",
            "228",
            "229",
            "230",
            "231",
            "232",
            "233",
            "234",
            "235",
            "236",
            "237",
            "238",
            "239",
            "240",
            "241",
            "242",
            "243",
            "244",
            "245",
            "246",
            "247",
            "248",
            "249",
            "250",
            "251",
            "252",
            "253",
            "254",
            "255",
            "256",
            "257",
            "259",
            "260",
            "261",
            "262",
            "263",
            "264",
            "265",
            "266",
            "267",
            "268",
            "269",
            "270",
            "271",
            "272",
            "273",
            "274",
            "275",
            "276",
            "277",
            "278",
            "279",
            "280",
            "281",
            "282",
            "283",
            "284",
            "285",
            "286",
            "287",
            "288",
            "289",
            "290",
            "291",
            "292",
            "293",
            "294",
            "295",
            "296",
            "297",
            "298",
            "299",
            "300",
            "301",
            "302",
            "303",
            "304",
            "305",
            "306",
            "307",
            "308",
            "309",
            "310",
            "311",
            "312",
            "313",
            "314",
            "315",
            "316",
            "317",
            "318",
            "319",
            "320",
            "321",
            "322",
            "323",
            "324",
            "325",
            "326",
            "327",
            "328",
            "329",
            "330",
            "333",
            "334",
            "335",
            "336",
            "337",
            "338",
            "339",
            "340",
            "341",
            "342",
            "343",
            "344",
            "345",
            "346",
            "348",
            "349",
            "350",
            "351",
            "352",
            "353",
            "354",
            "355",
            "356",
            "357",
            "358",
            "359",
            "360",
            "361",
            "362",
            "363",
            "364",
            "365",
            "366",
            "367",
            "368",
            "369",
            "370",
            "371",
            "372",
            "373",
            "374",
            "375",
            "376",
            "377",
            "378",
            "379",
            "380",
            "382",
            "384",
            "385",
            "386",
            "387",
            "388",
            "389",
            "390",
            "391",
            "392",
            "393",
            "394",
            "395",
            "396",
            "397",
            "398",
            "399",
            "400",
            "401",
            "402",
            "403",
            "404",
            "405",
            "406",
            "407",
            "409",
            "410",
            "412",
            "413",
            "414",
            "415",
            "416",
            "417",
            "418",
            "419",
            "420",
            "421",
            "422",
            "423",
            "424",
            "425",
            "426",
            "427",
            "428",
            "429",
            "430",
            "431",
            "432",
            "433",
            "434",
            "435",
            "436",
            "437",
            "438",
            "439",
            "440",
            "441",
            "442",
            "443",
            "444",
            "445",
            "446",
            "447",
            "458",
            "549",
            "550",
            "552",
            "554",
            "555",
            "556",
            "557",
            "558",
            "560",
            "563",
            "567",
            "568",
            "569",
            "570",
            "572",
            "573",
            "574",
            "576",
            "581",
            "582",
            "586",
            "587",
            "589",
            "591",
            "592",
            "593",
            "594",
            "595",
            "597",
            "598",
            "599",
            "600",
            "601"
          ],
          "num": 400
        }
      ],
      "diff": "diff --git a/src/java/org/apache/commons/codec/binary/Base64.java b/src/java/org/apache/commons/codec/binary/Base64.java\nindex 6aa9f4c..9437653 100644\n--- a/src/java/org/apache/commons/codec/binary/Base64.java\n+++ b/src/java/org/apache/commons/codec/binary/Base64.java\n@@ -22,6 +22,7 @@\n import org.apache.commons.codec.DecoderException;\n import org.apache.commons.codec.EncoderException;\n \n+import java.io.UnsupportedEncodingException;\n import java.math.BigInteger;\n \n /**\n@@ -38,7 +39,6 @@\n  * @version $Id$\n  */\n public class Base64 implements BinaryEncoder, BinaryDecoder {\n-\n     /**\n      * Chunk size per RFC 2045 section 6.8.\n      * \n@@ -59,104 +59,392 @@\n     static final byte[] CHUNK_SEPARATOR \u003d \"\\r\\n\".getBytes();\n \n     /**\n-     * The base length.\n-     */\n-    private static final int BASELENGTH \u003d 255;\n-\n-    /**\n-     * Lookup length.\n-     */\n-    private static final int LOOKUPLENGTH \u003d 64;\n-\n-    /**\n-     * Used to calculate the number of bits in a byte.\n-     */\n-    private static final int EIGHTBIT \u003d 8;\n-\n-    /**\n-     * Used when encoding something which has fewer than 24 bits.\n-     */\n-    private static final int SIXTEENBIT \u003d 16;\n-\n-    /**\n-     * Used to determine how many bits data contains.\n-     */\n-    private static final int TWENTYFOURBITGROUP \u003d 24;\n-\n-    /**\n-     * Used to get the number of Quadruples.\n-     */\n-    private static final int FOURBYTE \u003d 4;\n-\n-    /**\n-     * Used to test the sign of a byte.\n-     */\n-    private static final int SIGN \u003d -128;\n-\n-    /**\n      * Byte used to pad output.\n      */\n     private static final byte PAD \u003d (byte) \u0027\u003d\u0027;\n \n+\n+    // The static final fields above are used for the original static byte[] methods on Base64.\n+    // The private member fields below are used with the new streaming approach, which requires\n+    // some state be preserved between calls of encode() and decode().\n+\n+\n     /**\n-     * Contains the Base64 values \u003ccode\u003e0\u003c/code\u003e through \u003ccode\u003e63\u003c/code\u003e accessed by using character encodings as\n-     * indices.\n-     * \u003cp\u003e\n-     * For example, \u003ccode\u003ebase64Alphabet[\u0027+\u0027]\u003c/code\u003e returns \u003ccode\u003e62\u003c/code\u003e.\n-     * \u003c/p\u003e\n-     * \u003cp\u003e\n-     * The value of undefined encodings is \u003ccode\u003e-1\u003c/code\u003e.\n-     * \u003c/p\u003e\n+     * Line length for encoding.  Not used when decoding.  Any value of zero or less implies\n+     * so chunking of the base64 encoded data.\n      */\n-    private static final byte[] base64Alphabet \u003d new byte[BASELENGTH];\n+    private final int lineLength;\n+\n+    /**\n+     * Line separator for encoding.  Not used when decoding.  Only used if lineLength \u003e\u003d 1.\n+     */\n+    private final byte[] lineSeparator;\n+\n+    /**\n+     * Convenience variable to help us determine when our buffer is going to run out of\n+     * room and needs resizing.  \u003ccode\u003edecodeSize \u003d 3 + lineSeparator.length;\u003c/code\u003e\n+     */\n+    private final int decodeSize;\n+\n+    /**\n+     * Convenience variable to help us determine when our buffer is going to run out of\n+     * room and needs resizing.  \u003ccode\u003eencodeSize \u003d 4 + lineSeparator.length;\u003c/code\u003e\n+     */\n+    private final int encodeSize;\n+\n+    /**\n+     * Buffer for streaming. \n+     */\n+    private byte[] buf;\n+\n+    /**\n+     * Position where next character should be written in the buffer.\n+     */\n+    private int pos;\n+\n+    /**\n+     * Position where next character should be read from the buffer.\n+     */\n+    private int readPos;\n+\n+    /**\n+     * Variable tracks how many characters have been written to the current line.\n+     * Only used when encoding.  We use it to make sure each encoded line never\n+     * goes beyond lineLength (if lineLength \u003e\u003d 0).\n+     */\n+    private int currentLinePos;\n+\n+    /**\n+     * Writes to the buffer only occur after every 3 reads when encoding, an\n+     * every 4 reads when decoding.  This variable helps track that.\n+     */\n+    private int modulus;\n+\n+    /**\n+     * Boolean flag to indicate the EOF has been reached.  Once EOF has been\n+     * reached, this Base64 object becomes useless, and must be thrown away.\n+     */\n+    private boolean eof;\n+\n+    /**\n+     * Place holder for the 3 bytes we\u0027re dealing with for our base64 logic.\n+     * Bitwise operations store and extract the base64 encoding or decoding from\n+     * this variable.\n+     */\n+    private int x;\n+\n+    /**\n+     * Default constructor:  lineLength is 76, and the lineSeparator is CRLF\n+     * when encoding, and all forms can be decoded.\n+     */\n+    Base64() {\n+        this(CHUNK_SIZE, CHUNK_SEPARATOR);\n+    }\n \n     /**\n      * \u003cp\u003e\n-     * Contains the Base64 encodings \u003ccode\u003eA\u003c/code\u003e through \u003ccode\u003eZ\u003c/code\u003e, followed by \u003ccode\u003ea\u003c/code\u003e through\n-     * \u003ccode\u003ez\u003c/code\u003e, followed by \u003ccode\u003e0\u003c/code\u003e through \u003ccode\u003e9\u003c/code\u003e, followed by \u003ccode\u003e+\u003c/code\u003e, and\n-     * \u003ccode\u003e/\u003c/code\u003e.\n+     * Consumer can use this constructor to choose a different lineLength\n+     * when encoding (lineSeparator is still CRLF).  All forms of data can\n+     * be decoded.\n+     * \u003c/p\u003e\u003cp\u003e\n+     * Note:  lineLengths that aren\u0027t multiples of 4 will still essentially\n+     * end up being multiples of 4 in the encoded data.\n      * \u003c/p\u003e\n-     * \u003cp\u003e\n-     * This array is accessed by using character values as indices.\n-     * \u003c/p\u003e\n-     * \u003cp\u003e\n-     * For example, \u003ccode\u003elookUpBase64Alphabet[62] \u003c/code\u003e returns \u003ccode\u003e\u0027+\u0027\u003c/code\u003e.\n-     * \u003c/p\u003e\n+     *\n+     * @param lineLength each line of encoded data will be at most this long\n+     * (rounded up to nearest multiple of 4).  Ignored when decoding.\n      */\n-    private static final byte[] lookUpBase64Alphabet \u003d new byte[LOOKUPLENGTH];\n+    Base64(int lineLength) {\n+        this(lineLength, CHUNK_SEPARATOR);\n+    }\n \n-    // Populating the lookup and character arrays\n-    static {\n-        for (int i \u003d 0; i \u003c BASELENGTH; i++) {\n-            base64Alphabet[i] \u003d (byte) -1;\n+    /**\n+     * \u003cp\u003e\n+     * Consumer can use this constructor to choose a different lineLength\n+     * and lineSeparator when encoding.  All forms of data can\n+     * be decoded.\n+     * \u003c/p\u003e\u003cp\u003e\n+     * Note:  lineLengths that aren\u0027t multiples of 4 will still essentially\n+     * end up being multiples of 4 in the encoded data.\n+     * \u003c/p\u003e\n+     * @param lineLength    Each line of encoded data will be at most this long\n+     *                      (rounded up to nearest multiple of 4).  Ignored when decoding.\n+     * @param lineSeparator Each line of encoded data will end with this\n+     *                      sequence of bytes.\n+     * @throws IllegalArgumentException The provided lineSeparator included\n+     *                                  some base64 characters.  That\u0027s not going to work!\n+     */\n+    Base64(int lineLength, byte[] lineSeparator) {\n+        this.lineLength \u003d lineLength;\n+        this.lineSeparator \u003d lineSeparator;\n+        if (lineLength \u003e 0) {\n+            this.encodeSize \u003d (byte) (4 + lineSeparator.length);\n+        } else {\n+            this.encodeSize \u003d 4;\n         }\n-        for (int i \u003d \u0027Z\u0027; i \u003e\u003d \u0027A\u0027; i--) {\n-            base64Alphabet[i] \u003d (byte) (i - \u0027A\u0027);\n+        this.decodeSize \u003d encodeSize - 1;\n+        byte[] separator \u003d discardWhitespace(lineSeparator);\n+        if (separator.length \u003e 0 \u0026\u0026 isArrayByteBase64(separator)) {\n+            String sep;\n+            try {\n+                sep \u003d new String(lineSeparator, \"UTF-8\");\n+            } catch (UnsupportedEncodingException uee) {\n+                sep \u003d new String(lineSeparator);\n+            }\n+            throw new IllegalArgumentException(\"lineSeperator must not contain base64 characters: [\" + sep + \"]\");\n         }\n-        for (int i \u003d \u0027z\u0027; i \u003e\u003d \u0027a\u0027; i--) {\n-            base64Alphabet[i] \u003d (byte) (i - \u0027a\u0027 + 26);\n+    }\n+\n+    /**\n+     * This array is a lookup table that translates 6-bit positive integer\n+     * index values into their \"Base64 Alphabet\" equivalents as specified\n+     * in Table 1 of RFC 2045.\n+     *\n+     * Thanks to \"commons\" project in ws.apache.org for this code. \n+     * http://svn.apache.org/repos/asf/webservices/commons/trunk/modules/util/\n+     */\n+    private static final byte[] intToBase64 \u003d {\n+            \u0027A\u0027, \u0027B\u0027, \u0027C\u0027, \u0027D\u0027, \u0027E\u0027, \u0027F\u0027, \u0027G\u0027, \u0027H\u0027, \u0027I\u0027, \u0027J\u0027, \u0027K\u0027, \u0027L\u0027, \u0027M\u0027,\n+            \u0027N\u0027, \u0027O\u0027, \u0027P\u0027, \u0027Q\u0027, \u0027R\u0027, \u0027S\u0027, \u0027T\u0027, \u0027U\u0027, \u0027V\u0027, \u0027W\u0027, \u0027X\u0027, \u0027Y\u0027, \u0027Z\u0027,\n+            \u0027a\u0027, \u0027b\u0027, \u0027c\u0027, \u0027d\u0027, \u0027e\u0027, \u0027f\u0027, \u0027g\u0027, \u0027h\u0027, \u0027i\u0027, \u0027j\u0027, \u0027k\u0027, \u0027l\u0027, \u0027m\u0027,\n+            \u0027n\u0027, \u0027o\u0027, \u0027p\u0027, \u0027q\u0027, \u0027r\u0027, \u0027s\u0027, \u0027t\u0027, \u0027u\u0027, \u0027v\u0027, \u0027w\u0027, \u0027x\u0027, \u0027y\u0027, \u0027z\u0027,\n+            \u00270\u0027, \u00271\u0027, \u00272\u0027, \u00273\u0027, \u00274\u0027, \u00275\u0027, \u00276\u0027, \u00277\u0027, \u00278\u0027, \u00279\u0027, \u0027+\u0027, \u0027/\u0027\n+    };\n+\n+    /**\n+     * This array is a lookup table that translates unicode characters\n+     * drawn from the \"Base64 Alphabet\" (as specified in Table 1 of RFC 2045)\n+     * into their 6-bit positive integer equivalents.  Characters that\n+     * are not in the Base64 alphabet but fall within the bounds of the\n+     * array are translated to -1.\n+     *\n+     * Thanks to \"commons\" project in ws.apache.org for this code.\n+     * http://svn.apache.org/repos/asf/webservices/commons/trunk/modules/util/ \n+     */\n+    private static final byte[] base64ToInt \u003d {\n+            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+            -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, -1, -1, 63, 52, 53, 54,\n+            55, 56, 57, 58, 59, 60, 61, -1, -1, -1, -1, -1, -1, -1, 0, 1, 2, 3, 4,\n+            5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,\n+            24, 25, -1, -1, -1, -1, -1, -1, 26, 27, 28, 29, 30, 31, 32, 33, 34,\n+            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51\n+    };\n+\n+    /**\n+     * Returns true if this Base64 object has buffered data for reading.\n+     *\n+     * @return true if there is Base64 object still available for reading.\n+     */\n+    boolean hasData() { return buf !\u003d null; }\n+\n+    /**\n+     * Returns the amount of buffered data available for reading.\n+     *\n+     * @return The amount of buffered data available for reading.\n+     */\n+    int avail() { return buf !\u003d null ? pos - readPos : 0; }\n+\n+    /** Doubles our buffer. */\n+    private void resizeBuf() {\n+        if (buf \u003d\u003d null) {\n+            buf \u003d new byte[8192];\n+            pos \u003d 0;\n+            readPos \u003d 0;\n+        } else {\n+            byte[] b \u003d new byte[buf.length * 2];\n+            System.arraycopy(buf, 0, b, 0, buf.length);\n+            buf \u003d b;\n         }\n-        for (int i \u003d \u00279\u0027; i \u003e\u003d \u00270\u0027; i--) {\n-            base64Alphabet[i] \u003d (byte) (i - \u00270\u0027 + 52);\n+    }\n+\n+    /**\n+     * Extracts buffered data into the provided byte[] array, starting\n+     * at position bPos, up to a maximum of bAvail bytes.  Returns how\n+     * many bytes were actually extracted.\n+     *\n+     * @param b      byte[] array to extract the buffered data into.\n+     * @param bPos   position in byte[] array to start extraction at.\n+     * @param bAvail amount of bytes we\u0027re allowed to extract.  We may extract\n+     *               fewer (if fewer are available).\n+     * @return The number of bytes successfully extracted into the provided\n+     *         byte[] array.\n+     */\n+    int readResults(byte[] b, int bPos, int bAvail) {\n+        if (buf !\u003d null) {\n+            int len \u003d Math.min(avail(), bAvail);\n+            if (buf !\u003d b) {\n+                System.arraycopy(buf, readPos, b, bPos, len);\n+                readPos +\u003d len;\n+                if (readPos \u003e\u003d pos) {\n+                    buf \u003d null;\n+                }\n+            } else {\n+                // Re-using the original consumer\u0027s output array is only\n+                // allowed for one round.\n+                buf \u003d null;\n+            }\n+            return len;\n+        } else {\n+            return eof ? -1 : 0;\n+        }\n+    }\n+\n+    /**\n+     * Small optimization where we try to buffer directly to the consumer\u0027s\n+     * output array for one round (if consumer calls this method first!) instead\n+     * of starting our own buffer.\n+     *\n+     * @param out byte[] array to buffer directly to.\n+     * @param outPos Position to start buffering into.\n+     * @param outAvail Amount of bytes available for direct buffering.\n+     */\n+    void setInitialBuffer(byte[] out, int outPos, int outAvail) {\n+        // We can re-use consumer\u0027s original output array under\n+        // special circumstances, saving on some System.arraycopy().\n+        if (out !\u003d null \u0026\u0026 out.length \u003d\u003d outAvail) {\n+            buf \u003d out;\n+            pos \u003d outPos;\n+            readPos \u003d outPos;\n+        }\n+    }\n+\n+    /**\n+     * \u003cp\u003e\n+     * Encodes all of the provided data, starting at inPos, for inAvail bytes.\n+     * Must be called at least twice:  once with the data to encode, and once\n+     * with inAvail set to \"-1\" to alert encoder that EOF has been reached,\n+     * so flush last remaining bytes (if not multiple of 3).\n+     * \u003c/p\u003e\u003cp\u003e\n+     * Thanks to \"commons\" project in ws.apache.org for the bitwise operations,\n+     * and general approach.\n+     * http://svn.apache.org/repos/asf/webservices/commons/trunk/modules/util/\n+     * \u003c/p\u003e\n+     *\n+     * @param in byte[] array of binary data to base64 encode.\n+     * @param inPos Position to start reading data from.\n+     * @param inAvail Amount of bytes available from input for encoding.\n+     */\n+    void encode(byte[] in, int inPos, int inAvail) {\n+        if (eof) {\n+            return;\n         }\n \n-        base64Alphabet[\u0027+\u0027] \u003d 62;\n-        base64Alphabet[\u0027/\u0027] \u003d 63;\n+        // inAvail \u003c 0 is how we\u0027re informed of EOF in the underlying data we\u0027re\n+        // encoding.\n+        if (inAvail \u003c 0) {\n+            eof \u003d true;\n+            if (buf \u003d\u003d null || buf.length - pos \u003c encodeSize) {\n+                resizeBuf();\n+            }\n+            switch (modulus) {\n+                case 1:\n+                    buf[pos++] \u003d intToBase64[(x \u003e\u003e 2) \u0026 0x3f];\n+                    buf[pos++] \u003d intToBase64[(x \u003c\u003c 4) \u0026 0x3f];\n+                    buf[pos++] \u003d PAD;\n+                    buf[pos++] \u003d PAD;\n+                    break;\n \n-        for (int i \u003d 0; i \u003c\u003d 25; i++) {\n-            lookUpBase64Alphabet[i] \u003d (byte) (\u0027A\u0027 + i);\n+                case 2:\n+                    buf[pos++] \u003d intToBase64[(x \u003e\u003e 10) \u0026 0x3f];\n+                    buf[pos++] \u003d intToBase64[(x \u003e\u003e 4) \u0026 0x3f];\n+                    buf[pos++] \u003d intToBase64[(x \u003c\u003c 2) \u0026 0x3f];\n+                    buf[pos++] \u003d PAD;\n+                    break;\n+            }\n+            if (lineLength \u003e 0) {\n+                System.arraycopy(lineSeparator, 0, buf, pos, lineSeparator.length);\n+                pos +\u003d lineSeparator.length;\n+            }\n+        } else {\n+            for (int i \u003d 0; i \u003c inAvail; i++) {\n+                if (buf \u003d\u003d null || buf.length - pos \u003c encodeSize) {\n+                    resizeBuf();\n+                }\n+                modulus \u003d (++modulus) % 3;\n+                int b \u003d in[inPos++];\n+                if (b \u003c 0) { b +\u003d 256; }\n+                x \u003d (x \u003c\u003c 8) + b;\n+                if (0 \u003d\u003d modulus) {\n+                    buf[pos++] \u003d intToBase64[(x \u003e\u003e 18) \u0026 0x3f];\n+                    buf[pos++] \u003d intToBase64[(x \u003e\u003e 12) \u0026 0x3f];\n+                    buf[pos++] \u003d intToBase64[(x \u003e\u003e 6) \u0026 0x3f];\n+                    buf[pos++] \u003d intToBase64[x \u0026 0x3f];\n+                    currentLinePos +\u003d 4;\n+                    if (lineLength \u003e 0 \u0026\u0026 lineLength \u003c\u003d currentLinePos) {\n+                        System.arraycopy(lineSeparator, 0, buf, pos, lineSeparator.length);\n+                        pos +\u003d lineSeparator.length;\n+                        currentLinePos \u003d 0;\n+                    }\n+                }\n+            }\n         }\n+    }\n \n-        for (int i \u003d 26, j \u003d 0; i \u003c\u003d 51; i++, j++) {\n-            lookUpBase64Alphabet[i] \u003d (byte) (\u0027a\u0027 + j);\n+    /**\n+     * \u003cp\u003e\n+     * Decodes all of the provided data, starting at inPos, for inAvail bytes.\n+     * Should be called at least twice:  once with the data to decode, and once\n+     * with inAvail set to \"-1\" to alert decoder that EOF has been reached.\n+     * The \"-1\" call is not necessary when decoding, but it doesn\u0027t hurt, either.\n+     * \u003c/p\u003e\u003cp\u003e\n+     * Ignores all non-base64 characters.  This is how chunked (e.g. 76 character)\n+     * data is handled, since CR and LF are silently ignored, but has implications\n+     * for other bytes, too.  This method subscribes to the garbage-in, garbage-out\n+     * philosophy:  it will not check the provided data for validity.\n+     * \u003c/p\u003e\u003cp\u003e\n+     * Thanks to \"commons\" project in ws.apache.org for the bitwise operations,\n+     * and general approach.\n+     * http://svn.apache.org/repos/asf/webservices/commons/trunk/modules/util/\n+     * \u003c/p\u003e\n+\n+     * @param in byte[] array of ascii data to base64 decode.\n+     * @param inPos Position to start reading data from.\n+     * @param inAvail Amount of bytes available from input for encoding.\n+     */    \n+    void decode(byte[] in, int inPos, int inAvail) {\n+        if (eof) {\n+            return;\n         }\n-\n-        for (int i \u003d 52, j \u003d 0; i \u003c\u003d 61; i++, j++) {\n-            lookUpBase64Alphabet[i] \u003d (byte) (\u00270\u0027 + j);\n+        if (inAvail \u003c 0) {\n+            eof \u003d true;\n         }\n-\n-        lookUpBase64Alphabet[62] \u003d (byte) \u0027+\u0027;\n-        lookUpBase64Alphabet[63] \u003d (byte) \u0027/\u0027;\n+        for (int i \u003d 0; i \u003c inAvail; i++) {\n+            if (buf \u003d\u003d null || buf.length - pos \u003c decodeSize) {\n+                resizeBuf();\n+            }\n+            byte b \u003d in[inPos++];\n+            if (b \u003d\u003d PAD) {\n+                modulus \u003d (++modulus) % 4;\n+                x \u003d x \u003c\u003c 6;\n+                switch (modulus) {\n+                    case 3:\n+                        x \u003d x \u003c\u003c 6;\n+                    case 0:\n+                        buf[pos++] \u003d (byte) ((x \u003e\u003e 16) \u0026 0xff);\n+                        if (modulus \u003d\u003d 0) {\n+                            buf[pos++] \u003d (byte) ((x \u003e\u003e 8) \u0026 0xff);\n+                        }\n+                    default:\n+                        // WE\u0027RE DONE!!!!\n+                        eof \u003d true;\n+                        return;\n+                }\n+            } else {\n+                if (b \u003e\u003d 0 \u0026\u0026 b \u003c base64ToInt.length) {\n+                    int result \u003d base64ToInt[b];\n+                    if (result \u003e\u003d 0) {\n+                        modulus \u003d (byte) ((++modulus) % 4);\n+                        x \u003d (x \u003c\u003c 6) + result;\n+                        if (modulus \u003d\u003d 0) {\n+                            buf[pos++] \u003d (byte) ((x \u003e\u003e 16) \u0026 0xff);\n+                            buf[pos++] \u003d (byte) ((x \u003e\u003e 8) \u0026 0xff);\n+                            buf[pos++] \u003d (byte) (x \u0026 0xff);\n+                        }\n+                    }\n+                }\n+            }\n+        }\n     }\n \n     /**\n@@ -167,13 +455,7 @@\n      * @return \u003ccode\u003etrue\u003c/code\u003e if the value is defined in the the base 64 alphabet, \u003ccode\u003efalse\u003c/code\u003e otherwise.\n      */\n     private static boolean isBase64(byte octect) {\n-        if (octect \u003d\u003d PAD) {\n-            return true;\n-        } else if (octect \u003c 0 || base64Alphabet[octect] \u003d\u003d -1) {\n-            return false;\n-        } else {\n-            return true;\n-        }\n+        return octect \u003d\u003d PAD || (octect \u003e\u003d 0 \u0026\u0026 octect \u003c base64ToInt.length \u0026\u0026 base64ToInt[octect] !\u003d -1);\n     }\n \n     /**\n@@ -264,189 +546,59 @@\n      *             Thrown when the input array needs an output array bigger than {@link Integer#MAX_VALUE}\n      */\n     public static byte[] encodeBase64(byte[] binaryData, boolean isChunked) {\n-        long binaryDataLength \u003d binaryData.length;\n-        long lengthDataBits \u003d binaryDataLength * EIGHTBIT;\n-        long fewerThan24bits \u003d lengthDataBits % TWENTYFOURBITGROUP;\n-        long tripletCount \u003d lengthDataBits / TWENTYFOURBITGROUP;\n-        long encodedDataLengthLong \u003d 0;\n-        int chunckCount \u003d 0;\n-\n-        if (fewerThan24bits !\u003d 0) {\n-            // data not divisible by 24 bit\n-            encodedDataLengthLong \u003d (tripletCount + 1) * 4;\n-        } else {\n-            // 16 or 8 bit\n-            encodedDataLengthLong \u003d tripletCount * 4;\n+        if (binaryData \u003d\u003d null || binaryData.length \u003d\u003d 0) {\n+            return binaryData;\n         }\n+        Base64 b64 \u003d isChunked ? new Base64() : new Base64(0);\n \n-        // If the output is to be \"chunked\" into 76 character sections,\n-        // for compliance with RFC 2045 MIME, then it is important to\n-        // allow for extra length to account for the separator(s)\n+        long len \u003d (binaryData.length * 4) / 3;\n+        long mod \u003d len % 4;\n+        if (mod !\u003d 0) {\n+            len +\u003d 4 - mod;\n+        }\n         if (isChunked) {\n-\n-            chunckCount \u003d (CHUNK_SEPARATOR.length \u003d\u003d 0 ? 0 : (int) Math\n-                    .ceil((float) encodedDataLengthLong / CHUNK_SIZE));\n-            encodedDataLengthLong +\u003d chunckCount * CHUNK_SEPARATOR.length;\n+            len +\u003d (1 + (len / CHUNK_SIZE)) * CHUNK_SEPARATOR.length;\n         }\n \n-        if (encodedDataLengthLong \u003e Integer.MAX_VALUE) {\n+        if (len \u003e Integer.MAX_VALUE) {\n             throw new IllegalArgumentException(\n                     \"Input array too big, output array would be bigger than Integer.MAX_VALUE\u003d\" + Integer.MAX_VALUE);\n         }\n-        int encodedDataLength \u003d (int) encodedDataLengthLong;\n-        byte encodedData[] \u003d new byte[encodedDataLength];\n+        byte[] buf \u003d new byte[(int) len];\n+        b64.setInitialBuffer(buf, 0, buf.length);\n+        b64.encode(binaryData, 0, binaryData.length);\n+        b64.encode(binaryData, 0, -1); // Notify encoder of EOF.\n \n-        byte k \u003d 0, l \u003d 0, b1 \u003d 0, b2 \u003d 0, b3 \u003d 0;\n-\n-        int encodedIndex \u003d 0;\n-        int dataIndex \u003d 0;\n-        int i \u003d 0;\n-        int nextSeparatorIndex \u003d CHUNK_SIZE;\n-        int chunksSoFar \u003d 0;\n-\n-        // log.debug(\"number of triplets \u003d \" + numberTriplets);\n-        for (i \u003d 0; i \u003c tripletCount; i++) {\n-            dataIndex \u003d i * 3;\n-            b1 \u003d binaryData[dataIndex];\n-            b2 \u003d binaryData[dataIndex + 1];\n-            b3 \u003d binaryData[dataIndex + 2];\n-\n-            // log.debug(\"b1\u003d \" + b1 +\", b2\u003d \" + b2 + \", b3\u003d \" + b3);\n-\n-            l \u003d (byte) (b2 \u0026 0x0f);\n-            k \u003d (byte) (b1 \u0026 0x03);\n-\n-            byte val1 \u003d ((b1 \u0026 SIGN) \u003d\u003d 0) ? (byte) (b1 \u003e\u003e 2) : (byte) ((b1) \u003e\u003e 2 ^ 0xc0);\n-            byte val2 \u003d ((b2 \u0026 SIGN) \u003d\u003d 0) ? (byte) (b2 \u003e\u003e 4) : (byte) ((b2) \u003e\u003e 4 ^ 0xf0);\n-            byte val3 \u003d ((b3 \u0026 SIGN) \u003d\u003d 0) ? (byte) (b3 \u003e\u003e 6) : (byte) ((b3) \u003e\u003e 6 ^ 0xfc);\n-\n-            encodedData[encodedIndex] \u003d lookUpBase64Alphabet[val1];\n-            // log.debug( \"val2 \u003d \" + val2 );\n-            // log.debug( \"k4 \u003d \" + (k\u003c\u003c4) );\n-            // log.debug( \"vak \u003d \" + (val2 | (k\u003c\u003c4)) );\n-            encodedData[encodedIndex + 1] \u003d lookUpBase64Alphabet[val2 | (k \u003c\u003c 4)];\n-            encodedData[encodedIndex + 2] \u003d lookUpBase64Alphabet[(l \u003c\u003c 2) | val3];\n-            encodedData[encodedIndex + 3] \u003d lookUpBase64Alphabet[b3 \u0026 0x3f];\n-\n-            encodedIndex +\u003d 4;\n-\n-            // If we are chunking, let\u0027s put a chunk separator down.\n-            if (isChunked) {\n-                // this assumes that CHUNK_SIZE % 4 \u003d\u003d 0\n-                if (encodedIndex \u003d\u003d nextSeparatorIndex) {\n-                    System.arraycopy(CHUNK_SEPARATOR, 0, encodedData, encodedIndex, CHUNK_SEPARATOR.length);\n-                    chunksSoFar++;\n-                    nextSeparatorIndex \u003d (CHUNK_SIZE * (chunksSoFar + 1)) + (chunksSoFar * CHUNK_SEPARATOR.length);\n-                    encodedIndex +\u003d CHUNK_SEPARATOR.length;\n-                }\n-            }\n+        // Encoder might have resized, even though it was unnecessary.\n+        if (b64.buf !\u003d buf) {\n+            b64.readResults(buf, 0, buf.length);\n         }\n-\n-        // form integral number of 6-bit groups\n-        dataIndex \u003d i * 3;\n-\n-        if (fewerThan24bits \u003d\u003d EIGHTBIT) {\n-            b1 \u003d binaryData[dataIndex];\n-            k \u003d (byte) (b1 \u0026 0x03);\n-            // log.debug(\"b1\u003d\" + b1);\n-            // log.debug(\"b1\u003c\u003c2 \u003d \" + (b1\u003e\u003e2) );\n-            byte val1 \u003d ((b1 \u0026 SIGN) \u003d\u003d 0) ? (byte) (b1 \u003e\u003e 2) : (byte) ((b1) \u003e\u003e 2 ^ 0xc0);\n-            encodedData[encodedIndex] \u003d lookUpBase64Alphabet[val1];\n-            encodedData[encodedIndex + 1] \u003d lookUpBase64Alphabet[k \u003c\u003c 4];\n-            encodedData[encodedIndex + 2] \u003d PAD;\n-            encodedData[encodedIndex + 3] \u003d PAD;\n-        } else if (fewerThan24bits \u003d\u003d SIXTEENBIT) {\n-\n-            b1 \u003d binaryData[dataIndex];\n-            b2 \u003d binaryData[dataIndex + 1];\n-            l \u003d (byte) (b2 \u0026 0x0f);\n-            k \u003d (byte) (b1 \u0026 0x03);\n-\n-            byte val1 \u003d ((b1 \u0026 SIGN) \u003d\u003d 0) ? (byte) (b1 \u003e\u003e 2) : (byte) ((b1) \u003e\u003e 2 ^ 0xc0);\n-            byte val2 \u003d ((b2 \u0026 SIGN) \u003d\u003d 0) ? (byte) (b2 \u003e\u003e 4) : (byte) ((b2) \u003e\u003e 4 ^ 0xf0);\n-\n-            encodedData[encodedIndex] \u003d lookUpBase64Alphabet[val1];\n-            encodedData[encodedIndex + 1] \u003d lookUpBase64Alphabet[val2 | (k \u003c\u003c 4)];\n-            encodedData[encodedIndex + 2] \u003d lookUpBase64Alphabet[l \u003c\u003c 2];\n-            encodedData[encodedIndex + 3] \u003d PAD;\n-        }\n-\n-        if (isChunked) {\n-            // we also add a separator to the end of the final chunk.\n-            if (chunksSoFar \u003c chunckCount) {\n-                System.arraycopy(CHUNK_SEPARATOR, 0, encodedData, encodedDataLength - CHUNK_SEPARATOR.length,\n-                        CHUNK_SEPARATOR.length);\n-            }\n-        }\n-\n-        return encodedData;\n+        return buf;\n     }\n \n     /**\n      * Decodes Base64 data into octects\n-     * \n-     * @param base64Data\n-     *            Byte array containing Base64 data\n+     *\n+     * @param base64Data Byte array containing Base64 data\n      * @return Array containing decoded data.\n      */\n     public static byte[] decodeBase64(byte[] base64Data) {\n-        // RFC 2045 requires that we discard ALL non-Base64 characters\n-        base64Data \u003d discardNonBase64(base64Data);\n-\n-        // handle the edge case, so we don\u0027t have to worry about it later\n-        if (base64Data.length \u003d\u003d 0) {\n-            return new byte[0];\n+        if (base64Data \u003d\u003d null || base64Data.length \u003d\u003d 0) {\n+            return base64Data;\n         }\n+        Base64 b64 \u003d new Base64();\n \n-        int numberQuadruple \u003d base64Data.length / FOURBYTE;\n-        byte decodedData[] \u003d null;\n-        byte b1 \u003d 0, b2 \u003d 0, b3 \u003d 0, b4 \u003d 0, marker0 \u003d 0, marker1 \u003d 0;\n+        long len \u003d (base64Data.length * 3) / 4;\n+        byte[] buf \u003d new byte[(int) len];\n+        b64.setInitialBuffer(buf, 0, buf.length);\n+        b64.decode(base64Data, 0, base64Data.length);\n+        b64.decode(base64Data, 0, -1); // Notify decoder of EOF.\n \n-        // Throw away anything not in base64Data\n-\n-        int encodedIndex \u003d 0;\n-        int dataIndex \u003d 0;\n-        {\n-            // this sizes the output array properly - rlw\n-            int lastData \u003d base64Data.length;\n-            // ignore the \u0027\u003d\u0027 padding\n-            while (base64Data[lastData - 1] \u003d\u003d PAD) {\n-                if (--lastData \u003d\u003d 0) {\n-                    return new byte[0];\n-                }\n-            }\n-            decodedData \u003d new byte[lastData - numberQuadruple];\n-        }\n-\n-        for (int i \u003d 0; i \u003c numberQuadruple; i++) {\n-            dataIndex \u003d i * 4;\n-            marker0 \u003d base64Data[dataIndex + 2];\n-            marker1 \u003d base64Data[dataIndex + 3];\n-\n-            b1 \u003d base64Alphabet[base64Data[dataIndex]];\n-            b2 \u003d base64Alphabet[base64Data[dataIndex + 1]];\n-\n-            if (marker0 !\u003d PAD \u0026\u0026 marker1 !\u003d PAD) {\n-                // No PAD e.g 3cQl\n-                b3 \u003d base64Alphabet[marker0];\n-                b4 \u003d base64Alphabet[marker1];\n-\n-                decodedData[encodedIndex] \u003d (byte) (b1 \u003c\u003c 2 | b2 \u003e\u003e 4);\n-                decodedData[encodedIndex + 1] \u003d (byte) (((b2 \u0026 0xf) \u003c\u003c 4) | ((b3 \u003e\u003e 2) \u0026 0xf));\n-                decodedData[encodedIndex + 2] \u003d (byte) (b3 \u003c\u003c 6 | b4);\n-            } else if (marker0 \u003d\u003d PAD) {\n-                // Two PAD e.g. 3c[Pad][Pad]\n-                decodedData[encodedIndex] \u003d (byte) (b1 \u003c\u003c 2 | b2 \u003e\u003e 4);\n-            } else if (marker1 \u003d\u003d PAD) {\n-                // One PAD e.g. 3cQ[Pad]\n-                b3 \u003d base64Alphabet[marker0];\n-\n-                decodedData[encodedIndex] \u003d (byte) (b1 \u003c\u003c 2 | b2 \u003e\u003e 4);\n-                decodedData[encodedIndex + 1] \u003d (byte) (((b2 \u0026 0xf) \u003c\u003c 4) | ((b3 \u003e\u003e 2) \u0026 0xf));\n-            }\n-            encodedIndex +\u003d 3;\n-        }\n-        return decodedData;\n+        // We have no idea what the line-length was, so we\n+        // cannot know how much of our array wasn\u0027t used.\n+        byte[] result \u003d new byte[b64.pos];\n+        b64.readResults(result, 0, result.length);\n+        return result;\n     }\n \n     /**\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "ImportDeclaration [1043,1087]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldDeclaration [2587,2772]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldDeclaration [2778,2921]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldDeclaration [2927,3145]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldDeclaration [3151,3369]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldDeclaration [3375,3440]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "FieldDeclaration [3446,3548]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "FieldDeclaration [3554,3659]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldDeclaration [3665,3922]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldDeclaration [3928,4110]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldDeclaration [4116,4306]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldDeclaration [4312,4522]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [4528,4732]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [4738,5319]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [5325,6930]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldDeclaration [6936,7715]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldDeclaration [7721,8833]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [8839,9051]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "MethodDeclaration [9057,9267]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [9273,9596]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "MethodDeclaration [9602,10789]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "MethodDeclaration [10795,11532]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [11538,14383]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [14389,17014]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [3446,3527]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: private [3532,3539]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [3554,3634]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: private [3639,3646]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [9057,9207]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "PrimitiveType: int [9212,9215]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: avail [9216,9221]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Block [9224,9267]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [9602,10181]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "PrimitiveType: int [10186,10189]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: readResults [10190,10201]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SingleVariableDeclaration [10202,10210]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SingleVariableDeclaration [10212,10220]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SingleVariableDeclaration [10222,10232]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Block [10234,10789]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [10795,11185]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "PrimitiveType: void [11190,11194]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: setInitialBuffer [11195,11211]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SingleVariableDeclaration [11212,11222]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SingleVariableDeclaration [11224,11234]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SingleVariableDeclaration [11236,11248]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Block [11250,11532]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "ReturnStatement [9226,9265]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "IfStatement [10244,10783]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "IfStatement [11393,11526]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "ReturnStatement [17354,17452]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "IfStatement [20722,20814]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [20823,20877]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [20887,20926]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "VariableDeclarationStatement [20935,20954]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "IfStatement [20963,21016]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [21346,21379]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "ExpressionStatement [21388,21429]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [21438,21483]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [21492,21522]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "IfStatement [21629,21709]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ReturnStatement [21718,21729]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "IfStatement [21972,22064]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [22073,22099]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [22109,22148]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "VariableDeclarationStatement [22157,22190]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "ExpressionStatement [22199,22240]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [22249,22294]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [22303,22333]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [22486,22520]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [22529,22571]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ReturnStatement [22580,22594]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "ConditionalExpression [9233,9264]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "InfixExpression [10248,10259]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Block [10739,10783]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "InfixExpression [11397,11434]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "InfixExpression [17361,17451]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "InfixExpression [20726,20770]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Block [20772,20814]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "PrimitiveType: long [20935,20939]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "VariableDeclarationFragment [20940,20953]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "InfixExpression [20967,20975]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "MethodInvocation [21388,21428]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "InfixExpression [21633,21647]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "InfixExpression [21976,22020]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Block [22022,22064]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ArrayType [22157,22163]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "VariableDeclarationFragment [22164,22189]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "MethodInvocation [22199,22239]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "InfixExpression [9233,9244]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "InfixExpression [9247,9260]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [10275,10311]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ReturnStatement [10712,10723]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [11473,11486]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [11499,11516]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "INFIX_EXPRESSION_OPERATOR: || [17375,17377]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ParenthesizedExpression [17378,17451]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: mod [20940,20943]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "InfixExpression [20946,20953]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [21054,21111]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "METHOD_INVOCATION_RECEIVER [21388,21391]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: setInitialBuffer [21392,21408]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "METHOD_INVOCATION_ARGUMENTS [21409,21427]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "ExpressionStatement [21663,21699]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: buf [22164,22167]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "ArrayCreation [22170,22189]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "METHOD_INVOCATION_RECEIVER [22199,22202]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: setInitialBuffer [22203,22219]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "METHOD_INVOCATION_ARGUMENTS [22220,22238]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: len [20946,20949]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "INFIX_EXPRESSION_OPERATOR: % [20950,20951]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: buf [21409,21412]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "QualifiedName: buf.length [21417,21427]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "MethodInvocation [21663,21698]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "ArrayType [22174,22189]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: buf [22220,22223]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "QualifiedName: buf.length [22228,22238]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: b [10335,10336]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: out [11456,11459]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "InfixExpression [20998,21005]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "METHOD_INVOCATION_RECEIVER [21663,21666]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: readResults [21667,21678]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "METHOD_INVOCATION_ARGUMENTS [21679,21697]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Dimension [22178,22189]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "INFIX_EXPRESSION_OPERATOR: - [21000,21001]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: mod [21002,21005]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: buf [21679,21682]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "QualifiedName: buf.length [21687,21697]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: len [10429,10432]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "NullLiteral [10680,10684]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: b [10387,10388]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: bPos [10390,10394]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: len [10396,10399]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "NullLiteral [10498,10502]"
        },
        {
          "type": "delete-tree",
          "from": "FieldDeclaration [2180,2262]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "FieldDeclaration [2268,2349]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "FieldDeclaration [2355,2464]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "FieldDeclaration [2470,2593]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "FieldDeclaration [2599,2718]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "FieldDeclaration [2724,2823]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "FieldDeclaration [2829,2922]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "NumberLiteral: 0 [9113,9114]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "InfixExpression [13603,13645]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "QualifiedName: CHUNK_SEPARATOR.length [13671,13693]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "QualifiedName: CHUNK_SEPARATOR.length [12039,12061]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [12784,12811]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [12824,12855]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [12868,12891]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [12904,12927]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [12941,13019]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [13032,13110]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [13124,13179]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [13192,13262]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [13275,13336]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ArrayAccess [13349,13378]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ArrayAccess [12633,12662]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: encodedDataLengthLong [9278,9299]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "ASSIGNMENT_OPERATOR: \u003d [9300,9301]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: tripletCount [9302,9314]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "INFIX_EXPRESSION_OPERATOR: * [9315,9316]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "InfixExpression [9302,9318]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Assignment [9278,9318]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "ExpressionStatement [9278,9319]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "InfixExpression [13508,13533]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "IfStatement [13504,13709]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "FieldDeclaration [3025,3421]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "FieldDeclaration [3427,3979]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "Initializer [4035,4979]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "Block [5338,5374]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [5380,5507]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "IfStatement [5319,5507]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [10472,10490]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [10503,10530]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [10543,10574]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [10587,10618]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [10703,10726]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [10739,10762]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [10776,10854]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [10867,10945]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [10958,11036]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [11050,11105]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [11266,11336]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [11349,11419]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [11432,11496]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: isChunked [11615,11624]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "InfixExpression [11705,11739]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [11763,11851]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [11872,11886]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [11907,12002]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Block [11741,12080]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "IfStatement [11701,12080]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Block [11626,12094]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "IfStatement [11611,12094]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [8777,8819]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [8828,8878]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [8887,8946]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [8955,9011]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [9020,9051]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "VariableDeclarationStatement [9060,9080]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [9577,9708]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [9721,9783]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [9174,9221]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [10036,10088]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [10097,10146]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [10156,10198]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "PrimitiveType: int [10208,10211]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: encodedIndex [10212,10224]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "VariableDeclarationFragment [10212,10228]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "VariableDeclarationStatement [10208,10229]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [10238,10256]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [10265,10275]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [10284,10320]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "VariableDeclarationStatement [10329,10349]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "Assignment [10428,10433]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "InfixExpression [10435,10451]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "PostfixExpression [10453,10456]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "ForStatement [10423,12104]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [12162,12180]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "InfixExpression [12194,12221]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ArrayAccess [12242,12263]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [12277,12300]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [12400,12478]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [12491,12546]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [12559,12620]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [12682,12718]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "IfStatement [12190,13395]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: isChunked [13409,13418]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "IfStatement [13405,13719]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [14081,14123]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "InfixExpression [14211,14233]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "Dimension [14264,14267]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "ArrayType [14260,14267]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "ArrayCreation [14256,14267]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "ReturnStatement [14249,14268]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "IfStatement [14207,14278]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [14288,14339]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [14348,14374]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [14383,14445]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "VariableDeclarationStatement [14505,14526]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "PrimitiveType: int [14535,14538]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: dataIndex [14539,14548]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "VariableDeclarationFragment [14539,14552]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "VariableDeclarationStatement [14535,14553]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "Block [14562,14944]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationExpression [14959,14968]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "InfixExpression [14970,14989]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "PostfixExpression [14991,14994]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "InfixExpression [15022,15027]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [15041,15077]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [15090,15126]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [15140,15183]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [15196,15243]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [15257,16132]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [16145,16163]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Block [14996,16173]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "ForStatement [14954,16173]",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        }
      ]
    }
  ],
  "inducing_type": {
    "add_classes": {
      "qualified_names": [
        "src/java/org/apache/commons/codec/binary/Base64InputStream.java",
        "src/java/org/apache/commons/codec/binary/Base64OutputStream.java"
      ],
      "num": 2
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [
        "setInitialBuffer",
        "resizeBuf",
        "encode",
        "avail",
        "Base64",
        "hasData",
        "readResults",
        "decode"
      ],
      "num": 8
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  },
  "trigger_tests": [
    {
      "test_class": "org.apache.commons.codec.binary.Base64InputStreamTest",
      "test_function": "testCodec105",
      "exception": "java.lang.NullPointerExceptio",
      "message": ""
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/codec/binary/Base64.java",
        "src/java/org/apache/commons/codec/binary/Base64.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "encode",
            "decodeBase64",
            "readResults",
            "Base64",
            "encodeBase64",
            "toIntegerBytes"
          ],
          "num": 6
        },
        {
          "qualified_names": [
            "decodeBase64",
            "reset",
            "readResults",
            "encodeBase64",
            "encode"
          ],
          "num": 5
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "131",
            "132",
            "133",
            "134",
            "135",
            "136",
            "276",
            "277",
            "278",
            "279",
            "280",
            "281",
            "282",
            "283",
            "284",
            "355",
            "552",
            "567",
            "568",
            "572",
            "573",
            "574",
            "575",
            "591",
            "592",
            "593",
            "751"
          ],
          "num": 27
        },
        {
          "qualified_names": [
            "130",
            "276",
            "277",
            "278",
            "349",
            "350",
            "548",
            "566",
            "567",
            "582",
            "742",
            "743",
            "744",
            "745",
            "746",
            "747",
            "748",
            "749",
            "750",
            "751",
            "752",
            "753"
          ],
          "num": 22
        }
      ],
      "diff": "diff -u -r data/changesInfo//Codec_8/properties/modified_classes/inducing/src/java/org/apache/commons/codec/binary/Base64InputStream.java data/changesInfo//Codec_8/cleaned/fixing/src/java/org/apache/commons/codec/binary/Base64InputStream.java\n--- data/changesInfo//Codec_8/properties/modified_classes/inducing/src/java/org/apache/commons/codec/binary/Base64InputStream.java\t2023-07-26 20:06:54.400141069 +0800\n+++ data/changesInfo//Codec_8/cleaned/fixing/src/java/org/apache/commons/codec/binary/Base64InputStream.java\t2023-07-26 20:07:30.500682143 +0800\n@@ -128,12 +128,6 @@\n                 byte[] buf \u003d new byte[doEncode ? 4096 : 8192];\n                 int c \u003d in.read(buf);\n \n-                // A little optimization to avoid System.arraycopy()\n-                // when possible.\n-                if (c \u003e 0 \u0026\u0026 b.length \u003d\u003d len) {\n-                    base64.setInitialBuffer(b, offset, len);\n-                }\n-\n                 if (doEncode) {\n                     base64.encode(buf, 0, c);\n                 } else {\ndiff -u -r data/changesInfo//Codec_8/properties/modified_classes/inducing/src/java/org/apache/commons/codec/binary/Base64.java data/changesInfo//Codec_8/cleaned/fixing/src/java/org/apache/commons/codec/binary/Base64.java\n--- data/changesInfo//Codec_8/properties/modified_classes/inducing/src/java/org/apache/commons/codec/binary/Base64.java\t2023-08-25 14:15:27.851781940 +0800\n+++ data/changesInfo//Codec_8/cleaned/fixing/src/java/org/apache/commons/codec/binary/Base64.java\t2023-07-26 20:31:16.391326544 +0800\n@@ -273,15 +273,9 @@\n     int readResults(byte[] b, int bPos, int bAvail) {\n         if (buf !\u003d null) {\n             int len \u003d Math.min(avail(), bAvail);\n-            if (buf !\u003d b) {\n-                System.arraycopy(buf, readPos, b, bPos, len);\n-                readPos +\u003d len;\n-                if (readPos \u003e\u003d pos) {\n-                    buf \u003d null;\n-                }\n-            } else {\n-                // Re-using the original consumer\u0027s output array is only\n-                // allowed for one round.\n+            System.arraycopy(buf, readPos, b, bPos, len);\n+            readPos +\u003d len;\n+            if (readPos \u003e\u003d pos) {\n                 buf \u003d null;\n             }\n             return len;\n@@ -352,7 +346,8 @@\n                     buf[pos++] \u003d PAD;\n                     break;\n             }\n-            if (lineLength \u003e 0) {\n+            byte b \u003d lineSeparator[lineSeparator.length - 1];\n+            if (lineLength \u003e 0 \u0026\u0026 pos \u003e 0 \u0026\u0026 buf[pos-1] !\u003d b) {\n                 System.arraycopy(lineSeparator, 0, buf, pos, lineSeparator.length);\n                 pos +\u003d lineSeparator.length;\n             }\n@@ -550,6 +545,7 @@\n             return binaryData;\n         }\n         Base64 b64 \u003d isChunked ? new Base64() : new Base64(0);\n+        b64.reset();\n \n         long len \u003d (binaryData.length * 4) / 3;\n         long mod \u003d len % 4;\n@@ -564,15 +560,11 @@\n             throw new IllegalArgumentException(\n                     \"Input array too big, output array would be bigger than Integer.MAX_VALUE\u003d\" + Integer.MAX_VALUE);\n         }\n-        byte[] buf \u003d new byte[(int) len];\n-        b64.setInitialBuffer(buf, 0, buf.length);\n         b64.encode(binaryData, 0, binaryData.length);\n         b64.encode(binaryData, 0, -1); // Notify encoder of EOF.\n \n-        // Encoder might have resized, even though it was unnecessary.\n-        if (b64.buf !\u003d buf) {\n-            b64.readResults(buf, 0, buf.length);\n-        }\n+        byte[] buf \u003d new byte[b64.pos - b64.readPos];\n+        b64.readResults(buf, 0, buf.length);\n         return buf;\n     }\n \n@@ -587,10 +579,8 @@\n             return base64Data;\n         }\n         Base64 b64 \u003d new Base64();\n+        b64.reset();\n \n-        long len \u003d (base64Data.length * 3) / 4;\n-        byte[] buf \u003d new byte[(int) len];\n-        b64.setInitialBuffer(buf, 0, buf.length);\n         b64.decode(base64Data, 0, base64Data.length);\n         b64.decode(base64Data, 0, -1); // Notify decoder of EOF.\n \n@@ -749,4 +739,16 @@\n \n         return resizedBytes;\n     }\n+\n+    /**\n+     * Resets this Base64 object to its initial newly constructed state.\n+     */\n+    private void reset() {\n+        buf \u003d null;\n+        pos \u003d 0;\n+        readPos \u003d 0;\n+        currentLinePos \u003d 0;\n+        modulus \u003d 0;\n+        eof \u003d false;\n+    }\n }\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [27217,27462]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [20752,20764]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [21353,21398]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [21842,21854]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [12997,13046]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "InfixExpression [13063,13107]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "InfixExpression [13063,13088]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "INFIX_EXPRESSION_OPERATOR: \u0026\u0026 [13089,13091]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "InfixExpression [13092,13107]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "INFIX_EXPRESSION_OPERATOR: \u0026\u0026 [13078,13080]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "InfixExpression [13081,13088]"
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [10492,10503]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "InfixExpression [10328,10336]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Block [10338,10535]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Block [10541,10699]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "IfStatement [10324,10699]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [21346,21379]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [21388,21429]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "InfixExpression [21633,21647]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Block [21649,21709]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "IfStatement [21629,21709]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [22109,22148]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [22157,22190]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [22199,22240]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/codec/binary/Base64InputStream.java",
        "src/java/org/apache/commons/codec/binary/Base64InputStream.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "read"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "read"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "131",
            "132",
            "133",
            "134",
            "135",
            "136",
            "276",
            "277",
            "278",
            "279",
            "280",
            "281",
            "282",
            "283",
            "284",
            "355",
            "552",
            "567",
            "568",
            "572",
            "573",
            "574",
            "575",
            "591",
            "592",
            "593",
            "751"
          ],
          "num": 27
        },
        {
          "qualified_names": [
            "130",
            "276",
            "277",
            "278",
            "349",
            "350",
            "548",
            "566",
            "567",
            "582",
            "742",
            "743",
            "744",
            "745",
            "746",
            "747",
            "748",
            "749",
            "750",
            "751",
            "752",
            "753"
          ],
          "num": 22
        }
      ],
      "diff": "diff -u -r data/changesInfo//Codec_8/properties/modified_classes/inducing/src/java/org/apache/commons/codec/binary/Base64InputStream.java data/changesInfo//Codec_8/cleaned/fixing/src/java/org/apache/commons/codec/binary/Base64InputStream.java\n--- data/changesInfo//Codec_8/properties/modified_classes/inducing/src/java/org/apache/commons/codec/binary/Base64InputStream.java\t2023-07-26 20:06:54.400141069 +0800\n+++ data/changesInfo//Codec_8/cleaned/fixing/src/java/org/apache/commons/codec/binary/Base64InputStream.java\t2023-07-26 20:07:30.500682143 +0800\n@@ -128,12 +128,6 @@\n                 byte[] buf \u003d new byte[doEncode ? 4096 : 8192];\n                 int c \u003d in.read(buf);\n \n-                // A little optimization to avoid System.arraycopy()\n-                // when possible.\n-                if (c \u003e 0 \u0026\u0026 b.length \u003d\u003d len) {\n-                    base64.setInitialBuffer(b, offset, len);\n-                }\n-\n                 if (doEncode) {\n                     base64.encode(buf, 0, c);\n                 } else {\ndiff -u -r data/changesInfo//Codec_8/properties/modified_classes/inducing/src/java/org/apache/commons/codec/binary/Base64.java data/changesInfo//Codec_8/cleaned/fixing/src/java/org/apache/commons/codec/binary/Base64.java\n--- data/changesInfo//Codec_8/properties/modified_classes/inducing/src/java/org/apache/commons/codec/binary/Base64.java\t2023-08-25 14:15:27.851781940 +0800\n+++ data/changesInfo//Codec_8/cleaned/fixing/src/java/org/apache/commons/codec/binary/Base64.java\t2023-07-26 20:31:16.391326544 +0800\n@@ -273,15 +273,9 @@\n     int readResults(byte[] b, int bPos, int bAvail) {\n         if (buf !\u003d null) {\n             int len \u003d Math.min(avail(), bAvail);\n-            if (buf !\u003d b) {\n-                System.arraycopy(buf, readPos, b, bPos, len);\n-                readPos +\u003d len;\n-                if (readPos \u003e\u003d pos) {\n-                    buf \u003d null;\n-                }\n-            } else {\n-                // Re-using the original consumer\u0027s output array is only\n-                // allowed for one round.\n+            System.arraycopy(buf, readPos, b, bPos, len);\n+            readPos +\u003d len;\n+            if (readPos \u003e\u003d pos) {\n                 buf \u003d null;\n             }\n             return len;\n@@ -352,7 +346,8 @@\n                     buf[pos++] \u003d PAD;\n                     break;\n             }\n-            if (lineLength \u003e 0) {\n+            byte b \u003d lineSeparator[lineSeparator.length - 1];\n+            if (lineLength \u003e 0 \u0026\u0026 pos \u003e 0 \u0026\u0026 buf[pos-1] !\u003d b) {\n                 System.arraycopy(lineSeparator, 0, buf, pos, lineSeparator.length);\n                 pos +\u003d lineSeparator.length;\n             }\n@@ -550,6 +545,7 @@\n             return binaryData;\n         }\n         Base64 b64 \u003d isChunked ? new Base64() : new Base64(0);\n+        b64.reset();\n \n         long len \u003d (binaryData.length * 4) / 3;\n         long mod \u003d len % 4;\n@@ -564,15 +560,11 @@\n             throw new IllegalArgumentException(\n                     \"Input array too big, output array would be bigger than Integer.MAX_VALUE\u003d\" + Integer.MAX_VALUE);\n         }\n-        byte[] buf \u003d new byte[(int) len];\n-        b64.setInitialBuffer(buf, 0, buf.length);\n         b64.encode(binaryData, 0, binaryData.length);\n         b64.encode(binaryData, 0, -1); // Notify encoder of EOF.\n \n-        // Encoder might have resized, even though it was unnecessary.\n-        if (b64.buf !\u003d buf) {\n-            b64.readResults(buf, 0, buf.length);\n-        }\n+        byte[] buf \u003d new byte[b64.pos - b64.readPos];\n+        b64.readResults(buf, 0, buf.length);\n         return buf;\n     }\n \n@@ -587,10 +579,8 @@\n             return base64Data;\n         }\n         Base64 b64 \u003d new Base64();\n+        b64.reset();\n \n-        long len \u003d (base64Data.length * 3) / 4;\n-        byte[] buf \u003d new byte[(int) len];\n-        b64.setInitialBuffer(buf, 0, buf.length);\n         b64.decode(base64Data, 0, base64Data.length);\n         b64.decode(base64Data, 0, -1); // Notify decoder of EOF.\n \n@@ -749,4 +739,16 @@\n \n         return resizedBytes;\n     }\n+\n+    /**\n+     * Resets this Base64 object to its initial newly constructed state.\n+     */\n+    private void reset() {\n+        buf \u003d null;\n+        pos \u003d 0;\n+        readPos \u003d 0;\n+        currentLinePos \u003d 0;\n+        modulus \u003d 0;\n+        eof \u003d false;\n+    }\n }\n",
      "operations": [
        {
          "type": "delete-tree",
          "from": "IfStatement [5292,5404]",
          "to": ""
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [
        "reset"
      ],
      "num": 1
    },
    "delete_functions": {
      "qualified_names": [
        "Base64",
        "toIntegerBytes"
      ],
      "num": 2
    }
  }
}