diff -r -u original/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java buggy/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java
--- original/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	2023-06-13 15:31:36.971069455 +0800
+++ buggy/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	2023-06-12 11:40:16.347186579 +0800
@@ -20,6 +20,8 @@
 import com.google.common.collect.Lists;
 import com.google.common.collect.Sets;
 import com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback;
+import com.google.javascript.jscomp.Scope.Var;
+import com.google.javascript.rhino.JSDocInfo;
 import com.google.javascript.rhino.Node;
 import com.google.javascript.rhino.Token;
 
@@ -69,13 +71,19 @@
      * Variable declaration that any following var nodes should be
      * collapsed into
      */
-    final Node firstVarNode;
+    final Node startNode;
+
+    /**
+     * Last node (non-inclusive) of the chain of nodes to collapse.
+     */
+    final Node endNode;
 
     /** Parent of the nodes to the collapse */
     final Node parent;
 
-    Collapse(Node firstVarNode, Node parent) {
-      this.firstVarNode = firstVarNode;
+    Collapse(Node startNode, Node endNode, Node parent) {
+      this.startNode = startNode;
+      this.endNode = endNode;
       this.parent = parent;
     }
   }
@@ -97,6 +105,7 @@
     this.compiler = compiler;
   }
 
+  @Override
   public void process(Node externs, Node root) {
     collapses.clear();
     nodesToCollapse.clear();
@@ -110,55 +119,126 @@
   }
 
   /**
-   * Gathers all of the variable declarations that should be collapsed into one.
+   * Gathers all of the variable declarations / assignments that should be
+   * collapsed into one.
+   *
    * We do not do the collapsing as we go since node traversal would be affected
    * by the changes we are making to the parse tree.
    */
   private class GatherCollapses extends AbstractPostOrderCallback {
 
+    // If a VAR is declared like
+    // var x;
+    // then we should not create new VAR nodes for it later in the tree.
+    // This is a workaround for a bug in Firefox.
+    private final Set<Var> blacklistedVars = Sets.newHashSet();
+
+    @Override
     public void visit(NodeTraversal t, Node n, Node parent) {
+      if (n.isVar()) {
+        blacklistStubVars(t, n);
+      }
+
       // Only care about var nodes
-      if (n.getType() != Token.VAR) return;
+      if (!n.isVar() && !canBeRedeclared(n, t.getScope())) return;
 
       // If we've already looked at this node, skip it
       if (nodesToCollapse.contains(n)) return;
 
       // Adjacent VAR children of an IF node are the if and else parts and can't
       // be collapsed
-      if (parent.getType() == Token.IF) return;
+      if (parent.isIf()) return;
 
       Node varNode = n;
 
+      boolean hasVar = n.isVar();
+
       // Find variable declarations that follow this one (if any)
       n = n.getNext();
 
       boolean hasNodesToCollapse = false;
-      while (n != null && n.getType() == Token.VAR) {
+
+      while (n != null &&
+          (n.isVar() || canBeRedeclared(n, t.getScope()))) {
+
+        if (n.isVar()) {
+          blacklistStubVars(t, n);
+          hasVar = true;
+        }
+
         nodesToCollapse.add(n);
         hasNodesToCollapse = true;
 
         n = n.getNext();
       }
 
-      if (hasNodesToCollapse) {
+      if (hasNodesToCollapse && hasVar) {
         nodesToCollapse.add(varNode);
-        collapses.add(new Collapse(varNode, parent));
+        collapses.add(new Collapse(varNode, n, parent));
       }
+    }
 
+    private void blacklistStubVars(NodeTraversal t, Node varNode) {
+      for (Node child = varNode.getFirstChild();
+           child != null; child = child.getNext()) {
+        if (child.getFirstChild() == null) {
+          blacklistedVars.add(t.getScope().getVar(child.getString()));
+        }
+      }
+    }
+
+    private boolean canBeRedeclared(Node n, Scope s) {
+      if (!NodeUtil.isExprAssign(n)) {
+        return false;
+      }
+      Node assign = n.getFirstChild();
+      Node lhs = assign.getFirstChild();
+
+      if (!lhs.isName()) {
+        return false;
+      }
+
+      Var var = s.getVar(lhs.getString());
+      return var != null &&
+          var.getScope() == s && !blacklistedVars.contains(var);
     }
   }
 
   private void applyCollapses() {
     for (Collapse collapse : collapses) {
-      Node first = collapse.firstVarNode;
-      while (first.getNext() != null &&
-          first.getNext().getType() == Token.VAR) {
-        Node next = collapse.parent.removeChildAfter(first);
 
-        // Move all children of the next var node into the first one.
-        first.addChildrenToBack(next.removeChildren());
+      Node var = new Node(Token.VAR);
+      var.copyInformationFrom(collapse.startNode);
+      collapse.parent.addChildBefore(var, collapse.startNode);
+
+      boolean redeclaration = false;
+      for (Node n = collapse.startNode; n != collapse.endNode;) {
+        Node next = n.getNext();
+
+        Preconditions.checkState(var.getNext() == n);
+        collapse.parent.removeChildAfter(var);
+
+        if (n.isVar()) {
+          while(n.hasChildren()) {
+            var.addChildToBack(n.removeFirstChild());
+          }
+        } else {
+          Node assign = n.getFirstChild();
+          Node lhs = assign.getFirstChild();
+          Preconditions.checkState(lhs.isName());
+          Node rhs = assign.getLastChild();
+          lhs.addChildToBack(rhs.detachFromParent());
+          var.addChildToBack(lhs.detachFromParent());
+          redeclaration = true;
+        }
+        n = next;
+      }
+
+      if (redeclaration) {
+        JSDocInfo info = new JSDocInfo();
+        info.addSuppression("duplicate");
+        var.setJSDocInfo(info);
       }
     }
   }
-
 }
diff -r -u original/test/com/google/javascript/jscomp/CollapseVariableDeclarationsTest.java buggy/test/com/google/javascript/jscomp/CollapseVariableDeclarationsTest.java
--- original/test/com/google/javascript/jscomp/CollapseVariableDeclarationsTest.java	2023-06-13 15:31:36.971069455 +0800
+++ buggy/test/com/google/javascript/jscomp/CollapseVariableDeclarationsTest.java	2023-06-12 11:40:16.347186579 +0800
@@ -43,7 +43,37 @@
   }
 
   public void testIfElseVarDeclarations() throws Exception {
-    testSame("if (x) var a = 1; else var a = 2;");
+    testSame("if (x) var a = 1; else var b = 2;");
+  }
+
+  public void testAggressiveRedeclaration() {
+    test("var x = 2; foo(x);     x = 3; var y = 2;",
+         "var x = 2; foo(x); var x = 3,     y = 2;");
+
+    test("var x = 2; foo(x);     x = 3; x = 1; var y = 2;",
+         "var x = 2; foo(x); var x = 3, x = 1,     y = 2;");
+
+    test("var x = 2; foo(x);     x = 3; x = 1; var y = 2; var z = 4",
+         "var x = 2; foo(x); var x = 3, x = 1,     y = 2,     z = 4");
+
+    test("var x = 2; foo(x);     x = 3; x = 1; var y = 2; var z = 4; x = 5",
+         "var x = 2; foo(x); var x = 3, x = 1,     y = 2,     z = 4, x = 5");
+  }
+
+  public void testAggressiveRedeclarationInFor() {
+    testSame("for(var x = 1; x = 2; x = 3) {x = 4}");
+    testSame("for(var x = 1; y = 2; z = 3) {var a = 4}");
+    testSame("var x; for(x = 1; x = 2; z = 3) {x = 4}");
+  }
+
+  public void testIssue397() {
+    test("var x; var y = 3; x = 5;",
+         "var x, y = 3; x = 5;");
+    testSame("var x; x = 5; var z = 7;");
+    test("var x; var y = 3; x = 5; var z = 7;",
+         "var x, y = 3; x = 5; var z = 7;");
+    test("var a = 1; var x; var y = 3; x = 5;",
+         "var a = 1, x, y = 3; x = 5;");
   }
 
   @Override
