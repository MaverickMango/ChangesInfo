diff --git a/src/java/org/apache/commons/math/distribution/NormalDistribution.java b/src/java/org/apache/commons/math/distribution/NormalDistribution.java
new file mode 100644
index 0000000..a20f41b
--- /dev/null
+++ b/src/java/org/apache/commons/math/distribution/NormalDistribution.java
@@ -0,0 +1,55 @@
+/*
+ * Copyright 2004 The Apache Software Foundation.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.commons.math.distribution;
+
+/**
+ * Normal (Gauss) Distribution.
+ * Instances of NormalDistribution objects should be created using
+ * {@link DistributionFactory#createNormalDistribution(double, double)}.<p>
+ * 
+ * <p>
+ * References:<p>
+ * <ul>
+ * <li><a href="http://mathworld.wolfram.com/NormalDistribution.html">
+ * Normal Distribution</a></li>
+ * </ul>
+ * </p>
+ * 
+ * @version $Revision: 1.7 $ $Date: 2004/05/05 19:59:11 $
+ */
+public interface NormalDistribution extends ContinuousDistribution {
+	/**
+	 * Access the mean.
+	 * @return mean for this distribution
+	 */
+	double getMean();
+	/**
+	 * Modify the mean.
+	 * @param mean for this distribution
+	 */
+	void setMean(double mean);
+	/**
+	 * Access the standard deviation.
+	 * @return standard deviation for this distribution
+	 */
+	double getStandardDeviation();
+	/**
+	 * Modify the standard deviation.
+	 * @param sd standard deviation for this distribution
+	 */
+	void setStandardDeviation(double sd);
+}
diff --git a/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java b/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java
new file mode 100644
index 0000000..1e04056
--- /dev/null
+++ b/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java
@@ -0,0 +1,168 @@
+/*
+ * Copyright 2004 The Apache Software Foundation.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.commons.math.distribution;
+
+import java.io.Serializable;
+
+import org.apache.commons.math.MathException;
+import org.apache.commons.math.special.Erf;
+
+/**
+ * Default implementation of
+ * {@link org.apache.commons.math.distribution.NormalDistribution}.<p>
+ * You can choose the algorithm used to calculate cumulative probability
+ * using method {@link #setCdfAlgorithm}. The deafault is the Cody algorithm 
+ * {@link org.apache.commons.math.distribution.NormalCDFPreciseAlgorithm}
+ * 
+ * @version $Revision: 1.8 $ $Date: 2004/05/05 19:59:11 $
+ */
+public class NormalDistributionImpl extends AbstractContinuousDistribution 
+		implements NormalDistribution, Serializable {
+    
+    /** The mean of this distribution. */
+	private double mean = 0;
+    
+    /** The standard deviation of this distribution. */
+	private double standardDeviation = 1;
+	
+	/**
+	 * Create a normal distribution using the given mean and standard deviation.
+	 * @param mean mean for this distribution
+	 * @param sd standard deviation for this distribution
+	 */
+	public NormalDistributionImpl(double mean, double sd){
+		super();
+		setMean(mean);
+		setStandardDeviation(sd);
+	}
+	/**
+	 * Creates normal distribution with the mean equal to zero and standard
+	 * deviation equal to one. 
+	 */
+	public NormalDistributionImpl(){
+		this(0.0, 1.0);
+	}	
+	/**
+	 * Access the mean.
+	 * @return mean for this distribution
+	 */	
+	public double getMean() {
+		return mean;
+	}
+	/**
+	 * Modify the mean.
+	 * @param mean for this distribution
+	 */
+	public void setMean(double mean) {
+		this.mean = mean;
+	}
+
+	/**
+	 * Access the standard deviation.
+	 * @return standard deviation for this distribution
+	 */
+	public double getStandardDeviation() {
+		return standardDeviation;
+	}
+
+	/**
+	 * Modify the standard deviation.
+	 * @param sd standard deviation for this distribution
+	 */
+	public void setStandardDeviation(double sd) {
+		if (sd <= 0.0) {
+			throw new IllegalArgumentException(
+                "Standard deviation must be positive.");
+		}		
+		standardDeviation = sd;
+	}
+
+	/**
+	 * For this disbution, X, this method returns P(X &lt; <code>x</code>).
+	 * @param x the value at which the CDF is evaluated.
+	 * @return CDF evaluted at <code>x</code>. 
+	 * @throws MathException if the algorithm fails to converge.
+	 */
+	public double cumulativeProbability(double x) throws MathException {
+        return 0.5 * (1.0 + Erf.erf((x - mean) /
+                (standardDeviation * Math.sqrt(2.0))));
+	}
+	
+	/**
+	 * Access the domain value lower bound, based on <code>p</code>, used to
+	 * bracket a CDF root.  This method is used by
+	 * {@link #inverseCumulativeProbability(double)} to find critical values.
+	 * 
+	 * @param p the desired probability for the critical value
+	 * @return domain value lower bound, i.e.
+	 *         P(X &lt; <i>lower bound</i>) &lt; <code>p</code> 
+	 */
+	protected double getDomainLowerBound(double p) {
+        double ret;
+
+        if (p < .5) {
+            ret = -Double.MAX_VALUE;
+        } else {
+            ret = getMean();
+        }
+        
+        return ret;
+    }
+
+	/**
+	 * Access the domain value upper bound, based on <code>p</code>, used to
+	 * bracket a CDF root.  This method is used by
+	 * {@link #inverseCumulativeProbability(double)} to find critical values.
+	 * 
+	 * @param p the desired probability for the critical value
+	 * @return domain value upper bound, i.e.
+	 *         P(X &lt; <i>upper bound</i>) &gt; <code>p</code> 
+	 */
+	protected double getDomainUpperBound(double p) {
+        double ret;
+
+        if (p < .5) {
+            ret = getMean();
+        } else {
+            ret = Double.MAX_VALUE;
+        }
+        
+        return ret;
+    }
+
+	/**
+	 * Access the initial domain value, based on <code>p</code>, used to
+	 * bracket a CDF root.  This method is used by
+	 * {@link #inverseCumulativeProbability(double)} to find critical values.
+	 * 
+	 * @param p the desired probability for the critical value
+	 * @return initial domain value
+	 */
+	protected double getInitialDomain(double p) {
+        double ret;
+
+        if (p < .5) {
+            ret = getMean() - getStandardDeviation();
+        } else if (p > .5) {
+            ret = getMean() + getStandardDeviation();
+        } else {
+            ret = getMean();
+        }
+        
+        return ret;
+	}
+}
diff --git a/src/java/org/apache/commons/math/special/Erf.java b/src/java/org/apache/commons/math/special/Erf.java
new file mode 100644
index 0000000..ad1ed76
--- /dev/null
+++ b/src/java/org/apache/commons/math/special/Erf.java
@@ -0,0 +1,58 @@
+/*
+ * Copyright 2004 The Apache Software Foundation.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.commons.math.special;
+
+import java.io.Serializable;
+
+import org.apache.commons.math.MathException;
+
+/**
+ * This is a utility class that provides computation methods related to the
+ * error functions.
+ * 
+ * @version $Revision: 1.1 $ $Date: 2004/05/05 19:54:58 $
+ */
+public class Erf implements Serializable {
+
+    /**
+     * Default constructor.  Prohibit instantiation.
+     */
+    private Erf() {
+        super();
+    }
+
+    /**
+     * Returns the error function erf(x).
+     * 
+     * The implementation of this method is based on:
+     * <ul>
+     * <li>
+     * <a href="http://mathworld.wolfram.com/Erf.html">
+     * Erf</a>, equation (3).</li>
+     * </ul>
+     * 
+     * @param x the value.
+     * @return the error function erf(x)
+     * @throws MathException if the algorithm fails to converge.
+     */
+    public static double erf(double x) throws MathException {
+        double ret = Gamma.regularizedGammaP(0.5, x * x, 1.0e-15, 10000);
+        if (x < 0) {
+            ret = -ret;
+        }
+        return ret;
+    }
+}
diff --git a/src/test/org/apache/commons/math/TestUtils.java b/src/test/org/apache/commons/math/TestUtils.java
index 362207e..bb5a208 100644
--- a/src/test/org/apache/commons/math/TestUtils.java
+++ b/src/test/org/apache/commons/math/TestUtils.java
@@ -27,7 +27,7 @@
 import org.apache.commons.math.complex.Complex;
 
 /**
- * @version $Revision: 1.12 $ $Date: 2004/04/02 21:30:08 $
+ * @version $Revision: 1.13 $ $Date: 2004/05/05 19:55:14 $
  */
 public class TestUtils {
     /**
@@ -44,7 +44,8 @@
     public static void assertEquals(String msg, double expected, double actual, double delta) {
     	// check for NaN
     	if(Double.isNaN(expected)){
-    		Assert.assertTrue(msg, Double.isNaN(actual));
+    		Assert.assertTrue("" + actual + " is not NaN.",
+    		    Double.isNaN(actual));
     	} else {
     		Assert.assertEquals(msg, expected, actual, delta);
     	}
diff --git a/src/test/org/apache/commons/math/distribution/NormalDistributionTest.java b/src/test/org/apache/commons/math/distribution/NormalDistributionTest.java
new file mode 100644
index 0000000..60fdfd2
--- /dev/null
+++ b/src/test/org/apache/commons/math/distribution/NormalDistributionTest.java
@@ -0,0 +1,164 @@
+/*
+ * Copyright 2004 The Apache Software Foundation.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.commons.math.distribution;
+
+import org.apache.commons.math.MathException;
+import org.apache.commons.math.TestUtils;
+
+import junit.framework.TestCase;
+
+/**
+ *  Tests for NormalDistribution implementation
+ * 
+ * "True" results are taken from R - the same as in Mathematica
+ *
+ */
+public class NormalDistributionTest extends TestCase {
+	
+	private NormalDistribution z;
+	private static final double PRECISION = 10e-6;	
+	private static final double M = 2.1;
+	private static final double SD = 1.4;
+	
+	/**
+	 * Constructor for NormalDistributionTest.
+	 * @param arg0
+	 */
+	public NormalDistributionTest(String arg0) {
+		super(arg0);
+	}
+
+	public static void main(String[] args) {
+		junit.swingui.TestRunner.run(NormalDistributionTest.class);
+	}
+
+	protected void setUp() throws Exception {
+		super.setUp();
+		z = DistributionFactory.newInstance().createNormalDistribution(M, SD);
+	}
+
+	protected void tearDown() throws Exception {
+		super.tearDown();
+		z = null;
+	}
+
+	public void testCumulativeProbabilitydoubleM_MINUS_2SD() throws MathException {
+		testProbability(M - 2*SD, 0.02275013);
+	}
+
+	public void testCumulativeProbabilitydoubleM_MINUS_SD() throws MathException {
+		testProbability(M - SD, 0.1586553);
+	}
+
+	public void testCumulativeProbabilitydoubleM() throws MathException {
+		testProbability(M, 0.5);
+	}
+
+	public void testCumulativeProbabilitydoubleM_PLUS_SD() throws MathException {
+		testProbability(M + SD, 0.8413447);
+	}
+	
+	public void testCumulativeProbabilitydoubleM_PLUS_2SD() throws MathException {
+		testProbability(M + 2*SD, 0.9772499);
+	}
+	
+	public void testCumulativeProbabilitydoubleM_PLUS_3SD() throws MathException {
+		testProbability(M + 3*SD, 0.9986501);
+	}
+	
+	public void testCumulativeProbabilitydoubleM_PLUS_4SD() throws MathException {
+		testProbability(M + 4*SD, 0.9999683);
+	}
+	
+	public void testCumulativeProbabilitydoubleM_PLUS_5SD() throws MathException {
+		testProbability(M + 5*SD, 0.9999997);
+	}
+
+	public void testInverseCumulativeProbability001() throws MathException {
+		testValue(-2.226325, .001);
+	}
+
+	public void testInverseCumulativeProbability010() throws MathException{
+		testValue(-1.156887, .010);
+	}
+
+	public void testInverseCumulativeProbability025() throws MathException{
+		testValue(-0.6439496, .025);
+	}
+
+	public void testInverseCumulativeProbability050() throws MathException{
+		testValue(-0.2027951, .050);
+	}
+
+	public void testInverseCumulativeProbability100() throws MathException{
+		testValue(0.3058278, .100);
+	}
+
+	public void testInverseCumulativeProbability900() throws MathException{
+		testValue(3.894172, .900);
+	}
+
+	public void testInverseCumulativeProbability950() throws MathException{
+		testValue(4.402795, .950);
+	}
+
+	public void testInverseCumulativeProbability975() throws MathException{
+		testValue(4.84395, .975);
+	}
+
+	public void testInverseCumulativeProbability990() throws MathException{
+		testValue(5.356887, .990);
+	}
+
+	public void testInverseCumulativeProbability999() throws MathException{
+		testValue(6.426325, .999);
+	}
+
+	public void testGetMean() {
+		assertEquals(M, z.getMean(), 0);
+	}
+
+	public void testSetMean() throws MathException {
+		double mu = Math.random();
+		z.setMean(mu);
+		assertEquals(mu, z.getMean(), 0);
+		assertEquals(0.5d, z.cumulativeProbability(mu), PRECISION);
+	}
+
+	public void testGetStandardDeviation() {
+		assertEquals(SD, z.getStandardDeviation(), 0);	
+	}
+
+	public void testSetStandardDeviation() throws MathException{
+		double sigma = 0.1d + Math.random();
+		z.setStandardDeviation(sigma);
+		assertEquals(sigma, z.getStandardDeviation(), 0);
+		assertEquals(0.84134475, z.cumulativeProbability(z.getMean() + z.getStandardDeviation()), PRECISION );
+	}
+	
+	private void testProbability(double x, double expected) throws MathException {
+		double actual = Double.NaN;
+		actual =  z.cumulativeProbability(x);
+		assertEquals(expected, actual, PRECISION);
+	}
+
+	private void testValue(double expected, double p) throws MathException {
+		double actual = z.inverseCumulativeProbability(p);
+		TestUtils.assertEquals(expected, actual, PRECISION);
+	}
+
+}
diff --git a/src/test/org/apache/commons/math/special/ErfTest.java b/src/test/org/apache/commons/math/special/ErfTest.java
new file mode 100644
index 0000000..d426649
--- /dev/null
+++ b/src/test/org/apache/commons/math/special/ErfTest.java
@@ -0,0 +1,77 @@
+/*
+ * Copyright 2004 The Apache Software Foundation
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+
+package org.apache.commons.math.special;
+
+import org.apache.commons.math.MathException;
+
+import junit.framework.TestCase;
+
+/**
+ * @version $Revision: 1.1 $ $Date: 2004/05/05 19:54:58 $
+ */
+public class ErfTest extends TestCase {
+
+    public void testErf0() throws MathException {
+        double actual = Erf.erf(0.0);
+        double expected = 0.0;
+        assertEquals(expected, actual, 1.0e-5);
+    }
+
+    public void testErf1960() throws MathException {
+        double x = 1.960 / Math.sqrt(2.0);
+        double actual = Erf.erf(x);
+        double expected = 0.95;
+        assertEquals(expected, actual, 1.0e-5);
+
+        actual = Erf.erf(-x);
+        expected = -expected;
+        assertEquals(expected, actual, 1.0e-5);
+    }
+
+    public void testErf2576() throws MathException {
+        double x = 2.576 / Math.sqrt(2.0);
+        double actual = Erf.erf(x);
+        double expected = 0.99;
+        assertEquals(expected, actual, 1.0e-5);
+    
+        actual = Erf.erf(-x);
+        expected = -expected;
+        assertEquals(expected, actual, 1.0e-5);
+    }
+
+    public void testErf2807() throws MathException {
+        double x = 2.807 / Math.sqrt(2.0);
+        double actual = Erf.erf(x);
+        double expected = 0.995;
+        assertEquals(expected, actual, 1.0e-5);
+        
+        actual = Erf.erf(-x);
+        expected = -expected;
+        assertEquals(expected, actual, 1.0e-5);
+    }
+
+    public void testErf3291() throws MathException {
+        double x = 3.291 / Math.sqrt(2.0);
+        double actual = Erf.erf(x);
+        double expected = 0.999;
+        assertEquals(expected, actual, 1.0e-5);
+        
+        actual = Erf.erf(-x);
+        expected = -expected;
+        assertEquals(expected, actual, 1.0e-5);
+    }
+}
