{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "/home/liumengjiao/Desktop/CI/Benchmark/data/changesInfo/",
  "properties": {
    "trigger.tests": "org.apache.commons.math.distribution.NormalDistributionTest::testExtremeValues",
    "test.dir": "src/test",
    "clz.modified": "org.apache.commons.math.distribution.NormalDistributionImpl",
    "src.dir": "src/java"
  },
  "timeoutSecond": 100,
  "proj": "Math",
  "id": "103",
  "workingDir": "../bugs/Math_103_buggy",
  "buggyCommit": "b8058233e92ad635fe204f450235cad597cd70f2",
  "inducingCommit": "ac9e22b1d5abce5909d5ae2b2dde33166dddeae8",
  "originalCommit": "815c2113e80f6296dd876eeb6e2a9faff04c92cd",
  "bug_name": "Math_103",
  "derive": "defects4j",
  "original_fixing_commit": "4ce05bcd51ec956d789d20b59c743603d24a8ab7",
  "buildFiles_changed": false,
  "regression": false,
  "inducing_changes": [],
  "inducing_type": {
    "add_classes": {
      "qualified_names": [
        "src/java/org/apache/commons/math/distribution/NormalDistribution.java",
        "src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java",
        "src/java/org/apache/commons/math/special/Erf.java"
      ],
      "num": 3
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  },
  "trigger_tests": [
    {
      "test_class": "org.apache.commons.math.distribution.NormalDistributionTest",
      "test_function": "testExtremeValues",
      "assertion_line": "133",
      "exception": "org.apache.commons.math.MaxIterationsExceededException",
      "message": "Maximal number of iterations (10,000) exceeded"
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java",
        "src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.math.distribution.NormalDistributionImpl:cumulativeProbability:[double x]:double"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "org.apache.commons.math.distribution.NormalDistributionImpl:cumulativeProbability:[double x]:double"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "22",
            "103",
            "106",
            "107"
          ],
          "num": 4
        },
        {
          "qualified_names": [
            "23",
            "104",
            "105",
            "106",
            "109",
            "110",
            "111",
            "112",
            "113",
            "114",
            "115",
            "116",
            "117",
            "118",
            "119",
            "120"
          ],
          "num": 16
        }
      ],
      "diff": "diff --git a/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java b/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\nindex ff54236..a08eac5 100644\n--- a/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n@@ -20,6 +20,7 @@\n import java.io.Serializable;\n \n import org.apache.commons.math.MathException;\n+import org.apache.commons.math.MaxIterationsExceededException;\n import org.apache.commons.math.special.Erf;\n \n /**\n@@ -100,11 +101,23 @@\n      * For this disbution, X, this method returns P(X \u0026lt; \u003ccode\u003ex\u003c/code\u003e).\n      * @param x the value at which the CDF is evaluated.\n      * @return CDF evaluted at \u003ccode\u003ex\u003c/code\u003e. \n-     * @throws MathException if the algorithm fails to converge.\n+     * @throws MathException if the algorithm fails to converge; unless\n+     * x is more than 20 standard deviations from the mean, in which case the\n+     * convergence exception is caught and 0 or 1 is returned.\n      */\n     public double cumulativeProbability(double x) throws MathException {\n-        return 0.5 * (1.0 + Erf.erf((x - mean) /\n-                (standardDeviation * Math.sqrt(2.0))));\n+        try {\n+            return 0.5 * (1.0 + Erf.erf((x - mean) /\n+                    (standardDeviation * Math.sqrt(2.0))));\n+        } catch (MaxIterationsExceededException ex) {\n+            if (x \u003c (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38\n+                return 0.0d;\n+            } else if (x \u003e (mean + 20 * standardDeviation)) {\n+                return 1.0d;\n+            } else {\n+                throw ex;\n+            }\n+        }\n     }\n     \n     /**\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "ImportDeclaration [927,989]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TryStatement [3550,3991]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: x is more than 20 standard deviations from the mean, in which case the [3327,3397]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: convergence exception is caught and 0 or 1 is returned. [3405,3460]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Block [3554,3678]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "CatchClause [3679,3991]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  },
  "patch_changed_mths": {
    "qualified_names": [],
    "num": 0
  }
}