{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "/home/liumengjiao/Desktop/CI/Benchmark/data/changesInfo/",
  "properties": {
    "trigger.tests": "org.apache.commons.math3.fitting.PolynomialFitterTest::testLargeSample",
    "test.dir": "src/test/java",
    "clz.modified": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer,org.apache.commons.math3.optim.nonlinear.vector.Weight",
    "src.dir": "src/main/java"
  },
  "timeoutSecond": 100,
  "proj": "Math",
  "id": "14",
  "workingDir": "../bugs/Math_14_buggy",
  "buggyCommit": "0f37f87216b67d12b722d706f3e313b731ee31ab",
  "inducingCommit": "80180b28efc35d63bedde1f7014c29349d744dfe",
  "originalCommit": "3d2561d5e80d8b605a0671526c997a1014c869b2",
  "bug_name": "Math_14",
  "derive": "defects4j",
  "original_fixing_commit": "a6b2e992e17cee0d4cb5a2da8242a20b8e5a8fc3",
  "buildFiles_changed": false,
  "regression": false,
  "inducing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/math3/fitting/CurveFitter.java",
        "src/main/java/org/apache/commons/math3/fitting/CurveFitter.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.math3.fitting.CurveFitter:fit:[int maxEval, T f, final double[] initialGuess]:double[]"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "org.apache.commons.math3.fitting.CurveFitter:fit:[int maxEval, T f, final double[] initialGuess]:double[]"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "21",
            "22",
            "25",
            "30",
            "32",
            "178"
          ],
          "num": 6
        },
        {
          "qualified_names": [
            "22",
            "25",
            "27",
            "31",
            "177"
          ],
          "num": 5
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/math3/fitting/CurveFitter.java b/src/main/java/org/apache/commons/math3/fitting/CurveFitter.java\nindex 42274f3..e5c2024 100644\n--- a/src/main/java/org/apache/commons/math3/fitting/CurveFitter.java\n+++ b/src/main/java/org/apache/commons/math3/fitting/CurveFitter.java\n@@ -18,18 +18,17 @@\n \n import java.util.ArrayList;\n import java.util.List;\n-\n-import org.apache.commons.math3.analysis.MultivariateMatrixFunction;\n import org.apache.commons.math3.analysis.MultivariateVectorFunction;\n+import org.apache.commons.math3.analysis.MultivariateMatrixFunction;\n import org.apache.commons.math3.analysis.ParametricUnivariateFunction;\n-import org.apache.commons.math3.optim.InitialGuess;\n import org.apache.commons.math3.optim.MaxEval;\n+import org.apache.commons.math3.optim.InitialGuess;\n import org.apache.commons.math3.optim.PointVectorValuePair;\n+import org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer;\n import org.apache.commons.math3.optim.nonlinear.vector.ModelFunction;\n import org.apache.commons.math3.optim.nonlinear.vector.ModelFunctionJacobian;\n-import org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer;\n import org.apache.commons.math3.optim.nonlinear.vector.Target;\n-import org.apache.commons.math3.optim.nonlinear.vector.NonCorrelatedWeight;\n+import org.apache.commons.math3.optim.nonlinear.vector.Weight;\n \n /**\n  * Fitter for parametric univariate real functions y \u003d f(x).\n@@ -175,7 +174,7 @@\n                                  model.getModelFunction(),\n                                  model.getModelFunctionJacobian(),\n                                  new Target(target),\n-                                 new NonCorrelatedWeight(weights),\n+                                 new Weight(weights),\n                                  new InitialGuess(initialGuess));\n         // Extract the coefficients.\n         return optimum.getPointRef();\n",
      "operations": [
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ImportDeclaration [1560,1622]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ImportDeclaration [1561,1636]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultiStartMultivariateVectorOptimizer.java",
        "src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultiStartMultivariateVectorOptimizer.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.math3.optim.nonlinear.vector.MultiStartMultivariateVectorOptimizer:getPairComparator:[]:Comparator\u003cPointVectorValuePair\u003e"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "org.apache.commons.math3.optim.nonlinear.vector.MultiStartMultivariateVectorOptimizer:getPairComparator:[]:Comparator\u003cPointVectorValuePair\u003e"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "19",
            "21",
            "23",
            "26",
            "30",
            "101",
            "117",
            "118",
            "119",
            "120",
            "121",
            "122"
          ],
          "num": 12
        },
        {
          "qualified_names": [
            "21",
            "22",
            "25",
            "27",
            "28",
            "101",
            "117"
          ],
          "num": 7
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultiStartMultivariateVectorOptimizer.java b/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultiStartMultivariateVectorOptimizer.java\nindex 465c6ee..c90a5b3 100644\n--- a/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultiStartMultivariateVectorOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultiStartMultivariateVectorOptimizer.java\n@@ -16,18 +16,18 @@\n  */\n package org.apache.commons.math3.optim.nonlinear.vector;\n \n-import java.util.ArrayList;\n import java.util.Collections;\n-import java.util.Comparator;\n import java.util.List;\n-\n+import java.util.ArrayList;\n+import java.util.Comparator;\n import org.apache.commons.math3.exception.NotStrictlyPositiveException;\n import org.apache.commons.math3.exception.NullArgumentException;\n-import org.apache.commons.math3.linear.ArrayRealVector;\n+import org.apache.commons.math3.linear.RealMatrix;\n import org.apache.commons.math3.linear.RealVector;\n+import org.apache.commons.math3.linear.ArrayRealVector;\n+import org.apache.commons.math3.random.RandomVectorGenerator;\n import org.apache.commons.math3.optim.BaseMultiStartMultivariateOptimizer;\n import org.apache.commons.math3.optim.PointVectorValuePair;\n-import org.apache.commons.math3.random.RandomVectorGenerator;\n \n /**\n  * Multi-start optimizer for a (vector) model function.\n@@ -98,7 +98,7 @@\n     private Comparator\u003cPointVectorValuePair\u003e getPairComparator() {\n         return new Comparator\u003cPointVectorValuePair\u003e() {\n             private final RealVector target \u003d new ArrayRealVector(optimizer.getTarget(), false);\n-            private final double[] weight   \u003d optimizer.getNonCorrelatedWeight();\n+            private final RealMatrix weight \u003d optimizer.getWeight();\n \n             public int compare(final PointVectorValuePair o1,\n                                final PointVectorValuePair o2) {\n@@ -114,12 +114,7 @@\n             private double weightedResidual(final PointVectorValuePair pv) {\n                 final RealVector v \u003d new ArrayRealVector(pv.getValueRef(), false);\n                 final RealVector r \u003d target.subtract(v);\n-                double sum \u003d 0;\n-                for (int i \u003d 0; i \u003c r.getDimension(); ++i) {\n-                    final double ri \u003d r.getEntry(i);\n-                    sum +\u003d ri * weight[i] * ri;\n-                }\n-                return sum;\n+                return r.dotProduct(weight.operate(r));\n             }\n         };\n     }\n",
      "operations": [
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ImportDeclaration [1108,1158]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SimpleType [3838,3848]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ReturnStatement [4550,4589]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ArrayType [3788,3796]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [4513,4528]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ForStatement [4545,4708]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ReturnStatement [4725,4736]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java",
        "src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer:optimize:[OptimizationData... optData]:PointVectorValuePair",
            "org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer:getNonCorrelatedWeight:[]:double[]",
            "org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer:checkParameters:[]:void",
            "org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer:getWeight:[]:RealMatrix",
            "org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer:parseOptimizationData:[OptimizationData... optData]:void"
          ],
          "num": 5
        },
        {
          "qualified_names": [
            "org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer:checkParameters:[]:void",
            "org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer:optimize:[OptimizationData... optData]:PointVectorValuePair",
            "org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer:parseOptimizationData:[OptimizationData... optData]:void"
          ],
          "num": 3
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "20",
            "21",
            "23",
            "26",
            "28",
            "40",
            "41",
            "42",
            "43",
            "45",
            "46",
            "74",
            "75",
            "76",
            "77",
            "78",
            "79",
            "80",
            "81",
            "82",
            "83",
            "84",
            "85",
            "92",
            "116",
            "118",
            "122",
            "123",
            "124",
            "125",
            "126",
            "127",
            "128",
            "129",
            "130",
            "131",
            "158",
            "174",
            "175",
            "176",
            "177",
            "178",
            "181",
            "182",
            "183",
            "184",
            "185",
            "195",
            "198",
            "199"
          ],
          "num": 50
        },
        {
          "qualified_names": [
            "21",
            "22",
            "23",
            "27",
            "39",
            "68",
            "75",
            "129",
            "132",
            "156",
            "159",
            "160",
            "161",
            "202"
          ],
          "num": 14
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java b/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java\nindex 3a4b175..f43d387 100644\n--- a/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java\n@@ -17,15 +17,14 @@\n \n package org.apache.commons.math3.optim.nonlinear.vector;\n \n-import org.apache.commons.math3.analysis.MultivariateVectorFunction;\n-import org.apache.commons.math3.exception.DimensionMismatchException;\n import org.apache.commons.math3.exception.TooManyEvaluationsException;\n-import org.apache.commons.math3.linear.RealMatrix;\n+import org.apache.commons.math3.exception.DimensionMismatchException;\n+import org.apache.commons.math3.analysis.MultivariateVectorFunction;\n+import org.apache.commons.math3.optim.OptimizationData;\n import org.apache.commons.math3.optim.BaseMultivariateOptimizer;\n import org.apache.commons.math3.optim.ConvergenceChecker;\n-import org.apache.commons.math3.optim.OptimizationData;\n import org.apache.commons.math3.optim.PointVectorValuePair;\n-import org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer;\n+import org.apache.commons.math3.linear.RealMatrix;\n \n /**\n  * Base class for a multivariate vector function optimizer.\n@@ -37,13 +36,8 @@\n     extends BaseMultivariateOptimizer\u003cPointVectorValuePair\u003e {\n     /** Target values for the model function at optimum. */\n     private double[] target;\n-    /** Weight matrix.\n-     * @deprecated as of 3.1.1, replaced by weight\n-     */\n-    @Deprecated\n+    /** Weight matrix. */\n     private RealMatrix weightMatrix;\n-    /** Weight vector. */\n-    private double[] weight;\n     /** Model function. */\n     private MultivariateVectorFunction model;\n \n@@ -71,25 +65,14 @@\n \n     /**\n      * {@inheritDoc}\n-     * \u003cp\u003e\n-     * Note that for version 3.1 of Apache Commons Math, a general \u003ccode\u003eWeight\u003c/code\u003e\n-     * data was looked for, which could hold arbitrary square matrices and not only\n-     * vector as the current {@link NonCorrelatedWeight} does. This was flawed as some\n-     * optimizers like {@link GaussNewtonOptimizer} only considered the diagonal elements.\n-     * This feature was deprecated. If users need non-diagonal weights to handle correlated\n-     * observations, they will have to implement it by themselves using pre-multiplication\n-     * by a matrix in both their function implementation and observation vectors. There is\n-     * no direct support for this anymore in the Apache Commons Math library. The only\n-     * feature that is supported here is a convenience feature for non-correlated observations,\n-     * with vector only weights (i.e. weight[i] is the weight for observation i).\n-     * \u003c/p\u003e\n+     *\n      * @param optData Optimization data. The following data will be looked for:\n      * \u003cul\u003e\n      *  \u003cli\u003e{@link org.apache.commons.math3.optim.MaxEval}\u003c/li\u003e\n      *  \u003cli\u003e{@link org.apache.commons.math3.optim.InitialGuess}\u003c/li\u003e\n      *  \u003cli\u003e{@link org.apache.commons.math3.optim.SimpleBounds}\u003c/li\u003e\n      *  \u003cli\u003e{@link Target}\u003c/li\u003e\n-     *  \u003cli\u003e{@link NonCorrelatedWeight}\u003c/li\u003e\n+     *  \u003cli\u003e{@link Weight}\u003c/li\u003e\n      *  \u003cli\u003e{@link ModelFunction}\u003c/li\u003e\n      * \u003c/ul\u003e\n      * @return {@inheritDoc}\n@@ -113,22 +96,10 @@\n      * Gets the weight matrix of the observations.\n      *\n      * @return the weight matrix.\n-     * @deprecated as of 3.1.1, replaced by {@link #getNonCorrelatedWeight()}\n      */\n-    @Deprecated\n     public RealMatrix getWeight() {\n         return weightMatrix.copy();\n     }\n-\n-    /**\n-     * Gets the weights of the observations.\n-     *\n-     * @return the weights.\n-     * @since 3.1.1\n-     */\n-    public double[] getNonCorrelatedWeight() {\n-        return weight.clone();\n-    }\n     /**\n      * Gets the observed values to be matched by the objective vector\n      * function.\n@@ -155,7 +126,7 @@\n      * @param optData Optimization data. The following data will be looked for:\n      * \u003cul\u003e\n      *  \u003cli\u003e{@link Target}\u003c/li\u003e\n-     *  \u003cli\u003e{@link NonCorrelatedWeight}\u003c/li\u003e\n+     *  \u003cli\u003e{@link Weight}\u003c/li\u003e\n      *  \u003cli\u003e{@link ModelFunction}\u003c/li\u003e\n      * \u003c/ul\u003e\n      */\n@@ -171,18 +142,8 @@\n                 target \u003d ((Target) data).getTarget();\n                 continue;\n             }\n-            if (data instanceof NonCorrelatedWeight) {\n-                weight \u003d ((NonCorrelatedWeight) data).getWeight();\n-                continue;\n-            }\n-            // TODO: remove this for 4.0, when the Weight class will be removed\n             if (data instanceof Weight) {\n                 weightMatrix \u003d ((Weight) data).getWeight();\n-                weight \u003d new double[weightMatrix.getColumnDimension()];\n-                for (int i \u003d 0; i \u003c weight.length; ++i) {\n-                    // extract the diagonal of the matrix\n-                    weight[i] \u003d weightMatrix.getEntry(i, i);\n-                }\n                 continue;\n             }\n         }\n@@ -192,11 +153,12 @@\n      * Check parameters consistency.\n      *\n      * @throws DimensionMismatchException if {@link #target} and\n-     * {@link #weight} have inconsistent dimensions.\n+     * {@link #weightMatrix} have inconsistent dimensions.\n      */\n     private void checkParameters() {\n-        if (target.length !\u003d weight.length) {\n-            throw new DimensionMismatchException(target.length, weight.length);\n+        if (target.length !\u003d weightMatrix.getColumnDimension()) {\n+            throw new DimensionMismatchException(target.length,\n+                                                 weightMatrix.getColumnDimension());\n         }\n     }\n }\n",
      "operations": [
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [1670,1691]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodInvocation [5554,5587]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodInvocation [5704,5737]"
        },
        {
          "type": "delete-tree",
          "from": "ImportDeclaration [1362,1447]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "Javadoc [1756,1833]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MarkerAnnotation [1838,1849]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "FieldDeclaration [1891,1941]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: \u003cp\u003e [2836,2839]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: Note that for version 3.1 of Apache Commons Math, a general \u003ccode\u003eWeight\u003c/code\u003e [2847,2926]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: data was looked for, which could hold arbitrary square matrices and not only [2934,3010]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: vector as the current  [3018,3040]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [3040,3067]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement:  does. This was flawed as some [3067,3097]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: optimizers like  [3105,3121]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [3121,3149]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement:  only considered the diagonal elements. [3149,3188]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: This feature was deprecated. If users need non-diagonal weights to handle correlated [3196,3280]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: observations, they will have to implement it by themselves using pre-multiplication [3288,3371]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: by a matrix in both their function implementation and observation vectors. There is [3379,3462]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: no direct support for this anymore in the Apache Commons Math library. The only [3470,3549]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: feature that is supported here is a convenience feature for non-correlated observations, [3557,3645]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: with vector only weights (i.e. weight[i] is the weight for observation i). [3653,3727]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "TextElement: \u003c/p\u003e [3735,3739]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [4929,4999]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MarkerAnnotation [5012,5023]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [5107,5302]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [6595,6744]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [6943,6998]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ForStatement [7015,7193]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "QualifiedName: weight.length [7495,7508]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "QualifiedName: weight.length [7576,7589]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/math3/optim/nonlinear/vector/Weight.java",
        "src/main/java/org/apache/commons/math3/optim/nonlinear/vector/Weight.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.math3.optim.nonlinear.vector.Weight:Weight:[double[][] weight]:null",
            "org.apache.commons.math3.optim.nonlinear.vector.Weight:getWeight:[]:RealMatrix"
          ],
          "num": 2
        },
        {
          "qualified_names": [
            "org.apache.commons.math3.optim.nonlinear.vector.Weight:getWeight:[]:RealMatrix",
            "org.apache.commons.math3.optim.nonlinear.vector.Weight:Weight:[double[] weight]:null"
          ],
          "num": 2
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "31",
            "33",
            "39",
            "41",
            "43",
            "44",
            "62",
            "64"
          ],
          "num": 8
        },
        {
          "qualified_names": [
            "37",
            "39",
            "41",
            "42",
            "43",
            "44",
            "45",
            "46",
            "64",
            "66"
          ],
          "num": 10
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/Weight.java b/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/Weight.java\nindex 1b58d81..789bc25 100644\n--- a/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/Weight.java\n+++ b/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/Weight.java\n@@ -28,20 +28,22 @@\n  *\n  * @version $Id: Weight.java 1416643 2012-12-03 19:37:14Z tn $\n  * @since 3.1\n- * @deprecated as of 3.1.1, replaced by {@link NonCorrelatedWeight}\n  */\n-@Deprecated\n public class Weight implements OptimizationData {\n     /** Weight matrix. */\n     private final RealMatrix weightMatrix;\n \n     /**\n-     * Creates a weight matrix.\n+     * Creates a diagonal weight matrix.\n      *\n-     * @param weight matrix elements.\n+     * @param weight List of the values of the diagonal.\n      */\n-    public Weight(double[][] weight) {\n-        weightMatrix \u003d MatrixUtils.createRealMatrix(weight);\n+    public Weight(double[] weight) {\n+        final int dim \u003d weight.length;\n+        weightMatrix \u003d MatrixUtils.createRealMatrix(dim, dim);\n+        for (int i \u003d 0; i \u003c dim; i++) {\n+            weightMatrix.setEntry(i, i, weight[i]);\n+        }\n     }\n \n     /**\n@@ -59,9 +61,9 @@\n     }\n \n     /**\n-     * Gets the weight.\n+     * Gets the initial guess.\n      *\n-     * @return a fresh copy of the weight.\n+     * @return the initial guess.\n      */\n     public RealMatrix getWeight() {\n         return weightMatrix.copy();\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [1393,1756]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [2217,2300]"
        },
        {
          "type": "delete-tree",
          "from": "TagElement [1268,1332]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MarkerAnnotation [1337,1348]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [1473,1667]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "Javadoc [2128,2213]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java",
        "src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer:parseOptimizationData:[OptimizationData... optData]:void",
            "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer:computeWeightedJacobian:[double[] params]:RealMatrix",
            "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer:optimize:[OptimizationData... optData]:PointVectorValuePair",
            "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer:getWeightSquareRoot:[]:RealMatrix",
            "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer:computeCost:[double[] residuals]:double"
          ],
          "num": 5
        },
        {
          "qualified_names": [
            "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer:computeSigma:[double[] params, double covarianceSingularityThreshold]:double[]",
            "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer:squareRoot:[RealMatrix m]:RealMatrix",
            "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer:optimize:[OptimizationData... optData]:PointVectorValuePair",
            "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer:computeWeightedJacobian:[double[] params]:RealMatrix",
            "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer:computeCost:[double[] residuals]:double",
            "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer:parseOptimizationData:[OptimizationData... optData]:void"
          ],
          "num": 6
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "23",
            "26",
            "27",
            "30",
            "31",
            "32",
            "45",
            "46",
            "47",
            "48",
            "50",
            "51",
            "71",
            "72",
            "73",
            "74",
            "75",
            "76",
            "77",
            "78",
            "79",
            "80",
            "81",
            "82",
            "83",
            "84",
            "85",
            "86",
            "87",
            "99",
            "100",
            "101",
            "102",
            "103",
            "104",
            "105",
            "137",
            "139",
            "217",
            "269",
            "281",
            "282",
            "283",
            "284",
            "285",
            "286",
            "287",
            "288",
            "289",
            "290",
            "291"
          ],
          "num": 51
        },
        {
          "qualified_names": [
            "22",
            "26",
            "28",
            "31",
            "43",
            "64",
            "76",
            "165",
            "186",
            "238",
            "239",
            "251",
            "252",
            "253",
            "254",
            "259",
            "260",
            "261",
            "262",
            "263",
            "264",
            "265",
            "266",
            "267",
            "268"
          ],
          "num": 25
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java\nindex 7b2c6b5..b7bb6f5 100644\n--- a/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java\n@@ -19,18 +19,16 @@\n import org.apache.commons.math3.exception.DimensionMismatchException;\n import org.apache.commons.math3.exception.TooManyEvaluationsException;\n import org.apache.commons.math3.linear.ArrayRealVector;\n+import org.apache.commons.math3.linear.RealMatrix;\n import org.apache.commons.math3.linear.DecompositionSolver;\n-import org.apache.commons.math3.linear.EigenDecomposition;\n import org.apache.commons.math3.linear.MatrixUtils;\n import org.apache.commons.math3.linear.QRDecomposition;\n-import org.apache.commons.math3.linear.RealMatrix;\n-import org.apache.commons.math3.optim.ConvergenceChecker;\n+import org.apache.commons.math3.linear.EigenDecomposition;\n import org.apache.commons.math3.optim.OptimizationData;\n+import org.apache.commons.math3.optim.ConvergenceChecker;\n import org.apache.commons.math3.optim.PointVectorValuePair;\n-import org.apache.commons.math3.optim.nonlinear.vector.JacobianMultivariateVectorOptimizer;\n-import org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer;\n-import org.apache.commons.math3.optim.nonlinear.vector.NonCorrelatedWeight;\n import org.apache.commons.math3.optim.nonlinear.vector.Weight;\n+import org.apache.commons.math3.optim.nonlinear.vector.JacobianMultivariateVectorOptimizer;\n import org.apache.commons.math3.util.FastMath;\n \n /**\n@@ -42,13 +40,8 @@\n  */\n public abstract class AbstractLeastSquaresOptimizer\n     extends JacobianMultivariateVectorOptimizer {\n-    /** Square-root of the weight matrix.\n-     * @deprecated as of 3.1.1, replaced by {@link #weight}\n-     */\n-    @Deprecated\n+    /** Square-root of the weight matrix. */\n     private RealMatrix weightMatrixSqrt;\n-    /** Square-root of the weight vector. */\n-    private double[] weightSquareRoot;\n     /** Cost value (square root of the sum of the residuals). */\n     private double cost;\n \n@@ -68,23 +61,7 @@\n      * match problem dimension.\n      */\n     protected RealMatrix computeWeightedJacobian(double[] params) {\n-\n-        final double[][] jacobian \u003d computeJacobian(params);\n-\n-        if (weightSquareRoot !\u003d null) {\n-            for (int i \u003d 0; i \u003c jacobian.length; ++i) {\n-                final double wi \u003d weightSquareRoot[i];\n-                final double[] row \u003d jacobian[i];\n-                for (int j \u003d 0; j \u003c row.length; ++j) {\n-                    row[j] *\u003d wi;\n-                }\n-            }\n-            return MatrixUtils.createRealMatrix(jacobian);\n-        } else {\n-            // TODO: remove for 4.0, when the {@link Weight} class will be removed\n-            return weightMatrixSqrt.multiply(MatrixUtils.createRealMatrix(jacobian));\n-        }\n-\n+        return weightMatrixSqrt.multiply(MatrixUtils.createRealMatrix(computeJacobian(params)));\n     }\n \n     /**\n@@ -96,13 +73,7 @@\n      */\n     protected double computeCost(double[] residuals) {\n         final ArrayRealVector r \u003d new ArrayRealVector(residuals);\n-        final double[] weight \u003d getNonCorrelatedWeight();\n-        double sum \u003d 0;\n-        for (int i \u003d 0; i \u003c r.getDimension(); ++i) {\n-            final double ri \u003d r.getEntry(i);\n-            sum +\u003d ri * weight[i] * ri;\n-        }\n-        return FastMath.sqrt(sum);\n+        return FastMath.sqrt(r.dotProduct(getWeight().operate(r)));\n     }\n \n     /**\n@@ -134,9 +105,7 @@\n      * Gets the square-root of the weight matrix.\n      *\n      * @return the square-root of the weight matrix.\n-     * @deprecated as of 3.1.1, replaced with {@link MultivariateVectorOptimizer#getNonCorrelatedWeight()}\n      */\n-    @Deprecated\n     public RealMatrix getWeightSquareRoot() {\n         return weightMatrixSqrt.copy();\n     }\n@@ -214,7 +183,7 @@\n      *  \u003cli\u003e{@link org.apache.commons.math3.optim.InitialGuess}\u003c/li\u003e\n      *  \u003cli\u003e{@link org.apache.commons.math3.optim.SimpleBounds}\u003c/li\u003e\n      *  \u003cli\u003e{@link org.apache.commons.math3.optim.nonlinear.vector.Target}\u003c/li\u003e\n-     *  \u003cli\u003e{@link org.apache.commons.math3.optim.nonlinear.vector.NonCorrelatedWeight}\u003c/li\u003e\n+     *  \u003cli\u003e{@link org.apache.commons.math3.optim.nonlinear.vector.Weight}\u003c/li\u003e\n      *  \u003cli\u003e{@link org.apache.commons.math3.optim.nonlinear.vector.ModelFunction}\u003c/li\u003e\n      *  \u003cli\u003e{@link org.apache.commons.math3.optim.nonlinear.vector.ModelFunctionJacobian}\u003c/li\u003e\n      * \u003c/ul\u003e\n@@ -266,7 +235,8 @@\n     /**\n      * Scans the list of (required and optional) optimization data that\n      * characterize the problem.\n-     * If the weight is specified, the {@link #weightSquareRoot} field is recomputed.\n+     * If the weight matrix is specified, the {@link #weightMatrixSqrt}\n+     * field is recomputed.\n      *\n      * @param optData Optimization data. The following data will be looked for:\n      * \u003cul\u003e\n@@ -278,19 +248,22 @@\n         // not provided in the argument list.\n         for (OptimizationData data : optData) {\n             if (data instanceof Weight) {\n-                // TODO: remove for 4.0, when the {@link Weight} class will be removed\n-                weightSquareRoot \u003d null;\n-                final RealMatrix w \u003d ((Weight) data).getWeight();\n-                final EigenDecomposition dec \u003d new EigenDecomposition(w);\n-                weightMatrixSqrt \u003d dec.getSquareRoot();\n-            } else if (data instanceof NonCorrelatedWeight) {\n-                weightSquareRoot \u003d ((NonCorrelatedWeight) data).getWeight();\n-                for (int i \u003d 0; i \u003c weightSquareRoot.length; ++i) {\n-                    weightSquareRoot[i] \u003d FastMath.sqrt(weightSquareRoot[i]);\n-                }\n-                weightMatrixSqrt \u003d null;\n+                weightMatrixSqrt \u003d squareRoot(((Weight) data).getWeight());\n+                // If more data must be parsed, this statement _must_ be\n+                // changed to \"continue\".\n+                break;\n             }\n         }\n     }\n \n+    /**\n+     * Computes the square-root of the weight matrix.\n+     *\n+     * @param m Symmetric, positive-definite (weight) matrix.\n+     * @return the square-root of the weight matrix.\n+     */\n+    private RealMatrix squareRoot(RealMatrix m) {\n+        final EigenDecomposition dec \u003d new EigenDecomposition(m);\n+        return dec.getSquareRoot();\n+    }\n }\n",
      "operations": [
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [10030,10375]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [1972,2012]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodInvocation [3109,3145]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "BreakStatement [9988,9994]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "METHOD_INVOCATION_ARGUMENTS [9827,9854]"
        },
        {
          "type": "delete-tree",
          "from": "ImportDeclaration [1611,1694]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ImportDeclaration [1695,1770]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "Javadoc [2132,2237]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MarkerAnnotation [2242,2253]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "FieldDeclaration [2299,2378]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: jacobian [3649,3657]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: final [3040,3045]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ArrayType [3046,3056]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: jacobian [3057,3065]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "VariableDeclarationFragment [3057,3091]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "VariableDeclarationStatement [3040,3092]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "InfixExpression [3106,3130]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "Block [3132,3484]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Block [3490,3670]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "IfStatement [3102,3670]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [3957,4006]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [4015,4030]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ForStatement [4039,4178]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: sum [4208,4211]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [5163,5262]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MarkerAnnotation [5275,5286]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [11072,11096]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [11113,11162]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [11179,11236]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "METHOD_INVOCATION_RECEIVER [11272,11275]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [11312,11650]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer.java",
        "src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer:doOptimize:[]:PointVectorValuePair"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer:doOptimize:[]:PointVectorValuePair"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "20",
            "86"
          ],
          "num": 2
        },
        {
          "qualified_names": [
            "21",
            "86",
            "87",
            "88",
            "89",
            "90",
            "91"
          ],
          "num": 7
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer.java b/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer.java\nindex bb6cc8f..6aa684d 100644\n--- a/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer.java\n@@ -17,8 +17,8 @@\n package org.apache.commons.math3.optim.nonlinear.vector.jacobian;\n \n import org.apache.commons.math3.exception.ConvergenceException;\n-import org.apache.commons.math3.exception.MathInternalError;\n import org.apache.commons.math3.exception.NullArgumentException;\n+import org.apache.commons.math3.exception.MathInternalError;\n import org.apache.commons.math3.exception.util.LocalizedFormats;\n import org.apache.commons.math3.linear.ArrayRealVector;\n import org.apache.commons.math3.linear.BlockRealMatrix;\n@@ -83,7 +83,12 @@\n         final double[] targetValues \u003d getTarget();\n         final int nR \u003d targetValues.length; // Number of observed data.\n \n-        final double[] residualsWeights \u003d getNonCorrelatedWeight();\n+        final RealMatrix weightMatrix \u003d getWeight();\n+        // Diagonal of the weight matrix.\n+        final double[] residualsWeights \u003d new double[nR];\n+        for (int i \u003d 0; i \u003c nR; i++) {\n+            residualsWeights[i] \u003d weightMatrix.getEntry(i, i);\n+        }\n \n         final double[] currentPoint \u003d getStartPoint();\n         final int nC \u003d currentPoint.length;\n",
      "operations": [
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [3563,3612]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ForStatement [3621,3724]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SimpleType [3474,3484]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ArrayType [3474,3482]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java",
        "src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer:doOptimize:[]:PointVectorValuePair"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer:doOptimize:[]:PointVectorValuePair"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "20",
            "23",
            "24",
            "26",
            "304",
            "324",
            "325",
            "326",
            "327"
          ],
          "num": 9
        },
        {
          "qualified_names": [
            "23",
            "24",
            "26",
            "303",
            "323"
          ],
          "num": 5
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java b/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java\nindex e9cb692..e3b2a3f 100644\n--- a/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java\n@@ -17,14 +17,13 @@\n package org.apache.commons.math3.optim.nonlinear.vector.jacobian;\n \n import java.util.Arrays;\n-\n import org.apache.commons.math3.exception.ConvergenceException;\n import org.apache.commons.math3.exception.util.LocalizedFormats;\n-import org.apache.commons.math3.linear.RealMatrix;\n-import org.apache.commons.math3.optim.ConvergenceChecker;\n import org.apache.commons.math3.optim.PointVectorValuePair;\n-import org.apache.commons.math3.util.FastMath;\n+import org.apache.commons.math3.optim.ConvergenceChecker;\n+import org.apache.commons.math3.linear.RealMatrix;\n import org.apache.commons.math3.util.Precision;\n+import org.apache.commons.math3.util.FastMath;\n \n \n /**\n@@ -301,7 +300,7 @@\n         double[] work2   \u003d new double[nC];\n         double[] work3   \u003d new double[nC];\n \n-        final double[] weight \u003d getNonCorrelatedWeight();\n+        final RealMatrix weightMatrixSqrt \u003d getWeightSquareRoot();\n \n         // Evaluate the function at the starting point and calculate its norm.\n         double[] currentObjective \u003d computeObjectiveValue(currentPoint);\n@@ -321,10 +320,7 @@\n             // QR decomposition of the jacobian matrix\n             qrDecomposition(computeWeightedJacobian(currentPoint));\n \n-            weightedResidual \u003d new double[currentResiduals.length];\n-            for (int i \u003d 0; i \u003c weightedResidual.length; ++i) {\n-                weightedResidual[i] \u003d FastMath.sqrt(weight[i]) * currentResiduals[i];\n-            }\n+            weightedResidual \u003d weightMatrixSqrt.operate(currentResiduals);\n             for (int i \u003d 0; i \u003c nR; i++) {\n                 qtf[i] \u003d weightedResidual[i];\n             }\n",
      "operations": [
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [14254,14312]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [15128,15190]"
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [14255,14304]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [15120,15175]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ForStatement [15188,15339]",
          "to": ""
        }
      ]
    }
  ],
  "inducing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [
        "src/main/java/org/apache/commons/math3/optim/nonlinear/vector/NonCorrelatedWeight.java"
      ],
      "num": 1
    },
    "add_functions": {
      "qualified_names": [
        "org.apache.commons.math3.optim.nonlinear.vector.Weight:Weight:[double[] weight]:null",
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer:squareRoot:[RealMatrix m]:RealMatrix",
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer:computeSigma:[double[] params, double covarianceSingularityThreshold]:double[]"
      ],
      "num": 3
    },
    "delete_functions": {
      "qualified_names": [
        "org.apache.commons.math3.optim.nonlinear.vector.Weight:Weight:[double[][] weight]:null",
        "org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer:getWeight:[]:RealMatrix",
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer:getWeightSquareRoot:[]:RealMatrix",
        "org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer:getNonCorrelatedWeight:[]:double[]"
      ],
      "num": 4
    }
  },
  "trigger_tests": [
    {
      "test_class": "org.apache.commons.math3.fitting.PolynomialFitterTest",
      "test_function": "testLargeSample",
      "assertion_line": "238",
      "exception": "java.lang.OutOfMemoryError",
      "message": "Java heap space"
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/math3/optim/nonlinear/vector/Weight.java",
        "src/main/java/org/apache/commons/math3/optim/nonlinear/vector/Weight.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.math3.optim.nonlinear.vector.Weight:Weight:[double[] weight]:null"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "org.apache.commons.math3.optim.nonlinear.vector.Weight:Weight:[double[] weight]:null"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "21",
            "43",
            "44",
            "45",
            "46"
          ],
          "num": 5
        },
        {
          "qualified_names": [
            "21",
            "43"
          ],
          "num": 2
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/Weight.java b/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/Weight.java\nindex 789bc25..aa3299a 100644\n--- a/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/Weight.java\n+++ b/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/Weight.java\n@@ -18,7 +18,7 @@\n \n import org.apache.commons.math3.optim.OptimizationData;\n import org.apache.commons.math3.linear.RealMatrix;\n-import org.apache.commons.math3.linear.MatrixUtils;\n+import org.apache.commons.math3.linear.DiagonalMatrix;\n import org.apache.commons.math3.linear.NonSquareMatrixException;\n \n /**\n@@ -40,10 +40,7 @@\n      */\n     public Weight(double[] weight) {\n         final int dim \u003d weight.length;\n-        weightMatrix \u003d MatrixUtils.createRealMatrix(dim, dim);\n-        for (int i \u003d 0; i \u003c dim; i++) {\n-            weightMatrix.setEntry(i, i, weight[i]);\n-        }\n+        weightMatrix \u003d new DiagonalMatrix(weight);\n     }\n \n     /**\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "ImportDeclaration [968,1022]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [1597,1639]"
        },
        {
          "type": "delete-tree",
          "from": "ImportDeclaration [968,1019]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [1594,1648]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ForStatement [1657,1750]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java",
        "src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer:squareRoot:[RealMatrix m]:RealMatrix"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer:squareRoot:[RealMatrix m]:RealMatrix"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "22",
            "266",
            "267"
          ],
          "num": 3
        },
        {
          "qualified_names": [
            "23",
            "267",
            "268",
            "269",
            "270",
            "271",
            "272",
            "273",
            "274",
            "275",
            "276",
            "277"
          ],
          "num": 12
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java\nindex b7bb6f5..ef52943 100644\n--- a/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java\n@@ -20,6 +20,7 @@\n import org.apache.commons.math3.exception.TooManyEvaluationsException;\n import org.apache.commons.math3.linear.ArrayRealVector;\n import org.apache.commons.math3.linear.RealMatrix;\n+import org.apache.commons.math3.linear.DiagonalMatrix;\n import org.apache.commons.math3.linear.DecompositionSolver;\n import org.apache.commons.math3.linear.MatrixUtils;\n import org.apache.commons.math3.linear.QRDecomposition;\n@@ -263,7 +264,16 @@\n      * @return the square-root of the weight matrix.\n      */\n     private RealMatrix squareRoot(RealMatrix m) {\n-        final EigenDecomposition dec \u003d new EigenDecomposition(m);\n-        return dec.getSquareRoot();\n+        if (m instanceof DiagonalMatrix) {\n+            final int dim \u003d m.getRowDimension();\n+            final RealMatrix sqrtM \u003d new DiagonalMatrix(dim);\n+            for (int i \u003d 0; i \u003c dim; i++) {\n+                sqrtM.setEntry(i, i, FastMath.sqrt(m.getEntry(i, i)));\n+            }\n+            return sqrtM;\n+        } else {\n+            final EigenDecomposition dec \u003d new EigenDecomposition(m);\n+            return dec.getSquareRoot();\n+        }\n     }\n }\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "ImportDeclaration [1118,1172]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "IfStatement [10331,10768]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "InstanceofExpression [10335,10362]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Block [10364,10641]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Block [10647,10768]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  },
  "patch_changed_mths": {
    "qualified_names": [],
    "num": 0
  }
}