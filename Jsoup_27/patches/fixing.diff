diff --git a/CHANGES b/CHANGES
index bff298c..38f855b 100644
--- a/CHANGES
+++ b/CHANGES
@@ -26,6 +26,10 @@
  * If a server doesn't specify a content-type header, treat that as OK.
    <https://github.com/jhy/jsoup/issues/213>
 
+ * If a server returns an unsupported character-set header, attempt to decode the content with the default charset
+   (UTF8), instead of bailing with an unsupported charset exception.
+   <https://github.com/jhy/jsoup/issues/215>
+
 *** Release 1.6.3 [2012-May-28]
  * Fixed parsing of group-or commas in CSS selectors, to correctly handle sub-queries containing commas.
    <https://github.com/jhy/jsoup/issues/179>
diff --git a/src/main/java/org/jsoup/helper/DataUtil.java b/src/main/java/org/jsoup/helper/DataUtil.java
index 5de4f05..a4d4f51 100644
--- a/src/main/java/org/jsoup/helper/DataUtil.java
+++ b/src/main/java/org/jsoup/helper/DataUtil.java
@@ -119,7 +119,8 @@
     }
 
     /**
-     * Parse out a charset from a content type header.
+     * Parse out a charset from a content type header. If the charset is not supported, returns null (so the default
+     * will kick in.)
      * @param contentType e.g. "text/html; charset=EUC-JP"
      * @return "EUC-JP", or null if not found. Charset is trimmed and uppercased.
      */
@@ -127,7 +128,10 @@
         if (contentType == null) return null;
         Matcher m = charsetPattern.matcher(contentType);
         if (m.find()) {
-            return m.group(1).trim().toUpperCase(Locale.ENGLISH);
+            String charset = m.group(1).trim();
+            if (Charset.isSupported(charset)) return charset;
+            charset = charset.toUpperCase(Locale.ENGLISH);
+            if (Charset.isSupported(charset)) return charset;
         }
         return null;
     }
diff --git a/src/test/java/org/jsoup/helper/DataUtilTest.java b/src/test/java/org/jsoup/helper/DataUtilTest.java
index d106df5..a810ac7 100644
--- a/src/test/java/org/jsoup/helper/DataUtilTest.java
+++ b/src/test/java/org/jsoup/helper/DataUtilTest.java
@@ -12,17 +12,19 @@
 public class DataUtilTest {
     @Test
     public void testCharset() {
-        assertEquals("UTF-8", DataUtil.getCharsetFromContentType("text/html;charset=utf-8 "));
+        assertEquals("utf-8", DataUtil.getCharsetFromContentType("text/html;charset=utf-8 "));
         assertEquals("UTF-8", DataUtil.getCharsetFromContentType("text/html; charset=UTF-8"));
         assertEquals("ISO-8859-1", DataUtil.getCharsetFromContentType("text/html; charset=ISO-8859-1"));
         assertEquals(null, DataUtil.getCharsetFromContentType("text/html"));
         assertEquals(null, DataUtil.getCharsetFromContentType(null));
+        assertEquals(null, DataUtil.getCharsetFromContentType("text/html;charset=Unknown"));
     }
 
     @Test public void testQuotedCharset() {
-        assertEquals("UTF-8", DataUtil.getCharsetFromContentType("text/html; charset=\"utf-8\""));
-        assertEquals("UTF-8", DataUtil.getCharsetFromContentType("text/html;charset=\"utf-8\""));
+        assertEquals("utf-8", DataUtil.getCharsetFromContentType("text/html; charset=\"utf-8\""));
+        assertEquals("UTF-8", DataUtil.getCharsetFromContentType("text/html;charset=\"UTF-8\""));
         assertEquals("ISO-8859-1", DataUtil.getCharsetFromContentType("text/html; charset=\"ISO-8859-1\""));
+        assertEquals(null, DataUtil.getCharsetFromContentType("text/html; charset=\"Unsupported\""));
     }
     
     @Test public void discardsSpuriousByteOrderMark() {
diff --git a/src/test/java/org/jsoup/integration/UrlConnectTest.java b/src/test/java/org/jsoup/integration/UrlConnectTest.java
index a78d729..6379c15 100644
--- a/src/test/java/org/jsoup/integration/UrlConnectTest.java
+++ b/src/test/java/org/jsoup/integration/UrlConnectTest.java
@@ -183,4 +183,16 @@
         Document doc = Jsoup.connect(echoURL).cookies(cookies).get();
         assertEquals("uid=jhy; token=asdfg123", ihVal("HTTP_COOKIE", doc));
     }
+
+    @Test
+    public void handlesDodgyCharset() throws IOException {
+        // tests that when we get back "UFT8", that it is recognised as unsupported, and falls back to default instead
+        String url = "http://direct.infohound.net/tools/bad-charset.pl";
+        Connection.Response res = Jsoup.connect(url).execute();
+        assertEquals("text/html; charset=UFT8", res.header("Content-Type")); // from the header
+        assertEquals(null, res.charset()); // tried to get from header, not supported, so returns null
+        Document doc = res.parse(); // would throw an error if charset unsupported
+        assertTrue(doc.text().contains("Hello!"));
+        assertEquals("UTF-8", res.charset()); // set from default on parse
+    }
 }
