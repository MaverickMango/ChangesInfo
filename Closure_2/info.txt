{
  "bugName": "Closure_2_buggy",
  "bugId": "9",
  "repo": {
    "name": "tmp/Closure_2_buggy/.git"
  },
  "buggyCommit": {
    "sha": "b2430d29987b54e977a5e5e8db9242f4486c750b",
    "branchName": "HEAD",
    "fullMessage": "\nProposal: change how we represent property sets on objects.\nI went down this rabbit-hole to experiment with a few different things:\n- Separating property bookkeeping from type relation bookkeeping.\n- Use the same property-store for \"new Foo()\" and \"Foo.prototype\".\nI don\u0027t think that maintaining separate property maps for these two\ntypes actually buys us anything, and it\u0027s inconsistent with how they\u0027re\nused in practice.\n- Use the same property-store for \"Foo.\u003cBar\u003e\" and \"Foo.\u003cBaz\u003e\"\nI actually like how this ended up--it\u0027s a lot easier to see how properties\nare inherited. But I\u0027m curious what others think.\n\nR\u003djohnlenz,dimvar\nDELTA\u003d507  (347 added, 143 deleted, 17 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d5910\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2361 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
    "repoName": "tmp/Closure_2_buggy/.git"
  },
  "commitBeforeBuggy": {
    "sha": "05920e53098c1e924113a5143b01bd8a9b7df980",
    "branchName": "HEAD",
    "fullMessage": "\nNo code changes!\nThis is just some proofreading of the comments as I read some of the\nsource files. Let me know if I butchered anything.\n\nR\u003dacleung\nDELTA\u003d25  (0 added, 1 deleted, 24 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d5909\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2360 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
    "repoName": "tmp/Closure_2_buggy/.git"
  },
  "fixedCommit": {
    "sha": "d1cfe67977d8f3aaa85ec20c262171da394d5977",
    "branchName": "HEAD",
    "fullMessage": "\nFix null pointer bug encountered when trying to extend non-existent interfaces.\n\nOriginal report@closure-compiler-discuss:\nhttps://groups.google.com/forum/#!topic/closure-compiler-discuss/kmP0lULzue4\n\nFixes issue 884 (http://code.google.com/p/closure-compiler/issues/detail?id\u003d884)\n\nR\u003dnicksantos\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d6042\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2423 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
    "repoName": "tmp/Closure_2_buggy/.git"
  },
  "commitBeforeFixing": {
    "sha": "61095090415cff7cae4f3645fa76ee7cdd3ee23d",
    "branchName": "HEAD",
    "fullMessage": "\nFix stack overflow with cycle in prototype chain.\n\nThis cycle starts when detectImplicitPrototypeCycle calls getImplicitPrototype.\nGetImplicitPrototype calls referencedObjType.getImplicitPrototype(), which SOs\nbecause this \u003d\u003d this.referencedObjType.\n\nR\u003dnicksantos,johnlenz,dimvar\nDELTA\u003d20 (19 added, 1 deleted, 0 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d6041\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2422 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
    "repoName": "tmp/Closure_2_buggy/.git"
  }
}