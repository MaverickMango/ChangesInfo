diff --git a/src/main/java/org/apache/commons/lang3/SerializationUtils.java b/src/main/java/org/apache/commons/lang3/SerializationUtils.java
index b766b21..7c89b61 100644
--- a/src/main/java/org/apache/commons/lang3/SerializationUtils.java
+++ b/src/main/java/org/apache/commons/lang3/SerializationUtils.java
@@ -25,6 +25,8 @@
 import java.io.ObjectStreamClass;
 import java.io.OutputStream;
 import java.io.Serializable;
+import java.util.HashMap;
+import java.util.Map;
 
 /**
  * <p>Assists with the serialization process and performs additional functionality based
@@ -234,8 +236,10 @@
      * class here is a workaround, see the JIRA issue LANG-626. </p>
      */
      static class ClassLoaderAwareObjectInputStream extends ObjectInputStream {
+        private static final Map<String, Class<?>> primitiveTypes = 
+                new HashMap<String, Class<?>>();
         private ClassLoader classLoader;
-
+        
         /**
          * Constructor.
          * @param in The <code>InputStream</code>.
@@ -246,6 +250,16 @@
         public ClassLoaderAwareObjectInputStream(InputStream in, ClassLoader classLoader) throws IOException {
             super(in);
             this.classLoader = classLoader;
+
+            primitiveTypes.put("byte", byte.class);
+            primitiveTypes.put("short", short.class);
+            primitiveTypes.put("int", int.class);
+            primitiveTypes.put("long", long.class);
+            primitiveTypes.put("float", float.class);
+            primitiveTypes.put("double", double.class);
+            primitiveTypes.put("boolean", boolean.class);
+            primitiveTypes.put("char", char.class);
+            primitiveTypes.put("void", void.class);
         }
 
         /**
@@ -262,7 +276,15 @@
             try {
                 return Class.forName(name, false, classLoader);
             } catch (ClassNotFoundException ex) {
-                return Class.forName(name, false, Thread.currentThread().getContextClassLoader());
+                try {
+                    return Class.forName(name, false, Thread.currentThread().getContextClassLoader());
+                } catch (ClassNotFoundException cnfe) {
+                    Class<?> cls = primitiveTypes.get(name);
+                    if (cls != null)
+                        return cls;
+                    else
+                        throw cnfe;
+                }
             }
         }
 
diff --git a/src/site/changes/changes.xml b/src/site/changes/changes.xml
index e859411..ec922c6 100644
--- a/src/site/changes/changes.xml
+++ b/src/site/changes/changes.xml
@@ -22,6 +22,7 @@
   <body>
 
   <release version="3.2" date="TBA" description="Next release">
+    <action type="fix" issue="LANG-788">SerializationUtils throws ClassNotFoundException when cloning primitive classes</action>
     <action type="fix" issue="LANG-786">StringUtils equals() relies on undefined behavior</action>
     <action type="fix" issue="LANG-783">Documentation bug: StringUtils.split</action>
     <action type="fix" issue="LANG-776">TypeUtilsTest contains incorrect type assignability assertion</action>
diff --git a/src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java b/src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java
index 01c98cd..9bf9c0d 100644
--- a/src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java
+++ b/src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java
@@ -364,6 +364,16 @@
         }
         fail();
     }
+    
+    public void testPrimitiveTypeClassSerialization() {
+        Class<?>[] primitiveTypes = { byte.class, short.class, int.class, long.class, float.class, double.class,
+                boolean.class, char.class, void.class };
+
+        for (Class<?> primitiveType : primitiveTypes) {
+            Class<?> clone = SerializationUtils.clone(primitiveType);
+            assertEquals(primitiveType, clone);
+        }
+    }
 
 }
 
