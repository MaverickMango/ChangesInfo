diff -u -r data/changesInfo//Lang_13/properties/modified_classes/inducing/src/main/java/org/apache/commons/lang3/SerializationUtils.java data/changesInfo//Lang_13/cleaned/fixing/src/main/java/org/apache/commons/lang3/SerializationUtils.java
--- data/changesInfo//Lang_13/properties/modified_classes/inducing/src/main/java/org/apache/commons/lang3/SerializationUtils.java	2023-12-27 22:45:45.595588508 -0800
+++ data/changesInfo//Lang_13/cleaned/fixing/src/main/java/org/apache/commons/lang3/SerializationUtils.java	2023-06-20 06:48:37.303596867 -0700
@@ -25,6 +25,8 @@
 import java.io.ObjectStreamClass;
 import java.io.OutputStream;
 import java.io.Serializable;
+import java.util.HashMap;
+import java.util.Map;
 
 /**
  * <p>Assists with the serialization process and performs additional functionality based
@@ -232,6 +234,8 @@
      * class here is a workaround, see the JIRA issue LANG-626. </p>
      */
      static class ClassLoaderAwareObjectInputStream extends ObjectInputStream {
+        private static final Map<String, Class<?>> primitiveTypes =
+                new HashMap<String, Class<?>>();
         private ClassLoader classLoader;
 
         /**
@@ -244,6 +248,16 @@
         public ClassLoaderAwareObjectInputStream(InputStream in, ClassLoader classLoader) throws IOException {
             super(in);
             this.classLoader = classLoader;
+
+            primitiveTypes.put("byte", byte.class);
+            primitiveTypes.put("short", short.class);
+            primitiveTypes.put("int", int.class);
+            primitiveTypes.put("long", long.class);
+            primitiveTypes.put("float", float.class);
+            primitiveTypes.put("double", double.class);
+            primitiveTypes.put("boolean", boolean.class);
+            primitiveTypes.put("char", char.class);
+            primitiveTypes.put("void", void.class);
         }
 
         /**
@@ -260,7 +274,15 @@
             try {
                 return Class.forName(name, false, classLoader);
             } catch (ClassNotFoundException ex) {
-                return Class.forName(name, false, Thread.currentThread().getContextClassLoader());
+                try {
+                    return Class.forName(name, false, Thread.currentThread().getContextClassLoader());
+                } catch (ClassNotFoundException cnfe) {
+                    Class<?> cls = primitiveTypes.get(name);
+                    if (cls != null)
+                        return cls;
+                    else
+                        throw cnfe;
+                }
             }
         }
 
Only in data/changesInfo//Lang_13/properties/modified_classes/inducing/src: test
