{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "/home/liumengjiao/Desktop/CI/Benchmark/data/changesInfo/",
  "properties": {
    "trigger.tests": "org.jsoup.safety.CleanerTest::handlesFramesets",
    "test.dir": "src/test/java",
    "clz.modified": "org.jsoup.safety.Cleaner",
    "src.dir": "src/main/java"
  },
  "timeoutSecond": 100,
  "proj": "Jsoup",
  "id": "26",
  "workingDir": "../bugs/Jsoup_26_buggy",
  "buggyCommit": "074d9bfd5476d0430e75073fb27001f43435c081",
  "inducingCommit": "8749726a79c22451b1f01b14fb2137f734e926b4",
  "originalCommit": "481542f5c74c013b06f6b80e8e9bb30ddad382dd",
  "bug_name": "Jsoup_26",
  "derive": "defects4j",
  "original_fixing_commit": "d7b5d5b28a6dd7ff198f02e1ee82160220135a74",
  "buildFiles_changed": true,
  "regression": false,
  "inducing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/jsoup/helper/DataUtil.java",
        "src/main/java/org/jsoup/helper/DataUtil.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.jsoup.helper.DataUtil:load:[File in, String charsetName, String baseUri]:Document"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "org.jsoup.helper.DataUtil:load:[File in, String charsetName, String baseUri]:Document"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "8",
            "33",
            "36"
          ],
          "num": 3
        },
        {
          "qualified_names": [
            "9",
            "10",
            "35",
            "38",
            "39"
          ],
          "num": 5
        }
      ],
      "diff": "diff --git a/src/main/java/org/jsoup/helper/DataUtil.java b/src/main/java/org/jsoup/helper/DataUtil.java\nindex 39ddb23..210837a 100644\n--- a/src/main/java/org/jsoup/helper/DataUtil.java\n+++ b/src/main/java/org/jsoup/helper/DataUtil.java\n@@ -6,6 +6,8 @@\n \n import java.io.*;\n import java.nio.ByteBuffer;\n+import java.nio.MappedByteBuffer;\n+import java.nio.channels.FileChannel;\n import java.nio.charset.Charset;\n import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n@@ -30,10 +32,11 @@\n      * @throws IOException on IO error\n      */\n     public static Document load(File in, String charsetName, String baseUri) throws IOException {\n-        InputStream inStream \u003d null;\n+        FileInputStream inStream \u003d null;\n         try {\n             inStream \u003d new FileInputStream(in);\n-            return load(inStream, charsetName, baseUri);\n+            MappedByteBuffer byteData \u003d inStream.getChannel().map(FileChannel.MapMode.READ_ONLY, 0, in.length());\n+            return parseByteData(byteData, charsetName, baseUri);\n         } finally {\n             if (inStream !\u003d null)\n                 inStream.close();\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "ImportDeclaration [163,196]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ImportDeclaration [197,234]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [1191,1292]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ReturnStatement [1305,1358]"
        },
        {
          "type": "delete-tree",
          "from": "ReturnStatement [1115,1159]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/jsoup/helper/StringUtil.java",
        "src/main/java/org/jsoup/helper/StringUtil.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.jsoup.helper.StringUtil:normaliseWhitespace:[String string]:String"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "org.jsoup.helper.StringUtil:in:[String needle, String... haystack]:boolean"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "122"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "123",
            "124",
            "125",
            "126",
            "127",
            "128",
            "129",
            "130"
          ],
          "num": 8
        }
      ],
      "diff": "diff --git a/src/main/java/org/jsoup/helper/StringUtil.java b/src/main/java/org/jsoup/helper/StringUtil.java\nindex d946555..6bbf667 100644\n--- a/src/main/java/org/jsoup/helper/StringUtil.java\n+++ b/src/main/java/org/jsoup/helper/StringUtil.java\n@@ -120,4 +120,12 @@\n         }\n         return modified ? sb.toString() : string;\n     }\n+\n+    public static boolean in(String needle, String... haystack) {\n+        for (String hay : haystack) {\n+            if (hay.equals(needle))\n+            return true;\n+        }\n+        return false;\n+    }\n }\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [3703,3901]"
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/jsoup/helper/Validate.java",
        "src/main/java/org/jsoup/helper/Validate.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.jsoup.helper.Validate:noNullElements:[Object[] objects]:void",
            "org.jsoup.helper.Validate:notEmpty:[String string, String msg]:void"
          ],
          "num": 2
        },
        {
          "qualified_names": [
            "org.jsoup.helper.Validate:noNullElements:[Object[] objects]:void",
            "org.jsoup.helper.Validate:fail:[String msg]:void",
            "org.jsoup.helper.Validate:isFalse:[boolean val, String msg]:void",
            "org.jsoup.helper.Validate:isFalse:[boolean val]:void"
          ],
          "num": 4
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "48",
            "84"
          ],
          "num": 2
        },
        {
          "qualified_names": [
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57",
            "58",
            "59",
            "60",
            "61",
            "62",
            "63",
            "64",
            "65",
            "66",
            "67",
            "104",
            "105",
            "106",
            "107",
            "108",
            "109",
            "110",
            "111"
          ],
          "num": 27
        }
      ],
      "diff": "diff --git a/src/main/java/org/jsoup/helper/Validate.java b/src/main/java/org/jsoup/helper/Validate.java\nindex 1a2f9e7..090e92a 100644\n--- a/src/main/java/org/jsoup/helper/Validate.java\n+++ b/src/main/java/org/jsoup/helper/Validate.java\n@@ -46,6 +46,25 @@\n     }\n \n     /**\n+     * Validates that the value is false\n+     * @param val object to test\n+     */\n+    public static void isFalse(boolean val) {\n+        if (val)\n+            throw new IllegalArgumentException(\"Must be false\");\n+    }\n+\n+    /**\n+     * Validates that the value is false\n+     * @param val object to test\n+     * @param msg message to output if validation fails\n+     */\n+    public static void isFalse(boolean val, String msg) {\n+        if (val)\n+            throw new IllegalArgumentException(msg);\n+    }\n+\n+    /**\n      * Validates that the array contains no null elements\n      * @param objects the array to test\n      */\n@@ -82,4 +101,12 @@\n         if (string \u003d\u003d null || string.length() \u003d\u003d 0)\n             throw new IllegalArgumentException(msg);\n     }\n+\n+    /**\n+     Cause a failure.\n+     @param msg message to output.\n+     */\n+    public static void fail(String msg) {\n+        throw new IllegalArgumentException(msg);\n+    }\n }\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [1203,1422]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [1428,1703]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [2949,3114]"
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/jsoup/nodes/Attributes.java",
        "src/main/java/org/jsoup/nodes/Attributes.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.jsoup.nodes.Attributes:put:[Attribute attribute]:void",
            "org.jsoup.nodes.Attributes:size:[]:int",
            "org.jsoup.nodes.Attributes:clone:[]:Attributes",
            "org.jsoup.nodes.Attributes:hasKey:[String key]:boolean",
            "org.jsoup.nodes.Attributes:addAll:[Attributes incoming]:void",
            "org.jsoup.nodes.Attributes:asList:[]:List\u003cAttribute\u003e",
            "org.jsoup.nodes.Attributes:get:[String key]:String",
            "org.jsoup.nodes.Attributes:html:[StringBuilder accum, Document.OutputSettings out]:void",
            "org.jsoup.nodes.Attributes:remove:[String key]:void"
          ],
          "num": 9
        },
        {
          "qualified_names": [
            "org.jsoup.nodes.Attributes:addAll:[Attributes incoming]:void",
            "org.jsoup.nodes.Attributes\\$Dataset:Dataset:[]:null",
            "org.jsoup.nodes.Attributes:asList:[]:List\u003cAttribute\u003e",
            "org.jsoup.nodes.Attributes:get:[String key]:String",
            "org.jsoup.nodes.Attributes:remove:[String key]:void",
            "org.jsoup.nodes.Attributes:html:[StringBuilder accum, Document.OutputSettings out]:void",
            "org.jsoup.nodes.Attributes:put:[Attribute attribute]:void",
            "org.jsoup.nodes.Attributes:size:[]:int",
            "org.jsoup.nodes.Attributes:clone:[]:Attributes",
            "org.jsoup.nodes.Attributes:hasKey:[String key]:boolean"
          ],
          "num": 10
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "20",
            "31",
            "51",
            "60",
            "70",
            "77",
            "85",
            "98",
            "125",
            "155",
            "169"
          ],
          "num": 11
        },
        {
          "qualified_names": [
            "20",
            "22",
            "32",
            "33",
            "34",
            "35",
            "56",
            "57",
            "67",
            "68",
            "78",
            "86",
            "87",
            "96",
            "97",
            "98",
            "99",
            "113",
            "114",
            "115",
            "143",
            "144",
            "145",
            "176",
            "177",
            "178",
            "193",
            "194",
            "195",
            "196",
            "197"
          ],
          "num": 31
        }
      ],
      "diff": "diff --git a/src/main/java/org/jsoup/nodes/Attributes.java b/src/main/java/org/jsoup/nodes/Attributes.java\nindex 44b90ef..9436750 100644\n--- a/src/main/java/org/jsoup/nodes/Attributes.java\n+++ b/src/main/java/org/jsoup/nodes/Attributes.java\n@@ -17,8 +17,9 @@\n public class Attributes implements Iterable\u003cAttribute\u003e, Cloneable {\n     protected static final String dataPrefix \u003d \"data-\";\n     \n-    private LinkedHashMap\u003cString, Attribute\u003e attributes \u003d new LinkedHashMap\u003cString, Attribute\u003e(2);\n+    private LinkedHashMap\u003cString, Attribute\u003e attributes \u003d null;\n     // linked hash map to preserve insertion order.\n+    // null be default as so many elements have no attributes -- saves a good chunk of memory\n \n     /**\n      Get an attribute value by key.\n@@ -28,7 +29,10 @@\n      */\n     public String get(String key) {\n         Validate.notEmpty(key);\n-        \n+\n+        if (attributes \u003d\u003d null)\n+            return \"\";\n+\n         Attribute attr \u003d attributes.get(key.toLowerCase());\n         return attr !\u003d null ? attr.getValue() : \"\";\n     }\n@@ -49,6 +53,8 @@\n      */\n     public void put(Attribute attribute) {\n         Validate.notNull(attribute);\n+        if (attributes \u003d\u003d null)\n+             attributes \u003d new LinkedHashMap\u003cString, Attribute\u003e(2);\n         attributes.put(attribute.getKey(), attribute);\n     }\n \n@@ -58,6 +64,8 @@\n      */\n     public void remove(String key) {\n         Validate.notEmpty(key);\n+        if (attributes \u003d\u003d null)\n+            return;\n         attributes.remove(key.toLowerCase());\n     }\n \n@@ -67,7 +75,7 @@\n      @return true if key exists, false otherwise\n      */\n     public boolean hasKey(String key) {\n-        return attributes.containsKey(key.toLowerCase());\n+        return attributes !\u003d null \u0026\u0026 attributes.containsKey(key.toLowerCase());\n     }\n \n     /**\n@@ -75,6 +83,8 @@\n      @return size\n      */\n     public int size() {\n+        if (attributes \u003d\u003d null)\n+            return 0;\n         return attributes.size();\n     }\n \n@@ -83,6 +93,10 @@\n      @param incoming attributes to add to these attributes.\n      */\n     public void addAll(Attributes incoming) {\n+        if (incoming.size() \u003d\u003d 0)\n+            return;\n+        if (attributes \u003d\u003d null)\n+            attributes \u003d new LinkedHashMap\u003cString, Attribute\u003e(incoming.size());\n         attributes.putAll(incoming.attributes);\n     }\n     \n@@ -96,6 +110,9 @@\n      @return an view of the attributes as a List.\n      */\n     public List\u003cAttribute\u003e asList() {\n+        if (attributes \u003d\u003d null)\n+            return Collections.emptyList();\n+\n         List\u003cAttribute\u003e list \u003d new ArrayList\u003cAttribute\u003e(attributes.size());\n         for (Map.Entry\u003cString, Attribute\u003e entry : attributes.entrySet()) {\n             list.add(entry.getValue());\n@@ -123,6 +140,9 @@\n     }\n     \n     void html(StringBuilder accum, Document.OutputSettings out) {\n+        if (attributes \u003d\u003d null)\n+            return;\n+        \n         for (Map.Entry\u003cString, Attribute\u003e entry : attributes.entrySet()) {\n             Attribute attribute \u003d entry.getValue();\n             accum.append(\" \");\n@@ -153,6 +173,9 @@\n \n     @Override\n     public Attributes clone() {\n+        if (attributes \u003d\u003d null)\n+            return new Attributes();\n+\n         Attributes clone;\n         try {\n             clone \u003d (Attributes) super.clone();\n@@ -167,6 +190,11 @@\n \n     private class Dataset extends AbstractMap\u003cString, String\u003e {\n \n+        private Dataset() {\n+            if (attributes \u003d\u003d null)\n+                attributes \u003d new LinkedHashMap\u003cString, Attribute\u003e(2);\n+        }\n+\n         public Set\u003cEntry\u003cString, String\u003e\u003e entrySet() {\n             return new EntrySet();\n         }\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [5752,5887]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "NullLiteral [586,590]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [997,1043]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [1628,1718]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [1947,1990]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [2449,2494]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [2729,2774]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [2783,2886]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [3321,3388]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [4345,4388]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [5201,5261]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "InfixExpression [2264,2327]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "InfixExpression [2264,2282]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "INFIX_EXPRESSION_OPERATOR: \u0026\u0026 [2283,2285]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ClassInstanceCreation [586,625]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/jsoup/nodes/Document.java",
        "src/main/java/org/jsoup/nodes/Document.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.jsoup.nodes.Document:outputSettings:[]:OutputSettings"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "org.jsoup.nodes.Document:quirksMode:[QuirksMode quirksMode]:Document",
            "org.jsoup.nodes.Document:quirksMode:[]:QuirksMode"
          ],
          "num": 2
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "17",
            "334"
          ],
          "num": 2
        },
        {
          "qualified_names": [
            "18",
            "336",
            "337",
            "338",
            "339",
            "340",
            "341",
            "342",
            "343",
            "344",
            "345",
            "346",
            "347",
            "348"
          ],
          "num": 14
        }
      ],
      "diff": "diff --git a/src/main/java/org/jsoup/nodes/Document.java b/src/main/java/org/jsoup/nodes/Document.java\nindex 83141e7..bdfdf80 100644\n--- a/src/main/java/org/jsoup/nodes/Document.java\n+++ b/src/main/java/org/jsoup/nodes/Document.java\n@@ -15,6 +15,7 @@\n  @author Jonathan Hedley, jonathan@hedley.net */\n public class Document extends Element {\n     private OutputSettings outputSettings \u003d new OutputSettings();\n+    private QuirksMode quirksMode \u003d QuirksMode.noQuirks;\n \n     /**\n      Create a new, empty Document.\n@@ -332,5 +333,18 @@\n     public OutputSettings outputSettings() {\n         return outputSettings;\n     }\n+\n+    public enum QuirksMode {\n+        noQuirks, quirks, limitedQuirks;\n+    }\n+\n+    public QuirksMode quirksMode() {\n+        return quirksMode;\n+    }\n+\n+    public Document quirksMode(QuirksMode quirksMode) {\n+        this.quirksMode \u003d quirksMode;\n+        return this;\n+    }\n }\n \n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldDeclaration [431,483]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "EnumDeclaration [11244,11315]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [11321,11386]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [11392,11508]"
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/jsoup/nodes/Element.java",
        "src/main/java/org/jsoup/nodes/Element.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.jsoup.nodes.Element:append:[String html]:Element",
            "org.jsoup.nodes.Element:prepend:[String html]:Element",
            "org.jsoup.nodes.Element:appendChild:[Node child]:Element",
            "org.jsoup.nodes.Element:after:[String html]:Element",
            "org.jsoup.nodes.Element:className:[]:String",
            "org.jsoup.nodes.Element:equals:[Object o]:boolean",
            "org.jsoup.nodes.Element:empty:[]:Element"
          ],
          "num": 7
        },
        {
          "qualified_names": [
            "org.jsoup.nodes.Element:after:[String html]:Element",
            "org.jsoup.nodes.Element:after:[Node node]:Element",
            "org.jsoup.nodes.Element:hashCode:[]:int",
            "org.jsoup.nodes.Element:className:[]:String",
            "org.jsoup.nodes.Element:before:[Node node]:Element",
            "org.jsoup.nodes.Element:append:[String html]:Element",
            "org.jsoup.nodes.Element:equals:[Object o]:boolean",
            "org.jsoup.nodes.Element:appendChild:[Node child]:Element",
            "org.jsoup.nodes.Element:prepend:[String html]:Element",
            "org.jsoup.nodes.Element:empty:[]:Element"
          ],
          "num": 10
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "217",
            "300",
            "301",
            "302",
            "315",
            "316",
            "332",
            "344",
            "851",
            "1023",
            "1024",
            "1025",
            "1026",
            "1027",
            "1028",
            "1029",
            "1030",
            "1031"
          ],
          "num": 18
        },
        {
          "qualified_names": [
            "217",
            "300",
            "301",
            "302",
            "315",
            "316",
            "333",
            "334",
            "335",
            "336",
            "337",
            "338",
            "339",
            "340",
            "341",
            "342",
            "343",
            "356",
            "357",
            "358",
            "359",
            "360",
            "361",
            "362",
            "363",
            "364",
            "365",
            "366",
            "873",
            "1045",
            "1050"
          ],
          "num": 31
        }
      ],
      "diff": "diff --git a/src/main/java/org/jsoup/nodes/Element.java b/src/main/java/org/jsoup/nodes/Element.java\nindex 8043c55..441ebab 100644\n--- a/src/main/java/org/jsoup/nodes/Element.java\n+++ b/src/main/java/org/jsoup/nodes/Element.java\n@@ -214,7 +214,7 @@\n     }\n     \n     /**\n-     * Add a node to the last child of this element.\n+     * Add a node child node to this element.\n      * \n      * @param child node to add. Must not already have a parent.\n      * @return this element, so that you can add more child nodes or elements.\n@@ -297,9 +297,9 @@\n      */\n     public Element append(String html) {\n         Validate.notNull(html);\n-        \n-        Element fragment \u003d Parser.parseBodyFragmentRelaxed(html, baseUri()).body();\n-        addChildren(fragment.childNodesAsArray());\n+\n+        List\u003cNode\u003e nodes \u003d Parser.parseFragment(html, this, baseUri());\n+        addChildren(nodes.toArray(new Node[nodes.size()]));\n         return this;\n     }\n     \n@@ -312,8 +312,8 @@\n     public Element prepend(String html) {\n         Validate.notNull(html);\n         \n-        Element fragment \u003d Parser.parseBodyFragmentRelaxed(html, baseUri()).body();\n-        addChildren(0, fragment.childNodesAsArray());\n+        List\u003cNode\u003e nodes \u003d Parser.parseFragment(html, this, baseUri());\n+        addChildren(0, nodes.toArray(new Node[nodes.size()]));\n         return this;\n     }\n \n@@ -330,6 +330,17 @@\n     }\n \n     /**\n+     * Insert the specified node into the DOM before this node (i.e. as a preceeding sibling).\n+     * @param node to add before this element\n+     * @return this Element, for chaining\n+     * @see #after(Node)\n+     */\n+    @Override\n+    public Element before(Node node) {\n+        return (Element) super.before(node);\n+    }\n+\n+    /**\n      * Insert the specified HTML into the DOM after this element (i.e. as a following sibling).\n      *\n      * @param html HTML to add after this element\n@@ -342,6 +353,17 @@\n     }\n \n     /**\n+     * Insert the specified node into the DOM after this node (i.e. as a following sibling).\n+     * @param node to add after this element\n+     * @return this element, for chaining\n+     * @see #before(Node)\n+     */\n+    @Override\n+    public Element after(Node node) {\n+        return (Element) super.after(node);\n+    }\n+\n+    /**\n      * Remove all of the element\u0027s child nodes. Any attributes are left as-is.\n      * @return this element\n      */\n@@ -848,7 +870,7 @@\n      * @return The literal class attribute, or \u003cb\u003eempty string\u003c/b\u003e if no class attribute set.\n      */\n     public String className() {\n-        return attributes.hasKey(\"class\") ? attributes.get(\"class\") : \"\";\n+        return attr(\"class\");\n     }\n \n     /**\n@@ -1020,19 +1042,12 @@\n \n     @Override\n     public boolean equals(Object o) {\n-        if (this \u003d\u003d o) return true;\n-        if (!(o instanceof Element)) return false;\n-        if (!super.equals(o)) return false;\n-\n-        Element element \u003d (Element) o;\n-\n-        if (tag !\u003d null ? !tag.equals(element.tag) : element.tag !\u003d null) return false;\n-\n-        return true;\n+        return this \u003d\u003d o;\n     }\n \n     @Override\n     public int hashCode() {\n+        // todo: fixup, not very useful\n         int result \u003d super.hashCode();\n         result \u003d 31 * result + (tag !\u003d null ? tag.hashCode() : 0);\n         return result;\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [10715,11038]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [11388,11707]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [9675,9738]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [10208,10271]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ReturnStatement [31205,31226]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "ReturnStatement [36438,36455]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "METHOD_INVOCATION_ARGUMENTS [9773,9795]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "METHOD_INVOCATION_ARGUMENTS [10309,10331]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [9690,9765]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [10226,10301]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ReturnStatement [30572,30637]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ReturnStatement [35864,35876]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "IfStatement [35849,35876]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [35885,35927]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [35936,35971]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [35981,36011]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [36021,36100]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ReturnStatement [36110,36122]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/jsoup/nodes/Entities.java",
        "src/main/java/org/jsoup/nodes/Entities.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.jsoup.nodes.Entities:unescape:[String string, boolean strict]:String"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "org.jsoup.nodes.Entities:getCharacterByName:[String name]:Character",
            "org.jsoup.nodes.Entities:Entities:[]:null",
            "org.jsoup.nodes.Entities:isNamedEntity:[String name]:boolean",
            "org.jsoup.nodes.Entities:unescape:[String string, boolean strict]:String"
          ],
          "num": 4
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "40",
            "72"
          ],
          "num": 2
        },
        {
          "qualified_names": [
            "41",
            "42",
            "43",
            "44",
            "45",
            "46",
            "47",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57",
            "58",
            "59",
            "60",
            "93"
          ],
          "num": 21
        }
      ],
      "diff": "diff --git a/src/main/java/org/jsoup/nodes/Entities.java b/src/main/java/org/jsoup/nodes/Entities.java\nindex fc33a4c..b5f5b05 100644\n--- a/src/main/java/org/jsoup/nodes/Entities.java\n+++ b/src/main/java/org/jsoup/nodes/Entities.java\n@@ -38,6 +38,26 @@\n     private static final Pattern unescapePattern \u003d Pattern.compile(\"\u0026(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]+\\\\d*);?\");\n     private static final Pattern strictUnescapePattern \u003d Pattern.compile(\"\u0026(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]+\\\\d*);\");\n \n+    private Entities() {}\n+\n+    /**\n+     * Check if the input is a known named entity\n+     * @param name the possible entity name (e.g. \"lt\" or \"amp\"\n+     * @return true if a known named entity\n+     */\n+    public static boolean isNamedEntity(String name) {\n+        return full.containsKey(name);\n+    }\n+\n+    /**\n+     * Get the Character value of the named entity\n+     * @param name named entity (e.g. \"lt\" or \"amp\")\n+     * @return the Character value of the named entity (e.g. \u0027\u003c\u0027 or \u0027\u0026\u0027)\n+     */\n+    public static Character getCharacterByName(String name) {\n+        return full.get(name);\n+    }\n+    \n     static String escape(String string, Document.OutputSettings out) {\n         return escape(string, out.encoder(), out.escapeMode());\n     }\n@@ -70,6 +90,7 @@\n      * @return\n      */\n     static String unescape(String string, boolean strict) {\n+        // todo: change this method to use Tokeniser.consumeCharacterReference\n         if (!string.contains(\"\u0026\"))\n             return string;\n \n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [1381,1402]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [1408,1677]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [1683,1970]"
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/jsoup/nodes/Node.java",
        "src/main/java/org/jsoup/nodes/Node.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.jsoup.nodes.Node:before:[String html]:Node",
            "org.jsoup.nodes.Node:wrap:[String html]:Node",
            "org.jsoup.nodes.Node:after:[String html]:Node",
            "org.jsoup.nodes.Node:addSiblingHtml:[int index, String html]:void"
          ],
          "num": 4
        },
        {
          "qualified_names": [
            "org.jsoup.nodes.Node:addSiblingHtml:[int index, String html]:void",
            "org.jsoup.nodes.Node:before:[String html]:Node",
            "org.jsoup.nodes.Node:after:[String html]:Node",
            "org.jsoup.nodes.Node:after:[Node node]:Node",
            "org.jsoup.nodes.Node:before:[Node node]:Node",
            "org.jsoup.nodes.Node:wrap:[String html]:Node"
          ],
          "num": 6
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "6",
            "238",
            "249",
            "262",
            "263",
            "274",
            "275",
            "276",
            "277",
            "285",
            "286",
            "287"
          ],
          "num": 12
        },
        {
          "qualified_names": [
            "5",
            "237",
            "247",
            "248",
            "249",
            "250",
            "251",
            "252",
            "253",
            "254",
            "255",
            "256",
            "257",
            "258",
            "259",
            "260",
            "262",
            "271",
            "272",
            "273",
            "274",
            "275",
            "276",
            "277",
            "278",
            "279",
            "280",
            "281",
            "282",
            "283",
            "284",
            "289",
            "290",
            "291",
            "302",
            "303",
            "304",
            "305",
            "308",
            "314",
            "315",
            "316"
          ],
          "num": 42
        }
      ],
      "diff": "diff --git a/src/main/java/org/jsoup/nodes/Node.java b/src/main/java/org/jsoup/nodes/Node.java\nindex b3c8014..2154a15 100644\n--- a/src/main/java/org/jsoup/nodes/Node.java\n+++ b/src/main/java/org/jsoup/nodes/Node.java\n@@ -3,7 +3,6 @@\n import org.jsoup.helper.StringUtil;\n import org.jsoup.helper.Validate;\n import org.jsoup.parser.Parser;\n-import org.jsoup.select.Elements;\n import org.jsoup.select.NodeTraversor;\n import org.jsoup.select.NodeVisitor;\n \n@@ -235,7 +234,7 @@\n \n     /**\n      * Insert the specified HTML into the DOM before this node (i.e. as a preceeding sibling).\n-     * @param html HTML to add before this element\n+     * @param html HTML to add before this node\n      * @return this node, for chaining\n      * @see #after(String)\n      */\n@@ -245,8 +244,22 @@\n     }\n \n     /**\n+     * Insert the specified node into the DOM before this node (i.e. as a preceeding sibling).\n+     * @param node to add before this node\n+     * @return this node, for chaining\n+     * @see #after(Node)\n+     */\n+    public Node before(Node node) {\n+        Validate.notNull(node);\n+        Validate.notNull(parentNode);\n+\n+        parentNode.addChildren(siblingIndex(), node);\n+        return this;\n+    }\n+\n+    /**\n      * Insert the specified HTML into the DOM after this node (i.e. as a following sibling).\n-     * @param html HTML to add after this element\n+     * @param html HTML to add after this node\n      * @return this node, for chaining\n      * @see #before(String)\n      */\n@@ -255,12 +268,27 @@\n         return this;\n     }\n \n+    /**\n+     * Insert the specified node into the DOM after this node (i.e. as a following sibling).\n+     * @param node to add after this node\n+     * @return this node, for chaining\n+     * @see #before(Node)\n+     */\n+    public Node after(Node node) {\n+        Validate.notNull(node);\n+        Validate.notNull(parentNode);\n+\n+        parentNode.addChildren(siblingIndex()+1, node);\n+        return this;\n+    }\n+\n     private void addSiblingHtml(int index, String html) {\n         Validate.notNull(html);\n         Validate.notNull(parentNode);\n \n-        Element fragment \u003d Parser.parseBodyFragmentRelaxed(html, baseUri()).body();\n-        parentNode.addChildren(index, fragment.childNodesAsArray());\n+        Element context \u003d parent() instanceof Element ? (Element) parent() : null;        \n+        List\u003cNode\u003e nodes \u003d Parser.parseFragment(html, context, baseUri());\n+        parentNode.addChildren(index, nodes.toArray(new Node[nodes.size()]));\n     }\n \n     /**\n@@ -271,20 +299,21 @@\n     public Node wrap(String html) {\n         Validate.notEmpty(html);\n \n-        Element wrapBody \u003d Parser.parseBodyFragmentRelaxed(html, baseUri).body();\n-        Elements wrapChildren \u003d wrapBody.children();\n-        Element wrap \u003d wrapChildren.first();\n-        if (wrap \u003d\u003d null) // nothing to wrap with; noop\n+        Element context \u003d parent() instanceof Element ? (Element) parent() : null;\n+        List\u003cNode\u003e wrapChildren \u003d Parser.parseFragment(html, context, baseUri());\n+        Node wrapNode \u003d wrapChildren.get(0);\n+        if (wrapNode \u003d\u003d null || !(wrapNode instanceof Element)) // nothing to wrap with; noop\n             return null;\n \n+        Element wrap \u003d (Element) wrapNode;\n         Element deepest \u003d getDeepChild(wrap);\n         parentNode.replaceChild(this, wrap);\n         deepest.addChildren(this);\n \n         // remainder (unbalanced wrap, like \u003cdiv\u003e\u003c/div\u003e\u003cp\u003e\u003c/p\u003e -- The \u003cp\u003e is remainder\n-        if (wrapChildren.size() \u003e 1) {\n-            for (int i \u003d 1; i \u003c wrapChildren.size(); i++) { // skip first\n-                Element remainder \u003d wrapChildren.get(i);\n+        if (wrapChildren.size() \u003e 0) {\n+            for (int i \u003d 0; i \u003c wrapChildren.size(); i++) {\n+                Node remainder \u003d wrapChildren.get(i);\n                 remainder.parentNode.removeChild(remainder);\n                 wrap.appendChild(remainder);\n             }\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [7914,8315]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [8657,9057]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [9196,9270]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [9287,9353]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [9732,9806]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [9815,9888]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [9897,9933]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [10062,10096]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "InfixExpression [9946,9996]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "INFIX_EXPRESSION_OPERATOR: || [9963,9965]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "PrefixExpression [9966,9996]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "METHOD_INVOCATION_ARGUMENTS [9406,9428]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ImportDeclaration [128,161]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [8423,8498]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [8868,8941]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [8950,8994]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [9003,9039]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/jsoup/parser/Parser.java",
        "src/main/java/org/jsoup/parser/Parser.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.jsoup.parser.Parser:Parser:[String html, String baseUri, boolean isBodyFragment]:null",
            "org.jsoup.parser.Parser:parseBodyFragmentRelaxed:[String bodyHtml, String baseUri]:Document",
            "org.jsoup.parser.Parser:parse:[]:Document",
            "org.jsoup.parser.Parser:parseXmlDecl:[]:void",
            "org.jsoup.parser.Parser:parseComment:[]:void",
            "org.jsoup.parser.Parser:parseAttribute:[]:Attribute",
            "org.jsoup.parser.Parser:parseBodyFragment:[String bodyHtml, String baseUri]:Document",
            "org.jsoup.parser.Parser:addChildToParent:[Element child, boolean isEmptyElement]:Element",
            "org.jsoup.parser.Parser:parseEndTag:[]:void",
            "org.jsoup.parser.Parser:parseCdata:[]:void",
            "org.jsoup.parser.Parser:parse:[String html, String baseUri]:Document",
            "org.jsoup.parser.Parser:popStackToSuitableContainer:[Tag tag]:Element",
            "org.jsoup.parser.Parser:parseStartTag:[]:void",
            "org.jsoup.parser.Parser:parseTextNode:[]:void",
            "org.jsoup.parser.Parser:popStackToClose:[Tag tag]:Element",
            "org.jsoup.parser.Parser:last:[]:Element",
            "org.jsoup.parser.Parser:stackHasValidParent:[Tag childTag]:boolean"
          ],
          "num": 17
        },
        {
          "qualified_names": [
            "org.jsoup.parser.Parser:parseFragment:[String fragmentHtml, Element context, String baseUri]:List\u003cNode\u003e",
            "org.jsoup.parser.Parser:parse:[String html, String baseUri]:Document",
            "org.jsoup.parser.Parser:parseBodyFragmentRelaxed:[String bodyHtml, String baseUri]:Document",
            "org.jsoup.parser.Parser:parseBodyFragment:[String bodyHtml, String baseUri]:Document"
          ],
          "num": 4
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "4",
            "5",
            "6",
            "7",
            "10",
            "11",
            "12",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "35",
            "36",
            "37",
            "38",
            "39",
            "40",
            "41",
            "42",
            "43",
            "44",
            "45",
            "47",
            "48",
            "49",
            "50",
            "53",
            "54",
            "58",
            "59",
            "60",
            "61",
            "64",
            "65",
            "69",
            "70",
            "71",
            "72",
            "73",
            "76",
            "77",
            "78",
            "79",
            "80",
            "81",
            "82",
            "83",
            "84",
            "85",
            "86",
            "87",
            "88",
            "89",
            "90",
            "91",
            "92",
            "93",
            "94",
            "95",
            "96",
            "97",
            "98",
            "99",
            "100",
            "101",
            "102",
            "103",
            "104",
            "105",
            "106",
            "107",
            "108",
            "109",
            "110",
            "111",
            "112",
            "113",
            "114",
            "115",
            "116",
            "117",
            "118",
            "119",
            "120",
            "121",
            "122",
            "123",
            "124",
            "125",
            "126",
            "127",
            "128",
            "129",
            "130",
            "131",
            "132",
            "133",
            "134",
            "135",
            "136",
            "137",
            "138",
            "139",
            "140",
            "141",
            "142",
            "143",
            "144",
            "145",
            "146",
            "147",
            "148",
            "149",
            "150",
            "151",
            "152",
            "153",
            "154",
            "155",
            "156",
            "157",
            "158",
            "159",
            "160",
            "161",
            "162",
            "163",
            "164",
            "165",
            "166",
            "167",
            "168",
            "169",
            "170",
            "171",
            "172",
            "173",
            "174",
            "175",
            "176",
            "177",
            "178",
            "179",
            "180",
            "181",
            "182",
            "183",
            "184",
            "185",
            "186",
            "187",
            "188",
            "189",
            "190",
            "191",
            "192",
            "193",
            "194",
            "195",
            "196",
            "197",
            "198",
            "199",
            "200",
            "201",
            "202",
            "203",
            "204",
            "205",
            "206",
            "207",
            "208",
            "209",
            "210",
            "211",
            "212",
            "213",
            "214",
            "215",
            "216",
            "217",
            "218",
            "219",
            "220",
            "221",
            "222",
            "223",
            "224",
            "225",
            "226",
            "227",
            "228",
            "229",
            "230",
            "231",
            "232",
            "233",
            "234",
            "235",
            "236",
            "237",
            "238",
            "239",
            "240",
            "241",
            "242",
            "243",
            "244",
            "245",
            "246",
            "247",
            "248",
            "249",
            "250",
            "251",
            "252",
            "253",
            "254",
            "255",
            "256",
            "257",
            "258",
            "259",
            "260",
            "261",
            "262",
            "263",
            "264",
            "265",
            "266",
            "267",
            "268",
            "269",
            "270",
            "271",
            "272",
            "273",
            "274",
            "275",
            "276",
            "277",
            "278",
            "279",
            "280",
            "281",
            "282",
            "283",
            "284",
            "285",
            "286",
            "287",
            "288",
            "289",
            "290",
            "291",
            "292",
            "293",
            "294",
            "295",
            "296",
            "297",
            "298",
            "299",
            "300",
            "301",
            "302",
            "303",
            "304",
            "305",
            "306",
            "307",
            "308",
            "309",
            "310",
            "311",
            "312",
            "313",
            "314",
            "315",
            "316"
          ],
          "num": 297
        },
        {
          "qualified_names": [
            "3",
            "4",
            "5",
            "7",
            "10",
            "11",
            "12",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "23",
            "24",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "35",
            "36",
            "37",
            "38",
            "39",
            "40",
            "41",
            "42",
            "43",
            "44",
            "45",
            "46",
            "47",
            "48",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57",
            "58",
            "62",
            "63",
            "64",
            "65",
            "66",
            "69"
          ],
          "num": 50
        }
      ],
      "diff": "diff --git a/src/main/java/org/jsoup/parser/Parser.java b/src/main/java/org/jsoup/parser/Parser.java\nindex f9bc06c..8adc13d 100644\n--- a/src/main/java/org/jsoup/parser/Parser.java\n+++ b/src/main/java/org/jsoup/parser/Parser.java\n@@ -1,318 +1,71 @@\n package org.jsoup.parser;\n \n+import org.jsoup.nodes.Document;\n+import org.jsoup.nodes.Element;\n+import org.jsoup.nodes.Node;\n \n-import org.jsoup.helper.Validate;\n-import org.jsoup.nodes.*;\n-\n-import java.util.LinkedList;\n+import java.util.List;\n \n /**\n- Parses HTML into a {@link Document}. Generally best to use one of the  more convenient parse methods in {@link org.jsoup.Jsoup}.\n-\n- @author Jonathan Hedley, jonathan@hedley.net */\n+ * Parses HTML into a {@link org.jsoup.nodes.Document}. Generally best to use one of the  more convenient parse methods\n+ * in {@link org.jsoup.Jsoup}.\n+ */\n public class Parser {\n-    private static final String SQ \u003d \"\u0027\";\n-    private static final String DQ \u003d \"\\\"\";\n-\n-    private static final Tag htmlTag \u003d Tag.valueOf(\"html\");\n-    private static final Tag headTag \u003d Tag.valueOf(\"head\");\n-    private static final Tag bodyTag \u003d Tag.valueOf(\"body\");\n-    private static final Tag titleTag \u003d Tag.valueOf(\"title\");\n-    private static final Tag textareaTag \u003d Tag.valueOf(\"textarea\");\n-\n-    private final LinkedList\u003cElement\u003e stack;\n-    private final TokenQueue tq;\n-    private final Document doc;\n-    private String baseUri;\n-    private boolean relaxed \u003d false;\n-\n-    private Parser(String html, String baseUri, boolean isBodyFragment) {\n-        Validate.notNull(html);\n-        Validate.notNull(baseUri);\n-\n-        stack \u003d new LinkedList\u003cElement\u003e();\n-        tq \u003d new TokenQueue(html);\n-        this.baseUri \u003d baseUri;\n-\n-        if (isBodyFragment) {\n-            doc \u003d Document.createShell(baseUri);\n-            stack.add(doc.body());\n-        } else {\n-            doc \u003d new Document(baseUri);\n-            stack.add(doc);\n-        }\n-    }\n-\n     /**\n-     Parse HTML into a Document.\n-     @param html HTML to parse\n-     @param baseUri base URI of document (i.e. original fetch location), for resolving relative URLs.\n-     @return parsed Document\n+     * Parse HTML into a Document.\n+     *\n+     * @param html HTML to parse\n+     * @param baseUri base URI of document (i.e. original fetch location), for resolving relative URLs.\n+     *\n+     * @return parsed Document\n      */\n     public static Document parse(String html, String baseUri) {\n-        Parser parser \u003d new Parser(html, baseUri, false);\n-        return parser.parse();\n+        TreeBuilder treeBuilder \u003d new TreeBuilder();\n+        return treeBuilder.parse(html, baseUri);\n     }\n \n     /**\n-     Parse a fragment of HTML into the {@code body} of a Document.\n-     @param bodyHtml fragment of HTML\n-     @param baseUri base URI of document (i.e. original fetch location), for resolving relative URLs.\n-     @return Document, with empty head, and HTML parsed into body\n+     * Parse a fragment of HTML into a list of nodes. The context element, if supplied, supplies parsing context.\n+     *\n+     * @param fragmentHtml the fragment of HTML to parse\n+     * @param context (optional) the element that this HTML fragment is being parsed for (i.e. for inner HTML). This\n+     * provides stack context (for implicit element creation).\n+     * @param baseUri base URI of document (i.e. original fetch location), for resolving relative URLs.\n+     *\n+     * @return list of nodes parsed from the input HTML. Note that the context element, if supplied, is not modifed.\n+     */\n+    public static List\u003cNode\u003e parseFragment(String fragmentHtml, Element context, String baseUri) {\n+        TreeBuilder treeBuilder \u003d new TreeBuilder();\n+        return treeBuilder.parseFragment(fragmentHtml, context, baseUri);\n+    }\n+\n+    /**\n+     * Parse a fragment of HTML into the {@code body} of a Document.\n+     *\n+     * @param bodyHtml fragment of HTML\n+     * @param baseUri base URI of document (i.e. original fetch location), for resolving relative URLs.\n+     *\n+     * @return Document, with empty head, and HTML parsed into body\n      */\n     public static Document parseBodyFragment(String bodyHtml, String baseUri) {\n-        Parser parser \u003d new Parser(bodyHtml, baseUri, true);\n-        return parser.parse();\n+        Document doc \u003d Document.createShell(baseUri);\n+        Element body \u003d doc.body();\n+        List\u003cNode\u003e nodeList \u003d parseFragment(bodyHtml, body, baseUri);\n+        Node[] nodes \u003d nodeList.toArray(new Node[nodeList.size()]); // the node list gets modified when re-parented\n+        for (Node node : nodes) {\n+            body.appendChild(node);\n+        }\n+        return doc;\n     }\n \n     /**\n-     Parse a fragment of HTML into the {@code body} of a Document, with relaxed parsing enabled. Relaxed, in this\n-     context, means that implicit tags are not automatically created when missing.\n-     @param bodyHtml fragment of HTML\n-     @param baseUri base URI of document (i.e. original fetch location), for resolving relative URLs.\n-     @return Document, with empty head, and HTML parsed into body\n+     * @param bodyHtml HTML to parse\n+     * @param baseUri baseUri base URI of document (i.e. original fetch location), for resolving relative URLs.\n+     *\n+     * @return parsed Document\n+     * @deprecated Use {@link #parseBodyFragment} or {@link #parseFragment} instead.\n      */\n     public static Document parseBodyFragmentRelaxed(String bodyHtml, String baseUri) {\n-        Parser parser \u003d new Parser(bodyHtml, baseUri, true);\n-        parser.relaxed \u003d true;\n-        return parser.parse();\n-    }\n-\n-    private Document parse() {\n-        while (!tq.isEmpty()) {\n-            if (tq.matchesStartTag()) {\n-                parseStartTag();\n-            } else if (tq.matchesCS(\"\u003c/\")) {\n-                parseEndTag();\n-            } else if (tq.matchesCS(\"\u003c!--\")) {\n-                parseComment();\n-            } else if (tq.matches(\"\u003c![CDATA[\")) {\n-                parseCdata();\n-            } else if (tq.matchesCS(\"\u003c?\") || tq.matchesCS(\"\u003c!\")) {\n-                parseXmlDecl();\n-            } else {\n-                parseTextNode();\n-            }\n-        }\n-        return doc.normalise();\n-    }\n-\n-    private void parseComment() {\n-        tq.consume(\"\u003c!--\");\n-        String data \u003d tq.chompTo(\"-\u003e\");\n-\n-        if (data.endsWith(\"-\")) // i.e. was --\u003e\n-            data \u003d data.substring(0, data.length()-1);\n-        Comment comment \u003d new Comment(data, baseUri);\n-        last().appendChild(comment);\n-    }\n-\n-    private void parseXmlDecl() {\n-        tq.consume(\"\u003c\");\n-        Character firstChar \u003d tq.consume(); // \u003c? or \u003c!, from initial match.\n-        boolean procInstr \u003d firstChar.toString().equals(\"!\");\n-        String data \u003d tq.chompTo(\"\u003e\");\n-\n-        XmlDeclaration decl \u003d new XmlDeclaration(data, baseUri, procInstr);\n-        last().appendChild(decl);\n-    }\n-\n-    private void parseEndTag() {\n-        tq.consume(\"\u003c/\");\n-        String tagName \u003d tq.consumeTagName();\n-        tq.chompTo(\"\u003e\");\n-\n-        if (tagName.length() !\u003d 0) {\n-            Tag tag \u003d Tag.valueOf(tagName);\n-            if (!last().tag().isIgnorableEndTag(tag)) // skips \u003c/tr\u003e if in \u003ctable\u003e\n-                popStackToClose(tag);\n-        }\n-    }\n-\n-    private void parseStartTag() {\n-        tq.consume(\"\u003c\");\n-        String tagName \u003d tq.consumeTagName();\n-        Validate.notEmpty(tagName, \"Unexpectedly empty tagname. (This should not occur, please report!)\");\n-        \n-        tq.consumeWhitespace();\n-        Attributes attributes \u003d new Attributes();\n-        while (!tq.matchesAny(\"\u003c\", \"/\u003e\", \"\u003e\") \u0026\u0026 !tq.isEmpty()) {\n-            Attribute attribute \u003d parseAttribute();\n-            if (attribute !\u003d null)\n-                attributes.put(attribute);\n-        }\n-\n-        Tag tag \u003d Tag.valueOf(tagName);\n-        Element child \u003d new Element(tag, baseUri, attributes);\n-\n-        boolean isEmptyElement \u003d tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (\u003cdiv/\u003e\n-        if (tq.matchChomp(\"/\u003e\")) { // close empty element or tag\n-            isEmptyElement \u003d true;\n-            if (!tag.isKnownTag()) // if unknown and a self closed, allow it to be self closed on output. this doesn\u0027t force all instances to be empty\n-                tag.setSelfClosing();\n-        } else {\n-            tq.matchChomp(\"\u003e\");\n-        }\n-        addChildToParent(child, isEmptyElement);\n-\n-        // pc data only tags (textarea, script): chomp to end tag, add content as text node\n-        if (tag.isData()) {\n-            String data \u003d tq.chompToIgnoreCase(\"\u003c/\" + tagName);\n-            tq.chompTo(\"\u003e\");\n-            popStackToClose(tag);\n-            \n-            Node dataNode;\n-            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)\n-                dataNode \u003d TextNode.createFromEncoded(data, baseUri);\n-            else\n-                dataNode \u003d new DataNode(data, baseUri); // data not encoded but raw (for \" in script)\n-            child.appendChild(dataNode);   \n-        }\n-\n-        // \u003cbase href\u003e: update the base uri\n-        if (child.tagName().equals(\"base\")) {\n-            String href \u003d child.absUrl(\"href\");\n-            if (href.length() !\u003d 0) { // ignore \u003cbase target\u003e etc\n-                baseUri \u003d href;\n-                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base\n-            }\n-        }\n-    }\n-\n-    private Attribute parseAttribute() {\n-        tq.consumeWhitespace();\n-        String key \u003d tq.consumeAttributeKey();\n-        String value \u003d \"\";\n-        tq.consumeWhitespace();\n-        if (tq.matchChomp(\"\u003d\")) {\n-            tq.consumeWhitespace();\n-\n-            if (tq.matchChomp(SQ)) {\n-                value \u003d tq.chompTo(SQ);\n-            } else if (tq.matchChomp(DQ)) {\n-                value \u003d tq.chompTo(DQ);\n-            } else {\n-                StringBuilder valueAccum \u003d new StringBuilder();\n-                // no \u0027 or \" to look for, so scan to end tag or space (or end of stream)\n-                while (!tq.matchesAny(\"\u003c\", \"/\u003e\", \"\u003e\") \u0026\u0026 !tq.matchesWhitespace() \u0026\u0026 !tq.isEmpty()) {\n-                    valueAccum.append(tq.consume());\n-                }\n-                value \u003d valueAccum.toString();\n-            }\n-            tq.consumeWhitespace();\n-        }\n-        if (key.length() !\u003d 0)\n-            return Attribute.createFromEncoded(key, value);\n-        else {\n-            if (value.length() \u003d\u003d 0) // no key, no val; unknown char, keep popping so not get stuck\n-                tq.advance();\n-                \n-            return null;\n-        }\n-    }\n-\n-    private void parseTextNode() {\n-        TextNode textNode;\n-        // special case: handle string like \"hello \u003c there\". first char will be \"\u003c\", because of matchStartTag\n-        if (tq.peek() \u003d\u003d \u0027\u003c\u0027) {\n-            tq.advance();\n-            textNode \u003d new TextNode(\"\u003c\", baseUri);\n-        } else {\n-            String text \u003d tq.consumeTo(\"\u003c\");\n-            textNode \u003d TextNode.createFromEncoded(text, baseUri);\n-        }\n-        last().appendChild(textNode);\n-    }\n-\n-    private void parseCdata() {\n-        tq.consume(\"\u003c![CDATA[\");\n-        String rawText \u003d tq.chompTo(\"]]\u003e\");\n-        TextNode textNode \u003d new TextNode(rawText, baseUri); // constructor does not escape\n-        last().appendChild(textNode);\n-    }\n-\n-    private Element addChildToParent(Element child, boolean isEmptyElement) {\n-        Element parent \u003d popStackToSuitableContainer(child.tag());\n-        Tag childTag \u003d child.tag();\n-        boolean validAncestor \u003d stackHasValidParent(childTag);\n-\n-        if (!validAncestor \u0026\u0026 !relaxed) {\n-            // create implicit parent around this child\n-            Tag parentTag \u003d childTag.getImplicitParent();\n-            Element implicit \u003d new Element(parentTag, baseUri);\n-            // special case: make sure there\u0027s a head before putting in body\n-            if (child.tag().equals(bodyTag)) {\n-                Element head \u003d new Element(headTag, baseUri);\n-                implicit.appendChild(head);\n-            }\n-            implicit.appendChild(child);\n-\n-            // recurse to ensure somewhere to put parent\n-            Element root \u003d addChildToParent(implicit, false);\n-            if (!isEmptyElement)\n-                stack.addLast(child);\n-            return root;\n-        }\n-\n-        parent.appendChild(child);\n-\n-        if (!isEmptyElement)\n-            stack.addLast(child);\n-        return parent;\n-    }\n-\n-    private boolean stackHasValidParent(Tag childTag) {\n-        if (stack.size() \u003d\u003d 1 \u0026\u0026 childTag.equals(htmlTag))\n-            return true; // root is valid for html node\n-\n-        if (childTag.requiresSpecificParent())\n-            return stack.getLast().tag().isValidParent(childTag);\n-\n-        // otherwise, look up the stack for valid ancestors\n-        for (int i \u003d stack.size() -1; i \u003e\u003d 0; i--) {\n-            Element el \u003d stack.get(i);\n-            Tag parent2 \u003d el.tag();\n-            if (parent2.isValidAncestor(childTag)) {\n-                return true;\n-            }\n-        }\n-        return false;\n-    }\n-\n-    private Element popStackToSuitableContainer(Tag tag) {\n-        while (!stack.isEmpty()) {\n-            if (last().tag().canContain(tag))\n-                return last();\n-            else\n-                stack.removeLast();\n-        }\n-        return null;\n-    }\n-\n-    private Element popStackToClose(Tag tag) {\n-        // first check to see if stack contains this tag; if so pop to there, otherwise ignore\n-        int counter \u003d 0;\n-        Element elToClose \u003d null;\n-        for (int i \u003d stack.size() -1; i \u003e 0; i--) {\n-            counter++;\n-            Element el \u003d stack.get(i);\n-            Tag elTag \u003d el.tag();\n-            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don\u0027t close past body\n-                break;\n-            } else if (elTag.equals(tag)) {\n-                elToClose \u003d el;\n-                break;\n-            }\n-        }\n-        if (elToClose !\u003d null) {\n-            for (int i \u003d 0; i \u003c counter; i++) {\n-                stack.removeLast();\n-            }\n-        }\n-        return elToClose;\n-    }\n-\n-    private Element last() {\n-        return stack.getLast();\n+        return parse(bodyHtml, baseUri);\n     }\n }\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "ImportDeclaration [27,59]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ImportDeclaration [60,91]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ImportDeclaration [92,120]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ImportDeclaration [122,144]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [737,1566]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Javadoc [2345,2628]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: in  [273,276]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [632,676]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ReturnStatement [685,725]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [1967,2012]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [2021,2047]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [2056,2117]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [2126,2185]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "EnhancedForStatement [2242,2313]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ReturnStatement [2322,2333]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [2512,2535]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [2543,2620]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ReturnStatement [2724,2756]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "QualifiedName: org.jsoup.nodes.Document [179,203]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ImportDeclaration [28,61]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ImportDeclaration [62,87]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ImportDeclaration [89,117]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: Document [150,158]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [255,300]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "FieldDeclaration [329,366]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "FieldDeclaration [371,409]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "FieldDeclaration [415,470]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "FieldDeclaration [475,530]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "FieldDeclaration [535,590]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "FieldDeclaration [595,652]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "FieldDeclaration [657,720]",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: final [734,739]",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "FieldDeclaration [771,799]",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: final [812,817]",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "FieldDeclaration [864,896]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [902,1366]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [1651,1700]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ReturnStatement [1709,1731]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [2116,2168]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ReturnStatement [2177,2199]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [2220,2411]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TagElement [2557,2617]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Javadoc [2211,2625]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [2721,2773]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [2782,2804]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ReturnStatement [2813,2835]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [2847,3428]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [3434,3732]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [3738,4087]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [4093,4437]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [4443,6606]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [6612,7765]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [7771,8229]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [8235,8474]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [8480,9580]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [9586,10189]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [10195,10451]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [10457,11225]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: private [11231,11238]",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/jsoup/parser/Tag.java",
        "src/main/java/org/jsoup/parser/Tag.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.jsoup.parser.Tag:setLimitChildren:[]:Tag",
            "org.jsoup.parser.Tag:formatAsBlock:[]:boolean",
            "org.jsoup.parser.Tag:createInline:[String tagName]:Tag",
            "org.jsoup.parser.Tag:setContainInlineOnly:[]:Tag",
            "org.jsoup.parser.Tag:setExcludes:[String... tagNames]:Tag",
            "org.jsoup.parser.Tag:setPreserveWhitespace:[]:Tag",
            "org.jsoup.parser.Tag:equals:[Object o]:boolean",
            "org.jsoup.parser.Tag:isInline:[]:boolean",
            "org.jsoup.parser.Tag:setAncestor:[String... tagNames]:Tag",
            "org.jsoup.parser.Tag:canContain:[Tag child]:boolean",
            "org.jsoup.parser.Tag:setOptionalClosing:[]:Tag",
            "org.jsoup.parser.Tag:valueOf:[String tagName]:Tag",
            "org.jsoup.parser.Tag:setParent:[String... tagNames]:Tag",
            "org.jsoup.parser.Tag:hashCode:[]:int",
            "org.jsoup.parser.Tag:register:[Tag tag]:Tag",
            "org.jsoup.parser.Tag:isBlock:[]:boolean",
            "org.jsoup.parser.Tag:preserveWhitespace:[]:boolean",
            "org.jsoup.parser.Tag:setCanContainBlock:[]:Tag",
            "org.jsoup.parser.Tag:setFormatAsInline:[]:Tag",
            "org.jsoup.parser.Tag:requiresSpecificParent:[]:boolean",
            "org.jsoup.parser.Tag:isData:[]:boolean",
            "org.jsoup.parser.Tag:setContainDataOnly:[]:Tag",
            "org.jsoup.parser.Tag:setKnownTag:[]:Tag",
            "org.jsoup.parser.Tag:isIgnorableEndTag:[Tag child]:boolean",
            "org.jsoup.parser.Tag:isKnownTag:[]:boolean",
            "org.jsoup.parser.Tag:isValidParent:[Tag child]:boolean",
            "org.jsoup.parser.Tag:isEmpty:[]:boolean",
            "org.jsoup.parser.Tag:setSelfClosing:[]:Tag",
            "org.jsoup.parser.Tag:getImplicitParent:[]:Tag",
            "org.jsoup.parser.Tag:setIgnoreEnd:[String... tagNames]:Tag",
            "org.jsoup.parser.Tag:isValidAncestor:[Tag child]:boolean",
            "org.jsoup.parser.Tag:createBlock:[String tagName]:Tag",
            "org.jsoup.parser.Tag:canContainBlock:[]:boolean",
            "org.jsoup.parser.Tag:setEmpty:[]:Tag"
          ],
          "num": 34
        },
        {
          "qualified_names": [
            "org.jsoup.parser.Tag:getName:[]:String",
            "org.jsoup.parser.Tag:valueOf:[String tagName]:Tag",
            "org.jsoup.parser.Tag:setSelfClosing:[]:Tag",
            "org.jsoup.parser.Tag:preserveWhitespace:[]:boolean",
            "org.jsoup.parser.Tag:canContainBlock:[]:boolean",
            "org.jsoup.parser.Tag:isEmpty:[]:boolean",
            "org.jsoup.parser.Tag:isData:[]:boolean",
            "org.jsoup.parser.Tag:isKnownTag:[]:boolean",
            "org.jsoup.parser.Tag:formatAsBlock:[]:boolean",
            "org.jsoup.parser.Tag:hashCode:[]:int",
            "org.jsoup.parser.Tag:isSelfClosing:[]:boolean",
            "org.jsoup.parser.Tag:isBlock:[]:boolean",
            "org.jsoup.parser.Tag:equals:[Object o]:boolean",
            "org.jsoup.parser.Tag:isKnownTag:[String tagName]:boolean",
            "org.jsoup.parser.Tag:isInline:[]:boolean"
          ],
          "num": 15
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "5",
            "8",
            "9",
            "10",
            "11",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "21",
            "23",
            "26",
            "30",
            "31",
            "32",
            "33",
            "34",
            "45",
            "46",
            "47",
            "48",
            "49",
            "61",
            "62",
            "71",
            "72",
            "73",
            "74",
            "75",
            "76",
            "77",
            "78",
            "79",
            "80",
            "81",
            "82",
            "83",
            "84",
            "85",
            "86",
            "87",
            "88",
            "89",
            "90",
            "91",
            "92",
            "93",
            "94",
            "95",
            "96",
            "97",
            "98",
            "99",
            "100",
            "101",
            "102",
            "103",
            "104",
            "105",
            "106",
            "107",
            "108",
            "109",
            "110",
            "111",
            "112",
            "113",
            "114",
            "115",
            "116",
            "123",
            "131",
            "132",
            "139",
            "140",
            "147",
            "148",
            "155",
            "156",
            "161",
            "169",
            "175",
            "179",
            "180",
            "186",
            "187",
            "188",
            "189",
            "190",
            "191",
            "192",
            "193",
            "194",
            "195",
            "196",
            "197",
            "198",
            "199",
            "200",
            "201",
            "202",
            "203",
            "204",
            "205",
            "206",
            "207",
            "208",
            "209",
            "210",
            "211",
            "212",
            "213",
            "214",
            "220",
            "224",
            "231",
            "235",
            "247",
            "248",
            "249",
            "251",
            "252",
            "253",
            "254",
            "255",
            "257",
            "258",
            "259",
            "260",
            "261",
            "262",
            "263",
            "264",
            "265",
            "266",
            "268",
            "269",
            "270",
            "271",
            "272",
            "273",
            "274",
            "275",
            "276",
            "277",
            "278",
            "279",
            "280",
            "281",
            "282",
            "283",
            "284",
            "285",
            "286",
            "287",
            "288",
            "289",
            "290",
            "291",
            "292",
            "293",
            "294",
            "295",
            "296",
            "297",
            "298",
            "299",
            "300",
            "301",
            "302",
            "303",
            "304",
            "305",
            "306",
            "307",
            "308",
            "309",
            "310",
            "311",
            "312",
            "313",
            "314",
            "315",
            "316",
            "317",
            "318",
            "319",
            "320",
            "321",
            "322",
            "323",
            "324",
            "325",
            "326",
            "327",
            "328",
            "329",
            "330",
            "331",
            "332",
            "333",
            "334",
            "335",
            "336",
            "337",
            "338",
            "339",
            "340",
            "341",
            "342",
            "343",
            "344",
            "345",
            "346",
            "347",
            "348",
            "349",
            "350",
            "351",
            "352",
            "353",
            "354",
            "355",
            "356",
            "357",
            "358",
            "359",
            "360",
            "361",
            "362",
            "363",
            "364",
            "365",
            "366",
            "367",
            "368",
            "369",
            "370",
            "371",
            "372",
            "373",
            "374",
            "375",
            "376",
            "377",
            "378",
            "379",
            "380",
            "381",
            "382",
            "383",
            "384",
            "385",
            "386",
            "387",
            "388",
            "389",
            "390",
            "391",
            "392",
            "393",
            "394",
            "395",
            "396",
            "397",
            "398",
            "399",
            "400",
            "401",
            "402",
            "403",
            "404",
            "405",
            "406",
            "407",
            "408",
            "409",
            "410",
            "411",
            "412",
            "416",
            "417",
            "423",
            "424",
            "425",
            "426",
            "427",
            "428",
            "429",
            "430",
            "431",
            "432",
            "433",
            "434",
            "435",
            "436",
            "437",
            "438",
            "439",
            "440",
            "441",
            "442",
            "443",
            "444",
            "445",
            "446",
            "447",
            "448",
            "449",
            "450",
            "451",
            "452",
            "453",
            "454",
            "455",
            "456",
            "457",
            "458",
            "459",
            "460",
            "461",
            "462",
            "463",
            "464",
            "465",
            "466",
            "467",
            "468",
            "469",
            "470",
            "471",
            "472",
            "473",
            "474",
            "475",
            "476",
            "477",
            "478",
            "479",
            "480",
            "481",
            "482",
            "483",
            "484",
            "485",
            "486",
            "487",
            "488",
            "489",
            "490",
            "491",
            "492",
            "493",
            "494",
            "495",
            "496",
            "497",
            "498",
            "499",
            "500",
            "501",
            "502",
            "503",
            "504",
            "505",
            "506",
            "507",
            "508",
            "509",
            "510",
            "511",
            "512",
            "513",
            "514",
            "515",
            "516",
            "517",
            "518",
            "519",
            "520"
          ],
          "num": 382
        },
        {
          "qualified_names": [
            "5",
            "6",
            "9",
            "10",
            "11",
            "12",
            "14",
            "18",
            "29",
            "30",
            "31",
            "32",
            "33",
            "39",
            "40",
            "41",
            "42",
            "43",
            "44",
            "64",
            "65",
            "66",
            "74",
            "82",
            "83",
            "84",
            "91",
            "92",
            "93",
            "100",
            "101",
            "102",
            "109",
            "110",
            "111",
            "116",
            "119",
            "125",
            "128",
            "132",
            "136",
            "137",
            "138",
            "139",
            "140",
            "141",
            "142",
            "143",
            "144",
            "145",
            "146",
            "147",
            "148",
            "154",
            "155",
            "156",
            "162",
            "166",
            "167",
            "168",
            "169",
            "170",
            "171",
            "172",
            "173",
            "180",
            "182",
            "186",
            "187",
            "196",
            "197",
            "198",
            "199",
            "200",
            "201",
            "202",
            "203",
            "204",
            "205",
            "206",
            "207",
            "208",
            "209",
            "210",
            "211",
            "212",
            "213",
            "214",
            "215",
            "216",
            "217",
            "218",
            "221",
            "222",
            "223",
            "224",
            "225",
            "226",
            "227",
            "228",
            "229",
            "230",
            "231",
            "232",
            "234",
            "235",
            "236",
            "237",
            "238",
            "239",
            "240",
            "241",
            "243",
            "244",
            "245",
            "246",
            "247",
            "249",
            "250",
            "251",
            "252",
            "253"
          ],
          "num": 122
        }
      ],
      "diff": "diff --git a/src/main/java/org/jsoup/parser/Tag.java b/src/main/java/org/jsoup/parser/Tag.java\nindex ddc664f..0ff2820 100644\n--- a/src/main/java/org/jsoup/parser/Tag.java\n+++ b/src/main/java/org/jsoup/parser/Tag.java\n@@ -2,51 +2,46 @@\n \n import org.jsoup.helper.Validate;\n \n-import java.util.*;\n+import java.util.HashMap;\n+import java.util.Map;\n \n /**\n- HTML Tag specifications. This is a very simplistic model without the full expressiveness as the DTD,\n- but it should capture most of what we need to know to intelligently parse a doc.\n-\n- @author Jonathan Hedley, jonathan@hedley.net */\n+ * HTML Tag capabilities.\n+ *\n+ * @author Jonathan Hedley, jonathan@hedley.net\n+ */\n public class Tag {\n-    private static final Map\u003cString, Tag\u003e tags \u003d new HashMap\u003cString, Tag\u003e();\n-    private static final Tag defaultAncestor;\n-    static {\n-        defaultAncestor \u003d new Tag(\"BODY\");\n-        tags.put(defaultAncestor.tagName, defaultAncestor);\n-    }\n+    private static final Map\u003cString, Tag\u003e tags \u003d new HashMap\u003cString, Tag\u003e(); // map of known tags\n \n     private String tagName;\n-    private boolean knownTag \u003d false; // if pre-defined or auto-created\n     private boolean isBlock \u003d true; // block or inline\n-    private boolean formatAsBlock \u003d true;\n+    private boolean formatAsBlock \u003d true; // should be formatted as a block\n     private boolean canContainBlock \u003d true; // Can this tag hold block level tags?\n     private boolean canContainInline \u003d true; // only pcdata if not\n-    private boolean optionalClosing \u003d false; // If tag is open, and another seen, close previous tag\n     private boolean empty \u003d false; // can hold nothing; e.g. img\n     private boolean selfClosing \u003d false; // can self close (\u003cfoo /\u003e). used for unknown tags that self close, without forcing them as empty.\n     private boolean preserveWhitespace \u003d false; // for pre, textarea, script etc\n-    private List\u003cTag\u003e ancestors; // elements must be a descendant of one of these ancestors\n-    private List\u003cTag\u003e excludes \u003d Collections.emptyList(); // cannot contain these tags\n-    private List\u003cTag\u003e ignoreEndTags \u003d Collections.emptyList(); // ignore these end tags\n-    private boolean directDescendant; // if true, must directly descend from one of the ancestors\n-    private boolean limitChildren; // if true, only contain children that\u0027ve registered parents\n \n     private Tag(String tagName) {\n         this.tagName \u003d tagName.toLowerCase();\n     }\n \n+    /**\n+     * Get this tag\u0027s name.\n+     *\n+     * @return the tag\u0027s name\n+     */\n     public String getName() {\n         return tagName;\n     }\n \n     /**\n-     Get a Tag by name. If not previously defined (unknown), returns a new generic tag, that can do anything.\n-     \u003cp\u003e\n-     Pre-defined tags (P, DIV etc) will be \u003d\u003d, but unknown tags are not registered and will only .equals().\n-     @param tagName Name of tag, e.g. \"p\". Case insensitive.\n-     @return The tag, either defined or new generic.\n+     * Get a Tag by name. If not previously defined (unknown), returns a new generic tag, that can do anything.\n+     * \u003cp/\u003e\n+     * Pre-defined tags (P, DIV etc) will be \u003d\u003d, but unknown tags are not registered and will only .equals().\n+     *\n+     * @param tagName Name of tag, e.g. \"p\". Case insensitive.\n+     * @return The tag, either defined or new generic.\n      */\n     public static Tag valueOf(String tagName) {\n         Validate.notNull(tagName);\n@@ -58,8 +53,6 @@\n             if (tag \u003d\u003d null) {\n                 // not defined: create default; go anywhere, do anything! (incl be inside a \u003cp\u003e)\n                 tag \u003d new Tag(tagName);\n-                tag.setAncestor(defaultAncestor.tagName);\n-                tag.setExcludes();\n                 tag.isBlock \u003d false;\n                 tag.canContainBlock \u003d true;\n             }\n@@ -68,52 +61,9 @@\n     }\n \n     /**\n-     Test if this tag, the prospective parent, can accept the proposed child.\n-     @param child potential child tag.\n-     @return true if this can contain child.\n-     */\n-    boolean canContain(Tag child) {\n-        Validate.notNull(child);\n-\n-        if (child.isBlock \u0026\u0026 !this.canContainBlock)\n-            return false;\n-\n-        if (!child.isBlock \u0026\u0026 !this.canContainInline) // not block \u003d\u003d inline\n-            return false;\n-\n-        if (this.optionalClosing \u0026\u0026 this.equals(child))\n-            return false;\n-\n-        if (this.empty || this.isData())\n-            return false;\n-        \n-        // don\u0027t allow children to contain their parent (directly)\n-        if (this.requiresSpecificParent() \u0026\u0026 this.getImplicitParent().equals(child))\n-            return false;\n-\n-        // confirm limited children\n-        if (limitChildren) {\n-            for (Tag childParent : child.ancestors) {\n-                if (childParent.equals(this))\n-                    return true;\n-            }\n-            return false;\n-        }\n-        \n-        // exclude children\n-        if (!excludes.isEmpty()) {\n-            for (Tag excluded: excludes) {\n-                if (child.equals(excluded))\n-                    return false;\n-            }\n-        }\n-        \n-        return true;\n-    }\n-\n-    /**\n-     Gets if this is a block tag.\n-     @return if block tag\n+     * Gets if this is a block tag.\n+     *\n+     * @return if block tag\n      */\n     public boolean isBlock() {\n         return isBlock;\n@@ -121,6 +71,7 @@\n \n     /**\n      * Gets if this tag should be formatted as a block (or as inline)\n+     *\n      * @return if should be formatted as block or inline\n      */\n     public boolean formatAsBlock() {\n@@ -128,112 +79,112 @@\n     }\n \n     /**\n-     Gets if this tag can contain block tags.\n-     @return if tag can contain block tags\n+     * Gets if this tag can contain block tags.\n+     *\n+     * @return if tag can contain block tags\n      */\n     public boolean canContainBlock() {\n         return canContainBlock;\n     }\n \n     /**\n-     Gets if this tag is an inline tag.\n-     @return if this tag is an inline tag.\n+     * Gets if this tag is an inline tag.\n+     *\n+     * @return if this tag is an inline tag.\n      */\n     public boolean isInline() {\n         return !isBlock;\n     }\n \n     /**\n-     Gets if this tag is a data only tag.\n-     @return if this tag is a data only tag\n+     * Gets if this tag is a data only tag.\n+     *\n+     * @return if this tag is a data only tag\n      */\n     public boolean isData() {\n         return !canContainInline \u0026\u0026 !isEmpty();\n     }\n \n     /**\n-     Get if this is an empty tag\n-     @return if this is an emtpy tag\n+     * Get if this is an empty tag\n+     *\n+     * @return if this is an emtpy tag\n      */\n     public boolean isEmpty() {\n         return empty;\n     }\n-    \n+\n     /**\n      * Get if this tag is self closing.\n+     *\n      * @return if this tag should be output as self closing.\n      */\n     public boolean isSelfClosing() {\n         return empty || selfClosing;\n     }\n-    \n+\n     /**\n      * Get if this is a pre-defined tag, or was auto created on parsing.\n+     *\n      * @return if a known tag\n      */\n     public boolean isKnownTag() {\n-        return knownTag;\n+        return tags.containsKey(tagName);\n     }\n \n     /**\n-     Get if this tag should preserve whitespace within child text nodes.\n-     @return if preserve whitepace\n+     * Check if this tagname is a known tag.\n+     *\n+     * @param tagName name of tag\n+     * @return if known HTML tag\n+     */\n+    public static boolean isKnownTag(String tagName) {\n+        return tags.containsKey(tagName);\n+    }\n+\n+    /**\n+     * Get if this tag should preserve whitespace within child text nodes.\n+     *\n+     * @return if preserve whitepace\n      */\n     public boolean preserveWhitespace() {\n         return preserveWhitespace;\n     }\n \n-    Tag getImplicitParent() {\n-        return (!ancestors.isEmpty()) ? ancestors.get(0) : null;\n-    }\n-\n-    boolean requiresSpecificParent() {\n-        return directDescendant;\n-    }\n-\n-    boolean isValidParent(Tag child) {\n-        return isValidAncestor(child);\n-    }\n-\n-    boolean isValidAncestor(Tag child) {\n-        if (child.ancestors.isEmpty())\n-            return true; // HTML tag\n-\n-        for (int i \u003d 0; i \u003c child.ancestors.size(); i++)\n-            if (this.equals(child.ancestors.get(i)))\n-                return true;\n-        \n-        return false;\n-    }\n-\n-    boolean isIgnorableEndTag(Tag child) {\n-        for (Tag endTag : ignoreEndTags) {\n-            if (child.equals(endTag))\n-                return true;\n-        }\n-        return false;        \n+    Tag setSelfClosing() {\n+        selfClosing \u003d true;\n+        return this;\n     }\n \n     @Override\n     public boolean equals(Object o) {\n         if (this \u003d\u003d o) return true;\n-        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) return false;\n+        if (!(o instanceof Tag)) return false;\n \n         Tag tag \u003d (Tag) o;\n \n-        if (tagName !\u003d null ? !tagName.equals(tag.tagName) : tag.tagName !\u003d null) return false;\n+        if (canContainBlock !\u003d tag.canContainBlock) return false;\n+        if (canContainInline !\u003d tag.canContainInline) return false;\n+        if (empty !\u003d tag.empty) return false;\n+        if (formatAsBlock !\u003d tag.formatAsBlock) return false;\n+        if (isBlock !\u003d tag.isBlock) return false;\n+        if (preserveWhitespace !\u003d tag.preserveWhitespace) return false;\n+        if (selfClosing !\u003d tag.selfClosing) return false;\n+        if (!tagName.equals(tag.tagName)) return false;\n \n         return true;\n     }\n \n     @Override\n     public int hashCode() {\n-        int result \u003d tagName !\u003d null ? tagName.hashCode() : 0;\n+        int result \u003d tagName.hashCode();\n         result \u003d 31 * result + (isBlock ? 1 : 0);\n+        result \u003d 31 * result + (formatAsBlock ? 1 : 0);\n         result \u003d 31 * result + (canContainBlock ? 1 : 0);\n         result \u003d 31 * result + (canContainInline ? 1 : 0);\n-        result \u003d 31 * result + (optionalClosing ? 1 : 0);\n         result \u003d 31 * result + (empty ? 1 : 0);\n+        result \u003d 31 * result + (selfClosing ? 1 : 0);\n+        result \u003d 31 * result + (preserveWhitespace ? 1 : 0);\n         return result;\n     }\n \n@@ -242,280 +193,70 @@\n     }\n \n     // internal static initialisers:\n+    // prepped from http://www.w3.org/TR/REC-html40/sgml/dtd.html and other sources\n+    private static final String[] blockTags \u003d {\n+            \"html\", \"head\", \"body\", \"frameset\", \"script\", \"noscript\", \"style\", \"meta\", \"link\", \"title\", \"frame\",\n+            \"noframes\", \"section\", \"nav\", \"aside\", \"hgroup\", \"header\", \"footer\", \"p\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\",\n+            \"ul\", \"ol\", \"pre\", \"div\", \"blockquote\", \"hr\", \"address\", \"figure\", \"figcaption\", \"form\", \"fieldset\", \"ins\",\n+            \"del\", \"dl\", \"dt\", \"dd\", \"li\", \"table\", \"caption\", \"thead\", \"tfoot\", \"tbody\", \"colgroup\", \"col\", \"tr\", \"th\",\n+            \"td\", \"video\", \"audio\", \"canvas\", \"details\", \"menu\", \"plaintext\"\n+    };\n+    private static final String[] inlineTags \u003d {\n+            \"object\", \"base\", \"font\", \"tt\", \"i\", \"b\", \"u\", \"big\", \"small\", \"em\", \"strong\", \"dfn\", \"code\", \"samp\", \"kbd\",\n+            \"var\", \"cite\", \"abbr\", \"time\", \"acronym\", \"mark\", \"ruby\", \"rt\", \"rp\", \"a\", \"img\", \"br\", \"wbr\", \"map\", \"q\",\n+            \"sub\", \"sup\", \"bdo\", \"iframe\", \"embed\", \"span\", \"input\", \"select\", \"textarea\", \"label\", \"button\", \"optgroup\",\n+            \"option\", \"legend\", \"datalist\", \"keygen\", \"output\", \"progress\", \"meter\", \"area\", \"param\", \"source\", \"track\",\n+            \"summary\", \"command\", \"device\"\n+    };\n+    private static final String[] emptyTags \u003d {\n+            \"meta\", \"link\", \"base\", \"frame\", \"img\", \"br\", \"wbr\", \"embed\", \"hr\", \"input\", \"keygen\", \"col\", \"command\",\n+            \"device\"\n+    };\n+    private static final String[] formatAsInlineTags \u003d {\n+            \"title\", \"a\", \"p\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\", \"pre\", \"address\", \"li\", \"th\", \"td\"\n+    };\n+    private static final String[] preserveWhitespaceTags \u003d {\"pre\", \"plaintext\", \"title\"};\n \n     static {\n-        // prepped from http://www.w3.org/TR/REC-html40/sgml/dtd.html#inline\n-        // tags are set here in uppercase for legibility, but internally held as lowercase.\n-        // TODO[must]: incorporate html 5 as appropriate\n+        // creates\n+        for (String tagName : blockTags) {\n+            Tag tag \u003d new Tag(tagName);\n+            register(tag);\n+        }\n+        for (String tagName : inlineTags) {\n+            Tag tag \u003d new Tag(tagName);\n+            tag.isBlock \u003d false;\n+            tag.canContainBlock \u003d false;\n+            tag.formatAsBlock \u003d false;\n+            register(tag);\n+        }\n \n-        // document\n-        createBlock(\"HTML\").setAncestor(); // specific includes not impl\n-        createBlock(\"HEAD\").setParent(\"HTML\").setLimitChildren();\n-        createBlock(\"BODY\").setAncestor(\"HTML\"); // specific includes not impl\n-        createBlock(\"FRAMESET\").setAncestor(\"HTML\");\n+        // mods:\n+        for (String tagName : emptyTags) {\n+            Tag tag \u003d tags.get(tagName);\n+            Validate.notNull(tag);\n+            tag.canContainBlock \u003d false;\n+            tag.canContainInline \u003d false;\n+            tag.empty \u003d true;\n+        }\n \n-        // head\n-        // all ancestors set to (head, body): so implicitly create head, but allow in body\n-        createBlock(\"SCRIPT\").setAncestor(\"HEAD\", \"BODY\").setContainDataOnly();\n-        createBlock(\"NOSCRIPT\").setAncestor(\"HEAD\", \"BODY\");\n-        createBlock(\"STYLE\").setAncestor(\"HEAD\", \"BODY\").setContainDataOnly();\n-        createBlock(\"META\").setAncestor(\"HEAD\", \"BODY\").setEmpty();\n-        createBlock(\"LINK\").setAncestor(\"HEAD\", \"BODY\").setEmpty(); // only within head\n-        createInline(\"OBJECT\").setAncestor(\"HEAD\", \"BODY\"); // flow (block/inline) or param\n-        createBlock(\"TITLE\").setAncestor(\"HEAD\", \"BODY\").setContainDataOnly().setFormatAsInline();\n-        createInline(\"BASE\").setAncestor(\"HEAD\", \"BODY\").setEmpty();\n+        for (String tagName : formatAsInlineTags) {\n+            Tag tag \u003d tags.get(tagName);\n+            Validate.notNull(tag);\n+            tag.formatAsBlock \u003d false;\n+        }\n \n-        createBlock(\"FRAME\").setParent(\"FRAMESET\").setEmpty();\n-        createBlock(\"NOFRAMES\").setParent(\"FRAMESET\").setContainDataOnly();\n-\n-        // html5 sections\n-        createBlock(\"SECTION\");\n-        createBlock(\"NAV\");\n-        createBlock(\"ASIDE\");\n-        createBlock(\"HGROUP\").setLimitChildren(); // limited to h1 - h6\n-        createBlock(\"HEADER\").setExcludes(\"HEADER\", \"FOOTER\");\n-        createBlock(\"FOOTER\").setExcludes(\"HEADER\", \"FOOTER\");\n-\n-        // fontstyle\n-        createInline(\"FONT\").setOptionalClosing().setCanContainBlock().setFormatAsInline();\n-        createInline(\"TT\");\n-        createInline(\"I\");\n-        createInline(\"B\");\n-        createInline(\"U\");\n-        createInline(\"BIG\");\n-        createInline(\"SMALL\");\n-\n-        // phrase\n-        createInline(\"EM\");\n-        createInline(\"STRONG\");\n-        createInline(\"DFN\").setOptionalClosing();\n-        createInline(\"CODE\");\n-        createInline(\"SAMP\");\n-        createInline(\"KBD\");\n-        createInline(\"VAR\");\n-        createInline(\"CITE\");\n-        createInline(\"ABBR\");\n-        createInline(\"TIME\").setOptionalClosing();\n-        createInline(\"ACRONYM\");\n-        createInline(\"MARK\");\n-        \n-        // ruby\n-        createInline(\"RUBY\");\n-        createInline(\"RT\").setParent(\"RUBY\").setExcludes(\"RT\", \"RP\");\n-        createInline(\"RP\").setParent(\"RUBY\").setExcludes(\"RT\", \"RP\");\n-\n-        // special\n-        createInline(\"A\").setOptionalClosing().setCanContainBlock().setFormatAsInline(); // cannot contain self\n-        createInline(\"IMG\").setEmpty().setAncestor(\"BODY\", \"NOSCRIPT\"); // noscript so an image can be in html-\u003ehead-\u003enoscript\n-        createInline(\"BR\").setEmpty();\n-        createInline(\"WBR\").setEmpty();\n-        createInline(\"MAP\"); // map is defined as inline, but can hold block (what?) or area. Seldom used so NBD.\n-        createInline(\"Q\");\n-        createInline(\"SUB\");\n-        createInline(\"SUP\");\n-        createInline(\"BDO\");\n-        createInline(\"IFRAME\").setOptionalClosing();\n-        createInline(\"EMBED\").setEmpty();\n-\n-        // things past this point aren\u0027t really blocks or inline. I\u0027m using them because they can hold block or inline,\n-        // but per the spec, only specific elements can hold this. if this becomes a real-world parsing problem,\n-        // will need to have another non block/inline type, and explicit include \u0026 exclude rules. should be right though\n-\n-        // block\n-        createInline(\"SPAN\").setCanContainBlock().setFormatAsInline(); // spec is phrasing only, practise is block\n-        createBlock(\"P\").setContainInlineOnly(); // emasculated block?\n-        createBlock(\"H1\").setAncestor(\"BODY\", \"HGROUP\").setExcludes(\"HGROUP\", \"H1\", \"H2\", \"H3\", \"H4\", \"H5\", \"H6\").setFormatAsInline();\n-        createBlock(\"H2\").setAncestor(\"BODY\", \"HGROUP\").setExcludes(\"HGROUP\", \"H1\", \"H2\", \"H3\", \"H4\", \"H5\", \"H6\").setFormatAsInline();\n-        createBlock(\"H3\").setAncestor(\"BODY\", \"HGROUP\").setExcludes(\"HGROUP\", \"H1\", \"H2\", \"H3\", \"H4\", \"H5\", \"H6\").setFormatAsInline();\n-        createBlock(\"H4\").setAncestor(\"BODY\", \"HGROUP\").setExcludes(\"HGROUP\", \"H1\", \"H2\", \"H3\", \"H4\", \"H5\", \"H6\").setFormatAsInline();\n-        createBlock(\"H5\").setAncestor(\"BODY\", \"HGROUP\").setExcludes(\"HGROUP\", \"H1\", \"H2\", \"H3\", \"H4\", \"H5\", \"H6\").setFormatAsInline();\n-        createBlock(\"H6\").setAncestor(\"BODY\", \"HGROUP\").setExcludes(\"HGROUP\", \"H1\", \"H2\", \"H3\", \"H4\", \"H5\", \"H6\").setFormatAsInline();\n-        createBlock(\"UL\");\n-        createBlock(\"OL\");\n-        createBlock(\"PRE\").setContainInlineOnly().setPreserveWhitespace();\n-        createBlock(\"DIV\");\n-        createBlock(\"BLOCKQUOTE\");\n-        createBlock(\"HR\").setEmpty();\n-        createBlock(\"ADDRESS\").setContainInlineOnly();\n-        createBlock(\"FIGURE\");\n-        createBlock(\"FIGCAPTION\").setAncestor(\"FIGURE\");\n-\n-        // formctrl\n-        createBlock(\"FORM\").setOptionalClosing(); // can\u0027t contain self\n-        createInline(\"INPUT\").setAncestor(\"FORM\").setEmpty();\n-        createInline(\"SELECT\").setAncestor(\"FORM\"); // just contain optgroup or option\n-        createInline(\"TEXTAREA\").setAncestor(\"FORM\").setContainDataOnly();\n-        createInline(\"LABEL\").setAncestor(\"FORM\").setOptionalClosing(); // not self\n-        createInline(\"BUTTON\").setAncestor(\"FORM\"); // bunch of excludes not defined\n-        createInline(\"OPTGROUP\").setParent(\"SELECT\"); //  only contain option\n-        createInline(\"OPTION\").setParent(\"SELECT\", \"OPTGROUP\", \"DATALIST\").setOptionalClosing();\n-        createBlock(\"FIELDSET\").setAncestor(\"FORM\");\n-        createInline(\"LEGEND\").setAncestor(\"FIELDSET\");\n-        \n-        // html5 form ctrl, not specced to have to be in forms\n-        createInline(\"DATALIST\");\n-        createInline(\"KEYGEN\").setEmpty();\n-        createInline(\"OUTPUT\");\n-        createInline(\"PROGRESS\").setOptionalClosing();\n-        createInline(\"METER\").setOptionalClosing();\n-\n-        // other\n-        createInline(\"AREA\").setAncestor(\"MAP\").setEmpty(); // not an inline per-se\n-        createInline(\"PARAM\").setParent(\"OBJECT\").setEmpty();\n-        createBlock(\"INS\"); // only within body\n-        createBlock(\"DEL\"); // only within body\n-\n-        // definition lists. per spec, dt and dd are inline and must directly descend from dl. However in practise\n-        // these are all used as blocks and dl need only be an ancestor\n-        createBlock(\"DL\").setOptionalClosing(); // can\u0027t nest\n-        createBlock(\"DT\").setAncestor(\"DL\").setExcludes(\"DL\", \"DD\").setOptionalClosing(); // only within DL.\n-        createBlock(\"DD\").setAncestor(\"DL\").setExcludes(\"DL\", \"DT\").setOptionalClosing(); // only within DL.\n-\n-        createBlock(\"LI\").setAncestor(\"UL\", \"OL\").setOptionalClosing().setFormatAsInline(); // only within OL or UL.\n-\n-        // tables\n-        createBlock(\"TABLE\").setOptionalClosing().setIgnoreEnd(\"BODY\", \"CAPTION\", \"COL\", \"COLGROUP\", \"HTML\", \"TBODY\", \"TD\", \"TFOO\", \"TH\", \"THEAD\", \"TR\"); // specific list of only includes (tr, td, thead etc) not implemented\n-        createBlock(\"CAPTION\").setParent(\"TABLE\").setExcludes(\"THEAD\", \"TFOOT\", \"TBODY\", \"COLGROUP\", \"COL\", \"TR\", \"TH\", \"TD\").setOptionalClosing().setIgnoreEnd(\"BODY\", \"COL\", \"COLGROUP\", \"HTML\", \"TBODY\", \"TD\", \"TFOOT\", \"TH\", \"THEAD\", \"TR\");\n-        createBlock(\"THEAD\").setParent(\"TABLE\").setLimitChildren().setOptionalClosing().setIgnoreEnd(\"BODY\", \"CAPTION\", \"COL\", \"COLGROUP\", \"HTML\", \"TD\", \"TH\", \"TR\"); // just TR\n-        createBlock(\"TFOOT\").setParent(\"TABLE\").setLimitChildren().setOptionalClosing().setIgnoreEnd(\"BODY\", \"CAPTION\", \"COL\", \"COLGROUP\", \"HTML\", \"TD\", \"TH\", \"TR\"); // just TR\n-        createBlock(\"TBODY\").setParent(\"TABLE\").setLimitChildren().setOptionalClosing().setIgnoreEnd(\"BODY\", \"CAPTION\", \"COL\", \"COLGROUP\", \"HTML\", \"TD\", \"TH\", \"TR\"); // optional / implicit open too. just TR\n-        createBlock(\"COLGROUP\").setParent(\"TABLE\").setLimitChildren().setOptionalClosing().setIgnoreEnd(\"COL\"); // just COL\n-        createBlock(\"COL\").setParent(\"COLGROUP\").setEmpty();\n-        createBlock(\"TR\").setParent(\"TBODY\", \"THEAD\", \"TFOOT\", \"TABLE\").setLimitChildren().setOptionalClosing().setIgnoreEnd(\"BODY\", \"CAPTION\", \"COL\", \"COLGROUP\", \"HTML\", \"TD\", \"TH\"); // just TH, TD\n-        createBlock(\"TH\").setParent(\"TR\").setExcludes(\"THEAD\", \"TFOOT\", \"TBODY\", \"COLGROUP\", \"COL\", \"TR\", \"TH\", \"TD\").setOptionalClosing().setIgnoreEnd(\"BODY\", \"CAPTION\", \"COL\", \"COLGROUP\", \"HTML\").setFormatAsInline();\n-        createBlock(\"TD\").setParent(\"TR\").setExcludes(\"THEAD\", \"TFOOT\", \"TBODY\", \"COLGROUP\", \"COL\", \"TR\", \"TH\", \"TD\").setOptionalClosing().setIgnoreEnd(\"BODY\", \"CAPTION\", \"COL\", \"COLGROUP\", \"HTML\").setFormatAsInline();\n-        \n-        // html5 media\n-        createBlock(\"VIDEO\").setExcludes(\"VIDEO\", \"AUDIO\");\n-        createBlock(\"AUDIO\").setExcludes(\"VIDEO\", \"AUDIO\");\n-        createInline(\"SOURCE\").setParent(\"VIDEO\", \"AUDIO\").setEmpty();\n-        createInline(\"TRACK\").setParent(\"VIDEO\", \"AUDIO\").setEmpty();\n-        createBlock(\"CANVAS\");\n-        \n-        // html5 interactive\n-        createBlock(\"DETAILS\");\n-        createInline(\"SUMMARY\").setParent(\"DETAILS\");\n-        createInline(\"COMMAND\").setEmpty();\n-        createBlock(\"MENU\");\n-        createInline(\"DEVICE\").setEmpty();\n-    }\n-\n-    private static Tag createBlock(String tagName) {\n-        return register(new Tag(tagName));\n-    }\n-\n-    private static Tag createInline(String tagName) {\n-        Tag inline \u003d new Tag(tagName);\n-        inline.isBlock \u003d false;\n-        inline.canContainBlock \u003d false;\n-        inline.formatAsBlock \u003d false;\n-        return register(inline);\n+        for (String tagName : preserveWhitespaceTags) {\n+            Tag tag \u003d tags.get(tagName);\n+            Validate.notNull(tag);\n+            tag.preserveWhitespace \u003d true;\n+        }\n     }\n \n     private static Tag register(Tag tag) {\n-        tag.setAncestor(defaultAncestor.tagName);\n-        tag.setKnownTag();\n         synchronized (tags) {\n             tags.put(tag.tagName, tag);\n         }\n         return tag;\n     }\n-\n-    private Tag setCanContainBlock() {\n-        canContainBlock \u003d true;\n-        return this;\n-    }\n-\n-    private Tag setContainInlineOnly() {\n-        canContainBlock \u003d false;\n-        canContainInline \u003d true;\n-        formatAsBlock \u003d false;\n-        return this;\n-    }\n-\n-    private Tag setFormatAsInline() {\n-        formatAsBlock \u003d false;\n-        return this;\n-    }\n-\n-    private Tag setContainDataOnly() {\n-        canContainBlock \u003d false;\n-        canContainInline \u003d false;\n-        preserveWhitespace \u003d true;\n-        return this;\n-    }\n-\n-    private Tag setEmpty() {\n-        canContainBlock \u003d false;\n-        canContainInline \u003d false;\n-        empty \u003d true;\n-        return this;\n-    }\n-\n-    private Tag setOptionalClosing() {\n-        optionalClosing \u003d true;\n-        return this;\n-    }\n-\n-    private Tag setPreserveWhitespace() {\n-        preserveWhitespace \u003d true;\n-        return this;\n-    }\n-\n-    private Tag setAncestor(String... tagNames) {\n-        if (tagNames \u003d\u003d null || tagNames.length \u003d\u003d 0) {\n-            ancestors \u003d Collections.emptyList();\n-        } else {\n-            ancestors \u003d new ArrayList\u003cTag\u003e(tagNames.length);\n-            for (String name : tagNames) {\n-                ancestors.add(Tag.valueOf(name));\n-            }\n-        }\n-        return this;\n-    }\n-    \n-    private Tag setExcludes(String... tagNames) {\n-        if (tagNames \u003d\u003d null || tagNames.length \u003d\u003d 0) {\n-            excludes \u003d Collections.emptyList();\n-        } else {\n-            excludes \u003d new ArrayList\u003cTag\u003e(tagNames.length);\n-            for (String name : tagNames) {\n-                excludes.add(Tag.valueOf(name));\n-            }\n-        }\n-        return this;\n-    }\n-\n-    private Tag setIgnoreEnd(String... tagNames) {\n-        if (tagNames \u003d\u003d null || tagNames.length \u003d\u003d 0) {\n-            ignoreEndTags \u003d Collections.emptyList();\n-        } else {\n-            ignoreEndTags \u003d new ArrayList\u003cTag\u003e(tagNames.length);\n-            for (String name : tagNames) {\n-                ignoreEndTags.add(Tag.valueOf(name));\n-            }\n-        }\n-        return this;\n-    }\n-\n-    private Tag setParent(String... tagNames) {\n-        directDescendant \u003d true;\n-        setAncestor(tagNames);\n-        return this;\n-    }\n-    \n-    private Tag setLimitChildren() {\n-        limitChildren \u003d true;\n-        return this;\n-    }\n-    \n-    Tag setSelfClosing() {\n-        selfClosing \u003d true;\n-        return this;\n-    }\n-    \n-    private Tag setKnownTag() {\n-        knownTag \u003d true;\n-        return this;\n-    }\n }\n",
      "operations": [
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [111,195]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [3571,3804]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldDeclaration [5465,6068]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldDeclaration [6073,6650]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldDeclaration [6655,6843]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldDeclaration [6848,7009]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldDeclaration [7014,7099]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Initializer [7105,8116]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [1001,1077]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ReturnStatement [3526,3559]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [4280,4337]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [4346,4405]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [4414,4451]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [4460,4513]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [4522,4563]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [4572,4635]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [4644,4693]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [4920,4967]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [5195,5247]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "PrefixExpression [4208,4227]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "PREFIX_EXPRESSION_OPERATOR: ! [4208,4209]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "ParenthesizedExpression [4209,4227]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "InstanceofExpression [4210,4226]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SimpleType [4223,4226]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "Javadoc [83,320]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "FieldDeclaration [421,462]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "Initializer [467,584]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "FieldDeclaration [618,651]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "FieldDeclaration [937,977]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "FieldDeclaration [1324,1352]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "FieldDeclaration [1416,1469]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "FieldDeclaration [1503,1561]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "FieldDeclaration [1591,1624]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "FieldDeclaration [1689,1719]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [2710,2751]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [2768,2786]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [2927,4192]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ReturnStatement [5595,5611]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [5831,5927]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [5933,6006]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [6012,6091]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [6097,6386]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [6392,6586]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "INFIX_EXPRESSION_OPERATOR: \u003d\u003d [6690,6692]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "NullLiteral [6693,6697]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "InfixExpression [6688,6697]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "INFIX_EXPRESSION_OPERATOR: || [6698,6700]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "InfixExpression [6701,6727]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "InfixExpression [6688,6727]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "InfixExpression [6784,6799]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "InfixExpression [6833,6852]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "ConditionalExpression [6784,6852]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "InfixExpression [6960,6975]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "NumberLiteral: 0 [6999,7000]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "ConditionalExpression [6960,7000]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "Initializer [7409,16777]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [16783,16880]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [16886,17123]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [17176,17217]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [17226,17244]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [17356,17449]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [17455,17615]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [17621,17712]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [17718,17881]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [17887,18027]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [18033,18126]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [18132,18231]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [18237,18609]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [18619,18988]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [18994,19379]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [19385,19519]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [19529,19618]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [19715,19794]",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        }
      ]
    }
  ],
  "inducing_type": {
    "add_classes": {
      "qualified_names": [
        "src/main/java/org/jsoup/nodes/DocumentType.java",
        "src/main/java/org/jsoup/parser/CharacterReader.java",
        "src/main/java/org/jsoup/parser/ParseError.java",
        "src/main/java/org/jsoup/parser/Token.java",
        "src/main/java/org/jsoup/parser/Tokeniser.java",
        "src/main/java/org/jsoup/parser/TokeniserState.java",
        "src/main/java/org/jsoup/parser/TreeBuilder.java",
        "src/main/java/org/jsoup/parser/TreeBuilderState.java"
      ],
      "num": 8
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [
        "org.jsoup.parser.Parser:parseFragment:[String fragmentHtml, Element context, String baseUri]:List\u003cNode\u003e",
        "org.jsoup.helper.StringUtil:in:[String needle, String... haystack]:boolean",
        "org.jsoup.nodes.Node:before:[Node node]:Node",
        "org.jsoup.nodes.Entities:getCharacterByName:[String name]:Character",
        "org.jsoup.nodes.Element:hashCode:[]:int",
        "org.jsoup.nodes.Node:after:[Node node]:Node",
        "org.jsoup.nodes.Entities:isNamedEntity:[String name]:boolean",
        "org.jsoup.helper.Validate:isFalse:[boolean val]:void",
        "org.jsoup.nodes.Attributes\\$Dataset:Dataset:[]:null",
        "org.jsoup.helper.Validate:fail:[String msg]:void",
        "org.jsoup.nodes.Element:before:[Node node]:Element",
        "org.jsoup.nodes.Entities:Entities:[]:null",
        "org.jsoup.nodes.Document:quirksMode:[QuirksMode quirksMode]:Document",
        "org.jsoup.nodes.Element:after:[Node node]:Element",
        "org.jsoup.parser.Tag:isSelfClosing:[]:boolean",
        "org.jsoup.nodes.Document:quirksMode:[]:QuirksMode",
        "org.jsoup.helper.Validate:isFalse:[boolean val, String msg]:void",
        "org.jsoup.parser.Tag:getName:[]:String",
        "org.jsoup.parser.Tag:isKnownTag:[String tagName]:boolean"
      ],
      "num": 19
    },
    "delete_functions": {
      "qualified_names": [
        "org.jsoup.parser.Tag:setParent:[String... tagNames]:Tag",
        "org.jsoup.parser.Parser:addChildToParent:[Element child, boolean isEmptyElement]:Element",
        "org.jsoup.parser.Tag:setFormatAsInline:[]:Tag",
        "org.jsoup.parser.Parser:parseEndTag:[]:void",
        "org.jsoup.parser.Tag:register:[Tag tag]:Tag",
        "org.jsoup.parser.Tag:setPreserveWhitespace:[]:Tag",
        "org.jsoup.parser.Tag:setLimitChildren:[]:Tag",
        "org.jsoup.parser.Parser:parseComment:[]:void",
        "org.jsoup.parser.Tag:setContainDataOnly:[]:Tag",
        "org.jsoup.parser.Parser:parseXmlDecl:[]:void",
        "org.jsoup.parser.Parser:last:[]:Element",
        "org.jsoup.helper.Validate:notEmpty:[String string, String msg]:void",
        "org.jsoup.parser.Tag:setEmpty:[]:Tag",
        "org.jsoup.parser.Parser:stackHasValidParent:[Tag childTag]:boolean",
        "org.jsoup.parser.Tag:createBlock:[String tagName]:Tag",
        "org.jsoup.parser.Tag:requiresSpecificParent:[]:boolean",
        "org.jsoup.parser.Tag:setKnownTag:[]:Tag",
        "org.jsoup.helper.StringUtil:normaliseWhitespace:[String string]:String",
        "org.jsoup.parser.Tag:setCanContainBlock:[]:Tag",
        "org.jsoup.parser.Parser:parseAttribute:[]:Attribute",
        "org.jsoup.parser.Tag:createInline:[String tagName]:Tag",
        "org.jsoup.parser.Tag:getImplicitParent:[]:Tag",
        "org.jsoup.parser.Parser:parse:[]:Document",
        "org.jsoup.parser.Parser:popStackToSuitableContainer:[Tag tag]:Element",
        "org.jsoup.parser.Tag:setOptionalClosing:[]:Tag",
        "org.jsoup.parser.Parser:parseStartTag:[]:void",
        "org.jsoup.nodes.Document:outputSettings:[]:OutputSettings",
        "org.jsoup.parser.Tag:setAncestor:[String... tagNames]:Tag",
        "org.jsoup.parser.Tag:setIgnoreEnd:[String... tagNames]:Tag",
        "org.jsoup.parser.Tag:setContainInlineOnly:[]:Tag",
        "org.jsoup.parser.Tag:setExcludes:[String... tagNames]:Tag",
        "org.jsoup.parser.Tag:isIgnorableEndTag:[Tag child]:boolean",
        "org.jsoup.parser.Parser:Parser:[String html, String baseUri, boolean isBodyFragment]:null",
        "org.jsoup.parser.Parser:parseCdata:[]:void",
        "org.jsoup.parser.Tag:isValidParent:[Tag child]:boolean",
        "org.jsoup.parser.Tag:isValidAncestor:[Tag child]:boolean",
        "org.jsoup.parser.Tag:canContain:[Tag child]:boolean",
        "org.jsoup.parser.Parser:parseTextNode:[]:void",
        "org.jsoup.parser.Parser:popStackToClose:[Tag tag]:Element"
      ],
      "num": 39
    }
  },
  "trigger_tests": [
    {
      "test_class": "org.jsoup.safety.CleanerTest",
      "test_function": "handlesFramesets",
      "assertion_line": "176",
      "exception": "java.lang.NullPointerException",
      "message": ""
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/jsoup/safety/Cleaner.java",
        "src/main/java/org/jsoup/safety/Cleaner.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.jsoup.safety.Cleaner:clean:[Document dirtyDocument]:Document"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "org.jsoup.safety.Cleaner:clean:[Document dirtyDocument]:Document"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "43"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "43",
            "44"
          ],
          "num": 2
        }
      ],
      "diff": "diff --git a/src/main/java/org/jsoup/safety/Cleaner.java b/src/main/java/org/jsoup/safety/Cleaner.java\nindex eda67df..8110836 100644\n--- a/src/main/java/org/jsoup/safety/Cleaner.java\n+++ b/src/main/java/org/jsoup/safety/Cleaner.java\n@@ -40,7 +40,8 @@\n         Validate.notNull(dirtyDocument);\n \n         Document clean \u003d Document.createShell(dirtyDocument.baseUri());\n-        copySafeNodes(dirtyDocument.body(), clean.body());\n+        if (dirtyDocument.body() !\u003d null) // frameset documents won\u0027t have a body. the clean doc will have empty body.\n+            copySafeNodes(dirtyDocument.body(), clean.body());\n \n         return clean;\n     }\n",
      "operations": [
        {
          "type": "insert-node",
          "from": "",
          "to": "IfStatement [1644,1817]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "InfixExpression [1648,1676]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  },
  "patch_changed_mths": {
    "qualified_names": [],
    "num": 0
  }
}