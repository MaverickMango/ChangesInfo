{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "/home/liumengjiao/Desktop/CI/Benchmark/data/changesInfo/",
  "properties": {
    "trigger.tests": "org.apache.commons.lang3.text.translate.EntityArraysTest::testISO8859_1_ESCAPE",
    "test.dir": "src/test/java",
    "clz.modified": "org.apache.commons.lang3.text.translate.EntityArrays",
    "src.dir": "src/main/java"
  },
  "timeoutSecond": 100,
  "proj": "Lang",
  "id": "25",
  "workingDir": "../bugs/Lang_25_buggy",
  "buggyCommit": "eb94e61a64105bcdd6afd0f6377de7b4fa7fa105",
  "inducingCommit": "a2447673d9ca590a3ed967e7a30b1f9cd18e78d1",
  "originalCommit": "4387dc3e5721255e912c74bec0272faa48ff5b20",
  "bug_name": "Lang_25",
  "derive": "defects4j",
  "original_fixing_commit": "2bae68787d15c3d3540380164e62759485078ec1",
  "buildFiles_changed": false,
  "regression": false,
  "inducing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/lang/StringEscapeUtils.java",
        "src/java/org/apache/commons/lang/StringEscapeUtils.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.lang.StringEscapeUtils:escapeJava:[String str]:String",
            "org.apache.commons.lang.StringEscapeUtils:hex:[char ch]:String",
            "org.apache.commons.lang.StringEscapeUtils:escapeCsv:[String str]:String",
            "org.apache.commons.lang.StringEscapeUtils:unescapeCsv:[String str]:String",
            "org.apache.commons.lang.StringEscapeUtils:escapeJavaScript:[Writer out, String str]:void",
            "org.apache.commons.lang.StringEscapeUtils:unescapeJavaScript:[String str]:String",
            "org.apache.commons.lang.StringEscapeUtils:escapeHtml:[Writer writer, String string]:void",
            "org.apache.commons.lang.StringEscapeUtils:escapeXml:[Writer writer, String str]:void",
            "org.apache.commons.lang.StringEscapeUtils:unescapeJavaScript:[Writer out, String str]:void",
            "org.apache.commons.lang.StringEscapeUtils:unescapeXml:[Writer writer, String str]:void",
            "org.apache.commons.lang.StringEscapeUtils:escapeHtml:[String str]:String",
            "org.apache.commons.lang.StringEscapeUtils:unescapeXml:[String str]:String",
            "org.apache.commons.lang.StringEscapeUtils:unescapeJava:[String str]:String",
            "org.apache.commons.lang.StringEscapeUtils:escapeJava:[Writer out, String str]:void",
            "org.apache.commons.lang.StringEscapeUtils:escapeJavaScript:[String str]:String",
            "org.apache.commons.lang.StringEscapeUtils:unescapeJava:[Writer out, String str]:void",
            "org.apache.commons.lang.StringEscapeUtils:unescapeCsv:[Writer out, String str]:void",
            "org.apache.commons.lang.StringEscapeUtils:unescapeHtml:[Writer writer, String string]:void",
            "org.apache.commons.lang.StringEscapeUtils:escapeJavaStyleString:[String str, boolean escapeSingleQuotes, boolean escapeForwardSlash]:String",
            "org.apache.commons.lang.StringEscapeUtils:unescapeHtml:[String str]:String",
            "org.apache.commons.lang.StringEscapeUtils:escapeJavaStyleString:[Writer out, String str, boolean escapeSingleQuote, boolean escapeForwardSlash]:void",
            "org.apache.commons.lang.StringEscapeUtils:escapeCsv:[Writer out, String str]:void",
            "org.apache.commons.lang.StringEscapeUtils:escapeXml:[String str]:String"
          ],
          "num": 23
        },
        {
          "qualified_names": [
            "org.apache.commons.lang.StringEscapeUtils:escapeJavaScript:[String str]:String",
            "org.apache.commons.lang.StringEscapeUtils:unescapeCsv:[Writer out, String str]:void",
            "org.apache.commons.lang.StringEscapeUtils:escapeJavaScript:[Writer out, String str]:void",
            "org.apache.commons.lang.StringEscapeUtils:escapeCsv:[String str]:String",
            "org.apache.commons.lang.StringEscapeUtils:unescapeHtml:[String str]:String",
            "org.apache.commons.lang.StringEscapeUtils:unescapeHtml:[Writer writer, String string]:void",
            "org.apache.commons.lang.StringEscapeUtils:unescapeJavaScript:[Writer out, String str]:void",
            "org.apache.commons.lang.StringEscapeUtils:unescapeJava:[Writer out, String str]:void",
            "org.apache.commons.lang.StringEscapeUtils:escapeXml:[String str]:String",
            "org.apache.commons.lang.StringEscapeUtils:unescapeXml:[Writer writer, String str]:void",
            "org.apache.commons.lang.StringEscapeUtils:unescapeJavaScript:[String str]:String",
            "org.apache.commons.lang.StringEscapeUtils:escapeHtml:[String str]:String",
            "org.apache.commons.lang.StringEscapeUtils:escapeCsv:[Writer out, String str]:void",
            "org.apache.commons.lang.StringEscapeUtils:unescapeJava:[String str]:String",
            "org.apache.commons.lang.StringEscapeUtils:escapeXml:[Writer writer, String str]:void",
            "org.apache.commons.lang.StringEscapeUtils:unescapeCsv:[String str]:String",
            "org.apache.commons.lang.StringEscapeUtils:escapeJava:[String str]:String",
            "org.apache.commons.lang.StringEscapeUtils:escapeJava:[Writer out, String str]:void",
            "org.apache.commons.lang.StringEscapeUtils:escapeHtml:[Writer writer, String string]:void",
            "org.apache.commons.lang.StringEscapeUtils:unescapeXml:[String str]:String"
          ],
          "num": 20
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "20",
            "22",
            "42",
            "43",
            "44",
            "45",
            "46",
            "85",
            "101",
            "126",
            "142",
            "143",
            "144",
            "145",
            "146",
            "147",
            "148",
            "149",
            "150",
            "151",
            "152",
            "153",
            "154",
            "155",
            "156",
            "157",
            "158",
            "159",
            "160",
            "161",
            "162",
            "163",
            "164",
            "165",
            "166",
            "167",
            "168",
            "169",
            "170",
            "171",
            "172",
            "173",
            "174",
            "175",
            "176",
            "177",
            "178",
            "179",
            "180",
            "181",
            "182",
            "183",
            "184",
            "185",
            "186",
            "187",
            "188",
            "189",
            "190",
            "191",
            "192",
            "193",
            "194",
            "195",
            "196",
            "197",
            "198",
            "199",
            "200",
            "201",
            "202",
            "203",
            "204",
            "205",
            "206",
            "207",
            "208",
            "209",
            "210",
            "211",
            "212",
            "213",
            "214",
            "215",
            "216",
            "217",
            "218",
            "219",
            "220",
            "221",
            "222",
            "223",
            "224",
            "225",
            "226",
            "227",
            "228",
            "229",
            "230",
            "231",
            "232",
            "233",
            "234",
            "235",
            "236",
            "237",
            "238",
            "239",
            "240",
            "241",
            "242",
            "243",
            "244",
            "245",
            "246",
            "247",
            "248",
            "249",
            "250",
            "251",
            "252",
            "253",
            "254",
            "255",
            "256",
            "257",
            "258",
            "259",
            "260",
            "261",
            "262",
            "263",
            "264",
            "277",
            "278",
            "279",
            "280",
            "281",
            "282",
            "283",
            "284",
            "285",
            "286",
            "287",
            "306",
            "307",
            "308",
            "309",
            "310",
            "311",
            "312",
            "313",
            "314",
            "315",
            "316",
            "317",
            "318",
            "319",
            "320",
            "321",
            "322",
            "323",
            "324",
            "325",
            "326",
            "327",
            "328",
            "329",
            "330",
            "331",
            "332",
            "333",
            "334",
            "335",
            "336",
            "337",
            "338",
            "339",
            "340",
            "341",
            "342",
            "343",
            "344",
            "345",
            "346",
            "347",
            "348",
            "349",
            "350",
            "351",
            "352",
            "353",
            "354",
            "355",
            "356",
            "357",
            "358",
            "359",
            "360",
            "361",
            "362",
            "363",
            "364",
            "365",
            "366",
            "367",
            "368",
            "369",
            "370",
            "371",
            "372",
            "373",
            "374",
            "375",
            "376",
            "377",
            "378",
            "379",
            "380",
            "381",
            "382",
            "383",
            "384",
            "385",
            "386",
            "401",
            "421",
            "453",
            "454",
            "455",
            "456",
            "457",
            "458",
            "459",
            "460",
            "461",
            "462",
            "463",
            "496",
            "497",
            "498",
            "499",
            "500",
            "501",
            "502",
            "523",
            "524",
            "525",
            "526",
            "527",
            "528",
            "529",
            "530",
            "531",
            "532",
            "533",
            "555",
            "556",
            "557",
            "558",
            "559",
            "560",
            "561",
            "585",
            "586",
            "587",
            "588",
            "589",
            "590",
            "591",
            "612",
            "613",
            "614",
            "615",
            "637",
            "638",
            "639",
            "640",
            "641",
            "642",
            "643",
            "662",
            "663",
            "664",
            "665",
            "693",
            "694",
            "695",
            "696",
            "697",
            "698",
            "699",
            "700",
            "701",
            "702",
            "703",
            "730",
            "731",
            "732",
            "733",
            "734",
            "735",
            "736",
            "737",
            "738",
            "739",
            "740",
            "741",
            "742",
            "743",
            "744",
            "770",
            "771",
            "772",
            "773",
            "774",
            "775",
            "776",
            "777",
            "778",
            "779",
            "780",
            "807",
            "808",
            "809",
            "810",
            "811",
            "812",
            "813",
            "814",
            "815",
            "816",
            "817",
            "818",
            "819",
            "820",
            "821",
            "822",
            "823",
            "824",
            "825",
            "826",
            "827"
          ],
          "num": 343
        },
        {
          "qualified_names": [
            "21",
            "22",
            "23",
            "40",
            "81",
            "97",
            "122",
            "138",
            "151",
            "170",
            "185",
            "205",
            "237",
            "270",
            "291",
            "313",
            "337",
            "358",
            "380",
            "399",
            "427",
            "454",
            "480",
            "507"
          ],
          "num": 24
        }
      ],
      "diff": "diff --git a/src/java/org/apache/commons/lang/StringEscapeUtils.java b/src/java/org/apache/commons/lang/StringEscapeUtils.java\nindex 92d613f..328a39a 100644\n--- a/src/java/org/apache/commons/lang/StringEscapeUtils.java\n+++ b/src/java/org/apache/commons/lang/StringEscapeUtils.java\n@@ -17,9 +17,10 @@\n package org.apache.commons.lang;\n \n import java.io.IOException;\n-import java.io.StringWriter;\n import java.io.Writer;\n-import java.util.Locale;\n+\n+import org.apache.commons.lang.text.translate.EscapeUtils;\n+import org.apache.commons.lang.text.translate.UnescapeUtils;\n \n /**\n  * \u003cp\u003eEscapes and unescapes \u003ccode\u003eString\u003c/code\u003es for\n@@ -39,11 +40,6 @@\n  */\n public class StringEscapeUtils {\n \n-    private static final char CSV_DELIMITER \u003d \u0027,\u0027;\n-    private static final char CSV_QUOTE \u003d \u0027\"\u0027;\n-    private static final String CSV_QUOTE_STR \u003d String.valueOf(CSV_QUOTE);\n-    private static final char[] CSV_SEARCH_CHARS \u003d new char[] {CSV_DELIMITER, CSV_QUOTE, CharUtils.CR, CharUtils.LF};\n-\n     /**\n      * \u003cp\u003e\u003ccode\u003eStringEscapeUtils\u003c/code\u003e instances should NOT be constructed in\n      * standard programming.\u003c/p\u003e\n@@ -82,7 +78,7 @@\n      * @return String with escaped values, \u003ccode\u003enull\u003c/code\u003e if null string input\n      */\n     public static String escapeJava(String str) {\n-        return escapeJavaStyleString(str, false, false);\n+        return EscapeUtils.ESCAPE_JAVA.translate(str);\n     }\n \n     /**\n@@ -98,7 +94,7 @@\n      * @throws IOException if error occurs on underlying Writer\n      */\n     public static void escapeJava(Writer out, String str) throws IOException {\n-        escapeJavaStyleString(out, str, false, false);\n+        EscapeUtils.ESCAPE_JAVA.translate(str, out);\n     }\n \n     /**\n@@ -123,7 +119,7 @@\n      * @return String with escaped values, \u003ccode\u003enull\u003c/code\u003e if null string input\n      */\n     public static String escapeJavaScript(String str) {\n-        return escapeJavaStyleString(str, true, true);\n+        return EscapeUtils.ESCAPE_ECMASCRIPT.translate(str);\n     }\n \n     /**\n@@ -139,129 +135,7 @@\n      * @throws IOException if error occurs on underlying Writer\n      **/\n     public static void escapeJavaScript(Writer out, String str) throws IOException {\n-        escapeJavaStyleString(out, str, true, true);\n-    }\n-\n-    /**\n-     * \u003cp\u003eWorker method for the {@link #escapeJavaScript(String)} method.\u003c/p\u003e\n-     * \n-     * @param str String to escape values in, may be null\n-     * @param escapeSingleQuotes escapes single quotes if \u003ccode\u003etrue\u003c/code\u003e\n-     * @param escapeForwardSlash TODO\n-     * @return the escaped string\n-     */\n-    private static String escapeJavaStyleString(String str, boolean escapeSingleQuotes, boolean escapeForwardSlash) {\n-        if (str \u003d\u003d null) {\n-            return null;\n-        }\n-        try {\n-            StringWriter writer \u003d new StringWriter(str.length() * 2);\n-            escapeJavaStyleString(writer, str, escapeSingleQuotes, escapeForwardSlash);\n-            return writer.toString();\n-        } catch (IOException ioe) {\n-            // this should never ever happen while writing to a StringWriter\n-            throw new UnhandledException(ioe);\n-        }\n-    }\n-\n-    /**\n-     * \u003cp\u003eWorker method for the {@link #escapeJavaScript(String)} method.\u003c/p\u003e\n-     * \n-     * @param out write to receieve the escaped string\n-     * @param str String to escape values in, may be null\n-     * @param escapeSingleQuote escapes single quotes if \u003ccode\u003etrue\u003c/code\u003e\n-     * @param escapeForwardSlash TODO\n-     * @throws IOException if an IOException occurs\n-     */\n-    private static void escapeJavaStyleString(Writer out, String str, boolean escapeSingleQuote,\n-            boolean escapeForwardSlash) throws IOException {\n-        if (out \u003d\u003d null) {\n-            throw new IllegalArgumentException(\"The Writer must not be null\");\n-        }\n-        if (str \u003d\u003d null) {\n-            return;\n-        }\n-        int sz;\n-        sz \u003d str.length();\n-        for (int i \u003d 0; i \u003c sz; i++) {\n-            char ch \u003d str.charAt(i);\n-\n-            // handle unicode\n-            if (ch \u003e 0xfff) {\n-                out.write(\"\\\\u\" + hex(ch));\n-            } else if (ch \u003e 0xff) {\n-                out.write(\"\\\\u0\" + hex(ch));\n-            } else if (ch \u003e 0x7f) {\n-                out.write(\"\\\\u00\" + hex(ch));\n-            } else if (ch \u003c 32) {\n-                switch (ch) {\n-                    case \u0027\\b\u0027 :\n-                        out.write(\u0027\\\\\u0027);\n-                        out.write(\u0027b\u0027);\n-                        break;\n-                    case \u0027\\n\u0027 :\n-                        out.write(\u0027\\\\\u0027);\n-                        out.write(\u0027n\u0027);\n-                        break;\n-                    case \u0027\\t\u0027 :\n-                        out.write(\u0027\\\\\u0027);\n-                        out.write(\u0027t\u0027);\n-                        break;\n-                    case \u0027\\f\u0027 :\n-                        out.write(\u0027\\\\\u0027);\n-                        out.write(\u0027f\u0027);\n-                        break;\n-                    case \u0027\\r\u0027 :\n-                        out.write(\u0027\\\\\u0027);\n-                        out.write(\u0027r\u0027);\n-                        break;\n-                    default :\n-                        if (ch \u003e 0xf) {\n-                            out.write(\"\\\\u00\" + hex(ch));\n-                        } else {\n-                            out.write(\"\\\\u000\" + hex(ch));\n-                        }\n-                        break;\n-                }\n-            } else {\n-                switch (ch) {\n-                    case \u0027\\\u0027\u0027 :\n-                        if (escapeSingleQuote) {\n-                            out.write(\u0027\\\\\u0027);\n-                        }\n-                        out.write(\u0027\\\u0027\u0027);\n-                        break;\n-                    case \u0027\"\u0027 :\n-                        out.write(\u0027\\\\\u0027);\n-                        out.write(\u0027\"\u0027);\n-                        break;\n-                    case \u0027\\\\\u0027 :\n-                        out.write(\u0027\\\\\u0027);\n-                        out.write(\u0027\\\\\u0027);\n-                        break;\n-                    case \u0027/\u0027 :\n-                        if (escapeForwardSlash) {\n-                            out.write(\u0027\\\\\u0027);\n-                        }\n-                        out.write(\u0027/\u0027);\n-                        break;\n-                    default :\n-                        out.write(ch);\n-                        break;\n-                }\n-            }\n-        }\n-    }\n-\n-    /**\n-     * \u003cp\u003eReturns an upper case hexadecimal \u003ccode\u003eString\u003c/code\u003e for the given\n-     * character.\u003c/p\u003e\n-     * \n-     * @param ch The character to convert.\n-     * @return An upper case hexadecimal \u003ccode\u003eString\u003c/code\u003e\n-     */\n-    private static String hex(char ch) {\n-        return Integer.toHexString(ch).toUpperCase(Locale.ENGLISH);\n+        EscapeUtils.ESCAPE_ECMASCRIPT.translate(str, out);\n     }\n \n     /**\n@@ -274,17 +148,7 @@\n      * @return a new unescaped \u003ccode\u003eString\u003c/code\u003e, \u003ccode\u003enull\u003c/code\u003e if null string input\n      */\n     public static String unescapeJava(String str) {\n-        if (str \u003d\u003d null) {\n-            return null;\n-        }\n-        try {\n-            StringWriter writer \u003d new StringWriter(str.length());\n-            unescapeJava(writer, str);\n-            return writer.toString();\n-        } catch (IOException ioe) {\n-            // this should never ever happen while writing to a StringWriter\n-            throw new UnhandledException(ioe);\n-        }\n+        return UnescapeUtils.UNESCAPE_JAVA.translate(str);\n     }\n \n     /**\n@@ -303,87 +167,7 @@\n      * @throws IOException if error occurs on underlying Writer\n      */\n     public static void unescapeJava(Writer out, String str) throws IOException {\n-        if (out \u003d\u003d null) {\n-            throw new IllegalArgumentException(\"The Writer must not be null\");\n-        }\n-        if (str \u003d\u003d null) {\n-            return;\n-        }\n-        int sz \u003d str.length();\n-        StringBuffer unicode \u003d new StringBuffer(4);\n-        boolean hadSlash \u003d false;\n-        boolean inUnicode \u003d false;\n-        for (int i \u003d 0; i \u003c sz; i++) {\n-            char ch \u003d str.charAt(i);\n-            if (inUnicode) {\n-                // if in unicode, then we\u0027re reading unicode\n-                // values in somehow\n-                unicode.append(ch);\n-                if (unicode.length() \u003d\u003d 4) {\n-                    // unicode now contains the four hex digits\n-                    // which represents our unicode character\n-                    try {\n-                        int value \u003d Integer.parseInt(unicode.toString(), 16);\n-                        out.write((char) value);\n-                        unicode.setLength(0);\n-                        inUnicode \u003d false;\n-                        hadSlash \u003d false;\n-                    } catch (NumberFormatException nfe) {\n-                        throw new UnhandledException(\"Unable to parse unicode value: \" + unicode, nfe);\n-                    }\n-                }\n-                continue;\n-            }\n-            if (hadSlash) {\n-                // handle an escaped value\n-                hadSlash \u003d false;\n-                switch (ch) {\n-                    case \u0027\\\\\u0027:\n-                        out.write(\u0027\\\\\u0027);\n-                        break;\n-                    case \u0027\\\u0027\u0027:\n-                        out.write(\u0027\\\u0027\u0027);\n-                        break;\n-                    case \u0027\\\"\u0027:\n-                        out.write(\u0027\"\u0027);\n-                        break;\n-                    case \u0027r\u0027:\n-                        out.write(\u0027\\r\u0027);\n-                        break;\n-                    case \u0027f\u0027:\n-                        out.write(\u0027\\f\u0027);\n-                        break;\n-                    case \u0027t\u0027:\n-                        out.write(\u0027\\t\u0027);\n-                        break;\n-                    case \u0027n\u0027:\n-                        out.write(\u0027\\n\u0027);\n-                        break;\n-                    case \u0027b\u0027:\n-                        out.write(\u0027\\b\u0027);\n-                        break;\n-                    case \u0027u\u0027:\n-                        {\n-                            // uh-oh, we\u0027re in unicode country....\n-                            inUnicode \u003d true;\n-                            break;\n-                        }\n-                    default :\n-                        out.write(ch);\n-                        break;\n-                }\n-                continue;\n-            } else if (ch \u003d\u003d \u0027\\\\\u0027) {\n-                hadSlash \u003d true;\n-                continue;\n-            }\n-            out.write(ch);\n-        }\n-        if (hadSlash) {\n-            // then we\u0027re in the weird case of a \\ at the end of the\n-            // string, let\u0027s output it anyway.\n-            out.write(\u0027\\\\\u0027);\n-        }\n+        UnescapeUtils.UNESCAPE_JAVA.translate(str, out);\n     }\n \n     /**\n@@ -398,7 +182,7 @@\n      * @return A new unescaped \u003ccode\u003eString\u003c/code\u003e, \u003ccode\u003enull\u003c/code\u003e if null string input\n      */\n     public static String unescapeJavaScript(String str) {\n-        return unescapeJava(str);\n+        return UnescapeUtils.UNESCAPE_ECMASCRIPT.translate(str);\n     }\n \n     /**\n@@ -418,7 +202,7 @@\n      * @throws IOException if error occurs on underlying Writer\n      */\n     public static void unescapeJavaScript(Writer out, String str) throws IOException {\n-        unescapeJava(out, str);\n+        UnescapeUtils.UNESCAPE_ECMASCRIPT.translate(str, out);\n     }\n \n     // HTML and XML\n@@ -450,17 +234,7 @@\n      * @see \u003ca href\u003d\"http://www.w3.org/TR/html401/charset.html#code-position\"\u003eHTML 4.01 Code positions\u003c/a\u003e\n      */\n     public static String escapeHtml(String str) {\n-        if (str \u003d\u003d null) {\n-            return null;\n-        }\n-        try {\n-            StringWriter writer \u003d new StringWriter ((int)(str.length() * 1.5));\n-            escapeHtml(writer, str);\n-            return writer.toString();\n-        } catch (IOException ioe) {\n-            //should be impossible\n-            throw new UnhandledException(ioe);\n-        }\n+        return EscapeUtils.ESCAPE_HTML4.translate(str);\n     }\n \n     /**\n@@ -493,13 +267,7 @@\n      * @see \u003ca href\u003d\"http://www.w3.org/TR/html401/charset.html#code-position\"\u003eHTML 4.01 Code positions\u003c/a\u003e\n      */\n     public static void escapeHtml(Writer writer, String string) throws IOException {\n-        if (writer \u003d\u003d null ) {\n-            throw new IllegalArgumentException (\"The Writer must not be null.\");\n-        }\n-        if (string \u003d\u003d null) {\n-            return;\n-        }\n-        Entities.HTML40.escape(writer, string);\n+        EscapeUtils.ESCAPE_HTML4.translate(string, writer);\n     }\n \n     //-----------------------------------------------------------------------\n@@ -520,17 +288,7 @@\n      * @see #escapeHtml(Writer, String)\n      */\n     public static String unescapeHtml(String str) {\n-        if (str \u003d\u003d null) {\n-            return null;\n-        }\n-        try {\n-            StringWriter writer \u003d new StringWriter ((int)(str.length() * 1.5));\n-            unescapeHtml(writer, str);\n-            return writer.toString();\n-        } catch (IOException ioe) {\n-            //should be impossible\n-            throw new UnhandledException(ioe);\n-        }\n+        return UnescapeUtils.UNESCAPE_HTML4.translate(str);\n     }\n \n     /**\n@@ -552,13 +310,7 @@\n      * @see #escapeHtml(String)\n      */\n     public static void unescapeHtml(Writer writer, String string) throws IOException {\n-        if (writer \u003d\u003d null ) {\n-            throw new IllegalArgumentException (\"The Writer must not be null.\");\n-        }\n-        if (string \u003d\u003d null) {\n-            return;\n-        }\n-        Entities.HTML40.unescape(writer, string);\n+        UnescapeUtils.UNESCAPE_HTML4.translate(string, writer);\n     }\n \n     //-----------------------------------------------------------------------\n@@ -582,13 +334,7 @@\n      * @see #unescapeXml(java.lang.String)\n      */\n     public static void escapeXml(Writer writer, String str) throws IOException {\n-        if (writer \u003d\u003d null ) {\n-            throw new IllegalArgumentException (\"The Writer must not be null.\");\n-        }\n-        if (str \u003d\u003d null) {\n-            return;\n-        }\n-        Entities.XML.escape(writer, str);\n+        EscapeUtils.ESCAPE_XML.translate(str, writer);\n     }\n \n     /**\n@@ -609,10 +355,7 @@\n      * @see #unescapeXml(java.lang.String)\n      */\n     public static String escapeXml(String str) {\n-        if (str \u003d\u003d null) {\n-            return null;\n-        }\n-        return Entities.XML.escape(str);\n+        return EscapeUtils.ESCAPE_XML.translate(str);\n     }\n \n     //-----------------------------------------------------------------------\n@@ -634,13 +377,7 @@\n      * @see #escapeXml(String)\n      */\n     public static void unescapeXml(Writer writer, String str) throws IOException {\n-        if (writer \u003d\u003d null ) {\n-            throw new IllegalArgumentException (\"The Writer must not be null.\");\n-        }\n-        if (str \u003d\u003d null) {\n-            return;\n-        }\n-        Entities.XML.unescape(writer, str);\n+        UnescapeUtils.UNESCAPE_XML.translate(str, writer);\n     }\n \n     /**\n@@ -659,10 +396,7 @@\n      * @see #escapeXml(String)\n      */\n     public static String unescapeXml(String str) {\n-        if (str \u003d\u003d null) {\n-            return null;\n-        }\n-        return Entities.XML.unescape(str);\n+        return UnescapeUtils.UNESCAPE_XML.translate(str);\n     }\n \n     //-----------------------------------------------------------------------\n@@ -690,17 +424,7 @@\n      * @since 2.4\n      */\n     public static String escapeCsv(String str) {\n-        if (StringUtils.containsNone(str, CSV_SEARCH_CHARS)) {\n-            return str;\n-        }\n-        try {\n-            StringWriter writer \u003d new StringWriter();\n-            escapeCsv(writer, str);\n-            return writer.toString();\n-        } catch (IOException ioe) {\n-            // this should never ever happen while writing to a StringWriter\n-            throw new UnhandledException(ioe);\n-        }\n+        return EscapeUtils.ESCAPE_CSV.translate(str);\n     }\n \n     /**\n@@ -727,21 +451,7 @@\n      * @since 2.4\n      */\n     public static void escapeCsv(Writer out, String str) throws IOException {\n-        if (StringUtils.containsNone(str, CSV_SEARCH_CHARS)) {\n-            if (str !\u003d null) {\n-                out.write(str);\n-            }\n-            return;\n-        }\n-        out.write(CSV_QUOTE);\n-        for (int i \u003d 0; i \u003c str.length(); i++) {\n-            char c \u003d str.charAt(i);\n-            if (c \u003d\u003d CSV_QUOTE) {\n-                out.write(CSV_QUOTE); // escape double quote\n-            }\n-            out.write(c);\n-        }\n-        out.write(CSV_QUOTE);\n+        EscapeUtils.ESCAPE_CSV.translate(str, out);\n     }\n \n     /**\n@@ -767,17 +477,7 @@\n      * @since 2.4\n      */\n     public static String unescapeCsv(String str) {\n-        if (str \u003d\u003d null) {\n-            return null;\n-        }\n-        try {\n-            StringWriter writer \u003d new StringWriter();\n-            unescapeCsv(writer, str);\n-            return writer.toString();\n-        } catch (IOException ioe) {\n-            // this should never ever happen while writing to a StringWriter\n-            throw new UnhandledException(ioe);\n-        }\n+        return UnescapeUtils.UNESCAPE_CSV.translate(str);\n     }\n \n     /**\n@@ -804,27 +504,7 @@\n      * @since 2.4\n      */\n     public static void unescapeCsv(Writer out, String str) throws IOException {\n-        if (str \u003d\u003d null) {\n-            return;\n-        }\n-        if (str.length() \u003c 2) {\n-            out.write(str);\n-            return;\n-        }\n-        if ( str.charAt(0) !\u003d CSV_QUOTE || str.charAt(str.length() - 1) !\u003d CSV_QUOTE ) {\n-            out.write(str);\n-            return;\n-        }\n-\n-        // strip quotes\n-        String quoteless \u003d str.substring(1, str.length() - 1);\n-\n-        if ( StringUtils.containsAny(quoteless, CSV_SEARCH_CHARS) ) {\n-            // deal with escaped quotes; ie) \"\"\n-            str \u003d StringUtils.replace(quoteless, CSV_QUOTE_STR + CSV_QUOTE_STR, CSV_QUOTE_STR);\n-        }\n-\n-        out.write(str);\n+        UnescapeUtils.UNESCAPE_CSV.translate(str, out);\n     }\n \n }\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "ImportDeclaration [891,949]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ImportDeclaration [950,1010]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ReturnStatement [2873,2919]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [3522,3566]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ReturnStatement [4461,4513]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [5135,5185]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ReturnStatement [5706,5756]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [6549,6597]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ReturnStatement [7177,7233]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [8078,8132]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ReturnStatement [9578,9625]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [11288,11339]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ReturnStatement [12206,12257]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [13173,13228]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [14277,14323]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ReturnStatement [15158,15203]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [16157,16207]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ReturnStatement [16949,16998]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [19243,19286]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ReturnStatement [20340,20389]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [21558,21605]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "MethodInvocation [18101,18138]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "METHOD_INVOCATION_RECEIVER [18101,18123]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: translate [18124,18133]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "METHOD_INVOCATION_ARGUMENTS [18134,18137]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ImportDeclaration [867,895]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ImportDeclaration [919,943]",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ReturnStatement [3098,3146]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [3749,3795]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ReturnStatement [4690,4736]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [5358,5402]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "Javadoc [5414,5717]",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: static [5730,5736]",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SingleVariableDeclaration [5766,5776]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SingleVariableDeclaration [5778,5804]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SingleVariableDeclaration [5806,5832]",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [5994,6069]",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [6289,9395]",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SingleVariableDeclaration [9655,9662]",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [10254,10307]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TryStatement [10316,10634]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [11427,11534]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [11543,11591]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [11600,11622]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [11631,11674]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [11683,11708]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [11717,11743]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ForStatement [11752,14153]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [14162,14332]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ReturnStatement [14912,14937]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [15782,15805]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [17251,17304]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TryStatement [17313,17601]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [19264,19377]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [19386,19437]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [19446,19485]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [20352,20405]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TryStatement [20414,20704]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [21620,21733]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [21742,21793]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [21802,21843]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [22892,23005]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [23014,23062]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [23071,23104]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [23939,23992]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ReturnStatement [24001,24033]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [24987,25100]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [25109,25157]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [25166,25201]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [25943,25996]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ReturnStatement [26005,26039]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodInvocation [27139,27186]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Block [27188,27223]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "IfStatement [27135,27223]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TryStatement [27232,27535]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [28639,28800]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [28809,28830]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ForStatement [28839,29060]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [29069,29090]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [30144,30197]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "TryStatement [30206,30511]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [31680,31728]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [31737,31818]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [31827,31965]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [31999,32053]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [32063,32278]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [32288,32303]",
          "to": ""
        }
      ]
    }
  ],
  "inducing_type": {
    "add_classes": {
      "qualified_names": [
        "src/java/org/apache/commons/lang/text/translate/AggregateTranslator.java",
        "src/java/org/apache/commons/lang/text/translate/CharSequenceTranslator.java",
        "src/java/org/apache/commons/lang/text/translate/CodePointTranslator.java",
        "src/java/org/apache/commons/lang/text/translate/EntityArrays.java",
        "src/java/org/apache/commons/lang/text/translate/EscapeLowAsciiAsUnicode.java",
        "src/java/org/apache/commons/lang/text/translate/EscapeNonAsciiAsNumericEntity.java",
        "src/java/org/apache/commons/lang/text/translate/EscapeNonAsciiAsUnicode.java",
        "src/java/org/apache/commons/lang/text/translate/EscapeUtils.java",
        "src/java/org/apache/commons/lang/text/translate/LookupTranslator.java",
        "src/java/org/apache/commons/lang/text/translate/NumericEntityUnescaper.java",
        "src/java/org/apache/commons/lang/text/translate/UnescapeUtils.java",
        "src/java/org/apache/commons/lang/text/translate/UnicodeEscaper.java",
        "src/java/org/apache/commons/lang/text/translate/UnicodeUnescaper.java"
      ],
      "num": 13
    },
    "delete_classes": {
      "qualified_names": [
        "src/java/org/apache/commons/lang/Entities.java"
      ],
      "num": 1
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [
        "org.apache.commons.lang.StringEscapeUtils:escapeJavaStyleString:[Writer out, String str, boolean escapeSingleQuote, boolean escapeForwardSlash]:void",
        "org.apache.commons.lang.StringEscapeUtils:escapeJavaStyleString:[String str, boolean escapeSingleQuotes, boolean escapeForwardSlash]:String",
        "org.apache.commons.lang.StringEscapeUtils:hex:[char ch]:String"
      ],
      "num": 3
    }
  },
  "trigger_tests": [
    {
      "test_class": "org.apache.commons.lang3.text.translate.EntityArraysTest",
      "test_function": "testISO8859_1_ESCAPE",
      "assertion_line": "64",
      "exception": "junit.framework.AssertionFailedError",
      "message": "One or more errors detected"
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java",
        "src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [],
          "num": 0
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "74",
            "75",
            "76",
            "77",
            "78",
            "79",
            "80",
            "81",
            "82",
            "83",
            "84",
            "85",
            "86",
            "87",
            "88",
            "89",
            "90",
            "91",
            "92",
            "93",
            "94",
            "95",
            "96",
            "97",
            "98",
            "99",
            "100"
          ],
          "num": 27
        },
        {
          "qualified_names": [
            "74",
            "75",
            "76",
            "77",
            "78",
            "79",
            "80",
            "81",
            "82",
            "83",
            "84",
            "85",
            "86",
            "87",
            "88",
            "89",
            "90",
            "91",
            "92",
            "93",
            "94",
            "95",
            "96",
            "97",
            "98",
            "99",
            "100"
          ],
          "num": 27
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca58..ef839c6 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -71,33 +71,33 @@\n         {\"\\u00C7\", \"\u0026Ccedil;\"}, // � - uppercase C, cedilla\n         {\"\\u00C8\", \"\u0026Egrave;\"}, // � - uppercase E, grave accent\n         {\"\\u00C9\", \"\u0026Eacute;\"}, // � - uppercase E, acute accent\n-        {\"\\u00CB\", \"\u0026Ecirc;\"}, // � - uppercase E, circumflex accent\n-        {\"\\u00CC\", \"\u0026Euml;\"}, // � - uppercase E, umlaut\n-        {\"\\u00CD\", \"\u0026Igrave;\"}, // � - uppercase I, grave accent\n-        {\"\\u00CE\", \"\u0026Iacute;\"}, // � - uppercase I, acute accent\n-        {\"\\u00CF\", \"\u0026Icirc;\"}, // � - uppercase I, circumflex accent\n-        {\"\\u00D0\", \"\u0026Iuml;\"}, // � - uppercase I, umlaut\n-        {\"\\u00D1\", \"\u0026ETH;\"}, // � - uppercase Eth, Icelandic\n-        {\"\\u00D2\", \"\u0026Ntilde;\"}, // � - uppercase N, tilde\n-        {\"\\u00D3\", \"\u0026Ograve;\"}, // � - uppercase O, grave accent\n-        {\"\\u00D4\", \"\u0026Oacute;\"}, // � - uppercase O, acute accent\n-        {\"\\u00D5\", \"\u0026Ocirc;\"}, // � - uppercase O, circumflex accent\n-        {\"\\u00D6\", \"\u0026Otilde;\"}, // � - uppercase O, tilde\n-        {\"\\u00D7\", \"\u0026Ouml;\"}, // � - uppercase O, umlaut\n-        {\"\\u00D8\", \"\u0026times;\"}, // multiplication sign\n-        {\"\\u00D9\", \"\u0026Oslash;\"}, // � - uppercase O, slash\n-        {\"\\u00DA\", \"\u0026Ugrave;\"}, // � - uppercase U, grave accent\n-        {\"\\u00DB\", \"\u0026Uacute;\"}, // � - uppercase U, acute accent\n-        {\"\\u00DC\", \"\u0026Ucirc;\"}, // � - uppercase U, circumflex accent\n-        {\"\\u00DD\", \"\u0026Uuml;\"}, // � - uppercase U, umlaut\n-        {\"\\u00DE\", \"\u0026Yacute;\"}, // � - uppercase Y, acute accent\n-        {\"\\u00DF\", \"\u0026THORN;\"}, // � - uppercase THORN, Icelandic\n-        {\"\\u00E0\", \"\u0026szlig;\"}, // � - lowercase sharps, German\n-        {\"\\u00E1\", \"\u0026agrave;\"}, // � - lowercase a, grave accent\n-        {\"\\u00E2\", \"\u0026aacute;\"}, // � - lowercase a, acute accent\n-        {\"\\u00E3\", \"\u0026acirc;\"}, // � - lowercase a, circumflex accent\n-        {\"\\u00E4\", \"\u0026atilde;\"}, // � - lowercase a, tilde\n-        {\"\\u00E5\", \"\u0026auml;\"}, // � - lowercase a, umlaut\n+        {\"\\u00CA\", \"\u0026Ecirc;\"}, // � - uppercase E, circumflex accent\n+        {\"\\u00CB\", \"\u0026Euml;\"}, // � - uppercase E, umlaut\n+        {\"\\u00CC\", \"\u0026Igrave;\"}, // � - uppercase I, grave accent\n+        {\"\\u00CD\", \"\u0026Iacute;\"}, // � - uppercase I, acute accent\n+        {\"\\u00CE\", \"\u0026Icirc;\"}, // � - uppercase I, circumflex accent\n+        {\"\\u00CF\", \"\u0026Iuml;\"}, // � - uppercase I, umlaut\n+        {\"\\u00D0\", \"\u0026ETH;\"}, // � - uppercase Eth, Icelandic\n+        {\"\\u00D1\", \"\u0026Ntilde;\"}, // � - uppercase N, tilde\n+        {\"\\u00D2\", \"\u0026Ograve;\"}, // � - uppercase O, grave accent\n+        {\"\\u00D3\", \"\u0026Oacute;\"}, // � - uppercase O, acute accent\n+        {\"\\u00D4\", \"\u0026Ocirc;\"}, // � - uppercase O, circumflex accent\n+        {\"\\u00D5\", \"\u0026Otilde;\"}, // � - uppercase O, tilde\n+        {\"\\u00D6\", \"\u0026Ouml;\"}, // � - uppercase O, umlaut\n+        {\"\\u00D7\", \"\u0026times;\"}, // multiplication sign\n+        {\"\\u00D8\", \"\u0026Oslash;\"}, // � - uppercase O, slash\n+        {\"\\u00D9\", \"\u0026Ugrave;\"}, // � - uppercase U, grave accent\n+        {\"\\u00DA\", \"\u0026Uacute;\"}, // � - uppercase U, acute accent\n+        {\"\\u00DB\", \"\u0026Ucirc;\"}, // � - uppercase U, circumflex accent\n+        {\"\\u00DC\", \"\u0026Uuml;\"}, // � - uppercase U, umlaut\n+        {\"\\u00DD\", \"\u0026Yacute;\"}, // � - uppercase Y, acute accent\n+        {\"\\u00DE\", \"\u0026THORN;\"}, // � - uppercase THORN, Icelandic\n+        {\"\\u00DF\", \"\u0026szlig;\"}, // � - lowercase sharps, German\n+        {\"\\u00E0\", \"\u0026agrave;\"}, // � - lowercase a, grave accent\n+        {\"\\u00E1\", \"\u0026aacute;\"}, // � - lowercase a, acute accent\n+        {\"\\u00E2\", \"\u0026acirc;\"}, // � - lowercase a, circumflex accent\n+        {\"\\u00E3\", \"\u0026atilde;\"}, // � - lowercase a, tilde\n+        {\"\\u00E4\", \"\u0026auml;\"}, // � - lowercase a, umlaut\n         {\"\\u00E5\", \"\u0026aring;\"}, // � - lowercase a, ring\n         {\"\\u00E6\", \"\u0026aelig;\"}, // � - lowercase ae\n         {\"\\u00E7\", \"\u0026ccedil;\"}, // � - lowercase c, cedilla\n",
      "operations": [
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  },
  "patch_changed_mths": {
    "qualified_names": [],
    "num": 0
  }
}