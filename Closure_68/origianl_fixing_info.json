{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "/home/liumengjiao/Desktop/CI/Benchmark/data/changesInfo/",
  "properties": {
    "trigger.tests": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testIssue477",
    "test.dir": "test",
    "clz.modified": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
    "src.dir": "src"
  },
  "timeoutSecond": 100,
  "proj": "Closure",
  "id": "68",
  "workingDir": "../bugs/Closure_68_buggy",
  "buggyCommit": "f392c8416faeb6dc41e663912ad7f4421d893a90",
  "inducingCommit": "3924ff1e4a236d68a0b5448d185537d90ca04419",
  "originalCommit": "a478193982ce1fb9271e3f7ebcc1369913c9a859",
  "bug_name": "Closure_68",
  "derive": "defects4j",
  "original_fixing_commit": "9d5a6e3082dd99f6c44df1b3526b9e83b79aa7da",
  "buildFiles_changed": false,
  "regression": true,
  "inducing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/jscomp/AbstractCompiler.java",
        "src/com/google/javascript/jscomp/AbstractCompiler.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "com.google.javascript.jscomp.AbstractCompiler:getErrorManager:[]:ErrorManager"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "com.google.javascript.jscomp.AbstractCompiler:setNormalized:[]:void",
            "com.google.javascript.jscomp.AbstractCompiler:setUnnormalized:[]:void"
          ],
          "num": 2
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "33",
            "204"
          ],
          "num": 2
        },
        {
          "qualified_names": [
            "34",
            "35",
            "36",
            "208",
            "209",
            "210",
            "211",
            "212",
            "213",
            "214",
            "215",
            "216",
            "217",
            "218",
            "219"
          ],
          "num": 15
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/jscomp/AbstractCompiler.java b/src/com/google/javascript/jscomp/AbstractCompiler.java\nindex 44846ec..2c9881d 100644\n--- a/src/com/google/javascript/jscomp/AbstractCompiler.java\n+++ b/src/com/google/javascript/jscomp/AbstractCompiler.java\n@@ -31,6 +31,9 @@\n *\n  */\n public abstract class AbstractCompiler implements SourceExcerptProvider {\n+  static final DiagnosticType READ_ERROR \u003d DiagnosticType.error(\n+      \"JSC_READ_ERROR\", \"Cannot read: {0}\");\n+\n   // TODO(nicksantos): Decide if all of these are really necessary.\n   // Many of them are just accessors that should be passed to the\n   // CompilerPass\u0027s constructor.\n@@ -202,4 +205,16 @@\n    * Gets the error manager.\n    */\n   abstract public ErrorManager getErrorManager();\n+\n+  /**\n+   * Set if the normalization pass has been done.\n+   * Note: non-private to enable test cases that require the Normalize pass.\n+   */\n+  abstract void setNormalized();\n+\n+  /**\n+   * Set once unnormalizing passes have been start.\n+   * Note: non-private to enable test cases that require the Normalize pass.\n+   */\n+  abstract void setUnnormalized();\n }\n",
      "operations": [
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [5538,5707]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [5711,5884]"
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/jscomp/Compiler.java",
        "src/com/google/javascript/jscomp/Compiler.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "com.google.javascript.jscomp.Compiler:aliasExternals:[]:void",
            "com.google.javascript.jscomp.Compiler:getState:[]:IntermediateState",
            "com.google.javascript.jscomp.Compiler:optimize:[]:void",
            "com.google.javascript.jscomp.Compiler:setUnnormalized:[]:void",
            "com.google.javascript.jscomp.Compiler:recordFunctionInformation:[]:void",
            "com.google.javascript.jscomp.Compiler:runCustomPasses:[CustomPassExecutionTime executionTime]:void",
            "com.google.javascript.jscomp.Compiler:invertContextualRenaming:[]:void",
            "com.google.javascript.jscomp.Compiler:aliasKeywords:[]:void",
            "com.google.javascript.jscomp.Compiler:getResult:[]:Result",
            "com.google.javascript.jscomp.Compiler:nameAnonymousFunctions:[AnonymousFunctionNamingPolicy policy]:void",
            "com.google.javascript.jscomp.Compiler:rewriteFunctionExpressions:[]:void",
            "com.google.javascript.jscomp.Compiler:setNormalized:[]:void",
            "com.google.javascript.jscomp.Compiler:collapseVariableDeclarations:[]:void",
            "com.google.javascript.jscomp.Compiler:aliasStrings:[Set\u003cString\u003e aliasableStrings, boolean aliasAllStrings, String aliasStringsBlacklist, boolean outputStringUsage]:void",
            "com.google.javascript.jscomp.Compiler:collapseAnonymousFunctions:[]:void",
            "com.google.javascript.jscomp.Compiler:compileInternal:[]:void",
            "com.google.javascript.jscomp.Compiler:convertToDottedProperties:[]:void",
            "com.google.javascript.jscomp.Compiler:denormalize:[]:void",
            "com.google.javascript.jscomp.Compiler:computeFunctionNames:[]:void",
            "com.google.javascript.jscomp.Compiler:sanityCheckVars:[]:void",
            "com.google.javascript.jscomp.Compiler:instrumentFunctions:[]:void",
            "com.google.javascript.jscomp.Compiler:getVariableMap:[]:VariableMap",
            "com.google.javascript.jscomp.Compiler:renameProperties:[boolean generatePseudoNames, AnonymousFunctionNamingPolicy anonFunctionNamePolicy, VariableMap prevPropertyMap]:void",
            "com.google.javascript.jscomp.Compiler:flowSensitiveInlineVariables:[]:void",
            "com.google.javascript.jscomp.Compiler:renameVars:[String renamePrefix, boolean renameLocalVarsOnly, AnonymousFunctionNamingPolicy anonFunctionNamePolicy, boolean generatePseudoNames, VariableMap prevVariableMap]:void",
            "com.google.javascript.jscomp.Compiler:setState:[IntermediateState state]:void",
            "com.google.javascript.jscomp.Compiler:check:[]:void",
            "com.google.javascript.jscomp.Compiler:coalesceVariableNames:[]:void",
            "com.google.javascript.jscomp.Compiler:renamePrototypes:[boolean aggressive, AnonymousFunctionNamingPolicy anonFunctionNamePolicy, VariableMap prevPropertyMap]:void",
            "com.google.javascript.jscomp.Compiler:renameLabels:[]:void",
            "com.google.javascript.jscomp.Compiler:getPropertyMap:[]:VariableMap",
            "com.google.javascript.jscomp.Compiler:moveFunctionDeclarations:[]:void",
            "com.google.javascript.jscomp.Compiler:objectPropertyStringPostprocess:[]:void",
            "com.google.javascript.jscomp.Compiler:ambiguateProperties:[char[] reservedCharacters]:void",
            "com.google.javascript.jscomp.Compiler:extractPrototypeMemberDeclarations:[]:void"
          ],
          "num": 35
        },
        {
          "qualified_names": [
            "com.google.javascript.jscomp.Compiler:getVariableMap:[]:VariableMap",
            "com.google.javascript.jscomp.Compiler:getPropertyMap:[]:VariableMap",
            "com.google.javascript.jscomp.Compiler:setNormalized:[]:void",
            "com.google.javascript.jscomp.Compiler:removeChangeHandler:[CodeChangeHandler handler]:void",
            "com.google.javascript.jscomp.Compiler:newTracer:[String passName]:Tracer",
            "com.google.javascript.jscomp.Compiler:setUnnormalized:[]:void",
            "com.google.javascript.jscomp.Compiler:compileInternal:[]:void",
            "com.google.javascript.jscomp.Compiler:check:[]:void",
            "com.google.javascript.jscomp.Compiler:Compiler:[PrintStream stream]:null",
            "com.google.javascript.jscomp.Compiler:getResult:[]:Result",
            "com.google.javascript.jscomp.Compiler:recordFunctionInformation:[]:void"
          ],
          "num": 11
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "32",
            "36",
            "93",
            "94",
            "95",
            "96",
            "97",
            "98",
            "99",
            "100",
            "101",
            "123",
            "124",
            "125",
            "151",
            "152",
            "159",
            "160",
            "161",
            "162",
            "163",
            "164",
            "531",
            "617",
            "618",
            "619",
            "705",
            "706",
            "707",
            "708",
            "709",
            "710",
            "711",
            "712",
            "713",
            "714",
            "715",
            "716",
            "717",
            "718",
            "719",
            "720",
            "721",
            "722",
            "723",
            "724",
            "725",
            "726",
            "727",
            "728",
            "729",
            "730",
            "731",
            "732",
            "798",
            "799",
            "800",
            "859",
            "867",
            "1310",
            "1311",
            "1312",
            "1313",
            "1314",
            "1315",
            "1316",
            "1317",
            "1318",
            "1319",
            "1320",
            "1321",
            "1322",
            "1323",
            "1324",
            "1325",
            "1326",
            "1327",
            "1328",
            "1329",
            "1330",
            "1331",
            "1332",
            "1333",
            "1334",
            "1335",
            "1336",
            "1337",
            "1338",
            "1339",
            "1340",
            "1341",
            "1342",
            "1343",
            "1344",
            "1345",
            "1346",
            "1347",
            "1348",
            "1349",
            "1350",
            "1351",
            "1352",
            "1353",
            "1354",
            "1355",
            "1356",
            "1357",
            "1358",
            "1359",
            "1360",
            "1361",
            "1362",
            "1363",
            "1364",
            "1365",
            "1366",
            "1367",
            "1368",
            "1369",
            "1370",
            "1371",
            "1372",
            "1373",
            "1374",
            "1375",
            "1376",
            "1377",
            "1378",
            "1379",
            "1380",
            "1381",
            "1382",
            "1383",
            "1384",
            "1385",
            "1386",
            "1387",
            "1388",
            "1389",
            "1390",
            "1391",
            "1392",
            "1393",
            "1394",
            "1395",
            "1396",
            "1397",
            "1398",
            "1399",
            "1400",
            "1401",
            "1402",
            "1403",
            "1404",
            "1405",
            "1406",
            "1407",
            "1408",
            "1409",
            "1410",
            "1411",
            "1412",
            "1413",
            "1414",
            "1415",
            "1416",
            "1417",
            "1418",
            "1419",
            "1420",
            "1421",
            "1422",
            "1423",
            "1424",
            "1425",
            "1426",
            "1427",
            "1428",
            "1429",
            "1430",
            "1431",
            "1432",
            "1433",
            "1434",
            "1435",
            "1436",
            "1437",
            "1438",
            "1439",
            "1440",
            "1441",
            "1442",
            "1443",
            "1444",
            "1445",
            "1446",
            "1447",
            "1448",
            "1449",
            "1450",
            "1451",
            "1452",
            "1453",
            "1454",
            "1455",
            "1456",
            "1457",
            "1458",
            "1459",
            "1460",
            "1461",
            "1462",
            "1463",
            "1476",
            "1477",
            "1478",
            "1479",
            "1480",
            "1481",
            "1482",
            "1483",
            "1484",
            "1485",
            "1498",
            "1499",
            "1500",
            "1501",
            "1502",
            "1503",
            "1504",
            "1505",
            "1506",
            "1507",
            "1508",
            "1509",
            "1510",
            "1511",
            "1512",
            "1513",
            "1514",
            "1515",
            "1516",
            "1517",
            "1518",
            "1519",
            "1520",
            "1521",
            "1522",
            "1523",
            "1524",
            "1525",
            "1526",
            "1527",
            "1528",
            "1529",
            "1530",
            "1531",
            "1532",
            "1533",
            "1534",
            "1535",
            "1536",
            "1537",
            "1538",
            "1539",
            "1540",
            "1541",
            "1542",
            "1543",
            "1544",
            "1545",
            "1546",
            "1547",
            "1548",
            "1549",
            "1550",
            "1551",
            "1552",
            "1553",
            "1554",
            "1555",
            "1556",
            "1557",
            "1574",
            "1575",
            "1576",
            "1577",
            "1578",
            "1579",
            "1580",
            "1581",
            "1582",
            "1583",
            "1584",
            "1585",
            "1586",
            "1587",
            "1588",
            "1589",
            "1590",
            "1591",
            "1592",
            "1593",
            "1594",
            "1595",
            "1596",
            "1597",
            "1598",
            "1599",
            "1600",
            "1601",
            "1602",
            "1603",
            "1604",
            "1605",
            "1606",
            "1607",
            "1608",
            "1609",
            "1610",
            "1611",
            "1620",
            "1621",
            "1622",
            "1623",
            "1624",
            "1625",
            "1626",
            "1627",
            "1650",
            "1651",
            "1652",
            "1653",
            "1654",
            "1655",
            "1656",
            "1657",
            "1658",
            "1659",
            "1660",
            "1661",
            "1662",
            "1663",
            "1664",
            "1665",
            "1666",
            "1667",
            "1668",
            "1669",
            "1670",
            "1671",
            "1672",
            "1673",
            "1674",
            "1675",
            "1676",
            "1677",
            "1678",
            "1679",
            "1680",
            "1681",
            "1682",
            "1683",
            "1684",
            "1685",
            "1686",
            "1687",
            "1688",
            "1689",
            "1690",
            "1691",
            "1692",
            "1693",
            "1694",
            "1695",
            "1696",
            "1697",
            "1698",
            "1699",
            "1700",
            "1701",
            "1702",
            "1703",
            "1704",
            "1705",
            "1706",
            "1707",
            "1708",
            "1709",
            "1710",
            "1711",
            "1712",
            "1713",
            "1714",
            "1715",
            "1716",
            "1717",
            "1718",
            "1719",
            "1720",
            "1721",
            "1722",
            "1723",
            "1724",
            "1725",
            "1726",
            "1727",
            "1728",
            "1729",
            "1730",
            "1731",
            "1732",
            "1733",
            "1734",
            "1735",
            "1740",
            "1929",
            "1933",
            "1986",
            "2004",
            "2022"
          ],
          "num": 421
        },
        {
          "qualified_names": [
            "31",
            "94",
            "133",
            "164",
            "509",
            "510",
            "596",
            "597",
            "598",
            "725",
            "748",
            "750",
            "751",
            "752",
            "812",
            "821",
            "1338",
            "1339",
            "1355",
            "1528",
            "1532",
            "1675",
            "1707",
            "1843",
            "1927",
            "2386",
            "2405",
            "2424"
          ],
          "num": 28
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/jscomp/Compiler.java b/src/com/google/javascript/jscomp/Compiler.java\nindex 2980574..040bbf1 100644\n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n@@ -29,11 +29,9 @@\n import com.google.javascript.rhino.Token;\n import com.google.javascript.rhino.jstype.JSTypeRegistry;\n \n-import java.io.FileReader;\n import java.io.IOException;\n import java.io.PrintStream;\n import java.io.Serializable;\n-import java.text.ParseException;\n import java.util.ArrayList;\n import java.util.HashMap;\n import java.util.List;\n@@ -90,15 +88,6 @@\n \n   private Map\u003cString, CompilerInput\u003e inputsByName_;\n \n-  /** Fully qualified function names and globally unique ids */\n-  private FunctionNames functionNames_;\n-\n-  /** The variable renaming map */\n-  private VariableMap variableMap_;\n-\n-  /** The property renaming map */\n-  private VariableMap propertyMap_;\n-\n   /** The source code map */\n   private SourceMap sourceMap_;\n \n@@ -120,9 +109,6 @@\n   /** Whether to use threads. */\n   private boolean useThreads \u003d true;\n \n-  /** The naming map for anonymous functions */\n-  private VariableMap anonFunctionNameMap_;\n-\n   /** The function information map */\n   private FunctionInformationMap functionInformationMap_;\n \n@@ -148,20 +134,12 @@\n       RhinoErrorReporter.forNewRhino(this);\n \n   /** Error strings used for reporting JSErrors */\n-  public static final DiagnosticType READ_ERROR \u003d DiagnosticType.error(\n-      \"JSC_READ_ERROR\", \"Cannot read: {0}\");\n   public static final DiagnosticType OPTIMIZE_LOOP_ERROR \u003d DiagnosticType.error(\n       \"JSC_OPTIMIZE_LOOP_ERROR\",\n       \"Exceeded max number of optimization iterations: {0}\");\n   public static final DiagnosticType MOTION_ITERATIONS_ERROR \u003d\n       DiagnosticType.error(\"JSC_OPTIMIZE_LOOP_ERROR\",\n           \"Exceeded max number of code motion iterations: {0}\");\n-  private static final DiagnosticType INPUT_MAP_PROP_PARSE \u003d\n-      DiagnosticType.error(\"JSC_INPUT_MAP_PROP_PARSE\",\n-          \"Input property map parse error: {0}\");\n-  private static final DiagnosticType INPUT_VAR_PROP_PARSE \u003d\n-      DiagnosticType.error(\"JSC_INPUT_MAP_VAR_PARSE\",\n-          \"Input variable map parse error: {0}\");\n \n   private static final long COMPILER_STACK_SIZE \u003d 1048576L;\n \n@@ -528,7 +506,8 @@\n     }\n \n     if (options_.nameAnonymousFunctionsOnly) {\n-      nameAnonymousFunctions(options_.anonymousFunctionNaming);\n+      // TODO(nicksantos): Move this into an instrument() phase maybe?\n+      check();\n       return;\n     }\n \n@@ -614,9 +593,9 @@\n       return;\n     }\n \n-    if (options_.instrumentationTemplate !\u003d null ||\n-        options_.recordFunctionInformation) {\n-      computeFunctionNames();\n+    // TODO(nicksantos): clean this up. The flow here is too hard to follow.\n+    if (options_.nameAnonymousFunctionsOnly) {\n+      return;\n     }\n \n     if (options_.removeTryCatchFinally) {\n@@ -702,34 +681,6 @@\n   }\n \n   /**\n-   * Alias string literals with global variables, to avoid creating lots of\n-   * transient objects.\n-   */\n-  private void aliasStrings(Set\u003cString\u003e aliasableStrings,\n-                            boolean aliasAllStrings,\n-                            String aliasStringsBlacklist,\n-                            boolean outputStringUsage) {\n-    logger_.info(\"Aliasing strings\");\n-    startPass(\"aliasStrings\");\n-    AliasStrings aliasStrings \u003d new AliasStrings(\n-        this,\n-        getModuleGraph(),\n-        aliasAllStrings ? null : aliasableStrings,\n-        aliasStringsBlacklist,\n-        outputStringUsage);\n-    process(aliasStrings);\n-    endPass();\n-  }\n-\n-  private void aliasKeywords() {\n-    logger_.info(\"Aliasing true/false/null\");\n-    startPass(\"aliasKeywords\");\n-    AliasKeywords aliasKeywords \u003d new AliasKeywords(this);\n-    process(aliasKeywords);\n-    endPass();\n-  }\n-\n-  /**\n    * Runs custom passes that are designated to run at a particular time.\n    */\n   private void runCustomPasses(CustomPassExecutionTime executionTime) {\n@@ -794,10 +745,11 @@\n    * Returns the result of the compilation.\n    */\n   public Result getResult() {\n+    PassConfig.State state \u003d getPassConfig().getIntermediateState();\n     return new Result(getErrors(), getWarnings(), debugLog_.toString(),\n-                      variableMap_, propertyMap_, anonFunctionNameMap_,\n-                      functionInformationMap_, sourceMap_, externExports_,\n-                      getPassConfig().getCssNames());\n+        state.variableMap, state.propertyMap,\n+        state.anonymousFunctionNameMap, functionInformationMap_,\n+        sourceMap_, externExports_, state.cssNames);\n   }\n \n   /**\n@@ -857,6 +809,7 @@\n    * Set if the normalization pass has been done.\n    * Note: non-private to enable test cases that require the Normalize pass.\n    */\n+  @Override\n   void setNormalized() {\n     normalized \u003d true;\n   }\n@@ -865,6 +818,7 @@\n    * Set once unnormalizing passes have been start.\n    * Note: non-private to enable test cases that require the Normalize pass.\n    */\n+  @Override\n   void setUnnormalized() {\n     normalized \u003d false;\n   }\n@@ -1307,160 +1261,6 @@\n     if (hasErrors()) {\n       return;\n     }\n-\n-    if (options_.flowSensitiveInlineVariables) {\n-      flowSensitiveInlineVariables();\n-    }\n-\n-    if (options_.collapseAnonymousFunctions) {\n-      collapseAnonymousFunctions();\n-    }\n-\n-    // Move functions before extracting prototype member declarations.\n-    if (options_.moveFunctionDeclarations) {\n-      moveFunctionDeclarations();\n-    }\n-\n-    if (options_.anonymousFunctionNaming \u003d\u003d\n-        AnonymousFunctionNamingPolicy.MAPPED) {\n-      nameAnonymousFunctions(AnonymousFunctionNamingPolicy.MAPPED);\n-    }\n-\n-    // The mapped name anonymous function pass makes use of information that\n-    // the extract prototype member declarations pass removes so the former\n-    // happens before the latter.\n-    //\n-    // Extracting prototype properties screws up the heuristic renaming\n-    // policies, so never run it when those policies are requested.\n-    if (options_.extractPrototypeMemberDeclarations \u0026\u0026\n-        (options_.propertyRenaming !\u003d PropertyRenamingPolicy.HEURISTIC \u0026\u0026\n-         options_.propertyRenaming !\u003d\n-            PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC)) {\n-      extractPrototypeMemberDeclarations();\n-    }\n-\n-    if (options_.coalesceVariableNames) {\n-      coalesceVariableNames();\n-    }\n-\n-    VariableMap prevPropertyMap \u003d null;\n-    if (options_.inputPropertyMapSerialized !\u003d null) {\n-      try {\n-        prevPropertyMap \u003d\n-            VariableMap.fromBytes(options_.inputPropertyMapSerialized);\n-      } catch (ParseException e) {\n-        report(JSError.make(INPUT_MAP_PROP_PARSE, e.getMessage()));\n-      }\n-    }\n-\n-    if (options_.ambiguateProperties \u0026\u0026 (options_.propertyRenaming\n-        \u003d\u003d PropertyRenamingPolicy.ALL_UNQUOTED)) {\n-      ambiguateProperties(options_.anonymousFunctionNaming\n-          .getReservedCharacters());\n-    }\n-\n-    switch (options_.propertyRenaming) {\n-      case HEURISTIC:\n-        renamePrototypes(false,\n-            options_.anonymousFunctionNaming,\n-            prevPropertyMap);\n-        break;\n-      case AGGRESSIVE_HEURISTIC:\n-        renamePrototypes(true,\n-            options_.anonymousFunctionNaming,\n-            prevPropertyMap);\n-        break;\n-      case ALL_UNQUOTED:\n-        renameProperties(options_.generatePseudoNames,\n-            options_.anonymousFunctionNaming,\n-            prevPropertyMap);\n-        break;\n-    }\n-\n-    // This comes after property renaming because quoted property names must\n-    // not be renamed.\n-    if (options_.convertToDottedProperties) {\n-      convertToDottedProperties();\n-    }\n-\n-    // Property renaming must happen before this pass runs since this\n-    // pass may convert dotted properties into quoted properties.  It\n-    // is beneficial to run before alias strings, alias keywords and\n-    // variable renaming.\n-    if (options_.rewriteFunctionExpressions) {\n-      rewriteFunctionExpressions();\n-    }\n-\n-    // This comes after converting quoted property accesses to dotted property\n-    // accesses in order to avoid aliasing property names.\n-    if (!options_.aliasableStrings.isEmpty() || options_.aliasAllStrings) {\n-      aliasStrings(options_.aliasableStrings,\n-                   options_.aliasAllStrings,\n-                   options_.aliasStringsBlacklist,\n-                   options_.outputJsStringUsage);\n-    }\n-\n-    if (options_.aliasExternals) {\n-      aliasExternals();\n-    }\n-\n-    if (options_.aliasKeywords) {\n-      aliasKeywords();\n-    }\n-\n-    if (options_.collapseVariableDeclarations) {\n-      collapseVariableDeclarations();\n-    }\n-\n-    denormalize();\n-\n-    if (options_.instrumentationTemplate !\u003d null) {\n-      instrumentFunctions();\n-    }\n-\n-    if (options_.variableRenaming !\u003d VariableRenamingPolicy.ALL) {\n-      // If we\u0027re leaving some (or all) variables with their old names,\n-      // then we need to undo any of the markers we added for distinguishing\n-      // local variables (\"$$1\") or constants (\"$$constant\").\n-      invertContextualRenaming();\n-    }\n-\n-    if (options_.variableRenaming !\u003d VariableRenamingPolicy.OFF) {\n-      VariableMap prevVariableMap \u003d null;\n-      if (options_.inputVariableMapSerialized !\u003d null) {\n-        try {\n-          prevVariableMap \u003d\n-              VariableMap.fromBytes(options_.inputVariableMapSerialized);\n-        } catch (ParseException e) {\n-          report(JSError.make(INPUT_VAR_PROP_PARSE, e.getMessage()));\n-        }\n-      }\n-\n-      renameVars(options_.renamePrefix,\n-          options_.variableRenaming \u003d\u003d VariableRenamingPolicy.LOCAL,\n-          options_.anonymousFunctionNaming,\n-          options_.generatePseudoNames,\n-          prevVariableMap);\n-    }\n-\n-    // This pass should run after names stop changing.\n-    if (options_.processObjectPropertyString) {\n-      objectPropertyStringPostprocess();\n-    }\n-\n-    if (options_.labelRenaming) {\n-      renameLabels();\n-    }\n-\n-    if (options_.anonymousFunctionNaming \u003d\u003d\n-        AnonymousFunctionNamingPolicy.UNMAPPED) {\n-      nameAnonymousFunctions(AnonymousFunctionNamingPolicy.UNMAPPED);\n-    }\n-\n-    // Safety check\n-    if (options_.checkSymbols) {\n-      sanityCheckVars();\n-    }\n   }\n \n   @Override\n@@ -1473,16 +1273,6 @@\n     return options_.cssRenamingMap;\n   }\n \n-\n-  /** Checks that all variables are defined. */\n-  void sanityCheckVars() {\n-    logger_.info(\"Checking for undefined vars\");\n-    startPass(\"sanityCheckVars\");\n-    VarCheck v \u003d new VarCheck(this, true);\n-    process(v);\n-    endPass();\n-  }\n-\n   /**\n    * Reprocesses the current defines over the AST.  This is used by GwtCompiler\n    * to generate N outputs for different targets from the same (checked) AST.\n@@ -1495,66 +1285,6 @@\n         .process(externsRoot, jsRoot);\n   }\n \n-  void computeFunctionNames() {\n-    logger_.info(\"Computing fully-qualified function names and ids\");\n-    startPass(\"computeFunctionNames\");\n-    functionNames_ \u003d new FunctionNames(this);\n-    process(functionNames_);\n-    endPass();\n-  }\n-\n-  void flowSensitiveInlineVariables() {\n-    logger_.info(\"Flow Sensitive Inline Variables\");\n-    startPass(\"flowSensitiveInlineVariables\");\n-    process(new FlowSensitiveInlineVariables(this));\n-    endPass();\n-  }\n-\n-  void coalesceVariableNames() {\n-    logger_.info(\"Coalesce Variable Names\");\n-    startPass(\"coalesceVariableNames\");\n-    process(new CoalesceVariableNames(this));\n-    endPass();\n-  }\n-\n-  void collapseVariableDeclarations() {\n-    logger_.info(\"Collapsing variable declarations\");\n-    startPass(\"collapseVariableDeclarations\");\n-    process(new CollapseVariableDeclarations(this));\n-    setUnnormalized();\n-    endPass();\n-  }\n-\n-  void extractPrototypeMemberDeclarations() {\n-    logger_.info(\"Extracting Common Prototype Member Declarations\");\n-    startPass(\"extractPrototypeMemberDeclarations\");\n-    process(new ExtractPrototypeMemberDeclarations(this));\n-    endPass();\n-  }\n-\n-  void rewriteFunctionExpressions() {\n-    logger_.info(\"Rewrite function expressions\");\n-    startPass(\"rewriteFunctionExpressions\");\n-    process(new FunctionRewriter(this));\n-    endPass();\n-  }\n-\n-  void collapseAnonymousFunctions() {\n-    logger_.info(\"Collapsing anonymous functions\");\n-    startPass(\"collapseAnonymousFunctions\");\n-    process(new CollapseAnonymousFunctions(this));\n-    endPass();\n-  }\n-\n-\n-\n-  void moveFunctionDeclarations() {\n-    logger_.info(\"Move function declarations\");\n-    startPass(\"moveFunctionDeclarations\");\n-    process(new MoveFunctionDeclarations(this));\n-    endPass();\n-  }\n-\n   boolean isInliningForbidden() {\n     return options_.propertyRenaming \u003d\u003d PropertyRenamingPolicy.HEURISTIC ||\n         options_.propertyRenaming \u003d\u003d\n@@ -1571,44 +1301,6 @@\n     return cfa.getCfg();\n   }\n \n-  void nameAnonymousFunctions(AnonymousFunctionNamingPolicy policy) {\n-    logger_.info(\"Naming anonymous functions\");\n-    startPass(\"nameAnonymousFunctions\");\n-    if (policy \u003d\u003d AnonymousFunctionNamingPolicy.UNMAPPED) {\n-      process(new NameAnonymousFunctions(this));\n-    } else if (policy \u003d\u003d AnonymousFunctionNamingPolicy.MAPPED) {\n-      NameAnonymousFunctionsMapped naf \u003d new NameAnonymousFunctionsMapped(this);\n-      process(naf);\n-      anonFunctionNameMap_ \u003d naf.getFunctionMap();\n-    }\n-    endPass();\n-  }\n-\n-  void aliasExternals() {\n-    logger_.info(\"Creating alias functions for externals\");\n-    startPass(\"aliasExternals\");\n-    AliasExternals ae \u003d new AliasExternals(this,\n-                                           getModuleGraph(),\n-                                           options_.unaliasableGlobals,\n-                                           options_.aliasableGlobals);\n-    process(ae);\n-    endPass();\n-  }\n-\n-  void objectPropertyStringPostprocess() {\n-    logger_.info(\"goog.testing.ObjectPropertyString postprocess\");\n-    startPass(\"ObjectPropertyStringPostprocess\");\n-    process(new ObjectPropertyStringPostprocess(this));\n-    endPass();\n-  }\n-\n-  void ambiguateProperties(char[] reservedCharacters) {\n-    logger_.info(\"Ambiguating properties\");\n-    startPass(\"ambiguateProperties\");\n-    process(new AmbiguateProperties(this, reservedCharacters));\n-    endPass();\n-  }\n-\n   public void normalize() {\n     logger_.info(\"Normalizing\");\n     startPass(\"normalize\");\n@@ -1617,14 +1309,6 @@\n     endPass();\n   }\n \n-  private void denormalize() {\n-    logger_.info(\"Denormalizing\");\n-    startPass(\"denormalize\");\n-    process(new Denormalize(this));\n-    setUnnormalized();\n-    endPass();\n-  }\n-\n   @Override\n   void normalizeNodeTypes(Node root) {\n     Tracer tracer \u003d newTracer(\"normalizeNodeTypes\");\n@@ -1647,97 +1331,12 @@\n     stopTracer(tracer, \"annotateCodingConvention\");\n   }\n \n-  void renameVars(String renamePrefix, boolean renameLocalVarsOnly,\n-      AnonymousFunctionNamingPolicy anonFunctionNamePolicy,\n-      boolean generatePseudoNames,\n-      VariableMap prevVariableMap) {\n-    logger_.info(\"Renaming vars\");\n-    startPass(\"renameVars\");\n-    boolean preserveAnonymousFunctionNames \u003d\n-      anonFunctionNamePolicy !\u003d AnonymousFunctionNamingPolicy.OFF;\n-    RenameVars rn \u003d new RenameVars(\n-        this, renamePrefix,\n-        renameLocalVarsOnly, preserveAnonymousFunctionNames,\n-        generatePseudoNames,\n-        prevVariableMap,\n-        anonFunctionNamePolicy.getReservedCharacters(),\n-        getPassConfig().getExportedNames());\n-    process(rn);\n-    variableMap_ \u003d rn.getVariableMap();\n-    endPass();\n-  }\n-\n-  void renameProperties(boolean generatePseudoNames,\n-      AnonymousFunctionNamingPolicy anonFunctionNamePolicy,\n-      VariableMap prevPropertyMap) {\n-    logger_.info(\"Renaming properties\");\n-    startPass(\"renameProperties\");\n-    RenameProperties rp \u003d new RenameProperties(\n-        this, generatePseudoNames, prevPropertyMap,\n-        anonFunctionNamePolicy.getReservedCharacters());\n-    process(rp);\n-    propertyMap_ \u003d rp.getPropertyMap();\n-    endPass();\n-  }\n-\n-  void invertContextualRenaming() {\n-    logger_.info(\"Denormalizing local names\");\n-    startPass(\"invertNames\");\n-    process(MakeDeclaredNamesUnique.getContextualRenameInverter(this));\n-    endPass();\n-  }\n-\n-  void renamePrototypes(boolean aggressive,\n-      AnonymousFunctionNamingPolicy anonFunctionNamePolicy,\n-      VariableMap prevPropertyMap) {\n-    logger_.info(\"Renaming prototypes\");\n-    startPass(\"renamePrototypes\");\n-    RenamePrototypes rp \u003d new RenamePrototypes(this, aggressive,\n-        anonFunctionNamePolicy.getReservedCharacters(),\n-        prevPropertyMap);\n-    process(rp);\n-    propertyMap_ \u003d rp.getPropertyMap();\n-    endPass();\n-  }\n-\n-  void renameLabels() {\n-    logger_.info(\"Renaming labels\");\n-    startPass(\"renameLabels\");\n-    RenameLabels rn \u003d new RenameLabels(this);\n-    process(rn);\n-    endPass();\n-  }\n-\n-  void convertToDottedProperties() {\n-    logger_.info(\"Converting quoted property accesses to dot syntax\");\n-    startPass(\"convertToDottedProperties\");\n-    process(new ConvertToDottedProperties(this));\n-    endPass();\n-  }\n-\n-  void instrumentFunctions() {\n-    logger_.info(\"Instrumenting functions\");\n-    startPass(\"instrumentFunctions\");\n-    try {\n-      FileReader templateFile \u003d\n-          new FileReader(options_.instrumentationTemplate);\n-\n-      process(new InstrumentFunctions(this,\n-                                      functionNames_,\n-                                      options_.instrumentationTemplate,\n-                                      options_.appNameStr,\n-                                      templateFile));\n-    } catch (IOException e) {\n-      report(JSError.make(READ_ERROR, options_.instrumentationTemplate));\n-    }\n-    endPass();\n-  }\n-\n   void recordFunctionInformation() {\n     logger_.info(\"Recording function information\");\n     startPass(\"recordFunctionInformation\");\n     RecordFunctionInformation recordFunctionInfoPass \u003d\n-        new RecordFunctionInformation(this, functionNames_);\n+        new RecordFunctionInformation(\n+            this, getPassConfig().getIntermediateState().functionNames);\n     process(recordFunctionInfoPass);\n     functionInformationMap_ \u003d recordFunctionInfoPass.getMap();\n     endPass();\n@@ -1926,11 +1525,11 @@\n   }\n \n   VariableMap getVariableMap() {\n-    return variableMap_;\n+    return getPassConfig().getIntermediateState().variableMap;\n   }\n \n   VariableMap getPropertyMap() {\n-    return propertyMap_;\n+    return getPassConfig().getIntermediateState().propertyMap;\n   }\n \n   CompilerOptions getOptions() {\n@@ -1983,7 +1582,6 @@\n     private CompilerInput[] externs;\n     private CompilerInput[] inputs;\n     private JSModule[] modules;\n-    private FunctionNames functionNames;\n     private PassConfig.State passConfigState;\n     private JSTypeRegistry typeRegistry;\n     private boolean normalized;\n@@ -2001,7 +1599,6 @@\n     state.externs \u003d externs_;\n     state.inputs \u003d inputs_;\n     state.modules \u003d modules_;\n-    state.functionNames \u003d functionNames_;\n     state.passConfigState \u003d getPassConfig().getIntermediateState();\n     state.typeRegistry \u003d typeRegistry;\n     state.normalized \u003d normalized;\n@@ -2019,7 +1616,6 @@\n     externs_ \u003d state.externs;\n     inputs_ \u003d state.inputs;\n     modules_ \u003d state.modules;\n-    functionNames_ \u003d state.functionNames;\n     passes \u003d createPassConfigInternal();\n     getPassConfig().setIntermediateState(state.passConfigState);\n     typeRegistry \u003d state.typeRegistry;\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [4158,4206]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MarkerAnnotation [23391,23400]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MarkerAnnotation [23597,23606]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [17723,17785]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [21891,21955]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ReturnStatement [21960,22191]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [39036,39198]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ReturnStatement [44097,44155]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ReturnStatement [44198,44256]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [15416,15424]"
        },
        {
          "type": "delete-tree",
          "from": "ImportDeclaration [1225,1251]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ImportDeclaration [1337,1369]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "FieldDeclaration [2804,2905]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "FieldDeclaration [2909,2977]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "FieldDeclaration [2981,3049]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "FieldDeclaration [3591,3680]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "Javadoc [4560,4608]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: public [4611,4617]",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "FieldDeclaration [5252,5414]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [16195,16252]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [18474,18603]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [21019,21669]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [21673,21887]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ReturnStatement [23581,23849]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [38425,38513]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [38519,38603]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [38680,38760]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [38766,38927]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [39267,39539]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [39545,39619]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [39625,39660]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [39665,39942]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [39948,40163]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SwitchStatement [40169,40682]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [40788,40870]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [41111,41195]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [41339,41608]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [41614,41674]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [41680,41738]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [41744,41832]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [41838,41852]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [41858,41940]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [41946,42259]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [42265,42895]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [42956,43046]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [43052,43109]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [43115,43280]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "IfStatement [43306,43365]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [43565,43798]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [44294,44526]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [44530,44739]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [44743,44923]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [44927,45160]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [45164,45407]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [45411,45601]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [45605,45807]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [45813,46005]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [46538,47045]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [47049,47454]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [47458,47690]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [47694,47912]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [48087,48258]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [48987,49716]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [49720,50176]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [50180,50381]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [50385,50822]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [50826,50997]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [51001,51219]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [51223,51849]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [51988,52099]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ReturnStatement [56998,57018]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ReturnStatement [57061,57081]",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [59268,59305]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [59811,59848]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/jscomp/ControlStructureCheck.java",
        "src/com/google/javascript/jscomp/ControlStructureCheck.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "com.google.javascript.jscomp.ControlStructureCheck:check:[Node node, boolean inLoop, boolean inSwitch]:void"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "com.google.javascript.jscomp.ControlStructureCheck:check:[Node node, boolean inLoop, boolean inSwitch]:void"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "18",
            "50",
            "81"
          ],
          "num": 3
        },
        {
          "qualified_names": [
            "19",
            "52",
            "53",
            "54",
            "55",
            "87",
            "88",
            "89",
            "90",
            "91",
            "92",
            "93",
            "94",
            "95"
          ],
          "num": 14
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/jscomp/ControlStructureCheck.java b/src/com/google/javascript/jscomp/ControlStructureCheck.java\nindex 5c2c276..a2984f1 100644\n--- a/src/com/google/javascript/jscomp/ControlStructureCheck.java\n+++ b/src/com/google/javascript/jscomp/ControlStructureCheck.java\n@@ -16,6 +16,7 @@\n \n package com.google.javascript.jscomp;\n \n+import com.google.javascript.rhino.JSDocInfo;\n import com.google.javascript.rhino.Node;\n import com.google.javascript.rhino.Token;\n \n@@ -48,6 +49,10 @@\n       \"JSC_INVALID_LABEL_CONTINUE\",\n       \"continue can only target labels of loop structures\");\n \n+  static final DiagnosticType USE_OF_WITH \u003d DiagnosticType.warning(\n+      \"JSC_USE_OF_WITH\",\n+      \"The use of the \u0027with\u0027 structure should be avoided.\");\n+\n   ControlStructureCheck(AbstractCompiler compiler) {\n     this.compiler \u003d compiler;\n   }\n@@ -79,6 +84,15 @@\n    */\n   private void check(Node node, boolean inLoop, boolean inSwitch) {\n     switch (node.getType()) {\n+      case Token.WITH:\n+        JSDocInfo info \u003d node.getJSDocInfo();\n+        boolean allowWith \u003d\n+            info !\u003d null \u0026\u0026 info.getSuppressions().contains(\"with\");\n+        if (!allowWith) {\n+          report(node, USE_OF_WITH);\n+        }\n+        break;\n+\n       case Token.FUNCTION:\n         // Save the old labels because we are in a new scope.\n         Deque\u003cString\u003e oldSwitchLabels \u003d switchLabels;\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "ImportDeclaration [635,680]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldDeclaration [1599,1750]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SwitchCase [2991,3007]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [3016,3053]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [3062,3150]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [3159,3223]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "BreakStatement [3232,3238]"
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "src/com/google/javascript/jscomp/DefaultPassConfig.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "com.google.javascript.jscomp.DefaultPassConfig\\$ErrorPass:process:[Node externs, Node root]:void",
            "com.google.javascript.jscomp.DefaultPassConfig:getOptimizations:[]:List\u003cPassFactory\u003e",
            "com.google.javascript.jscomp.DefaultPassConfig:getChecks:[]:List\u003cPassFactory\u003e"
          ],
          "num": 3
        },
        {
          "qualified_names": [
            "com.google.javascript.jscomp.DefaultPassConfig:getChecks:[]:List\u003cPassFactory\u003e",
            "com.google.javascript.jscomp.DefaultPassConfig\\$ErrorPass:ErrorPass:[AbstractCompiler compiler, JSError error]:null",
            "com.google.javascript.jscomp.DefaultPassConfig\\$ErrorPass:process:[Node externs, Node root]:void",
            "com.google.javascript.jscomp.DefaultPassConfig:getOptimizations:[]:List\u003cPassFactory\u003e",
            "com.google.javascript.jscomp.DefaultPassConfig\\$ErrorPass:ErrorPass:[AbstractCompiler compiler, DiagnosticType error]:null",
            "com.google.javascript.jscomp.DefaultPassConfig:runPropertyRenaming:[AbstractCompiler compiler, VariableMap prevPropertyMap, Node externs, Node root]:VariableMap",
            "com.google.javascript.jscomp.DefaultPassConfig:getIntermediateState:[]:State",
            "com.google.javascript.jscomp.DefaultPassConfig:runVariableRenaming:[AbstractCompiler compiler, VariableMap prevVariableMap, Node externs, Node root]:VariableMap",
            "com.google.javascript.jscomp.DefaultPassConfig:setIntermediateState:[State state]:void"
          ],
          "num": 9
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "23",
            "30",
            "66",
            "78",
            "200",
            "320",
            "495",
            "526",
            "528",
            "530",
            "532",
            "794",
            "1134",
            "1213",
            "1222"
          ],
          "num": 15
        },
        {
          "qualified_names": [
            "24",
            "32",
            "34",
            "36",
            "39",
            "72",
            "73",
            "74",
            "75",
            "76",
            "77",
            "78",
            "79",
            "92",
            "93",
            "94",
            "95",
            "96",
            "97",
            "98",
            "99",
            "100",
            "101",
            "102",
            "103",
            "104",
            "105",
            "106",
            "107",
            "108",
            "109",
            "110",
            "111",
            "112",
            "113",
            "114",
            "115",
            "116",
            "117",
            "118",
            "119",
            "125",
            "126",
            "127",
            "128",
            "129",
            "130",
            "131",
            "132",
            "133",
            "134",
            "135",
            "136",
            "137",
            "138",
            "139",
            "140",
            "141",
            "142",
            "143",
            "144",
            "145",
            "146",
            "147",
            "151",
            "152",
            "153",
            "154",
            "155",
            "156",
            "157",
            "158",
            "159",
            "160",
            "161",
            "276",
            "277",
            "278",
            "279",
            "280",
            "281",
            "402",
            "403",
            "404",
            "405",
            "406",
            "407",
            "408",
            "409",
            "410",
            "411",
            "412",
            "413",
            "414",
            "415",
            "416",
            "417",
            "418",
            "419",
            "420",
            "421",
            "422",
            "423",
            "424",
            "425",
            "426",
            "427",
            "428",
            "429",
            "430",
            "431",
            "432",
            "433",
            "434",
            "435",
            "436",
            "437",
            "438",
            "439",
            "440",
            "441",
            "442",
            "443",
            "444",
            "445",
            "446",
            "447",
            "448",
            "449",
            "450",
            "451",
            "452",
            "453",
            "454",
            "455",
            "456",
            "457",
            "458",
            "459",
            "460",
            "461",
            "462",
            "463",
            "464",
            "465",
            "466",
            "467",
            "468",
            "469",
            "470",
            "471",
            "472",
            "473",
            "474",
            "475",
            "476",
            "477",
            "478",
            "479",
            "480",
            "481",
            "482",
            "483",
            "484",
            "485",
            "486",
            "487",
            "488",
            "489",
            "490",
            "491",
            "492",
            "493",
            "494",
            "495",
            "496",
            "497",
            "498",
            "499",
            "500",
            "501",
            "502",
            "503",
            "504",
            "505",
            "506",
            "507",
            "508",
            "509",
            "510",
            "511",
            "512",
            "513",
            "514",
            "689",
            "720",
            "722",
            "724",
            "726",
            "989",
            "990",
            "991",
            "992",
            "993",
            "994",
            "995",
            "996",
            "997",
            "1337",
            "1344",
            "1345",
            "1346",
            "1347",
            "1348",
            "1349",
            "1350",
            "1351",
            "1352",
            "1353",
            "1354",
            "1355",
            "1356",
            "1357",
            "1358",
            "1359",
            "1360",
            "1361",
            "1362",
            "1363",
            "1364",
            "1365",
            "1366",
            "1367",
            "1368",
            "1369",
            "1370",
            "1371",
            "1372",
            "1373",
            "1374",
            "1375",
            "1376",
            "1377",
            "1378",
            "1379",
            "1380",
            "1381",
            "1382",
            "1383",
            "1384",
            "1385",
            "1386",
            "1387",
            "1388",
            "1389",
            "1390",
            "1391",
            "1392",
            "1393",
            "1394",
            "1395",
            "1396",
            "1397",
            "1398",
            "1399",
            "1400",
            "1401",
            "1402",
            "1403",
            "1404",
            "1405",
            "1406",
            "1407",
            "1408",
            "1409",
            "1410",
            "1411",
            "1412",
            "1413",
            "1414",
            "1415",
            "1416",
            "1417",
            "1418",
            "1419",
            "1420",
            "1421",
            "1422",
            "1423",
            "1424",
            "1425",
            "1426",
            "1427",
            "1428",
            "1429",
            "1430",
            "1431",
            "1432",
            "1433",
            "1434",
            "1435",
            "1436",
            "1437",
            "1438",
            "1439",
            "1440",
            "1441",
            "1442",
            "1443",
            "1444",
            "1445",
            "1446",
            "1447",
            "1448",
            "1449",
            "1450",
            "1451",
            "1452",
            "1453",
            "1454",
            "1455",
            "1456",
            "1457",
            "1458",
            "1459",
            "1460",
            "1461",
            "1462",
            "1463",
            "1464",
            "1465",
            "1466",
            "1467",
            "1468",
            "1469",
            "1470",
            "1471",
            "1472",
            "1473",
            "1474",
            "1475",
            "1476",
            "1477",
            "1478",
            "1479",
            "1480",
            "1481",
            "1482",
            "1483",
            "1484",
            "1485",
            "1486",
            "1487",
            "1488",
            "1489",
            "1490",
            "1491",
            "1492",
            "1493",
            "1494",
            "1495",
            "1496",
            "1497",
            "1498",
            "1499",
            "1500",
            "1501",
            "1502",
            "1503",
            "1504",
            "1505",
            "1506",
            "1507",
            "1508",
            "1509",
            "1510",
            "1511",
            "1512",
            "1513",
            "1514",
            "1515",
            "1516",
            "1517",
            "1518",
            "1519",
            "1520",
            "1521",
            "1522",
            "1523",
            "1524",
            "1525",
            "1526",
            "1527",
            "1528",
            "1529",
            "1530",
            "1531",
            "1532",
            "1533",
            "1534",
            "1535",
            "1536",
            "1537",
            "1538",
            "1539",
            "1540",
            "1541",
            "1542",
            "1543",
            "1544",
            "1545",
            "1546",
            "1547",
            "1548",
            "1549",
            "1550",
            "1551",
            "1552",
            "1553",
            "1554",
            "1555",
            "1556",
            "1557",
            "1558",
            "1559",
            "1560",
            "1561",
            "1562",
            "1563",
            "1564",
            "1565",
            "1566",
            "1567",
            "1568",
            "1569",
            "1570",
            "1571",
            "1572",
            "1573",
            "1574",
            "1575",
            "1576",
            "1577",
            "1578",
            "1579",
            "1580",
            "1581",
            "1582",
            "1583",
            "1584",
            "1585",
            "1586",
            "1587",
            "1588",
            "1589",
            "1590",
            "1591",
            "1592",
            "1593",
            "1594",
            "1595",
            "1596",
            "1597",
            "1598",
            "1599",
            "1600",
            "1601",
            "1602",
            "1603",
            "1604",
            "1605",
            "1606",
            "1607",
            "1608",
            "1609",
            "1610",
            "1611",
            "1612",
            "1613",
            "1614",
            "1615",
            "1616",
            "1617",
            "1618",
            "1619",
            "1620",
            "1621",
            "1622",
            "1623",
            "1624",
            "1625",
            "1626",
            "1627",
            "1628",
            "1629",
            "1630",
            "1631",
            "1632",
            "1633",
            "1634",
            "1635",
            "1636",
            "1637",
            "1638",
            "1639",
            "1640",
            "1641",
            "1642",
            "1643",
            "1644",
            "1645",
            "1646",
            "1647",
            "1648",
            "1649",
            "1650",
            "1651",
            "1652",
            "1653",
            "1654",
            "1655",
            "1656",
            "1657",
            "1658",
            "1659",
            "1660",
            "1661",
            "1662",
            "1663",
            "1664",
            "1665",
            "1666",
            "1667",
            "1668",
            "1669",
            "1670",
            "1671",
            "1672",
            "1673",
            "1674",
            "1675",
            "1676",
            "1677",
            "1750",
            "1753",
            "1754",
            "1755",
            "1756",
            "1763"
          ],
          "num": 549
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/jscomp/DefaultPassConfig.java b/src/com/google/javascript/jscomp/DefaultPassConfig.java\nindex 2f3afb4..ac82dcd 100644\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n@@ -21,6 +21,7 @@\n import com.google.common.base.Preconditions;\n import com.google.common.collect.Lists;\n import com.google.common.collect.Maps;\n+import com.google.common.collect.Sets;\n import com.google.common.io.Files;\n import com.google.javascript.jscomp.CheckLevel;\n import com.google.javascript.jscomp.NodeTraversal.Callback;\n@@ -28,10 +29,14 @@\n import com.google.javascript.rhino.Token;\n \n import java.io.File;\n+import java.io.FileReader;\n import java.io.IOException;\n+import java.text.ParseException;\n import java.util.Collection;\n+import java.util.Collections;\n import java.util.List;\n import java.util.Map;\n+import java.util.Set;\n \n /**\n  * Pass factories and meta-data for native JSCompiler passes.\n@@ -64,6 +69,14 @@\n       DiagnosticType.error(\"JSC_REPORT_PATH_IO_ERROR\",\n           \"Error writing compiler report to {0}\");\n \n+  private static final DiagnosticType INPUT_MAP_PROP_PARSE \u003d\n+      DiagnosticType.error(\"JSC_INPUT_MAP_PROP_PARSE\",\n+          \"Input property map parse error: {0}\");\n+\n+  private static final DiagnosticType INPUT_MAP_VAR_PARSE \u003d\n+      DiagnosticType.error(\"JSC_INPUT_MAP_VAR_PARSE\",\n+          \"Input variable map parse error: {0}\");\n+\n   /**\n    * A global namespace to share across checking passes.\n    * TODO(nicksantos): This is a hack until I can get the namespace into\n@@ -76,14 +89,76 @@\n    */\n   private TightenTypes tightenTypes \u003d null;\n \n+  /** Names exported by goog.exportSymbol. */\n+  private Set\u003cString\u003e exportedNames \u003d null;\n+\n+  /**\n+   * Ids for cross-module method stubbing, so that each method has\n+   * a unique id.\n+   */\n+  private CrossModuleMethodMotion.IdGenerator crossModuleIdGenerator \u003d\n+      new CrossModuleMethodMotion.IdGenerator();\n+\n+  /**\n+   * Keys are arguments passed to getCssName() found during compilation; values\n+   * are the number of times the key appeared as an argument to getCssName().\n+   */\n+  private Map\u003cString, Integer\u003e cssNames \u003d null;\n+\n+  /** The variable renaming map */\n+  private VariableMap variableMap \u003d null;\n+\n+  /** The property renaming map */\n+  private VariableMap propertyMap \u003d null;\n+\n+  /** The naming map for anonymous functions */\n+  private VariableMap anonymousFunctionNameMap \u003d null;\n+\n+  /** Fully qualified function names and globally unique ids */\n+  private FunctionNames functionNames \u003d null;\n+\n   public DefaultPassConfig(CompilerOptions options) {\n     super(options);\n   }\n \n   @Override\n+  State getIntermediateState() {\n+    return new State(\n+        cssNames \u003d\u003d null ? null : Maps.newHashMap(cssNames),\n+        exportedNames \u003d\u003d null ? null :\n+            Collections.unmodifiableSet(exportedNames),\n+        crossModuleIdGenerator, variableMap, propertyMap,\n+        anonymousFunctionNameMap, functionNames);\n+  }\n+\n+  @Override\n+  void setIntermediateState(State state) {\n+    this.cssNames \u003d state.cssNames \u003d\u003d null ? null :\n+        Maps.newHashMap(state.cssNames);\n+    this.exportedNames \u003d state.exportedNames \u003d\u003d null ? null :\n+        Sets.newHashSet(state.exportedNames);\n+    this.crossModuleIdGenerator \u003d state.crossModuleIdGenerator;\n+    this.variableMap \u003d state.variableMap;\n+    this.propertyMap \u003d state.propertyMap;\n+    this.anonymousFunctionNameMap \u003d state.anonymousFunctionNameMap;\n+    this.functionNames \u003d state.functionNames;\n+  }\n+\n+  @Override\n   protected List\u003cPassFactory\u003e getChecks() {\n     List\u003cPassFactory\u003e checks \u003d Lists.newArrayList();\n \n+    if (options.nameAnonymousFunctionsOnly) {\n+      if (options.anonymousFunctionNaming \u003d\u003d\n+          AnonymousFunctionNamingPolicy.MAPPED) {\n+        checks.add(nameMappedAnonymousFunctions);\n+      } else if (options.anonymousFunctionNaming \u003d\u003d\n+          AnonymousFunctionNamingPolicy.UNMAPPED) {\n+        checks.add(nameUnmappedAnonymousFunctions);\n+      }\n+      return checks;\n+    }\n+\n     if (options.checkSuspiciousCode) {\n       checks.add(suspiciousCode);\n     }\n@@ -198,6 +273,12 @@\n \n     // Defines in code always need to be processed.\n     checks.add(processDefines);\n+\n+    if (options.instrumentationTemplate !\u003d null ||\n+        options.recordFunctionInformation) {\n+      checks.add(computeFunctionNames);\n+    }\n+\n     assertAllOneTimePasses(checks);\n     return checks;\n   }\n@@ -318,6 +399,119 @@\n           CustomPassExecutionTime.AFTER_OPTIMIZATION_LOOP));\n     }\n \n+    if (options.flowSensitiveInlineVariables) {\n+      passes.add(flowSensitiveInlineVariables);\n+    }\n+\n+    if (options.collapseAnonymousFunctions) {\n+      passes.add(collapseAnonymousFunctions);\n+    }\n+\n+    // Move functions before extracting prototype member declarations.\n+    if (options.moveFunctionDeclarations) {\n+      passes.add(moveFunctionDeclarations);\n+    }\n+\n+    if (options.anonymousFunctionNaming \u003d\u003d\n+        AnonymousFunctionNamingPolicy.MAPPED) {\n+      passes.add(nameMappedAnonymousFunctions);\n+    }\n+\n+    // The mapped name anonymous function pass makes use of information that\n+    // the extract prototype member declarations pass removes so the former\n+    // happens before the latter.\n+    //\n+    // Extracting prototype properties screws up the heuristic renaming\n+    // policies, so never run it when those policies are requested.\n+    if (options.extractPrototypeMemberDeclarations \u0026\u0026\n+        (options.propertyRenaming !\u003d PropertyRenamingPolicy.HEURISTIC \u0026\u0026\n+         options.propertyRenaming !\u003d\n+            PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC)) {\n+      passes.add(extractPrototypeMemberDeclarations);\n+    }\n+\n+    if (options.coalesceVariableNames) {\n+      passes.add(coalesceVariableNames);\n+    }\n+\n+    if (options.ambiguateProperties \u0026\u0026\n+        (options.propertyRenaming \u003d\u003d PropertyRenamingPolicy.ALL_UNQUOTED)) {\n+      passes.add(ambiguateProperties);\n+    }\n+\n+    if (options.propertyRenaming !\u003d PropertyRenamingPolicy.OFF) {\n+      passes.add(renameProperties);\n+    }\n+\n+    // This comes after property renaming because quoted property names must\n+    // not be renamed.\n+    if (options.convertToDottedProperties) {\n+      passes.add(convertToDottedProperties);\n+    }\n+\n+    // Property renaming must happen before this pass runs since this\n+    // pass may convert dotted properties into quoted properties.  It\n+    // is beneficial to run before alias strings, alias keywords and\n+    // variable renaming.\n+    if (options.rewriteFunctionExpressions) {\n+      passes.add(rewriteFunctionExpressions);\n+    }\n+\n+    // This comes after converting quoted property accesses to dotted property\n+    // accesses in order to avoid aliasing property names.\n+    if (!options.aliasableStrings.isEmpty() || options.aliasAllStrings) {\n+      passes.add(aliasStrings);\n+    }\n+\n+    if (options.aliasExternals) {\n+      passes.add(aliasExternals);\n+    }\n+\n+    if (options.aliasKeywords) {\n+      passes.add(aliasKeywords);\n+    }\n+\n+    if (options.collapseVariableDeclarations) {\n+      passes.add(collapseVariableDeclarations);\n+    }\n+\n+    passes.add(denormalize);\n+\n+    if (options.instrumentationTemplate !\u003d null) {\n+      passes.add(instrumentFunctions);\n+    }\n+\n+    if (options.variableRenaming !\u003d VariableRenamingPolicy.ALL) {\n+      // If we\u0027re leaving some (or all) variables with their old names,\n+      // then we need to undo any of the markers we added for distinguishing\n+      // local variables (\"$$1\") or constants (\"$$constant\").\n+      passes.add(invertContextualRenaming);\n+    }\n+\n+\n+    if (options.variableRenaming !\u003d VariableRenamingPolicy.OFF) {\n+      passes.add(renameVars);\n+    }\n+\n+    // This pass should run after names stop changing.\n+    if (options.processObjectPropertyString) {\n+      passes.add(objectPropertyStringPostprocess);\n+    }\n+\n+    if (options.labelRenaming) {\n+      passes.add(renameLabels);\n+    }\n+\n+    if (options.anonymousFunctionNaming \u003d\u003d\n+        AnonymousFunctionNamingPolicy.UNMAPPED) {\n+      passes.add(nameUnmappedAnonymousFunctions);\n+    }\n+\n+    // Safety check\n+    if (options.checkSymbols) {\n+      passes.add(sanityCheckVars);\n+    }\n+\n     return passes;\n   }\n \n@@ -492,7 +686,7 @@\n         @Override\n         public void process(Node externs, Node root) {\n           pass.process(externs, root);\n-          setExportedNames(pass.getExportedVariableNames());\n+          exportedNames \u003d pass.getExportedVariableNames();\n         }\n       };\n     }\n@@ -523,13 +717,13 @@\n       return new CompilerPass() {\n         @Override\n         public void process(Node externs, Node jsRoot) {\n-          Map\u003cString, Integer\u003e cssNames \u003d null;\n+          Map\u003cString, Integer\u003e newCssNames \u003d null;\n           if (options.gatherCssNames) {\n-            cssNames \u003d Maps.newHashMap();\n+            newCssNames \u003d Maps.newHashMap();\n           }\n-          (new ReplaceCssNames(compiler, cssNames)).process(\n+          (new ReplaceCssNames(compiler, newCssNames)).process(\n               externs, jsRoot);\n-          setCssNames(cssNames);\n+          cssNames \u003d newCssNames;\n         }\n       };\n     }\n@@ -792,6 +986,15 @@\n     }\n   };\n \n+  /** Computes the names of functions for later analysis. */\n+  private final PassFactory computeFunctionNames \u003d\n+      new PassFactory(\"computeFunctionNames\", true) {\n+    @Override\n+    protected CompilerPass createInternal(AbstractCompiler compiler) {\n+      return ((functionNames \u003d new FunctionNames(compiler)));\n+    }\n+  };\n+\n   /** Generates unique ids. */\n   private final PassFactory replaceIdGenerators \u003d\n       new PassFactory(\"replaceIdGenerators\", true) {\n@@ -1131,13 +1334,347 @@\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n       return new CrossModuleMethodMotion(\n-          compiler, getCrossModuleIdGenerator(),\n+          compiler, crossModuleIdGenerator,\n           // Only move properties in externs if we\u0027re not treating\n           // them as exports.\n           options.removeUnusedPrototypePropertiesInExterns);\n     }\n   };\n \n+  /** A data-flow based variable inliner. */\n+  private final PassFactory flowSensitiveInlineVariables \u003d\n+      new PassFactory(\"flowSensitiveInlineVariables\", true) {\n+    @Override\n+    protected CompilerPass createInternal(AbstractCompiler compiler) {\n+      return new FlowSensitiveInlineVariables(compiler);\n+    }\n+  };\n+\n+  /** Uses register-allocation algorithms to use fewer variables. */\n+  private final PassFactory coalesceVariableNames \u003d\n+      new PassFactory(\"coalesceVariableNames\", true) {\n+    @Override\n+    protected CompilerPass createInternal(AbstractCompiler compiler) {\n+      return new CoalesceVariableNames(compiler);\n+    }\n+  };\n+\n+  /**\n+   * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n+   * {@code var x,y;}.\n+   */\n+  private final PassFactory collapseVariableDeclarations \u003d\n+      new PassFactory(\"collapseVariableDeclarations\", true) {\n+    @Override\n+    protected CompilerPass createInternal(AbstractCompiler compiler) {\n+      compiler.setUnnormalized();\n+      return new CollapseVariableDeclarations(compiler);\n+    }\n+  };\n+\n+  /**\n+   * Extracts common sub-expressions.\n+   */\n+  private final PassFactory extractPrototypeMemberDeclarations \u003d\n+      new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n+    @Override\n+    protected CompilerPass createInternal(AbstractCompiler compiler) {\n+      return new ExtractPrototypeMemberDeclarations(compiler);\n+    }\n+  };\n+\n+  /** Rewrites common function definitions to be more compact. */\n+  private final PassFactory rewriteFunctionExpressions \u003d\n+      new PassFactory(\"rewriteFunctionExpressions\", true) {\n+    @Override\n+    protected CompilerPass createInternal(AbstractCompiler compiler) {\n+      return new FunctionRewriter(compiler);\n+    }\n+  };\n+\n+  /** Collapses functions to not use the VAR keyword. */\n+  private final PassFactory collapseAnonymousFunctions \u003d\n+      new PassFactory(\"collapseAnonymousFunctions\", true) {\n+    @Override\n+    protected CompilerPass createInternal(AbstractCompiler compiler) {\n+      return new CollapseAnonymousFunctions(compiler);\n+    }\n+  };\n+\n+  /** Moves function declarations to the top, to simulate actual hoisting. */\n+  private final PassFactory moveFunctionDeclarations \u003d\n+      new PassFactory(\"moveFunctionDeclarations\", true) {\n+    @Override\n+    protected CompilerPass createInternal(AbstractCompiler compiler) {\n+      return new MoveFunctionDeclarations(compiler);\n+    }\n+  };\n+\n+  private final PassFactory nameUnmappedAnonymousFunctions \u003d\n+      new PassFactory(\"nameAnonymousFunctions\", true) {\n+    @Override\n+    protected CompilerPass createInternal(AbstractCompiler compiler) {\n+      return new NameAnonymousFunctions(compiler);\n+    }\n+  };\n+\n+  private final PassFactory nameMappedAnonymousFunctions \u003d\n+      new PassFactory(\"nameAnonymousFunctions\", true) {\n+    @Override\n+    protected CompilerPass createInternal(final AbstractCompiler compiler) {\n+      return new CompilerPass() {\n+        @Override public void process(Node externs, Node root) {\n+          NameAnonymousFunctionsMapped naf \u003d\n+              new NameAnonymousFunctionsMapped(compiler);\n+          naf.process(externs, root);\n+          anonymousFunctionNameMap \u003d naf.getFunctionMap();\n+        }\n+      };\n+    }\n+  };\n+\n+  /** Alias external symbols. */\n+  private final PassFactory aliasExternals \u003d\n+      new PassFactory(\"aliasExternals\", true) {\n+    @Override\n+    protected CompilerPass createInternal(AbstractCompiler compiler) {\n+      return new AliasExternals(compiler, compiler.getModuleGraph(),\n+          options.unaliasableGlobals, options.aliasableGlobals);\n+    }\n+  };\n+\n+  /**\n+   * Alias string literals with global variables, to avoid creating lots of\n+   * transient objects.\n+   */\n+  private final PassFactory aliasStrings \u003d\n+      new PassFactory(\"aliasStrings\", true) {\n+    @Override\n+    protected CompilerPass createInternal(AbstractCompiler compiler) {\n+      return new AliasStrings(\n+          compiler,\n+          compiler.getModuleGraph(),\n+          options.aliasAllStrings ? null : options.aliasableStrings,\n+          options.aliasStringsBlacklist,\n+          options.outputJsStringUsage);\n+    }\n+  };\n+\n+  /** Aliases common keywords (true, false) */\n+  private final PassFactory aliasKeywords \u003d\n+      new PassFactory(\"aliasKeywords\", true) {\n+    @Override\n+    protected CompilerPass createInternal(AbstractCompiler compiler) {\n+      return new AliasKeywords(compiler);\n+    }\n+  };\n+\n+  /** Handling for the ObjectPropertyString primitive. */\n+  private final PassFactory objectPropertyStringPostprocess \u003d\n+      new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n+    @Override\n+    protected CompilerPass createInternal(AbstractCompiler compiler) {\n+      return new ObjectPropertyStringPostprocess(compiler);\n+    }\n+  };\n+\n+  /**\n+   * Renames properties so that the two properties that never appear on\n+   * the same object get the same name.\n+   */\n+  private final PassFactory ambiguateProperties \u003d\n+      new PassFactory(\"ambiguateProperties\", true) {\n+    @Override\n+    protected CompilerPass createInternal(AbstractCompiler compiler) {\n+      return new AmbiguateProperties(\n+          compiler, options.anonymousFunctionNaming.getReservedCharacters());\n+    }\n+  };\n+\n+  /** Normalizes the AST for optimizations. */\n+  private final PassFactory normalize \u003d\n+      new PassFactory(\"normalize\", true) {\n+    @Override\n+    protected CompilerPass createInternal(AbstractCompiler compiler) {\n+      compiler.setNormalized();\n+      return new Normalize(compiler, false);\n+    }\n+  };\n+\n+  /** Denormalize the AST for code generation. */\n+  private final PassFactory denormalize \u003d\n+      new PassFactory(\"denormalize\", true) {\n+    @Override\n+    protected CompilerPass createInternal(AbstractCompiler compiler) {\n+      compiler.setUnnormalized();\n+      return new Denormalize(compiler);\n+    }\n+  };\n+\n+  /** Inverting name normalization. */\n+  private final PassFactory invertContextualRenaming \u003d\n+      new PassFactory(\"invertNames\", true) {\n+    @Override\n+    protected CompilerPass createInternal(AbstractCompiler compiler) {\n+      return MakeDeclaredNamesUnique.getContextualRenameInverter(compiler);\n+    }\n+  };\n+\n+  /**\n+   * Renames properties.\n+   */\n+  private final PassFactory renameProperties \u003d\n+      new PassFactory(\"renameProperties\", true) {\n+    @Override\n+    protected CompilerPass createInternal(final AbstractCompiler compiler) {\n+      VariableMap map \u003d null;\n+      if (options.inputPropertyMapSerialized !\u003d null) {\n+        try {\n+          map \u003d VariableMap.fromBytes(options.inputPropertyMapSerialized);\n+        } catch (ParseException e) {\n+          return new ErrorPass(compiler,\n+              JSError.make(INPUT_MAP_PROP_PARSE, e.getMessage()));\n+        }\n+      }\n+\n+      final VariableMap prevPropertyMap \u003d map;\n+      return new CompilerPass() {\n+        @Override public void process(Node externs, Node root) {\n+          propertyMap \u003d runPropertyRenaming(\n+              compiler, prevPropertyMap, externs, root);\n+        }\n+      };\n+    }\n+  };\n+\n+  private VariableMap runPropertyRenaming(\n+      AbstractCompiler compiler, VariableMap prevPropertyMap,\n+      Node externs, Node root) {\n+    char[] reservedChars \u003d\n+        options.anonymousFunctionNaming.getReservedCharacters();\n+    switch (options.propertyRenaming) {\n+      case HEURISTIC:\n+        RenamePrototypes rproto \u003d new RenamePrototypes(compiler, false,\n+            reservedChars, prevPropertyMap);\n+        rproto.process(externs, root);\n+        return rproto.getPropertyMap();\n+\n+      case AGGRESSIVE_HEURISTIC:\n+        RenamePrototypes rproto2 \u003d new RenamePrototypes(compiler, true,\n+            reservedChars, prevPropertyMap);\n+        rproto2.process(externs, root);\n+        return rproto2.getPropertyMap();\n+\n+      case ALL_UNQUOTED:\n+        RenameProperties rprop \u003d new RenameProperties(\n+            compiler, options.generatePseudoNames, prevPropertyMap,\n+            reservedChars);\n+        rprop.process(externs, root);\n+        return rprop.getPropertyMap();\n+\n+      default:\n+        throw new IllegalStateException(\n+            \"Unrecognized property renaming policy\");\n+    }\n+  }\n+\n+  /** Renames variables. */\n+  private final PassFactory renameVars \u003d\n+      new PassFactory(\"renameVars\", true) {\n+    @Override\n+    protected CompilerPass createInternal(final AbstractCompiler compiler) {\n+      VariableMap map \u003d null;\n+      if (options.inputVariableMapSerialized !\u003d null) {\n+        try {\n+          map \u003d VariableMap.fromBytes(options.inputVariableMapSerialized);\n+        } catch (ParseException e) {\n+          return new ErrorPass(compiler,\n+              JSError.make(INPUT_MAP_VAR_PARSE, e.getMessage()));\n+        }\n+      }\n+\n+      final VariableMap prevVariableMap \u003d map;\n+      return new CompilerPass() {\n+        @Override public void process(Node externs, Node root) {\n+          variableMap \u003d runVariableRenaming(\n+              compiler, prevVariableMap, externs, root);\n+        }\n+      };\n+    }\n+  };\n+\n+  private VariableMap runVariableRenaming(\n+      AbstractCompiler compiler, VariableMap prevVariableMap,\n+      Node externs, Node root) {\n+    char[] reservedChars \u003d\n+        options.anonymousFunctionNaming.getReservedCharacters();\n+    boolean preserveAnonymousFunctionNames \u003d\n+        options.anonymousFunctionNaming !\u003d AnonymousFunctionNamingPolicy.OFF;\n+    RenameVars rn \u003d new RenameVars(\n+        compiler,\n+        options.renamePrefix,\n+        options.variableRenaming \u003d\u003d VariableRenamingPolicy.LOCAL,\n+        preserveAnonymousFunctionNames,\n+        options.generatePseudoNames,\n+        prevVariableMap,\n+        reservedChars,\n+        exportedNames);\n+    rn.process(externs, root);\n+    return rn.getVariableMap();\n+  }\n+\n+  /** Renames labels */\n+  private final PassFactory renameLabels \u003d\n+      new PassFactory(\"renameLabels\", true) {\n+    @Override\n+    protected CompilerPass createInternal(AbstractCompiler compiler) {\n+      return new RenameLabels(compiler);\n+    }\n+  };\n+\n+  /** Convert bracket access to dot access */\n+  private final PassFactory convertToDottedProperties \u003d\n+      new PassFactory(\"convertToDottedProperties\", true) {\n+    @Override\n+    protected CompilerPass createInternal(AbstractCompiler compiler) {\n+      return new ConvertToDottedProperties(compiler);\n+    }\n+  };\n+\n+  /** Checks that all variables are defined. */\n+  private final PassFactory sanityCheckVars \u003d\n+      new PassFactory(\"sanityCheckVars\", true) {\n+    @Override\n+    protected CompilerPass createInternal(AbstractCompiler compiler) {\n+      return new VarCheck(compiler, true);\n+    }\n+  };\n+\n+  /** Adds instrumentations according to an instrumentation template. */\n+  private final PassFactory instrumentFunctions \u003d\n+      new PassFactory(\"instrumentFunctions\", true) {\n+    @Override\n+    protected CompilerPass createInternal(final AbstractCompiler compiler) {\n+      return new CompilerPass() {\n+        @Override public void process(Node externs, Node root) {\n+          try {\n+            FileReader templateFile \u003d\n+                new FileReader(options.instrumentationTemplate);\n+            (new InstrumentFunctions(\n+                compiler, functionNames,\n+                options.instrumentationTemplate,\n+                options.appNameStr,\n+                templateFile)).process(externs, root);\n+          } catch (IOException e) {\n+            compiler.report(\n+                JSError.make(AbstractCompiler.READ_ERROR,\n+                    options.instrumentationTemplate));\n+          }\n+        }\n+      };\n+    }\n+  };\n+\n   /**\n    * Create a no-op pass that can only run once. Used to break up loops.\n    */\n@@ -1210,16 +1747,20 @@\n   /** A compiler pass that just reports an error. */\n   private static class ErrorPass implements CompilerPass {\n     private final AbstractCompiler compiler;\n-    private final DiagnosticType error;\n+    private final JSError error;\n \n     private ErrorPass(AbstractCompiler compiler, DiagnosticType error) {\n+      this(compiler, JSError.make(error));\n+    }\n+\n+    private ErrorPass(AbstractCompiler compiler, JSError error) {\n       this.compiler \u003d compiler;\n       this.error \u003d error;\n     }\n \n     @Override\n     public void process(Node externs, Node root) {\n-      compiler.report(JSError.make(error));\n+      compiler.report(error);\n     }\n   }\n \n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "ImportDeclaration [855,893]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ImportDeclaration [1142,1168]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ImportDeclaration [1197,1229]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ImportDeclaration [1259,1288]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ImportDeclaration [1334,1355]"
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldDeclaration [2782,2943]"
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldDeclaration [3810,3884]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldDeclaration [3888,3962]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldDeclaration [3966,4066]"
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [4596,5115]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldDeclaration [32962,33283]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldDeclaration [44544,44860]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldDeclaration [44864,45183]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldDeclaration [45187,45598]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldDeclaration [45602,45941]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldDeclaration [45945,46266]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldDeclaration [46270,46592]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldDeclaration [46596,46933]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldDeclaration [46937,47198]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldDeclaration [47202,47734]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldDeclaration [47738,48091]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldDeclaration [48095,48627]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldDeclaration [48631,48904]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldDeclaration [48908,49246]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldDeclaration [49250,49686]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldDeclaration [49690,49990]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldDeclaration [49994,50298]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldDeclaration [50302,50610]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldDeclaration [50614,51453]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [51457,52549]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldDeclaration [52553,53370]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [53374,54090]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldDeclaration [54094,54341]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldDeclaration [54345,54653]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldDeclaration [54657,54936]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldDeclaration [54940,55861]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Javadoc [4070,4131]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MarkerAnnotation [4260,4269]"
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SingleMemberAnnotation [22037,22069]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [58378,58503]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "NullLiteral [4172,4176]"
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [5231,5608]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [8996,9133]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [13203,13300]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [13306,13399]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [13476,13565]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [13571,13711]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [14051,14330]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [14336,14419]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [14425,14581]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [14587,14690]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [14796,14887]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [15128,15221]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [15365,15472]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [15478,15547]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [15553,15620]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [15626,15723]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [15729,15753]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [15759,15850]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [15856,16178]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [16185,16282]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [16343,16442]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [16448,16514]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [16520,16664]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [16690,16758]"
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ConstructorInvocation [58330,58366]"
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ConditionalExpression [4333,4384]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ConditionalExpression [4394,4479]"
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: variableMap [4513,4524]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: propertyMap [4526,4537]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: anonymousFunctionNameMap [4547,4571]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: functionNames [4573,4586]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: crossModuleIdGenerator [44348,44370]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "MethodDeclaration [22481,22653]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MarkerAnnotation [22481,22490]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Modifier: public [22499,22505]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "PrimitiveType: void [22506,22510]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: process [22511,22518]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "Block [22544,22653]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [23857,23889]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: newCssNames [24019,24030]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SingleMemberAnnotation [15708,15740]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MarkerAnnotation [16152,16161]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: public [16170,16176]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "PrimitiveType: void [16177,16181]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: process [16182,16189]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "Block [16215,16326]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "MethodDeclaration [16152,16326]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodInvocation [17538,17555]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [17672,17694]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodInvocation [37686,37713]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [40359,40384]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [40391,40410]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "METHOD_INVOCATION_RECEIVER [40505,40512]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: make [40513,40517]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "METHOD_INVOCATION_ARGUMENTS [40505,40524]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "MethodInvocation [40489,40525]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/jscomp/JsAst.java",
        "src/com/google/javascript/jscomp/JsAst.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "com.google.javascript.jscomp.JsAst:parse:[AbstractCompiler compiler, String sourceName, String sourceStr]:void",
            "com.google.javascript.jscomp.JsAst:createAst:[AbstractCompiler compiler]:void"
          ],
          "num": 2
        },
        {
          "qualified_names": [
            "com.google.javascript.jscomp.JsAst:createAst:[AbstractCompiler compiler]:void",
            "com.google.javascript.jscomp.JsAst:parse:[AbstractCompiler compiler, String sourceName, String sourceStr]:void"
          ],
          "num": 2
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "81",
            "94"
          ],
          "num": 2
        },
        {
          "qualified_names": [
            "81",
            "94"
          ],
          "num": 2
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/jscomp/JsAst.java b/src/com/google/javascript/jscomp/JsAst.java\nindex f3f4b5c..28f4c34 100644\n--- a/src/com/google/javascript/jscomp/JsAst.java\n+++ b/src/com/google/javascript/jscomp/JsAst.java\n@@ -78,7 +78,7 @@\n       parse(compiler, sourceFile.getName(), sourceFile.getCode());\n     } catch (IOException e) {\n       compiler.report(\n-          JSError.make(Compiler.READ_ERROR, sourceFile.getName()));\n+          JSError.make(AbstractCompiler.READ_ERROR, sourceFile.getName()));\n     }\n   }\n \n@@ -91,7 +91,7 @@\n           compiler.getDefaultErrorReporter(),\n           logger_);\n     } catch (IOException e) {\n-      compiler.report(JSError.make(Compiler.READ_ERROR, sourceName));\n+      compiler.report(JSError.make(AbstractCompiler.READ_ERROR, sourceName));\n     }\n \n     if (root \u003d\u003d null) {\n",
      "operations": [
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/jscomp/PassConfig.java",
        "src/com/google/javascript/jscomp/PassConfig.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "com.google.javascript.jscomp.PassConfig:getCssNames:[]:Map\u003cString,Integer\u003e",
            "com.google.javascript.jscomp.PassConfig:setCssNames:[Map\u003cString,Integer\u003e newVal]:void",
            "com.google.javascript.jscomp.PassConfig:getExportedNames:[]:Set\u003cString\u003e",
            "com.google.javascript.jscomp.PassConfig:getIntermediateState:[]:State",
            "com.google.javascript.jscomp.PassConfig\\$PassConfigDelegate:getCssNames:[]:Map\u003cString,Integer\u003e",
            "com.google.javascript.jscomp.PassConfig\\$PassConfigDelegate:getExportedNames:[]:Set\u003cString\u003e",
            "com.google.javascript.jscomp.PassConfig:getCrossModuleIdGenerator:[]:CrossModuleMethodMotion.IdGenerator",
            "com.google.javascript.jscomp.PassConfig\\$PassConfigDelegate:setCssNames:[Map\u003cString,Integer\u003e newVal]:void",
            "com.google.javascript.jscomp.PassConfig\\$State:State:[Map\u003cString,Integer\u003e cssNames, Set\u003cString\u003e exportedNames, CrossModuleMethodMotion.IdGenerator crossModuleIdGenerator]:null",
            "com.google.javascript.jscomp.PassConfig:setExportedNames:[Set\u003cString\u003e newVal]:void",
            "com.google.javascript.jscomp.PassConfig\\$PassConfigDelegate:setExportedNames:[Set\u003cString\u003e newVal]:void",
            "com.google.javascript.jscomp.PassConfig:setIntermediateState:[State state]:void"
          ],
          "num": 12
        },
        {
          "qualified_names": [
            "com.google.javascript.jscomp.PassConfig:getIntermediateState:[]:State",
            "com.google.javascript.jscomp.PassConfig:getChecks:[]:List\u003cPassFactory\u003e",
            "com.google.javascript.jscomp.PassConfig\\$State:State:[Map\u003cString,Integer\u003e cssNames, Set\u003cString\u003e exportedNames, CrossModuleMethodMotion.IdGenerator crossModuleIdGenerator, VariableMap variableMap, VariableMap propertyMap, VariableMap anonymousFunctionNameMap, FunctionNames functionNames]:null",
            "com.google.javascript.jscomp.PassConfig:setIntermediateState:[State state]:void"
          ],
          "num": 4
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "20",
            "21",
            "24",
            "39",
            "40",
            "41",
            "42",
            "43",
            "44",
            "45",
            "46",
            "47",
            "48",
            "59",
            "60",
            "61",
            "62",
            "63",
            "64",
            "69",
            "70",
            "71",
            "72",
            "73",
            "74",
            "75",
            "76",
            "77",
            "78",
            "79",
            "80",
            "81",
            "82",
            "83",
            "84",
            "85",
            "86",
            "87",
            "88",
            "89",
            "90",
            "91",
            "92",
            "93",
            "94",
            "95",
            "96",
            "97",
            "98",
            "99",
            "100",
            "101",
            "102",
            "103",
            "104",
            "105",
            "106",
            "107",
            "108",
            "109",
            "110",
            "111",
            "112",
            "113",
            "114",
            "115",
            "116",
            "117",
            "205",
            "206",
            "207",
            "208",
            "214",
            "215",
            "216",
            "217",
            "218",
            "241",
            "242",
            "243",
            "244",
            "245",
            "246",
            "247",
            "248",
            "249",
            "250",
            "251",
            "252",
            "253",
            "254",
            "255",
            "256",
            "280",
            "281",
            "282",
            "284",
            "285"
          ],
          "num": 98
        },
        {
          "qualified_names": [
            "19",
            "41",
            "71",
            "137",
            "143",
            "189",
            "190",
            "191",
            "192",
            "193",
            "194",
            "195",
            "197",
            "198",
            "199",
            "200",
            "204",
            "205",
            "206",
            "207",
            "315"
          ],
          "num": 21
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/jscomp/PassConfig.java b/src/com/google/javascript/jscomp/PassConfig.java\nindex 5be9c78..f080f9a 100644\n--- a/src/com/google/javascript/jscomp/PassConfig.java\n+++ b/src/com/google/javascript/jscomp/PassConfig.java\n@@ -17,11 +17,8 @@\n package com.google.javascript.jscomp;\n \n \n-import com.google.common.collect.Maps;\n-import com.google.common.collect.Sets;\n \n import java.io.Serializable;\n-import java.util.Collections;\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n@@ -36,16 +33,6 @@\n   // Used by subclasses in this package.\n   final CompilerOptions options;\n \n-  /** Names exported by goog.exportSymbol. */\n-  private Set\u003cString\u003e exportedNames \u003d null;\n-\n-  /**\n-   * Ids for cross-module method stubbing, so that each method has\n-   * a unique id.\n-   */\n-  private CrossModuleMethodMotion.IdGenerator crossModuleIdGenerator \u003d\n-      new CrossModuleMethodMotion.IdGenerator();\n-\n   /**\n    * A memoized version of scopeCreator. It must be memoized so that\n    * we can make two separate passes over the AST, one for inferring types\n@@ -56,65 +43,10 @@\n   /** The global typed scope. */\n   Scope topScope \u003d null;\n \n-  /**\n-   * Keys are arguments passed to getCssName() found during compilation; values\n-   * are the number of times the key appeared as an argument to getCssName().\n-   */\n-  private Map\u003cString, Integer\u003e cssNames \u003d null;\n-\n   public PassConfig(CompilerOptions options) {\n     this.options \u003d options;\n   }\n \n-  // Setters and getters for intermediate state.\n-  //\n-  // This makes it possible to start and stop the compiler mid-compile.\n-  // Each getter and setter corresponds to a type of state that is produced\n-  // by an earlier pass and consumed by a later pass. When the compiler is\n-  // stopped mid-compile, the getter should return any state which has\n-  // been produced, and the setter should restore that state when the compiler\n-  // is restarted.\n-  //\n-  // TODO(nicksantos): Perhaps we should just make PassConfig serializable.\n-\n-  /**\n-   * Gets a map of CSS names found in the JS code, to the number of times\n-   * they appear.\n-   */\n-  Map\u003cString, Integer\u003e getCssNames() {\n-    return cssNames \u003d\u003d null ? null : Maps.newHashMap(cssNames);\n-  }\n-\n-  /**\n-   * Gets the symbols exported by the passes.\n-   */\n-  Set\u003cString\u003e getExportedNames() {\n-    return exportedNames \u003d\u003d null ? null :\n-        Collections.unmodifiableSet(exportedNames);\n-  }\n-\n-  /**\n-   * Gets a generator for cross-module method ids, so that the ids\n-   * are stable across compiled.\n-   */\n-  CrossModuleMethodMotion.IdGenerator getCrossModuleIdGenerator() {\n-    return crossModuleIdGenerator;\n-  }\n-\n-  /**\n-   * Sets the map of CSS names found in the JS code during previous runs.\n-   */\n-  void setCssNames(Map\u003cString, Integer\u003e newVal) {\n-    cssNames \u003d newVal \u003d\u003d null ? null : Maps.newHashMap(newVal);\n-  }\n-\n-  /**\n-   * Sets the symbols exported by previous passes.\n-   */\n-  void setExportedNames(Set\u003cString\u003e newVal) {\n-    exportedNames \u003d newVal \u003d\u003d null ? null : Sets.newHashSet(newVal);\n-  }\n-\n   /**\n    * Gets the scope creator for typed scopes.\n    */\n@@ -202,20 +134,13 @@\n    * Get intermediate state for a running pass config, so it can\n    * be paused and started again later.\n    */\n-  State getIntermediateState() {\n-    return new State(getCssNames(), getExportedNames(),\n-                     crossModuleIdGenerator);\n-  }\n+  abstract State getIntermediateState();\n \n   /**\n    * Set the intermediate state for a pass config, to restart\n    * a compilation process that had been previously paused.\n    */\n-  void setIntermediateState(State state) {\n-    setCssNames(state.cssNames);\n-    setExportedNames(state.exportedNames);\n-    crossModuleIdGenerator \u003d state.crossModuleIdGenerator;\n-  }\n+  abstract void setIntermediateState(State state);\n \n   /**\n    * An implementation of PassConfig that just proxies all its method calls\n@@ -238,22 +163,6 @@\n       return delegate.getOptimizations();\n     }\n \n-    @Override Map\u003cString, Integer\u003e getCssNames() {\n-      return delegate.getCssNames();\n-    }\n-\n-    @Override Set\u003cString\u003e getExportedNames() {\n-      return delegate.getExportedNames();\n-    }\n-\n-    @Override void setCssNames(Map\u003cString, Integer\u003e newVal) {\n-      delegate.setCssNames(newVal);\n-    }\n-\n-    @Override void setExportedNames(Set\u003cString\u003e newVal) {\n-      delegate.setExportedNames(newVal);\n-    }\n-\n     @Override ScopeCreator getScopeCreator() {\n       return delegate.getScopeCreator();\n     }\n@@ -277,15 +186,25 @@\n   static class State implements Serializable {\n     private static final long serialVersionUID \u003d 1L;\n \n-    private final Map\u003cString, Integer\u003e cssNames;\n-    private final Set\u003cString\u003e exportedNames;\n-    private final CrossModuleMethodMotion.IdGenerator crossModuleIdGenerator;\n+    final Map\u003cString, Integer\u003e cssNames;\n+    final Set\u003cString\u003e exportedNames;\n+    final CrossModuleMethodMotion.IdGenerator crossModuleIdGenerator;\n+    final VariableMap variableMap;\n+    final VariableMap propertyMap;\n+    final VariableMap anonymousFunctionNameMap;\n+    final FunctionNames functionNames;\n \n-    private State(Map\u003cString, Integer\u003e cssNames, Set\u003cString\u003e exportedNames,\n-                  CrossModuleMethodMotion.IdGenerator crossModuleIdGenerator) {\n+    State(Map\u003cString, Integer\u003e cssNames, Set\u003cString\u003e exportedNames,\n+          CrossModuleMethodMotion.IdGenerator crossModuleIdGenerator,\n+          VariableMap variableMap, VariableMap propertyMap,\n+          VariableMap anonymousFunctionNameMap, FunctionNames functionNames) {\n       this.cssNames \u003d cssNames;\n       this.exportedNames \u003d exportedNames;\n       this.crossModuleIdGenerator \u003d crossModuleIdGenerator;\n+      this.variableMap \u003d variableMap;\n+      this.propertyMap \u003d propertyMap;\n+      this.anonymousFunctionNameMap \u003d anonymousFunctionNameMap;\n+      this.functionNames \u003d functionNames;\n     }\n   }\n }\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [3616,3771]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [3775,3957]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldDeclaration [5201,5231]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldDeclaration [5236,5266]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldDeclaration [5271,5314]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldDeclaration [5319,5353]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SingleVariableDeclaration [5503,5526]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SingleVariableDeclaration [5528,5551]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SingleVariableDeclaration [5563,5599]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "SingleVariableDeclaration [5601,5628]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [5772,5803]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [5810,5841]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [5848,5905]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [5912,5947]"
        },
        {
          "type": "delete-tree",
          "from": "ImportDeclaration [636,674]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ImportDeclaration [675,713]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ImportDeclaration [744,773]",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [2455,2663]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [2667,2855]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [2859,3075]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [3079,3280]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [3284,3463]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "Javadoc [5792,5906]",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodInvocation [5961,5974]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodInvocation [5976,5994]",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "M",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [6049,6362]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [6904,6993]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [6999,7089]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [7095,7194]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodDeclaration [7200,7300]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: private [7860,7867]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: private [7909,7916]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: private [7954,7961]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: private [8033,8040]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/jscomp/TightenTypes.java",
        "src/com/google/javascript/jscomp/TightenTypes.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "com.google.javascript.jscomp.TightenTypes:inferConcreteType:[ConcreteScope scope, Node expr]:ConcreteType",
            "com.google.javascript.jscomp.TightenTypes\\$NativeCallFunctionCall:getAssignments:[ConcreteScope scope]:Collection\u003cAssignment\u003e",
            "com.google.javascript.jscomp.TightenTypes:getSubTypes:[FunctionType type, Set\u003cConcreteType\u003e set]:boolean",
            "com.google.javascript.jscomp.TightenTypes\\$FunctionCall:getAssignments:[ConcreteScope scope]:Collection\u003cAssignment\u003e",
            "com.google.javascript.jscomp.TightenTypes:getFunctionCallAssignments:[ConcreteType recvType, ConcreteType thisType, List\u003cConcreteType\u003e argTypes]:List\u003cAssignment\u003e",
            "com.google.javascript.jscomp.TightenTypes:createTypeIntersection:[ConcreteType concreteType, JSType jsType]:ConcreteType"
          ],
          "num": 6
        },
        {
          "qualified_names": [
            "com.google.javascript.jscomp.TightenTypes:getFunctionCallAssignments:[ConcreteType recvType, ConcreteType thisType, List\u003cConcreteType\u003e argTypes]:List\u003cAssignment\u003e",
            "com.google.javascript.jscomp.TightenTypes\\$ConcreteJSTypePair:equalsJSType:[JSType jsType]:boolean",
            "com.google.javascript.jscomp.TightenTypes\\$ConcreteJSTypePair:ConcreteJSTypePair:[ConcreteType concrete, JSType jstype]:null",
            "com.google.javascript.jscomp.TightenTypes:createTypeIntersection:[ConcreteType concreteType, JSType jsType]:ConcreteType",
            "com.google.javascript.jscomp.TightenTypes\\$NativeCallFunctionCall:getAssignments:[ConcreteScope scope]:Collection\u003cAssignment\u003e",
            "com.google.javascript.jscomp.TightenTypes\\$FunctionCall:getAssignments:[ConcreteScope scope]:Collection\u003cAssignment\u003e",
            "com.google.javascript.jscomp.TightenTypes\\$ConcreteJSTypePair:getJSTypeHashCode:[]:int",
            "com.google.javascript.jscomp.TightenTypes\\$ConcreteJSTypePair:equals:[Object o]:boolean",
            "com.google.javascript.jscomp.TightenTypes:inferConcreteType:[ConcreteScope scope, Node expr]:ConcreteType",
            "com.google.javascript.jscomp.TightenTypes\\$ConcreteJSTypePair:hashCode:[]:int"
          ],
          "num": 10
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "109",
            "436",
            "437",
            "513",
            "540",
            "1030",
            "1164",
            "1197",
            "1332"
          ],
          "num": 9
        },
        {
          "qualified_names": [
            "110",
            "111",
            "112",
            "113",
            "114",
            "115",
            "442",
            "443",
            "444",
            "445",
            "446",
            "522",
            "523",
            "524",
            "525",
            "526",
            "553",
            "554",
            "555",
            "1046",
            "1047",
            "1181",
            "1182",
            "1183",
            "1184",
            "1185",
            "1186",
            "1187",
            "1188",
            "1189",
            "1223",
            "1359",
            "1360",
            "1361",
            "1362",
            "1363",
            "1364",
            "1365",
            "1366",
            "1367",
            "1368",
            "1369",
            "1370",
            "1371",
            "1372",
            "1373",
            "1374",
            "1375",
            "1376",
            "1377",
            "1378",
            "1379",
            "1380",
            "1381",
            "1382",
            "1383",
            "1384",
            "1385",
            "1386",
            "1387",
            "1388",
            "1389",
            "1390",
            "1391",
            "1392",
            "1393",
            "1394",
            "1395",
            "1396",
            "1397",
            "1398",
            "1399",
            "1400",
            "1401",
            "1402",
            "1403"
          ],
          "num": 76
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/jscomp/TightenTypes.java b/src/com/google/javascript/jscomp/TightenTypes.java\nindex 9fd9512..7e0d309 100644\n--- a/src/com/google/javascript/jscomp/TightenTypes.java\n+++ b/src/com/google/javascript/jscomp/TightenTypes.java\n@@ -107,6 +107,12 @@\n   private final Map\u003cObjectType, ConcreteInstanceType\u003e instanceFromJSType \u003d\n       Maps.newHashMap();\n \n+  /**\n+   * Memoized results of \"createTypeIntersection\" calls.\n+   */\n+  private final Map\u003cConcreteJSTypePair, ConcreteType\u003e typeIntersectionMemos \u003d\n+      Maps.newHashMap();\n+\n   /** Scope storing the top-level variables and functions. */\n   private ConcreteScope topScope;\n \n@@ -433,8 +439,11 @@\n       assigns.add(new Assignment((ConcreteSlot) fType.getThisSlot(), thisType));\n       for (int i \u003d 0; i \u003c argTypes.size(); ++i) {\n         ConcreteSlot variable \u003d (ConcreteSlot) fType.getParameterSlot(i);\n-        Preconditions.checkState(variable !\u003d null);\n-        assigns.add(new Assignment(variable, argTypes.get(i)));\n+        // TODO(johnlenz): Support \"arguments\" references in function bodies.\n+        // For now, ignore anonymous arguments.\n+        if (variable !\u003d null) {\n+          assigns.add(new Assignment(variable, argTypes.get(i)));\n+        }\n       }\n     }\n     return assigns;\n@@ -510,7 +519,11 @@\n              : recvType.getFunctionInstanceTypes()) {\n           thisType \u003d thisType.unionWith(instType);\n         }\n-        allInstantiatedTypes.add(thisType);\n+        boolean added \u003d allInstantiatedTypes.add(thisType);\n+        if (added) {\n+          // A new type instance invalidates the cached type intersections.\n+          typeIntersectionMemos.clear();\n+        }\n       }\n \n       List\u003cConcreteType\u003e argTypes \u003d Lists.newArrayList();\n@@ -537,7 +550,9 @@\n     }\n \n     public Collection\u003cAssignment\u003e getAssignments(ConcreteScope scope) {\n-      ConcreteType thisType \u003d inferConcreteType(scope, firstArgument);\n+      ConcreteType thisType \u003d (firstArgument !\u003d null)\n+          ? inferConcreteType(scope, firstArgument)\n+          : getTopScope().getTypeOfThis();\n       ConcreteType recvType \u003d inferConcreteType(scope, receiver);\n \n       if (recvType instanceof ConcreteInstanceType \u0026\u0026\n@@ -1028,6 +1043,8 @@\n \n   /** Computes the concrete types that can result from the given expression. */\n   ConcreteType inferConcreteType(ConcreteScope scope, Node expr) {\n+    Preconditions.checkNotNull(scope);\n+    Preconditions.checkNotNull(expr);\n     ConcreteType ret;\n     switch (expr.getType()) {\n       case Token.NAME:\n@@ -1161,7 +1178,15 @@\n \n   private ConcreteType createTypeIntersection(\n       ConcreteType concreteType, JSType jsType) {\n-    ConcreteType ret;\n+    // TODO(johnlenz): Even with memoizing all the time of this pass is still \n+    // spent in this function (due to invalidation caused by changes to\n+    // allInstantiatedTypes), specifically calls to ConcreteUnionType.unionWith\n+    ConcreteJSTypePair key \u003d new ConcreteJSTypePair(concreteType, jsType);\n+    ConcreteType ret \u003d typeIntersectionMemos.get(key);\n+    if (ret !\u003d null) {\n+      return ret;\n+    }\n+\n     if (jsType \u003d\u003d null || jsType.isUnknownType() || concreteType.isNone()) {\n       ret \u003d concreteType;\n     } else if (concreteType.isUnion() || concreteType.isSingleton()) {\n@@ -1195,6 +1220,7 @@\n       }\n     }\n \n+    typeIntersectionMemos.put(key, ret);\n     return ret;\n   }\n \n@@ -1330,4 +1356,49 @@\n     }\n     return true;\n   }\n+\n+  /**\n+   * A simple class used to pair a concrete type and a js type.  Used to\n+   * memoize the results of a \"createTypeIntersection\" call.\n+   */\n+  static class ConcreteJSTypePair {\n+    final ConcreteType concrete;\n+    final JSType jstype;\n+    final int hashcode;\n+\n+    ConcreteJSTypePair(ConcreteType concrete, JSType jstype) {\n+      this.concrete \u003d concrete;\n+      this.jstype \u003d jstype;\n+      this.hashcode \u003d concrete.hashCode() + getJSTypeHashCode();\n+    }\n+\n+    private int getJSTypeHashCode() {\n+      return jstype !\u003d null ? jstype.hashCode() : 0;\n+    }\n+\n+    private boolean equalsJSType(JSType jsType) {\n+      if (jsType \u003d\u003d null || jstype \u003d\u003d null) {\n+        return jstype \u003d\u003d jsType;\n+      } else {\n+        return jsType.equals(this.jstype);\n+      }\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+      if (o instanceof ConcreteJSTypePair) {\n+        ConcreteJSTypePair pair \u003d (ConcreteJSTypePair) o;\n+        if ((pair.concrete.equals(this.concrete)\n+            \u0026\u0026 equalsJSType(pair.jstype))) {\n+          return true;\n+        }\n+      }\n+      return false;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+      return hashcode;\n+    }\n+  }\n }\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldDeclaration [4942,5111]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TypeDeclaration [50124,51273]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [38896,38930]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [38935,38968]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [43656,43726]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "VariableDeclarationStatement [43731,43781]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [43786,43828]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [45272,45308]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "VariableDeclarationStatement [19331,19382]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [19391,19530]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "ConditionalExpression [20377,20494]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "IfStatement [16608,16707]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "PrimitiveType: boolean [19331,19338]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "VariableDeclarationFragment [19339,19381]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ParenthesizedExpression [20377,20400]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodInvocation [20465,20494]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "InfixExpression [16612,16628]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "Block [16630,16707]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: added [19339,19344]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [16309,16352]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "ExpressionStatement [19040,19075]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "VariableDeclarationStatement [42815,42832]",
          "to": ""
        }
      ]
    }
  ],
  "inducing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [
        "com.google.javascript.jscomp.AbstractCompiler:setNormalized:[]:void",
        "com.google.javascript.jscomp.Compiler:Compiler:[PrintStream stream]:null",
        "com.google.javascript.jscomp.DefaultPassConfig:runPropertyRenaming:[AbstractCompiler compiler, VariableMap prevPropertyMap, Node externs, Node root]:VariableMap",
        "com.google.javascript.jscomp.TightenTypes\\$ConcreteJSTypePair:equals:[Object o]:boolean",
        "com.google.javascript.jscomp.Compiler:removeChangeHandler:[CodeChangeHandler handler]:void",
        "com.google.javascript.jscomp.DefaultPassConfig\\$ErrorPass:ErrorPass:[AbstractCompiler compiler, JSError error]:null",
        "com.google.javascript.jscomp.DefaultPassConfig:setIntermediateState:[State state]:void",
        "com.google.javascript.jscomp.Compiler:newTracer:[String passName]:Tracer",
        "com.google.javascript.jscomp.TightenTypes\\$ConcreteJSTypePair:equalsJSType:[JSType jsType]:boolean",
        "com.google.javascript.jscomp.DefaultPassConfig\\$ErrorPass:ErrorPass:[AbstractCompiler compiler, DiagnosticType error]:null",
        "com.google.javascript.jscomp.TightenTypes\\$ConcreteJSTypePair:ConcreteJSTypePair:[ConcreteType concrete, JSType jstype]:null",
        "com.google.javascript.jscomp.TightenTypes\\$ConcreteJSTypePair:hashCode:[]:int",
        "com.google.javascript.jscomp.AbstractCompiler:setUnnormalized:[]:void",
        "com.google.javascript.jscomp.PassConfig:getChecks:[]:List\u003cPassFactory\u003e",
        "com.google.javascript.jscomp.DefaultPassConfig:runVariableRenaming:[AbstractCompiler compiler, VariableMap prevVariableMap, Node externs, Node root]:VariableMap",
        "com.google.javascript.jscomp.TightenTypes\\$ConcreteJSTypePair:getJSTypeHashCode:[]:int",
        "com.google.javascript.jscomp.PassConfig\\$State:State:[Map\u003cString,Integer\u003e cssNames, Set\u003cString\u003e exportedNames, CrossModuleMethodMotion.IdGenerator crossModuleIdGenerator, VariableMap variableMap, VariableMap propertyMap, VariableMap anonymousFunctionNameMap, FunctionNames functionNames]:null",
        "com.google.javascript.jscomp.DefaultPassConfig:getIntermediateState:[]:State"
      ],
      "num": 18
    },
    "delete_functions": {
      "qualified_names": [
        "com.google.javascript.jscomp.Compiler:flowSensitiveInlineVariables:[]:void",
        "com.google.javascript.jscomp.AbstractCompiler:getErrorManager:[]:ErrorManager",
        "com.google.javascript.jscomp.PassConfig:getCrossModuleIdGenerator:[]:CrossModuleMethodMotion.IdGenerator",
        "com.google.javascript.jscomp.Compiler:denormalize:[]:void",
        "com.google.javascript.jscomp.PassConfig\\$PassConfigDelegate:getExportedNames:[]:Set\u003cString\u003e",
        "com.google.javascript.jscomp.PassConfig\\$State:State:[Map\u003cString,Integer\u003e cssNames, Set\u003cString\u003e exportedNames, CrossModuleMethodMotion.IdGenerator crossModuleIdGenerator]:null",
        "com.google.javascript.jscomp.Compiler:nameAnonymousFunctions:[AnonymousFunctionNamingPolicy policy]:void",
        "com.google.javascript.jscomp.PassConfig\\$PassConfigDelegate:getCssNames:[]:Map\u003cString,Integer\u003e",
        "com.google.javascript.jscomp.Compiler:renameVars:[String renamePrefix, boolean renameLocalVarsOnly, AnonymousFunctionNamingPolicy anonFunctionNamePolicy, boolean generatePseudoNames, VariableMap prevVariableMap]:void",
        "com.google.javascript.jscomp.Compiler:moveFunctionDeclarations:[]:void",
        "com.google.javascript.jscomp.Compiler:renameLabels:[]:void",
        "com.google.javascript.jscomp.Compiler:objectPropertyStringPostprocess:[]:void",
        "com.google.javascript.jscomp.Compiler:rewriteFunctionExpressions:[]:void",
        "com.google.javascript.jscomp.Compiler:collapseAnonymousFunctions:[]:void",
        "com.google.javascript.jscomp.Compiler:sanityCheckVars:[]:void",
        "com.google.javascript.jscomp.Compiler:extractPrototypeMemberDeclarations:[]:void",
        "com.google.javascript.jscomp.PassConfig:setExportedNames:[Set\u003cString\u003e newVal]:void",
        "com.google.javascript.jscomp.PassConfig\\$PassConfigDelegate:setCssNames:[Map\u003cString,Integer\u003e newVal]:void",
        "com.google.javascript.jscomp.PassConfig:getCssNames:[]:Map\u003cString,Integer\u003e",
        "com.google.javascript.jscomp.Compiler:aliasExternals:[]:void",
        "com.google.javascript.jscomp.Compiler:aliasStrings:[Set\u003cString\u003e aliasableStrings, boolean aliasAllStrings, String aliasStringsBlacklist, boolean outputStringUsage]:void",
        "com.google.javascript.jscomp.Compiler:renamePrototypes:[boolean aggressive, AnonymousFunctionNamingPolicy anonFunctionNamePolicy, VariableMap prevPropertyMap]:void",
        "com.google.javascript.jscomp.Compiler:computeFunctionNames:[]:void",
        "com.google.javascript.jscomp.Compiler:ambiguateProperties:[char[] reservedCharacters]:void",
        "com.google.javascript.jscomp.Compiler:invertContextualRenaming:[]:void",
        "com.google.javascript.jscomp.Compiler:setState:[IntermediateState state]:void",
        "com.google.javascript.jscomp.Compiler:instrumentFunctions:[]:void",
        "com.google.javascript.jscomp.Compiler:aliasKeywords:[]:void",
        "com.google.javascript.jscomp.Compiler:convertToDottedProperties:[]:void",
        "com.google.javascript.jscomp.PassConfig\\$PassConfigDelegate:setExportedNames:[Set\u003cString\u003e newVal]:void",
        "com.google.javascript.jscomp.Compiler:renameProperties:[boolean generatePseudoNames, AnonymousFunctionNamingPolicy anonFunctionNamePolicy, VariableMap prevPropertyMap]:void",
        "com.google.javascript.jscomp.PassConfig:setCssNames:[Map\u003cString,Integer\u003e newVal]:void",
        "com.google.javascript.jscomp.Compiler:getState:[]:IntermediateState",
        "com.google.javascript.jscomp.TightenTypes:getSubTypes:[FunctionType type, Set\u003cConcreteType\u003e set]:boolean",
        "com.google.javascript.jscomp.PassConfig:getExportedNames:[]:Set\u003cString\u003e",
        "com.google.javascript.jscomp.Compiler:optimize:[]:void",
        "com.google.javascript.jscomp.Compiler:coalesceVariableNames:[]:void",
        "com.google.javascript.jscomp.Compiler:runCustomPasses:[CustomPassExecutionTime executionTime]:void",
        "com.google.javascript.jscomp.Compiler:collapseVariableDeclarations:[]:void"
      ],
      "num": 39
    }
  },
  "trigger_tests": [
    {
      "test_class": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
      "test_function": "testIssue477",
      "assertion_line": "509",
      "exception": "junit.framework.AssertionFailedError",
      "message": "extra warning: Unexpected end of file"
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "com.google.javascript.jscomp.parsing.JsDocInfoParser:parseBasicTypeExpression:[JsDocToken token]:Node",
            "com.google.javascript.jscomp.parsing.JsDocInfoParser:parse:[]:boolean",
            "com.google.javascript.jscomp.parsing.JsDocInfoParser:parseFunctionType:[JsDocToken token]:Node"
          ],
          "num": 3
        },
        {
          "qualified_names": [
            "com.google.javascript.jscomp.parsing.JsDocInfoParser:parseFunctionType:[JsDocToken token]:Node",
            "com.google.javascript.jscomp.parsing.JsDocInfoParser:parseBasicTypeExpression:[JsDocToken token]:Node",
            "com.google.javascript.jscomp.parsing.JsDocInfoParser:parse:[]:boolean"
          ],
          "num": 3
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "868",
            "869",
            "1708",
            "1760"
          ],
          "num": 4
        },
        {
          "qualified_names": [
            "869",
            "870",
            "1709",
            "1762"
          ],
          "num": 4
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex 9ceae7c..167e2cb 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -865,9 +865,9 @@\n                         }\n                         break;\n                     }\n-\n-                    token \u003d eatTokensUntilEOL();\n                   }\n+\n+                  token \u003d eatTokensUntilEOL();\n                   continue retry;\n               }\n             }\n@@ -1706,6 +1706,7 @@\n       }\n     }\n \n+    restoreLookAhead(token);\n     return reportGenericTypeSyntaxWarning();\n   }\n \n@@ -1758,6 +1759,7 @@\n     // NOTE(nicksantos): We\u0027re not implementing generics at the moment, so\n     // just throw out TypeParameters.\n     if (token !\u003d JsDocToken.LP) {\n+      restoreLookAhead(token);\n       return reportTypeSyntaxWarning(\"msg.jsdoc.missing.lp\");\n     }\n \n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [57643,57667]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [59135,59159]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  },
  "patch_changed_mths": {
    "qualified_names": [
      "com.google.javascript.jscomp.parsing.JsDocInfoParser:parse()Z:regression"
    ],
    "num": 1
  }
}