{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "data/changesInfo/",
  "timeoutSecond": 300,
  "proj": "Compress",
  "id": "3",
  "workingDir": "../bugs/Compress_3_buggy",
  "inducingCommit": "6dfdfb5ddb465252644c6f80e6b13abfd211ef29",
  "originalCommit": "3608991616066c9c6dab1d19ca5591dc41a1360a",
  "bug_name": "Compress_3",
  "derive": "defects4j",
  "original_fixing_commit": "d170f34fa65e19b604f5a9e04e6ed5f81d35658c",
  "buildFiles_changed": true,
  "inducing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/compress/archivers/ArchiveOutputStream.java",
        "src/main/java/org/apache/commons/compress/archivers/ArchiveOutputStream.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "closeArchiveEntry"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "finish"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "29",
            "57"
          ],
          "num": 2
        },
        {
          "qualified_names": [
            "30",
            "31",
            "32",
            "33",
            "34",
            "35",
            "36",
            "37",
            "38",
            "39",
            "40",
            "41",
            "42",
            "43",
            "47",
            "73",
            "74",
            "75",
            "76",
            "77",
            "78",
            "79"
          ],
          "num": 22
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/compress/archivers/ArchiveOutputStream.java b/src/main/java/org/apache/commons/compress/archivers/ArchiveOutputStream.java\nindex 1729c80..2cad89d 100644\n--- a/src/main/java/org/apache/commons/compress/archivers/ArchiveOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/ArchiveOutputStream.java\n@@ -27,9 +27,24 @@\n  * {@link #write(byte[], int, int)} method to improve performance.\n  * They should also override {@link #close()} to ensure that any necessary\n  * trailers are added.\n+ * \n+ * \u003cp\u003e\n+ * The normal sequence of calls for working with ArchiveOutputStreams is:\n+ * + create ArchiveOutputStream object\n+ * + write SFX header (optional, Zip only)\n+ * + repeat as needed:\n+ *      - putArchiveEntry() (writes entry header)\n+ *      - write() (writes entry data)\n+ *      - closeArchiveEntry() (closes entry)\n+ * + finish() (ends the addition of entries)\n+ * + write additional data if format supports it (optional)\n+ * + close()\n+ * \u003c/p\u003e\n+ * \n  * \u003cp\u003e\n  * Example usage:\u003cbr/\u003e\n  * TBA\n+ * \u003c/p\u003e\n  */\n public abstract class ArchiveOutputStream extends OutputStream {\n     \n@@ -55,6 +70,13 @@\n      * @throws IOException\n      */\n     public abstract void closeArchiveEntry() throws IOException;\n+    \n+    /**\n+     * Finishes the addition of entries to this stream, without closing it.\n+     * Additional data can be written, if the format supports it.\n+     * @throws IOException\n+     */\n+    public abstract void finish() throws IOException;\n \n     /**\n      * Create an archive entry using the inputFile and entryName provided.\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [2535,2769]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003cp\u003e [1179,1182]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: The normal sequence of calls for working with ArchiveOutputStreams is: [1186,1256]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: + create ArchiveOutputStream object [1260,1295]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: + write SFX header (optional, Zip only) [1299,1338]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: + repeat as needed: [1342,1361]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: - putArchiveEntry() (writes entry header) [1370,1411]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: - write() (writes entry data) [1420,1449]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: - closeArchiveEntry() (closes entry) [1458,1494]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: + finish() (ends the addition of entries) [1498,1539]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: + write additional data if format supports it (optional) [1543,1599]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: + close() [1603,1612]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003c/p\u003e [1616,1620]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003c/p\u003e [1665,1669]"
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java",
        "src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [
            "finish"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "165"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "166",
            "167",
            "168",
            "169",
            "170",
            "171"
          ],
          "num": 6
        }
      ],
      "diff": "diff --git a/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java b/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java\nindex ee7ecee..8a48da5 100644\n--- a/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java\n@@ -163,4 +163,10 @@\n         return new ArArchiveEntry(inputFile, entryName);\n     }\n \n+    /* (non-Javadoc)\n+     * @see org.apache.commons.compress.archivers.ArchiveOutputStream#finish()\n+     */\n+    public void finish() throws IOException {\n+        // Nothing to do\n+    }\n }\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [5209,5281]"
        }
      ]
    }
  ],
  "inducing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [
        "finish"
      ],
      "num": 1
    },
    "delete_functions": {
      "qualified_names": [
        "closeArchiveEntry"
      ],
      "num": 1
    }
  },
  "trigger_tests": [
    {
      "test_class": "org.apache.commons.compress.AbstractTestCase",
      "exception": "junit.framework.AssertionFailedError",
      "message": "No tests found in org.apache.commons.compress.AbstractTestCase"
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java",
        "src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "finish",
            "setCreateUnicodeExtraFields"
          ],
          "num": 2
        },
        {
          "qualified_names": [
            "finish",
            "setCreateUnicodeExtraFields"
          ],
          "num": 2
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "52",
            "107",
            "109",
            "111",
            "156",
            "170",
            "184",
            "214",
            "318",
            "337"
          ],
          "num": 10
        },
        {
          "qualified_names": [
            "53",
            "107",
            "109",
            "111",
            "112",
            "113",
            "155",
            "169",
            "170",
            "171",
            "189",
            "220",
            "318",
            "337",
            "338",
            "339"
          ],
          "num": 16
        }
      ],
      "diff": "diff -u -r data/changesInfo//Compress_3/properties/modified_classes/inducing/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java data/changesInfo//Compress_3/cleaned/fixing/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java\n--- data/changesInfo//Compress_3/properties/modified_classes/inducing/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java\t2023-08-25 14:16:33.191613989 +0800\n+++ data/changesInfo//Compress_3/cleaned/fixing/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java\t2023-07-27 16:19:04.528859241 +0800\n@@ -153,7 +153,6 @@\n     }\n \n     public void close() throws IOException {\n-        closeArchiveEntry();\n         out.close();\n         prevEntry \u003d null;\n     }\n@@ -167,6 +166,8 @@\n      * @see org.apache.commons.compress.archivers.ArchiveOutputStream#finish()\n      */\n     public void finish() throws IOException {\n-        // Nothing to do\n+        if(haveUnclosedEntry) {\n+            throw new IOException(\"This archives contains unclosed entries.\");\n+        }\n     }\n }\ndiff -u -r data/changesInfo//Compress_3/properties/modified_classes/inducing/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java data/changesInfo//Compress_3/cleaned/fixing/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java\n--- data/changesInfo//Compress_3/properties/modified_classes/inducing/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java\t2023-07-27 16:19:52.356000000 +0800\n+++ data/changesInfo//Compress_3/cleaned/fixing/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java\t2023-07-27 16:20:28.232995146 +0800\n@@ -315,7 +315,7 @@\n             return;\n         }\n         if (this.entry !\u003d null) {\n-            closeArchiveEntry();\n+            throw new IOException(\"This archives contains unclosed entries.\");\n         }\n         this.entry \u003d new CpioArchiveEntry(this.entryFormat);\n         this.entry.setName(CPIO_TRAILER);\ndiff -u -r data/changesInfo//Compress_3/properties/modified_classes/inducing/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java data/changesInfo//Compress_3/cleaned/fixing/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java\n--- data/changesInfo//Compress_3/properties/modified_classes/inducing/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java\t2023-07-27 16:01:02.792302317 +0800\n+++ data/changesInfo//Compress_3/cleaned/fixing/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java\t2023-07-27 16:06:22.945628320 +0800\n@@ -50,6 +50,7 @@\n     private int       longFileMode \u003d LONGFILE_ERROR;\n \n     private boolean closed \u003d false;\n+    private boolean haveUnclosedEntry \u003d false;\n \n     private final OutputStream out;\n \n@@ -107,6 +108,9 @@\n      * @throws IOException on error\n      */\n     public void finish() throws IOException {\n+        if(haveUnclosedEntry) {\n+            throw new IOException(\"This archives contains unclosed entries.\");\n+        }\n         writeEOFRecord();\n         writeEOFRecord();\n     }\n@@ -182,6 +186,7 @@\n             currSize \u003d entry.getSize();\n         }\n         currName \u003d entry.getName();\n+        haveUnclosedEntry \u003d true;\n     }\n \n     /**\n@@ -212,6 +217,7 @@\n                                   + \"\u0027 before the \u0027\" + currSize\n                                   + \"\u0027 bytes specified in the header were written\");\n         }\n+        haveUnclosedEntry \u003d false;\n     }\n \n     /**\ndiff -u -r data/changesInfo//Compress_3/properties/modified_classes/inducing/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java data/changesInfo//Compress_3/cleaned/fixing/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java\n--- data/changesInfo//Compress_3/properties/modified_classes/inducing/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java\t2023-07-27 16:16:34.892000000 +0800\n+++ data/changesInfo//Compress_3/cleaned/fixing/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java\t2023-07-27 16:17:07.528714096 +0800\n@@ -334,7 +334,9 @@\n      * @throws IOException on error\n      */\n     public void finish() throws IOException {\n-        closeArchiveEntry();\n+        if(entry !\u003d null) {\n+            throw new IOException(\"This archives contains unclosed entries.\");\n+        }\n         cdOffset \u003d written;\n         for (Iterator i \u003d entries.iterator(); i.hasNext(); ) {\n             writeCentralFileHeader((ZipArchiveEntry) i.next());\ndiff -u -r data/changesInfo//Compress_3/properties/modified_classes/inducing/src/test/java/org/apache/commons/compress/IOMethodsTest.java data/changesInfo//Compress_3/cleaned/fixing/src/test/java/org/apache/commons/compress/IOMethodsTest.java\n--- data/changesInfo//Compress_3/properties/modified_classes/inducing/src/test/java/org/apache/commons/compress/IOMethodsTest.java\t2023-07-27 16:08:25.297000000 +0800\n+++ data/changesInfo//Compress_3/cleaned/fixing/src/test/java/org/apache/commons/compress/IOMethodsTest.java\t2023-07-27 16:12:09.088675328 +0800\n@@ -104,11 +104,11 @@\n         for (int i\u003d0; i\u003cbyteTest.length; i++){\n             aos1.write(byteTest[i]);            \n         }\n-        aos1.close();\n+        aos1.closeArchiveEntry();\n         aos2.write(byteTest);\n-        aos2.close();\n+        aos2.closeArchiveEntry();\n         aos3.write(byteTest, 0, byteTest.length);\n-        aos3.close();\n+        aos3.closeArchiveEntry();\n         assertEquals(\"out1!\u003dout2\",out1.toString(),out2.toString());\n         assertEquals(\"out1!\u003dout3\",out1.toString(),out3.toString());\n     }\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [9903,10011]"
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [9903,9923]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java",
        "src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "putArchiveEntry",
            "writeHeader",
            "CpioArchiveOutputStream",
            "finish",
            "writeOldAsciiEntry",
            "close"
          ],
          "num": 6
        },
        {
          "qualified_names": [
            "finish",
            "putArchiveEntry",
            "writeOldAsciiEntry",
            "writeHeader",
            "CpioArchiveOutputStream",
            "close"
          ],
          "num": 6
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "52",
            "107",
            "109",
            "111",
            "156",
            "170",
            "184",
            "214",
            "318",
            "337"
          ],
          "num": 10
        },
        {
          "qualified_names": [
            "53",
            "107",
            "109",
            "111",
            "112",
            "113",
            "155",
            "169",
            "170",
            "171",
            "189",
            "220",
            "318",
            "337",
            "338",
            "339"
          ],
          "num": 16
        }
      ],
      "diff": "diff -u -r data/changesInfo//Compress_3/properties/modified_classes/inducing/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java data/changesInfo//Compress_3/cleaned/fixing/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java\n--- data/changesInfo//Compress_3/properties/modified_classes/inducing/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java\t2023-08-25 14:16:33.191613989 +0800\n+++ data/changesInfo//Compress_3/cleaned/fixing/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java\t2023-07-27 16:19:04.528859241 +0800\n@@ -153,7 +153,6 @@\n     }\n \n     public void close() throws IOException {\n-        closeArchiveEntry();\n         out.close();\n         prevEntry \u003d null;\n     }\n@@ -167,6 +166,8 @@\n      * @see org.apache.commons.compress.archivers.ArchiveOutputStream#finish()\n      */\n     public void finish() throws IOException {\n-        // Nothing to do\n+        if(haveUnclosedEntry) {\n+            throw new IOException(\"This archives contains unclosed entries.\");\n+        }\n     }\n }\ndiff -u -r data/changesInfo//Compress_3/properties/modified_classes/inducing/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java data/changesInfo//Compress_3/cleaned/fixing/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java\n--- data/changesInfo//Compress_3/properties/modified_classes/inducing/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java\t2023-07-27 16:19:52.356000000 +0800\n+++ data/changesInfo//Compress_3/cleaned/fixing/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java\t2023-07-27 16:20:28.232995146 +0800\n@@ -315,7 +315,7 @@\n             return;\n         }\n         if (this.entry !\u003d null) {\n-            closeArchiveEntry();\n+            throw new IOException(\"This archives contains unclosed entries.\");\n         }\n         this.entry \u003d new CpioArchiveEntry(this.entryFormat);\n         this.entry.setName(CPIO_TRAILER);\ndiff -u -r data/changesInfo//Compress_3/properties/modified_classes/inducing/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java data/changesInfo//Compress_3/cleaned/fixing/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java\n--- data/changesInfo//Compress_3/properties/modified_classes/inducing/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java\t2023-07-27 16:01:02.792302317 +0800\n+++ data/changesInfo//Compress_3/cleaned/fixing/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java\t2023-07-27 16:06:22.945628320 +0800\n@@ -50,6 +50,7 @@\n     private int       longFileMode \u003d LONGFILE_ERROR;\n \n     private boolean closed \u003d false;\n+    private boolean haveUnclosedEntry \u003d false;\n \n     private final OutputStream out;\n \n@@ -107,6 +108,9 @@\n      * @throws IOException on error\n      */\n     public void finish() throws IOException {\n+        if(haveUnclosedEntry) {\n+            throw new IOException(\"This archives contains unclosed entries.\");\n+        }\n         writeEOFRecord();\n         writeEOFRecord();\n     }\n@@ -182,6 +186,7 @@\n             currSize \u003d entry.getSize();\n         }\n         currName \u003d entry.getName();\n+        haveUnclosedEntry \u003d true;\n     }\n \n     /**\n@@ -212,6 +217,7 @@\n                                   + \"\u0027 before the \u0027\" + currSize\n                                   + \"\u0027 bytes specified in the header were written\");\n         }\n+        haveUnclosedEntry \u003d false;\n     }\n \n     /**\ndiff -u -r data/changesInfo//Compress_3/properties/modified_classes/inducing/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java data/changesInfo//Compress_3/cleaned/fixing/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java\n--- data/changesInfo//Compress_3/properties/modified_classes/inducing/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java\t2023-07-27 16:16:34.892000000 +0800\n+++ data/changesInfo//Compress_3/cleaned/fixing/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java\t2023-07-27 16:17:07.528714096 +0800\n@@ -334,7 +334,9 @@\n      * @throws IOException on error\n      */\n     public void finish() throws IOException {\n-        closeArchiveEntry();\n+        if(entry !\u003d null) {\n+            throw new IOException(\"This archives contains unclosed entries.\");\n+        }\n         cdOffset \u003d written;\n         for (Iterator i \u003d entries.iterator(); i.hasNext(); ) {\n             writeCentralFileHeader((ZipArchiveEntry) i.next());\ndiff -u -r data/changesInfo//Compress_3/properties/modified_classes/inducing/src/test/java/org/apache/commons/compress/IOMethodsTest.java data/changesInfo//Compress_3/cleaned/fixing/src/test/java/org/apache/commons/compress/IOMethodsTest.java\n--- data/changesInfo//Compress_3/properties/modified_classes/inducing/src/test/java/org/apache/commons/compress/IOMethodsTest.java\t2023-07-27 16:08:25.297000000 +0800\n+++ data/changesInfo//Compress_3/cleaned/fixing/src/test/java/org/apache/commons/compress/IOMethodsTest.java\t2023-07-27 16:12:09.088675328 +0800\n@@ -104,11 +104,11 @@\n         for (int i\u003d0; i\u003cbyteTest.length; i++){\n             aos1.write(byteTest[i]);            \n         }\n-        aos1.close();\n+        aos1.closeArchiveEntry();\n         aos2.write(byteTest);\n-        aos2.close();\n+        aos2.closeArchiveEntry();\n         aos3.write(byteTest, 0, byteTest.length);\n-        aos3.close();\n+        aos3.closeArchiveEntry();\n         assertEquals(\"out1!\u003dout2\",out1.toString(),out2.toString());\n         assertEquals(\"out1!\u003dout3\",out1.toString(),out3.toString());\n     }\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "ThrowStatement [11199,11265]"
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [11199,11219]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java",
        "src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "finish",
            "close",
            "writeEntryHeader",
            "closeArchiveEntry"
          ],
          "num": 4
        },
        {
          "qualified_names": [
            "close",
            "closeArchiveEntry",
            "writeEntryHeader",
            "finish"
          ],
          "num": 4
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "52",
            "107",
            "109",
            "111",
            "156",
            "170",
            "184",
            "214",
            "318",
            "337"
          ],
          "num": 10
        },
        {
          "qualified_names": [
            "53",
            "107",
            "109",
            "111",
            "112",
            "113",
            "155",
            "169",
            "170",
            "171",
            "189",
            "220",
            "318",
            "337",
            "338",
            "339"
          ],
          "num": 16
        }
      ],
      "diff": "diff -u -r data/changesInfo//Compress_3/properties/modified_classes/inducing/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java data/changesInfo//Compress_3/cleaned/fixing/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java\n--- data/changesInfo//Compress_3/properties/modified_classes/inducing/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java\t2023-08-25 14:16:33.191613989 +0800\n+++ data/changesInfo//Compress_3/cleaned/fixing/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java\t2023-07-27 16:19:04.528859241 +0800\n@@ -153,7 +153,6 @@\n     }\n \n     public void close() throws IOException {\n-        closeArchiveEntry();\n         out.close();\n         prevEntry \u003d null;\n     }\n@@ -167,6 +166,8 @@\n      * @see org.apache.commons.compress.archivers.ArchiveOutputStream#finish()\n      */\n     public void finish() throws IOException {\n-        // Nothing to do\n+        if(haveUnclosedEntry) {\n+            throw new IOException(\"This archives contains unclosed entries.\");\n+        }\n     }\n }\ndiff -u -r data/changesInfo//Compress_3/properties/modified_classes/inducing/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java data/changesInfo//Compress_3/cleaned/fixing/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java\n--- data/changesInfo//Compress_3/properties/modified_classes/inducing/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java\t2023-07-27 16:19:52.356000000 +0800\n+++ data/changesInfo//Compress_3/cleaned/fixing/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java\t2023-07-27 16:20:28.232995146 +0800\n@@ -315,7 +315,7 @@\n             return;\n         }\n         if (this.entry !\u003d null) {\n-            closeArchiveEntry();\n+            throw new IOException(\"This archives contains unclosed entries.\");\n         }\n         this.entry \u003d new CpioArchiveEntry(this.entryFormat);\n         this.entry.setName(CPIO_TRAILER);\ndiff -u -r data/changesInfo//Compress_3/properties/modified_classes/inducing/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java data/changesInfo//Compress_3/cleaned/fixing/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java\n--- data/changesInfo//Compress_3/properties/modified_classes/inducing/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java\t2023-07-27 16:01:02.792302317 +0800\n+++ data/changesInfo//Compress_3/cleaned/fixing/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java\t2023-07-27 16:06:22.945628320 +0800\n@@ -50,6 +50,7 @@\n     private int       longFileMode \u003d LONGFILE_ERROR;\n \n     private boolean closed \u003d false;\n+    private boolean haveUnclosedEntry \u003d false;\n \n     private final OutputStream out;\n \n@@ -107,6 +108,9 @@\n      * @throws IOException on error\n      */\n     public void finish() throws IOException {\n+        if(haveUnclosedEntry) {\n+            throw new IOException(\"This archives contains unclosed entries.\");\n+        }\n         writeEOFRecord();\n         writeEOFRecord();\n     }\n@@ -182,6 +186,7 @@\n             currSize \u003d entry.getSize();\n         }\n         currName \u003d entry.getName();\n+        haveUnclosedEntry \u003d true;\n     }\n \n     /**\n@@ -212,6 +217,7 @@\n                                   + \"\u0027 before the \u0027\" + currSize\n                                   + \"\u0027 bytes specified in the header were written\");\n         }\n+        haveUnclosedEntry \u003d false;\n     }\n \n     /**\ndiff -u -r data/changesInfo//Compress_3/properties/modified_classes/inducing/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java data/changesInfo//Compress_3/cleaned/fixing/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java\n--- data/changesInfo//Compress_3/properties/modified_classes/inducing/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java\t2023-07-27 16:16:34.892000000 +0800\n+++ data/changesInfo//Compress_3/cleaned/fixing/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java\t2023-07-27 16:17:07.528714096 +0800\n@@ -334,7 +334,9 @@\n      * @throws IOException on error\n      */\n     public void finish() throws IOException {\n-        closeArchiveEntry();\n+        if(entry !\u003d null) {\n+            throw new IOException(\"This archives contains unclosed entries.\");\n+        }\n         cdOffset \u003d written;\n         for (Iterator i \u003d entries.iterator(); i.hasNext(); ) {\n             writeCentralFileHeader((ZipArchiveEntry) i.next());\ndiff -u -r data/changesInfo//Compress_3/properties/modified_classes/inducing/src/test/java/org/apache/commons/compress/IOMethodsTest.java data/changesInfo//Compress_3/cleaned/fixing/src/test/java/org/apache/commons/compress/IOMethodsTest.java\n--- data/changesInfo//Compress_3/properties/modified_classes/inducing/src/test/java/org/apache/commons/compress/IOMethodsTest.java\t2023-07-27 16:08:25.297000000 +0800\n+++ data/changesInfo//Compress_3/cleaned/fixing/src/test/java/org/apache/commons/compress/IOMethodsTest.java\t2023-07-27 16:12:09.088675328 +0800\n@@ -104,11 +104,11 @@\n         for (int i\u003d0; i\u003cbyteTest.length; i++){\n             aos1.write(byteTest[i]);            \n         }\n-        aos1.close();\n+        aos1.closeArchiveEntry();\n         aos2.write(byteTest);\n-        aos2.close();\n+        aos2.closeArchiveEntry();\n         aos3.write(byteTest, 0, byteTest.length);\n-        aos3.close();\n+        aos3.closeArchiveEntry();\n         assertEquals(\"out1!\u003dout2\",out1.toString(),out2.toString());\n         assertEquals(\"out1!\u003dout3\",out1.toString(),out3.toString());\n     }\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [5230,5342]"
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [4848,4868]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java",
        "src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "closeArchiveEntry",
            "finish",
            "putArchiveEntry"
          ],
          "num": 3
        },
        {
          "qualified_names": [
            "putArchiveEntry",
            "finish",
            "closeArchiveEntry"
          ],
          "num": 3
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "52",
            "107",
            "109",
            "111",
            "156",
            "170",
            "184",
            "214",
            "318",
            "337"
          ],
          "num": 10
        },
        {
          "qualified_names": [
            "53",
            "107",
            "109",
            "111",
            "112",
            "113",
            "155",
            "169",
            "170",
            "171",
            "189",
            "220",
            "318",
            "337",
            "338",
            "339"
          ],
          "num": 16
        }
      ],
      "diff": "diff -u -r data/changesInfo//Compress_3/properties/modified_classes/inducing/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java data/changesInfo//Compress_3/cleaned/fixing/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java\n--- data/changesInfo//Compress_3/properties/modified_classes/inducing/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java\t2023-08-25 14:16:33.191613989 +0800\n+++ data/changesInfo//Compress_3/cleaned/fixing/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java\t2023-07-27 16:19:04.528859241 +0800\n@@ -153,7 +153,6 @@\n     }\n \n     public void close() throws IOException {\n-        closeArchiveEntry();\n         out.close();\n         prevEntry \u003d null;\n     }\n@@ -167,6 +166,8 @@\n      * @see org.apache.commons.compress.archivers.ArchiveOutputStream#finish()\n      */\n     public void finish() throws IOException {\n-        // Nothing to do\n+        if(haveUnclosedEntry) {\n+            throw new IOException(\"This archives contains unclosed entries.\");\n+        }\n     }\n }\ndiff -u -r data/changesInfo//Compress_3/properties/modified_classes/inducing/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java data/changesInfo//Compress_3/cleaned/fixing/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java\n--- data/changesInfo//Compress_3/properties/modified_classes/inducing/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java\t2023-07-27 16:19:52.356000000 +0800\n+++ data/changesInfo//Compress_3/cleaned/fixing/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java\t2023-07-27 16:20:28.232995146 +0800\n@@ -315,7 +315,7 @@\n             return;\n         }\n         if (this.entry !\u003d null) {\n-            closeArchiveEntry();\n+            throw new IOException(\"This archives contains unclosed entries.\");\n         }\n         this.entry \u003d new CpioArchiveEntry(this.entryFormat);\n         this.entry.setName(CPIO_TRAILER);\ndiff -u -r data/changesInfo//Compress_3/properties/modified_classes/inducing/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java data/changesInfo//Compress_3/cleaned/fixing/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java\n--- data/changesInfo//Compress_3/properties/modified_classes/inducing/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java\t2023-07-27 16:01:02.792302317 +0800\n+++ data/changesInfo//Compress_3/cleaned/fixing/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java\t2023-07-27 16:06:22.945628320 +0800\n@@ -50,6 +50,7 @@\n     private int       longFileMode \u003d LONGFILE_ERROR;\n \n     private boolean closed \u003d false;\n+    private boolean haveUnclosedEntry \u003d false;\n \n     private final OutputStream out;\n \n@@ -107,6 +108,9 @@\n      * @throws IOException on error\n      */\n     public void finish() throws IOException {\n+        if(haveUnclosedEntry) {\n+            throw new IOException(\"This archives contains unclosed entries.\");\n+        }\n         writeEOFRecord();\n         writeEOFRecord();\n     }\n@@ -182,6 +186,7 @@\n             currSize \u003d entry.getSize();\n         }\n         currName \u003d entry.getName();\n+        haveUnclosedEntry \u003d true;\n     }\n \n     /**\n@@ -212,6 +217,7 @@\n                                   + \"\u0027 before the \u0027\" + currSize\n                                   + \"\u0027 bytes specified in the header were written\");\n         }\n+        haveUnclosedEntry \u003d false;\n     }\n \n     /**\ndiff -u -r data/changesInfo//Compress_3/properties/modified_classes/inducing/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java data/changesInfo//Compress_3/cleaned/fixing/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java\n--- data/changesInfo//Compress_3/properties/modified_classes/inducing/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java\t2023-07-27 16:16:34.892000000 +0800\n+++ data/changesInfo//Compress_3/cleaned/fixing/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java\t2023-07-27 16:17:07.528714096 +0800\n@@ -334,7 +334,9 @@\n      * @throws IOException on error\n      */\n     public void finish() throws IOException {\n-        closeArchiveEntry();\n+        if(entry !\u003d null) {\n+            throw new IOException(\"This archives contains unclosed entries.\");\n+        }\n         cdOffset \u003d written;\n         for (Iterator i \u003d entries.iterator(); i.hasNext(); ) {\n             writeCentralFileHeader((ZipArchiveEntry) i.next());\ndiff -u -r data/changesInfo//Compress_3/properties/modified_classes/inducing/src/test/java/org/apache/commons/compress/IOMethodsTest.java data/changesInfo//Compress_3/cleaned/fixing/src/test/java/org/apache/commons/compress/IOMethodsTest.java\n--- data/changesInfo//Compress_3/properties/modified_classes/inducing/src/test/java/org/apache/commons/compress/IOMethodsTest.java\t2023-07-27 16:08:25.297000000 +0800\n+++ data/changesInfo//Compress_3/cleaned/fixing/src/test/java/org/apache/commons/compress/IOMethodsTest.java\t2023-07-27 16:12:09.088675328 +0800\n@@ -104,11 +104,11 @@\n         for (int i\u003d0; i\u003cbyteTest.length; i++){\n             aos1.write(byteTest[i]);            \n         }\n-        aos1.close();\n+        aos1.closeArchiveEntry();\n         aos2.write(byteTest);\n-        aos2.close();\n+        aos2.closeArchiveEntry();\n         aos3.write(byteTest, 0, byteTest.length);\n-        aos3.close();\n+        aos3.closeArchiveEntry();\n         assertEquals(\"out1!\u003dout2\",out1.toString(),out2.toString());\n         assertEquals(\"out1!\u003dout3\",out1.toString(),out3.toString());\n     }\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldDeclaration [2023,2065]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [3904,4016]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [6867,6892]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [7986,8012]"
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  }
}